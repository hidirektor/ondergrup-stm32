
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc98  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800de7c  0800de7c  0000ee7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3bc  0800e3bc  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3bc  0800e3bc  0000f3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3c4  0800e3c4  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3c4  0800e3c4  0000f3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3c8  0800e3c8  0000f3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800e3cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  0800f39c  00010fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800f39c  00011b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f6f  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003797  00000000  00000000  00029f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0002ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ae  00000000  00000000  0002f91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5d0  00000000  00000000  0004c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05ef  00000000  00000000  0006979a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109d89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  00109dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800de64 	.word	0x0800de64

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800de64 	.word	0x0800de64

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 faca 	bl	80007d8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]
	idVerifyVal = eepromData[49];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800025c:	4b95      	ldr	r3, [pc, #596]	@ (80004b4 <eepromKontrol+0x280>)
 800025e:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000260:	4b91      	ldr	r3, [pc, #580]	@ (80004a8 <eepromKontrol+0x274>)
 8000262:	78da      	ldrb	r2, [r3, #3]
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b8f      	ldr	r3, [pc, #572]	@ (80004a8 <eepromKontrol+0x274>)
 800026a:	785a      	ldrb	r2, [r3, #1]
 800026c:	4b93      	ldr	r3, [pc, #588]	@ (80004bc <eepromKontrol+0x288>)
 800026e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000270:	4b8d      	ldr	r3, [pc, #564]	@ (80004a8 <eepromKontrol+0x274>)
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	4b92      	ldr	r3, [pc, #584]	@ (80004c0 <eepromKontrol+0x28c>)
 8000276:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000278:	4b8b      	ldr	r3, [pc, #556]	@ (80004a8 <eepromKontrol+0x274>)
 800027a:	791a      	ldrb	r2, [r3, #4]
 800027c:	4b91      	ldr	r3, [pc, #580]	@ (80004c4 <eepromKontrol+0x290>)
 800027e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000280:	4b89      	ldr	r3, [pc, #548]	@ (80004a8 <eepromKontrol+0x274>)
 8000282:	795a      	ldrb	r2, [r3, #5]
 8000284:	4b90      	ldr	r3, [pc, #576]	@ (80004c8 <eepromKontrol+0x294>)
 8000286:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000288:	4b87      	ldr	r3, [pc, #540]	@ (80004a8 <eepromKontrol+0x274>)
 800028a:	799a      	ldrb	r2, [r3, #6]
 800028c:	4b8f      	ldr	r3, [pc, #572]	@ (80004cc <eepromKontrol+0x298>)
 800028e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000290:	4b85      	ldr	r3, [pc, #532]	@ (80004a8 <eepromKontrol+0x274>)
 8000292:	79da      	ldrb	r2, [r3, #7]
 8000294:	4b8e      	ldr	r3, [pc, #568]	@ (80004d0 <eepromKontrol+0x29c>)
 8000296:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000298:	4b83      	ldr	r3, [pc, #524]	@ (80004a8 <eepromKontrol+0x274>)
 800029a:	7a1a      	ldrb	r2, [r3, #8]
 800029c:	4b8d      	ldr	r3, [pc, #564]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a0:	4b81      	ldr	r3, [pc, #516]	@ (80004a8 <eepromKontrol+0x274>)
 80002a2:	7a5a      	ldrb	r2, [r3, #9]
 80002a4:	4b8c      	ldr	r3, [pc, #560]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a8:	4b7f      	ldr	r3, [pc, #508]	@ (80004a8 <eepromKontrol+0x274>)
 80002aa:	7a9a      	ldrb	r2, [r3, #10]
 80002ac:	4b8b      	ldr	r3, [pc, #556]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b0:	4b7d      	ldr	r3, [pc, #500]	@ (80004a8 <eepromKontrol+0x274>)
 80002b2:	7ada      	ldrb	r2, [r3, #11]
 80002b4:	4b8a      	ldr	r3, [pc, #552]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b8:	4b7b      	ldr	r3, [pc, #492]	@ (80004a8 <eepromKontrol+0x274>)
 80002ba:	7b1a      	ldrb	r2, [r3, #12]
 80002bc:	4b89      	ldr	r3, [pc, #548]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002be:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c0:	4b79      	ldr	r3, [pc, #484]	@ (80004a8 <eepromKontrol+0x274>)
 80002c2:	7b5a      	ldrb	r2, [r3, #13]
 80002c4:	4b88      	ldr	r3, [pc, #544]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c8:	4b77      	ldr	r3, [pc, #476]	@ (80004a8 <eepromKontrol+0x274>)
 80002ca:	7b9a      	ldrb	r2, [r3, #14]
 80002cc:	4b87      	ldr	r3, [pc, #540]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ce:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d0:	4b75      	ldr	r3, [pc, #468]	@ (80004a8 <eepromKontrol+0x274>)
 80002d2:	7bda      	ldrb	r2, [r3, #15]
 80002d4:	4b86      	ldr	r3, [pc, #536]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d8:	4b73      	ldr	r3, [pc, #460]	@ (80004a8 <eepromKontrol+0x274>)
 80002da:	7c1a      	ldrb	r2, [r3, #16]
 80002dc:	4b85      	ldr	r3, [pc, #532]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002de:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e0:	4b71      	ldr	r3, [pc, #452]	@ (80004a8 <eepromKontrol+0x274>)
 80002e2:	7c5a      	ldrb	r2, [r3, #17]
 80002e4:	4b84      	ldr	r3, [pc, #528]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e6:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e8:	4b6f      	ldr	r3, [pc, #444]	@ (80004a8 <eepromKontrol+0x274>)
 80002ea:	7c9a      	ldrb	r2, [r3, #18]
 80002ec:	4b83      	ldr	r3, [pc, #524]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ee:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f0:	4b6d      	ldr	r3, [pc, #436]	@ (80004a8 <eepromKontrol+0x274>)
 80002f2:	7cda      	ldrb	r2, [r3, #19]
 80002f4:	4b82      	ldr	r3, [pc, #520]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f8:	4b6b      	ldr	r3, [pc, #428]	@ (80004a8 <eepromKontrol+0x274>)
 80002fa:	7d1a      	ldrb	r2, [r3, #20]
 80002fc:	4b81      	ldr	r3, [pc, #516]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fe:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000300:	4b69      	ldr	r3, [pc, #420]	@ (80004a8 <eepromKontrol+0x274>)
 8000302:	7d5a      	ldrb	r2, [r3, #21]
 8000304:	4b80      	ldr	r3, [pc, #512]	@ (8000508 <eepromKontrol+0x2d4>)
 8000306:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000308:	4b67      	ldr	r3, [pc, #412]	@ (80004a8 <eepromKontrol+0x274>)
 800030a:	7d9a      	ldrb	r2, [r3, #22]
 800030c:	4b7f      	ldr	r3, [pc, #508]	@ (800050c <eepromKontrol+0x2d8>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000310:	4b65      	ldr	r3, [pc, #404]	@ (80004a8 <eepromKontrol+0x274>)
 8000312:	7dda      	ldrb	r2, [r3, #23]
 8000314:	4b7e      	ldr	r3, [pc, #504]	@ (8000510 <eepromKontrol+0x2dc>)
 8000316:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000318:	4b63      	ldr	r3, [pc, #396]	@ (80004a8 <eepromKontrol+0x274>)
 800031a:	7e1a      	ldrb	r2, [r3, #24]
 800031c:	4b7d      	ldr	r3, [pc, #500]	@ (8000514 <eepromKontrol+0x2e0>)
 800031e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000320:	4b61      	ldr	r3, [pc, #388]	@ (80004a8 <eepromKontrol+0x274>)
 8000322:	7e5a      	ldrb	r2, [r3, #25]
 8000324:	4b7c      	ldr	r3, [pc, #496]	@ (8000518 <eepromKontrol+0x2e4>)
 8000326:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000328:	4b5f      	ldr	r3, [pc, #380]	@ (80004a8 <eepromKontrol+0x274>)
 800032a:	7e9a      	ldrb	r2, [r3, #26]
 800032c:	4b7b      	ldr	r3, [pc, #492]	@ (800051c <eepromKontrol+0x2e8>)
 800032e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000330:	4b5d      	ldr	r3, [pc, #372]	@ (80004a8 <eepromKontrol+0x274>)
 8000332:	7eda      	ldrb	r2, [r3, #27]
 8000334:	4b7a      	ldr	r3, [pc, #488]	@ (8000520 <eepromKontrol+0x2ec>)
 8000336:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000338:	4b5b      	ldr	r3, [pc, #364]	@ (80004a8 <eepromKontrol+0x274>)
 800033a:	7f1a      	ldrb	r2, [r3, #28]
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <eepromKontrol+0x2f0>)
 800033e:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000340:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <eepromKontrol+0x274>)
 8000342:	7f5a      	ldrb	r2, [r3, #29]
 8000344:	4b78      	ldr	r3, [pc, #480]	@ (8000528 <eepromKontrol+0x2f4>)
 8000346:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000348:	4b57      	ldr	r3, [pc, #348]	@ (80004a8 <eepromKontrol+0x274>)
 800034a:	7f9a      	ldrb	r2, [r3, #30]
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d2:	4b35      	ldr	r3, [pc, #212]	@ (80004a8 <eepromKontrol+0x274>)
 80003d4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d8:	4b62      	ldr	r3, [pc, #392]	@ (8000564 <eepromKontrol+0x330>)
 80003da:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <eepromKontrol+0x288>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d902      	bls.n	80003ea <eepromKontrol+0x1b6>
	    calismaSekli=0;
 80003e4:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <eepromKontrol+0x288>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d902      	bls.n	80003f8 <eepromKontrol+0x1c4>
	    emniyetCercevesi=1;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003f8:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d902      	bls.n	8000406 <eepromKontrol+0x1d2>
	    yavaslamaLimit=0;
 8000400:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000406:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <eepromKontrol+0x294>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d902      	bls.n	8000414 <eepromKontrol+0x1e0>
	    altLimit=1;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <eepromKontrol+0x294>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000414:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d902      	bls.n	8000422 <eepromKontrol+0x1ee>
	    basincSalteri=1;
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000422:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <eepromKontrol+0x29c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d902      	bls.n	8000430 <eepromKontrol+0x1fc>
	    kapiSecimleri=3;
 800042a:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <eepromKontrol+0x29c>)
 800042c:	2203      	movs	r2, #3
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000430:	4b42      	ldr	r3, [pc, #264]	@ (800053c <eepromKontrol+0x308>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d902      	bls.n	800043e <eepromKontrol+0x20a>
	    kapiAcTipi=0;
 8000438:	4b40      	ldr	r3, [pc, #256]	@ (800053c <eepromKontrol+0x308>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800043e:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d902      	bls.n	800044c <eepromKontrol+0x218>
	    kapi1Tip=1;
 8000446:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b05      	cmp	r3, #5
 8000452:	d902      	bls.n	800045a <eepromKontrol+0x226>
	    kapi1AcSure=5;
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <eepromKontrol+0x2a8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d902      	bls.n	8000468 <eepromKontrol+0x234>
	    kapi2Tip=1;
 8000462:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <eepromKontrol+0x2a8>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b05      	cmp	r3, #5
 800046e:	d902      	bls.n	8000476 <eepromKontrol+0x242>
	    kapi2AcSure=5;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d902      	bls.n	8000484 <eepromKontrol+0x250>
	    kapitablaTip=1;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000484:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <eepromKontrol+0x300>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d902      	bls.n	8000492 <eepromKontrol+0x25e>
	    kapiTablaAcKonum=2;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <eepromKontrol+0x300>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d902      	bls.n	80004a0 <eepromKontrol+0x26c>
	    kapiTablaAcSure=5;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <eepromKontrol+0x2b4>)
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	e05f      	b.n	8000568 <eepromKontrol+0x334>
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	200010e8 	.word	0x200010e8
 80004b8:	20001091 	.word	0x20001091
 80004bc:	200010bd 	.word	0x200010bd
 80004c0:	200010c0 	.word	0x200010c0
 80004c4:	200010c1 	.word	0x200010c1
 80004c8:	200010c2 	.word	0x200010c2
 80004cc:	200010c3 	.word	0x200010c3
 80004d0:	200010c4 	.word	0x200010c4
 80004d4:	200010c5 	.word	0x200010c5
 80004d8:	200010d5 	.word	0x200010d5
 80004dc:	200010c6 	.word	0x200010c6
 80004e0:	200010d6 	.word	0x200010d6
 80004e4:	200010c7 	.word	0x200010c7
 80004e8:	200010d7 	.word	0x200010d7
 80004ec:	200010ca 	.word	0x200010ca
 80004f0:	200010cb 	.word	0x200010cb
 80004f4:	200010cc 	.word	0x200010cc
 80004f8:	200010cd 	.word	0x200010cd
 80004fc:	200010ce 	.word	0x200010ce
 8000500:	200010cf 	.word	0x200010cf
 8000504:	200010d0 	.word	0x200010d0
 8000508:	200010d1 	.word	0x200010d1
 800050c:	200010d2 	.word	0x200010d2
 8000510:	200010d3 	.word	0x200010d3
 8000514:	200010d4 	.word	0x200010d4
 8000518:	200010d8 	.word	0x200010d8
 800051c:	200010da 	.word	0x200010da
 8000520:	200010b4 	.word	0x200010b4
 8000524:	200010b5 	.word	0x200010b5
 8000528:	200010b6 	.word	0x200010b6
 800052c:	200010b7 	.word	0x200010b7
 8000530:	200010dc 	.word	0x200010dc
 8000534:	200010c9 	.word	0x200010c9
 8000538:	200010db 	.word	0x200010db
 800053c:	200010c8 	.word	0x200010c8
 8000540:	200010dd 	.word	0x200010dd
 8000544:	200010de 	.word	0x200010de
 8000548:	200010df 	.word	0x200010df
 800054c:	200010e0 	.word	0x200010e0
 8000550:	200010e1 	.word	0x200010e1
 8000554:	200010e2 	.word	0x200010e2
 8000558:	200010e3 	.word	0x200010e3
 800055c:	200010e4 	.word	0x200010e4
 8000560:	200010e5 	.word	0x200010e5
 8000564:	200010e6 	.word	0x200010e6
 8000568:	d902      	bls.n	8000570 <eepromKontrol+0x33c>
	    yukariYavasLimit=0;
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <eepromKontrol+0x440>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000570:	4b41      	ldr	r3, [pc, #260]	@ (8000678 <eepromKontrol+0x444>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d902      	bls.n	800057e <eepromKontrol+0x34a>
	    devirmeYuruyusSecim=0;
 8000578:	4b3f      	ldr	r3, [pc, #252]	@ (8000678 <eepromKontrol+0x444>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800057e:	4b3f      	ldr	r3, [pc, #252]	@ (800067c <eepromKontrol+0x448>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d902      	bls.n	800058c <eepromKontrol+0x358>
	    devirmeYukariIleriLimit=1;
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <eepromKontrol+0x448>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <eepromKontrol+0x44c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d902      	bls.n	800059a <eepromKontrol+0x366>
	    devirmeAsagiGeriLimit=1;
 8000594:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <eepromKontrol+0x44c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <eepromKontrol+0x450>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d902      	bls.n	80005a8 <eepromKontrol+0x374>
	    devirmeSilindirTipi=0;
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <eepromKontrol+0x450>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005a8:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <eepromKontrol+0x454>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d902      	bls.n	80005b6 <eepromKontrol+0x382>
	    platformSilindirTipi=0;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <eepromKontrol+0x454>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005b6:	4b35      	ldr	r3, [pc, #212]	@ (800068c <eepromKontrol+0x458>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	d902      	bls.n	80005c4 <eepromKontrol+0x390>
	    yukariValfTmr=0;
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <eepromKontrol+0x458>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005c4:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <eepromKontrol+0x45c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d902      	bls.n	80005d2 <eepromKontrol+0x39e>
	    asagiValfTmr=0;
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <eepromKontrol+0x45c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005d2:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <eepromKontrol+0x460>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b05      	cmp	r3, #5
 80005d8:	d902      	bls.n	80005e0 <eepromKontrol+0x3ac>
	    devirmeYukariIleriTmr=0;
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <eepromKontrol+0x460>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <eepromKontrol+0x464>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d902      	bls.n	80005ee <eepromKontrol+0x3ba>
	    devirmeAsagiGeriTmr=0;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <eepromKontrol+0x464>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <eepromKontrol+0x468>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2bb4      	cmp	r3, #180	@ 0xb4
 80005f4:	d902      	bls.n	80005fc <eepromKontrol+0x3c8>
	    makineCalismaTmr=60;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <eepromKontrol+0x468>)
 80005f8:	223c      	movs	r2, #60	@ 0x3c
 80005fa:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <eepromKontrol+0x46c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d902      	bls.n	800060a <eepromKontrol+0x3d6>
	    buzzer=0;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <eepromKontrol+0x46c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <eepromKontrol+0x470>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d902      	bls.n	8000618 <eepromKontrol+0x3e4>
	    demoMode=0;
 8000612:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <eepromKontrol+0x470>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <eepromKontrol+0x474>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d902      	bls.n	8000626 <eepromKontrol+0x3f2>
	    calismaSayModu=0;
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <eepromKontrol+0x474>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <eepromKontrol+0x478>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d902      	bls.n	8000634 <eepromKontrol+0x400>
	    dilSecim=0;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <eepromKontrol+0x478>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <eepromKontrol+0x47c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d902      	bls.n	8000642 <eepromKontrol+0x40e>
		iotMode=0;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <eepromKontrol+0x47c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 f938 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 f8c7 	bl	80097dc <HAL_Delay>

	convertArrays(2);
 800064e:	2002      	movs	r0, #2
 8000650:	f000 f932 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 f8c1 	bl	80097dc <HAL_Delay>

	convertArrays(3);
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f92c 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000660:	20fa      	movs	r0, #250	@ 0xfa
 8000662:	f009 f8bb 	bl	80097dc <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <eepromKontrol+0x478>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fc2c 	bl	8005ec8 <loadMenuTexts>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200010ca 	.word	0x200010ca
 8000678:	200010cb 	.word	0x200010cb
 800067c:	200010cc 	.word	0x200010cc
 8000680:	200010cd 	.word	0x200010cd
 8000684:	200010ce 	.word	0x200010ce
 8000688:	200010cf 	.word	0x200010cf
 800068c:	200010d0 	.word	0x200010d0
 8000690:	200010d1 	.word	0x200010d1
 8000694:	200010d2 	.word	0x200010d2
 8000698:	200010d3 	.word	0x200010d3
 800069c:	200010d4 	.word	0x200010d4
 80006a0:	200010d8 	.word	0x200010d8
 80006a4:	200010da 	.word	0x200010da
 80006a8:	200010db 	.word	0x200010db
 80006ac:	200010dc 	.word	0x200010dc
 80006b0:	200010e7 	.word	0x200010e7

080006b4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006bc:	236e      	movs	r3, #110	@ 0x6e
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <saveEEPROM+0x38>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f816 	bl	80006f4 <EEPROM_Write>

    if(resultText == 1) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d104      	bne.n	80006d8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <saveEEPROM+0x3c>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	2002      	movs	r0, #2
 80006d4:	f008 fb28 	bl	8008d28 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006dc:	f009 f87e 	bl	80097dc <HAL_Delay>
    lcd_clear();
 80006e0:	f008 fb4e 	bl	8008d80 <lcd_clear>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000fec 	.word	0x20000fec
 80006f0:	20001860 	.word	0x20001860

080006f4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	81fb      	strh	r3, [r7, #14]
 8000702:	460b      	mov	r3, r1
 8000704:	81bb      	strh	r3, [r7, #12]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 800070a:	2306      	movs	r3, #6
 800070c:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	89bb      	ldrh	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	da00      	bge.n	800071e <EEPROM_Write+0x2a>
 800071c:	333f      	adds	r3, #63	@ 0x3f
 800071e:	119b      	asrs	r3, r3, #6
 8000720:	b29a      	uxth	r2, r3
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	4413      	add	r3, r2
 8000726:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000728:	8afa      	ldrh	r2, [r7, #22]
 800072a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	e041      	b.n	80007c2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800073e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	b21a      	sxth	r2, r3
 8000748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000758:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800075a:	8bfa      	ldrh	r2, [r7, #30]
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d901      	bls.n	8000766 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	8a79      	ldrh	r1, [r7, #18]
 800076e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000772:	9202      	str	r2, [sp, #8]
 8000774:	8bfa      	ldrh	r2, [r7, #30]
 8000776:	9201      	str	r2, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2310      	movs	r3, #16
 800077c:	460a      	mov	r2, r1
 800077e:	21a0      	movs	r1, #160	@ 0xa0
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <EEPROM_Write+0xdc>)
 8000782:	f00a f8b5 	bl	800a8f0 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800078a:	7c7b      	ldrb	r3, [r7, #17]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000790:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <EEPROM_Write+0xe0>)
 8000792:	2101      	movs	r1, #1
 8000794:	2002      	movs	r0, #2
 8000796:	f008 fac7 	bl	8008d28 <lcd_print>
            return;
 800079a:	e016      	b.n	80007ca <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800079c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800079e:	3301      	adds	r3, #1
 80007a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	8bfb      	ldrh	r3, [r7, #30]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 80007ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007b0:	8bfb      	ldrh	r3, [r7, #30]
 80007b2:	4413      	add	r3, r2
 80007b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f009 f810 	bl	80097dc <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3301      	adds	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	8abb      	ldrh	r3, [r7, #20]
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbb9      	blt.n	800073e <EEPROM_Write+0x4a>
    }
}
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000193c 	.word	0x2000193c
 80007d4:	0800de7c 	.word	0x0800de7c

080007d8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af04      	add	r7, sp, #16
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	81fb      	strh	r3, [r7, #14]
 80007e6:	460b      	mov	r3, r1
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007ee:	2306      	movs	r3, #6
 80007f0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da00      	bge.n	8000802 <EEPROM_Read+0x2a>
 8000800:	333f      	adds	r3, #63	@ 0x3f
 8000802:	119b      	asrs	r3, r3, #6
 8000804:	b29a      	uxth	r2, r3
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4413      	add	r3, r2
 800080a:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 800080c:	8afa      	ldrh	r2, [r7, #22]
 800080e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	3301      	adds	r3, #1
 8000816:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
 8000820:	e03e      	b.n	80008a0 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000822:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800083c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800083e:	8bfa      	ldrh	r2, [r7, #30]
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	429a      	cmp	r2, r3
 8000844:	d901      	bls.n	800084a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	8a79      	ldrh	r1, [r7, #18]
 8000852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000856:	9202      	str	r2, [sp, #8]
 8000858:	8bfa      	ldrh	r2, [r7, #30]
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2310      	movs	r3, #16
 8000860:	460a      	mov	r2, r1
 8000862:	21a0      	movs	r1, #160	@ 0xa0
 8000864:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <EEPROM_Read+0xd8>)
 8000866:	f00a f93d 	bl	800aae4 <HAL_I2C_Mem_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800086e:	7c7b      	ldrb	r3, [r7, #17]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000874:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <EEPROM_Read+0xdc>)
 8000876:	2101      	movs	r1, #1
 8000878:	2002      	movs	r0, #2
 800087a:	f008 fa55 	bl	8008d28 <lcd_print>
            return;
 800087e:	e013      	b.n	80008a8 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000882:	3301      	adds	r3, #1
 8000884:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	8bfb      	ldrh	r3, [r7, #30]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000894:	8bfb      	ldrh	r3, [r7, #30]
 8000896:	4413      	add	r3, r2
 8000898:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	3301      	adds	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	8abb      	ldrh	r3, [r7, #20]
 80008a2:	6a3a      	ldr	r2, [r7, #32]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbbc      	blt.n	8000822 <EEPROM_Read+0x4a>
    }
}
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000193c 	.word	0x2000193c
 80008b4:	0800de90 	.word	0x0800de90

080008b8 <convertArrays>:

void convertArrays(int state) {
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11d      	bne.n	8000902 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <convertArrays+0xe0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
 80008d0:	e013      	b.n	80008fa <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008d2:	4a32      	ldr	r2, [pc, #200]	@ (800099c <convertArrays+0xe4>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008dc:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <convertArrays+0xe8>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	@ (80009a4 <convertArrays+0xec>)
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	4413      	add	r3, r2
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	3301      	adds	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	3301      	adds	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b0b      	cmp	r3, #11
 80008fe:	dde8      	ble.n	80008d2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000900:	e045      	b.n	800098e <convertArrays+0xd6>
	} else if(state == 2) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d121      	bne.n	800094c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <convertArrays+0xf0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e017      	b.n	8000944 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <convertArrays+0xe4>)
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00e      	beq.n	800093e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <convertArrays+0xe4>)
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <convertArrays+0xf4>)
 800092c:	5c99      	ldrb	r1, [r3, r2]
 800092e:	4a20      	ldr	r2, [pc, #128]	@ (80009b0 <convertArrays+0xf8>)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4413      	add	r3, r2
 8000934:	460a      	mov	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	3301      	adds	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	dde4      	ble.n	8000914 <convertArrays+0x5c>
}
 800094a:	e020      	b.n	800098e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <convertArrays+0xfc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e017      	b.n	8000988 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000958:	4a10      	ldr	r2, [pc, #64]	@ (800099c <convertArrays+0xe4>)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00e      	beq.n	8000982 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <convertArrays+0xe4>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <convertArrays+0xf4>)
 8000970:	5c99      	ldrb	r1, [r3, r2]
 8000972:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <convertArrays+0x100>)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	3301      	adds	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	dde4      	ble.n	8000958 <convertArrays+0xa0>
}
 800098e:	bf00      	nop
 8000990:	372c      	adds	r7, #44	@ 0x2c
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000000 	.word	0x20000000
 800099c:	20000fec 	.word	0x20000fec
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20001064 	.word	0x20001064
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000018 	.word	0x20000018
 80009b0:	20001070 	.word	0x20001070
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20001080 	.word	0x20001080

080009bc <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b09f      	sub	sp, #124	@ 0x7c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009c8:	4948      	ldr	r1, [pc, #288]	@ (8000aec <ESP8266_Init+0x130>)
 80009ca:	4849      	ldr	r0, [pc, #292]	@ (8000af0 <ESP8266_Init+0x134>)
 80009cc:	f00c fe30 	bl	800d630 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009d0:	4847      	ldr	r0, [pc, #284]	@ (8000af0 <ESP8266_Init+0x134>)
 80009d2:	f7ff fc27 	bl	8000224 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	4944      	ldr	r1, [pc, #272]	@ (8000af0 <ESP8266_Init+0x134>)
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f00b ffc8 	bl	800c974 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e8:	f008 fef8 	bl	80097dc <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009ec:	4941      	ldr	r1, [pc, #260]	@ (8000af4 <ESP8266_Init+0x138>)
 80009ee:	4840      	ldr	r0, [pc, #256]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f0:	f00c fe1e 	bl	800d630 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f4:	483e      	ldr	r0, [pc, #248]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f6:	f7ff fc15 	bl	8000224 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	493b      	ldr	r1, [pc, #236]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f00b ffb6 	bl	800c974 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0c:	f008 fee6 	bl	80097dc <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a10:	4939      	ldr	r1, [pc, #228]	@ (8000af8 <ESP8266_Init+0x13c>)
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a14:	f00c fe0c 	bl	800d630 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a18:	4835      	ldr	r0, [pc, #212]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a1a:	f7ff fc03 	bl	8000224 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4932      	ldr	r1, [pc, #200]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f00b ffa4 	bl	800c974 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a30:	f008 fed4 	bl	80097dc <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a34:	4931      	ldr	r1, [pc, #196]	@ (8000afc <ESP8266_Init+0x140>)
 8000a36:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a38:	f00c fdfa 	bl	800d630 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a3c:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a3e:	f7ff fbf1 	bl	8000224 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4929      	ldr	r1, [pc, #164]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f00b ff92 	bl	800c974 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a54:	f008 fec2 	bl	80097dc <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <ESP8266_Init+0x144>)
 8000a5e:	461c      	mov	r4, r3
 8000a60:	4613      	mov	r3, r2
 8000a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a64:	c407      	stmia	r4!, {r0, r1, r2}
 8000a66:	8023      	strh	r3, [r4, #0]
 8000a68:	3402      	adds	r4, #2
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00c fe03 	bl	800d680 <strcat>
	strcat(str, "\",\"");
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbd0 	bl	8000224 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <ESP8266_Init+0x148>)
 8000a90:	6810      	ldr	r0, [r2, #0]
 8000a92:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00c fdf0 	bl	800d680 <strcat>
	strcat(str, "\"\r\n");
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbbd 	bl	8000224 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <ESP8266_Init+0x14c>)
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4912      	ldr	r1, [pc, #72]	@ (8000b0c <ESP8266_Init+0x150>)
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ac4:	f00c fdb4 	bl	800d630 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <ESP8266_Init+0x134>)
 8000aca:	f7ff fbab 	bl	8000224 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4906      	ldr	r1, [pc, #24]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f00b ff4c 	bl	800c974 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000adc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae0:	f008 fe7c 	bl	80097dc <HAL_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	377c      	adds	r7, #124	@ 0x7c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	0800dea4 	.word	0x0800dea4
 8000af0:	20001124 	.word	0x20001124
 8000af4:	0800deb4 	.word	0x0800deb4
 8000af8:	0800dec0 	.word	0x0800dec0
 8000afc:	0800dec8 	.word	0x0800dec8
 8000b00:	0800ded8 	.word	0x0800ded8
 8000b04:	0800dee8 	.word	0x0800dee8
 8000b08:	0800deec 	.word	0x0800deec
 8000b0c:	0800def0 	.word	0x0800def0

08000b10 <sendMachineData>:

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
	HAL_Delay(3000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	f5ad 7d5d 	sub.w	sp, sp, #884	@ 0x374
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	f507 745a 	add.w	r4, r7, #872	@ 0x368
 8000b1c:	f5a4 7457 	sub.w	r4, r4, #860	@ 0x35c
 8000b20:	6020      	str	r0, [r4, #0]
 8000b22:	f507 705a 	add.w	r0, r7, #872	@ 0x368
 8000b26:	f5a0 7058 	sub.w	r0, r0, #864	@ 0x360
 8000b2a:	6001      	str	r1, [r0, #0]
 8000b2c:	f507 715a 	add.w	r1, r7, #872	@ 0x368
 8000b30:	f5a1 7159 	sub.w	r1, r1, #868	@ 0x364
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000b3a:	f5a2 725a 	sub.w	r2, r2, #872	@ 0x368
 8000b3e:	6013      	str	r3, [r2, #0]
    char local_txB[50];
    char json_data[300];
    int len;

    // JSON verisini manuel olarak oluşturma
    snprintf(json_data, sizeof(json_data),
 8000b40:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000b44:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000b48:	f107 0010 	add.w	r0, r7, #16
 8000b4c:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a37      	ldr	r2, [pc, #220]	@ (8000c34 <sendMachineData+0x124>)
 8000b56:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000b5a:	f00c fd35 	bl	800d5c8 <sniprintf>
             "{\"machineID\":\"%s\",\"updateData\":%s}",
             machineID, machineData);

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b5e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8000b62:	4a35      	ldr	r2, [pc, #212]	@ (8000c38 <sendMachineData+0x128>)
 8000b64:	4935      	ldr	r1, [pc, #212]	@ (8000c3c <sendMachineData+0x12c>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00c fd62 	bl	800d630 <siprintf>
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b6c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fb57 	bl	8000224 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8000b7e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000b82:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	f00b fef4 	bl	800c974 <HAL_UART_Transmit_IT>
    HAL_Delay(4000);
 8000b8c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000b90:	f008 fe24 	bl	80097dc <HAL_Delay>

    snprintf(bufferTX, sizeof(bufferTX),
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb43 	bl	8000224 <strlen>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	9200      	str	r2, [sp, #0]
 8000bac:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <sendMachineData+0x130>)
 8000bae:	4a25      	ldr	r2, [pc, #148]	@ (8000c44 <sendMachineData+0x134>)
 8000bb0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000bb4:	f00c fd08 	bl	800d5c8 <sniprintf>
             "Host: %s\r\n"
             "Content-Type: application/json\r\n"
             "Content-Length: %d\r\n\r\n"
             "%s",
             mainServerWithPort, strlen(json_data), json_data);
    len = strlen(bufferTX);
 8000bb8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fb31 	bl	8000224 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000bc8:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8000bcc:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8000bd0:	491d      	ldr	r1, [pc, #116]	@ (8000c48 <sendMachineData+0x138>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f00c fd2c 	bl	800d630 <siprintf>

    HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000bd8:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fb21 	bl	8000224 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8000bea:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000bee:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	f00b febe 	bl	800c974 <HAL_UART_Transmit_IT>
    HAL_Delay(4000);
 8000bf8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000bfc:	f008 fdee 	bl	80097dc <HAL_Delay>

    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000c00:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fb0d 	bl	8000224 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8000c12:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000c16:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	f00b feaa 	bl	800c974 <HAL_UART_Transmit_IT>
    HAL_Delay(3000);
 8000c20:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c24:	f008 fdda 	bl	80097dc <HAL_Delay>
}
 8000c28:	bf00      	nop
 8000c2a:	f507 775b 	add.w	r7, r7, #876	@ 0x36c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800e0a8 	.word	0x0800e0a8
 8000c38:	0800dfe0 	.word	0x0800dfe0
 8000c3c:	0800dff0 	.word	0x0800dff0
 8000c40:	0800e084 	.word	0x0800e084
 8000c44:	0800e0cc 	.word	0x0800e0cc
 8000c48:	0800e098 	.word	0x0800e098

08000c4c <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c56:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <hata2EEPROM+0xa0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	4b24      	ldr	r3, [pc, #144]	@ (8000cf0 <hata2EEPROM+0xa4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a24      	ldr	r2, [pc, #144]	@ (8000cf4 <hata2EEPROM+0xa8>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c6a:	f000 f8d1 	bl	8000e10 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c6e:	e000      	b.n	8000c72 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c70:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e012      	b.n	8000c9e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <hata2EEPROM+0xa4>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <hata2EEPROM+0xa8>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d107      	bne.n	8000c98 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <hata2EEPROM+0xa4>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4918      	ldr	r1, [pc, #96]	@ (8000cf4 <hata2EEPROM+0xa8>)
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	54ca      	strb	r2, [r1, r3]
					break;
 8000c96:	e007      	b.n	8000ca8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <hata2EEPROM+0xa0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbe7      	blt.n	8000c78 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <hata2EEPROM+0xa4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	b299      	uxth	r1, r3
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <hata2EEPROM+0xa0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <hata2EEPROM+0xa4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <hata2EEPROM+0xa8>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <hata2EEPROM+0xa0>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000cc6:	9402      	str	r4, [sp, #8]
 8000cc8:	9201      	str	r2, [sp, #4]
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	4603      	mov	r3, r0
 8000cce:	460a      	mov	r2, r1
 8000cd0:	21a0      	movs	r1, #160	@ 0xa0
 8000cd2:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <hata2EEPROM+0xac>)
 8000cd4:	f009 fe0c 	bl	800a8f0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000cd8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cdc:	f008 fd7e 	bl	80097dc <HAL_Delay>
	eepromKontrol();
 8000ce0:	f7ff faa8 	bl	8000234 <eepromKontrol>
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	20000094 	.word	0x20000094
 8000cf0:	20000098 	.word	0x20000098
 8000cf4:	20000fec 	.word	0x20000fec
 8000cf8:	2000193c 	.word	0x2000193c

08000cfc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10f      	bne.n	8000d2c <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000d0c:	4a38      	ldr	r2, [pc, #224]	@ (8000df0 <hataKoduLcdGoster+0xf4>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	2001      	movs	r0, #1
 8000d12:	f008 f809 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, "1");
 8000d16:	4a37      	ldr	r2, [pc, #220]	@ (8000df4 <hataKoduLcdGoster+0xf8>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f008 f804 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d20:	4a35      	ldr	r2, [pc, #212]	@ (8000df8 <hataKoduLcdGoster+0xfc>)
 8000d22:	2107      	movs	r1, #7
 8000d24:	2002      	movs	r0, #2
 8000d26:	f007 ffff 	bl	8008d28 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d2a:	e05d      	b.n	8000de8 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10f      	bne.n	8000d52 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000d32:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <hataKoduLcdGoster+0xf4>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	2001      	movs	r0, #1
 8000d38:	f007 fff6 	bl	8008d28 <lcd_print>
		lcd_print(2, 2, "2");
 8000d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000dfc <hataKoduLcdGoster+0x100>)
 8000d3e:	2102      	movs	r1, #2
 8000d40:	2002      	movs	r0, #2
 8000d42:	f007 fff1 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d46:	4a2c      	ldr	r2, [pc, #176]	@ (8000df8 <hataKoduLcdGoster+0xfc>)
 8000d48:	2107      	movs	r1, #7
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f007 ffec 	bl	8008d28 <lcd_print>
}
 8000d50:	e04a      	b.n	8000de8 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d10f      	bne.n	8000d78 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000d58:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <hataKoduLcdGoster+0xf4>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f007 ffe3 	bl	8008d28 <lcd_print>
		lcd_print(2, 3, "3");
 8000d62:	4a27      	ldr	r2, [pc, #156]	@ (8000e00 <hataKoduLcdGoster+0x104>)
 8000d64:	2103      	movs	r1, #3
 8000d66:	2002      	movs	r0, #2
 8000d68:	f007 ffde 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d6c:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <hataKoduLcdGoster+0xfc>)
 8000d6e:	2107      	movs	r1, #7
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 ffd9 	bl	8008d28 <lcd_print>
}
 8000d76:	e037      	b.n	8000de8 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d10f      	bne.n	8000d9e <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <hataKoduLcdGoster+0xf4>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	2001      	movs	r0, #1
 8000d84:	f007 ffd0 	bl	8008d28 <lcd_print>
		lcd_print(2, 4, "4");
 8000d88:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <hataKoduLcdGoster+0x108>)
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f007 ffcb 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d92:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <hataKoduLcdGoster+0xfc>)
 8000d94:	2107      	movs	r1, #7
 8000d96:	2002      	movs	r0, #2
 8000d98:	f007 ffc6 	bl	8008d28 <lcd_print>
}
 8000d9c:	e024      	b.n	8000de8 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d10f      	bne.n	8000dc4 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000da4:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <hataKoduLcdGoster+0xf4>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	2001      	movs	r0, #1
 8000daa:	f007 ffbd 	bl	8008d28 <lcd_print>
		lcd_print(2, 5, "5");
 8000dae:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <hataKoduLcdGoster+0x10c>)
 8000db0:	2105      	movs	r1, #5
 8000db2:	2002      	movs	r0, #2
 8000db4:	f007 ffb8 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "          ");
 8000db8:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <hataKoduLcdGoster+0xfc>)
 8000dba:	2107      	movs	r1, #7
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f007 ffb3 	bl	8008d28 <lcd_print>
}
 8000dc2:	e011      	b.n	8000de8 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d10e      	bne.n	8000de8 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <hataKoduLcdGoster+0xf4>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 ffaa 	bl	8008d28 <lcd_print>
		lcd_print(2, 6, "6");
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <hataKoduLcdGoster+0x110>)
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f007 ffa5 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <hataKoduLcdGoster+0xfc>)
 8000de0:	2107      	movs	r1, #7
 8000de2:	2002      	movs	r0, #2
 8000de4:	f007 ffa0 	bl	8008d28 <lcd_print>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200018b0 	.word	0x200018b0
 8000df4:	0800e1a4 	.word	0x0800e1a4
 8000df8:	0800e1a8 	.word	0x0800e1a8
 8000dfc:	0800e1b4 	.word	0x0800e1b4
 8000e00:	0800e1b8 	.word	0x0800e1b8
 8000e04:	0800e1bc 	.word	0x0800e1bc
 8000e08:	0800e1c0 	.word	0x0800e1c0
 8000e0c:	0800e1c4 	.word	0x0800e1c4

08000e10 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e009      	b.n	8000e30 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <eepromDataFillWithEmpty+0x38>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <eepromDataFillWithEmpty+0x3c>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <eepromDataFillWithEmpty+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf0      	blt.n	8000e1c <eepromDataFillWithEmpty+0xc>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000006c 	.word	0x2000006c
 8000e4c:	20000fec 	.word	0x20000fec
 8000e50:	20000094 	.word	0x20000094

08000e54 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000e66:	4b50      	ldr	r3, [pc, #320]	@ (8000fa8 <i2cTest+0x154>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa8 <i2cTest+0x154>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000e76:	484c      	ldr	r0, [pc, #304]	@ (8000fa8 <i2cTest+0x154>)
 8000e78:	f009 fc0c 	bl	800a694 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e7c:	23c0      	movs	r3, #192	@ 0xc0
 8000e7e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000e80:	2311      	movs	r3, #17
 8000e82:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4846      	ldr	r0, [pc, #280]	@ (8000fac <i2cTest+0x158>)
 8000e92:	f009 f813 	bl	8009ebc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2140      	movs	r1, #64	@ 0x40
 8000e9a:	4844      	ldr	r0, [pc, #272]	@ (8000fac <i2cTest+0x158>)
 8000e9c:	f009 fa85 	bl	800a3aa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2180      	movs	r1, #128	@ 0x80
 8000ea4:	4841      	ldr	r0, [pc, #260]	@ (8000fac <i2cTest+0x158>)
 8000ea6:	f009 fa80 	bl	800a3aa <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f008 fc96 	bl	80097dc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000eb0:	bf00      	nop
 8000eb2:	2140      	movs	r1, #64	@ 0x40
 8000eb4:	483d      	ldr	r0, [pc, #244]	@ (8000fac <i2cTest+0x158>)
 8000eb6:	f009 fa61 	bl	800a37c <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d006      	beq.n	8000ece <i2cTest+0x7a>
 8000ec0:	2180      	movs	r1, #128	@ 0x80
 8000ec2:	483a      	ldr	r0, [pc, #232]	@ (8000fac <i2cTest+0x158>)
 8000ec4:	f009 fa5a 	bl	800a37c <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d1f1      	bne.n	8000eb2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	4836      	ldr	r0, [pc, #216]	@ (8000fac <i2cTest+0x158>)
 8000ed4:	f009 fa69 	bl	800a3aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f008 fc7f 	bl	80097dc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000ede:	bf00      	nop
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	4832      	ldr	r0, [pc, #200]	@ (8000fac <i2cTest+0x158>)
 8000ee4:	f009 fa4a 	bl	800a37c <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d0f8      	beq.n	8000ee0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	@ 0x40
 8000ef2:	482e      	ldr	r0, [pc, #184]	@ (8000fac <i2cTest+0x158>)
 8000ef4:	f009 fa59 	bl	800a3aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f008 fc6f 	bl	80097dc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000efe:	bf00      	nop
 8000f00:	2140      	movs	r1, #64	@ 0x40
 8000f02:	482a      	ldr	r0, [pc, #168]	@ (8000fac <i2cTest+0x158>)
 8000f04:	f009 fa3a 	bl	800a37c <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d0f8      	beq.n	8000f00 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	@ 0x40
 8000f12:	4826      	ldr	r0, [pc, #152]	@ (8000fac <i2cTest+0x158>)
 8000f14:	f009 fa49 	bl	800a3aa <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f008 fc5f 	bl	80097dc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000f1e:	bf00      	nop
 8000f20:	2140      	movs	r1, #64	@ 0x40
 8000f22:	4822      	ldr	r0, [pc, #136]	@ (8000fac <i2cTest+0x158>)
 8000f24:	f009 fa2a 	bl	800a37c <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d1f8      	bne.n	8000f20 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	481e      	ldr	r0, [pc, #120]	@ (8000fac <i2cTest+0x158>)
 8000f34:	f009 fa39 	bl	800a3aa <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f008 fc4f 	bl	80097dc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f3e:	bf00      	nop
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	481a      	ldr	r0, [pc, #104]	@ (8000fac <i2cTest+0x158>)
 8000f44:	f009 fa1a 	bl	800a37c <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d1f8      	bne.n	8000f40 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4e:	23c0      	movs	r3, #192	@ 0xc0
 8000f50:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000f52:	2312      	movs	r3, #18
 8000f54:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	@ (8000fac <i2cTest+0x158>)
 8000f64:	f008 ffaa 	bl	8009ebc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <i2cTest+0x154>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <i2cTest+0x154>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f76:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <i2cTest+0x154>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <i2cTest+0x154>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f86:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <i2cTest+0x154>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <i2cTest+0x154>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0201 	orr.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <i2cTest+0x154>)
 8000f9a:	f009 fa37 	bl	800a40c <HAL_I2C_Init>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000193c 	.word	0x2000193c
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000fba:	20c8      	movs	r0, #200	@ 0xc8
 8000fbc:	f008 fc0e 	bl	80097dc <HAL_Delay>
	lcd_clear();
 8000fc0:	f007 fede 	bl	8008d80 <lcd_clear>
	if(type == 1 && page == 0) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d13e      	bne.n	8001048 <printTemplate+0x98>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d13b      	bne.n	8001048 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000fd0:	4a9a      	ldr	r2, [pc, #616]	@ (800123c <printTemplate+0x28c>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f007 fea7 	bl	8008d28 <lcd_print>
		lcd_print(2, 3, "0");
 8000fda:	4a99      	ldr	r2, [pc, #612]	@ (8001240 <printTemplate+0x290>)
 8000fdc:	2103      	movs	r1, #3
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f007 fea2 	bl	8008d28 <lcd_print>
		lcd_print(2, 4, "1");
 8000fe4:	4a97      	ldr	r2, [pc, #604]	@ (8001244 <printTemplate+0x294>)
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f007 fe9d 	bl	8008d28 <lcd_print>
		lcd_print(2, 5, "2");
 8000fee:	4a96      	ldr	r2, [pc, #600]	@ (8001248 <printTemplate+0x298>)
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f007 fe98 	bl	8008d28 <lcd_print>
		lcd_print(2, 6, "3");
 8000ff8:	4a94      	ldr	r2, [pc, #592]	@ (800124c <printTemplate+0x29c>)
 8000ffa:	2106      	movs	r1, #6
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f007 fe93 	bl	8008d28 <lcd_print>
		lcd_print(2, 7, "4");
 8001002:	4a93      	ldr	r2, [pc, #588]	@ (8001250 <printTemplate+0x2a0>)
 8001004:	2107      	movs	r1, #7
 8001006:	2002      	movs	r0, #2
 8001008:	f007 fe8e 	bl	8008d28 <lcd_print>
		lcd_print(2, 10, "5");
 800100c:	4a91      	ldr	r2, [pc, #580]	@ (8001254 <printTemplate+0x2a4>)
 800100e:	210a      	movs	r1, #10
 8001010:	2002      	movs	r0, #2
 8001012:	f007 fe89 	bl	8008d28 <lcd_print>
		lcd_print(2, 11, "6");
 8001016:	4a90      	ldr	r2, [pc, #576]	@ (8001258 <printTemplate+0x2a8>)
 8001018:	210b      	movs	r1, #11
 800101a:	2002      	movs	r0, #2
 800101c:	f007 fe84 	bl	8008d28 <lcd_print>
		lcd_print(2, 12, "7");
 8001020:	4a8e      	ldr	r2, [pc, #568]	@ (800125c <printTemplate+0x2ac>)
 8001022:	210c      	movs	r1, #12
 8001024:	2002      	movs	r0, #2
 8001026:	f007 fe7f 	bl	8008d28 <lcd_print>
		lcd_print(2, 13, "8");
 800102a:	4a8d      	ldr	r2, [pc, #564]	@ (8001260 <printTemplate+0x2b0>)
 800102c:	210d      	movs	r1, #13
 800102e:	2002      	movs	r0, #2
 8001030:	f007 fe7a 	bl	8008d28 <lcd_print>
		lcd_print(2, 14, "9");
 8001034:	4a8b      	ldr	r2, [pc, #556]	@ (8001264 <printTemplate+0x2b4>)
 8001036:	210e      	movs	r1, #14
 8001038:	2002      	movs	r0, #2
 800103a:	f007 fe75 	bl	8008d28 <lcd_print>
		lcd_gotoxy(2, 3);
 800103e:	2103      	movs	r1, #3
 8001040:	2002      	movs	r0, #2
 8001042:	f007 fe52 	bl	8008cea <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8001046:	e0f5      	b.n	8001234 <printTemplate+0x284>
	} else if(type == 2) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d178      	bne.n	8001140 <printTemplate+0x190>
		if(page == 1) {
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d114      	bne.n	800107e <printTemplate+0xce>
			lcd_clear();
 8001054:	f007 fe94 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	@ 0x64
 800105a:	f008 fbbf 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800105e:	4a82      	ldr	r2, [pc, #520]	@ (8001268 <printTemplate+0x2b8>)
 8001060:	2101      	movs	r1, #1
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fe60 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001068:	4a80      	ldr	r2, [pc, #512]	@ (800126c <printTemplate+0x2bc>)
 800106a:	2107      	movs	r1, #7
 800106c:	2001      	movs	r0, #1
 800106e:	f007 fe5b 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001072:	4a7f      	ldr	r2, [pc, #508]	@ (8001270 <printTemplate+0x2c0>)
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f007 fe56 	bl	8008d28 <lcd_print>
}
 800107c:	e0da      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 2) {
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d114      	bne.n	80010ae <printTemplate+0xfe>
			lcd_clear();
 8001084:	f007 fe7c 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f008 fba7 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800108e:	4a79      	ldr	r2, [pc, #484]	@ (8001274 <printTemplate+0x2c4>)
 8001090:	2101      	movs	r1, #1
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fe48 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001098:	4a74      	ldr	r2, [pc, #464]	@ (800126c <printTemplate+0x2bc>)
 800109a:	2107      	movs	r1, #7
 800109c:	2001      	movs	r0, #1
 800109e:	f007 fe43 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010a2:	4a75      	ldr	r2, [pc, #468]	@ (8001278 <printTemplate+0x2c8>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	2002      	movs	r0, #2
 80010a8:	f007 fe3e 	bl	8008d28 <lcd_print>
}
 80010ac:	e0c2      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 3) {
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d114      	bne.n	80010de <printTemplate+0x12e>
			lcd_clear();
 80010b4:	f007 fe64 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 80010b8:	2064      	movs	r0, #100	@ 0x64
 80010ba:	f008 fb8f 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80010be:	4a6a      	ldr	r2, [pc, #424]	@ (8001268 <printTemplate+0x2b8>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	2001      	movs	r0, #1
 80010c4:	f007 fe30 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010c8:	4a68      	ldr	r2, [pc, #416]	@ (800126c <printTemplate+0x2bc>)
 80010ca:	2107      	movs	r1, #7
 80010cc:	2001      	movs	r0, #1
 80010ce:	f007 fe2b 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80010d2:	4a6a      	ldr	r2, [pc, #424]	@ (800127c <printTemplate+0x2cc>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	2002      	movs	r0, #2
 80010d8:	f007 fe26 	bl	8008d28 <lcd_print>
}
 80010dc:	e0aa      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 4) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d114      	bne.n	800110e <printTemplate+0x15e>
			lcd_clear();
 80010e4:	f007 fe4c 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	@ 0x64
 80010ea:	f008 fb77 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80010ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001268 <printTemplate+0x2b8>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	2001      	movs	r0, #1
 80010f4:	f007 fe18 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010f8:	4a5c      	ldr	r2, [pc, #368]	@ (800126c <printTemplate+0x2bc>)
 80010fa:	2107      	movs	r1, #7
 80010fc:	2001      	movs	r0, #1
 80010fe:	f007 fe13 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001102:	4a5f      	ldr	r2, [pc, #380]	@ (8001280 <printTemplate+0x2d0>)
 8001104:	2101      	movs	r1, #1
 8001106:	2002      	movs	r0, #2
 8001108:	f007 fe0e 	bl	8008d28 <lcd_print>
}
 800110c:	e092      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 5) {
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b05      	cmp	r3, #5
 8001112:	f040 808f 	bne.w	8001234 <printTemplate+0x284>
			lcd_clear();
 8001116:	f007 fe33 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f008 fb5e 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001120:	4a51      	ldr	r2, [pc, #324]	@ (8001268 <printTemplate+0x2b8>)
 8001122:	2101      	movs	r1, #1
 8001124:	2001      	movs	r0, #1
 8001126:	f007 fdff 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800112a:	4a50      	ldr	r2, [pc, #320]	@ (800126c <printTemplate+0x2bc>)
 800112c:	2107      	movs	r1, #7
 800112e:	2001      	movs	r0, #1
 8001130:	f007 fdfa 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001134:	4a53      	ldr	r2, [pc, #332]	@ (8001284 <printTemplate+0x2d4>)
 8001136:	2101      	movs	r1, #1
 8001138:	2002      	movs	r0, #2
 800113a:	f007 fdf5 	bl	8008d28 <lcd_print>
}
 800113e:	e079      	b.n	8001234 <printTemplate+0x284>
	} else if(type == 3) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d176      	bne.n	8001234 <printTemplate+0x284>
		if(page == 1) {
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d114      	bne.n	8001176 <printTemplate+0x1c6>
			lcd_clear();
 800114c:	f007 fe18 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 8001150:	2064      	movs	r0, #100	@ 0x64
 8001152:	f008 fb43 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001156:	4a4c      	ldr	r2, [pc, #304]	@ (8001288 <printTemplate+0x2d8>)
 8001158:	2101      	movs	r1, #1
 800115a:	2001      	movs	r0, #1
 800115c:	f007 fde4 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001160:	4a4a      	ldr	r2, [pc, #296]	@ (800128c <printTemplate+0x2dc>)
 8001162:	2107      	movs	r1, #7
 8001164:	2001      	movs	r0, #1
 8001166:	f007 fddf 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800116a:	4a41      	ldr	r2, [pc, #260]	@ (8001270 <printTemplate+0x2c0>)
 800116c:	2101      	movs	r1, #1
 800116e:	2002      	movs	r0, #2
 8001170:	f007 fdda 	bl	8008d28 <lcd_print>
}
 8001174:	e05e      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 2) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d114      	bne.n	80011a6 <printTemplate+0x1f6>
			lcd_clear();
 800117c:	f007 fe00 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 8001180:	2064      	movs	r0, #100	@ 0x64
 8001182:	f008 fb2b 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001186:	4a40      	ldr	r2, [pc, #256]	@ (8001288 <printTemplate+0x2d8>)
 8001188:	2101      	movs	r1, #1
 800118a:	2001      	movs	r0, #1
 800118c:	f007 fdcc 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001190:	4a3e      	ldr	r2, [pc, #248]	@ (800128c <printTemplate+0x2dc>)
 8001192:	2107      	movs	r1, #7
 8001194:	2001      	movs	r0, #1
 8001196:	f007 fdc7 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800119a:	4a37      	ldr	r2, [pc, #220]	@ (8001278 <printTemplate+0x2c8>)
 800119c:	2101      	movs	r1, #1
 800119e:	2002      	movs	r0, #2
 80011a0:	f007 fdc2 	bl	8008d28 <lcd_print>
}
 80011a4:	e046      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 3) {
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d114      	bne.n	80011d6 <printTemplate+0x226>
			lcd_clear();
 80011ac:	f007 fde8 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	@ 0x64
 80011b2:	f008 fb13 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80011b6:	4a34      	ldr	r2, [pc, #208]	@ (8001288 <printTemplate+0x2d8>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	2001      	movs	r0, #1
 80011bc:	f007 fdb4 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011c0:	4a32      	ldr	r2, [pc, #200]	@ (800128c <printTemplate+0x2dc>)
 80011c2:	2107      	movs	r1, #7
 80011c4:	2001      	movs	r0, #1
 80011c6:	f007 fdaf 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80011ca:	4a2c      	ldr	r2, [pc, #176]	@ (800127c <printTemplate+0x2cc>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	2002      	movs	r0, #2
 80011d0:	f007 fdaa 	bl	8008d28 <lcd_print>
}
 80011d4:	e02e      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 4) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d114      	bne.n	8001206 <printTemplate+0x256>
			lcd_clear();
 80011dc:	f007 fdd0 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 80011e0:	2064      	movs	r0, #100	@ 0x64
 80011e2:	f008 fafb 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80011e6:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <printTemplate+0x2d8>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	2001      	movs	r0, #1
 80011ec:	f007 fd9c 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011f0:	4a26      	ldr	r2, [pc, #152]	@ (800128c <printTemplate+0x2dc>)
 80011f2:	2107      	movs	r1, #7
 80011f4:	2001      	movs	r0, #1
 80011f6:	f007 fd97 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <printTemplate+0x2d0>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	2002      	movs	r0, #2
 8001200:	f007 fd92 	bl	8008d28 <lcd_print>
}
 8001204:	e016      	b.n	8001234 <printTemplate+0x284>
		} else if(page == 5) {
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b05      	cmp	r3, #5
 800120a:	d113      	bne.n	8001234 <printTemplate+0x284>
			lcd_clear();
 800120c:	f007 fdb8 	bl	8008d80 <lcd_clear>
			HAL_Delay(100);
 8001210:	2064      	movs	r0, #100	@ 0x64
 8001212:	f008 fae3 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <printTemplate+0x2d8>)
 8001218:	2101      	movs	r1, #1
 800121a:	2001      	movs	r0, #1
 800121c:	f007 fd84 	bl	8008d28 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001220:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <printTemplate+0x2dc>)
 8001222:	2107      	movs	r1, #7
 8001224:	2001      	movs	r0, #1
 8001226:	f007 fd7f 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800122a:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <printTemplate+0x2d4>)
 800122c:	2101      	movs	r1, #1
 800122e:	2002      	movs	r0, #2
 8001230:	f007 fd7a 	bl	8008d28 <lcd_print>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0800e1c8 	.word	0x0800e1c8
 8001240:	0800e1d0 	.word	0x0800e1d0
 8001244:	0800e1d4 	.word	0x0800e1d4
 8001248:	0800e1d8 	.word	0x0800e1d8
 800124c:	0800e1dc 	.word	0x0800e1dc
 8001250:	0800e1e0 	.word	0x0800e1e0
 8001254:	0800e1e4 	.word	0x0800e1e4
 8001258:	0800e1e8 	.word	0x0800e1e8
 800125c:	0800e1ec 	.word	0x0800e1ec
 8001260:	0800e1f0 	.word	0x0800e1f0
 8001264:	0800e1f4 	.word	0x0800e1f4
 8001268:	0800e1f8 	.word	0x0800e1f8
 800126c:	20001070 	.word	0x20001070
 8001270:	0800e20c 	.word	0x0800e20c
 8001274:	0800e220 	.word	0x0800e220
 8001278:	0800e228 	.word	0x0800e228
 800127c:	0800e23c 	.word	0x0800e23c
 8001280:	0800e250 	.word	0x0800e250
 8001284:	0800e264 	.word	0x0800e264
 8001288:	0800e278 	.word	0x0800e278
 800128c:	20001080 	.word	0x20001080

08001290 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10a      	bne.n	80012b4 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 800129e:	4a18      	ldr	r2, [pc, #96]	@ (8001300 <printCredentials+0x70>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	2002      	movs	r0, #2
 80012a4:	f007 fd40 	bl	8008d28 <lcd_print>
		lcd_print(2, 13, "    ");
 80012a8:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <printCredentials+0x74>)
 80012aa:	210d      	movs	r1, #13
 80012ac:	2002      	movs	r0, #2
 80012ae:	f007 fd3b 	bl	8008d28 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80012b2:	e021      	b.n	80012f8 <printCredentials+0x68>
	} else if(type == 2) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d10f      	bne.n	80012da <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <printCredentials+0x78>)
 80012bc:	2101      	movs	r1, #1
 80012be:	2001      	movs	r0, #1
 80012c0:	f007 fd32 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, "                ");
 80012c4:	4a11      	ldr	r2, [pc, #68]	@ (800130c <printCredentials+0x7c>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2002      	movs	r0, #2
 80012ca:	f007 fd2d 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80012ce:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <printCredentials+0x80>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	2002      	movs	r0, #2
 80012d4:	f007 fd28 	bl	8008d28 <lcd_print>
}
 80012d8:	e00e      	b.n	80012f8 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <printCredentials+0x84>)
 80012dc:	2101      	movs	r1, #1
 80012de:	2001      	movs	r0, #1
 80012e0:	f007 fd22 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, "                ");
 80012e4:	4a09      	ldr	r2, [pc, #36]	@ (800130c <printCredentials+0x7c>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	2002      	movs	r0, #2
 80012ea:	f007 fd1d 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, wifiPass);
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <printCredentials+0x88>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	2002      	movs	r0, #2
 80012f4:	f007 fd18 	bl	8008d28 <lcd_print>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20001064 	.word	0x20001064
 8001304:	0800e28c 	.word	0x0800e28c
 8001308:	0800e294 	.word	0x0800e294
 800130c:	0800e2a8 	.word	0x0800e2a8
 8001310:	20001070 	.word	0x20001070
 8001314:	0800e2bc 	.word	0x0800e2bc
 8001318:	20001080 	.word	0x20001080

0800131c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001320:	f3bf 8f4f 	dsb	sy
}
 8001324:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <__NVIC_SystemReset+0x24>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800132e:	4904      	ldr	r1, [pc, #16]	@ (8001340 <__NVIC_SystemReset+0x24>)
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <__NVIC_SystemReset+0x28>)
 8001332:	4313      	orrs	r3, r2
 8001334:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001336:	f3bf 8f4f 	dsb	sy
}
 800133a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <__NVIC_SystemReset+0x20>
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0004 	.word	0x05fa0004

08001348 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800134e:	2101      	movs	r1, #1
 8001350:	488e      	ldr	r0, [pc, #568]	@ (800158c <menu+0x244>)
 8001352:	f009 f813 	bl	800a37c <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	f040 8099 	bne.w	8001490 <menu+0x148>
 800135e:	4b8c      	ldr	r3, [pc, #560]	@ (8001590 <menu+0x248>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8091 	beq.w	8001490 <menu+0x148>
		menuSayac = menuSayac+1;
 800136e:	4b89      	ldr	r3, [pc, #548]	@ (8001594 <menu+0x24c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b87      	ldr	r3, [pc, #540]	@ (8001594 <menu+0x24c>)
 8001378:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800137a:	4b86      	ldr	r3, [pc, #536]	@ (8001594 <menu+0x24c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b24      	cmp	r3, #36	@ 0x24
 8001380:	d102      	bne.n	8001388 <menu+0x40>
			menuSayac = 1;
 8001382:	4b84      	ldr	r3, [pc, #528]	@ (8001594 <menu+0x24c>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001388:	4b82      	ldr	r3, [pc, #520]	@ (8001594 <menu+0x24c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d106      	bne.n	800139e <menu+0x56>
 8001390:	4b81      	ldr	r3, [pc, #516]	@ (8001598 <menu+0x250>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <menu+0x56>
			menuSayac = 21;
 8001398:	4b7e      	ldr	r3, [pc, #504]	@ (8001594 <menu+0x24c>)
 800139a:	2215      	movs	r2, #21
 800139c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800139e:	4b7d      	ldr	r3, [pc, #500]	@ (8001594 <menu+0x24c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d106      	bne.n	80013b4 <menu+0x6c>
 80013a6:	4b7d      	ldr	r3, [pc, #500]	@ (800159c <menu+0x254>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <menu+0x6c>
			menuSayac = 16;
 80013ae:	4b79      	ldr	r3, [pc, #484]	@ (8001594 <menu+0x24c>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013b4:	4b77      	ldr	r3, [pc, #476]	@ (8001594 <menu+0x24c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b0d      	cmp	r3, #13
 80013ba:	d106      	bne.n	80013ca <menu+0x82>
 80013bc:	4b77      	ldr	r3, [pc, #476]	@ (800159c <menu+0x254>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d102      	bne.n	80013ca <menu+0x82>
			menuSayac = 16;
 80013c4:	4b73      	ldr	r3, [pc, #460]	@ (8001594 <menu+0x24c>)
 80013c6:	2210      	movs	r2, #16
 80013c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013ca:	4b72      	ldr	r3, [pc, #456]	@ (8001594 <menu+0x24c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	d106      	bne.n	80013e0 <menu+0x98>
 80013d2:	4b72      	ldr	r3, [pc, #456]	@ (800159c <menu+0x254>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d102      	bne.n	80013e0 <menu+0x98>
			menuSayac = 13;
 80013da:	4b6e      	ldr	r3, [pc, #440]	@ (8001594 <menu+0x24c>)
 80013dc:	220d      	movs	r2, #13
 80013de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001594 <menu+0x24c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b0a      	cmp	r3, #10
 80013e6:	d10a      	bne.n	80013fe <menu+0xb6>
 80013e8:	4b6d      	ldr	r3, [pc, #436]	@ (80015a0 <menu+0x258>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d003      	beq.n	80013f8 <menu+0xb0>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <menu+0x258>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d102      	bne.n	80013fe <menu+0xb6>
			menuSayac = 11;
 80013f8:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <menu+0x24c>)
 80013fa:	220b      	movs	r2, #11
 80013fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013fe:	4b65      	ldr	r3, [pc, #404]	@ (8001594 <menu+0x24c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d10e      	bne.n	8001424 <menu+0xdc>
 8001406:	4b67      	ldr	r3, [pc, #412]	@ (80015a4 <menu+0x25c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <menu+0xce>
 800140e:	4b65      	ldr	r3, [pc, #404]	@ (80015a4 <menu+0x25c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d106      	bne.n	8001424 <menu+0xdc>
 8001416:	4b61      	ldr	r3, [pc, #388]	@ (800159c <menu+0x254>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <menu+0xdc>
			menuSayac = 16;
 800141e:	4b5d      	ldr	r3, [pc, #372]	@ (8001594 <menu+0x24c>)
 8001420:	2210      	movs	r2, #16
 8001422:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001424:	4b5b      	ldr	r3, [pc, #364]	@ (8001594 <menu+0x24c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d10e      	bne.n	800144a <menu+0x102>
 800142c:	4b5d      	ldr	r3, [pc, #372]	@ (80015a4 <menu+0x25c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d003      	beq.n	800143c <menu+0xf4>
 8001434:	4b5b      	ldr	r3, [pc, #364]	@ (80015a4 <menu+0x25c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d106      	bne.n	800144a <menu+0x102>
 800143c:	4b57      	ldr	r3, [pc, #348]	@ (800159c <menu+0x254>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d102      	bne.n	800144a <menu+0x102>
			menuSayac = 13;
 8001444:	4b53      	ldr	r3, [pc, #332]	@ (8001594 <menu+0x24c>)
 8001446:	220d      	movs	r2, #13
 8001448:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800144a:	4b52      	ldr	r3, [pc, #328]	@ (8001594 <menu+0x24c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d106      	bne.n	8001460 <menu+0x118>
 8001452:	4b55      	ldr	r3, [pc, #340]	@ (80015a8 <menu+0x260>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d102      	bne.n	8001460 <menu+0x118>
			menuSayac = 16;
 800145a:	4b4e      	ldr	r3, [pc, #312]	@ (8001594 <menu+0x24c>)
 800145c:	2210      	movs	r2, #16
 800145e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001460:	4b4c      	ldr	r3, [pc, #304]	@ (8001594 <menu+0x24c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b18      	cmp	r3, #24
 8001466:	d106      	bne.n	8001476 <menu+0x12e>
 8001468:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <menu+0x250>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <menu+0x12e>
			menuSayac = 26;
 8001470:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <menu+0x24c>)
 8001472:	221a      	movs	r2, #26
 8001474:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <menu+0x24c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b21      	cmp	r3, #33	@ 0x21
 800147c:	d106      	bne.n	800148c <menu+0x144>
 800147e:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <menu+0x264>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <menu+0x144>
			menuSayac = 35;
 8001486:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <menu+0x24c>)
 8001488:	2223      	movs	r2, #35	@ 0x23
 800148a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800148c:	f002 fca2 	bl	8003dd4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001490:	2108      	movs	r1, #8
 8001492:	4847      	ldr	r0, [pc, #284]	@ (80015b0 <menu+0x268>)
 8001494:	f008 ff72 	bl	800a37c <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 8097 	bne.w	80015ce <menu+0x286>
 80014a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <menu+0x248>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 808f 	beq.w	80015ce <menu+0x286>
		if (menuSayac <= 1) {
 80014b0:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <menu+0x24c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d802      	bhi.n	80014be <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014b8:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <menu+0x24c>)
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <menu+0x24c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <menu+0x24c>)
 80014c8:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014ca:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <menu+0x24c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b14      	cmp	r3, #20
 80014d0:	d106      	bne.n	80014e0 <menu+0x198>
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <menu+0x250>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <menu+0x198>
			menuSayac = 17;
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <menu+0x24c>)
 80014dc:	2211      	movs	r2, #17
 80014de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d106      	bne.n	80014f6 <menu+0x1ae>
 80014e8:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <menu+0x254>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <menu+0x1ae>
			menuSayac = 7;
 80014f0:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <menu+0x24c>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <menu+0x24c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	d106      	bne.n	800150c <menu+0x1c4>
 80014fe:	4b27      	ldr	r3, [pc, #156]	@ (800159c <menu+0x254>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <menu+0x1c4>
			menuSayac = 12;
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <menu+0x24c>)
 8001508:	220c      	movs	r2, #12
 800150a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <menu+0x24c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d106      	bne.n	8001522 <menu+0x1da>
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <menu+0x254>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d102      	bne.n	8001522 <menu+0x1da>
			menuSayac = 8;
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <menu+0x24c>)
 800151e:	2208      	movs	r2, #8
 8001520:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <menu+0x24c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d10a      	bne.n	8001540 <menu+0x1f8>
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <menu+0x258>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d003      	beq.n	800153a <menu+0x1f2>
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <menu+0x258>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d102      	bne.n	8001540 <menu+0x1f8>
			menuSayac = 9;
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <menu+0x24c>)
 800153c:	2209      	movs	r2, #9
 800153e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <menu+0x24c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d10a      	bne.n	800155e <menu+0x216>
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <menu+0x25c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d003      	beq.n	8001558 <menu+0x210>
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <menu+0x25c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d102      	bne.n	800155e <menu+0x216>
			menuSayac = 11;
 8001558:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <menu+0x24c>)
 800155a:	220b      	movs	r2, #11
 800155c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <menu+0x24c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	d106      	bne.n	8001574 <menu+0x22c>
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <menu+0x260>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d102      	bne.n	8001574 <menu+0x22c>
			menuSayac = 14;
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <menu+0x24c>)
 8001570:	220e      	movs	r2, #14
 8001572:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001574:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <menu+0x24c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b19      	cmp	r3, #25
 800157a:	d11b      	bne.n	80015b4 <menu+0x26c>
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <menu+0x250>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d117      	bne.n	80015b4 <menu+0x26c>
			menuSayac = 23;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <menu+0x24c>)
 8001586:	2217      	movs	r2, #23
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e013      	b.n	80015b4 <menu+0x26c>
 800158c:	40010800 	.word	0x40010800
 8001590:	200010ec 	.word	0x200010ec
 8001594:	200010bc 	.word	0x200010bc
 8001598:	200010cb 	.word	0x200010cb
 800159c:	200010c4 	.word	0x200010c4
 80015a0:	200010c5 	.word	0x200010c5
 80015a4:	200010c6 	.word	0x200010c6
 80015a8:	200010c7 	.word	0x200010c7
 80015ac:	200010e7 	.word	0x200010e7
 80015b0:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80015b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001878 <menu+0x530>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b22      	cmp	r3, #34	@ 0x22
 80015ba:	d106      	bne.n	80015ca <menu+0x282>
 80015bc:	4baf      	ldr	r3, [pc, #700]	@ (800187c <menu+0x534>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <menu+0x282>
			menuSayac = 32;
 80015c4:	4bac      	ldr	r3, [pc, #688]	@ (8001878 <menu+0x530>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015ca:	f002 fc03 	bl	8003dd4 <bekle>
	}

	if (menuSayac == 0) {
 80015ce:	4baa      	ldr	r3, [pc, #680]	@ (8001878 <menu+0x530>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80015d6:	4aaa      	ldr	r2, [pc, #680]	@ (8001880 <menu+0x538>)
 80015d8:	2101      	movs	r1, #1
 80015da:	2001      	movs	r0, #1
 80015dc:	f007 fba4 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80015e0:	4aa8      	ldr	r2, [pc, #672]	@ (8001884 <menu+0x53c>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	2002      	movs	r0, #2
 80015e6:	f007 fb9f 	bl	8008d28 <lcd_print>
	}

	if (menuSayac == 1) {
 80015ea:	4ba3      	ldr	r3, [pc, #652]	@ (8001878 <menu+0x530>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 81f4 	bne.w	80019dc <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 80015f4:	4aa4      	ldr	r2, [pc, #656]	@ (8001888 <menu+0x540>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	2001      	movs	r0, #1
 80015fa:	f007 fb95 	bl	8008d28 <lcd_print>

		if(hataGostermeSirasi == 0) {
 80015fe:	4ba3      	ldr	r3, [pc, #652]	@ (800188c <menu+0x544>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d115      	bne.n	8001632 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001606:	4aa2      	ldr	r2, [pc, #648]	@ (8001890 <menu+0x548>)
 8001608:	2101      	movs	r1, #1
 800160a:	2002      	movs	r0, #2
 800160c:	f007 fb8c 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "   ");
 8001610:	4aa0      	ldr	r2, [pc, #640]	@ (8001894 <menu+0x54c>)
 8001612:	210f      	movs	r1, #15
 8001614:	2002      	movs	r0, #2
 8001616:	f007 fb87 	bl	8008d28 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800161a:	4b9f      	ldr	r3, [pc, #636]	@ (8001898 <menu+0x550>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	220a      	movs	r2, #10
 8001620:	499e      	ldr	r1, [pc, #632]	@ (800189c <menu+0x554>)
 8001622:	4618      	mov	r0, r3
 8001624:	f00b fed6 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 8001628:	4a9c      	ldr	r2, [pc, #624]	@ (800189c <menu+0x554>)
 800162a:	210e      	movs	r1, #14
 800162c:	2002      	movs	r0, #2
 800162e:	f007 fb7b 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001632:	4b96      	ldr	r3, [pc, #600]	@ (800188c <menu+0x544>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d115      	bne.n	8001666 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800163a:	4a99      	ldr	r2, [pc, #612]	@ (80018a0 <menu+0x558>)
 800163c:	2101      	movs	r1, #1
 800163e:	2002      	movs	r0, #2
 8001640:	f007 fb72 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 8001644:	4a97      	ldr	r2, [pc, #604]	@ (80018a4 <menu+0x55c>)
 8001646:	210f      	movs	r1, #15
 8001648:	2002      	movs	r0, #2
 800164a:	f007 fb6d 	bl	8008d28 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800164e:	4b96      	ldr	r3, [pc, #600]	@ (80018a8 <menu+0x560>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	220a      	movs	r2, #10
 8001654:	4991      	ldr	r1, [pc, #580]	@ (800189c <menu+0x554>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00b febc 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 800165c:	4a8f      	ldr	r2, [pc, #572]	@ (800189c <menu+0x554>)
 800165e:	210e      	movs	r1, #14
 8001660:	2002      	movs	r0, #2
 8001662:	f007 fb61 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001666:	4b89      	ldr	r3, [pc, #548]	@ (800188c <menu+0x544>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d115      	bne.n	800169a <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 800166e:	4a8f      	ldr	r2, [pc, #572]	@ (80018ac <menu+0x564>)
 8001670:	2101      	movs	r1, #1
 8001672:	2002      	movs	r0, #2
 8001674:	f007 fb58 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 8001678:	4a8a      	ldr	r2, [pc, #552]	@ (80018a4 <menu+0x55c>)
 800167a:	210f      	movs	r1, #15
 800167c:	2002      	movs	r0, #2
 800167e:	f007 fb53 	bl	8008d28 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001682:	4b8b      	ldr	r3, [pc, #556]	@ (80018b0 <menu+0x568>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	220a      	movs	r2, #10
 8001688:	4984      	ldr	r1, [pc, #528]	@ (800189c <menu+0x554>)
 800168a:	4618      	mov	r0, r3
 800168c:	f00b fea2 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 8001690:	4a82      	ldr	r2, [pc, #520]	@ (800189c <menu+0x554>)
 8001692:	210e      	movs	r1, #14
 8001694:	2002      	movs	r0, #2
 8001696:	f007 fb47 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800169a:	4b7c      	ldr	r3, [pc, #496]	@ (800188c <menu+0x544>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d115      	bne.n	80016ce <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80016a2:	4a84      	ldr	r2, [pc, #528]	@ (80018b4 <menu+0x56c>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	2002      	movs	r0, #2
 80016a8:	f007 fb3e 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 80016ac:	4a7d      	ldr	r2, [pc, #500]	@ (80018a4 <menu+0x55c>)
 80016ae:	210f      	movs	r1, #15
 80016b0:	2002      	movs	r0, #2
 80016b2:	f007 fb39 	bl	8008d28 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80016b6:	4b80      	ldr	r3, [pc, #512]	@ (80018b8 <menu+0x570>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	220a      	movs	r2, #10
 80016bc:	4977      	ldr	r1, [pc, #476]	@ (800189c <menu+0x554>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b fe88 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 80016c4:	4a75      	ldr	r2, [pc, #468]	@ (800189c <menu+0x554>)
 80016c6:	210e      	movs	r1, #14
 80016c8:	2002      	movs	r0, #2
 80016ca:	f007 fb2d 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016ce:	4b6f      	ldr	r3, [pc, #444]	@ (800188c <menu+0x544>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d115      	bne.n	8001702 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80016d6:	4a79      	ldr	r2, [pc, #484]	@ (80018bc <menu+0x574>)
 80016d8:	2101      	movs	r1, #1
 80016da:	2002      	movs	r0, #2
 80016dc:	f007 fb24 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 80016e0:	4a70      	ldr	r2, [pc, #448]	@ (80018a4 <menu+0x55c>)
 80016e2:	210f      	movs	r1, #15
 80016e4:	2002      	movs	r0, #2
 80016e6:	f007 fb1f 	bl	8008d28 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016ea:	4b75      	ldr	r3, [pc, #468]	@ (80018c0 <menu+0x578>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	220a      	movs	r2, #10
 80016f0:	496a      	ldr	r1, [pc, #424]	@ (800189c <menu+0x554>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00b fe6e 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 80016f8:	4a68      	ldr	r2, [pc, #416]	@ (800189c <menu+0x554>)
 80016fa:	210e      	movs	r1, #14
 80016fc:	2002      	movs	r0, #2
 80016fe:	f007 fb13 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001702:	4b62      	ldr	r3, [pc, #392]	@ (800188c <menu+0x544>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d115      	bne.n	8001736 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800170a:	4a6e      	ldr	r2, [pc, #440]	@ (80018c4 <menu+0x57c>)
 800170c:	2101      	movs	r1, #1
 800170e:	2002      	movs	r0, #2
 8001710:	f007 fb0a 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 8001714:	4a63      	ldr	r2, [pc, #396]	@ (80018a4 <menu+0x55c>)
 8001716:	210f      	movs	r1, #15
 8001718:	2002      	movs	r0, #2
 800171a:	f007 fb05 	bl	8008d28 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800171e:	4b6a      	ldr	r3, [pc, #424]	@ (80018c8 <menu+0x580>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	220a      	movs	r2, #10
 8001724:	495d      	ldr	r1, [pc, #372]	@ (800189c <menu+0x554>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fe54 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 800172c:	4a5b      	ldr	r2, [pc, #364]	@ (800189c <menu+0x554>)
 800172e:	210e      	movs	r1, #14
 8001730:	2002      	movs	r0, #2
 8001732:	f007 faf9 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001736:	4b55      	ldr	r3, [pc, #340]	@ (800188c <menu+0x544>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b06      	cmp	r3, #6
 800173c:	d115      	bne.n	800176a <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800173e:	4a63      	ldr	r2, [pc, #396]	@ (80018cc <menu+0x584>)
 8001740:	2101      	movs	r1, #1
 8001742:	2002      	movs	r0, #2
 8001744:	f007 faf0 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 8001748:	4a56      	ldr	r2, [pc, #344]	@ (80018a4 <menu+0x55c>)
 800174a:	210f      	movs	r1, #15
 800174c:	2002      	movs	r0, #2
 800174e:	f007 faeb 	bl	8008d28 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001752:	4b5f      	ldr	r3, [pc, #380]	@ (80018d0 <menu+0x588>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	220a      	movs	r2, #10
 8001758:	4950      	ldr	r1, [pc, #320]	@ (800189c <menu+0x554>)
 800175a:	4618      	mov	r0, r3
 800175c:	f00b fe3a 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <menu+0x554>)
 8001762:	210e      	movs	r1, #14
 8001764:	2002      	movs	r0, #2
 8001766:	f007 fadf 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800176a:	4b48      	ldr	r3, [pc, #288]	@ (800188c <menu+0x544>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b07      	cmp	r3, #7
 8001770:	d115      	bne.n	800179e <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001772:	4a58      	ldr	r2, [pc, #352]	@ (80018d4 <menu+0x58c>)
 8001774:	2101      	movs	r1, #1
 8001776:	2002      	movs	r0, #2
 8001778:	f007 fad6 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 800177c:	4a49      	ldr	r2, [pc, #292]	@ (80018a4 <menu+0x55c>)
 800177e:	210f      	movs	r1, #15
 8001780:	2002      	movs	r0, #2
 8001782:	f007 fad1 	bl	8008d28 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001786:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <menu+0x590>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	220a      	movs	r2, #10
 800178c:	4943      	ldr	r1, [pc, #268]	@ (800189c <menu+0x554>)
 800178e:	4618      	mov	r0, r3
 8001790:	f00b fe20 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 8001794:	4a41      	ldr	r2, [pc, #260]	@ (800189c <menu+0x554>)
 8001796:	210e      	movs	r1, #14
 8001798:	2002      	movs	r0, #2
 800179a:	f007 fac5 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <menu+0x544>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d115      	bne.n	80017d2 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80017a6:	4a4d      	ldr	r2, [pc, #308]	@ (80018dc <menu+0x594>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	2002      	movs	r0, #2
 80017ac:	f007 fabc 	bl	8008d28 <lcd_print>
			lcd_print(2, 15, "  ");
 80017b0:	4a3c      	ldr	r2, [pc, #240]	@ (80018a4 <menu+0x55c>)
 80017b2:	210f      	movs	r1, #15
 80017b4:	2002      	movs	r0, #2
 80017b6:	f007 fab7 	bl	8008d28 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <menu+0x598>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	220a      	movs	r2, #10
 80017c0:	4936      	ldr	r1, [pc, #216]	@ (800189c <menu+0x554>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00b fe06 	bl	800d3d4 <itoa>
			lcd_print(2, 14, snum);
 80017c8:	4a34      	ldr	r2, [pc, #208]	@ (800189c <menu+0x554>)
 80017ca:	210e      	movs	r1, #14
 80017cc:	2002      	movs	r0, #2
 80017ce:	f007 faab 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <menu+0x544>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b09      	cmp	r3, #9
 80017d8:	d115      	bne.n	8001806 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80017da:	4a42      	ldr	r2, [pc, #264]	@ (80018e4 <menu+0x59c>)
 80017dc:	2101      	movs	r1, #1
 80017de:	2002      	movs	r0, #2
 80017e0:	f007 faa2 	bl	8008d28 <lcd_print>
			lcd_print(2, 16, " ");
 80017e4:	4a40      	ldr	r2, [pc, #256]	@ (80018e8 <menu+0x5a0>)
 80017e6:	2110      	movs	r1, #16
 80017e8:	2002      	movs	r0, #2
 80017ea:	f007 fa9d 	bl	8008d28 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017ee:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <menu+0x5a4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	220a      	movs	r2, #10
 80017f4:	4929      	ldr	r1, [pc, #164]	@ (800189c <menu+0x554>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00b fdec 	bl	800d3d4 <itoa>
			lcd_print(2, 15, snum);
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <menu+0x554>)
 80017fe:	210f      	movs	r1, #15
 8001800:	2002      	movs	r0, #2
 8001802:	f007 fa91 	bl	8008d28 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <menu+0x544>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b0a      	cmp	r3, #10
 800180c:	d104      	bne.n	8001818 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 800180e:	4a38      	ldr	r2, [pc, #224]	@ (80018f0 <menu+0x5a8>)
 8001810:	2101      	movs	r1, #1
 8001812:	2002      	movs	r0, #2
 8001814:	f007 fa88 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001818:	2102      	movs	r1, #2
 800181a:	4836      	ldr	r0, [pc, #216]	@ (80018f4 <menu+0x5ac>)
 800181c:	f008 fdae 	bl	800a37c <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d119      	bne.n	800185a <menu+0x512>
 8001826:	4b34      	ldr	r3, [pc, #208]	@ (80018f8 <menu+0x5b0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f083 0301 	eor.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d012      	beq.n	800185a <menu+0x512>
 8001834:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <menu+0x5b4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10e      	bne.n	800185a <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <menu+0x544>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <menu+0x544>)
 8001846:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <menu+0x544>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d902      	bls.n	8001856 <menu+0x50e>
				hataGostermeSirasi = 0;
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <menu+0x544>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001856:	f002 fabd 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800185a:	2104      	movs	r1, #4
 800185c:	4825      	ldr	r0, [pc, #148]	@ (80018f4 <menu+0x5ac>)
 800185e:	f008 fd8d 	bl	800a37c <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d15e      	bne.n	8001926 <menu+0x5de>
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <menu+0x5b0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d057      	beq.n	8001926 <menu+0x5de>
 8001876:	e043      	b.n	8001900 <menu+0x5b8>
 8001878:	200010bc 	.word	0x200010bc
 800187c:	200010e7 	.word	0x200010e7
 8001880:	20001220 	.word	0x20001220
 8001884:	20001234 	.word	0x20001234
 8001888:	20001248 	.word	0x20001248
 800188c:	200010be 	.word	0x200010be
 8001890:	2000125c 	.word	0x2000125c
 8001894:	0800e2d0 	.word	0x0800e2d0
 8001898:	200010dd 	.word	0x200010dd
 800189c:	2000105c 	.word	0x2000105c
 80018a0:	20001270 	.word	0x20001270
 80018a4:	0800e2d4 	.word	0x0800e2d4
 80018a8:	200010de 	.word	0x200010de
 80018ac:	20001284 	.word	0x20001284
 80018b0:	200010df 	.word	0x200010df
 80018b4:	20001298 	.word	0x20001298
 80018b8:	200010e0 	.word	0x200010e0
 80018bc:	200012ac 	.word	0x200012ac
 80018c0:	200010e1 	.word	0x200010e1
 80018c4:	200012c0 	.word	0x200012c0
 80018c8:	200010e2 	.word	0x200010e2
 80018cc:	200012d4 	.word	0x200012d4
 80018d0:	200010e3 	.word	0x200010e3
 80018d4:	200012e8 	.word	0x200012e8
 80018d8:	200010e4 	.word	0x200010e4
 80018dc:	200012fc 	.word	0x200012fc
 80018e0:	200010e5 	.word	0x200010e5
 80018e4:	20001310 	.word	0x20001310
 80018e8:	0800e2d8 	.word	0x0800e2d8
 80018ec:	200010e6 	.word	0x200010e6
 80018f0:	20001324 	.word	0x20001324
 80018f4:	40010800 	.word	0x40010800
 80018f8:	200010ec 	.word	0x200010ec
 80018fc:	200010cb 	.word	0x200010cb
 8001900:	4b8a      	ldr	r3, [pc, #552]	@ (8001b2c <menu+0x7e4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10e      	bne.n	8001926 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001908:	4b89      	ldr	r3, [pc, #548]	@ (8001b30 <menu+0x7e8>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b87      	ldr	r3, [pc, #540]	@ (8001b30 <menu+0x7e8>)
 8001912:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001914:	4b86      	ldr	r3, [pc, #536]	@ (8001b30 <menu+0x7e8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b0b      	cmp	r3, #11
 800191a:	d902      	bls.n	8001922 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 800191c:	4b84      	ldr	r3, [pc, #528]	@ (8001b30 <menu+0x7e8>)
 800191e:	220a      	movs	r2, #10
 8001920:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001922:	f002 fa57 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001926:	2108      	movs	r1, #8
 8001928:	4882      	ldr	r0, [pc, #520]	@ (8001b34 <menu+0x7ec>)
 800192a:	f008 fd27 	bl	800a37c <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d153      	bne.n	80019dc <menu+0x694>
 8001934:	4b80      	ldr	r3, [pc, #512]	@ (8001b38 <menu+0x7f0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04c      	beq.n	80019dc <menu+0x694>
 8001942:	4b7b      	ldr	r3, [pc, #492]	@ (8001b30 <menu+0x7e8>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d148      	bne.n	80019dc <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 800194a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b3c <menu+0x7f4>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	4b7b      	ldr	r3, [pc, #492]	@ (8001b40 <menu+0x7f8>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001958:	4b7a      	ldr	r3, [pc, #488]	@ (8001b44 <menu+0x7fc>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	4b78      	ldr	r3, [pc, #480]	@ (8001b40 <menu+0x7f8>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001966:	4b78      	ldr	r3, [pc, #480]	@ (8001b48 <menu+0x800>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	4b74      	ldr	r3, [pc, #464]	@ (8001b40 <menu+0x7f8>)
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001974:	4b75      	ldr	r3, [pc, #468]	@ (8001b4c <menu+0x804>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	4b71      	ldr	r3, [pc, #452]	@ (8001b40 <menu+0x7f8>)
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001982:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <menu+0x808>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	4b6d      	ldr	r3, [pc, #436]	@ (8001b40 <menu+0x7f8>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001990:	4b70      	ldr	r3, [pc, #448]	@ (8001b54 <menu+0x80c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	4b6a      	ldr	r3, [pc, #424]	@ (8001b40 <menu+0x7f8>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800199e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b58 <menu+0x810>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <menu+0x7f8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019ac:	4b6b      	ldr	r3, [pc, #428]	@ (8001b5c <menu+0x814>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <menu+0x7f8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019ba:	4b69      	ldr	r3, [pc, #420]	@ (8001b60 <menu+0x818>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <menu+0x7f8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <menu+0x81c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001b40 <menu+0x7f8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80019d6:	4b64      	ldr	r3, [pc, #400]	@ (8001b68 <menu+0x820>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019dc:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <menu+0x824>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	f040 808e 	bne.w	8001b02 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80019e6:	4a62      	ldr	r2, [pc, #392]	@ (8001b70 <menu+0x828>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	2001      	movs	r0, #1
 80019ec:	f007 f99c 	bl	8008d28 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019f0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b2c <menu+0x7e4>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d003      	beq.n	8001a00 <menu+0x6b8>
 80019f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <menu+0x7e4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d104      	bne.n	8001a0a <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001a00:	4a5c      	ldr	r2, [pc, #368]	@ (8001b74 <menu+0x82c>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	2002      	movs	r0, #2
 8001a06:	f007 f98f 	bl	8008d28 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <menu+0x830>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d108      	bne.n	8001a24 <menu+0x6dc>
 8001a12:	4b46      	ldr	r3, [pc, #280]	@ (8001b2c <menu+0x7e4>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d104      	bne.n	8001a24 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001a1a:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <menu+0x834>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f007 f982 	bl	8008d28 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a24:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <menu+0x830>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <menu+0x6f6>
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <menu+0x7e4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d104      	bne.n	8001a3e <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001a34:	4a52      	ldr	r2, [pc, #328]	@ (8001b80 <menu+0x838>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f007 f975 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a3e:	2102      	movs	r1, #2
 8001a40:	483c      	ldr	r0, [pc, #240]	@ (8001b34 <menu+0x7ec>)
 8001a42:	f008 fc9b 	bl	800a37c <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d119      	bne.n	8001a80 <menu+0x738>
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <menu+0x7f0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <menu+0x738>
 8001a5a:	4b34      	ldr	r3, [pc, #208]	@ (8001b2c <menu+0x7e4>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001a62:	4b45      	ldr	r3, [pc, #276]	@ (8001b78 <menu+0x830>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <menu+0x830>)
 8001a6c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a6e:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <menu+0x830>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d902      	bls.n	8001a7c <menu+0x734>
				calismaSekli = 0;
 8001a76:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <menu+0x830>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a7c:	f002 f9aa 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a80:	2104      	movs	r1, #4
 8001a82:	482c      	ldr	r0, [pc, #176]	@ (8001b34 <menu+0x7ec>)
 8001a84:	f008 fc7a 	bl	800a37c <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d119      	bne.n	8001ac2 <menu+0x77a>
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <menu+0x7f0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	f083 0301 	eor.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d012      	beq.n	8001ac2 <menu+0x77a>
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <menu+0x7e4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10e      	bne.n	8001ac2 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001aa4:	4b34      	ldr	r3, [pc, #208]	@ (8001b78 <menu+0x830>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <menu+0x830>)
 8001aae:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ab0:	4b31      	ldr	r3, [pc, #196]	@ (8001b78 <menu+0x830>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <menu+0x776>
	    		calismaSekli = 1;
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <menu+0x830>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001abe:	f002 f989 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	481b      	ldr	r0, [pc, #108]	@ (8001b34 <menu+0x7ec>)
 8001ac6:	f008 fc59 	bl	800a37c <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d118      	bne.n	8001b02 <menu+0x7ba>
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <menu+0x7f0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f083 0301 	eor.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001ade:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <menu+0x830>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <menu+0x7f8>)
 8001ae4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <menu+0x830>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d106      	bne.n	8001afc <menu+0x7b4>
				altLimit = 1;
 8001aee:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <menu+0x83c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001af4:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <menu+0x83c>)
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <menu+0x7f8>)
 8001afa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <menu+0x820>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <menu+0x824>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	f040 809c 	bne.w	8001c44 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <menu+0x840>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2001      	movs	r0, #1
 8001b12:	f007 f909 	bl	8008d28 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <menu+0x844>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d13a      	bne.n	8001b94 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <menu+0x848>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	2002      	movs	r0, #2
 8001b24:	f007 f900 	bl	8008d28 <lcd_print>
 8001b28:	e03d      	b.n	8001ba6 <menu+0x85e>
 8001b2a:	bf00      	nop
 8001b2c:	200010cb 	.word	0x200010cb
 8001b30:	200010be 	.word	0x200010be
 8001b34:	40010800 	.word	0x40010800
 8001b38:	200010ec 	.word	0x200010ec
 8001b3c:	200010dd 	.word	0x200010dd
 8001b40:	20000fec 	.word	0x20000fec
 8001b44:	200010de 	.word	0x200010de
 8001b48:	200010df 	.word	0x200010df
 8001b4c:	200010e0 	.word	0x200010e0
 8001b50:	200010e1 	.word	0x200010e1
 8001b54:	200010e2 	.word	0x200010e2
 8001b58:	200010e3 	.word	0x200010e3
 8001b5c:	200010e4 	.word	0x200010e4
 8001b60:	200010e5 	.word	0x200010e5
 8001b64:	200010e6 	.word	0x200010e6
 8001b68:	200010e9 	.word	0x200010e9
 8001b6c:	200010bc 	.word	0x200010bc
 8001b70:	20001338 	.word	0x20001338
 8001b74:	2000134c 	.word	0x2000134c
 8001b78:	200010bd 	.word	0x200010bd
 8001b7c:	20001360 	.word	0x20001360
 8001b80:	20001374 	.word	0x20001374
 8001b84:	200010c2 	.word	0x200010c2
 8001b88:	20001388 	.word	0x20001388
 8001b8c:	200010c0 	.word	0x200010c0
 8001b90:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 8001b94:	4b6b      	ldr	r3, [pc, #428]	@ (8001d44 <menu+0x9fc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d104      	bne.n	8001ba6 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001d48 <menu+0xa00>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f007 f8c1 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4868      	ldr	r0, [pc, #416]	@ (8001d4c <menu+0xa04>)
 8001baa:	f008 fbe7 	bl	800a37c <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d115      	bne.n	8001be0 <menu+0x898>
 8001bb4:	4b66      	ldr	r3, [pc, #408]	@ (8001d50 <menu+0xa08>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f083 0301 	eor.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00e      	beq.n	8001be0 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001bc2:	4b60      	ldr	r3, [pc, #384]	@ (8001d44 <menu+0x9fc>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b5e      	ldr	r3, [pc, #376]	@ (8001d44 <menu+0x9fc>)
 8001bcc:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001bce:	4b5d      	ldr	r3, [pc, #372]	@ (8001d44 <menu+0x9fc>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d902      	bls.n	8001bdc <menu+0x894>
				emniyetCercevesi = 0;
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d44 <menu+0x9fc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bdc:	f002 f8fa 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001be0:	2104      	movs	r1, #4
 8001be2:	485a      	ldr	r0, [pc, #360]	@ (8001d4c <menu+0xa04>)
 8001be4:	f008 fbca 	bl	800a37c <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d115      	bne.n	8001c1a <menu+0x8d2>
 8001bee:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <menu+0xa08>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001bfc:	4b51      	ldr	r3, [pc, #324]	@ (8001d44 <menu+0x9fc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b4f      	ldr	r3, [pc, #316]	@ (8001d44 <menu+0x9fc>)
 8001c06:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c08:	4b4e      	ldr	r3, [pc, #312]	@ (8001d44 <menu+0x9fc>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001c10:	4b4c      	ldr	r3, [pc, #304]	@ (8001d44 <menu+0x9fc>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c16:	f002 f8dd 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	484b      	ldr	r0, [pc, #300]	@ (8001d4c <menu+0xa04>)
 8001c1e:	f008 fbad 	bl	800a37c <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <menu+0x8fc>
 8001c28:	4b49      	ldr	r3, [pc, #292]	@ (8001d50 <menu+0xa08>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001c36:	4b43      	ldr	r3, [pc, #268]	@ (8001d44 <menu+0x9fc>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <menu+0xa0c>)
 8001c3c:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c3e:	4b46      	ldr	r3, [pc, #280]	@ (8001d58 <menu+0xa10>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c44:	4b45      	ldr	r3, [pc, #276]	@ (8001d5c <menu+0xa14>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d166      	bne.n	8001d1a <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001c4c:	4a44      	ldr	r2, [pc, #272]	@ (8001d60 <menu+0xa18>)
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2001      	movs	r0, #1
 8001c52:	f007 f869 	bl	8008d28 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001c56:	4b43      	ldr	r3, [pc, #268]	@ (8001d64 <menu+0xa1c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001c5e:	4a42      	ldr	r2, [pc, #264]	@ (8001d68 <menu+0xa20>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	2002      	movs	r0, #2
 8001c64:	f007 f860 	bl	8008d28 <lcd_print>
 8001c68:	e008      	b.n	8001c7c <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d64 <menu+0xa1c>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d104      	bne.n	8001c7c <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001c72:	4a3e      	ldr	r2, [pc, #248]	@ (8001d6c <menu+0xa24>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	2002      	movs	r0, #2
 8001c78:	f007 f856 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4833      	ldr	r0, [pc, #204]	@ (8001d4c <menu+0xa04>)
 8001c80:	f008 fb7c 	bl	800a37c <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d115      	bne.n	8001cb6 <menu+0x96e>
 8001c8a:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <menu+0xa08>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	f083 0301 	eor.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001c98:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <menu+0xa1c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b30      	ldr	r3, [pc, #192]	@ (8001d64 <menu+0xa1c>)
 8001ca2:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <menu+0xa1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d902      	bls.n	8001cb2 <menu+0x96a>
				yavaslamaLimit = 0;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <menu+0xa1c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cb2:	f002 f88f 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	4824      	ldr	r0, [pc, #144]	@ (8001d4c <menu+0xa04>)
 8001cba:	f008 fb5f 	bl	800a37c <HAL_GPIO_ReadPin>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d115      	bne.n	8001cf0 <menu+0x9a8>
 8001cc4:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <menu+0xa08>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00e      	beq.n	8001cf0 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001cd2:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <menu+0xa1c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <menu+0xa1c>)
 8001cdc:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <menu+0xa1c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <menu+0xa1c>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cec:	f002 f872 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	4816      	ldr	r0, [pc, #88]	@ (8001d4c <menu+0xa04>)
 8001cf4:	f008 fb42 	bl	800a37c <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10d      	bne.n	8001d1a <menu+0x9d2>
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <menu+0xa08>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <menu+0xa1c>)
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <menu+0xa0c>)
 8001d12:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d14:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <menu+0xa10>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <menu+0xa14>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	f040 80aa 	bne.w	8001e78 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <menu+0xa28>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f006 fffd 	bl	8008d28 <lcd_print>

		if(altLimit == 0) {
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <menu+0xa2c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d120      	bne.n	8001d78 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001d36:	4a0c      	ldr	r2, [pc, #48]	@ (8001d68 <menu+0xa20>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f006 fff4 	bl	8008d28 <lcd_print>
 8001d40:	e023      	b.n	8001d8a <menu+0xa42>
 8001d42:	bf00      	nop
 8001d44:	200010c0 	.word	0x200010c0
 8001d48:	200000ec 	.word	0x200000ec
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	200010ec 	.word	0x200010ec
 8001d54:	20000fec 	.word	0x20000fec
 8001d58:	200010e9 	.word	0x200010e9
 8001d5c:	200010bc 	.word	0x200010bc
 8001d60:	200013c4 	.word	0x200013c4
 8001d64:	200010c1 	.word	0x200010c1
 8001d68:	2000139c 	.word	0x2000139c
 8001d6c:	200013b0 	.word	0x200013b0
 8001d70:	200013d8 	.word	0x200013d8
 8001d74:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 8001d78:	4b89      	ldr	r3, [pc, #548]	@ (8001fa0 <menu+0xc58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d104      	bne.n	8001d8a <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001d80:	4a88      	ldr	r2, [pc, #544]	@ (8001fa4 <menu+0xc5c>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	2002      	movs	r0, #2
 8001d86:	f006 ffcf 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4886      	ldr	r0, [pc, #536]	@ (8001fa8 <menu+0xc60>)
 8001d8e:	f008 faf5 	bl	800a37c <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d119      	bne.n	8001dcc <menu+0xa84>
 8001d98:	4b84      	ldr	r3, [pc, #528]	@ (8001fac <menu+0xc64>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <menu+0xa84>
 8001da6:	4b82      	ldr	r3, [pc, #520]	@ (8001fb0 <menu+0xc68>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <menu+0xa84>
			altLimit = altLimit + 1;
 8001dae:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa0 <menu+0xc58>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa0 <menu+0xc58>)
 8001db8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001dba:	4b79      	ldr	r3, [pc, #484]	@ (8001fa0 <menu+0xc58>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d902      	bls.n	8001dc8 <menu+0xa80>
				altLimit = 0;
 8001dc2:	4b77      	ldr	r3, [pc, #476]	@ (8001fa0 <menu+0xc58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc8:	f002 f804 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4876      	ldr	r0, [pc, #472]	@ (8001fa8 <menu+0xc60>)
 8001dd0:	f008 fad4 	bl	800a37c <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d119      	bne.n	8001e0e <menu+0xac6>
 8001dda:	4b74      	ldr	r3, [pc, #464]	@ (8001fac <menu+0xc64>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <menu+0xac6>
 8001de8:	4b71      	ldr	r3, [pc, #452]	@ (8001fb0 <menu+0xc68>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10e      	bne.n	8001e0e <menu+0xac6>
			altLimit = altLimit - 1;
 8001df0:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa0 <menu+0xc58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b69      	ldr	r3, [pc, #420]	@ (8001fa0 <menu+0xc58>)
 8001dfa:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001dfc:	4b68      	ldr	r3, [pc, #416]	@ (8001fa0 <menu+0xc58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <menu+0xac2>
		   		altLimit = 1;
 8001e04:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <menu+0xc58>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e0a:	f001 ffe3 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4865      	ldr	r0, [pc, #404]	@ (8001fa8 <menu+0xc60>)
 8001e12:	f008 fab3 	bl	800a37c <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d12d      	bne.n	8001e78 <menu+0xb30>
 8001e1c:	4b63      	ldr	r3, [pc, #396]	@ (8001fac <menu+0xc64>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d026      	beq.n	8001e78 <menu+0xb30>
			eepromData[5] = altLimit;
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <menu+0xc58>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b61      	ldr	r3, [pc, #388]	@ (8001fb4 <menu+0xc6c>)
 8001e30:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e32:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa0 <menu+0xc58>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d110      	bne.n	8001e5c <menu+0xb14>
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb8 <menu+0xc70>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <menu+0xb02>
 8001e42:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <menu+0xc70>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d108      	bne.n	8001e5c <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb8 <menu+0xc70>)
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e50:	4b59      	ldr	r3, [pc, #356]	@ (8001fb8 <menu+0xc70>)
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b57      	ldr	r3, [pc, #348]	@ (8001fb4 <menu+0xc6c>)
 8001e56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001e5a:	e00a      	b.n	8001e72 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001e5c:	4b50      	ldr	r3, [pc, #320]	@ (8001fa0 <menu+0xc58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d106      	bne.n	8001e72 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001e64:	4b55      	ldr	r3, [pc, #340]	@ (8001fbc <menu+0xc74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001e6a:	4b54      	ldr	r3, [pc, #336]	@ (8001fbc <menu+0xc74>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <menu+0xc6c>)
 8001e70:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001e72:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <menu+0xc78>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001e78:	4b52      	ldr	r3, [pc, #328]	@ (8001fc4 <menu+0xc7c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d166      	bne.n	8001f4e <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001e80:	4a51      	ldr	r2, [pc, #324]	@ (8001fc8 <menu+0xc80>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	2001      	movs	r0, #1
 8001e86:	f006 ff4f 	bl	8008d28 <lcd_print>

		if(basincSalteri == 0) {
 8001e8a:	4b50      	ldr	r3, [pc, #320]	@ (8001fcc <menu+0xc84>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001e92:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd0 <menu+0xc88>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	2002      	movs	r0, #2
 8001e98:	f006 ff46 	bl	8008d28 <lcd_print>
 8001e9c:	e008      	b.n	8001eb0 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <menu+0xc84>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d104      	bne.n	8001eb0 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa4 <menu+0xc5c>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f006 ff3c 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	483d      	ldr	r0, [pc, #244]	@ (8001fa8 <menu+0xc60>)
 8001eb4:	f008 fa62 	bl	800a37c <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d115      	bne.n	8001eea <menu+0xba2>
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <menu+0xc64>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	f083 0301 	eor.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fcc <menu+0xc84>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fcc <menu+0xc84>)
 8001ed6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fcc <menu+0xc84>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d902      	bls.n	8001ee6 <menu+0xb9e>
				basincSalteri = 0;
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fcc <menu+0xc84>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee6:	f001 ff75 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eea:	2104      	movs	r1, #4
 8001eec:	482e      	ldr	r0, [pc, #184]	@ (8001fa8 <menu+0xc60>)
 8001eee:	f008 fa45 	bl	800a37c <HAL_GPIO_ReadPin>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d115      	bne.n	8001f24 <menu+0xbdc>
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8001fac <menu+0xc64>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00e      	beq.n	8001f24 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001f06:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <menu+0xc84>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <menu+0xc84>)
 8001f10:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001f12:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <menu+0xc84>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <menu+0xbd8>
		   		basincSalteri = 1;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <menu+0xc84>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f20:	f001 ff58 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f24:	2108      	movs	r1, #8
 8001f26:	4820      	ldr	r0, [pc, #128]	@ (8001fa8 <menu+0xc60>)
 8001f28:	f008 fa28 	bl	800a37c <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10d      	bne.n	8001f4e <menu+0xc06>
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <menu+0xc64>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001f40:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <menu+0xc84>)
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <menu+0xc6c>)
 8001f46:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <menu+0xc78>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <menu+0xc7c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b07      	cmp	r3, #7
 8001f54:	f040 80a9 	bne.w	80020aa <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001f58:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <menu+0xc8c>)
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f006 fee3 	bl	8008d28 <lcd_print>

		if(kapiSecimleri == 0) {
 8001f62:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <menu+0xc90>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001f6a:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <menu+0xc88>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f006 feda 	bl	8008d28 <lcd_print>
 8001f74:	e03f      	b.n	8001ff6 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <menu+0xc90>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <menu+0xc94>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	2002      	movs	r0, #2
 8001f84:	f006 fed0 	bl	8008d28 <lcd_print>
 8001f88:	e035      	b.n	8001ff6 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <menu+0xc90>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d128      	bne.n	8001fe4 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001f92:	4a13      	ldr	r2, [pc, #76]	@ (8001fe0 <menu+0xc98>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	2002      	movs	r0, #2
 8001f98:	f006 fec6 	bl	8008d28 <lcd_print>
 8001f9c:	e02b      	b.n	8001ff6 <menu+0xcae>
 8001f9e:	bf00      	nop
 8001fa0:	200010c2 	.word	0x200010c2
 8001fa4:	200013b0 	.word	0x200013b0
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	200010ec 	.word	0x200010ec
 8001fb0:	200010bd 	.word	0x200010bd
 8001fb4:	20000fec 	.word	0x20000fec
 8001fb8:	200010c9 	.word	0x200010c9
 8001fbc:	200010cf 	.word	0x200010cf
 8001fc0:	200010e9 	.word	0x200010e9
 8001fc4:	200010bc 	.word	0x200010bc
 8001fc8:	200013ec 	.word	0x200013ec
 8001fcc:	200010c3 	.word	0x200010c3
 8001fd0:	2000139c 	.word	0x2000139c
 8001fd4:	20001400 	.word	0x20001400
 8001fd8:	200010c4 	.word	0x200010c4
 8001fdc:	20001414 	.word	0x20001414
 8001fe0:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8001fe4:	4b76      	ldr	r3, [pc, #472]	@ (80021c0 <menu+0xe78>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d104      	bne.n	8001ff6 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001fec:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <menu+0xe7c>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f006 fe99 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4873      	ldr	r0, [pc, #460]	@ (80021c8 <menu+0xe80>)
 8001ffa:	f008 f9bf 	bl	800a37c <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d115      	bne.n	8002030 <menu+0xce8>
 8002004:	4b71      	ldr	r3, [pc, #452]	@ (80021cc <menu+0xe84>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002012:	4b6b      	ldr	r3, [pc, #428]	@ (80021c0 <menu+0xe78>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b69      	ldr	r3, [pc, #420]	@ (80021c0 <menu+0xe78>)
 800201c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800201e:	4b68      	ldr	r3, [pc, #416]	@ (80021c0 <menu+0xe78>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d902      	bls.n	800202c <menu+0xce4>
				kapiSecimleri = 0;
 8002026:	4b66      	ldr	r3, [pc, #408]	@ (80021c0 <menu+0xe78>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800202c:	f001 fed2 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002030:	2104      	movs	r1, #4
 8002032:	4865      	ldr	r0, [pc, #404]	@ (80021c8 <menu+0xe80>)
 8002034:	f008 f9a2 	bl	800a37c <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d115      	bne.n	800206a <menu+0xd22>
 800203e:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <menu+0xe84>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00e      	beq.n	800206a <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 800204c:	4b5c      	ldr	r3, [pc, #368]	@ (80021c0 <menu+0xe78>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	3b01      	subs	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b5a      	ldr	r3, [pc, #360]	@ (80021c0 <menu+0xe78>)
 8002056:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002058:	4b59      	ldr	r3, [pc, #356]	@ (80021c0 <menu+0xe78>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d902      	bls.n	8002066 <menu+0xd1e>
		   		kapiSecimleri = 3;
 8002060:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <menu+0xe78>)
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002066:	f001 feb5 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800206a:	2108      	movs	r1, #8
 800206c:	4856      	ldr	r0, [pc, #344]	@ (80021c8 <menu+0xe80>)
 800206e:	f008 f985 	bl	800a37c <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d118      	bne.n	80020aa <menu+0xd62>
 8002078:	4b54      	ldr	r3, [pc, #336]	@ (80021cc <menu+0xe84>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d011      	beq.n	80020aa <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8002086:	4b4e      	ldr	r3, [pc, #312]	@ (80021c0 <menu+0xe78>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b51      	ldr	r3, [pc, #324]	@ (80021d0 <menu+0xe88>)
 800208c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800208e:	4b4c      	ldr	r3, [pc, #304]	@ (80021c0 <menu+0xe78>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <menu+0xd5c>
				altLimit = 1;
 8002096:	4b4f      	ldr	r3, [pc, #316]	@ (80021d4 <menu+0xe8c>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800209c:	4b4d      	ldr	r3, [pc, #308]	@ (80021d4 <menu+0xe8c>)
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	4b4b      	ldr	r3, [pc, #300]	@ (80021d0 <menu+0xe88>)
 80020a2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80020a4:	4b4c      	ldr	r3, [pc, #304]	@ (80021d8 <menu+0xe90>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80020aa:	4b4c      	ldr	r3, [pc, #304]	@ (80021dc <menu+0xe94>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d167      	bne.n	8002182 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80020b2:	4a4b      	ldr	r2, [pc, #300]	@ (80021e0 <menu+0xe98>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	2001      	movs	r0, #1
 80020b8:	f006 fe36 	bl	8008d28 <lcd_print>

		if(kapiAcTipi == 0) {
 80020bc:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <menu+0xe9c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 80020c4:	4a48      	ldr	r2, [pc, #288]	@ (80021e8 <menu+0xea0>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2002      	movs	r0, #2
 80020ca:	f006 fe2d 	bl	8008d28 <lcd_print>
 80020ce:	e008      	b.n	80020e2 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 80020d0:	4b44      	ldr	r3, [pc, #272]	@ (80021e4 <menu+0xe9c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d104      	bne.n	80020e2 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 80020d8:	4a44      	ldr	r2, [pc, #272]	@ (80021ec <menu+0xea4>)
 80020da:	2101      	movs	r1, #1
 80020dc:	2002      	movs	r0, #2
 80020de:	f006 fe23 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e2:	2102      	movs	r1, #2
 80020e4:	4838      	ldr	r0, [pc, #224]	@ (80021c8 <menu+0xe80>)
 80020e6:	f008 f949 	bl	800a37c <HAL_GPIO_ReadPin>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d115      	bne.n	800211c <menu+0xdd4>
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <menu+0xe84>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00e      	beq.n	800211c <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 80020fe:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <menu+0xe9c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b37      	ldr	r3, [pc, #220]	@ (80021e4 <menu+0xe9c>)
 8002108:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800210a:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <menu+0xe9c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d902      	bls.n	8002118 <menu+0xdd0>
				kapiAcTipi = 0;
 8002112:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <menu+0xe9c>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002118:	f001 fe5c 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800211c:	2104      	movs	r1, #4
 800211e:	482a      	ldr	r0, [pc, #168]	@ (80021c8 <menu+0xe80>)
 8002120:	f008 f92c 	bl	800a37c <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d115      	bne.n	8002156 <menu+0xe0e>
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <menu+0xe84>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00e      	beq.n	8002156 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002138:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <menu+0xe9c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3b01      	subs	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <menu+0xe9c>)
 8002142:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <menu+0xe9c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <menu+0xe0a>
		   		kapiAcTipi = 1;
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <menu+0xe9c>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002152:	f001 fe3f 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002156:	2108      	movs	r1, #8
 8002158:	481b      	ldr	r0, [pc, #108]	@ (80021c8 <menu+0xe80>)
 800215a:	f008 f90f 	bl	800a37c <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10e      	bne.n	8002182 <menu+0xe3a>
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <menu+0xe84>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8002172:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <menu+0xe9c>)
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <menu+0xe88>)
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 800217c:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <menu+0xe90>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <menu+0xe94>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b09      	cmp	r3, #9
 8002188:	f040 8092 	bne.w	80022b0 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 800218c:	4a18      	ldr	r2, [pc, #96]	@ (80021f0 <menu+0xea8>)
 800218e:	2101      	movs	r1, #1
 8002190:	2001      	movs	r0, #1
 8002192:	f006 fdc9 	bl	8008d28 <lcd_print>

		if(kapi1Tip == 0) {
 8002196:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <menu+0xeac>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 800219e:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <menu+0xeb0>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	2002      	movs	r0, #2
 80021a4:	f006 fdc0 	bl	8008d28 <lcd_print>
 80021a8:	e033      	b.n	8002212 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <menu+0xeac>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d126      	bne.n	8002200 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <menu+0xeb4>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	2002      	movs	r0, #2
 80021b8:	f006 fdb6 	bl	8008d28 <lcd_print>
 80021bc:	e029      	b.n	8002212 <menu+0xeca>
 80021be:	bf00      	nop
 80021c0:	200010c4 	.word	0x200010c4
 80021c4:	2000143c 	.word	0x2000143c
 80021c8:	40010800 	.word	0x40010800
 80021cc:	200010ec 	.word	0x200010ec
 80021d0:	20000fec 	.word	0x20000fec
 80021d4:	200010c2 	.word	0x200010c2
 80021d8:	200010e9 	.word	0x200010e9
 80021dc:	200010bc 	.word	0x200010bc
 80021e0:	20001450 	.word	0x20001450
 80021e4:	200010c8 	.word	0x200010c8
 80021e8:	20001464 	.word	0x20001464
 80021ec:	20001478 	.word	0x20001478
 80021f0:	2000148c 	.word	0x2000148c
 80021f4:	200010c5 	.word	0x200010c5
 80021f8:	20000100 	.word	0x20000100
 80021fc:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 8002200:	4b73      	ldr	r3, [pc, #460]	@ (80023d0 <menu+0x1088>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d104      	bne.n	8002212 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002208:	4a72      	ldr	r2, [pc, #456]	@ (80023d4 <menu+0x108c>)
 800220a:	2101      	movs	r1, #1
 800220c:	2002      	movs	r0, #2
 800220e:	f006 fd8b 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002212:	2102      	movs	r1, #2
 8002214:	4870      	ldr	r0, [pc, #448]	@ (80023d8 <menu+0x1090>)
 8002216:	f008 f8b1 	bl	800a37c <HAL_GPIO_ReadPin>
 800221a:	4603      	mov	r3, r0
 800221c:	2b01      	cmp	r3, #1
 800221e:	d115      	bne.n	800224c <menu+0xf04>
 8002220:	4b6e      	ldr	r3, [pc, #440]	@ (80023dc <menu+0x1094>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00e      	beq.n	800224c <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800222e:	4b68      	ldr	r3, [pc, #416]	@ (80023d0 <menu+0x1088>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b66      	ldr	r3, [pc, #408]	@ (80023d0 <menu+0x1088>)
 8002238:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800223a:	4b65      	ldr	r3, [pc, #404]	@ (80023d0 <menu+0x1088>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d902      	bls.n	8002248 <menu+0xf00>
				kapi1Tip = 0;
 8002242:	4b63      	ldr	r3, [pc, #396]	@ (80023d0 <menu+0x1088>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002248:	f001 fdc4 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800224c:	2104      	movs	r1, #4
 800224e:	4862      	ldr	r0, [pc, #392]	@ (80023d8 <menu+0x1090>)
 8002250:	f008 f894 	bl	800a37c <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d115      	bne.n	8002286 <menu+0xf3e>
 800225a:	4b60      	ldr	r3, [pc, #384]	@ (80023dc <menu+0x1094>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002268:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <menu+0x1088>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b57      	ldr	r3, [pc, #348]	@ (80023d0 <menu+0x1088>)
 8002272:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002274:	4b56      	ldr	r3, [pc, #344]	@ (80023d0 <menu+0x1088>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d902      	bls.n	8002282 <menu+0xf3a>
		   		kapi1Tip = 2;
 800227c:	4b54      	ldr	r3, [pc, #336]	@ (80023d0 <menu+0x1088>)
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002282:	f001 fda7 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002286:	2108      	movs	r1, #8
 8002288:	4853      	ldr	r0, [pc, #332]	@ (80023d8 <menu+0x1090>)
 800228a:	f008 f877 	bl	800a37c <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10d      	bne.n	80022b0 <menu+0xf68>
 8002294:	4b51      	ldr	r3, [pc, #324]	@ (80023dc <menu+0x1094>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80022a2:	4b4b      	ldr	r3, [pc, #300]	@ (80023d0 <menu+0x1088>)
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	4b4e      	ldr	r3, [pc, #312]	@ (80023e0 <menu+0x1098>)
 80022a8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80022aa:	4b4e      	ldr	r3, [pc, #312]	@ (80023e4 <menu+0x109c>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80022b0:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <menu+0x10a0>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b0a      	cmp	r3, #10
 80022b6:	d16c      	bne.n	8002392 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80022b8:	4a4c      	ldr	r2, [pc, #304]	@ (80023ec <menu+0x10a4>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	2001      	movs	r0, #1
 80022be:	f006 fd33 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80022c2:	4a4b      	ldr	r2, [pc, #300]	@ (80023f0 <menu+0x10a8>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	2002      	movs	r0, #2
 80022c8:	f006 fd2e 	bl	8008d28 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80022cc:	4b49      	ldr	r3, [pc, #292]	@ (80023f4 <menu+0x10ac>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	220a      	movs	r2, #10
 80022d2:	4949      	ldr	r1, [pc, #292]	@ (80023f8 <menu+0x10b0>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00b f87d 	bl	800d3d4 <itoa>
		lcd_print(2,16,snum);
 80022da:	4a47      	ldr	r2, [pc, #284]	@ (80023f8 <menu+0x10b0>)
 80022dc:	2110      	movs	r1, #16
 80022de:	2002      	movs	r0, #2
 80022e0:	f006 fd22 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80022e4:	2102      	movs	r1, #2
 80022e6:	483c      	ldr	r0, [pc, #240]	@ (80023d8 <menu+0x1090>)
 80022e8:	f008 f848 	bl	800a37c <HAL_GPIO_ReadPin>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d119      	bne.n	8002326 <menu+0xfde>
 80022f2:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <menu+0x1094>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f083 0301 	eor.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <menu+0xfde>
 8002300:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <menu+0x1088>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10e      	bne.n	8002326 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002308:	4b3a      	ldr	r3, [pc, #232]	@ (80023f4 <menu+0x10ac>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <menu+0x10ac>)
 8002312:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002314:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <menu+0x10ac>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d902      	bls.n	8002322 <menu+0xfda>
				kapi1AcSure = 0;
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <menu+0x10ac>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002322:	f001 fd57 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002326:	2104      	movs	r1, #4
 8002328:	482b      	ldr	r0, [pc, #172]	@ (80023d8 <menu+0x1090>)
 800232a:	f008 f827 	bl	800a37c <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d119      	bne.n	8002368 <menu+0x1020>
 8002334:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <menu+0x1094>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <menu+0x1020>
 8002342:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <menu+0x1088>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10e      	bne.n	8002368 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800234a:	4b2a      	ldr	r3, [pc, #168]	@ (80023f4 <menu+0x10ac>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3b01      	subs	r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <menu+0x10ac>)
 8002354:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002356:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <menu+0x10ac>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <menu+0x101c>
		   		kapi1AcSure = 5;
 800235e:	4b25      	ldr	r3, [pc, #148]	@ (80023f4 <menu+0x10ac>)
 8002360:	2205      	movs	r2, #5
 8002362:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002364:	f001 fd36 	bl	8003dd4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002368:	2108      	movs	r1, #8
 800236a:	481b      	ldr	r0, [pc, #108]	@ (80023d8 <menu+0x1090>)
 800236c:	f008 f806 	bl	800a37c <HAL_GPIO_ReadPin>
 8002370:	4603      	mov	r3, r0
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10d      	bne.n	8002392 <menu+0x104a>
 8002376:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <menu+0x1094>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002384:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <menu+0x10ac>)
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <menu+0x1098>)
 800238a:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800238c:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <menu+0x109c>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <menu+0x10a0>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b0b      	cmp	r3, #11
 8002398:	f040 8090 	bne.w	80024bc <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 800239c:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <menu+0x10b4>)
 800239e:	2101      	movs	r1, #1
 80023a0:	2001      	movs	r0, #1
 80023a2:	f006 fcc1 	bl	8008d28 <lcd_print>

		if(kapi2Tip == 0) {
 80023a6:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <menu+0x10b8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80023ae:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <menu+0x10bc>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2002      	movs	r0, #2
 80023b4:	f006 fcb8 	bl	8008d28 <lcd_print>
 80023b8:	e031      	b.n	800241e <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <menu+0x10b8>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d124      	bne.n	800240c <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80023c2:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <menu+0x10c0>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	2002      	movs	r0, #2
 80023c8:	f006 fcae 	bl	8008d28 <lcd_print>
 80023cc:	e027      	b.n	800241e <menu+0x10d6>
 80023ce:	bf00      	nop
 80023d0:	200010c5 	.word	0x200010c5
 80023d4:	20000114 	.word	0x20000114
 80023d8:	40010800 	.word	0x40010800
 80023dc:	200010ec 	.word	0x200010ec
 80023e0:	20000fec 	.word	0x20000fec
 80023e4:	200010e9 	.word	0x200010e9
 80023e8:	200010bc 	.word	0x200010bc
 80023ec:	200014b4 	.word	0x200014b4
 80023f0:	200014c8 	.word	0x200014c8
 80023f4:	200010d5 	.word	0x200010d5
 80023f8:	2000105c 	.word	0x2000105c
 80023fc:	200014dc 	.word	0x200014dc
 8002400:	200010c6 	.word	0x200010c6
 8002404:	20000100 	.word	0x20000100
 8002408:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 800240c:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <menu+0x1294>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d104      	bne.n	800241e <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002414:	4a72      	ldr	r2, [pc, #456]	@ (80025e0 <menu+0x1298>)
 8002416:	2101      	movs	r1, #1
 8002418:	2002      	movs	r0, #2
 800241a:	f006 fc85 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800241e:	2102      	movs	r1, #2
 8002420:	4870      	ldr	r0, [pc, #448]	@ (80025e4 <menu+0x129c>)
 8002422:	f007 ffab 	bl	800a37c <HAL_GPIO_ReadPin>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d115      	bne.n	8002458 <menu+0x1110>
 800242c:	4b6e      	ldr	r3, [pc, #440]	@ (80025e8 <menu+0x12a0>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00e      	beq.n	8002458 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800243a:	4b68      	ldr	r3, [pc, #416]	@ (80025dc <menu+0x1294>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <menu+0x1294>)
 8002444:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002446:	4b65      	ldr	r3, [pc, #404]	@ (80025dc <menu+0x1294>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <menu+0x110c>
				kapi2Tip = 0;
 800244e:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <menu+0x1294>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002454:	f001 fcbe 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002458:	2104      	movs	r1, #4
 800245a:	4862      	ldr	r0, [pc, #392]	@ (80025e4 <menu+0x129c>)
 800245c:	f007 ff8e 	bl	800a37c <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d115      	bne.n	8002492 <menu+0x114a>
 8002466:	4b60      	ldr	r3, [pc, #384]	@ (80025e8 <menu+0x12a0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	f083 0301 	eor.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <menu+0x1294>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	3b01      	subs	r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b57      	ldr	r3, [pc, #348]	@ (80025dc <menu+0x1294>)
 800247e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002480:	4b56      	ldr	r3, [pc, #344]	@ (80025dc <menu+0x1294>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d902      	bls.n	800248e <menu+0x1146>
		   		kapi2Tip = 2;
 8002488:	4b54      	ldr	r3, [pc, #336]	@ (80025dc <menu+0x1294>)
 800248a:	2202      	movs	r2, #2
 800248c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800248e:	f001 fca1 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002492:	2108      	movs	r1, #8
 8002494:	4853      	ldr	r0, [pc, #332]	@ (80025e4 <menu+0x129c>)
 8002496:	f007 ff71 	bl	800a37c <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10d      	bne.n	80024bc <menu+0x1174>
 80024a0:	4b51      	ldr	r3, [pc, #324]	@ (80025e8 <menu+0x12a0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80024ae:	4b4b      	ldr	r3, [pc, #300]	@ (80025dc <menu+0x1294>)
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <menu+0x12a4>)
 80024b4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80024b6:	4b4e      	ldr	r3, [pc, #312]	@ (80025f0 <menu+0x12a8>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80024bc:	4b4d      	ldr	r3, [pc, #308]	@ (80025f4 <menu+0x12ac>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d16c      	bne.n	800259e <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80024c4:	4a4c      	ldr	r2, [pc, #304]	@ (80025f8 <menu+0x12b0>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	2001      	movs	r0, #1
 80024ca:	f006 fc2d 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024ce:	4a4b      	ldr	r2, [pc, #300]	@ (80025fc <menu+0x12b4>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	2002      	movs	r0, #2
 80024d4:	f006 fc28 	bl	8008d28 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80024d8:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <menu+0x12b8>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	220a      	movs	r2, #10
 80024de:	4949      	ldr	r1, [pc, #292]	@ (8002604 <menu+0x12bc>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00a ff77 	bl	800d3d4 <itoa>
		lcd_print(2,16,snum);
 80024e6:	4a47      	ldr	r2, [pc, #284]	@ (8002604 <menu+0x12bc>)
 80024e8:	2110      	movs	r1, #16
 80024ea:	2002      	movs	r0, #2
 80024ec:	f006 fc1c 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024f0:	2102      	movs	r1, #2
 80024f2:	483c      	ldr	r0, [pc, #240]	@ (80025e4 <menu+0x129c>)
 80024f4:	f007 ff42 	bl	800a37c <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d119      	bne.n	8002532 <menu+0x11ea>
 80024fe:	4b3a      	ldr	r3, [pc, #232]	@ (80025e8 <menu+0x12a0>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d012      	beq.n	8002532 <menu+0x11ea>
 800250c:	4b33      	ldr	r3, [pc, #204]	@ (80025dc <menu+0x1294>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10e      	bne.n	8002532 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002514:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <menu+0x12b8>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <menu+0x12b8>)
 800251e:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002520:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <menu+0x12b8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d902      	bls.n	800252e <menu+0x11e6>
				kapi2AcSure = 0;
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <menu+0x12b8>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800252e:	f001 fc51 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002532:	2104      	movs	r1, #4
 8002534:	482b      	ldr	r0, [pc, #172]	@ (80025e4 <menu+0x129c>)
 8002536:	f007 ff21 	bl	800a37c <HAL_GPIO_ReadPin>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d119      	bne.n	8002574 <menu+0x122c>
 8002540:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <menu+0x12a0>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <menu+0x122c>
 800254e:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <menu+0x1294>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10e      	bne.n	8002574 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002556:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <menu+0x12b8>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <menu+0x12b8>)
 8002560:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002562:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <menu+0x12b8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <menu+0x1228>
		   		kapi2AcSure = 5;
 800256a:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <menu+0x12b8>)
 800256c:	2205      	movs	r2, #5
 800256e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002570:	f001 fc30 	bl	8003dd4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002574:	2108      	movs	r1, #8
 8002576:	481b      	ldr	r0, [pc, #108]	@ (80025e4 <menu+0x129c>)
 8002578:	f007 ff00 	bl	800a37c <HAL_GPIO_ReadPin>
 800257c:	4603      	mov	r3, r0
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10d      	bne.n	800259e <menu+0x1256>
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <menu+0x12a0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f083 0301 	eor.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <menu+0x12b8>)
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <menu+0x12a4>)
 8002596:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <menu+0x12a8>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <menu+0x12ac>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b0d      	cmp	r3, #13
 80025a4:	f040 8090 	bne.w	80026c8 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80025a8:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <menu+0x12c0>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	2001      	movs	r0, #1
 80025ae:	f006 fbbb 	bl	8008d28 <lcd_print>

		if(kapitablaTip == 0) {
 80025b2:	4b16      	ldr	r3, [pc, #88]	@ (800260c <menu+0x12c4>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80025ba:	4a15      	ldr	r2, [pc, #84]	@ (8002610 <menu+0x12c8>)
 80025bc:	2101      	movs	r1, #1
 80025be:	2002      	movs	r0, #2
 80025c0:	f006 fbb2 	bl	8008d28 <lcd_print>
 80025c4:	e031      	b.n	800262a <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80025c6:	4b11      	ldr	r3, [pc, #68]	@ (800260c <menu+0x12c4>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d124      	bne.n	8002618 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80025ce:	4a11      	ldr	r2, [pc, #68]	@ (8002614 <menu+0x12cc>)
 80025d0:	2101      	movs	r1, #1
 80025d2:	2002      	movs	r0, #2
 80025d4:	f006 fba8 	bl	8008d28 <lcd_print>
 80025d8:	e027      	b.n	800262a <menu+0x12e2>
 80025da:	bf00      	nop
 80025dc:	200010c6 	.word	0x200010c6
 80025e0:	20000114 	.word	0x20000114
 80025e4:	40010800 	.word	0x40010800
 80025e8:	200010ec 	.word	0x200010ec
 80025ec:	20000fec 	.word	0x20000fec
 80025f0:	200010e9 	.word	0x200010e9
 80025f4:	200010bc 	.word	0x200010bc
 80025f8:	200014f0 	.word	0x200014f0
 80025fc:	200014c8 	.word	0x200014c8
 8002600:	200010d6 	.word	0x200010d6
 8002604:	2000105c 	.word	0x2000105c
 8002608:	20001504 	.word	0x20001504
 800260c:	200010c7 	.word	0x200010c7
 8002610:	20000100 	.word	0x20000100
 8002614:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 8002618:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <menu+0x13d0>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d104      	bne.n	800262a <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002620:	4a3e      	ldr	r2, [pc, #248]	@ (800271c <menu+0x13d4>)
 8002622:	2101      	movs	r1, #1
 8002624:	2002      	movs	r0, #2
 8002626:	f006 fb7f 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800262a:	2102      	movs	r1, #2
 800262c:	483c      	ldr	r0, [pc, #240]	@ (8002720 <menu+0x13d8>)
 800262e:	f007 fea5 	bl	800a37c <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d115      	bne.n	8002664 <menu+0x131c>
 8002638:	4b3a      	ldr	r3, [pc, #232]	@ (8002724 <menu+0x13dc>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f083 0301 	eor.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002646:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <menu+0x13d0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b32      	ldr	r3, [pc, #200]	@ (8002718 <menu+0x13d0>)
 8002650:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002652:	4b31      	ldr	r3, [pc, #196]	@ (8002718 <menu+0x13d0>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <menu+0x1318>
				kapitablaTip = 0;
 800265a:	4b2f      	ldr	r3, [pc, #188]	@ (8002718 <menu+0x13d0>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002660:	f001 fbb8 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002664:	2104      	movs	r1, #4
 8002666:	482e      	ldr	r0, [pc, #184]	@ (8002720 <menu+0x13d8>)
 8002668:	f007 fe88 	bl	800a37c <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d115      	bne.n	800269e <menu+0x1356>
 8002672:	4b2c      	ldr	r3, [pc, #176]	@ (8002724 <menu+0x13dc>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <menu+0x13d0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <menu+0x13d0>)
 800268a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 800268c:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <menu+0x13d0>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d902      	bls.n	800269a <menu+0x1352>
		   		kapitablaTip = 2;
 8002694:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <menu+0x13d0>)
 8002696:	2202      	movs	r2, #2
 8002698:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800269a:	f001 fb9b 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800269e:	2108      	movs	r1, #8
 80026a0:	481f      	ldr	r0, [pc, #124]	@ (8002720 <menu+0x13d8>)
 80026a2:	f007 fe6b 	bl	800a37c <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <menu+0x1380>
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <menu+0x13dc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80026ba:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <menu+0x13d0>)
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <menu+0x13e0>)
 80026c0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <menu+0x13e4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80026c8:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <menu+0x13e8>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b0e      	cmp	r3, #14
 80026ce:	f040 80a3 	bne.w	8002818 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80026d2:	4a18      	ldr	r2, [pc, #96]	@ (8002734 <menu+0x13ec>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	2001      	movs	r0, #1
 80026d8:	f006 fb26 	bl	8008d28 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <menu+0x13f0>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80026e4:	4a15      	ldr	r2, [pc, #84]	@ (800273c <menu+0x13f4>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	2002      	movs	r0, #2
 80026ea:	f006 fb1d 	bl	8008d28 <lcd_print>
 80026ee:	e034      	b.n	800275a <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <menu+0x13f0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <menu+0x13f8>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2002      	movs	r0, #2
 80026fe:	f006 fb13 	bl	8008d28 <lcd_print>
 8002702:	e02a      	b.n	800275a <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <menu+0x13f0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d11d      	bne.n	8002748 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <menu+0x13fc>)
 800270e:	2101      	movs	r1, #1
 8002710:	2002      	movs	r0, #2
 8002712:	f006 fb09 	bl	8008d28 <lcd_print>
 8002716:	e020      	b.n	800275a <menu+0x1412>
 8002718:	200010c7 	.word	0x200010c7
 800271c:	20000114 	.word	0x20000114
 8002720:	40010800 	.word	0x40010800
 8002724:	200010ec 	.word	0x200010ec
 8002728:	20000fec 	.word	0x20000fec
 800272c:	200010e9 	.word	0x200010e9
 8002730:	200010bc 	.word	0x200010bc
 8002734:	20001518 	.word	0x20001518
 8002738:	200010c9 	.word	0x200010c9
 800273c:	2000152c 	.word	0x2000152c
 8002740:	20001540 	.word	0x20001540
 8002744:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 8002748:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <menu+0x15dc>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d104      	bne.n	800275a <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002750:	4a75      	ldr	r2, [pc, #468]	@ (8002928 <menu+0x15e0>)
 8002752:	2101      	movs	r1, #1
 8002754:	2002      	movs	r0, #2
 8002756:	f006 fae7 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800275a:	2102      	movs	r1, #2
 800275c:	4873      	ldr	r0, [pc, #460]	@ (800292c <menu+0x15e4>)
 800275e:	f007 fe0d 	bl	800a37c <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d115      	bne.n	8002794 <menu+0x144c>
 8002768:	4b71      	ldr	r3, [pc, #452]	@ (8002930 <menu+0x15e8>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f083 0301 	eor.w	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002776:	4b6b      	ldr	r3, [pc, #428]	@ (8002924 <menu+0x15dc>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b69      	ldr	r3, [pc, #420]	@ (8002924 <menu+0x15dc>)
 8002780:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002782:	4b68      	ldr	r3, [pc, #416]	@ (8002924 <menu+0x15dc>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <menu+0x1448>
				kapiTablaAcKonum = 0;
 800278a:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <menu+0x15dc>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002790:	f001 fb20 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002794:	2104      	movs	r1, #4
 8002796:	4865      	ldr	r0, [pc, #404]	@ (800292c <menu+0x15e4>)
 8002798:	f007 fdf0 	bl	800a37c <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d115      	bne.n	80027ce <menu+0x1486>
 80027a2:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <menu+0x15e8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80027b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002924 <menu+0x15dc>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002924 <menu+0x15dc>)
 80027ba:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80027bc:	4b59      	ldr	r3, [pc, #356]	@ (8002924 <menu+0x15dc>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d902      	bls.n	80027ca <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80027c4:	4b57      	ldr	r3, [pc, #348]	@ (8002924 <menu+0x15dc>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ca:	f001 fb03 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ce:	2108      	movs	r1, #8
 80027d0:	4856      	ldr	r0, [pc, #344]	@ (800292c <menu+0x15e4>)
 80027d2:	f007 fdd3 	bl	800a37c <HAL_GPIO_ReadPin>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d11d      	bne.n	8002818 <menu+0x14d0>
 80027dc:	4b54      	ldr	r3, [pc, #336]	@ (8002930 <menu+0x15e8>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80027ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <menu+0x15dc>)
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	4b51      	ldr	r3, [pc, #324]	@ (8002934 <menu+0x15ec>)
 80027f0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <menu+0x15dc>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <menu+0x14bc>
 80027fc:	4b49      	ldr	r3, [pc, #292]	@ (8002924 <menu+0x15dc>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d106      	bne.n	8002812 <menu+0x14ca>
				altLimit = 1;
 8002804:	4b4c      	ldr	r3, [pc, #304]	@ (8002938 <menu+0x15f0>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800280a:	4b4b      	ldr	r3, [pc, #300]	@ (8002938 <menu+0x15f0>)
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b49      	ldr	r3, [pc, #292]	@ (8002934 <menu+0x15ec>)
 8002810:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002812:	4b4a      	ldr	r3, [pc, #296]	@ (800293c <menu+0x15f4>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002818:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <menu+0x15f8>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d16c      	bne.n	80028fa <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002820:	4a48      	ldr	r2, [pc, #288]	@ (8002944 <menu+0x15fc>)
 8002822:	2101      	movs	r1, #1
 8002824:	2001      	movs	r0, #1
 8002826:	f006 fa7f 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800282a:	4a47      	ldr	r2, [pc, #284]	@ (8002948 <menu+0x1600>)
 800282c:	2101      	movs	r1, #1
 800282e:	2002      	movs	r0, #2
 8002830:	f006 fa7a 	bl	8008d28 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002834:	4b45      	ldr	r3, [pc, #276]	@ (800294c <menu+0x1604>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	220a      	movs	r2, #10
 800283a:	4945      	ldr	r1, [pc, #276]	@ (8002950 <menu+0x1608>)
 800283c:	4618      	mov	r0, r3
 800283e:	f00a fdc9 	bl	800d3d4 <itoa>
		lcd_print(2,16,snum);
 8002842:	4a43      	ldr	r2, [pc, #268]	@ (8002950 <menu+0x1608>)
 8002844:	2110      	movs	r1, #16
 8002846:	2002      	movs	r0, #2
 8002848:	f006 fa6e 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800284c:	2102      	movs	r1, #2
 800284e:	4837      	ldr	r0, [pc, #220]	@ (800292c <menu+0x15e4>)
 8002850:	f007 fd94 	bl	800a37c <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d119      	bne.n	800288e <menu+0x1546>
 800285a:	4b35      	ldr	r3, [pc, #212]	@ (8002930 <menu+0x15e8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d012      	beq.n	800288e <menu+0x1546>
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <menu+0x160c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10e      	bne.n	800288e <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002870:	4b36      	ldr	r3, [pc, #216]	@ (800294c <menu+0x1604>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b34      	ldr	r3, [pc, #208]	@ (800294c <menu+0x1604>)
 800287a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 800287c:	4b33      	ldr	r3, [pc, #204]	@ (800294c <menu+0x1604>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d902      	bls.n	800288a <menu+0x1542>
				kapiTablaAcSure = 0;
 8002884:	4b31      	ldr	r3, [pc, #196]	@ (800294c <menu+0x1604>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800288a:	f001 faa3 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800288e:	2104      	movs	r1, #4
 8002890:	4826      	ldr	r0, [pc, #152]	@ (800292c <menu+0x15e4>)
 8002892:	f007 fd73 	bl	800a37c <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d119      	bne.n	80028d0 <menu+0x1588>
 800289c:	4b24      	ldr	r3, [pc, #144]	@ (8002930 <menu+0x15e8>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f083 0301 	eor.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <menu+0x1588>
 80028aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <menu+0x160c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80028b2:	4b26      	ldr	r3, [pc, #152]	@ (800294c <menu+0x1604>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b24      	ldr	r3, [pc, #144]	@ (800294c <menu+0x1604>)
 80028bc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <menu+0x1604>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <menu+0x1604>)
 80028c8:	2205      	movs	r2, #5
 80028ca:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80028cc:	f001 fa82 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028d0:	2108      	movs	r1, #8
 80028d2:	4816      	ldr	r0, [pc, #88]	@ (800292c <menu+0x15e4>)
 80028d4:	f007 fd52 	bl	800a37c <HAL_GPIO_ReadPin>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10d      	bne.n	80028fa <menu+0x15b2>
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <menu+0x15e8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80028ec:	4b17      	ldr	r3, [pc, #92]	@ (800294c <menu+0x1604>)
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <menu+0x15ec>)
 80028f2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80028f4:	4b11      	ldr	r3, [pc, #68]	@ (800293c <menu+0x15f4>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <menu+0x15f8>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b10      	cmp	r3, #16
 8002900:	f040 8086 	bne.w	8002a10 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002904:	4a14      	ldr	r2, [pc, #80]	@ (8002958 <menu+0x1610>)
 8002906:	2101      	movs	r1, #1
 8002908:	2001      	movs	r0, #1
 800290a:	f006 fa0d 	bl	8008d28 <lcd_print>

		if(yukariYavasLimit == 0) {
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <menu+0x1614>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d124      	bne.n	8002960 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002916:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <menu+0x15e0>)
 8002918:	2101      	movs	r1, #1
 800291a:	2002      	movs	r0, #2
 800291c:	f006 fa04 	bl	8008d28 <lcd_print>
 8002920:	e027      	b.n	8002972 <menu+0x162a>
 8002922:	bf00      	nop
 8002924:	200010c9 	.word	0x200010c9
 8002928:	2000139c 	.word	0x2000139c
 800292c:	40010800 	.word	0x40010800
 8002930:	200010ec 	.word	0x200010ec
 8002934:	20000fec 	.word	0x20000fec
 8002938:	200010c2 	.word	0x200010c2
 800293c:	200010e9 	.word	0x200010e9
 8002940:	200010bc 	.word	0x200010bc
 8002944:	20001568 	.word	0x20001568
 8002948:	200014c8 	.word	0x200014c8
 800294c:	200010d7 	.word	0x200010d7
 8002950:	2000105c 	.word	0x2000105c
 8002954:	200010c7 	.word	0x200010c7
 8002958:	2000157c 	.word	0x2000157c
 800295c:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002960:	4b84      	ldr	r3, [pc, #528]	@ (8002b74 <menu+0x182c>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d104      	bne.n	8002972 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002968:	4a83      	ldr	r2, [pc, #524]	@ (8002b78 <menu+0x1830>)
 800296a:	2101      	movs	r1, #1
 800296c:	2002      	movs	r0, #2
 800296e:	f006 f9db 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002972:	2102      	movs	r1, #2
 8002974:	4881      	ldr	r0, [pc, #516]	@ (8002b7c <menu+0x1834>)
 8002976:	f007 fd01 	bl	800a37c <HAL_GPIO_ReadPin>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d115      	bne.n	80029ac <menu+0x1664>
 8002980:	4b7f      	ldr	r3, [pc, #508]	@ (8002b80 <menu+0x1838>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f083 0301 	eor.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00e      	beq.n	80029ac <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 800298e:	4b79      	ldr	r3, [pc, #484]	@ (8002b74 <menu+0x182c>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b77      	ldr	r3, [pc, #476]	@ (8002b74 <menu+0x182c>)
 8002998:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800299a:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <menu+0x182c>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d902      	bls.n	80029a8 <menu+0x1660>
				yukariYavasLimit = 0;
 80029a2:	4b74      	ldr	r3, [pc, #464]	@ (8002b74 <menu+0x182c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029a8:	f001 fa14 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ac:	2104      	movs	r1, #4
 80029ae:	4873      	ldr	r0, [pc, #460]	@ (8002b7c <menu+0x1834>)
 80029b0:	f007 fce4 	bl	800a37c <HAL_GPIO_ReadPin>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d115      	bne.n	80029e6 <menu+0x169e>
 80029ba:	4b71      	ldr	r3, [pc, #452]	@ (8002b80 <menu+0x1838>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 80029c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b74 <menu+0x182c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b68      	ldr	r3, [pc, #416]	@ (8002b74 <menu+0x182c>)
 80029d2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80029d4:	4b67      	ldr	r3, [pc, #412]	@ (8002b74 <menu+0x182c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <menu+0x169a>
		   		yukariYavasLimit = 1;
 80029dc:	4b65      	ldr	r3, [pc, #404]	@ (8002b74 <menu+0x182c>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029e2:	f001 f9f7 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e6:	2108      	movs	r1, #8
 80029e8:	4864      	ldr	r0, [pc, #400]	@ (8002b7c <menu+0x1834>)
 80029ea:	f007 fcc7 	bl	800a37c <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10d      	bne.n	8002a10 <menu+0x16c8>
 80029f4:	4b62      	ldr	r3, [pc, #392]	@ (8002b80 <menu+0x1838>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002a02:	4b5c      	ldr	r3, [pc, #368]	@ (8002b74 <menu+0x182c>)
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	4b5f      	ldr	r3, [pc, #380]	@ (8002b84 <menu+0x183c>)
 8002a08:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b88 <menu+0x1840>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002a10:	4b5e      	ldr	r3, [pc, #376]	@ (8002b8c <menu+0x1844>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b11      	cmp	r3, #17
 8002a16:	f040 808b 	bne.w	8002b30 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8002b90 <menu+0x1848>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f006 f982 	bl	8008d28 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002a24:	4b5b      	ldr	r3, [pc, #364]	@ (8002b94 <menu+0x184c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d105      	bne.n	8002a38 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b98 <menu+0x1850>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f006 f979 	bl	8008d28 <lcd_print>
 8002a36:	e012      	b.n	8002a5e <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002a38:	4b56      	ldr	r3, [pc, #344]	@ (8002b94 <menu+0x184c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002a40:	4a56      	ldr	r2, [pc, #344]	@ (8002b9c <menu+0x1854>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	2002      	movs	r0, #2
 8002a46:	f006 f96f 	bl	8008d28 <lcd_print>
 8002a4a:	e008      	b.n	8002a5e <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002a4c:	4b51      	ldr	r3, [pc, #324]	@ (8002b94 <menu+0x184c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002a54:	4a52      	ldr	r2, [pc, #328]	@ (8002ba0 <menu+0x1858>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	2002      	movs	r0, #2
 8002a5a:	f006 f965 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4846      	ldr	r0, [pc, #280]	@ (8002b7c <menu+0x1834>)
 8002a62:	f007 fc8b 	bl	800a37c <HAL_GPIO_ReadPin>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d115      	bne.n	8002a98 <menu+0x1750>
 8002a6c:	4b44      	ldr	r3, [pc, #272]	@ (8002b80 <menu+0x1838>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002a7a:	4b46      	ldr	r3, [pc, #280]	@ (8002b94 <menu+0x184c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b44      	ldr	r3, [pc, #272]	@ (8002b94 <menu+0x184c>)
 8002a84:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002a86:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <menu+0x184c>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002a8e:	4b41      	ldr	r3, [pc, #260]	@ (8002b94 <menu+0x184c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a94:	f001 f99e 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4838      	ldr	r0, [pc, #224]	@ (8002b7c <menu+0x1834>)
 8002a9c:	f007 fc6e 	bl	800a37c <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d115      	bne.n	8002ad2 <menu+0x178a>
 8002aa6:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <menu+0x1838>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002ab4:	4b37      	ldr	r3, [pc, #220]	@ (8002b94 <menu+0x184c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b35      	ldr	r3, [pc, #212]	@ (8002b94 <menu+0x184c>)
 8002abe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002ac0:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <menu+0x184c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d902      	bls.n	8002ace <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002ac8:	4b32      	ldr	r3, [pc, #200]	@ (8002b94 <menu+0x184c>)
 8002aca:	2202      	movs	r2, #2
 8002acc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ace:	f001 f981 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	4829      	ldr	r0, [pc, #164]	@ (8002b7c <menu+0x1834>)
 8002ad6:	f007 fc51 	bl	800a37c <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d127      	bne.n	8002b30 <menu+0x17e8>
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <menu+0x1838>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002aee:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <menu+0x184c>)
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <menu+0x183c>)
 8002af4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002af6:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <menu+0x184c>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <menu+0x17be>
 8002afe:	4b25      	ldr	r3, [pc, #148]	@ (8002b94 <menu+0x184c>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d106      	bne.n	8002b14 <menu+0x17cc>
				calismaSekli = 0;
 8002b06:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <menu+0x185c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002b0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ba4 <menu+0x185c>)
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <menu+0x183c>)
 8002b12:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002b14:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <menu+0x184c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002b1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ba8 <menu+0x1860>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <menu+0x1860>)
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <menu+0x183c>)
 8002b28:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <menu+0x1840>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002b30:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <menu+0x1844>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	f040 8097 	bne.w	8002c68 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <menu+0x184c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d105      	bne.n	8002b4e <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002b42:	4a1a      	ldr	r2, [pc, #104]	@ (8002bac <menu+0x1864>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	2001      	movs	r0, #1
 8002b48:	f006 f8ee 	bl	8008d28 <lcd_print>
 8002b4c:	e008      	b.n	8002b60 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002b4e:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <menu+0x184c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d104      	bne.n	8002b60 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002b56:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <menu+0x1868>)
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f006 f8e4 	bl	8008d28 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002b60:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <menu+0x186c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d127      	bne.n	8002bb8 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002b68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba0 <menu+0x1858>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f006 f8db 	bl	8008d28 <lcd_print>
 8002b72:	e02a      	b.n	8002bca <menu+0x1882>
 8002b74:	200010ca 	.word	0x200010ca
 8002b78:	200013b0 	.word	0x200013b0
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	200010ec 	.word	0x200010ec
 8002b84:	20000fec 	.word	0x20000fec
 8002b88:	200010e9 	.word	0x200010e9
 8002b8c:	200010bc 	.word	0x200010bc
 8002b90:	20001590 	.word	0x20001590
 8002b94:	200010cb 	.word	0x200010cb
 8002b98:	200015a4 	.word	0x200015a4
 8002b9c:	200015b8 	.word	0x200015b8
 8002ba0:	2000139c 	.word	0x2000139c
 8002ba4:	200010bd 	.word	0x200010bd
 8002ba8:	200010ce 	.word	0x200010ce
 8002bac:	200015cc 	.word	0x200015cc
 8002bb0:	200015e0 	.word	0x200015e0
 8002bb4:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002bb8:	4b79      	ldr	r3, [pc, #484]	@ (8002da0 <menu+0x1a58>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d104      	bne.n	8002bca <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002bc0:	4a78      	ldr	r2, [pc, #480]	@ (8002da4 <menu+0x1a5c>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f006 f8af 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4876      	ldr	r0, [pc, #472]	@ (8002da8 <menu+0x1a60>)
 8002bce:	f007 fbd5 	bl	800a37c <HAL_GPIO_ReadPin>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d115      	bne.n	8002c04 <menu+0x18bc>
 8002bd8:	4b74      	ldr	r3, [pc, #464]	@ (8002dac <menu+0x1a64>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f083 0301 	eor.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002be6:	4b6e      	ldr	r3, [pc, #440]	@ (8002da0 <menu+0x1a58>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <menu+0x1a58>)
 8002bf0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	@ (8002da0 <menu+0x1a58>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d902      	bls.n	8002c00 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002bfa:	4b69      	ldr	r3, [pc, #420]	@ (8002da0 <menu+0x1a58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c00:	f001 f8e8 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c04:	2104      	movs	r1, #4
 8002c06:	4868      	ldr	r0, [pc, #416]	@ (8002da8 <menu+0x1a60>)
 8002c08:	f007 fbb8 	bl	800a37c <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d115      	bne.n	8002c3e <menu+0x18f6>
 8002c12:	4b66      	ldr	r3, [pc, #408]	@ (8002dac <menu+0x1a64>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00e      	beq.n	8002c3e <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002c20:	4b5f      	ldr	r3, [pc, #380]	@ (8002da0 <menu+0x1a58>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b5d      	ldr	r3, [pc, #372]	@ (8002da0 <menu+0x1a58>)
 8002c2a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002da0 <menu+0x1a58>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002c34:	4b5a      	ldr	r3, [pc, #360]	@ (8002da0 <menu+0x1a58>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c3a:	f001 f8cb 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3e:	2108      	movs	r1, #8
 8002c40:	4859      	ldr	r0, [pc, #356]	@ (8002da8 <menu+0x1a60>)
 8002c42:	f007 fb9b 	bl	800a37c <HAL_GPIO_ReadPin>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10d      	bne.n	8002c68 <menu+0x1920>
 8002c4c:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <menu+0x1a64>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002c5a:	4b51      	ldr	r3, [pc, #324]	@ (8002da0 <menu+0x1a58>)
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	4b54      	ldr	r3, [pc, #336]	@ (8002db0 <menu+0x1a68>)
 8002c60:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002c62:	4b54      	ldr	r3, [pc, #336]	@ (8002db4 <menu+0x1a6c>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002c68:	4b53      	ldr	r3, [pc, #332]	@ (8002db8 <menu+0x1a70>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b13      	cmp	r3, #19
 8002c6e:	d174      	bne.n	8002d5a <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002c70:	4b52      	ldr	r3, [pc, #328]	@ (8002dbc <menu+0x1a74>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d105      	bne.n	8002c84 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002c78:	4a51      	ldr	r2, [pc, #324]	@ (8002dc0 <menu+0x1a78>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f006 f853 	bl	8008d28 <lcd_print>
 8002c82:	e008      	b.n	8002c96 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002c84:	4b4d      	ldr	r3, [pc, #308]	@ (8002dbc <menu+0x1a74>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d104      	bne.n	8002c96 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002c8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc4 <menu+0x1a7c>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	2001      	movs	r0, #1
 8002c92:	f006 f849 	bl	8008d28 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002c96:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc8 <menu+0x1a80>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002c9e:	4a4b      	ldr	r2, [pc, #300]	@ (8002dcc <menu+0x1a84>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f006 f840 	bl	8008d28 <lcd_print>
 8002ca8:	e008      	b.n	8002cbc <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <menu+0x1a80>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d104      	bne.n	8002cbc <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8002da4 <menu+0x1a5c>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f006 f836 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	483a      	ldr	r0, [pc, #232]	@ (8002da8 <menu+0x1a60>)
 8002cc0:	f007 fb5c 	bl	800a37c <HAL_GPIO_ReadPin>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d115      	bne.n	8002cf6 <menu+0x19ae>
 8002cca:	4b38      	ldr	r3, [pc, #224]	@ (8002dac <menu+0x1a64>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f083 0301 	eor.w	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <menu+0x1a80>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <menu+0x1a80>)
 8002ce2:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002ce4:	4b38      	ldr	r3, [pc, #224]	@ (8002dc8 <menu+0x1a80>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d902      	bls.n	8002cf2 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002cec:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <menu+0x1a80>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf2:	f001 f86f 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	482b      	ldr	r0, [pc, #172]	@ (8002da8 <menu+0x1a60>)
 8002cfa:	f007 fb3f 	bl	800a37c <HAL_GPIO_ReadPin>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d115      	bne.n	8002d30 <menu+0x19e8>
 8002d04:	4b29      	ldr	r3, [pc, #164]	@ (8002dac <menu+0x1a64>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	f083 0301 	eor.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00e      	beq.n	8002d30 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002d12:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <menu+0x1a80>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <menu+0x1a80>)
 8002d1c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <menu+0x1a80>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002d26:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <menu+0x1a80>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2c:	f001 f852 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d30:	2108      	movs	r1, #8
 8002d32:	481d      	ldr	r0, [pc, #116]	@ (8002da8 <menu+0x1a60>)
 8002d34:	f007 fb22 	bl	800a37c <HAL_GPIO_ReadPin>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10d      	bne.n	8002d5a <menu+0x1a12>
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <menu+0x1a64>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <menu+0x1a80>)
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <menu+0x1a68>)
 8002d52:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002d54:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <menu+0x1a6c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002d5a:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <menu+0x1a70>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b14      	cmp	r3, #20
 8002d60:	f040 809e 	bne.w	8002ea0 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002d64:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <menu+0x1a74>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002d6c:	4a18      	ldr	r2, [pc, #96]	@ (8002dd0 <menu+0x1a88>)
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2001      	movs	r0, #1
 8002d72:	f005 ffd9 	bl	8008d28 <lcd_print>
 8002d76:	e008      	b.n	8002d8a <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002d78:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <menu+0x1a74>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d104      	bne.n	8002d8a <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002d80:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <menu+0x1a8c>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	2001      	movs	r0, #1
 8002d86:	f005 ffcf 	bl	8008d28 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002d8a:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <menu+0x1a90>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d126      	bne.n	8002de0 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <menu+0x1a94>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	2002      	movs	r0, #2
 8002d98:	f005 ffc6 	bl	8008d28 <lcd_print>
 8002d9c:	e029      	b.n	8002df2 <menu+0x1aaa>
 8002d9e:	bf00      	nop
 8002da0:	200010cc 	.word	0x200010cc
 8002da4:	200013b0 	.word	0x200013b0
 8002da8:	40010800 	.word	0x40010800
 8002dac:	200010ec 	.word	0x200010ec
 8002db0:	20000fec 	.word	0x20000fec
 8002db4:	200010e9 	.word	0x200010e9
 8002db8:	200010bc 	.word	0x200010bc
 8002dbc:	200010cb 	.word	0x200010cb
 8002dc0:	200015f4 	.word	0x200015f4
 8002dc4:	20001608 	.word	0x20001608
 8002dc8:	200010cd 	.word	0x200010cd
 8002dcc:	2000139c 	.word	0x2000139c
 8002dd0:	2000161c 	.word	0x2000161c
 8002dd4:	20001630 	.word	0x20001630
 8002dd8:	200010ce 	.word	0x200010ce
 8002ddc:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 8002de0:	4b39      	ldr	r3, [pc, #228]	@ (8002ec8 <menu+0x1b80>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d104      	bne.n	8002df2 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002de8:	4a38      	ldr	r2, [pc, #224]	@ (8002ecc <menu+0x1b84>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2002      	movs	r0, #2
 8002dee:	f005 ff9b 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002df2:	2102      	movs	r1, #2
 8002df4:	4836      	ldr	r0, [pc, #216]	@ (8002ed0 <menu+0x1b88>)
 8002df6:	f007 fac1 	bl	800a37c <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <menu+0x1aec>
 8002e00:	4b34      	ldr	r3, [pc, #208]	@ (8002ed4 <menu+0x1b8c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <menu+0x1aec>
 8002e0e:	4b32      	ldr	r3, [pc, #200]	@ (8002ed8 <menu+0x1b90>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d10e      	bne.n	8002e34 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002e16:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec8 <menu+0x1b80>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec8 <menu+0x1b80>)
 8002e20:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002e22:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <menu+0x1b80>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d902      	bls.n	8002e30 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002e2a:	4b27      	ldr	r3, [pc, #156]	@ (8002ec8 <menu+0x1b80>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e30:	f000 ffd0 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002e34:	2104      	movs	r1, #4
 8002e36:	4826      	ldr	r0, [pc, #152]	@ (8002ed0 <menu+0x1b88>)
 8002e38:	f007 faa0 	bl	800a37c <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d119      	bne.n	8002e76 <menu+0x1b2e>
 8002e42:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <menu+0x1b8c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <menu+0x1b2e>
 8002e50:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <menu+0x1b90>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d10e      	bne.n	8002e76 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <menu+0x1b80>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <menu+0x1b80>)
 8002e62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002e64:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <menu+0x1b80>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	@ (8002ec8 <menu+0x1b80>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e72:	f000 ffaf 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e76:	2108      	movs	r1, #8
 8002e78:	4815      	ldr	r0, [pc, #84]	@ (8002ed0 <menu+0x1b88>)
 8002e7a:	f007 fa7f 	bl	800a37c <HAL_GPIO_ReadPin>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10d      	bne.n	8002ea0 <menu+0x1b58>
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <menu+0x1b8c>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <menu+0x1b80>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <menu+0x1b94>)
 8002e98:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <menu+0x1b98>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002ea0:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <menu+0x1b9c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b15      	cmp	r3, #21
 8002ea6:	f040 8088 	bne.w	8002fba <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee8 <menu+0x1ba0>)
 8002eac:	2101      	movs	r1, #1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f005 ff3a 	bl	8008d28 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <menu+0x1ba4>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11b      	bne.n	8002ef4 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef0 <menu+0x1ba8>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f005 ff31 	bl	8008d28 <lcd_print>
 8002ec6:	e01e      	b.n	8002f06 <menu+0x1bbe>
 8002ec8:	200010ce 	.word	0x200010ce
 8002ecc:	20001658 	.word	0x20001658
 8002ed0:	40010800 	.word	0x40010800
 8002ed4:	200010ec 	.word	0x200010ec
 8002ed8:	200010cb 	.word	0x200010cb
 8002edc:	20000fec 	.word	0x20000fec
 8002ee0:	200010e9 	.word	0x200010e9
 8002ee4:	200010bc 	.word	0x200010bc
 8002ee8:	2000166c 	.word	0x2000166c
 8002eec:	200010cf 	.word	0x200010cf
 8002ef0:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8002ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800317c <menu+0x1e34>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d104      	bne.n	8002f06 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002efc:	4aa0      	ldr	r2, [pc, #640]	@ (8003180 <menu+0x1e38>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f005 ff11 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f06:	2102      	movs	r1, #2
 8002f08:	489e      	ldr	r0, [pc, #632]	@ (8003184 <menu+0x1e3c>)
 8002f0a:	f007 fa37 	bl	800a37c <HAL_GPIO_ReadPin>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d115      	bne.n	8002f40 <menu+0x1bf8>
 8002f14:	4b9c      	ldr	r3, [pc, #624]	@ (8003188 <menu+0x1e40>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f083 0301 	eor.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002f22:	4b96      	ldr	r3, [pc, #600]	@ (800317c <menu+0x1e34>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b94      	ldr	r3, [pc, #592]	@ (800317c <menu+0x1e34>)
 8002f2c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002f2e:	4b93      	ldr	r3, [pc, #588]	@ (800317c <menu+0x1e34>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d902      	bls.n	8002f3c <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002f36:	4b91      	ldr	r3, [pc, #580]	@ (800317c <menu+0x1e34>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3c:	f000 ff4a 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f40:	2104      	movs	r1, #4
 8002f42:	4890      	ldr	r0, [pc, #576]	@ (8003184 <menu+0x1e3c>)
 8002f44:	f007 fa1a 	bl	800a37c <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d115      	bne.n	8002f7a <menu+0x1c32>
 8002f4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003188 <menu+0x1e40>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002f5c:	4b87      	ldr	r3, [pc, #540]	@ (800317c <menu+0x1e34>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b85      	ldr	r3, [pc, #532]	@ (800317c <menu+0x1e34>)
 8002f66:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002f68:	4b84      	ldr	r3, [pc, #528]	@ (800317c <menu+0x1e34>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002f70:	4b82      	ldr	r3, [pc, #520]	@ (800317c <menu+0x1e34>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f76:	f000 ff2d 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7a:	2108      	movs	r1, #8
 8002f7c:	4881      	ldr	r0, [pc, #516]	@ (8003184 <menu+0x1e3c>)
 8002f7e:	f007 f9fd 	bl	800a37c <HAL_GPIO_ReadPin>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d118      	bne.n	8002fba <menu+0x1c72>
 8002f88:	4b7f      	ldr	r3, [pc, #508]	@ (8003188 <menu+0x1e40>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d011      	beq.n	8002fba <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002f96:	4b79      	ldr	r3, [pc, #484]	@ (800317c <menu+0x1e34>)
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800318c <menu+0x1e44>)
 8002f9c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002f9e:	4b77      	ldr	r3, [pc, #476]	@ (800317c <menu+0x1e34>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d106      	bne.n	8002fb4 <menu+0x1c6c>
				altLimit = 1;
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8003190 <menu+0x1e48>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fac:	4b78      	ldr	r3, [pc, #480]	@ (8003190 <menu+0x1e48>)
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	4b76      	ldr	r3, [pc, #472]	@ (800318c <menu+0x1e44>)
 8002fb2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002fb4:	4b77      	ldr	r3, [pc, #476]	@ (8003194 <menu+0x1e4c>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002fba:	4b77      	ldr	r3, [pc, #476]	@ (8003198 <menu+0x1e50>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b16      	cmp	r3, #22
 8002fc0:	d164      	bne.n	800308c <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002fc2:	4a76      	ldr	r2, [pc, #472]	@ (800319c <menu+0x1e54>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f005 feae 	bl	8008d28 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fcc:	4a74      	ldr	r2, [pc, #464]	@ (80031a0 <menu+0x1e58>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2002      	movs	r0, #2
 8002fd2:	f005 fea9 	bl	8008d28 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002fd6:	4b73      	ldr	r3, [pc, #460]	@ (80031a4 <menu+0x1e5c>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	220a      	movs	r2, #10
 8002fdc:	4972      	ldr	r1, [pc, #456]	@ (80031a8 <menu+0x1e60>)
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00a f9f8 	bl	800d3d4 <itoa>
		lcd_print(2,16,snum);
 8002fe4:	4a70      	ldr	r2, [pc, #448]	@ (80031a8 <menu+0x1e60>)
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f005 fe9d 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4864      	ldr	r0, [pc, #400]	@ (8003184 <menu+0x1e3c>)
 8002ff2:	f007 f9c3 	bl	800a37c <HAL_GPIO_ReadPin>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d115      	bne.n	8003028 <menu+0x1ce0>
 8002ffc:	4b62      	ldr	r3, [pc, #392]	@ (8003188 <menu+0x1e40>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800300a:	4b66      	ldr	r3, [pc, #408]	@ (80031a4 <menu+0x1e5c>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b64      	ldr	r3, [pc, #400]	@ (80031a4 <menu+0x1e5c>)
 8003014:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003016:	4b63      	ldr	r3, [pc, #396]	@ (80031a4 <menu+0x1e5c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d902      	bls.n	8003024 <menu+0x1cdc>
				yukariValfTmr = 0;
 800301e:	4b61      	ldr	r3, [pc, #388]	@ (80031a4 <menu+0x1e5c>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003024:	f000 fed6 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003028:	2104      	movs	r1, #4
 800302a:	4856      	ldr	r0, [pc, #344]	@ (8003184 <menu+0x1e3c>)
 800302c:	f007 f9a6 	bl	800a37c <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d115      	bne.n	8003062 <menu+0x1d1a>
 8003036:	4b54      	ldr	r3, [pc, #336]	@ (8003188 <menu+0x1e40>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003044:	4b57      	ldr	r3, [pc, #348]	@ (80031a4 <menu+0x1e5c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <menu+0x1e5c>)
 800304e:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003050:	4b54      	ldr	r3, [pc, #336]	@ (80031a4 <menu+0x1e5c>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b06      	cmp	r3, #6
 8003056:	d902      	bls.n	800305e <menu+0x1d16>
		   		yukariValfTmr = 5;
 8003058:	4b52      	ldr	r3, [pc, #328]	@ (80031a4 <menu+0x1e5c>)
 800305a:	2205      	movs	r2, #5
 800305c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800305e:	f000 feb9 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003062:	2108      	movs	r1, #8
 8003064:	4847      	ldr	r0, [pc, #284]	@ (8003184 <menu+0x1e3c>)
 8003066:	f007 f989 	bl	800a37c <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10d      	bne.n	800308c <menu+0x1d44>
 8003070:	4b45      	ldr	r3, [pc, #276]	@ (8003188 <menu+0x1e40>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 800307e:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <menu+0x1e5c>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b42      	ldr	r3, [pc, #264]	@ (800318c <menu+0x1e44>)
 8003084:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003086:	4b43      	ldr	r3, [pc, #268]	@ (8003194 <menu+0x1e4c>)
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800308c:	4b42      	ldr	r3, [pc, #264]	@ (8003198 <menu+0x1e50>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b17      	cmp	r3, #23
 8003092:	d164      	bne.n	800315e <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003094:	4a45      	ldr	r2, [pc, #276]	@ (80031ac <menu+0x1e64>)
 8003096:	2101      	movs	r1, #1
 8003098:	2001      	movs	r0, #1
 800309a:	f005 fe45 	bl	8008d28 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800309e:	4a40      	ldr	r2, [pc, #256]	@ (80031a0 <menu+0x1e58>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	2002      	movs	r0, #2
 80030a4:	f005 fe40 	bl	8008d28 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80030a8:	4b41      	ldr	r3, [pc, #260]	@ (80031b0 <menu+0x1e68>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	220a      	movs	r2, #10
 80030ae:	493e      	ldr	r1, [pc, #248]	@ (80031a8 <menu+0x1e60>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00a f98f 	bl	800d3d4 <itoa>
		lcd_print(2,16,snum);
 80030b6:	4a3c      	ldr	r2, [pc, #240]	@ (80031a8 <menu+0x1e60>)
 80030b8:	2110      	movs	r1, #16
 80030ba:	2002      	movs	r0, #2
 80030bc:	f005 fe34 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030c0:	2102      	movs	r1, #2
 80030c2:	4830      	ldr	r0, [pc, #192]	@ (8003184 <menu+0x1e3c>)
 80030c4:	f007 f95a 	bl	800a37c <HAL_GPIO_ReadPin>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d115      	bne.n	80030fa <menu+0x1db2>
 80030ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003188 <menu+0x1e40>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	f083 0301 	eor.w	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 80030dc:	4b34      	ldr	r3, [pc, #208]	@ (80031b0 <menu+0x1e68>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b32      	ldr	r3, [pc, #200]	@ (80031b0 <menu+0x1e68>)
 80030e6:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80030e8:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <menu+0x1e68>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d902      	bls.n	80030f6 <menu+0x1dae>
				asagiValfTmr = 0;
 80030f0:	4b2f      	ldr	r3, [pc, #188]	@ (80031b0 <menu+0x1e68>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030f6:	f000 fe6d 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fa:	2104      	movs	r1, #4
 80030fc:	4821      	ldr	r0, [pc, #132]	@ (8003184 <menu+0x1e3c>)
 80030fe:	f007 f93d 	bl	800a37c <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <menu+0x1dec>
 8003108:	4b1f      	ldr	r3, [pc, #124]	@ (8003188 <menu+0x1e40>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003116:	4b26      	ldr	r3, [pc, #152]	@ (80031b0 <menu+0x1e68>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <menu+0x1e68>)
 8003120:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003122:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <menu+0x1e68>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800312a:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <menu+0x1e68>)
 800312c:	2205      	movs	r2, #5
 800312e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003130:	f000 fe50 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2108      	movs	r1, #8
 8003136:	4813      	ldr	r0, [pc, #76]	@ (8003184 <menu+0x1e3c>)
 8003138:	f007 f920 	bl	800a37c <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10d      	bne.n	800315e <menu+0x1e16>
 8003142:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <menu+0x1e40>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8003150:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <menu+0x1e68>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <menu+0x1e44>)
 8003156:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003158:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <menu+0x1e4c>)
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <menu+0x1e50>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b18      	cmp	r3, #24
 8003164:	f040 8093 	bne.w	800328e <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <menu+0x1e6c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d125      	bne.n	80031bc <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003170:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <menu+0x1e70>)
 8003172:	2101      	movs	r1, #1
 8003174:	2001      	movs	r0, #1
 8003176:	f005 fdd7 	bl	8008d28 <lcd_print>
 800317a:	e028      	b.n	80031ce <menu+0x1e86>
 800317c:	200010cf 	.word	0x200010cf
 8003180:	20001658 	.word	0x20001658
 8003184:	40010800 	.word	0x40010800
 8003188:	200010ec 	.word	0x200010ec
 800318c:	20000fec 	.word	0x20000fec
 8003190:	200010c2 	.word	0x200010c2
 8003194:	200010e9 	.word	0x200010e9
 8003198:	200010bc 	.word	0x200010bc
 800319c:	20001680 	.word	0x20001680
 80031a0:	200014c8 	.word	0x200014c8
 80031a4:	200010d0 	.word	0x200010d0
 80031a8:	2000105c 	.word	0x2000105c
 80031ac:	20001694 	.word	0x20001694
 80031b0:	200010d1 	.word	0x200010d1
 80031b4:	200010cb 	.word	0x200010cb
 80031b8:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 80031bc:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <menu+0x20a8>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d104      	bne.n	80031ce <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 80031c4:	4a8b      	ldr	r2, [pc, #556]	@ (80033f4 <menu+0x20ac>)
 80031c6:	2101      	movs	r1, #1
 80031c8:	2001      	movs	r0, #1
 80031ca:	f005 fdad 	bl	8008d28 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031ce:	4a8a      	ldr	r2, [pc, #552]	@ (80033f8 <menu+0x20b0>)
 80031d0:	2101      	movs	r1, #1
 80031d2:	2002      	movs	r0, #2
 80031d4:	f005 fda8 	bl	8008d28 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80031d8:	4b88      	ldr	r3, [pc, #544]	@ (80033fc <menu+0x20b4>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	220a      	movs	r2, #10
 80031de:	4988      	ldr	r1, [pc, #544]	@ (8003400 <menu+0x20b8>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f00a f8f7 	bl	800d3d4 <itoa>
		lcd_print(2, 16, snum);
 80031e6:	4a86      	ldr	r2, [pc, #536]	@ (8003400 <menu+0x20b8>)
 80031e8:	2110      	movs	r1, #16
 80031ea:	2002      	movs	r0, #2
 80031ec:	f005 fd9c 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f0:	2102      	movs	r1, #2
 80031f2:	4884      	ldr	r0, [pc, #528]	@ (8003404 <menu+0x20bc>)
 80031f4:	f007 f8c2 	bl	800a37c <HAL_GPIO_ReadPin>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d115      	bne.n	800322a <menu+0x1ee2>
 80031fe:	4b82      	ldr	r3, [pc, #520]	@ (8003408 <menu+0x20c0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800320c:	4b7b      	ldr	r3, [pc, #492]	@ (80033fc <menu+0x20b4>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	4b79      	ldr	r3, [pc, #484]	@ (80033fc <menu+0x20b4>)
 8003216:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003218:	4b78      	ldr	r3, [pc, #480]	@ (80033fc <menu+0x20b4>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d902      	bls.n	8003226 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003220:	4b76      	ldr	r3, [pc, #472]	@ (80033fc <menu+0x20b4>)
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003226:	f000 fdd5 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800322a:	2104      	movs	r1, #4
 800322c:	4875      	ldr	r0, [pc, #468]	@ (8003404 <menu+0x20bc>)
 800322e:	f007 f8a5 	bl	800a37c <HAL_GPIO_ReadPin>
 8003232:	4603      	mov	r3, r0
 8003234:	2b01      	cmp	r3, #1
 8003236:	d115      	bne.n	8003264 <menu+0x1f1c>
 8003238:	4b73      	ldr	r3, [pc, #460]	@ (8003408 <menu+0x20c0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003246:	4b6d      	ldr	r3, [pc, #436]	@ (80033fc <menu+0x20b4>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3b01      	subs	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4b6b      	ldr	r3, [pc, #428]	@ (80033fc <menu+0x20b4>)
 8003250:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003252:	4b6a      	ldr	r3, [pc, #424]	@ (80033fc <menu+0x20b4>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800325a:	4b68      	ldr	r3, [pc, #416]	@ (80033fc <menu+0x20b4>)
 800325c:	2205      	movs	r2, #5
 800325e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003260:	f000 fdb8 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003264:	2108      	movs	r1, #8
 8003266:	4867      	ldr	r0, [pc, #412]	@ (8003404 <menu+0x20bc>)
 8003268:	f007 f888 	bl	800a37c <HAL_GPIO_ReadPin>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10d      	bne.n	800328e <menu+0x1f46>
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <menu+0x20c0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003280:	4b5e      	ldr	r3, [pc, #376]	@ (80033fc <menu+0x20b4>)
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	4b61      	ldr	r3, [pc, #388]	@ (800340c <menu+0x20c4>)
 8003286:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003288:	4b61      	ldr	r3, [pc, #388]	@ (8003410 <menu+0x20c8>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800328e:	4b61      	ldr	r3, [pc, #388]	@ (8003414 <menu+0x20cc>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b19      	cmp	r3, #25
 8003294:	d172      	bne.n	800337c <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8003296:	4b56      	ldr	r3, [pc, #344]	@ (80033f0 <menu+0x20a8>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d105      	bne.n	80032aa <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800329e:	4a5e      	ldr	r2, [pc, #376]	@ (8003418 <menu+0x20d0>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	2001      	movs	r0, #1
 80032a4:	f005 fd40 	bl	8008d28 <lcd_print>
 80032a8:	e008      	b.n	80032bc <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80032aa:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <menu+0x20a8>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d104      	bne.n	80032bc <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80032b2:	4a5a      	ldr	r2, [pc, #360]	@ (800341c <menu+0x20d4>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	2001      	movs	r0, #1
 80032b8:	f005 fd36 	bl	8008d28 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032bc:	4a4e      	ldr	r2, [pc, #312]	@ (80033f8 <menu+0x20b0>)
 80032be:	2101      	movs	r1, #1
 80032c0:	2002      	movs	r0, #2
 80032c2:	f005 fd31 	bl	8008d28 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80032c6:	4b56      	ldr	r3, [pc, #344]	@ (8003420 <menu+0x20d8>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	220a      	movs	r2, #10
 80032cc:	494c      	ldr	r1, [pc, #304]	@ (8003400 <menu+0x20b8>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f00a f880 	bl	800d3d4 <itoa>
		lcd_print(2,16,snum);
 80032d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003400 <menu+0x20b8>)
 80032d6:	2110      	movs	r1, #16
 80032d8:	2002      	movs	r0, #2
 80032da:	f005 fd25 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032de:	2102      	movs	r1, #2
 80032e0:	4848      	ldr	r0, [pc, #288]	@ (8003404 <menu+0x20bc>)
 80032e2:	f007 f84b 	bl	800a37c <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d115      	bne.n	8003318 <menu+0x1fd0>
 80032ec:	4b46      	ldr	r3, [pc, #280]	@ (8003408 <menu+0x20c0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00e      	beq.n	8003318 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80032fa:	4b49      	ldr	r3, [pc, #292]	@ (8003420 <menu+0x20d8>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <menu+0x20d8>)
 8003304:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003306:	4b46      	ldr	r3, [pc, #280]	@ (8003420 <menu+0x20d8>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d902      	bls.n	8003314 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800330e:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <menu+0x20d8>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003314:	f000 fd5e 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003318:	2104      	movs	r1, #4
 800331a:	483a      	ldr	r0, [pc, #232]	@ (8003404 <menu+0x20bc>)
 800331c:	f007 f82e 	bl	800a37c <HAL_GPIO_ReadPin>
 8003320:	4603      	mov	r3, r0
 8003322:	2b01      	cmp	r3, #1
 8003324:	d115      	bne.n	8003352 <menu+0x200a>
 8003326:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <menu+0x20c0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003334:	4b3a      	ldr	r3, [pc, #232]	@ (8003420 <menu+0x20d8>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <menu+0x20d8>)
 800333e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003340:	4b37      	ldr	r3, [pc, #220]	@ (8003420 <menu+0x20d8>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d902      	bls.n	800334e <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8003348:	4b35      	ldr	r3, [pc, #212]	@ (8003420 <menu+0x20d8>)
 800334a:	2205      	movs	r2, #5
 800334c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800334e:	f000 fd41 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003352:	2108      	movs	r1, #8
 8003354:	482b      	ldr	r0, [pc, #172]	@ (8003404 <menu+0x20bc>)
 8003356:	f007 f811 	bl	800a37c <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10d      	bne.n	800337c <menu+0x2034>
 8003360:	4b29      	ldr	r3, [pc, #164]	@ (8003408 <menu+0x20c0>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 800336e:	4b2c      	ldr	r3, [pc, #176]	@ (8003420 <menu+0x20d8>)
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <menu+0x20c4>)
 8003374:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003376:	4b26      	ldr	r3, [pc, #152]	@ (8003410 <menu+0x20c8>)
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800337c:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <menu+0x20cc>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b1a      	cmp	r3, #26
 8003382:	f040 80b7 	bne.w	80034f4 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8003386:	4a27      	ldr	r2, [pc, #156]	@ (8003424 <menu+0x20dc>)
 8003388:	2101      	movs	r1, #1
 800338a:	2001      	movs	r0, #1
 800338c:	f005 fccc 	bl	8008d28 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003390:	4b25      	ldr	r3, [pc, #148]	@ (8003428 <menu+0x20e0>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b63      	cmp	r3, #99	@ 0x63
 8003396:	d911      	bls.n	80033bc <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <menu+0x20b0>)
 800339a:	2101      	movs	r1, #1
 800339c:	2002      	movs	r0, #2
 800339e:	f005 fcc3 	bl	8008d28 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033a2:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <menu+0x20e0>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	220a      	movs	r2, #10
 80033a8:	4915      	ldr	r1, [pc, #84]	@ (8003400 <menu+0x20b8>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00a f812 	bl	800d3d4 <itoa>
			lcd_print(2,14,snum);
 80033b0:	4a13      	ldr	r2, [pc, #76]	@ (8003400 <menu+0x20b8>)
 80033b2:	210e      	movs	r1, #14
 80033b4:	2002      	movs	r0, #2
 80033b6:	f005 fcb7 	bl	8008d28 <lcd_print>
 80033ba:	e04c      	b.n	8003456 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <menu+0x20e0>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d933      	bls.n	800342c <menu+0x20e4>
 80033c4:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <menu+0x20e0>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b63      	cmp	r3, #99	@ 0x63
 80033ca:	d82f      	bhi.n	800342c <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <menu+0x20b0>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	2002      	movs	r0, #2
 80033d2:	f005 fca9 	bl	8008d28 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <menu+0x20e0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	220a      	movs	r2, #10
 80033dc:	4908      	ldr	r1, [pc, #32]	@ (8003400 <menu+0x20b8>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f009 fff8 	bl	800d3d4 <itoa>
			lcd_print(2, 15, snum);
 80033e4:	4a06      	ldr	r2, [pc, #24]	@ (8003400 <menu+0x20b8>)
 80033e6:	210f      	movs	r1, #15
 80033e8:	2002      	movs	r0, #2
 80033ea:	f005 fc9d 	bl	8008d28 <lcd_print>
 80033ee:	e032      	b.n	8003456 <menu+0x210e>
 80033f0:	200010cb 	.word	0x200010cb
 80033f4:	200016bc 	.word	0x200016bc
 80033f8:	200014c8 	.word	0x200014c8
 80033fc:	200010d2 	.word	0x200010d2
 8003400:	2000105c 	.word	0x2000105c
 8003404:	40010800 	.word	0x40010800
 8003408:	200010ec 	.word	0x200010ec
 800340c:	20000fec 	.word	0x20000fec
 8003410:	200010e9 	.word	0x200010e9
 8003414:	200010bc 	.word	0x200010bc
 8003418:	200016d0 	.word	0x200016d0
 800341c:	200016e4 	.word	0x200016e4
 8003420:	200010d3 	.word	0x200010d3
 8003424:	200016f8 	.word	0x200016f8
 8003428:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 800342c:	4b72      	ldr	r3, [pc, #456]	@ (80035f8 <menu+0x22b0>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b09      	cmp	r3, #9
 8003432:	d810      	bhi.n	8003456 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003434:	4a71      	ldr	r2, [pc, #452]	@ (80035fc <menu+0x22b4>)
 8003436:	2101      	movs	r1, #1
 8003438:	2002      	movs	r0, #2
 800343a:	f005 fc75 	bl	8008d28 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800343e:	4b6e      	ldr	r3, [pc, #440]	@ (80035f8 <menu+0x22b0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	220a      	movs	r2, #10
 8003444:	496e      	ldr	r1, [pc, #440]	@ (8003600 <menu+0x22b8>)
 8003446:	4618      	mov	r0, r3
 8003448:	f009 ffc4 	bl	800d3d4 <itoa>
			lcd_print(2, 16, snum);
 800344c:	4a6c      	ldr	r2, [pc, #432]	@ (8003600 <menu+0x22b8>)
 800344e:	2110      	movs	r1, #16
 8003450:	2002      	movs	r0, #2
 8003452:	f005 fc69 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003456:	2102      	movs	r1, #2
 8003458:	486a      	ldr	r0, [pc, #424]	@ (8003604 <menu+0x22bc>)
 800345a:	f006 ff8f 	bl	800a37c <HAL_GPIO_ReadPin>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d115      	bne.n	8003490 <menu+0x2148>
 8003464:	4b68      	ldr	r3, [pc, #416]	@ (8003608 <menu+0x22c0>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	f083 0301 	eor.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00e      	beq.n	8003490 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003472:	4b61      	ldr	r3, [pc, #388]	@ (80035f8 <menu+0x22b0>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4b5f      	ldr	r3, [pc, #380]	@ (80035f8 <menu+0x22b0>)
 800347c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800347e:	4b5e      	ldr	r3, [pc, #376]	@ (80035f8 <menu+0x22b0>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2bb4      	cmp	r3, #180	@ 0xb4
 8003484:	d902      	bls.n	800348c <menu+0x2144>
				makineCalismaTmr = 0;
 8003486:	4b5c      	ldr	r3, [pc, #368]	@ (80035f8 <menu+0x22b0>)
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800348c:	f000 fca2 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003490:	2104      	movs	r1, #4
 8003492:	485c      	ldr	r0, [pc, #368]	@ (8003604 <menu+0x22bc>)
 8003494:	f006 ff72 	bl	800a37c <HAL_GPIO_ReadPin>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d115      	bne.n	80034ca <menu+0x2182>
 800349e:	4b5a      	ldr	r3, [pc, #360]	@ (8003608 <menu+0x22c0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	f083 0301 	eor.w	r3, r3, #1
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80034ac:	4b52      	ldr	r3, [pc, #328]	@ (80035f8 <menu+0x22b0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	4b50      	ldr	r3, [pc, #320]	@ (80035f8 <menu+0x22b0>)
 80034b6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80034b8:	4b4f      	ldr	r3, [pc, #316]	@ (80035f8 <menu+0x22b0>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2bb5      	cmp	r3, #181	@ 0xb5
 80034be:	d902      	bls.n	80034c6 <menu+0x217e>
		   		makineCalismaTmr = 180;
 80034c0:	4b4d      	ldr	r3, [pc, #308]	@ (80035f8 <menu+0x22b0>)
 80034c2:	22b4      	movs	r2, #180	@ 0xb4
 80034c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034c6:	f000 fc85 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ca:	2108      	movs	r1, #8
 80034cc:	484d      	ldr	r0, [pc, #308]	@ (8003604 <menu+0x22bc>)
 80034ce:	f006 ff55 	bl	800a37c <HAL_GPIO_ReadPin>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10d      	bne.n	80034f4 <menu+0x21ac>
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <menu+0x22c0>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d006      	beq.n	80034f4 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80034e6:	4b44      	ldr	r3, [pc, #272]	@ (80035f8 <menu+0x22b0>)
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	4b48      	ldr	r3, [pc, #288]	@ (800360c <menu+0x22c4>)
 80034ec:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80034ee:	4b48      	ldr	r3, [pc, #288]	@ (8003610 <menu+0x22c8>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80034f4:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <menu+0x22cc>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b1b      	cmp	r3, #27
 80034fa:	d166      	bne.n	80035ca <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80034fc:	4a46      	ldr	r2, [pc, #280]	@ (8003618 <menu+0x22d0>)
 80034fe:	2101      	movs	r1, #1
 8003500:	2001      	movs	r0, #1
 8003502:	f005 fc11 	bl	8008d28 <lcd_print>

		if(buzzer == 0) {
 8003506:	4b45      	ldr	r3, [pc, #276]	@ (800361c <menu+0x22d4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800350e:	4a44      	ldr	r2, [pc, #272]	@ (8003620 <menu+0x22d8>)
 8003510:	2101      	movs	r1, #1
 8003512:	2002      	movs	r0, #2
 8003514:	f005 fc08 	bl	8008d28 <lcd_print>
 8003518:	e008      	b.n	800352c <menu+0x21e4>
		} else if(buzzer == 1) {
 800351a:	4b40      	ldr	r3, [pc, #256]	@ (800361c <menu+0x22d4>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d104      	bne.n	800352c <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003522:	4a40      	ldr	r2, [pc, #256]	@ (8003624 <menu+0x22dc>)
 8003524:	2101      	movs	r1, #1
 8003526:	2002      	movs	r0, #2
 8003528:	f005 fbfe 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800352c:	2102      	movs	r1, #2
 800352e:	4835      	ldr	r0, [pc, #212]	@ (8003604 <menu+0x22bc>)
 8003530:	f006 ff24 	bl	800a37c <HAL_GPIO_ReadPin>
 8003534:	4603      	mov	r3, r0
 8003536:	2b01      	cmp	r3, #1
 8003538:	d115      	bne.n	8003566 <menu+0x221e>
 800353a:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <menu+0x22c0>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <menu+0x221e>
			buzzer = buzzer + 1;
 8003548:	4b34      	ldr	r3, [pc, #208]	@ (800361c <menu+0x22d4>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	b2da      	uxtb	r2, r3
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <menu+0x22d4>)
 8003552:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003554:	4b31      	ldr	r3, [pc, #196]	@ (800361c <menu+0x22d4>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d902      	bls.n	8003562 <menu+0x221a>
				buzzer = 0;
 800355c:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <menu+0x22d4>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003562:	f000 fc37 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003566:	2104      	movs	r1, #4
 8003568:	4826      	ldr	r0, [pc, #152]	@ (8003604 <menu+0x22bc>)
 800356a:	f006 ff07 	bl	800a37c <HAL_GPIO_ReadPin>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	d115      	bne.n	80035a0 <menu+0x2258>
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <menu+0x22c0>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f083 0301 	eor.w	r3, r3, #1
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <menu+0x2258>
			buzzer = buzzer - 1;
 8003582:	4b26      	ldr	r3, [pc, #152]	@ (800361c <menu+0x22d4>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	3b01      	subs	r3, #1
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b24      	ldr	r3, [pc, #144]	@ (800361c <menu+0x22d4>)
 800358c:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800358e:	4b23      	ldr	r3, [pc, #140]	@ (800361c <menu+0x22d4>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <menu+0x2254>
		   		buzzer = 1;
 8003596:	4b21      	ldr	r3, [pc, #132]	@ (800361c <menu+0x22d4>)
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800359c:	f000 fc1a 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035a0:	2108      	movs	r1, #8
 80035a2:	4818      	ldr	r0, [pc, #96]	@ (8003604 <menu+0x22bc>)
 80035a4:	f006 feea 	bl	800a37c <HAL_GPIO_ReadPin>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10d      	bne.n	80035ca <menu+0x2282>
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <menu+0x22c0>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <menu+0x2282>
			eepromData[25] = buzzer;
 80035bc:	4b17      	ldr	r3, [pc, #92]	@ (800361c <menu+0x22d4>)
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	4b12      	ldr	r3, [pc, #72]	@ (800360c <menu+0x22c4>)
 80035c2:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80035c4:	4b12      	ldr	r3, [pc, #72]	@ (8003610 <menu+0x22c8>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80035ca:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <menu+0x22cc>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b1c      	cmp	r3, #28
 80035d0:	f040 8088 	bne.w	80036e4 <menu+0x239c>
		calismaSayModu = 0;
 80035d4:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <menu+0x22e0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80035da:	4a14      	ldr	r2, [pc, #80]	@ (800362c <menu+0x22e4>)
 80035dc:	2101      	movs	r1, #1
 80035de:	2001      	movs	r0, #1
 80035e0:	f005 fba2 	bl	8008d28 <lcd_print>

		if(demoMode == 0) {
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <menu+0x22e8>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d123      	bne.n	8003634 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80035ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <menu+0x22d8>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	2002      	movs	r0, #2
 80035f2:	f005 fb99 	bl	8008d28 <lcd_print>
 80035f6:	e026      	b.n	8003646 <menu+0x22fe>
 80035f8:	200010d4 	.word	0x200010d4
 80035fc:	200014c8 	.word	0x200014c8
 8003600:	2000105c 	.word	0x2000105c
 8003604:	40010800 	.word	0x40010800
 8003608:	200010ec 	.word	0x200010ec
 800360c:	20000fec 	.word	0x20000fec
 8003610:	200010e9 	.word	0x200010e9
 8003614:	200010bc 	.word	0x200010bc
 8003618:	20000128 	.word	0x20000128
 800361c:	200010d8 	.word	0x200010d8
 8003620:	2000139c 	.word	0x2000139c
 8003624:	200013b0 	.word	0x200013b0
 8003628:	200010db 	.word	0x200010db
 800362c:	2000013c 	.word	0x2000013c
 8003630:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003634:	4b80      	ldr	r3, [pc, #512]	@ (8003838 <menu+0x24f0>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d104      	bne.n	8003646 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 800363c:	4a7f      	ldr	r2, [pc, #508]	@ (800383c <menu+0x24f4>)
 800363e:	2101      	movs	r1, #1
 8003640:	2002      	movs	r0, #2
 8003642:	f005 fb71 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003646:	2102      	movs	r1, #2
 8003648:	487d      	ldr	r0, [pc, #500]	@ (8003840 <menu+0x24f8>)
 800364a:	f006 fe97 	bl	800a37c <HAL_GPIO_ReadPin>
 800364e:	4603      	mov	r3, r0
 8003650:	2b01      	cmp	r3, #1
 8003652:	d115      	bne.n	8003680 <menu+0x2338>
 8003654:	4b7b      	ldr	r3, [pc, #492]	@ (8003844 <menu+0x24fc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	f083 0301 	eor.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00e      	beq.n	8003680 <menu+0x2338>
			demoMode = demoMode + 1;
 8003662:	4b75      	ldr	r3, [pc, #468]	@ (8003838 <menu+0x24f0>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b73      	ldr	r3, [pc, #460]	@ (8003838 <menu+0x24f0>)
 800366c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800366e:	4b72      	ldr	r3, [pc, #456]	@ (8003838 <menu+0x24f0>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d902      	bls.n	800367c <menu+0x2334>
				demoMode = 0;
 8003676:	4b70      	ldr	r3, [pc, #448]	@ (8003838 <menu+0x24f0>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800367c:	f000 fbaa 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003680:	2104      	movs	r1, #4
 8003682:	486f      	ldr	r0, [pc, #444]	@ (8003840 <menu+0x24f8>)
 8003684:	f006 fe7a 	bl	800a37c <HAL_GPIO_ReadPin>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d115      	bne.n	80036ba <menu+0x2372>
 800368e:	4b6d      	ldr	r3, [pc, #436]	@ (8003844 <menu+0x24fc>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	f083 0301 	eor.w	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <menu+0x2372>
			demoMode = demoMode - 1;
 800369c:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <menu+0x24f0>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b64      	ldr	r3, [pc, #400]	@ (8003838 <menu+0x24f0>)
 80036a6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80036a8:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <menu+0x24f0>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <menu+0x236e>
		   		demoMode = 1;
 80036b0:	4b61      	ldr	r3, [pc, #388]	@ (8003838 <menu+0x24f0>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036b6:	f000 fb8d 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ba:	2108      	movs	r1, #8
 80036bc:	4860      	ldr	r0, [pc, #384]	@ (8003840 <menu+0x24f8>)
 80036be:	f006 fe5d 	bl	800a37c <HAL_GPIO_ReadPin>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10d      	bne.n	80036e4 <menu+0x239c>
 80036c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003844 <menu+0x24fc>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	f083 0301 	eor.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <menu+0x239c>
			eepromData[26] = demoMode;
 80036d6:	4b58      	ldr	r3, [pc, #352]	@ (8003838 <menu+0x24f0>)
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <menu+0x2500>)
 80036dc:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036de:	4b5b      	ldr	r3, [pc, #364]	@ (800384c <menu+0x2504>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80036e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003850 <menu+0x2508>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b1d      	cmp	r3, #29
 80036ea:	f040 80d5 	bne.w	8003898 <menu+0x2550>
		finalCount=0;
 80036ee:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <menu+0x250c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 80036f4:	4b58      	ldr	r3, [pc, #352]	@ (8003858 <menu+0x2510>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d135      	bne.n	8003768 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 80036fc:	4a57      	ldr	r2, [pc, #348]	@ (800385c <menu+0x2514>)
 80036fe:	2101      	movs	r1, #1
 8003700:	2001      	movs	r0, #1
 8003702:	f005 fb11 	bl	8008d28 <lcd_print>

			if(demoMode == 1) {
 8003706:	4b4c      	ldr	r3, [pc, #304]	@ (8003838 <menu+0x24f0>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d113      	bne.n	8003736 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800370e:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <menu+0x2518>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	4613      	mov	r3, r2
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	1a9a      	subs	r2, r3, r2
 800371a:	4b4e      	ldr	r3, [pc, #312]	@ (8003854 <menu+0x250c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4a4c      	ldr	r2, [pc, #304]	@ (8003854 <menu+0x250c>)
 8003722:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003724:	4b4f      	ldr	r3, [pc, #316]	@ (8003864 <menu+0x251c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b4a      	ldr	r3, [pc, #296]	@ (8003854 <menu+0x250c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a48      	ldr	r2, [pc, #288]	@ (8003854 <menu+0x250c>)
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e012      	b.n	800375c <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003736:	4b4c      	ldr	r3, [pc, #304]	@ (8003868 <menu+0x2520>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4613      	mov	r3, r2
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	1a9a      	subs	r2, r3, r2
 8003742:	4b44      	ldr	r3, [pc, #272]	@ (8003854 <menu+0x250c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a42      	ldr	r2, [pc, #264]	@ (8003854 <menu+0x250c>)
 800374a:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 800374c:	4b47      	ldr	r3, [pc, #284]	@ (800386c <menu+0x2524>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b40      	ldr	r3, [pc, #256]	@ (8003854 <menu+0x250c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4413      	add	r3, r2
 8003758:	4a3e      	ldr	r2, [pc, #248]	@ (8003854 <menu+0x250c>)
 800375a:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 800375c:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <menu+0x250c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fa89 	bl	8003c78 <displayCycleOnLCD>
 8003766:	e00d      	b.n	8003784 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003768:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <menu+0x2510>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d109      	bne.n	8003784 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003770:	4a3a      	ldr	r2, [pc, #232]	@ (800385c <menu+0x2514>)
 8003772:	2101      	movs	r1, #1
 8003774:	2001      	movs	r0, #1
 8003776:	f005 fad7 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 800377a:	4a3d      	ldr	r2, [pc, #244]	@ (8003870 <menu+0x2528>)
 800377c:	2101      	movs	r1, #1
 800377e:	2002      	movs	r0, #2
 8003780:	f005 fad2 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003784:	2102      	movs	r1, #2
 8003786:	482e      	ldr	r0, [pc, #184]	@ (8003840 <menu+0x24f8>)
 8003788:	f006 fdf8 	bl	800a37c <HAL_GPIO_ReadPin>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d115      	bne.n	80037be <menu+0x2476>
 8003792:	4b2c      	ldr	r3, [pc, #176]	@ (8003844 <menu+0x24fc>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f083 0301 	eor.w	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80037a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <menu+0x2510>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003858 <menu+0x2510>)
 80037aa:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80037ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <menu+0x2510>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d902      	bls.n	80037ba <menu+0x2472>
				calismaSayModu = 0;
 80037b4:	4b28      	ldr	r3, [pc, #160]	@ (8003858 <menu+0x2510>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037ba:	f000 fb0b 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037be:	2104      	movs	r1, #4
 80037c0:	481f      	ldr	r0, [pc, #124]	@ (8003840 <menu+0x24f8>)
 80037c2:	f006 fddb 	bl	800a37c <HAL_GPIO_ReadPin>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d115      	bne.n	80037f8 <menu+0x24b0>
 80037cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003844 <menu+0x24fc>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f083 0301 	eor.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00e      	beq.n	80037f8 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 80037da:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <menu+0x2510>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	3b01      	subs	r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <menu+0x2510>)
 80037e4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80037e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003858 <menu+0x2510>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <menu+0x24ac>
		   		calismaSayModu = 1;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <menu+0x2510>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037f4:	f000 faee 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f8:	2108      	movs	r1, #8
 80037fa:	4811      	ldr	r0, [pc, #68]	@ (8003840 <menu+0x24f8>)
 80037fc:	f006 fdbe 	bl	800a37c <HAL_GPIO_ReadPin>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d148      	bne.n	8003898 <menu+0x2550>
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <menu+0x24fc>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f083 0301 	eor.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d041      	beq.n	8003898 <menu+0x2550>
			if(demoMode == 1) {
 8003814:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <menu+0x24f0>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d12b      	bne.n	8003874 <menu+0x252c>
				eepromData[28] = 0;
 800381c:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <menu+0x2500>)
 800381e:	2200      	movs	r2, #0
 8003820:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003822:	4b09      	ldr	r3, [pc, #36]	@ (8003848 <menu+0x2500>)
 8003824:	2200      	movs	r2, #0
 8003826:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003828:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <menu+0x251c>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800382e:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <menu+0x2518>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e02a      	b.n	800388c <menu+0x2544>
 8003836:	bf00      	nop
 8003838:	200010da 	.word	0x200010da
 800383c:	200013b0 	.word	0x200013b0
 8003840:	40010800 	.word	0x40010800
 8003844:	200010ec 	.word	0x200010ec
 8003848:	20000fec 	.word	0x20000fec
 800384c:	200010e9 	.word	0x200010e9
 8003850:	200010bc 	.word	0x200010bc
 8003854:	200010b8 	.word	0x200010b8
 8003858:	200010db 	.word	0x200010db
 800385c:	2000170c 	.word	0x2000170c
 8003860:	200010b7 	.word	0x200010b7
 8003864:	200010b5 	.word	0x200010b5
 8003868:	200010b6 	.word	0x200010b6
 800386c:	200010b4 	.word	0x200010b4
 8003870:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 8003874:	4b4b      	ldr	r3, [pc, #300]	@ (80039a4 <menu+0x265c>)
 8003876:	2200      	movs	r2, #0
 8003878:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <menu+0x265c>)
 800387c:	2200      	movs	r2, #0
 800387e:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003880:	4b49      	ldr	r3, [pc, #292]	@ (80039a8 <menu+0x2660>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003886:	4b49      	ldr	r3, [pc, #292]	@ (80039ac <menu+0x2664>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 800388c:	4b48      	ldr	r3, [pc, #288]	@ (80039b0 <menu+0x2668>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003892:	4b48      	ldr	r3, [pc, #288]	@ (80039b4 <menu+0x266c>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003898:	4b47      	ldr	r3, [pc, #284]	@ (80039b8 <menu+0x2670>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b1e      	cmp	r3, #30
 800389e:	d16a      	bne.n	8003976 <menu+0x262e>
		calismaSayModu = 0;
 80038a0:	4b43      	ldr	r3, [pc, #268]	@ (80039b0 <menu+0x2668>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80038a6:	4a45      	ldr	r2, [pc, #276]	@ (80039bc <menu+0x2674>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	2001      	movs	r0, #1
 80038ac:	f005 fa3c 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80038b0:	4a43      	ldr	r2, [pc, #268]	@ (80039c0 <menu+0x2678>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	2002      	movs	r0, #2
 80038b6:	f005 fa37 	bl	8008d28 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ba:	2102      	movs	r1, #2
 80038bc:	4841      	ldr	r0, [pc, #260]	@ (80039c4 <menu+0x267c>)
 80038be:	f006 fd5d 	bl	800a37c <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d11c      	bne.n	8003902 <menu+0x25ba>
 80038c8:	4b3f      	ldr	r3, [pc, #252]	@ (80039c8 <menu+0x2680>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 80038d6:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <menu+0x2684>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <menu+0x2684>)
 80038e0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80038e2:	4b3a      	ldr	r3, [pc, #232]	@ (80039cc <menu+0x2684>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d902      	bls.n	80038f0 <menu+0x25a8>
				dilSecim = 0;
 80038ea:	4b38      	ldr	r3, [pc, #224]	@ (80039cc <menu+0x2684>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 80038f0:	f003 ff70 	bl	80077d4 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 80038f4:	4b35      	ldr	r3, [pc, #212]	@ (80039cc <menu+0x2684>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fae5 	bl	8005ec8 <loadMenuTexts>

			bekle();
 80038fe:	f000 fa69 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003902:	2104      	movs	r1, #4
 8003904:	482f      	ldr	r0, [pc, #188]	@ (80039c4 <menu+0x267c>)
 8003906:	f006 fd39 	bl	800a37c <HAL_GPIO_ReadPin>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d11c      	bne.n	800394a <menu+0x2602>
 8003910:	4b2d      	ldr	r3, [pc, #180]	@ (80039c8 <menu+0x2680>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d015      	beq.n	800394a <menu+0x2602>
			dilSecim = dilSecim - 1;
 800391e:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <menu+0x2684>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	3b01      	subs	r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b29      	ldr	r3, [pc, #164]	@ (80039cc <menu+0x2684>)
 8003928:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800392a:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <menu+0x2684>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <menu+0x25f0>
		   		dilSecim = 1;
 8003932:	4b26      	ldr	r3, [pc, #152]	@ (80039cc <menu+0x2684>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003938:	f003 ff4c 	bl	80077d4 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <menu+0x2684>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f002 fac1 	bl	8005ec8 <loadMenuTexts>

			bekle();
 8003946:	f000 fa45 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800394a:	2108      	movs	r1, #8
 800394c:	481d      	ldr	r0, [pc, #116]	@ (80039c4 <menu+0x267c>)
 800394e:	f006 fd15 	bl	800a37c <HAL_GPIO_ReadPin>
 8003952:	4603      	mov	r3, r0
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10e      	bne.n	8003976 <menu+0x262e>
 8003958:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <menu+0x2680>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	f083 0301 	eor.w	r3, r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <menu+0x2684>)
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <menu+0x265c>)
 800396c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003970:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <menu+0x266c>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <menu+0x2670>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b1f      	cmp	r3, #31
 800397c:	f040 8087 	bne.w	8003a8e <menu+0x2746>
		calismaSayModu = 0;
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <menu+0x2668>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003986:	4a12      	ldr	r2, [pc, #72]	@ (80039d0 <menu+0x2688>)
 8003988:	2101      	movs	r1, #1
 800398a:	2001      	movs	r0, #1
 800398c:	f005 f9cc 	bl	8008d28 <lcd_print>

		if(iotMode == 0) {
 8003990:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <menu+0x268c>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d121      	bne.n	80039dc <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003998:	4a0f      	ldr	r2, [pc, #60]	@ (80039d8 <menu+0x2690>)
 800399a:	2101      	movs	r1, #1
 800399c:	2002      	movs	r0, #2
 800399e:	f005 f9c3 	bl	8008d28 <lcd_print>
 80039a2:	e024      	b.n	80039ee <menu+0x26a6>
 80039a4:	20000fec 	.word	0x20000fec
 80039a8:	200010b4 	.word	0x200010b4
 80039ac:	200010b6 	.word	0x200010b6
 80039b0:	200010db 	.word	0x200010db
 80039b4:	200010e9 	.word	0x200010e9
 80039b8:	200010bc 	.word	0x200010bc
 80039bc:	20001734 	.word	0x20001734
 80039c0:	20001748 	.word	0x20001748
 80039c4:	40010800 	.word	0x40010800
 80039c8:	200010ec 	.word	0x200010ec
 80039cc:	200010dc 	.word	0x200010dc
 80039d0:	20000150 	.word	0x20000150
 80039d4:	200010e7 	.word	0x200010e7
 80039d8:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 80039dc:	4b99      	ldr	r3, [pc, #612]	@ (8003c44 <menu+0x28fc>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d104      	bne.n	80039ee <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 80039e4:	4a98      	ldr	r2, [pc, #608]	@ (8003c48 <menu+0x2900>)
 80039e6:	2101      	movs	r1, #1
 80039e8:	2002      	movs	r0, #2
 80039ea:	f005 f99d 	bl	8008d28 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ee:	2102      	movs	r1, #2
 80039f0:	4896      	ldr	r0, [pc, #600]	@ (8003c4c <menu+0x2904>)
 80039f2:	f006 fcc3 	bl	800a37c <HAL_GPIO_ReadPin>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d115      	bne.n	8003a28 <menu+0x26e0>
 80039fc:	4b94      	ldr	r3, [pc, #592]	@ (8003c50 <menu+0x2908>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f083 0301 	eor.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00e      	beq.n	8003a28 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8003c44 <menu+0x28fc>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4b8c      	ldr	r3, [pc, #560]	@ (8003c44 <menu+0x28fc>)
 8003a14:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003a16:	4b8b      	ldr	r3, [pc, #556]	@ (8003c44 <menu+0x28fc>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d902      	bls.n	8003a24 <menu+0x26dc>
				iotMode = 0;
 8003a1e:	4b89      	ldr	r3, [pc, #548]	@ (8003c44 <menu+0x28fc>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a24:	f000 f9d6 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4888      	ldr	r0, [pc, #544]	@ (8003c4c <menu+0x2904>)
 8003a2c:	f006 fca6 	bl	800a37c <HAL_GPIO_ReadPin>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d115      	bne.n	8003a62 <menu+0x271a>
 8003a36:	4b86      	ldr	r3, [pc, #536]	@ (8003c50 <menu+0x2908>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	f083 0301 	eor.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <menu+0x271a>
			iotMode = iotMode - 1;
 8003a44:	4b7f      	ldr	r3, [pc, #508]	@ (8003c44 <menu+0x28fc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b7d      	ldr	r3, [pc, #500]	@ (8003c44 <menu+0x28fc>)
 8003a4e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003a50:	4b7c      	ldr	r3, [pc, #496]	@ (8003c44 <menu+0x28fc>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <menu+0x2716>
		   		iotMode = 1;
 8003a58:	4b7a      	ldr	r3, [pc, #488]	@ (8003c44 <menu+0x28fc>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a5e:	f000 f9b9 	bl	8003dd4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a62:	2108      	movs	r1, #8
 8003a64:	4879      	ldr	r0, [pc, #484]	@ (8003c4c <menu+0x2904>)
 8003a66:	f006 fc89 	bl	800a37c <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10e      	bne.n	8003a8e <menu+0x2746>
 8003a70:	4b77      	ldr	r3, [pc, #476]	@ (8003c50 <menu+0x2908>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <menu+0x2746>
			eepromData[48] = iotMode;
 8003a7e:	4b71      	ldr	r3, [pc, #452]	@ (8003c44 <menu+0x28fc>)
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	4b74      	ldr	r3, [pc, #464]	@ (8003c54 <menu+0x290c>)
 8003a84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003a88:	4b73      	ldr	r3, [pc, #460]	@ (8003c58 <menu+0x2910>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003a8e:	4b73      	ldr	r3, [pc, #460]	@ (8003c5c <menu+0x2914>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d127      	bne.n	8003ae6 <menu+0x279e>
		calismaSayModu = 0;
 8003a96:	4b72      	ldr	r3, [pc, #456]	@ (8003c60 <menu+0x2918>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003a9c:	4a71      	ldr	r2, [pc, #452]	@ (8003c64 <menu+0x291c>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f005 f941 	bl	8008d28 <lcd_print>

		convertArrays(1);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f7fc ff06 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003aac:	2032      	movs	r0, #50	@ 0x32
 8003aae:	f005 fe95 	bl	80097dc <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7fd fbec 	bl	8001290 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4864      	ldr	r0, [pc, #400]	@ (8003c4c <menu+0x2904>)
 8003abc:	f006 fc5e 	bl	800a37c <HAL_GPIO_ReadPin>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10f      	bne.n	8003ae6 <menu+0x279e>
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	4860      	ldr	r0, [pc, #384]	@ (8003c4c <menu+0x2904>)
 8003aca:	f006 fc57 	bl	800a37c <HAL_GPIO_ReadPin>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d108      	bne.n	8003ae6 <menu+0x279e>
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c50 <menu+0x2908>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003ae2:	f004 f8eb 	bl	8007cbc <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c5c <menu+0x2914>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b21      	cmp	r3, #33	@ 0x21
 8003aec:	d12b      	bne.n	8003b46 <menu+0x27fe>
		calismaSayModu = 0;
 8003aee:	4b5c      	ldr	r3, [pc, #368]	@ (8003c60 <menu+0x2918>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003af4:	2002      	movs	r0, #2
 8003af6:	f7fc fedf 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003afa:	2032      	movs	r0, #50	@ 0x32
 8003afc:	f005 fe6e 	bl	80097dc <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003b00:	2002      	movs	r0, #2
 8003b02:	f7fd fbc5 	bl	8001290 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b06:	2102      	movs	r1, #2
 8003b08:	4850      	ldr	r0, [pc, #320]	@ (8003c4c <menu+0x2904>)
 8003b0a:	f006 fc37 	bl	800a37c <HAL_GPIO_ReadPin>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d118      	bne.n	8003b46 <menu+0x27fe>
 8003b14:	2104      	movs	r1, #4
 8003b16:	484d      	ldr	r0, [pc, #308]	@ (8003c4c <menu+0x2904>)
 8003b18:	f006 fc30 	bl	800a37c <HAL_GPIO_ReadPin>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d111      	bne.n	8003b46 <menu+0x27fe>
 8003b22:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <menu+0x2908>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	f083 0301 	eor.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <menu+0x27fe>
			takeWifiSSID();
 8003b30:	f004 faba 	bl	80080a8 <takeWifiSSID>

			convertArrays(2);
 8003b34:	2002      	movs	r0, #2
 8003b36:	f7fc febf 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003b3a:	2032      	movs	r0, #50	@ 0x32
 8003b3c:	f005 fe4e 	bl	80097dc <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003b40:	2002      	movs	r0, #2
 8003b42:	f7fd fba5 	bl	8001290 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003b46:	4b45      	ldr	r3, [pc, #276]	@ (8003c5c <menu+0x2914>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b22      	cmp	r3, #34	@ 0x22
 8003b4c:	d12b      	bne.n	8003ba6 <menu+0x285e>
		calismaSayModu = 0;
 8003b4e:	4b44      	ldr	r3, [pc, #272]	@ (8003c60 <menu+0x2918>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003b54:	2003      	movs	r0, #3
 8003b56:	f7fc feaf 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003b5a:	2032      	movs	r0, #50	@ 0x32
 8003b5c:	f005 fe3e 	bl	80097dc <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003b60:	2003      	movs	r0, #3
 8003b62:	f7fd fb95 	bl	8001290 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b66:	2102      	movs	r1, #2
 8003b68:	4838      	ldr	r0, [pc, #224]	@ (8003c4c <menu+0x2904>)
 8003b6a:	f006 fc07 	bl	800a37c <HAL_GPIO_ReadPin>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d118      	bne.n	8003ba6 <menu+0x285e>
 8003b74:	2104      	movs	r1, #4
 8003b76:	4835      	ldr	r0, [pc, #212]	@ (8003c4c <menu+0x2904>)
 8003b78:	f006 fc00 	bl	800a37c <HAL_GPIO_ReadPin>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d111      	bne.n	8003ba6 <menu+0x285e>
 8003b82:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <menu+0x2908>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <menu+0x285e>
			takeWifiPass();
 8003b90:	f004 fc36 	bl	8008400 <takeWifiPass>

			convertArrays(3);
 8003b94:	2003      	movs	r0, #3
 8003b96:	f7fc fe8f 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003b9a:	2032      	movs	r0, #50	@ 0x32
 8003b9c:	f005 fe1e 	bl	80097dc <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003ba0:	2003      	movs	r0, #3
 8003ba2:	f7fd fb75 	bl	8001290 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <menu+0x2914>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b23      	cmp	r3, #35	@ 0x23
 8003bac:	d146      	bne.n	8003c3c <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003bae:	4a2e      	ldr	r2, [pc, #184]	@ (8003c68 <menu+0x2920>)
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f005 f8b8 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <menu+0x2924>)
 8003bba:	2101      	movs	r1, #1
 8003bbc:	2002      	movs	r0, #2
 8003bbe:	f005 f8b3 	bl	8008d28 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	4821      	ldr	r0, [pc, #132]	@ (8003c4c <menu+0x2904>)
 8003bc6:	f006 fbd9 	bl	800a37c <HAL_GPIO_ReadPin>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d135      	bne.n	8003c3c <menu+0x28f4>
			menuGiris = 0;
 8003bd0:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <menu+0x2928>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003bd6:	f005 fdf7 	bl	80097c8 <HAL_GetTick>
 8003bda:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003bdc:	e007      	b.n	8003bee <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003bde:	f005 fdf3 	bl	80097c8 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bec:	d806      	bhi.n	8003bfc <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003bee:	4821      	ldr	r0, [pc, #132]	@ (8003c74 <menu+0x292c>)
 8003bf0:	f007 f9ed 	bl	800afce <HAL_I2C_GetError>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d0f1      	beq.n	8003bde <menu+0x2896>
 8003bfa:	e000      	b.n	8003bfe <menu+0x28b6>
			        break;
 8003bfc:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003bfe:	f005 fde3 	bl	80097c8 <HAL_GetTick>
 8003c02:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003c04:	e007      	b.n	8003c16 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003c06:	f005 fddf 	bl	80097c8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c14:	d806      	bhi.n	8003c24 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003c16:	4817      	ldr	r0, [pc, #92]	@ (8003c74 <menu+0x292c>)
 8003c18:	f007 f9cc 	bl	800afb4 <HAL_I2C_GetState>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d1f1      	bne.n	8003c06 <menu+0x28be>
 8003c22:	e000      	b.n	8003c26 <menu+0x28de>
			        break;
 8003c24:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fc fd44 	bl	80006b4 <saveEEPROM>

			lcd_clear();
 8003c2c:	f005 f8a8 	bl	8008d80 <lcd_clear>
			HAL_Delay(500);
 8003c30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c34:	f005 fdd2 	bl	80097dc <HAL_Delay>
			NVIC_SystemReset();
 8003c38:	f7fd fb70 	bl	800131c <__NVIC_SystemReset>
		}
	}
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200010e7 	.word	0x200010e7
 8003c48:	200013b0 	.word	0x200013b0
 8003c4c:	40010800 	.word	0x40010800
 8003c50:	200010ec 	.word	0x200010ec
 8003c54:	20000fec 	.word	0x20000fec
 8003c58:	200010e9 	.word	0x200010e9
 8003c5c:	200010bc 	.word	0x200010bc
 8003c60:	200010db 	.word	0x200010db
 8003c64:	200018c4 	.word	0x200018c4
 8003c68:	2000175c 	.word	0x2000175c
 8003c6c:	20001770 	.word	0x20001770
 8003c70:	200010d9 	.word	0x200010d9
 8003c74:	2000193c 	.word	0x2000193c

08003c78 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	@ 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003c80:	220a      	movs	r2, #10
 8003c82:	491c      	ldr	r1, [pc, #112]	@ (8003cf4 <displayCycleOnLCD+0x7c>)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f009 fba5 	bl	800d3d4 <itoa>

    int length = strlen(snum);
 8003c8a:	481a      	ldr	r0, [pc, #104]	@ (8003cf4 <displayCycleOnLCD+0x7c>)
 8003c8c:	f7fc faca 	bl	8000224 <strlen>
 8003c90:	4603      	mov	r3, r0
 8003c92:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f1c3 0310 	rsb	r3, r3, #16
 8003c9a:	0fda      	lsrs	r2, r3, #31
 8003c9c:	4413      	add	r3, r2
 8003c9e:	105b      	asrs	r3, r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	2120      	movs	r1, #32
 8003caa:	4618      	mov	r0, r3
 8003cac:	f009 fce0 	bl	800d670 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb8:	e00d      	b.n	8003cd6 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	4413      	add	r3, r2
 8003cc0:	490c      	ldr	r1, [pc, #48]	@ (8003cf4 <displayCycleOnLCD+0x7c>)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc4:	440a      	add	r2, r1
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	3328      	adds	r3, #40	@ 0x28
 8003cca:	443b      	add	r3, r7
 8003ccc:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	dbed      	blt.n	8003cba <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2002      	movs	r0, #2
 8003ce8:	f005 f81e 	bl	8008d28 <lcd_print>
}
 8003cec:	bf00      	nop
 8003cee:	3728      	adds	r7, #40	@ 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000105c 	.word	0x2000105c

08003cf8 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003d08:	4a24      	ldr	r2, [pc, #144]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	f005 f80b 	bl	8008d28 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003d12:	e03e      	b.n	8003d92 <lcdUpdate+0x9a>
	} else if(y==2) {
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d105      	bne.n	8003d26 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003d1a:	4a20      	ldr	r2, [pc, #128]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f005 f802 	bl	8008d28 <lcd_print>
}
 8003d24:	e035      	b.n	8003d92 <lcdUpdate+0x9a>
	} else if(y==3) {
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d105      	bne.n	8003d38 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d2e:	2103      	movs	r1, #3
 8003d30:	2002      	movs	r0, #2
 8003d32:	f004 fff9 	bl	8008d28 <lcd_print>
}
 8003d36:	e02c      	b.n	8003d92 <lcdUpdate+0x9a>
	} else if(y==4) {
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d105      	bne.n	8003d4a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003d3e:	4a17      	ldr	r2, [pc, #92]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d40:	2104      	movs	r1, #4
 8003d42:	2002      	movs	r0, #2
 8003d44:	f004 fff0 	bl	8008d28 <lcd_print>
}
 8003d48:	e023      	b.n	8003d92 <lcdUpdate+0x9a>
	} else if(y==5) {
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d105      	bne.n	8003d5c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003d50:	4a12      	ldr	r2, [pc, #72]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d52:	2105      	movs	r1, #5
 8003d54:	2002      	movs	r0, #2
 8003d56:	f004 ffe7 	bl	8008d28 <lcd_print>
}
 8003d5a:	e01a      	b.n	8003d92 <lcdUpdate+0x9a>
	} else if(y==6) {
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d105      	bne.n	8003d6e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003d62:	4a0e      	ldr	r2, [pc, #56]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d64:	2106      	movs	r1, #6
 8003d66:	2002      	movs	r0, #2
 8003d68:	f004 ffde 	bl	8008d28 <lcd_print>
}
 8003d6c:	e011      	b.n	8003d92 <lcdUpdate+0x9a>
	} else if (y==7) {
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b07      	cmp	r3, #7
 8003d72:	d10e      	bne.n	8003d92 <lcdUpdate+0x9a>
		lcd_clear();
 8003d74:	f005 f804 	bl	8008d80 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003d78:	4a09      	ldr	r2, [pc, #36]	@ (8003da0 <lcdUpdate+0xa8>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f004 ffd3 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003d82:	4a08      	ldr	r2, [pc, #32]	@ (8003da4 <lcdUpdate+0xac>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	2002      	movs	r0, #2
 8003d88:	f004 ffce 	bl	8008d28 <lcd_print>
		HAL_Delay(10);
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	f005 fd25 	bl	80097dc <HAL_Delay>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800e2dc 	.word	0x0800e2dc
 8003da0:	200000c4 	.word	0x200000c4
 8003da4:	200000d8 	.word	0x200000d8

08003da8 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <checkLCDBacklight+0x24>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <checkLCDBacklight+0x28>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b3b      	cmp	r3, #59	@ 0x3b
 8003db8:	d903      	bls.n	8003dc2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f005 f800 	bl	8008dc0 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003dc0:	e002      	b.n	8003dc8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f004 fffc 	bl	8008dc0 <lcd_backlight>
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20001094 	.word	0x20001094
 8003dd0:	200010b0 	.word	0x200010b0

08003dd4 <bekle>:

void bekle() {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	timer1=millis;
 8003dd8:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <bekle+0x124>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a47      	ldr	r2, [pc, #284]	@ (8003efc <bekle+0x128>)
 8003dde:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003de0:	e002      	b.n	8003de8 <bekle+0x14>
    	butonKontrol = 1;
 8003de2:	4b47      	ldr	r3, [pc, #284]	@ (8003f00 <bekle+0x12c>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003de8:	2101      	movs	r1, #1
 8003dea:	4846      	ldr	r0, [pc, #280]	@ (8003f04 <bekle+0x130>)
 8003dec:	f006 fac6 	bl	800a37c <HAL_GPIO_ReadPin>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d109      	bne.n	8003e0a <bekle+0x36>
 8003df6:	4b40      	ldr	r3, [pc, #256]	@ (8003ef8 <bekle+0x124>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <bekle+0x128>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d0ef      	beq.n	8003de2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e02:	e002      	b.n	8003e0a <bekle+0x36>
    	butonKontrol = 1;
 8003e04:	4b3e      	ldr	r3, [pc, #248]	@ (8003f00 <bekle+0x12c>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e0a:	2108      	movs	r1, #8
 8003e0c:	483e      	ldr	r0, [pc, #248]	@ (8003f08 <bekle+0x134>)
 8003e0e:	f006 fab5 	bl	800a37c <HAL_GPIO_ReadPin>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d109      	bne.n	8003e2c <bekle+0x58>
 8003e18:	4b37      	ldr	r3, [pc, #220]	@ (8003ef8 <bekle+0x124>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b37      	ldr	r3, [pc, #220]	@ (8003efc <bekle+0x128>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d0ef      	beq.n	8003e04 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e24:	e002      	b.n	8003e2c <bekle+0x58>
    	butonKontrol = 1;
 8003e26:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <bekle+0x12c>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4835      	ldr	r0, [pc, #212]	@ (8003f04 <bekle+0x130>)
 8003e30:	f006 faa4 	bl	800a37c <HAL_GPIO_ReadPin>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d109      	bne.n	8003e4e <bekle+0x7a>
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef8 <bekle+0x124>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003efc <bekle+0x128>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d0ef      	beq.n	8003e26 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e46:	e002      	b.n	8003e4e <bekle+0x7a>
    	butonKontrol = 1;
 8003e48:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <bekle+0x12c>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e4e:	2104      	movs	r1, #4
 8003e50:	482c      	ldr	r0, [pc, #176]	@ (8003f04 <bekle+0x130>)
 8003e52:	f006 fa93 	bl	800a37c <HAL_GPIO_ReadPin>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d109      	bne.n	8003e70 <bekle+0x9c>
 8003e5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <bekle+0x124>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <bekle+0x128>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d0ef      	beq.n	8003e48 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e68:	e002      	b.n	8003e70 <bekle+0x9c>
    	butonKontrol = 1;
 8003e6a:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <bekle+0x12c>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e70:	2108      	movs	r1, #8
 8003e72:	4824      	ldr	r0, [pc, #144]	@ (8003f04 <bekle+0x130>)
 8003e74:	f006 fa82 	bl	800a37c <HAL_GPIO_ReadPin>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d109      	bne.n	8003e92 <bekle+0xbe>
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <bekle+0x124>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <bekle+0x128>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d0ef      	beq.n	8003e6a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e8a:	e002      	b.n	8003e92 <bekle+0xbe>
    	butonKontrol = 1;
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <bekle+0x12c>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	481c      	ldr	r0, [pc, #112]	@ (8003f08 <bekle+0x134>)
 8003e96:	f006 fa71 	bl	800a37c <HAL_GPIO_ReadPin>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <bekle+0xe0>
 8003ea0:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <bekle+0x124>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <bekle+0x128>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0ef      	beq.n	8003e8c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003eac:	e002      	b.n	8003eb4 <bekle+0xe0>
    	butonKontrol = 1;
 8003eae:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <bekle+0x12c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003eb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003eb8:	4813      	ldr	r0, [pc, #76]	@ (8003f08 <bekle+0x134>)
 8003eba:	f006 fa5f 	bl	800a37c <HAL_GPIO_ReadPin>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <bekle+0x104>
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <bekle+0x124>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <bekle+0x128>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d0ee      	beq.n	8003eae <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ed0:	e002      	b.n	8003ed8 <bekle+0x104>
    	butonKontrol = 1;
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <bekle+0x12c>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ed8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003edc:	480a      	ldr	r0, [pc, #40]	@ (8003f08 <bekle+0x134>)
 8003ede:	f006 fa4d 	bl	800a37c <HAL_GPIO_ReadPin>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <bekle+0x120>
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <bekle+0x124>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <bekle+0x128>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d0ee      	beq.n	8003ed2 <bekle+0xfe>
    }

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20001094 	.word	0x20001094
 8003efc:	2000109c 	.word	0x2000109c
 8003f00:	200010ec 	.word	0x200010ec
 8003f04:	40010800 	.word	0x40010800
 8003f08:	40011000 	.word	0x40011000

08003f0c <buttonCheck>:

uint8_t buttonCheck(void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003f10:	2101      	movs	r1, #1
 8003f12:	4815      	ldr	r0, [pc, #84]	@ (8003f68 <buttonCheck+0x5c>)
 8003f14:	f006 fa32 	bl	800a37c <HAL_GPIO_ReadPin>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d01b      	beq.n	8003f56 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003f1e:	2108      	movs	r1, #8
 8003f20:	4812      	ldr	r0, [pc, #72]	@ (8003f6c <buttonCheck+0x60>)
 8003f22:	f006 fa2b 	bl	800a37c <HAL_GPIO_ReadPin>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d014      	beq.n	8003f56 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	480e      	ldr	r0, [pc, #56]	@ (8003f68 <buttonCheck+0x5c>)
 8003f30:	f006 fa24 	bl	800a37c <HAL_GPIO_ReadPin>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d00d      	beq.n	8003f56 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	480a      	ldr	r0, [pc, #40]	@ (8003f68 <buttonCheck+0x5c>)
 8003f3e:	f006 fa1d 	bl	800a37c <HAL_GPIO_ReadPin>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d006      	beq.n	8003f56 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003f48:	2108      	movs	r1, #8
 8003f4a:	4807      	ldr	r0, [pc, #28]	@ (8003f68 <buttonCheck+0x5c>)
 8003f4c:	f006 fa16 	bl	800a37c <HAL_GPIO_ReadPin>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d104      	bne.n	8003f60 <buttonCheck+0x54>
		backLightTimer = 0;
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <buttonCheck+0x64>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
		return 1;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <buttonCheck+0x56>
	}
	return 0;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40010800 	.word	0x40010800
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	200010b0 	.word	0x200010b0

08003f74 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <checkBasincSalteri+0x54>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <checkBasincSalteri+0x12>
		basincVar=1;
 8003f80:	4b12      	ldr	r3, [pc, #72]	@ (8003fcc <checkBasincSalteri+0x58>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <checkBasincSalteri+0x54>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d119      	bne.n	8003fc2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003f8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f92:	480f      	ldr	r0, [pc, #60]	@ (8003fd0 <checkBasincSalteri+0x5c>)
 8003f94:	f006 f9f2 	bl	800a37c <HAL_GPIO_ReadPin>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <checkBasincSalteri+0x60>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <checkBasincSalteri+0x64>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d90a      	bls.n	8003fc2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003fac:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <checkBasincSalteri+0x58>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003fb2:	e006      	b.n	8003fc2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003fb4:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <checkBasincSalteri+0x60>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a07      	ldr	r2, [pc, #28]	@ (8003fd8 <checkBasincSalteri+0x64>)
 8003fba:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <checkBasincSalteri+0x58>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200010c3 	.word	0x200010c3
 8003fcc:	200010bf 	.word	0x200010bf
 8003fd0:	40011000 	.word	0x40011000
 8003fd4:	20001094 	.word	0x20001094
 8003fd8:	200010ac 	.word	0x200010ac

08003fdc <checkBasGonder>:

void checkBasGonder() {
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <checkBasGonder+0x74>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10b      	bne.n	8004000 <checkBasGonder+0x24>
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <checkBasGonder+0x78>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <checkBasGonder+0x24>
 8003ff0:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <checkBasGonder+0x7c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003ff8:	4b18      	ldr	r3, [pc, #96]	@ (800405c <checkBasGonder+0x80>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e009      	b.n	8004014 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004000:	4b14      	ldr	r3, [pc, #80]	@ (8004054 <checkBasGonder+0x78>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800400e:	4b13      	ldr	r3, [pc, #76]	@ (800405c <checkBasGonder+0x80>)
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004014:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <checkBasGonder+0x74>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10b      	bne.n	8004034 <checkBasGonder+0x58>
 800401c:	4b10      	ldr	r3, [pc, #64]	@ (8004060 <checkBasGonder+0x84>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <checkBasGonder+0x58>
 8004024:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <checkBasGonder+0x7c>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800402c:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <checkBasGonder+0x88>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004032:	e009      	b.n	8004048 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004034:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <checkBasGonder+0x84>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	f083 0301 	eor.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004042:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <checkBasGonder+0x88>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	200010bd 	.word	0x200010bd
 8004054:	200010f2 	.word	0x200010f2
 8004058:	200010cb 	.word	0x200010cb
 800405c:	200010f9 	.word	0x200010f9
 8004060:	200010f5 	.word	0x200010f5
 8004064:	200010fa 	.word	0x200010fa

08004068 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800406c:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <checkKapiSecimleri+0x98>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004074:	4b23      	ldr	r3, [pc, #140]	@ (8004104 <checkKapiSecimleri+0x9c>)
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800407a:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <checkKapiSecimleri+0x98>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10e      	bne.n	80040a0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004086:	4820      	ldr	r0, [pc, #128]	@ (8004108 <checkKapiSecimleri+0xa0>)
 8004088:	f006 f978 	bl	800a37c <HAL_GPIO_ReadPin>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004092:	4b1c      	ldr	r3, [pc, #112]	@ (8004104 <checkKapiSecimleri+0x9c>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e002      	b.n	80040a0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <checkKapiSecimleri+0x9c>)
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80040a0:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <checkKapiSecimleri+0x98>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d10e      	bne.n	80040c6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80040a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040ac:	4816      	ldr	r0, [pc, #88]	@ (8004108 <checkKapiSecimleri+0xa0>)
 80040ae:	f006 f965 	bl	800a37c <HAL_GPIO_ReadPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <checkKapiSecimleri+0x9c>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e002      	b.n	80040c6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80040c0:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <checkKapiSecimleri+0x9c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80040c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <checkKapiSecimleri+0x98>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d116      	bne.n	80040fc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80040ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040d2:	480d      	ldr	r0, [pc, #52]	@ (8004108 <checkKapiSecimleri+0xa0>)
 80040d4:	f006 f952 	bl	800a37c <HAL_GPIO_ReadPin>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <checkKapiSecimleri+0x8e>
 80040de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040e2:	4809      	ldr	r0, [pc, #36]	@ (8004108 <checkKapiSecimleri+0xa0>)
 80040e4:	f006 f94a 	bl	800a37c <HAL_GPIO_ReadPin>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80040ee:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <checkKapiSecimleri+0x9c>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80040f4:	e002      	b.n	80040fc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80040f6:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <checkKapiSecimleri+0x9c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200010c4 	.word	0x200010c4
 8004104:	2000110f 	.word	0x2000110f
 8004108:	40010800 	.word	0x40010800

0800410c <checkAktifCalisma>:

void checkAktifCalisma() {
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004110:	4b66      	ldr	r3, [pc, #408]	@ (80042ac <checkAktifCalisma+0x1a0>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f041 8343 	bne.w	80057a0 <checkAktifCalisma+0x1694>
 800411a:	4b65      	ldr	r3, [pc, #404]	@ (80042b0 <checkAktifCalisma+0x1a4>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f041 833e 	bne.w	80057a0 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004124:	4b63      	ldr	r3, [pc, #396]	@ (80042b4 <checkAktifCalisma+0x1a8>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11a      	bne.n	8004162 <checkAktifCalisma+0x56>
 800412c:	4b62      	ldr	r3, [pc, #392]	@ (80042b8 <checkAktifCalisma+0x1ac>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d116      	bne.n	8004162 <checkAktifCalisma+0x56>
 8004134:	4b61      	ldr	r3, [pc, #388]	@ (80042bc <checkAktifCalisma+0x1b0>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <checkAktifCalisma+0x46>
 800413c:	4b60      	ldr	r3, [pc, #384]	@ (80042c0 <checkAktifCalisma+0x1b4>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f083 0301 	eor.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <checkAktifCalisma+0x46>
 800414a:	4b5e      	ldr	r3, [pc, #376]	@ (80042c4 <checkAktifCalisma+0x1b8>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d007      	beq.n	8004162 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004152:	4b5d      	ldr	r3, [pc, #372]	@ (80042c8 <checkAktifCalisma+0x1bc>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01c      	beq.n	8004194 <checkAktifCalisma+0x88>
 800415a:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <checkAktifCalisma+0x1c0>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d118      	bne.n	8004194 <checkAktifCalisma+0x88>
 8004162:	4b5b      	ldr	r3, [pc, #364]	@ (80042d0 <checkAktifCalisma+0x1c4>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <checkAktifCalisma+0x66>
 800416a:	4b5a      	ldr	r3, [pc, #360]	@ (80042d4 <checkAktifCalisma+0x1c8>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <checkAktifCalisma+0x88>
 8004172:	4b59      	ldr	r3, [pc, #356]	@ (80042d8 <checkAktifCalisma+0x1cc>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800417a:	2201      	movs	r2, #1
 800417c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004180:	4856      	ldr	r0, [pc, #344]	@ (80042dc <checkAktifCalisma+0x1d0>)
 8004182:	f006 f912 	bl	800a3aa <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004186:	4b56      	ldr	r3, [pc, #344]	@ (80042e0 <checkAktifCalisma+0x1d4>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 800418c:	4b55      	ldr	r3, [pc, #340]	@ (80042e4 <checkAktifCalisma+0x1d8>)
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e008      	b.n	80041a6 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800419a:	4850      	ldr	r0, [pc, #320]	@ (80042dc <checkAktifCalisma+0x1d0>)
 800419c:	f006 f905 	bl	800a3aa <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80041a0:	4b4f      	ldr	r3, [pc, #316]	@ (80042e0 <checkAktifCalisma+0x1d4>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80041a6:	4b42      	ldr	r3, [pc, #264]	@ (80042b0 <checkAktifCalisma+0x1a4>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d164      	bne.n	8004278 <checkAktifCalisma+0x16c>
 80041ae:	4b49      	ldr	r3, [pc, #292]	@ (80042d4 <checkAktifCalisma+0x1c8>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <checkAktifCalisma+0xb2>
 80041b6:	4b46      	ldr	r3, [pc, #280]	@ (80042d0 <checkAktifCalisma+0x1c4>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d05c      	beq.n	8004278 <checkAktifCalisma+0x16c>
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <checkAktifCalisma+0x1cc>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d058      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80041c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041ca:	4844      	ldr	r0, [pc, #272]	@ (80042dc <checkAktifCalisma+0x1d0>)
 80041cc:	f006 f8d6 	bl	800a37c <HAL_GPIO_ReadPin>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <checkAktifCalisma+0xd2>
 80041d6:	4b44      	ldr	r3, [pc, #272]	@ (80042e8 <checkAktifCalisma+0x1dc>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d04c      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80041de:	2102      	movs	r1, #2
 80041e0:	4842      	ldr	r0, [pc, #264]	@ (80042ec <checkAktifCalisma+0x1e0>)
 80041e2:	f006 f8cb 	bl	800a37c <HAL_GPIO_ReadPin>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d145      	bne.n	8004278 <checkAktifCalisma+0x16c>
							&& (basincVar)
 80041ec:	4b40      	ldr	r3, [pc, #256]	@ (80042f0 <checkAktifCalisma+0x1e4>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d041      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80041f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041f8:	4838      	ldr	r0, [pc, #224]	@ (80042dc <checkAktifCalisma+0x1d0>)
 80041fa:	f006 f8bf 	bl	800a37c <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10e      	bne.n	8004222 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004208:	4834      	ldr	r0, [pc, #208]	@ (80042dc <checkAktifCalisma+0x1d0>)
 800420a:	f006 f8b7 	bl	800a37c <HAL_GPIO_ReadPin>
 800420e:	4603      	mov	r3, r0
 8004210:	2b01      	cmp	r3, #1
 8004212:	d106      	bne.n	8004222 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004214:	2140      	movs	r1, #64	@ 0x40
 8004216:	4835      	ldr	r0, [pc, #212]	@ (80042ec <checkAktifCalisma+0x1e0>)
 8004218:	f006 f8b0 	bl	800a37c <HAL_GPIO_ReadPin>
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d003      	beq.n	800422a <checkAktifCalisma+0x11e>
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <checkAktifCalisma+0x1a8>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d026      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800422a:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <checkAktifCalisma+0x1b0>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f083 0301 	eor.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01f      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004238:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <checkAktifCalisma+0x1ac>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f083 0301 	eor.w	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004246:	4b20      	ldr	r3, [pc, #128]	@ (80042c8 <checkAktifCalisma+0x1bc>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	f083 0301 	eor.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004254:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <checkAktifCalisma+0x1e8>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8004262:	4b25      	ldr	r3, [pc, #148]	@ (80042f8 <checkAktifCalisma+0x1ec>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f083 0301 	eor.w	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004270:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <checkAktifCalisma+0x1a8>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e002      	b.n	800427e <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <checkAktifCalisma+0x1a8>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <checkAktifCalisma+0x1a8>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03c      	beq.n	8004300 <checkAktifCalisma+0x1f4>
 8004286:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800428a:	4818      	ldr	r0, [pc, #96]	@ (80042ec <checkAktifCalisma+0x1e0>)
 800428c:	f006 f876 	bl	800a37c <HAL_GPIO_ReadPin>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d134      	bne.n	8004300 <checkAktifCalisma+0x1f4>
 8004296:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <checkAktifCalisma+0x1f0>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d030      	beq.n	8004300 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042a4:	480d      	ldr	r0, [pc, #52]	@ (80042dc <checkAktifCalisma+0x1d0>)
 80042a6:	f006 f880 	bl	800a3aa <HAL_GPIO_WritePin>
 80042aa:	e02f      	b.n	800430c <checkAktifCalisma+0x200>
 80042ac:	200010da 	.word	0x200010da
 80042b0:	200010d9 	.word	0x200010d9
 80042b4:	200010f2 	.word	0x200010f2
 80042b8:	200010f3 	.word	0x200010f3
 80042bc:	200010f5 	.word	0x200010f5
 80042c0:	200010ed 	.word	0x200010ed
 80042c4:	200010cf 	.word	0x200010cf
 80042c8:	200010f4 	.word	0x200010f4
 80042cc:	200010ce 	.word	0x200010ce
 80042d0:	2000110e 	.word	0x2000110e
 80042d4:	20001121 	.word	0x20001121
 80042d8:	2000110f 	.word	0x2000110f
 80042dc:	40010c00 	.word	0x40010c00
 80042e0:	20001110 	.word	0x20001110
 80042e4:	200010fc 	.word	0x200010fc
 80042e8:	200010f9 	.word	0x200010f9
 80042ec:	40011000 	.word	0x40011000
 80042f0:	200010bf 	.word	0x200010bf
 80042f4:	200010f7 	.word	0x200010f7
 80042f8:	200010f8 	.word	0x200010f8
 80042fc:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004306:	4865      	ldr	r0, [pc, #404]	@ (800449c <checkAktifCalisma+0x390>)
 8004308:	f006 f84f 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800430c:	4b64      	ldr	r3, [pc, #400]	@ (80044a0 <checkAktifCalisma+0x394>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <checkAktifCalisma+0x230>
 8004314:	4b63      	ldr	r3, [pc, #396]	@ (80044a4 <checkAktifCalisma+0x398>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d007      	beq.n	800432c <checkAktifCalisma+0x220>
 800431c:	4b61      	ldr	r3, [pc, #388]	@ (80044a4 <checkAktifCalisma+0x398>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d003      	beq.n	800432c <checkAktifCalisma+0x220>
 8004324:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <checkAktifCalisma+0x39c>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800432c:	2201      	movs	r2, #1
 800432e:	2104      	movs	r1, #4
 8004330:	485a      	ldr	r0, [pc, #360]	@ (800449c <checkAktifCalisma+0x390>)
 8004332:	f006 f83a 	bl	800a3aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004336:	4b5d      	ldr	r3, [pc, #372]	@ (80044ac <checkAktifCalisma+0x3a0>)
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800433c:	4b5b      	ldr	r3, [pc, #364]	@ (80044ac <checkAktifCalisma+0x3a0>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d033      	beq.n	80043ac <checkAktifCalisma+0x2a0>
 8004344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004348:	4854      	ldr	r0, [pc, #336]	@ (800449c <checkAktifCalisma+0x390>)
 800434a:	f006 f817 	bl	800a37c <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <checkAktifCalisma+0x256>
 8004354:	4b56      	ldr	r3, [pc, #344]	@ (80044b0 <checkAktifCalisma+0x3a4>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <checkAktifCalisma+0x264>
 8004362:	2102      	movs	r1, #2
 8004364:	4853      	ldr	r0, [pc, #332]	@ (80044b4 <checkAktifCalisma+0x3a8>)
 8004366:	f006 f809 	bl	800a37c <HAL_GPIO_ReadPin>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d11d      	bne.n	80043ac <checkAktifCalisma+0x2a0>
 8004370:	4b51      	ldr	r3, [pc, #324]	@ (80044b8 <checkAktifCalisma+0x3ac>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <checkAktifCalisma+0x274>
 8004378:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <checkAktifCalisma+0x3b0>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <checkAktifCalisma+0x2a0>
 8004380:	4b4f      	ldr	r3, [pc, #316]	@ (80044c0 <checkAktifCalisma+0x3b4>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d011      	beq.n	80043ac <checkAktifCalisma+0x2a0>
 8004388:	4b4e      	ldr	r3, [pc, #312]	@ (80044c4 <checkAktifCalisma+0x3b8>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <checkAktifCalisma+0x2a0>
 8004390:	4b4d      	ldr	r3, [pc, #308]	@ (80044c8 <checkAktifCalisma+0x3bc>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <checkAktifCalisma+0x2a0>
					timer2=millis;
 800439e:	4b4b      	ldr	r3, [pc, #300]	@ (80044cc <checkAktifCalisma+0x3c0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4b      	ldr	r2, [pc, #300]	@ (80044d0 <checkAktifCalisma+0x3c4>)
 80043a4:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80043a6:	4b48      	ldr	r3, [pc, #288]	@ (80044c8 <checkAktifCalisma+0x3bc>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80043ac:	4b47      	ldr	r3, [pc, #284]	@ (80044cc <checkAktifCalisma+0x3c0>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b47      	ldr	r3, [pc, #284]	@ (80044d0 <checkAktifCalisma+0x3c4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	4a47      	ldr	r2, [pc, #284]	@ (80044d4 <checkAktifCalisma+0x3c8>)
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d303      	bcc.n	80043c6 <checkAktifCalisma+0x2ba>
 80043be:	4b42      	ldr	r3, [pc, #264]	@ (80044c8 <checkAktifCalisma+0x3bc>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d118      	bne.n	80043f8 <checkAktifCalisma+0x2ec>
 80043c6:	4b3c      	ldr	r3, [pc, #240]	@ (80044b8 <checkAktifCalisma+0x3ac>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f083 0301 	eor.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d006      	beq.n	80043e2 <checkAktifCalisma+0x2d6>
 80043d4:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <checkAktifCalisma+0x3b0>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	f083 0301 	eor.w	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <checkAktifCalisma+0x2ec>
 80043e2:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <checkAktifCalisma+0x3b4>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d103      	bne.n	80043f8 <checkAktifCalisma+0x2ec>
 80043f0:	4b34      	ldr	r3, [pc, #208]	@ (80044c4 <checkAktifCalisma+0x3b8>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80043f8:	2200      	movs	r2, #0
 80043fa:	2104      	movs	r1, #4
 80043fc:	4827      	ldr	r0, [pc, #156]	@ (800449c <checkAktifCalisma+0x390>)
 80043fe:	f005 ffd4 	bl	800a3aa <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004402:	4b2a      	ldr	r3, [pc, #168]	@ (80044ac <checkAktifCalisma+0x3a0>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004408:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <checkAktifCalisma+0x3bc>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800440e:	4b32      	ldr	r3, [pc, #200]	@ (80044d8 <checkAktifCalisma+0x3cc>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004416:	4b31      	ldr	r3, [pc, #196]	@ (80044dc <checkAktifCalisma+0x3d0>)
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800441c:	4b2e      	ldr	r3, [pc, #184]	@ (80044d8 <checkAktifCalisma+0x3cc>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d116      	bne.n	8004452 <checkAktifCalisma+0x346>
 8004424:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <checkAktifCalisma+0x3d4>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d112      	bne.n	8004452 <checkAktifCalisma+0x346>
 800442c:	2101      	movs	r1, #1
 800442e:	4821      	ldr	r0, [pc, #132]	@ (80044b4 <checkAktifCalisma+0x3a8>)
 8004430:	f005 ffa4 	bl	800a37c <HAL_GPIO_ReadPin>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <checkAktifCalisma+0x346>
 800443a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800443e:	4817      	ldr	r0, [pc, #92]	@ (800449c <checkAktifCalisma+0x390>)
 8004440:	f005 ff9c 	bl	800a37c <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800444a:	4b24      	ldr	r3, [pc, #144]	@ (80044dc <checkAktifCalisma+0x3d0>)
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e011      	b.n	8004476 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004452:	4b21      	ldr	r3, [pc, #132]	@ (80044d8 <checkAktifCalisma+0x3cc>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10d      	bne.n	8004476 <checkAktifCalisma+0x36a>
 800445a:	2101      	movs	r1, #1
 800445c:	4815      	ldr	r0, [pc, #84]	@ (80044b4 <checkAktifCalisma+0x3a8>)
 800445e:	f005 ff8d 	bl	800a37c <HAL_GPIO_ReadPin>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <checkAktifCalisma+0x36a>
 8004468:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <checkAktifCalisma+0x3d4>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004470:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <checkAktifCalisma+0x3d0>)
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004476:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <checkAktifCalisma+0x3cc>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d135      	bne.n	80044ea <checkAktifCalisma+0x3de>
 800447e:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <checkAktifCalisma+0x3d4>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d131      	bne.n	80044ea <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004486:	2101      	movs	r1, #1
 8004488:	480a      	ldr	r0, [pc, #40]	@ (80044b4 <checkAktifCalisma+0x3a8>)
 800448a:	f005 ff77 	bl	800a37c <HAL_GPIO_ReadPin>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d127      	bne.n	80044e4 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004494:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <checkAktifCalisma+0x3d0>)
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e026      	b.n	80044ea <checkAktifCalisma+0x3de>
 800449c:	40010c00 	.word	0x40010c00
 80044a0:	200010f2 	.word	0x200010f2
 80044a4:	200010cb 	.word	0x200010cb
 80044a8:	200010cf 	.word	0x200010cf
 80044ac:	200010f6 	.word	0x200010f6
 80044b0:	200010f9 	.word	0x200010f9
 80044b4:	40011000 	.word	0x40011000
 80044b8:	2000110e 	.word	0x2000110e
 80044bc:	20001121 	.word	0x20001121
 80044c0:	2000110f 	.word	0x2000110f
 80044c4:	200010bf 	.word	0x200010bf
 80044c8:	200010ee 	.word	0x200010ee
 80044cc:	20001094 	.word	0x20001094
 80044d0:	200010a0 	.word	0x200010a0
 80044d4:	200010d0 	.word	0x200010d0
 80044d8:	200010c0 	.word	0x200010c0
 80044dc:	20001113 	.word	0x20001113
 80044e0:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 80044e4:	4b7f      	ldr	r3, [pc, #508]	@ (80046e4 <checkAktifCalisma+0x5d8>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80044ea:	4b7f      	ldr	r3, [pc, #508]	@ (80046e8 <checkAktifCalisma+0x5dc>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d17c      	bne.n	80045ec <checkAktifCalisma+0x4e0>
 80044f2:	4b7e      	ldr	r3, [pc, #504]	@ (80046ec <checkAktifCalisma+0x5e0>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d078      	beq.n	80045ec <checkAktifCalisma+0x4e0>
 80044fa:	4b7d      	ldr	r3, [pc, #500]	@ (80046f0 <checkAktifCalisma+0x5e4>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d074      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004502:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004506:	487b      	ldr	r0, [pc, #492]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 8004508:	f005 ff38 	bl	800a37c <HAL_GPIO_ReadPin>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <checkAktifCalisma+0x40e>
 8004512:	4b79      	ldr	r3, [pc, #484]	@ (80046f8 <checkAktifCalisma+0x5ec>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d068      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800451a:	4b72      	ldr	r3, [pc, #456]	@ (80046e4 <checkAktifCalisma+0x5d8>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d064      	beq.n	80045ec <checkAktifCalisma+0x4e0>
 8004522:	4b76      	ldr	r3, [pc, #472]	@ (80046fc <checkAktifCalisma+0x5f0>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f083 0301 	eor.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d05d      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004530:	2104      	movs	r1, #4
 8004532:	4873      	ldr	r0, [pc, #460]	@ (8004700 <checkAktifCalisma+0x5f4>)
 8004534:	f005 ff22 	bl	800a37c <HAL_GPIO_ReadPin>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <checkAktifCalisma+0x43a>
 800453e:	4b71      	ldr	r3, [pc, #452]	@ (8004704 <checkAktifCalisma+0x5f8>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d152      	bne.n	80045ec <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800454a:	486a      	ldr	r0, [pc, #424]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 800454c:	f005 ff16 	bl	800a37c <HAL_GPIO_ReadPin>
 8004550:	4603      	mov	r3, r0
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10e      	bne.n	8004574 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004556:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800455a:	4866      	ldr	r0, [pc, #408]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 800455c:	f005 ff0e 	bl	800a37c <HAL_GPIO_ReadPin>
 8004560:	4603      	mov	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d106      	bne.n	8004574 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004566:	2140      	movs	r1, #64	@ 0x40
 8004568:	4865      	ldr	r0, [pc, #404]	@ (8004700 <checkAktifCalisma+0x5f4>)
 800456a:	f005 ff07 	bl	800a37c <HAL_GPIO_ReadPin>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d003      	beq.n	800457c <checkAktifCalisma+0x470>
 8004574:	4b64      	ldr	r3, [pc, #400]	@ (8004708 <checkAktifCalisma+0x5fc>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d037      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 800457c:	4b63      	ldr	r3, [pc, #396]	@ (800470c <checkAktifCalisma+0x600>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d030      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800458a:	4b61      	ldr	r3, [pc, #388]	@ (8004710 <checkAktifCalisma+0x604>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f083 0301 	eor.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d029      	beq.n	80045ec <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004598:	4b5e      	ldr	r3, [pc, #376]	@ (8004714 <checkAktifCalisma+0x608>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f083 0301 	eor.w	r3, r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d022      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80045a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004718 <checkAktifCalisma+0x60c>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80045b4:	4b59      	ldr	r3, [pc, #356]	@ (800471c <checkAktifCalisma+0x610>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d014      	beq.n	80045ec <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80045c2:	4b57      	ldr	r3, [pc, #348]	@ (8004720 <checkAktifCalisma+0x614>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	f083 0301 	eor.w	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80045d0:	2201      	movs	r2, #1
 80045d2:	2102      	movs	r1, #2
 80045d4:	4847      	ldr	r0, [pc, #284]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 80045d6:	f005 fee8 	bl	800a3aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80045da:	4b4b      	ldr	r3, [pc, #300]	@ (8004708 <checkAktifCalisma+0x5fc>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80045e0:	4b50      	ldr	r3, [pc, #320]	@ (8004724 <checkAktifCalisma+0x618>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80045e6:	4b50      	ldr	r3, [pc, #320]	@ (8004728 <checkAktifCalisma+0x61c>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80045ec:	4b46      	ldr	r3, [pc, #280]	@ (8004708 <checkAktifCalisma+0x5fc>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d033      	beq.n	800465c <checkAktifCalisma+0x550>
 80045f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045f8:	483e      	ldr	r0, [pc, #248]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 80045fa:	f005 febf 	bl	800a37c <HAL_GPIO_ReadPin>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <checkAktifCalisma+0x506>
 8004604:	4b3c      	ldr	r3, [pc, #240]	@ (80046f8 <checkAktifCalisma+0x5ec>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <checkAktifCalisma+0x51c>
 8004612:	2104      	movs	r1, #4
 8004614:	483a      	ldr	r0, [pc, #232]	@ (8004700 <checkAktifCalisma+0x5f4>)
 8004616:	f005 feb1 	bl	800a37c <HAL_GPIO_ReadPin>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d11d      	bne.n	800465c <checkAktifCalisma+0x550>
 8004620:	4b38      	ldr	r3, [pc, #224]	@ (8004704 <checkAktifCalisma+0x5f8>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d019      	beq.n	800465c <checkAktifCalisma+0x550>
 8004628:	4b30      	ldr	r3, [pc, #192]	@ (80046ec <checkAktifCalisma+0x5e0>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <checkAktifCalisma+0x550>
 8004630:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <checkAktifCalisma+0x5e4>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d011      	beq.n	800465c <checkAktifCalisma+0x550>
 8004638:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <checkAktifCalisma+0x5d8>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <checkAktifCalisma+0x550>
 8004640:	4b3a      	ldr	r3, [pc, #232]	@ (800472c <checkAktifCalisma+0x620>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f083 0301 	eor.w	r3, r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <checkAktifCalisma+0x550>
					timer2=millis;
 800464e:	4b38      	ldr	r3, [pc, #224]	@ (8004730 <checkAktifCalisma+0x624>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <checkAktifCalisma+0x628>)
 8004654:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004656:	4b35      	ldr	r3, [pc, #212]	@ (800472c <checkAktifCalisma+0x620>)
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800465c:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <checkAktifCalisma+0x624>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b34      	ldr	r3, [pc, #208]	@ (8004734 <checkAktifCalisma+0x628>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	4a34      	ldr	r2, [pc, #208]	@ (8004738 <checkAktifCalisma+0x62c>)
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	4293      	cmp	r3, r2
 800466c:	d303      	bcc.n	8004676 <checkAktifCalisma+0x56a>
 800466e:	4b2f      	ldr	r3, [pc, #188]	@ (800472c <checkAktifCalisma+0x620>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d114      	bne.n	80046a0 <checkAktifCalisma+0x594>
 8004676:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <checkAktifCalisma+0x5e0>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10d      	bne.n	80046a0 <checkAktifCalisma+0x594>
 8004684:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <checkAktifCalisma+0x5e4>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f083 0301 	eor.w	r3, r3, #1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <checkAktifCalisma+0x594>
 8004692:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <checkAktifCalisma+0x5d8>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f083 0301 	eor.w	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80046a0:	2200      	movs	r2, #0
 80046a2:	2102      	movs	r1, #2
 80046a4:	4813      	ldr	r0, [pc, #76]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 80046a6:	f005 fe80 	bl	800a3aa <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80046aa:	4b17      	ldr	r3, [pc, #92]	@ (8004708 <checkAktifCalisma+0x5fc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80046b0:	4b1e      	ldr	r3, [pc, #120]	@ (800472c <checkAktifCalisma+0x620>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <checkAktifCalisma+0x5fc>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d040      	beq.n	8004740 <checkAktifCalisma+0x634>
 80046be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046c2:	480f      	ldr	r0, [pc, #60]	@ (8004700 <checkAktifCalisma+0x5f4>)
 80046c4:	f005 fe5a 	bl	800a37c <HAL_GPIO_ReadPin>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d138      	bne.n	8004740 <checkAktifCalisma+0x634>
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <checkAktifCalisma+0x630>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d034      	beq.n	8004740 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80046d6:	2201      	movs	r2, #1
 80046d8:	2101      	movs	r1, #1
 80046da:	4806      	ldr	r0, [pc, #24]	@ (80046f4 <checkAktifCalisma+0x5e8>)
 80046dc:	f005 fe65 	bl	800a3aa <HAL_GPIO_WritePin>
 80046e0:	e033      	b.n	800474a <checkAktifCalisma+0x63e>
 80046e2:	bf00      	nop
 80046e4:	20001113 	.word	0x20001113
 80046e8:	200010d9 	.word	0x200010d9
 80046ec:	2000110e 	.word	0x2000110e
 80046f0:	2000110f 	.word	0x2000110f
 80046f4:	40010c00 	.word	0x40010c00
 80046f8:	200010fa 	.word	0x200010fa
 80046fc:	2000110d 	.word	0x2000110d
 8004700:	40011000 	.word	0x40011000
 8004704:	200010c2 	.word	0x200010c2
 8004708:	200010f5 	.word	0x200010f5
 800470c:	200010f2 	.word	0x200010f2
 8004710:	200010f6 	.word	0x200010f6
 8004714:	200010f3 	.word	0x200010f3
 8004718:	200010f4 	.word	0x200010f4
 800471c:	200010f7 	.word	0x200010f7
 8004720:	200010f8 	.word	0x200010f8
 8004724:	200010fd 	.word	0x200010fd
 8004728:	2000111d 	.word	0x2000111d
 800472c:	200010ed 	.word	0x200010ed
 8004730:	20001094 	.word	0x20001094
 8004734:	200010a0 	.word	0x200010a0
 8004738:	200010d1 	.word	0x200010d1
 800473c:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004740:	2200      	movs	r2, #0
 8004742:	2101      	movs	r1, #1
 8004744:	4836      	ldr	r0, [pc, #216]	@ (8004820 <checkAktifCalisma+0x714>)
 8004746:	f005 fe30 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800474a:	4b36      	ldr	r3, [pc, #216]	@ (8004824 <checkAktifCalisma+0x718>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 8080 	bne.w	8004854 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004754:	4b34      	ldr	r3, [pc, #208]	@ (8004828 <checkAktifCalisma+0x71c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d003      	beq.n	8004764 <checkAktifCalisma+0x658>
 800475c:	4b32      	ldr	r3, [pc, #200]	@ (8004828 <checkAktifCalisma+0x71c>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d177      	bne.n	8004854 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004764:	4b31      	ldr	r3, [pc, #196]	@ (800482c <checkAktifCalisma+0x720>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d073      	beq.n	8004854 <checkAktifCalisma+0x748>
 800476c:	4b30      	ldr	r3, [pc, #192]	@ (8004830 <checkAktifCalisma+0x724>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d06f      	beq.n	8004854 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004778:	4829      	ldr	r0, [pc, #164]	@ (8004820 <checkAktifCalisma+0x714>)
 800477a:	f005 fdff 	bl	800a37c <HAL_GPIO_ReadPin>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d167      	bne.n	8004854 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004784:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004788:	482a      	ldr	r0, [pc, #168]	@ (8004834 <checkAktifCalisma+0x728>)
 800478a:	f005 fdf7 	bl	800a37c <HAL_GPIO_ReadPin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <checkAktifCalisma+0x690>
 8004794:	4b28      	ldr	r3, [pc, #160]	@ (8004838 <checkAktifCalisma+0x72c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d15b      	bne.n	8004854 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800479c:	2140      	movs	r1, #64	@ 0x40
 800479e:	4825      	ldr	r0, [pc, #148]	@ (8004834 <checkAktifCalisma+0x728>)
 80047a0:	f005 fdec 	bl	800a37c <HAL_GPIO_ReadPin>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10f      	bne.n	80047ca <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80047aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047ae:	481c      	ldr	r0, [pc, #112]	@ (8004820 <checkAktifCalisma+0x714>)
 80047b0:	f005 fde4 	bl	800a37c <HAL_GPIO_ReadPin>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80047ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047be:	4818      	ldr	r0, [pc, #96]	@ (8004820 <checkAktifCalisma+0x714>)
 80047c0:	f005 fddc 	bl	800a37c <HAL_GPIO_ReadPin>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d003      	beq.n	80047d2 <checkAktifCalisma+0x6c6>
 80047ca:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <checkAktifCalisma+0x730>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d040      	beq.n	8004854 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80047d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <checkAktifCalisma+0x734>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f083 0301 	eor.w	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d039      	beq.n	8004854 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80047e0:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <checkAktifCalisma+0x738>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f083 0301 	eor.w	r3, r3, #1
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d032      	beq.n	8004854 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80047ee:	4b16      	ldr	r3, [pc, #88]	@ (8004848 <checkAktifCalisma+0x73c>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	f083 0301 	eor.w	r3, r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02b      	beq.n	8004854 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 80047fc:	4b13      	ldr	r3, [pc, #76]	@ (800484c <checkAktifCalisma+0x740>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f083 0301 	eor.w	r3, r3, #1
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d024      	beq.n	8004854 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 800480a:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <checkAktifCalisma+0x744>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f083 0301 	eor.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01d      	beq.n	8004854 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004818:	4b08      	ldr	r3, [pc, #32]	@ (800483c <checkAktifCalisma+0x730>)
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e01c      	b.n	800485a <checkAktifCalisma+0x74e>
 8004820:	40010c00 	.word	0x40010c00
 8004824:	200010d9 	.word	0x200010d9
 8004828:	200010cb 	.word	0x200010cb
 800482c:	2000110e 	.word	0x2000110e
 8004830:	2000110f 	.word	0x2000110f
 8004834:	40011000 	.word	0x40011000
 8004838:	200010cc 	.word	0x200010cc
 800483c:	200010f3 	.word	0x200010f3
 8004840:	200010f2 	.word	0x200010f2
 8004844:	200010f6 	.word	0x200010f6
 8004848:	200010f5 	.word	0x200010f5
 800484c:	200010f4 	.word	0x200010f4
 8004850:	200010f8 	.word	0x200010f8
				} else {
					devmotoryukaricalisiyor=0;
 8004854:	4b64      	ldr	r3, [pc, #400]	@ (80049e8 <checkAktifCalisma+0x8dc>)
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800485a:	4b63      	ldr	r3, [pc, #396]	@ (80049e8 <checkAktifCalisma+0x8dc>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004862:	2201      	movs	r2, #1
 8004864:	2120      	movs	r1, #32
 8004866:	4861      	ldr	r0, [pc, #388]	@ (80049ec <checkAktifCalisma+0x8e0>)
 8004868:	f005 fd9f 	bl	800a3aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 800486c:	4b60      	ldr	r3, [pc, #384]	@ (80049f0 <checkAktifCalisma+0x8e4>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004872:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <checkAktifCalisma+0x8e4>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d025      	beq.n	80048c6 <checkAktifCalisma+0x7ba>
 800487a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800487e:	485d      	ldr	r0, [pc, #372]	@ (80049f4 <checkAktifCalisma+0x8e8>)
 8004880:	f005 fd7c 	bl	800a37c <HAL_GPIO_ReadPin>
 8004884:	4603      	mov	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d007      	beq.n	800489a <checkAktifCalisma+0x78e>
 800488a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800488e:	4857      	ldr	r0, [pc, #348]	@ (80049ec <checkAktifCalisma+0x8e0>)
 8004890:	f005 fd74 	bl	800a37c <HAL_GPIO_ReadPin>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d115      	bne.n	80048c6 <checkAktifCalisma+0x7ba>
 800489a:	4b57      	ldr	r3, [pc, #348]	@ (80049f8 <checkAktifCalisma+0x8ec>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d011      	beq.n	80048c6 <checkAktifCalisma+0x7ba>
 80048a2:	4b56      	ldr	r3, [pc, #344]	@ (80049fc <checkAktifCalisma+0x8f0>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <checkAktifCalisma+0x7ba>
 80048aa:	4b55      	ldr	r3, [pc, #340]	@ (8004a00 <checkAktifCalisma+0x8f4>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f083 0301 	eor.w	r3, r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <checkAktifCalisma+0x7ba>
					timer2=millis;
 80048b8:	4b52      	ldr	r3, [pc, #328]	@ (8004a04 <checkAktifCalisma+0x8f8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a52      	ldr	r2, [pc, #328]	@ (8004a08 <checkAktifCalisma+0x8fc>)
 80048be:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 80048c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004a00 <checkAktifCalisma+0x8f4>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80048c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a04 <checkAktifCalisma+0x8f8>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004a08 <checkAktifCalisma+0x8fc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	4a4e      	ldr	r2, [pc, #312]	@ (8004a0c <checkAktifCalisma+0x900>)
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d303      	bcc.n	80048e0 <checkAktifCalisma+0x7d4>
 80048d8:	4b49      	ldr	r3, [pc, #292]	@ (8004a00 <checkAktifCalisma+0x8f4>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10d      	bne.n	80048fc <checkAktifCalisma+0x7f0>
 80048e0:	4b45      	ldr	r3, [pc, #276]	@ (80049f8 <checkAktifCalisma+0x8ec>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <checkAktifCalisma+0x7f0>
 80048ee:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <checkAktifCalisma+0x8f0>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	f083 0301 	eor.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2120      	movs	r1, #32
 8004900:	483a      	ldr	r0, [pc, #232]	@ (80049ec <checkAktifCalisma+0x8e0>)
 8004902:	f005 fd52 	bl	800a3aa <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004906:	4b3a      	ldr	r3, [pc, #232]	@ (80049f0 <checkAktifCalisma+0x8e4>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 800490c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a00 <checkAktifCalisma+0x8f4>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004912:	4b3f      	ldr	r3, [pc, #252]	@ (8004a10 <checkAktifCalisma+0x904>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 8088 	bne.w	8004a2c <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800491c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <checkAktifCalisma+0x908>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d003      	beq.n	800492c <checkAktifCalisma+0x820>
 8004924:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <checkAktifCalisma+0x908>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d17f      	bne.n	8004a2c <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 800492c:	4b32      	ldr	r3, [pc, #200]	@ (80049f8 <checkAktifCalisma+0x8ec>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d07b      	beq.n	8004a2c <checkAktifCalisma+0x920>
 8004934:	4b31      	ldr	r3, [pc, #196]	@ (80049fc <checkAktifCalisma+0x8f0>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d077      	beq.n	8004a2c <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800493c:	2140      	movs	r1, #64	@ 0x40
 800493e:	482b      	ldr	r0, [pc, #172]	@ (80049ec <checkAktifCalisma+0x8e0>)
 8004940:	f005 fd1c 	bl	800a37c <HAL_GPIO_ReadPin>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d170      	bne.n	8004a2c <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800494a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800494e:	4827      	ldr	r0, [pc, #156]	@ (80049ec <checkAktifCalisma+0x8e0>)
 8004950:	f005 fd14 	bl	800a37c <HAL_GPIO_ReadPin>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <checkAktifCalisma+0x856>
 800495a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <checkAktifCalisma+0x90c>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d164      	bne.n	8004a2c <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004962:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004966:	4823      	ldr	r0, [pc, #140]	@ (80049f4 <checkAktifCalisma+0x8e8>)
 8004968:	f005 fd08 	bl	800a37c <HAL_GPIO_ReadPin>
 800496c:	4603      	mov	r3, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10f      	bne.n	8004992 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004976:	481f      	ldr	r0, [pc, #124]	@ (80049f4 <checkAktifCalisma+0x8e8>)
 8004978:	f005 fd00 	bl	800a37c <HAL_GPIO_ReadPin>
 800497c:	4603      	mov	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004986:	481b      	ldr	r0, [pc, #108]	@ (80049f4 <checkAktifCalisma+0x8e8>)
 8004988:	f005 fcf8 	bl	800a37c <HAL_GPIO_ReadPin>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d003      	beq.n	800499a <checkAktifCalisma+0x88e>
 8004992:	4b22      	ldr	r3, [pc, #136]	@ (8004a1c <checkAktifCalisma+0x910>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d048      	beq.n	8004a2c <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 800499a:	4b21      	ldr	r3, [pc, #132]	@ (8004a20 <checkAktifCalisma+0x914>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	f083 0301 	eor.w	r3, r3, #1
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d041      	beq.n	8004a2c <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 80049a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <checkAktifCalisma+0x918>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f083 0301 	eor.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d03a      	beq.n	8004a2c <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 80049b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <checkAktifCalisma+0x91c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d033      	beq.n	8004a2c <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 80049c4:	4b0a      	ldr	r3, [pc, #40]	@ (80049f0 <checkAktifCalisma+0x8e4>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02c      	beq.n	8004a2c <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 80049d2:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <checkAktifCalisma+0x8dc>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f083 0301 	eor.w	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d025      	beq.n	8004a2c <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 80049e0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <checkAktifCalisma+0x910>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e024      	b.n	8004a32 <checkAktifCalisma+0x926>
 80049e8:	200010f3 	.word	0x200010f3
 80049ec:	40011000 	.word	0x40011000
 80049f0:	200010f7 	.word	0x200010f7
 80049f4:	40010c00 	.word	0x40010c00
 80049f8:	2000110e 	.word	0x2000110e
 80049fc:	2000110f 	.word	0x2000110f
 8004a00:	200010ef 	.word	0x200010ef
 8004a04:	20001094 	.word	0x20001094
 8004a08:	200010a0 	.word	0x200010a0
 8004a0c:	200010d2 	.word	0x200010d2
 8004a10:	200010d9 	.word	0x200010d9
 8004a14:	200010cb 	.word	0x200010cb
 8004a18:	200010cd 	.word	0x200010cd
 8004a1c:	200010f4 	.word	0x200010f4
 8004a20:	200010f2 	.word	0x200010f2
 8004a24:	200010f6 	.word	0x200010f6
 8004a28:	200010f5 	.word	0x200010f5
				} else {
					devmotorasagicalisiyor=0;
 8004a2c:	4b96      	ldr	r3, [pc, #600]	@ (8004c88 <checkAktifCalisma+0xb7c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004a32:	4b95      	ldr	r3, [pc, #596]	@ (8004c88 <checkAktifCalisma+0xb7c>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	2110      	movs	r1, #16
 8004a3e:	4893      	ldr	r0, [pc, #588]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004a40:	f005 fcb3 	bl	800a3aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004a44:	4b92      	ldr	r3, [pc, #584]	@ (8004c90 <checkAktifCalisma+0xb84>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004a4a:	4b91      	ldr	r3, [pc, #580]	@ (8004c90 <checkAktifCalisma+0xb84>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d024      	beq.n	8004a9c <checkAktifCalisma+0x990>
 8004a52:	2140      	movs	r1, #64	@ 0x40
 8004a54:	488d      	ldr	r0, [pc, #564]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004a56:	f005 fc91 	bl	800a37c <HAL_GPIO_ReadPin>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d007      	beq.n	8004a70 <checkAktifCalisma+0x964>
 8004a60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a64:	4889      	ldr	r0, [pc, #548]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004a66:	f005 fc89 	bl	800a37c <HAL_GPIO_ReadPin>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d115      	bne.n	8004a9c <checkAktifCalisma+0x990>
 8004a70:	4b88      	ldr	r3, [pc, #544]	@ (8004c94 <checkAktifCalisma+0xb88>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d011      	beq.n	8004a9c <checkAktifCalisma+0x990>
 8004a78:	4b87      	ldr	r3, [pc, #540]	@ (8004c98 <checkAktifCalisma+0xb8c>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <checkAktifCalisma+0x990>
 8004a80:	4b86      	ldr	r3, [pc, #536]	@ (8004c9c <checkAktifCalisma+0xb90>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f083 0301 	eor.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d006      	beq.n	8004a9c <checkAktifCalisma+0x990>
					timer2=millis;
 8004a8e:	4b84      	ldr	r3, [pc, #528]	@ (8004ca0 <checkAktifCalisma+0xb94>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a84      	ldr	r2, [pc, #528]	@ (8004ca4 <checkAktifCalisma+0xb98>)
 8004a94:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004a96:	4b81      	ldr	r3, [pc, #516]	@ (8004c9c <checkAktifCalisma+0xb90>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004a9c:	4b80      	ldr	r3, [pc, #512]	@ (8004ca0 <checkAktifCalisma+0xb94>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b80      	ldr	r3, [pc, #512]	@ (8004ca4 <checkAktifCalisma+0xb98>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	4a80      	ldr	r2, [pc, #512]	@ (8004ca8 <checkAktifCalisma+0xb9c>)
 8004aa8:	7812      	ldrb	r2, [r2, #0]
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d303      	bcc.n	8004ab6 <checkAktifCalisma+0x9aa>
 8004aae:	4b7b      	ldr	r3, [pc, #492]	@ (8004c9c <checkAktifCalisma+0xb90>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <checkAktifCalisma+0x9c6>
 8004ab6:	4b77      	ldr	r3, [pc, #476]	@ (8004c94 <checkAktifCalisma+0xb88>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	f083 0301 	eor.w	r3, r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <checkAktifCalisma+0x9c6>
 8004ac4:	4b74      	ldr	r3, [pc, #464]	@ (8004c98 <checkAktifCalisma+0xb8c>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	f083 0301 	eor.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2110      	movs	r1, #16
 8004ad6:	486d      	ldr	r0, [pc, #436]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004ad8:	f005 fc67 	bl	800a3aa <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004adc:	4b6c      	ldr	r3, [pc, #432]	@ (8004c90 <checkAktifCalisma+0xb84>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004ae2:	4b6e      	ldr	r3, [pc, #440]	@ (8004c9c <checkAktifCalisma+0xb90>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004ae8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004aec:	486f      	ldr	r0, [pc, #444]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004aee:	f005 fc45 	bl	800a37c <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d120      	bne.n	8004b3a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004afc:	486b      	ldr	r0, [pc, #428]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004afe:	f005 fc3d 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d118      	bne.n	8004b3a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004b08:	2104      	movs	r1, #4
 8004b0a:	4868      	ldr	r0, [pc, #416]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004b0c:	f005 fc36 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d111      	bne.n	8004b3a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004b16:	2102      	movs	r1, #2
 8004b18:	4864      	ldr	r0, [pc, #400]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004b1a:	f005 fc2f 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004b24:	2101      	movs	r1, #1
 8004b26:	4861      	ldr	r0, [pc, #388]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004b28:	f005 fc28 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004b32:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb0 <checkAktifCalisma+0xba4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	e002      	b.n	8004b40 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cb0 <checkAktifCalisma+0xba4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b40:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb4 <checkAktifCalisma+0xba8>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d144      	bne.n	8004bd2 <checkAktifCalisma+0xac6>
 8004b48:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb8 <checkAktifCalisma+0xbac>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d003      	beq.n	8004b58 <checkAktifCalisma+0xa4c>
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <checkAktifCalisma+0xbac>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d13c      	bne.n	8004bd2 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	484c      	ldr	r0, [pc, #304]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004b5c:	f005 fc0e 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <checkAktifCalisma+0xa62>
 8004b66:	4b55      	ldr	r3, [pc, #340]	@ (8004cbc <checkAktifCalisma+0xbb0>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <checkAktifCalisma+0xa7a>
 8004b6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b72:	484e      	ldr	r0, [pc, #312]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004b74:	f005 fc02 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d129      	bne.n	8004bd2 <checkAktifCalisma+0xac6>
 8004b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004cbc <checkAktifCalisma+0xbb0>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d125      	bne.n	8004bd2 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b86:	2104      	movs	r1, #4
 8004b88:	4840      	ldr	r0, [pc, #256]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004b8a:	f005 fbf7 	bl	800a37c <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d003      	beq.n	8004b9c <checkAktifCalisma+0xa90>
 8004b94:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc0 <checkAktifCalisma+0xbb4>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11a      	bne.n	8004bd2 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	483b      	ldr	r0, [pc, #236]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004ba0:	f005 fbec 	bl	800a37c <HAL_GPIO_ReadPin>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d113      	bne.n	8004bd2 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004baa:	4b46      	ldr	r3, [pc, #280]	@ (8004cc4 <checkAktifCalisma+0xbb8>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	f083 0301 	eor.w	r3, r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb0 <checkAktifCalisma+0xba4>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004bc0:	4b41      	ldr	r3, [pc, #260]	@ (8004cc8 <checkAktifCalisma+0xbbc>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004bc6:	4b36      	ldr	r3, [pc, #216]	@ (8004ca0 <checkAktifCalisma+0xb94>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a40      	ldr	r2, [pc, #256]	@ (8004ccc <checkAktifCalisma+0xbc0>)
 8004bcc:	6013      	str	r3, [r2, #0]
					bekle();
 8004bce:	f7ff f901 	bl	8003dd4 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004bd2:	4b33      	ldr	r3, [pc, #204]	@ (8004ca0 <checkAktifCalisma+0xb94>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ccc <checkAktifCalisma+0xbc0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd0 <checkAktifCalisma+0xbc4>)
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d211      	bcs.n	8004c08 <checkAktifCalisma+0xafc>
 8004be4:	2104      	movs	r1, #4
 8004be6:	4829      	ldr	r0, [pc, #164]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004be8:	f005 fbc8 	bl	800a37c <HAL_GPIO_ReadPin>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <checkAktifCalisma+0xafc>
 8004bf2:	4b33      	ldr	r3, [pc, #204]	@ (8004cc0 <checkAktifCalisma+0xbb4>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <checkAktifCalisma+0xafc>
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb0 <checkAktifCalisma+0xba4>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f083 0301 	eor.w	r3, r3, #1
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004c08:	4b2f      	ldr	r3, [pc, #188]	@ (8004cc8 <checkAktifCalisma+0xbbc>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c0e:	4b29      	ldr	r3, [pc, #164]	@ (8004cb4 <checkAktifCalisma+0xba8>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d160      	bne.n	8004cd8 <checkAktifCalisma+0xbcc>
 8004c16:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <checkAktifCalisma+0xbac>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d003      	beq.n	8004c26 <checkAktifCalisma+0xb1a>
 8004c1e:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <checkAktifCalisma+0xbac>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d158      	bne.n	8004cd8 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c26:	2104      	movs	r1, #4
 8004c28:	4818      	ldr	r0, [pc, #96]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004c2a:	f005 fba7 	bl	800a37c <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d003      	beq.n	8004c3c <checkAktifCalisma+0xb30>
 8004c34:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <checkAktifCalisma+0xbb4>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d14d      	bne.n	8004cd8 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4813      	ldr	r0, [pc, #76]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004c40:	f005 fb9c 	bl	800a37c <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d146      	bne.n	8004cd8 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c4a:	2180      	movs	r1, #128	@ 0x80
 8004c4c:	480f      	ldr	r0, [pc, #60]	@ (8004c8c <checkAktifCalisma+0xb80>)
 8004c4e:	f005 fb95 	bl	800a37c <HAL_GPIO_ReadPin>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <checkAktifCalisma+0xb54>
 8004c58:	4b18      	ldr	r3, [pc, #96]	@ (8004cbc <checkAktifCalisma+0xbb0>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <checkAktifCalisma+0xb6c>
 8004c60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c64:	4811      	ldr	r0, [pc, #68]	@ (8004cac <checkAktifCalisma+0xba0>)
 8004c66:	f005 fb89 	bl	800a37c <HAL_GPIO_ReadPin>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d133      	bne.n	8004cd8 <checkAktifCalisma+0xbcc>
 8004c70:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <checkAktifCalisma+0xbb0>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d12f      	bne.n	8004cd8 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004c78:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <checkAktifCalisma+0xba4>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02b      	beq.n	8004cd8 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004c80:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <checkAktifCalisma+0xbc8>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e02a      	b.n	8004cde <checkAktifCalisma+0xbd2>
 8004c88:	200010f4 	.word	0x200010f4
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	200010f8 	.word	0x200010f8
 8004c94:	2000110e 	.word	0x2000110e
 8004c98:	2000110f 	.word	0x2000110f
 8004c9c:	200010f0 	.word	0x200010f0
 8004ca0:	20001094 	.word	0x20001094
 8004ca4:	200010a0 	.word	0x200010a0
 8004ca8:	200010d2 	.word	0x200010d2
 8004cac:	40010c00 	.word	0x40010c00
 8004cb0:	200010fe 	.word	0x200010fe
 8004cb4:	200010c5 	.word	0x200010c5
 8004cb8:	200010c4 	.word	0x200010c4
 8004cbc:	200010c8 	.word	0x200010c8
 8004cc0:	200010c2 	.word	0x200010c2
 8004cc4:	200010ec 	.word	0x200010ec
 8004cc8:	200010ff 	.word	0x200010ff
 8004ccc:	20001098 	.word	0x20001098
 8004cd0:	200010d5 	.word	0x200010d5
 8004cd4:	20001100 	.word	0x20001100
				} else {
					kapi1butonkontrol=0;
 8004cd8:	4b8b      	ldr	r3, [pc, #556]	@ (8004f08 <checkAktifCalisma+0xdfc>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004cde:	4b8b      	ldr	r3, [pc, #556]	@ (8004f0c <checkAktifCalisma+0xe00>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d121      	bne.n	8004d2a <checkAktifCalisma+0xc1e>
 8004ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d003      	beq.n	8004cf6 <checkAktifCalisma+0xbea>
 8004cee:	4b88      	ldr	r3, [pc, #544]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d119      	bne.n	8004d2a <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	4886      	ldr	r0, [pc, #536]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004cfa:	f005 fb3f 	bl	800a37c <HAL_GPIO_ReadPin>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d003      	beq.n	8004d0c <checkAktifCalisma+0xc00>
 8004d04:	4b84      	ldr	r3, [pc, #528]	@ (8004f18 <checkAktifCalisma+0xe0c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10e      	bne.n	8004d2a <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	4881      	ldr	r0, [pc, #516]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004d10:	f005 fb34 	bl	800a37c <HAL_GPIO_ReadPin>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004d1a:	4b80      	ldr	r3, [pc, #512]	@ (8004f1c <checkAktifCalisma+0xe10>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004d22:	4b7f      	ldr	r3, [pc, #508]	@ (8004f20 <checkAktifCalisma+0xe14>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	e002      	b.n	8004d30 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004d2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f20 <checkAktifCalisma+0xe14>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004d30:	4b75      	ldr	r3, [pc, #468]	@ (8004f08 <checkAktifCalisma+0xdfc>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <checkAktifCalisma+0xc3c>
 8004d38:	4b79      	ldr	r3, [pc, #484]	@ (8004f20 <checkAktifCalisma+0xe14>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <checkAktifCalisma+0xc3c>
 8004d40:	4b78      	ldr	r3, [pc, #480]	@ (8004f24 <checkAktifCalisma+0xe18>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	4876      	ldr	r0, [pc, #472]	@ (8004f28 <checkAktifCalisma+0xe1c>)
 8004d4e:	f005 fb2c 	bl	800a3aa <HAL_GPIO_WritePin>
 8004d52:	e004      	b.n	8004d5e <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	@ 0x80
 8004d58:	4873      	ldr	r0, [pc, #460]	@ (8004f28 <checkAktifCalisma+0xe1c>)
 8004d5a:	f005 fb26 	bl	800a3aa <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d5e:	4b73      	ldr	r3, [pc, #460]	@ (8004f2c <checkAktifCalisma+0xe20>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d141      	bne.n	8004dea <checkAktifCalisma+0xcde>
 8004d66:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d003      	beq.n	8004d76 <checkAktifCalisma+0xc6a>
 8004d6e:	4b68      	ldr	r3, [pc, #416]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d139      	bne.n	8004dea <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d7a:	4866      	ldr	r0, [pc, #408]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004d7c:	f005 fafe 	bl	800a37c <HAL_GPIO_ReadPin>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <checkAktifCalisma+0xc82>
 8004d86:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <checkAktifCalisma+0xe24>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <checkAktifCalisma+0xc9a>
 8004d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d92:	4868      	ldr	r0, [pc, #416]	@ (8004f34 <checkAktifCalisma+0xe28>)
 8004d94:	f005 faf2 	bl	800a37c <HAL_GPIO_ReadPin>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d125      	bne.n	8004dea <checkAktifCalisma+0xcde>
 8004d9e:	4b64      	ldr	r3, [pc, #400]	@ (8004f30 <checkAktifCalisma+0xe24>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d121      	bne.n	8004dea <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004da6:	2102      	movs	r1, #2
 8004da8:	485a      	ldr	r0, [pc, #360]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004daa:	f005 fae7 	bl	800a37c <HAL_GPIO_ReadPin>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d11a      	bne.n	8004dea <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004db4:	2104      	movs	r1, #4
 8004db6:	4857      	ldr	r0, [pc, #348]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004db8:	f005 fae0 	bl	800a37c <HAL_GPIO_ReadPin>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d113      	bne.n	8004dea <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004dc2:	4b56      	ldr	r3, [pc, #344]	@ (8004f1c <checkAktifCalisma+0xe10>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00f      	beq.n	8004dea <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004dca:	4b5b      	ldr	r3, [pc, #364]	@ (8004f38 <checkAktifCalisma+0xe2c>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f083 0301 	eor.w	r3, r3, #1
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004dd8:	4b58      	ldr	r3, [pc, #352]	@ (8004f3c <checkAktifCalisma+0xe30>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004dde:	4b58      	ldr	r3, [pc, #352]	@ (8004f40 <checkAktifCalisma+0xe34>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a58      	ldr	r2, [pc, #352]	@ (8004f44 <checkAktifCalisma+0xe38>)
 8004de4:	6013      	str	r3, [r2, #0]
					bekle();
 8004de6:	f7fe fff5 	bl	8003dd4 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004dea:	4b55      	ldr	r3, [pc, #340]	@ (8004f40 <checkAktifCalisma+0xe34>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b55      	ldr	r3, [pc, #340]	@ (8004f44 <checkAktifCalisma+0xe38>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	4a54      	ldr	r2, [pc, #336]	@ (8004f48 <checkAktifCalisma+0xe3c>)
 8004df6:	7812      	ldrb	r2, [r2, #0]
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d20d      	bcs.n	8004e18 <checkAktifCalisma+0xd0c>
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	4845      	ldr	r0, [pc, #276]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004e00:	f005 fabc 	bl	800a37c <HAL_GPIO_ReadPin>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <checkAktifCalisma+0xd0c>
 8004e0a:	4b44      	ldr	r3, [pc, #272]	@ (8004f1c <checkAktifCalisma+0xe10>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f083 0301 	eor.w	r3, r3, #1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004e18:	4b48      	ldr	r3, [pc, #288]	@ (8004f3c <checkAktifCalisma+0xe30>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e1e:	4b43      	ldr	r3, [pc, #268]	@ (8004f2c <checkAktifCalisma+0xe20>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d135      	bne.n	8004e92 <checkAktifCalisma+0xd86>
 8004e26:	4b3a      	ldr	r3, [pc, #232]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d003      	beq.n	8004e36 <checkAktifCalisma+0xd2a>
 8004e2e:	4b38      	ldr	r3, [pc, #224]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d12d      	bne.n	8004e92 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e3a:	4836      	ldr	r0, [pc, #216]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004e3c:	f005 fa9e 	bl	800a37c <HAL_GPIO_ReadPin>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <checkAktifCalisma+0xd42>
 8004e46:	4b3a      	ldr	r3, [pc, #232]	@ (8004f30 <checkAktifCalisma+0xe24>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <checkAktifCalisma+0xd5a>
 8004e4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e52:	4838      	ldr	r0, [pc, #224]	@ (8004f34 <checkAktifCalisma+0xe28>)
 8004e54:	f005 fa92 	bl	800a37c <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d119      	bne.n	8004e92 <checkAktifCalisma+0xd86>
 8004e5e:	4b34      	ldr	r3, [pc, #208]	@ (8004f30 <checkAktifCalisma+0xe24>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d115      	bne.n	8004e92 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004e66:	2102      	movs	r1, #2
 8004e68:	482a      	ldr	r0, [pc, #168]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004e6a:	f005 fa87 	bl	800a37c <HAL_GPIO_ReadPin>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d10e      	bne.n	8004e92 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e74:	2104      	movs	r1, #4
 8004e76:	4827      	ldr	r0, [pc, #156]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004e78:	f005 fa80 	bl	800a37c <HAL_GPIO_ReadPin>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d107      	bne.n	8004e92 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004e82:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <checkAktifCalisma+0xe10>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004e8a:	4b30      	ldr	r3, [pc, #192]	@ (8004f4c <checkAktifCalisma+0xe40>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e002      	b.n	8004e98 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004e92:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <checkAktifCalisma+0xe40>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e98:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <checkAktifCalisma+0xe20>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d11d      	bne.n	8004edc <checkAktifCalisma+0xdd0>
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d003      	beq.n	8004eb0 <checkAktifCalisma+0xda4>
 8004ea8:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <checkAktifCalisma+0xe04>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d115      	bne.n	8004edc <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4818      	ldr	r0, [pc, #96]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004eb4:	f005 fa62 	bl	800a37c <HAL_GPIO_ReadPin>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10e      	bne.n	8004edc <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	4814      	ldr	r0, [pc, #80]	@ (8004f14 <checkAktifCalisma+0xe08>)
 8004ec2:	f005 fa5b 	bl	800a37c <HAL_GPIO_ReadPin>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004ecc:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <checkAktifCalisma+0xe10>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <checkAktifCalisma+0xe44>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e002      	b.n	8004ee2 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004edc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f50 <checkAktifCalisma+0xe44>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <checkAktifCalisma+0xe40>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <checkAktifCalisma+0xdee>
 8004eea:	4b19      	ldr	r3, [pc, #100]	@ (8004f50 <checkAktifCalisma+0xe44>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <checkAktifCalisma+0xdee>
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <checkAktifCalisma+0xe30>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d02c      	beq.n	8004f54 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004efa:	2201      	movs	r2, #1
 8004efc:	2140      	movs	r1, #64	@ 0x40
 8004efe:	480a      	ldr	r0, [pc, #40]	@ (8004f28 <checkAktifCalisma+0xe1c>)
 8004f00:	f005 fa53 	bl	800a3aa <HAL_GPIO_WritePin>
 8004f04:	e02b      	b.n	8004f5e <checkAktifCalisma+0xe52>
 8004f06:	bf00      	nop
 8004f08:	20001100 	.word	0x20001100
 8004f0c:	200010c5 	.word	0x200010c5
 8004f10:	200010c4 	.word	0x200010c4
 8004f14:	40011000 	.word	0x40011000
 8004f18:	200010c2 	.word	0x200010c2
 8004f1c:	200010fe 	.word	0x200010fe
 8004f20:	20001101 	.word	0x20001101
 8004f24:	200010ff 	.word	0x200010ff
 8004f28:	40010800 	.word	0x40010800
 8004f2c:	200010c6 	.word	0x200010c6
 8004f30:	200010c8 	.word	0x200010c8
 8004f34:	40010c00 	.word	0x40010c00
 8004f38:	200010ec 	.word	0x200010ec
 8004f3c:	20001102 	.word	0x20001102
 8004f40:	20001094 	.word	0x20001094
 8004f44:	20001098 	.word	0x20001098
 8004f48:	200010d6 	.word	0x200010d6
 8004f4c:	20001103 	.word	0x20001103
 8004f50:	20001104 	.word	0x20001104
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004f54:	2200      	movs	r2, #0
 8004f56:	2140      	movs	r1, #64	@ 0x40
 8004f58:	4889      	ldr	r0, [pc, #548]	@ (8005180 <checkAktifCalisma+0x1074>)
 8004f5a:	f005 fa26 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004f5e:	4b89      	ldr	r3, [pc, #548]	@ (8005184 <checkAktifCalisma+0x1078>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <checkAktifCalisma+0xe62>
 8004f66:	4b87      	ldr	r3, [pc, #540]	@ (8005184 <checkAktifCalisma+0x1078>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d115      	bne.n	8004f9a <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f6e:	2104      	movs	r1, #4
 8004f70:	4885      	ldr	r0, [pc, #532]	@ (8005188 <checkAktifCalisma+0x107c>)
 8004f72:	f005 fa03 	bl	800a37c <HAL_GPIO_ReadPin>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d003      	beq.n	8004f84 <checkAktifCalisma+0xe78>
 8004f7c:	4b83      	ldr	r3, [pc, #524]	@ (800518c <checkAktifCalisma+0x1080>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004f84:	2102      	movs	r1, #2
 8004f86:	4880      	ldr	r0, [pc, #512]	@ (8005188 <checkAktifCalisma+0x107c>)
 8004f88:	f005 f9f8 	bl	800a37c <HAL_GPIO_ReadPin>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004f92:	4b7f      	ldr	r3, [pc, #508]	@ (8005190 <checkAktifCalisma+0x1084>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e002      	b.n	8004fa0 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8005190 <checkAktifCalisma+0x1084>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004fa0:	4b78      	ldr	r3, [pc, #480]	@ (8005184 <checkAktifCalisma+0x1078>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d003      	beq.n	8004fb0 <checkAktifCalisma+0xea4>
 8004fa8:	4b76      	ldr	r3, [pc, #472]	@ (8005184 <checkAktifCalisma+0x1078>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d111      	bne.n	8004fd4 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4875      	ldr	r0, [pc, #468]	@ (8005188 <checkAktifCalisma+0x107c>)
 8004fb4:	f005 f9e2 	bl	800a37c <HAL_GPIO_ReadPin>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d10a      	bne.n	8004fd4 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	4871      	ldr	r0, [pc, #452]	@ (8005188 <checkAktifCalisma+0x107c>)
 8004fc2:	f005 f9db 	bl	800a37c <HAL_GPIO_ReadPin>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004fcc:	4b71      	ldr	r3, [pc, #452]	@ (8005194 <checkAktifCalisma+0x1088>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8005194 <checkAktifCalisma+0x1088>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004fda:	4b6d      	ldr	r3, [pc, #436]	@ (8005190 <checkAktifCalisma+0x1084>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8005198 <checkAktifCalisma+0x108c>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d10b      	bne.n	8005002 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004fea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fee:	486b      	ldr	r0, [pc, #428]	@ (800519c <checkAktifCalisma+0x1090>)
 8004ff0:	f005 f9c4 	bl	800a37c <HAL_GPIO_ReadPin>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004ffa:	4b69      	ldr	r3, [pc, #420]	@ (80051a0 <checkAktifCalisma+0x1094>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e002      	b.n	8005008 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005002:	4b67      	ldr	r3, [pc, #412]	@ (80051a0 <checkAktifCalisma+0x1094>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005008:	4b62      	ldr	r3, [pc, #392]	@ (8005194 <checkAktifCalisma+0x1088>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00f      	beq.n	8005030 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005010:	4b61      	ldr	r3, [pc, #388]	@ (8005198 <checkAktifCalisma+0x108c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10b      	bne.n	8005030 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005018:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800501c:	485f      	ldr	r0, [pc, #380]	@ (800519c <checkAktifCalisma+0x1090>)
 800501e:	f005 f9ad 	bl	800a37c <HAL_GPIO_ReadPin>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8005028:	4b5e      	ldr	r3, [pc, #376]	@ (80051a4 <checkAktifCalisma+0x1098>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8005030:	4b5c      	ldr	r3, [pc, #368]	@ (80051a4 <checkAktifCalisma+0x1098>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005036:	4b5c      	ldr	r3, [pc, #368]	@ (80051a8 <checkAktifCalisma+0x109c>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11b      	bne.n	8005076 <checkAktifCalisma+0xf6a>
 800503e:	4b5b      	ldr	r3, [pc, #364]	@ (80051ac <checkAktifCalisma+0x10a0>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d003      	beq.n	800504e <checkAktifCalisma+0xf42>
 8005046:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <checkAktifCalisma+0x10a0>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d113      	bne.n	8005076 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 800504e:	4b50      	ldr	r3, [pc, #320]	@ (8005190 <checkAktifCalisma+0x1084>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <checkAktifCalisma+0xf52>
 8005056:	4b4f      	ldr	r3, [pc, #316]	@ (8005194 <checkAktifCalisma+0x1088>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <checkAktifCalisma+0xf6a>
 800505e:	4b54      	ldr	r3, [pc, #336]	@ (80051b0 <checkAktifCalisma+0x10a4>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <checkAktifCalisma+0xf62>
 8005066:	4b53      	ldr	r3, [pc, #332]	@ (80051b4 <checkAktifCalisma+0x10a8>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 800506e:	4b52      	ldr	r3, [pc, #328]	@ (80051b8 <checkAktifCalisma+0x10ac>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e002      	b.n	800507c <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 8005076:	4b50      	ldr	r3, [pc, #320]	@ (80051b8 <checkAktifCalisma+0x10ac>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800507c:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <checkAktifCalisma+0x109c>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d148      	bne.n	8005116 <checkAktifCalisma+0x100a>
 8005084:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <checkAktifCalisma+0x10a0>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d003      	beq.n	8005094 <checkAktifCalisma+0xf88>
 800508c:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <checkAktifCalisma+0x10a0>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d140      	bne.n	8005116 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005094:	4b3e      	ldr	r3, [pc, #248]	@ (8005190 <checkAktifCalisma+0x1084>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d103      	bne.n	80050a4 <checkAktifCalisma+0xf98>
 800509c:	4b3d      	ldr	r3, [pc, #244]	@ (8005194 <checkAktifCalisma+0x1088>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d038      	beq.n	8005116 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80050a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050a8:	4837      	ldr	r0, [pc, #220]	@ (8005188 <checkAktifCalisma+0x107c>)
 80050aa:	f005 f967 	bl	800a37c <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80050b4:	2180      	movs	r1, #128	@ 0x80
 80050b6:	4834      	ldr	r0, [pc, #208]	@ (8005188 <checkAktifCalisma+0x107c>)
 80050b8:	f005 f960 	bl	800a37c <HAL_GPIO_ReadPin>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80050c2:	2104      	movs	r1, #4
 80050c4:	4830      	ldr	r0, [pc, #192]	@ (8005188 <checkAktifCalisma+0x107c>)
 80050c6:	f005 f959 	bl	800a37c <HAL_GPIO_ReadPin>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d00e      	beq.n	80050ee <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80050d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050d4:	482c      	ldr	r0, [pc, #176]	@ (8005188 <checkAktifCalisma+0x107c>)
 80050d6:	f005 f951 	bl	800a37c <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80050e0:	2102      	movs	r1, #2
 80050e2:	4829      	ldr	r0, [pc, #164]	@ (8005188 <checkAktifCalisma+0x107c>)
 80050e4:	f005 f94a 	bl	800a37c <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d103      	bne.n	80050f6 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80050ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <checkAktifCalisma+0x108c>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <checkAktifCalisma+0xffa>
 80050f6:	4b2a      	ldr	r3, [pc, #168]	@ (80051a0 <checkAktifCalisma+0x1094>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <checkAktifCalisma+0xffa>
 80050fe:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <checkAktifCalisma+0x1098>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005106:	4b2d      	ldr	r3, [pc, #180]	@ (80051bc <checkAktifCalisma+0x10b0>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800510e:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <checkAktifCalisma+0x10b4>)
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e002      	b.n	800511c <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005116:	4b2a      	ldr	r3, [pc, #168]	@ (80051c0 <checkAktifCalisma+0x10b4>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800511c:	4b22      	ldr	r3, [pc, #136]	@ (80051a8 <checkAktifCalisma+0x109c>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d117      	bne.n	8005154 <checkAktifCalisma+0x1048>
 8005124:	4b21      	ldr	r3, [pc, #132]	@ (80051ac <checkAktifCalisma+0x10a0>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d003      	beq.n	8005134 <checkAktifCalisma+0x1028>
 800512c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <checkAktifCalisma+0x10a0>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d10f      	bne.n	8005154 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005134:	4b16      	ldr	r3, [pc, #88]	@ (8005190 <checkAktifCalisma+0x1084>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d103      	bne.n	8005144 <checkAktifCalisma+0x1038>
 800513c:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <checkAktifCalisma+0x1088>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005144:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <checkAktifCalisma+0x10b0>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 800514c:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <checkAktifCalisma+0x10b8>)
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e002      	b.n	800515a <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005154:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <checkAktifCalisma+0x10b8>)
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800515a:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <checkAktifCalisma+0x10b4>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d107      	bne.n	8005172 <checkAktifCalisma+0x1066>
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <checkAktifCalisma+0x10ac>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <checkAktifCalisma+0x1066>
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <checkAktifCalisma+0x10b8>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d02a      	beq.n	80051c8 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005172:	2201      	movs	r2, #1
 8005174:	2120      	movs	r1, #32
 8005176:	4802      	ldr	r0, [pc, #8]	@ (8005180 <checkAktifCalisma+0x1074>)
 8005178:	f005 f917 	bl	800a3aa <HAL_GPIO_WritePin>
 800517c:	e029      	b.n	80051d2 <checkAktifCalisma+0x10c6>
 800517e:	bf00      	nop
 8005180:	40010800 	.word	0x40010800
 8005184:	200010c9 	.word	0x200010c9
 8005188:	40011000 	.word	0x40011000
 800518c:	200010c2 	.word	0x200010c2
 8005190:	20001108 	.word	0x20001108
 8005194:	20001109 	.word	0x20001109
 8005198:	200010c8 	.word	0x200010c8
 800519c:	40010c00 	.word	0x40010c00
 80051a0:	20001118 	.word	0x20001118
 80051a4:	20001119 	.word	0x20001119
 80051a8:	200010c7 	.word	0x200010c7
 80051ac:	200010c4 	.word	0x200010c4
 80051b0:	200010ff 	.word	0x200010ff
 80051b4:	20001102 	.word	0x20001102
 80051b8:	20001105 	.word	0x20001105
 80051bc:	200010fe 	.word	0x200010fe
 80051c0:	20001106 	.word	0x20001106
 80051c4:	20001107 	.word	0x20001107
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2120      	movs	r1, #32
 80051cc:	4887      	ldr	r0, [pc, #540]	@ (80053ec <checkAktifCalisma+0x12e0>)
 80051ce:	f005 f8ec 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80051d2:	4b87      	ldr	r3, [pc, #540]	@ (80053f0 <checkAktifCalisma+0x12e4>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00e      	beq.n	80051f8 <checkAktifCalisma+0x10ec>
 80051da:	2102      	movs	r1, #2
 80051dc:	4885      	ldr	r0, [pc, #532]	@ (80053f4 <checkAktifCalisma+0x12e8>)
 80051de:	f005 f8cd 	bl	800a37c <HAL_GPIO_ReadPin>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d107      	bne.n	80051f8 <checkAktifCalisma+0x10ec>
 80051e8:	4b83      	ldr	r3, [pc, #524]	@ (80053f8 <checkAktifCalisma+0x12ec>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <checkAktifCalisma+0x10ec>
 80051f0:	4b82      	ldr	r3, [pc, #520]	@ (80053fc <checkAktifCalisma+0x12f0>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d112      	bne.n	800521e <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80051f8:	4b81      	ldr	r3, [pc, #516]	@ (8005400 <checkAktifCalisma+0x12f4>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d032      	beq.n	8005266 <checkAktifCalisma+0x115a>
 8005200:	2104      	movs	r1, #4
 8005202:	487c      	ldr	r0, [pc, #496]	@ (80053f4 <checkAktifCalisma+0x12e8>)
 8005204:	f005 f8ba 	bl	800a37c <HAL_GPIO_ReadPin>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d12b      	bne.n	8005266 <checkAktifCalisma+0x115a>
 800520e:	4b7a      	ldr	r3, [pc, #488]	@ (80053f8 <checkAktifCalisma+0x12ec>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d027      	beq.n	8005266 <checkAktifCalisma+0x115a>
 8005216:	4b79      	ldr	r3, [pc, #484]	@ (80053fc <checkAktifCalisma+0x12f0>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d023      	beq.n	8005266 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800521e:	4b79      	ldr	r3, [pc, #484]	@ (8005404 <checkAktifCalisma+0x12f8>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b77      	ldr	r3, [pc, #476]	@ (8005404 <checkAktifCalisma+0x12f8>)
 8005228:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800522a:	4b76      	ldr	r3, [pc, #472]	@ (8005404 <checkAktifCalisma+0x12f8>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2bff      	cmp	r3, #255	@ 0xff
 8005230:	d108      	bne.n	8005244 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 8005232:	4b74      	ldr	r3, [pc, #464]	@ (8005404 <checkAktifCalisma+0x12f8>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005238:	4b73      	ldr	r3, [pc, #460]	@ (8005408 <checkAktifCalisma+0x12fc>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	4b71      	ldr	r3, [pc, #452]	@ (8005408 <checkAktifCalisma+0x12fc>)
 8005242:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005244:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <checkAktifCalisma+0x12f8>)
 8005246:	781a      	ldrb	r2, [r3, #0]
 8005248:	4b70      	ldr	r3, [pc, #448]	@ (800540c <checkAktifCalisma+0x1300>)
 800524a:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 800524c:	4b6e      	ldr	r3, [pc, #440]	@ (8005408 <checkAktifCalisma+0x12fc>)
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	4b6e      	ldr	r3, [pc, #440]	@ (800540c <checkAktifCalisma+0x1300>)
 8005252:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005254:	4b6e      	ldr	r3, [pc, #440]	@ (8005410 <checkAktifCalisma+0x1304>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800525a:	4b65      	ldr	r3, [pc, #404]	@ (80053f0 <checkAktifCalisma+0x12e4>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005260:	4b67      	ldr	r3, [pc, #412]	@ (8005400 <checkAktifCalisma+0x12f4>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005266:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800526a:	486a      	ldr	r0, [pc, #424]	@ (8005414 <checkAktifCalisma+0x1308>)
 800526c:	f005 f886 	bl	800a37c <HAL_GPIO_ReadPin>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005276:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800527a:	4866      	ldr	r0, [pc, #408]	@ (8005414 <checkAktifCalisma+0x1308>)
 800527c:	f005 f87e 	bl	800a37c <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800528a:	4862      	ldr	r0, [pc, #392]	@ (8005414 <checkAktifCalisma+0x1308>)
 800528c:	f005 f876 	bl	800a37c <HAL_GPIO_ReadPin>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d006      	beq.n	80052a4 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005296:	2140      	movs	r1, #64	@ 0x40
 8005298:	4856      	ldr	r0, [pc, #344]	@ (80053f4 <checkAktifCalisma+0x12e8>)
 800529a:	f005 f86f 	bl	800a37c <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <checkAktifCalisma+0x11a0>

					startBasili=1;
 80052a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005418 <checkAktifCalisma+0x130c>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80052ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005418 <checkAktifCalisma+0x130c>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80052b2:	4b59      	ldr	r3, [pc, #356]	@ (8005418 <checkAktifCalisma+0x130c>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <checkAktifCalisma+0x11d8>
 80052ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052be:	4855      	ldr	r0, [pc, #340]	@ (8005414 <checkAktifCalisma+0x1308>)
 80052c0:	f005 f85c 	bl	800a37c <HAL_GPIO_ReadPin>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10c      	bne.n	80052e4 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80052ca:	4b54      	ldr	r3, [pc, #336]	@ (800541c <checkAktifCalisma+0x1310>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f7fb fd13 	bl	8000cfc <hataKoduLcdGoster>
					hata2EEPROM(1);
 80052d6:	2001      	movs	r0, #1
 80052d8:	f7fb fcb8 	bl	8000c4c <hata2EEPROM>
					acilstophatasi=1;
 80052dc:	4b50      	ldr	r3, [pc, #320]	@ (8005420 <checkAktifCalisma+0x1314>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e018      	b.n	8005316 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80052e4:	4b4e      	ldr	r3, [pc, #312]	@ (8005420 <checkAktifCalisma+0x1314>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d014      	beq.n	8005316 <checkAktifCalisma+0x120a>
 80052ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052f0:	4848      	ldr	r0, [pc, #288]	@ (8005414 <checkAktifCalisma+0x1308>)
 80052f2:	f005 f843 	bl	800a37c <HAL_GPIO_ReadPin>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10c      	bne.n	8005316 <checkAktifCalisma+0x120a>
 80052fc:	4b46      	ldr	r3, [pc, #280]	@ (8005418 <checkAktifCalisma+0x130c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800530a:	4b45      	ldr	r3, [pc, #276]	@ (8005420 <checkAktifCalisma+0x1314>)
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005310:	2001      	movs	r0, #1
 8005312:	f7fe fcf1 	bl	8003cf8 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005316:	4b43      	ldr	r3, [pc, #268]	@ (8005424 <checkAktifCalisma+0x1318>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	f083 0301 	eor.w	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d023      	beq.n	800536c <checkAktifCalisma+0x1260>
 8005324:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005328:	483a      	ldr	r0, [pc, #232]	@ (8005414 <checkAktifCalisma+0x1308>)
 800532a:	f005 f827 	bl	800a37c <HAL_GPIO_ReadPin>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <checkAktifCalisma+0x1230>
 8005334:	4b3c      	ldr	r3, [pc, #240]	@ (8005428 <checkAktifCalisma+0x131c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d017      	beq.n	800536c <checkAktifCalisma+0x1260>
 800533c:	4b3b      	ldr	r3, [pc, #236]	@ (800542c <checkAktifCalisma+0x1320>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d113      	bne.n	800536c <checkAktifCalisma+0x1260>
 8005344:	4b3a      	ldr	r3, [pc, #232]	@ (8005430 <checkAktifCalisma+0x1324>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f083 0301 	eor.w	r3, r3, #1
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <checkAktifCalisma+0x1260>
					hataVar=1;
 8005352:	4b32      	ldr	r3, [pc, #200]	@ (800541c <checkAktifCalisma+0x1310>)
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005358:	2002      	movs	r0, #2
 800535a:	f7fb fccf 	bl	8000cfc <hataKoduLcdGoster>
					hata2EEPROM(2);
 800535e:	2002      	movs	r0, #2
 8005360:	f7fb fc74 	bl	8000c4c <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005364:	4b32      	ldr	r3, [pc, #200]	@ (8005430 <checkAktifCalisma+0x1324>)
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e017      	b.n	800539c <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800536c:	4b30      	ldr	r3, [pc, #192]	@ (8005430 <checkAktifCalisma+0x1324>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <checkAktifCalisma+0x1290>
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <checkAktifCalisma+0x1318>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00f      	beq.n	800539c <checkAktifCalisma+0x1290>
 800537c:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <checkAktifCalisma+0x1328>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 800538a:	4b29      	ldr	r3, [pc, #164]	@ (8005430 <checkAktifCalisma+0x1324>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005390:	4b25      	ldr	r3, [pc, #148]	@ (8005428 <checkAktifCalisma+0x131c>)
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8005396:	2002      	movs	r0, #2
 8005398:	f7fe fcae 	bl	8003cf8 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800539c:	4b26      	ldr	r3, [pc, #152]	@ (8005438 <checkAktifCalisma+0x132c>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d151      	bne.n	8005448 <checkAktifCalisma+0x133c>
 80053a4:	4b25      	ldr	r3, [pc, #148]	@ (800543c <checkAktifCalisma+0x1330>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d14d      	bne.n	8005448 <checkAktifCalisma+0x133c>
 80053ac:	4b24      	ldr	r3, [pc, #144]	@ (8005440 <checkAktifCalisma+0x1334>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d049      	beq.n	8005448 <checkAktifCalisma+0x133c>
 80053b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053b8:	480e      	ldr	r0, [pc, #56]	@ (80053f4 <checkAktifCalisma+0x12e8>)
 80053ba:	f004 ffdf 	bl	800a37c <HAL_GPIO_ReadPin>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d141      	bne.n	8005448 <checkAktifCalisma+0x133c>
 80053c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005444 <checkAktifCalisma+0x1338>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f083 0301 	eor.w	r3, r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d03a      	beq.n	8005448 <checkAktifCalisma+0x133c>
					hataVar=1;
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <checkAktifCalisma+0x1310>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80053d8:	2003      	movs	r0, #3
 80053da:	f7fb fc8f 	bl	8000cfc <hataKoduLcdGoster>
					hata2EEPROM(3);
 80053de:	2003      	movs	r0, #3
 80053e0:	f7fb fc34 	bl	8000c4c <hata2EEPROM>
					basinchatasi=1;
 80053e4:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <checkAktifCalisma+0x1338>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	e043      	b.n	8005474 <checkAktifCalisma+0x1368>
 80053ec:	40010800 	.word	0x40010800
 80053f0:	200010fc 	.word	0x200010fc
 80053f4:	40011000 	.word	0x40011000
 80053f8:	200010c2 	.word	0x200010c2
 80053fc:	200010fe 	.word	0x200010fe
 8005400:	200010fd 	.word	0x200010fd
 8005404:	200010b4 	.word	0x200010b4
 8005408:	200010b6 	.word	0x200010b6
 800540c:	20000fec 	.word	0x20000fec
 8005410:	200010e9 	.word	0x200010e9
 8005414:	40010c00 	.word	0x40010c00
 8005418:	2000110a 	.word	0x2000110a
 800541c:	20001111 	.word	0x20001111
 8005420:	2000110c 	.word	0x2000110c
 8005424:	20001113 	.word	0x20001113
 8005428:	2000111d 	.word	0x2000111d
 800542c:	200010c0 	.word	0x200010c0
 8005430:	2000110d 	.word	0x2000110d
 8005434:	200010f5 	.word	0x200010f5
 8005438:	200010bf 	.word	0x200010bf
 800543c:	200010c3 	.word	0x200010c3
 8005440:	20001110 	.word	0x20001110
 8005444:	2000111a 	.word	0x2000111a
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005448:	4b85      	ldr	r3, [pc, #532]	@ (8005660 <checkAktifCalisma+0x1554>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d011      	beq.n	8005474 <checkAktifCalisma+0x1368>
 8005450:	4b84      	ldr	r3, [pc, #528]	@ (8005664 <checkAktifCalisma+0x1558>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10d      	bne.n	8005474 <checkAktifCalisma+0x1368>
 8005458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800545c:	4882      	ldr	r0, [pc, #520]	@ (8005668 <checkAktifCalisma+0x155c>)
 800545e:	f004 ff8d 	bl	800a37c <HAL_GPIO_ReadPin>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005468:	4b7d      	ldr	r3, [pc, #500]	@ (8005660 <checkAktifCalisma+0x1554>)
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800546e:	2003      	movs	r0, #3
 8005470:	f7fe fc42 	bl	8003cf8 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005474:	4b7d      	ldr	r3, [pc, #500]	@ (800566c <checkAktifCalisma+0x1560>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d103      	bne.n	8005484 <checkAktifCalisma+0x1378>
 800547c:	4b7c      	ldr	r3, [pc, #496]	@ (8005670 <checkAktifCalisma+0x1564>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d023      	beq.n	80054cc <checkAktifCalisma+0x13c0>
 8005484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005488:	487a      	ldr	r0, [pc, #488]	@ (8005674 <checkAktifCalisma+0x1568>)
 800548a:	f004 ff77 	bl	800a37c <HAL_GPIO_ReadPin>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d11b      	bne.n	80054cc <checkAktifCalisma+0x13c0>
 8005494:	4b78      	ldr	r3, [pc, #480]	@ (8005678 <checkAktifCalisma+0x156c>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d003      	beq.n	80054a4 <checkAktifCalisma+0x1398>
 800549c:	4b76      	ldr	r3, [pc, #472]	@ (8005678 <checkAktifCalisma+0x156c>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d113      	bne.n	80054cc <checkAktifCalisma+0x13c0>
 80054a4:	4b75      	ldr	r3, [pc, #468]	@ (800567c <checkAktifCalisma+0x1570>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f083 0301 	eor.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <checkAktifCalisma+0x13c0>
					hataVar=1;
 80054b2:	4b73      	ldr	r3, [pc, #460]	@ (8005680 <checkAktifCalisma+0x1574>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80054b8:	2004      	movs	r0, #4
 80054ba:	f7fb fc1f 	bl	8000cfc <hataKoduLcdGoster>
					hata2EEPROM(4);
 80054be:	2004      	movs	r0, #4
 80054c0:	f7fb fbc4 	bl	8000c4c <hata2EEPROM>
					katkapisivicihatasi=1;
 80054c4:	4b6d      	ldr	r3, [pc, #436]	@ (800567c <checkAktifCalisma+0x1570>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e01f      	b.n	800550c <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80054cc:	4b6b      	ldr	r3, [pc, #428]	@ (800567c <checkAktifCalisma+0x1570>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <checkAktifCalisma+0x1400>
 80054d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005684 <checkAktifCalisma+0x1578>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d017      	beq.n	800550c <checkAktifCalisma+0x1400>
 80054dc:	4b63      	ldr	r3, [pc, #396]	@ (800566c <checkAktifCalisma+0x1560>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f083 0301 	eor.w	r3, r3, #1
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d010      	beq.n	800550c <checkAktifCalisma+0x1400>
 80054ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054ee:	4861      	ldr	r0, [pc, #388]	@ (8005674 <checkAktifCalisma+0x1568>)
 80054f0:	f004 ff44 	bl	800a37c <HAL_GPIO_ReadPin>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 80054fa:	4b60      	ldr	r3, [pc, #384]	@ (800567c <checkAktifCalisma+0x1570>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005500:	4b5b      	ldr	r3, [pc, #364]	@ (8005670 <checkAktifCalisma+0x1564>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005506:	2004      	movs	r0, #4
 8005508:	f7fe fbf6 	bl	8003cf8 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 800550c:	4b57      	ldr	r3, [pc, #348]	@ (800566c <checkAktifCalisma+0x1560>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <checkAktifCalisma+0x1410>
 8005514:	4b5c      	ldr	r3, [pc, #368]	@ (8005688 <checkAktifCalisma+0x157c>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d023      	beq.n	8005564 <checkAktifCalisma+0x1458>
 800551c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005520:	4854      	ldr	r0, [pc, #336]	@ (8005674 <checkAktifCalisma+0x1568>)
 8005522:	f004 ff2b 	bl	800a37c <HAL_GPIO_ReadPin>
 8005526:	4603      	mov	r3, r0
 8005528:	2b01      	cmp	r3, #1
 800552a:	d11b      	bne.n	8005564 <checkAktifCalisma+0x1458>
 800552c:	4b52      	ldr	r3, [pc, #328]	@ (8005678 <checkAktifCalisma+0x156c>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d003      	beq.n	800553c <checkAktifCalisma+0x1430>
 8005534:	4b50      	ldr	r3, [pc, #320]	@ (8005678 <checkAktifCalisma+0x156c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d113      	bne.n	8005564 <checkAktifCalisma+0x1458>
 800553c:	4b53      	ldr	r3, [pc, #332]	@ (800568c <checkAktifCalisma+0x1580>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <checkAktifCalisma+0x1458>

					hataVar=1;
 800554a:	4b4d      	ldr	r3, [pc, #308]	@ (8005680 <checkAktifCalisma+0x1574>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005550:	2005      	movs	r0, #5
 8005552:	f7fb fbd3 	bl	8000cfc <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005556:	2005      	movs	r0, #5
 8005558:	f7fb fb78 	bl	8000c4c <hata2EEPROM>
					tablakapisivicihatasi=1;
 800555c:	4b4b      	ldr	r3, [pc, #300]	@ (800568c <checkAktifCalisma+0x1580>)
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e023      	b.n	80055ac <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005564:	4b49      	ldr	r3, [pc, #292]	@ (800568c <checkAktifCalisma+0x1580>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <checkAktifCalisma+0x14a0>
 800556c:	4b45      	ldr	r3, [pc, #276]	@ (8005684 <checkAktifCalisma+0x1578>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <checkAktifCalisma+0x14a0>
 8005574:	4b3d      	ldr	r3, [pc, #244]	@ (800566c <checkAktifCalisma+0x1560>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f083 0301 	eor.w	r3, r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <checkAktifCalisma+0x14a0>
 8005582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005586:	483b      	ldr	r0, [pc, #236]	@ (8005674 <checkAktifCalisma+0x1568>)
 8005588:	f004 fef8 	bl	800a37c <HAL_GPIO_ReadPin>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <checkAktifCalisma+0x14a0>
 8005592:	4b3c      	ldr	r3, [pc, #240]	@ (8005684 <checkAktifCalisma+0x1578>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 800559a:	4b3c      	ldr	r3, [pc, #240]	@ (800568c <checkAktifCalisma+0x1580>)
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80055a0:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <checkAktifCalisma+0x157c>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80055a6:	2005      	movs	r0, #5
 80055a8:	f7fe fba6 	bl	8003cf8 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80055ac:	4b38      	ldr	r3, [pc, #224]	@ (8005690 <checkAktifCalisma+0x1584>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <checkAktifCalisma+0x14b8>
 80055b4:	4b37      	ldr	r3, [pc, #220]	@ (8005694 <checkAktifCalisma+0x1588>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <checkAktifCalisma+0x14b8>
 80055bc:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <checkAktifCalisma+0x158c>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01b      	beq.n	80055fc <checkAktifCalisma+0x14f0>
 80055c4:	4b35      	ldr	r3, [pc, #212]	@ (800569c <checkAktifCalisma+0x1590>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f083 0301 	eor.w	r3, r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d014      	beq.n	80055fc <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 80055d2:	4b33      	ldr	r3, [pc, #204]	@ (80056a0 <checkAktifCalisma+0x1594>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b33      	ldr	r3, [pc, #204]	@ (80056a4 <checkAktifCalisma+0x1598>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	4a32      	ldr	r2, [pc, #200]	@ (80056a8 <checkAktifCalisma+0x159c>)
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d30b      	bcc.n	80055fc <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 80055e4:	4b26      	ldr	r3, [pc, #152]	@ (8005680 <checkAktifCalisma+0x1574>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80055ea:	2006      	movs	r0, #6
 80055ec:	f7fb fb86 	bl	8000cfc <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80055f0:	2006      	movs	r0, #6
 80055f2:	f7fb fb2b 	bl	8000c4c <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80055f6:	4b29      	ldr	r3, [pc, #164]	@ (800569c <checkAktifCalisma+0x1590>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80055fc:	4b27      	ldr	r3, [pc, #156]	@ (800569c <checkAktifCalisma+0x1590>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d013      	beq.n	800562c <checkAktifCalisma+0x1520>
 8005604:	2108      	movs	r1, #8
 8005606:	481b      	ldr	r0, [pc, #108]	@ (8005674 <checkAktifCalisma+0x1568>)
 8005608:	f004 feb8 	bl	800a37c <HAL_GPIO_ReadPin>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <checkAktifCalisma+0x1520>
 8005612:	4b16      	ldr	r3, [pc, #88]	@ (800566c <checkAktifCalisma+0x1560>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005620:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <checkAktifCalisma+0x1590>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005626:	2006      	movs	r0, #6
 8005628:	f7fe fb66 	bl	8003cf8 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800562c:	4b1f      	ldr	r3, [pc, #124]	@ (80056ac <checkAktifCalisma+0x15a0>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <checkAktifCalisma+0x1540>
 8005634:	4b17      	ldr	r3, [pc, #92]	@ (8005694 <checkAktifCalisma+0x1588>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d107      	bne.n	800564c <checkAktifCalisma+0x1540>
 800563c:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <checkAktifCalisma+0x15a4>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <checkAktifCalisma+0x1540>
 8005644:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <checkAktifCalisma+0x158c>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d035      	beq.n	80056b8 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 800564c:	4b19      	ldr	r3, [pc, #100]	@ (80056b4 <checkAktifCalisma+0x15a8>)
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005652:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <checkAktifCalisma+0x1564>)
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005658:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <checkAktifCalisma+0x157c>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e032      	b.n	80056c6 <checkAktifCalisma+0x15ba>
 8005660:	2000111a 	.word	0x2000111a
 8005664:	200010bf 	.word	0x200010bf
 8005668:	40010c00 	.word	0x40010c00
 800566c:	2000110a 	.word	0x2000110a
 8005670:	2000111e 	.word	0x2000111e
 8005674:	40010800 	.word	0x40010800
 8005678:	200010c4 	.word	0x200010c4
 800567c:	2000111b 	.word	0x2000111b
 8005680:	20001111 	.word	0x20001111
 8005684:	200010fe 	.word	0x200010fe
 8005688:	2000111f 	.word	0x2000111f
 800568c:	2000111c 	.word	0x2000111c
 8005690:	20001110 	.word	0x20001110
 8005694:	200010f5 	.word	0x200010f5
 8005698:	200010f4 	.word	0x200010f4
 800569c:	2000110b 	.word	0x2000110b
 80056a0:	20001094 	.word	0x20001094
 80056a4:	200010a8 	.word	0x200010a8
 80056a8:	200010d4 	.word	0x200010d4
 80056ac:	200010f2 	.word	0x200010f2
 80056b0:	200010f3 	.word	0x200010f3
 80056b4:	20001112 	.word	0x20001112
				} else {
					makineCalisiyor=1;
 80056b8:	4b3a      	ldr	r3, [pc, #232]	@ (80057a4 <checkAktifCalisma+0x1698>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80056be:	4b3a      	ldr	r3, [pc, #232]	@ (80057a8 <checkAktifCalisma+0x169c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	@ (80057ac <checkAktifCalisma+0x16a0>)
 80056c4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80056c6:	4b3a      	ldr	r3, [pc, #232]	@ (80057b0 <checkAktifCalisma+0x16a4>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02f      	beq.n	800572e <checkAktifCalisma+0x1622>
 80056ce:	4b39      	ldr	r3, [pc, #228]	@ (80057b4 <checkAktifCalisma+0x16a8>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d028      	beq.n	800572e <checkAktifCalisma+0x1622>
 80056dc:	4b36      	ldr	r3, [pc, #216]	@ (80057b8 <checkAktifCalisma+0x16ac>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f083 0301 	eor.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d021      	beq.n	800572e <checkAktifCalisma+0x1622>
 80056ea:	4b34      	ldr	r3, [pc, #208]	@ (80057bc <checkAktifCalisma+0x16b0>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f083 0301 	eor.w	r3, r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01a      	beq.n	800572e <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80056f8:	4b31      	ldr	r3, [pc, #196]	@ (80057c0 <checkAktifCalisma+0x16b4>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f083 0301 	eor.w	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d013      	beq.n	800572e <checkAktifCalisma+0x1622>
 8005706:	4b2f      	ldr	r3, [pc, #188]	@ (80057c4 <checkAktifCalisma+0x16b8>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f083 0301 	eor.w	r3, r3, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <checkAktifCalisma+0x1622>
 8005714:	4b2c      	ldr	r3, [pc, #176]	@ (80057c8 <checkAktifCalisma+0x16bc>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	f083 0301 	eor.w	r3, r3, #1
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <checkAktifCalisma+0x1622>

					hataVar=0;
 8005722:	4b23      	ldr	r3, [pc, #140]	@ (80057b0 <checkAktifCalisma+0x16a4>)
 8005724:	2200      	movs	r2, #0
 8005726:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005728:	2007      	movs	r0, #7
 800572a:	f7fe fae5 	bl	8003cf8 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800572e:	4b20      	ldr	r3, [pc, #128]	@ (80057b0 <checkAktifCalisma+0x16a4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02a      	beq.n	800578c <checkAktifCalisma+0x1680>
 8005736:	4b1f      	ldr	r3, [pc, #124]	@ (80057b4 <checkAktifCalisma+0x16a8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f083 0301 	eor.w	r3, r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d023      	beq.n	800578c <checkAktifCalisma+0x1680>
 8005744:	4b1c      	ldr	r3, [pc, #112]	@ (80057b8 <checkAktifCalisma+0x16ac>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01f      	beq.n	800578c <checkAktifCalisma+0x1680>
 800574c:	4b1b      	ldr	r3, [pc, #108]	@ (80057bc <checkAktifCalisma+0x16b0>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	f083 0301 	eor.w	r3, r3, #1
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800575a:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <checkAktifCalisma+0x16b4>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f083 0301 	eor.w	r3, r3, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <checkAktifCalisma+0x1680>
 8005768:	4b16      	ldr	r3, [pc, #88]	@ (80057c4 <checkAktifCalisma+0x16b8>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f083 0301 	eor.w	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <checkAktifCalisma+0x1680>
 8005776:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <checkAktifCalisma+0x16bc>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f083 0301 	eor.w	r3, r3, #1
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005784:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <checkAktifCalisma+0x16c0>)
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 800578a:	e009      	b.n	80057a0 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <checkAktifCalisma+0x16ac>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f083 0301 	eor.w	r3, r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 800579a:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <checkAktifCalisma+0x16c0>)
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20001112 	.word	0x20001112
 80057a8:	20001094 	.word	0x20001094
 80057ac:	200010a8 	.word	0x200010a8
 80057b0:	20001111 	.word	0x20001111
 80057b4:	2000110c 	.word	0x2000110c
 80057b8:	2000110d 	.word	0x2000110d
 80057bc:	2000111a 	.word	0x2000111a
 80057c0:	2000111b 	.word	0x2000111b
 80057c4:	2000111c 	.word	0x2000111c
 80057c8:	2000110b 	.word	0x2000110b
 80057cc:	20001120 	.word	0x20001120

080057d0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80057d4:	4b8b      	ldr	r3, [pc, #556]	@ (8005a04 <checkDemoModCalisma+0x234>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f040 81c4 	bne.w	8005b66 <checkDemoModCalisma+0x396>
 80057de:	4b8a      	ldr	r3, [pc, #552]	@ (8005a08 <checkDemoModCalisma+0x238>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 81bf 	beq.w	8005b66 <checkDemoModCalisma+0x396>
 80057e8:	4b88      	ldr	r3, [pc, #544]	@ (8005a0c <checkDemoModCalisma+0x23c>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 81ba 	bne.w	8005b66 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057f2:	2102      	movs	r1, #2
 80057f4:	4886      	ldr	r0, [pc, #536]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80057f6:	f004 fdc1 	bl	800a37c <HAL_GPIO_ReadPin>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11d      	bne.n	800583c <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005800:	4b84      	ldr	r3, [pc, #528]	@ (8005a14 <checkDemoModCalisma+0x244>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f083 0301 	eor.w	r3, r3, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 800580e:	4b82      	ldr	r3, [pc, #520]	@ (8005a18 <checkDemoModCalisma+0x248>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	f083 0301 	eor.w	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00f      	beq.n	800583c <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 800581c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a1c <checkDemoModCalisma+0x24c>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f083 0301 	eor.w	r3, r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800582a:	2201      	movs	r2, #1
 800582c:	2104      	movs	r1, #4
 800582e:	487c      	ldr	r0, [pc, #496]	@ (8005a20 <checkDemoModCalisma+0x250>)
 8005830:	f004 fdbb 	bl	800a3aa <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005834:	4b7b      	ldr	r3, [pc, #492]	@ (8005a24 <checkDemoModCalisma+0x254>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	e00e      	b.n	800585a <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800583c:	2102      	movs	r1, #2
 800583e:	4874      	ldr	r0, [pc, #464]	@ (8005a10 <checkDemoModCalisma+0x240>)
 8005840:	f004 fd9c 	bl	800a37c <HAL_GPIO_ReadPin>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800584a:	2200      	movs	r2, #0
 800584c:	2104      	movs	r1, #4
 800584e:	4874      	ldr	r0, [pc, #464]	@ (8005a20 <checkDemoModCalisma+0x250>)
 8005850:	f004 fdab 	bl	800a3aa <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005854:	4b73      	ldr	r3, [pc, #460]	@ (8005a24 <checkDemoModCalisma+0x254>)
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800585a:	4b72      	ldr	r3, [pc, #456]	@ (8005a24 <checkDemoModCalisma+0x254>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <checkDemoModCalisma+0xaa>
 8005862:	4b6d      	ldr	r3, [pc, #436]	@ (8005a18 <checkDemoModCalisma+0x248>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d107      	bne.n	800587a <checkDemoModCalisma+0xaa>
 800586a:	4b6c      	ldr	r3, [pc, #432]	@ (8005a1c <checkDemoModCalisma+0x24c>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <checkDemoModCalisma+0xaa>
 8005872:	4b68      	ldr	r3, [pc, #416]	@ (8005a14 <checkDemoModCalisma+0x244>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800587a:	2201      	movs	r2, #1
 800587c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005880:	4867      	ldr	r0, [pc, #412]	@ (8005a20 <checkDemoModCalisma+0x250>)
 8005882:	f004 fd92 	bl	800a3aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005886:	2201      	movs	r2, #1
 8005888:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800588c:	4864      	ldr	r0, [pc, #400]	@ (8005a20 <checkDemoModCalisma+0x250>)
 800588e:	f004 fd8c 	bl	800a3aa <HAL_GPIO_WritePin>
 8005892:	e00b      	b.n	80058ac <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800589a:	4861      	ldr	r0, [pc, #388]	@ (8005a20 <checkDemoModCalisma+0x250>)
 800589c:	f004 fd85 	bl	800a3aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058a6:	485e      	ldr	r0, [pc, #376]	@ (8005a20 <checkDemoModCalisma+0x250>)
 80058a8:	f004 fd7f 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058ac:	2102      	movs	r1, #2
 80058ae:	4858      	ldr	r0, [pc, #352]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80058b0:	f004 fd64 	bl	800a37c <HAL_GPIO_ReadPin>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10d      	bne.n	80058d6 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80058ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058be:	4854      	ldr	r0, [pc, #336]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80058c0:	f004 fd5c 	bl	800a37c <HAL_GPIO_ReadPin>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 80058ca:	4b56      	ldr	r3, [pc, #344]	@ (8005a24 <checkDemoModCalisma+0x254>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f083 0301 	eor.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058d6:	2102      	movs	r1, #2
 80058d8:	484d      	ldr	r0, [pc, #308]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80058da:	f004 fd4f 	bl	800a37c <HAL_GPIO_ReadPin>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d125      	bne.n	8005930 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80058e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058e8:	4849      	ldr	r0, [pc, #292]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80058ea:	f004 fd47 	bl	800a37c <HAL_GPIO_ReadPin>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d11d      	bne.n	8005930 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 80058f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a24 <checkDemoModCalisma+0x254>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f083 0301 	eor.w	r3, r3, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005902:	4b44      	ldr	r3, [pc, #272]	@ (8005a14 <checkDemoModCalisma+0x244>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f083 0301 	eor.w	r3, r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005910:	4b42      	ldr	r3, [pc, #264]	@ (8005a1c <checkDemoModCalisma+0x24c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	f083 0301 	eor.w	r3, r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800591e:	2201      	movs	r2, #1
 8005920:	2120      	movs	r1, #32
 8005922:	483b      	ldr	r0, [pc, #236]	@ (8005a10 <checkDemoModCalisma+0x240>)
 8005924:	f004 fd41 	bl	800a3aa <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005928:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <checkDemoModCalisma+0x248>)
 800592a:	2201      	movs	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e007      	b.n	8005940 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	2120      	movs	r1, #32
 8005934:	4836      	ldr	r0, [pc, #216]	@ (8005a10 <checkDemoModCalisma+0x240>)
 8005936:	f004 fd38 	bl	800a3aa <HAL_GPIO_WritePin>
					demoDevYukari=0;
 800593a:	4b37      	ldr	r3, [pc, #220]	@ (8005a18 <checkDemoModCalisma+0x248>)
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005940:	2102      	movs	r1, #2
 8005942:	4833      	ldr	r0, [pc, #204]	@ (8005a10 <checkDemoModCalisma+0x240>)
 8005944:	f004 fd1a 	bl	800a37c <HAL_GPIO_ReadPin>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d125      	bne.n	800599a <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800594e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005952:	482f      	ldr	r0, [pc, #188]	@ (8005a10 <checkDemoModCalisma+0x240>)
 8005954:	f004 fd12 	bl	800a37c <HAL_GPIO_ReadPin>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 800595e:	4b31      	ldr	r3, [pc, #196]	@ (8005a24 <checkDemoModCalisma+0x254>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	f083 0301 	eor.w	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 800596c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a18 <checkDemoModCalisma+0x248>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f083 0301 	eor.w	r3, r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00f      	beq.n	800599a <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 800597a:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <checkDemoModCalisma+0x244>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f083 0301 	eor.w	r3, r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005988:	2201      	movs	r2, #1
 800598a:	2110      	movs	r1, #16
 800598c:	4820      	ldr	r0, [pc, #128]	@ (8005a10 <checkDemoModCalisma+0x240>)
 800598e:	f004 fd0c 	bl	800a3aa <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005992:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <checkDemoModCalisma+0x24c>)
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e007      	b.n	80059aa <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800599a:	2200      	movs	r2, #0
 800599c:	2110      	movs	r1, #16
 800599e:	481c      	ldr	r0, [pc, #112]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80059a0:	f004 fd03 	bl	800a3aa <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 80059a4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a1c <checkDemoModCalisma+0x24c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059aa:	2104      	movs	r1, #4
 80059ac:	4818      	ldr	r0, [pc, #96]	@ (8005a10 <checkDemoModCalisma+0x240>)
 80059ae:	f004 fce5 	bl	800a37c <HAL_GPIO_ReadPin>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d139      	bne.n	8005a2c <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 80059b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a24 <checkDemoModCalisma+0x254>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f083 0301 	eor.w	r3, r3, #1
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d032      	beq.n	8005a2c <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 80059c6:	4b15      	ldr	r3, [pc, #84]	@ (8005a1c <checkDemoModCalisma+0x24c>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f083 0301 	eor.w	r3, r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02b      	beq.n	8005a2c <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 80059d4:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <checkDemoModCalisma+0x248>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f083 0301 	eor.w	r3, r3, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d024      	beq.n	8005a2c <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80059e2:	2201      	movs	r2, #1
 80059e4:	2102      	movs	r1, #2
 80059e6:	480e      	ldr	r0, [pc, #56]	@ (8005a20 <checkDemoModCalisma+0x250>)
 80059e8:	f004 fcdf 	bl	800a3aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80059ec:	2201      	movs	r2, #1
 80059ee:	2101      	movs	r1, #1
 80059f0:	480b      	ldr	r0, [pc, #44]	@ (8005a20 <checkDemoModCalisma+0x250>)
 80059f2:	f004 fcda 	bl	800a3aa <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 80059f6:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <checkDemoModCalisma+0x244>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <checkDemoModCalisma+0x258>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e027      	b.n	8005a54 <checkDemoModCalisma+0x284>
 8005a04:	200010da 	.word	0x200010da
 8005a08:	2000110e 	.word	0x2000110e
 8005a0c:	200010d9 	.word	0x200010d9
 8005a10:	40011000 	.word	0x40011000
 8005a14:	20001115 	.word	0x20001115
 8005a18:	20001116 	.word	0x20001116
 8005a1c:	20001117 	.word	0x20001117
 8005a20:	40010c00 	.word	0x40010c00
 8005a24:	20001114 	.word	0x20001114
 8005a28:	200010fb 	.word	0x200010fb
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	486d      	ldr	r0, [pc, #436]	@ (8005be4 <checkDemoModCalisma+0x414>)
 8005a30:	f004 fca4 	bl	800a37c <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d10c      	bne.n	8005a54 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	486a      	ldr	r0, [pc, #424]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005a40:	f004 fcb3 	bl	800a3aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2101      	movs	r1, #1
 8005a48:	4867      	ldr	r0, [pc, #412]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005a4a:	f004 fcae 	bl	800a3aa <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005a4e:	4b67      	ldr	r3, [pc, #412]	@ (8005bec <checkDemoModCalisma+0x41c>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005a54:	2104      	movs	r1, #4
 8005a56:	4863      	ldr	r0, [pc, #396]	@ (8005be4 <checkDemoModCalisma+0x414>)
 8005a58:	f004 fc90 	bl	800a37c <HAL_GPIO_ReadPin>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10d      	bne.n	8005a7e <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a62:	2201      	movs	r2, #1
 8005a64:	2180      	movs	r1, #128	@ 0x80
 8005a66:	4862      	ldr	r0, [pc, #392]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005a68:	f004 fc9f 	bl	800a3aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	2120      	movs	r1, #32
 8005a70:	485f      	ldr	r0, [pc, #380]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005a72:	f004 fc9a 	bl	800a3aa <HAL_GPIO_WritePin>
					timer3 = millis;
 8005a76:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf4 <checkDemoModCalisma+0x424>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8005bf8 <checkDemoModCalisma+0x428>)
 8005a7c:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf4 <checkDemoModCalisma+0x424>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf8 <checkDemoModCalisma+0x428>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d909      	bls.n	8005aa0 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	@ 0x80
 8005a90:	4857      	ldr	r0, [pc, #348]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005a92:	f004 fc8a 	bl	800a3aa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005a96:	2200      	movs	r2, #0
 8005a98:	2120      	movs	r1, #32
 8005a9a:	4855      	ldr	r0, [pc, #340]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005a9c:	f004 fc85 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005aa0:	2102      	movs	r1, #2
 8005aa2:	4850      	ldr	r0, [pc, #320]	@ (8005be4 <checkDemoModCalisma+0x414>)
 8005aa4:	f004 fc6a 	bl	800a37c <HAL_GPIO_ReadPin>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d108      	bne.n	8005ac0 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005aae:	2201      	movs	r2, #1
 8005ab0:	2140      	movs	r1, #64	@ 0x40
 8005ab2:	484f      	ldr	r0, [pc, #316]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005ab4:	f004 fc79 	bl	800a3aa <HAL_GPIO_WritePin>
					timer3 = millis;
 8005ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf4 <checkDemoModCalisma+0x424>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a4e      	ldr	r2, [pc, #312]	@ (8005bf8 <checkDemoModCalisma+0x428>)
 8005abe:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8005bf4 <checkDemoModCalisma+0x424>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8005bf8 <checkDemoModCalisma+0x428>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d904      	bls.n	8005ad8 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2140      	movs	r1, #64	@ 0x40
 8005ad2:	4847      	ldr	r0, [pc, #284]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005ad4:	f004 fc69 	bl	800a3aa <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005ad8:	4b48      	ldr	r3, [pc, #288]	@ (8005bfc <checkDemoModCalisma+0x42c>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d024      	beq.n	8005b2a <checkDemoModCalisma+0x35a>
 8005ae0:	4b47      	ldr	r3, [pc, #284]	@ (8005c00 <checkDemoModCalisma+0x430>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005ae8:	4b46      	ldr	r3, [pc, #280]	@ (8005c04 <checkDemoModCalisma+0x434>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	4b44      	ldr	r3, [pc, #272]	@ (8005c04 <checkDemoModCalisma+0x434>)
 8005af2:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005af4:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <checkDemoModCalisma+0x438>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2bff      	cmp	r3, #255	@ 0xff
 8005afa:	d108      	bne.n	8005b0e <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005afc:	4b42      	ldr	r3, [pc, #264]	@ (8005c08 <checkDemoModCalisma+0x438>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005b02:	4b42      	ldr	r3, [pc, #264]	@ (8005c0c <checkDemoModCalisma+0x43c>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b40      	ldr	r3, [pc, #256]	@ (8005c0c <checkDemoModCalisma+0x43c>)
 8005b0c:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <checkDemoModCalisma+0x434>)
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	4b3f      	ldr	r3, [pc, #252]	@ (8005c10 <checkDemoModCalisma+0x440>)
 8005b14:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005b16:	4b3f      	ldr	r3, [pc, #252]	@ (8005c14 <checkDemoModCalisma+0x444>)
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c10 <checkDemoModCalisma+0x440>)
 8005b1c:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c18 <checkDemoModCalisma+0x448>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005b24:	4b36      	ldr	r3, [pc, #216]	@ (8005c00 <checkDemoModCalisma+0x430>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c1c <checkDemoModCalisma+0x44c>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d156      	bne.n	8005be0 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005b32:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <checkDemoModCalisma+0x450>)
 8005b34:	2101      	movs	r1, #1
 8005b36:	2002      	movs	r0, #2
 8005b38:	f003 f8f6 	bl	8008d28 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005b3c:	4a39      	ldr	r2, [pc, #228]	@ (8005c24 <checkDemoModCalisma+0x454>)
 8005b3e:	2101      	movs	r1, #1
 8005b40:	2001      	movs	r0, #1
 8005b42:	f003 f8f1 	bl	8008d28 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005b46:	4b2f      	ldr	r3, [pc, #188]	@ (8005c04 <checkDemoModCalisma+0x434>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	4936      	ldr	r1, [pc, #216]	@ (8005c28 <checkDemoModCalisma+0x458>)
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f007 fc40 	bl	800d3d4 <itoa>
					lcd_print(2,11,snum);
 8005b54:	4a34      	ldr	r2, [pc, #208]	@ (8005c28 <checkDemoModCalisma+0x458>)
 8005b56:	210b      	movs	r1, #11
 8005b58:	2002      	movs	r0, #2
 8005b5a:	f003 f8e5 	bl	8008d28 <lcd_print>
					mesajYazildi=1;
 8005b5e:	4b33      	ldr	r3, [pc, #204]	@ (8005c2c <checkDemoModCalisma+0x45c>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005b64:	e03c      	b.n	8005be0 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005b66:	4b32      	ldr	r3, [pc, #200]	@ (8005c30 <checkDemoModCalisma+0x460>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d003      	beq.n	8005b76 <checkDemoModCalisma+0x3a6>
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8005c1c <checkDemoModCalisma+0x44c>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d134      	bne.n	8005be0 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005b76:	2200      	movs	r2, #0
 8005b78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b7c:	481a      	ldr	r0, [pc, #104]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005b7e:	f004 fc14 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b82:	2200      	movs	r2, #0
 8005b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b88:	4817      	ldr	r0, [pc, #92]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005b8a:	f004 fc0e 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2104      	movs	r1, #4
 8005b92:	4815      	ldr	r0, [pc, #84]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005b94:	f004 fc09 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	4812      	ldr	r0, [pc, #72]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005b9e:	f004 fc04 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4810      	ldr	r0, [pc, #64]	@ (8005be8 <checkDemoModCalisma+0x418>)
 8005ba8:	f004 fbff 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005bac:	2200      	movs	r2, #0
 8005bae:	2120      	movs	r1, #32
 8005bb0:	480c      	ldr	r0, [pc, #48]	@ (8005be4 <checkDemoModCalisma+0x414>)
 8005bb2:	f004 fbfa 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2110      	movs	r1, #16
 8005bba:	480a      	ldr	r0, [pc, #40]	@ (8005be4 <checkDemoModCalisma+0x414>)
 8005bbc:	f004 fbf5 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2180      	movs	r1, #128	@ 0x80
 8005bc4:	480a      	ldr	r0, [pc, #40]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005bc6:	f004 fbf0 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2140      	movs	r1, #64	@ 0x40
 8005bce:	4808      	ldr	r0, [pc, #32]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005bd0:	f004 fbeb 	bl	800a3aa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2120      	movs	r1, #32
 8005bd8:	4805      	ldr	r0, [pc, #20]	@ (8005bf0 <checkDemoModCalisma+0x420>)
 8005bda:	f004 fbe6 	bl	800a3aa <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005bde:	e7ff      	b.n	8005be0 <checkDemoModCalisma+0x410>
 8005be0:	bf00      	nop
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40011000 	.word	0x40011000
 8005be8:	40010c00 	.word	0x40010c00
 8005bec:	20001115 	.word	0x20001115
 8005bf0:	40010800 	.word	0x40010800
 8005bf4:	20001094 	.word	0x20001094
 8005bf8:	200010a4 	.word	0x200010a4
 8005bfc:	20001114 	.word	0x20001114
 8005c00:	200010fb 	.word	0x200010fb
 8005c04:	200010b5 	.word	0x200010b5
 8005c08:	200010b4 	.word	0x200010b4
 8005c0c:	200010b6 	.word	0x200010b6
 8005c10:	20000fec 	.word	0x20000fec
 8005c14:	200010b7 	.word	0x200010b7
 8005c18:	200010e9 	.word	0x200010e9
 8005c1c:	200010d9 	.word	0x200010d9
 8005c20:	0800e2e0 	.word	0x0800e2e0
 8005c24:	0800e2ec 	.word	0x0800e2ec
 8005c28:	2000105c 	.word	0x2000105c
 8005c2c:	200010f1 	.word	0x200010f1
 8005c30:	200010da 	.word	0x200010da

08005c34 <mainLoop>:

void mainLoop() {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005c38:	f7fe f8b6 	bl	8003da8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	488b      	ldr	r0, [pc, #556]	@ (8005e6c <mainLoop+0x238>)
 8005c40:	f004 fb9c 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d136      	bne.n	8005cb8 <mainLoop+0x84>
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	4888      	ldr	r0, [pc, #544]	@ (8005e70 <mainLoop+0x23c>)
 8005c4e:	f004 fb95 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d12f      	bne.n	8005cb8 <mainLoop+0x84>
 8005c58:	2102      	movs	r1, #2
 8005c5a:	4884      	ldr	r0, [pc, #528]	@ (8005e6c <mainLoop+0x238>)
 8005c5c:	f004 fb8e 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d128      	bne.n	8005cb8 <mainLoop+0x84>
 8005c66:	2104      	movs	r1, #4
 8005c68:	4880      	ldr	r0, [pc, #512]	@ (8005e6c <mainLoop+0x238>)
 8005c6a:	f004 fb87 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d121      	bne.n	8005cb8 <mainLoop+0x84>
 8005c74:	2108      	movs	r1, #8
 8005c76:	487d      	ldr	r0, [pc, #500]	@ (8005e6c <mainLoop+0x238>)
 8005c78:	f004 fb80 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d11a      	bne.n	8005cb8 <mainLoop+0x84>
 8005c82:	2180      	movs	r1, #128	@ 0x80
 8005c84:	487a      	ldr	r0, [pc, #488]	@ (8005e70 <mainLoop+0x23c>)
 8005c86:	f004 fb79 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d113      	bne.n	8005cb8 <mainLoop+0x84>
 8005c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c94:	4876      	ldr	r0, [pc, #472]	@ (8005e70 <mainLoop+0x23c>)
 8005c96:	f004 fb71 	bl	800a37c <HAL_GPIO_ReadPin>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10b      	bne.n	8005cb8 <mainLoop+0x84>
 8005ca0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ca4:	4872      	ldr	r0, [pc, #456]	@ (8005e70 <mainLoop+0x23c>)
 8005ca6:	f004 fb69 	bl	800a37c <HAL_GPIO_ReadPin>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d103      	bne.n	8005cb8 <mainLoop+0x84>
			butonKontrol=0;
 8005cb0:	4b70      	ldr	r3, [pc, #448]	@ (8005e74 <mainLoop+0x240>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e003      	b.n	8005cc0 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8005e78 <mainLoop+0x244>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a6f      	ldr	r2, [pc, #444]	@ (8005e7c <mainLoop+0x248>)
 8005cbe:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005cc0:	f7fe f924 	bl	8003f0c <buttonCheck>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d103      	bne.n	8005cd2 <mainLoop+0x9e>
			backLightTimer = millis;
 8005cca:	4b6b      	ldr	r3, [pc, #428]	@ (8005e78 <mainLoop+0x244>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6b      	ldr	r2, [pc, #428]	@ (8005e7c <mainLoop+0x248>)
 8005cd0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8005e80 <mainLoop+0x24c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <mainLoop+0xb2>
			hafizaYaz = 0;
 8005cda:	4b69      	ldr	r3, [pc, #420]	@ (8005e80 <mainLoop+0x24c>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f7fa fce7 	bl	80006b4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005ce6:	4b67      	ldr	r3, [pc, #412]	@ (8005e84 <mainLoop+0x250>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d043      	beq.n	8005d7c <mainLoop+0x148>
 8005cf4:	4864      	ldr	r0, [pc, #400]	@ (8005e88 <mainLoop+0x254>)
 8005cf6:	f005 f95d 	bl	800afb4 <HAL_I2C_GetState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d13d      	bne.n	8005d7c <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005d00:	4b62      	ldr	r3, [pc, #392]	@ (8005e8c <mainLoop+0x258>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f083 0301 	eor.w	r3, r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d028      	beq.n	8005d60 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005d0e:	4a60      	ldr	r2, [pc, #384]	@ (8005e90 <mainLoop+0x25c>)
 8005d10:	2101      	movs	r1, #1
 8005d12:	2001      	movs	r0, #1
 8005d14:	f003 f808 	bl	8008d28 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005d18:	4a5e      	ldr	r2, [pc, #376]	@ (8005e94 <mainLoop+0x260>)
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	2002      	movs	r0, #2
 8005d1e:	f003 f803 	bl	8008d28 <lcd_print>
			  HAL_Delay(1000);
 8005d22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d26:	f003 fd59 	bl	80097dc <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d2a:	bf00      	nop
 8005d2c:	4856      	ldr	r0, [pc, #344]	@ (8005e88 <mainLoop+0x254>)
 8005d2e:	f005 f94e 	bl	800afce <HAL_I2C_GetError>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d0f9      	beq.n	8005d2c <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d38:	e003      	b.n	8005d42 <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005d3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d3e:	f003 fd4d 	bl	80097dc <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d42:	4851      	ldr	r0, [pc, #324]	@ (8005e88 <mainLoop+0x254>)
 8005d44:	f005 f936 	bl	800afb4 <HAL_I2C_GetState>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d1f5      	bne.n	8005d3a <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005d4e:	4a52      	ldr	r2, [pc, #328]	@ (8005e98 <mainLoop+0x264>)
 8005d50:	2101      	movs	r1, #1
 8005d52:	2002      	movs	r0, #2
 8005d54:	f002 ffe8 	bl	8008d28 <lcd_print>

			  ilkOkuma=1;
 8005d58:	4b4c      	ldr	r3, [pc, #304]	@ (8005e8c <mainLoop+0x258>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e006      	b.n	8005d6e <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005d60:	4a4e      	ldr	r2, [pc, #312]	@ (8005e9c <mainLoop+0x268>)
 8005d62:	2101      	movs	r1, #1
 8005d64:	2002      	movs	r0, #2
 8005d66:	f002 ffdf 	bl	8008d28 <lcd_print>
			  lcd_clear();
 8005d6a:	f003 f809 	bl	8008d80 <lcd_clear>
		  }

		  lcd_clear();
 8005d6e:	f003 f807 	bl	8008d80 <lcd_clear>

		  eepromKontrol();
 8005d72:	f7fa fa5f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005d76:	4b43      	ldr	r3, [pc, #268]	@ (8005e84 <mainLoop+0x250>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005d7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <mainLoop+0x26c>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11c      	bne.n	8005dbe <mainLoop+0x18a>
 8005d84:	4b47      	ldr	r3, [pc, #284]	@ (8005ea4 <mainLoop+0x270>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f083 0301 	eor.w	r3, r3, #1
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <mainLoop+0x18a>
 8005d92:	4b45      	ldr	r3, [pc, #276]	@ (8005ea8 <mainLoop+0x274>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d111      	bne.n	8005dbe <mainLoop+0x18a>
			lcd_clear();
 8005d9a:	f002 fff1 	bl	8008d80 <lcd_clear>
			HAL_Delay(10);
 8005d9e:	200a      	movs	r0, #10
 8005da0:	f003 fd1c 	bl	80097dc <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005da4:	4a41      	ldr	r2, [pc, #260]	@ (8005eac <mainLoop+0x278>)
 8005da6:	2101      	movs	r1, #1
 8005da8:	2001      	movs	r0, #1
 8005daa:	f002 ffbd 	bl	8008d28 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005dae:	4a40      	ldr	r2, [pc, #256]	@ (8005eb0 <mainLoop+0x27c>)
 8005db0:	2101      	movs	r1, #1
 8005db2:	2002      	movs	r0, #2
 8005db4:	f002 ffb8 	bl	8008d28 <lcd_print>
			mesajYazildi=1;
 8005db8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ea4 <mainLoop+0x270>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005dbe:	4b38      	ldr	r3, [pc, #224]	@ (8005ea0 <mainLoop+0x26c>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d112      	bne.n	8005dec <mainLoop+0x1b8>
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4828      	ldr	r0, [pc, #160]	@ (8005e6c <mainLoop+0x238>)
 8005dca:	f004 fad7 	bl	800a37c <HAL_GPIO_ReadPin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d10b      	bne.n	8005dec <mainLoop+0x1b8>
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	4825      	ldr	r0, [pc, #148]	@ (8005e6c <mainLoop+0x238>)
 8005dd8:	f004 fad0 	bl	800a37c <HAL_GPIO_ReadPin>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d104      	bne.n	8005dec <mainLoop+0x1b8>
			menuGiris=1;
 8005de2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea0 <mainLoop+0x26c>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005de8:	f002 ffca 	bl	8008d80 <lcd_clear>
		}

		if(menuGiris==1) {
 8005dec:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea0 <mainLoop+0x26c>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <mainLoop+0x1c4>
			menu();
 8005df4:	f7fb faa8 	bl	8001348 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005df8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005dfc:	481c      	ldr	r0, [pc, #112]	@ (8005e70 <mainLoop+0x23c>)
 8005dfe:	f004 faec 	bl	800a3da <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005e02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e06:	482b      	ldr	r0, [pc, #172]	@ (8005eb4 <mainLoop+0x280>)
 8005e08:	f004 fab8 	bl	800a37c <HAL_GPIO_ReadPin>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <mainLoop+0x1f4>
 8005e12:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <mainLoop+0x284>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f083 0301 	eor.w	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <mainLoop+0x1f4>
			stopVar=1;
 8005e20:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <mainLoop+0x288>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e002      	b.n	8005e2e <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8005e28:	4b24      	ldr	r3, [pc, #144]	@ (8005ebc <mainLoop+0x288>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8005e2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e32:	4820      	ldr	r0, [pc, #128]	@ (8005eb4 <mainLoop+0x280>)
 8005e34:	f004 faa2 	bl	800a37c <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <mainLoop+0x21a>
 8005e3e:	4b20      	ldr	r3, [pc, #128]	@ (8005ec0 <mainLoop+0x28c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <mainLoop+0x21a>
			EmnStopVar=1;
 8005e46:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec4 <mainLoop+0x290>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e002      	b.n	8005e54 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <mainLoop+0x290>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005e54:	f7fe f88e 	bl	8003f74 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005e58:	f7fe f8c0 	bl	8003fdc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005e5c:	f7fe f904 	bl	8004068 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005e60:	f7fe f954 	bl	800410c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005e64:	f7ff fcb4 	bl	80057d0 <checkDemoModCalisma>
		checkLCDBacklight();
 8005e68:	e6e6      	b.n	8005c38 <mainLoop+0x4>
 8005e6a:	bf00      	nop
 8005e6c:	40010800 	.word	0x40010800
 8005e70:	40011000 	.word	0x40011000
 8005e74:	200010ec 	.word	0x200010ec
 8005e78:	20001094 	.word	0x20001094
 8005e7c:	200010b0 	.word	0x200010b0
 8005e80:	200010e9 	.word	0x200010e9
 8005e84:	200010ea 	.word	0x200010ea
 8005e88:	2000193c 	.word	0x2000193c
 8005e8c:	200010eb 	.word	0x200010eb
 8005e90:	20000178 	.word	0x20000178
 8005e94:	20001874 	.word	0x20001874
 8005e98:	20001888 	.word	0x20001888
 8005e9c:	2000189c 	.word	0x2000189c
 8005ea0:	200010d9 	.word	0x200010d9
 8005ea4:	200010f1 	.word	0x200010f1
 8005ea8:	200010da 	.word	0x200010da
 8005eac:	200000c4 	.word	0x200000c4
 8005eb0:	200000d8 	.word	0x200000d8
 8005eb4:	40010c00 	.word	0x40010c00
 8005eb8:	20001111 	.word	0x20001111
 8005ebc:	2000110e 	.word	0x2000110e
 8005ec0:	20001120 	.word	0x20001120
 8005ec4:	20001121 	.word	0x20001121

08005ec8 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005ec8:	b5b0      	push	{r4, r5, r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 853d 	bne.w	8006954 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005eda:	4ac7      	ldr	r2, [pc, #796]	@ (80061f8 <loadMenuTexts+0x330>)
 8005edc:	4bc7      	ldr	r3, [pc, #796]	@ (80061fc <loadMenuTexts+0x334>)
 8005ede:	4614      	mov	r4, r2
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	6828      	ldr	r0, [r5, #0]
 8005ee4:	6869      	ldr	r1, [r5, #4]
 8005ee6:	68aa      	ldr	r2, [r5, #8]
 8005ee8:	68eb      	ldr	r3, [r5, #12]
 8005eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eec:	7c2b      	ldrb	r3, [r5, #16]
 8005eee:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005ef0:	4ac3      	ldr	r2, [pc, #780]	@ (8006200 <loadMenuTexts+0x338>)
 8005ef2:	4bc4      	ldr	r3, [pc, #784]	@ (8006204 <loadMenuTexts+0x33c>)
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	6828      	ldr	r0, [r5, #0]
 8005efa:	6869      	ldr	r1, [r5, #4]
 8005efc:	68aa      	ldr	r2, [r5, #8]
 8005efe:	68eb      	ldr	r3, [r5, #12]
 8005f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f02:	7c2b      	ldrb	r3, [r5, #16]
 8005f04:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005f06:	4ac0      	ldr	r2, [pc, #768]	@ (8006208 <loadMenuTexts+0x340>)
 8005f08:	4bc0      	ldr	r3, [pc, #768]	@ (800620c <loadMenuTexts+0x344>)
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	461d      	mov	r5, r3
 8005f0e:	6828      	ldr	r0, [r5, #0]
 8005f10:	6869      	ldr	r1, [r5, #4]
 8005f12:	68aa      	ldr	r2, [r5, #8]
 8005f14:	68eb      	ldr	r3, [r5, #12]
 8005f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f18:	7c2b      	ldrb	r3, [r5, #16]
 8005f1a:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005f1c:	4abc      	ldr	r2, [pc, #752]	@ (8006210 <loadMenuTexts+0x348>)
 8005f1e:	4bbd      	ldr	r3, [pc, #756]	@ (8006214 <loadMenuTexts+0x34c>)
 8005f20:	4614      	mov	r4, r2
 8005f22:	461d      	mov	r5, r3
 8005f24:	6828      	ldr	r0, [r5, #0]
 8005f26:	6869      	ldr	r1, [r5, #4]
 8005f28:	68aa      	ldr	r2, [r5, #8]
 8005f2a:	68eb      	ldr	r3, [r5, #12]
 8005f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f2e:	7c2b      	ldrb	r3, [r5, #16]
 8005f30:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005f32:	4ab9      	ldr	r2, [pc, #740]	@ (8006218 <loadMenuTexts+0x350>)
 8005f34:	4bb9      	ldr	r3, [pc, #740]	@ (800621c <loadMenuTexts+0x354>)
 8005f36:	4614      	mov	r4, r2
 8005f38:	461d      	mov	r5, r3
 8005f3a:	6828      	ldr	r0, [r5, #0]
 8005f3c:	6869      	ldr	r1, [r5, #4]
 8005f3e:	68aa      	ldr	r2, [r5, #8]
 8005f40:	68eb      	ldr	r3, [r5, #12]
 8005f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f44:	7c2b      	ldrb	r3, [r5, #16]
 8005f46:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005f48:	4ab5      	ldr	r2, [pc, #724]	@ (8006220 <loadMenuTexts+0x358>)
 8005f4a:	4bb6      	ldr	r3, [pc, #728]	@ (8006224 <loadMenuTexts+0x35c>)
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	461d      	mov	r5, r3
 8005f50:	6828      	ldr	r0, [r5, #0]
 8005f52:	6869      	ldr	r1, [r5, #4]
 8005f54:	68aa      	ldr	r2, [r5, #8]
 8005f56:	68eb      	ldr	r3, [r5, #12]
 8005f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5a:	7c2b      	ldrb	r3, [r5, #16]
 8005f5c:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005f5e:	4ab2      	ldr	r2, [pc, #712]	@ (8006228 <loadMenuTexts+0x360>)
 8005f60:	4bb2      	ldr	r3, [pc, #712]	@ (800622c <loadMenuTexts+0x364>)
 8005f62:	4614      	mov	r4, r2
 8005f64:	461d      	mov	r5, r3
 8005f66:	6828      	ldr	r0, [r5, #0]
 8005f68:	6869      	ldr	r1, [r5, #4]
 8005f6a:	68aa      	ldr	r2, [r5, #8]
 8005f6c:	68eb      	ldr	r3, [r5, #12]
 8005f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f70:	7c2b      	ldrb	r3, [r5, #16]
 8005f72:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005f74:	4aae      	ldr	r2, [pc, #696]	@ (8006230 <loadMenuTexts+0x368>)
 8005f76:	4baf      	ldr	r3, [pc, #700]	@ (8006234 <loadMenuTexts+0x36c>)
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	6828      	ldr	r0, [r5, #0]
 8005f7e:	6869      	ldr	r1, [r5, #4]
 8005f80:	68aa      	ldr	r2, [r5, #8]
 8005f82:	68eb      	ldr	r3, [r5, #12]
 8005f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f86:	7c2b      	ldrb	r3, [r5, #16]
 8005f88:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005f8a:	4aab      	ldr	r2, [pc, #684]	@ (8006238 <loadMenuTexts+0x370>)
 8005f8c:	4bab      	ldr	r3, [pc, #684]	@ (800623c <loadMenuTexts+0x374>)
 8005f8e:	4614      	mov	r4, r2
 8005f90:	461d      	mov	r5, r3
 8005f92:	6828      	ldr	r0, [r5, #0]
 8005f94:	6869      	ldr	r1, [r5, #4]
 8005f96:	68aa      	ldr	r2, [r5, #8]
 8005f98:	68eb      	ldr	r3, [r5, #12]
 8005f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9c:	7c2b      	ldrb	r3, [r5, #16]
 8005f9e:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8005fa0:	4aa7      	ldr	r2, [pc, #668]	@ (8006240 <loadMenuTexts+0x378>)
 8005fa2:	4ba8      	ldr	r3, [pc, #672]	@ (8006244 <loadMenuTexts+0x37c>)
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	6828      	ldr	r0, [r5, #0]
 8005faa:	6869      	ldr	r1, [r5, #4]
 8005fac:	68aa      	ldr	r2, [r5, #8]
 8005fae:	68eb      	ldr	r3, [r5, #12]
 8005fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb2:	7c2b      	ldrb	r3, [r5, #16]
 8005fb4:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8005fb6:	4aa4      	ldr	r2, [pc, #656]	@ (8006248 <loadMenuTexts+0x380>)
 8005fb8:	4ba4      	ldr	r3, [pc, #656]	@ (800624c <loadMenuTexts+0x384>)
 8005fba:	4614      	mov	r4, r2
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	6828      	ldr	r0, [r5, #0]
 8005fc0:	6869      	ldr	r1, [r5, #4]
 8005fc2:	68aa      	ldr	r2, [r5, #8]
 8005fc4:	68eb      	ldr	r3, [r5, #12]
 8005fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc8:	7c2b      	ldrb	r3, [r5, #16]
 8005fca:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8005fcc:	4aa0      	ldr	r2, [pc, #640]	@ (8006250 <loadMenuTexts+0x388>)
 8005fce:	4ba1      	ldr	r3, [pc, #644]	@ (8006254 <loadMenuTexts+0x38c>)
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	6828      	ldr	r0, [r5, #0]
 8005fd6:	6869      	ldr	r1, [r5, #4]
 8005fd8:	68aa      	ldr	r2, [r5, #8]
 8005fda:	68eb      	ldr	r3, [r5, #12]
 8005fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fde:	7c2b      	ldrb	r3, [r5, #16]
 8005fe0:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8005fe2:	4a9d      	ldr	r2, [pc, #628]	@ (8006258 <loadMenuTexts+0x390>)
 8005fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800625c <loadMenuTexts+0x394>)
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	461d      	mov	r5, r3
 8005fea:	6828      	ldr	r0, [r5, #0]
 8005fec:	6869      	ldr	r1, [r5, #4]
 8005fee:	68aa      	ldr	r2, [r5, #8]
 8005ff0:	68eb      	ldr	r3, [r5, #12]
 8005ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff4:	7c2b      	ldrb	r3, [r5, #16]
 8005ff6:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8005ff8:	4a99      	ldr	r2, [pc, #612]	@ (8006260 <loadMenuTexts+0x398>)
 8005ffa:	4b9a      	ldr	r3, [pc, #616]	@ (8006264 <loadMenuTexts+0x39c>)
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	461d      	mov	r5, r3
 8006000:	6828      	ldr	r0, [r5, #0]
 8006002:	6869      	ldr	r1, [r5, #4]
 8006004:	68aa      	ldr	r2, [r5, #8]
 8006006:	68eb      	ldr	r3, [r5, #12]
 8006008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800600a:	7c2b      	ldrb	r3, [r5, #16]
 800600c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800600e:	4a96      	ldr	r2, [pc, #600]	@ (8006268 <loadMenuTexts+0x3a0>)
 8006010:	4b96      	ldr	r3, [pc, #600]	@ (800626c <loadMenuTexts+0x3a4>)
 8006012:	4614      	mov	r4, r2
 8006014:	461d      	mov	r5, r3
 8006016:	6828      	ldr	r0, [r5, #0]
 8006018:	6869      	ldr	r1, [r5, #4]
 800601a:	68aa      	ldr	r2, [r5, #8]
 800601c:	68eb      	ldr	r3, [r5, #12]
 800601e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006020:	7c2b      	ldrb	r3, [r5, #16]
 8006022:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006024:	4a92      	ldr	r2, [pc, #584]	@ (8006270 <loadMenuTexts+0x3a8>)
 8006026:	4b93      	ldr	r3, [pc, #588]	@ (8006274 <loadMenuTexts+0x3ac>)
 8006028:	4614      	mov	r4, r2
 800602a:	461d      	mov	r5, r3
 800602c:	6828      	ldr	r0, [r5, #0]
 800602e:	6869      	ldr	r1, [r5, #4]
 8006030:	68aa      	ldr	r2, [r5, #8]
 8006032:	68eb      	ldr	r3, [r5, #12]
 8006034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006036:	7c2b      	ldrb	r3, [r5, #16]
 8006038:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800603a:	4a8f      	ldr	r2, [pc, #572]	@ (8006278 <loadMenuTexts+0x3b0>)
 800603c:	4b8f      	ldr	r3, [pc, #572]	@ (800627c <loadMenuTexts+0x3b4>)
 800603e:	4614      	mov	r4, r2
 8006040:	461d      	mov	r5, r3
 8006042:	6828      	ldr	r0, [r5, #0]
 8006044:	6869      	ldr	r1, [r5, #4]
 8006046:	68aa      	ldr	r2, [r5, #8]
 8006048:	68eb      	ldr	r3, [r5, #12]
 800604a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604c:	7c2b      	ldrb	r3, [r5, #16]
 800604e:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006050:	4a8b      	ldr	r2, [pc, #556]	@ (8006280 <loadMenuTexts+0x3b8>)
 8006052:	4b8c      	ldr	r3, [pc, #560]	@ (8006284 <loadMenuTexts+0x3bc>)
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	6828      	ldr	r0, [r5, #0]
 800605a:	6869      	ldr	r1, [r5, #4]
 800605c:	68aa      	ldr	r2, [r5, #8]
 800605e:	68eb      	ldr	r3, [r5, #12]
 8006060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006062:	7c2b      	ldrb	r3, [r5, #16]
 8006064:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006066:	4a88      	ldr	r2, [pc, #544]	@ (8006288 <loadMenuTexts+0x3c0>)
 8006068:	4b88      	ldr	r3, [pc, #544]	@ (800628c <loadMenuTexts+0x3c4>)
 800606a:	4614      	mov	r4, r2
 800606c:	461d      	mov	r5, r3
 800606e:	6828      	ldr	r0, [r5, #0]
 8006070:	6869      	ldr	r1, [r5, #4]
 8006072:	68aa      	ldr	r2, [r5, #8]
 8006074:	68eb      	ldr	r3, [r5, #12]
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	7c2b      	ldrb	r3, [r5, #16]
 800607a:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 800607c:	4a84      	ldr	r2, [pc, #528]	@ (8006290 <loadMenuTexts+0x3c8>)
 800607e:	4b85      	ldr	r3, [pc, #532]	@ (8006294 <loadMenuTexts+0x3cc>)
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	6828      	ldr	r0, [r5, #0]
 8006086:	6869      	ldr	r1, [r5, #4]
 8006088:	68aa      	ldr	r2, [r5, #8]
 800608a:	68eb      	ldr	r3, [r5, #12]
 800608c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800608e:	7c2b      	ldrb	r3, [r5, #16]
 8006090:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006092:	4a81      	ldr	r2, [pc, #516]	@ (8006298 <loadMenuTexts+0x3d0>)
 8006094:	4b81      	ldr	r3, [pc, #516]	@ (800629c <loadMenuTexts+0x3d4>)
 8006096:	4614      	mov	r4, r2
 8006098:	461d      	mov	r5, r3
 800609a:	6828      	ldr	r0, [r5, #0]
 800609c:	6869      	ldr	r1, [r5, #4]
 800609e:	68aa      	ldr	r2, [r5, #8]
 80060a0:	68eb      	ldr	r3, [r5, #12]
 80060a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a4:	7c2b      	ldrb	r3, [r5, #16]
 80060a6:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80060a8:	4a7d      	ldr	r2, [pc, #500]	@ (80062a0 <loadMenuTexts+0x3d8>)
 80060aa:	4b7e      	ldr	r3, [pc, #504]	@ (80062a4 <loadMenuTexts+0x3dc>)
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	6828      	ldr	r0, [r5, #0]
 80060b2:	6869      	ldr	r1, [r5, #4]
 80060b4:	68aa      	ldr	r2, [r5, #8]
 80060b6:	68eb      	ldr	r3, [r5, #12]
 80060b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ba:	7c2b      	ldrb	r3, [r5, #16]
 80060bc:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80060be:	4a7a      	ldr	r2, [pc, #488]	@ (80062a8 <loadMenuTexts+0x3e0>)
 80060c0:	4b7a      	ldr	r3, [pc, #488]	@ (80062ac <loadMenuTexts+0x3e4>)
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	6828      	ldr	r0, [r5, #0]
 80060c8:	6869      	ldr	r1, [r5, #4]
 80060ca:	68aa      	ldr	r2, [r5, #8]
 80060cc:	68eb      	ldr	r3, [r5, #12]
 80060ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d0:	7c2b      	ldrb	r3, [r5, #16]
 80060d2:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80060d4:	4a76      	ldr	r2, [pc, #472]	@ (80062b0 <loadMenuTexts+0x3e8>)
 80060d6:	4b77      	ldr	r3, [pc, #476]	@ (80062b4 <loadMenuTexts+0x3ec>)
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	6828      	ldr	r0, [r5, #0]
 80060de:	6869      	ldr	r1, [r5, #4]
 80060e0:	68aa      	ldr	r2, [r5, #8]
 80060e2:	68eb      	ldr	r3, [r5, #12]
 80060e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e6:	7c2b      	ldrb	r3, [r5, #16]
 80060e8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80060ea:	4a73      	ldr	r2, [pc, #460]	@ (80062b8 <loadMenuTexts+0x3f0>)
 80060ec:	4b73      	ldr	r3, [pc, #460]	@ (80062bc <loadMenuTexts+0x3f4>)
 80060ee:	4614      	mov	r4, r2
 80060f0:	461d      	mov	r5, r3
 80060f2:	6828      	ldr	r0, [r5, #0]
 80060f4:	6869      	ldr	r1, [r5, #4]
 80060f6:	68aa      	ldr	r2, [r5, #8]
 80060f8:	68eb      	ldr	r3, [r5, #12]
 80060fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fc:	7c2b      	ldrb	r3, [r5, #16]
 80060fe:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006100:	4a6f      	ldr	r2, [pc, #444]	@ (80062c0 <loadMenuTexts+0x3f8>)
 8006102:	4b70      	ldr	r3, [pc, #448]	@ (80062c4 <loadMenuTexts+0x3fc>)
 8006104:	4614      	mov	r4, r2
 8006106:	461d      	mov	r5, r3
 8006108:	6828      	ldr	r0, [r5, #0]
 800610a:	6869      	ldr	r1, [r5, #4]
 800610c:	68aa      	ldr	r2, [r5, #8]
 800610e:	68eb      	ldr	r3, [r5, #12]
 8006110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006112:	7c2b      	ldrb	r3, [r5, #16]
 8006114:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006116:	4a6c      	ldr	r2, [pc, #432]	@ (80062c8 <loadMenuTexts+0x400>)
 8006118:	4b6c      	ldr	r3, [pc, #432]	@ (80062cc <loadMenuTexts+0x404>)
 800611a:	4614      	mov	r4, r2
 800611c:	461d      	mov	r5, r3
 800611e:	6828      	ldr	r0, [r5, #0]
 8006120:	6869      	ldr	r1, [r5, #4]
 8006122:	68aa      	ldr	r2, [r5, #8]
 8006124:	68eb      	ldr	r3, [r5, #12]
 8006126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006128:	7c2b      	ldrb	r3, [r5, #16]
 800612a:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 800612c:	4a68      	ldr	r2, [pc, #416]	@ (80062d0 <loadMenuTexts+0x408>)
 800612e:	4b69      	ldr	r3, [pc, #420]	@ (80062d4 <loadMenuTexts+0x40c>)
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	6828      	ldr	r0, [r5, #0]
 8006136:	6869      	ldr	r1, [r5, #4]
 8006138:	68aa      	ldr	r2, [r5, #8]
 800613a:	68eb      	ldr	r3, [r5, #12]
 800613c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613e:	7c2b      	ldrb	r3, [r5, #16]
 8006140:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006142:	4a65      	ldr	r2, [pc, #404]	@ (80062d8 <loadMenuTexts+0x410>)
 8006144:	4b65      	ldr	r3, [pc, #404]	@ (80062dc <loadMenuTexts+0x414>)
 8006146:	4614      	mov	r4, r2
 8006148:	461d      	mov	r5, r3
 800614a:	6828      	ldr	r0, [r5, #0]
 800614c:	6869      	ldr	r1, [r5, #4]
 800614e:	68aa      	ldr	r2, [r5, #8]
 8006150:	68eb      	ldr	r3, [r5, #12]
 8006152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006154:	7c2b      	ldrb	r3, [r5, #16]
 8006156:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006158:	4a61      	ldr	r2, [pc, #388]	@ (80062e0 <loadMenuTexts+0x418>)
 800615a:	4b62      	ldr	r3, [pc, #392]	@ (80062e4 <loadMenuTexts+0x41c>)
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	6828      	ldr	r0, [r5, #0]
 8006162:	6869      	ldr	r1, [r5, #4]
 8006164:	68aa      	ldr	r2, [r5, #8]
 8006166:	68eb      	ldr	r3, [r5, #12]
 8006168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616a:	7c2b      	ldrb	r3, [r5, #16]
 800616c:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800616e:	4a5e      	ldr	r2, [pc, #376]	@ (80062e8 <loadMenuTexts+0x420>)
 8006170:	4b5e      	ldr	r3, [pc, #376]	@ (80062ec <loadMenuTexts+0x424>)
 8006172:	4614      	mov	r4, r2
 8006174:	461d      	mov	r5, r3
 8006176:	6828      	ldr	r0, [r5, #0]
 8006178:	6869      	ldr	r1, [r5, #4]
 800617a:	68aa      	ldr	r2, [r5, #8]
 800617c:	68eb      	ldr	r3, [r5, #12]
 800617e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006180:	7c2b      	ldrb	r3, [r5, #16]
 8006182:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006184:	4a5a      	ldr	r2, [pc, #360]	@ (80062f0 <loadMenuTexts+0x428>)
 8006186:	4b5b      	ldr	r3, [pc, #364]	@ (80062f4 <loadMenuTexts+0x42c>)
 8006188:	4614      	mov	r4, r2
 800618a:	461d      	mov	r5, r3
 800618c:	6828      	ldr	r0, [r5, #0]
 800618e:	6869      	ldr	r1, [r5, #4]
 8006190:	68aa      	ldr	r2, [r5, #8]
 8006192:	68eb      	ldr	r3, [r5, #12]
 8006194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006196:	7c2b      	ldrb	r3, [r5, #16]
 8006198:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800619a:	4a57      	ldr	r2, [pc, #348]	@ (80062f8 <loadMenuTexts+0x430>)
 800619c:	4b57      	ldr	r3, [pc, #348]	@ (80062fc <loadMenuTexts+0x434>)
 800619e:	4614      	mov	r4, r2
 80061a0:	461d      	mov	r5, r3
 80061a2:	6828      	ldr	r0, [r5, #0]
 80061a4:	6869      	ldr	r1, [r5, #4]
 80061a6:	68aa      	ldr	r2, [r5, #8]
 80061a8:	68eb      	ldr	r3, [r5, #12]
 80061aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ac:	7c2b      	ldrb	r3, [r5, #16]
 80061ae:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80061b0:	4a53      	ldr	r2, [pc, #332]	@ (8006300 <loadMenuTexts+0x438>)
 80061b2:	4b54      	ldr	r3, [pc, #336]	@ (8006304 <loadMenuTexts+0x43c>)
 80061b4:	4614      	mov	r4, r2
 80061b6:	461d      	mov	r5, r3
 80061b8:	6828      	ldr	r0, [r5, #0]
 80061ba:	6869      	ldr	r1, [r5, #4]
 80061bc:	68aa      	ldr	r2, [r5, #8]
 80061be:	68eb      	ldr	r3, [r5, #12]
 80061c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c2:	7c2b      	ldrb	r3, [r5, #16]
 80061c4:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80061c6:	4a50      	ldr	r2, [pc, #320]	@ (8006308 <loadMenuTexts+0x440>)
 80061c8:	4b50      	ldr	r3, [pc, #320]	@ (800630c <loadMenuTexts+0x444>)
 80061ca:	4614      	mov	r4, r2
 80061cc:	461d      	mov	r5, r3
 80061ce:	6828      	ldr	r0, [r5, #0]
 80061d0:	6869      	ldr	r1, [r5, #4]
 80061d2:	68aa      	ldr	r2, [r5, #8]
 80061d4:	68eb      	ldr	r3, [r5, #12]
 80061d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d8:	7c2b      	ldrb	r3, [r5, #16]
 80061da:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80061dc:	4a4c      	ldr	r2, [pc, #304]	@ (8006310 <loadMenuTexts+0x448>)
 80061de:	4b4d      	ldr	r3, [pc, #308]	@ (8006314 <loadMenuTexts+0x44c>)
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	6828      	ldr	r0, [r5, #0]
 80061e6:	6869      	ldr	r1, [r5, #4]
 80061e8:	68aa      	ldr	r2, [r5, #8]
 80061ea:	68eb      	ldr	r3, [r5, #12]
 80061ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ee:	7c2b      	ldrb	r3, [r5, #16]
 80061f0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80061f2:	4a49      	ldr	r2, [pc, #292]	@ (8006318 <loadMenuTexts+0x450>)
 80061f4:	e092      	b.n	800631c <loadMenuTexts+0x454>
 80061f6:	bf00      	nop
 80061f8:	20001220 	.word	0x20001220
 80061fc:	2000018c 	.word	0x2000018c
 8006200:	20001234 	.word	0x20001234
 8006204:	200001a0 	.word	0x200001a0
 8006208:	20001248 	.word	0x20001248
 800620c:	200001b4 	.word	0x200001b4
 8006210:	2000125c 	.word	0x2000125c
 8006214:	200001c8 	.word	0x200001c8
 8006218:	20001270 	.word	0x20001270
 800621c:	200001dc 	.word	0x200001dc
 8006220:	20001284 	.word	0x20001284
 8006224:	200001f0 	.word	0x200001f0
 8006228:	20001298 	.word	0x20001298
 800622c:	20000204 	.word	0x20000204
 8006230:	200012ac 	.word	0x200012ac
 8006234:	20000218 	.word	0x20000218
 8006238:	200012c0 	.word	0x200012c0
 800623c:	2000022c 	.word	0x2000022c
 8006240:	200012d4 	.word	0x200012d4
 8006244:	20000240 	.word	0x20000240
 8006248:	200012e8 	.word	0x200012e8
 800624c:	20000254 	.word	0x20000254
 8006250:	200012fc 	.word	0x200012fc
 8006254:	20000268 	.word	0x20000268
 8006258:	20001310 	.word	0x20001310
 800625c:	2000027c 	.word	0x2000027c
 8006260:	20001324 	.word	0x20001324
 8006264:	20000290 	.word	0x20000290
 8006268:	20001338 	.word	0x20001338
 800626c:	200002a4 	.word	0x200002a4
 8006270:	2000134c 	.word	0x2000134c
 8006274:	200002b8 	.word	0x200002b8
 8006278:	20001360 	.word	0x20001360
 800627c:	200002cc 	.word	0x200002cc
 8006280:	20001374 	.word	0x20001374
 8006284:	200002e0 	.word	0x200002e0
 8006288:	20001388 	.word	0x20001388
 800628c:	200002f4 	.word	0x200002f4
 8006290:	2000139c 	.word	0x2000139c
 8006294:	20000308 	.word	0x20000308
 8006298:	200013b0 	.word	0x200013b0
 800629c:	2000031c 	.word	0x2000031c
 80062a0:	200013c4 	.word	0x200013c4
 80062a4:	20000330 	.word	0x20000330
 80062a8:	200013d8 	.word	0x200013d8
 80062ac:	20000344 	.word	0x20000344
 80062b0:	200013ec 	.word	0x200013ec
 80062b4:	20000358 	.word	0x20000358
 80062b8:	20001400 	.word	0x20001400
 80062bc:	2000036c 	.word	0x2000036c
 80062c0:	20001414 	.word	0x20001414
 80062c4:	20000380 	.word	0x20000380
 80062c8:	20001428 	.word	0x20001428
 80062cc:	20000394 	.word	0x20000394
 80062d0:	2000143c 	.word	0x2000143c
 80062d4:	200003a8 	.word	0x200003a8
 80062d8:	20001450 	.word	0x20001450
 80062dc:	200003bc 	.word	0x200003bc
 80062e0:	20001464 	.word	0x20001464
 80062e4:	200003d0 	.word	0x200003d0
 80062e8:	20001478 	.word	0x20001478
 80062ec:	200003e4 	.word	0x200003e4
 80062f0:	2000148c 	.word	0x2000148c
 80062f4:	200003f8 	.word	0x200003f8
 80062f8:	200014a0 	.word	0x200014a0
 80062fc:	2000040c 	.word	0x2000040c
 8006300:	200014b4 	.word	0x200014b4
 8006304:	20000420 	.word	0x20000420
 8006308:	200014c8 	.word	0x200014c8
 800630c:	20000434 	.word	0x20000434
 8006310:	200014dc 	.word	0x200014dc
 8006314:	20000448 	.word	0x20000448
 8006318:	200014f0 	.word	0x200014f0
 800631c:	4bc7      	ldr	r3, [pc, #796]	@ (800663c <loadMenuTexts+0x774>)
 800631e:	4614      	mov	r4, r2
 8006320:	461d      	mov	r5, r3
 8006322:	6828      	ldr	r0, [r5, #0]
 8006324:	6869      	ldr	r1, [r5, #4]
 8006326:	68aa      	ldr	r2, [r5, #8]
 8006328:	68eb      	ldr	r3, [r5, #12]
 800632a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632c:	7c2b      	ldrb	r3, [r5, #16]
 800632e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006330:	4ac3      	ldr	r2, [pc, #780]	@ (8006640 <loadMenuTexts+0x778>)
 8006332:	4bc4      	ldr	r3, [pc, #784]	@ (8006644 <loadMenuTexts+0x77c>)
 8006334:	4614      	mov	r4, r2
 8006336:	461d      	mov	r5, r3
 8006338:	6828      	ldr	r0, [r5, #0]
 800633a:	6869      	ldr	r1, [r5, #4]
 800633c:	68aa      	ldr	r2, [r5, #8]
 800633e:	68eb      	ldr	r3, [r5, #12]
 8006340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006342:	7c2b      	ldrb	r3, [r5, #16]
 8006344:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006346:	4ac0      	ldr	r2, [pc, #768]	@ (8006648 <loadMenuTexts+0x780>)
 8006348:	4bc0      	ldr	r3, [pc, #768]	@ (800664c <loadMenuTexts+0x784>)
 800634a:	4614      	mov	r4, r2
 800634c:	461d      	mov	r5, r3
 800634e:	6828      	ldr	r0, [r5, #0]
 8006350:	6869      	ldr	r1, [r5, #4]
 8006352:	68aa      	ldr	r2, [r5, #8]
 8006354:	68eb      	ldr	r3, [r5, #12]
 8006356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006358:	7c2b      	ldrb	r3, [r5, #16]
 800635a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 800635c:	4abc      	ldr	r2, [pc, #752]	@ (8006650 <loadMenuTexts+0x788>)
 800635e:	4bbd      	ldr	r3, [pc, #756]	@ (8006654 <loadMenuTexts+0x78c>)
 8006360:	4614      	mov	r4, r2
 8006362:	461d      	mov	r5, r3
 8006364:	6828      	ldr	r0, [r5, #0]
 8006366:	6869      	ldr	r1, [r5, #4]
 8006368:	68aa      	ldr	r2, [r5, #8]
 800636a:	68eb      	ldr	r3, [r5, #12]
 800636c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636e:	7c2b      	ldrb	r3, [r5, #16]
 8006370:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8006372:	4ab9      	ldr	r2, [pc, #740]	@ (8006658 <loadMenuTexts+0x790>)
 8006374:	4bb9      	ldr	r3, [pc, #740]	@ (800665c <loadMenuTexts+0x794>)
 8006376:	4614      	mov	r4, r2
 8006378:	461d      	mov	r5, r3
 800637a:	6828      	ldr	r0, [r5, #0]
 800637c:	6869      	ldr	r1, [r5, #4]
 800637e:	68aa      	ldr	r2, [r5, #8]
 8006380:	68eb      	ldr	r3, [r5, #12]
 8006382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006384:	7c2b      	ldrb	r3, [r5, #16]
 8006386:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006388:	4ab5      	ldr	r2, [pc, #724]	@ (8006660 <loadMenuTexts+0x798>)
 800638a:	4bb6      	ldr	r3, [pc, #728]	@ (8006664 <loadMenuTexts+0x79c>)
 800638c:	4614      	mov	r4, r2
 800638e:	461d      	mov	r5, r3
 8006390:	6828      	ldr	r0, [r5, #0]
 8006392:	6869      	ldr	r1, [r5, #4]
 8006394:	68aa      	ldr	r2, [r5, #8]
 8006396:	68eb      	ldr	r3, [r5, #12]
 8006398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639a:	7c2b      	ldrb	r3, [r5, #16]
 800639c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800639e:	4ab2      	ldr	r2, [pc, #712]	@ (8006668 <loadMenuTexts+0x7a0>)
 80063a0:	4bb2      	ldr	r3, [pc, #712]	@ (800666c <loadMenuTexts+0x7a4>)
 80063a2:	4614      	mov	r4, r2
 80063a4:	461d      	mov	r5, r3
 80063a6:	6828      	ldr	r0, [r5, #0]
 80063a8:	6869      	ldr	r1, [r5, #4]
 80063aa:	68aa      	ldr	r2, [r5, #8]
 80063ac:	68eb      	ldr	r3, [r5, #12]
 80063ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b0:	7c2b      	ldrb	r3, [r5, #16]
 80063b2:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80063b4:	4aae      	ldr	r2, [pc, #696]	@ (8006670 <loadMenuTexts+0x7a8>)
 80063b6:	4baf      	ldr	r3, [pc, #700]	@ (8006674 <loadMenuTexts+0x7ac>)
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	6828      	ldr	r0, [r5, #0]
 80063be:	6869      	ldr	r1, [r5, #4]
 80063c0:	68aa      	ldr	r2, [r5, #8]
 80063c2:	68eb      	ldr	r3, [r5, #12]
 80063c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c6:	7c2b      	ldrb	r3, [r5, #16]
 80063c8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80063ca:	4aab      	ldr	r2, [pc, #684]	@ (8006678 <loadMenuTexts+0x7b0>)
 80063cc:	4bab      	ldr	r3, [pc, #684]	@ (800667c <loadMenuTexts+0x7b4>)
 80063ce:	4614      	mov	r4, r2
 80063d0:	461d      	mov	r5, r3
 80063d2:	6828      	ldr	r0, [r5, #0]
 80063d4:	6869      	ldr	r1, [r5, #4]
 80063d6:	68aa      	ldr	r2, [r5, #8]
 80063d8:	68eb      	ldr	r3, [r5, #12]
 80063da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063dc:	7c2b      	ldrb	r3, [r5, #16]
 80063de:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80063e0:	4aa7      	ldr	r2, [pc, #668]	@ (8006680 <loadMenuTexts+0x7b8>)
 80063e2:	4ba8      	ldr	r3, [pc, #672]	@ (8006684 <loadMenuTexts+0x7bc>)
 80063e4:	4614      	mov	r4, r2
 80063e6:	461d      	mov	r5, r3
 80063e8:	6828      	ldr	r0, [r5, #0]
 80063ea:	6869      	ldr	r1, [r5, #4]
 80063ec:	68aa      	ldr	r2, [r5, #8]
 80063ee:	68eb      	ldr	r3, [r5, #12]
 80063f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f2:	7c2b      	ldrb	r3, [r5, #16]
 80063f4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80063f6:	4aa4      	ldr	r2, [pc, #656]	@ (8006688 <loadMenuTexts+0x7c0>)
 80063f8:	4ba4      	ldr	r3, [pc, #656]	@ (800668c <loadMenuTexts+0x7c4>)
 80063fa:	4614      	mov	r4, r2
 80063fc:	461d      	mov	r5, r3
 80063fe:	6828      	ldr	r0, [r5, #0]
 8006400:	6869      	ldr	r1, [r5, #4]
 8006402:	68aa      	ldr	r2, [r5, #8]
 8006404:	68eb      	ldr	r3, [r5, #12]
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	7c2b      	ldrb	r3, [r5, #16]
 800640a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 800640c:	4aa0      	ldr	r2, [pc, #640]	@ (8006690 <loadMenuTexts+0x7c8>)
 800640e:	4ba1      	ldr	r3, [pc, #644]	@ (8006694 <loadMenuTexts+0x7cc>)
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	6828      	ldr	r0, [r5, #0]
 8006416:	6869      	ldr	r1, [r5, #4]
 8006418:	68aa      	ldr	r2, [r5, #8]
 800641a:	68eb      	ldr	r3, [r5, #12]
 800641c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641e:	7c2b      	ldrb	r3, [r5, #16]
 8006420:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006422:	4a9d      	ldr	r2, [pc, #628]	@ (8006698 <loadMenuTexts+0x7d0>)
 8006424:	4b9d      	ldr	r3, [pc, #628]	@ (800669c <loadMenuTexts+0x7d4>)
 8006426:	4614      	mov	r4, r2
 8006428:	461d      	mov	r5, r3
 800642a:	6828      	ldr	r0, [r5, #0]
 800642c:	6869      	ldr	r1, [r5, #4]
 800642e:	68aa      	ldr	r2, [r5, #8]
 8006430:	68eb      	ldr	r3, [r5, #12]
 8006432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006434:	7c2b      	ldrb	r3, [r5, #16]
 8006436:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006438:	4a99      	ldr	r2, [pc, #612]	@ (80066a0 <loadMenuTexts+0x7d8>)
 800643a:	4b9a      	ldr	r3, [pc, #616]	@ (80066a4 <loadMenuTexts+0x7dc>)
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	6828      	ldr	r0, [r5, #0]
 8006442:	6869      	ldr	r1, [r5, #4]
 8006444:	68aa      	ldr	r2, [r5, #8]
 8006446:	68eb      	ldr	r3, [r5, #12]
 8006448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644a:	7c2b      	ldrb	r3, [r5, #16]
 800644c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800644e:	4a96      	ldr	r2, [pc, #600]	@ (80066a8 <loadMenuTexts+0x7e0>)
 8006450:	4b96      	ldr	r3, [pc, #600]	@ (80066ac <loadMenuTexts+0x7e4>)
 8006452:	4614      	mov	r4, r2
 8006454:	461d      	mov	r5, r3
 8006456:	6828      	ldr	r0, [r5, #0]
 8006458:	6869      	ldr	r1, [r5, #4]
 800645a:	68aa      	ldr	r2, [r5, #8]
 800645c:	68eb      	ldr	r3, [r5, #12]
 800645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006460:	7c2b      	ldrb	r3, [r5, #16]
 8006462:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006464:	4a92      	ldr	r2, [pc, #584]	@ (80066b0 <loadMenuTexts+0x7e8>)
 8006466:	4b93      	ldr	r3, [pc, #588]	@ (80066b4 <loadMenuTexts+0x7ec>)
 8006468:	4614      	mov	r4, r2
 800646a:	461d      	mov	r5, r3
 800646c:	6828      	ldr	r0, [r5, #0]
 800646e:	6869      	ldr	r1, [r5, #4]
 8006470:	68aa      	ldr	r2, [r5, #8]
 8006472:	68eb      	ldr	r3, [r5, #12]
 8006474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006476:	7c2b      	ldrb	r3, [r5, #16]
 8006478:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 800647a:	4a8f      	ldr	r2, [pc, #572]	@ (80066b8 <loadMenuTexts+0x7f0>)
 800647c:	4b8f      	ldr	r3, [pc, #572]	@ (80066bc <loadMenuTexts+0x7f4>)
 800647e:	4614      	mov	r4, r2
 8006480:	461d      	mov	r5, r3
 8006482:	6828      	ldr	r0, [r5, #0]
 8006484:	6869      	ldr	r1, [r5, #4]
 8006486:	68aa      	ldr	r2, [r5, #8]
 8006488:	68eb      	ldr	r3, [r5, #12]
 800648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648c:	7c2b      	ldrb	r3, [r5, #16]
 800648e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006490:	4a8b      	ldr	r2, [pc, #556]	@ (80066c0 <loadMenuTexts+0x7f8>)
 8006492:	4b8c      	ldr	r3, [pc, #560]	@ (80066c4 <loadMenuTexts+0x7fc>)
 8006494:	4614      	mov	r4, r2
 8006496:	461d      	mov	r5, r3
 8006498:	6828      	ldr	r0, [r5, #0]
 800649a:	6869      	ldr	r1, [r5, #4]
 800649c:	68aa      	ldr	r2, [r5, #8]
 800649e:	68eb      	ldr	r3, [r5, #12]
 80064a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a2:	7c2b      	ldrb	r3, [r5, #16]
 80064a4:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80064a6:	4a88      	ldr	r2, [pc, #544]	@ (80066c8 <loadMenuTexts+0x800>)
 80064a8:	4b88      	ldr	r3, [pc, #544]	@ (80066cc <loadMenuTexts+0x804>)
 80064aa:	4614      	mov	r4, r2
 80064ac:	461d      	mov	r5, r3
 80064ae:	6828      	ldr	r0, [r5, #0]
 80064b0:	6869      	ldr	r1, [r5, #4]
 80064b2:	68aa      	ldr	r2, [r5, #8]
 80064b4:	68eb      	ldr	r3, [r5, #12]
 80064b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b8:	7c2b      	ldrb	r3, [r5, #16]
 80064ba:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80064bc:	4a84      	ldr	r2, [pc, #528]	@ (80066d0 <loadMenuTexts+0x808>)
 80064be:	4b85      	ldr	r3, [pc, #532]	@ (80066d4 <loadMenuTexts+0x80c>)
 80064c0:	4614      	mov	r4, r2
 80064c2:	461d      	mov	r5, r3
 80064c4:	6828      	ldr	r0, [r5, #0]
 80064c6:	6869      	ldr	r1, [r5, #4]
 80064c8:	68aa      	ldr	r2, [r5, #8]
 80064ca:	68eb      	ldr	r3, [r5, #12]
 80064cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ce:	7c2b      	ldrb	r3, [r5, #16]
 80064d0:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80064d2:	4a81      	ldr	r2, [pc, #516]	@ (80066d8 <loadMenuTexts+0x810>)
 80064d4:	4b81      	ldr	r3, [pc, #516]	@ (80066dc <loadMenuTexts+0x814>)
 80064d6:	4614      	mov	r4, r2
 80064d8:	461d      	mov	r5, r3
 80064da:	6828      	ldr	r0, [r5, #0]
 80064dc:	6869      	ldr	r1, [r5, #4]
 80064de:	68aa      	ldr	r2, [r5, #8]
 80064e0:	68eb      	ldr	r3, [r5, #12]
 80064e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e4:	7c2b      	ldrb	r3, [r5, #16]
 80064e6:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80064e8:	4a7d      	ldr	r2, [pc, #500]	@ (80066e0 <loadMenuTexts+0x818>)
 80064ea:	4b7e      	ldr	r3, [pc, #504]	@ (80066e4 <loadMenuTexts+0x81c>)
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	6828      	ldr	r0, [r5, #0]
 80064f2:	6869      	ldr	r1, [r5, #4]
 80064f4:	68aa      	ldr	r2, [r5, #8]
 80064f6:	68eb      	ldr	r3, [r5, #12]
 80064f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fa:	7c2b      	ldrb	r3, [r5, #16]
 80064fc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80064fe:	4a7a      	ldr	r2, [pc, #488]	@ (80066e8 <loadMenuTexts+0x820>)
 8006500:	4b7a      	ldr	r3, [pc, #488]	@ (80066ec <loadMenuTexts+0x824>)
 8006502:	4614      	mov	r4, r2
 8006504:	461d      	mov	r5, r3
 8006506:	6828      	ldr	r0, [r5, #0]
 8006508:	6869      	ldr	r1, [r5, #4]
 800650a:	68aa      	ldr	r2, [r5, #8]
 800650c:	68eb      	ldr	r3, [r5, #12]
 800650e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006510:	7c2b      	ldrb	r3, [r5, #16]
 8006512:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006514:	4a76      	ldr	r2, [pc, #472]	@ (80066f0 <loadMenuTexts+0x828>)
 8006516:	4b77      	ldr	r3, [pc, #476]	@ (80066f4 <loadMenuTexts+0x82c>)
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	6828      	ldr	r0, [r5, #0]
 800651e:	6869      	ldr	r1, [r5, #4]
 8006520:	68aa      	ldr	r2, [r5, #8]
 8006522:	68eb      	ldr	r3, [r5, #12]
 8006524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006526:	7c2b      	ldrb	r3, [r5, #16]
 8006528:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800652a:	4a73      	ldr	r2, [pc, #460]	@ (80066f8 <loadMenuTexts+0x830>)
 800652c:	4b73      	ldr	r3, [pc, #460]	@ (80066fc <loadMenuTexts+0x834>)
 800652e:	4614      	mov	r4, r2
 8006530:	461d      	mov	r5, r3
 8006532:	6828      	ldr	r0, [r5, #0]
 8006534:	6869      	ldr	r1, [r5, #4]
 8006536:	68aa      	ldr	r2, [r5, #8]
 8006538:	68eb      	ldr	r3, [r5, #12]
 800653a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653c:	7c2b      	ldrb	r3, [r5, #16]
 800653e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006540:	4a6f      	ldr	r2, [pc, #444]	@ (8006700 <loadMenuTexts+0x838>)
 8006542:	4b70      	ldr	r3, [pc, #448]	@ (8006704 <loadMenuTexts+0x83c>)
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	6828      	ldr	r0, [r5, #0]
 800654a:	6869      	ldr	r1, [r5, #4]
 800654c:	68aa      	ldr	r2, [r5, #8]
 800654e:	68eb      	ldr	r3, [r5, #12]
 8006550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006552:	7c2b      	ldrb	r3, [r5, #16]
 8006554:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006556:	4a6c      	ldr	r2, [pc, #432]	@ (8006708 <loadMenuTexts+0x840>)
 8006558:	4b6c      	ldr	r3, [pc, #432]	@ (800670c <loadMenuTexts+0x844>)
 800655a:	4614      	mov	r4, r2
 800655c:	461d      	mov	r5, r3
 800655e:	6828      	ldr	r0, [r5, #0]
 8006560:	6869      	ldr	r1, [r5, #4]
 8006562:	68aa      	ldr	r2, [r5, #8]
 8006564:	68eb      	ldr	r3, [r5, #12]
 8006566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006568:	7c2b      	ldrb	r3, [r5, #16]
 800656a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 800656c:	4a68      	ldr	r2, [pc, #416]	@ (8006710 <loadMenuTexts+0x848>)
 800656e:	4b69      	ldr	r3, [pc, #420]	@ (8006714 <loadMenuTexts+0x84c>)
 8006570:	4614      	mov	r4, r2
 8006572:	461d      	mov	r5, r3
 8006574:	6828      	ldr	r0, [r5, #0]
 8006576:	6869      	ldr	r1, [r5, #4]
 8006578:	68aa      	ldr	r2, [r5, #8]
 800657a:	68eb      	ldr	r3, [r5, #12]
 800657c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657e:	7c2b      	ldrb	r3, [r5, #16]
 8006580:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8006582:	4a65      	ldr	r2, [pc, #404]	@ (8006718 <loadMenuTexts+0x850>)
 8006584:	4b65      	ldr	r3, [pc, #404]	@ (800671c <loadMenuTexts+0x854>)
 8006586:	4614      	mov	r4, r2
 8006588:	461d      	mov	r5, r3
 800658a:	6828      	ldr	r0, [r5, #0]
 800658c:	6869      	ldr	r1, [r5, #4]
 800658e:	68aa      	ldr	r2, [r5, #8]
 8006590:	68eb      	ldr	r3, [r5, #12]
 8006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006594:	7c2b      	ldrb	r3, [r5, #16]
 8006596:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8006598:	4a61      	ldr	r2, [pc, #388]	@ (8006720 <loadMenuTexts+0x858>)
 800659a:	4b62      	ldr	r3, [pc, #392]	@ (8006724 <loadMenuTexts+0x85c>)
 800659c:	4614      	mov	r4, r2
 800659e:	461d      	mov	r5, r3
 80065a0:	6828      	ldr	r0, [r5, #0]
 80065a2:	6869      	ldr	r1, [r5, #4]
 80065a4:	68aa      	ldr	r2, [r5, #8]
 80065a6:	68eb      	ldr	r3, [r5, #12]
 80065a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065aa:	7c2b      	ldrb	r3, [r5, #16]
 80065ac:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80065ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006728 <loadMenuTexts+0x860>)
 80065b0:	4b5e      	ldr	r3, [pc, #376]	@ (800672c <loadMenuTexts+0x864>)
 80065b2:	4614      	mov	r4, r2
 80065b4:	461d      	mov	r5, r3
 80065b6:	6828      	ldr	r0, [r5, #0]
 80065b8:	6869      	ldr	r1, [r5, #4]
 80065ba:	68aa      	ldr	r2, [r5, #8]
 80065bc:	68eb      	ldr	r3, [r5, #12]
 80065be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c0:	7c2b      	ldrb	r3, [r5, #16]
 80065c2:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80065c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006730 <loadMenuTexts+0x868>)
 80065c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006734 <loadMenuTexts+0x86c>)
 80065c8:	4614      	mov	r4, r2
 80065ca:	461d      	mov	r5, r3
 80065cc:	6828      	ldr	r0, [r5, #0]
 80065ce:	6869      	ldr	r1, [r5, #4]
 80065d0:	68aa      	ldr	r2, [r5, #8]
 80065d2:	68eb      	ldr	r3, [r5, #12]
 80065d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d6:	7c2b      	ldrb	r3, [r5, #16]
 80065d8:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80065da:	4a57      	ldr	r2, [pc, #348]	@ (8006738 <loadMenuTexts+0x870>)
 80065dc:	4b57      	ldr	r3, [pc, #348]	@ (800673c <loadMenuTexts+0x874>)
 80065de:	4614      	mov	r4, r2
 80065e0:	461d      	mov	r5, r3
 80065e2:	6828      	ldr	r0, [r5, #0]
 80065e4:	6869      	ldr	r1, [r5, #4]
 80065e6:	68aa      	ldr	r2, [r5, #8]
 80065e8:	68eb      	ldr	r3, [r5, #12]
 80065ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ec:	7c2b      	ldrb	r3, [r5, #16]
 80065ee:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80065f0:	4a53      	ldr	r2, [pc, #332]	@ (8006740 <loadMenuTexts+0x878>)
 80065f2:	4b54      	ldr	r3, [pc, #336]	@ (8006744 <loadMenuTexts+0x87c>)
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	6828      	ldr	r0, [r5, #0]
 80065fa:	6869      	ldr	r1, [r5, #4]
 80065fc:	68aa      	ldr	r2, [r5, #8]
 80065fe:	68eb      	ldr	r3, [r5, #12]
 8006600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006602:	7c2b      	ldrb	r3, [r5, #16]
 8006604:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006606:	4a50      	ldr	r2, [pc, #320]	@ (8006748 <loadMenuTexts+0x880>)
 8006608:	4b50      	ldr	r3, [pc, #320]	@ (800674c <loadMenuTexts+0x884>)
 800660a:	4614      	mov	r4, r2
 800660c:	461d      	mov	r5, r3
 800660e:	6828      	ldr	r0, [r5, #0]
 8006610:	6869      	ldr	r1, [r5, #4]
 8006612:	68aa      	ldr	r2, [r5, #8]
 8006614:	68eb      	ldr	r3, [r5, #12]
 8006616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006618:	7c2b      	ldrb	r3, [r5, #16]
 800661a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 800661c:	4a4c      	ldr	r2, [pc, #304]	@ (8006750 <loadMenuTexts+0x888>)
 800661e:	4b4d      	ldr	r3, [pc, #308]	@ (8006754 <loadMenuTexts+0x88c>)
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	6828      	ldr	r0, [r5, #0]
 8006626:	6869      	ldr	r1, [r5, #4]
 8006628:	68aa      	ldr	r2, [r5, #8]
 800662a:	68eb      	ldr	r3, [r5, #12]
 800662c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662e:	7c2b      	ldrb	r3, [r5, #16]
 8006630:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006632:	4a49      	ldr	r2, [pc, #292]	@ (8006758 <loadMenuTexts+0x890>)
 8006634:	4b49      	ldr	r3, [pc, #292]	@ (800675c <loadMenuTexts+0x894>)
 8006636:	4614      	mov	r4, r2
 8006638:	461d      	mov	r5, r3
 800663a:	e091      	b.n	8006760 <loadMenuTexts+0x898>
 800663c:	2000045c 	.word	0x2000045c
 8006640:	20001504 	.word	0x20001504
 8006644:	20000470 	.word	0x20000470
 8006648:	20001518 	.word	0x20001518
 800664c:	20000484 	.word	0x20000484
 8006650:	2000152c 	.word	0x2000152c
 8006654:	20000498 	.word	0x20000498
 8006658:	20001540 	.word	0x20001540
 800665c:	200004ac 	.word	0x200004ac
 8006660:	20001554 	.word	0x20001554
 8006664:	200004c0 	.word	0x200004c0
 8006668:	20001568 	.word	0x20001568
 800666c:	200004d4 	.word	0x200004d4
 8006670:	2000157c 	.word	0x2000157c
 8006674:	200004e8 	.word	0x200004e8
 8006678:	20001590 	.word	0x20001590
 800667c:	200004fc 	.word	0x200004fc
 8006680:	200015a4 	.word	0x200015a4
 8006684:	20000510 	.word	0x20000510
 8006688:	200015b8 	.word	0x200015b8
 800668c:	20000524 	.word	0x20000524
 8006690:	200015cc 	.word	0x200015cc
 8006694:	20000538 	.word	0x20000538
 8006698:	200015e0 	.word	0x200015e0
 800669c:	2000054c 	.word	0x2000054c
 80066a0:	200015f4 	.word	0x200015f4
 80066a4:	20000560 	.word	0x20000560
 80066a8:	20001608 	.word	0x20001608
 80066ac:	20000574 	.word	0x20000574
 80066b0:	2000161c 	.word	0x2000161c
 80066b4:	20000588 	.word	0x20000588
 80066b8:	20001630 	.word	0x20001630
 80066bc:	2000059c 	.word	0x2000059c
 80066c0:	20001644 	.word	0x20001644
 80066c4:	200005b0 	.word	0x200005b0
 80066c8:	20001658 	.word	0x20001658
 80066cc:	200005c4 	.word	0x200005c4
 80066d0:	2000166c 	.word	0x2000166c
 80066d4:	200005d8 	.word	0x200005d8
 80066d8:	20001680 	.word	0x20001680
 80066dc:	200005ec 	.word	0x200005ec
 80066e0:	20001694 	.word	0x20001694
 80066e4:	20000600 	.word	0x20000600
 80066e8:	200016a8 	.word	0x200016a8
 80066ec:	20000614 	.word	0x20000614
 80066f0:	200016bc 	.word	0x200016bc
 80066f4:	20000628 	.word	0x20000628
 80066f8:	200016d0 	.word	0x200016d0
 80066fc:	2000063c 	.word	0x2000063c
 8006700:	200016e4 	.word	0x200016e4
 8006704:	20000650 	.word	0x20000650
 8006708:	200016f8 	.word	0x200016f8
 800670c:	20000664 	.word	0x20000664
 8006710:	2000170c 	.word	0x2000170c
 8006714:	20000678 	.word	0x20000678
 8006718:	20001720 	.word	0x20001720
 800671c:	2000068c 	.word	0x2000068c
 8006720:	20001734 	.word	0x20001734
 8006724:	200006a0 	.word	0x200006a0
 8006728:	20001748 	.word	0x20001748
 800672c:	200006b4 	.word	0x200006b4
 8006730:	2000175c 	.word	0x2000175c
 8006734:	200006c8 	.word	0x200006c8
 8006738:	20001770 	.word	0x20001770
 800673c:	200006dc 	.word	0x200006dc
 8006740:	20001784 	.word	0x20001784
 8006744:	200006f0 	.word	0x200006f0
 8006748:	20001798 	.word	0x20001798
 800674c:	20000c7c 	.word	0x20000c7c
 8006750:	200017ac 	.word	0x200017ac
 8006754:	20000c90 	.word	0x20000c90
 8006758:	200017c0 	.word	0x200017c0
 800675c:	20000ca4 	.word	0x20000ca4
 8006760:	6828      	ldr	r0, [r5, #0]
 8006762:	6869      	ldr	r1, [r5, #4]
 8006764:	68aa      	ldr	r2, [r5, #8]
 8006766:	68eb      	ldr	r3, [r5, #12]
 8006768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676a:	7c2b      	ldrb	r3, [r5, #16]
 800676c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800676e:	4a59      	ldr	r2, [pc, #356]	@ (80068d4 <loadMenuTexts+0xa0c>)
 8006770:	4b59      	ldr	r3, [pc, #356]	@ (80068d8 <loadMenuTexts+0xa10>)
 8006772:	4614      	mov	r4, r2
 8006774:	461d      	mov	r5, r3
 8006776:	6828      	ldr	r0, [r5, #0]
 8006778:	6869      	ldr	r1, [r5, #4]
 800677a:	68aa      	ldr	r2, [r5, #8]
 800677c:	68eb      	ldr	r3, [r5, #12]
 800677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006780:	7c2b      	ldrb	r3, [r5, #16]
 8006782:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006784:	4a55      	ldr	r2, [pc, #340]	@ (80068dc <loadMenuTexts+0xa14>)
 8006786:	4b56      	ldr	r3, [pc, #344]	@ (80068e0 <loadMenuTexts+0xa18>)
 8006788:	4614      	mov	r4, r2
 800678a:	461d      	mov	r5, r3
 800678c:	6828      	ldr	r0, [r5, #0]
 800678e:	6869      	ldr	r1, [r5, #4]
 8006790:	68aa      	ldr	r2, [r5, #8]
 8006792:	68eb      	ldr	r3, [r5, #12]
 8006794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006796:	7c2b      	ldrb	r3, [r5, #16]
 8006798:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 800679a:	4a52      	ldr	r2, [pc, #328]	@ (80068e4 <loadMenuTexts+0xa1c>)
 800679c:	4b52      	ldr	r3, [pc, #328]	@ (80068e8 <loadMenuTexts+0xa20>)
 800679e:	4614      	mov	r4, r2
 80067a0:	461d      	mov	r5, r3
 80067a2:	6828      	ldr	r0, [r5, #0]
 80067a4:	6869      	ldr	r1, [r5, #4]
 80067a6:	68aa      	ldr	r2, [r5, #8]
 80067a8:	68eb      	ldr	r3, [r5, #12]
 80067aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ac:	7c2b      	ldrb	r3, [r5, #16]
 80067ae:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80067b0:	4a4e      	ldr	r2, [pc, #312]	@ (80068ec <loadMenuTexts+0xa24>)
 80067b2:	4b4f      	ldr	r3, [pc, #316]	@ (80068f0 <loadMenuTexts+0xa28>)
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	6828      	ldr	r0, [r5, #0]
 80067ba:	6869      	ldr	r1, [r5, #4]
 80067bc:	68aa      	ldr	r2, [r5, #8]
 80067be:	68eb      	ldr	r3, [r5, #12]
 80067c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c2:	7c2b      	ldrb	r3, [r5, #16]
 80067c4:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80067c6:	4a4b      	ldr	r2, [pc, #300]	@ (80068f4 <loadMenuTexts+0xa2c>)
 80067c8:	4b4b      	ldr	r3, [pc, #300]	@ (80068f8 <loadMenuTexts+0xa30>)
 80067ca:	4614      	mov	r4, r2
 80067cc:	461d      	mov	r5, r3
 80067ce:	6828      	ldr	r0, [r5, #0]
 80067d0:	6869      	ldr	r1, [r5, #4]
 80067d2:	68aa      	ldr	r2, [r5, #8]
 80067d4:	68eb      	ldr	r3, [r5, #12]
 80067d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d8:	7c2b      	ldrb	r3, [r5, #16]
 80067da:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80067dc:	4a47      	ldr	r2, [pc, #284]	@ (80068fc <loadMenuTexts+0xa34>)
 80067de:	4b48      	ldr	r3, [pc, #288]	@ (8006900 <loadMenuTexts+0xa38>)
 80067e0:	4614      	mov	r4, r2
 80067e2:	461d      	mov	r5, r3
 80067e4:	6828      	ldr	r0, [r5, #0]
 80067e6:	6869      	ldr	r1, [r5, #4]
 80067e8:	68aa      	ldr	r2, [r5, #8]
 80067ea:	68eb      	ldr	r3, [r5, #12]
 80067ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ee:	7c2b      	ldrb	r3, [r5, #16]
 80067f0:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80067f2:	4a44      	ldr	r2, [pc, #272]	@ (8006904 <loadMenuTexts+0xa3c>)
 80067f4:	4b44      	ldr	r3, [pc, #272]	@ (8006908 <loadMenuTexts+0xa40>)
 80067f6:	4614      	mov	r4, r2
 80067f8:	461d      	mov	r5, r3
 80067fa:	6828      	ldr	r0, [r5, #0]
 80067fc:	6869      	ldr	r1, [r5, #4]
 80067fe:	68aa      	ldr	r2, [r5, #8]
 8006800:	68eb      	ldr	r3, [r5, #12]
 8006802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006804:	7c2b      	ldrb	r3, [r5, #16]
 8006806:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006808:	4a40      	ldr	r2, [pc, #256]	@ (800690c <loadMenuTexts+0xa44>)
 800680a:	4b41      	ldr	r3, [pc, #260]	@ (8006910 <loadMenuTexts+0xa48>)
 800680c:	4614      	mov	r4, r2
 800680e:	461d      	mov	r5, r3
 8006810:	6828      	ldr	r0, [r5, #0]
 8006812:	6869      	ldr	r1, [r5, #4]
 8006814:	68aa      	ldr	r2, [r5, #8]
 8006816:	68eb      	ldr	r3, [r5, #12]
 8006818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681a:	7c2b      	ldrb	r3, [r5, #16]
 800681c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 800681e:	4a3d      	ldr	r2, [pc, #244]	@ (8006914 <loadMenuTexts+0xa4c>)
 8006820:	4b3d      	ldr	r3, [pc, #244]	@ (8006918 <loadMenuTexts+0xa50>)
 8006822:	4614      	mov	r4, r2
 8006824:	461d      	mov	r5, r3
 8006826:	6828      	ldr	r0, [r5, #0]
 8006828:	6869      	ldr	r1, [r5, #4]
 800682a:	68aa      	ldr	r2, [r5, #8]
 800682c:	68eb      	ldr	r3, [r5, #12]
 800682e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006830:	7c2b      	ldrb	r3, [r5, #16]
 8006832:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006834:	4a39      	ldr	r2, [pc, #228]	@ (800691c <loadMenuTexts+0xa54>)
 8006836:	4b3a      	ldr	r3, [pc, #232]	@ (8006920 <loadMenuTexts+0xa58>)
 8006838:	4614      	mov	r4, r2
 800683a:	461d      	mov	r5, r3
 800683c:	6828      	ldr	r0, [r5, #0]
 800683e:	6869      	ldr	r1, [r5, #4]
 8006840:	68aa      	ldr	r2, [r5, #8]
 8006842:	68eb      	ldr	r3, [r5, #12]
 8006844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006846:	7c2b      	ldrb	r3, [r5, #16]
 8006848:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 800684a:	4a36      	ldr	r2, [pc, #216]	@ (8006924 <loadMenuTexts+0xa5c>)
 800684c:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <loadMenuTexts+0xa60>)
 800684e:	4614      	mov	r4, r2
 8006850:	461d      	mov	r5, r3
 8006852:	6828      	ldr	r0, [r5, #0]
 8006854:	6869      	ldr	r1, [r5, #4]
 8006856:	68aa      	ldr	r2, [r5, #8]
 8006858:	68eb      	ldr	r3, [r5, #12]
 800685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685c:	7c2b      	ldrb	r3, [r5, #16]
 800685e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006860:	4a32      	ldr	r2, [pc, #200]	@ (800692c <loadMenuTexts+0xa64>)
 8006862:	4b33      	ldr	r3, [pc, #204]	@ (8006930 <loadMenuTexts+0xa68>)
 8006864:	4614      	mov	r4, r2
 8006866:	461d      	mov	r5, r3
 8006868:	6828      	ldr	r0, [r5, #0]
 800686a:	6869      	ldr	r1, [r5, #4]
 800686c:	68aa      	ldr	r2, [r5, #8]
 800686e:	68eb      	ldr	r3, [r5, #12]
 8006870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006872:	7c2b      	ldrb	r3, [r5, #16]
 8006874:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006876:	4a2f      	ldr	r2, [pc, #188]	@ (8006934 <loadMenuTexts+0xa6c>)
 8006878:	4b2f      	ldr	r3, [pc, #188]	@ (8006938 <loadMenuTexts+0xa70>)
 800687a:	4614      	mov	r4, r2
 800687c:	461d      	mov	r5, r3
 800687e:	6828      	ldr	r0, [r5, #0]
 8006880:	6869      	ldr	r1, [r5, #4]
 8006882:	68aa      	ldr	r2, [r5, #8]
 8006884:	68eb      	ldr	r3, [r5, #12]
 8006886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006888:	7c2b      	ldrb	r3, [r5, #16]
 800688a:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 800688c:	4a2b      	ldr	r2, [pc, #172]	@ (800693c <loadMenuTexts+0xa74>)
 800688e:	4b2c      	ldr	r3, [pc, #176]	@ (8006940 <loadMenuTexts+0xa78>)
 8006890:	4614      	mov	r4, r2
 8006892:	461d      	mov	r5, r3
 8006894:	6828      	ldr	r0, [r5, #0]
 8006896:	6869      	ldr	r1, [r5, #4]
 8006898:	68aa      	ldr	r2, [r5, #8]
 800689a:	68eb      	ldr	r3, [r5, #12]
 800689c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800689e:	7c2b      	ldrb	r3, [r5, #16]
 80068a0:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80068a2:	4a28      	ldr	r2, [pc, #160]	@ (8006944 <loadMenuTexts+0xa7c>)
 80068a4:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <loadMenuTexts+0xa80>)
 80068a6:	4614      	mov	r4, r2
 80068a8:	461d      	mov	r5, r3
 80068aa:	6828      	ldr	r0, [r5, #0]
 80068ac:	6869      	ldr	r1, [r5, #4]
 80068ae:	68aa      	ldr	r2, [r5, #8]
 80068b0:	68eb      	ldr	r3, [r5, #12]
 80068b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b4:	7c2b      	ldrb	r3, [r5, #16]
 80068b6:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 80068b8:	4a24      	ldr	r2, [pc, #144]	@ (800694c <loadMenuTexts+0xa84>)
 80068ba:	4b25      	ldr	r3, [pc, #148]	@ (8006950 <loadMenuTexts+0xa88>)
 80068bc:	4614      	mov	r4, r2
 80068be:	461d      	mov	r5, r3
 80068c0:	6828      	ldr	r0, [r5, #0]
 80068c2:	6869      	ldr	r1, [r5, #4]
 80068c4:	68aa      	ldr	r2, [r5, #8]
 80068c6:	68eb      	ldr	r3, [r5, #12]
 80068c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ca:	7c2b      	ldrb	r3, [r5, #16]
 80068cc:	7023      	strb	r3, [r4, #0]
 80068ce:	f000 bd3a 	b.w	8007346 <loadMenuTexts+0x147e>
 80068d2:	bf00      	nop
 80068d4:	200017d4 	.word	0x200017d4
 80068d8:	20000cb8 	.word	0x20000cb8
 80068dc:	200017e8 	.word	0x200017e8
 80068e0:	20000d1c 	.word	0x20000d1c
 80068e4:	200017fc 	.word	0x200017fc
 80068e8:	20000d30 	.word	0x20000d30
 80068ec:	20001810 	.word	0x20001810
 80068f0:	20000d6c 	.word	0x20000d6c
 80068f4:	20001824 	.word	0x20001824
 80068f8:	20000d80 	.word	0x20000d80
 80068fc:	20001838 	.word	0x20001838
 8006900:	20000dbc 	.word	0x20000dbc
 8006904:	2000184c 	.word	0x2000184c
 8006908:	20000dd0 	.word	0x20000dd0
 800690c:	20001860 	.word	0x20001860
 8006910:	20000e0c 	.word	0x20000e0c
 8006914:	20001874 	.word	0x20001874
 8006918:	20000e34 	.word	0x20000e34
 800691c:	20001888 	.word	0x20001888
 8006920:	20000e5c 	.word	0x20000e5c
 8006924:	2000189c 	.word	0x2000189c
 8006928:	20000e84 	.word	0x20000e84
 800692c:	200018b0 	.word	0x200018b0
 8006930:	20000eac 	.word	0x20000eac
 8006934:	200018c4 	.word	0x200018c4
 8006938:	20000ed4 	.word	0x20000ed4
 800693c:	200018d8 	.word	0x200018d8
 8006940:	20000efc 	.word	0x20000efc
 8006944:	200018ec 	.word	0x200018ec
 8006948:	20000f24 	.word	0x20000f24
 800694c:	20001900 	.word	0x20001900
 8006950:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006954:	4ac6      	ldr	r2, [pc, #792]	@ (8006c70 <loadMenuTexts+0xda8>)
 8006956:	4bc7      	ldr	r3, [pc, #796]	@ (8006c74 <loadMenuTexts+0xdac>)
 8006958:	4614      	mov	r4, r2
 800695a:	461d      	mov	r5, r3
 800695c:	6828      	ldr	r0, [r5, #0]
 800695e:	6869      	ldr	r1, [r5, #4]
 8006960:	68aa      	ldr	r2, [r5, #8]
 8006962:	68eb      	ldr	r3, [r5, #12]
 8006964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006966:	7c2b      	ldrb	r3, [r5, #16]
 8006968:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 800696a:	4ac3      	ldr	r2, [pc, #780]	@ (8006c78 <loadMenuTexts+0xdb0>)
 800696c:	4bc3      	ldr	r3, [pc, #780]	@ (8006c7c <loadMenuTexts+0xdb4>)
 800696e:	4614      	mov	r4, r2
 8006970:	461d      	mov	r5, r3
 8006972:	6828      	ldr	r0, [r5, #0]
 8006974:	6869      	ldr	r1, [r5, #4]
 8006976:	68aa      	ldr	r2, [r5, #8]
 8006978:	68eb      	ldr	r3, [r5, #12]
 800697a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697c:	7c2b      	ldrb	r3, [r5, #16]
 800697e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006980:	4abf      	ldr	r2, [pc, #764]	@ (8006c80 <loadMenuTexts+0xdb8>)
 8006982:	4bc0      	ldr	r3, [pc, #768]	@ (8006c84 <loadMenuTexts+0xdbc>)
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	6828      	ldr	r0, [r5, #0]
 800698a:	6869      	ldr	r1, [r5, #4]
 800698c:	68aa      	ldr	r2, [r5, #8]
 800698e:	68eb      	ldr	r3, [r5, #12]
 8006990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006992:	7c2b      	ldrb	r3, [r5, #16]
 8006994:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006996:	4abc      	ldr	r2, [pc, #752]	@ (8006c88 <loadMenuTexts+0xdc0>)
 8006998:	4bbc      	ldr	r3, [pc, #752]	@ (8006c8c <loadMenuTexts+0xdc4>)
 800699a:	4614      	mov	r4, r2
 800699c:	461d      	mov	r5, r3
 800699e:	6828      	ldr	r0, [r5, #0]
 80069a0:	6869      	ldr	r1, [r5, #4]
 80069a2:	68aa      	ldr	r2, [r5, #8]
 80069a4:	68eb      	ldr	r3, [r5, #12]
 80069a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a8:	7c2b      	ldrb	r3, [r5, #16]
 80069aa:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80069ac:	4ab8      	ldr	r2, [pc, #736]	@ (8006c90 <loadMenuTexts+0xdc8>)
 80069ae:	4bb9      	ldr	r3, [pc, #740]	@ (8006c94 <loadMenuTexts+0xdcc>)
 80069b0:	4614      	mov	r4, r2
 80069b2:	461d      	mov	r5, r3
 80069b4:	6828      	ldr	r0, [r5, #0]
 80069b6:	6869      	ldr	r1, [r5, #4]
 80069b8:	68aa      	ldr	r2, [r5, #8]
 80069ba:	68eb      	ldr	r3, [r5, #12]
 80069bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069be:	7c2b      	ldrb	r3, [r5, #16]
 80069c0:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80069c2:	4ab5      	ldr	r2, [pc, #724]	@ (8006c98 <loadMenuTexts+0xdd0>)
 80069c4:	4bb5      	ldr	r3, [pc, #724]	@ (8006c9c <loadMenuTexts+0xdd4>)
 80069c6:	4614      	mov	r4, r2
 80069c8:	461d      	mov	r5, r3
 80069ca:	6828      	ldr	r0, [r5, #0]
 80069cc:	6869      	ldr	r1, [r5, #4]
 80069ce:	68aa      	ldr	r2, [r5, #8]
 80069d0:	68eb      	ldr	r3, [r5, #12]
 80069d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d4:	7c2b      	ldrb	r3, [r5, #16]
 80069d6:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80069d8:	4ab1      	ldr	r2, [pc, #708]	@ (8006ca0 <loadMenuTexts+0xdd8>)
 80069da:	4bb2      	ldr	r3, [pc, #712]	@ (8006ca4 <loadMenuTexts+0xddc>)
 80069dc:	4614      	mov	r4, r2
 80069de:	461d      	mov	r5, r3
 80069e0:	6828      	ldr	r0, [r5, #0]
 80069e2:	6869      	ldr	r1, [r5, #4]
 80069e4:	68aa      	ldr	r2, [r5, #8]
 80069e6:	68eb      	ldr	r3, [r5, #12]
 80069e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ea:	7c2b      	ldrb	r3, [r5, #16]
 80069ec:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80069ee:	4aae      	ldr	r2, [pc, #696]	@ (8006ca8 <loadMenuTexts+0xde0>)
 80069f0:	4bae      	ldr	r3, [pc, #696]	@ (8006cac <loadMenuTexts+0xde4>)
 80069f2:	4614      	mov	r4, r2
 80069f4:	461d      	mov	r5, r3
 80069f6:	6828      	ldr	r0, [r5, #0]
 80069f8:	6869      	ldr	r1, [r5, #4]
 80069fa:	68aa      	ldr	r2, [r5, #8]
 80069fc:	68eb      	ldr	r3, [r5, #12]
 80069fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a00:	7c2b      	ldrb	r3, [r5, #16]
 8006a02:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006a04:	4aaa      	ldr	r2, [pc, #680]	@ (8006cb0 <loadMenuTexts+0xde8>)
 8006a06:	4bab      	ldr	r3, [pc, #684]	@ (8006cb4 <loadMenuTexts+0xdec>)
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	6828      	ldr	r0, [r5, #0]
 8006a0e:	6869      	ldr	r1, [r5, #4]
 8006a10:	68aa      	ldr	r2, [r5, #8]
 8006a12:	68eb      	ldr	r3, [r5, #12]
 8006a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a16:	7c2b      	ldrb	r3, [r5, #16]
 8006a18:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a1a:	4aa7      	ldr	r2, [pc, #668]	@ (8006cb8 <loadMenuTexts+0xdf0>)
 8006a1c:	4ba7      	ldr	r3, [pc, #668]	@ (8006cbc <loadMenuTexts+0xdf4>)
 8006a1e:	4614      	mov	r4, r2
 8006a20:	461d      	mov	r5, r3
 8006a22:	6828      	ldr	r0, [r5, #0]
 8006a24:	6869      	ldr	r1, [r5, #4]
 8006a26:	68aa      	ldr	r2, [r5, #8]
 8006a28:	68eb      	ldr	r3, [r5, #12]
 8006a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2c:	7c2b      	ldrb	r3, [r5, #16]
 8006a2e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006a30:	4aa3      	ldr	r2, [pc, #652]	@ (8006cc0 <loadMenuTexts+0xdf8>)
 8006a32:	4ba4      	ldr	r3, [pc, #656]	@ (8006cc4 <loadMenuTexts+0xdfc>)
 8006a34:	4614      	mov	r4, r2
 8006a36:	461d      	mov	r5, r3
 8006a38:	6828      	ldr	r0, [r5, #0]
 8006a3a:	6869      	ldr	r1, [r5, #4]
 8006a3c:	68aa      	ldr	r2, [r5, #8]
 8006a3e:	68eb      	ldr	r3, [r5, #12]
 8006a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a42:	7c2b      	ldrb	r3, [r5, #16]
 8006a44:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006a46:	4aa0      	ldr	r2, [pc, #640]	@ (8006cc8 <loadMenuTexts+0xe00>)
 8006a48:	4ba0      	ldr	r3, [pc, #640]	@ (8006ccc <loadMenuTexts+0xe04>)
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	461d      	mov	r5, r3
 8006a4e:	6828      	ldr	r0, [r5, #0]
 8006a50:	6869      	ldr	r1, [r5, #4]
 8006a52:	68aa      	ldr	r2, [r5, #8]
 8006a54:	68eb      	ldr	r3, [r5, #12]
 8006a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a58:	7c2b      	ldrb	r3, [r5, #16]
 8006a5a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006a5c:	4a9c      	ldr	r2, [pc, #624]	@ (8006cd0 <loadMenuTexts+0xe08>)
 8006a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd4 <loadMenuTexts+0xe0c>)
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	6828      	ldr	r0, [r5, #0]
 8006a66:	6869      	ldr	r1, [r5, #4]
 8006a68:	68aa      	ldr	r2, [r5, #8]
 8006a6a:	68eb      	ldr	r3, [r5, #12]
 8006a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a6e:	7c2b      	ldrb	r3, [r5, #16]
 8006a70:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006a72:	4a99      	ldr	r2, [pc, #612]	@ (8006cd8 <loadMenuTexts+0xe10>)
 8006a74:	4b99      	ldr	r3, [pc, #612]	@ (8006cdc <loadMenuTexts+0xe14>)
 8006a76:	4614      	mov	r4, r2
 8006a78:	461d      	mov	r5, r3
 8006a7a:	6828      	ldr	r0, [r5, #0]
 8006a7c:	6869      	ldr	r1, [r5, #4]
 8006a7e:	68aa      	ldr	r2, [r5, #8]
 8006a80:	68eb      	ldr	r3, [r5, #12]
 8006a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a84:	7c2b      	ldrb	r3, [r5, #16]
 8006a86:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006a88:	4a95      	ldr	r2, [pc, #596]	@ (8006ce0 <loadMenuTexts+0xe18>)
 8006a8a:	4b96      	ldr	r3, [pc, #600]	@ (8006ce4 <loadMenuTexts+0xe1c>)
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	461d      	mov	r5, r3
 8006a90:	6828      	ldr	r0, [r5, #0]
 8006a92:	6869      	ldr	r1, [r5, #4]
 8006a94:	68aa      	ldr	r2, [r5, #8]
 8006a96:	68eb      	ldr	r3, [r5, #12]
 8006a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9a:	7c2b      	ldrb	r3, [r5, #16]
 8006a9c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006a9e:	4a92      	ldr	r2, [pc, #584]	@ (8006ce8 <loadMenuTexts+0xe20>)
 8006aa0:	4b92      	ldr	r3, [pc, #584]	@ (8006cec <loadMenuTexts+0xe24>)
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	461d      	mov	r5, r3
 8006aa6:	6828      	ldr	r0, [r5, #0]
 8006aa8:	6869      	ldr	r1, [r5, #4]
 8006aaa:	68aa      	ldr	r2, [r5, #8]
 8006aac:	68eb      	ldr	r3, [r5, #12]
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab0:	7c2b      	ldrb	r3, [r5, #16]
 8006ab2:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8006cf0 <loadMenuTexts+0xe28>)
 8006ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8006cf4 <loadMenuTexts+0xe2c>)
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	6828      	ldr	r0, [r5, #0]
 8006abe:	6869      	ldr	r1, [r5, #4]
 8006ac0:	68aa      	ldr	r2, [r5, #8]
 8006ac2:	68eb      	ldr	r3, [r5, #12]
 8006ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac6:	7c2b      	ldrb	r3, [r5, #16]
 8006ac8:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006aca:	4a8b      	ldr	r2, [pc, #556]	@ (8006cf8 <loadMenuTexts+0xe30>)
 8006acc:	4b8b      	ldr	r3, [pc, #556]	@ (8006cfc <loadMenuTexts+0xe34>)
 8006ace:	4614      	mov	r4, r2
 8006ad0:	461d      	mov	r5, r3
 8006ad2:	6828      	ldr	r0, [r5, #0]
 8006ad4:	6869      	ldr	r1, [r5, #4]
 8006ad6:	68aa      	ldr	r2, [r5, #8]
 8006ad8:	68eb      	ldr	r3, [r5, #12]
 8006ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006adc:	7c2b      	ldrb	r3, [r5, #16]
 8006ade:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006ae0:	4a87      	ldr	r2, [pc, #540]	@ (8006d00 <loadMenuTexts+0xe38>)
 8006ae2:	4b88      	ldr	r3, [pc, #544]	@ (8006d04 <loadMenuTexts+0xe3c>)
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	6828      	ldr	r0, [r5, #0]
 8006aea:	6869      	ldr	r1, [r5, #4]
 8006aec:	68aa      	ldr	r2, [r5, #8]
 8006aee:	68eb      	ldr	r3, [r5, #12]
 8006af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af2:	7c2b      	ldrb	r3, [r5, #16]
 8006af4:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006af6:	4a84      	ldr	r2, [pc, #528]	@ (8006d08 <loadMenuTexts+0xe40>)
 8006af8:	4b84      	ldr	r3, [pc, #528]	@ (8006d0c <loadMenuTexts+0xe44>)
 8006afa:	4614      	mov	r4, r2
 8006afc:	461d      	mov	r5, r3
 8006afe:	6828      	ldr	r0, [r5, #0]
 8006b00:	6869      	ldr	r1, [r5, #4]
 8006b02:	68aa      	ldr	r2, [r5, #8]
 8006b04:	68eb      	ldr	r3, [r5, #12]
 8006b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b08:	7c2b      	ldrb	r3, [r5, #16]
 8006b0a:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006b0c:	4a80      	ldr	r2, [pc, #512]	@ (8006d10 <loadMenuTexts+0xe48>)
 8006b0e:	4b81      	ldr	r3, [pc, #516]	@ (8006d14 <loadMenuTexts+0xe4c>)
 8006b10:	4614      	mov	r4, r2
 8006b12:	461d      	mov	r5, r3
 8006b14:	6828      	ldr	r0, [r5, #0]
 8006b16:	6869      	ldr	r1, [r5, #4]
 8006b18:	68aa      	ldr	r2, [r5, #8]
 8006b1a:	68eb      	ldr	r3, [r5, #12]
 8006b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b1e:	7c2b      	ldrb	r3, [r5, #16]
 8006b20:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b22:	4a7d      	ldr	r2, [pc, #500]	@ (8006d18 <loadMenuTexts+0xe50>)
 8006b24:	4b7d      	ldr	r3, [pc, #500]	@ (8006d1c <loadMenuTexts+0xe54>)
 8006b26:	4614      	mov	r4, r2
 8006b28:	461d      	mov	r5, r3
 8006b2a:	6828      	ldr	r0, [r5, #0]
 8006b2c:	6869      	ldr	r1, [r5, #4]
 8006b2e:	68aa      	ldr	r2, [r5, #8]
 8006b30:	68eb      	ldr	r3, [r5, #12]
 8006b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b34:	7c2b      	ldrb	r3, [r5, #16]
 8006b36:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006b38:	4a79      	ldr	r2, [pc, #484]	@ (8006d20 <loadMenuTexts+0xe58>)
 8006b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d24 <loadMenuTexts+0xe5c>)
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	6828      	ldr	r0, [r5, #0]
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	68aa      	ldr	r2, [r5, #8]
 8006b46:	68eb      	ldr	r3, [r5, #12]
 8006b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4a:	7c2b      	ldrb	r3, [r5, #16]
 8006b4c:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006b4e:	4a76      	ldr	r2, [pc, #472]	@ (8006d28 <loadMenuTexts+0xe60>)
 8006b50:	4b76      	ldr	r3, [pc, #472]	@ (8006d2c <loadMenuTexts+0xe64>)
 8006b52:	4614      	mov	r4, r2
 8006b54:	461d      	mov	r5, r3
 8006b56:	6828      	ldr	r0, [r5, #0]
 8006b58:	6869      	ldr	r1, [r5, #4]
 8006b5a:	68aa      	ldr	r2, [r5, #8]
 8006b5c:	68eb      	ldr	r3, [r5, #12]
 8006b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b60:	7c2b      	ldrb	r3, [r5, #16]
 8006b62:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006b64:	4a72      	ldr	r2, [pc, #456]	@ (8006d30 <loadMenuTexts+0xe68>)
 8006b66:	4b73      	ldr	r3, [pc, #460]	@ (8006d34 <loadMenuTexts+0xe6c>)
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	6828      	ldr	r0, [r5, #0]
 8006b6e:	6869      	ldr	r1, [r5, #4]
 8006b70:	68aa      	ldr	r2, [r5, #8]
 8006b72:	68eb      	ldr	r3, [r5, #12]
 8006b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b76:	7c2b      	ldrb	r3, [r5, #16]
 8006b78:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8006d38 <loadMenuTexts+0xe70>)
 8006b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8006d3c <loadMenuTexts+0xe74>)
 8006b7e:	4614      	mov	r4, r2
 8006b80:	461d      	mov	r5, r3
 8006b82:	6828      	ldr	r0, [r5, #0]
 8006b84:	6869      	ldr	r1, [r5, #4]
 8006b86:	68aa      	ldr	r2, [r5, #8]
 8006b88:	68eb      	ldr	r3, [r5, #12]
 8006b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8c:	7c2b      	ldrb	r3, [r5, #16]
 8006b8e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006b90:	4a6b      	ldr	r2, [pc, #428]	@ (8006d40 <loadMenuTexts+0xe78>)
 8006b92:	4b6c      	ldr	r3, [pc, #432]	@ (8006d44 <loadMenuTexts+0xe7c>)
 8006b94:	4614      	mov	r4, r2
 8006b96:	461d      	mov	r5, r3
 8006b98:	6828      	ldr	r0, [r5, #0]
 8006b9a:	6869      	ldr	r1, [r5, #4]
 8006b9c:	68aa      	ldr	r2, [r5, #8]
 8006b9e:	68eb      	ldr	r3, [r5, #12]
 8006ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba2:	7c2b      	ldrb	r3, [r5, #16]
 8006ba4:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006ba6:	4a68      	ldr	r2, [pc, #416]	@ (8006d48 <loadMenuTexts+0xe80>)
 8006ba8:	4b68      	ldr	r3, [pc, #416]	@ (8006d4c <loadMenuTexts+0xe84>)
 8006baa:	4614      	mov	r4, r2
 8006bac:	461d      	mov	r5, r3
 8006bae:	6828      	ldr	r0, [r5, #0]
 8006bb0:	6869      	ldr	r1, [r5, #4]
 8006bb2:	68aa      	ldr	r2, [r5, #8]
 8006bb4:	68eb      	ldr	r3, [r5, #12]
 8006bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb8:	7c2b      	ldrb	r3, [r5, #16]
 8006bba:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006bbc:	4a64      	ldr	r2, [pc, #400]	@ (8006d50 <loadMenuTexts+0xe88>)
 8006bbe:	4b65      	ldr	r3, [pc, #404]	@ (8006d54 <loadMenuTexts+0xe8c>)
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	461d      	mov	r5, r3
 8006bc4:	6828      	ldr	r0, [r5, #0]
 8006bc6:	6869      	ldr	r1, [r5, #4]
 8006bc8:	68aa      	ldr	r2, [r5, #8]
 8006bca:	68eb      	ldr	r3, [r5, #12]
 8006bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bce:	7c2b      	ldrb	r3, [r5, #16]
 8006bd0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006bd2:	4a61      	ldr	r2, [pc, #388]	@ (8006d58 <loadMenuTexts+0xe90>)
 8006bd4:	4b61      	ldr	r3, [pc, #388]	@ (8006d5c <loadMenuTexts+0xe94>)
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	461d      	mov	r5, r3
 8006bda:	6828      	ldr	r0, [r5, #0]
 8006bdc:	6869      	ldr	r1, [r5, #4]
 8006bde:	68aa      	ldr	r2, [r5, #8]
 8006be0:	68eb      	ldr	r3, [r5, #12]
 8006be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be4:	7c2b      	ldrb	r3, [r5, #16]
 8006be6:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006be8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d60 <loadMenuTexts+0xe98>)
 8006bea:	4b5e      	ldr	r3, [pc, #376]	@ (8006d64 <loadMenuTexts+0xe9c>)
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	6828      	ldr	r0, [r5, #0]
 8006bf2:	6869      	ldr	r1, [r5, #4]
 8006bf4:	68aa      	ldr	r2, [r5, #8]
 8006bf6:	68eb      	ldr	r3, [r5, #12]
 8006bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfa:	7c2b      	ldrb	r3, [r5, #16]
 8006bfc:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8006d68 <loadMenuTexts+0xea0>)
 8006c00:	4b5a      	ldr	r3, [pc, #360]	@ (8006d6c <loadMenuTexts+0xea4>)
 8006c02:	4614      	mov	r4, r2
 8006c04:	461d      	mov	r5, r3
 8006c06:	6828      	ldr	r0, [r5, #0]
 8006c08:	6869      	ldr	r1, [r5, #4]
 8006c0a:	68aa      	ldr	r2, [r5, #8]
 8006c0c:	68eb      	ldr	r3, [r5, #12]
 8006c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c10:	7c2b      	ldrb	r3, [r5, #16]
 8006c12:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c14:	4a56      	ldr	r2, [pc, #344]	@ (8006d70 <loadMenuTexts+0xea8>)
 8006c16:	4b57      	ldr	r3, [pc, #348]	@ (8006d74 <loadMenuTexts+0xeac>)
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	6828      	ldr	r0, [r5, #0]
 8006c1e:	6869      	ldr	r1, [r5, #4]
 8006c20:	68aa      	ldr	r2, [r5, #8]
 8006c22:	68eb      	ldr	r3, [r5, #12]
 8006c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c26:	7c2b      	ldrb	r3, [r5, #16]
 8006c28:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c2a:	4a53      	ldr	r2, [pc, #332]	@ (8006d78 <loadMenuTexts+0xeb0>)
 8006c2c:	4b53      	ldr	r3, [pc, #332]	@ (8006d7c <loadMenuTexts+0xeb4>)
 8006c2e:	4614      	mov	r4, r2
 8006c30:	461d      	mov	r5, r3
 8006c32:	6828      	ldr	r0, [r5, #0]
 8006c34:	6869      	ldr	r1, [r5, #4]
 8006c36:	68aa      	ldr	r2, [r5, #8]
 8006c38:	68eb      	ldr	r3, [r5, #12]
 8006c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3c:	7c2b      	ldrb	r3, [r5, #16]
 8006c3e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006c40:	4a4f      	ldr	r2, [pc, #316]	@ (8006d80 <loadMenuTexts+0xeb8>)
 8006c42:	4b50      	ldr	r3, [pc, #320]	@ (8006d84 <loadMenuTexts+0xebc>)
 8006c44:	4614      	mov	r4, r2
 8006c46:	461d      	mov	r5, r3
 8006c48:	6828      	ldr	r0, [r5, #0]
 8006c4a:	6869      	ldr	r1, [r5, #4]
 8006c4c:	68aa      	ldr	r2, [r5, #8]
 8006c4e:	68eb      	ldr	r3, [r5, #12]
 8006c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c52:	7c2b      	ldrb	r3, [r5, #16]
 8006c54:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006c56:	4a4c      	ldr	r2, [pc, #304]	@ (8006d88 <loadMenuTexts+0xec0>)
 8006c58:	4b4c      	ldr	r3, [pc, #304]	@ (8006d8c <loadMenuTexts+0xec4>)
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	6828      	ldr	r0, [r5, #0]
 8006c60:	6869      	ldr	r1, [r5, #4]
 8006c62:	68aa      	ldr	r2, [r5, #8]
 8006c64:	68eb      	ldr	r3, [r5, #12]
 8006c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c68:	7c2b      	ldrb	r3, [r5, #16]
 8006c6a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006c6c:	4a48      	ldr	r2, [pc, #288]	@ (8006d90 <loadMenuTexts+0xec8>)
 8006c6e:	e091      	b.n	8006d94 <loadMenuTexts+0xecc>
 8006c70:	20001220 	.word	0x20001220
 8006c74:	20000704 	.word	0x20000704
 8006c78:	20001234 	.word	0x20001234
 8006c7c:	20000718 	.word	0x20000718
 8006c80:	20001248 	.word	0x20001248
 8006c84:	2000072c 	.word	0x2000072c
 8006c88:	2000125c 	.word	0x2000125c
 8006c8c:	20000740 	.word	0x20000740
 8006c90:	20001270 	.word	0x20001270
 8006c94:	20000754 	.word	0x20000754
 8006c98:	20001284 	.word	0x20001284
 8006c9c:	20000768 	.word	0x20000768
 8006ca0:	20001298 	.word	0x20001298
 8006ca4:	2000077c 	.word	0x2000077c
 8006ca8:	200012ac 	.word	0x200012ac
 8006cac:	20000790 	.word	0x20000790
 8006cb0:	200012c0 	.word	0x200012c0
 8006cb4:	200007a4 	.word	0x200007a4
 8006cb8:	200012d4 	.word	0x200012d4
 8006cbc:	200007b8 	.word	0x200007b8
 8006cc0:	200012e8 	.word	0x200012e8
 8006cc4:	200007cc 	.word	0x200007cc
 8006cc8:	200012fc 	.word	0x200012fc
 8006ccc:	200007e0 	.word	0x200007e0
 8006cd0:	20001310 	.word	0x20001310
 8006cd4:	200007f4 	.word	0x200007f4
 8006cd8:	20001324 	.word	0x20001324
 8006cdc:	20000808 	.word	0x20000808
 8006ce0:	20001338 	.word	0x20001338
 8006ce4:	2000081c 	.word	0x2000081c
 8006ce8:	2000134c 	.word	0x2000134c
 8006cec:	20000830 	.word	0x20000830
 8006cf0:	20001360 	.word	0x20001360
 8006cf4:	20000844 	.word	0x20000844
 8006cf8:	20001374 	.word	0x20001374
 8006cfc:	20000858 	.word	0x20000858
 8006d00:	20001388 	.word	0x20001388
 8006d04:	2000086c 	.word	0x2000086c
 8006d08:	2000139c 	.word	0x2000139c
 8006d0c:	20000880 	.word	0x20000880
 8006d10:	200013b0 	.word	0x200013b0
 8006d14:	20000894 	.word	0x20000894
 8006d18:	200013c4 	.word	0x200013c4
 8006d1c:	200008a8 	.word	0x200008a8
 8006d20:	200013d8 	.word	0x200013d8
 8006d24:	200008bc 	.word	0x200008bc
 8006d28:	200013ec 	.word	0x200013ec
 8006d2c:	200008d0 	.word	0x200008d0
 8006d30:	20001400 	.word	0x20001400
 8006d34:	200008e4 	.word	0x200008e4
 8006d38:	20001414 	.word	0x20001414
 8006d3c:	200008f8 	.word	0x200008f8
 8006d40:	20001428 	.word	0x20001428
 8006d44:	2000090c 	.word	0x2000090c
 8006d48:	2000143c 	.word	0x2000143c
 8006d4c:	20000920 	.word	0x20000920
 8006d50:	20001450 	.word	0x20001450
 8006d54:	20000934 	.word	0x20000934
 8006d58:	20001464 	.word	0x20001464
 8006d5c:	20000948 	.word	0x20000948
 8006d60:	20001478 	.word	0x20001478
 8006d64:	2000095c 	.word	0x2000095c
 8006d68:	2000148c 	.word	0x2000148c
 8006d6c:	20000970 	.word	0x20000970
 8006d70:	200014a0 	.word	0x200014a0
 8006d74:	20000984 	.word	0x20000984
 8006d78:	200014b4 	.word	0x200014b4
 8006d7c:	20000998 	.word	0x20000998
 8006d80:	200014c8 	.word	0x200014c8
 8006d84:	200009ac 	.word	0x200009ac
 8006d88:	200014dc 	.word	0x200014dc
 8006d8c:	200009c0 	.word	0x200009c0
 8006d90:	200014f0 	.word	0x200014f0
 8006d94:	4bc7      	ldr	r3, [pc, #796]	@ (80070b4 <loadMenuTexts+0x11ec>)
 8006d96:	4614      	mov	r4, r2
 8006d98:	461d      	mov	r5, r3
 8006d9a:	6828      	ldr	r0, [r5, #0]
 8006d9c:	6869      	ldr	r1, [r5, #4]
 8006d9e:	68aa      	ldr	r2, [r5, #8]
 8006da0:	68eb      	ldr	r3, [r5, #12]
 8006da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da4:	7c2b      	ldrb	r3, [r5, #16]
 8006da6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006da8:	4ac3      	ldr	r2, [pc, #780]	@ (80070b8 <loadMenuTexts+0x11f0>)
 8006daa:	4bc4      	ldr	r3, [pc, #784]	@ (80070bc <loadMenuTexts+0x11f4>)
 8006dac:	4614      	mov	r4, r2
 8006dae:	461d      	mov	r5, r3
 8006db0:	6828      	ldr	r0, [r5, #0]
 8006db2:	6869      	ldr	r1, [r5, #4]
 8006db4:	68aa      	ldr	r2, [r5, #8]
 8006db6:	68eb      	ldr	r3, [r5, #12]
 8006db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dba:	7c2b      	ldrb	r3, [r5, #16]
 8006dbc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006dbe:	4ac0      	ldr	r2, [pc, #768]	@ (80070c0 <loadMenuTexts+0x11f8>)
 8006dc0:	4bc0      	ldr	r3, [pc, #768]	@ (80070c4 <loadMenuTexts+0x11fc>)
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	6828      	ldr	r0, [r5, #0]
 8006dc8:	6869      	ldr	r1, [r5, #4]
 8006dca:	68aa      	ldr	r2, [r5, #8]
 8006dcc:	68eb      	ldr	r3, [r5, #12]
 8006dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd0:	7c2b      	ldrb	r3, [r5, #16]
 8006dd2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006dd4:	4abc      	ldr	r2, [pc, #752]	@ (80070c8 <loadMenuTexts+0x1200>)
 8006dd6:	4bbd      	ldr	r3, [pc, #756]	@ (80070cc <loadMenuTexts+0x1204>)
 8006dd8:	4614      	mov	r4, r2
 8006dda:	461d      	mov	r5, r3
 8006ddc:	6828      	ldr	r0, [r5, #0]
 8006dde:	6869      	ldr	r1, [r5, #4]
 8006de0:	68aa      	ldr	r2, [r5, #8]
 8006de2:	68eb      	ldr	r3, [r5, #12]
 8006de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de6:	7c2b      	ldrb	r3, [r5, #16]
 8006de8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006dea:	4ab9      	ldr	r2, [pc, #740]	@ (80070d0 <loadMenuTexts+0x1208>)
 8006dec:	4bb9      	ldr	r3, [pc, #740]	@ (80070d4 <loadMenuTexts+0x120c>)
 8006dee:	4614      	mov	r4, r2
 8006df0:	461d      	mov	r5, r3
 8006df2:	6828      	ldr	r0, [r5, #0]
 8006df4:	6869      	ldr	r1, [r5, #4]
 8006df6:	68aa      	ldr	r2, [r5, #8]
 8006df8:	68eb      	ldr	r3, [r5, #12]
 8006dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfc:	7c2b      	ldrb	r3, [r5, #16]
 8006dfe:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006e00:	4ab5      	ldr	r2, [pc, #724]	@ (80070d8 <loadMenuTexts+0x1210>)
 8006e02:	4bb6      	ldr	r3, [pc, #728]	@ (80070dc <loadMenuTexts+0x1214>)
 8006e04:	4614      	mov	r4, r2
 8006e06:	461d      	mov	r5, r3
 8006e08:	6828      	ldr	r0, [r5, #0]
 8006e0a:	6869      	ldr	r1, [r5, #4]
 8006e0c:	68aa      	ldr	r2, [r5, #8]
 8006e0e:	68eb      	ldr	r3, [r5, #12]
 8006e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e12:	7c2b      	ldrb	r3, [r5, #16]
 8006e14:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e16:	4ab2      	ldr	r2, [pc, #712]	@ (80070e0 <loadMenuTexts+0x1218>)
 8006e18:	4bb2      	ldr	r3, [pc, #712]	@ (80070e4 <loadMenuTexts+0x121c>)
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	461d      	mov	r5, r3
 8006e1e:	6828      	ldr	r0, [r5, #0]
 8006e20:	6869      	ldr	r1, [r5, #4]
 8006e22:	68aa      	ldr	r2, [r5, #8]
 8006e24:	68eb      	ldr	r3, [r5, #12]
 8006e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e28:	7c2b      	ldrb	r3, [r5, #16]
 8006e2a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006e2c:	4aae      	ldr	r2, [pc, #696]	@ (80070e8 <loadMenuTexts+0x1220>)
 8006e2e:	4baf      	ldr	r3, [pc, #700]	@ (80070ec <loadMenuTexts+0x1224>)
 8006e30:	4614      	mov	r4, r2
 8006e32:	461d      	mov	r5, r3
 8006e34:	6828      	ldr	r0, [r5, #0]
 8006e36:	6869      	ldr	r1, [r5, #4]
 8006e38:	68aa      	ldr	r2, [r5, #8]
 8006e3a:	68eb      	ldr	r3, [r5, #12]
 8006e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e3e:	7c2b      	ldrb	r3, [r5, #16]
 8006e40:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006e42:	4aab      	ldr	r2, [pc, #684]	@ (80070f0 <loadMenuTexts+0x1228>)
 8006e44:	4bab      	ldr	r3, [pc, #684]	@ (80070f4 <loadMenuTexts+0x122c>)
 8006e46:	4614      	mov	r4, r2
 8006e48:	461d      	mov	r5, r3
 8006e4a:	6828      	ldr	r0, [r5, #0]
 8006e4c:	6869      	ldr	r1, [r5, #4]
 8006e4e:	68aa      	ldr	r2, [r5, #8]
 8006e50:	68eb      	ldr	r3, [r5, #12]
 8006e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e54:	7c2b      	ldrb	r3, [r5, #16]
 8006e56:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006e58:	4aa7      	ldr	r2, [pc, #668]	@ (80070f8 <loadMenuTexts+0x1230>)
 8006e5a:	4ba8      	ldr	r3, [pc, #672]	@ (80070fc <loadMenuTexts+0x1234>)
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	461d      	mov	r5, r3
 8006e60:	6828      	ldr	r0, [r5, #0]
 8006e62:	6869      	ldr	r1, [r5, #4]
 8006e64:	68aa      	ldr	r2, [r5, #8]
 8006e66:	68eb      	ldr	r3, [r5, #12]
 8006e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6a:	7c2b      	ldrb	r3, [r5, #16]
 8006e6c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006e6e:	4aa4      	ldr	r2, [pc, #656]	@ (8007100 <loadMenuTexts+0x1238>)
 8006e70:	4ba4      	ldr	r3, [pc, #656]	@ (8007104 <loadMenuTexts+0x123c>)
 8006e72:	4614      	mov	r4, r2
 8006e74:	461d      	mov	r5, r3
 8006e76:	6828      	ldr	r0, [r5, #0]
 8006e78:	6869      	ldr	r1, [r5, #4]
 8006e7a:	68aa      	ldr	r2, [r5, #8]
 8006e7c:	68eb      	ldr	r3, [r5, #12]
 8006e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e80:	7c2b      	ldrb	r3, [r5, #16]
 8006e82:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006e84:	4aa0      	ldr	r2, [pc, #640]	@ (8007108 <loadMenuTexts+0x1240>)
 8006e86:	4ba1      	ldr	r3, [pc, #644]	@ (800710c <loadMenuTexts+0x1244>)
 8006e88:	4614      	mov	r4, r2
 8006e8a:	461d      	mov	r5, r3
 8006e8c:	6828      	ldr	r0, [r5, #0]
 8006e8e:	6869      	ldr	r1, [r5, #4]
 8006e90:	68aa      	ldr	r2, [r5, #8]
 8006e92:	68eb      	ldr	r3, [r5, #12]
 8006e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e96:	7c2b      	ldrb	r3, [r5, #16]
 8006e98:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006e9a:	4a9d      	ldr	r2, [pc, #628]	@ (8007110 <loadMenuTexts+0x1248>)
 8006e9c:	4b9d      	ldr	r3, [pc, #628]	@ (8007114 <loadMenuTexts+0x124c>)
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461d      	mov	r5, r3
 8006ea2:	6828      	ldr	r0, [r5, #0]
 8006ea4:	6869      	ldr	r1, [r5, #4]
 8006ea6:	68aa      	ldr	r2, [r5, #8]
 8006ea8:	68eb      	ldr	r3, [r5, #12]
 8006eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eac:	7c2b      	ldrb	r3, [r5, #16]
 8006eae:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006eb0:	4a99      	ldr	r2, [pc, #612]	@ (8007118 <loadMenuTexts+0x1250>)
 8006eb2:	4b9a      	ldr	r3, [pc, #616]	@ (800711c <loadMenuTexts+0x1254>)
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	6828      	ldr	r0, [r5, #0]
 8006eba:	6869      	ldr	r1, [r5, #4]
 8006ebc:	68aa      	ldr	r2, [r5, #8]
 8006ebe:	68eb      	ldr	r3, [r5, #12]
 8006ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec2:	7c2b      	ldrb	r3, [r5, #16]
 8006ec4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006ec6:	4a96      	ldr	r2, [pc, #600]	@ (8007120 <loadMenuTexts+0x1258>)
 8006ec8:	4b96      	ldr	r3, [pc, #600]	@ (8007124 <loadMenuTexts+0x125c>)
 8006eca:	4614      	mov	r4, r2
 8006ecc:	461d      	mov	r5, r3
 8006ece:	6828      	ldr	r0, [r5, #0]
 8006ed0:	6869      	ldr	r1, [r5, #4]
 8006ed2:	68aa      	ldr	r2, [r5, #8]
 8006ed4:	68eb      	ldr	r3, [r5, #12]
 8006ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed8:	7c2b      	ldrb	r3, [r5, #16]
 8006eda:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006edc:	4a92      	ldr	r2, [pc, #584]	@ (8007128 <loadMenuTexts+0x1260>)
 8006ede:	4b93      	ldr	r3, [pc, #588]	@ (800712c <loadMenuTexts+0x1264>)
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	6828      	ldr	r0, [r5, #0]
 8006ee6:	6869      	ldr	r1, [r5, #4]
 8006ee8:	68aa      	ldr	r2, [r5, #8]
 8006eea:	68eb      	ldr	r3, [r5, #12]
 8006eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eee:	7c2b      	ldrb	r3, [r5, #16]
 8006ef0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006ef2:	4a8f      	ldr	r2, [pc, #572]	@ (8007130 <loadMenuTexts+0x1268>)
 8006ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8007134 <loadMenuTexts+0x126c>)
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	461d      	mov	r5, r3
 8006efa:	6828      	ldr	r0, [r5, #0]
 8006efc:	6869      	ldr	r1, [r5, #4]
 8006efe:	68aa      	ldr	r2, [r5, #8]
 8006f00:	68eb      	ldr	r3, [r5, #12]
 8006f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f04:	7c2b      	ldrb	r3, [r5, #16]
 8006f06:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006f08:	4a8b      	ldr	r2, [pc, #556]	@ (8007138 <loadMenuTexts+0x1270>)
 8006f0a:	4b8c      	ldr	r3, [pc, #560]	@ (800713c <loadMenuTexts+0x1274>)
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	461d      	mov	r5, r3
 8006f10:	6828      	ldr	r0, [r5, #0]
 8006f12:	6869      	ldr	r1, [r5, #4]
 8006f14:	68aa      	ldr	r2, [r5, #8]
 8006f16:	68eb      	ldr	r3, [r5, #12]
 8006f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1a:	7c2b      	ldrb	r3, [r5, #16]
 8006f1c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f1e:	4a88      	ldr	r2, [pc, #544]	@ (8007140 <loadMenuTexts+0x1278>)
 8006f20:	4b88      	ldr	r3, [pc, #544]	@ (8007144 <loadMenuTexts+0x127c>)
 8006f22:	4614      	mov	r4, r2
 8006f24:	461d      	mov	r5, r3
 8006f26:	6828      	ldr	r0, [r5, #0]
 8006f28:	6869      	ldr	r1, [r5, #4]
 8006f2a:	68aa      	ldr	r2, [r5, #8]
 8006f2c:	68eb      	ldr	r3, [r5, #12]
 8006f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f30:	7c2b      	ldrb	r3, [r5, #16]
 8006f32:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006f34:	4a84      	ldr	r2, [pc, #528]	@ (8007148 <loadMenuTexts+0x1280>)
 8006f36:	4b85      	ldr	r3, [pc, #532]	@ (800714c <loadMenuTexts+0x1284>)
 8006f38:	4614      	mov	r4, r2
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	6828      	ldr	r0, [r5, #0]
 8006f3e:	6869      	ldr	r1, [r5, #4]
 8006f40:	68aa      	ldr	r2, [r5, #8]
 8006f42:	68eb      	ldr	r3, [r5, #12]
 8006f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f46:	7c2b      	ldrb	r3, [r5, #16]
 8006f48:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006f4a:	4a81      	ldr	r2, [pc, #516]	@ (8007150 <loadMenuTexts+0x1288>)
 8006f4c:	4b81      	ldr	r3, [pc, #516]	@ (8007154 <loadMenuTexts+0x128c>)
 8006f4e:	4614      	mov	r4, r2
 8006f50:	461d      	mov	r5, r3
 8006f52:	6828      	ldr	r0, [r5, #0]
 8006f54:	6869      	ldr	r1, [r5, #4]
 8006f56:	68aa      	ldr	r2, [r5, #8]
 8006f58:	68eb      	ldr	r3, [r5, #12]
 8006f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5c:	7c2b      	ldrb	r3, [r5, #16]
 8006f5e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006f60:	4a7d      	ldr	r2, [pc, #500]	@ (8007158 <loadMenuTexts+0x1290>)
 8006f62:	4b7e      	ldr	r3, [pc, #504]	@ (800715c <loadMenuTexts+0x1294>)
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	6828      	ldr	r0, [r5, #0]
 8006f6a:	6869      	ldr	r1, [r5, #4]
 8006f6c:	68aa      	ldr	r2, [r5, #8]
 8006f6e:	68eb      	ldr	r3, [r5, #12]
 8006f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f72:	7c2b      	ldrb	r3, [r5, #16]
 8006f74:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006f76:	4a7a      	ldr	r2, [pc, #488]	@ (8007160 <loadMenuTexts+0x1298>)
 8006f78:	4b7a      	ldr	r3, [pc, #488]	@ (8007164 <loadMenuTexts+0x129c>)
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	461d      	mov	r5, r3
 8006f7e:	6828      	ldr	r0, [r5, #0]
 8006f80:	6869      	ldr	r1, [r5, #4]
 8006f82:	68aa      	ldr	r2, [r5, #8]
 8006f84:	68eb      	ldr	r3, [r5, #12]
 8006f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f88:	7c2b      	ldrb	r3, [r5, #16]
 8006f8a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006f8c:	4a76      	ldr	r2, [pc, #472]	@ (8007168 <loadMenuTexts+0x12a0>)
 8006f8e:	4b77      	ldr	r3, [pc, #476]	@ (800716c <loadMenuTexts+0x12a4>)
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	6828      	ldr	r0, [r5, #0]
 8006f96:	6869      	ldr	r1, [r5, #4]
 8006f98:	68aa      	ldr	r2, [r5, #8]
 8006f9a:	68eb      	ldr	r3, [r5, #12]
 8006f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9e:	7c2b      	ldrb	r3, [r5, #16]
 8006fa0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006fa2:	4a73      	ldr	r2, [pc, #460]	@ (8007170 <loadMenuTexts+0x12a8>)
 8006fa4:	4b73      	ldr	r3, [pc, #460]	@ (8007174 <loadMenuTexts+0x12ac>)
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461d      	mov	r5, r3
 8006faa:	6828      	ldr	r0, [r5, #0]
 8006fac:	6869      	ldr	r1, [r5, #4]
 8006fae:	68aa      	ldr	r2, [r5, #8]
 8006fb0:	68eb      	ldr	r3, [r5, #12]
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	7c2b      	ldrb	r3, [r5, #16]
 8006fb6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006fb8:	4a6f      	ldr	r2, [pc, #444]	@ (8007178 <loadMenuTexts+0x12b0>)
 8006fba:	4b70      	ldr	r3, [pc, #448]	@ (800717c <loadMenuTexts+0x12b4>)
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	6828      	ldr	r0, [r5, #0]
 8006fc2:	6869      	ldr	r1, [r5, #4]
 8006fc4:	68aa      	ldr	r2, [r5, #8]
 8006fc6:	68eb      	ldr	r3, [r5, #12]
 8006fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fca:	7c2b      	ldrb	r3, [r5, #16]
 8006fcc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8006fce:	4a6c      	ldr	r2, [pc, #432]	@ (8007180 <loadMenuTexts+0x12b8>)
 8006fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8007184 <loadMenuTexts+0x12bc>)
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	461d      	mov	r5, r3
 8006fd6:	6828      	ldr	r0, [r5, #0]
 8006fd8:	6869      	ldr	r1, [r5, #4]
 8006fda:	68aa      	ldr	r2, [r5, #8]
 8006fdc:	68eb      	ldr	r3, [r5, #12]
 8006fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe0:	7c2b      	ldrb	r3, [r5, #16]
 8006fe2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8006fe4:	4a68      	ldr	r2, [pc, #416]	@ (8007188 <loadMenuTexts+0x12c0>)
 8006fe6:	4b69      	ldr	r3, [pc, #420]	@ (800718c <loadMenuTexts+0x12c4>)
 8006fe8:	4614      	mov	r4, r2
 8006fea:	461d      	mov	r5, r3
 8006fec:	6828      	ldr	r0, [r5, #0]
 8006fee:	6869      	ldr	r1, [r5, #4]
 8006ff0:	68aa      	ldr	r2, [r5, #8]
 8006ff2:	68eb      	ldr	r3, [r5, #12]
 8006ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff6:	7c2b      	ldrb	r3, [r5, #16]
 8006ff8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8006ffa:	4a65      	ldr	r2, [pc, #404]	@ (8007190 <loadMenuTexts+0x12c8>)
 8006ffc:	4b65      	ldr	r3, [pc, #404]	@ (8007194 <loadMenuTexts+0x12cc>)
 8006ffe:	4614      	mov	r4, r2
 8007000:	461d      	mov	r5, r3
 8007002:	6828      	ldr	r0, [r5, #0]
 8007004:	6869      	ldr	r1, [r5, #4]
 8007006:	68aa      	ldr	r2, [r5, #8]
 8007008:	68eb      	ldr	r3, [r5, #12]
 800700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700c:	7c2b      	ldrb	r3, [r5, #16]
 800700e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007010:	4a61      	ldr	r2, [pc, #388]	@ (8007198 <loadMenuTexts+0x12d0>)
 8007012:	4b62      	ldr	r3, [pc, #392]	@ (800719c <loadMenuTexts+0x12d4>)
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	6828      	ldr	r0, [r5, #0]
 800701a:	6869      	ldr	r1, [r5, #4]
 800701c:	68aa      	ldr	r2, [r5, #8]
 800701e:	68eb      	ldr	r3, [r5, #12]
 8007020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007022:	7c2b      	ldrb	r3, [r5, #16]
 8007024:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007026:	4a5e      	ldr	r2, [pc, #376]	@ (80071a0 <loadMenuTexts+0x12d8>)
 8007028:	4b5e      	ldr	r3, [pc, #376]	@ (80071a4 <loadMenuTexts+0x12dc>)
 800702a:	4614      	mov	r4, r2
 800702c:	461d      	mov	r5, r3
 800702e:	6828      	ldr	r0, [r5, #0]
 8007030:	6869      	ldr	r1, [r5, #4]
 8007032:	68aa      	ldr	r2, [r5, #8]
 8007034:	68eb      	ldr	r3, [r5, #12]
 8007036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007038:	7c2b      	ldrb	r3, [r5, #16]
 800703a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 800703c:	4a5a      	ldr	r2, [pc, #360]	@ (80071a8 <loadMenuTexts+0x12e0>)
 800703e:	4b5b      	ldr	r3, [pc, #364]	@ (80071ac <loadMenuTexts+0x12e4>)
 8007040:	4614      	mov	r4, r2
 8007042:	461d      	mov	r5, r3
 8007044:	6828      	ldr	r0, [r5, #0]
 8007046:	6869      	ldr	r1, [r5, #4]
 8007048:	68aa      	ldr	r2, [r5, #8]
 800704a:	68eb      	ldr	r3, [r5, #12]
 800704c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800704e:	7c2b      	ldrb	r3, [r5, #16]
 8007050:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007052:	4a57      	ldr	r2, [pc, #348]	@ (80071b0 <loadMenuTexts+0x12e8>)
 8007054:	4b57      	ldr	r3, [pc, #348]	@ (80071b4 <loadMenuTexts+0x12ec>)
 8007056:	4614      	mov	r4, r2
 8007058:	461d      	mov	r5, r3
 800705a:	6828      	ldr	r0, [r5, #0]
 800705c:	6869      	ldr	r1, [r5, #4]
 800705e:	68aa      	ldr	r2, [r5, #8]
 8007060:	68eb      	ldr	r3, [r5, #12]
 8007062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007064:	7c2b      	ldrb	r3, [r5, #16]
 8007066:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007068:	4a53      	ldr	r2, [pc, #332]	@ (80071b8 <loadMenuTexts+0x12f0>)
 800706a:	4b54      	ldr	r3, [pc, #336]	@ (80071bc <loadMenuTexts+0x12f4>)
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	6828      	ldr	r0, [r5, #0]
 8007072:	6869      	ldr	r1, [r5, #4]
 8007074:	68aa      	ldr	r2, [r5, #8]
 8007076:	68eb      	ldr	r3, [r5, #12]
 8007078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707a:	7c2b      	ldrb	r3, [r5, #16]
 800707c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800707e:	4a50      	ldr	r2, [pc, #320]	@ (80071c0 <loadMenuTexts+0x12f8>)
 8007080:	4b50      	ldr	r3, [pc, #320]	@ (80071c4 <loadMenuTexts+0x12fc>)
 8007082:	4614      	mov	r4, r2
 8007084:	461d      	mov	r5, r3
 8007086:	6828      	ldr	r0, [r5, #0]
 8007088:	6869      	ldr	r1, [r5, #4]
 800708a:	68aa      	ldr	r2, [r5, #8]
 800708c:	68eb      	ldr	r3, [r5, #12]
 800708e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007090:	7c2b      	ldrb	r3, [r5, #16]
 8007092:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007094:	4a4c      	ldr	r2, [pc, #304]	@ (80071c8 <loadMenuTexts+0x1300>)
 8007096:	4b4d      	ldr	r3, [pc, #308]	@ (80071cc <loadMenuTexts+0x1304>)
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	6828      	ldr	r0, [r5, #0]
 800709e:	6869      	ldr	r1, [r5, #4]
 80070a0:	68aa      	ldr	r2, [r5, #8]
 80070a2:	68eb      	ldr	r3, [r5, #12]
 80070a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a6:	7c2b      	ldrb	r3, [r5, #16]
 80070a8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80070aa:	4a49      	ldr	r2, [pc, #292]	@ (80071d0 <loadMenuTexts+0x1308>)
 80070ac:	4b49      	ldr	r3, [pc, #292]	@ (80071d4 <loadMenuTexts+0x130c>)
 80070ae:	4614      	mov	r4, r2
 80070b0:	461d      	mov	r5, r3
 80070b2:	e091      	b.n	80071d8 <loadMenuTexts+0x1310>
 80070b4:	200009d4 	.word	0x200009d4
 80070b8:	20001504 	.word	0x20001504
 80070bc:	200009e8 	.word	0x200009e8
 80070c0:	20001518 	.word	0x20001518
 80070c4:	200009fc 	.word	0x200009fc
 80070c8:	2000152c 	.word	0x2000152c
 80070cc:	20000a10 	.word	0x20000a10
 80070d0:	20001540 	.word	0x20001540
 80070d4:	20000a24 	.word	0x20000a24
 80070d8:	20001554 	.word	0x20001554
 80070dc:	20000a38 	.word	0x20000a38
 80070e0:	20001568 	.word	0x20001568
 80070e4:	20000a4c 	.word	0x20000a4c
 80070e8:	2000157c 	.word	0x2000157c
 80070ec:	20000a60 	.word	0x20000a60
 80070f0:	20001590 	.word	0x20001590
 80070f4:	20000a74 	.word	0x20000a74
 80070f8:	200015a4 	.word	0x200015a4
 80070fc:	20000a88 	.word	0x20000a88
 8007100:	200015b8 	.word	0x200015b8
 8007104:	20000a9c 	.word	0x20000a9c
 8007108:	200015cc 	.word	0x200015cc
 800710c:	20000ab0 	.word	0x20000ab0
 8007110:	200015e0 	.word	0x200015e0
 8007114:	20000ac4 	.word	0x20000ac4
 8007118:	200015f4 	.word	0x200015f4
 800711c:	20000ad8 	.word	0x20000ad8
 8007120:	20001608 	.word	0x20001608
 8007124:	20000aec 	.word	0x20000aec
 8007128:	2000161c 	.word	0x2000161c
 800712c:	20000b00 	.word	0x20000b00
 8007130:	20001630 	.word	0x20001630
 8007134:	20000b14 	.word	0x20000b14
 8007138:	20001644 	.word	0x20001644
 800713c:	20000b28 	.word	0x20000b28
 8007140:	20001658 	.word	0x20001658
 8007144:	20000b3c 	.word	0x20000b3c
 8007148:	2000166c 	.word	0x2000166c
 800714c:	20000b50 	.word	0x20000b50
 8007150:	20001680 	.word	0x20001680
 8007154:	20000b64 	.word	0x20000b64
 8007158:	20001694 	.word	0x20001694
 800715c:	20000b78 	.word	0x20000b78
 8007160:	200016a8 	.word	0x200016a8
 8007164:	20000b8c 	.word	0x20000b8c
 8007168:	200016bc 	.word	0x200016bc
 800716c:	20000ba0 	.word	0x20000ba0
 8007170:	200016d0 	.word	0x200016d0
 8007174:	20000bb4 	.word	0x20000bb4
 8007178:	200016e4 	.word	0x200016e4
 800717c:	20000bc8 	.word	0x20000bc8
 8007180:	200016f8 	.word	0x200016f8
 8007184:	20000bdc 	.word	0x20000bdc
 8007188:	2000170c 	.word	0x2000170c
 800718c:	20000bf0 	.word	0x20000bf0
 8007190:	20001720 	.word	0x20001720
 8007194:	20000c04 	.word	0x20000c04
 8007198:	20001734 	.word	0x20001734
 800719c:	20000c18 	.word	0x20000c18
 80071a0:	20001748 	.word	0x20001748
 80071a4:	20000c2c 	.word	0x20000c2c
 80071a8:	2000175c 	.word	0x2000175c
 80071ac:	20000c40 	.word	0x20000c40
 80071b0:	20001770 	.word	0x20001770
 80071b4:	20000c54 	.word	0x20000c54
 80071b8:	20001784 	.word	0x20001784
 80071bc:	20000c68 	.word	0x20000c68
 80071c0:	20001798 	.word	0x20001798
 80071c4:	20000cf4 	.word	0x20000cf4
 80071c8:	200017ac 	.word	0x200017ac
 80071cc:	20000d08 	.word	0x20000d08
 80071d0:	200017c0 	.word	0x200017c0
 80071d4:	20000ccc 	.word	0x20000ccc
 80071d8:	6828      	ldr	r0, [r5, #0]
 80071da:	6869      	ldr	r1, [r5, #4]
 80071dc:	68aa      	ldr	r2, [r5, #8]
 80071de:	68eb      	ldr	r3, [r5, #12]
 80071e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e2:	7c2b      	ldrb	r3, [r5, #16]
 80071e4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80071e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007354 <loadMenuTexts+0x148c>)
 80071e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007358 <loadMenuTexts+0x1490>)
 80071ea:	4614      	mov	r4, r2
 80071ec:	461d      	mov	r5, r3
 80071ee:	6828      	ldr	r0, [r5, #0]
 80071f0:	6869      	ldr	r1, [r5, #4]
 80071f2:	68aa      	ldr	r2, [r5, #8]
 80071f4:	68eb      	ldr	r3, [r5, #12]
 80071f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071f8:	7c2b      	ldrb	r3, [r5, #16]
 80071fa:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80071fc:	4a57      	ldr	r2, [pc, #348]	@ (800735c <loadMenuTexts+0x1494>)
 80071fe:	4b58      	ldr	r3, [pc, #352]	@ (8007360 <loadMenuTexts+0x1498>)
 8007200:	4614      	mov	r4, r2
 8007202:	461d      	mov	r5, r3
 8007204:	6828      	ldr	r0, [r5, #0]
 8007206:	6869      	ldr	r1, [r5, #4]
 8007208:	68aa      	ldr	r2, [r5, #8]
 800720a:	68eb      	ldr	r3, [r5, #12]
 800720c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800720e:	7c2b      	ldrb	r3, [r5, #16]
 8007210:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007212:	4a54      	ldr	r2, [pc, #336]	@ (8007364 <loadMenuTexts+0x149c>)
 8007214:	4b54      	ldr	r3, [pc, #336]	@ (8007368 <loadMenuTexts+0x14a0>)
 8007216:	4614      	mov	r4, r2
 8007218:	461d      	mov	r5, r3
 800721a:	6828      	ldr	r0, [r5, #0]
 800721c:	6869      	ldr	r1, [r5, #4]
 800721e:	68aa      	ldr	r2, [r5, #8]
 8007220:	68eb      	ldr	r3, [r5, #12]
 8007222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007224:	7c2b      	ldrb	r3, [r5, #16]
 8007226:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007228:	4a50      	ldr	r2, [pc, #320]	@ (800736c <loadMenuTexts+0x14a4>)
 800722a:	4b51      	ldr	r3, [pc, #324]	@ (8007370 <loadMenuTexts+0x14a8>)
 800722c:	4614      	mov	r4, r2
 800722e:	461d      	mov	r5, r3
 8007230:	6828      	ldr	r0, [r5, #0]
 8007232:	6869      	ldr	r1, [r5, #4]
 8007234:	68aa      	ldr	r2, [r5, #8]
 8007236:	68eb      	ldr	r3, [r5, #12]
 8007238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723a:	7c2b      	ldrb	r3, [r5, #16]
 800723c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800723e:	4a4d      	ldr	r2, [pc, #308]	@ (8007374 <loadMenuTexts+0x14ac>)
 8007240:	4b4d      	ldr	r3, [pc, #308]	@ (8007378 <loadMenuTexts+0x14b0>)
 8007242:	4614      	mov	r4, r2
 8007244:	461d      	mov	r5, r3
 8007246:	6828      	ldr	r0, [r5, #0]
 8007248:	6869      	ldr	r1, [r5, #4]
 800724a:	68aa      	ldr	r2, [r5, #8]
 800724c:	68eb      	ldr	r3, [r5, #12]
 800724e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007250:	7c2b      	ldrb	r3, [r5, #16]
 8007252:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007254:	4a49      	ldr	r2, [pc, #292]	@ (800737c <loadMenuTexts+0x14b4>)
 8007256:	4b4a      	ldr	r3, [pc, #296]	@ (8007380 <loadMenuTexts+0x14b8>)
 8007258:	4614      	mov	r4, r2
 800725a:	461d      	mov	r5, r3
 800725c:	6828      	ldr	r0, [r5, #0]
 800725e:	6869      	ldr	r1, [r5, #4]
 8007260:	68aa      	ldr	r2, [r5, #8]
 8007262:	68eb      	ldr	r3, [r5, #12]
 8007264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007266:	7c2b      	ldrb	r3, [r5, #16]
 8007268:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800726a:	4a46      	ldr	r2, [pc, #280]	@ (8007384 <loadMenuTexts+0x14bc>)
 800726c:	4b46      	ldr	r3, [pc, #280]	@ (8007388 <loadMenuTexts+0x14c0>)
 800726e:	4614      	mov	r4, r2
 8007270:	461d      	mov	r5, r3
 8007272:	6828      	ldr	r0, [r5, #0]
 8007274:	6869      	ldr	r1, [r5, #4]
 8007276:	68aa      	ldr	r2, [r5, #8]
 8007278:	68eb      	ldr	r3, [r5, #12]
 800727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727c:	7c2b      	ldrb	r3, [r5, #16]
 800727e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007280:	4a42      	ldr	r2, [pc, #264]	@ (800738c <loadMenuTexts+0x14c4>)
 8007282:	4b43      	ldr	r3, [pc, #268]	@ (8007390 <loadMenuTexts+0x14c8>)
 8007284:	4614      	mov	r4, r2
 8007286:	461d      	mov	r5, r3
 8007288:	6828      	ldr	r0, [r5, #0]
 800728a:	6869      	ldr	r1, [r5, #4]
 800728c:	68aa      	ldr	r2, [r5, #8]
 800728e:	68eb      	ldr	r3, [r5, #12]
 8007290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007292:	7c2b      	ldrb	r3, [r5, #16]
 8007294:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007296:	4a3f      	ldr	r2, [pc, #252]	@ (8007394 <loadMenuTexts+0x14cc>)
 8007298:	4b3f      	ldr	r3, [pc, #252]	@ (8007398 <loadMenuTexts+0x14d0>)
 800729a:	4614      	mov	r4, r2
 800729c:	461d      	mov	r5, r3
 800729e:	6828      	ldr	r0, [r5, #0]
 80072a0:	6869      	ldr	r1, [r5, #4]
 80072a2:	68aa      	ldr	r2, [r5, #8]
 80072a4:	68eb      	ldr	r3, [r5, #12]
 80072a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a8:	7c2b      	ldrb	r3, [r5, #16]
 80072aa:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80072ac:	4a3b      	ldr	r2, [pc, #236]	@ (800739c <loadMenuTexts+0x14d4>)
 80072ae:	4b3c      	ldr	r3, [pc, #240]	@ (80073a0 <loadMenuTexts+0x14d8>)
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	6828      	ldr	r0, [r5, #0]
 80072b6:	6869      	ldr	r1, [r5, #4]
 80072b8:	68aa      	ldr	r2, [r5, #8]
 80072ba:	68eb      	ldr	r3, [r5, #12]
 80072bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072be:	7c2b      	ldrb	r3, [r5, #16]
 80072c0:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80072c2:	4a38      	ldr	r2, [pc, #224]	@ (80073a4 <loadMenuTexts+0x14dc>)
 80072c4:	4b38      	ldr	r3, [pc, #224]	@ (80073a8 <loadMenuTexts+0x14e0>)
 80072c6:	4614      	mov	r4, r2
 80072c8:	461d      	mov	r5, r3
 80072ca:	6828      	ldr	r0, [r5, #0]
 80072cc:	6869      	ldr	r1, [r5, #4]
 80072ce:	68aa      	ldr	r2, [r5, #8]
 80072d0:	68eb      	ldr	r3, [r5, #12]
 80072d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d4:	7c2b      	ldrb	r3, [r5, #16]
 80072d6:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80072d8:	4a34      	ldr	r2, [pc, #208]	@ (80073ac <loadMenuTexts+0x14e4>)
 80072da:	4b35      	ldr	r3, [pc, #212]	@ (80073b0 <loadMenuTexts+0x14e8>)
 80072dc:	4614      	mov	r4, r2
 80072de:	461d      	mov	r5, r3
 80072e0:	6828      	ldr	r0, [r5, #0]
 80072e2:	6869      	ldr	r1, [r5, #4]
 80072e4:	68aa      	ldr	r2, [r5, #8]
 80072e6:	68eb      	ldr	r3, [r5, #12]
 80072e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ea:	7c2b      	ldrb	r3, [r5, #16]
 80072ec:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80072ee:	4a31      	ldr	r2, [pc, #196]	@ (80073b4 <loadMenuTexts+0x14ec>)
 80072f0:	4b31      	ldr	r3, [pc, #196]	@ (80073b8 <loadMenuTexts+0x14f0>)
 80072f2:	4614      	mov	r4, r2
 80072f4:	461d      	mov	r5, r3
 80072f6:	6828      	ldr	r0, [r5, #0]
 80072f8:	6869      	ldr	r1, [r5, #4]
 80072fa:	68aa      	ldr	r2, [r5, #8]
 80072fc:	68eb      	ldr	r3, [r5, #12]
 80072fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007300:	7c2b      	ldrb	r3, [r5, #16]
 8007302:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007304:	4a2d      	ldr	r2, [pc, #180]	@ (80073bc <loadMenuTexts+0x14f4>)
 8007306:	4b2e      	ldr	r3, [pc, #184]	@ (80073c0 <loadMenuTexts+0x14f8>)
 8007308:	4614      	mov	r4, r2
 800730a:	461d      	mov	r5, r3
 800730c:	6828      	ldr	r0, [r5, #0]
 800730e:	6869      	ldr	r1, [r5, #4]
 8007310:	68aa      	ldr	r2, [r5, #8]
 8007312:	68eb      	ldr	r3, [r5, #12]
 8007314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007316:	7c2b      	ldrb	r3, [r5, #16]
 8007318:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800731a:	4a2a      	ldr	r2, [pc, #168]	@ (80073c4 <loadMenuTexts+0x14fc>)
 800731c:	4b2a      	ldr	r3, [pc, #168]	@ (80073c8 <loadMenuTexts+0x1500>)
 800731e:	4614      	mov	r4, r2
 8007320:	461d      	mov	r5, r3
 8007322:	6828      	ldr	r0, [r5, #0]
 8007324:	6869      	ldr	r1, [r5, #4]
 8007326:	68aa      	ldr	r2, [r5, #8]
 8007328:	68eb      	ldr	r3, [r5, #12]
 800732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732c:	7c2b      	ldrb	r3, [r5, #16]
 800732e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007330:	4a26      	ldr	r2, [pc, #152]	@ (80073cc <loadMenuTexts+0x1504>)
 8007332:	4b27      	ldr	r3, [pc, #156]	@ (80073d0 <loadMenuTexts+0x1508>)
 8007334:	4614      	mov	r4, r2
 8007336:	461d      	mov	r5, r3
 8007338:	6828      	ldr	r0, [r5, #0]
 800733a:	6869      	ldr	r1, [r5, #4]
 800733c:	68aa      	ldr	r2, [r5, #8]
 800733e:	68eb      	ldr	r3, [r5, #12]
 8007340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007342:	7c2b      	ldrb	r3, [r5, #16]
 8007344:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007346:	f000 f845 	bl	80073d4 <menuVariableFinisher>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bdb0      	pop	{r4, r5, r7, pc}
 8007352:	bf00      	nop
 8007354:	200017d4 	.word	0x200017d4
 8007358:	20000ce0 	.word	0x20000ce0
 800735c:	200017e8 	.word	0x200017e8
 8007360:	20000d44 	.word	0x20000d44
 8007364:	200017fc 	.word	0x200017fc
 8007368:	20000d58 	.word	0x20000d58
 800736c:	20001810 	.word	0x20001810
 8007370:	20000d94 	.word	0x20000d94
 8007374:	20001824 	.word	0x20001824
 8007378:	20000da8 	.word	0x20000da8
 800737c:	20001838 	.word	0x20001838
 8007380:	20000de4 	.word	0x20000de4
 8007384:	2000184c 	.word	0x2000184c
 8007388:	20000df8 	.word	0x20000df8
 800738c:	20001860 	.word	0x20001860
 8007390:	20000e20 	.word	0x20000e20
 8007394:	20001874 	.word	0x20001874
 8007398:	20000e48 	.word	0x20000e48
 800739c:	20001888 	.word	0x20001888
 80073a0:	20000e70 	.word	0x20000e70
 80073a4:	2000189c 	.word	0x2000189c
 80073a8:	20000e98 	.word	0x20000e98
 80073ac:	200018b0 	.word	0x200018b0
 80073b0:	20000ec0 	.word	0x20000ec0
 80073b4:	200018c4 	.word	0x200018c4
 80073b8:	20000ee8 	.word	0x20000ee8
 80073bc:	200018d8 	.word	0x200018d8
 80073c0:	20000f10 	.word	0x20000f10
 80073c4:	200018ec 	.word	0x200018ec
 80073c8:	20000f38 	.word	0x20000f38
 80073cc:	20001900 	.word	0x20001900
 80073d0:	20000f60 	.word	0x20000f60

080073d4 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80073d8:	4b99      	ldr	r3, [pc, #612]	@ (8007640 <menuVariableFinisher+0x26c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80073de:	4b99      	ldr	r3, [pc, #612]	@ (8007644 <menuVariableFinisher+0x270>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80073e4:	4b98      	ldr	r3, [pc, #608]	@ (8007648 <menuVariableFinisher+0x274>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80073ea:	4b98      	ldr	r3, [pc, #608]	@ (800764c <menuVariableFinisher+0x278>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80073f0:	4b97      	ldr	r3, [pc, #604]	@ (8007650 <menuVariableFinisher+0x27c>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80073f6:	4b97      	ldr	r3, [pc, #604]	@ (8007654 <menuVariableFinisher+0x280>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80073fc:	4b96      	ldr	r3, [pc, #600]	@ (8007658 <menuVariableFinisher+0x284>)
 80073fe:	2200      	movs	r2, #0
 8007400:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007402:	4b96      	ldr	r3, [pc, #600]	@ (800765c <menuVariableFinisher+0x288>)
 8007404:	2200      	movs	r2, #0
 8007406:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007408:	4b95      	ldr	r3, [pc, #596]	@ (8007660 <menuVariableFinisher+0x28c>)
 800740a:	2200      	movs	r2, #0
 800740c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800740e:	4b95      	ldr	r3, [pc, #596]	@ (8007664 <menuVariableFinisher+0x290>)
 8007410:	2200      	movs	r2, #0
 8007412:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007414:	4b94      	ldr	r3, [pc, #592]	@ (8007668 <menuVariableFinisher+0x294>)
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800741a:	4b94      	ldr	r3, [pc, #592]	@ (800766c <menuVariableFinisher+0x298>)
 800741c:	2200      	movs	r2, #0
 800741e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007420:	4b93      	ldr	r3, [pc, #588]	@ (8007670 <menuVariableFinisher+0x29c>)
 8007422:	2200      	movs	r2, #0
 8007424:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007426:	4b93      	ldr	r3, [pc, #588]	@ (8007674 <menuVariableFinisher+0x2a0>)
 8007428:	2200      	movs	r2, #0
 800742a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 800742c:	4b92      	ldr	r3, [pc, #584]	@ (8007678 <menuVariableFinisher+0x2a4>)
 800742e:	2200      	movs	r2, #0
 8007430:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007432:	4b92      	ldr	r3, [pc, #584]	@ (800767c <menuVariableFinisher+0x2a8>)
 8007434:	2200      	movs	r2, #0
 8007436:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007438:	4b91      	ldr	r3, [pc, #580]	@ (8007680 <menuVariableFinisher+0x2ac>)
 800743a:	2200      	movs	r2, #0
 800743c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800743e:	4b91      	ldr	r3, [pc, #580]	@ (8007684 <menuVariableFinisher+0x2b0>)
 8007440:	2200      	movs	r2, #0
 8007442:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007444:	4b90      	ldr	r3, [pc, #576]	@ (8007688 <menuVariableFinisher+0x2b4>)
 8007446:	2200      	movs	r2, #0
 8007448:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 800744a:	4b90      	ldr	r3, [pc, #576]	@ (800768c <menuVariableFinisher+0x2b8>)
 800744c:	2200      	movs	r2, #0
 800744e:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007450:	4b8f      	ldr	r3, [pc, #572]	@ (8007690 <menuVariableFinisher+0x2bc>)
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007456:	4b8f      	ldr	r3, [pc, #572]	@ (8007694 <menuVariableFinisher+0x2c0>)
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 800745c:	4b8e      	ldr	r3, [pc, #568]	@ (8007698 <menuVariableFinisher+0x2c4>)
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007462:	4b8e      	ldr	r3, [pc, #568]	@ (800769c <menuVariableFinisher+0x2c8>)
 8007464:	2200      	movs	r2, #0
 8007466:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007468:	4b8d      	ldr	r3, [pc, #564]	@ (80076a0 <menuVariableFinisher+0x2cc>)
 800746a:	2200      	movs	r2, #0
 800746c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800746e:	4b8d      	ldr	r3, [pc, #564]	@ (80076a4 <menuVariableFinisher+0x2d0>)
 8007470:	2200      	movs	r2, #0
 8007472:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007474:	4b8c      	ldr	r3, [pc, #560]	@ (80076a8 <menuVariableFinisher+0x2d4>)
 8007476:	2200      	movs	r2, #0
 8007478:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 800747a:	4b8c      	ldr	r3, [pc, #560]	@ (80076ac <menuVariableFinisher+0x2d8>)
 800747c:	2200      	movs	r2, #0
 800747e:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007480:	4b8b      	ldr	r3, [pc, #556]	@ (80076b0 <menuVariableFinisher+0x2dc>)
 8007482:	2200      	movs	r2, #0
 8007484:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007486:	4b8b      	ldr	r3, [pc, #556]	@ (80076b4 <menuVariableFinisher+0x2e0>)
 8007488:	2200      	movs	r2, #0
 800748a:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 800748c:	4b8a      	ldr	r3, [pc, #552]	@ (80076b8 <menuVariableFinisher+0x2e4>)
 800748e:	2200      	movs	r2, #0
 8007490:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007492:	4b8a      	ldr	r3, [pc, #552]	@ (80076bc <menuVariableFinisher+0x2e8>)
 8007494:	2200      	movs	r2, #0
 8007496:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007498:	4b89      	ldr	r3, [pc, #548]	@ (80076c0 <menuVariableFinisher+0x2ec>)
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800749e:	4b89      	ldr	r3, [pc, #548]	@ (80076c4 <menuVariableFinisher+0x2f0>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80074a4:	4b88      	ldr	r3, [pc, #544]	@ (80076c8 <menuVariableFinisher+0x2f4>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80074aa:	4b88      	ldr	r3, [pc, #544]	@ (80076cc <menuVariableFinisher+0x2f8>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80074b0:	4b87      	ldr	r3, [pc, #540]	@ (80076d0 <menuVariableFinisher+0x2fc>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80074b6:	4b87      	ldr	r3, [pc, #540]	@ (80076d4 <menuVariableFinisher+0x300>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80074bc:	4b86      	ldr	r3, [pc, #536]	@ (80076d8 <menuVariableFinisher+0x304>)
 80074be:	2200      	movs	r2, #0
 80074c0:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80074c2:	4b86      	ldr	r3, [pc, #536]	@ (80076dc <menuVariableFinisher+0x308>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80074c8:	4b85      	ldr	r3, [pc, #532]	@ (80076e0 <menuVariableFinisher+0x30c>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80074ce:	4b85      	ldr	r3, [pc, #532]	@ (80076e4 <menuVariableFinisher+0x310>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80074d4:	4b84      	ldr	r3, [pc, #528]	@ (80076e8 <menuVariableFinisher+0x314>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80074da:	4b84      	ldr	r3, [pc, #528]	@ (80076ec <menuVariableFinisher+0x318>)
 80074dc:	2200      	movs	r2, #0
 80074de:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80074e0:	4b83      	ldr	r3, [pc, #524]	@ (80076f0 <menuVariableFinisher+0x31c>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80074e6:	4b83      	ldr	r3, [pc, #524]	@ (80076f4 <menuVariableFinisher+0x320>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80074ec:	4b82      	ldr	r3, [pc, #520]	@ (80076f8 <menuVariableFinisher+0x324>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80074f2:	4b82      	ldr	r3, [pc, #520]	@ (80076fc <menuVariableFinisher+0x328>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80074f8:	4b81      	ldr	r3, [pc, #516]	@ (8007700 <menuVariableFinisher+0x32c>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80074fe:	4b81      	ldr	r3, [pc, #516]	@ (8007704 <menuVariableFinisher+0x330>)
 8007500:	2200      	movs	r2, #0
 8007502:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007504:	4b80      	ldr	r3, [pc, #512]	@ (8007708 <menuVariableFinisher+0x334>)
 8007506:	2200      	movs	r2, #0
 8007508:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800750a:	4b80      	ldr	r3, [pc, #512]	@ (800770c <menuVariableFinisher+0x338>)
 800750c:	2200      	movs	r2, #0
 800750e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007510:	4b7f      	ldr	r3, [pc, #508]	@ (8007710 <menuVariableFinisher+0x33c>)
 8007512:	2200      	movs	r2, #0
 8007514:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007516:	4b7f      	ldr	r3, [pc, #508]	@ (8007714 <menuVariableFinisher+0x340>)
 8007518:	2200      	movs	r2, #0
 800751a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 800751c:	4b7e      	ldr	r3, [pc, #504]	@ (8007718 <menuVariableFinisher+0x344>)
 800751e:	2200      	movs	r2, #0
 8007520:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007522:	4b7e      	ldr	r3, [pc, #504]	@ (800771c <menuVariableFinisher+0x348>)
 8007524:	2200      	movs	r2, #0
 8007526:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007528:	4b7d      	ldr	r3, [pc, #500]	@ (8007720 <menuVariableFinisher+0x34c>)
 800752a:	2200      	movs	r2, #0
 800752c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800752e:	4b7d      	ldr	r3, [pc, #500]	@ (8007724 <menuVariableFinisher+0x350>)
 8007530:	2200      	movs	r2, #0
 8007532:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007534:	4b7c      	ldr	r3, [pc, #496]	@ (8007728 <menuVariableFinisher+0x354>)
 8007536:	2200      	movs	r2, #0
 8007538:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800753a:	4b7c      	ldr	r3, [pc, #496]	@ (800772c <menuVariableFinisher+0x358>)
 800753c:	2200      	movs	r2, #0
 800753e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007540:	4b7b      	ldr	r3, [pc, #492]	@ (8007730 <menuVariableFinisher+0x35c>)
 8007542:	2200      	movs	r2, #0
 8007544:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007546:	4b7b      	ldr	r3, [pc, #492]	@ (8007734 <menuVariableFinisher+0x360>)
 8007548:	2200      	movs	r2, #0
 800754a:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 800754c:	4b7a      	ldr	r3, [pc, #488]	@ (8007738 <menuVariableFinisher+0x364>)
 800754e:	2200      	movs	r2, #0
 8007550:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007552:	4b7a      	ldr	r3, [pc, #488]	@ (800773c <menuVariableFinisher+0x368>)
 8007554:	2200      	movs	r2, #0
 8007556:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007558:	4b79      	ldr	r3, [pc, #484]	@ (8007740 <menuVariableFinisher+0x36c>)
 800755a:	2200      	movs	r2, #0
 800755c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800755e:	4b79      	ldr	r3, [pc, #484]	@ (8007744 <menuVariableFinisher+0x370>)
 8007560:	2200      	movs	r2, #0
 8007562:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007564:	4b78      	ldr	r3, [pc, #480]	@ (8007748 <menuVariableFinisher+0x374>)
 8007566:	2200      	movs	r2, #0
 8007568:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 800756a:	4b78      	ldr	r3, [pc, #480]	@ (800774c <menuVariableFinisher+0x378>)
 800756c:	2200      	movs	r2, #0
 800756e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007570:	4b77      	ldr	r3, [pc, #476]	@ (8007750 <menuVariableFinisher+0x37c>)
 8007572:	2200      	movs	r2, #0
 8007574:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007576:	4b77      	ldr	r3, [pc, #476]	@ (8007754 <menuVariableFinisher+0x380>)
 8007578:	2200      	movs	r2, #0
 800757a:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 800757c:	4b76      	ldr	r3, [pc, #472]	@ (8007758 <menuVariableFinisher+0x384>)
 800757e:	2200      	movs	r2, #0
 8007580:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007582:	4b76      	ldr	r3, [pc, #472]	@ (800775c <menuVariableFinisher+0x388>)
 8007584:	2200      	movs	r2, #0
 8007586:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007588:	4b75      	ldr	r3, [pc, #468]	@ (8007760 <menuVariableFinisher+0x38c>)
 800758a:	2200      	movs	r2, #0
 800758c:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800758e:	4b75      	ldr	r3, [pc, #468]	@ (8007764 <menuVariableFinisher+0x390>)
 8007590:	2200      	movs	r2, #0
 8007592:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007594:	4b74      	ldr	r3, [pc, #464]	@ (8007768 <menuVariableFinisher+0x394>)
 8007596:	2200      	movs	r2, #0
 8007598:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800759a:	4b74      	ldr	r3, [pc, #464]	@ (800776c <menuVariableFinisher+0x398>)
 800759c:	2200      	movs	r2, #0
 800759e:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80075a0:	4b73      	ldr	r3, [pc, #460]	@ (8007770 <menuVariableFinisher+0x39c>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80075a6:	4b73      	ldr	r3, [pc, #460]	@ (8007774 <menuVariableFinisher+0x3a0>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80075ac:	4b72      	ldr	r3, [pc, #456]	@ (8007778 <menuVariableFinisher+0x3a4>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80075b2:	4b72      	ldr	r3, [pc, #456]	@ (800777c <menuVariableFinisher+0x3a8>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80075b8:	4b71      	ldr	r3, [pc, #452]	@ (8007780 <menuVariableFinisher+0x3ac>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80075be:	4b71      	ldr	r3, [pc, #452]	@ (8007784 <menuVariableFinisher+0x3b0>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80075c4:	4b70      	ldr	r3, [pc, #448]	@ (8007788 <menuVariableFinisher+0x3b4>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80075ca:	4b70      	ldr	r3, [pc, #448]	@ (800778c <menuVariableFinisher+0x3b8>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80075d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007790 <menuVariableFinisher+0x3bc>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80075d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007794 <menuVariableFinisher+0x3c0>)
 80075d8:	2200      	movs	r2, #0
 80075da:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80075dc:	4b6e      	ldr	r3, [pc, #440]	@ (8007798 <menuVariableFinisher+0x3c4>)
 80075de:	2200      	movs	r2, #0
 80075e0:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80075e2:	4b6e      	ldr	r3, [pc, #440]	@ (800779c <menuVariableFinisher+0x3c8>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80075e8:	4b6d      	ldr	r3, [pc, #436]	@ (80077a0 <menuVariableFinisher+0x3cc>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80075ee:	4b6d      	ldr	r3, [pc, #436]	@ (80077a4 <menuVariableFinisher+0x3d0>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 80075f4:	4b6c      	ldr	r3, [pc, #432]	@ (80077a8 <menuVariableFinisher+0x3d4>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 80075fa:	4b6c      	ldr	r3, [pc, #432]	@ (80077ac <menuVariableFinisher+0x3d8>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007600:	4b6b      	ldr	r3, [pc, #428]	@ (80077b0 <menuVariableFinisher+0x3dc>)
 8007602:	2200      	movs	r2, #0
 8007604:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007606:	4b6b      	ldr	r3, [pc, #428]	@ (80077b4 <menuVariableFinisher+0x3e0>)
 8007608:	2200      	movs	r2, #0
 800760a:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 800760c:	4b6a      	ldr	r3, [pc, #424]	@ (80077b8 <menuVariableFinisher+0x3e4>)
 800760e:	2200      	movs	r2, #0
 8007610:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007612:	4b6a      	ldr	r3, [pc, #424]	@ (80077bc <menuVariableFinisher+0x3e8>)
 8007614:	2200      	movs	r2, #0
 8007616:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007618:	4b69      	ldr	r3, [pc, #420]	@ (80077c0 <menuVariableFinisher+0x3ec>)
 800761a:	2200      	movs	r2, #0
 800761c:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800761e:	4b69      	ldr	r3, [pc, #420]	@ (80077c4 <menuVariableFinisher+0x3f0>)
 8007620:	2200      	movs	r2, #0
 8007622:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007624:	4b68      	ldr	r3, [pc, #416]	@ (80077c8 <menuVariableFinisher+0x3f4>)
 8007626:	2200      	movs	r2, #0
 8007628:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800762a:	4b68      	ldr	r3, [pc, #416]	@ (80077cc <menuVariableFinisher+0x3f8>)
 800762c:	2200      	movs	r2, #0
 800762e:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007630:	4b67      	ldr	r3, [pc, #412]	@ (80077d0 <menuVariableFinisher+0x3fc>)
 8007632:	2200      	movs	r2, #0
 8007634:	741a      	strb	r2, [r3, #16]
}
 8007636:	bf00      	nop
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	2000009c 	.word	0x2000009c
 8007644:	200000b0 	.word	0x200000b0
 8007648:	200000c4 	.word	0x200000c4
 800764c:	200000d8 	.word	0x200000d8
 8007650:	200000ec 	.word	0x200000ec
 8007654:	20000100 	.word	0x20000100
 8007658:	20000114 	.word	0x20000114
 800765c:	20000128 	.word	0x20000128
 8007660:	2000013c 	.word	0x2000013c
 8007664:	20000150 	.word	0x20000150
 8007668:	20000164 	.word	0x20000164
 800766c:	20000178 	.word	0x20000178
 8007670:	20001220 	.word	0x20001220
 8007674:	20001234 	.word	0x20001234
 8007678:	20001248 	.word	0x20001248
 800767c:	2000125c 	.word	0x2000125c
 8007680:	20001270 	.word	0x20001270
 8007684:	20001284 	.word	0x20001284
 8007688:	20001298 	.word	0x20001298
 800768c:	200012ac 	.word	0x200012ac
 8007690:	200012c0 	.word	0x200012c0
 8007694:	200012d4 	.word	0x200012d4
 8007698:	200012e8 	.word	0x200012e8
 800769c:	200012fc 	.word	0x200012fc
 80076a0:	20001310 	.word	0x20001310
 80076a4:	20001324 	.word	0x20001324
 80076a8:	20001338 	.word	0x20001338
 80076ac:	2000134c 	.word	0x2000134c
 80076b0:	20001360 	.word	0x20001360
 80076b4:	20001374 	.word	0x20001374
 80076b8:	20001388 	.word	0x20001388
 80076bc:	2000139c 	.word	0x2000139c
 80076c0:	200013b0 	.word	0x200013b0
 80076c4:	200013c4 	.word	0x200013c4
 80076c8:	200013d8 	.word	0x200013d8
 80076cc:	200013ec 	.word	0x200013ec
 80076d0:	20001400 	.word	0x20001400
 80076d4:	20001414 	.word	0x20001414
 80076d8:	20001428 	.word	0x20001428
 80076dc:	2000143c 	.word	0x2000143c
 80076e0:	20001450 	.word	0x20001450
 80076e4:	20001464 	.word	0x20001464
 80076e8:	20001478 	.word	0x20001478
 80076ec:	2000148c 	.word	0x2000148c
 80076f0:	200014a0 	.word	0x200014a0
 80076f4:	200014b4 	.word	0x200014b4
 80076f8:	200014c8 	.word	0x200014c8
 80076fc:	200014dc 	.word	0x200014dc
 8007700:	200014f0 	.word	0x200014f0
 8007704:	20001504 	.word	0x20001504
 8007708:	20001518 	.word	0x20001518
 800770c:	2000152c 	.word	0x2000152c
 8007710:	20001540 	.word	0x20001540
 8007714:	20001554 	.word	0x20001554
 8007718:	20001568 	.word	0x20001568
 800771c:	2000157c 	.word	0x2000157c
 8007720:	20001590 	.word	0x20001590
 8007724:	200015a4 	.word	0x200015a4
 8007728:	200015b8 	.word	0x200015b8
 800772c:	200015cc 	.word	0x200015cc
 8007730:	200015e0 	.word	0x200015e0
 8007734:	200015f4 	.word	0x200015f4
 8007738:	20001608 	.word	0x20001608
 800773c:	2000161c 	.word	0x2000161c
 8007740:	20001630 	.word	0x20001630
 8007744:	20001644 	.word	0x20001644
 8007748:	20001658 	.word	0x20001658
 800774c:	2000166c 	.word	0x2000166c
 8007750:	20001680 	.word	0x20001680
 8007754:	20001694 	.word	0x20001694
 8007758:	200016a8 	.word	0x200016a8
 800775c:	200016bc 	.word	0x200016bc
 8007760:	200016d0 	.word	0x200016d0
 8007764:	200016e4 	.word	0x200016e4
 8007768:	200016f8 	.word	0x200016f8
 800776c:	2000170c 	.word	0x2000170c
 8007770:	20001720 	.word	0x20001720
 8007774:	20001734 	.word	0x20001734
 8007778:	20001748 	.word	0x20001748
 800777c:	2000175c 	.word	0x2000175c
 8007780:	20001770 	.word	0x20001770
 8007784:	20001784 	.word	0x20001784
 8007788:	20001798 	.word	0x20001798
 800778c:	200017ac 	.word	0x200017ac
 8007790:	200017c0 	.word	0x200017c0
 8007794:	200017d4 	.word	0x200017d4
 8007798:	200017e8 	.word	0x200017e8
 800779c:	200017fc 	.word	0x200017fc
 80077a0:	20001810 	.word	0x20001810
 80077a4:	20001824 	.word	0x20001824
 80077a8:	20001838 	.word	0x20001838
 80077ac:	2000184c 	.word	0x2000184c
 80077b0:	20001860 	.word	0x20001860
 80077b4:	20001874 	.word	0x20001874
 80077b8:	20001888 	.word	0x20001888
 80077bc:	2000189c 	.word	0x2000189c
 80077c0:	200018b0 	.word	0x200018b0
 80077c4:	200018c4 	.word	0x200018c4
 80077c8:	200018d8 	.word	0x200018d8
 80077cc:	200018ec 	.word	0x200018ec
 80077d0:	20001900 	.word	0x20001900

080077d4 <resetMenuTexts>:

void resetMenuTexts() {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80077d8:	2211      	movs	r2, #17
 80077da:	2100      	movs	r1, #0
 80077dc:	48d3      	ldr	r0, [pc, #844]	@ (8007b2c <resetMenuTexts+0x358>)
 80077de:	f005 ff47 	bl	800d670 <memset>
    memset(ayarlarText, 0, 17);
 80077e2:	2211      	movs	r2, #17
 80077e4:	2100      	movs	r1, #0
 80077e6:	48d2      	ldr	r0, [pc, #840]	@ (8007b30 <resetMenuTexts+0x35c>)
 80077e8:	f005 ff42 	bl	800d670 <memset>
    memset(hataKayitListText, 0, 17);
 80077ec:	2211      	movs	r2, #17
 80077ee:	2100      	movs	r1, #0
 80077f0:	48d0      	ldr	r0, [pc, #832]	@ (8007b34 <resetMenuTexts+0x360>)
 80077f2:	f005 ff3d 	bl	800d670 <memset>
    memset(birHataKoduText, 0, 17);
 80077f6:	2211      	movs	r2, #17
 80077f8:	2100      	movs	r1, #0
 80077fa:	48cf      	ldr	r0, [pc, #828]	@ (8007b38 <resetMenuTexts+0x364>)
 80077fc:	f005 ff38 	bl	800d670 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007800:	2211      	movs	r2, #17
 8007802:	2100      	movs	r1, #0
 8007804:	48cd      	ldr	r0, [pc, #820]	@ (8007b3c <resetMenuTexts+0x368>)
 8007806:	f005 ff33 	bl	800d670 <memset>
    memset(ucHataKoduText, 0, 17);
 800780a:	2211      	movs	r2, #17
 800780c:	2100      	movs	r1, #0
 800780e:	48cc      	ldr	r0, [pc, #816]	@ (8007b40 <resetMenuTexts+0x36c>)
 8007810:	f005 ff2e 	bl	800d670 <memset>
    memset(dortHataKoduText, 0, 17);
 8007814:	2211      	movs	r2, #17
 8007816:	2100      	movs	r1, #0
 8007818:	48ca      	ldr	r0, [pc, #808]	@ (8007b44 <resetMenuTexts+0x370>)
 800781a:	f005 ff29 	bl	800d670 <memset>
    memset(besHataKoduText, 0, 17);
 800781e:	2211      	movs	r2, #17
 8007820:	2100      	movs	r1, #0
 8007822:	48c9      	ldr	r0, [pc, #804]	@ (8007b48 <resetMenuTexts+0x374>)
 8007824:	f005 ff24 	bl	800d670 <memset>
    memset(altiHataKoduText, 0, 17);
 8007828:	2211      	movs	r2, #17
 800782a:	2100      	movs	r1, #0
 800782c:	48c7      	ldr	r0, [pc, #796]	@ (8007b4c <resetMenuTexts+0x378>)
 800782e:	f005 ff1f 	bl	800d670 <memset>
    memset(yediHataKoduText, 0, 17);
 8007832:	2211      	movs	r2, #17
 8007834:	2100      	movs	r1, #0
 8007836:	48c6      	ldr	r0, [pc, #792]	@ (8007b50 <resetMenuTexts+0x37c>)
 8007838:	f005 ff1a 	bl	800d670 <memset>
    memset(sekizHataKoduText, 0, 17);
 800783c:	2211      	movs	r2, #17
 800783e:	2100      	movs	r1, #0
 8007840:	48c4      	ldr	r0, [pc, #784]	@ (8007b54 <resetMenuTexts+0x380>)
 8007842:	f005 ff15 	bl	800d670 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007846:	2211      	movs	r2, #17
 8007848:	2100      	movs	r1, #0
 800784a:	48c3      	ldr	r0, [pc, #780]	@ (8007b58 <resetMenuTexts+0x384>)
 800784c:	f005 ff10 	bl	800d670 <memset>
    memset(onHataKoduText, 0, 17);
 8007850:	2211      	movs	r2, #17
 8007852:	2100      	movs	r1, #0
 8007854:	48c1      	ldr	r0, [pc, #772]	@ (8007b5c <resetMenuTexts+0x388>)
 8007856:	f005 ff0b 	bl	800d670 <memset>
    memset(silmekIcinText, 0, 17);
 800785a:	2211      	movs	r2, #17
 800785c:	2100      	movs	r1, #0
 800785e:	48c0      	ldr	r0, [pc, #768]	@ (8007b60 <resetMenuTexts+0x38c>)
 8007860:	f005 ff06 	bl	800d670 <memset>
    memset(calismaSekliText, 0, 17);
 8007864:	2211      	movs	r2, #17
 8007866:	2100      	movs	r1, #0
 8007868:	48be      	ldr	r0, [pc, #760]	@ (8007b64 <resetMenuTexts+0x390>)
 800786a:	f005 ff01 	bl	800d670 <memset>
    memset(devirmeYuruyusText, 0, 17);
 800786e:	2211      	movs	r2, #17
 8007870:	2100      	movs	r1, #0
 8007872:	48bd      	ldr	r0, [pc, #756]	@ (8007b68 <resetMenuTexts+0x394>)
 8007874:	f005 fefc 	bl	800d670 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007878:	2211      	movs	r2, #17
 800787a:	2100      	movs	r1, #0
 800787c:	48bb      	ldr	r0, [pc, #748]	@ (8007b6c <resetMenuTexts+0x398>)
 800787e:	f005 fef7 	bl	800d670 <memset>
    memset(basGonderText, 0, 17);
 8007882:	2211      	movs	r2, #17
 8007884:	2100      	movs	r1, #0
 8007886:	48ba      	ldr	r0, [pc, #744]	@ (8007b70 <resetMenuTexts+0x39c>)
 8007888:	f005 fef2 	bl	800d670 <memset>
    memset(emniyetCercevesiText, 0, 17);
 800788c:	2211      	movs	r2, #17
 800788e:	2100      	movs	r1, #0
 8007890:	48b8      	ldr	r0, [pc, #736]	@ (8007b74 <resetMenuTexts+0x3a0>)
 8007892:	f005 feed 	bl	800d670 <memset>
    memset(pasifText, 0, 17);
 8007896:	2211      	movs	r2, #17
 8007898:	2100      	movs	r1, #0
 800789a:	48b7      	ldr	r0, [pc, #732]	@ (8007b78 <resetMenuTexts+0x3a4>)
 800789c:	f005 fee8 	bl	800d670 <memset>
    memset(aktifText, 0, 17);
 80078a0:	2211      	movs	r2, #17
 80078a2:	2100      	movs	r1, #0
 80078a4:	48b5      	ldr	r0, [pc, #724]	@ (8007b7c <resetMenuTexts+0x3a8>)
 80078a6:	f005 fee3 	bl	800d670 <memset>
    memset(yavaslamaLimitText, 0, 17);
 80078aa:	2211      	movs	r2, #17
 80078ac:	2100      	movs	r1, #0
 80078ae:	48b4      	ldr	r0, [pc, #720]	@ (8007b80 <resetMenuTexts+0x3ac>)
 80078b0:	f005 fede 	bl	800d670 <memset>
    memset(altLimitText, 0, 17);
 80078b4:	2211      	movs	r2, #17
 80078b6:	2100      	movs	r1, #0
 80078b8:	48b2      	ldr	r0, [pc, #712]	@ (8007b84 <resetMenuTexts+0x3b0>)
 80078ba:	f005 fed9 	bl	800d670 <memset>
    memset(basincSalteriText, 0, 17);
 80078be:	2211      	movs	r2, #17
 80078c0:	2100      	movs	r1, #0
 80078c2:	48b1      	ldr	r0, [pc, #708]	@ (8007b88 <resetMenuTexts+0x3b4>)
 80078c4:	f005 fed4 	bl	800d670 <memset>
    memset(kapiSecimleriText, 0, 17);
 80078c8:	2211      	movs	r2, #17
 80078ca:	2100      	movs	r1, #0
 80078cc:	48af      	ldr	r0, [pc, #700]	@ (8007b8c <resetMenuTexts+0x3b8>)
 80078ce:	f005 fecf 	bl	800d670 <memset>
    memset(katKapisiAktifText, 0, 17);
 80078d2:	2211      	movs	r2, #17
 80078d4:	2100      	movs	r1, #0
 80078d6:	48ae      	ldr	r0, [pc, #696]	@ (8007b90 <resetMenuTexts+0x3bc>)
 80078d8:	f005 feca 	bl	800d670 <memset>
    memset(tablaKapiAktifText, 0, 17);
 80078dc:	2211      	movs	r2, #17
 80078de:	2100      	movs	r1, #0
 80078e0:	48ac      	ldr	r0, [pc, #688]	@ (8007b94 <resetMenuTexts+0x3c0>)
 80078e2:	f005 fec5 	bl	800d670 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80078e6:	2211      	movs	r2, #17
 80078e8:	2100      	movs	r1, #0
 80078ea:	48ab      	ldr	r0, [pc, #684]	@ (8007b98 <resetMenuTexts+0x3c4>)
 80078ec:	f005 fec0 	bl	800d670 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80078f0:	2211      	movs	r2, #17
 80078f2:	2100      	movs	r1, #0
 80078f4:	48a9      	ldr	r0, [pc, #676]	@ (8007b9c <resetMenuTexts+0x3c8>)
 80078f6:	f005 febb 	bl	800d670 <memset>
    memset(kapiButonuESPText, 0, 17);
 80078fa:	2211      	movs	r2, #17
 80078fc:	2100      	movs	r1, #0
 80078fe:	48a8      	ldr	r0, [pc, #672]	@ (8007ba0 <resetMenuTexts+0x3cc>)
 8007900:	f005 feb6 	bl	800d670 <memset>
    memset(katButonuEXTText, 0, 17);
 8007904:	2211      	movs	r2, #17
 8007906:	2100      	movs	r1, #0
 8007908:	48a6      	ldr	r0, [pc, #664]	@ (8007ba4 <resetMenuTexts+0x3d0>)
 800790a:	f005 feb1 	bl	800d670 <memset>
    memset(birKatKapiTipiText, 0, 17);
 800790e:	2211      	movs	r2, #17
 8007910:	2100      	movs	r1, #0
 8007912:	48a5      	ldr	r0, [pc, #660]	@ (8007ba8 <resetMenuTexts+0x3d4>)
 8007914:	f005 feac 	bl	800d670 <memset>
    memset(butonKontrolluText, 0, 17);
 8007918:	2211      	movs	r2, #17
 800791a:	2100      	movs	r1, #0
 800791c:	48a3      	ldr	r0, [pc, #652]	@ (8007bac <resetMenuTexts+0x3d8>)
 800791e:	f005 fea7 	bl	800d670 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007922:	2211      	movs	r2, #17
 8007924:	2100      	movs	r1, #0
 8007926:	48a2      	ldr	r0, [pc, #648]	@ (8007bb0 <resetMenuTexts+0x3dc>)
 8007928:	f005 fea2 	bl	800d670 <memset>
    memset(kacSaniyeText, 0, 17);
 800792c:	2211      	movs	r2, #17
 800792e:	2100      	movs	r1, #0
 8007930:	48a0      	ldr	r0, [pc, #640]	@ (8007bb4 <resetMenuTexts+0x3e0>)
 8007932:	f005 fe9d 	bl	800d670 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007936:	2211      	movs	r2, #17
 8007938:	2100      	movs	r1, #0
 800793a:	489f      	ldr	r0, [pc, #636]	@ (8007bb8 <resetMenuTexts+0x3e4>)
 800793c:	f005 fe98 	bl	800d670 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007940:	2211      	movs	r2, #17
 8007942:	2100      	movs	r1, #0
 8007944:	489d      	ldr	r0, [pc, #628]	@ (8007bbc <resetMenuTexts+0x3e8>)
 8007946:	f005 fe93 	bl	800d670 <memset>
    memset(tablaKapiTipiText, 0, 17);
 800794a:	2211      	movs	r2, #17
 800794c:	2100      	movs	r1, #0
 800794e:	489c      	ldr	r0, [pc, #624]	@ (8007bc0 <resetMenuTexts+0x3ec>)
 8007950:	f005 fe8e 	bl	800d670 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007954:	2211      	movs	r2, #17
 8007956:	2100      	movs	r1, #0
 8007958:	489a      	ldr	r0, [pc, #616]	@ (8007bc4 <resetMenuTexts+0x3f0>)
 800795a:	f005 fe89 	bl	800d670 <memset>
    memset(birinciKattaAcText, 0, 17);
 800795e:	2211      	movs	r2, #17
 8007960:	2100      	movs	r1, #0
 8007962:	4899      	ldr	r0, [pc, #612]	@ (8007bc8 <resetMenuTexts+0x3f4>)
 8007964:	f005 fe84 	bl	800d670 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007968:	2211      	movs	r2, #17
 800796a:	2100      	movs	r1, #0
 800796c:	4897      	ldr	r0, [pc, #604]	@ (8007bcc <resetMenuTexts+0x3f8>)
 800796e:	f005 fe7f 	bl	800d670 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007972:	2211      	movs	r2, #17
 8007974:	2100      	movs	r1, #0
 8007976:	4896      	ldr	r0, [pc, #600]	@ (8007bd0 <resetMenuTexts+0x3fc>)
 8007978:	f005 fe7a 	bl	800d670 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 800797c:	2211      	movs	r2, #17
 800797e:	2100      	movs	r1, #0
 8007980:	4894      	ldr	r0, [pc, #592]	@ (8007bd4 <resetMenuTexts+0x400>)
 8007982:	f005 fe75 	bl	800d670 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007986:	2211      	movs	r2, #17
 8007988:	2100      	movs	r1, #0
 800798a:	4893      	ldr	r0, [pc, #588]	@ (8007bd8 <resetMenuTexts+0x404>)
 800798c:	f005 fe70 	bl	800d670 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007990:	2211      	movs	r2, #17
 8007992:	2100      	movs	r1, #0
 8007994:	4891      	ldr	r0, [pc, #580]	@ (8007bdc <resetMenuTexts+0x408>)
 8007996:	f005 fe6b 	bl	800d670 <memset>
    memset(devirmeAktifText, 0, 17);
 800799a:	2211      	movs	r2, #17
 800799c:	2100      	movs	r1, #0
 800799e:	4890      	ldr	r0, [pc, #576]	@ (8007be0 <resetMenuTexts+0x40c>)
 80079a0:	f005 fe66 	bl	800d670 <memset>
    memset(yuruyusAktifText, 0, 17);
 80079a4:	2211      	movs	r2, #17
 80079a6:	2100      	movs	r1, #0
 80079a8:	488e      	ldr	r0, [pc, #568]	@ (8007be4 <resetMenuTexts+0x410>)
 80079aa:	f005 fe61 	bl	800d670 <memset>
    memset(devirmeYukariText, 0, 17);
 80079ae:	2211      	movs	r2, #17
 80079b0:	2100      	movs	r1, #0
 80079b2:	488d      	ldr	r0, [pc, #564]	@ (8007be8 <resetMenuTexts+0x414>)
 80079b4:	f005 fe5c 	bl	800d670 <memset>
    memset(yuruyusIleriText, 0, 17);
 80079b8:	2211      	movs	r2, #17
 80079ba:	2100      	movs	r1, #0
 80079bc:	488b      	ldr	r0, [pc, #556]	@ (8007bec <resetMenuTexts+0x418>)
 80079be:	f005 fe57 	bl	800d670 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 80079c2:	2211      	movs	r2, #17
 80079c4:	2100      	movs	r1, #0
 80079c6:	488a      	ldr	r0, [pc, #552]	@ (8007bf0 <resetMenuTexts+0x41c>)
 80079c8:	f005 fe52 	bl	800d670 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 80079cc:	2211      	movs	r2, #17
 80079ce:	2100      	movs	r1, #0
 80079d0:	4888      	ldr	r0, [pc, #544]	@ (8007bf4 <resetMenuTexts+0x420>)
 80079d2:	f005 fe4d 	bl	800d670 <memset>
    memset(yuruyusSecildiText, 0, 17);
 80079d6:	2211      	movs	r2, #17
 80079d8:	2100      	movs	r1, #0
 80079da:	4887      	ldr	r0, [pc, #540]	@ (8007bf8 <resetMenuTexts+0x424>)
 80079dc:	f005 fe48 	bl	800d670 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 80079e0:	2211      	movs	r2, #17
 80079e2:	2100      	movs	r1, #0
 80079e4:	4885      	ldr	r0, [pc, #532]	@ (8007bfc <resetMenuTexts+0x428>)
 80079e6:	f005 fe43 	bl	800d670 <memset>
    memset(tekTesirText, 0, 17);
 80079ea:	2211      	movs	r2, #17
 80079ec:	2100      	movs	r1, #0
 80079ee:	4884      	ldr	r0, [pc, #528]	@ (8007c00 <resetMenuTexts+0x42c>)
 80079f0:	f005 fe3e 	bl	800d670 <memset>
    memset(ciftTesirText, 0, 17);
 80079f4:	2211      	movs	r2, #17
 80079f6:	2100      	movs	r1, #0
 80079f8:	4882      	ldr	r0, [pc, #520]	@ (8007c04 <resetMenuTexts+0x430>)
 80079fa:	f005 fe39 	bl	800d670 <memset>
    memset(platformSilindirTipiText, 0, 17);
 80079fe:	2211      	movs	r2, #17
 8007a00:	2100      	movs	r1, #0
 8007a02:	4881      	ldr	r0, [pc, #516]	@ (8007c08 <resetMenuTexts+0x434>)
 8007a04:	f005 fe34 	bl	800d670 <memset>
    memset(yukariValfSureText, 0, 17);
 8007a08:	2211      	movs	r2, #17
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	487f      	ldr	r0, [pc, #508]	@ (8007c0c <resetMenuTexts+0x438>)
 8007a0e:	f005 fe2f 	bl	800d670 <memset>
    memset(asagiValfSureText, 0, 17);
 8007a12:	2211      	movs	r2, #17
 8007a14:	2100      	movs	r1, #0
 8007a16:	487e      	ldr	r0, [pc, #504]	@ (8007c10 <resetMenuTexts+0x43c>)
 8007a18:	f005 fe2a 	bl	800d670 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007a1c:	2211      	movs	r2, #17
 8007a1e:	2100      	movs	r1, #0
 8007a20:	487c      	ldr	r0, [pc, #496]	@ (8007c14 <resetMenuTexts+0x440>)
 8007a22:	f005 fe25 	bl	800d670 <memset>
    memset(ileriValfSureText, 0, 17);
 8007a26:	2211      	movs	r2, #17
 8007a28:	2100      	movs	r1, #0
 8007a2a:	487b      	ldr	r0, [pc, #492]	@ (8007c18 <resetMenuTexts+0x444>)
 8007a2c:	f005 fe20 	bl	800d670 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007a30:	2211      	movs	r2, #17
 8007a32:	2100      	movs	r1, #0
 8007a34:	4879      	ldr	r0, [pc, #484]	@ (8007c1c <resetMenuTexts+0x448>)
 8007a36:	f005 fe1b 	bl	800d670 <memset>
    memset(geriValfSureText, 0, 17);
 8007a3a:	2211      	movs	r2, #17
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4878      	ldr	r0, [pc, #480]	@ (8007c20 <resetMenuTexts+0x44c>)
 8007a40:	f005 fe16 	bl	800d670 <memset>
    memset(calismaSuresiText, 0, 17);
 8007a44:	2211      	movs	r2, #17
 8007a46:	2100      	movs	r1, #0
 8007a48:	4876      	ldr	r0, [pc, #472]	@ (8007c24 <resetMenuTexts+0x450>)
 8007a4a:	f005 fe11 	bl	800d670 <memset>
    memset(calismaSayisiText, 0, 17);
 8007a4e:	2211      	movs	r2, #17
 8007a50:	2100      	movs	r1, #0
 8007a52:	4875      	ldr	r0, [pc, #468]	@ (8007c28 <resetMenuTexts+0x454>)
 8007a54:	f005 fe0c 	bl	800d670 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007a58:	2211      	movs	r2, #17
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4873      	ldr	r0, [pc, #460]	@ (8007c2c <resetMenuTexts+0x458>)
 8007a5e:	f005 fe07 	bl	800d670 <memset>
    memset(dilSecimText, 0, 17);
 8007a62:	2211      	movs	r2, #17
 8007a64:	2100      	movs	r1, #0
 8007a66:	4872      	ldr	r0, [pc, #456]	@ (8007c30 <resetMenuTexts+0x45c>)
 8007a68:	f005 fe02 	bl	800d670 <memset>
    memset(secilenDilText, 0, 17);
 8007a6c:	2211      	movs	r2, #17
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4870      	ldr	r0, [pc, #448]	@ (8007c34 <resetMenuTexts+0x460>)
 8007a72:	f005 fdfd 	bl	800d670 <memset>
    memset(menudenCikisText, 0, 17);
 8007a76:	2211      	movs	r2, #17
 8007a78:	2100      	movs	r1, #0
 8007a7a:	486f      	ldr	r0, [pc, #444]	@ (8007c38 <resetMenuTexts+0x464>)
 8007a7c:	f005 fdf8 	bl	800d670 <memset>
    memset(enteraBasinizText, 0, 17);
 8007a80:	2211      	movs	r2, #17
 8007a82:	2100      	movs	r1, #0
 8007a84:	486d      	ldr	r0, [pc, #436]	@ (8007c3c <resetMenuTexts+0x468>)
 8007a86:	f005 fdf3 	bl	800d670 <memset>
    memset(hataKoduText, 0, 17);
 8007a8a:	2211      	movs	r2, #17
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	486c      	ldr	r0, [pc, #432]	@ (8007c40 <resetMenuTexts+0x46c>)
 8007a90:	f005 fdee 	bl	800d670 <memset>
    memset(dataSynchText, 0, 17);
 8007a94:	2211      	movs	r2, #17
 8007a96:	2100      	movs	r1, #0
 8007a98:	486a      	ldr	r0, [pc, #424]	@ (8007c44 <resetMenuTexts+0x470>)
 8007a9a:	f005 fde9 	bl	800d670 <memset>
    memset(dataSynch2Text, 0, 17);
 8007a9e:	2211      	movs	r2, #17
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4869      	ldr	r0, [pc, #420]	@ (8007c48 <resetMenuTexts+0x474>)
 8007aa4:	f005 fde4 	bl	800d670 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007aa8:	2211      	movs	r2, #17
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4867      	ldr	r0, [pc, #412]	@ (8007c4c <resetMenuTexts+0x478>)
 8007aae:	f005 fddf 	bl	800d670 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007ab2:	2211      	movs	r2, #17
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4866      	ldr	r0, [pc, #408]	@ (8007c50 <resetMenuTexts+0x47c>)
 8007ab8:	f005 fdda 	bl	800d670 <memset>
    memset(mustBe12Text, 0, 17);
 8007abc:	2211      	movs	r2, #17
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4864      	ldr	r0, [pc, #400]	@ (8007c54 <resetMenuTexts+0x480>)
 8007ac2:	f005 fdd5 	bl	800d670 <memset>
    memset(mustBe122Text, 0, 17);
 8007ac6:	2211      	movs	r2, #17
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4863      	ldr	r0, [pc, #396]	@ (8007c58 <resetMenuTexts+0x484>)
 8007acc:	f005 fdd0 	bl	800d670 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007ad0:	2211      	movs	r2, #17
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4861      	ldr	r0, [pc, #388]	@ (8007c5c <resetMenuTexts+0x488>)
 8007ad6:	f005 fdcb 	bl	800d670 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007ada:	2211      	movs	r2, #17
 8007adc:	2100      	movs	r1, #0
 8007ade:	4860      	ldr	r0, [pc, #384]	@ (8007c60 <resetMenuTexts+0x48c>)
 8007ae0:	f005 fdc6 	bl	800d670 <memset>
    memset(passExceedErrorText, 0, 17);
 8007ae4:	2211      	movs	r2, #17
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	485e      	ldr	r0, [pc, #376]	@ (8007c64 <resetMenuTexts+0x490>)
 8007aea:	f005 fdc1 	bl	800d670 <memset>
    memset(passExceedError2Text, 0, 17);
 8007aee:	2211      	movs	r2, #17
 8007af0:	2100      	movs	r1, #0
 8007af2:	485d      	ldr	r0, [pc, #372]	@ (8007c68 <resetMenuTexts+0x494>)
 8007af4:	f005 fdbc 	bl	800d670 <memset>
    memset(dataYazildiText, 0, 17);
 8007af8:	2211      	movs	r2, #17
 8007afa:	2100      	movs	r1, #0
 8007afc:	485b      	ldr	r0, [pc, #364]	@ (8007c6c <resetMenuTexts+0x498>)
 8007afe:	f005 fdb7 	bl	800d670 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007b02:	2211      	movs	r2, #17
 8007b04:	2100      	movs	r1, #0
 8007b06:	485a      	ldr	r0, [pc, #360]	@ (8007c70 <resetMenuTexts+0x49c>)
 8007b08:	f005 fdb2 	bl	800d670 <memset>
    memset(dataOkunduText, 0, 17);
 8007b0c:	2211      	movs	r2, #17
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4858      	ldr	r0, [pc, #352]	@ (8007c74 <resetMenuTexts+0x4a0>)
 8007b12:	f005 fdad 	bl	800d670 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007b16:	2211      	movs	r2, #17
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4857      	ldr	r0, [pc, #348]	@ (8007c78 <resetMenuTexts+0x4a4>)
 8007b1c:	f005 fda8 	bl	800d670 <memset>
    memset(errorCodeText, 0, 17);
 8007b20:	2211      	movs	r2, #17
 8007b22:	2100      	movs	r1, #0
 8007b24:	4855      	ldr	r0, [pc, #340]	@ (8007c7c <resetMenuTexts+0x4a8>)
 8007b26:	f005 fda3 	bl	800d670 <memset>
 8007b2a:	e0a9      	b.n	8007c80 <resetMenuTexts+0x4ac>
 8007b2c:	20001220 	.word	0x20001220
 8007b30:	20001234 	.word	0x20001234
 8007b34:	20001248 	.word	0x20001248
 8007b38:	2000125c 	.word	0x2000125c
 8007b3c:	20001270 	.word	0x20001270
 8007b40:	20001284 	.word	0x20001284
 8007b44:	20001298 	.word	0x20001298
 8007b48:	200012ac 	.word	0x200012ac
 8007b4c:	200012c0 	.word	0x200012c0
 8007b50:	200012d4 	.word	0x200012d4
 8007b54:	200012e8 	.word	0x200012e8
 8007b58:	200012fc 	.word	0x200012fc
 8007b5c:	20001310 	.word	0x20001310
 8007b60:	20001324 	.word	0x20001324
 8007b64:	20001338 	.word	0x20001338
 8007b68:	2000134c 	.word	0x2000134c
 8007b6c:	20001360 	.word	0x20001360
 8007b70:	20001374 	.word	0x20001374
 8007b74:	20001388 	.word	0x20001388
 8007b78:	2000139c 	.word	0x2000139c
 8007b7c:	200013b0 	.word	0x200013b0
 8007b80:	200013c4 	.word	0x200013c4
 8007b84:	200013d8 	.word	0x200013d8
 8007b88:	200013ec 	.word	0x200013ec
 8007b8c:	20001400 	.word	0x20001400
 8007b90:	20001414 	.word	0x20001414
 8007b94:	20001428 	.word	0x20001428
 8007b98:	2000143c 	.word	0x2000143c
 8007b9c:	20001450 	.word	0x20001450
 8007ba0:	20001464 	.word	0x20001464
 8007ba4:	20001478 	.word	0x20001478
 8007ba8:	2000148c 	.word	0x2000148c
 8007bac:	200014a0 	.word	0x200014a0
 8007bb0:	200014b4 	.word	0x200014b4
 8007bb4:	200014c8 	.word	0x200014c8
 8007bb8:	200014dc 	.word	0x200014dc
 8007bbc:	200014f0 	.word	0x200014f0
 8007bc0:	20001504 	.word	0x20001504
 8007bc4:	20001518 	.word	0x20001518
 8007bc8:	2000152c 	.word	0x2000152c
 8007bcc:	20001540 	.word	0x20001540
 8007bd0:	20001554 	.word	0x20001554
 8007bd4:	20001568 	.word	0x20001568
 8007bd8:	2000157c 	.word	0x2000157c
 8007bdc:	20001590 	.word	0x20001590
 8007be0:	200015a4 	.word	0x200015a4
 8007be4:	200015b8 	.word	0x200015b8
 8007be8:	200015cc 	.word	0x200015cc
 8007bec:	200015e0 	.word	0x200015e0
 8007bf0:	200015f4 	.word	0x200015f4
 8007bf4:	20001608 	.word	0x20001608
 8007bf8:	2000161c 	.word	0x2000161c
 8007bfc:	20001630 	.word	0x20001630
 8007c00:	20001644 	.word	0x20001644
 8007c04:	20001658 	.word	0x20001658
 8007c08:	2000166c 	.word	0x2000166c
 8007c0c:	20001680 	.word	0x20001680
 8007c10:	20001694 	.word	0x20001694
 8007c14:	200016a8 	.word	0x200016a8
 8007c18:	200016bc 	.word	0x200016bc
 8007c1c:	200016d0 	.word	0x200016d0
 8007c20:	200016e4 	.word	0x200016e4
 8007c24:	200016f8 	.word	0x200016f8
 8007c28:	2000170c 	.word	0x2000170c
 8007c2c:	20001720 	.word	0x20001720
 8007c30:	20001734 	.word	0x20001734
 8007c34:	20001748 	.word	0x20001748
 8007c38:	2000175c 	.word	0x2000175c
 8007c3c:	20001770 	.word	0x20001770
 8007c40:	20001784 	.word	0x20001784
 8007c44:	20001798 	.word	0x20001798
 8007c48:	200017ac 	.word	0x200017ac
 8007c4c:	200017c0 	.word	0x200017c0
 8007c50:	200017d4 	.word	0x200017d4
 8007c54:	200017e8 	.word	0x200017e8
 8007c58:	200017fc 	.word	0x200017fc
 8007c5c:	20001810 	.word	0x20001810
 8007c60:	20001824 	.word	0x20001824
 8007c64:	20001838 	.word	0x20001838
 8007c68:	2000184c 	.word	0x2000184c
 8007c6c:	20001860 	.word	0x20001860
 8007c70:	20001874 	.word	0x20001874
 8007c74:	20001888 	.word	0x20001888
 8007c78:	2000189c 	.word	0x2000189c
 8007c7c:	200018b0 	.word	0x200018b0
    memset(machineIDText, 0, 17);
 8007c80:	2211      	movs	r2, #17
 8007c82:	2100      	movs	r1, #0
 8007c84:	4809      	ldr	r0, [pc, #36]	@ (8007cac <resetMenuTexts+0x4d8>)
 8007c86:	f005 fcf3 	bl	800d670 <memset>
    memset(idConfirmationText, 0, 17);
 8007c8a:	2211      	movs	r2, #17
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4808      	ldr	r0, [pc, #32]	@ (8007cb0 <resetMenuTexts+0x4dc>)
 8007c90:	f005 fcee 	bl	800d670 <memset>
    memset(idConfirmationSubText, 0, 17);
 8007c94:	2211      	movs	r2, #17
 8007c96:	2100      	movs	r1, #0
 8007c98:	4806      	ldr	r0, [pc, #24]	@ (8007cb4 <resetMenuTexts+0x4e0>)
 8007c9a:	f005 fce9 	bl	800d670 <memset>
    memset(wifiConfirmationText, 0, 17);
 8007c9e:	2211      	movs	r2, #17
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4805      	ldr	r0, [pc, #20]	@ (8007cb8 <resetMenuTexts+0x4e4>)
 8007ca4:	f005 fce4 	bl	800d670 <memset>
}
 8007ca8:	bf00      	nop
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	200018c4 	.word	0x200018c4
 8007cb0:	200018d8 	.word	0x200018d8
 8007cb4:	200018ec 	.word	0x200018ec
 8007cb8:	20001900 	.word	0x20001900

08007cbc <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007cc2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007cc6:	f001 fd89 	bl	80097dc <HAL_Delay>
	int confirmationVal = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007cce:	e012      	b.n	8007cf6 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007cd0:	4a12      	ldr	r2, [pc, #72]	@ (8007d1c <takeMachineIDWithConfirmation+0x60>)
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f001 f827 	bl	8008d28 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007cda:	4a11      	ldr	r2, [pc, #68]	@ (8007d20 <takeMachineIDWithConfirmation+0x64>)
 8007cdc:	2101      	movs	r1, #1
 8007cde:	2002      	movs	r0, #2
 8007ce0:	f001 f822 	bl	8008d28 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	480f      	ldr	r0, [pc, #60]	@ (8007d24 <takeMachineIDWithConfirmation+0x68>)
 8007ce8:	f002 fb48 	bl	800a37c <HAL_GPIO_ReadPin>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0e9      	beq.n	8007cd0 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007cfc:	f000 f814 	bl	8007d28 <takeMachineID>

	convertArrays(1);
 8007d00:	2001      	movs	r0, #1
 8007d02:	f7f8 fdd9 	bl	80008b8 <convertArrays>
	HAL_Delay(50);
 8007d06:	2032      	movs	r0, #50	@ 0x32
 8007d08:	f001 fd68 	bl	80097dc <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f7f9 fabf 	bl	8001290 <printCredentials>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200018d8 	.word	0x200018d8
 8007d20:	200018ec 	.word	0x200018ec
 8007d24:	40010800 	.word	0x40010800

08007d28 <takeMachineID>:

void takeMachineID() {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f001 f858 	bl	8008de4 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007d34:	220c      	movs	r2, #12
 8007d36:	2100      	movs	r1, #0
 8007d38:	489b      	ldr	r0, [pc, #620]	@ (8007fa8 <takeMachineID+0x280>)
 8007d3a:	f005 fc99 	bl	800d670 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007d3e:	2305      	movs	r3, #5
 8007d40:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007d42:	2303      	movs	r3, #3
 8007d44:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007d4a:	4b98      	ldr	r3, [pc, #608]	@ (8007fac <takeMachineID+0x284>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007d50:	2100      	movs	r1, #0
 8007d52:	2001      	movs	r0, #1
 8007d54:	f7f9 f92c 	bl	8000fb0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007d58:	2108      	movs	r1, #8
 8007d5a:	4895      	ldr	r0, [pc, #596]	@ (8007fb0 <takeMachineID+0x288>)
 8007d5c:	f002 fb0e 	bl	800a37c <HAL_GPIO_ReadPin>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d11a      	bne.n	8007d9c <takeMachineID+0x74>
        	lcd_cursor(0);
 8007d66:	2000      	movs	r0, #0
 8007d68:	f001 f83c 	bl	8008de4 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007d6c:	f000 fe1e 	bl	80089ac <checkEEPROM4ID>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d00e      	beq.n	8007d94 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007d76:	4a8f      	ldr	r2, [pc, #572]	@ (8007fb4 <takeMachineID+0x28c>)
 8007d78:	2101      	movs	r1, #1
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	f000 ffd4 	bl	8008d28 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007d80:	4a8d      	ldr	r2, [pc, #564]	@ (8007fb8 <takeMachineID+0x290>)
 8007d82:	2101      	movs	r1, #1
 8007d84:	2002      	movs	r0, #2
 8007d86:	f000 ffcf 	bl	8008d28 <lcd_print>
        		HAL_Delay(1250);
 8007d8a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007d8e:	f001 fd25 	bl	80097dc <HAL_Delay>

        		goto mainSection;
 8007d92:	e7cc      	b.n	8007d2e <takeMachineID+0x6>
        	} else {
        		saveEEPROM(1);
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7f8 fc8d 	bl	80006b4 <saveEEPROM>

            	break;
 8007d9a:	e130      	b.n	8007ffe <takeMachineID+0x2d6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	4884      	ldr	r0, [pc, #528]	@ (8007fb0 <takeMachineID+0x288>)
 8007da0:	f002 faec 	bl	800a37c <HAL_GPIO_ReadPin>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d111      	bne.n	8007dce <takeMachineID+0xa6>
        	if(cursorPosition == 7) {
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	d102      	bne.n	8007db6 <takeMachineID+0x8e>
        		cursorPosition = 10;
 8007db0:	230a      	movs	r3, #10
 8007db2:	60bb      	str	r3, [r7, #8]
 8007db4:	e008      	b.n	8007dc8 <takeMachineID+0xa0>
        	} else if (cursorPosition == 14) {
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b0e      	cmp	r3, #14
 8007dba:	d102      	bne.n	8007dc2 <takeMachineID+0x9a>
                cursorPosition = 3;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	60bb      	str	r3, [r7, #8]
 8007dc0:	e002      	b.n	8007dc8 <takeMachineID+0xa0>
            } else {
            	cursorPosition++;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007dc8:	2096      	movs	r0, #150	@ 0x96
 8007dca:	f001 fd07 	bl	80097dc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007dce:	2108      	movs	r1, #8
 8007dd0:	487a      	ldr	r0, [pc, #488]	@ (8007fbc <takeMachineID+0x294>)
 8007dd2:	f002 fad3 	bl	800a37c <HAL_GPIO_ReadPin>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d111      	bne.n	8007e00 <takeMachineID+0xd8>
            if (cursorPosition == 3) {
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d102      	bne.n	8007de8 <takeMachineID+0xc0>
                cursorPosition = 14;
 8007de2:	230e      	movs	r3, #14
 8007de4:	60bb      	str	r3, [r7, #8]
 8007de6:	e008      	b.n	8007dfa <takeMachineID+0xd2>
            } else if(cursorPosition == 10) {
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b0a      	cmp	r3, #10
 8007dec:	d102      	bne.n	8007df4 <takeMachineID+0xcc>
            	cursorPosition = 7;
 8007dee:	2307      	movs	r3, #7
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	e002      	b.n	8007dfa <takeMachineID+0xd2>
            } else {
            	cursorPosition--;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007dfa:	20fa      	movs	r0, #250	@ 0xfa
 8007dfc:	f001 fcee 	bl	80097dc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007e00:	2102      	movs	r1, #2
 8007e02:	486b      	ldr	r0, [pc, #428]	@ (8007fb0 <takeMachineID+0x288>)
 8007e04:	f002 faba 	bl	800a37c <HAL_GPIO_ReadPin>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	f040 80a1 	bne.w	8007f52 <takeMachineID+0x22a>
        	if(cursorPosition == 3) {
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d10a      	bne.n	8007e2c <takeMachineID+0x104>
        		machineID[arrayPos] = '0';
 8007e16:	4a64      	ldr	r2, [pc, #400]	@ (8007fa8 <takeMachineID+0x280>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	2230      	movs	r2, #48	@ 0x30
 8007e1e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007e20:	4a67      	ldr	r2, [pc, #412]	@ (8007fc0 <takeMachineID+0x298>)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	e07c      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 4) {
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d10a      	bne.n	8007e48 <takeMachineID+0x120>
        		machineID[arrayPos] = '1';
 8007e32:	4a5d      	ldr	r2, [pc, #372]	@ (8007fa8 <takeMachineID+0x280>)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4413      	add	r3, r2
 8007e38:	2231      	movs	r2, #49	@ 0x31
 8007e3a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007e3c:	4a60      	ldr	r2, [pc, #384]	@ (8007fc0 <takeMachineID+0x298>)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	4413      	add	r3, r2
 8007e42:	2201      	movs	r2, #1
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e06e      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 5) {
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d10a      	bne.n	8007e64 <takeMachineID+0x13c>
        		machineID[arrayPos] = '2';
 8007e4e:	4a56      	ldr	r2, [pc, #344]	@ (8007fa8 <takeMachineID+0x280>)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	2232      	movs	r2, #50	@ 0x32
 8007e56:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007e58:	4a59      	ldr	r2, [pc, #356]	@ (8007fc0 <takeMachineID+0x298>)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2202      	movs	r2, #2
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e060      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 6) {
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	d10a      	bne.n	8007e80 <takeMachineID+0x158>
        		machineID[arrayPos] = '3';
 8007e6a:	4a4f      	ldr	r2, [pc, #316]	@ (8007fa8 <takeMachineID+0x280>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	2233      	movs	r2, #51	@ 0x33
 8007e72:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007e74:	4a52      	ldr	r2, [pc, #328]	@ (8007fc0 <takeMachineID+0x298>)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	4413      	add	r3, r2
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e052      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 7) {
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b07      	cmp	r3, #7
 8007e84:	d10a      	bne.n	8007e9c <takeMachineID+0x174>
        		machineID[arrayPos] = '4';
 8007e86:	4a48      	ldr	r2, [pc, #288]	@ (8007fa8 <takeMachineID+0x280>)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	2234      	movs	r2, #52	@ 0x34
 8007e8e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007e90:	4a4b      	ldr	r2, [pc, #300]	@ (8007fc0 <takeMachineID+0x298>)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	2204      	movs	r2, #4
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e044      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 10) {
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b0a      	cmp	r3, #10
 8007ea0:	d10a      	bne.n	8007eb8 <takeMachineID+0x190>
        		machineID[arrayPos] = '5';
 8007ea2:	4a41      	ldr	r2, [pc, #260]	@ (8007fa8 <takeMachineID+0x280>)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	2235      	movs	r2, #53	@ 0x35
 8007eaa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007eac:	4a44      	ldr	r2, [pc, #272]	@ (8007fc0 <takeMachineID+0x298>)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e036      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 11) {
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b0b      	cmp	r3, #11
 8007ebc:	d10a      	bne.n	8007ed4 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '6';
 8007ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8007fa8 <takeMachineID+0x280>)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2236      	movs	r2, #54	@ 0x36
 8007ec6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8007fc0 <takeMachineID+0x298>)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	4413      	add	r3, r2
 8007ece:	2206      	movs	r2, #6
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	e028      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 12) {
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b0c      	cmp	r3, #12
 8007ed8:	d10a      	bne.n	8007ef0 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '7';
 8007eda:	4a33      	ldr	r2, [pc, #204]	@ (8007fa8 <takeMachineID+0x280>)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4413      	add	r3, r2
 8007ee0:	2237      	movs	r2, #55	@ 0x37
 8007ee2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007ee4:	4a36      	ldr	r2, [pc, #216]	@ (8007fc0 <takeMachineID+0x298>)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	4413      	add	r3, r2
 8007eea:	2207      	movs	r2, #7
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e01a      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 13) {
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b0d      	cmp	r3, #13
 8007ef4:	d10a      	bne.n	8007f0c <takeMachineID+0x1e4>
        		machineID[arrayPos] = '8';
 8007ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa8 <takeMachineID+0x280>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4413      	add	r3, r2
 8007efc:	2238      	movs	r2, #56	@ 0x38
 8007efe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007f00:	4a2f      	ldr	r2, [pc, #188]	@ (8007fc0 <takeMachineID+0x298>)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	2208      	movs	r2, #8
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	e00c      	b.n	8007f26 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 14) {
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b0e      	cmp	r3, #14
 8007f10:	d109      	bne.n	8007f26 <takeMachineID+0x1fe>
        		machineID[arrayPos] = '9';
 8007f12:	4a25      	ldr	r2, [pc, #148]	@ (8007fa8 <takeMachineID+0x280>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	2239      	movs	r2, #57	@ 0x39
 8007f1a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007f1c:	4a28      	ldr	r2, [pc, #160]	@ (8007fc0 <takeMachineID+0x298>)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	4413      	add	r3, r2
 8007f22:	2209      	movs	r2, #9
 8007f24:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	b2d9      	uxtb	r1, r3
 8007f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fa8 <takeMachineID+0x280>)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4413      	add	r3, r2
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	2001      	movs	r0, #1
 8007f36:	f000 ff0c 	bl	8008d52 <lcd_print_char>

        	writeLoc++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3301      	adds	r3, #1
 8007f44:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007f4c:	2096      	movs	r0, #150	@ 0x96
 8007f4e:	f001 fc45 	bl	80097dc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007f52:	2104      	movs	r1, #4
 8007f54:	4816      	ldr	r0, [pc, #88]	@ (8007fb0 <takeMachineID+0x288>)
 8007f56:	f002 fa11 	bl	800a37c <HAL_GPIO_ReadPin>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d147      	bne.n	8007ff0 <takeMachineID+0x2c8>
            if(strlen(machineID) >= 1) {
 8007f60:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <takeMachineID+0x280>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d040      	beq.n	8007fea <takeMachineID+0x2c2>
                machineID[arrayPos] = '\0';
 8007f68:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa8 <takeMachineID+0x280>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007f72:	4a13      	ldr	r2, [pc, #76]	@ (8007fc0 <takeMachineID+0x298>)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	4413      	add	r3, r2
 8007f78:	2200      	movs	r2, #0
 8007f7a:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	dd03      	ble.n	8007f8a <takeMachineID+0x262>
                	writeLoc--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	e004      	b.n	8007f94 <takeMachineID+0x26c>
                } else if(writeLoc < 5) {
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	dc01      	bgt.n	8007f94 <takeMachineID+0x26c>
                	writeLoc = 5;
 8007f90:	2305      	movs	r3, #5
 8007f92:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dd14      	ble.n	8007fc4 <takeMachineID+0x29c>
                	arrayPos--;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	e015      	b.n	8007fd4 <takeMachineID+0x2ac>
 8007fa8:	20001064 	.word	0x20001064
 8007fac:	20000000 	.word	0x20000000
 8007fb0:	40010800 	.word	0x40010800
 8007fb4:	200017e8 	.word	0x200017e8
 8007fb8:	200017fc 	.word	0x200017fc
 8007fbc:	40011000 	.word	0x40011000
 8007fc0:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da04      	bge.n	8007fd4 <takeMachineID+0x2ac>
                	arrayPos = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007fce:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <takeMachineID+0x2e0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	3305      	adds	r3, #5
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	4619      	mov	r1, r3
 8007fde:	2001      	movs	r0, #1
 8007fe0:	f000 fed8 	bl	8008d94 <lcd_delete_char>
                HAL_Delay(50);
 8007fe4:	2032      	movs	r0, #50	@ 0x32
 8007fe6:	f001 fbf9 	bl	80097dc <HAL_Delay>
            }

            HAL_Delay(150);
 8007fea:	2096      	movs	r0, #150	@ 0x96
 8007fec:	f001 fbf6 	bl	80097dc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	2002      	movs	r0, #2
 8007ff8:	f000 fe77 	bl	8008cea <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ffc:	e6ac      	b.n	8007d58 <takeMachineID+0x30>
    }
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000000 	.word	0x20000000

0800800c <ssidConfirmation>:

uint8_t ssidConfirmation() {
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008012:	2301      	movs	r3, #1
 8008014:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008016:	4a1e      	ldr	r2, [pc, #120]	@ (8008090 <ssidConfirmation+0x84>)
 8008018:	2101      	movs	r1, #1
 800801a:	2001      	movs	r0, #1
 800801c:	f000 fe84 	bl	8008d28 <lcd_print>

	while(loopVal == 1) {
 8008020:	e012      	b.n	8008048 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008022:	4a1c      	ldr	r2, [pc, #112]	@ (8008094 <ssidConfirmation+0x88>)
 8008024:	2101      	movs	r1, #1
 8008026:	2002      	movs	r0, #2
 8008028:	f000 fe7e 	bl	8008d28 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800802c:	2102      	movs	r1, #2
 800802e:	481a      	ldr	r0, [pc, #104]	@ (8008098 <ssidConfirmation+0x8c>)
 8008030:	f002 f9a4 	bl	800a37c <HAL_GPIO_ReadPin>
 8008034:	4603      	mov	r3, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <ssidConfirmation+0x32>
			loopVal = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 800803e:	4a17      	ldr	r2, [pc, #92]	@ (800809c <ssidConfirmation+0x90>)
 8008040:	2101      	movs	r1, #1
 8008042:	2001      	movs	r0, #1
 8008044:	f000 fe70 	bl	8008d28 <lcd_print>
	while(loopVal == 1) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d0e9      	beq.n	8008022 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 800804e:	2000      	movs	r0, #0
 8008050:	f000 fec8 	bl	8008de4 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008054:	4811      	ldr	r0, [pc, #68]	@ (800809c <ssidConfirmation+0x90>)
 8008056:	f7f8 f8e5 	bl	8000224 <strlen>
 800805a:	4603      	mov	r3, r0
 800805c:	2b14      	cmp	r3, #20
 800805e:	d90f      	bls.n	8008080 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008060:	4a0f      	ldr	r2, [pc, #60]	@ (80080a0 <ssidConfirmation+0x94>)
 8008062:	2101      	movs	r1, #1
 8008064:	2001      	movs	r0, #1
 8008066:	f000 fe5f 	bl	8008d28 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800806a:	4a0e      	ldr	r2, [pc, #56]	@ (80080a4 <ssidConfirmation+0x98>)
 800806c:	2101      	movs	r1, #1
 800806e:	2002      	movs	r0, #2
 8008070:	f000 fe5a 	bl	8008d28 <lcd_print>
        HAL_Delay(1250);
 8008074:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008078:	f001 fbb0 	bl	80097dc <HAL_Delay>

        return 0;
 800807c:	2300      	movs	r3, #0
 800807e:	e003      	b.n	8008088 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008080:	2001      	movs	r0, #1
 8008082:	f7f8 fb17 	bl	80006b4 <saveEEPROM>

    	return 1;
 8008086:	2301      	movs	r3, #1
    }
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	0800e300 	.word	0x0800e300
 8008094:	20001900 	.word	0x20001900
 8008098:	40010800 	.word	0x40010800
 800809c:	20001070 	.word	0x20001070
 80080a0:	20001810 	.word	0x20001810
 80080a4:	20001824 	.word	0x20001824

080080a8 <takeWifiSSID>:

void takeWifiSSID() {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80080ae:	2001      	movs	r0, #1
 80080b0:	f000 fe98 	bl	8008de4 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80080b4:	2210      	movs	r2, #16
 80080b6:	2100      	movs	r1, #0
 80080b8:	48a4      	ldr	r0, [pc, #656]	@ (800834c <takeWifiSSID+0x2a4>)
 80080ba:	f005 fad9 	bl	800d670 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80080be:	2301      	movs	r3, #1
 80080c0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80080c2:	2307      	movs	r3, #7
 80080c4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80080c6:	2301      	movs	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80080ce:	4ba0      	ldr	r3, [pc, #640]	@ (8008350 <takeWifiSSID+0x2a8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80080d4:	2101      	movs	r1, #1
 80080d6:	2002      	movs	r0, #2
 80080d8:	f7f8 ff6a 	bl	8000fb0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80080dc:	2108      	movs	r1, #8
 80080de:	489d      	ldr	r0, [pc, #628]	@ (8008354 <takeWifiSSID+0x2ac>)
 80080e0:	f002 f94c 	bl	800a37c <HAL_GPIO_ReadPin>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d106      	bne.n	80080f8 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80080ea:	f7ff ff8f 	bl	800800c <ssidConfirmation>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 8126 	bne.w	8008342 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80080f6:	e7da      	b.n	80080ae <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80080f8:	2101      	movs	r1, #1
 80080fa:	4896      	ldr	r0, [pc, #600]	@ (8008354 <takeWifiSSID+0x2ac>)
 80080fc:	f002 f93e 	bl	800a37c <HAL_GPIO_ReadPin>
 8008100:	4603      	mov	r3, r0
 8008102:	2b01      	cmp	r3, #1
 8008104:	d14d      	bne.n	80081a2 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b50      	cmp	r3, #80	@ 0x50
 800810a:	dd01      	ble.n	8008110 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 800810c:	2301      	movs	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b10      	cmp	r3, #16
 8008114:	d13f      	bne.n	8008196 <takeWifiSSID+0xee>
            	if(page == 1) {
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d109      	bne.n	8008130 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	3301      	adds	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008126:	2102      	movs	r1, #2
 8008128:	2002      	movs	r0, #2
 800812a:	f7f8 ff41 	bl	8000fb0 <printTemplate>
 800812e:	e035      	b.n	800819c <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d109      	bne.n	800814a <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8008136:	2301      	movs	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
            		page++;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	3301      	adds	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008140:	2103      	movs	r1, #3
 8008142:	2002      	movs	r0, #2
 8008144:	f7f8 ff34 	bl	8000fb0 <printTemplate>
 8008148:	e028      	b.n	800819c <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d109      	bne.n	8008164 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008150:	2301      	movs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
            		page++;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	3301      	adds	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800815a:	2104      	movs	r1, #4
 800815c:	2002      	movs	r0, #2
 800815e:	f7f8 ff27 	bl	8000fb0 <printTemplate>
 8008162:	e01b      	b.n	800819c <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b04      	cmp	r3, #4
 8008168:	d109      	bne.n	800817e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800816a:	2301      	movs	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
            		page++;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	3301      	adds	r3, #1
 8008172:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008174:	2105      	movs	r1, #5
 8008176:	2002      	movs	r0, #2
 8008178:	f7f8 ff1a 	bl	8000fb0 <printTemplate>
 800817c:	e00e      	b.n	800819c <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b05      	cmp	r3, #5
 8008182:	d10b      	bne.n	800819c <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8008184:	2301      	movs	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800818c:	2101      	movs	r1, #1
 800818e:	2002      	movs	r0, #2
 8008190:	f7f8 ff0e 	bl	8000fb0 <printTemplate>
 8008194:	e002      	b.n	800819c <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3301      	adds	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800819c:	2096      	movs	r0, #150	@ 0x96
 800819e:	f001 fb1d 	bl	80097dc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80081a2:	2108      	movs	r1, #8
 80081a4:	486c      	ldr	r0, [pc, #432]	@ (8008358 <takeWifiSSID+0x2b0>)
 80081a6:	f002 f8e9 	bl	800a37c <HAL_GPIO_ReadPin>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d149      	bne.n	8008244 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dc01      	bgt.n	80081ba <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80081b6:	2350      	movs	r3, #80	@ 0x50
 80081b8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d13b      	bne.n	8008238 <takeWifiSSID+0x190>
            	if(page == 1) {
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d108      	bne.n	80081d8 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80081c6:	2310      	movs	r3, #16
 80081c8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80081ca:	2305      	movs	r3, #5
 80081cc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80081ce:	2105      	movs	r1, #5
 80081d0:	2002      	movs	r0, #2
 80081d2:	f7f8 feed 	bl	8000fb0 <printTemplate>
 80081d6:	e032      	b.n	800823e <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d108      	bne.n	80081f0 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80081de:	2310      	movs	r3, #16
 80081e0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80081e2:	2301      	movs	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80081e6:	2101      	movs	r1, #1
 80081e8:	2002      	movs	r0, #2
 80081ea:	f7f8 fee1 	bl	8000fb0 <printTemplate>
 80081ee:	e026      	b.n	800823e <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d108      	bne.n	8008208 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80081f6:	2310      	movs	r3, #16
 80081f8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80081fa:	2302      	movs	r3, #2
 80081fc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80081fe:	2102      	movs	r1, #2
 8008200:	2002      	movs	r0, #2
 8008202:	f7f8 fed5 	bl	8000fb0 <printTemplate>
 8008206:	e01a      	b.n	800823e <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d108      	bne.n	8008220 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800820e:	2310      	movs	r3, #16
 8008210:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008212:	2303      	movs	r3, #3
 8008214:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008216:	2103      	movs	r1, #3
 8008218:	2002      	movs	r0, #2
 800821a:	f7f8 fec9 	bl	8000fb0 <printTemplate>
 800821e:	e00e      	b.n	800823e <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2b05      	cmp	r3, #5
 8008224:	d10b      	bne.n	800823e <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8008226:	2310      	movs	r3, #16
 8008228:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800822a:	2304      	movs	r3, #4
 800822c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800822e:	2104      	movs	r1, #4
 8008230:	2002      	movs	r0, #2
 8008232:	f7f8 febd 	bl	8000fb0 <printTemplate>
 8008236:	e002      	b.n	800823e <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3b01      	subs	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800823e:	2096      	movs	r0, #150	@ 0x96
 8008240:	f001 facc 	bl	80097dc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008244:	2102      	movs	r1, #2
 8008246:	4843      	ldr	r0, [pc, #268]	@ (8008354 <takeWifiSSID+0x2ac>)
 8008248:	f002 f898 	bl	800a37c <HAL_GPIO_ReadPin>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d12f      	bne.n	80082b2 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	b2d9      	uxtb	r1, r3
 8008256:	4a41      	ldr	r2, [pc, #260]	@ (800835c <takeWifiSSID+0x2b4>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4413      	add	r3, r2
 800825c:	460a      	mov	r2, r1
 800825e:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008260:	4a3f      	ldr	r2, [pc, #252]	@ (8008360 <takeWifiSSID+0x2b8>)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	7819      	ldrb	r1, [r3, #0]
 8008268:	4a38      	ldr	r2, [pc, #224]	@ (800834c <takeWifiSSID+0x2a4>)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	4413      	add	r3, r2
 800826e:	460a      	mov	r2, r1
 8008270:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	b2d9      	uxtb	r1, r3
 8008276:	4a3a      	ldr	r2, [pc, #232]	@ (8008360 <takeWifiSSID+0x2b8>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	2001      	movs	r0, #1
 8008282:	f000 fd66 	bl	8008d52 <lcd_print_char>

            writeLoc++;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3301      	adds	r3, #1
 800828a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	3301      	adds	r3, #1
 8008290:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3301      	adds	r3, #1
 8008296:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008298:	4a30      	ldr	r2, [pc, #192]	@ (800835c <takeWifiSSID+0x2b4>)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80082a2:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <takeWifiSSID+0x2a4>)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80082ac:	2096      	movs	r0, #150	@ 0x96
 80082ae:	f001 fa95 	bl	80097dc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80082b2:	2104      	movs	r1, #4
 80082b4:	4827      	ldr	r0, [pc, #156]	@ (8008354 <takeWifiSSID+0x2ac>)
 80082b6:	f002 f861 	bl	800a37c <HAL_GPIO_ReadPin>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d139      	bne.n	8008334 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80082c0:	4b22      	ldr	r3, [pc, #136]	@ (800834c <takeWifiSSID+0x2a4>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d032      	beq.n	800832e <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80082c8:	4a24      	ldr	r2, [pc, #144]	@ (800835c <takeWifiSSID+0x2b4>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80082d2:	4a1e      	ldr	r2, [pc, #120]	@ (800834c <takeWifiSSID+0x2a4>)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2b07      	cmp	r3, #7
 80082e0:	dd03      	ble.n	80082ea <takeWifiSSID+0x242>
        			writeLoc--;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	e004      	b.n	80082f4 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	dc01      	bgt.n	80082f4 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80082f0:	2307      	movs	r3, #7
 80082f2:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dd06      	ble.n	8008308 <takeWifiSSID+0x260>
        			arrayPosition--;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3b01      	subs	r3, #1
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	e007      	b.n	8008318 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	da04      	bge.n	8008318 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008312:	4b0f      	ldr	r3, [pc, #60]	@ (8008350 <takeWifiSSID+0x2a8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	3307      	adds	r3, #7
 800831e:	b2db      	uxtb	r3, r3
 8008320:	4619      	mov	r1, r3
 8008322:	2001      	movs	r0, #1
 8008324:	f000 fd36 	bl	8008d94 <lcd_delete_char>
        		HAL_Delay(50);
 8008328:	2032      	movs	r0, #50	@ 0x32
 800832a:	f001 fa57 	bl	80097dc <HAL_Delay>
        	}

        	HAL_Delay(150);
 800832e:	2096      	movs	r0, #150	@ 0x96
 8008330:	f001 fa54 	bl	80097dc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	4619      	mov	r1, r3
 800833a:	2002      	movs	r0, #2
 800833c:	f000 fcd5 	bl	8008cea <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008340:	e6cc      	b.n	80080dc <takeWifiSSID+0x34>
        		break;
 8008342:	bf00      	nop
    }
}
 8008344:	bf00      	nop
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20001070 	.word	0x20001070
 8008350:	20000004 	.word	0x20000004
 8008354:	40010800 	.word	0x40010800
 8008358:	40011000 	.word	0x40011000
 800835c:	20000fec 	.word	0x20000fec
 8008360:	20000018 	.word	0x20000018

08008364 <passConfirmation>:

uint8_t passConfirmation() {
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800836a:	2301      	movs	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800836e:	4a1e      	ldr	r2, [pc, #120]	@ (80083e8 <passConfirmation+0x84>)
 8008370:	2101      	movs	r1, #1
 8008372:	2001      	movs	r0, #1
 8008374:	f000 fcd8 	bl	8008d28 <lcd_print>

	while(loopVal == 1) {
 8008378:	e012      	b.n	80083a0 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800837a:	4a1c      	ldr	r2, [pc, #112]	@ (80083ec <passConfirmation+0x88>)
 800837c:	2101      	movs	r1, #1
 800837e:	2002      	movs	r0, #2
 8008380:	f000 fcd2 	bl	8008d28 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008384:	2102      	movs	r1, #2
 8008386:	481a      	ldr	r0, [pc, #104]	@ (80083f0 <passConfirmation+0x8c>)
 8008388:	f001 fff8 	bl	800a37c <HAL_GPIO_ReadPin>
 800838c:	4603      	mov	r3, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <passConfirmation+0x32>
			loopVal = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 8008396:	4a17      	ldr	r2, [pc, #92]	@ (80083f4 <passConfirmation+0x90>)
 8008398:	2101      	movs	r1, #1
 800839a:	2001      	movs	r0, #1
 800839c:	f000 fcc4 	bl	8008d28 <lcd_print>
	while(loopVal == 1) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d0e9      	beq.n	800837a <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80083a6:	2000      	movs	r0, #0
 80083a8:	f000 fd1c 	bl	8008de4 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80083ac:	4811      	ldr	r0, [pc, #68]	@ (80083f4 <passConfirmation+0x90>)
 80083ae:	f7f7 ff39 	bl	8000224 <strlen>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b14      	cmp	r3, #20
 80083b6:	d90f      	bls.n	80083d8 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80083b8:	4a0f      	ldr	r2, [pc, #60]	@ (80083f8 <passConfirmation+0x94>)
 80083ba:	2101      	movs	r1, #1
 80083bc:	2001      	movs	r0, #1
 80083be:	f000 fcb3 	bl	8008d28 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80083c2:	4a0e      	ldr	r2, [pc, #56]	@ (80083fc <passConfirmation+0x98>)
 80083c4:	2101      	movs	r1, #1
 80083c6:	2002      	movs	r0, #2
 80083c8:	f000 fcae 	bl	8008d28 <lcd_print>
        HAL_Delay(1250);
 80083cc:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80083d0:	f001 fa04 	bl	80097dc <HAL_Delay>

        return 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e003      	b.n	80083e0 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80083d8:	2001      	movs	r0, #1
 80083da:	f7f8 f96b 	bl	80006b4 <saveEEPROM>

    	return 1;
 80083de:	2301      	movs	r3, #1
    }
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	0800e300 	.word	0x0800e300
 80083ec:	20001900 	.word	0x20001900
 80083f0:	40010800 	.word	0x40010800
 80083f4:	20001080 	.word	0x20001080
 80083f8:	20001838 	.word	0x20001838
 80083fc:	2000184c 	.word	0x2000184c

08008400 <takeWifiPass>:

void takeWifiPass() {
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8008406:	2001      	movs	r0, #1
 8008408:	f000 fcec 	bl	8008de4 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800840c:	2210      	movs	r2, #16
 800840e:	2100      	movs	r1, #0
 8008410:	48a4      	ldr	r0, [pc, #656]	@ (80086a4 <takeWifiPass+0x2a4>)
 8008412:	f005 f92d 	bl	800d670 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008416:	2301      	movs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800841a:	2307      	movs	r3, #7
 800841c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800841e:	2301      	movs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008426:	4ba0      	ldr	r3, [pc, #640]	@ (80086a8 <takeWifiPass+0x2a8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800842c:	2101      	movs	r1, #1
 800842e:	2003      	movs	r0, #3
 8008430:	f7f8 fdbe 	bl	8000fb0 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008434:	2108      	movs	r1, #8
 8008436:	489d      	ldr	r0, [pc, #628]	@ (80086ac <takeWifiPass+0x2ac>)
 8008438:	f001 ffa0 	bl	800a37c <HAL_GPIO_ReadPin>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d106      	bne.n	8008450 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008442:	f7ff ff8f 	bl	8008364 <passConfirmation>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	f040 8126 	bne.w	800869a <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800844e:	e7da      	b.n	8008406 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008450:	2101      	movs	r1, #1
 8008452:	4896      	ldr	r0, [pc, #600]	@ (80086ac <takeWifiPass+0x2ac>)
 8008454:	f001 ff92 	bl	800a37c <HAL_GPIO_ReadPin>
 8008458:	4603      	mov	r3, r0
 800845a:	2b01      	cmp	r3, #1
 800845c:	d14d      	bne.n	80084fa <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b50      	cmp	r3, #80	@ 0x50
 8008462:	dd01      	ble.n	8008468 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008464:	2301      	movs	r3, #1
 8008466:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b10      	cmp	r3, #16
 800846c:	d13f      	bne.n	80084ee <takeWifiPass+0xee>
            	if(page == 1) {
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d109      	bne.n	8008488 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008474:	2301      	movs	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
            		page++;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3301      	adds	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800847e:	2102      	movs	r1, #2
 8008480:	2003      	movs	r0, #3
 8008482:	f7f8 fd95 	bl	8000fb0 <printTemplate>
 8008486:	e035      	b.n	80084f4 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d109      	bne.n	80084a2 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 800848e:	2301      	movs	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
            		page++;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	3301      	adds	r3, #1
 8008496:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008498:	2103      	movs	r1, #3
 800849a:	2003      	movs	r0, #3
 800849c:	f7f8 fd88 	bl	8000fb0 <printTemplate>
 80084a0:	e028      	b.n	80084f4 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d109      	bne.n	80084bc <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
            		page++;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	3301      	adds	r3, #1
 80084b0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80084b2:	2104      	movs	r1, #4
 80084b4:	2003      	movs	r0, #3
 80084b6:	f7f8 fd7b 	bl	8000fb0 <printTemplate>
 80084ba:	e01b      	b.n	80084f4 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d109      	bne.n	80084d6 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80084c2:	2301      	movs	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
            		page++;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	3301      	adds	r3, #1
 80084ca:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80084cc:	2105      	movs	r1, #5
 80084ce:	2003      	movs	r0, #3
 80084d0:	f7f8 fd6e 	bl	8000fb0 <printTemplate>
 80084d4:	e00e      	b.n	80084f4 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d10b      	bne.n	80084f4 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80084dc:	2301      	movs	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80084e4:	2101      	movs	r1, #1
 80084e6:	2003      	movs	r0, #3
 80084e8:	f7f8 fd62 	bl	8000fb0 <printTemplate>
 80084ec:	e002      	b.n	80084f4 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80084f4:	2096      	movs	r0, #150	@ 0x96
 80084f6:	f001 f971 	bl	80097dc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80084fa:	2108      	movs	r1, #8
 80084fc:	486c      	ldr	r0, [pc, #432]	@ (80086b0 <takeWifiPass+0x2b0>)
 80084fe:	f001 ff3d 	bl	800a37c <HAL_GPIO_ReadPin>
 8008502:	4603      	mov	r3, r0
 8008504:	2b01      	cmp	r3, #1
 8008506:	d149      	bne.n	800859c <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dc01      	bgt.n	8008512 <takeWifiPass+0x112>
        		cursorPosition = 80;
 800850e:	2350      	movs	r3, #80	@ 0x50
 8008510:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d13b      	bne.n	8008590 <takeWifiPass+0x190>
            	if(page == 1) {
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d108      	bne.n	8008530 <takeWifiPass+0x130>
            		cursorPosition = 16;
 800851e:	2310      	movs	r3, #16
 8008520:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008522:	2305      	movs	r3, #5
 8008524:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008526:	2105      	movs	r1, #5
 8008528:	2003      	movs	r0, #3
 800852a:	f7f8 fd41 	bl	8000fb0 <printTemplate>
 800852e:	e032      	b.n	8008596 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d108      	bne.n	8008548 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008536:	2310      	movs	r3, #16
 8008538:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800853a:	2301      	movs	r3, #1
 800853c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800853e:	2101      	movs	r1, #1
 8008540:	2003      	movs	r0, #3
 8008542:	f7f8 fd35 	bl	8000fb0 <printTemplate>
 8008546:	e026      	b.n	8008596 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b03      	cmp	r3, #3
 800854c:	d108      	bne.n	8008560 <takeWifiPass+0x160>
            		cursorPosition = 16;
 800854e:	2310      	movs	r3, #16
 8008550:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008552:	2302      	movs	r3, #2
 8008554:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008556:	2102      	movs	r1, #2
 8008558:	2003      	movs	r0, #3
 800855a:	f7f8 fd29 	bl	8000fb0 <printTemplate>
 800855e:	e01a      	b.n	8008596 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d108      	bne.n	8008578 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008566:	2310      	movs	r3, #16
 8008568:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800856a:	2303      	movs	r3, #3
 800856c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800856e:	2103      	movs	r1, #3
 8008570:	2003      	movs	r0, #3
 8008572:	f7f8 fd1d 	bl	8000fb0 <printTemplate>
 8008576:	e00e      	b.n	8008596 <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b05      	cmp	r3, #5
 800857c:	d10b      	bne.n	8008596 <takeWifiPass+0x196>
            		cursorPosition = 16;
 800857e:	2310      	movs	r3, #16
 8008580:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008582:	2304      	movs	r3, #4
 8008584:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008586:	2104      	movs	r1, #4
 8008588:	2003      	movs	r0, #3
 800858a:	f7f8 fd11 	bl	8000fb0 <printTemplate>
 800858e:	e002      	b.n	8008596 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3b01      	subs	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008596:	2096      	movs	r0, #150	@ 0x96
 8008598:	f001 f920 	bl	80097dc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800859c:	2102      	movs	r1, #2
 800859e:	4843      	ldr	r0, [pc, #268]	@ (80086ac <takeWifiPass+0x2ac>)
 80085a0:	f001 feec 	bl	800a37c <HAL_GPIO_ReadPin>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d12f      	bne.n	800860a <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	b2d9      	uxtb	r1, r3
 80085ae:	4a41      	ldr	r2, [pc, #260]	@ (80086b4 <takeWifiPass+0x2b4>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4413      	add	r3, r2
 80085b4:	460a      	mov	r2, r1
 80085b6:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80085b8:	4a3f      	ldr	r2, [pc, #252]	@ (80086b8 <takeWifiPass+0x2b8>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	7819      	ldrb	r1, [r3, #0]
 80085c0:	4a38      	ldr	r2, [pc, #224]	@ (80086a4 <takeWifiPass+0x2a4>)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4413      	add	r3, r2
 80085c6:	460a      	mov	r2, r1
 80085c8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	b2d9      	uxtb	r1, r3
 80085ce:	4a3a      	ldr	r2, [pc, #232]	@ (80086b8 <takeWifiPass+0x2b8>)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	2001      	movs	r0, #1
 80085da:	f000 fbba 	bl	8008d52 <lcd_print_char>

            writeLoc++;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3301      	adds	r3, #1
 80085ee:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80085f0:	4a30      	ldr	r2, [pc, #192]	@ (80086b4 <takeWifiPass+0x2b4>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 80085fa:	4a2a      	ldr	r2, [pc, #168]	@ (80086a4 <takeWifiPass+0x2a4>)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4413      	add	r3, r2
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008604:	2096      	movs	r0, #150	@ 0x96
 8008606:	f001 f8e9 	bl	80097dc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800860a:	2104      	movs	r1, #4
 800860c:	4827      	ldr	r0, [pc, #156]	@ (80086ac <takeWifiPass+0x2ac>)
 800860e:	f001 feb5 	bl	800a37c <HAL_GPIO_ReadPin>
 8008612:	4603      	mov	r3, r0
 8008614:	2b01      	cmp	r3, #1
 8008616:	d139      	bne.n	800868c <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008618:	4b22      	ldr	r3, [pc, #136]	@ (80086a4 <takeWifiPass+0x2a4>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d032      	beq.n	8008686 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008620:	4a24      	ldr	r2, [pc, #144]	@ (80086b4 <takeWifiPass+0x2b4>)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800862a:	4a1e      	ldr	r2, [pc, #120]	@ (80086a4 <takeWifiPass+0x2a4>)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4413      	add	r3, r2
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b07      	cmp	r3, #7
 8008638:	dd03      	ble.n	8008642 <takeWifiPass+0x242>
        			writeLoc--;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3b01      	subs	r3, #1
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	e004      	b.n	800864c <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b06      	cmp	r3, #6
 8008646:	dc01      	bgt.n	800864c <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008648:	2307      	movs	r3, #7
 800864a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd06      	ble.n	8008660 <takeWifiPass+0x260>
        			arrayPosition--;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	3b01      	subs	r3, #1
 8008656:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3b01      	subs	r3, #1
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	e007      	b.n	8008670 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da04      	bge.n	8008670 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800866a:	4b0f      	ldr	r3, [pc, #60]	@ (80086a8 <takeWifiPass+0x2a8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	3307      	adds	r3, #7
 8008676:	b2db      	uxtb	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	2001      	movs	r0, #1
 800867c:	f000 fb8a 	bl	8008d94 <lcd_delete_char>
        		HAL_Delay(50);
 8008680:	2032      	movs	r0, #50	@ 0x32
 8008682:	f001 f8ab 	bl	80097dc <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008686:	2096      	movs	r0, #150	@ 0x96
 8008688:	f001 f8a8 	bl	80097dc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	4619      	mov	r1, r3
 8008692:	2002      	movs	r0, #2
 8008694:	f000 fb29 	bl	8008cea <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008698:	e6cc      	b.n	8008434 <takeWifiPass+0x34>
    	        break;
 800869a:	bf00      	nop
    }
}
 800869c:	bf00      	nop
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20001080 	.word	0x20001080
 80086a8:	20000008 	.word	0x20000008
 80086ac:	40010800 	.word	0x40010800
 80086b0:	40011000 	.word	0x40011000
 80086b4:	20000fec 	.word	0x20000fec
 80086b8:	20000018 	.word	0x20000018

080086bc <mergeData>:

char* mergeData() {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b09c      	sub	sp, #112	@ 0x70
 80086c0:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80086c2:	2300      	movs	r3, #0
 80086c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80086ca:	2229      	movs	r2, #41	@ 0x29
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f004 ffce 	bl	800d670 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80086d4:	4b5f      	ldr	r3, [pc, #380]	@ (8008854 <mergeData+0x198>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	703b      	strb	r3, [r7, #0]
 80086da:	4b5f      	ldr	r3, [pc, #380]	@ (8008858 <mergeData+0x19c>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	707b      	strb	r3, [r7, #1]
 80086e0:	4b5e      	ldr	r3, [pc, #376]	@ (800885c <mergeData+0x1a0>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	70bb      	strb	r3, [r7, #2]
 80086e6:	4b5e      	ldr	r3, [pc, #376]	@ (8008860 <mergeData+0x1a4>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	70fb      	strb	r3, [r7, #3]
 80086ec:	4b5d      	ldr	r3, [pc, #372]	@ (8008864 <mergeData+0x1a8>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	713b      	strb	r3, [r7, #4]
 80086f2:	4b5d      	ldr	r3, [pc, #372]	@ (8008868 <mergeData+0x1ac>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	717b      	strb	r3, [r7, #5]
 80086f8:	4b5c      	ldr	r3, [pc, #368]	@ (800886c <mergeData+0x1b0>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	71bb      	strb	r3, [r7, #6]
 80086fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008870 <mergeData+0x1b4>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
 8008704:	4b5b      	ldr	r3, [pc, #364]	@ (8008874 <mergeData+0x1b8>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	723b      	strb	r3, [r7, #8]
 800870a:	4b5b      	ldr	r3, [pc, #364]	@ (8008878 <mergeData+0x1bc>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	727b      	strb	r3, [r7, #9]
 8008710:	4b5a      	ldr	r3, [pc, #360]	@ (800887c <mergeData+0x1c0>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	72bb      	strb	r3, [r7, #10]
 8008716:	4b5a      	ldr	r3, [pc, #360]	@ (8008880 <mergeData+0x1c4>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	72fb      	strb	r3, [r7, #11]
 800871c:	4b59      	ldr	r3, [pc, #356]	@ (8008884 <mergeData+0x1c8>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	733b      	strb	r3, [r7, #12]
 8008722:	4b59      	ldr	r3, [pc, #356]	@ (8008888 <mergeData+0x1cc>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	737b      	strb	r3, [r7, #13]
 8008728:	4b58      	ldr	r3, [pc, #352]	@ (800888c <mergeData+0x1d0>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	73bb      	strb	r3, [r7, #14]
 800872e:	4b58      	ldr	r3, [pc, #352]	@ (8008890 <mergeData+0x1d4>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	4b57      	ldr	r3, [pc, #348]	@ (8008894 <mergeData+0x1d8>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	743b      	strb	r3, [r7, #16]
 800873a:	4b57      	ldr	r3, [pc, #348]	@ (8008898 <mergeData+0x1dc>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	747b      	strb	r3, [r7, #17]
 8008740:	4b56      	ldr	r3, [pc, #344]	@ (800889c <mergeData+0x1e0>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	74bb      	strb	r3, [r7, #18]
 8008746:	4b56      	ldr	r3, [pc, #344]	@ (80088a0 <mergeData+0x1e4>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	74fb      	strb	r3, [r7, #19]
 800874c:	4b55      	ldr	r3, [pc, #340]	@ (80088a4 <mergeData+0x1e8>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	753b      	strb	r3, [r7, #20]
 8008752:	4b55      	ldr	r3, [pc, #340]	@ (80088a8 <mergeData+0x1ec>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	757b      	strb	r3, [r7, #21]
 8008758:	4b54      	ldr	r3, [pc, #336]	@ (80088ac <mergeData+0x1f0>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	75bb      	strb	r3, [r7, #22]
 800875e:	4b54      	ldr	r3, [pc, #336]	@ (80088b0 <mergeData+0x1f4>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	75fb      	strb	r3, [r7, #23]
 8008764:	4b53      	ldr	r3, [pc, #332]	@ (80088b4 <mergeData+0x1f8>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	763b      	strb	r3, [r7, #24]
 800876a:	4b53      	ldr	r3, [pc, #332]	@ (80088b8 <mergeData+0x1fc>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	767b      	strb	r3, [r7, #25]
 8008770:	4b52      	ldr	r3, [pc, #328]	@ (80088bc <mergeData+0x200>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	76bb      	strb	r3, [r7, #26]
 8008776:	4b52      	ldr	r3, [pc, #328]	@ (80088c0 <mergeData+0x204>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	76fb      	strb	r3, [r7, #27]
 800877c:	4b51      	ldr	r3, [pc, #324]	@ (80088c4 <mergeData+0x208>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	773b      	strb	r3, [r7, #28]
 8008782:	4b51      	ldr	r3, [pc, #324]	@ (80088c8 <mergeData+0x20c>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008788:	4b50      	ldr	r3, [pc, #320]	@ (80088cc <mergeData+0x210>)
 800878a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 800878e:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008790:	4b4e      	ldr	r3, [pc, #312]	@ (80088cc <mergeData+0x210>)
 8008792:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008796:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008798:	4b4c      	ldr	r3, [pc, #304]	@ (80088cc <mergeData+0x210>)
 800879a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 800879e:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 80087a2:	4b4a      	ldr	r3, [pc, #296]	@ (80088cc <mergeData+0x210>)
 80087a4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 80087a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 80087ac:	4b47      	ldr	r3, [pc, #284]	@ (80088cc <mergeData+0x210>)
 80087ae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 80087b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 80087b6:	4b45      	ldr	r3, [pc, #276]	@ (80088cc <mergeData+0x210>)
 80087b8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 80087bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 80087c0:	4b42      	ldr	r3, [pc, #264]	@ (80088cc <mergeData+0x210>)
 80087c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 80087c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 80087ca:	4b40      	ldr	r3, [pc, #256]	@ (80088cc <mergeData+0x210>)
 80087cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 80087d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 80087d4:	4b3d      	ldr	r3, [pc, #244]	@ (80088cc <mergeData+0x210>)
 80087d6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 80087da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 80087de:	4b3b      	ldr	r3, [pc, #236]	@ (80088cc <mergeData+0x210>)
 80087e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 80087e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80087e8:	2306      	movs	r3, #6
 80087ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80087ee:	2300      	movs	r3, #0
 80087f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087f2:	e015      	b.n	8008820 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 80087f4:	463a      	mov	r2, r7
 80087f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087f8:	4413      	add	r3, r2
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008802:	4933      	ldr	r1, [pc, #204]	@ (80088d0 <mergeData+0x214>)
 8008804:	4618      	mov	r0, r3
 8008806:	f004 ff13 	bl	800d630 <siprintf>
	    strcat(combinedString, temp);
 800880a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800880e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f004 ff33 	bl	800d680 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800881a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800881c:	3301      	adds	r3, #1
 800881e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008822:	2b28      	cmp	r3, #40	@ 0x28
 8008824:	d9e6      	bls.n	80087f4 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008826:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800882a:	4618      	mov	r0, r3
 800882c:	f7f7 fcfa 	bl	8000224 <strlen>
 8008830:	4603      	mov	r3, r0
 8008832:	3301      	adds	r3, #1
 8008834:	4618      	mov	r0, r3
 8008836:	f004 fdcf 	bl	800d3d8 <malloc>
 800883a:	4603      	mov	r3, r0
 800883c:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 800883e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008842:	4619      	mov	r1, r3
 8008844:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008846:	f004 ff67 	bl	800d718 <strcpy>
	return result;
 800884a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 800884c:	4618      	mov	r0, r3
 800884e:	3770      	adds	r7, #112	@ 0x70
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	200010cb 	.word	0x200010cb
 8008858:	200010bd 	.word	0x200010bd
 800885c:	200010c0 	.word	0x200010c0
 8008860:	200010c1 	.word	0x200010c1
 8008864:	200010c2 	.word	0x200010c2
 8008868:	200010c9 	.word	0x200010c9
 800886c:	200010c3 	.word	0x200010c3
 8008870:	200010c4 	.word	0x200010c4
 8008874:	200010c8 	.word	0x200010c8
 8008878:	200010c5 	.word	0x200010c5
 800887c:	200010d5 	.word	0x200010d5
 8008880:	200010c6 	.word	0x200010c6
 8008884:	200010d6 	.word	0x200010d6
 8008888:	200010c7 	.word	0x200010c7
 800888c:	200010d7 	.word	0x200010d7
 8008890:	200010ca 	.word	0x200010ca
 8008894:	200010cc 	.word	0x200010cc
 8008898:	200010cd 	.word	0x200010cd
 800889c:	200010ce 	.word	0x200010ce
 80088a0:	200010cf 	.word	0x200010cf
 80088a4:	200010d0 	.word	0x200010d0
 80088a8:	200010d1 	.word	0x200010d1
 80088ac:	200010d2 	.word	0x200010d2
 80088b0:	200010d3 	.word	0x200010d3
 80088b4:	200010d4 	.word	0x200010d4
 80088b8:	200010d8 	.word	0x200010d8
 80088bc:	200010da 	.word	0x200010da
 80088c0:	200010b4 	.word	0x200010b4
 80088c4:	200010b5 	.word	0x200010b5
 80088c8:	200010dc 	.word	0x200010dc
 80088cc:	20000fec 	.word	0x20000fec
 80088d0:	0800e314 	.word	0x0800e314

080088d4 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 80088da:	4a13      	ldr	r2, [pc, #76]	@ (8008928 <convertAndSendData+0x54>)
 80088dc:	2101      	movs	r1, #1
 80088de:	2001      	movs	r0, #1
 80088e0:	f000 fa22 	bl	8008d28 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 80088e4:	4a11      	ldr	r2, [pc, #68]	@ (800892c <convertAndSendData+0x58>)
 80088e6:	2101      	movs	r1, #1
 80088e8:	2002      	movs	r0, #2
 80088ea:	f000 fa1d 	bl	8008d28 <lcd_print>

	for(int i=0; i<2; i++) {
 80088ee:	2300      	movs	r3, #0
 80088f0:	607b      	str	r3, [r7, #4]
 80088f2:	e00c      	b.n	800890e <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80088f4:	f7ff fee2 	bl	80086bc <mergeData>
 80088f8:	4603      	mov	r3, r0
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008930 <convertAndSendData+0x5c>)
 80088fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008934 <convertAndSendData+0x60>)
 8008900:	490d      	ldr	r1, [pc, #52]	@ (8008938 <convertAndSendData+0x64>)
 8008902:	480e      	ldr	r0, [pc, #56]	@ (800893c <convertAndSendData+0x68>)
 8008904:	f7f8 f904 	bl	8000b10 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3301      	adds	r3, #1
 800890c:	607b      	str	r3, [r7, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b01      	cmp	r3, #1
 8008912:	ddef      	ble.n	80088f4 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008914:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008918:	f000 ff60 	bl	80097dc <HAL_Delay>
	lcd_clear();
 800891c:	f000 fa30 	bl	8008d80 <lcd_clear>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20001798 	.word	0x20001798
 800892c:	200017ac 	.word	0x200017ac
 8008930:	20001080 	.word	0x20001080
 8008934:	20001070 	.word	0x20001070
 8008938:	20001064 	.word	0x20001064
 800893c:	200019d8 	.word	0x200019d8

08008940 <iotSetup>:

void iotSetup() {
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008944:	4b13      	ldr	r3, [pc, #76]	@ (8008994 <iotSetup+0x54>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d021      	beq.n	8008990 <iotSetup+0x50>
				HAL_Delay(200);
				goto takeIDSection;
			}
		}*/

		if(checkEEPROM4ID() != 1) {
 800894c:	f000 f82e 	bl	80089ac <checkEEPROM4ID>
 8008950:	4603      	mov	r3, r0
 8008952:	2b01      	cmp	r3, #1
 8008954:	d001      	beq.n	800895a <iotSetup+0x1a>
			takeMachineID();
 8008956:	f7ff f9e7 	bl	8007d28 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 800895a:	480f      	ldr	r0, [pc, #60]	@ (8008998 <iotSetup+0x58>)
 800895c:	f7f7 fc62 	bl	8000224 <strlen>
 8008960:	4603      	mov	r3, r0
 8008962:	2b01      	cmp	r3, #1
 8008964:	d801      	bhi.n	800896a <iotSetup+0x2a>
			takeWifiSSID();
 8008966:	f7ff fb9f 	bl	80080a8 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 800896a:	480c      	ldr	r0, [pc, #48]	@ (800899c <iotSetup+0x5c>)
 800896c:	f7f7 fc5a 	bl	8000224 <strlen>
 8008970:	4603      	mov	r3, r0
 8008972:	2b01      	cmp	r3, #1
 8008974:	d801      	bhi.n	800897a <iotSetup+0x3a>
			takeWifiPass();
 8008976:	f7ff fd43 	bl	8008400 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 800897a:	4a09      	ldr	r2, [pc, #36]	@ (80089a0 <iotSetup+0x60>)
 800897c:	4909      	ldr	r1, [pc, #36]	@ (80089a4 <iotSetup+0x64>)
 800897e:	480a      	ldr	r0, [pc, #40]	@ (80089a8 <iotSetup+0x68>)
 8008980:	f7f8 f81c 	bl	80009bc <ESP8266_Init>
		HAL_Delay(500);
 8008984:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008988:	f000 ff28 	bl	80097dc <HAL_Delay>
		convertAndSendData();
 800898c:	f7ff ffa2 	bl	80088d4 <convertAndSendData>
	}
}
 8008990:	bf00      	nop
 8008992:	bd80      	pop	{r7, pc}
 8008994:	200010e7 	.word	0x200010e7
 8008998:	20001070 	.word	0x20001070
 800899c:	20001080 	.word	0x20001080
 80089a0:	0800e318 	.word	0x0800e318
 80089a4:	0800e330 	.word	0x0800e330
 80089a8:	200019d8 	.word	0x200019d8

080089ac <checkEEPROM4ID>:

int checkEEPROM4ID() {
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 80089b2:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <checkEEPROM4ID+0x44>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 80089b8:	2301      	movs	r3, #1
 80089ba:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 80089bc:	2300      	movs	r3, #0
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	e00d      	b.n	80089de <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 80089c2:	4a0c      	ldr	r2, [pc, #48]	@ (80089f4 <checkEEPROM4ID+0x48>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <checkEEPROM4ID+0x26>
			returnVal = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3301      	adds	r3, #1
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b0b      	cmp	r3, #11
 80089e2:	ddee      	ble.n	80089c2 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 80089e4:	68bb      	ldr	r3, [r7, #8]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr
 80089f0:	20000000 	.word	0x20000000
 80089f4:	20000fec 	.word	0x20000fec

080089f8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	f023 030f 	bic.w	r3, r3, #15
 8008a08:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008a10:	7b7b      	ldrb	r3, [r7, #13]
 8008a12:	f043 030c 	orr.w	r3, r3, #12
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008a1a:	7b7b      	ldrb	r3, [r7, #13]
 8008a1c:	f043 0308 	orr.w	r3, r3, #8
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008a24:	7b3b      	ldrb	r3, [r7, #12]
 8008a26:	f043 030c 	orr.w	r3, r3, #12
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008a2e:	7b3b      	ldrb	r3, [r7, #12]
 8008a30:	f043 0308 	orr.w	r3, r3, #8
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008a38:	bf00      	nop
 8008a3a:	4825      	ldr	r0, [pc, #148]	@ (8008ad0 <lcd_send_cmd+0xd8>)
 8008a3c:	f002 fac7 	bl	800afce <HAL_I2C_GetError>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d0f9      	beq.n	8008a3a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008a46:	bf00      	nop
 8008a48:	4821      	ldr	r0, [pc, #132]	@ (8008ad0 <lcd_send_cmd+0xd8>)
 8008a4a:	f002 fab3 	bl	800afb4 <HAL_I2C_GetState>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d1f9      	bne.n	8008a48 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008a54:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad4 <lcd_send_cmd+0xdc>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d116      	bne.n	8008a8a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e00f      	b.n	8008a82 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	3310      	adds	r3, #16
 8008a66:	443b      	add	r3, r7
 8008a68:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	f022 0208 	bic.w	r2, r2, #8
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	3310      	adds	r3, #16
 8008a76:	443b      	add	r3, r7
 8008a78:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d9ec      	bls.n	8008a62 <lcd_send_cmd+0x6a>
 8008a88:	e015      	b.n	8008ab6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73bb      	strb	r3, [r7, #14]
 8008a8e:	e00f      	b.n	8008ab0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	3310      	adds	r3, #16
 8008a94:	443b      	add	r3, r7
 8008a96:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	f042 0208 	orr.w	r2, r2, #8
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	3310      	adds	r3, #16
 8008aa4:	443b      	add	r3, r7
 8008aa6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	3301      	adds	r3, #1
 8008aae:	73bb      	strb	r3, [r7, #14]
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d9ec      	bls.n	8008a90 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008ab6:	f107 0208 	add.w	r2, r7, #8
 8008aba:	2364      	movs	r3, #100	@ 0x64
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2304      	movs	r3, #4
 8008ac0:	214e      	movs	r1, #78	@ 0x4e
 8008ac2:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <lcd_send_cmd+0xd8>)
 8008ac4:	f001 fe16 	bl	800a6f4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	2000193c 	.word	0x2000193c
 8008ad4:	20001911 	.word	0x20001911

08008ad8 <lcd_send_data>:

void lcd_send_data (char data) {
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	f023 030f 	bic.w	r3, r3, #15
 8008ae8:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008af0:	7b7b      	ldrb	r3, [r7, #13]
 8008af2:	f043 030d 	orr.w	r3, r3, #13
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008afa:	7b7b      	ldrb	r3, [r7, #13]
 8008afc:	f043 0309 	orr.w	r3, r3, #9
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008b04:	7b3b      	ldrb	r3, [r7, #12]
 8008b06:	f043 030d 	orr.w	r3, r3, #13
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008b0e:	7b3b      	ldrb	r3, [r7, #12]
 8008b10:	f043 0309 	orr.w	r3, r3, #9
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008b18:	bf00      	nop
 8008b1a:	4825      	ldr	r0, [pc, #148]	@ (8008bb0 <lcd_send_data+0xd8>)
 8008b1c:	f002 fa57 	bl	800afce <HAL_I2C_GetError>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d0f9      	beq.n	8008b1a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008b26:	bf00      	nop
 8008b28:	4821      	ldr	r0, [pc, #132]	@ (8008bb0 <lcd_send_data+0xd8>)
 8008b2a:	f002 fa43 	bl	800afb4 <HAL_I2C_GetState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b20      	cmp	r3, #32
 8008b32:	d1f9      	bne.n	8008b28 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008b34:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb4 <lcd_send_data+0xdc>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d116      	bne.n	8008b6a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
 8008b40:	e00f      	b.n	8008b62 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	3310      	adds	r3, #16
 8008b46:	443b      	add	r3, r7
 8008b48:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	f022 0208 	bic.w	r2, r2, #8
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	3310      	adds	r3, #16
 8008b56:	443b      	add	r3, r7
 8008b58:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d9ec      	bls.n	8008b42 <lcd_send_data+0x6a>
 8008b68:	e015      	b.n	8008b96 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73bb      	strb	r3, [r7, #14]
 8008b6e:	e00f      	b.n	8008b90 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	3310      	adds	r3, #16
 8008b74:	443b      	add	r3, r7
 8008b76:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	f042 0208 	orr.w	r2, r2, #8
 8008b80:	b2d2      	uxtb	r2, r2
 8008b82:	3310      	adds	r3, #16
 8008b84:	443b      	add	r3, r7
 8008b86:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	73bb      	strb	r3, [r7, #14]
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d9ec      	bls.n	8008b70 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008b96:	f107 0208 	add.w	r2, r7, #8
 8008b9a:	2364      	movs	r3, #100	@ 0x64
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	214e      	movs	r1, #78	@ 0x4e
 8008ba2:	4803      	ldr	r0, [pc, #12]	@ (8008bb0 <lcd_send_data+0xd8>)
 8008ba4:	f001 fda6 	bl	800a6f4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	2000193c 	.word	0x2000193c
 8008bb4:	20001911 	.word	0x20001911

08008bb8 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008bc0:	e006      	b.n	8008bd0 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff ff84 	bl	8008ad8 <lcd_send_data>
	while (*str) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1f4      	bne.n	8008bc2 <lcd_send_string+0xa>
	}
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	4603      	mov	r3, r0
 8008bec:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	f023 030f 	bic.w	r3, r3, #15
 8008bf4:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008bfc:	7b7b      	ldrb	r3, [r7, #13]
 8008bfe:	f043 030d 	orr.w	r3, r3, #13
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008c06:	7b7b      	ldrb	r3, [r7, #13]
 8008c08:	f043 0309 	orr.w	r3, r3, #9
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008c10:	7b3b      	ldrb	r3, [r7, #12]
 8008c12:	f043 030d 	orr.w	r3, r3, #13
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008c1a:	7b3b      	ldrb	r3, [r7, #12]
 8008c1c:	f043 0309 	orr.w	r3, r3, #9
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008c24:	bf00      	nop
 8008c26:	4825      	ldr	r0, [pc, #148]	@ (8008cbc <lcd_send_char+0xd8>)
 8008c28:	f002 f9d1 	bl	800afce <HAL_I2C_GetError>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d0f9      	beq.n	8008c26 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008c32:	bf00      	nop
 8008c34:	4821      	ldr	r0, [pc, #132]	@ (8008cbc <lcd_send_char+0xd8>)
 8008c36:	f002 f9bd 	bl	800afb4 <HAL_I2C_GetState>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d1f9      	bne.n	8008c34 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008c40:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc0 <lcd_send_char+0xdc>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d116      	bne.n	8008c76 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
 8008c4c:	e00f      	b.n	8008c6e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	3310      	adds	r3, #16
 8008c52:	443b      	add	r3, r7
 8008c54:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	f022 0208 	bic.w	r2, r2, #8
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	3310      	adds	r3, #16
 8008c62:	443b      	add	r3, r7
 8008c64:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d9ec      	bls.n	8008c4e <lcd_send_char+0x6a>
 8008c74:	e015      	b.n	8008ca2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008c76:	2300      	movs	r3, #0
 8008c78:	73bb      	strb	r3, [r7, #14]
 8008c7a:	e00f      	b.n	8008c9c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	3310      	adds	r3, #16
 8008c80:	443b      	add	r3, r7
 8008c82:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	f042 0208 	orr.w	r2, r2, #8
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	3310      	adds	r3, #16
 8008c90:	443b      	add	r3, r7
 8008c92:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	73bb      	strb	r3, [r7, #14]
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d9ec      	bls.n	8008c7c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008ca2:	f107 0208 	add.w	r2, r7, #8
 8008ca6:	2364      	movs	r3, #100	@ 0x64
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2304      	movs	r3, #4
 8008cac:	214e      	movs	r1, #78	@ 0x4e
 8008cae:	4803      	ldr	r0, [pc, #12]	@ (8008cbc <lcd_send_char+0xd8>)
 8008cb0:	f001 fd20 	bl	800a6f4 <HAL_I2C_Master_Transmit>
}
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2000193c 	.word	0x2000193c
 8008cc0:	20001911 	.word	0x20001911

08008cc4 <lcd_init>:

void lcd_init (void) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008cc8:	2002      	movs	r0, #2
 8008cca:	f7ff fe95 	bl	80089f8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008cce:	2028      	movs	r0, #40	@ 0x28
 8008cd0:	f7ff fe92 	bl	80089f8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008cd4:	200c      	movs	r0, #12
 8008cd6:	f7ff fe8f 	bl	80089f8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008cda:	2080      	movs	r0, #128	@ 0x80
 8008cdc:	f7ff fe8c 	bl	80089f8 <lcd_send_cmd>
	lcd_backlight(1);
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	f000 f86d 	bl	8008dc0 <lcd_backlight>
}
 8008ce6:	bf00      	nop
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	460a      	mov	r2, r1
 8008cf4:	71fb      	strb	r3, [r7, #7]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d106      	bne.n	8008d0e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008d00:	79bb      	ldrb	r3, [r7, #6]
 8008d02:	337f      	adds	r3, #127	@ 0x7f
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fe76 	bl	80089f8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008d0c:	e008      	b.n	8008d20 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d105      	bne.n	8008d20 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008d14:	79bb      	ldrb	r3, [r7, #6]
 8008d16:	3b41      	subs	r3, #65	@ 0x41
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff fe6c 	bl	80089f8 <lcd_send_cmd>
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	603a      	str	r2, [r7, #0]
 8008d32:	71fb      	strb	r3, [r7, #7]
 8008d34:	460b      	mov	r3, r1
 8008d36:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008d38:	79ba      	ldrb	r2, [r7, #6]
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff ffd3 	bl	8008cea <lcd_gotoxy>
	lcd_send_string(str);
 8008d44:	6838      	ldr	r0, [r7, #0]
 8008d46:	f7ff ff37 	bl	8008bb8 <lcd_send_string>
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	4603      	mov	r3, r0
 8008d5a:	71fb      	strb	r3, [r7, #7]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	71bb      	strb	r3, [r7, #6]
 8008d60:	4613      	mov	r3, r2
 8008d62:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008d64:	79ba      	ldrb	r2, [r7, #6]
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff ffbd 	bl	8008cea <lcd_gotoxy>
    lcd_send_char(ch);
 8008d70:	797b      	ldrb	r3, [r7, #5]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff ff36 	bl	8008be4 <lcd_send_char>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <lcd_clear>:

void lcd_clear(void) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008d84:	2001      	movs	r0, #1
 8008d86:	f7ff fe37 	bl	80089f8 <lcd_send_cmd>
    HAL_Delay(2);
 8008d8a:	2002      	movs	r0, #2
 8008d8c:	f000 fd26 	bl	80097dc <HAL_Delay>
}
 8008d90:	bf00      	nop
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	460a      	mov	r2, r1
 8008d9e:	71fb      	strb	r3, [r7, #7]
 8008da0:	4613      	mov	r3, r2
 8008da2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008da4:	79ba      	ldrb	r2, [r7, #6]
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff ff9d 	bl	8008cea <lcd_gotoxy>

    lcd_send_char(' ');
 8008db0:	2020      	movs	r0, #32
 8008db2:	f7ff ff17 	bl	8008be4 <lcd_send_char>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008dca:	4a05      	ldr	r2, [pc, #20]	@ (8008de0 <lcd_backlight+0x20>)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	f7ff fe11 	bl	80089f8 <lcd_send_cmd>
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20001911 	.word	0x20001911

08008de4 <lcd_cursor>:

void lcd_cursor(int state) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d106      	bne.n	8008e00 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008df2:	200e      	movs	r0, #14
 8008df4:	f7ff fe00 	bl	80089f8 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008df8:	200f      	movs	r0, #15
 8008dfa:	f7ff fdfd 	bl	80089f8 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008dfe:	e002      	b.n	8008e06 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008e00:	200c      	movs	r0, #12
 8008e02:	f7ff fdf9 	bl	80089f8 <lcd_send_cmd>
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008e18:	4b04      	ldr	r3, [pc, #16]	@ (8008e2c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	4a03      	ldr	r2, [pc, #12]	@ (8008e2c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008e20:	6013      	str	r3, [r2, #0]
}
 8008e22:	bf00      	nop
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr
 8008e2c:	20001094 	.word	0x20001094

08008e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e34:	f000 fc70 	bl	8009718 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008e38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e3c:	f000 fcce 	bl	80097dc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e40:	f000 f89c 	bl	8008f7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e44:	f000 f9be 	bl	80091c4 <MX_GPIO_Init>
  MX_CAN_Init();
 8008e48:	f000 f8de 	bl	8009008 <MX_CAN_Init>
  MX_I2C1_Init();
 8008e4c:	f000 f910 	bl	8009070 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008e50:	f000 f93c 	bl	80090cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008e54:	f000 f98c 	bl	8009170 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008e58:	2201      	movs	r2, #1
 8008e5a:	2140      	movs	r1, #64	@ 0x40
 8008e5c:	483e      	ldr	r0, [pc, #248]	@ (8008f58 <main+0x128>)
 8008e5e:	f001 faa4 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008e62:	2201      	movs	r2, #1
 8008e64:	2180      	movs	r1, #128	@ 0x80
 8008e66:	483c      	ldr	r0, [pc, #240]	@ (8008f58 <main+0x128>)
 8008e68:	f001 fa9f 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008e6c:	200a      	movs	r0, #10
 8008e6e:	f000 fcb5 	bl	80097dc <HAL_Delay>
  lcd_init();
 8008e72:	f7ff ff27 	bl	8008cc4 <lcd_init>
  HAL_Delay(10);
 8008e76:	200a      	movs	r0, #10
 8008e78:	f000 fcb0 	bl	80097dc <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008e7c:	4837      	ldr	r0, [pc, #220]	@ (8008f5c <main+0x12c>)
 8008e7e:	f003 f947 	bl	800c110 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e82:	bf00      	nop
 8008e84:	4836      	ldr	r0, [pc, #216]	@ (8008f60 <main+0x130>)
 8008e86:	f002 f8a2 	bl	800afce <HAL_I2C_GetError>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d0f9      	beq.n	8008e84 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e90:	bf00      	nop
 8008e92:	4833      	ldr	r0, [pc, #204]	@ (8008f60 <main+0x130>)
 8008e94:	f002 f88e 	bl	800afb4 <HAL_I2C_GetState>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d1f9      	bne.n	8008e92 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008ea4:	482c      	ldr	r0, [pc, #176]	@ (8008f58 <main+0x128>)
 8008ea6:	f001 fa80 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008eb0:	4829      	ldr	r0, [pc, #164]	@ (8008f58 <main+0x128>)
 8008eb2:	f001 fa7a 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2104      	movs	r1, #4
 8008eba:	4827      	ldr	r0, [pc, #156]	@ (8008f58 <main+0x128>)
 8008ebc:	f001 fa75 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2102      	movs	r1, #2
 8008ec4:	4824      	ldr	r0, [pc, #144]	@ (8008f58 <main+0x128>)
 8008ec6:	f001 fa70 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2101      	movs	r1, #1
 8008ece:	4822      	ldr	r0, [pc, #136]	@ (8008f58 <main+0x128>)
 8008ed0:	f001 fa6b 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2120      	movs	r1, #32
 8008ed8:	4822      	ldr	r0, [pc, #136]	@ (8008f64 <main+0x134>)
 8008eda:	f001 fa66 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2110      	movs	r1, #16
 8008ee2:	4820      	ldr	r0, [pc, #128]	@ (8008f64 <main+0x134>)
 8008ee4:	f001 fa61 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2180      	movs	r1, #128	@ 0x80
 8008eec:	481e      	ldr	r0, [pc, #120]	@ (8008f68 <main+0x138>)
 8008eee:	f001 fa5c 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2140      	movs	r1, #64	@ 0x40
 8008ef6:	481c      	ldr	r0, [pc, #112]	@ (8008f68 <main+0x138>)
 8008ef8:	f001 fa57 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008efc:	2200      	movs	r2, #0
 8008efe:	2120      	movs	r1, #32
 8008f00:	4819      	ldr	r0, [pc, #100]	@ (8008f68 <main+0x138>)
 8008f02:	f001 fa52 	bl	800a3aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008f06:	2200      	movs	r2, #0
 8008f08:	2110      	movs	r1, #16
 8008f0a:	4817      	ldr	r0, [pc, #92]	@ (8008f68 <main+0x138>)
 8008f0c:	f001 fa4d 	bl	800a3aa <HAL_GPIO_WritePin>

  i2cTest();
 8008f10:	f7f7 ffa0 	bl	8000e54 <i2cTest>
  HAL_Delay(100);
 8008f14:	2064      	movs	r0, #100	@ 0x64
 8008f16:	f000 fc61 	bl	80097dc <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008f1a:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <main+0x13c>)
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	2001      	movs	r0, #1
 8008f20:	f7ff ff02 	bl	8008d28 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008f24:	4a12      	ldr	r2, [pc, #72]	@ (8008f70 <main+0x140>)
 8008f26:	2101      	movs	r1, #1
 8008f28:	2002      	movs	r0, #2
 8008f2a:	f7ff fefd 	bl	8008d28 <lcd_print>
  HAL_Delay(1000);
 8008f2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008f32:	f000 fc53 	bl	80097dc <HAL_Delay>
  lcd_clear();
 8008f36:	f7ff ff23 	bl	8008d80 <lcd_clear>

  eepromKontrol();
 8008f3a:	f7f7 f97b 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008f3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008f42:	f000 fc4b 	bl	80097dc <HAL_Delay>

  backLightTimer = millis;
 8008f46:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <main+0x144>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8008f78 <main+0x148>)
 8008f4c:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 8008f4e:	f7ff fcf7 	bl	8008940 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008f52:	f7fc fe6f 	bl	8005c34 <mainLoop>
 8008f56:	e7fc      	b.n	8008f52 <main+0x122>
 8008f58:	40010c00 	.word	0x40010c00
 8008f5c:	20001990 	.word	0x20001990
 8008f60:	2000193c 	.word	0x2000193c
 8008f64:	40011000 	.word	0x40011000
 8008f68:	40010800 	.word	0x40010800
 8008f6c:	2000009c 	.word	0x2000009c
 8008f70:	200000b0 	.word	0x200000b0
 8008f74:	20001094 	.word	0x20001094
 8008f78:	200010b0 	.word	0x200010b0

08008f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b090      	sub	sp, #64	@ 0x40
 8008f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f82:	f107 0318 	add.w	r3, r7, #24
 8008f86:	2228      	movs	r2, #40	@ 0x28
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f004 fb70 	bl	800d670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	605a      	str	r2, [r3, #4]
 8008f98:	609a      	str	r2, [r3, #8]
 8008f9a:	60da      	str	r2, [r3, #12]
 8008f9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008fa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008fac:	2301      	movs	r3, #1
 8008fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008fba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008fc0:	f107 0318 	add.w	r3, r7, #24
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 fc43 	bl	800b850 <HAL_RCC_OscConfig>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008fd0:	f000 f9a2 	bl	8009318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008fd4:	230f      	movs	r3, #15
 8008fd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008fea:	1d3b      	adds	r3, r7, #4
 8008fec:	2102      	movs	r1, #2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f002 feb0 	bl	800bd54 <HAL_RCC_ClockConfig>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008ffa:	f000 f98d 	bl	8009318 <Error_Handler>
  }
}
 8008ffe:	bf00      	nop
 8009000:	3740      	adds	r7, #64	@ 0x40
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800900c:	4b16      	ldr	r3, [pc, #88]	@ (8009068 <MX_CAN_Init+0x60>)
 800900e:	4a17      	ldr	r2, [pc, #92]	@ (800906c <MX_CAN_Init+0x64>)
 8009010:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009012:	4b15      	ldr	r3, [pc, #84]	@ (8009068 <MX_CAN_Init+0x60>)
 8009014:	2210      	movs	r2, #16
 8009016:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009018:	4b13      	ldr	r3, [pc, #76]	@ (8009068 <MX_CAN_Init+0x60>)
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800901e:	4b12      	ldr	r3, [pc, #72]	@ (8009068 <MX_CAN_Init+0x60>)
 8009020:	2200      	movs	r2, #0
 8009022:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009024:	4b10      	ldr	r3, [pc, #64]	@ (8009068 <MX_CAN_Init+0x60>)
 8009026:	2200      	movs	r2, #0
 8009028:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800902a:	4b0f      	ldr	r3, [pc, #60]	@ (8009068 <MX_CAN_Init+0x60>)
 800902c:	2200      	movs	r2, #0
 800902e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009030:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <MX_CAN_Init+0x60>)
 8009032:	2200      	movs	r2, #0
 8009034:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009036:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <MX_CAN_Init+0x60>)
 8009038:	2200      	movs	r2, #0
 800903a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800903c:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <MX_CAN_Init+0x60>)
 800903e:	2200      	movs	r2, #0
 8009040:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009042:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <MX_CAN_Init+0x60>)
 8009044:	2200      	movs	r2, #0
 8009046:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009048:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <MX_CAN_Init+0x60>)
 800904a:	2200      	movs	r2, #0
 800904c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800904e:	4b06      	ldr	r3, [pc, #24]	@ (8009068 <MX_CAN_Init+0x60>)
 8009050:	2200      	movs	r2, #0
 8009052:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009054:	4804      	ldr	r0, [pc, #16]	@ (8009068 <MX_CAN_Init+0x60>)
 8009056:	f000 fbe5 	bl	8009824 <HAL_CAN_Init>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009060:	f000 f95a 	bl	8009318 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009064:	bf00      	nop
 8009066:	bd80      	pop	{r7, pc}
 8009068:	20001914 	.word	0x20001914
 800906c:	40006400 	.word	0x40006400

08009070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009074:	4b12      	ldr	r3, [pc, #72]	@ (80090c0 <MX_I2C1_Init+0x50>)
 8009076:	4a13      	ldr	r2, [pc, #76]	@ (80090c4 <MX_I2C1_Init+0x54>)
 8009078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800907a:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <MX_I2C1_Init+0x50>)
 800907c:	4a12      	ldr	r2, [pc, #72]	@ (80090c8 <MX_I2C1_Init+0x58>)
 800907e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009080:	4b0f      	ldr	r3, [pc, #60]	@ (80090c0 <MX_I2C1_Init+0x50>)
 8009082:	2200      	movs	r2, #0
 8009084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009086:	4b0e      	ldr	r3, [pc, #56]	@ (80090c0 <MX_I2C1_Init+0x50>)
 8009088:	2200      	movs	r2, #0
 800908a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800908c:	4b0c      	ldr	r3, [pc, #48]	@ (80090c0 <MX_I2C1_Init+0x50>)
 800908e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009094:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <MX_I2C1_Init+0x50>)
 8009096:	2200      	movs	r2, #0
 8009098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800909a:	4b09      	ldr	r3, [pc, #36]	@ (80090c0 <MX_I2C1_Init+0x50>)
 800909c:	2200      	movs	r2, #0
 800909e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80090a0:	4b07      	ldr	r3, [pc, #28]	@ (80090c0 <MX_I2C1_Init+0x50>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80090a6:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <MX_I2C1_Init+0x50>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80090ac:	4804      	ldr	r0, [pc, #16]	@ (80090c0 <MX_I2C1_Init+0x50>)
 80090ae:	f001 f9ad 	bl	800a40c <HAL_I2C_Init>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80090b8:	f000 f92e 	bl	8009318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80090bc:	bf00      	nop
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	2000193c 	.word	0x2000193c
 80090c4:	40005400 	.word	0x40005400
 80090c8:	00061a80 	.word	0x00061a80

080090cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	605a      	str	r2, [r3, #4]
 80090dc:	609a      	str	r2, [r3, #8]
 80090de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090e0:	463b      	mov	r3, r7
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80090e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009168 <MX_TIM1_Init+0x9c>)
 80090ea:	4a20      	ldr	r2, [pc, #128]	@ (800916c <MX_TIM1_Init+0xa0>)
 80090ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80090ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009168 <MX_TIM1_Init+0x9c>)
 80090f0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80090f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009168 <MX_TIM1_Init+0x9c>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80090fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009168 <MX_TIM1_Init+0x9c>)
 80090fe:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009104:	4b18      	ldr	r3, [pc, #96]	@ (8009168 <MX_TIM1_Init+0x9c>)
 8009106:	2200      	movs	r2, #0
 8009108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800910a:	4b17      	ldr	r3, [pc, #92]	@ (8009168 <MX_TIM1_Init+0x9c>)
 800910c:	2200      	movs	r2, #0
 800910e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009110:	4b15      	ldr	r3, [pc, #84]	@ (8009168 <MX_TIM1_Init+0x9c>)
 8009112:	2200      	movs	r2, #0
 8009114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009116:	4814      	ldr	r0, [pc, #80]	@ (8009168 <MX_TIM1_Init+0x9c>)
 8009118:	f002 ffaa 	bl	800c070 <HAL_TIM_Base_Init>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009122:	f000 f8f9 	bl	8009318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800912a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	4619      	mov	r1, r3
 8009132:	480d      	ldr	r0, [pc, #52]	@ (8009168 <MX_TIM1_Init+0x9c>)
 8009134:	f003 f954 	bl	800c3e0 <HAL_TIM_ConfigClockSource>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800913e:	f000 f8eb 	bl	8009318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009142:	2300      	movs	r3, #0
 8009144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800914a:	463b      	mov	r3, r7
 800914c:	4619      	mov	r1, r3
 800914e:	4806      	ldr	r0, [pc, #24]	@ (8009168 <MX_TIM1_Init+0x9c>)
 8009150:	f003 fb42 	bl	800c7d8 <HAL_TIMEx_MasterConfigSynchronization>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800915a:	f000 f8dd 	bl	8009318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20001990 	.word	0x20001990
 800916c:	40012c00 	.word	0x40012c00

08009170 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009174:	4b11      	ldr	r3, [pc, #68]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 8009176:	4a12      	ldr	r2, [pc, #72]	@ (80091c0 <MX_USART1_UART_Init+0x50>)
 8009178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800917a:	4b10      	ldr	r3, [pc, #64]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 800917c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009182:	4b0e      	ldr	r3, [pc, #56]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 8009184:	2200      	movs	r2, #0
 8009186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009188:	4b0c      	ldr	r3, [pc, #48]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 800918a:	2200      	movs	r2, #0
 800918c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800918e:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 8009190:	2200      	movs	r2, #0
 8009192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009194:	4b09      	ldr	r3, [pc, #36]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 8009196:	220c      	movs	r2, #12
 8009198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800919a:	4b08      	ldr	r3, [pc, #32]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 800919c:	2200      	movs	r2, #0
 800919e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80091a0:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80091a6:	4805      	ldr	r0, [pc, #20]	@ (80091bc <MX_USART1_UART_Init+0x4c>)
 80091a8:	f003 fb94 	bl	800c8d4 <HAL_UART_Init>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80091b2:	f000 f8b1 	bl	8009318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80091b6:	bf00      	nop
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	200019d8 	.word	0x200019d8
 80091c0:	40013800 	.word	0x40013800

080091c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091ca:	f107 0310 	add.w	r3, r7, #16
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	605a      	str	r2, [r3, #4]
 80091d4:	609a      	str	r2, [r3, #8]
 80091d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80091d8:	4b4b      	ldr	r3, [pc, #300]	@ (8009308 <MX_GPIO_Init+0x144>)
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	4a4a      	ldr	r2, [pc, #296]	@ (8009308 <MX_GPIO_Init+0x144>)
 80091de:	f043 0310 	orr.w	r3, r3, #16
 80091e2:	6193      	str	r3, [r2, #24]
 80091e4:	4b48      	ldr	r3, [pc, #288]	@ (8009308 <MX_GPIO_Init+0x144>)
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091f0:	4b45      	ldr	r3, [pc, #276]	@ (8009308 <MX_GPIO_Init+0x144>)
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4a44      	ldr	r2, [pc, #272]	@ (8009308 <MX_GPIO_Init+0x144>)
 80091f6:	f043 0320 	orr.w	r3, r3, #32
 80091fa:	6193      	str	r3, [r2, #24]
 80091fc:	4b42      	ldr	r3, [pc, #264]	@ (8009308 <MX_GPIO_Init+0x144>)
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009208:	4b3f      	ldr	r3, [pc, #252]	@ (8009308 <MX_GPIO_Init+0x144>)
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	4a3e      	ldr	r2, [pc, #248]	@ (8009308 <MX_GPIO_Init+0x144>)
 800920e:	f043 0304 	orr.w	r3, r3, #4
 8009212:	6193      	str	r3, [r2, #24]
 8009214:	4b3c      	ldr	r3, [pc, #240]	@ (8009308 <MX_GPIO_Init+0x144>)
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	607b      	str	r3, [r7, #4]
 800921e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009220:	4b39      	ldr	r3, [pc, #228]	@ (8009308 <MX_GPIO_Init+0x144>)
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	4a38      	ldr	r2, [pc, #224]	@ (8009308 <MX_GPIO_Init+0x144>)
 8009226:	f043 0308 	orr.w	r3, r3, #8
 800922a:	6193      	str	r3, [r2, #24]
 800922c:	4b36      	ldr	r3, [pc, #216]	@ (8009308 <MX_GPIO_Init+0x144>)
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	603b      	str	r3, [r7, #0]
 8009236:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009238:	2200      	movs	r2, #0
 800923a:	21f0      	movs	r1, #240	@ 0xf0
 800923c:	4833      	ldr	r0, [pc, #204]	@ (800930c <MX_GPIO_Init+0x148>)
 800923e:	f001 f8b4 	bl	800a3aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009242:	2200      	movs	r2, #0
 8009244:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009248:	4831      	ldr	r0, [pc, #196]	@ (8009310 <MX_GPIO_Init+0x14c>)
 800924a:	f001 f8ae 	bl	800a3aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800924e:	2200      	movs	r2, #0
 8009250:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009254:	482f      	ldr	r0, [pc, #188]	@ (8009314 <MX_GPIO_Init+0x150>)
 8009256:	f001 f8a8 	bl	800a3aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800925a:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800925e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009268:	f107 0310 	add.w	r3, r7, #16
 800926c:	4619      	mov	r1, r3
 800926e:	4828      	ldr	r0, [pc, #160]	@ (8009310 <MX_GPIO_Init+0x14c>)
 8009270:	f000 fe24 	bl	8009ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009274:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009278:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927e:	2300      	movs	r3, #0
 8009280:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009282:	f107 0310 	add.w	r3, r7, #16
 8009286:	4619      	mov	r1, r3
 8009288:	4820      	ldr	r0, [pc, #128]	@ (800930c <MX_GPIO_Init+0x148>)
 800928a:	f000 fe17 	bl	8009ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800928e:	23f0      	movs	r3, #240	@ 0xf0
 8009290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009292:	2301      	movs	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009296:	2300      	movs	r3, #0
 8009298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800929a:	2302      	movs	r3, #2
 800929c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800929e:	f107 0310 	add.w	r3, r7, #16
 80092a2:	4619      	mov	r1, r3
 80092a4:	4819      	ldr	r0, [pc, #100]	@ (800930c <MX_GPIO_Init+0x148>)
 80092a6:	f000 fe09 	bl	8009ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80092aa:	f241 0330 	movw	r3, #4144	@ 0x1030
 80092ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092b0:	2301      	movs	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092b8:	2302      	movs	r3, #2
 80092ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092bc:	f107 0310 	add.w	r3, r7, #16
 80092c0:	4619      	mov	r1, r3
 80092c2:	4813      	ldr	r0, [pc, #76]	@ (8009310 <MX_GPIO_Init+0x14c>)
 80092c4:	f000 fdfa 	bl	8009ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80092c8:	f640 4307 	movw	r3, #3079	@ 0xc07
 80092cc:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092ce:	2301      	movs	r3, #1
 80092d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092d6:	2302      	movs	r3, #2
 80092d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092da:	f107 0310 	add.w	r3, r7, #16
 80092de:	4619      	mov	r1, r3
 80092e0:	480c      	ldr	r0, [pc, #48]	@ (8009314 <MX_GPIO_Init+0x150>)
 80092e2:	f000 fdeb 	bl	8009ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80092e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80092ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092f4:	f107 0310 	add.w	r3, r7, #16
 80092f8:	4619      	mov	r1, r3
 80092fa:	4806      	ldr	r0, [pc, #24]	@ (8009314 <MX_GPIO_Init+0x150>)
 80092fc:	f000 fdde 	bl	8009ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009300:	bf00      	nop
 8009302:	3720      	adds	r7, #32
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	40021000 	.word	0x40021000
 800930c:	40010800 	.word	0x40010800
 8009310:	40011000 	.word	0x40011000
 8009314:	40010c00 	.word	0x40010c00

08009318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800931c:	bf00      	nop
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr

08009324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800932a:	4b15      	ldr	r3, [pc, #84]	@ (8009380 <HAL_MspInit+0x5c>)
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	4a14      	ldr	r2, [pc, #80]	@ (8009380 <HAL_MspInit+0x5c>)
 8009330:	f043 0301 	orr.w	r3, r3, #1
 8009334:	6193      	str	r3, [r2, #24]
 8009336:	4b12      	ldr	r3, [pc, #72]	@ (8009380 <HAL_MspInit+0x5c>)
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	60bb      	str	r3, [r7, #8]
 8009340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009342:	4b0f      	ldr	r3, [pc, #60]	@ (8009380 <HAL_MspInit+0x5c>)
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	4a0e      	ldr	r2, [pc, #56]	@ (8009380 <HAL_MspInit+0x5c>)
 8009348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800934c:	61d3      	str	r3, [r2, #28]
 800934e:	4b0c      	ldr	r3, [pc, #48]	@ (8009380 <HAL_MspInit+0x5c>)
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009356:	607b      	str	r3, [r7, #4]
 8009358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800935a:	4b0a      	ldr	r3, [pc, #40]	@ (8009384 <HAL_MspInit+0x60>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	4a04      	ldr	r2, [pc, #16]	@ (8009384 <HAL_MspInit+0x60>)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr
 8009380:	40021000 	.word	0x40021000
 8009384:	40010000 	.word	0x40010000

08009388 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	609a      	str	r2, [r3, #8]
 800939c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009414 <HAL_CAN_MspInit+0x8c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d131      	bne.n	800940c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <HAL_CAN_MspInit+0x90>)
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	4a1a      	ldr	r2, [pc, #104]	@ (8009418 <HAL_CAN_MspInit+0x90>)
 80093ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80093b2:	61d3      	str	r3, [r2, #28]
 80093b4:	4b18      	ldr	r3, [pc, #96]	@ (8009418 <HAL_CAN_MspInit+0x90>)
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093c0:	4b15      	ldr	r3, [pc, #84]	@ (8009418 <HAL_CAN_MspInit+0x90>)
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	4a14      	ldr	r2, [pc, #80]	@ (8009418 <HAL_CAN_MspInit+0x90>)
 80093c6:	f043 0304 	orr.w	r3, r3, #4
 80093ca:	6193      	str	r3, [r2, #24]
 80093cc:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <HAL_CAN_MspInit+0x90>)
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80093d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e6:	f107 0310 	add.w	r3, r7, #16
 80093ea:	4619      	mov	r1, r3
 80093ec:	480b      	ldr	r0, [pc, #44]	@ (800941c <HAL_CAN_MspInit+0x94>)
 80093ee:	f000 fd65 	bl	8009ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80093f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f8:	2302      	movs	r3, #2
 80093fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093fc:	2303      	movs	r3, #3
 80093fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009400:	f107 0310 	add.w	r3, r7, #16
 8009404:	4619      	mov	r1, r3
 8009406:	4805      	ldr	r0, [pc, #20]	@ (800941c <HAL_CAN_MspInit+0x94>)
 8009408:	f000 fd58 	bl	8009ebc <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800940c:	bf00      	nop
 800940e:	3720      	adds	r7, #32
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	40006400 	.word	0x40006400
 8009418:	40021000 	.word	0x40021000
 800941c:	40010800 	.word	0x40010800

08009420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009428:	f107 0310 	add.w	r3, r7, #16
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a15      	ldr	r2, [pc, #84]	@ (8009490 <HAL_I2C_MspInit+0x70>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d123      	bne.n	8009488 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009440:	4b14      	ldr	r3, [pc, #80]	@ (8009494 <HAL_I2C_MspInit+0x74>)
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	4a13      	ldr	r2, [pc, #76]	@ (8009494 <HAL_I2C_MspInit+0x74>)
 8009446:	f043 0308 	orr.w	r3, r3, #8
 800944a:	6193      	str	r3, [r2, #24]
 800944c:	4b11      	ldr	r3, [pc, #68]	@ (8009494 <HAL_I2C_MspInit+0x74>)
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f003 0308 	and.w	r3, r3, #8
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009458:	23c0      	movs	r3, #192	@ 0xc0
 800945a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800945c:	2312      	movs	r3, #18
 800945e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009460:	2303      	movs	r3, #3
 8009462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009464:	f107 0310 	add.w	r3, r7, #16
 8009468:	4619      	mov	r1, r3
 800946a:	480b      	ldr	r0, [pc, #44]	@ (8009498 <HAL_I2C_MspInit+0x78>)
 800946c:	f000 fd26 	bl	8009ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009470:	4b08      	ldr	r3, [pc, #32]	@ (8009494 <HAL_I2C_MspInit+0x74>)
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	4a07      	ldr	r2, [pc, #28]	@ (8009494 <HAL_I2C_MspInit+0x74>)
 8009476:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800947a:	61d3      	str	r3, [r2, #28]
 800947c:	4b05      	ldr	r3, [pc, #20]	@ (8009494 <HAL_I2C_MspInit+0x74>)
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009484:	60bb      	str	r3, [r7, #8]
 8009486:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009488:	bf00      	nop
 800948a:	3720      	adds	r7, #32
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	40005400 	.word	0x40005400
 8009494:	40021000 	.word	0x40021000
 8009498:	40010c00 	.word	0x40010c00

0800949c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a0a      	ldr	r2, [pc, #40]	@ (80094d4 <HAL_I2C_MspDeInit+0x38>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d10d      	bne.n	80094ca <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80094ae:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <HAL_I2C_MspDeInit+0x3c>)
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	4a09      	ldr	r2, [pc, #36]	@ (80094d8 <HAL_I2C_MspDeInit+0x3c>)
 80094b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094b8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80094ba:	2140      	movs	r1, #64	@ 0x40
 80094bc:	4807      	ldr	r0, [pc, #28]	@ (80094dc <HAL_I2C_MspDeInit+0x40>)
 80094be:	f000 fe91 	bl	800a1e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80094c2:	2180      	movs	r1, #128	@ 0x80
 80094c4:	4805      	ldr	r0, [pc, #20]	@ (80094dc <HAL_I2C_MspDeInit+0x40>)
 80094c6:	f000 fe8d 	bl	800a1e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40005400 	.word	0x40005400
 80094d8:	40021000 	.word	0x40021000
 80094dc:	40010c00 	.word	0x40010c00

080094e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009524 <HAL_TIM_Base_MspInit+0x44>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d113      	bne.n	800951a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80094f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009528 <HAL_TIM_Base_MspInit+0x48>)
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009528 <HAL_TIM_Base_MspInit+0x48>)
 80094f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80094fc:	6193      	str	r3, [r2, #24]
 80094fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009528 <HAL_TIM_Base_MspInit+0x48>)
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	2019      	movs	r0, #25
 8009510:	f000 fb5b 	bl	8009bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009514:	2019      	movs	r0, #25
 8009516:	f000 fb74 	bl	8009c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40012c00 	.word	0x40012c00
 8009528:	40021000 	.word	0x40021000

0800952c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009534:	f107 0310 	add.w	r3, r7, #16
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	609a      	str	r2, [r3, #8]
 8009540:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a20      	ldr	r2, [pc, #128]	@ (80095c8 <HAL_UART_MspInit+0x9c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d139      	bne.n	80095c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800954c:	4b1f      	ldr	r3, [pc, #124]	@ (80095cc <HAL_UART_MspInit+0xa0>)
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	4a1e      	ldr	r2, [pc, #120]	@ (80095cc <HAL_UART_MspInit+0xa0>)
 8009552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009556:	6193      	str	r3, [r2, #24]
 8009558:	4b1c      	ldr	r3, [pc, #112]	@ (80095cc <HAL_UART_MspInit+0xa0>)
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009564:	4b19      	ldr	r3, [pc, #100]	@ (80095cc <HAL_UART_MspInit+0xa0>)
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	4a18      	ldr	r2, [pc, #96]	@ (80095cc <HAL_UART_MspInit+0xa0>)
 800956a:	f043 0304 	orr.w	r3, r3, #4
 800956e:	6193      	str	r3, [r2, #24]
 8009570:	4b16      	ldr	r3, [pc, #88]	@ (80095cc <HAL_UART_MspInit+0xa0>)
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	60bb      	str	r3, [r7, #8]
 800957a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800957c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009582:	2302      	movs	r3, #2
 8009584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009586:	2303      	movs	r3, #3
 8009588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800958a:	f107 0310 	add.w	r3, r7, #16
 800958e:	4619      	mov	r1, r3
 8009590:	480f      	ldr	r0, [pc, #60]	@ (80095d0 <HAL_UART_MspInit+0xa4>)
 8009592:	f000 fc93 	bl	8009ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800959a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800959c:	2300      	movs	r3, #0
 800959e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095a4:	f107 0310 	add.w	r3, r7, #16
 80095a8:	4619      	mov	r1, r3
 80095aa:	4809      	ldr	r0, [pc, #36]	@ (80095d0 <HAL_UART_MspInit+0xa4>)
 80095ac:	f000 fc86 	bl	8009ebc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80095b0:	2200      	movs	r2, #0
 80095b2:	2100      	movs	r1, #0
 80095b4:	2025      	movs	r0, #37	@ 0x25
 80095b6:	f000 fb08 	bl	8009bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80095ba:	2025      	movs	r0, #37	@ 0x25
 80095bc:	f000 fb21 	bl	8009c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80095c0:	bf00      	nop
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40013800 	.word	0x40013800
 80095cc:	40021000 	.word	0x40021000
 80095d0:	40010800 	.word	0x40010800

080095d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80095d4:	b480      	push	{r7}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <NMI_Handler+0x4>

080095dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80095e0:	bf00      	nop
 80095e2:	e7fd      	b.n	80095e0 <HardFault_Handler+0x4>

080095e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <MemManage_Handler+0x4>

080095ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <BusFault_Handler+0x4>

080095f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80095f8:	bf00      	nop
 80095fa:	e7fd      	b.n	80095f8 <UsageFault_Handler+0x4>

080095fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800960c:	bf00      	nop
 800960e:	46bd      	mov	sp, r7
 8009610:	bc80      	pop	{r7}
 8009612:	4770      	bx	lr

08009614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009614:	b480      	push	{r7}
 8009616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009618:	bf00      	nop
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr

08009620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009624:	f000 f8be 	bl	80097a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009628:	bf00      	nop
 800962a:	bd80      	pop	{r7, pc}

0800962c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009630:	4802      	ldr	r0, [pc, #8]	@ (800963c <TIM1_UP_IRQHandler+0x10>)
 8009632:	f002 fdcd 	bl	800c1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009636:	bf00      	nop
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20001990 	.word	0x20001990

08009640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009644:	4802      	ldr	r0, [pc, #8]	@ (8009650 <USART1_IRQHandler+0x10>)
 8009646:	f003 f9cb 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800964a:	bf00      	nop
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	200019d8 	.word	0x200019d8

08009654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800965c:	4a14      	ldr	r2, [pc, #80]	@ (80096b0 <_sbrk+0x5c>)
 800965e:	4b15      	ldr	r3, [pc, #84]	@ (80096b4 <_sbrk+0x60>)
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009668:	4b13      	ldr	r3, [pc, #76]	@ (80096b8 <_sbrk+0x64>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009670:	4b11      	ldr	r3, [pc, #68]	@ (80096b8 <_sbrk+0x64>)
 8009672:	4a12      	ldr	r2, [pc, #72]	@ (80096bc <_sbrk+0x68>)
 8009674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009676:	4b10      	ldr	r3, [pc, #64]	@ (80096b8 <_sbrk+0x64>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4413      	add	r3, r2
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	429a      	cmp	r2, r3
 8009682:	d207      	bcs.n	8009694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009684:	f004 f81c 	bl	800d6c0 <__errno>
 8009688:	4603      	mov	r3, r0
 800968a:	220c      	movs	r2, #12
 800968c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800968e:	f04f 33ff 	mov.w	r3, #4294967295
 8009692:	e009      	b.n	80096a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009694:	4b08      	ldr	r3, [pc, #32]	@ (80096b8 <_sbrk+0x64>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800969a:	4b07      	ldr	r3, [pc, #28]	@ (80096b8 <_sbrk+0x64>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	4a05      	ldr	r2, [pc, #20]	@ (80096b8 <_sbrk+0x64>)
 80096a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80096a6:	68fb      	ldr	r3, [r7, #12]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	2000c000 	.word	0x2000c000
 80096b4:	00000400 	.word	0x00000400
 80096b8:	20001a20 	.word	0x20001a20
 80096bc:	20001b70 	.word	0x20001b70

080096c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80096c4:	bf00      	nop
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr

080096cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80096cc:	480c      	ldr	r0, [pc, #48]	@ (8009700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80096ce:	490d      	ldr	r1, [pc, #52]	@ (8009704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80096d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80096d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80096d4:	e002      	b.n	80096dc <LoopCopyDataInit>

080096d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80096d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80096d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80096da:	3304      	adds	r3, #4

080096dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80096dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80096de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80096e0:	d3f9      	bcc.n	80096d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80096e2:	4a0a      	ldr	r2, [pc, #40]	@ (800970c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80096e4:	4c0a      	ldr	r4, [pc, #40]	@ (8009710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80096e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80096e8:	e001      	b.n	80096ee <LoopFillZerobss>

080096ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80096ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80096ec:	3204      	adds	r2, #4

080096ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80096ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80096f0:	d3fb      	bcc.n	80096ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80096f2:	f7ff ffe5 	bl	80096c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096f6:	f003 ffe9 	bl	800d6cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80096fa:	f7ff fb99 	bl	8008e30 <main>
  bx lr
 80096fe:	4770      	bx	lr
  ldr r0, =_sdata
 8009700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009704:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009708:	0800e3cc 	.word	0x0800e3cc
  ldr r2, =_sbss
 800970c:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009710:	20001b70 	.word	0x20001b70

08009714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009714:	e7fe      	b.n	8009714 <ADC1_2_IRQHandler>
	...

08009718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800971c:	4b08      	ldr	r3, [pc, #32]	@ (8009740 <HAL_Init+0x28>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a07      	ldr	r2, [pc, #28]	@ (8009740 <HAL_Init+0x28>)
 8009722:	f043 0310 	orr.w	r3, r3, #16
 8009726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009728:	2003      	movs	r0, #3
 800972a:	f000 fa43 	bl	8009bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800972e:	200f      	movs	r0, #15
 8009730:	f000 f808 	bl	8009744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009734:	f7ff fdf6 	bl	8009324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	40022000 	.word	0x40022000

08009744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800974c:	4b12      	ldr	r3, [pc, #72]	@ (8009798 <HAL_InitTick+0x54>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	4b12      	ldr	r3, [pc, #72]	@ (800979c <HAL_InitTick+0x58>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	4619      	mov	r1, r3
 8009756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800975a:	fbb3 f3f1 	udiv	r3, r3, r1
 800975e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fa5b 	bl	8009c1e <HAL_SYSTICK_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e00e      	b.n	8009790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b0f      	cmp	r3, #15
 8009776:	d80a      	bhi.n	800978e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009778:	2200      	movs	r2, #0
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	f000 fa23 	bl	8009bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009784:	4a06      	ldr	r2, [pc, #24]	@ (80097a0 <HAL_InitTick+0x5c>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	e000      	b.n	8009790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000f74 	.word	0x20000f74
 800979c:	20000f7c 	.word	0x20000f7c
 80097a0:	20000f78 	.word	0x20000f78

080097a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80097a8:	4b05      	ldr	r3, [pc, #20]	@ (80097c0 <HAL_IncTick+0x1c>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	461a      	mov	r2, r3
 80097ae:	4b05      	ldr	r3, [pc, #20]	@ (80097c4 <HAL_IncTick+0x20>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4413      	add	r3, r2
 80097b4:	4a03      	ldr	r2, [pc, #12]	@ (80097c4 <HAL_IncTick+0x20>)
 80097b6:	6013      	str	r3, [r2, #0]
}
 80097b8:	bf00      	nop
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr
 80097c0:	20000f7c 	.word	0x20000f7c
 80097c4:	20001a24 	.word	0x20001a24

080097c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  return uwTick;
 80097cc:	4b02      	ldr	r3, [pc, #8]	@ (80097d8 <HAL_GetTick+0x10>)
 80097ce:	681b      	ldr	r3, [r3, #0]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bc80      	pop	{r7}
 80097d6:	4770      	bx	lr
 80097d8:	20001a24 	.word	0x20001a24

080097dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097e4:	f7ff fff0 	bl	80097c8 <HAL_GetTick>
 80097e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f4:	d005      	beq.n	8009802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009820 <HAL_Delay+0x44>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009802:	bf00      	nop
 8009804:	f7ff ffe0 	bl	80097c8 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	429a      	cmp	r2, r3
 8009812:	d8f7      	bhi.n	8009804 <HAL_Delay+0x28>
  {
  }
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000f7c 	.word	0x20000f7c

08009824 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e0ed      	b.n	8009a12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fda0 	bl	8009388 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009858:	f7ff ffb6 	bl	80097c8 <HAL_GetTick>
 800985c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800985e:	e012      	b.n	8009886 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009860:	f7ff ffb2 	bl	80097c8 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b0a      	cmp	r3, #10
 800986c:	d90b      	bls.n	8009886 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2205      	movs	r2, #5
 800987e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e0c5      	b.n	8009a12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0e5      	beq.n	8009860 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0202 	bic.w	r2, r2, #2
 80098a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098a4:	f7ff ff90 	bl	80097c8 <HAL_GetTick>
 80098a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098aa:	e012      	b.n	80098d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80098ac:	f7ff ff8c 	bl	80097c8 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b0a      	cmp	r3, #10
 80098b8:	d90b      	bls.n	80098d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2205      	movs	r2, #5
 80098ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e09f      	b.n	8009a12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e5      	bne.n	80098ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	7e1b      	ldrb	r3, [r3, #24]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d108      	bne.n	80098fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	e007      	b.n	800990a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009908:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7e5b      	ldrb	r3, [r3, #25]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d108      	bne.n	8009924 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e007      	b.n	8009934 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009932:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7e9b      	ldrb	r3, [r3, #26]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d108      	bne.n	800994e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0220 	orr.w	r2, r2, #32
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	e007      	b.n	800995e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 0220 	bic.w	r2, r2, #32
 800995c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	7edb      	ldrb	r3, [r3, #27]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d108      	bne.n	8009978 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0210 	bic.w	r2, r2, #16
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e007      	b.n	8009988 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0210 	orr.w	r2, r2, #16
 8009986:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	7f1b      	ldrb	r3, [r3, #28]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d108      	bne.n	80099a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0208 	orr.w	r2, r2, #8
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e007      	b.n	80099b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0208 	bic.w	r2, r2, #8
 80099b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	7f5b      	ldrb	r3, [r3, #29]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d108      	bne.n	80099cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0204 	orr.w	r2, r2, #4
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	e007      	b.n	80099dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0204 	bic.w	r2, r2, #4
 80099da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	ea42 0103 	orr.w	r1, r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	1e5a      	subs	r2, r3, #1
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <__NVIC_SetPriorityGrouping>:
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a60 <__NVIC_SetPriorityGrouping+0x44>)
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a4e:	4a04      	ldr	r2, [pc, #16]	@ (8009a60 <__NVIC_SetPriorityGrouping+0x44>)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	60d3      	str	r3, [r2, #12]
}
 8009a54:	bf00      	nop
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bc80      	pop	{r7}
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <__NVIC_GetPriorityGrouping>:
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a68:	4b04      	ldr	r3, [pc, #16]	@ (8009a7c <__NVIC_GetPriorityGrouping+0x18>)
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	0a1b      	lsrs	r3, r3, #8
 8009a6e:	f003 0307 	and.w	r3, r3, #7
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	e000ed00 	.word	0xe000ed00

08009a80 <__NVIC_EnableIRQ>:
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	db0b      	blt.n	8009aaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	f003 021f 	and.w	r2, r3, #31
 8009a98:	4906      	ldr	r1, [pc, #24]	@ (8009ab4 <__NVIC_EnableIRQ+0x34>)
 8009a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a9e:	095b      	lsrs	r3, r3, #5
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8009aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009aaa:	bf00      	nop
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bc80      	pop	{r7}
 8009ab2:	4770      	bx	lr
 8009ab4:	e000e100 	.word	0xe000e100

08009ab8 <__NVIC_SetPriority>:
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	db0a      	blt.n	8009ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	490c      	ldr	r1, [pc, #48]	@ (8009b04 <__NVIC_SetPriority+0x4c>)
 8009ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ad6:	0112      	lsls	r2, r2, #4
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	440b      	add	r3, r1
 8009adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ae0:	e00a      	b.n	8009af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	4908      	ldr	r1, [pc, #32]	@ (8009b08 <__NVIC_SetPriority+0x50>)
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	f003 030f 	and.w	r3, r3, #15
 8009aee:	3b04      	subs	r3, #4
 8009af0:	0112      	lsls	r2, r2, #4
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	440b      	add	r3, r1
 8009af6:	761a      	strb	r2, [r3, #24]
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bc80      	pop	{r7}
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	e000e100 	.word	0xe000e100
 8009b08:	e000ed00 	.word	0xe000ed00

08009b0c <NVIC_EncodePriority>:
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b089      	sub	sp, #36	@ 0x24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f1c3 0307 	rsb	r3, r3, #7
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	bf28      	it	cs
 8009b2a:	2304      	movcs	r3, #4
 8009b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	3304      	adds	r3, #4
 8009b32:	2b06      	cmp	r3, #6
 8009b34:	d902      	bls.n	8009b3c <NVIC_EncodePriority+0x30>
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	3b03      	subs	r3, #3
 8009b3a:	e000      	b.n	8009b3e <NVIC_EncodePriority+0x32>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4a:	43da      	mvns	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	401a      	ands	r2, r3
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b54:	f04f 31ff 	mov.w	r1, #4294967295
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5e:	43d9      	mvns	r1, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b64:	4313      	orrs	r3, r2
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3724      	adds	r7, #36	@ 0x24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr

08009b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b80:	d301      	bcc.n	8009b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b82:	2301      	movs	r3, #1
 8009b84:	e00f      	b.n	8009ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b86:	4a0a      	ldr	r2, [pc, #40]	@ (8009bb0 <SysTick_Config+0x40>)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b8e:	210f      	movs	r1, #15
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	f7ff ff90 	bl	8009ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b98:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <SysTick_Config+0x40>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b9e:	4b04      	ldr	r3, [pc, #16]	@ (8009bb0 <SysTick_Config+0x40>)
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	e000e010 	.word	0xe000e010

08009bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff2d 	bl	8009a1c <__NVIC_SetPriorityGrouping>
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b086      	sub	sp, #24
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009bdc:	f7ff ff42 	bl	8009a64 <__NVIC_GetPriorityGrouping>
 8009be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	6978      	ldr	r0, [r7, #20]
 8009be8:	f7ff ff90 	bl	8009b0c <NVIC_EncodePriority>
 8009bec:	4602      	mov	r2, r0
 8009bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff ff5f 	bl	8009ab8 <__NVIC_SetPriority>
}
 8009bfa:	bf00      	nop
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4603      	mov	r3, r0
 8009c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff ff35 	bl	8009a80 <__NVIC_EnableIRQ>
}
 8009c16:	bf00      	nop
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b082      	sub	sp, #8
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff ffa2 	bl	8009b70 <SysTick_Config>
 8009c2c:	4603      	mov	r3, r0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d008      	beq.n	8009c60 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2204      	movs	r2, #4
 8009c52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e020      	b.n	8009ca2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 020e 	bic.w	r2, r2, #14
 8009c6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c88:	2101      	movs	r1, #1
 8009c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bc80      	pop	{r7}
 8009caa:	4770      	bx	lr

08009cac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d005      	beq.n	8009cd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	e0d6      	b.n	8009e7e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 020e 	bic.w	r2, r2, #14
 8009cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0201 	bic.w	r2, r2, #1
 8009cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4b64      	ldr	r3, [pc, #400]	@ (8009e88 <HAL_DMA_Abort_IT+0x1dc>)
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d958      	bls.n	8009dae <HAL_DMA_Abort_IT+0x102>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a62      	ldr	r2, [pc, #392]	@ (8009e8c <HAL_DMA_Abort_IT+0x1e0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d04f      	beq.n	8009da6 <HAL_DMA_Abort_IT+0xfa>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a61      	ldr	r2, [pc, #388]	@ (8009e90 <HAL_DMA_Abort_IT+0x1e4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d048      	beq.n	8009da2 <HAL_DMA_Abort_IT+0xf6>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a5f      	ldr	r2, [pc, #380]	@ (8009e94 <HAL_DMA_Abort_IT+0x1e8>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d040      	beq.n	8009d9c <HAL_DMA_Abort_IT+0xf0>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8009e98 <HAL_DMA_Abort_IT+0x1ec>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d038      	beq.n	8009d96 <HAL_DMA_Abort_IT+0xea>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a5c      	ldr	r2, [pc, #368]	@ (8009e9c <HAL_DMA_Abort_IT+0x1f0>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d030      	beq.n	8009d90 <HAL_DMA_Abort_IT+0xe4>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a5b      	ldr	r2, [pc, #364]	@ (8009ea0 <HAL_DMA_Abort_IT+0x1f4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d028      	beq.n	8009d8a <HAL_DMA_Abort_IT+0xde>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a52      	ldr	r2, [pc, #328]	@ (8009e88 <HAL_DMA_Abort_IT+0x1dc>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d020      	beq.n	8009d84 <HAL_DMA_Abort_IT+0xd8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a57      	ldr	r2, [pc, #348]	@ (8009ea4 <HAL_DMA_Abort_IT+0x1f8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d019      	beq.n	8009d80 <HAL_DMA_Abort_IT+0xd4>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a55      	ldr	r2, [pc, #340]	@ (8009ea8 <HAL_DMA_Abort_IT+0x1fc>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d012      	beq.n	8009d7c <HAL_DMA_Abort_IT+0xd0>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a54      	ldr	r2, [pc, #336]	@ (8009eac <HAL_DMA_Abort_IT+0x200>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00a      	beq.n	8009d76 <HAL_DMA_Abort_IT+0xca>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a52      	ldr	r2, [pc, #328]	@ (8009eb0 <HAL_DMA_Abort_IT+0x204>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d102      	bne.n	8009d70 <HAL_DMA_Abort_IT+0xc4>
 8009d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d6e:	e01b      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009d74:	e018      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d7a:	e015      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	e013      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e011      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d88:	e00e      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d8a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009d8e:	e00b      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009d94:	e008      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d9a:	e005      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009d9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009da0:	e002      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009da2:	2310      	movs	r3, #16
 8009da4:	e000      	b.n	8009da8 <HAL_DMA_Abort_IT+0xfc>
 8009da6:	2301      	movs	r3, #1
 8009da8:	4a42      	ldr	r2, [pc, #264]	@ (8009eb4 <HAL_DMA_Abort_IT+0x208>)
 8009daa:	6053      	str	r3, [r2, #4]
 8009dac:	e057      	b.n	8009e5e <HAL_DMA_Abort_IT+0x1b2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a36      	ldr	r2, [pc, #216]	@ (8009e8c <HAL_DMA_Abort_IT+0x1e0>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d04f      	beq.n	8009e58 <HAL_DMA_Abort_IT+0x1ac>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a34      	ldr	r2, [pc, #208]	@ (8009e90 <HAL_DMA_Abort_IT+0x1e4>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d048      	beq.n	8009e54 <HAL_DMA_Abort_IT+0x1a8>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a33      	ldr	r2, [pc, #204]	@ (8009e94 <HAL_DMA_Abort_IT+0x1e8>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d040      	beq.n	8009e4e <HAL_DMA_Abort_IT+0x1a2>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a31      	ldr	r2, [pc, #196]	@ (8009e98 <HAL_DMA_Abort_IT+0x1ec>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d038      	beq.n	8009e48 <HAL_DMA_Abort_IT+0x19c>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a30      	ldr	r2, [pc, #192]	@ (8009e9c <HAL_DMA_Abort_IT+0x1f0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d030      	beq.n	8009e42 <HAL_DMA_Abort_IT+0x196>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a2e      	ldr	r2, [pc, #184]	@ (8009ea0 <HAL_DMA_Abort_IT+0x1f4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d028      	beq.n	8009e3c <HAL_DMA_Abort_IT+0x190>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a26      	ldr	r2, [pc, #152]	@ (8009e88 <HAL_DMA_Abort_IT+0x1dc>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d020      	beq.n	8009e36 <HAL_DMA_Abort_IT+0x18a>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a2a      	ldr	r2, [pc, #168]	@ (8009ea4 <HAL_DMA_Abort_IT+0x1f8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d019      	beq.n	8009e32 <HAL_DMA_Abort_IT+0x186>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a29      	ldr	r2, [pc, #164]	@ (8009ea8 <HAL_DMA_Abort_IT+0x1fc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d012      	beq.n	8009e2e <HAL_DMA_Abort_IT+0x182>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a27      	ldr	r2, [pc, #156]	@ (8009eac <HAL_DMA_Abort_IT+0x200>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00a      	beq.n	8009e28 <HAL_DMA_Abort_IT+0x17c>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a26      	ldr	r2, [pc, #152]	@ (8009eb0 <HAL_DMA_Abort_IT+0x204>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d102      	bne.n	8009e22 <HAL_DMA_Abort_IT+0x176>
 8009e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e20:	e01b      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e26:	e018      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e2c:	e015      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e2e:	2310      	movs	r3, #16
 8009e30:	e013      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e011      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e3a:	e00e      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009e40:	e00b      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e46:	e008      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e4c:	e005      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e52:	e002      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e54:	2310      	movs	r3, #16
 8009e56:	e000      	b.n	8009e5a <HAL_DMA_Abort_IT+0x1ae>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	4a17      	ldr	r2, [pc, #92]	@ (8009eb8 <HAL_DMA_Abort_IT+0x20c>)
 8009e5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
    } 
  }
  return status;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	40020080 	.word	0x40020080
 8009e8c:	40020008 	.word	0x40020008
 8009e90:	4002001c 	.word	0x4002001c
 8009e94:	40020030 	.word	0x40020030
 8009e98:	40020044 	.word	0x40020044
 8009e9c:	40020058 	.word	0x40020058
 8009ea0:	4002006c 	.word	0x4002006c
 8009ea4:	40020408 	.word	0x40020408
 8009ea8:	4002041c 	.word	0x4002041c
 8009eac:	40020430 	.word	0x40020430
 8009eb0:	40020444 	.word	0x40020444
 8009eb4:	40020400 	.word	0x40020400
 8009eb8:	40020000 	.word	0x40020000

08009ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b08b      	sub	sp, #44	@ 0x2c
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ece:	e179      	b.n	800a1c4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	f040 8168 	bne.w	800a1be <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4a96      	ldr	r2, [pc, #600]	@ (800a14c <HAL_GPIO_Init+0x290>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d05e      	beq.n	8009fb6 <HAL_GPIO_Init+0xfa>
 8009ef8:	4a94      	ldr	r2, [pc, #592]	@ (800a14c <HAL_GPIO_Init+0x290>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d875      	bhi.n	8009fea <HAL_GPIO_Init+0x12e>
 8009efe:	4a94      	ldr	r2, [pc, #592]	@ (800a150 <HAL_GPIO_Init+0x294>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d058      	beq.n	8009fb6 <HAL_GPIO_Init+0xfa>
 8009f04:	4a92      	ldr	r2, [pc, #584]	@ (800a150 <HAL_GPIO_Init+0x294>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d86f      	bhi.n	8009fea <HAL_GPIO_Init+0x12e>
 8009f0a:	4a92      	ldr	r2, [pc, #584]	@ (800a154 <HAL_GPIO_Init+0x298>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d052      	beq.n	8009fb6 <HAL_GPIO_Init+0xfa>
 8009f10:	4a90      	ldr	r2, [pc, #576]	@ (800a154 <HAL_GPIO_Init+0x298>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d869      	bhi.n	8009fea <HAL_GPIO_Init+0x12e>
 8009f16:	4a90      	ldr	r2, [pc, #576]	@ (800a158 <HAL_GPIO_Init+0x29c>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d04c      	beq.n	8009fb6 <HAL_GPIO_Init+0xfa>
 8009f1c:	4a8e      	ldr	r2, [pc, #568]	@ (800a158 <HAL_GPIO_Init+0x29c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d863      	bhi.n	8009fea <HAL_GPIO_Init+0x12e>
 8009f22:	4a8e      	ldr	r2, [pc, #568]	@ (800a15c <HAL_GPIO_Init+0x2a0>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d046      	beq.n	8009fb6 <HAL_GPIO_Init+0xfa>
 8009f28:	4a8c      	ldr	r2, [pc, #560]	@ (800a15c <HAL_GPIO_Init+0x2a0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d85d      	bhi.n	8009fea <HAL_GPIO_Init+0x12e>
 8009f2e:	2b12      	cmp	r3, #18
 8009f30:	d82a      	bhi.n	8009f88 <HAL_GPIO_Init+0xcc>
 8009f32:	2b12      	cmp	r3, #18
 8009f34:	d859      	bhi.n	8009fea <HAL_GPIO_Init+0x12e>
 8009f36:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <HAL_GPIO_Init+0x80>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009fb7 	.word	0x08009fb7
 8009f40:	08009f91 	.word	0x08009f91
 8009f44:	08009fa3 	.word	0x08009fa3
 8009f48:	08009fe5 	.word	0x08009fe5
 8009f4c:	08009feb 	.word	0x08009feb
 8009f50:	08009feb 	.word	0x08009feb
 8009f54:	08009feb 	.word	0x08009feb
 8009f58:	08009feb 	.word	0x08009feb
 8009f5c:	08009feb 	.word	0x08009feb
 8009f60:	08009feb 	.word	0x08009feb
 8009f64:	08009feb 	.word	0x08009feb
 8009f68:	08009feb 	.word	0x08009feb
 8009f6c:	08009feb 	.word	0x08009feb
 8009f70:	08009feb 	.word	0x08009feb
 8009f74:	08009feb 	.word	0x08009feb
 8009f78:	08009feb 	.word	0x08009feb
 8009f7c:	08009feb 	.word	0x08009feb
 8009f80:	08009f99 	.word	0x08009f99
 8009f84:	08009fad 	.word	0x08009fad
 8009f88:	4a75      	ldr	r2, [pc, #468]	@ (800a160 <HAL_GPIO_Init+0x2a4>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d013      	beq.n	8009fb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009f8e:	e02c      	b.n	8009fea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	623b      	str	r3, [r7, #32]
          break;
 8009f96:	e029      	b.n	8009fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	623b      	str	r3, [r7, #32]
          break;
 8009fa0:	e024      	b.n	8009fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	623b      	str	r3, [r7, #32]
          break;
 8009faa:	e01f      	b.n	8009fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	330c      	adds	r3, #12
 8009fb2:	623b      	str	r3, [r7, #32]
          break;
 8009fb4:	e01a      	b.n	8009fec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009fbe:	2304      	movs	r3, #4
 8009fc0:	623b      	str	r3, [r7, #32]
          break;
 8009fc2:	e013      	b.n	8009fec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d105      	bne.n	8009fd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009fcc:	2308      	movs	r3, #8
 8009fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	611a      	str	r2, [r3, #16]
          break;
 8009fd6:	e009      	b.n	8009fec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009fd8:	2308      	movs	r3, #8
 8009fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	615a      	str	r2, [r3, #20]
          break;
 8009fe2:	e003      	b.n	8009fec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	623b      	str	r3, [r7, #32]
          break;
 8009fe8:	e000      	b.n	8009fec <HAL_GPIO_Init+0x130>
          break;
 8009fea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	2bff      	cmp	r3, #255	@ 0xff
 8009ff0:	d801      	bhi.n	8009ff6 <HAL_GPIO_Init+0x13a>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	e001      	b.n	8009ffa <HAL_GPIO_Init+0x13e>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	2bff      	cmp	r3, #255	@ 0xff
 800a000:	d802      	bhi.n	800a008 <HAL_GPIO_Init+0x14c>
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	e002      	b.n	800a00e <HAL_GPIO_Init+0x152>
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	3b08      	subs	r3, #8
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	210f      	movs	r1, #15
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	fa01 f303 	lsl.w	r3, r1, r3
 800a01c:	43db      	mvns	r3, r3
 800a01e:	401a      	ands	r2, r3
 800a020:	6a39      	ldr	r1, [r7, #32]
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	fa01 f303 	lsl.w	r3, r1, r3
 800a028:	431a      	orrs	r2, r3
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 80c1 	beq.w	800a1be <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a03c:	4b49      	ldr	r3, [pc, #292]	@ (800a164 <HAL_GPIO_Init+0x2a8>)
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	4a48      	ldr	r2, [pc, #288]	@ (800a164 <HAL_GPIO_Init+0x2a8>)
 800a042:	f043 0301 	orr.w	r3, r3, #1
 800a046:	6193      	str	r3, [r2, #24]
 800a048:	4b46      	ldr	r3, [pc, #280]	@ (800a164 <HAL_GPIO_Init+0x2a8>)
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	60bb      	str	r3, [r7, #8]
 800a052:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a054:	4a44      	ldr	r2, [pc, #272]	@ (800a168 <HAL_GPIO_Init+0x2ac>)
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	089b      	lsrs	r3, r3, #2
 800a05a:	3302      	adds	r3, #2
 800a05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a060:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	220f      	movs	r2, #15
 800a06c:	fa02 f303 	lsl.w	r3, r2, r3
 800a070:	43db      	mvns	r3, r3
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	4013      	ands	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a3c      	ldr	r2, [pc, #240]	@ (800a16c <HAL_GPIO_Init+0x2b0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d01f      	beq.n	800a0c0 <HAL_GPIO_Init+0x204>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a3b      	ldr	r2, [pc, #236]	@ (800a170 <HAL_GPIO_Init+0x2b4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d019      	beq.n	800a0bc <HAL_GPIO_Init+0x200>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a3a      	ldr	r2, [pc, #232]	@ (800a174 <HAL_GPIO_Init+0x2b8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d013      	beq.n	800a0b8 <HAL_GPIO_Init+0x1fc>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a39      	ldr	r2, [pc, #228]	@ (800a178 <HAL_GPIO_Init+0x2bc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d00d      	beq.n	800a0b4 <HAL_GPIO_Init+0x1f8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a38      	ldr	r2, [pc, #224]	@ (800a17c <HAL_GPIO_Init+0x2c0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d007      	beq.n	800a0b0 <HAL_GPIO_Init+0x1f4>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a37      	ldr	r2, [pc, #220]	@ (800a180 <HAL_GPIO_Init+0x2c4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d101      	bne.n	800a0ac <HAL_GPIO_Init+0x1f0>
 800a0a8:	2305      	movs	r3, #5
 800a0aa:	e00a      	b.n	800a0c2 <HAL_GPIO_Init+0x206>
 800a0ac:	2306      	movs	r3, #6
 800a0ae:	e008      	b.n	800a0c2 <HAL_GPIO_Init+0x206>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	e006      	b.n	800a0c2 <HAL_GPIO_Init+0x206>
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e004      	b.n	800a0c2 <HAL_GPIO_Init+0x206>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e002      	b.n	800a0c2 <HAL_GPIO_Init+0x206>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e000      	b.n	800a0c2 <HAL_GPIO_Init+0x206>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0c4:	f002 0203 	and.w	r2, r2, #3
 800a0c8:	0092      	lsls	r2, r2, #2
 800a0ca:	4093      	lsls	r3, r2
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a0d2:	4925      	ldr	r1, [pc, #148]	@ (800a168 <HAL_GPIO_Init+0x2ac>)
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	089b      	lsrs	r3, r3, #2
 800a0d8:	3302      	adds	r3, #2
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d006      	beq.n	800a0fa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a0ec:	4b25      	ldr	r3, [pc, #148]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	4924      	ldr	r1, [pc, #144]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	608b      	str	r3, [r1, #8]
 800a0f8:	e006      	b.n	800a108 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a0fa:	4b22      	ldr	r3, [pc, #136]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	43db      	mvns	r3, r3
 800a102:	4920      	ldr	r1, [pc, #128]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a104:	4013      	ands	r3, r2
 800a106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d006      	beq.n	800a122 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a114:	4b1b      	ldr	r3, [pc, #108]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	491a      	ldr	r1, [pc, #104]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60cb      	str	r3, [r1, #12]
 800a120:	e006      	b.n	800a130 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a122:	4b18      	ldr	r3, [pc, #96]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	43db      	mvns	r3, r3
 800a12a:	4916      	ldr	r1, [pc, #88]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d025      	beq.n	800a188 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a13c:	4b11      	ldr	r3, [pc, #68]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	4910      	ldr	r1, [pc, #64]	@ (800a184 <HAL_GPIO_Init+0x2c8>)
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	4313      	orrs	r3, r2
 800a146:	604b      	str	r3, [r1, #4]
 800a148:	e025      	b.n	800a196 <HAL_GPIO_Init+0x2da>
 800a14a:	bf00      	nop
 800a14c:	10320000 	.word	0x10320000
 800a150:	10310000 	.word	0x10310000
 800a154:	10220000 	.word	0x10220000
 800a158:	10210000 	.word	0x10210000
 800a15c:	10120000 	.word	0x10120000
 800a160:	10110000 	.word	0x10110000
 800a164:	40021000 	.word	0x40021000
 800a168:	40010000 	.word	0x40010000
 800a16c:	40010800 	.word	0x40010800
 800a170:	40010c00 	.word	0x40010c00
 800a174:	40011000 	.word	0x40011000
 800a178:	40011400 	.word	0x40011400
 800a17c:	40011800 	.word	0x40011800
 800a180:	40011c00 	.word	0x40011c00
 800a184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a188:	4b15      	ldr	r3, [pc, #84]	@ (800a1e0 <HAL_GPIO_Init+0x324>)
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	43db      	mvns	r3, r3
 800a190:	4913      	ldr	r1, [pc, #76]	@ (800a1e0 <HAL_GPIO_Init+0x324>)
 800a192:	4013      	ands	r3, r2
 800a194:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a1a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a1e0 <HAL_GPIO_Init+0x324>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	490e      	ldr	r1, [pc, #56]	@ (800a1e0 <HAL_GPIO_Init+0x324>)
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	600b      	str	r3, [r1, #0]
 800a1ae:	e006      	b.n	800a1be <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e0 <HAL_GPIO_Init+0x324>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	43db      	mvns	r3, r3
 800a1b8:	4909      	ldr	r1, [pc, #36]	@ (800a1e0 <HAL_GPIO_Init+0x324>)
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f47f ae7e 	bne.w	8009ed0 <HAL_GPIO_Init+0x14>
  }
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	372c      	adds	r7, #44	@ 0x2c
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bc80      	pop	{r7}
 800a1de:	4770      	bx	lr
 800a1e0:	40010400 	.word	0x40010400

0800a1e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b089      	sub	sp, #36	@ 0x24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a1f2:	e0a6      	b.n	800a342 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	4013      	ands	r3, r2
 800a200:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 8099 	beq.w	800a33c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a20a:	4a54      	ldr	r2, [pc, #336]	@ (800a35c <HAL_GPIO_DeInit+0x178>)
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	089b      	lsrs	r3, r3, #2
 800a210:	3302      	adds	r3, #2
 800a212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a216:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	220f      	movs	r2, #15
 800a222:	fa02 f303 	lsl.w	r3, r2, r3
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	4013      	ands	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a4c      	ldr	r2, [pc, #304]	@ (800a360 <HAL_GPIO_DeInit+0x17c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d01f      	beq.n	800a274 <HAL_GPIO_DeInit+0x90>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a4b      	ldr	r2, [pc, #300]	@ (800a364 <HAL_GPIO_DeInit+0x180>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d019      	beq.n	800a270 <HAL_GPIO_DeInit+0x8c>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a4a      	ldr	r2, [pc, #296]	@ (800a368 <HAL_GPIO_DeInit+0x184>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d013      	beq.n	800a26c <HAL_GPIO_DeInit+0x88>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a49      	ldr	r2, [pc, #292]	@ (800a36c <HAL_GPIO_DeInit+0x188>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00d      	beq.n	800a268 <HAL_GPIO_DeInit+0x84>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a48      	ldr	r2, [pc, #288]	@ (800a370 <HAL_GPIO_DeInit+0x18c>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d007      	beq.n	800a264 <HAL_GPIO_DeInit+0x80>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a47      	ldr	r2, [pc, #284]	@ (800a374 <HAL_GPIO_DeInit+0x190>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d101      	bne.n	800a260 <HAL_GPIO_DeInit+0x7c>
 800a25c:	2305      	movs	r3, #5
 800a25e:	e00a      	b.n	800a276 <HAL_GPIO_DeInit+0x92>
 800a260:	2306      	movs	r3, #6
 800a262:	e008      	b.n	800a276 <HAL_GPIO_DeInit+0x92>
 800a264:	2304      	movs	r3, #4
 800a266:	e006      	b.n	800a276 <HAL_GPIO_DeInit+0x92>
 800a268:	2303      	movs	r3, #3
 800a26a:	e004      	b.n	800a276 <HAL_GPIO_DeInit+0x92>
 800a26c:	2302      	movs	r3, #2
 800a26e:	e002      	b.n	800a276 <HAL_GPIO_DeInit+0x92>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <HAL_GPIO_DeInit+0x92>
 800a274:	2300      	movs	r3, #0
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	f002 0203 	and.w	r2, r2, #3
 800a27c:	0092      	lsls	r2, r2, #2
 800a27e:	4093      	lsls	r3, r2
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	429a      	cmp	r2, r3
 800a284:	d132      	bne.n	800a2ec <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a286:	4b3c      	ldr	r3, [pc, #240]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	43db      	mvns	r3, r3
 800a28e:	493a      	ldr	r1, [pc, #232]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a290:	4013      	ands	r3, r2
 800a292:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a294:	4b38      	ldr	r3, [pc, #224]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	43db      	mvns	r3, r3
 800a29c:	4936      	ldr	r1, [pc, #216]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a2a2:	4b35      	ldr	r3, [pc, #212]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	4933      	ldr	r1, [pc, #204]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a2b0:	4b31      	ldr	r3, [pc, #196]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	43db      	mvns	r3, r3
 800a2b8:	492f      	ldr	r1, [pc, #188]	@ (800a378 <HAL_GPIO_DeInit+0x194>)
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	220f      	movs	r2, #15
 800a2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2cc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a2ce:	4a23      	ldr	r2, [pc, #140]	@ (800a35c <HAL_GPIO_DeInit+0x178>)
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	089b      	lsrs	r3, r3, #2
 800a2d4:	3302      	adds	r3, #2
 800a2d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	43da      	mvns	r2, r3
 800a2de:	481f      	ldr	r0, [pc, #124]	@ (800a35c <HAL_GPIO_DeInit+0x178>)
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	089b      	lsrs	r3, r3, #2
 800a2e4:	400a      	ands	r2, r1
 800a2e6:	3302      	adds	r3, #2
 800a2e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	2bff      	cmp	r3, #255	@ 0xff
 800a2f0:	d801      	bhi.n	800a2f6 <HAL_GPIO_DeInit+0x112>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	e001      	b.n	800a2fa <HAL_GPIO_DeInit+0x116>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2bff      	cmp	r3, #255	@ 0xff
 800a300:	d802      	bhi.n	800a308 <HAL_GPIO_DeInit+0x124>
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	e002      	b.n	800a30e <HAL_GPIO_DeInit+0x12a>
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	3b08      	subs	r3, #8
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	210f      	movs	r1, #15
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	fa01 f303 	lsl.w	r3, r1, r3
 800a31c:	43db      	mvns	r3, r3
 800a31e:	401a      	ands	r2, r3
 800a320:	2104      	movs	r1, #4
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	fa01 f303 	lsl.w	r3, r1, r3
 800a328:	431a      	orrs	r2, r3
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	43db      	mvns	r3, r3
 800a336:	401a      	ands	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	3301      	adds	r3, #1
 800a340:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	fa22 f303 	lsr.w	r3, r2, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f47f af52 	bne.w	800a1f4 <HAL_GPIO_DeInit+0x10>
  }
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	3724      	adds	r7, #36	@ 0x24
 800a356:	46bd      	mov	sp, r7
 800a358:	bc80      	pop	{r7}
 800a35a:	4770      	bx	lr
 800a35c:	40010000 	.word	0x40010000
 800a360:	40010800 	.word	0x40010800
 800a364:	40010c00 	.word	0x40010c00
 800a368:	40011000 	.word	0x40011000
 800a36c:	40011400 	.word	0x40011400
 800a370:	40011800 	.word	0x40011800
 800a374:	40011c00 	.word	0x40011c00
 800a378:	40010400 	.word	0x40010400

0800a37c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	887b      	ldrh	r3, [r7, #2]
 800a38e:	4013      	ands	r3, r2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	e001      	b.n	800a39e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bc80      	pop	{r7}
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	807b      	strh	r3, [r7, #2]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3ba:	787b      	ldrb	r3, [r7, #1]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a3c0:	887a      	ldrh	r2, [r7, #2]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a3c6:	e003      	b.n	800a3d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a3c8:	887b      	ldrh	r3, [r7, #2]
 800a3ca:	041a      	lsls	r2, r3, #16
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	611a      	str	r2, [r3, #16]
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr

0800a3da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b085      	sub	sp, #20
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a3ec:	887a      	ldrh	r2, [r7, #2]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	041a      	lsls	r2, r3, #16
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	43d9      	mvns	r1, r3
 800a3f8:	887b      	ldrh	r3, [r7, #2]
 800a3fa:	400b      	ands	r3, r1
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	611a      	str	r2, [r3, #16]
}
 800a402:	bf00      	nop
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	bc80      	pop	{r7}
 800a40a:	4770      	bx	lr

0800a40c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e12b      	b.n	800a676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7fe fff4 	bl	8009420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2224      	movs	r2, #36	@ 0x24
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0201 	bic.w	r2, r2, #1
 800a44e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a45e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a46e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a470:	f001 fdb8 	bl	800bfe4 <HAL_RCC_GetPCLK1Freq>
 800a474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	4a81      	ldr	r2, [pc, #516]	@ (800a680 <HAL_I2C_Init+0x274>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d807      	bhi.n	800a490 <HAL_I2C_Init+0x84>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4a80      	ldr	r2, [pc, #512]	@ (800a684 <HAL_I2C_Init+0x278>)
 800a484:	4293      	cmp	r3, r2
 800a486:	bf94      	ite	ls
 800a488:	2301      	movls	r3, #1
 800a48a:	2300      	movhi	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	e006      	b.n	800a49e <HAL_I2C_Init+0x92>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4a7d      	ldr	r2, [pc, #500]	@ (800a688 <HAL_I2C_Init+0x27c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	bf94      	ite	ls
 800a498:	2301      	movls	r3, #1
 800a49a:	2300      	movhi	r3, #0
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e0e7      	b.n	800a676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4a78      	ldr	r2, [pc, #480]	@ (800a68c <HAL_I2C_Init+0x280>)
 800a4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ae:	0c9b      	lsrs	r3, r3, #18
 800a4b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4a6a      	ldr	r2, [pc, #424]	@ (800a680 <HAL_I2C_Init+0x274>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d802      	bhi.n	800a4e0 <HAL_I2C_Init+0xd4>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	e009      	b.n	800a4f4 <HAL_I2C_Init+0xe8>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a4e6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ea:	4a69      	ldr	r2, [pc, #420]	@ (800a690 <HAL_I2C_Init+0x284>)
 800a4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f0:	099b      	lsrs	r3, r3, #6
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a506:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	495c      	ldr	r1, [pc, #368]	@ (800a680 <HAL_I2C_Init+0x274>)
 800a510:	428b      	cmp	r3, r1
 800a512:	d819      	bhi.n	800a548 <HAL_I2C_Init+0x13c>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	1e59      	subs	r1, r3, #1
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a522:	1c59      	adds	r1, r3, #1
 800a524:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a528:	400b      	ands	r3, r1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <HAL_I2C_Init+0x138>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1e59      	subs	r1, r3, #1
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	fbb1 f3f3 	udiv	r3, r1, r3
 800a53c:	3301      	adds	r3, #1
 800a53e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a542:	e051      	b.n	800a5e8 <HAL_I2C_Init+0x1dc>
 800a544:	2304      	movs	r3, #4
 800a546:	e04f      	b.n	800a5e8 <HAL_I2C_Init+0x1dc>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d111      	bne.n	800a574 <HAL_I2C_Init+0x168>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	1e58      	subs	r0, r3, #1
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6859      	ldr	r1, [r3, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	440b      	add	r3, r1
 800a55e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a562:	3301      	adds	r3, #1
 800a564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bf0c      	ite	eq
 800a56c:	2301      	moveq	r3, #1
 800a56e:	2300      	movne	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	e012      	b.n	800a59a <HAL_I2C_Init+0x18e>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	1e58      	subs	r0, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6859      	ldr	r1, [r3, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	0099      	lsls	r1, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	fbb0 f3f3 	udiv	r3, r0, r3
 800a58a:	3301      	adds	r3, #1
 800a58c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a590:	2b00      	cmp	r3, #0
 800a592:	bf0c      	ite	eq
 800a594:	2301      	moveq	r3, #1
 800a596:	2300      	movne	r3, #0
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <HAL_I2C_Init+0x196>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e022      	b.n	800a5e8 <HAL_I2C_Init+0x1dc>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10e      	bne.n	800a5c8 <HAL_I2C_Init+0x1bc>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	1e58      	subs	r0, r3, #1
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6859      	ldr	r1, [r3, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	440b      	add	r3, r1
 800a5b8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5bc:	3301      	adds	r3, #1
 800a5be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5c6:	e00f      	b.n	800a5e8 <HAL_I2C_Init+0x1dc>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	1e58      	subs	r0, r3, #1
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6859      	ldr	r1, [r3, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	0099      	lsls	r1, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5de:	3301      	adds	r3, #1
 800a5e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5e8:	6879      	ldr	r1, [r7, #4]
 800a5ea:	6809      	ldr	r1, [r1, #0]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69da      	ldr	r2, [r3, #28]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6911      	ldr	r1, [r2, #16]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	68d2      	ldr	r2, [r2, #12]
 800a622:	4311      	orrs	r1, r2
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	430b      	orrs	r3, r1
 800a62a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695a      	ldr	r2, [r3, #20]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	431a      	orrs	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f042 0201 	orr.w	r2, r2, #1
 800a656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	000186a0 	.word	0x000186a0
 800a684:	001e847f 	.word	0x001e847f
 800a688:	003d08ff 	.word	0x003d08ff
 800a68c:	431bde83 	.word	0x431bde83
 800a690:	10624dd3 	.word	0x10624dd3

0800a694 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e021      	b.n	800a6ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2224      	movs	r2, #36	@ 0x24
 800a6aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f022 0201 	bic.w	r2, r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7fe feec 	bl	800949c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	607a      	str	r2, [r7, #4]
 800a6fe:	461a      	mov	r2, r3
 800a700:	460b      	mov	r3, r1
 800a702:	817b      	strh	r3, [r7, #10]
 800a704:	4613      	mov	r3, r2
 800a706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a708:	f7ff f85e 	bl	80097c8 <HAL_GetTick>
 800a70c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b20      	cmp	r3, #32
 800a718:	f040 80e0 	bne.w	800a8dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	2319      	movs	r3, #25
 800a722:	2201      	movs	r2, #1
 800a724:	4970      	ldr	r1, [pc, #448]	@ (800a8e8 <HAL_I2C_Master_Transmit+0x1f4>)
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fe5c 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a732:	2302      	movs	r3, #2
 800a734:	e0d3      	b.n	800a8de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_I2C_Master_Transmit+0x50>
 800a740:	2302      	movs	r3, #2
 800a742:	e0cc      	b.n	800a8de <HAL_I2C_Master_Transmit+0x1ea>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b01      	cmp	r3, #1
 800a758:	d007      	beq.n	800a76a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f042 0201 	orr.w	r2, r2, #1
 800a768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2221      	movs	r2, #33	@ 0x21
 800a77e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2210      	movs	r2, #16
 800a786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	893a      	ldrh	r2, [r7, #8]
 800a79a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4a50      	ldr	r2, [pc, #320]	@ (800a8ec <HAL_I2C_Master_Transmit+0x1f8>)
 800a7aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a7ac:	8979      	ldrh	r1, [r7, #10]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 fc16 	bl	800afe4 <I2C_MasterRequestWrite>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e08d      	b.n	800a8de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	613b      	str	r3, [r7, #16]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	613b      	str	r3, [r7, #16]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	613b      	str	r3, [r7, #16]
 800a7d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a7d8:	e066      	b.n	800a8a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	6a39      	ldr	r1, [r7, #32]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 ff1a 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d107      	bne.n	800a802 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e06b      	b.n	800a8de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b04      	cmp	r3, #4
 800a842:	d11b      	bne.n	800a87c <HAL_I2C_Master_Transmit+0x188>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d017      	beq.n	800a87c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a866:	b29b      	uxth	r3, r3
 800a868:	3b01      	subs	r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a874:	3b01      	subs	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	6a39      	ldr	r1, [r7, #32]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 ff11 	bl	800b6a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00d      	beq.n	800a8a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a890:	2b04      	cmp	r3, #4
 800a892:	d107      	bne.n	800a8a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e01a      	b.n	800a8de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d194      	bne.n	800a7da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e000      	b.n	800a8de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a8dc:	2302      	movs	r3, #2
  }
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	00100002 	.word	0x00100002
 800a8ec:	ffff0000 	.word	0xffff0000

0800a8f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4603      	mov	r3, r0
 800a900:	817b      	strh	r3, [r7, #10]
 800a902:	460b      	mov	r3, r1
 800a904:	813b      	strh	r3, [r7, #8]
 800a906:	4613      	mov	r3, r2
 800a908:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a90a:	f7fe ff5d 	bl	80097c8 <HAL_GetTick>
 800a90e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b20      	cmp	r3, #32
 800a91a:	f040 80d9 	bne.w	800aad0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	2319      	movs	r3, #25
 800a924:	2201      	movs	r2, #1
 800a926:	496d      	ldr	r1, [pc, #436]	@ (800aadc <HAL_I2C_Mem_Write+0x1ec>)
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fd5b 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a934:	2302      	movs	r3, #2
 800a936:	e0cc      	b.n	800aad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <HAL_I2C_Mem_Write+0x56>
 800a942:	2302      	movs	r3, #2
 800a944:	e0c5      	b.n	800aad2 <HAL_I2C_Mem_Write+0x1e2>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d007      	beq.n	800a96c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0201 	orr.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a97a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2221      	movs	r2, #33	@ 0x21
 800a980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2240      	movs	r2, #64	@ 0x40
 800a988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a99c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4a4d      	ldr	r2, [pc, #308]	@ (800aae0 <HAL_I2C_Mem_Write+0x1f0>)
 800a9ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9ae:	88f8      	ldrh	r0, [r7, #6]
 800a9b0:	893a      	ldrh	r2, [r7, #8]
 800a9b2:	8979      	ldrh	r1, [r7, #10]
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	4603      	mov	r3, r0
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 fb92 	bl	800b0e8 <I2C_RequestMemoryWrite>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d052      	beq.n	800aa70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e081      	b.n	800aad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fe20 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00d      	beq.n	800a9fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d107      	bne.n	800a9f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e06b      	b.n	800aad2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fe:	781a      	ldrb	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	3b01      	subs	r3, #1
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d11b      	bne.n	800aa70 <HAL_I2C_Mem_Write+0x180>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d017      	beq.n	800aa70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	781a      	ldrb	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1aa      	bne.n	800a9ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 fe13 	bl	800b6a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00d      	beq.n	800aaa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d107      	bne.n	800aaa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e016      	b.n	800aad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	e000      	b.n	800aad2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aad0:	2302      	movs	r3, #2
  }
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	00100002 	.word	0x00100002
 800aae0:	ffff0000 	.word	0xffff0000

0800aae4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08c      	sub	sp, #48	@ 0x30
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	4608      	mov	r0, r1
 800aaee:	4611      	mov	r1, r2
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	817b      	strh	r3, [r7, #10]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	813b      	strh	r3, [r7, #8]
 800aafa:	4613      	mov	r3, r2
 800aafc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab02:	f7fe fe61 	bl	80097c8 <HAL_GetTick>
 800ab06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	f040 8244 	bne.w	800af9e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	2319      	movs	r3, #25
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	4982      	ldr	r1, [pc, #520]	@ (800ad28 <HAL_I2C_Mem_Read+0x244>)
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 fc5f 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e237      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d101      	bne.n	800ab3e <HAL_I2C_Mem_Read+0x5a>
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e230      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0301 	and.w	r3, r3, #1
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d007      	beq.n	800ab64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0201 	orr.w	r2, r2, #1
 800ab62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2222      	movs	r2, #34	@ 0x22
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2240      	movs	r2, #64	@ 0x40
 800ab80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ab94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a62      	ldr	r2, [pc, #392]	@ (800ad2c <HAL_I2C_Mem_Read+0x248>)
 800aba4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aba6:	88f8      	ldrh	r0, [r7, #6]
 800aba8:	893a      	ldrh	r2, [r7, #8]
 800abaa:	8979      	ldrh	r1, [r7, #10]
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4603      	mov	r3, r0
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 fb2c 	bl	800b214 <I2C_RequestMemoryRead>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e1ec      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d113      	bne.n	800abf6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	e1c0      	b.n	800af78 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d11e      	bne.n	800ac3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac0e:	b672      	cpsid	i
}
 800ac10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac12:	2300      	movs	r3, #0
 800ac14:	61bb      	str	r3, [r7, #24]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	61bb      	str	r3, [r7, #24]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	61bb      	str	r3, [r7, #24]
 800ac26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ac38:	b662      	cpsie	i
}
 800ac3a:	e035      	b.n	800aca8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d11e      	bne.n	800ac82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac54:	b672      	cpsid	i
}
 800ac56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ac7e:	b662      	cpsie	i
}
 800ac80:	e012      	b.n	800aca8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac92:	2300      	movs	r3, #0
 800ac94:	613b      	str	r3, [r7, #16]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	613b      	str	r3, [r7, #16]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	613b      	str	r3, [r7, #16]
 800aca6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800aca8:	e166      	b.n	800af78 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acae:	2b03      	cmp	r3, #3
 800acb0:	f200 811f 	bhi.w	800aef2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d123      	bne.n	800ad04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f000 fd39 	bl	800b738 <I2C_WaitOnRXNEFlagUntilTimeout>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e167      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acec:	3b01      	subs	r3, #1
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ad02:	e139      	b.n	800af78 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d152      	bne.n	800adb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad12:	2200      	movs	r2, #0
 800ad14:	4906      	ldr	r1, [pc, #24]	@ (800ad30 <HAL_I2C_Mem_Read+0x24c>)
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 fb64 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d008      	beq.n	800ad34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e13c      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
 800ad26:	bf00      	nop
 800ad28:	00100002 	.word	0x00100002
 800ad2c:	ffff0000 	.word	0xffff0000
 800ad30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800ad34:	b672      	cpsid	i
}
 800ad36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691a      	ldr	r2, [r3, #16]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	3b01      	subs	r3, #1
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ad7a:	b662      	cpsie	i
}
 800ad7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	691a      	ldr	r2, [r3, #16]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad88:	b2d2      	uxtb	r2, r2
 800ad8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800adb0:	e0e2      	b.n	800af78 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb8:	2200      	movs	r2, #0
 800adba:	497b      	ldr	r1, [pc, #492]	@ (800afa8 <HAL_I2C_Mem_Read+0x4c4>)
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 fb11 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e0e9      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800addc:	b672      	cpsid	i
}
 800adde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adea:	b2d2      	uxtb	r2, r2
 800adec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adfc:	3b01      	subs	r3, #1
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ae12:	4b66      	ldr	r3, [pc, #408]	@ (800afac <HAL_I2C_Mem_Read+0x4c8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	08db      	lsrs	r3, r3, #3
 800ae18:	4a65      	ldr	r2, [pc, #404]	@ (800afb0 <HAL_I2C_Mem_Read+0x4cc>)
 800ae1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1e:	0a1a      	lsrs	r2, r3, #8
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	00da      	lsls	r2, r3, #3
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d118      	bne.n	800ae6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae52:	f043 0220 	orr.w	r2, r3, #32
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800ae5a:	b662      	cpsie	i
}
 800ae5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e09a      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d1d9      	bne.n	800ae2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691a      	ldr	r2, [r3, #16]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aea4:	3b01      	subs	r3, #1
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aeba:	b662      	cpsie	i
}
 800aebc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec8:	b2d2      	uxtb	r2, r2
 800aeca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aeda:	3b01      	subs	r3, #1
 800aedc:	b29a      	uxth	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aef0:	e042      	b.n	800af78 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aef4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 fc1e 	bl	800b738 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e04c      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af10:	b2d2      	uxtb	r2, r2
 800af12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af22:	3b01      	subs	r3, #1
 800af24:	b29a      	uxth	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af2e:	b29b      	uxth	r3, r3
 800af30:	3b01      	subs	r3, #1
 800af32:	b29a      	uxth	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b04      	cmp	r3, #4
 800af44:	d118      	bne.n	800af78 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	691a      	ldr	r2, [r3, #16]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af50:	b2d2      	uxtb	r2, r2
 800af52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af62:	3b01      	subs	r3, #1
 800af64:	b29a      	uxth	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af6e:	b29b      	uxth	r3, r3
 800af70:	3b01      	subs	r3, #1
 800af72:	b29a      	uxth	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f47f ae94 	bne.w	800acaa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2220      	movs	r2, #32
 800af86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e000      	b.n	800afa0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800af9e:	2302      	movs	r3, #2
  }
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3728      	adds	r7, #40	@ 0x28
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	00010004 	.word	0x00010004
 800afac:	20000f74 	.word	0x20000f74
 800afb0:	14f8b589 	.word	0x14f8b589

0800afb4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afc2:	b2db      	uxtb	r3, r3
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr

0800afe4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af02      	add	r7, sp, #8
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	460b      	mov	r3, r1
 800aff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b08      	cmp	r3, #8
 800affe:	d006      	beq.n	800b00e <I2C_MasterRequestWrite+0x2a>
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d003      	beq.n	800b00e <I2C_MasterRequestWrite+0x2a>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b00c:	d108      	bne.n	800b020 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	e00b      	b.n	800b038 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b024:	2b12      	cmp	r3, #18
 800b026:	d107      	bne.n	800b038 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f9cd 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00d      	beq.n	800b06c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b05a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b05e:	d103      	bne.n	800b068 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b066:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e035      	b.n	800b0d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b074:	d108      	bne.n	800b088 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b076:	897b      	ldrh	r3, [r7, #10]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	461a      	mov	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b084:	611a      	str	r2, [r3, #16]
 800b086:	e01b      	b.n	800b0c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b088:	897b      	ldrh	r3, [r7, #10]
 800b08a:	11db      	asrs	r3, r3, #7
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0306 	and.w	r3, r3, #6
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f063 030f 	orn	r3, r3, #15
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	490e      	ldr	r1, [pc, #56]	@ (800b0e0 <I2C_MasterRequestWrite+0xfc>)
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 fa16 	bl	800b4d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e010      	b.n	800b0d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b0b6:	897b      	ldrh	r3, [r7, #10]
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	4907      	ldr	r1, [pc, #28]	@ (800b0e4 <I2C_MasterRequestWrite+0x100>)
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 fa06 	bl	800b4d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	00010008 	.word	0x00010008
 800b0e4:	00010002 	.word	0x00010002

0800b0e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	817b      	strh	r3, [r7, #10]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	813b      	strh	r3, [r7, #8]
 800b0fe:	4613      	mov	r3, r2
 800b100:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	2200      	movs	r2, #0
 800b11a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 f960 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00d      	beq.n	800b146 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b138:	d103      	bne.n	800b142 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b140:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e05f      	b.n	800b206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b146:	897b      	ldrh	r3, [r7, #10]
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	461a      	mov	r2, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b158:	6a3a      	ldr	r2, [r7, #32]
 800b15a:	492d      	ldr	r1, [pc, #180]	@ (800b210 <I2C_RequestMemoryWrite+0x128>)
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 f9bb 	bl	800b4d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e04c      	b.n	800b206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b184:	6a39      	ldr	r1, [r7, #32]
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fa46 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00d      	beq.n	800b1ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b196:	2b04      	cmp	r3, #4
 800b198:	d107      	bne.n	800b1aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e02b      	b.n	800b206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d105      	bne.n	800b1c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b1b4:	893b      	ldrh	r3, [r7, #8]
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	611a      	str	r2, [r3, #16]
 800b1be:	e021      	b.n	800b204 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b1c0:	893b      	ldrh	r3, [r7, #8]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d0:	6a39      	ldr	r1, [r7, #32]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 fa20 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00d      	beq.n	800b1fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d107      	bne.n	800b1f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e005      	b.n	800b206 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b1fa:	893b      	ldrh	r3, [r7, #8]
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	00010002 	.word	0x00010002

0800b214 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	4608      	mov	r0, r1
 800b21e:	4611      	mov	r1, r2
 800b220:	461a      	mov	r2, r3
 800b222:	4603      	mov	r3, r0
 800b224:	817b      	strh	r3, [r7, #10]
 800b226:	460b      	mov	r3, r1
 800b228:	813b      	strh	r3, [r7, #8]
 800b22a:	4613      	mov	r3, r2
 800b22c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b23c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b24c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	2200      	movs	r2, #0
 800b256:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f8c2 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00d      	beq.n	800b282 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b274:	d103      	bne.n	800b27e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b27c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e0aa      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b282:	897b      	ldrh	r3, [r7, #10]
 800b284:	b2db      	uxtb	r3, r3
 800b286:	461a      	mov	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b294:	6a3a      	ldr	r2, [r7, #32]
 800b296:	4952      	ldr	r1, [pc, #328]	@ (800b3e0 <I2C_RequestMemoryRead+0x1cc>)
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 f91d 	bl	800b4d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e097      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2c0:	6a39      	ldr	r1, [r7, #32]
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f000 f9a8 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00d      	beq.n	800b2ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	d107      	bne.n	800b2e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e076      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d105      	bne.n	800b2fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b2f0:	893b      	ldrh	r3, [r7, #8]
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	611a      	str	r2, [r3, #16]
 800b2fa:	e021      	b.n	800b340 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b2fc:	893b      	ldrh	r3, [r7, #8]
 800b2fe:	0a1b      	lsrs	r3, r3, #8
 800b300:	b29b      	uxth	r3, r3
 800b302:	b2da      	uxtb	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b30a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b30c:	6a39      	ldr	r1, [r7, #32]
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 f982 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00d      	beq.n	800b336 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31e:	2b04      	cmp	r3, #4
 800b320:	d107      	bne.n	800b332 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e050      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b336:	893b      	ldrh	r3, [r7, #8]
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b342:	6a39      	ldr	r1, [r7, #32]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f967 	bl	800b618 <I2C_WaitOnTXEFlagUntilTimeout>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00d      	beq.n	800b36c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b354:	2b04      	cmp	r3, #4
 800b356:	d107      	bne.n	800b368 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b366:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e035      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b37a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	2200      	movs	r2, #0
 800b384:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f000 f82b 	bl	800b3e4 <I2C_WaitOnFlagUntilTimeout>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00d      	beq.n	800b3b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b39e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3a2:	d103      	bne.n	800b3ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e013      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b3b0:	897b      	ldrh	r3, [r7, #10]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	f043 0301 	orr.w	r3, r3, #1
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	6a3a      	ldr	r2, [r7, #32]
 800b3c4:	4906      	ldr	r1, [pc, #24]	@ (800b3e0 <I2C_RequestMemoryRead+0x1cc>)
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 f886 	bl	800b4d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	00010002 	.word	0x00010002

0800b3e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	603b      	str	r3, [r7, #0]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3f4:	e048      	b.n	800b488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fc:	d044      	beq.n	800b488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3fe:	f7fe f9e3 	bl	80097c8 <HAL_GetTick>
 800b402:	4602      	mov	r2, r0
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d302      	bcc.n	800b414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d139      	bne.n	800b488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	0c1b      	lsrs	r3, r3, #16
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d10d      	bne.n	800b43a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	43da      	mvns	r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	4013      	ands	r3, r2
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bf0c      	ite	eq
 800b430:	2301      	moveq	r3, #1
 800b432:	2300      	movne	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	461a      	mov	r2, r3
 800b438:	e00c      	b.n	800b454 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	43da      	mvns	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4013      	ands	r3, r2
 800b446:	b29b      	uxth	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bf0c      	ite	eq
 800b44c:	2301      	moveq	r3, #1
 800b44e:	2300      	movne	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	461a      	mov	r2, r3
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	429a      	cmp	r2, r3
 800b458:	d116      	bne.n	800b488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2220      	movs	r2, #32
 800b464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b474:	f043 0220 	orr.w	r2, r3, #32
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e023      	b.n	800b4d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	0c1b      	lsrs	r3, r3, #16
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d10d      	bne.n	800b4ae <I2C_WaitOnFlagUntilTimeout+0xca>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	43da      	mvns	r2, r3
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	4013      	ands	r3, r2
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bf0c      	ite	eq
 800b4a4:	2301      	moveq	r3, #1
 800b4a6:	2300      	movne	r3, #0
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	e00c      	b.n	800b4c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	43da      	mvns	r2, r3
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bf0c      	ite	eq
 800b4c0:	2301      	moveq	r3, #1
 800b4c2:	2300      	movne	r3, #0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	79fb      	ldrb	r3, [r7, #7]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d093      	beq.n	800b3f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
 800b4e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b4e6:	e071      	b.n	800b5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4f6:	d123      	bne.n	800b540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2220      	movs	r2, #32
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52c:	f043 0204 	orr.w	r2, r3, #4
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e067      	b.n	800b610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b546:	d041      	beq.n	800b5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b548:	f7fe f93e 	bl	80097c8 <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d302      	bcc.n	800b55e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d136      	bne.n	800b5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	0c1b      	lsrs	r3, r3, #16
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b01      	cmp	r3, #1
 800b566:	d10c      	bne.n	800b582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	43da      	mvns	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4013      	ands	r3, r2
 800b574:	b29b      	uxth	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	bf14      	ite	ne
 800b57a:	2301      	movne	r3, #1
 800b57c:	2300      	moveq	r3, #0
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	e00b      	b.n	800b59a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	43da      	mvns	r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	4013      	ands	r3, r2
 800b58e:	b29b      	uxth	r3, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	bf14      	ite	ne
 800b594:	2301      	movne	r3, #1
 800b596:	2300      	moveq	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d016      	beq.n	800b5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b8:	f043 0220 	orr.w	r2, r3, #32
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e021      	b.n	800b610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d10c      	bne.n	800b5f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	43da      	mvns	r2, r3
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bf14      	ite	ne
 800b5e8:	2301      	movne	r3, #1
 800b5ea:	2300      	moveq	r3, #0
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	e00b      	b.n	800b608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	43da      	mvns	r2, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bf14      	ite	ne
 800b602:	2301      	movne	r3, #1
 800b604:	2300      	moveq	r3, #0
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f47f af6d 	bne.w	800b4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b624:	e034      	b.n	800b690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f8e3 	bl	800b7f2 <I2C_IsAcknowledgeFailed>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e034      	b.n	800b6a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63c:	d028      	beq.n	800b690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b63e:	f7fe f8c3 	bl	80097c8 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d302      	bcc.n	800b654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11d      	bne.n	800b690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b65e:	2b80      	cmp	r3, #128	@ 0x80
 800b660:	d016      	beq.n	800b690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b67c:	f043 0220 	orr.w	r2, r3, #32
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e007      	b.n	800b6a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b69a:	2b80      	cmp	r3, #128	@ 0x80
 800b69c:	d1c3      	bne.n	800b626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b6b4:	e034      	b.n	800b720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 f89b 	bl	800b7f2 <I2C_IsAcknowledgeFailed>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e034      	b.n	800b730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d028      	beq.n	800b720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ce:	f7fe f87b 	bl	80097c8 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d11d      	bne.n	800b720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	f003 0304 	and.w	r3, r3, #4
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	d016      	beq.n	800b720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70c:	f043 0220 	orr.w	r2, r3, #32
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e007      	b.n	800b730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	f003 0304 	and.w	r3, r3, #4
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d1c3      	bne.n	800b6b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b744:	e049      	b.n	800b7da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	f003 0310 	and.w	r3, r3, #16
 800b750:	2b10      	cmp	r3, #16
 800b752:	d119      	bne.n	800b788 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f06f 0210 	mvn.w	r2, #16
 800b75c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2220      	movs	r2, #32
 800b768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e030      	b.n	800b7ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b788:	f7fe f81e 	bl	80097c8 <HAL_GetTick>
 800b78c:	4602      	mov	r2, r0
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d11d      	bne.n	800b7da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	695b      	ldr	r3, [r3, #20]
 800b7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a8:	2b40      	cmp	r3, #64	@ 0x40
 800b7aa:	d016      	beq.n	800b7da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c6:	f043 0220 	orr.w	r2, r3, #32
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e007      	b.n	800b7ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e4:	2b40      	cmp	r3, #64	@ 0x40
 800b7e6:	d1ae      	bne.n	800b746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b808:	d11b      	bne.n	800b842 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b812:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82e:	f043 0204 	orr.w	r2, r3, #4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e000      	b.n	800b844 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	bc80      	pop	{r7}
 800b84c:	4770      	bx	lr
	...

0800b850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e272      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 8087 	beq.w	800b97e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b870:	4b92      	ldr	r3, [pc, #584]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f003 030c 	and.w	r3, r3, #12
 800b878:	2b04      	cmp	r3, #4
 800b87a:	d00c      	beq.n	800b896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b87c:	4b8f      	ldr	r3, [pc, #572]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f003 030c 	and.w	r3, r3, #12
 800b884:	2b08      	cmp	r3, #8
 800b886:	d112      	bne.n	800b8ae <HAL_RCC_OscConfig+0x5e>
 800b888:	4b8c      	ldr	r3, [pc, #560]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b894:	d10b      	bne.n	800b8ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b896:	4b89      	ldr	r3, [pc, #548]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d06c      	beq.n	800b97c <HAL_RCC_OscConfig+0x12c>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d168      	bne.n	800b97c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e24c      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8b6:	d106      	bne.n	800b8c6 <HAL_RCC_OscConfig+0x76>
 800b8b8:	4b80      	ldr	r3, [pc, #512]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a7f      	ldr	r2, [pc, #508]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	e02e      	b.n	800b924 <HAL_RCC_OscConfig+0xd4>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10c      	bne.n	800b8e8 <HAL_RCC_OscConfig+0x98>
 800b8ce:	4b7b      	ldr	r3, [pc, #492]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a7a      	ldr	r2, [pc, #488]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	4b78      	ldr	r3, [pc, #480]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a77      	ldr	r2, [pc, #476]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	e01d      	b.n	800b924 <HAL_RCC_OscConfig+0xd4>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b8f0:	d10c      	bne.n	800b90c <HAL_RCC_OscConfig+0xbc>
 800b8f2:	4b72      	ldr	r3, [pc, #456]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a71      	ldr	r2, [pc, #452]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b8f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	4b6f      	ldr	r3, [pc, #444]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a6e      	ldr	r2, [pc, #440]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	e00b      	b.n	800b924 <HAL_RCC_OscConfig+0xd4>
 800b90c:	4b6b      	ldr	r3, [pc, #428]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a6a      	ldr	r2, [pc, #424]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	4b68      	ldr	r3, [pc, #416]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a67      	ldr	r2, [pc, #412]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b91e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d013      	beq.n	800b954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b92c:	f7fd ff4c 	bl	80097c8 <HAL_GetTick>
 800b930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b932:	e008      	b.n	800b946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b934:	f7fd ff48 	bl	80097c8 <HAL_GetTick>
 800b938:	4602      	mov	r2, r0
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	2b64      	cmp	r3, #100	@ 0x64
 800b940:	d901      	bls.n	800b946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	e200      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b946:	4b5d      	ldr	r3, [pc, #372]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f0      	beq.n	800b934 <HAL_RCC_OscConfig+0xe4>
 800b952:	e014      	b.n	800b97e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b954:	f7fd ff38 	bl	80097c8 <HAL_GetTick>
 800b958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b95a:	e008      	b.n	800b96e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b95c:	f7fd ff34 	bl	80097c8 <HAL_GetTick>
 800b960:	4602      	mov	r2, r0
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	2b64      	cmp	r3, #100	@ 0x64
 800b968:	d901      	bls.n	800b96e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e1ec      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b96e:	4b53      	ldr	r3, [pc, #332]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1f0      	bne.n	800b95c <HAL_RCC_OscConfig+0x10c>
 800b97a:	e000      	b.n	800b97e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b97c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 0302 	and.w	r3, r3, #2
 800b986:	2b00      	cmp	r3, #0
 800b988:	d063      	beq.n	800ba52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b98a:	4b4c      	ldr	r3, [pc, #304]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f003 030c 	and.w	r3, r3, #12
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00b      	beq.n	800b9ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b996:	4b49      	ldr	r3, [pc, #292]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	f003 030c 	and.w	r3, r3, #12
 800b99e:	2b08      	cmp	r3, #8
 800b9a0:	d11c      	bne.n	800b9dc <HAL_RCC_OscConfig+0x18c>
 800b9a2:	4b46      	ldr	r3, [pc, #280]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d116      	bne.n	800b9dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9ae:	4b43      	ldr	r3, [pc, #268]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0302 	and.w	r3, r3, #2
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <HAL_RCC_OscConfig+0x176>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d001      	beq.n	800b9c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e1c0      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9c6:	4b3d      	ldr	r3, [pc, #244]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	4939      	ldr	r1, [pc, #228]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9da:	e03a      	b.n	800ba52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d020      	beq.n	800ba26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9e4:	4b36      	ldr	r3, [pc, #216]	@ (800bac0 <HAL_RCC_OscConfig+0x270>)
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9ea:	f7fd feed 	bl	80097c8 <HAL_GetTick>
 800b9ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9f0:	e008      	b.n	800ba04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9f2:	f7fd fee9 	bl	80097c8 <HAL_GetTick>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d901      	bls.n	800ba04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e1a1      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba04:	4b2d      	ldr	r3, [pc, #180]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0302 	and.w	r3, r3, #2
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0f0      	beq.n	800b9f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba10:	4b2a      	ldr	r3, [pc, #168]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	4927      	ldr	r1, [pc, #156]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	600b      	str	r3, [r1, #0]
 800ba24:	e015      	b.n	800ba52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba26:	4b26      	ldr	r3, [pc, #152]	@ (800bac0 <HAL_RCC_OscConfig+0x270>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba2c:	f7fd fecc 	bl	80097c8 <HAL_GetTick>
 800ba30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba32:	e008      	b.n	800ba46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba34:	f7fd fec8 	bl	80097c8 <HAL_GetTick>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d901      	bls.n	800ba46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	e180      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba46:	4b1d      	ldr	r3, [pc, #116]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0302 	and.w	r3, r3, #2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1f0      	bne.n	800ba34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 0308 	and.w	r3, r3, #8
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d03a      	beq.n	800bad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d019      	beq.n	800ba9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba66:	4b17      	ldr	r3, [pc, #92]	@ (800bac4 <HAL_RCC_OscConfig+0x274>)
 800ba68:	2201      	movs	r2, #1
 800ba6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba6c:	f7fd feac 	bl	80097c8 <HAL_GetTick>
 800ba70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba72:	e008      	b.n	800ba86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba74:	f7fd fea8 	bl	80097c8 <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d901      	bls.n	800ba86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ba82:	2303      	movs	r3, #3
 800ba84:	e160      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba86:	4b0d      	ldr	r3, [pc, #52]	@ (800babc <HAL_RCC_OscConfig+0x26c>)
 800ba88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0f0      	beq.n	800ba74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ba92:	2001      	movs	r0, #1
 800ba94:	f000 face 	bl	800c034 <RCC_Delay>
 800ba98:	e01c      	b.n	800bad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bac4 <HAL_RCC_OscConfig+0x274>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800baa0:	f7fd fe92 	bl	80097c8 <HAL_GetTick>
 800baa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800baa6:	e00f      	b.n	800bac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baa8:	f7fd fe8e 	bl	80097c8 <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d908      	bls.n	800bac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e146      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
 800baba:	bf00      	nop
 800babc:	40021000 	.word	0x40021000
 800bac0:	42420000 	.word	0x42420000
 800bac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bac8:	4b92      	ldr	r3, [pc, #584]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800baca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1e9      	bne.n	800baa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80a6 	beq.w	800bc2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bae2:	2300      	movs	r3, #0
 800bae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bae6:	4b8b      	ldr	r3, [pc, #556]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10d      	bne.n	800bb0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800baf2:	4b88      	ldr	r3, [pc, #544]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	4a87      	ldr	r2, [pc, #540]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800baf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bafc:	61d3      	str	r3, [r2, #28]
 800bafe:	4b85      	ldr	r3, [pc, #532]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb06:	60bb      	str	r3, [r7, #8]
 800bb08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb0e:	4b82      	ldr	r3, [pc, #520]	@ (800bd18 <HAL_RCC_OscConfig+0x4c8>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d118      	bne.n	800bb4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bb1a:	4b7f      	ldr	r3, [pc, #508]	@ (800bd18 <HAL_RCC_OscConfig+0x4c8>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd18 <HAL_RCC_OscConfig+0x4c8>)
 800bb20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb26:	f7fd fe4f 	bl	80097c8 <HAL_GetTick>
 800bb2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb2c:	e008      	b.n	800bb40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb2e:	f7fd fe4b 	bl	80097c8 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	2b64      	cmp	r3, #100	@ 0x64
 800bb3a:	d901      	bls.n	800bb40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e103      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb40:	4b75      	ldr	r3, [pc, #468]	@ (800bd18 <HAL_RCC_OscConfig+0x4c8>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0f0      	beq.n	800bb2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d106      	bne.n	800bb62 <HAL_RCC_OscConfig+0x312>
 800bb54:	4b6f      	ldr	r3, [pc, #444]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb56:	6a1b      	ldr	r3, [r3, #32]
 800bb58:	4a6e      	ldr	r2, [pc, #440]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb5a:	f043 0301 	orr.w	r3, r3, #1
 800bb5e:	6213      	str	r3, [r2, #32]
 800bb60:	e02d      	b.n	800bbbe <HAL_RCC_OscConfig+0x36e>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10c      	bne.n	800bb84 <HAL_RCC_OscConfig+0x334>
 800bb6a:	4b6a      	ldr	r3, [pc, #424]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	4a69      	ldr	r2, [pc, #420]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb70:	f023 0301 	bic.w	r3, r3, #1
 800bb74:	6213      	str	r3, [r2, #32]
 800bb76:	4b67      	ldr	r3, [pc, #412]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	4a66      	ldr	r2, [pc, #408]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb7c:	f023 0304 	bic.w	r3, r3, #4
 800bb80:	6213      	str	r3, [r2, #32]
 800bb82:	e01c      	b.n	800bbbe <HAL_RCC_OscConfig+0x36e>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	2b05      	cmp	r3, #5
 800bb8a:	d10c      	bne.n	800bba6 <HAL_RCC_OscConfig+0x356>
 800bb8c:	4b61      	ldr	r3, [pc, #388]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	4a60      	ldr	r2, [pc, #384]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb92:	f043 0304 	orr.w	r3, r3, #4
 800bb96:	6213      	str	r3, [r2, #32]
 800bb98:	4b5e      	ldr	r3, [pc, #376]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	4a5d      	ldr	r2, [pc, #372]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	6213      	str	r3, [r2, #32]
 800bba4:	e00b      	b.n	800bbbe <HAL_RCC_OscConfig+0x36e>
 800bba6:	4b5b      	ldr	r3, [pc, #364]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	4a5a      	ldr	r2, [pc, #360]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bbac:	f023 0301 	bic.w	r3, r3, #1
 800bbb0:	6213      	str	r3, [r2, #32]
 800bbb2:	4b58      	ldr	r3, [pc, #352]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	4a57      	ldr	r2, [pc, #348]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bbb8:	f023 0304 	bic.w	r3, r3, #4
 800bbbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d015      	beq.n	800bbf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbc6:	f7fd fdff 	bl	80097c8 <HAL_GetTick>
 800bbca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbcc:	e00a      	b.n	800bbe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbce:	f7fd fdfb 	bl	80097c8 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d901      	bls.n	800bbe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e0b1      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbe4:	4b4b      	ldr	r3, [pc, #300]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	f003 0302 	and.w	r3, r3, #2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0ee      	beq.n	800bbce <HAL_RCC_OscConfig+0x37e>
 800bbf0:	e014      	b.n	800bc1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbf2:	f7fd fde9 	bl	80097c8 <HAL_GetTick>
 800bbf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbf8:	e00a      	b.n	800bc10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbfa:	f7fd fde5 	bl	80097c8 <HAL_GetTick>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d901      	bls.n	800bc10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e09b      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc10:	4b40      	ldr	r3, [pc, #256]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	f003 0302 	and.w	r3, r3, #2
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1ee      	bne.n	800bbfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d105      	bne.n	800bc2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc22:	4b3c      	ldr	r3, [pc, #240]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	4a3b      	ldr	r2, [pc, #236]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8087 	beq.w	800bd46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc38:	4b36      	ldr	r3, [pc, #216]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f003 030c 	and.w	r3, r3, #12
 800bc40:	2b08      	cmp	r3, #8
 800bc42:	d061      	beq.n	800bd08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d146      	bne.n	800bcda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc4c:	4b33      	ldr	r3, [pc, #204]	@ (800bd1c <HAL_RCC_OscConfig+0x4cc>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc52:	f7fd fdb9 	bl	80097c8 <HAL_GetTick>
 800bc56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc58:	e008      	b.n	800bc6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc5a:	f7fd fdb5 	bl	80097c8 <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d901      	bls.n	800bc6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e06d      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc6c:	4b29      	ldr	r3, [pc, #164]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f0      	bne.n	800bc5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc80:	d108      	bne.n	800bc94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bc82:	4b24      	ldr	r3, [pc, #144]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	4921      	ldr	r1, [pc, #132]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc94:	4b1f      	ldr	r3, [pc, #124]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a19      	ldr	r1, [r3, #32]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca4:	430b      	orrs	r3, r1
 800bca6:	491b      	ldr	r1, [pc, #108]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcac:	4b1b      	ldr	r3, [pc, #108]	@ (800bd1c <HAL_RCC_OscConfig+0x4cc>)
 800bcae:	2201      	movs	r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcb2:	f7fd fd89 	bl	80097c8 <HAL_GetTick>
 800bcb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bcb8:	e008      	b.n	800bccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcba:	f7fd fd85 	bl	80097c8 <HAL_GetTick>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d901      	bls.n	800bccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	e03d      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bccc:	4b11      	ldr	r3, [pc, #68]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0f0      	beq.n	800bcba <HAL_RCC_OscConfig+0x46a>
 800bcd8:	e035      	b.n	800bd46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcda:	4b10      	ldr	r3, [pc, #64]	@ (800bd1c <HAL_RCC_OscConfig+0x4cc>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bce0:	f7fd fd72 	bl	80097c8 <HAL_GetTick>
 800bce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bce6:	e008      	b.n	800bcfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bce8:	f7fd fd6e 	bl	80097c8 <HAL_GetTick>
 800bcec:	4602      	mov	r2, r0
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d901      	bls.n	800bcfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e026      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bcfa:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <HAL_RCC_OscConfig+0x4c4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1f0      	bne.n	800bce8 <HAL_RCC_OscConfig+0x498>
 800bd06:	e01e      	b.n	800bd46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d107      	bne.n	800bd20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e019      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
 800bd14:	40021000 	.word	0x40021000
 800bd18:	40007000 	.word	0x40007000
 800bd1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bd20:	4b0b      	ldr	r3, [pc, #44]	@ (800bd50 <HAL_RCC_OscConfig+0x500>)
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d106      	bne.n	800bd42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d001      	beq.n	800bd46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e000      	b.n	800bd48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	40021000 	.word	0x40021000

0800bd54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e0d0      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd68:	4b6a      	ldr	r3, [pc, #424]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 0307 	and.w	r3, r3, #7
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d910      	bls.n	800bd98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd76:	4b67      	ldr	r3, [pc, #412]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f023 0207 	bic.w	r2, r3, #7
 800bd7e:	4965      	ldr	r1, [pc, #404]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd86:	4b63      	ldr	r3, [pc, #396]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0307 	and.w	r3, r3, #7
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d001      	beq.n	800bd98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e0b8      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d020      	beq.n	800bde6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d005      	beq.n	800bdbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bdb0:	4b59      	ldr	r3, [pc, #356]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	4a58      	ldr	r2, [pc, #352]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bdb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bdba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0308 	and.w	r3, r3, #8
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d005      	beq.n	800bdd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdc8:	4b53      	ldr	r3, [pc, #332]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	4a52      	ldr	r2, [pc, #328]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bdce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bdd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdd4:	4b50      	ldr	r3, [pc, #320]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	494d      	ldr	r1, [pc, #308]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d040      	beq.n	800be74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d107      	bne.n	800be0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdfa:	4b47      	ldr	r3, [pc, #284]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d115      	bne.n	800be32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e07f      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d107      	bne.n	800be22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be12:	4b41      	ldr	r3, [pc, #260]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d109      	bne.n	800be32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e073      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be22:	4b3d      	ldr	r3, [pc, #244]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e06b      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be32:	4b39      	ldr	r3, [pc, #228]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f023 0203 	bic.w	r2, r3, #3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	4936      	ldr	r1, [pc, #216]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800be40:	4313      	orrs	r3, r2
 800be42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be44:	f7fd fcc0 	bl	80097c8 <HAL_GetTick>
 800be48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be4a:	e00a      	b.n	800be62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be4c:	f7fd fcbc 	bl	80097c8 <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d901      	bls.n	800be62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e053      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be62:	4b2d      	ldr	r3, [pc, #180]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f003 020c 	and.w	r2, r3, #12
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	429a      	cmp	r2, r3
 800be72:	d1eb      	bne.n	800be4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800be74:	4b27      	ldr	r3, [pc, #156]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0307 	and.w	r3, r3, #7
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d210      	bcs.n	800bea4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be82:	4b24      	ldr	r3, [pc, #144]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f023 0207 	bic.w	r2, r3, #7
 800be8a:	4922      	ldr	r1, [pc, #136]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	4313      	orrs	r3, r2
 800be90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be92:	4b20      	ldr	r3, [pc, #128]	@ (800bf14 <HAL_RCC_ClockConfig+0x1c0>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d001      	beq.n	800bea4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e032      	b.n	800bf0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d008      	beq.n	800bec2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800beb0:	4b19      	ldr	r3, [pc, #100]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	4916      	ldr	r1, [pc, #88]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0308 	and.w	r3, r3, #8
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bece:	4b12      	ldr	r3, [pc, #72]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	490e      	ldr	r1, [pc, #56]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bee2:	f000 f821 	bl	800bf28 <HAL_RCC_GetSysClockFreq>
 800bee6:	4602      	mov	r2, r0
 800bee8:	4b0b      	ldr	r3, [pc, #44]	@ (800bf18 <HAL_RCC_ClockConfig+0x1c4>)
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	091b      	lsrs	r3, r3, #4
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	490a      	ldr	r1, [pc, #40]	@ (800bf1c <HAL_RCC_ClockConfig+0x1c8>)
 800bef4:	5ccb      	ldrb	r3, [r1, r3]
 800bef6:	fa22 f303 	lsr.w	r3, r2, r3
 800befa:	4a09      	ldr	r2, [pc, #36]	@ (800bf20 <HAL_RCC_ClockConfig+0x1cc>)
 800befc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800befe:	4b09      	ldr	r3, [pc, #36]	@ (800bf24 <HAL_RCC_ClockConfig+0x1d0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fd fc1e 	bl	8009744 <HAL_InitTick>

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	40022000 	.word	0x40022000
 800bf18:	40021000 	.word	0x40021000
 800bf1c:	0800e338 	.word	0x0800e338
 800bf20:	20000f74 	.word	0x20000f74
 800bf24:	20000f78 	.word	0x20000f78

0800bf28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	2300      	movs	r3, #0
 800bf34:	60bb      	str	r3, [r7, #8]
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bf42:	4b1e      	ldr	r3, [pc, #120]	@ (800bfbc <HAL_RCC_GetSysClockFreq+0x94>)
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f003 030c 	and.w	r3, r3, #12
 800bf4e:	2b04      	cmp	r3, #4
 800bf50:	d002      	beq.n	800bf58 <HAL_RCC_GetSysClockFreq+0x30>
 800bf52:	2b08      	cmp	r3, #8
 800bf54:	d003      	beq.n	800bf5e <HAL_RCC_GetSysClockFreq+0x36>
 800bf56:	e027      	b.n	800bfa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bf58:	4b19      	ldr	r3, [pc, #100]	@ (800bfc0 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf5a:	613b      	str	r3, [r7, #16]
      break;
 800bf5c:	e027      	b.n	800bfae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	0c9b      	lsrs	r3, r3, #18
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	4a17      	ldr	r2, [pc, #92]	@ (800bfc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bf68:	5cd3      	ldrb	r3, [r2, r3]
 800bf6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d010      	beq.n	800bf98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bf76:	4b11      	ldr	r3, [pc, #68]	@ (800bfbc <HAL_RCC_GetSysClockFreq+0x94>)
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	0c5b      	lsrs	r3, r3, #17
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	4a11      	ldr	r2, [pc, #68]	@ (800bfc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bf82:	5cd3      	ldrb	r3, [r2, r3]
 800bf84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a0d      	ldr	r2, [pc, #52]	@ (800bfc0 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf8a:	fb03 f202 	mul.w	r2, r3, r2
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e004      	b.n	800bfa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a0c      	ldr	r2, [pc, #48]	@ (800bfcc <HAL_RCC_GetSysClockFreq+0xa4>)
 800bf9c:	fb02 f303 	mul.w	r3, r2, r3
 800bfa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	613b      	str	r3, [r7, #16]
      break;
 800bfa6:	e002      	b.n	800bfae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bfa8:	4b05      	ldr	r3, [pc, #20]	@ (800bfc0 <HAL_RCC_GetSysClockFreq+0x98>)
 800bfaa:	613b      	str	r3, [r7, #16]
      break;
 800bfac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bfae:	693b      	ldr	r3, [r7, #16]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	371c      	adds	r7, #28
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bc80      	pop	{r7}
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	40021000 	.word	0x40021000
 800bfc0:	007a1200 	.word	0x007a1200
 800bfc4:	0800e350 	.word	0x0800e350
 800bfc8:	0800e360 	.word	0x0800e360
 800bfcc:	003d0900 	.word	0x003d0900

0800bfd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bfd4:	4b02      	ldr	r3, [pc, #8]	@ (800bfe0 <HAL_RCC_GetHCLKFreq+0x10>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr
 800bfe0:	20000f74 	.word	0x20000f74

0800bfe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bfe8:	f7ff fff2 	bl	800bfd0 <HAL_RCC_GetHCLKFreq>
 800bfec:	4602      	mov	r2, r0
 800bfee:	4b05      	ldr	r3, [pc, #20]	@ (800c004 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	0a1b      	lsrs	r3, r3, #8
 800bff4:	f003 0307 	and.w	r3, r3, #7
 800bff8:	4903      	ldr	r1, [pc, #12]	@ (800c008 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bffa:	5ccb      	ldrb	r3, [r1, r3]
 800bffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c000:	4618      	mov	r0, r3
 800c002:	bd80      	pop	{r7, pc}
 800c004:	40021000 	.word	0x40021000
 800c008:	0800e348 	.word	0x0800e348

0800c00c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c010:	f7ff ffde 	bl	800bfd0 <HAL_RCC_GetHCLKFreq>
 800c014:	4602      	mov	r2, r0
 800c016:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	0adb      	lsrs	r3, r3, #11
 800c01c:	f003 0307 	and.w	r3, r3, #7
 800c020:	4903      	ldr	r1, [pc, #12]	@ (800c030 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c022:	5ccb      	ldrb	r3, [r1, r3]
 800c024:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c028:	4618      	mov	r0, r3
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	40021000 	.word	0x40021000
 800c030:	0800e348 	.word	0x0800e348

0800c034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c03c:	4b0a      	ldr	r3, [pc, #40]	@ (800c068 <RCC_Delay+0x34>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a0a      	ldr	r2, [pc, #40]	@ (800c06c <RCC_Delay+0x38>)
 800c042:	fba2 2303 	umull	r2, r3, r2, r3
 800c046:	0a5b      	lsrs	r3, r3, #9
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c050:	bf00      	nop
  }
  while (Delay --);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	1e5a      	subs	r2, r3, #1
 800c056:	60fa      	str	r2, [r7, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f9      	bne.n	800c050 <RCC_Delay+0x1c>
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	bc80      	pop	{r7}
 800c066:	4770      	bx	lr
 800c068:	20000f74 	.word	0x20000f74
 800c06c:	10624dd3 	.word	0x10624dd3

0800c070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e041      	b.n	800c106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7fd fa22 	bl	80094e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	f000 fa82 	bl	800c5b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b01      	cmp	r3, #1
 800c122:	d001      	beq.n	800c128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e044      	b.n	800c1b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f042 0201 	orr.w	r2, r2, #1
 800c13e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1d      	ldr	r2, [pc, #116]	@ (800c1bc <HAL_TIM_Base_Start_IT+0xac>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d018      	beq.n	800c17c <HAL_TIM_Base_Start_IT+0x6c>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1c      	ldr	r2, [pc, #112]	@ (800c1c0 <HAL_TIM_Base_Start_IT+0xb0>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d013      	beq.n	800c17c <HAL_TIM_Base_Start_IT+0x6c>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c15c:	d00e      	beq.n	800c17c <HAL_TIM_Base_Start_IT+0x6c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a18      	ldr	r2, [pc, #96]	@ (800c1c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d009      	beq.n	800c17c <HAL_TIM_Base_Start_IT+0x6c>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a16      	ldr	r2, [pc, #88]	@ (800c1c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d004      	beq.n	800c17c <HAL_TIM_Base_Start_IT+0x6c>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a15      	ldr	r2, [pc, #84]	@ (800c1cc <HAL_TIM_Base_Start_IT+0xbc>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d111      	bne.n	800c1a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b06      	cmp	r3, #6
 800c18c:	d010      	beq.n	800c1b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 0201 	orr.w	r2, r2, #1
 800c19c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19e:	e007      	b.n	800c1b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0201 	orr.w	r2, r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bc80      	pop	{r7}
 800c1ba:	4770      	bx	lr
 800c1bc:	40012c00 	.word	0x40012c00
 800c1c0:	40013400 	.word	0x40013400
 800c1c4:	40000400 	.word	0x40000400
 800c1c8:	40000800 	.word	0x40000800
 800c1cc:	40000c00 	.word	0x40000c00

0800c1d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0302 	and.w	r3, r3, #2
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d122      	bne.n	800c22c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d11b      	bne.n	800c22c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f06f 0202 	mvn.w	r2, #2
 800c1fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f9b4 	bl	800c580 <HAL_TIM_IC_CaptureCallback>
 800c218:	e005      	b.n	800c226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f9a7 	bl	800c56e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9b6 	bl	800c592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	f003 0304 	and.w	r3, r3, #4
 800c236:	2b04      	cmp	r3, #4
 800c238:	d122      	bne.n	800c280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b04      	cmp	r3, #4
 800c246:	d11b      	bne.n	800c280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f06f 0204 	mvn.w	r2, #4
 800c250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2202      	movs	r2, #2
 800c256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f98a 	bl	800c580 <HAL_TIM_IC_CaptureCallback>
 800c26c:	e005      	b.n	800c27a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f97d 	bl	800c56e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f98c 	bl	800c592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	f003 0308 	and.w	r3, r3, #8
 800c28a:	2b08      	cmp	r3, #8
 800c28c:	d122      	bne.n	800c2d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f003 0308 	and.w	r3, r3, #8
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d11b      	bne.n	800c2d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f06f 0208 	mvn.w	r2, #8
 800c2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f960 	bl	800c580 <HAL_TIM_IC_CaptureCallback>
 800c2c0:	e005      	b.n	800c2ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f953 	bl	800c56e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f962 	bl	800c592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	f003 0310 	and.w	r3, r3, #16
 800c2de:	2b10      	cmp	r3, #16
 800c2e0:	d122      	bne.n	800c328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f003 0310 	and.w	r3, r3, #16
 800c2ec:	2b10      	cmp	r3, #16
 800c2ee:	d11b      	bne.n	800c328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f06f 0210 	mvn.w	r2, #16
 800c2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2208      	movs	r2, #8
 800c2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f936 	bl	800c580 <HAL_TIM_IC_CaptureCallback>
 800c314:	e005      	b.n	800c322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f929 	bl	800c56e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f938 	bl	800c592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b01      	cmp	r3, #1
 800c334:	d10e      	bne.n	800c354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	2b01      	cmp	r3, #1
 800c342:	d107      	bne.n	800c354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f06f 0201 	mvn.w	r2, #1
 800c34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7fc fd5e 	bl	8008e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c35e:	2b80      	cmp	r3, #128	@ 0x80
 800c360:	d10e      	bne.n	800c380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c36c:	2b80      	cmp	r3, #128	@ 0x80
 800c36e:	d107      	bne.n	800c380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 faa1 	bl	800c8c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c38a:	2b40      	cmp	r3, #64	@ 0x40
 800c38c:	d10e      	bne.n	800c3ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c398:	2b40      	cmp	r3, #64	@ 0x40
 800c39a:	d107      	bne.n	800c3ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f8fc 	bl	800c5a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	f003 0320 	and.w	r3, r3, #32
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	d10e      	bne.n	800c3d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	f003 0320 	and.w	r3, r3, #32
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d107      	bne.n	800c3d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f06f 0220 	mvn.w	r2, #32
 800c3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fa6c 	bl	800c8b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_TIM_ConfigClockSource+0x1c>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e0b4      	b.n	800c566 <HAL_TIM_ConfigClockSource+0x186>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2202      	movs	r2, #2
 800c408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c41a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c434:	d03e      	beq.n	800c4b4 <HAL_TIM_ConfigClockSource+0xd4>
 800c436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c43a:	f200 8087 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c43e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c442:	f000 8086 	beq.w	800c552 <HAL_TIM_ConfigClockSource+0x172>
 800c446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c44a:	d87f      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c44c:	2b70      	cmp	r3, #112	@ 0x70
 800c44e:	d01a      	beq.n	800c486 <HAL_TIM_ConfigClockSource+0xa6>
 800c450:	2b70      	cmp	r3, #112	@ 0x70
 800c452:	d87b      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c454:	2b60      	cmp	r3, #96	@ 0x60
 800c456:	d050      	beq.n	800c4fa <HAL_TIM_ConfigClockSource+0x11a>
 800c458:	2b60      	cmp	r3, #96	@ 0x60
 800c45a:	d877      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c45c:	2b50      	cmp	r3, #80	@ 0x50
 800c45e:	d03c      	beq.n	800c4da <HAL_TIM_ConfigClockSource+0xfa>
 800c460:	2b50      	cmp	r3, #80	@ 0x50
 800c462:	d873      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c464:	2b40      	cmp	r3, #64	@ 0x40
 800c466:	d058      	beq.n	800c51a <HAL_TIM_ConfigClockSource+0x13a>
 800c468:	2b40      	cmp	r3, #64	@ 0x40
 800c46a:	d86f      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c46c:	2b30      	cmp	r3, #48	@ 0x30
 800c46e:	d064      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x15a>
 800c470:	2b30      	cmp	r3, #48	@ 0x30
 800c472:	d86b      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c474:	2b20      	cmp	r3, #32
 800c476:	d060      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x15a>
 800c478:	2b20      	cmp	r3, #32
 800c47a:	d867      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d05c      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x15a>
 800c480:	2b10      	cmp	r3, #16
 800c482:	d05a      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x15a>
 800c484:	e062      	b.n	800c54c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c496:	f000 f980 	bl	800c79a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	609a      	str	r2, [r3, #8]
      break;
 800c4b2:	e04f      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4c4:	f000 f969 	bl	800c79a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4d6:	609a      	str	r2, [r3, #8]
      break;
 800c4d8:	e03c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	f000 f8e0 	bl	800c6ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2150      	movs	r1, #80	@ 0x50
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f937 	bl	800c766 <TIM_ITRx_SetConfig>
      break;
 800c4f8:	e02c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c506:	461a      	mov	r2, r3
 800c508:	f000 f8fe 	bl	800c708 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2160      	movs	r1, #96	@ 0x60
 800c512:	4618      	mov	r0, r3
 800c514:	f000 f927 	bl	800c766 <TIM_ITRx_SetConfig>
      break;
 800c518:	e01c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c526:	461a      	mov	r2, r3
 800c528:	f000 f8c0 	bl	800c6ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2140      	movs	r1, #64	@ 0x40
 800c532:	4618      	mov	r0, r3
 800c534:	f000 f917 	bl	800c766 <TIM_ITRx_SetConfig>
      break;
 800c538:	e00c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4619      	mov	r1, r3
 800c544:	4610      	mov	r0, r2
 800c546:	f000 f90e 	bl	800c766 <TIM_ITRx_SetConfig>
      break;
 800c54a:	e003      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
      break;
 800c550:	e000      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c56e:	b480      	push	{r7}
 800c570:	b083      	sub	sp, #12
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr

0800c580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bc80      	pop	{r7}
 800c590:	4770      	bx	lr

0800c592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c59a:	bf00      	nop
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bc80      	pop	{r7}
 800c5a2:	4770      	bx	lr

0800c5a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bc80      	pop	{r7}
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a33      	ldr	r2, [pc, #204]	@ (800c698 <TIM_Base_SetConfig+0xe0>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d013      	beq.n	800c5f8 <TIM_Base_SetConfig+0x40>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a32      	ldr	r2, [pc, #200]	@ (800c69c <TIM_Base_SetConfig+0xe4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d00f      	beq.n	800c5f8 <TIM_Base_SetConfig+0x40>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5de:	d00b      	beq.n	800c5f8 <TIM_Base_SetConfig+0x40>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a2f      	ldr	r2, [pc, #188]	@ (800c6a0 <TIM_Base_SetConfig+0xe8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d007      	beq.n	800c5f8 <TIM_Base_SetConfig+0x40>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a2e      	ldr	r2, [pc, #184]	@ (800c6a4 <TIM_Base_SetConfig+0xec>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d003      	beq.n	800c5f8 <TIM_Base_SetConfig+0x40>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a2d      	ldr	r2, [pc, #180]	@ (800c6a8 <TIM_Base_SetConfig+0xf0>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d108      	bne.n	800c60a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	4313      	orrs	r3, r2
 800c608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a22      	ldr	r2, [pc, #136]	@ (800c698 <TIM_Base_SetConfig+0xe0>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d013      	beq.n	800c63a <TIM_Base_SetConfig+0x82>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a21      	ldr	r2, [pc, #132]	@ (800c69c <TIM_Base_SetConfig+0xe4>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d00f      	beq.n	800c63a <TIM_Base_SetConfig+0x82>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c620:	d00b      	beq.n	800c63a <TIM_Base_SetConfig+0x82>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a1e      	ldr	r2, [pc, #120]	@ (800c6a0 <TIM_Base_SetConfig+0xe8>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d007      	beq.n	800c63a <TIM_Base_SetConfig+0x82>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6a4 <TIM_Base_SetConfig+0xec>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <TIM_Base_SetConfig+0x82>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a1c      	ldr	r2, [pc, #112]	@ (800c6a8 <TIM_Base_SetConfig+0xf0>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d108      	bne.n	800c64c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	4313      	orrs	r3, r2
 800c64a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	4313      	orrs	r3, r2
 800c658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a09      	ldr	r2, [pc, #36]	@ (800c698 <TIM_Base_SetConfig+0xe0>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d003      	beq.n	800c680 <TIM_Base_SetConfig+0xc8>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a08      	ldr	r2, [pc, #32]	@ (800c69c <TIM_Base_SetConfig+0xe4>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d103      	bne.n	800c688 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	691a      	ldr	r2, [r3, #16]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	615a      	str	r2, [r3, #20]
}
 800c68e:	bf00      	nop
 800c690:	3714      	adds	r7, #20
 800c692:	46bd      	mov	sp, r7
 800c694:	bc80      	pop	{r7}
 800c696:	4770      	bx	lr
 800c698:	40012c00 	.word	0x40012c00
 800c69c:	40013400 	.word	0x40013400
 800c6a0:	40000400 	.word	0x40000400
 800c6a4:	40000800 	.word	0x40000800
 800c6a8:	40000c00 	.word	0x40000c00

0800c6ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	f023 0201 	bic.w	r2, r3, #1
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c6d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f023 030a 	bic.w	r3, r3, #10
 800c6e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	621a      	str	r2, [r3, #32]
}
 800c6fe:	bf00      	nop
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	bc80      	pop	{r7}
 800c706:	4770      	bx	lr

0800c708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a1b      	ldr	r3, [r3, #32]
 800c718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	f023 0210 	bic.w	r2, r3, #16
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	031b      	lsls	r3, r3, #12
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c744:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	011b      	lsls	r3, r3, #4
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	621a      	str	r2, [r3, #32]
}
 800c75c:	bf00      	nop
 800c75e:	371c      	adds	r7, #28
 800c760:	46bd      	mov	sp, r7
 800c762:	bc80      	pop	{r7}
 800c764:	4770      	bx	lr

0800c766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c766:	b480      	push	{r7}
 800c768:	b085      	sub	sp, #20
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c77c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4313      	orrs	r3, r2
 800c784:	f043 0307 	orr.w	r3, r3, #7
 800c788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	609a      	str	r2, [r3, #8]
}
 800c790:	bf00      	nop
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	bc80      	pop	{r7}
 800c798:	4770      	bx	lr

0800c79a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b087      	sub	sp, #28
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	607a      	str	r2, [r7, #4]
 800c7a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	021a      	lsls	r2, r3, #8
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	431a      	orrs	r2, r3
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	609a      	str	r2, [r3, #8]
}
 800c7ce:	bf00      	nop
 800c7d0:	371c      	adds	r7, #28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bc80      	pop	{r7}
 800c7d6:	4770      	bx	lr

0800c7d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d101      	bne.n	800c7f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	e050      	b.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a1b      	ldr	r2, [pc, #108]	@ (800c89c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d018      	beq.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a19      	ldr	r2, [pc, #100]	@ (800c8a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d013      	beq.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c846:	d00e      	beq.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a15      	ldr	r2, [pc, #84]	@ (800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d009      	beq.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a14      	ldr	r2, [pc, #80]	@ (800c8a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d004      	beq.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a12      	ldr	r2, [pc, #72]	@ (800c8ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d10c      	bne.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c86c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	4313      	orrs	r3, r2
 800c876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	bc80      	pop	{r7}
 800c89a:	4770      	bx	lr
 800c89c:	40012c00 	.word	0x40012c00
 800c8a0:	40013400 	.word	0x40013400
 800c8a4:	40000400 	.word	0x40000400
 800c8a8:	40000800 	.word	0x40000800
 800c8ac:	40000c00 	.word	0x40000c00

0800c8b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bc80      	pop	{r7}
 800c8c0:	4770      	bx	lr

0800c8c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8ca:	bf00      	nop
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bc80      	pop	{r7}
 800c8d2:	4770      	bx	lr

0800c8d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e042      	b.n	800c96c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7fc fe16 	bl	800952c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2224      	movs	r2, #36	@ 0x24
 800c904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68da      	ldr	r2, [r3, #12]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fcb5 	bl	800d288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	691a      	ldr	r2, [r3, #16]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c92c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	695a      	ldr	r2, [r3, #20]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c93c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68da      	ldr	r2, [r3, #12]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c94c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2220      	movs	r2, #32
 800c958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b20      	cmp	r3, #32
 800c98c:	d121      	bne.n	800c9d2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <HAL_UART_Transmit_IT+0x26>
 800c994:	88fb      	ldrh	r3, [r7, #6]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d101      	bne.n	800c99e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e01a      	b.n	800c9d4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	88fa      	ldrh	r2, [r7, #6]
 800c9a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	88fa      	ldrh	r2, [r7, #6]
 800c9ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2221      	movs	r2, #33	@ 0x21
 800c9ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68da      	ldr	r2, [r3, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c9cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e000      	b.n	800c9d4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c9d2:	2302      	movs	r3, #2
  }
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr
	...

0800c9e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b0ba      	sub	sp, #232	@ 0xe8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ca06:	2300      	movs	r3, #0
 800ca08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ca12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca16:	f003 030f 	and.w	r3, r3, #15
 800ca1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ca1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10f      	bne.n	800ca46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca2a:	f003 0320 	and.w	r3, r3, #32
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d009      	beq.n	800ca46 <HAL_UART_IRQHandler+0x66>
 800ca32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca36:	f003 0320 	and.w	r3, r3, #32
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fb63 	bl	800d10a <UART_Receive_IT>
      return;
 800ca44:	e25b      	b.n	800cefe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ca46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 80de 	beq.w	800cc0c <HAL_UART_IRQHandler+0x22c>
 800ca50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d106      	bne.n	800ca6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ca5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 80d1 	beq.w	800cc0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ca6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00b      	beq.n	800ca8e <HAL_UART_IRQHandler+0xae>
 800ca76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d005      	beq.n	800ca8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca86:	f043 0201 	orr.w	r2, r3, #1
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00b      	beq.n	800cab2 <HAL_UART_IRQHandler+0xd2>
 800ca9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d005      	beq.n	800cab2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caaa:	f043 0202 	orr.w	r2, r3, #2
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cab6:	f003 0302 	and.w	r3, r3, #2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00b      	beq.n	800cad6 <HAL_UART_IRQHandler+0xf6>
 800cabe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cac2:	f003 0301 	and.w	r3, r3, #1
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cace:	f043 0204 	orr.w	r2, r3, #4
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cada:	f003 0308 	and.w	r3, r3, #8
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d011      	beq.n	800cb06 <HAL_UART_IRQHandler+0x126>
 800cae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cae6:	f003 0320 	and.w	r3, r3, #32
 800caea:	2b00      	cmp	r3, #0
 800caec:	d105      	bne.n	800cafa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800caee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d005      	beq.n	800cb06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cafe:	f043 0208 	orr.w	r2, r3, #8
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f000 81f2 	beq.w	800cef4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb14:	f003 0320 	and.w	r3, r3, #32
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d008      	beq.n	800cb2e <HAL_UART_IRQHandler+0x14e>
 800cb1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb20:	f003 0320 	and.w	r3, r3, #32
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 faee 	bl	800d10a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	bf14      	ite	ne
 800cb3c:	2301      	movne	r3, #1
 800cb3e:	2300      	moveq	r3, #0
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb4a:	f003 0308 	and.w	r3, r3, #8
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d103      	bne.n	800cb5a <HAL_UART_IRQHandler+0x17a>
 800cb52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d04f      	beq.n	800cbfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f9f8 	bl	800cf50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d041      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3314      	adds	r3, #20
 800cb74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cb7c:	e853 3f00 	ldrex	r3, [r3]
 800cb80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cb84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3314      	adds	r3, #20
 800cb96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cb9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cb9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cbb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1d9      	bne.n	800cb6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d013      	beq.n	800cbea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc6:	4a7e      	ldr	r2, [pc, #504]	@ (800cdc0 <HAL_UART_IRQHandler+0x3e0>)
 800cbc8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd f86c 	bl	8009cac <HAL_DMA_Abort_IT>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d016      	beq.n	800cc08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbe8:	e00e      	b.n	800cc08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f99c 	bl	800cf28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf0:	e00a      	b.n	800cc08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f998 	bl	800cf28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf8:	e006      	b.n	800cc08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f994 	bl	800cf28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800cc06:	e175      	b.n	800cef4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc08:	bf00      	nop
    return;
 800cc0a:	e173      	b.n	800cef4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	f040 814f 	bne.w	800ceb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc1a:	f003 0310 	and.w	r3, r3, #16
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f000 8148 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc28:	f003 0310 	and.w	r3, r3, #16
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 8141 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc32:	2300      	movs	r3, #0
 800cc34:	60bb      	str	r3, [r7, #8]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	60bb      	str	r3, [r7, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	60bb      	str	r3, [r7, #8]
 800cc46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f000 80b6 	beq.w	800cdc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 8145 	beq.w	800cef8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cc76:	429a      	cmp	r2, r3
 800cc78:	f080 813e 	bcs.w	800cef8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cc82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	2b20      	cmp	r3, #32
 800cc8c:	f000 8088 	beq.w	800cda0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	330c      	adds	r3, #12
 800cc96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ccaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	330c      	adds	r3, #12
 800ccb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ccbc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ccc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ccc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cccc:	e841 2300 	strex	r3, r2, [r1]
 800ccd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ccd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1d9      	bne.n	800cc90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	3314      	adds	r3, #20
 800cce2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cce6:	e853 3f00 	ldrex	r3, [r3]
 800ccea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ccec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ccee:	f023 0301 	bic.w	r3, r3, #1
 800ccf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3314      	adds	r3, #20
 800ccfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cd00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cd04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd0c:	e841 2300 	strex	r3, r2, [r1]
 800cd10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cd12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1e1      	bne.n	800ccdc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	3314      	adds	r3, #20
 800cd1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd22:	e853 3f00 	ldrex	r3, [r3]
 800cd26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cd28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3314      	adds	r3, #20
 800cd38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cd3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cd3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cd42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd44:	e841 2300 	strex	r3, r2, [r1]
 800cd48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cd4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e3      	bne.n	800cd18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	330c      	adds	r3, #12
 800cd64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd68:	e853 3f00 	ldrex	r3, [r3]
 800cd6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cd6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd70:	f023 0310 	bic.w	r3, r3, #16
 800cd74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	330c      	adds	r3, #12
 800cd7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cd82:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cd84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd8a:	e841 2300 	strex	r3, r2, [r1]
 800cd8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e3      	bne.n	800cd5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fc ff4b 	bl	8009c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2202      	movs	r2, #2
 800cda4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f8bf 	bl	800cf3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cdbc:	e09c      	b.n	800cef8 <HAL_UART_IRQHandler+0x518>
 800cdbe:	bf00      	nop
 800cdc0:	0800d015 	.word	0x0800d015
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 808e 	beq.w	800cefc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cde0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 8089 	beq.w	800cefc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	330c      	adds	r3, #12
 800cdf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf4:	e853 3f00 	ldrex	r3, [r3]
 800cdf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	330c      	adds	r3, #12
 800ce0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ce0e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ce10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce16:	e841 2300 	strex	r3, r2, [r1]
 800ce1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1e3      	bne.n	800cdea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3314      	adds	r3, #20
 800ce28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2c:	e853 3f00 	ldrex	r3, [r3]
 800ce30:	623b      	str	r3, [r7, #32]
   return(result);
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	f023 0301 	bic.w	r3, r3, #1
 800ce38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3314      	adds	r3, #20
 800ce42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ce46:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1e3      	bne.n	800ce22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	330c      	adds	r3, #12
 800ce6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	e853 3f00 	ldrex	r3, [r3]
 800ce76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f023 0310 	bic.w	r3, r3, #16
 800ce7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	330c      	adds	r3, #12
 800ce88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ce8c:	61fa      	str	r2, [r7, #28]
 800ce8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	69b9      	ldr	r1, [r7, #24]
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	e841 2300 	strex	r3, r2, [r1]
 800ce98:	617b      	str	r3, [r7, #20]
   return(result);
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e3      	bne.n	800ce68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2202      	movs	r2, #2
 800cea4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f844 	bl	800cf3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ceb2:	e023      	b.n	800cefc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ceb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d009      	beq.n	800ced4 <HAL_UART_IRQHandler+0x4f4>
 800cec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d003      	beq.n	800ced4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f8b5 	bl	800d03c <UART_Transmit_IT>
    return;
 800ced2:	e014      	b.n	800cefe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ced4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00e      	beq.n	800cefe <HAL_UART_IRQHandler+0x51e>
 800cee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d008      	beq.n	800cefe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f8f4 	bl	800d0da <UART_EndTransmit_IT>
    return;
 800cef2:	e004      	b.n	800cefe <HAL_UART_IRQHandler+0x51e>
    return;
 800cef4:	bf00      	nop
 800cef6:	e002      	b.n	800cefe <HAL_UART_IRQHandler+0x51e>
      return;
 800cef8:	bf00      	nop
 800cefa:	e000      	b.n	800cefe <HAL_UART_IRQHandler+0x51e>
      return;
 800cefc:	bf00      	nop
  }
}
 800cefe:	37e8      	adds	r7, #232	@ 0xe8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bc80      	pop	{r7}
 800cf14:	4770      	bx	lr

0800cf16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr

0800cf28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bc80      	pop	{r7}
 800cf38:	4770      	bx	lr

0800cf3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf3a:	b480      	push	{r7}
 800cf3c:	b083      	sub	sp, #12
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	460b      	mov	r3, r1
 800cf44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf46:	bf00      	nop
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bc80      	pop	{r7}
 800cf4e:	4770      	bx	lr

0800cf50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b095      	sub	sp, #84	@ 0x54
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	330c      	adds	r3, #12
 800cf5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf62:	e853 3f00 	ldrex	r3, [r3]
 800cf66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	330c      	adds	r3, #12
 800cf76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf78:	643a      	str	r2, [r7, #64]	@ 0x40
 800cf7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf80:	e841 2300 	strex	r3, r2, [r1]
 800cf84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1e5      	bne.n	800cf58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3314      	adds	r3, #20
 800cf92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	e853 3f00 	ldrex	r3, [r3]
 800cf9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	f023 0301 	bic.w	r3, r3, #1
 800cfa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3314      	adds	r3, #20
 800cfaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfb4:	e841 2300 	strex	r3, r2, [r1]
 800cfb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1e5      	bne.n	800cf8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d119      	bne.n	800cffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	330c      	adds	r3, #12
 800cfce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	e853 3f00 	ldrex	r3, [r3]
 800cfd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	f023 0310 	bic.w	r3, r3, #16
 800cfde:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	330c      	adds	r3, #12
 800cfe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfe8:	61ba      	str	r2, [r7, #24]
 800cfea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfec:	6979      	ldr	r1, [r7, #20]
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	e841 2300 	strex	r3, r2, [r1]
 800cff4:	613b      	str	r3, [r7, #16]
   return(result);
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1e5      	bne.n	800cfc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2220      	movs	r2, #32
 800d000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d00a:	bf00      	nop
 800d00c:	3754      	adds	r7, #84	@ 0x54
 800d00e:	46bd      	mov	sp, r7
 800d010:	bc80      	pop	{r7}
 800d012:	4770      	bx	lr

0800d014 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff ff7a 	bl	800cf28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d034:	bf00      	nop
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b21      	cmp	r3, #33	@ 0x21
 800d04e:	d13e      	bne.n	800d0ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d058:	d114      	bne.n	800d084 <UART_Transmit_IT+0x48>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	691b      	ldr	r3, [r3, #16]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d110      	bne.n	800d084 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	881b      	ldrh	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d076:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a1b      	ldr	r3, [r3, #32]
 800d07c:	1c9a      	adds	r2, r3, #2
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	621a      	str	r2, [r3, #32]
 800d082:	e008      	b.n	800d096 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a1b      	ldr	r3, [r3, #32]
 800d088:	1c59      	adds	r1, r3, #1
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	6211      	str	r1, [r2, #32]
 800d08e:	781a      	ldrb	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	3b01      	subs	r3, #1
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10f      	bne.n	800d0ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68da      	ldr	r2, [r3, #12]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68da      	ldr	r2, [r3, #12]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e000      	b.n	800d0d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0ce:	2302      	movs	r3, #2
  }
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bc80      	pop	{r7}
 800d0d8:	4770      	bx	lr

0800d0da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b082      	sub	sp, #8
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68da      	ldr	r2, [r3, #12]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d0f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff ff02 	bl	800cf04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b08c      	sub	sp, #48	@ 0x30
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b22      	cmp	r3, #34	@ 0x22
 800d11c:	f040 80ae 	bne.w	800d27c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d128:	d117      	bne.n	800d15a <UART_Receive_IT+0x50>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d113      	bne.n	800d15a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d13a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	b29b      	uxth	r3, r3
 800d144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d148:	b29a      	uxth	r2, r3
 800d14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d152:	1c9a      	adds	r2, r3, #2
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	629a      	str	r2, [r3, #40]	@ 0x28
 800d158:	e026      	b.n	800d1a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d16c:	d007      	beq.n	800d17e <UART_Receive_IT+0x74>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10a      	bne.n	800d18c <UART_Receive_IT+0x82>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d106      	bne.n	800d18c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	b2da      	uxtb	r2, r3
 800d186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	e008      	b.n	800d19e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d15d      	bne.n	800d278 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68da      	ldr	r2, [r3, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f022 0220 	bic.w	r2, r2, #32
 800d1ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68da      	ldr	r2, [r3, #12]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d1da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	695a      	ldr	r2, [r3, #20]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 0201 	bic.w	r2, r2, #1
 800d1ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d135      	bne.n	800d26e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	330c      	adds	r3, #12
 800d20e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	e853 3f00 	ldrex	r3, [r3]
 800d216:	613b      	str	r3, [r7, #16]
   return(result);
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f023 0310 	bic.w	r3, r3, #16
 800d21e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	330c      	adds	r3, #12
 800d226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d228:	623a      	str	r2, [r7, #32]
 800d22a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22c:	69f9      	ldr	r1, [r7, #28]
 800d22e:	6a3a      	ldr	r2, [r7, #32]
 800d230:	e841 2300 	strex	r3, r2, [r1]
 800d234:	61bb      	str	r3, [r7, #24]
   return(result);
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1e5      	bne.n	800d208 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 0310 	and.w	r3, r3, #16
 800d246:	2b10      	cmp	r3, #16
 800d248:	d10a      	bne.n	800d260 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d24a:	2300      	movs	r3, #0
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	60fb      	str	r3, [r7, #12]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fe67 	bl	800cf3a <HAL_UARTEx_RxEventCallback>
 800d26c:	e002      	b.n	800d274 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff fe51 	bl	800cf16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	e002      	b.n	800d27e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	e000      	b.n	800d27e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d27c:	2302      	movs	r3, #2
  }
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3730      	adds	r7, #48	@ 0x30
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
	...

0800d288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	430a      	orrs	r2, r1
 800d2a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	689a      	ldr	r2, [r3, #8]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	431a      	orrs	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d2c2:	f023 030c 	bic.w	r3, r3, #12
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	6812      	ldr	r2, [r2, #0]
 800d2ca:	68b9      	ldr	r1, [r7, #8]
 800d2cc:	430b      	orrs	r3, r1
 800d2ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	695b      	ldr	r3, [r3, #20]
 800d2d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	699a      	ldr	r2, [r3, #24]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	430a      	orrs	r2, r1
 800d2e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a2c      	ldr	r2, [pc, #176]	@ (800d39c <UART_SetConfig+0x114>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d103      	bne.n	800d2f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d2f0:	f7fe fe8c 	bl	800c00c <HAL_RCC_GetPCLK2Freq>
 800d2f4:	60f8      	str	r0, [r7, #12]
 800d2f6:	e002      	b.n	800d2fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d2f8:	f7fe fe74 	bl	800bfe4 <HAL_RCC_GetPCLK1Freq>
 800d2fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009a      	lsls	r2, r3, #2
 800d308:	441a      	add	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	fbb2 f3f3 	udiv	r3, r2, r3
 800d314:	4a22      	ldr	r2, [pc, #136]	@ (800d3a0 <UART_SetConfig+0x118>)
 800d316:	fba2 2303 	umull	r2, r3, r2, r3
 800d31a:	095b      	lsrs	r3, r3, #5
 800d31c:	0119      	lsls	r1, r3, #4
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009a      	lsls	r2, r3, #2
 800d328:	441a      	add	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	fbb2 f2f3 	udiv	r2, r2, r3
 800d334:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a0 <UART_SetConfig+0x118>)
 800d336:	fba3 0302 	umull	r0, r3, r3, r2
 800d33a:	095b      	lsrs	r3, r3, #5
 800d33c:	2064      	movs	r0, #100	@ 0x64
 800d33e:	fb00 f303 	mul.w	r3, r0, r3
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	011b      	lsls	r3, r3, #4
 800d346:	3332      	adds	r3, #50	@ 0x32
 800d348:	4a15      	ldr	r2, [pc, #84]	@ (800d3a0 <UART_SetConfig+0x118>)
 800d34a:	fba2 2303 	umull	r2, r3, r2, r3
 800d34e:	095b      	lsrs	r3, r3, #5
 800d350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d354:	4419      	add	r1, r3
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	4613      	mov	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	4413      	add	r3, r2
 800d35e:	009a      	lsls	r2, r3, #2
 800d360:	441a      	add	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	fbb2 f2f3 	udiv	r2, r2, r3
 800d36c:	4b0c      	ldr	r3, [pc, #48]	@ (800d3a0 <UART_SetConfig+0x118>)
 800d36e:	fba3 0302 	umull	r0, r3, r3, r2
 800d372:	095b      	lsrs	r3, r3, #5
 800d374:	2064      	movs	r0, #100	@ 0x64
 800d376:	fb00 f303 	mul.w	r3, r0, r3
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	011b      	lsls	r3, r3, #4
 800d37e:	3332      	adds	r3, #50	@ 0x32
 800d380:	4a07      	ldr	r2, [pc, #28]	@ (800d3a0 <UART_SetConfig+0x118>)
 800d382:	fba2 2303 	umull	r2, r3, r2, r3
 800d386:	095b      	lsrs	r3, r3, #5
 800d388:	f003 020f 	and.w	r2, r3, #15
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	440a      	add	r2, r1
 800d392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d394:	bf00      	nop
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	40013800 	.word	0x40013800
 800d3a0:	51eb851f 	.word	0x51eb851f

0800d3a4 <__itoa>:
 800d3a4:	1e93      	subs	r3, r2, #2
 800d3a6:	2b22      	cmp	r3, #34	@ 0x22
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	d904      	bls.n	800d3b8 <__itoa+0x14>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	461c      	mov	r4, r3
 800d3b2:	700b      	strb	r3, [r1, #0]
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	bd10      	pop	{r4, pc}
 800d3b8:	2a0a      	cmp	r2, #10
 800d3ba:	d109      	bne.n	800d3d0 <__itoa+0x2c>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	da07      	bge.n	800d3d0 <__itoa+0x2c>
 800d3c0:	232d      	movs	r3, #45	@ 0x2d
 800d3c2:	700b      	strb	r3, [r1, #0]
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	4240      	negs	r0, r0
 800d3c8:	4421      	add	r1, r4
 800d3ca:	f000 f8bb 	bl	800d544 <__utoa>
 800d3ce:	e7f1      	b.n	800d3b4 <__itoa+0x10>
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	e7f9      	b.n	800d3c8 <__itoa+0x24>

0800d3d4 <itoa>:
 800d3d4:	f7ff bfe6 	b.w	800d3a4 <__itoa>

0800d3d8 <malloc>:
 800d3d8:	4b02      	ldr	r3, [pc, #8]	@ (800d3e4 <malloc+0xc>)
 800d3da:	4601      	mov	r1, r0
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	f000 b825 	b.w	800d42c <_malloc_r>
 800d3e2:	bf00      	nop
 800d3e4:	20000f80 	.word	0x20000f80

0800d3e8 <sbrk_aligned>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	4e0f      	ldr	r6, [pc, #60]	@ (800d428 <sbrk_aligned+0x40>)
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	6831      	ldr	r1, [r6, #0]
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	b911      	cbnz	r1, 800d3fa <sbrk_aligned+0x12>
 800d3f4:	f000 f954 	bl	800d6a0 <_sbrk_r>
 800d3f8:	6030      	str	r0, [r6, #0]
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	f000 f94f 	bl	800d6a0 <_sbrk_r>
 800d402:	1c43      	adds	r3, r0, #1
 800d404:	d103      	bne.n	800d40e <sbrk_aligned+0x26>
 800d406:	f04f 34ff 	mov.w	r4, #4294967295
 800d40a:	4620      	mov	r0, r4
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	1cc4      	adds	r4, r0, #3
 800d410:	f024 0403 	bic.w	r4, r4, #3
 800d414:	42a0      	cmp	r0, r4
 800d416:	d0f8      	beq.n	800d40a <sbrk_aligned+0x22>
 800d418:	1a21      	subs	r1, r4, r0
 800d41a:	4628      	mov	r0, r5
 800d41c:	f000 f940 	bl	800d6a0 <_sbrk_r>
 800d420:	3001      	adds	r0, #1
 800d422:	d1f2      	bne.n	800d40a <sbrk_aligned+0x22>
 800d424:	e7ef      	b.n	800d406 <sbrk_aligned+0x1e>
 800d426:	bf00      	nop
 800d428:	20001a28 	.word	0x20001a28

0800d42c <_malloc_r>:
 800d42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d430:	1ccd      	adds	r5, r1, #3
 800d432:	f025 0503 	bic.w	r5, r5, #3
 800d436:	3508      	adds	r5, #8
 800d438:	2d0c      	cmp	r5, #12
 800d43a:	bf38      	it	cc
 800d43c:	250c      	movcc	r5, #12
 800d43e:	2d00      	cmp	r5, #0
 800d440:	4606      	mov	r6, r0
 800d442:	db01      	blt.n	800d448 <_malloc_r+0x1c>
 800d444:	42a9      	cmp	r1, r5
 800d446:	d904      	bls.n	800d452 <_malloc_r+0x26>
 800d448:	230c      	movs	r3, #12
 800d44a:	6033      	str	r3, [r6, #0]
 800d44c:	2000      	movs	r0, #0
 800d44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d528 <_malloc_r+0xfc>
 800d456:	f000 f869 	bl	800d52c <__malloc_lock>
 800d45a:	f8d8 3000 	ldr.w	r3, [r8]
 800d45e:	461c      	mov	r4, r3
 800d460:	bb44      	cbnz	r4, 800d4b4 <_malloc_r+0x88>
 800d462:	4629      	mov	r1, r5
 800d464:	4630      	mov	r0, r6
 800d466:	f7ff ffbf 	bl	800d3e8 <sbrk_aligned>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	4604      	mov	r4, r0
 800d46e:	d158      	bne.n	800d522 <_malloc_r+0xf6>
 800d470:	f8d8 4000 	ldr.w	r4, [r8]
 800d474:	4627      	mov	r7, r4
 800d476:	2f00      	cmp	r7, #0
 800d478:	d143      	bne.n	800d502 <_malloc_r+0xd6>
 800d47a:	2c00      	cmp	r4, #0
 800d47c:	d04b      	beq.n	800d516 <_malloc_r+0xea>
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	4639      	mov	r1, r7
 800d482:	4630      	mov	r0, r6
 800d484:	eb04 0903 	add.w	r9, r4, r3
 800d488:	f000 f90a 	bl	800d6a0 <_sbrk_r>
 800d48c:	4581      	cmp	r9, r0
 800d48e:	d142      	bne.n	800d516 <_malloc_r+0xea>
 800d490:	6821      	ldr	r1, [r4, #0]
 800d492:	4630      	mov	r0, r6
 800d494:	1a6d      	subs	r5, r5, r1
 800d496:	4629      	mov	r1, r5
 800d498:	f7ff ffa6 	bl	800d3e8 <sbrk_aligned>
 800d49c:	3001      	adds	r0, #1
 800d49e:	d03a      	beq.n	800d516 <_malloc_r+0xea>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	442b      	add	r3, r5
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	bb62      	cbnz	r2, 800d508 <_malloc_r+0xdc>
 800d4ae:	f8c8 7000 	str.w	r7, [r8]
 800d4b2:	e00f      	b.n	800d4d4 <_malloc_r+0xa8>
 800d4b4:	6822      	ldr	r2, [r4, #0]
 800d4b6:	1b52      	subs	r2, r2, r5
 800d4b8:	d420      	bmi.n	800d4fc <_malloc_r+0xd0>
 800d4ba:	2a0b      	cmp	r2, #11
 800d4bc:	d917      	bls.n	800d4ee <_malloc_r+0xc2>
 800d4be:	1961      	adds	r1, r4, r5
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	6025      	str	r5, [r4, #0]
 800d4c4:	bf18      	it	ne
 800d4c6:	6059      	strne	r1, [r3, #4]
 800d4c8:	6863      	ldr	r3, [r4, #4]
 800d4ca:	bf08      	it	eq
 800d4cc:	f8c8 1000 	streq.w	r1, [r8]
 800d4d0:	5162      	str	r2, [r4, r5]
 800d4d2:	604b      	str	r3, [r1, #4]
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f000 f82f 	bl	800d538 <__malloc_unlock>
 800d4da:	f104 000b 	add.w	r0, r4, #11
 800d4de:	1d23      	adds	r3, r4, #4
 800d4e0:	f020 0007 	bic.w	r0, r0, #7
 800d4e4:	1ac2      	subs	r2, r0, r3
 800d4e6:	bf1c      	itt	ne
 800d4e8:	1a1b      	subne	r3, r3, r0
 800d4ea:	50a3      	strne	r3, [r4, r2]
 800d4ec:	e7af      	b.n	800d44e <_malloc_r+0x22>
 800d4ee:	6862      	ldr	r2, [r4, #4]
 800d4f0:	42a3      	cmp	r3, r4
 800d4f2:	bf0c      	ite	eq
 800d4f4:	f8c8 2000 	streq.w	r2, [r8]
 800d4f8:	605a      	strne	r2, [r3, #4]
 800d4fa:	e7eb      	b.n	800d4d4 <_malloc_r+0xa8>
 800d4fc:	4623      	mov	r3, r4
 800d4fe:	6864      	ldr	r4, [r4, #4]
 800d500:	e7ae      	b.n	800d460 <_malloc_r+0x34>
 800d502:	463c      	mov	r4, r7
 800d504:	687f      	ldr	r7, [r7, #4]
 800d506:	e7b6      	b.n	800d476 <_malloc_r+0x4a>
 800d508:	461a      	mov	r2, r3
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	d1fb      	bne.n	800d508 <_malloc_r+0xdc>
 800d510:	2300      	movs	r3, #0
 800d512:	6053      	str	r3, [r2, #4]
 800d514:	e7de      	b.n	800d4d4 <_malloc_r+0xa8>
 800d516:	230c      	movs	r3, #12
 800d518:	4630      	mov	r0, r6
 800d51a:	6033      	str	r3, [r6, #0]
 800d51c:	f000 f80c 	bl	800d538 <__malloc_unlock>
 800d520:	e794      	b.n	800d44c <_malloc_r+0x20>
 800d522:	6005      	str	r5, [r0, #0]
 800d524:	e7d6      	b.n	800d4d4 <_malloc_r+0xa8>
 800d526:	bf00      	nop
 800d528:	20001a2c 	.word	0x20001a2c

0800d52c <__malloc_lock>:
 800d52c:	4801      	ldr	r0, [pc, #4]	@ (800d534 <__malloc_lock+0x8>)
 800d52e:	f000 b8f1 	b.w	800d714 <__retarget_lock_acquire_recursive>
 800d532:	bf00      	nop
 800d534:	20001b6c 	.word	0x20001b6c

0800d538 <__malloc_unlock>:
 800d538:	4801      	ldr	r0, [pc, #4]	@ (800d540 <__malloc_unlock+0x8>)
 800d53a:	f000 b8ec 	b.w	800d716 <__retarget_lock_release_recursive>
 800d53e:	bf00      	nop
 800d540:	20001b6c 	.word	0x20001b6c

0800d544 <__utoa>:
 800d544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d546:	b08b      	sub	sp, #44	@ 0x2c
 800d548:	4605      	mov	r5, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	466e      	mov	r6, sp
 800d54e:	4c1d      	ldr	r4, [pc, #116]	@ (800d5c4 <__utoa+0x80>)
 800d550:	f104 0c20 	add.w	ip, r4, #32
 800d554:	4637      	mov	r7, r6
 800d556:	6820      	ldr	r0, [r4, #0]
 800d558:	6861      	ldr	r1, [r4, #4]
 800d55a:	3408      	adds	r4, #8
 800d55c:	c703      	stmia	r7!, {r0, r1}
 800d55e:	4564      	cmp	r4, ip
 800d560:	463e      	mov	r6, r7
 800d562:	d1f7      	bne.n	800d554 <__utoa+0x10>
 800d564:	7921      	ldrb	r1, [r4, #4]
 800d566:	6820      	ldr	r0, [r4, #0]
 800d568:	7139      	strb	r1, [r7, #4]
 800d56a:	1e91      	subs	r1, r2, #2
 800d56c:	2922      	cmp	r1, #34	@ 0x22
 800d56e:	6038      	str	r0, [r7, #0]
 800d570:	f04f 0100 	mov.w	r1, #0
 800d574:	d904      	bls.n	800d580 <__utoa+0x3c>
 800d576:	7019      	strb	r1, [r3, #0]
 800d578:	460b      	mov	r3, r1
 800d57a:	4618      	mov	r0, r3
 800d57c:	b00b      	add	sp, #44	@ 0x2c
 800d57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d580:	1e58      	subs	r0, r3, #1
 800d582:	4684      	mov	ip, r0
 800d584:	fbb5 f7f2 	udiv	r7, r5, r2
 800d588:	fb02 5617 	mls	r6, r2, r7, r5
 800d58c:	3628      	adds	r6, #40	@ 0x28
 800d58e:	446e      	add	r6, sp
 800d590:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d594:	460c      	mov	r4, r1
 800d596:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d59a:	462e      	mov	r6, r5
 800d59c:	42b2      	cmp	r2, r6
 800d59e:	463d      	mov	r5, r7
 800d5a0:	f101 0101 	add.w	r1, r1, #1
 800d5a4:	d9ee      	bls.n	800d584 <__utoa+0x40>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	545a      	strb	r2, [r3, r1]
 800d5aa:	1919      	adds	r1, r3, r4
 800d5ac:	1aa5      	subs	r5, r4, r2
 800d5ae:	42aa      	cmp	r2, r5
 800d5b0:	dae3      	bge.n	800d57a <__utoa+0x36>
 800d5b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d5b6:	780e      	ldrb	r6, [r1, #0]
 800d5b8:	3201      	adds	r2, #1
 800d5ba:	7006      	strb	r6, [r0, #0]
 800d5bc:	f801 5901 	strb.w	r5, [r1], #-1
 800d5c0:	e7f4      	b.n	800d5ac <__utoa+0x68>
 800d5c2:	bf00      	nop
 800d5c4:	0800e362 	.word	0x0800e362

0800d5c8 <sniprintf>:
 800d5c8:	b40c      	push	{r2, r3}
 800d5ca:	b530      	push	{r4, r5, lr}
 800d5cc:	4b17      	ldr	r3, [pc, #92]	@ (800d62c <sniprintf+0x64>)
 800d5ce:	1e0c      	subs	r4, r1, #0
 800d5d0:	681d      	ldr	r5, [r3, #0]
 800d5d2:	b09d      	sub	sp, #116	@ 0x74
 800d5d4:	da08      	bge.n	800d5e8 <sniprintf+0x20>
 800d5d6:	238b      	movs	r3, #139	@ 0x8b
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	602b      	str	r3, [r5, #0]
 800d5de:	b01d      	add	sp, #116	@ 0x74
 800d5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5e4:	b002      	add	sp, #8
 800d5e6:	4770      	bx	lr
 800d5e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d5ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d5f0:	bf0c      	ite	eq
 800d5f2:	4623      	moveq	r3, r4
 800d5f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d5f8:	9304      	str	r3, [sp, #16]
 800d5fa:	9307      	str	r3, [sp, #28]
 800d5fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d600:	9002      	str	r0, [sp, #8]
 800d602:	9006      	str	r0, [sp, #24]
 800d604:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d608:	4628      	mov	r0, r5
 800d60a:	ab21      	add	r3, sp, #132	@ 0x84
 800d60c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d60e:	a902      	add	r1, sp, #8
 800d610:	9301      	str	r3, [sp, #4]
 800d612:	f000 f92d 	bl	800d870 <_svfiprintf_r>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	bfbc      	itt	lt
 800d61a:	238b      	movlt	r3, #139	@ 0x8b
 800d61c:	602b      	strlt	r3, [r5, #0]
 800d61e:	2c00      	cmp	r4, #0
 800d620:	d0dd      	beq.n	800d5de <sniprintf+0x16>
 800d622:	2200      	movs	r2, #0
 800d624:	9b02      	ldr	r3, [sp, #8]
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	e7d9      	b.n	800d5de <sniprintf+0x16>
 800d62a:	bf00      	nop
 800d62c:	20000f80 	.word	0x20000f80

0800d630 <siprintf>:
 800d630:	b40e      	push	{r1, r2, r3}
 800d632:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d636:	b500      	push	{lr}
 800d638:	b09c      	sub	sp, #112	@ 0x70
 800d63a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d63c:	9002      	str	r0, [sp, #8]
 800d63e:	9006      	str	r0, [sp, #24]
 800d640:	9107      	str	r1, [sp, #28]
 800d642:	9104      	str	r1, [sp, #16]
 800d644:	4808      	ldr	r0, [pc, #32]	@ (800d668 <siprintf+0x38>)
 800d646:	4909      	ldr	r1, [pc, #36]	@ (800d66c <siprintf+0x3c>)
 800d648:	f853 2b04 	ldr.w	r2, [r3], #4
 800d64c:	9105      	str	r1, [sp, #20]
 800d64e:	6800      	ldr	r0, [r0, #0]
 800d650:	a902      	add	r1, sp, #8
 800d652:	9301      	str	r3, [sp, #4]
 800d654:	f000 f90c 	bl	800d870 <_svfiprintf_r>
 800d658:	2200      	movs	r2, #0
 800d65a:	9b02      	ldr	r3, [sp, #8]
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	b01c      	add	sp, #112	@ 0x70
 800d660:	f85d eb04 	ldr.w	lr, [sp], #4
 800d664:	b003      	add	sp, #12
 800d666:	4770      	bx	lr
 800d668:	20000f80 	.word	0x20000f80
 800d66c:	ffff0208 	.word	0xffff0208

0800d670 <memset>:
 800d670:	4603      	mov	r3, r0
 800d672:	4402      	add	r2, r0
 800d674:	4293      	cmp	r3, r2
 800d676:	d100      	bne.n	800d67a <memset+0xa>
 800d678:	4770      	bx	lr
 800d67a:	f803 1b01 	strb.w	r1, [r3], #1
 800d67e:	e7f9      	b.n	800d674 <memset+0x4>

0800d680 <strcat>:
 800d680:	4602      	mov	r2, r0
 800d682:	b510      	push	{r4, lr}
 800d684:	7814      	ldrb	r4, [r2, #0]
 800d686:	4613      	mov	r3, r2
 800d688:	3201      	adds	r2, #1
 800d68a:	2c00      	cmp	r4, #0
 800d68c:	d1fa      	bne.n	800d684 <strcat+0x4>
 800d68e:	3b01      	subs	r3, #1
 800d690:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d694:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d698:	2a00      	cmp	r2, #0
 800d69a:	d1f9      	bne.n	800d690 <strcat+0x10>
 800d69c:	bd10      	pop	{r4, pc}
	...

0800d6a0 <_sbrk_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	4d05      	ldr	r5, [pc, #20]	@ (800d6bc <_sbrk_r+0x1c>)
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	f7fb ffd2 	bl	8009654 <_sbrk>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_sbrk_r+0x1a>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_sbrk_r+0x1a>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20001b68 	.word	0x20001b68

0800d6c0 <__errno>:
 800d6c0:	4b01      	ldr	r3, [pc, #4]	@ (800d6c8 <__errno+0x8>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	20000f80 	.word	0x20000f80

0800d6cc <__libc_init_array>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	2600      	movs	r6, #0
 800d6d0:	4d0c      	ldr	r5, [pc, #48]	@ (800d704 <__libc_init_array+0x38>)
 800d6d2:	4c0d      	ldr	r4, [pc, #52]	@ (800d708 <__libc_init_array+0x3c>)
 800d6d4:	1b64      	subs	r4, r4, r5
 800d6d6:	10a4      	asrs	r4, r4, #2
 800d6d8:	42a6      	cmp	r6, r4
 800d6da:	d109      	bne.n	800d6f0 <__libc_init_array+0x24>
 800d6dc:	f000 fbc2 	bl	800de64 <_init>
 800d6e0:	2600      	movs	r6, #0
 800d6e2:	4d0a      	ldr	r5, [pc, #40]	@ (800d70c <__libc_init_array+0x40>)
 800d6e4:	4c0a      	ldr	r4, [pc, #40]	@ (800d710 <__libc_init_array+0x44>)
 800d6e6:	1b64      	subs	r4, r4, r5
 800d6e8:	10a4      	asrs	r4, r4, #2
 800d6ea:	42a6      	cmp	r6, r4
 800d6ec:	d105      	bne.n	800d6fa <__libc_init_array+0x2e>
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
 800d6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f4:	4798      	blx	r3
 800d6f6:	3601      	adds	r6, #1
 800d6f8:	e7ee      	b.n	800d6d8 <__libc_init_array+0xc>
 800d6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6fe:	4798      	blx	r3
 800d700:	3601      	adds	r6, #1
 800d702:	e7f2      	b.n	800d6ea <__libc_init_array+0x1e>
 800d704:	0800e3c4 	.word	0x0800e3c4
 800d708:	0800e3c4 	.word	0x0800e3c4
 800d70c:	0800e3c4 	.word	0x0800e3c4
 800d710:	0800e3c8 	.word	0x0800e3c8

0800d714 <__retarget_lock_acquire_recursive>:
 800d714:	4770      	bx	lr

0800d716 <__retarget_lock_release_recursive>:
 800d716:	4770      	bx	lr

0800d718 <strcpy>:
 800d718:	4603      	mov	r3, r0
 800d71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d71e:	f803 2b01 	strb.w	r2, [r3], #1
 800d722:	2a00      	cmp	r2, #0
 800d724:	d1f9      	bne.n	800d71a <strcpy+0x2>
 800d726:	4770      	bx	lr

0800d728 <_free_r>:
 800d728:	b538      	push	{r3, r4, r5, lr}
 800d72a:	4605      	mov	r5, r0
 800d72c:	2900      	cmp	r1, #0
 800d72e:	d040      	beq.n	800d7b2 <_free_r+0x8a>
 800d730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d734:	1f0c      	subs	r4, r1, #4
 800d736:	2b00      	cmp	r3, #0
 800d738:	bfb8      	it	lt
 800d73a:	18e4      	addlt	r4, r4, r3
 800d73c:	f7ff fef6 	bl	800d52c <__malloc_lock>
 800d740:	4a1c      	ldr	r2, [pc, #112]	@ (800d7b4 <_free_r+0x8c>)
 800d742:	6813      	ldr	r3, [r2, #0]
 800d744:	b933      	cbnz	r3, 800d754 <_free_r+0x2c>
 800d746:	6063      	str	r3, [r4, #4]
 800d748:	6014      	str	r4, [r2, #0]
 800d74a:	4628      	mov	r0, r5
 800d74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d750:	f7ff bef2 	b.w	800d538 <__malloc_unlock>
 800d754:	42a3      	cmp	r3, r4
 800d756:	d908      	bls.n	800d76a <_free_r+0x42>
 800d758:	6820      	ldr	r0, [r4, #0]
 800d75a:	1821      	adds	r1, r4, r0
 800d75c:	428b      	cmp	r3, r1
 800d75e:	bf01      	itttt	eq
 800d760:	6819      	ldreq	r1, [r3, #0]
 800d762:	685b      	ldreq	r3, [r3, #4]
 800d764:	1809      	addeq	r1, r1, r0
 800d766:	6021      	streq	r1, [r4, #0]
 800d768:	e7ed      	b.n	800d746 <_free_r+0x1e>
 800d76a:	461a      	mov	r2, r3
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	b10b      	cbz	r3, 800d774 <_free_r+0x4c>
 800d770:	42a3      	cmp	r3, r4
 800d772:	d9fa      	bls.n	800d76a <_free_r+0x42>
 800d774:	6811      	ldr	r1, [r2, #0]
 800d776:	1850      	adds	r0, r2, r1
 800d778:	42a0      	cmp	r0, r4
 800d77a:	d10b      	bne.n	800d794 <_free_r+0x6c>
 800d77c:	6820      	ldr	r0, [r4, #0]
 800d77e:	4401      	add	r1, r0
 800d780:	1850      	adds	r0, r2, r1
 800d782:	4283      	cmp	r3, r0
 800d784:	6011      	str	r1, [r2, #0]
 800d786:	d1e0      	bne.n	800d74a <_free_r+0x22>
 800d788:	6818      	ldr	r0, [r3, #0]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	4408      	add	r0, r1
 800d78e:	6010      	str	r0, [r2, #0]
 800d790:	6053      	str	r3, [r2, #4]
 800d792:	e7da      	b.n	800d74a <_free_r+0x22>
 800d794:	d902      	bls.n	800d79c <_free_r+0x74>
 800d796:	230c      	movs	r3, #12
 800d798:	602b      	str	r3, [r5, #0]
 800d79a:	e7d6      	b.n	800d74a <_free_r+0x22>
 800d79c:	6820      	ldr	r0, [r4, #0]
 800d79e:	1821      	adds	r1, r4, r0
 800d7a0:	428b      	cmp	r3, r1
 800d7a2:	bf01      	itttt	eq
 800d7a4:	6819      	ldreq	r1, [r3, #0]
 800d7a6:	685b      	ldreq	r3, [r3, #4]
 800d7a8:	1809      	addeq	r1, r1, r0
 800d7aa:	6021      	streq	r1, [r4, #0]
 800d7ac:	6063      	str	r3, [r4, #4]
 800d7ae:	6054      	str	r4, [r2, #4]
 800d7b0:	e7cb      	b.n	800d74a <_free_r+0x22>
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	20001a2c 	.word	0x20001a2c

0800d7b8 <__ssputs_r>:
 800d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7bc:	461f      	mov	r7, r3
 800d7be:	688e      	ldr	r6, [r1, #8]
 800d7c0:	4682      	mov	sl, r0
 800d7c2:	42be      	cmp	r6, r7
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	4690      	mov	r8, r2
 800d7c8:	680b      	ldr	r3, [r1, #0]
 800d7ca:	d82d      	bhi.n	800d828 <__ssputs_r+0x70>
 800d7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d7d4:	d026      	beq.n	800d824 <__ssputs_r+0x6c>
 800d7d6:	6965      	ldr	r5, [r4, #20]
 800d7d8:	6909      	ldr	r1, [r1, #16]
 800d7da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7de:	eba3 0901 	sub.w	r9, r3, r1
 800d7e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7e6:	1c7b      	adds	r3, r7, #1
 800d7e8:	444b      	add	r3, r9
 800d7ea:	106d      	asrs	r5, r5, #1
 800d7ec:	429d      	cmp	r5, r3
 800d7ee:	bf38      	it	cc
 800d7f0:	461d      	movcc	r5, r3
 800d7f2:	0553      	lsls	r3, r2, #21
 800d7f4:	d527      	bpl.n	800d846 <__ssputs_r+0x8e>
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	f7ff fe18 	bl	800d42c <_malloc_r>
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	b360      	cbz	r0, 800d85a <__ssputs_r+0xa2>
 800d800:	464a      	mov	r2, r9
 800d802:	6921      	ldr	r1, [r4, #16]
 800d804:	f000 faea 	bl	800dddc <memcpy>
 800d808:	89a3      	ldrh	r3, [r4, #12]
 800d80a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	6126      	str	r6, [r4, #16]
 800d816:	444e      	add	r6, r9
 800d818:	6026      	str	r6, [r4, #0]
 800d81a:	463e      	mov	r6, r7
 800d81c:	6165      	str	r5, [r4, #20]
 800d81e:	eba5 0509 	sub.w	r5, r5, r9
 800d822:	60a5      	str	r5, [r4, #8]
 800d824:	42be      	cmp	r6, r7
 800d826:	d900      	bls.n	800d82a <__ssputs_r+0x72>
 800d828:	463e      	mov	r6, r7
 800d82a:	4632      	mov	r2, r6
 800d82c:	4641      	mov	r1, r8
 800d82e:	6820      	ldr	r0, [r4, #0]
 800d830:	f000 faac 	bl	800dd8c <memmove>
 800d834:	2000      	movs	r0, #0
 800d836:	68a3      	ldr	r3, [r4, #8]
 800d838:	1b9b      	subs	r3, r3, r6
 800d83a:	60a3      	str	r3, [r4, #8]
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	4433      	add	r3, r6
 800d840:	6023      	str	r3, [r4, #0]
 800d842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d846:	462a      	mov	r2, r5
 800d848:	f000 fad6 	bl	800ddf8 <_realloc_r>
 800d84c:	4606      	mov	r6, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	d1e0      	bne.n	800d814 <__ssputs_r+0x5c>
 800d852:	4650      	mov	r0, sl
 800d854:	6921      	ldr	r1, [r4, #16]
 800d856:	f7ff ff67 	bl	800d728 <_free_r>
 800d85a:	230c      	movs	r3, #12
 800d85c:	f8ca 3000 	str.w	r3, [sl]
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	f04f 30ff 	mov.w	r0, #4294967295
 800d866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	e7e9      	b.n	800d842 <__ssputs_r+0x8a>
	...

0800d870 <_svfiprintf_r>:
 800d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d874:	4698      	mov	r8, r3
 800d876:	898b      	ldrh	r3, [r1, #12]
 800d878:	4607      	mov	r7, r0
 800d87a:	061b      	lsls	r3, r3, #24
 800d87c:	460d      	mov	r5, r1
 800d87e:	4614      	mov	r4, r2
 800d880:	b09d      	sub	sp, #116	@ 0x74
 800d882:	d510      	bpl.n	800d8a6 <_svfiprintf_r+0x36>
 800d884:	690b      	ldr	r3, [r1, #16]
 800d886:	b973      	cbnz	r3, 800d8a6 <_svfiprintf_r+0x36>
 800d888:	2140      	movs	r1, #64	@ 0x40
 800d88a:	f7ff fdcf 	bl	800d42c <_malloc_r>
 800d88e:	6028      	str	r0, [r5, #0]
 800d890:	6128      	str	r0, [r5, #16]
 800d892:	b930      	cbnz	r0, 800d8a2 <_svfiprintf_r+0x32>
 800d894:	230c      	movs	r3, #12
 800d896:	603b      	str	r3, [r7, #0]
 800d898:	f04f 30ff 	mov.w	r0, #4294967295
 800d89c:	b01d      	add	sp, #116	@ 0x74
 800d89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a2:	2340      	movs	r3, #64	@ 0x40
 800d8a4:	616b      	str	r3, [r5, #20]
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8aa:	2320      	movs	r3, #32
 800d8ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8b0:	2330      	movs	r3, #48	@ 0x30
 800d8b2:	f04f 0901 	mov.w	r9, #1
 800d8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800da54 <_svfiprintf_r+0x1e4>
 800d8be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8c2:	4623      	mov	r3, r4
 800d8c4:	469a      	mov	sl, r3
 800d8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ca:	b10a      	cbz	r2, 800d8d0 <_svfiprintf_r+0x60>
 800d8cc:	2a25      	cmp	r2, #37	@ 0x25
 800d8ce:	d1f9      	bne.n	800d8c4 <_svfiprintf_r+0x54>
 800d8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d8d4:	d00b      	beq.n	800d8ee <_svfiprintf_r+0x7e>
 800d8d6:	465b      	mov	r3, fp
 800d8d8:	4622      	mov	r2, r4
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f7ff ff6b 	bl	800d7b8 <__ssputs_r>
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	f000 80a7 	beq.w	800da36 <_svfiprintf_r+0x1c6>
 800d8e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ea:	445a      	add	r2, fp
 800d8ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 809f 	beq.w	800da36 <_svfiprintf_r+0x1c6>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d902:	f10a 0a01 	add.w	sl, sl, #1
 800d906:	9304      	str	r3, [sp, #16]
 800d908:	9307      	str	r3, [sp, #28]
 800d90a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d90e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d910:	4654      	mov	r4, sl
 800d912:	2205      	movs	r2, #5
 800d914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d918:	484e      	ldr	r0, [pc, #312]	@ (800da54 <_svfiprintf_r+0x1e4>)
 800d91a:	f000 fa51 	bl	800ddc0 <memchr>
 800d91e:	9a04      	ldr	r2, [sp, #16]
 800d920:	b9d8      	cbnz	r0, 800d95a <_svfiprintf_r+0xea>
 800d922:	06d0      	lsls	r0, r2, #27
 800d924:	bf44      	itt	mi
 800d926:	2320      	movmi	r3, #32
 800d928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d92c:	0711      	lsls	r1, r2, #28
 800d92e:	bf44      	itt	mi
 800d930:	232b      	movmi	r3, #43	@ 0x2b
 800d932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d936:	f89a 3000 	ldrb.w	r3, [sl]
 800d93a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d93c:	d015      	beq.n	800d96a <_svfiprintf_r+0xfa>
 800d93e:	4654      	mov	r4, sl
 800d940:	2000      	movs	r0, #0
 800d942:	f04f 0c0a 	mov.w	ip, #10
 800d946:	9a07      	ldr	r2, [sp, #28]
 800d948:	4621      	mov	r1, r4
 800d94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d94e:	3b30      	subs	r3, #48	@ 0x30
 800d950:	2b09      	cmp	r3, #9
 800d952:	d94b      	bls.n	800d9ec <_svfiprintf_r+0x17c>
 800d954:	b1b0      	cbz	r0, 800d984 <_svfiprintf_r+0x114>
 800d956:	9207      	str	r2, [sp, #28]
 800d958:	e014      	b.n	800d984 <_svfiprintf_r+0x114>
 800d95a:	eba0 0308 	sub.w	r3, r0, r8
 800d95e:	fa09 f303 	lsl.w	r3, r9, r3
 800d962:	4313      	orrs	r3, r2
 800d964:	46a2      	mov	sl, r4
 800d966:	9304      	str	r3, [sp, #16]
 800d968:	e7d2      	b.n	800d910 <_svfiprintf_r+0xa0>
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	1d19      	adds	r1, r3, #4
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	9103      	str	r1, [sp, #12]
 800d972:	2b00      	cmp	r3, #0
 800d974:	bfbb      	ittet	lt
 800d976:	425b      	neglt	r3, r3
 800d978:	f042 0202 	orrlt.w	r2, r2, #2
 800d97c:	9307      	strge	r3, [sp, #28]
 800d97e:	9307      	strlt	r3, [sp, #28]
 800d980:	bfb8      	it	lt
 800d982:	9204      	strlt	r2, [sp, #16]
 800d984:	7823      	ldrb	r3, [r4, #0]
 800d986:	2b2e      	cmp	r3, #46	@ 0x2e
 800d988:	d10a      	bne.n	800d9a0 <_svfiprintf_r+0x130>
 800d98a:	7863      	ldrb	r3, [r4, #1]
 800d98c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d98e:	d132      	bne.n	800d9f6 <_svfiprintf_r+0x186>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	3402      	adds	r4, #2
 800d994:	1d1a      	adds	r2, r3, #4
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	9203      	str	r2, [sp, #12]
 800d99a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d99e:	9305      	str	r3, [sp, #20]
 800d9a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800da58 <_svfiprintf_r+0x1e8>
 800d9a4:	2203      	movs	r2, #3
 800d9a6:	4650      	mov	r0, sl
 800d9a8:	7821      	ldrb	r1, [r4, #0]
 800d9aa:	f000 fa09 	bl	800ddc0 <memchr>
 800d9ae:	b138      	cbz	r0, 800d9c0 <_svfiprintf_r+0x150>
 800d9b0:	2240      	movs	r2, #64	@ 0x40
 800d9b2:	9b04      	ldr	r3, [sp, #16]
 800d9b4:	eba0 000a 	sub.w	r0, r0, sl
 800d9b8:	4082      	lsls	r2, r0
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	3401      	adds	r4, #1
 800d9be:	9304      	str	r3, [sp, #16]
 800d9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c4:	2206      	movs	r2, #6
 800d9c6:	4825      	ldr	r0, [pc, #148]	@ (800da5c <_svfiprintf_r+0x1ec>)
 800d9c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9cc:	f000 f9f8 	bl	800ddc0 <memchr>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d036      	beq.n	800da42 <_svfiprintf_r+0x1d2>
 800d9d4:	4b22      	ldr	r3, [pc, #136]	@ (800da60 <_svfiprintf_r+0x1f0>)
 800d9d6:	bb1b      	cbnz	r3, 800da20 <_svfiprintf_r+0x1b0>
 800d9d8:	9b03      	ldr	r3, [sp, #12]
 800d9da:	3307      	adds	r3, #7
 800d9dc:	f023 0307 	bic.w	r3, r3, #7
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	9303      	str	r3, [sp, #12]
 800d9e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9e6:	4433      	add	r3, r6
 800d9e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ea:	e76a      	b.n	800d8c2 <_svfiprintf_r+0x52>
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9f4:	e7a8      	b.n	800d948 <_svfiprintf_r+0xd8>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f04f 0c0a 	mov.w	ip, #10
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	3401      	adds	r4, #1
 800da00:	9305      	str	r3, [sp, #20]
 800da02:	4620      	mov	r0, r4
 800da04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da08:	3a30      	subs	r2, #48	@ 0x30
 800da0a:	2a09      	cmp	r2, #9
 800da0c:	d903      	bls.n	800da16 <_svfiprintf_r+0x1a6>
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d0c6      	beq.n	800d9a0 <_svfiprintf_r+0x130>
 800da12:	9105      	str	r1, [sp, #20]
 800da14:	e7c4      	b.n	800d9a0 <_svfiprintf_r+0x130>
 800da16:	4604      	mov	r4, r0
 800da18:	2301      	movs	r3, #1
 800da1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da1e:	e7f0      	b.n	800da02 <_svfiprintf_r+0x192>
 800da20:	ab03      	add	r3, sp, #12
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	462a      	mov	r2, r5
 800da26:	4638      	mov	r0, r7
 800da28:	4b0e      	ldr	r3, [pc, #56]	@ (800da64 <_svfiprintf_r+0x1f4>)
 800da2a:	a904      	add	r1, sp, #16
 800da2c:	f3af 8000 	nop.w
 800da30:	1c42      	adds	r2, r0, #1
 800da32:	4606      	mov	r6, r0
 800da34:	d1d6      	bne.n	800d9e4 <_svfiprintf_r+0x174>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	065b      	lsls	r3, r3, #25
 800da3a:	f53f af2d 	bmi.w	800d898 <_svfiprintf_r+0x28>
 800da3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da40:	e72c      	b.n	800d89c <_svfiprintf_r+0x2c>
 800da42:	ab03      	add	r3, sp, #12
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	462a      	mov	r2, r5
 800da48:	4638      	mov	r0, r7
 800da4a:	4b06      	ldr	r3, [pc, #24]	@ (800da64 <_svfiprintf_r+0x1f4>)
 800da4c:	a904      	add	r1, sp, #16
 800da4e:	f000 f87d 	bl	800db4c <_printf_i>
 800da52:	e7ed      	b.n	800da30 <_svfiprintf_r+0x1c0>
 800da54:	0800e387 	.word	0x0800e387
 800da58:	0800e38d 	.word	0x0800e38d
 800da5c:	0800e391 	.word	0x0800e391
 800da60:	00000000 	.word	0x00000000
 800da64:	0800d7b9 	.word	0x0800d7b9

0800da68 <_printf_common>:
 800da68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da6c:	4616      	mov	r6, r2
 800da6e:	4698      	mov	r8, r3
 800da70:	688a      	ldr	r2, [r1, #8]
 800da72:	690b      	ldr	r3, [r1, #16]
 800da74:	4607      	mov	r7, r0
 800da76:	4293      	cmp	r3, r2
 800da78:	bfb8      	it	lt
 800da7a:	4613      	movlt	r3, r2
 800da7c:	6033      	str	r3, [r6, #0]
 800da7e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da82:	460c      	mov	r4, r1
 800da84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da88:	b10a      	cbz	r2, 800da8e <_printf_common+0x26>
 800da8a:	3301      	adds	r3, #1
 800da8c:	6033      	str	r3, [r6, #0]
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	0699      	lsls	r1, r3, #26
 800da92:	bf42      	ittt	mi
 800da94:	6833      	ldrmi	r3, [r6, #0]
 800da96:	3302      	addmi	r3, #2
 800da98:	6033      	strmi	r3, [r6, #0]
 800da9a:	6825      	ldr	r5, [r4, #0]
 800da9c:	f015 0506 	ands.w	r5, r5, #6
 800daa0:	d106      	bne.n	800dab0 <_printf_common+0x48>
 800daa2:	f104 0a19 	add.w	sl, r4, #25
 800daa6:	68e3      	ldr	r3, [r4, #12]
 800daa8:	6832      	ldr	r2, [r6, #0]
 800daaa:	1a9b      	subs	r3, r3, r2
 800daac:	42ab      	cmp	r3, r5
 800daae:	dc2b      	bgt.n	800db08 <_printf_common+0xa0>
 800dab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dab4:	6822      	ldr	r2, [r4, #0]
 800dab6:	3b00      	subs	r3, #0
 800dab8:	bf18      	it	ne
 800daba:	2301      	movne	r3, #1
 800dabc:	0692      	lsls	r2, r2, #26
 800dabe:	d430      	bmi.n	800db22 <_printf_common+0xba>
 800dac0:	4641      	mov	r1, r8
 800dac2:	4638      	mov	r0, r7
 800dac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dac8:	47c8      	blx	r9
 800daca:	3001      	adds	r0, #1
 800dacc:	d023      	beq.n	800db16 <_printf_common+0xae>
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	6922      	ldr	r2, [r4, #16]
 800dad2:	f003 0306 	and.w	r3, r3, #6
 800dad6:	2b04      	cmp	r3, #4
 800dad8:	bf14      	ite	ne
 800dada:	2500      	movne	r5, #0
 800dadc:	6833      	ldreq	r3, [r6, #0]
 800dade:	f04f 0600 	mov.w	r6, #0
 800dae2:	bf08      	it	eq
 800dae4:	68e5      	ldreq	r5, [r4, #12]
 800dae6:	f104 041a 	add.w	r4, r4, #26
 800daea:	bf08      	it	eq
 800daec:	1aed      	subeq	r5, r5, r3
 800daee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800daf2:	bf08      	it	eq
 800daf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daf8:	4293      	cmp	r3, r2
 800dafa:	bfc4      	itt	gt
 800dafc:	1a9b      	subgt	r3, r3, r2
 800dafe:	18ed      	addgt	r5, r5, r3
 800db00:	42b5      	cmp	r5, r6
 800db02:	d11a      	bne.n	800db3a <_printf_common+0xd2>
 800db04:	2000      	movs	r0, #0
 800db06:	e008      	b.n	800db1a <_printf_common+0xb2>
 800db08:	2301      	movs	r3, #1
 800db0a:	4652      	mov	r2, sl
 800db0c:	4641      	mov	r1, r8
 800db0e:	4638      	mov	r0, r7
 800db10:	47c8      	blx	r9
 800db12:	3001      	adds	r0, #1
 800db14:	d103      	bne.n	800db1e <_printf_common+0xb6>
 800db16:	f04f 30ff 	mov.w	r0, #4294967295
 800db1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1e:	3501      	adds	r5, #1
 800db20:	e7c1      	b.n	800daa6 <_printf_common+0x3e>
 800db22:	2030      	movs	r0, #48	@ 0x30
 800db24:	18e1      	adds	r1, r4, r3
 800db26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db2a:	1c5a      	adds	r2, r3, #1
 800db2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db30:	4422      	add	r2, r4
 800db32:	3302      	adds	r3, #2
 800db34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db38:	e7c2      	b.n	800dac0 <_printf_common+0x58>
 800db3a:	2301      	movs	r3, #1
 800db3c:	4622      	mov	r2, r4
 800db3e:	4641      	mov	r1, r8
 800db40:	4638      	mov	r0, r7
 800db42:	47c8      	blx	r9
 800db44:	3001      	adds	r0, #1
 800db46:	d0e6      	beq.n	800db16 <_printf_common+0xae>
 800db48:	3601      	adds	r6, #1
 800db4a:	e7d9      	b.n	800db00 <_printf_common+0x98>

0800db4c <_printf_i>:
 800db4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db50:	7e0f      	ldrb	r7, [r1, #24]
 800db52:	4691      	mov	r9, r2
 800db54:	2f78      	cmp	r7, #120	@ 0x78
 800db56:	4680      	mov	r8, r0
 800db58:	460c      	mov	r4, r1
 800db5a:	469a      	mov	sl, r3
 800db5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db62:	d807      	bhi.n	800db74 <_printf_i+0x28>
 800db64:	2f62      	cmp	r7, #98	@ 0x62
 800db66:	d80a      	bhi.n	800db7e <_printf_i+0x32>
 800db68:	2f00      	cmp	r7, #0
 800db6a:	f000 80d3 	beq.w	800dd14 <_printf_i+0x1c8>
 800db6e:	2f58      	cmp	r7, #88	@ 0x58
 800db70:	f000 80ba 	beq.w	800dce8 <_printf_i+0x19c>
 800db74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db7c:	e03a      	b.n	800dbf4 <_printf_i+0xa8>
 800db7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db82:	2b15      	cmp	r3, #21
 800db84:	d8f6      	bhi.n	800db74 <_printf_i+0x28>
 800db86:	a101      	add	r1, pc, #4	@ (adr r1, 800db8c <_printf_i+0x40>)
 800db88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db8c:	0800dbe5 	.word	0x0800dbe5
 800db90:	0800dbf9 	.word	0x0800dbf9
 800db94:	0800db75 	.word	0x0800db75
 800db98:	0800db75 	.word	0x0800db75
 800db9c:	0800db75 	.word	0x0800db75
 800dba0:	0800db75 	.word	0x0800db75
 800dba4:	0800dbf9 	.word	0x0800dbf9
 800dba8:	0800db75 	.word	0x0800db75
 800dbac:	0800db75 	.word	0x0800db75
 800dbb0:	0800db75 	.word	0x0800db75
 800dbb4:	0800db75 	.word	0x0800db75
 800dbb8:	0800dcfb 	.word	0x0800dcfb
 800dbbc:	0800dc23 	.word	0x0800dc23
 800dbc0:	0800dcb5 	.word	0x0800dcb5
 800dbc4:	0800db75 	.word	0x0800db75
 800dbc8:	0800db75 	.word	0x0800db75
 800dbcc:	0800dd1d 	.word	0x0800dd1d
 800dbd0:	0800db75 	.word	0x0800db75
 800dbd4:	0800dc23 	.word	0x0800dc23
 800dbd8:	0800db75 	.word	0x0800db75
 800dbdc:	0800db75 	.word	0x0800db75
 800dbe0:	0800dcbd 	.word	0x0800dcbd
 800dbe4:	6833      	ldr	r3, [r6, #0]
 800dbe6:	1d1a      	adds	r2, r3, #4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6032      	str	r2, [r6, #0]
 800dbec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e09e      	b.n	800dd36 <_printf_i+0x1ea>
 800dbf8:	6833      	ldr	r3, [r6, #0]
 800dbfa:	6820      	ldr	r0, [r4, #0]
 800dbfc:	1d19      	adds	r1, r3, #4
 800dbfe:	6031      	str	r1, [r6, #0]
 800dc00:	0606      	lsls	r6, r0, #24
 800dc02:	d501      	bpl.n	800dc08 <_printf_i+0xbc>
 800dc04:	681d      	ldr	r5, [r3, #0]
 800dc06:	e003      	b.n	800dc10 <_printf_i+0xc4>
 800dc08:	0645      	lsls	r5, r0, #25
 800dc0a:	d5fb      	bpl.n	800dc04 <_printf_i+0xb8>
 800dc0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc10:	2d00      	cmp	r5, #0
 800dc12:	da03      	bge.n	800dc1c <_printf_i+0xd0>
 800dc14:	232d      	movs	r3, #45	@ 0x2d
 800dc16:	426d      	negs	r5, r5
 800dc18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc1c:	230a      	movs	r3, #10
 800dc1e:	4859      	ldr	r0, [pc, #356]	@ (800dd84 <_printf_i+0x238>)
 800dc20:	e011      	b.n	800dc46 <_printf_i+0xfa>
 800dc22:	6821      	ldr	r1, [r4, #0]
 800dc24:	6833      	ldr	r3, [r6, #0]
 800dc26:	0608      	lsls	r0, r1, #24
 800dc28:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc2c:	d402      	bmi.n	800dc34 <_printf_i+0xe8>
 800dc2e:	0649      	lsls	r1, r1, #25
 800dc30:	bf48      	it	mi
 800dc32:	b2ad      	uxthmi	r5, r5
 800dc34:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc36:	6033      	str	r3, [r6, #0]
 800dc38:	bf14      	ite	ne
 800dc3a:	230a      	movne	r3, #10
 800dc3c:	2308      	moveq	r3, #8
 800dc3e:	4851      	ldr	r0, [pc, #324]	@ (800dd84 <_printf_i+0x238>)
 800dc40:	2100      	movs	r1, #0
 800dc42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc46:	6866      	ldr	r6, [r4, #4]
 800dc48:	2e00      	cmp	r6, #0
 800dc4a:	bfa8      	it	ge
 800dc4c:	6821      	ldrge	r1, [r4, #0]
 800dc4e:	60a6      	str	r6, [r4, #8]
 800dc50:	bfa4      	itt	ge
 800dc52:	f021 0104 	bicge.w	r1, r1, #4
 800dc56:	6021      	strge	r1, [r4, #0]
 800dc58:	b90d      	cbnz	r5, 800dc5e <_printf_i+0x112>
 800dc5a:	2e00      	cmp	r6, #0
 800dc5c:	d04b      	beq.n	800dcf6 <_printf_i+0x1aa>
 800dc5e:	4616      	mov	r6, r2
 800dc60:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc64:	fb03 5711 	mls	r7, r3, r1, r5
 800dc68:	5dc7      	ldrb	r7, [r0, r7]
 800dc6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc6e:	462f      	mov	r7, r5
 800dc70:	42bb      	cmp	r3, r7
 800dc72:	460d      	mov	r5, r1
 800dc74:	d9f4      	bls.n	800dc60 <_printf_i+0x114>
 800dc76:	2b08      	cmp	r3, #8
 800dc78:	d10b      	bne.n	800dc92 <_printf_i+0x146>
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	07df      	lsls	r7, r3, #31
 800dc7e:	d508      	bpl.n	800dc92 <_printf_i+0x146>
 800dc80:	6923      	ldr	r3, [r4, #16]
 800dc82:	6861      	ldr	r1, [r4, #4]
 800dc84:	4299      	cmp	r1, r3
 800dc86:	bfde      	ittt	le
 800dc88:	2330      	movle	r3, #48	@ 0x30
 800dc8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc92:	1b92      	subs	r2, r2, r6
 800dc94:	6122      	str	r2, [r4, #16]
 800dc96:	464b      	mov	r3, r9
 800dc98:	4621      	mov	r1, r4
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	f8cd a000 	str.w	sl, [sp]
 800dca0:	aa03      	add	r2, sp, #12
 800dca2:	f7ff fee1 	bl	800da68 <_printf_common>
 800dca6:	3001      	adds	r0, #1
 800dca8:	d14a      	bne.n	800dd40 <_printf_i+0x1f4>
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	b004      	add	sp, #16
 800dcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb4:	6823      	ldr	r3, [r4, #0]
 800dcb6:	f043 0320 	orr.w	r3, r3, #32
 800dcba:	6023      	str	r3, [r4, #0]
 800dcbc:	2778      	movs	r7, #120	@ 0x78
 800dcbe:	4832      	ldr	r0, [pc, #200]	@ (800dd88 <_printf_i+0x23c>)
 800dcc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	6831      	ldr	r1, [r6, #0]
 800dcc8:	061f      	lsls	r7, r3, #24
 800dcca:	f851 5b04 	ldr.w	r5, [r1], #4
 800dcce:	d402      	bmi.n	800dcd6 <_printf_i+0x18a>
 800dcd0:	065f      	lsls	r7, r3, #25
 800dcd2:	bf48      	it	mi
 800dcd4:	b2ad      	uxthmi	r5, r5
 800dcd6:	6031      	str	r1, [r6, #0]
 800dcd8:	07d9      	lsls	r1, r3, #31
 800dcda:	bf44      	itt	mi
 800dcdc:	f043 0320 	orrmi.w	r3, r3, #32
 800dce0:	6023      	strmi	r3, [r4, #0]
 800dce2:	b11d      	cbz	r5, 800dcec <_printf_i+0x1a0>
 800dce4:	2310      	movs	r3, #16
 800dce6:	e7ab      	b.n	800dc40 <_printf_i+0xf4>
 800dce8:	4826      	ldr	r0, [pc, #152]	@ (800dd84 <_printf_i+0x238>)
 800dcea:	e7e9      	b.n	800dcc0 <_printf_i+0x174>
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	f023 0320 	bic.w	r3, r3, #32
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	e7f6      	b.n	800dce4 <_printf_i+0x198>
 800dcf6:	4616      	mov	r6, r2
 800dcf8:	e7bd      	b.n	800dc76 <_printf_i+0x12a>
 800dcfa:	6833      	ldr	r3, [r6, #0]
 800dcfc:	6825      	ldr	r5, [r4, #0]
 800dcfe:	1d18      	adds	r0, r3, #4
 800dd00:	6961      	ldr	r1, [r4, #20]
 800dd02:	6030      	str	r0, [r6, #0]
 800dd04:	062e      	lsls	r6, r5, #24
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	d501      	bpl.n	800dd0e <_printf_i+0x1c2>
 800dd0a:	6019      	str	r1, [r3, #0]
 800dd0c:	e002      	b.n	800dd14 <_printf_i+0x1c8>
 800dd0e:	0668      	lsls	r0, r5, #25
 800dd10:	d5fb      	bpl.n	800dd0a <_printf_i+0x1be>
 800dd12:	8019      	strh	r1, [r3, #0]
 800dd14:	2300      	movs	r3, #0
 800dd16:	4616      	mov	r6, r2
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	e7bc      	b.n	800dc96 <_printf_i+0x14a>
 800dd1c:	6833      	ldr	r3, [r6, #0]
 800dd1e:	2100      	movs	r1, #0
 800dd20:	1d1a      	adds	r2, r3, #4
 800dd22:	6032      	str	r2, [r6, #0]
 800dd24:	681e      	ldr	r6, [r3, #0]
 800dd26:	6862      	ldr	r2, [r4, #4]
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f000 f849 	bl	800ddc0 <memchr>
 800dd2e:	b108      	cbz	r0, 800dd34 <_printf_i+0x1e8>
 800dd30:	1b80      	subs	r0, r0, r6
 800dd32:	6060      	str	r0, [r4, #4]
 800dd34:	6863      	ldr	r3, [r4, #4]
 800dd36:	6123      	str	r3, [r4, #16]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd3e:	e7aa      	b.n	800dc96 <_printf_i+0x14a>
 800dd40:	4632      	mov	r2, r6
 800dd42:	4649      	mov	r1, r9
 800dd44:	4640      	mov	r0, r8
 800dd46:	6923      	ldr	r3, [r4, #16]
 800dd48:	47d0      	blx	sl
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	d0ad      	beq.n	800dcaa <_printf_i+0x15e>
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	079b      	lsls	r3, r3, #30
 800dd52:	d413      	bmi.n	800dd7c <_printf_i+0x230>
 800dd54:	68e0      	ldr	r0, [r4, #12]
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	4298      	cmp	r0, r3
 800dd5a:	bfb8      	it	lt
 800dd5c:	4618      	movlt	r0, r3
 800dd5e:	e7a6      	b.n	800dcae <_printf_i+0x162>
 800dd60:	2301      	movs	r3, #1
 800dd62:	4632      	mov	r2, r6
 800dd64:	4649      	mov	r1, r9
 800dd66:	4640      	mov	r0, r8
 800dd68:	47d0      	blx	sl
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	d09d      	beq.n	800dcaa <_printf_i+0x15e>
 800dd6e:	3501      	adds	r5, #1
 800dd70:	68e3      	ldr	r3, [r4, #12]
 800dd72:	9903      	ldr	r1, [sp, #12]
 800dd74:	1a5b      	subs	r3, r3, r1
 800dd76:	42ab      	cmp	r3, r5
 800dd78:	dcf2      	bgt.n	800dd60 <_printf_i+0x214>
 800dd7a:	e7eb      	b.n	800dd54 <_printf_i+0x208>
 800dd7c:	2500      	movs	r5, #0
 800dd7e:	f104 0619 	add.w	r6, r4, #25
 800dd82:	e7f5      	b.n	800dd70 <_printf_i+0x224>
 800dd84:	0800e398 	.word	0x0800e398
 800dd88:	0800e3a9 	.word	0x0800e3a9

0800dd8c <memmove>:
 800dd8c:	4288      	cmp	r0, r1
 800dd8e:	b510      	push	{r4, lr}
 800dd90:	eb01 0402 	add.w	r4, r1, r2
 800dd94:	d902      	bls.n	800dd9c <memmove+0x10>
 800dd96:	4284      	cmp	r4, r0
 800dd98:	4623      	mov	r3, r4
 800dd9a:	d807      	bhi.n	800ddac <memmove+0x20>
 800dd9c:	1e43      	subs	r3, r0, #1
 800dd9e:	42a1      	cmp	r1, r4
 800dda0:	d008      	beq.n	800ddb4 <memmove+0x28>
 800dda2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dda6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddaa:	e7f8      	b.n	800dd9e <memmove+0x12>
 800ddac:	4601      	mov	r1, r0
 800ddae:	4402      	add	r2, r0
 800ddb0:	428a      	cmp	r2, r1
 800ddb2:	d100      	bne.n	800ddb6 <memmove+0x2a>
 800ddb4:	bd10      	pop	{r4, pc}
 800ddb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddbe:	e7f7      	b.n	800ddb0 <memmove+0x24>

0800ddc0 <memchr>:
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	b2c9      	uxtb	r1, r1
 800ddc6:	4402      	add	r2, r0
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	d101      	bne.n	800ddd2 <memchr+0x12>
 800ddce:	2000      	movs	r0, #0
 800ddd0:	e003      	b.n	800ddda <memchr+0x1a>
 800ddd2:	7804      	ldrb	r4, [r0, #0]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	428c      	cmp	r4, r1
 800ddd8:	d1f6      	bne.n	800ddc8 <memchr+0x8>
 800ddda:	bd10      	pop	{r4, pc}

0800dddc <memcpy>:
 800dddc:	440a      	add	r2, r1
 800ddde:	4291      	cmp	r1, r2
 800dde0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dde4:	d100      	bne.n	800dde8 <memcpy+0xc>
 800dde6:	4770      	bx	lr
 800dde8:	b510      	push	{r4, lr}
 800ddea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddee:	4291      	cmp	r1, r2
 800ddf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddf4:	d1f9      	bne.n	800ddea <memcpy+0xe>
 800ddf6:	bd10      	pop	{r4, pc}

0800ddf8 <_realloc_r>:
 800ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4615      	mov	r5, r2
 800de00:	460c      	mov	r4, r1
 800de02:	b921      	cbnz	r1, 800de0e <_realloc_r+0x16>
 800de04:	4611      	mov	r1, r2
 800de06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de0a:	f7ff bb0f 	b.w	800d42c <_malloc_r>
 800de0e:	b92a      	cbnz	r2, 800de1c <_realloc_r+0x24>
 800de10:	f7ff fc8a 	bl	800d728 <_free_r>
 800de14:	2400      	movs	r4, #0
 800de16:	4620      	mov	r0, r4
 800de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de1c:	f000 f81a 	bl	800de54 <_malloc_usable_size_r>
 800de20:	4285      	cmp	r5, r0
 800de22:	4606      	mov	r6, r0
 800de24:	d802      	bhi.n	800de2c <_realloc_r+0x34>
 800de26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de2a:	d8f4      	bhi.n	800de16 <_realloc_r+0x1e>
 800de2c:	4629      	mov	r1, r5
 800de2e:	4640      	mov	r0, r8
 800de30:	f7ff fafc 	bl	800d42c <_malloc_r>
 800de34:	4607      	mov	r7, r0
 800de36:	2800      	cmp	r0, #0
 800de38:	d0ec      	beq.n	800de14 <_realloc_r+0x1c>
 800de3a:	42b5      	cmp	r5, r6
 800de3c:	462a      	mov	r2, r5
 800de3e:	4621      	mov	r1, r4
 800de40:	bf28      	it	cs
 800de42:	4632      	movcs	r2, r6
 800de44:	f7ff ffca 	bl	800dddc <memcpy>
 800de48:	4621      	mov	r1, r4
 800de4a:	4640      	mov	r0, r8
 800de4c:	f7ff fc6c 	bl	800d728 <_free_r>
 800de50:	463c      	mov	r4, r7
 800de52:	e7e0      	b.n	800de16 <_realloc_r+0x1e>

0800de54 <_malloc_usable_size_r>:
 800de54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de58:	1f18      	subs	r0, r3, #4
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	bfbc      	itt	lt
 800de5e:	580b      	ldrlt	r3, [r1, r0]
 800de60:	18c0      	addlt	r0, r0, r3
 800de62:	4770      	bx	lr

0800de64 <_init>:
 800de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de66:	bf00      	nop
 800de68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6a:	bc08      	pop	{r3}
 800de6c:	469e      	mov	lr, r3
 800de6e:	4770      	bx	lr

0800de70 <_fini>:
 800de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de72:	bf00      	nop
 800de74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de76:	bc08      	pop	{r3}
 800de78:	469e      	mov	lr, r3
 800de7a:	4770      	bx	lr
