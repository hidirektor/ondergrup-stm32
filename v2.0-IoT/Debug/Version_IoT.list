
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e54c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  0800e730  0800e730  0000f730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f510  0800f510  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f510  0800f510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f518  0800f518  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f518  0800f518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f51c  0800f51c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f520  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  20000fd0  080104f0  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002174  080104f0  00012174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a837  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b54  00000000  00000000  0002c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00030388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdc  00000000  00000000  00031820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbf0  00000000  00000000  000327fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da0b  00000000  00000000  0004f3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d88  00000000  00000000  0006cdf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010db7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab8  00000000  00000000  0010dbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e718 	.word	0x0800e718

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e718 	.word	0x0800e718

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	200011f0 	.word	0x200011f0
 80004ac:	20001294 	.word	0x20001294
 80004b0:	200016eb 	.word	0x200016eb
 80004b4:	20001295 	.word	0x20001295
 80004b8:	200016c1 	.word	0x200016c1
 80004bc:	200016c4 	.word	0x200016c4
 80004c0:	200016c5 	.word	0x200016c5
 80004c4:	200016c6 	.word	0x200016c6
 80004c8:	200016c7 	.word	0x200016c7
 80004cc:	200016c8 	.word	0x200016c8
 80004d0:	200016c9 	.word	0x200016c9
 80004d4:	200016d9 	.word	0x200016d9
 80004d8:	200016ca 	.word	0x200016ca
 80004dc:	200016da 	.word	0x200016da
 80004e0:	200016cb 	.word	0x200016cb
 80004e4:	200016db 	.word	0x200016db
 80004e8:	200016ce 	.word	0x200016ce
 80004ec:	200016cf 	.word	0x200016cf
 80004f0:	200016d0 	.word	0x200016d0
 80004f4:	200016d1 	.word	0x200016d1
 80004f8:	200016d2 	.word	0x200016d2
 80004fc:	200016d3 	.word	0x200016d3
 8000500:	200016d4 	.word	0x200016d4
 8000504:	200016d5 	.word	0x200016d5
 8000508:	200016d6 	.word	0x200016d6
 800050c:	200016d7 	.word	0x200016d7
 8000510:	200016d8 	.word	0x200016d8
 8000514:	200016dc 	.word	0x200016dc
 8000518:	200016de 	.word	0x200016de
 800051c:	200016b8 	.word	0x200016b8
 8000520:	200016b9 	.word	0x200016b9
 8000524:	200016ba 	.word	0x200016ba
 8000528:	200016bb 	.word	0x200016bb
 800052c:	200016e0 	.word	0x200016e0
 8000530:	200016cd 	.word	0x200016cd
 8000534:	200016df 	.word	0x200016df
 8000538:	200016cc 	.word	0x200016cc
 800053c:	200016e1 	.word	0x200016e1
 8000540:	200016e2 	.word	0x200016e2
 8000544:	200016e3 	.word	0x200016e3
 8000548:	200016e4 	.word	0x200016e4
 800054c:	200016e5 	.word	0x200016e5
 8000550:	200016e6 	.word	0x200016e6
 8000554:	200016e7 	.word	0x200016e7
 8000558:	200016e8 	.word	0x200016e8
 800055c:	200016e9 	.word	0x200016e9
 8000560:	200016ea 	.word	0x200016ea
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fb5b 	bl	8009cf8 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fb55 	bl	8009cf8 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 fb4f 	bl	8009cf8 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fe86 	bl	8006370 <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200016cf 	.word	0x200016cf
 800066c:	200016d0 	.word	0x200016d0
 8000670:	200016d1 	.word	0x200016d1
 8000674:	200016d2 	.word	0x200016d2
 8000678:	200016d3 	.word	0x200016d3
 800067c:	200016d4 	.word	0x200016d4
 8000680:	200016d5 	.word	0x200016d5
 8000684:	200016d6 	.word	0x200016d6
 8000688:	200016d7 	.word	0x200016d7
 800068c:	200016d8 	.word	0x200016d8
 8000690:	200016dc 	.word	0x200016dc
 8000694:	200016de 	.word	0x200016de
 8000698:	200016df 	.word	0x200016df
 800069c:	200016e0 	.word	0x200016e0
 80006a0:	200016eb 	.word	0x200016eb

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fda2 	bl	800920c <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 fb14 	bl	8009cf8 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fdc8 	bl	8009264 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200011f0 	.word	0x200011f0
 80006e0:	20001e64 	.word	0x20001e64

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a fb4b 	bl	800ae0c <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fd41 	bl	800920c <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 faa6 	bl	8009cf8 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001f40 	.word	0x20001f40
 80007c4:	0800e730 	.word	0x0800e730

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fbd3 	bl	800b000 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fccf 	bl	800920c <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001f40 	.word	0x20001f40
 80008a4:	0800e744 	.word	0x0800e744

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	200011f0 	.word	0x200011f0
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001268 	.word	0x20001268
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001274 	.word	0x20001274
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001284 	.word	0x20001284

080009ac <ESP8266_Init>:
#include "SystemDefaults.h"
#include "GlobalVariables.h"
#include "Flash.h"

// ESP8266'yı WiFi ağına bağlamak için kullanılan fonksiyon
void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
    Wifi_FactoryReset(huart);
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 faf3 	bl	8000fa4 <Wifi_FactoryReset>
    HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c2:	f009 f999 	bl	8009cf8 <HAL_Delay>

    Wifi_Restart(huart);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 fac6 	bl	8000f58 <Wifi_Restart>
    HAL_Delay(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d0:	f009 f992 	bl	8009cf8 <HAL_Delay>

    Wifi_Init(huart);
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 fa99 	bl	8000f0c <Wifi_Init>
    HAL_Delay(2000);
 80009da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009de:	f009 f98b 	bl	8009cf8 <HAL_Delay>

    Wifi_SetMode(huart, WifiMode_Station);
 80009e2:	2101      	movs	r1, #1
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 fb03 	bl	8000ff0 <Wifi_SetMode>
    HAL_Delay(2000);
 80009ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ee:	f009 f983 	bl	8009cf8 <HAL_Delay>

    Wifi_Station_ConnectToAp(huart, (char *)wifiSS, (char *)wifiPA, NULL);
 80009f2:	2300      	movs	r3, #0
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f000 fb29 	bl	8001050 <Wifi_Station_ConnectToAp>
    HAL_Delay(2000);
 80009fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a02:	f009 f979 	bl	8009cf8 <HAL_Delay>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <sendMachineData>:
    Wifi_TcpIp_Close(huart, 0);
    HAL_Delay(2000);
}

// Makine verilerini sunucuya göndermek için kullanılan fonksiyon
void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000a16:	af2c      	add	r7, sp, #176	@ 0xb0
 8000a18:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000a1c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000a20:	6020      	str	r0, [r4, #0]
 8000a22:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000a26:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000a2a:	6001      	str	r1, [r0, #0]
 8000a2c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000a30:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000a34:	600a      	str	r2, [r1, #0]
 8000a36:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000a3a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000a3e:	6013      	str	r3, [r2, #0]
    char local_txA[1500];
    char local_txB[50];
    int len;

    char subMachineID[13];
    strncpy(subMachineID, machineID, 12);
 8000a40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a44:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000a48:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	f00d fa4f 	bl	800def2 <strncpy>
    subMachineID[12] = '\0';
 8000a54:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a58:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	731a      	strb	r2, [r3, #12]

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000a60:	4a9d      	ldr	r2, [pc, #628]	@ (8000cd8 <sendMachineData+0x2c8>)
 8000a62:	499e      	ldr	r1, [pc, #632]	@ (8000cdc <sendMachineData+0x2cc>)
 8000a64:	489e      	ldr	r0, [pc, #632]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a66:	f00d f9d3 	bl	800de10 <siprintf>
    HAL_UART_Transmit_IT(huart, (uint8_t *)bufferTX, strlen(bufferTX));
 8000a6a:	489d      	ldr	r0, [pc, #628]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a6c:	f7ff fbda 	bl	8000224 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a78:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000a7c:	4998      	ldr	r1, [pc, #608]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00c fb1b 	bl	800d0ba <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a88:	f009 f936 	bl	8009cf8 <HAL_Delay>

    sprintf(local_txA,
 8000a8c:	4b95      	ldr	r3, [pc, #596]	@ (8000ce4 <sendMachineData+0x2d4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a94:	4b94      	ldr	r3, [pc, #592]	@ (8000ce8 <sendMachineData+0x2d8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a9c:	4b93      	ldr	r3, [pc, #588]	@ (8000cec <sendMachineData+0x2dc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000aa4:	4b92      	ldr	r3, [pc, #584]	@ (8000cf0 <sendMachineData+0x2e0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000aac:	4b91      	ldr	r3, [pc, #580]	@ (8000cf4 <sendMachineData+0x2e4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ab2:	4b91      	ldr	r3, [pc, #580]	@ (8000cf8 <sendMachineData+0x2e8>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ab8:	4b90      	ldr	r3, [pc, #576]	@ (8000cfc <sendMachineData+0x2ec>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	677b      	str	r3, [r7, #116]	@ 0x74
 8000abe:	4b90      	ldr	r3, [pc, #576]	@ (8000d00 <sendMachineData+0x2f0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8000d04 <sendMachineData+0x2f4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000aca:	4b8f      	ldr	r3, [pc, #572]	@ (8000d08 <sendMachineData+0x2f8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8000d0c <sendMachineData+0x2fc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8000d10 <sendMachineData+0x300>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8000adc:	4b8d      	ldr	r3, [pc, #564]	@ (8000d14 <sendMachineData+0x304>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8000d18 <sendMachineData+0x308>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8000d1c <sendMachineData+0x30c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8000aee:	4b8c      	ldr	r3, [pc, #560]	@ (8000d20 <sendMachineData+0x310>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000af4:	4b8b      	ldr	r3, [pc, #556]	@ (8000d24 <sendMachineData+0x314>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000afa:	4b8b      	ldr	r3, [pc, #556]	@ (8000d28 <sendMachineData+0x318>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b00:	4b8a      	ldr	r3, [pc, #552]	@ (8000d2c <sendMachineData+0x31c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	4b8a      	ldr	r3, [pc, #552]	@ (8000d30 <sendMachineData+0x320>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b0c:	4b89      	ldr	r3, [pc, #548]	@ (8000d34 <sendMachineData+0x324>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b12:	4b89      	ldr	r3, [pc, #548]	@ (8000d38 <sendMachineData+0x328>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b18:	4b88      	ldr	r3, [pc, #544]	@ (8000d3c <sendMachineData+0x32c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b1e:	4b88      	ldr	r3, [pc, #544]	@ (8000d40 <sendMachineData+0x330>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b24:	4b87      	ldr	r3, [pc, #540]	@ (8000d44 <sendMachineData+0x334>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b2a:	4b87      	ldr	r3, [pc, #540]	@ (8000d48 <sendMachineData+0x338>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b30:	4b86      	ldr	r3, [pc, #536]	@ (8000d4c <sendMachineData+0x33c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b36:	4b86      	ldr	r3, [pc, #536]	@ (8000d50 <sendMachineData+0x340>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	4b85      	ldr	r3, [pc, #532]	@ (8000d54 <sendMachineData+0x344>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <sendMachineData+0x348>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	61bb      	str	r3, [r7, #24]
        "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b48:	4b84      	ldr	r3, [pc, #528]	@ (8000d5c <sendMachineData+0x34c>)
 8000b4a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    sprintf(local_txA,
 8000b4e:	617b      	str	r3, [r7, #20]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b50:	4b82      	ldr	r3, [pc, #520]	@ (8000d5c <sendMachineData+0x34c>)
 8000b52:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
    sprintf(local_txA,
 8000b56:	613b      	str	r3, [r7, #16]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b58:	4b80      	ldr	r3, [pc, #512]	@ (8000d5c <sendMachineData+0x34c>)
 8000b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    sprintf(local_txA,
 8000b5e:	60fb      	str	r3, [r7, #12]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	@ (8000d5c <sendMachineData+0x34c>)
 8000b62:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    sprintf(local_txA,
 8000b66:	60bb      	str	r3, [r7, #8]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b68:	4b7c      	ldr	r3, [pc, #496]	@ (8000d5c <sendMachineData+0x34c>)
 8000b6a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    sprintf(local_txA,
 8000b6e:	607b      	str	r3, [r7, #4]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b70:	4b7a      	ldr	r3, [pc, #488]	@ (8000d5c <sendMachineData+0x34c>)
 8000b72:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    sprintf(local_txA,
 8000b76:	603b      	str	r3, [r7, #0]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b78:	4b78      	ldr	r3, [pc, #480]	@ (8000d5c <sendMachineData+0x34c>)
 8000b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    sprintf(local_txA,
 8000b7e:	461e      	mov	r6, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b80:	4b76      	ldr	r3, [pc, #472]	@ (8000d5c <sendMachineData+0x34c>)
 8000b82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    sprintf(local_txA,
 8000b86:	4618      	mov	r0, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b88:	4b74      	ldr	r3, [pc, #464]	@ (8000d5c <sendMachineData+0x34c>)
 8000b8a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    sprintf(local_txA,
 8000b8e:	4619      	mov	r1, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b90:	4b72      	ldr	r3, [pc, #456]	@ (8000d5c <sendMachineData+0x34c>)
 8000b92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
    sprintf(local_txA,
 8000b96:	461a      	mov	r2, r3
 8000b98:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b9c:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000ba0:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000ba4:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8000d60 <sendMachineData+0x350>)
 8000baa:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000bac:	233c      	movs	r3, #60	@ 0x3c
 8000bae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000bb0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000bb2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000bb4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000bb6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	9224      	str	r2, [sp, #144]	@ 0x90
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	9220      	str	r2, [sp, #128]	@ 0x80
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	921e      	str	r2, [sp, #120]	@ 0x78
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	921d      	str	r2, [sp, #116]	@ 0x74
 8000bd8:	6a3a      	ldr	r2, [r7, #32]
 8000bda:	921c      	str	r2, [sp, #112]	@ 0x70
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000be2:	921a      	str	r2, [sp, #104]	@ 0x68
 8000be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000be6:	9219      	str	r2, [sp, #100]	@ 0x64
 8000be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bea:	9218      	str	r2, [sp, #96]	@ 0x60
 8000bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bf2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bf6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000bf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000bfa:	9214      	str	r2, [sp, #80]	@ 0x50
 8000bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bfe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c02:	9212      	str	r2, [sp, #72]	@ 0x48
 8000c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c06:	9211      	str	r2, [sp, #68]	@ 0x44
 8000c08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c0a:	9210      	str	r2, [sp, #64]	@ 0x40
 8000c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c0e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c12:	920e      	str	r2, [sp, #56]	@ 0x38
 8000c14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000c16:	920d      	str	r2, [sp, #52]	@ 0x34
 8000c18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000c1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000c20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c22:	920a      	str	r2, [sp, #40]	@ 0x28
 8000c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c26:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000c2a:	9208      	str	r2, [sp, #32]
 8000c2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c2e:	9207      	str	r2, [sp, #28]
 8000c30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c32:	9206      	str	r2, [sp, #24]
 8000c34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c36:	9205      	str	r2, [sp, #20]
 8000c38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000c3c:	9204      	str	r2, [sp, #16]
 8000c3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000c42:	9203      	str	r2, [sp, #12]
 8000c44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c54:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	4662      	mov	r2, ip
 8000c60:	4940      	ldr	r1, [pc, #256]	@ (8000d64 <sendMachineData+0x354>)
 8000c62:	4628      	mov	r0, r5
 8000c64:	f00d f8d4 	bl	800de10 <siprintf>

    len = strlen(local_txA);
 8000c68:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fad9 	bl	8000224 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000c78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c7c:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000c80:	4939      	ldr	r1, [pc, #228]	@ (8000d68 <sendMachineData+0x358>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00d f8c4 	bl	800de10 <siprintf>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txB, strlen(local_txB));
 8000c88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fac9 	bl	8000224 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000c9a:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c9e:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f00c fa09 	bl	800d0ba <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000ca8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cac:	f009 f824 	bl	8009cf8 <HAL_Delay>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txA, strlen(local_txA));
 8000cb0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fab5 	bl	8000224 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000cc2:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000cc6:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f00c f9f5 	bl	800d0ba <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000cd0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cd4:	e04a      	b.n	8000d6c <sendMachineData+0x35c>
 8000cd6:	bf00      	nop
 8000cd8:	0800e7d8 	.word	0x0800e7d8
 8000cdc:	0800e7e8 	.word	0x0800e7e8
 8000ce0:	20001728 	.word	0x20001728
 8000ce4:	200016cf 	.word	0x200016cf
 8000ce8:	200016c1 	.word	0x200016c1
 8000cec:	200016c4 	.word	0x200016c4
 8000cf0:	200016c5 	.word	0x200016c5
 8000cf4:	200016c6 	.word	0x200016c6
 8000cf8:	200016cd 	.word	0x200016cd
 8000cfc:	200016c7 	.word	0x200016c7
 8000d00:	200016c8 	.word	0x200016c8
 8000d04:	200016cc 	.word	0x200016cc
 8000d08:	200016c9 	.word	0x200016c9
 8000d0c:	200016d9 	.word	0x200016d9
 8000d10:	200016ca 	.word	0x200016ca
 8000d14:	200016da 	.word	0x200016da
 8000d18:	200016cb 	.word	0x200016cb
 8000d1c:	200016db 	.word	0x200016db
 8000d20:	200016ce 	.word	0x200016ce
 8000d24:	200016d0 	.word	0x200016d0
 8000d28:	200016d1 	.word	0x200016d1
 8000d2c:	200016d2 	.word	0x200016d2
 8000d30:	200016d3 	.word	0x200016d3
 8000d34:	200016d4 	.word	0x200016d4
 8000d38:	200016d5 	.word	0x200016d5
 8000d3c:	200016d6 	.word	0x200016d6
 8000d40:	200016d7 	.word	0x200016d7
 8000d44:	200016d8 	.word	0x200016d8
 8000d48:	200016dc 	.word	0x200016dc
 8000d4c:	200016de 	.word	0x200016de
 8000d50:	200016b8 	.word	0x200016b8
 8000d54:	200016b9 	.word	0x200016b9
 8000d58:	200016e0 	.word	0x200016e0
 8000d5c:	200011f0 	.word	0x200011f0
 8000d60:	0800eb38 	.word	0x0800eb38
 8000d64:	0800e808 	.word	0x0800e808
 8000d68:	0800eb4c 	.word	0x0800eb4c
 8000d6c:	f008 ffc4 	bl	8009cf8 <HAL_Delay>
}
 8000d70:	bf00      	nop
 8000d72:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7a:	bf00      	nop

08000d7c <Wifi_SendString>:

void Wifi_RxClear(void) {
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
}

bool Wifi_SendString(UART_HandleTypeDef *huart, char *data) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY) == HAL_OK;
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff fa4c 	bl	8000224 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d94:	6839      	ldr	r1, [r7, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f00c f87a 	bl	800ce90 <HAL_UART_Transmit>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Wifi_WaitForString>:

bool Wifi_WaitForString(UART_HandleTypeDef *huart, uint32_t TimeOut_ms, uint8_t *result, uint8_t CountOfParameter, ...) {
 8000db0:	b408      	push	{r3}
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b089      	sub	sp, #36	@ 0x24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000dbe:	f008 ff91 	bl	8009ce4 <HAL_GetTick>
 8000dc2:	6178      	str	r0, [r7, #20]
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
 8000dc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4824      	ldr	r0, [pc, #144]	@ (8000e5c <Wifi_WaitForString+0xac>)
 8000dcc:	f00d f8ba 	bl	800df44 <memset>
    int index = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    va_list args;
    va_start(args, CountOfParameter);
 8000dd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd8:	613b      	str	r3, [r7, #16]

    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000dda:	e02e      	b.n	8000e3a <Wifi_WaitForString+0x8a>
        if (HAL_UART_Receive(huart, (uint8_t *)&esp8266_rx_buffer[index], 1, 100) == HAL_OK) {
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <Wifi_WaitForString+0xac>)
 8000de0:	1899      	adds	r1, r3, r2
 8000de2:	2364      	movs	r3, #100	@ 0x64
 8000de4:	2201      	movs	r2, #1
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f00c f8d5 	bl	800cf96 <HAL_UART_Receive>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d123      	bne.n	8000e3a <Wifi_WaitForString+0x8a>
            if (esp8266_rx_buffer[index] == '\n') {
 8000df2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e5c <Wifi_WaitForString+0xac>)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d11a      	bne.n	8000e34 <Wifi_WaitForString+0x84>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	76fb      	strb	r3, [r7, #27]
 8000e02:	e012      	b.n	8000e2a <Wifi_WaitForString+0x7a>
                    if (strstr(esp8266_rx_buffer, va_arg(args, char *)) != NULL) {
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1d1a      	adds	r2, r3, #4
 8000e08:	613a      	str	r2, [r7, #16]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <Wifi_WaitForString+0xac>)
 8000e10:	f00d f882 	bl	800df18 <strstr>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <Wifi_WaitForString+0x74>
                        *result = i;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7efa      	ldrb	r2, [r7, #27]
 8000e1e:	701a      	strb	r2, [r3, #0]
                        va_end(args);
                        return true;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e013      	b.n	8000e4c <Wifi_WaitForString+0x9c>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000e24:	7efb      	ldrb	r3, [r7, #27]
 8000e26:	3301      	adds	r3, #1
 8000e28:	76fb      	strb	r3, [r7, #27]
 8000e2a:	7efa      	ldrb	r2, [r7, #27]
 8000e2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3e7      	bcc.n	8000e04 <Wifi_WaitForString+0x54>
                    }
                }
            }
            index++;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	3301      	adds	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000e3a:	f008 ff53 	bl	8009ce4 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d8c8      	bhi.n	8000ddc <Wifi_WaitForString+0x2c>
        }
    }
    va_end(args);
    return false;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3724      	adds	r7, #36	@ 0x24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e56:	b001      	add	sp, #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20001298 	.word	0x20001298

08000e60 <Wifi_RxCallBack>:

void Wifi_RxCallBack(UART_HandleTypeDef *huart) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    // Gelen byte'ı okuyun
    uint8_t receivedByte;

    // Gelen byte'ı UART'tan okuyun (örneğin, HAL_UART_Receive_IT ile)
    if (HAL_UART_Receive_IT(&huart, &receivedByte, 1) == HAL_OK) {
 8000e68:	f107 010f 	add.w	r1, r7, #15
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00c f957 	bl	800d124 <HAL_UART_Receive_IT>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d126      	bne.n	8000eca <Wifi_RxCallBack+0x6a>
        // RX buffer doluysa, başa sarın
        if (Wifi_RxBufferIndex >= WIFI_RX_BUFFER_SIZE) {
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <Wifi_RxCallBack+0x74>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e84:	d302      	bcc.n	8000e8c <Wifi_RxCallBack+0x2c>
            Wifi_RxBufferIndex = 0;
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <Wifi_RxCallBack+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
        }

        // Gelen byte'ı buffer'a ekleyin
        Wifi_RxBuffer[Wifi_RxBufferIndex++] = receivedByte;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <Wifi_RxCallBack+0x74>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	b291      	uxth	r1, r2
 8000e94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <Wifi_RxCallBack+0x74>)
 8000e96:	8011      	strh	r1, [r2, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	7bf9      	ldrb	r1, [r7, #15]
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <Wifi_RxCallBack+0x78>)
 8000e9e:	5499      	strb	r1, [r3, r2]

        // Gelen byte yeni bir satır başlatıyorsa veya sonlandırıyorsa, buffer'ı işleme alınabilir
        if (receivedByte == '\n' || receivedByte == '\r') {
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d002      	beq.n	8000eac <Wifi_RxCallBack+0x4c>
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b0d      	cmp	r3, #13
 8000eaa:	d10e      	bne.n	8000eca <Wifi_RxCallBack+0x6a>
            // Gelen veriyi işlemek için fonksiyonu çağırın
            Wifi_ProcessReceivedData(Wifi_RxBuffer, Wifi_RxBufferIndex);
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <Wifi_RxCallBack+0x74>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <Wifi_RxCallBack+0x78>)
 8000eb4:	f000 f812 	bl	8000edc <Wifi_ProcessReceivedData>

            // Buffer'ı temizleyin
            Wifi_RxBufferIndex = 0;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <Wifi_RxCallBack+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
            memset(Wifi_RxBuffer, 0, WIFI_RX_BUFFER_SIZE);
 8000ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <Wifi_RxCallBack+0x78>)
 8000ec6:	f00d f83d 	bl	800df44 <memset>
        }
    }
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200011ec 	.word	0x200011ec
 8000ed8:	20000fec 	.word	0x20000fec

08000edc <Wifi_ProcessReceivedData>:

void Wifi_ProcessReceivedData(uint8_t* buffer, uint16_t length) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
    // Gelen veriyi işleyin
    // Örneğin, belirli bir komutu veya cevabı kontrol edebilir ve işlem yapabilirsiniz

    // Gelen veriyi global değişkene aktaralım
    memcpy(esp8266_rx_buffer, buffer, length);
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	461a      	mov	r2, r3
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <Wifi_ProcessReceivedData+0x28>)
 8000ef0:	f00d f86c 	bl	800dfcc <memcpy>

    // Belirli bir stringi aramak için kullanabilirsiniz (örneğin, "OK" yanıtı)
    if (strstr((char*)buffer, "OK") != NULL) {
 8000ef4:	4904      	ldr	r1, [pc, #16]	@ (8000f08 <Wifi_ProcessReceivedData+0x2c>)
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f00d f80e 	bl	800df18 <strstr>
        // "OK" yanıtı bulundu, işlem yapabilirsiniz
    }
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20001298 	.word	0x20001298
 8000f08:	0800f0fc 	.word	0x0800f0fc

08000f0c <Wifi_Init>:

bool Wifi_Init(UART_HandleTypeDef *huart) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT\r\n") &&
 8000f14:	490e      	ldr	r1, [pc, #56]	@ (8000f50 <Wifi_Init+0x44>)
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff30 	bl	8000d7c <Wifi_SendString>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00d      	beq.n	8000f3e <Wifi_Init+0x32>
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <Wifi_Init+0x48>)
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff3e 	bl	8000db0 <Wifi_WaitForString>
 8000f34:	4603      	mov	r3, r0
    return Wifi_SendString(huart, "AT\r\n") &&
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <Wifi_Init+0x32>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <Wifi_Init+0x34>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	0800f100 	.word	0x0800f100
 8000f54:	0800f0fc 	.word	0x0800f0fc

08000f58 <Wifi_Restart>:

void Wifi_Disable(void) {
    // Wifi kapama işlemleri buraya eklenecek
}

bool Wifi_Restart(UART_HandleTypeDef *huart) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT+RST\r\n") &&
 8000f60:	490e      	ldr	r1, [pc, #56]	@ (8000f9c <Wifi_Restart+0x44>)
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff0a 	bl	8000d7c <Wifi_SendString>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00d      	beq.n	8000f8a <Wifi_Restart+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <Wifi_Restart+0x48>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	2200      	movs	r2, #0
 8000f76:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff18 	bl	8000db0 <Wifi_WaitForString>
 8000f80:	4603      	mov	r3, r0
    return Wifi_SendString(huart, "AT+RST\r\n") &&
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <Wifi_Restart+0x32>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <Wifi_Restart+0x34>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800f108 	.word	0x0800f108
 8000fa0:	0800f0fc 	.word	0x0800f0fc

08000fa4 <Wifi_FactoryReset>:
    sprintf(cmd, "AT+GSLP=%d\r\n", DelayMs);
    return Wifi_SendString(huart, cmd); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_FactoryReset(UART_HandleTypeDef *huart) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT+RESTORE\r\n") &&
 8000fac:	490e      	ldr	r1, [pc, #56]	@ (8000fe8 <Wifi_FactoryReset+0x44>)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fee4 	bl	8000d7c <Wifi_SendString>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <Wifi_FactoryReset+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <Wifi_FactoryReset+0x48>)
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fef2 	bl	8000db0 <Wifi_WaitForString>
 8000fcc:	4603      	mov	r3, r0
    return Wifi_SendString(huart, "AT+RESTORE\r\n") &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <Wifi_FactoryReset+0x32>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <Wifi_FactoryReset+0x34>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	0800f124 	.word	0x0800f124
 8000fec:	0800f0fc 	.word	0x0800f0fc

08000ff0 <Wifi_SetMode>:
    sprintf(cmd, "AT+RFPOWER=%d\r\n", Power_0_to_82);
    return Wifi_SendString(huart, cmd); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_SetMode(UART_HandleTypeDef *huart, WifiMode_t WifiMode_) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	@ 0x30
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
    char cmd[32];
    sprintf(cmd, "AT+CWMODE=%d\r\n", WifiMode_);
 8000ffc:	78fa      	ldrb	r2, [r7, #3]
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4911      	ldr	r1, [pc, #68]	@ (8001048 <Wifi_SetMode+0x58>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00c ff03 	bl	800de10 <siprintf>
    return Wifi_SendString(huart, cmd) &&
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff feb3 	bl	8000d7c <Wifi_SendString>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <Wifi_SetMode+0x48>
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <Wifi_SetMode+0x5c>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fec1 	bl	8000db0 <Wifi_WaitForString>
 800102e:	4603      	mov	r3, r0
    return Wifi_SendString(huart, cmd) &&
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <Wifi_SetMode+0x48>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <Wifi_SetMode+0x4a>
 8001038:	2300      	movs	r3, #0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3728      	adds	r7, #40	@ 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	0800f154 	.word	0x0800f154
 800104c:	0800f0fc 	.word	0x0800f0fc

08001050 <Wifi_Station_ConnectToAp>:
bool Wifi_GetMyIp(UART_HandleTypeDef *huart) {
    return Wifi_SendString(huart, "AT+CIFSR\r\n"); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_Station_ConnectToAp(UART_HandleTypeDef *huart, char *SSID, char *Pass, char *MAC) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b0c7      	sub	sp, #284	@ 0x11c
 8001054:	af02      	add	r7, sp, #8
 8001056:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800105a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800105e:	6020      	str	r0, [r4, #0]
 8001060:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001064:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8001068:	6001      	str	r1, [r0, #0]
 800106a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800106e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001072:	600a      	str	r2, [r1, #0]
 8001074:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001078:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800107c:	6013      	str	r3, [r2, #0]
    char cmd[256];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Pass);
 800107e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001082:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001086:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800108a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800108e:	f107 0010 	add.w	r0, r7, #16
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	4915      	ldr	r1, [pc, #84]	@ (80010ec <Wifi_Station_ConnectToAp+0x9c>)
 8001098:	f00c feba 	bl	800de10 <siprintf>
    return Wifi_SendString(huart, cmd) &&
 800109c:	f107 0210 	add.w	r2, r7, #16
 80010a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010a8:	4611      	mov	r1, r2
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	f7ff fe66 	bl	8000d7c <Wifi_SendString>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d011      	beq.n	80010da <Wifi_Station_ConnectToAp+0x8a>
           Wifi_WaitForString(huart, 10000, NULL, 1, "OK");
 80010b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ba:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <Wifi_Station_ConnectToAp+0xa0>)
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2200      	movs	r2, #0
 80010c6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80010ca:	6800      	ldr	r0, [r0, #0]
 80010cc:	f7ff fe70 	bl	8000db0 <Wifi_WaitForString>
 80010d0:	4603      	mov	r3, r0
    return Wifi_SendString(huart, cmd) &&
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <Wifi_Station_ConnectToAp+0x8a>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <Wifi_Station_ConnectToAp+0x8c>
 80010da:	2300      	movs	r3, #0
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	0800f180 	.word	0x0800f180
 80010f0:	0800f0fc 	.word	0x0800f0fc

080010f4 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <hata2EEPROM+0xa0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1e5a      	subs	r2, r3, #1
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <hata2EEPROM+0xa4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4413      	add	r3, r2
 800110a:	4a24      	ldr	r2, [pc, #144]	@ (800119c <hata2EEPROM+0xa8>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8001112:	f000 f8d1 	bl	80012b8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8001116:	e000      	b.n	800111a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8001118:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e012      	b.n	8001146 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <hata2EEPROM+0xa4>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <hata2EEPROM+0xa8>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <hata2EEPROM+0xa4>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	4918      	ldr	r1, [pc, #96]	@ (800119c <hata2EEPROM+0xa8>)
 800113a:	79fa      	ldrb	r2, [r7, #7]
 800113c:	54ca      	strb	r2, [r1, r3]
					break;
 800113e:	e007      	b.n	8001150 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <hata2EEPROM+0xa0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbe7      	blt.n	8001120 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <hata2EEPROM+0xa4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b299      	uxth	r1, r3
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <hata2EEPROM+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b298      	uxth	r0, r3
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <hata2EEPROM+0xa4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0e      	ldr	r2, [pc, #56]	@ (800119c <hata2EEPROM+0xa8>)
 8001162:	4413      	add	r3, r2
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <hata2EEPROM+0xa0>)
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	b292      	uxth	r2, r2
 800116a:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 800116e:	9402      	str	r4, [sp, #8]
 8001170:	9201      	str	r2, [sp, #4]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4603      	mov	r3, r0
 8001176:	460a      	mov	r2, r1
 8001178:	21a0      	movs	r1, #160	@ 0xa0
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <hata2EEPROM+0xac>)
 800117c:	f009 fe46 	bl	800ae0c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8001180:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001184:	f008 fdb8 	bl	8009cf8 <HAL_Delay>
	eepromKontrol();
 8001188:	f7ff f854 	bl	8000234 <eepromKontrol>
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000094 	.word	0x20000094
 8001198:	20000098 	.word	0x20000098
 800119c:	200011f0 	.word	0x200011f0
 80011a0:	20001f40 	.word	0x20001f40

080011a4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10f      	bne.n	80011d4 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 80011b4:	4a38      	ldr	r2, [pc, #224]	@ (8001298 <hataKoduLcdGoster+0xf4>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	2001      	movs	r0, #1
 80011ba:	f008 f827 	bl	800920c <lcd_print>
		lcd_print(2, 1, "1");
 80011be:	4a37      	ldr	r2, [pc, #220]	@ (800129c <hataKoduLcdGoster+0xf8>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	2002      	movs	r0, #2
 80011c4:	f008 f822 	bl	800920c <lcd_print>
		lcd_print(2, 7, "          ");
 80011c8:	4a35      	ldr	r2, [pc, #212]	@ (80012a0 <hataKoduLcdGoster+0xfc>)
 80011ca:	2107      	movs	r1, #7
 80011cc:	2002      	movs	r0, #2
 80011ce:	f008 f81d 	bl	800920c <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80011d2:	e05d      	b.n	8001290 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d10f      	bne.n	80011fa <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 80011da:	4a2f      	ldr	r2, [pc, #188]	@ (8001298 <hataKoduLcdGoster+0xf4>)
 80011dc:	2101      	movs	r1, #1
 80011de:	2001      	movs	r0, #1
 80011e0:	f008 f814 	bl	800920c <lcd_print>
		lcd_print(2, 2, "2");
 80011e4:	4a2f      	ldr	r2, [pc, #188]	@ (80012a4 <hataKoduLcdGoster+0x100>)
 80011e6:	2102      	movs	r1, #2
 80011e8:	2002      	movs	r0, #2
 80011ea:	f008 f80f 	bl	800920c <lcd_print>
		lcd_print(2, 7, "          ");
 80011ee:	4a2c      	ldr	r2, [pc, #176]	@ (80012a0 <hataKoduLcdGoster+0xfc>)
 80011f0:	2107      	movs	r1, #7
 80011f2:	2002      	movs	r0, #2
 80011f4:	f008 f80a 	bl	800920c <lcd_print>
}
 80011f8:	e04a      	b.n	8001290 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d10f      	bne.n	8001220 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8001200:	4a25      	ldr	r2, [pc, #148]	@ (8001298 <hataKoduLcdGoster+0xf4>)
 8001202:	2101      	movs	r1, #1
 8001204:	2001      	movs	r0, #1
 8001206:	f008 f801 	bl	800920c <lcd_print>
		lcd_print(2, 3, "3");
 800120a:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <hataKoduLcdGoster+0x104>)
 800120c:	2103      	movs	r1, #3
 800120e:	2002      	movs	r0, #2
 8001210:	f007 fffc 	bl	800920c <lcd_print>
		lcd_print(2, 7, "          ");
 8001214:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <hataKoduLcdGoster+0xfc>)
 8001216:	2107      	movs	r1, #7
 8001218:	2002      	movs	r0, #2
 800121a:	f007 fff7 	bl	800920c <lcd_print>
}
 800121e:	e037      	b.n	8001290 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d10f      	bne.n	8001246 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <hataKoduLcdGoster+0xf4>)
 8001228:	2101      	movs	r1, #1
 800122a:	2001      	movs	r0, #1
 800122c:	f007 ffee 	bl	800920c <lcd_print>
		lcd_print(2, 4, "4");
 8001230:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <hataKoduLcdGoster+0x108>)
 8001232:	2104      	movs	r1, #4
 8001234:	2002      	movs	r0, #2
 8001236:	f007 ffe9 	bl	800920c <lcd_print>
		lcd_print(2, 7, "          ");
 800123a:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <hataKoduLcdGoster+0xfc>)
 800123c:	2107      	movs	r1, #7
 800123e:	2002      	movs	r0, #2
 8001240:	f007 ffe4 	bl	800920c <lcd_print>
}
 8001244:	e024      	b.n	8001290 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b05      	cmp	r3, #5
 800124a:	d10f      	bne.n	800126c <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 800124c:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <hataKoduLcdGoster+0xf4>)
 800124e:	2101      	movs	r1, #1
 8001250:	2001      	movs	r0, #1
 8001252:	f007 ffdb 	bl	800920c <lcd_print>
		lcd_print(2, 5, "5");
 8001256:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <hataKoduLcdGoster+0x10c>)
 8001258:	2105      	movs	r1, #5
 800125a:	2002      	movs	r0, #2
 800125c:	f007 ffd6 	bl	800920c <lcd_print>
		lcd_print(2, 7, "          ");
 8001260:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <hataKoduLcdGoster+0xfc>)
 8001262:	2107      	movs	r1, #7
 8001264:	2002      	movs	r0, #2
 8001266:	f007 ffd1 	bl	800920c <lcd_print>
}
 800126a:	e011      	b.n	8001290 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b06      	cmp	r3, #6
 8001270:	d10e      	bne.n	8001290 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8001272:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <hataKoduLcdGoster+0xf4>)
 8001274:	2101      	movs	r1, #1
 8001276:	2001      	movs	r0, #1
 8001278:	f007 ffc8 	bl	800920c <lcd_print>
		lcd_print(2, 6, "6");
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <hataKoduLcdGoster+0x110>)
 800127e:	2106      	movs	r1, #6
 8001280:	2002      	movs	r0, #2
 8001282:	f007 ffc3 	bl	800920c <lcd_print>
		lcd_print(2, 7, "          ");
 8001286:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <hataKoduLcdGoster+0xfc>)
 8001288:	2107      	movs	r1, #7
 800128a:	2002      	movs	r0, #2
 800128c:	f007 ffbe 	bl	800920c <lcd_print>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20001eb4 	.word	0x20001eb4
 800129c:	0800f2f8 	.word	0x0800f2f8
 80012a0:	0800f2fc 	.word	0x0800f2fc
 80012a4:	0800f308 	.word	0x0800f308
 80012a8:	0800f30c 	.word	0x0800f30c
 80012ac:	0800f310 	.word	0x0800f310
 80012b0:	0800f314 	.word	0x0800f314
 80012b4:	0800f318 	.word	0x0800f318

080012b8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e009      	b.n	80012d8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <eepromDataFillWithEmpty+0x38>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <eepromDataFillWithEmpty+0x3c>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3301      	adds	r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <eepromDataFillWithEmpty+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbf0      	blt.n	80012c4 <eepromDataFillWithEmpty+0xc>
	}
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000006c 	.word	0x2000006c
 80012f4:	200011f0 	.word	0x200011f0
 80012f8:	20000094 	.word	0x20000094

080012fc <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800130e:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <i2cTest+0x154>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <i2cTest+0x154>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800131e:	484c      	ldr	r0, [pc, #304]	@ (8001450 <i2cTest+0x154>)
 8001320:	f009 fc46 	bl	800abb0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001324:	23c0      	movs	r3, #192	@ 0xc0
 8001326:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8001328:	2311      	movs	r3, #17
 800132a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4846      	ldr	r0, [pc, #280]	@ (8001454 <i2cTest+0x158>)
 800133a:	f009 f84d 	bl	800a3d8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2140      	movs	r1, #64	@ 0x40
 8001342:	4844      	ldr	r0, [pc, #272]	@ (8001454 <i2cTest+0x158>)
 8001344:	f009 fabf 	bl	800a8c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2180      	movs	r1, #128	@ 0x80
 800134c:	4841      	ldr	r0, [pc, #260]	@ (8001454 <i2cTest+0x158>)
 800134e:	f009 faba 	bl	800a8c6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f008 fcd0 	bl	8009cf8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001358:	bf00      	nop
 800135a:	2140      	movs	r1, #64	@ 0x40
 800135c:	483d      	ldr	r0, [pc, #244]	@ (8001454 <i2cTest+0x158>)
 800135e:	f009 fa9b 	bl	800a898 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d006      	beq.n	8001376 <i2cTest+0x7a>
 8001368:	2180      	movs	r1, #128	@ 0x80
 800136a:	483a      	ldr	r0, [pc, #232]	@ (8001454 <i2cTest+0x158>)
 800136c:	f009 fa94 	bl	800a898 <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d1f1      	bne.n	800135a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	4836      	ldr	r0, [pc, #216]	@ (8001454 <i2cTest+0x158>)
 800137c:	f009 faa3 	bl	800a8c6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001380:	200a      	movs	r0, #10
 8001382:	f008 fcb9 	bl	8009cf8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001386:	bf00      	nop
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	4832      	ldr	r0, [pc, #200]	@ (8001454 <i2cTest+0x158>)
 800138c:	f009 fa84 	bl	800a898 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d0f8      	beq.n	8001388 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2140      	movs	r1, #64	@ 0x40
 800139a:	482e      	ldr	r0, [pc, #184]	@ (8001454 <i2cTest+0x158>)
 800139c:	f009 fa93 	bl	800a8c6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80013a0:	200a      	movs	r0, #10
 80013a2:	f008 fca9 	bl	8009cf8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80013a6:	bf00      	nop
 80013a8:	2140      	movs	r1, #64	@ 0x40
 80013aa:	482a      	ldr	r0, [pc, #168]	@ (8001454 <i2cTest+0x158>)
 80013ac:	f009 fa74 	bl	800a898 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d0f8      	beq.n	80013a8 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2140      	movs	r1, #64	@ 0x40
 80013ba:	4826      	ldr	r0, [pc, #152]	@ (8001454 <i2cTest+0x158>)
 80013bc:	f009 fa83 	bl	800a8c6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80013c0:	200a      	movs	r0, #10
 80013c2:	f008 fc99 	bl	8009cf8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80013c6:	bf00      	nop
 80013c8:	2140      	movs	r1, #64	@ 0x40
 80013ca:	4822      	ldr	r0, [pc, #136]	@ (8001454 <i2cTest+0x158>)
 80013cc:	f009 fa64 	bl	800a898 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d1f8      	bne.n	80013c8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	481e      	ldr	r0, [pc, #120]	@ (8001454 <i2cTest+0x158>)
 80013dc:	f009 fa73 	bl	800a8c6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f008 fc89 	bl	8009cf8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80013e6:	bf00      	nop
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	481a      	ldr	r0, [pc, #104]	@ (8001454 <i2cTest+0x158>)
 80013ec:	f009 fa54 	bl	800a898 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d1f8      	bne.n	80013e8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23c0      	movs	r3, #192	@ 0xc0
 80013f8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4812      	ldr	r0, [pc, #72]	@ (8001454 <i2cTest+0x158>)
 800140c:	f008 ffe4 	bl	800a3d8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <i2cTest+0x154>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <i2cTest+0x154>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800141e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <i2cTest+0x154>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <i2cTest+0x154>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800142e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <i2cTest+0x154>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <i2cTest+0x154>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <i2cTest+0x154>)
 8001442:	f009 fa71 	bl	800a928 <HAL_I2C_Init>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20001f40 	.word	0x20001f40
 8001454:	40010c00 	.word	0x40010c00

08001458 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8001462:	20c8      	movs	r0, #200	@ 0xc8
 8001464:	f008 fc48 	bl	8009cf8 <HAL_Delay>
	lcd_clear();
 8001468:	f007 fefc 	bl	8009264 <lcd_clear>
	if(type == 1 && page == 0) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d13e      	bne.n	80014f0 <printTemplate+0x98>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13b      	bne.n	80014f0 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001478:	4a9a      	ldr	r2, [pc, #616]	@ (80016e4 <printTemplate+0x28c>)
 800147a:	2101      	movs	r1, #1
 800147c:	2001      	movs	r0, #1
 800147e:	f007 fec5 	bl	800920c <lcd_print>
		lcd_print(2, 3, "0");
 8001482:	4a99      	ldr	r2, [pc, #612]	@ (80016e8 <printTemplate+0x290>)
 8001484:	2103      	movs	r1, #3
 8001486:	2002      	movs	r0, #2
 8001488:	f007 fec0 	bl	800920c <lcd_print>
		lcd_print(2, 4, "1");
 800148c:	4a97      	ldr	r2, [pc, #604]	@ (80016ec <printTemplate+0x294>)
 800148e:	2104      	movs	r1, #4
 8001490:	2002      	movs	r0, #2
 8001492:	f007 febb 	bl	800920c <lcd_print>
		lcd_print(2, 5, "2");
 8001496:	4a96      	ldr	r2, [pc, #600]	@ (80016f0 <printTemplate+0x298>)
 8001498:	2105      	movs	r1, #5
 800149a:	2002      	movs	r0, #2
 800149c:	f007 feb6 	bl	800920c <lcd_print>
		lcd_print(2, 6, "3");
 80014a0:	4a94      	ldr	r2, [pc, #592]	@ (80016f4 <printTemplate+0x29c>)
 80014a2:	2106      	movs	r1, #6
 80014a4:	2002      	movs	r0, #2
 80014a6:	f007 feb1 	bl	800920c <lcd_print>
		lcd_print(2, 7, "4");
 80014aa:	4a93      	ldr	r2, [pc, #588]	@ (80016f8 <printTemplate+0x2a0>)
 80014ac:	2107      	movs	r1, #7
 80014ae:	2002      	movs	r0, #2
 80014b0:	f007 feac 	bl	800920c <lcd_print>
		lcd_print(2, 10, "5");
 80014b4:	4a91      	ldr	r2, [pc, #580]	@ (80016fc <printTemplate+0x2a4>)
 80014b6:	210a      	movs	r1, #10
 80014b8:	2002      	movs	r0, #2
 80014ba:	f007 fea7 	bl	800920c <lcd_print>
		lcd_print(2, 11, "6");
 80014be:	4a90      	ldr	r2, [pc, #576]	@ (8001700 <printTemplate+0x2a8>)
 80014c0:	210b      	movs	r1, #11
 80014c2:	2002      	movs	r0, #2
 80014c4:	f007 fea2 	bl	800920c <lcd_print>
		lcd_print(2, 12, "7");
 80014c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001704 <printTemplate+0x2ac>)
 80014ca:	210c      	movs	r1, #12
 80014cc:	2002      	movs	r0, #2
 80014ce:	f007 fe9d 	bl	800920c <lcd_print>
		lcd_print(2, 13, "8");
 80014d2:	4a8d      	ldr	r2, [pc, #564]	@ (8001708 <printTemplate+0x2b0>)
 80014d4:	210d      	movs	r1, #13
 80014d6:	2002      	movs	r0, #2
 80014d8:	f007 fe98 	bl	800920c <lcd_print>
		lcd_print(2, 14, "9");
 80014dc:	4a8b      	ldr	r2, [pc, #556]	@ (800170c <printTemplate+0x2b4>)
 80014de:	210e      	movs	r1, #14
 80014e0:	2002      	movs	r0, #2
 80014e2:	f007 fe93 	bl	800920c <lcd_print>
		lcd_gotoxy(2, 3);
 80014e6:	2103      	movs	r1, #3
 80014e8:	2002      	movs	r0, #2
 80014ea:	f007 fe70 	bl	80091ce <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80014ee:	e0f5      	b.n	80016dc <printTemplate+0x284>
	} else if(type == 2) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d178      	bne.n	80015e8 <printTemplate+0x190>
		if(page == 1) {
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d114      	bne.n	8001526 <printTemplate+0xce>
			lcd_clear();
 80014fc:	f007 feb2 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001500:	2064      	movs	r0, #100	@ 0x64
 8001502:	f008 fbf9 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001506:	4a82      	ldr	r2, [pc, #520]	@ (8001710 <printTemplate+0x2b8>)
 8001508:	2101      	movs	r1, #1
 800150a:	2001      	movs	r0, #1
 800150c:	f007 fe7e 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001510:	4a80      	ldr	r2, [pc, #512]	@ (8001714 <printTemplate+0x2bc>)
 8001512:	2107      	movs	r1, #7
 8001514:	2001      	movs	r0, #1
 8001516:	f007 fe79 	bl	800920c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800151a:	4a7f      	ldr	r2, [pc, #508]	@ (8001718 <printTemplate+0x2c0>)
 800151c:	2101      	movs	r1, #1
 800151e:	2002      	movs	r0, #2
 8001520:	f007 fe74 	bl	800920c <lcd_print>
}
 8001524:	e0da      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 2) {
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d114      	bne.n	8001556 <printTemplate+0xfe>
			lcd_clear();
 800152c:	f007 fe9a 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001530:	2064      	movs	r0, #100	@ 0x64
 8001532:	f008 fbe1 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001536:	4a79      	ldr	r2, [pc, #484]	@ (800171c <printTemplate+0x2c4>)
 8001538:	2101      	movs	r1, #1
 800153a:	2001      	movs	r0, #1
 800153c:	f007 fe66 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001540:	4a74      	ldr	r2, [pc, #464]	@ (8001714 <printTemplate+0x2bc>)
 8001542:	2107      	movs	r1, #7
 8001544:	2001      	movs	r0, #1
 8001546:	f007 fe61 	bl	800920c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800154a:	4a75      	ldr	r2, [pc, #468]	@ (8001720 <printTemplate+0x2c8>)
 800154c:	2101      	movs	r1, #1
 800154e:	2002      	movs	r0, #2
 8001550:	f007 fe5c 	bl	800920c <lcd_print>
}
 8001554:	e0c2      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 3) {
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d114      	bne.n	8001586 <printTemplate+0x12e>
			lcd_clear();
 800155c:	f007 fe82 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	@ 0x64
 8001562:	f008 fbc9 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001566:	4a6a      	ldr	r2, [pc, #424]	@ (8001710 <printTemplate+0x2b8>)
 8001568:	2101      	movs	r1, #1
 800156a:	2001      	movs	r0, #1
 800156c:	f007 fe4e 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001570:	4a68      	ldr	r2, [pc, #416]	@ (8001714 <printTemplate+0x2bc>)
 8001572:	2107      	movs	r1, #7
 8001574:	2001      	movs	r0, #1
 8001576:	f007 fe49 	bl	800920c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800157a:	4a6a      	ldr	r2, [pc, #424]	@ (8001724 <printTemplate+0x2cc>)
 800157c:	2101      	movs	r1, #1
 800157e:	2002      	movs	r0, #2
 8001580:	f007 fe44 	bl	800920c <lcd_print>
}
 8001584:	e0aa      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 4) {
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d114      	bne.n	80015b6 <printTemplate+0x15e>
			lcd_clear();
 800158c:	f007 fe6a 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001590:	2064      	movs	r0, #100	@ 0x64
 8001592:	f008 fbb1 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001596:	4a5e      	ldr	r2, [pc, #376]	@ (8001710 <printTemplate+0x2b8>)
 8001598:	2101      	movs	r1, #1
 800159a:	2001      	movs	r0, #1
 800159c:	f007 fe36 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80015a0:	4a5c      	ldr	r2, [pc, #368]	@ (8001714 <printTemplate+0x2bc>)
 80015a2:	2107      	movs	r1, #7
 80015a4:	2001      	movs	r0, #1
 80015a6:	f007 fe31 	bl	800920c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80015aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001728 <printTemplate+0x2d0>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	2002      	movs	r0, #2
 80015b0:	f007 fe2c 	bl	800920c <lcd_print>
}
 80015b4:	e092      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 5) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	f040 808f 	bne.w	80016dc <printTemplate+0x284>
			lcd_clear();
 80015be:	f007 fe51 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 80015c2:	2064      	movs	r0, #100	@ 0x64
 80015c4:	f008 fb98 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80015c8:	4a51      	ldr	r2, [pc, #324]	@ (8001710 <printTemplate+0x2b8>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	2001      	movs	r0, #1
 80015ce:	f007 fe1d 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80015d2:	4a50      	ldr	r2, [pc, #320]	@ (8001714 <printTemplate+0x2bc>)
 80015d4:	2107      	movs	r1, #7
 80015d6:	2001      	movs	r0, #1
 80015d8:	f007 fe18 	bl	800920c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80015dc:	4a53      	ldr	r2, [pc, #332]	@ (800172c <printTemplate+0x2d4>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f007 fe13 	bl	800920c <lcd_print>
}
 80015e6:	e079      	b.n	80016dc <printTemplate+0x284>
	} else if(type == 3) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d176      	bne.n	80016dc <printTemplate+0x284>
		if(page == 1) {
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d114      	bne.n	800161e <printTemplate+0x1c6>
			lcd_clear();
 80015f4:	f007 fe36 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 80015f8:	2064      	movs	r0, #100	@ 0x64
 80015fa:	f008 fb7d 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80015fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001730 <printTemplate+0x2d8>)
 8001600:	2101      	movs	r1, #1
 8001602:	2001      	movs	r0, #1
 8001604:	f007 fe02 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001608:	4a4a      	ldr	r2, [pc, #296]	@ (8001734 <printTemplate+0x2dc>)
 800160a:	2107      	movs	r1, #7
 800160c:	2001      	movs	r0, #1
 800160e:	f007 fdfd 	bl	800920c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001612:	4a41      	ldr	r2, [pc, #260]	@ (8001718 <printTemplate+0x2c0>)
 8001614:	2101      	movs	r1, #1
 8001616:	2002      	movs	r0, #2
 8001618:	f007 fdf8 	bl	800920c <lcd_print>
}
 800161c:	e05e      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 2) {
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d114      	bne.n	800164e <printTemplate+0x1f6>
			lcd_clear();
 8001624:	f007 fe1e 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	@ 0x64
 800162a:	f008 fb65 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800162e:	4a40      	ldr	r2, [pc, #256]	@ (8001730 <printTemplate+0x2d8>)
 8001630:	2101      	movs	r1, #1
 8001632:	2001      	movs	r0, #1
 8001634:	f007 fdea 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001638:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <printTemplate+0x2dc>)
 800163a:	2107      	movs	r1, #7
 800163c:	2001      	movs	r0, #1
 800163e:	f007 fde5 	bl	800920c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001642:	4a37      	ldr	r2, [pc, #220]	@ (8001720 <printTemplate+0x2c8>)
 8001644:	2101      	movs	r1, #1
 8001646:	2002      	movs	r0, #2
 8001648:	f007 fde0 	bl	800920c <lcd_print>
}
 800164c:	e046      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 3) {
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d114      	bne.n	800167e <printTemplate+0x226>
			lcd_clear();
 8001654:	f007 fe06 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	@ 0x64
 800165a:	f008 fb4d 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800165e:	4a34      	ldr	r2, [pc, #208]	@ (8001730 <printTemplate+0x2d8>)
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f007 fdd2 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001668:	4a32      	ldr	r2, [pc, #200]	@ (8001734 <printTemplate+0x2dc>)
 800166a:	2107      	movs	r1, #7
 800166c:	2001      	movs	r0, #1
 800166e:	f007 fdcd 	bl	800920c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001672:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <printTemplate+0x2cc>)
 8001674:	2101      	movs	r1, #1
 8001676:	2002      	movs	r0, #2
 8001678:	f007 fdc8 	bl	800920c <lcd_print>
}
 800167c:	e02e      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 4) {
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d114      	bne.n	80016ae <printTemplate+0x256>
			lcd_clear();
 8001684:	f007 fdee 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 8001688:	2064      	movs	r0, #100	@ 0x64
 800168a:	f008 fb35 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800168e:	4a28      	ldr	r2, [pc, #160]	@ (8001730 <printTemplate+0x2d8>)
 8001690:	2101      	movs	r1, #1
 8001692:	2001      	movs	r0, #1
 8001694:	f007 fdba 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001698:	4a26      	ldr	r2, [pc, #152]	@ (8001734 <printTemplate+0x2dc>)
 800169a:	2107      	movs	r1, #7
 800169c:	2001      	movs	r0, #1
 800169e:	f007 fdb5 	bl	800920c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <printTemplate+0x2d0>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	2002      	movs	r0, #2
 80016a8:	f007 fdb0 	bl	800920c <lcd_print>
}
 80016ac:	e016      	b.n	80016dc <printTemplate+0x284>
		} else if(page == 5) {
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d113      	bne.n	80016dc <printTemplate+0x284>
			lcd_clear();
 80016b4:	f007 fdd6 	bl	8009264 <lcd_clear>
			HAL_Delay(100);
 80016b8:	2064      	movs	r0, #100	@ 0x64
 80016ba:	f008 fb1d 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80016be:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <printTemplate+0x2d8>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	2001      	movs	r0, #1
 80016c4:	f007 fda2 	bl	800920c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80016c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001734 <printTemplate+0x2dc>)
 80016ca:	2107      	movs	r1, #7
 80016cc:	2001      	movs	r0, #1
 80016ce:	f007 fd9d 	bl	800920c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80016d2:	4a16      	ldr	r2, [pc, #88]	@ (800172c <printTemplate+0x2d4>)
 80016d4:	2101      	movs	r1, #1
 80016d6:	2002      	movs	r0, #2
 80016d8:	f007 fd98 	bl	800920c <lcd_print>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0800f31c 	.word	0x0800f31c
 80016e8:	0800f324 	.word	0x0800f324
 80016ec:	0800f328 	.word	0x0800f328
 80016f0:	0800f32c 	.word	0x0800f32c
 80016f4:	0800f330 	.word	0x0800f330
 80016f8:	0800f334 	.word	0x0800f334
 80016fc:	0800f338 	.word	0x0800f338
 8001700:	0800f33c 	.word	0x0800f33c
 8001704:	0800f340 	.word	0x0800f340
 8001708:	0800f344 	.word	0x0800f344
 800170c:	0800f348 	.word	0x0800f348
 8001710:	0800f34c 	.word	0x0800f34c
 8001714:	20001274 	.word	0x20001274
 8001718:	0800f360 	.word	0x0800f360
 800171c:	0800f374 	.word	0x0800f374
 8001720:	0800f37c 	.word	0x0800f37c
 8001724:	0800f390 	.word	0x0800f390
 8001728:	0800f3a4 	.word	0x0800f3a4
 800172c:	0800f3b8 	.word	0x0800f3b8
 8001730:	0800f3cc 	.word	0x0800f3cc
 8001734:	20001284 	.word	0x20001284

08001738 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10a      	bne.n	800175c <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8001746:	4a18      	ldr	r2, [pc, #96]	@ (80017a8 <printCredentials+0x70>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f007 fd5e 	bl	800920c <lcd_print>
		lcd_print(2, 13, "    ");
 8001750:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <printCredentials+0x74>)
 8001752:	210d      	movs	r1, #13
 8001754:	2002      	movs	r0, #2
 8001756:	f007 fd59 	bl	800920c <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 800175a:	e021      	b.n	80017a0 <printCredentials+0x68>
	} else if(type == 2) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d10f      	bne.n	8001782 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <printCredentials+0x78>)
 8001764:	2101      	movs	r1, #1
 8001766:	2001      	movs	r0, #1
 8001768:	f007 fd50 	bl	800920c <lcd_print>
		lcd_print(2, 1, "                ");
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <printCredentials+0x7c>)
 800176e:	2101      	movs	r1, #1
 8001770:	2002      	movs	r0, #2
 8001772:	f007 fd4b 	bl	800920c <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8001776:	4a10      	ldr	r2, [pc, #64]	@ (80017b8 <printCredentials+0x80>)
 8001778:	2101      	movs	r1, #1
 800177a:	2002      	movs	r0, #2
 800177c:	f007 fd46 	bl	800920c <lcd_print>
}
 8001780:	e00e      	b.n	80017a0 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <printCredentials+0x84>)
 8001784:	2101      	movs	r1, #1
 8001786:	2001      	movs	r0, #1
 8001788:	f007 fd40 	bl	800920c <lcd_print>
		lcd_print(2, 1, "                ");
 800178c:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <printCredentials+0x7c>)
 800178e:	2101      	movs	r1, #1
 8001790:	2002      	movs	r0, #2
 8001792:	f007 fd3b 	bl	800920c <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <printCredentials+0x88>)
 8001798:	2101      	movs	r1, #1
 800179a:	2002      	movs	r0, #2
 800179c:	f007 fd36 	bl	800920c <lcd_print>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20001268 	.word	0x20001268
 80017ac:	0800f3e0 	.word	0x0800f3e0
 80017b0:	0800f3e8 	.word	0x0800f3e8
 80017b4:	0800f3fc 	.word	0x0800f3fc
 80017b8:	20001274 	.word	0x20001274
 80017bc:	0800f410 	.word	0x0800f410
 80017c0:	20001284 	.word	0x20001284

080017c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017c8:	f3bf 8f4f 	dsb	sy
}
 80017cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <__NVIC_SystemReset+0x24>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80017d6:	4904      	ldr	r1, [pc, #16]	@ (80017e8 <__NVIC_SystemReset+0x24>)
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <__NVIC_SystemReset+0x28>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80017de:	f3bf 8f4f 	dsb	sy
}
 80017e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <__NVIC_SystemReset+0x20>
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	05fa0004 	.word	0x05fa0004

080017f0 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80017f6:	2101      	movs	r1, #1
 80017f8:	488e      	ldr	r0, [pc, #568]	@ (8001a34 <menu+0x244>)
 80017fa:	f009 f84d 	bl	800a898 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	f040 8099 	bne.w	8001938 <menu+0x148>
 8001806:	4b8c      	ldr	r3, [pc, #560]	@ (8001a38 <menu+0x248>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f083 0301 	eor.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8091 	beq.w	8001938 <menu+0x148>
		menuSayac = menuSayac+1;
 8001816:	4b89      	ldr	r3, [pc, #548]	@ (8001a3c <menu+0x24c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b87      	ldr	r3, [pc, #540]	@ (8001a3c <menu+0x24c>)
 8001820:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001822:	4b86      	ldr	r3, [pc, #536]	@ (8001a3c <menu+0x24c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b24      	cmp	r3, #36	@ 0x24
 8001828:	d102      	bne.n	8001830 <menu+0x40>
			menuSayac = 1;
 800182a:	4b84      	ldr	r3, [pc, #528]	@ (8001a3c <menu+0x24c>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001830:	4b82      	ldr	r3, [pc, #520]	@ (8001a3c <menu+0x24c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b12      	cmp	r3, #18
 8001836:	d106      	bne.n	8001846 <menu+0x56>
 8001838:	4b81      	ldr	r3, [pc, #516]	@ (8001a40 <menu+0x250>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <menu+0x56>
			menuSayac = 21;
 8001840:	4b7e      	ldr	r3, [pc, #504]	@ (8001a3c <menu+0x24c>)
 8001842:	2215      	movs	r2, #21
 8001844:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001846:	4b7d      	ldr	r3, [pc, #500]	@ (8001a3c <menu+0x24c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d106      	bne.n	800185c <menu+0x6c>
 800184e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a44 <menu+0x254>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <menu+0x6c>
			menuSayac = 16;
 8001856:	4b79      	ldr	r3, [pc, #484]	@ (8001a3c <menu+0x24c>)
 8001858:	2210      	movs	r2, #16
 800185a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800185c:	4b77      	ldr	r3, [pc, #476]	@ (8001a3c <menu+0x24c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b0d      	cmp	r3, #13
 8001862:	d106      	bne.n	8001872 <menu+0x82>
 8001864:	4b77      	ldr	r3, [pc, #476]	@ (8001a44 <menu+0x254>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d102      	bne.n	8001872 <menu+0x82>
			menuSayac = 16;
 800186c:	4b73      	ldr	r3, [pc, #460]	@ (8001a3c <menu+0x24c>)
 800186e:	2210      	movs	r2, #16
 8001870:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001872:	4b72      	ldr	r3, [pc, #456]	@ (8001a3c <menu+0x24c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b09      	cmp	r3, #9
 8001878:	d106      	bne.n	8001888 <menu+0x98>
 800187a:	4b72      	ldr	r3, [pc, #456]	@ (8001a44 <menu+0x254>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d102      	bne.n	8001888 <menu+0x98>
			menuSayac = 13;
 8001882:	4b6e      	ldr	r3, [pc, #440]	@ (8001a3c <menu+0x24c>)
 8001884:	220d      	movs	r2, #13
 8001886:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001888:	4b6c      	ldr	r3, [pc, #432]	@ (8001a3c <menu+0x24c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b0a      	cmp	r3, #10
 800188e:	d10a      	bne.n	80018a6 <menu+0xb6>
 8001890:	4b6d      	ldr	r3, [pc, #436]	@ (8001a48 <menu+0x258>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <menu+0xb0>
 8001898:	4b6b      	ldr	r3, [pc, #428]	@ (8001a48 <menu+0x258>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d102      	bne.n	80018a6 <menu+0xb6>
			menuSayac = 11;
 80018a0:	4b66      	ldr	r3, [pc, #408]	@ (8001a3c <menu+0x24c>)
 80018a2:	220b      	movs	r2, #11
 80018a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80018a6:	4b65      	ldr	r3, [pc, #404]	@ (8001a3c <menu+0x24c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d10e      	bne.n	80018cc <menu+0xdc>
 80018ae:	4b67      	ldr	r3, [pc, #412]	@ (8001a4c <menu+0x25c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d003      	beq.n	80018be <menu+0xce>
 80018b6:	4b65      	ldr	r3, [pc, #404]	@ (8001a4c <menu+0x25c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d106      	bne.n	80018cc <menu+0xdc>
 80018be:	4b61      	ldr	r3, [pc, #388]	@ (8001a44 <menu+0x254>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d102      	bne.n	80018cc <menu+0xdc>
			menuSayac = 16;
 80018c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a3c <menu+0x24c>)
 80018c8:	2210      	movs	r2, #16
 80018ca:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80018cc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a3c <menu+0x24c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d10e      	bne.n	80018f2 <menu+0x102>
 80018d4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a4c <menu+0x25c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d003      	beq.n	80018e4 <menu+0xf4>
 80018dc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a4c <menu+0x25c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d106      	bne.n	80018f2 <menu+0x102>
 80018e4:	4b57      	ldr	r3, [pc, #348]	@ (8001a44 <menu+0x254>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d102      	bne.n	80018f2 <menu+0x102>
			menuSayac = 13;
 80018ec:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <menu+0x24c>)
 80018ee:	220d      	movs	r2, #13
 80018f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80018f2:	4b52      	ldr	r3, [pc, #328]	@ (8001a3c <menu+0x24c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	d106      	bne.n	8001908 <menu+0x118>
 80018fa:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <menu+0x260>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <menu+0x118>
			menuSayac = 16;
 8001902:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <menu+0x24c>)
 8001904:	2210      	movs	r2, #16
 8001906:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001908:	4b4c      	ldr	r3, [pc, #304]	@ (8001a3c <menu+0x24c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b18      	cmp	r3, #24
 800190e:	d106      	bne.n	800191e <menu+0x12e>
 8001910:	4b4b      	ldr	r3, [pc, #300]	@ (8001a40 <menu+0x250>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <menu+0x12e>
			menuSayac = 26;
 8001918:	4b48      	ldr	r3, [pc, #288]	@ (8001a3c <menu+0x24c>)
 800191a:	221a      	movs	r2, #26
 800191c:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800191e:	4b47      	ldr	r3, [pc, #284]	@ (8001a3c <menu+0x24c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b21      	cmp	r3, #33	@ 0x21
 8001924:	d106      	bne.n	8001934 <menu+0x144>
 8001926:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <menu+0x264>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <menu+0x144>
			menuSayac = 35;
 800192e:	4b43      	ldr	r3, [pc, #268]	@ (8001a3c <menu+0x24c>)
 8001930:	2223      	movs	r2, #35	@ 0x23
 8001932:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001934:	f002 fca2 	bl	800427c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001938:	2108      	movs	r1, #8
 800193a:	4847      	ldr	r0, [pc, #284]	@ (8001a58 <menu+0x268>)
 800193c:	f008 ffac 	bl	800a898 <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	2b01      	cmp	r3, #1
 8001944:	f040 8097 	bne.w	8001a76 <menu+0x286>
 8001948:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <menu+0x248>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 808f 	beq.w	8001a76 <menu+0x286>
		if (menuSayac <= 1) {
 8001958:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <menu+0x24c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d802      	bhi.n	8001966 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <menu+0x24c>)
 8001962:	2224      	movs	r2, #36	@ 0x24
 8001964:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001966:	4b35      	ldr	r3, [pc, #212]	@ (8001a3c <menu+0x24c>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <menu+0x24c>)
 8001970:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001972:	4b32      	ldr	r3, [pc, #200]	@ (8001a3c <menu+0x24c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b14      	cmp	r3, #20
 8001978:	d106      	bne.n	8001988 <menu+0x198>
 800197a:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <menu+0x250>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <menu+0x198>
			menuSayac = 17;
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <menu+0x24c>)
 8001984:	2211      	movs	r2, #17
 8001986:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001988:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <menu+0x24c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d106      	bne.n	800199e <menu+0x1ae>
 8001990:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <menu+0x254>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <menu+0x1ae>
			menuSayac = 7;
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <menu+0x24c>)
 800199a:	2207      	movs	r2, #7
 800199c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <menu+0x24c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d106      	bne.n	80019b4 <menu+0x1c4>
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <menu+0x254>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <menu+0x1c4>
			menuSayac = 12;
 80019ae:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <menu+0x24c>)
 80019b0:	220c      	movs	r2, #12
 80019b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <menu+0x24c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d106      	bne.n	80019ca <menu+0x1da>
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <menu+0x254>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d102      	bne.n	80019ca <menu+0x1da>
			menuSayac = 8;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <menu+0x24c>)
 80019c6:	2208      	movs	r2, #8
 80019c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <menu+0x24c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d10a      	bne.n	80019e8 <menu+0x1f8>
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <menu+0x258>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d003      	beq.n	80019e2 <menu+0x1f2>
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <menu+0x258>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d102      	bne.n	80019e8 <menu+0x1f8>
			menuSayac = 9;
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <menu+0x24c>)
 80019e4:	2209      	movs	r2, #9
 80019e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <menu+0x24c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d10a      	bne.n	8001a06 <menu+0x216>
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <menu+0x25c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d003      	beq.n	8001a00 <menu+0x210>
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <menu+0x25c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d102      	bne.n	8001a06 <menu+0x216>
			menuSayac = 11;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <menu+0x24c>)
 8001a02:	220b      	movs	r2, #11
 8001a04:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <menu+0x24c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	d106      	bne.n	8001a1c <menu+0x22c>
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <menu+0x260>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d102      	bne.n	8001a1c <menu+0x22c>
			menuSayac = 14;
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <menu+0x24c>)
 8001a18:	220e      	movs	r2, #14
 8001a1a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <menu+0x24c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b19      	cmp	r3, #25
 8001a22:	d11b      	bne.n	8001a5c <menu+0x26c>
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <menu+0x250>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d117      	bne.n	8001a5c <menu+0x26c>
			menuSayac = 23;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <menu+0x24c>)
 8001a2e:	2217      	movs	r2, #23
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e013      	b.n	8001a5c <menu+0x26c>
 8001a34:	40010800 	.word	0x40010800
 8001a38:	200016ef 	.word	0x200016ef
 8001a3c:	200016c0 	.word	0x200016c0
 8001a40:	200016cf 	.word	0x200016cf
 8001a44:	200016c8 	.word	0x200016c8
 8001a48:	200016c9 	.word	0x200016c9
 8001a4c:	200016ca 	.word	0x200016ca
 8001a50:	200016cb 	.word	0x200016cb
 8001a54:	200016eb 	.word	0x200016eb
 8001a58:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001a5c:	4bb0      	ldr	r3, [pc, #704]	@ (8001d20 <menu+0x530>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b22      	cmp	r3, #34	@ 0x22
 8001a62:	d106      	bne.n	8001a72 <menu+0x282>
 8001a64:	4baf      	ldr	r3, [pc, #700]	@ (8001d24 <menu+0x534>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <menu+0x282>
			menuSayac = 32;
 8001a6c:	4bac      	ldr	r3, [pc, #688]	@ (8001d20 <menu+0x530>)
 8001a6e:	2220      	movs	r2, #32
 8001a70:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001a72:	f002 fc03 	bl	800427c <bekle>
	}

	if (menuSayac == 0) {
 8001a76:	4baa      	ldr	r3, [pc, #680]	@ (8001d20 <menu+0x530>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001a7e:	4aaa      	ldr	r2, [pc, #680]	@ (8001d28 <menu+0x538>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	2001      	movs	r0, #1
 8001a84:	f007 fbc2 	bl	800920c <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001a88:	4aa8      	ldr	r2, [pc, #672]	@ (8001d2c <menu+0x53c>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f007 fbbd 	bl	800920c <lcd_print>
	}

	if (menuSayac == 1) {
 8001a92:	4ba3      	ldr	r3, [pc, #652]	@ (8001d20 <menu+0x530>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	f040 81f4 	bne.w	8001e84 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001a9c:	4aa4      	ldr	r2, [pc, #656]	@ (8001d30 <menu+0x540>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f007 fbb3 	bl	800920c <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001aa6:	4ba3      	ldr	r3, [pc, #652]	@ (8001d34 <menu+0x544>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d115      	bne.n	8001ada <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001aae:	4aa2      	ldr	r2, [pc, #648]	@ (8001d38 <menu+0x548>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f007 fbaa 	bl	800920c <lcd_print>
			lcd_print(2, 15, "   ");
 8001ab8:	4aa0      	ldr	r2, [pc, #640]	@ (8001d3c <menu+0x54c>)
 8001aba:	210f      	movs	r1, #15
 8001abc:	2002      	movs	r0, #2
 8001abe:	f007 fba5 	bl	800920c <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001ac2:	4b9f      	ldr	r3, [pc, #636]	@ (8001d40 <menu+0x550>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	220a      	movs	r2, #10
 8001ac8:	499e      	ldr	r1, [pc, #632]	@ (8001d44 <menu+0x554>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00c f8e8 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001ad0:	4a9c      	ldr	r2, [pc, #624]	@ (8001d44 <menu+0x554>)
 8001ad2:	210e      	movs	r1, #14
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f007 fb99 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001ada:	4b96      	ldr	r3, [pc, #600]	@ (8001d34 <menu+0x544>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d115      	bne.n	8001b0e <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001ae2:	4a99      	ldr	r2, [pc, #612]	@ (8001d48 <menu+0x558>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f007 fb90 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001aec:	4a97      	ldr	r2, [pc, #604]	@ (8001d4c <menu+0x55c>)
 8001aee:	210f      	movs	r1, #15
 8001af0:	2002      	movs	r0, #2
 8001af2:	f007 fb8b 	bl	800920c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001af6:	4b96      	ldr	r3, [pc, #600]	@ (8001d50 <menu+0x560>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	220a      	movs	r2, #10
 8001afc:	4991      	ldr	r1, [pc, #580]	@ (8001d44 <menu+0x554>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00c f8ce 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001b04:	4a8f      	ldr	r2, [pc, #572]	@ (8001d44 <menu+0x554>)
 8001b06:	210e      	movs	r1, #14
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f007 fb7f 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001b0e:	4b89      	ldr	r3, [pc, #548]	@ (8001d34 <menu+0x544>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d115      	bne.n	8001b42 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001b16:	4a8f      	ldr	r2, [pc, #572]	@ (8001d54 <menu+0x564>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f007 fb76 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001b20:	4a8a      	ldr	r2, [pc, #552]	@ (8001d4c <menu+0x55c>)
 8001b22:	210f      	movs	r1, #15
 8001b24:	2002      	movs	r0, #2
 8001b26:	f007 fb71 	bl	800920c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d58 <menu+0x568>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	220a      	movs	r2, #10
 8001b30:	4984      	ldr	r1, [pc, #528]	@ (8001d44 <menu+0x554>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00c f8b4 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001b38:	4a82      	ldr	r2, [pc, #520]	@ (8001d44 <menu+0x554>)
 8001b3a:	210e      	movs	r1, #14
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f007 fb65 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001b42:	4b7c      	ldr	r3, [pc, #496]	@ (8001d34 <menu+0x544>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d115      	bne.n	8001b76 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001b4a:	4a84      	ldr	r2, [pc, #528]	@ (8001d5c <menu+0x56c>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f007 fb5c 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001b54:	4a7d      	ldr	r2, [pc, #500]	@ (8001d4c <menu+0x55c>)
 8001b56:	210f      	movs	r1, #15
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f007 fb57 	bl	800920c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001b5e:	4b80      	ldr	r3, [pc, #512]	@ (8001d60 <menu+0x570>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	220a      	movs	r2, #10
 8001b64:	4977      	ldr	r1, [pc, #476]	@ (8001d44 <menu+0x554>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00c f89a 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001b6c:	4a75      	ldr	r2, [pc, #468]	@ (8001d44 <menu+0x554>)
 8001b6e:	210e      	movs	r1, #14
 8001b70:	2002      	movs	r0, #2
 8001b72:	f007 fb4b 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001b76:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <menu+0x544>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d115      	bne.n	8001baa <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001b7e:	4a79      	ldr	r2, [pc, #484]	@ (8001d64 <menu+0x574>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	2002      	movs	r0, #2
 8001b84:	f007 fb42 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001b88:	4a70      	ldr	r2, [pc, #448]	@ (8001d4c <menu+0x55c>)
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f007 fb3d 	bl	800920c <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001b92:	4b75      	ldr	r3, [pc, #468]	@ (8001d68 <menu+0x578>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	220a      	movs	r2, #10
 8001b98:	496a      	ldr	r1, [pc, #424]	@ (8001d44 <menu+0x554>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f00c f880 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001ba0:	4a68      	ldr	r2, [pc, #416]	@ (8001d44 <menu+0x554>)
 8001ba2:	210e      	movs	r1, #14
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f007 fb31 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001baa:	4b62      	ldr	r3, [pc, #392]	@ (8001d34 <menu+0x544>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d115      	bne.n	8001bde <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d6c <menu+0x57c>)
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f007 fb28 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001bbc:	4a63      	ldr	r2, [pc, #396]	@ (8001d4c <menu+0x55c>)
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f007 fb23 	bl	800920c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d70 <menu+0x580>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	220a      	movs	r2, #10
 8001bcc:	495d      	ldr	r1, [pc, #372]	@ (8001d44 <menu+0x554>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00c f866 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001bd4:	4a5b      	ldr	r2, [pc, #364]	@ (8001d44 <menu+0x554>)
 8001bd6:	210e      	movs	r1, #14
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f007 fb17 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001bde:	4b55      	ldr	r3, [pc, #340]	@ (8001d34 <menu+0x544>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d115      	bne.n	8001c12 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001be6:	4a63      	ldr	r2, [pc, #396]	@ (8001d74 <menu+0x584>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2002      	movs	r0, #2
 8001bec:	f007 fb0e 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001bf0:	4a56      	ldr	r2, [pc, #344]	@ (8001d4c <menu+0x55c>)
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	f007 fb09 	bl	800920c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8001d78 <menu+0x588>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	220a      	movs	r2, #10
 8001c00:	4950      	ldr	r1, [pc, #320]	@ (8001d44 <menu+0x554>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00c f84c 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001c08:	4a4e      	ldr	r2, [pc, #312]	@ (8001d44 <menu+0x554>)
 8001c0a:	210e      	movs	r1, #14
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f007 fafd 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001c12:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <menu+0x544>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d115      	bne.n	8001c46 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001c1a:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <menu+0x58c>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f007 faf4 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001c24:	4a49      	ldr	r2, [pc, #292]	@ (8001d4c <menu+0x55c>)
 8001c26:	210f      	movs	r1, #15
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f007 faef 	bl	800920c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001c2e:	4b54      	ldr	r3, [pc, #336]	@ (8001d80 <menu+0x590>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	220a      	movs	r2, #10
 8001c34:	4943      	ldr	r1, [pc, #268]	@ (8001d44 <menu+0x554>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00c f832 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001c3c:	4a41      	ldr	r2, [pc, #260]	@ (8001d44 <menu+0x554>)
 8001c3e:	210e      	movs	r1, #14
 8001c40:	2002      	movs	r0, #2
 8001c42:	f007 fae3 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001c46:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <menu+0x544>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d115      	bne.n	8001c7a <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <menu+0x594>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	2002      	movs	r0, #2
 8001c54:	f007 fada 	bl	800920c <lcd_print>
			lcd_print(2, 15, "  ");
 8001c58:	4a3c      	ldr	r2, [pc, #240]	@ (8001d4c <menu+0x55c>)
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f007 fad5 	bl	800920c <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001c62:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <menu+0x598>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	220a      	movs	r2, #10
 8001c68:	4936      	ldr	r1, [pc, #216]	@ (8001d44 <menu+0x554>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00c f818 	bl	800dca0 <itoa>
			lcd_print(2, 14, snum);
 8001c70:	4a34      	ldr	r2, [pc, #208]	@ (8001d44 <menu+0x554>)
 8001c72:	210e      	movs	r1, #14
 8001c74:	2002      	movs	r0, #2
 8001c76:	f007 fac9 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <menu+0x544>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	d115      	bne.n	8001cae <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001c82:	4a42      	ldr	r2, [pc, #264]	@ (8001d8c <menu+0x59c>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	2002      	movs	r0, #2
 8001c88:	f007 fac0 	bl	800920c <lcd_print>
			lcd_print(2, 16, " ");
 8001c8c:	4a40      	ldr	r2, [pc, #256]	@ (8001d90 <menu+0x5a0>)
 8001c8e:	2110      	movs	r1, #16
 8001c90:	2002      	movs	r0, #2
 8001c92:	f007 fabb 	bl	800920c <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001c96:	4b3f      	ldr	r3, [pc, #252]	@ (8001d94 <menu+0x5a4>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	220a      	movs	r2, #10
 8001c9c:	4929      	ldr	r1, [pc, #164]	@ (8001d44 <menu+0x554>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00b fffe 	bl	800dca0 <itoa>
			lcd_print(2, 15, snum);
 8001ca4:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <menu+0x554>)
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f007 faaf 	bl	800920c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <menu+0x544>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d104      	bne.n	8001cc0 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001cb6:	4a38      	ldr	r2, [pc, #224]	@ (8001d98 <menu+0x5a8>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f007 faa6 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4836      	ldr	r0, [pc, #216]	@ (8001d9c <menu+0x5ac>)
 8001cc4:	f008 fde8 	bl	800a898 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d119      	bne.n	8001d02 <menu+0x512>
 8001cce:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <menu+0x5b0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <menu+0x512>
 8001cdc:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <menu+0x5b4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10e      	bne.n	8001d02 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <menu+0x544>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <menu+0x544>)
 8001cee:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <menu+0x544>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b0a      	cmp	r3, #10
 8001cf6:	d902      	bls.n	8001cfe <menu+0x50e>
				hataGostermeSirasi = 0;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <menu+0x544>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cfe:	f002 fabd 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d02:	2104      	movs	r1, #4
 8001d04:	4825      	ldr	r0, [pc, #148]	@ (8001d9c <menu+0x5ac>)
 8001d06:	f008 fdc7 	bl	800a898 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d15e      	bne.n	8001dce <menu+0x5de>
 8001d10:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <menu+0x5b0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d057      	beq.n	8001dce <menu+0x5de>
 8001d1e:	e043      	b.n	8001da8 <menu+0x5b8>
 8001d20:	200016c0 	.word	0x200016c0
 8001d24:	200016eb 	.word	0x200016eb
 8001d28:	20001824 	.word	0x20001824
 8001d2c:	20001838 	.word	0x20001838
 8001d30:	2000184c 	.word	0x2000184c
 8001d34:	200016c2 	.word	0x200016c2
 8001d38:	20001860 	.word	0x20001860
 8001d3c:	0800f424 	.word	0x0800f424
 8001d40:	200016e1 	.word	0x200016e1
 8001d44:	20001260 	.word	0x20001260
 8001d48:	20001874 	.word	0x20001874
 8001d4c:	0800f428 	.word	0x0800f428
 8001d50:	200016e2 	.word	0x200016e2
 8001d54:	20001888 	.word	0x20001888
 8001d58:	200016e3 	.word	0x200016e3
 8001d5c:	2000189c 	.word	0x2000189c
 8001d60:	200016e4 	.word	0x200016e4
 8001d64:	200018b0 	.word	0x200018b0
 8001d68:	200016e5 	.word	0x200016e5
 8001d6c:	200018c4 	.word	0x200018c4
 8001d70:	200016e6 	.word	0x200016e6
 8001d74:	200018d8 	.word	0x200018d8
 8001d78:	200016e7 	.word	0x200016e7
 8001d7c:	200018ec 	.word	0x200018ec
 8001d80:	200016e8 	.word	0x200016e8
 8001d84:	20001900 	.word	0x20001900
 8001d88:	200016e9 	.word	0x200016e9
 8001d8c:	20001914 	.word	0x20001914
 8001d90:	0800f42c 	.word	0x0800f42c
 8001d94:	200016ea 	.word	0x200016ea
 8001d98:	20001928 	.word	0x20001928
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	200016ef 	.word	0x200016ef
 8001da4:	200016cf 	.word	0x200016cf
 8001da8:	4b8a      	ldr	r3, [pc, #552]	@ (8001fd4 <menu+0x7e4>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10e      	bne.n	8001dce <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001db0:	4b89      	ldr	r3, [pc, #548]	@ (8001fd8 <menu+0x7e8>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b87      	ldr	r3, [pc, #540]	@ (8001fd8 <menu+0x7e8>)
 8001dba:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001dbc:	4b86      	ldr	r3, [pc, #536]	@ (8001fd8 <menu+0x7e8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b0b      	cmp	r3, #11
 8001dc2:	d902      	bls.n	8001dca <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001dc4:	4b84      	ldr	r3, [pc, #528]	@ (8001fd8 <menu+0x7e8>)
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001dca:	f002 fa57 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4882      	ldr	r0, [pc, #520]	@ (8001fdc <menu+0x7ec>)
 8001dd2:	f008 fd61 	bl	800a898 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d153      	bne.n	8001e84 <menu+0x694>
 8001ddc:	4b80      	ldr	r3, [pc, #512]	@ (8001fe0 <menu+0x7f0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f083 0301 	eor.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d04c      	beq.n	8001e84 <menu+0x694>
 8001dea:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd8 <menu+0x7e8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b0a      	cmp	r3, #10
 8001df0:	d148      	bne.n	8001e84 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001df2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe4 <menu+0x7f4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe8 <menu+0x7f8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001e00:	4b7a      	ldr	r3, [pc, #488]	@ (8001fec <menu+0x7fc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	4b78      	ldr	r3, [pc, #480]	@ (8001fe8 <menu+0x7f8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001e0e:	4b78      	ldr	r3, [pc, #480]	@ (8001ff0 <menu+0x800>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	4b74      	ldr	r3, [pc, #464]	@ (8001fe8 <menu+0x7f8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001e1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ff4 <menu+0x804>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	4b71      	ldr	r3, [pc, #452]	@ (8001fe8 <menu+0x7f8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001e2a:	4b73      	ldr	r3, [pc, #460]	@ (8001ff8 <menu+0x808>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe8 <menu+0x7f8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001e38:	4b70      	ldr	r3, [pc, #448]	@ (8001ffc <menu+0x80c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <menu+0x7f8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001e46:	4b6e      	ldr	r3, [pc, #440]	@ (8002000 <menu+0x810>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	4b66      	ldr	r3, [pc, #408]	@ (8001fe8 <menu+0x7f8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001e54:	4b6b      	ldr	r3, [pc, #428]	@ (8002004 <menu+0x814>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	4b63      	ldr	r3, [pc, #396]	@ (8001fe8 <menu+0x7f8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001e62:	4b69      	ldr	r3, [pc, #420]	@ (8002008 <menu+0x818>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe8 <menu+0x7f8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001e70:	4b66      	ldr	r3, [pc, #408]	@ (800200c <menu+0x81c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe8 <menu+0x7f8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001e7e:	4b64      	ldr	r3, [pc, #400]	@ (8002010 <menu+0x820>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001e84:	4b63      	ldr	r3, [pc, #396]	@ (8002014 <menu+0x824>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	f040 808e 	bne.w	8001faa <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001e8e:	4a62      	ldr	r2, [pc, #392]	@ (8002018 <menu+0x828>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2001      	movs	r0, #1
 8001e94:	f007 f9ba 	bl	800920c <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001e98:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd4 <menu+0x7e4>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d003      	beq.n	8001ea8 <menu+0x6b8>
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <menu+0x7e4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d104      	bne.n	8001eb2 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001ea8:	4a5c      	ldr	r2, [pc, #368]	@ (800201c <menu+0x82c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2002      	movs	r0, #2
 8001eae:	f007 f9ad 	bl	800920c <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002020 <menu+0x830>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <menu+0x6dc>
 8001eba:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <menu+0x7e4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001ec2:	4a58      	ldr	r2, [pc, #352]	@ (8002024 <menu+0x834>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f007 f9a0 	bl	800920c <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001ecc:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <menu+0x830>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <menu+0x6f6>
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd4 <menu+0x7e4>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001edc:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <menu+0x838>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f007 f993 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	483c      	ldr	r0, [pc, #240]	@ (8001fdc <menu+0x7ec>)
 8001eea:	f008 fcd5 	bl	800a898 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d119      	bne.n	8001f28 <menu+0x738>
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe0 <menu+0x7f0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f083 0301 	eor.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <menu+0x738>
 8001f02:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <menu+0x7e4>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001f0a:	4b45      	ldr	r3, [pc, #276]	@ (8002020 <menu+0x830>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b43      	ldr	r3, [pc, #268]	@ (8002020 <menu+0x830>)
 8001f14:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f16:	4b42      	ldr	r3, [pc, #264]	@ (8002020 <menu+0x830>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d902      	bls.n	8001f24 <menu+0x734>
				calismaSekli = 0;
 8001f1e:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <menu+0x830>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f24:	f002 f9aa 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f28:	2104      	movs	r1, #4
 8001f2a:	482c      	ldr	r0, [pc, #176]	@ (8001fdc <menu+0x7ec>)
 8001f2c:	f008 fcb4 	bl	800a898 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d119      	bne.n	8001f6a <menu+0x77a>
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <menu+0x7f0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d012      	beq.n	8001f6a <menu+0x77a>
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <menu+0x7e4>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10e      	bne.n	8001f6a <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <menu+0x830>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b32      	ldr	r3, [pc, #200]	@ (8002020 <menu+0x830>)
 8001f56:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <menu+0x830>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <menu+0x776>
	    		calismaSekli = 1;
 8001f60:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <menu+0x830>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f66:	f002 f989 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f6a:	2108      	movs	r1, #8
 8001f6c:	481b      	ldr	r0, [pc, #108]	@ (8001fdc <menu+0x7ec>)
 8001f6e:	f008 fc93 	bl	800a898 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d118      	bne.n	8001faa <menu+0x7ba>
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <menu+0x7f0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d011      	beq.n	8001faa <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001f86:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <menu+0x830>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <menu+0x7f8>)
 8001f8c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001f8e:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <menu+0x830>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <menu+0x7b4>
				altLimit = 1;
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <menu+0x83c>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	@ (800202c <menu+0x83c>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <menu+0x7f8>)
 8001fa2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <menu+0x820>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <menu+0x824>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	f040 809c 	bne.w	80020ec <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <menu+0x840>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f007 f927 	bl	800920c <lcd_print>

		if(emniyetCercevesi == 0) {
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <menu+0x844>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13a      	bne.n	800203c <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <menu+0x848>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f007 f91e 	bl	800920c <lcd_print>
 8001fd0:	e03d      	b.n	800204e <menu+0x85e>
 8001fd2:	bf00      	nop
 8001fd4:	200016cf 	.word	0x200016cf
 8001fd8:	200016c2 	.word	0x200016c2
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	200016ef 	.word	0x200016ef
 8001fe4:	200016e1 	.word	0x200016e1
 8001fe8:	200011f0 	.word	0x200011f0
 8001fec:	200016e2 	.word	0x200016e2
 8001ff0:	200016e3 	.word	0x200016e3
 8001ff4:	200016e4 	.word	0x200016e4
 8001ff8:	200016e5 	.word	0x200016e5
 8001ffc:	200016e6 	.word	0x200016e6
 8002000:	200016e7 	.word	0x200016e7
 8002004:	200016e8 	.word	0x200016e8
 8002008:	200016e9 	.word	0x200016e9
 800200c:	200016ea 	.word	0x200016ea
 8002010:	200016ec 	.word	0x200016ec
 8002014:	200016c0 	.word	0x200016c0
 8002018:	2000193c 	.word	0x2000193c
 800201c:	20001950 	.word	0x20001950
 8002020:	200016c1 	.word	0x200016c1
 8002024:	20001964 	.word	0x20001964
 8002028:	20001978 	.word	0x20001978
 800202c:	200016c6 	.word	0x200016c6
 8002030:	2000198c 	.word	0x2000198c
 8002034:	200016c4 	.word	0x200016c4
 8002038:	200019a0 	.word	0x200019a0
		} else if(emniyetCercevesi == 1) {
 800203c:	4b6b      	ldr	r3, [pc, #428]	@ (80021ec <menu+0x9fc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d104      	bne.n	800204e <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8002044:	4a6a      	ldr	r2, [pc, #424]	@ (80021f0 <menu+0xa00>)
 8002046:	2101      	movs	r1, #1
 8002048:	2002      	movs	r0, #2
 800204a:	f007 f8df 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800204e:	2102      	movs	r1, #2
 8002050:	4868      	ldr	r0, [pc, #416]	@ (80021f4 <menu+0xa04>)
 8002052:	f008 fc21 	bl	800a898 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d115      	bne.n	8002088 <menu+0x898>
 800205c:	4b66      	ldr	r3, [pc, #408]	@ (80021f8 <menu+0xa08>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00e      	beq.n	8002088 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <menu+0x9fc>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b5e      	ldr	r3, [pc, #376]	@ (80021ec <menu+0x9fc>)
 8002074:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002076:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <menu+0x9fc>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d902      	bls.n	8002084 <menu+0x894>
				emniyetCercevesi = 0;
 800207e:	4b5b      	ldr	r3, [pc, #364]	@ (80021ec <menu+0x9fc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002084:	f002 f8fa 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002088:	2104      	movs	r1, #4
 800208a:	485a      	ldr	r0, [pc, #360]	@ (80021f4 <menu+0xa04>)
 800208c:	f008 fc04 	bl	800a898 <HAL_GPIO_ReadPin>
 8002090:	4603      	mov	r3, r0
 8002092:	2b01      	cmp	r3, #1
 8002094:	d115      	bne.n	80020c2 <menu+0x8d2>
 8002096:	4b58      	ldr	r3, [pc, #352]	@ (80021f8 <menu+0xa08>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00e      	beq.n	80020c2 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 80020a4:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <menu+0x9fc>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b4f      	ldr	r3, [pc, #316]	@ (80021ec <menu+0x9fc>)
 80020ae:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80020b0:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <menu+0x9fc>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <menu+0x8ce>
		   		emniyetCercevesi = 1;
 80020b8:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <menu+0x9fc>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020be:	f002 f8dd 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020c2:	2108      	movs	r1, #8
 80020c4:	484b      	ldr	r0, [pc, #300]	@ (80021f4 <menu+0xa04>)
 80020c6:	f008 fbe7 	bl	800a898 <HAL_GPIO_ReadPin>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10d      	bne.n	80020ec <menu+0x8fc>
 80020d0:	4b49      	ldr	r3, [pc, #292]	@ (80021f8 <menu+0xa08>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 80020de:	4b43      	ldr	r3, [pc, #268]	@ (80021ec <menu+0x9fc>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <menu+0xa0c>)
 80020e4:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <menu+0xa10>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020ec:	4b45      	ldr	r3, [pc, #276]	@ (8002204 <menu+0xa14>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d166      	bne.n	80021c2 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 80020f4:	4a44      	ldr	r2, [pc, #272]	@ (8002208 <menu+0xa18>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	2001      	movs	r0, #1
 80020fa:	f007 f887 	bl	800920c <lcd_print>

		if(yavaslamaLimit == 0) {
 80020fe:	4b43      	ldr	r3, [pc, #268]	@ (800220c <menu+0xa1c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8002106:	4a42      	ldr	r2, [pc, #264]	@ (8002210 <menu+0xa20>)
 8002108:	2101      	movs	r1, #1
 800210a:	2002      	movs	r0, #2
 800210c:	f007 f87e 	bl	800920c <lcd_print>
 8002110:	e008      	b.n	8002124 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <menu+0xa1c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d104      	bne.n	8002124 <menu+0x934>
			lcd_print(2, 1, aktifText);
 800211a:	4a3e      	ldr	r2, [pc, #248]	@ (8002214 <menu+0xa24>)
 800211c:	2101      	movs	r1, #1
 800211e:	2002      	movs	r0, #2
 8002120:	f007 f874 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002124:	2102      	movs	r1, #2
 8002126:	4833      	ldr	r0, [pc, #204]	@ (80021f4 <menu+0xa04>)
 8002128:	f008 fbb6 	bl	800a898 <HAL_GPIO_ReadPin>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d115      	bne.n	800215e <menu+0x96e>
 8002132:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <menu+0xa08>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002140:	4b32      	ldr	r3, [pc, #200]	@ (800220c <menu+0xa1c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b30      	ldr	r3, [pc, #192]	@ (800220c <menu+0xa1c>)
 800214a:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800214c:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <menu+0xa1c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d902      	bls.n	800215a <menu+0x96a>
				yavaslamaLimit = 0;
 8002154:	4b2d      	ldr	r3, [pc, #180]	@ (800220c <menu+0xa1c>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800215a:	f002 f88f 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800215e:	2104      	movs	r1, #4
 8002160:	4824      	ldr	r0, [pc, #144]	@ (80021f4 <menu+0xa04>)
 8002162:	f008 fb99 	bl	800a898 <HAL_GPIO_ReadPin>
 8002166:	4603      	mov	r3, r0
 8002168:	2b01      	cmp	r3, #1
 800216a:	d115      	bne.n	8002198 <menu+0x9a8>
 800216c:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <menu+0xa08>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f083 0301 	eor.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <menu+0xa1c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <menu+0xa1c>)
 8002184:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <menu+0xa1c>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <menu+0xa1c>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002194:	f002 f872 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002198:	2108      	movs	r1, #8
 800219a:	4816      	ldr	r0, [pc, #88]	@ (80021f4 <menu+0xa04>)
 800219c:	f008 fb7c 	bl	800a898 <HAL_GPIO_ReadPin>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <menu+0x9d2>
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <menu+0xa08>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <menu+0xa1c>)
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <menu+0xa0c>)
 80021ba:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <menu+0xa10>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <menu+0xa14>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	f040 80aa 	bne.w	8002320 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 80021cc:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <menu+0xa28>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	2001      	movs	r0, #1
 80021d2:	f007 f81b 	bl	800920c <lcd_print>

		if(altLimit == 0) {
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <menu+0xa2c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d120      	bne.n	8002220 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 80021de:	4a0c      	ldr	r2, [pc, #48]	@ (8002210 <menu+0xa20>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f007 f812 	bl	800920c <lcd_print>
 80021e8:	e023      	b.n	8002232 <menu+0xa42>
 80021ea:	bf00      	nop
 80021ec:	200016c4 	.word	0x200016c4
 80021f0:	200000ec 	.word	0x200000ec
 80021f4:	40010800 	.word	0x40010800
 80021f8:	200016ef 	.word	0x200016ef
 80021fc:	200011f0 	.word	0x200011f0
 8002200:	200016ec 	.word	0x200016ec
 8002204:	200016c0 	.word	0x200016c0
 8002208:	200019c8 	.word	0x200019c8
 800220c:	200016c5 	.word	0x200016c5
 8002210:	200019a0 	.word	0x200019a0
 8002214:	200019b4 	.word	0x200019b4
 8002218:	200019dc 	.word	0x200019dc
 800221c:	200016c6 	.word	0x200016c6
		} else if(altLimit == 1) {
 8002220:	4b89      	ldr	r3, [pc, #548]	@ (8002448 <menu+0xc58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d104      	bne.n	8002232 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8002228:	4a88      	ldr	r2, [pc, #544]	@ (800244c <menu+0xc5c>)
 800222a:	2101      	movs	r1, #1
 800222c:	2002      	movs	r0, #2
 800222e:	f006 ffed 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002232:	2102      	movs	r1, #2
 8002234:	4886      	ldr	r0, [pc, #536]	@ (8002450 <menu+0xc60>)
 8002236:	f008 fb2f 	bl	800a898 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d119      	bne.n	8002274 <menu+0xa84>
 8002240:	4b84      	ldr	r3, [pc, #528]	@ (8002454 <menu+0xc64>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d012      	beq.n	8002274 <menu+0xa84>
 800224e:	4b82      	ldr	r3, [pc, #520]	@ (8002458 <menu+0xc68>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10e      	bne.n	8002274 <menu+0xa84>
			altLimit = altLimit + 1;
 8002256:	4b7c      	ldr	r3, [pc, #496]	@ (8002448 <menu+0xc58>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b7a      	ldr	r3, [pc, #488]	@ (8002448 <menu+0xc58>)
 8002260:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002262:	4b79      	ldr	r3, [pc, #484]	@ (8002448 <menu+0xc58>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d902      	bls.n	8002270 <menu+0xa80>
				altLimit = 0;
 800226a:	4b77      	ldr	r3, [pc, #476]	@ (8002448 <menu+0xc58>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002270:	f002 f804 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002274:	2104      	movs	r1, #4
 8002276:	4876      	ldr	r0, [pc, #472]	@ (8002450 <menu+0xc60>)
 8002278:	f008 fb0e 	bl	800a898 <HAL_GPIO_ReadPin>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d119      	bne.n	80022b6 <menu+0xac6>
 8002282:	4b74      	ldr	r3, [pc, #464]	@ (8002454 <menu+0xc64>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d012      	beq.n	80022b6 <menu+0xac6>
 8002290:	4b71      	ldr	r3, [pc, #452]	@ (8002458 <menu+0xc68>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10e      	bne.n	80022b6 <menu+0xac6>
			altLimit = altLimit - 1;
 8002298:	4b6b      	ldr	r3, [pc, #428]	@ (8002448 <menu+0xc58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b69      	ldr	r3, [pc, #420]	@ (8002448 <menu+0xc58>)
 80022a2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80022a4:	4b68      	ldr	r3, [pc, #416]	@ (8002448 <menu+0xc58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <menu+0xac2>
		   		altLimit = 1;
 80022ac:	4b66      	ldr	r3, [pc, #408]	@ (8002448 <menu+0xc58>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022b2:	f001 ffe3 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b6:	2108      	movs	r1, #8
 80022b8:	4865      	ldr	r0, [pc, #404]	@ (8002450 <menu+0xc60>)
 80022ba:	f008 faed 	bl	800a898 <HAL_GPIO_ReadPin>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d12d      	bne.n	8002320 <menu+0xb30>
 80022c4:	4b63      	ldr	r3, [pc, #396]	@ (8002454 <menu+0xc64>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d026      	beq.n	8002320 <menu+0xb30>
			eepromData[5] = altLimit;
 80022d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002448 <menu+0xc58>)
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	4b61      	ldr	r3, [pc, #388]	@ (800245c <menu+0xc6c>)
 80022d8:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80022da:	4b5b      	ldr	r3, [pc, #364]	@ (8002448 <menu+0xc58>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d110      	bne.n	8002304 <menu+0xb14>
 80022e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002460 <menu+0xc70>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <menu+0xb02>
 80022ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002460 <menu+0xc70>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d108      	bne.n	8002304 <menu+0xb14>
				kapiTablaAcKonum = 3;
 80022f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002460 <menu+0xc70>)
 80022f4:	2203      	movs	r2, #3
 80022f6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80022f8:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <menu+0xc70>)
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	4b57      	ldr	r3, [pc, #348]	@ (800245c <menu+0xc6c>)
 80022fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002302:	e00a      	b.n	800231a <menu+0xb2a>
			} else if(altLimit == 0) {
 8002304:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <menu+0xc58>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <menu+0xb2a>
				platformSilindirTipi = 0;
 800230c:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <menu+0xc74>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002312:	4b54      	ldr	r3, [pc, #336]	@ (8002464 <menu+0xc74>)
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	4b51      	ldr	r3, [pc, #324]	@ (800245c <menu+0xc6c>)
 8002318:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800231a:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <menu+0xc78>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002320:	4b52      	ldr	r3, [pc, #328]	@ (800246c <menu+0xc7c>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d166      	bne.n	80023f6 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8002328:	4a51      	ldr	r2, [pc, #324]	@ (8002470 <menu+0xc80>)
 800232a:	2101      	movs	r1, #1
 800232c:	2001      	movs	r0, #1
 800232e:	f006 ff6d 	bl	800920c <lcd_print>

		if(basincSalteri == 0) {
 8002332:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <menu+0xc84>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 800233a:	4a4f      	ldr	r2, [pc, #316]	@ (8002478 <menu+0xc88>)
 800233c:	2101      	movs	r1, #1
 800233e:	2002      	movs	r0, #2
 8002340:	f006 ff64 	bl	800920c <lcd_print>
 8002344:	e008      	b.n	8002358 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8002346:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <menu+0xc84>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d104      	bne.n	8002358 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 800234e:	4a3f      	ldr	r2, [pc, #252]	@ (800244c <menu+0xc5c>)
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f006 ff5a 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002358:	2102      	movs	r1, #2
 800235a:	483d      	ldr	r0, [pc, #244]	@ (8002450 <menu+0xc60>)
 800235c:	f008 fa9c 	bl	800a898 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d115      	bne.n	8002392 <menu+0xba2>
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <menu+0xc64>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8002374:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <menu+0xc84>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <menu+0xc84>)
 800237e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002380:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <menu+0xc84>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d902      	bls.n	800238e <menu+0xb9e>
				basincSalteri = 0;
 8002388:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <menu+0xc84>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800238e:	f001 ff75 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002392:	2104      	movs	r1, #4
 8002394:	482e      	ldr	r0, [pc, #184]	@ (8002450 <menu+0xc60>)
 8002396:	f008 fa7f 	bl	800a898 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d115      	bne.n	80023cc <menu+0xbdc>
 80023a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002454 <menu+0xc64>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f083 0301 	eor.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00e      	beq.n	80023cc <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 80023ae:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <menu+0xc84>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <menu+0xc84>)
 80023b8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80023ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <menu+0xc84>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <menu+0xbd8>
		   		basincSalteri = 1;
 80023c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002474 <menu+0xc84>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023c8:	f001 ff58 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023cc:	2108      	movs	r1, #8
 80023ce:	4820      	ldr	r0, [pc, #128]	@ (8002450 <menu+0xc60>)
 80023d0:	f008 fa62 	bl	800a898 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10d      	bne.n	80023f6 <menu+0xc06>
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <menu+0xc64>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <menu+0xc06>
			eepromData[6] = basincSalteri;
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <menu+0xc84>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <menu+0xc6c>)
 80023ee:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <menu+0xc78>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <menu+0xc7c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b07      	cmp	r3, #7
 80023fc:	f040 80a9 	bne.w	8002552 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8002400:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <menu+0xc8c>)
 8002402:	2101      	movs	r1, #1
 8002404:	2001      	movs	r0, #1
 8002406:	f006 ff01 	bl	800920c <lcd_print>

		if(kapiSecimleri == 0) {
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <menu+0xc90>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8002412:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <menu+0xc88>)
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f006 fef8 	bl	800920c <lcd_print>
 800241c:	e03f      	b.n	800249e <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 800241e:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <menu+0xc90>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8002426:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <menu+0xc94>)
 8002428:	2101      	movs	r1, #1
 800242a:	2002      	movs	r0, #2
 800242c:	f006 feee 	bl	800920c <lcd_print>
 8002430:	e035      	b.n	800249e <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8002432:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <menu+0xc90>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d128      	bne.n	800248c <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 800243a:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <menu+0xc98>)
 800243c:	2101      	movs	r1, #1
 800243e:	2002      	movs	r0, #2
 8002440:	f006 fee4 	bl	800920c <lcd_print>
 8002444:	e02b      	b.n	800249e <menu+0xcae>
 8002446:	bf00      	nop
 8002448:	200016c6 	.word	0x200016c6
 800244c:	200019b4 	.word	0x200019b4
 8002450:	40010800 	.word	0x40010800
 8002454:	200016ef 	.word	0x200016ef
 8002458:	200016c1 	.word	0x200016c1
 800245c:	200011f0 	.word	0x200011f0
 8002460:	200016cd 	.word	0x200016cd
 8002464:	200016d3 	.word	0x200016d3
 8002468:	200016ec 	.word	0x200016ec
 800246c:	200016c0 	.word	0x200016c0
 8002470:	200019f0 	.word	0x200019f0
 8002474:	200016c7 	.word	0x200016c7
 8002478:	200019a0 	.word	0x200019a0
 800247c:	20001a04 	.word	0x20001a04
 8002480:	200016c8 	.word	0x200016c8
 8002484:	20001a18 	.word	0x20001a18
 8002488:	20001a2c 	.word	0x20001a2c
		} else if(kapiSecimleri == 3) {
 800248c:	4b76      	ldr	r3, [pc, #472]	@ (8002668 <menu+0xe78>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d104      	bne.n	800249e <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002494:	4a75      	ldr	r2, [pc, #468]	@ (800266c <menu+0xe7c>)
 8002496:	2101      	movs	r1, #1
 8002498:	2002      	movs	r0, #2
 800249a:	f006 feb7 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800249e:	2102      	movs	r1, #2
 80024a0:	4873      	ldr	r0, [pc, #460]	@ (8002670 <menu+0xe80>)
 80024a2:	f008 f9f9 	bl	800a898 <HAL_GPIO_ReadPin>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d115      	bne.n	80024d8 <menu+0xce8>
 80024ac:	4b71      	ldr	r3, [pc, #452]	@ (8002674 <menu+0xe84>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00e      	beq.n	80024d8 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 80024ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002668 <menu+0xe78>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b69      	ldr	r3, [pc, #420]	@ (8002668 <menu+0xe78>)
 80024c4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80024c6:	4b68      	ldr	r3, [pc, #416]	@ (8002668 <menu+0xe78>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d902      	bls.n	80024d4 <menu+0xce4>
				kapiSecimleri = 0;
 80024ce:	4b66      	ldr	r3, [pc, #408]	@ (8002668 <menu+0xe78>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024d4:	f001 fed2 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d8:	2104      	movs	r1, #4
 80024da:	4865      	ldr	r0, [pc, #404]	@ (8002670 <menu+0xe80>)
 80024dc:	f008 f9dc 	bl	800a898 <HAL_GPIO_ReadPin>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d115      	bne.n	8002512 <menu+0xd22>
 80024e6:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <menu+0xe84>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80024f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002668 <menu+0xe78>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002668 <menu+0xe78>)
 80024fe:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002500:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <menu+0xe78>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d902      	bls.n	800250e <menu+0xd1e>
		   		kapiSecimleri = 3;
 8002508:	4b57      	ldr	r3, [pc, #348]	@ (8002668 <menu+0xe78>)
 800250a:	2203      	movs	r2, #3
 800250c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800250e:	f001 feb5 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002512:	2108      	movs	r1, #8
 8002514:	4856      	ldr	r0, [pc, #344]	@ (8002670 <menu+0xe80>)
 8002516:	f008 f9bf 	bl	800a898 <HAL_GPIO_ReadPin>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d118      	bne.n	8002552 <menu+0xd62>
 8002520:	4b54      	ldr	r3, [pc, #336]	@ (8002674 <menu+0xe84>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 800252e:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <menu+0xe78>)
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	4b51      	ldr	r3, [pc, #324]	@ (8002678 <menu+0xe88>)
 8002534:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002536:	4b4c      	ldr	r3, [pc, #304]	@ (8002668 <menu+0xe78>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <menu+0xd5c>
				altLimit = 1;
 800253e:	4b4f      	ldr	r3, [pc, #316]	@ (800267c <menu+0xe8c>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002544:	4b4d      	ldr	r3, [pc, #308]	@ (800267c <menu+0xe8c>)
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <menu+0xe88>)
 800254a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800254c:	4b4c      	ldr	r3, [pc, #304]	@ (8002680 <menu+0xe90>)
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002552:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <menu+0xe94>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b08      	cmp	r3, #8
 8002558:	d167      	bne.n	800262a <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 800255a:	4a4b      	ldr	r2, [pc, #300]	@ (8002688 <menu+0xe98>)
 800255c:	2101      	movs	r1, #1
 800255e:	2001      	movs	r0, #1
 8002560:	f006 fe54 	bl	800920c <lcd_print>

		if(kapiAcTipi == 0) {
 8002564:	4b49      	ldr	r3, [pc, #292]	@ (800268c <menu+0xe9c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 800256c:	4a48      	ldr	r2, [pc, #288]	@ (8002690 <menu+0xea0>)
 800256e:	2101      	movs	r1, #1
 8002570:	2002      	movs	r0, #2
 8002572:	f006 fe4b 	bl	800920c <lcd_print>
 8002576:	e008      	b.n	800258a <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002578:	4b44      	ldr	r3, [pc, #272]	@ (800268c <menu+0xe9c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d104      	bne.n	800258a <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8002580:	4a44      	ldr	r2, [pc, #272]	@ (8002694 <menu+0xea4>)
 8002582:	2101      	movs	r1, #1
 8002584:	2002      	movs	r0, #2
 8002586:	f006 fe41 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800258a:	2102      	movs	r1, #2
 800258c:	4838      	ldr	r0, [pc, #224]	@ (8002670 <menu+0xe80>)
 800258e:	f008 f983 	bl	800a898 <HAL_GPIO_ReadPin>
 8002592:	4603      	mov	r3, r0
 8002594:	2b01      	cmp	r3, #1
 8002596:	d115      	bne.n	80025c4 <menu+0xdd4>
 8002598:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <menu+0xe84>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f083 0301 	eor.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 80025a6:	4b39      	ldr	r3, [pc, #228]	@ (800268c <menu+0xe9c>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b37      	ldr	r3, [pc, #220]	@ (800268c <menu+0xe9c>)
 80025b0:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025b2:	4b36      	ldr	r3, [pc, #216]	@ (800268c <menu+0xe9c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d902      	bls.n	80025c0 <menu+0xdd0>
				kapiAcTipi = 0;
 80025ba:	4b34      	ldr	r3, [pc, #208]	@ (800268c <menu+0xe9c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c0:	f001 fe5c 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c4:	2104      	movs	r1, #4
 80025c6:	482a      	ldr	r0, [pc, #168]	@ (8002670 <menu+0xe80>)
 80025c8:	f008 f966 	bl	800a898 <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <menu+0xe0e>
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <menu+0xe84>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <menu+0xe9c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b28      	ldr	r3, [pc, #160]	@ (800268c <menu+0xe9c>)
 80025ea:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <menu+0xe9c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <menu+0xe0a>
		   		kapiAcTipi = 1;
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <menu+0xe9c>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025fa:	f001 fe3f 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2108      	movs	r1, #8
 8002600:	481b      	ldr	r0, [pc, #108]	@ (8002670 <menu+0xe80>)
 8002602:	f008 f949 	bl	800a898 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10e      	bne.n	800262a <menu+0xe3a>
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <menu+0xe84>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 800261a:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <menu+0xe9c>)
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <menu+0xe88>)
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <menu+0xe90>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800262a:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <menu+0xe94>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b09      	cmp	r3, #9
 8002630:	f040 8092 	bne.w	8002758 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002634:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <menu+0xea8>)
 8002636:	2101      	movs	r1, #1
 8002638:	2001      	movs	r0, #1
 800263a:	f006 fde7 	bl	800920c <lcd_print>

		if(kapi1Tip == 0) {
 800263e:	4b17      	ldr	r3, [pc, #92]	@ (800269c <menu+0xeac>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <menu+0xeb0>)
 8002648:	2101      	movs	r1, #1
 800264a:	2002      	movs	r0, #2
 800264c:	f006 fdde 	bl	800920c <lcd_print>
 8002650:	e033      	b.n	80026ba <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <menu+0xeac>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d126      	bne.n	80026a8 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 800265a:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <menu+0xeb4>)
 800265c:	2101      	movs	r1, #1
 800265e:	2002      	movs	r0, #2
 8002660:	f006 fdd4 	bl	800920c <lcd_print>
 8002664:	e029      	b.n	80026ba <menu+0xeca>
 8002666:	bf00      	nop
 8002668:	200016c8 	.word	0x200016c8
 800266c:	20001a40 	.word	0x20001a40
 8002670:	40010800 	.word	0x40010800
 8002674:	200016ef 	.word	0x200016ef
 8002678:	200011f0 	.word	0x200011f0
 800267c:	200016c6 	.word	0x200016c6
 8002680:	200016ec 	.word	0x200016ec
 8002684:	200016c0 	.word	0x200016c0
 8002688:	20001a54 	.word	0x20001a54
 800268c:	200016cc 	.word	0x200016cc
 8002690:	20001a68 	.word	0x20001a68
 8002694:	20001a7c 	.word	0x20001a7c
 8002698:	20001a90 	.word	0x20001a90
 800269c:	200016c9 	.word	0x200016c9
 80026a0:	20000100 	.word	0x20000100
 80026a4:	20001aa4 	.word	0x20001aa4
		} else if(kapi1Tip == 2) {
 80026a8:	4b73      	ldr	r3, [pc, #460]	@ (8002878 <menu+0x1088>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d104      	bne.n	80026ba <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 80026b0:	4a72      	ldr	r2, [pc, #456]	@ (800287c <menu+0x108c>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	2002      	movs	r0, #2
 80026b6:	f006 fda9 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ba:	2102      	movs	r1, #2
 80026bc:	4870      	ldr	r0, [pc, #448]	@ (8002880 <menu+0x1090>)
 80026be:	f008 f8eb 	bl	800a898 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d115      	bne.n	80026f4 <menu+0xf04>
 80026c8:	4b6e      	ldr	r3, [pc, #440]	@ (8002884 <menu+0x1094>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 80026d6:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <menu+0x1088>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b66      	ldr	r3, [pc, #408]	@ (8002878 <menu+0x1088>)
 80026e0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80026e2:	4b65      	ldr	r3, [pc, #404]	@ (8002878 <menu+0x1088>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <menu+0xf00>
				kapi1Tip = 0;
 80026ea:	4b63      	ldr	r3, [pc, #396]	@ (8002878 <menu+0x1088>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026f0:	f001 fdc4 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f4:	2104      	movs	r1, #4
 80026f6:	4862      	ldr	r0, [pc, #392]	@ (8002880 <menu+0x1090>)
 80026f8:	f008 f8ce 	bl	800a898 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d115      	bne.n	800272e <menu+0xf3e>
 8002702:	4b60      	ldr	r3, [pc, #384]	@ (8002884 <menu+0x1094>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f083 0301 	eor.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <menu+0x1088>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <menu+0x1088>)
 800271a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800271c:	4b56      	ldr	r3, [pc, #344]	@ (8002878 <menu+0x1088>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d902      	bls.n	800272a <menu+0xf3a>
		   		kapi1Tip = 2;
 8002724:	4b54      	ldr	r3, [pc, #336]	@ (8002878 <menu+0x1088>)
 8002726:	2202      	movs	r2, #2
 8002728:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800272a:	f001 fda7 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800272e:	2108      	movs	r1, #8
 8002730:	4853      	ldr	r0, [pc, #332]	@ (8002880 <menu+0x1090>)
 8002732:	f008 f8b1 	bl	800a898 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10d      	bne.n	8002758 <menu+0xf68>
 800273c:	4b51      	ldr	r3, [pc, #324]	@ (8002884 <menu+0x1094>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 800274a:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <menu+0x1088>)
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	4b4e      	ldr	r3, [pc, #312]	@ (8002888 <menu+0x1098>)
 8002750:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002752:	4b4e      	ldr	r3, [pc, #312]	@ (800288c <menu+0x109c>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002758:	4b4d      	ldr	r3, [pc, #308]	@ (8002890 <menu+0x10a0>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d16c      	bne.n	800283a <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002760:	4a4c      	ldr	r2, [pc, #304]	@ (8002894 <menu+0x10a4>)
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f006 fd51 	bl	800920c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800276a:	4a4b      	ldr	r2, [pc, #300]	@ (8002898 <menu+0x10a8>)
 800276c:	2101      	movs	r1, #1
 800276e:	2002      	movs	r0, #2
 8002770:	f006 fd4c 	bl	800920c <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002774:	4b49      	ldr	r3, [pc, #292]	@ (800289c <menu+0x10ac>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	220a      	movs	r2, #10
 800277a:	4949      	ldr	r1, [pc, #292]	@ (80028a0 <menu+0x10b0>)
 800277c:	4618      	mov	r0, r3
 800277e:	f00b fa8f 	bl	800dca0 <itoa>
		lcd_print(2,16,snum);
 8002782:	4a47      	ldr	r2, [pc, #284]	@ (80028a0 <menu+0x10b0>)
 8002784:	2110      	movs	r1, #16
 8002786:	2002      	movs	r0, #2
 8002788:	f006 fd40 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800278c:	2102      	movs	r1, #2
 800278e:	483c      	ldr	r0, [pc, #240]	@ (8002880 <menu+0x1090>)
 8002790:	f008 f882 	bl	800a898 <HAL_GPIO_ReadPin>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d119      	bne.n	80027ce <menu+0xfde>
 800279a:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <menu+0x1094>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	f083 0301 	eor.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <menu+0xfde>
 80027a8:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <menu+0x1088>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10e      	bne.n	80027ce <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 80027b0:	4b3a      	ldr	r3, [pc, #232]	@ (800289c <menu+0x10ac>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b38      	ldr	r3, [pc, #224]	@ (800289c <menu+0x10ac>)
 80027ba:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80027bc:	4b37      	ldr	r3, [pc, #220]	@ (800289c <menu+0x10ac>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d902      	bls.n	80027ca <menu+0xfda>
				kapi1AcSure = 0;
 80027c4:	4b35      	ldr	r3, [pc, #212]	@ (800289c <menu+0x10ac>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027ca:	f001 fd57 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027ce:	2104      	movs	r1, #4
 80027d0:	482b      	ldr	r0, [pc, #172]	@ (8002880 <menu+0x1090>)
 80027d2:	f008 f861 	bl	800a898 <HAL_GPIO_ReadPin>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d119      	bne.n	8002810 <menu+0x1020>
 80027dc:	4b29      	ldr	r3, [pc, #164]	@ (8002884 <menu+0x1094>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <menu+0x1020>
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <menu+0x1088>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10e      	bne.n	8002810 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80027f2:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <menu+0x10ac>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b28      	ldr	r3, [pc, #160]	@ (800289c <menu+0x10ac>)
 80027fc:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80027fe:	4b27      	ldr	r3, [pc, #156]	@ (800289c <menu+0x10ac>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <menu+0x101c>
		   		kapi1AcSure = 5;
 8002806:	4b25      	ldr	r3, [pc, #148]	@ (800289c <menu+0x10ac>)
 8002808:	2205      	movs	r2, #5
 800280a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800280c:	f001 fd36 	bl	800427c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002810:	2108      	movs	r1, #8
 8002812:	481b      	ldr	r0, [pc, #108]	@ (8002880 <menu+0x1090>)
 8002814:	f008 f840 	bl	800a898 <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10d      	bne.n	800283a <menu+0x104a>
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <menu+0x1094>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <menu+0x10ac>)
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <menu+0x1098>)
 8002832:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002834:	4b15      	ldr	r3, [pc, #84]	@ (800288c <menu+0x109c>)
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <menu+0x10a0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b0b      	cmp	r3, #11
 8002840:	f040 8090 	bne.w	8002964 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002844:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <menu+0x10b4>)
 8002846:	2101      	movs	r1, #1
 8002848:	2001      	movs	r0, #1
 800284a:	f006 fcdf 	bl	800920c <lcd_print>

		if(kapi2Tip == 0) {
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <menu+0x10b8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002856:	4a15      	ldr	r2, [pc, #84]	@ (80028ac <menu+0x10bc>)
 8002858:	2101      	movs	r1, #1
 800285a:	2002      	movs	r0, #2
 800285c:	f006 fcd6 	bl	800920c <lcd_print>
 8002860:	e031      	b.n	80028c6 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <menu+0x10b8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d124      	bne.n	80028b4 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 800286a:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <menu+0x10c0>)
 800286c:	2101      	movs	r1, #1
 800286e:	2002      	movs	r0, #2
 8002870:	f006 fccc 	bl	800920c <lcd_print>
 8002874:	e027      	b.n	80028c6 <menu+0x10d6>
 8002876:	bf00      	nop
 8002878:	200016c9 	.word	0x200016c9
 800287c:	20000114 	.word	0x20000114
 8002880:	40010800 	.word	0x40010800
 8002884:	200016ef 	.word	0x200016ef
 8002888:	200011f0 	.word	0x200011f0
 800288c:	200016ec 	.word	0x200016ec
 8002890:	200016c0 	.word	0x200016c0
 8002894:	20001ab8 	.word	0x20001ab8
 8002898:	20001acc 	.word	0x20001acc
 800289c:	200016d9 	.word	0x200016d9
 80028a0:	20001260 	.word	0x20001260
 80028a4:	20001ae0 	.word	0x20001ae0
 80028a8:	200016ca 	.word	0x200016ca
 80028ac:	20000100 	.word	0x20000100
 80028b0:	20001aa4 	.word	0x20001aa4
		} else if(kapi2Tip == 2) {
 80028b4:	4b73      	ldr	r3, [pc, #460]	@ (8002a84 <menu+0x1294>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d104      	bne.n	80028c6 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 80028bc:	4a72      	ldr	r2, [pc, #456]	@ (8002a88 <menu+0x1298>)
 80028be:	2101      	movs	r1, #1
 80028c0:	2002      	movs	r0, #2
 80028c2:	f006 fca3 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c6:	2102      	movs	r1, #2
 80028c8:	4870      	ldr	r0, [pc, #448]	@ (8002a8c <menu+0x129c>)
 80028ca:	f007 ffe5 	bl	800a898 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d115      	bne.n	8002900 <menu+0x1110>
 80028d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002a90 <menu+0x12a0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00e      	beq.n	8002900 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 80028e2:	4b68      	ldr	r3, [pc, #416]	@ (8002a84 <menu+0x1294>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b66      	ldr	r3, [pc, #408]	@ (8002a84 <menu+0x1294>)
 80028ec:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80028ee:	4b65      	ldr	r3, [pc, #404]	@ (8002a84 <menu+0x1294>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d902      	bls.n	80028fc <menu+0x110c>
				kapi2Tip = 0;
 80028f6:	4b63      	ldr	r3, [pc, #396]	@ (8002a84 <menu+0x1294>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028fc:	f001 fcbe 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002900:	2104      	movs	r1, #4
 8002902:	4862      	ldr	r0, [pc, #392]	@ (8002a8c <menu+0x129c>)
 8002904:	f007 ffc8 	bl	800a898 <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d115      	bne.n	800293a <menu+0x114a>
 800290e:	4b60      	ldr	r3, [pc, #384]	@ (8002a90 <menu+0x12a0>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 800291c:	4b59      	ldr	r3, [pc, #356]	@ (8002a84 <menu+0x1294>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	3b01      	subs	r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b57      	ldr	r3, [pc, #348]	@ (8002a84 <menu+0x1294>)
 8002926:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002928:	4b56      	ldr	r3, [pc, #344]	@ (8002a84 <menu+0x1294>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d902      	bls.n	8002936 <menu+0x1146>
		   		kapi2Tip = 2;
 8002930:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <menu+0x1294>)
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002936:	f001 fca1 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800293a:	2108      	movs	r1, #8
 800293c:	4853      	ldr	r0, [pc, #332]	@ (8002a8c <menu+0x129c>)
 800293e:	f007 ffab 	bl	800a898 <HAL_GPIO_ReadPin>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10d      	bne.n	8002964 <menu+0x1174>
 8002948:	4b51      	ldr	r3, [pc, #324]	@ (8002a90 <menu+0x12a0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002956:	4b4b      	ldr	r3, [pc, #300]	@ (8002a84 <menu+0x1294>)
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a94 <menu+0x12a4>)
 800295c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800295e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a98 <menu+0x12a8>)
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002964:	4b4d      	ldr	r3, [pc, #308]	@ (8002a9c <menu+0x12ac>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d16c      	bne.n	8002a46 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 800296c:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa0 <menu+0x12b0>)
 800296e:	2101      	movs	r1, #1
 8002970:	2001      	movs	r0, #1
 8002972:	f006 fc4b 	bl	800920c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002976:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa4 <menu+0x12b4>)
 8002978:	2101      	movs	r1, #1
 800297a:	2002      	movs	r0, #2
 800297c:	f006 fc46 	bl	800920c <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002980:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <menu+0x12b8>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	220a      	movs	r2, #10
 8002986:	4949      	ldr	r1, [pc, #292]	@ (8002aac <menu+0x12bc>)
 8002988:	4618      	mov	r0, r3
 800298a:	f00b f989 	bl	800dca0 <itoa>
		lcd_print(2,16,snum);
 800298e:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <menu+0x12bc>)
 8002990:	2110      	movs	r1, #16
 8002992:	2002      	movs	r0, #2
 8002994:	f006 fc3a 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002998:	2102      	movs	r1, #2
 800299a:	483c      	ldr	r0, [pc, #240]	@ (8002a8c <menu+0x129c>)
 800299c:	f007 ff7c 	bl	800a898 <HAL_GPIO_ReadPin>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d119      	bne.n	80029da <menu+0x11ea>
 80029a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002a90 <menu+0x12a0>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <menu+0x11ea>
 80029b4:	4b33      	ldr	r3, [pc, #204]	@ (8002a84 <menu+0x1294>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 80029bc:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa8 <menu+0x12b8>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b38      	ldr	r3, [pc, #224]	@ (8002aa8 <menu+0x12b8>)
 80029c6:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80029c8:	4b37      	ldr	r3, [pc, #220]	@ (8002aa8 <menu+0x12b8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d902      	bls.n	80029d6 <menu+0x11e6>
				kapi2AcSure = 0;
 80029d0:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <menu+0x12b8>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029d6:	f001 fc51 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029da:	2104      	movs	r1, #4
 80029dc:	482b      	ldr	r0, [pc, #172]	@ (8002a8c <menu+0x129c>)
 80029de:	f007 ff5b 	bl	800a898 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d119      	bne.n	8002a1c <menu+0x122c>
 80029e8:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <menu+0x12a0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <menu+0x122c>
 80029f6:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <menu+0x1294>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10e      	bne.n	8002a1c <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <menu+0x12b8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <menu+0x12b8>)
 8002a08:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a0a:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <menu+0x12b8>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <menu+0x1228>
		   		kapi2AcSure = 5;
 8002a12:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <menu+0x12b8>)
 8002a14:	2205      	movs	r2, #5
 8002a16:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a18:	f001 fc30 	bl	800427c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a1c:	2108      	movs	r1, #8
 8002a1e:	481b      	ldr	r0, [pc, #108]	@ (8002a8c <menu+0x129c>)
 8002a20:	f007 ff3a 	bl	800a898 <HAL_GPIO_ReadPin>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10d      	bne.n	8002a46 <menu+0x1256>
 8002a2a:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <menu+0x12a0>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <menu+0x12b8>)
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <menu+0x12a4>)
 8002a3e:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002a40:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <menu+0x12a8>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <menu+0x12ac>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b0d      	cmp	r3, #13
 8002a4c:	f040 8090 	bne.w	8002b70 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002a50:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <menu+0x12c0>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2001      	movs	r0, #1
 8002a56:	f006 fbd9 	bl	800920c <lcd_print>

		if(kapitablaTip == 0) {
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <menu+0x12c4>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 8002a62:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <menu+0x12c8>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f006 fbd0 	bl	800920c <lcd_print>
 8002a6c:	e031      	b.n	8002ad2 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <menu+0x12c4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d124      	bne.n	8002ac0 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002a76:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <menu+0x12cc>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f006 fbc6 	bl	800920c <lcd_print>
 8002a80:	e027      	b.n	8002ad2 <menu+0x12e2>
 8002a82:	bf00      	nop
 8002a84:	200016ca 	.word	0x200016ca
 8002a88:	20000114 	.word	0x20000114
 8002a8c:	40010800 	.word	0x40010800
 8002a90:	200016ef 	.word	0x200016ef
 8002a94:	200011f0 	.word	0x200011f0
 8002a98:	200016ec 	.word	0x200016ec
 8002a9c:	200016c0 	.word	0x200016c0
 8002aa0:	20001af4 	.word	0x20001af4
 8002aa4:	20001acc 	.word	0x20001acc
 8002aa8:	200016da 	.word	0x200016da
 8002aac:	20001260 	.word	0x20001260
 8002ab0:	20001b08 	.word	0x20001b08
 8002ab4:	200016cb 	.word	0x200016cb
 8002ab8:	20000100 	.word	0x20000100
 8002abc:	20001aa4 	.word	0x20001aa4
		} else if(kapitablaTip == 2) {
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc0 <menu+0x13d0>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d104      	bne.n	8002ad2 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc4 <menu+0x13d4>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	2002      	movs	r0, #2
 8002ace:	f006 fb9d 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	483c      	ldr	r0, [pc, #240]	@ (8002bc8 <menu+0x13d8>)
 8002ad6:	f007 fedf 	bl	800a898 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d115      	bne.n	8002b0c <menu+0x131c>
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bcc <menu+0x13dc>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002aee:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <menu+0x13d0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b32      	ldr	r3, [pc, #200]	@ (8002bc0 <menu+0x13d0>)
 8002af8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002afa:	4b31      	ldr	r3, [pc, #196]	@ (8002bc0 <menu+0x13d0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <menu+0x1318>
				kapitablaTip = 0;
 8002b02:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <menu+0x13d0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b08:	f001 fbb8 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	482e      	ldr	r0, [pc, #184]	@ (8002bc8 <menu+0x13d8>)
 8002b10:	f007 fec2 	bl	800a898 <HAL_GPIO_ReadPin>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d115      	bne.n	8002b46 <menu+0x1356>
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bcc <menu+0x13dc>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <menu+0x13d0>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <menu+0x13d0>)
 8002b32:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <menu+0x13d0>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d902      	bls.n	8002b42 <menu+0x1352>
		   		kapitablaTip = 2;
 8002b3c:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <menu+0x13d0>)
 8002b3e:	2202      	movs	r2, #2
 8002b40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b42:	f001 fb9b 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b46:	2108      	movs	r1, #8
 8002b48:	481f      	ldr	r0, [pc, #124]	@ (8002bc8 <menu+0x13d8>)
 8002b4a:	f007 fea5 	bl	800a898 <HAL_GPIO_ReadPin>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10d      	bne.n	8002b70 <menu+0x1380>
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <menu+0x13dc>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002b62:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <menu+0x13d0>)
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <menu+0x13e0>)
 8002b68:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <menu+0x13e4>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002b70:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <menu+0x13e8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b0e      	cmp	r3, #14
 8002b76:	f040 80a3 	bne.w	8002cc0 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002b7a:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <menu+0x13ec>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f006 fb44 	bl	800920c <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002b84:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <menu+0x13f0>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002b8c:	4a15      	ldr	r2, [pc, #84]	@ (8002be4 <menu+0x13f4>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	2002      	movs	r0, #2
 8002b92:	f006 fb3b 	bl	800920c <lcd_print>
 8002b96:	e034      	b.n	8002c02 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <menu+0x13f0>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002ba0:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <menu+0x13f8>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f006 fb31 	bl	800920c <lcd_print>
 8002baa:	e02a      	b.n	8002c02 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <menu+0x13f0>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d11d      	bne.n	8002bf0 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <menu+0x13fc>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f006 fb27 	bl	800920c <lcd_print>
 8002bbe:	e020      	b.n	8002c02 <menu+0x1412>
 8002bc0:	200016cb 	.word	0x200016cb
 8002bc4:	20000114 	.word	0x20000114
 8002bc8:	40010800 	.word	0x40010800
 8002bcc:	200016ef 	.word	0x200016ef
 8002bd0:	200011f0 	.word	0x200011f0
 8002bd4:	200016ec 	.word	0x200016ec
 8002bd8:	200016c0 	.word	0x200016c0
 8002bdc:	20001b1c 	.word	0x20001b1c
 8002be0:	200016cd 	.word	0x200016cd
 8002be4:	20001b30 	.word	0x20001b30
 8002be8:	20001b44 	.word	0x20001b44
 8002bec:	20001b58 	.word	0x20001b58
		} else if(kapiTablaAcKonum == 3) {
 8002bf0:	4b76      	ldr	r3, [pc, #472]	@ (8002dcc <menu+0x15dc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d104      	bne.n	8002c02 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002bf8:	4a75      	ldr	r2, [pc, #468]	@ (8002dd0 <menu+0x15e0>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f006 fb05 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c02:	2102      	movs	r1, #2
 8002c04:	4873      	ldr	r0, [pc, #460]	@ (8002dd4 <menu+0x15e4>)
 8002c06:	f007 fe47 	bl	800a898 <HAL_GPIO_ReadPin>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d115      	bne.n	8002c3c <menu+0x144c>
 8002c10:	4b71      	ldr	r3, [pc, #452]	@ (8002dd8 <menu+0x15e8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00e      	beq.n	8002c3c <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8002dcc <menu+0x15dc>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b69      	ldr	r3, [pc, #420]	@ (8002dcc <menu+0x15dc>)
 8002c28:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c2a:	4b68      	ldr	r3, [pc, #416]	@ (8002dcc <menu+0x15dc>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002c32:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <menu+0x15dc>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c38:	f001 fb20 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	4865      	ldr	r0, [pc, #404]	@ (8002dd4 <menu+0x15e4>)
 8002c40:	f007 fe2a 	bl	800a898 <HAL_GPIO_ReadPin>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d115      	bne.n	8002c76 <menu+0x1486>
 8002c4a:	4b63      	ldr	r3, [pc, #396]	@ (8002dd8 <menu+0x15e8>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	f083 0301 	eor.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c58:	4b5c      	ldr	r3, [pc, #368]	@ (8002dcc <menu+0x15dc>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b5a      	ldr	r3, [pc, #360]	@ (8002dcc <menu+0x15dc>)
 8002c62:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <menu+0x15dc>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d902      	bls.n	8002c72 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002c6c:	4b57      	ldr	r3, [pc, #348]	@ (8002dcc <menu+0x15dc>)
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c72:	f001 fb03 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c76:	2108      	movs	r1, #8
 8002c78:	4856      	ldr	r0, [pc, #344]	@ (8002dd4 <menu+0x15e4>)
 8002c7a:	f007 fe0d 	bl	800a898 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11d      	bne.n	8002cc0 <menu+0x14d0>
 8002c84:	4b54      	ldr	r3, [pc, #336]	@ (8002dd8 <menu+0x15e8>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002c92:	4b4e      	ldr	r3, [pc, #312]	@ (8002dcc <menu+0x15dc>)
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	4b51      	ldr	r3, [pc, #324]	@ (8002ddc <menu+0x15ec>)
 8002c98:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002dcc <menu+0x15dc>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <menu+0x14bc>
 8002ca4:	4b49      	ldr	r3, [pc, #292]	@ (8002dcc <menu+0x15dc>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d106      	bne.n	8002cba <menu+0x14ca>
				altLimit = 1;
 8002cac:	4b4c      	ldr	r3, [pc, #304]	@ (8002de0 <menu+0x15f0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <menu+0x15f0>)
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	4b49      	ldr	r3, [pc, #292]	@ (8002ddc <menu+0x15ec>)
 8002cb8:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <menu+0x15f4>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002cc0:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <menu+0x15f8>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d16c      	bne.n	8002da2 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002cc8:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <menu+0x15fc>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f006 fa9d 	bl	800920c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002cd2:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <menu+0x1600>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	f006 fa98 	bl	800920c <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002cdc:	4b45      	ldr	r3, [pc, #276]	@ (8002df4 <menu+0x1604>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	220a      	movs	r2, #10
 8002ce2:	4945      	ldr	r1, [pc, #276]	@ (8002df8 <menu+0x1608>)
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00a ffdb 	bl	800dca0 <itoa>
		lcd_print(2,16,snum);
 8002cea:	4a43      	ldr	r2, [pc, #268]	@ (8002df8 <menu+0x1608>)
 8002cec:	2110      	movs	r1, #16
 8002cee:	2002      	movs	r0, #2
 8002cf0:	f006 fa8c 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4837      	ldr	r0, [pc, #220]	@ (8002dd4 <menu+0x15e4>)
 8002cf8:	f007 fdce 	bl	800a898 <HAL_GPIO_ReadPin>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d119      	bne.n	8002d36 <menu+0x1546>
 8002d02:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <menu+0x15e8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d012      	beq.n	8002d36 <menu+0x1546>
 8002d10:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <menu+0x160c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10e      	bne.n	8002d36 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <menu+0x1604>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <menu+0x1604>)
 8002d22:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d24:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <menu+0x1604>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d902      	bls.n	8002d32 <menu+0x1542>
				kapiTablaAcSure = 0;
 8002d2c:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <menu+0x1604>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d32:	f001 faa3 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d36:	2104      	movs	r1, #4
 8002d38:	4826      	ldr	r0, [pc, #152]	@ (8002dd4 <menu+0x15e4>)
 8002d3a:	f007 fdad 	bl	800a898 <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d119      	bne.n	8002d78 <menu+0x1588>
 8002d44:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <menu+0x15e8>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <menu+0x1588>
 8002d52:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <menu+0x160c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10e      	bne.n	8002d78 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d5a:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <menu+0x1604>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <menu+0x1604>)
 8002d64:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d66:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <menu+0x1604>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002d6e:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <menu+0x1604>)
 8002d70:	2205      	movs	r2, #5
 8002d72:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d74:	f001 fa82 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d78:	2108      	movs	r1, #8
 8002d7a:	4816      	ldr	r0, [pc, #88]	@ (8002dd4 <menu+0x15e4>)
 8002d7c:	f007 fd8c 	bl	800a898 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10d      	bne.n	8002da2 <menu+0x15b2>
 8002d86:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <menu+0x15e8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002d94:	4b17      	ldr	r3, [pc, #92]	@ (8002df4 <menu+0x1604>)
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <menu+0x15ec>)
 8002d9a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <menu+0x15f4>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <menu+0x15f8>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	f040 8086 	bne.w	8002eb8 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002dac:	4a14      	ldr	r2, [pc, #80]	@ (8002e00 <menu+0x1610>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	2001      	movs	r0, #1
 8002db2:	f006 fa2b 	bl	800920c <lcd_print>

		if(yukariYavasLimit == 0) {
 8002db6:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <menu+0x1614>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d124      	bne.n	8002e08 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002dbe:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <menu+0x15e0>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f006 fa22 	bl	800920c <lcd_print>
 8002dc8:	e027      	b.n	8002e1a <menu+0x162a>
 8002dca:	bf00      	nop
 8002dcc:	200016cd 	.word	0x200016cd
 8002dd0:	200019a0 	.word	0x200019a0
 8002dd4:	40010800 	.word	0x40010800
 8002dd8:	200016ef 	.word	0x200016ef
 8002ddc:	200011f0 	.word	0x200011f0
 8002de0:	200016c6 	.word	0x200016c6
 8002de4:	200016ec 	.word	0x200016ec
 8002de8:	200016c0 	.word	0x200016c0
 8002dec:	20001b6c 	.word	0x20001b6c
 8002df0:	20001acc 	.word	0x20001acc
 8002df4:	200016db 	.word	0x200016db
 8002df8:	20001260 	.word	0x20001260
 8002dfc:	200016cb 	.word	0x200016cb
 8002e00:	20001b80 	.word	0x20001b80
 8002e04:	200016ce 	.word	0x200016ce
		} else if(yukariYavasLimit == 1) {
 8002e08:	4b84      	ldr	r3, [pc, #528]	@ (800301c <menu+0x182c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d104      	bne.n	8002e1a <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002e10:	4a83      	ldr	r2, [pc, #524]	@ (8003020 <menu+0x1830>)
 8002e12:	2101      	movs	r1, #1
 8002e14:	2002      	movs	r0, #2
 8002e16:	f006 f9f9 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4881      	ldr	r0, [pc, #516]	@ (8003024 <menu+0x1834>)
 8002e1e:	f007 fd3b 	bl	800a898 <HAL_GPIO_ReadPin>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d115      	bne.n	8002e54 <menu+0x1664>
 8002e28:	4b7f      	ldr	r3, [pc, #508]	@ (8003028 <menu+0x1838>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	f083 0301 	eor.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00e      	beq.n	8002e54 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002e36:	4b79      	ldr	r3, [pc, #484]	@ (800301c <menu+0x182c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b77      	ldr	r3, [pc, #476]	@ (800301c <menu+0x182c>)
 8002e40:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002e42:	4b76      	ldr	r3, [pc, #472]	@ (800301c <menu+0x182c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d902      	bls.n	8002e50 <menu+0x1660>
				yukariYavasLimit = 0;
 8002e4a:	4b74      	ldr	r3, [pc, #464]	@ (800301c <menu+0x182c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e50:	f001 fa14 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e54:	2104      	movs	r1, #4
 8002e56:	4873      	ldr	r0, [pc, #460]	@ (8003024 <menu+0x1834>)
 8002e58:	f007 fd1e 	bl	800a898 <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d115      	bne.n	8002e8e <menu+0x169e>
 8002e62:	4b71      	ldr	r3, [pc, #452]	@ (8003028 <menu+0x1838>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	f083 0301 	eor.w	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002e70:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <menu+0x182c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b68      	ldr	r3, [pc, #416]	@ (800301c <menu+0x182c>)
 8002e7a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e7c:	4b67      	ldr	r3, [pc, #412]	@ (800301c <menu+0x182c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002e84:	4b65      	ldr	r3, [pc, #404]	@ (800301c <menu+0x182c>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e8a:	f001 f9f7 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8e:	2108      	movs	r1, #8
 8002e90:	4864      	ldr	r0, [pc, #400]	@ (8003024 <menu+0x1834>)
 8002e92:	f007 fd01 	bl	800a898 <HAL_GPIO_ReadPin>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10d      	bne.n	8002eb8 <menu+0x16c8>
 8002e9c:	4b62      	ldr	r3, [pc, #392]	@ (8003028 <menu+0x1838>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <menu+0x182c>)
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	4b5f      	ldr	r3, [pc, #380]	@ (800302c <menu+0x183c>)
 8002eb0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8003030 <menu+0x1840>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003034 <menu+0x1844>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b11      	cmp	r3, #17
 8002ebe:	f040 808b 	bne.w	8002fd8 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002ec2:	4a5d      	ldr	r2, [pc, #372]	@ (8003038 <menu+0x1848>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f006 f9a0 	bl	800920c <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800303c <menu+0x184c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d105      	bne.n	8002ee0 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8003040 <menu+0x1850>)
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f006 f997 	bl	800920c <lcd_print>
 8002ede:	e012      	b.n	8002f06 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002ee0:	4b56      	ldr	r3, [pc, #344]	@ (800303c <menu+0x184c>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002ee8:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <menu+0x1854>)
 8002eea:	2101      	movs	r1, #1
 8002eec:	2002      	movs	r0, #2
 8002eee:	f006 f98d 	bl	800920c <lcd_print>
 8002ef2:	e008      	b.n	8002f06 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002ef4:	4b51      	ldr	r3, [pc, #324]	@ (800303c <menu+0x184c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002efc:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <menu+0x1858>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f006 f983 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f06:	2102      	movs	r1, #2
 8002f08:	4846      	ldr	r0, [pc, #280]	@ (8003024 <menu+0x1834>)
 8002f0a:	f007 fcc5 	bl	800a898 <HAL_GPIO_ReadPin>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d115      	bne.n	8002f40 <menu+0x1750>
 8002f14:	4b44      	ldr	r3, [pc, #272]	@ (8003028 <menu+0x1838>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f083 0301 	eor.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f22:	4b46      	ldr	r3, [pc, #280]	@ (800303c <menu+0x184c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b44      	ldr	r3, [pc, #272]	@ (800303c <menu+0x184c>)
 8002f2c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f2e:	4b43      	ldr	r3, [pc, #268]	@ (800303c <menu+0x184c>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d902      	bls.n	8002f3c <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002f36:	4b41      	ldr	r3, [pc, #260]	@ (800303c <menu+0x184c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3c:	f001 f99e 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f40:	2104      	movs	r1, #4
 8002f42:	4838      	ldr	r0, [pc, #224]	@ (8003024 <menu+0x1834>)
 8002f44:	f007 fca8 	bl	800a898 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d115      	bne.n	8002f7a <menu+0x178a>
 8002f4e:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <menu+0x1838>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002f5c:	4b37      	ldr	r3, [pc, #220]	@ (800303c <menu+0x184c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b35      	ldr	r3, [pc, #212]	@ (800303c <menu+0x184c>)
 8002f66:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002f68:	4b34      	ldr	r3, [pc, #208]	@ (800303c <menu+0x184c>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d902      	bls.n	8002f76 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002f70:	4b32      	ldr	r3, [pc, #200]	@ (800303c <menu+0x184c>)
 8002f72:	2202      	movs	r2, #2
 8002f74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f76:	f001 f981 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7a:	2108      	movs	r1, #8
 8002f7c:	4829      	ldr	r0, [pc, #164]	@ (8003024 <menu+0x1834>)
 8002f7e:	f007 fc8b 	bl	800a898 <HAL_GPIO_ReadPin>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d127      	bne.n	8002fd8 <menu+0x17e8>
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <menu+0x1838>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002f96:	4b29      	ldr	r3, [pc, #164]	@ (800303c <menu+0x184c>)
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	4b24      	ldr	r3, [pc, #144]	@ (800302c <menu+0x183c>)
 8002f9c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002f9e:	4b27      	ldr	r3, [pc, #156]	@ (800303c <menu+0x184c>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d003      	beq.n	8002fae <menu+0x17be>
 8002fa6:	4b25      	ldr	r3, [pc, #148]	@ (800303c <menu+0x184c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <menu+0x17cc>
				calismaSekli = 0;
 8002fae:	4b27      	ldr	r3, [pc, #156]	@ (800304c <menu+0x185c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <menu+0x185c>)
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800302c <menu+0x183c>)
 8002fba:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <menu+0x184c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002fc4:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <menu+0x1860>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002fca:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <menu+0x1860>)
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	4b17      	ldr	r3, [pc, #92]	@ (800302c <menu+0x183c>)
 8002fd0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	@ (8003030 <menu+0x1840>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <menu+0x1844>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	f040 8097 	bne.w	8003110 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002fe2:	4b16      	ldr	r3, [pc, #88]	@ (800303c <menu+0x184c>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d105      	bne.n	8002ff6 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002fea:	4a1a      	ldr	r2, [pc, #104]	@ (8003054 <menu+0x1864>)
 8002fec:	2101      	movs	r1, #1
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f006 f90c 	bl	800920c <lcd_print>
 8002ff4:	e008      	b.n	8003008 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002ff6:	4b11      	ldr	r3, [pc, #68]	@ (800303c <menu+0x184c>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d104      	bne.n	8003008 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002ffe:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <menu+0x1868>)
 8003000:	2101      	movs	r1, #1
 8003002:	2001      	movs	r0, #1
 8003004:	f006 f902 	bl	800920c <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <menu+0x186c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d127      	bne.n	8003060 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8003010:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <menu+0x1858>)
 8003012:	2101      	movs	r1, #1
 8003014:	2002      	movs	r0, #2
 8003016:	f006 f8f9 	bl	800920c <lcd_print>
 800301a:	e02a      	b.n	8003072 <menu+0x1882>
 800301c:	200016ce 	.word	0x200016ce
 8003020:	200019b4 	.word	0x200019b4
 8003024:	40010800 	.word	0x40010800
 8003028:	200016ef 	.word	0x200016ef
 800302c:	200011f0 	.word	0x200011f0
 8003030:	200016ec 	.word	0x200016ec
 8003034:	200016c0 	.word	0x200016c0
 8003038:	20001b94 	.word	0x20001b94
 800303c:	200016cf 	.word	0x200016cf
 8003040:	20001ba8 	.word	0x20001ba8
 8003044:	20001bbc 	.word	0x20001bbc
 8003048:	200019a0 	.word	0x200019a0
 800304c:	200016c1 	.word	0x200016c1
 8003050:	200016d2 	.word	0x200016d2
 8003054:	20001bd0 	.word	0x20001bd0
 8003058:	20001be4 	.word	0x20001be4
 800305c:	200016d0 	.word	0x200016d0
		} else if(devirmeYukariIleriLimit == 1){
 8003060:	4b79      	ldr	r3, [pc, #484]	@ (8003248 <menu+0x1a58>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d104      	bne.n	8003072 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8003068:	4a78      	ldr	r2, [pc, #480]	@ (800324c <menu+0x1a5c>)
 800306a:	2101      	movs	r1, #1
 800306c:	2002      	movs	r0, #2
 800306e:	f006 f8cd 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003072:	2102      	movs	r1, #2
 8003074:	4876      	ldr	r0, [pc, #472]	@ (8003250 <menu+0x1a60>)
 8003076:	f007 fc0f 	bl	800a898 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d115      	bne.n	80030ac <menu+0x18bc>
 8003080:	4b74      	ldr	r3, [pc, #464]	@ (8003254 <menu+0x1a64>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800308e:	4b6e      	ldr	r3, [pc, #440]	@ (8003248 <menu+0x1a58>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4b6c      	ldr	r3, [pc, #432]	@ (8003248 <menu+0x1a58>)
 8003098:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800309a:	4b6b      	ldr	r3, [pc, #428]	@ (8003248 <menu+0x1a58>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d902      	bls.n	80030a8 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 80030a2:	4b69      	ldr	r3, [pc, #420]	@ (8003248 <menu+0x1a58>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030a8:	f001 f8e8 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ac:	2104      	movs	r1, #4
 80030ae:	4868      	ldr	r0, [pc, #416]	@ (8003250 <menu+0x1a60>)
 80030b0:	f007 fbf2 	bl	800a898 <HAL_GPIO_ReadPin>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d115      	bne.n	80030e6 <menu+0x18f6>
 80030ba:	4b66      	ldr	r3, [pc, #408]	@ (8003254 <menu+0x1a64>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f083 0301 	eor.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80030c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003248 <menu+0x1a58>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003248 <menu+0x1a58>)
 80030d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80030d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003248 <menu+0x1a58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 80030dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003248 <menu+0x1a58>)
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030e2:	f001 f8cb 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030e6:	2108      	movs	r1, #8
 80030e8:	4859      	ldr	r0, [pc, #356]	@ (8003250 <menu+0x1a60>)
 80030ea:	f007 fbd5 	bl	800a898 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10d      	bne.n	8003110 <menu+0x1920>
 80030f4:	4b57      	ldr	r3, [pc, #348]	@ (8003254 <menu+0x1a64>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8003102:	4b51      	ldr	r3, [pc, #324]	@ (8003248 <menu+0x1a58>)
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	4b54      	ldr	r3, [pc, #336]	@ (8003258 <menu+0x1a68>)
 8003108:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800310a:	4b54      	ldr	r3, [pc, #336]	@ (800325c <menu+0x1a6c>)
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <menu+0x1a70>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b13      	cmp	r3, #19
 8003116:	d174      	bne.n	8003202 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8003118:	4b52      	ldr	r3, [pc, #328]	@ (8003264 <menu+0x1a74>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d105      	bne.n	800312c <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8003120:	4a51      	ldr	r2, [pc, #324]	@ (8003268 <menu+0x1a78>)
 8003122:	2101      	movs	r1, #1
 8003124:	2001      	movs	r0, #1
 8003126:	f006 f871 	bl	800920c <lcd_print>
 800312a:	e008      	b.n	800313e <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 800312c:	4b4d      	ldr	r3, [pc, #308]	@ (8003264 <menu+0x1a74>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d104      	bne.n	800313e <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8003134:	4a4d      	ldr	r2, [pc, #308]	@ (800326c <menu+0x1a7c>)
 8003136:	2101      	movs	r1, #1
 8003138:	2001      	movs	r0, #1
 800313a:	f006 f867 	bl	800920c <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 800313e:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <menu+0x1a80>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8003146:	4a4b      	ldr	r2, [pc, #300]	@ (8003274 <menu+0x1a84>)
 8003148:	2101      	movs	r1, #1
 800314a:	2002      	movs	r0, #2
 800314c:	f006 f85e 	bl	800920c <lcd_print>
 8003150:	e008      	b.n	8003164 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8003152:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <menu+0x1a80>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d104      	bne.n	8003164 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 800315a:	4a3c      	ldr	r2, [pc, #240]	@ (800324c <menu+0x1a5c>)
 800315c:	2101      	movs	r1, #1
 800315e:	2002      	movs	r0, #2
 8003160:	f006 f854 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003164:	2102      	movs	r1, #2
 8003166:	483a      	ldr	r0, [pc, #232]	@ (8003250 <menu+0x1a60>)
 8003168:	f007 fb96 	bl	800a898 <HAL_GPIO_ReadPin>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d115      	bne.n	800319e <menu+0x19ae>
 8003172:	4b38      	ldr	r3, [pc, #224]	@ (8003254 <menu+0x1a64>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003180:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <menu+0x1a80>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <menu+0x1a80>)
 800318a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800318c:	4b38      	ldr	r3, [pc, #224]	@ (8003270 <menu+0x1a80>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d902      	bls.n	800319a <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <menu+0x1a80>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800319a:	f001 f86f 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800319e:	2104      	movs	r1, #4
 80031a0:	482b      	ldr	r0, [pc, #172]	@ (8003250 <menu+0x1a60>)
 80031a2:	f007 fb79 	bl	800a898 <HAL_GPIO_ReadPin>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d115      	bne.n	80031d8 <menu+0x19e8>
 80031ac:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <menu+0x1a64>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80031ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003270 <menu+0x1a80>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <menu+0x1a80>)
 80031c4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <menu+0x1a80>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 80031ce:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <menu+0x1a80>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031d4:	f001 f852 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d8:	2108      	movs	r1, #8
 80031da:	481d      	ldr	r0, [pc, #116]	@ (8003250 <menu+0x1a60>)
 80031dc:	f007 fb5c 	bl	800a898 <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10d      	bne.n	8003202 <menu+0x1a12>
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <menu+0x1a64>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <menu+0x1a80>)
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <menu+0x1a68>)
 80031fa:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80031fc:	4b17      	ldr	r3, [pc, #92]	@ (800325c <menu+0x1a6c>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003202:	4b17      	ldr	r3, [pc, #92]	@ (8003260 <menu+0x1a70>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b14      	cmp	r3, #20
 8003208:	f040 809e 	bne.w	8003348 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <menu+0x1a74>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8003214:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <menu+0x1a88>)
 8003216:	2101      	movs	r1, #1
 8003218:	2001      	movs	r0, #1
 800321a:	f005 fff7 	bl	800920c <lcd_print>
 800321e:	e008      	b.n	8003232 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8003220:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <menu+0x1a74>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d104      	bne.n	8003232 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8003228:	4a14      	ldr	r2, [pc, #80]	@ (800327c <menu+0x1a8c>)
 800322a:	2101      	movs	r1, #1
 800322c:	2001      	movs	r0, #1
 800322e:	f005 ffed 	bl	800920c <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8003232:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <menu+0x1a90>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d126      	bne.n	8003288 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <menu+0x1a94>)
 800323c:	2101      	movs	r1, #1
 800323e:	2002      	movs	r0, #2
 8003240:	f005 ffe4 	bl	800920c <lcd_print>
 8003244:	e029      	b.n	800329a <menu+0x1aaa>
 8003246:	bf00      	nop
 8003248:	200016d0 	.word	0x200016d0
 800324c:	200019b4 	.word	0x200019b4
 8003250:	40010800 	.word	0x40010800
 8003254:	200016ef 	.word	0x200016ef
 8003258:	200011f0 	.word	0x200011f0
 800325c:	200016ec 	.word	0x200016ec
 8003260:	200016c0 	.word	0x200016c0
 8003264:	200016cf 	.word	0x200016cf
 8003268:	20001bf8 	.word	0x20001bf8
 800326c:	20001c0c 	.word	0x20001c0c
 8003270:	200016d1 	.word	0x200016d1
 8003274:	200019a0 	.word	0x200019a0
 8003278:	20001c20 	.word	0x20001c20
 800327c:	20001c34 	.word	0x20001c34
 8003280:	200016d2 	.word	0x200016d2
 8003284:	20001c48 	.word	0x20001c48
		} else if(devirmeSilindirTipi == 1) {
 8003288:	4b39      	ldr	r3, [pc, #228]	@ (8003370 <menu+0x1b80>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d104      	bne.n	800329a <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8003290:	4a38      	ldr	r2, [pc, #224]	@ (8003374 <menu+0x1b84>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f005 ffb9 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800329a:	2102      	movs	r1, #2
 800329c:	4836      	ldr	r0, [pc, #216]	@ (8003378 <menu+0x1b88>)
 800329e:	f007 fafb 	bl	800a898 <HAL_GPIO_ReadPin>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d119      	bne.n	80032dc <menu+0x1aec>
 80032a8:	4b34      	ldr	r3, [pc, #208]	@ (800337c <menu+0x1b8c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f083 0301 	eor.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <menu+0x1aec>
 80032b6:	4b32      	ldr	r3, [pc, #200]	@ (8003380 <menu+0x1b90>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d10e      	bne.n	80032dc <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80032be:	4b2c      	ldr	r3, [pc, #176]	@ (8003370 <menu+0x1b80>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <menu+0x1b80>)
 80032c8:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <menu+0x1b80>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d902      	bls.n	80032d8 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 80032d2:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <menu+0x1b80>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032d8:	f000 ffd0 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80032dc:	2104      	movs	r1, #4
 80032de:	4826      	ldr	r0, [pc, #152]	@ (8003378 <menu+0x1b88>)
 80032e0:	f007 fada 	bl	800a898 <HAL_GPIO_ReadPin>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d119      	bne.n	800331e <menu+0x1b2e>
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <menu+0x1b8c>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	f083 0301 	eor.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <menu+0x1b2e>
 80032f8:	4b21      	ldr	r3, [pc, #132]	@ (8003380 <menu+0x1b90>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d10e      	bne.n	800331e <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <menu+0x1b80>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	3b01      	subs	r3, #1
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <menu+0x1b80>)
 800330a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800330c:	4b18      	ldr	r3, [pc, #96]	@ (8003370 <menu+0x1b80>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8003314:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <menu+0x1b80>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800331a:	f000 ffaf 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800331e:	2108      	movs	r1, #8
 8003320:	4815      	ldr	r0, [pc, #84]	@ (8003378 <menu+0x1b88>)
 8003322:	f007 fab9 	bl	800a898 <HAL_GPIO_ReadPin>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10d      	bne.n	8003348 <menu+0x1b58>
 800332c:	4b13      	ldr	r3, [pc, #76]	@ (800337c <menu+0x1b8c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <menu+0x1b80>)
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <menu+0x1b94>)
 8003340:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <menu+0x1b98>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <menu+0x1b9c>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b15      	cmp	r3, #21
 800334e:	f040 8088 	bne.w	8003462 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8003352:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <menu+0x1ba0>)
 8003354:	2101      	movs	r1, #1
 8003356:	2001      	movs	r0, #1
 8003358:	f005 ff58 	bl	800920c <lcd_print>

		if(platformSilindirTipi == 0) {
 800335c:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <menu+0x1ba4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11b      	bne.n	800339c <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8003364:	4a0c      	ldr	r2, [pc, #48]	@ (8003398 <menu+0x1ba8>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f005 ff4f 	bl	800920c <lcd_print>
 800336e:	e01e      	b.n	80033ae <menu+0x1bbe>
 8003370:	200016d2 	.word	0x200016d2
 8003374:	20001c5c 	.word	0x20001c5c
 8003378:	40010800 	.word	0x40010800
 800337c:	200016ef 	.word	0x200016ef
 8003380:	200016cf 	.word	0x200016cf
 8003384:	200011f0 	.word	0x200011f0
 8003388:	200016ec 	.word	0x200016ec
 800338c:	200016c0 	.word	0x200016c0
 8003390:	20001c70 	.word	0x20001c70
 8003394:	200016d3 	.word	0x200016d3
 8003398:	20001c48 	.word	0x20001c48
		} else if(platformSilindirTipi == 1) {
 800339c:	4ba1      	ldr	r3, [pc, #644]	@ (8003624 <menu+0x1e34>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d104      	bne.n	80033ae <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 80033a4:	4aa0      	ldr	r2, [pc, #640]	@ (8003628 <menu+0x1e38>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2002      	movs	r0, #2
 80033aa:	f005 ff2f 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ae:	2102      	movs	r1, #2
 80033b0:	489e      	ldr	r0, [pc, #632]	@ (800362c <menu+0x1e3c>)
 80033b2:	f007 fa71 	bl	800a898 <HAL_GPIO_ReadPin>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d115      	bne.n	80033e8 <menu+0x1bf8>
 80033bc:	4b9c      	ldr	r3, [pc, #624]	@ (8003630 <menu+0x1e40>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 80033ca:	4b96      	ldr	r3, [pc, #600]	@ (8003624 <menu+0x1e34>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b94      	ldr	r3, [pc, #592]	@ (8003624 <menu+0x1e34>)
 80033d4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80033d6:	4b93      	ldr	r3, [pc, #588]	@ (8003624 <menu+0x1e34>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d902      	bls.n	80033e4 <menu+0x1bf4>
				platformSilindirTipi = 0;
 80033de:	4b91      	ldr	r3, [pc, #580]	@ (8003624 <menu+0x1e34>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e4:	f000 ff4a 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e8:	2104      	movs	r1, #4
 80033ea:	4890      	ldr	r0, [pc, #576]	@ (800362c <menu+0x1e3c>)
 80033ec:	f007 fa54 	bl	800a898 <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d115      	bne.n	8003422 <menu+0x1c32>
 80033f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003630 <menu+0x1e40>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003404:	4b87      	ldr	r3, [pc, #540]	@ (8003624 <menu+0x1e34>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b85      	ldr	r3, [pc, #532]	@ (8003624 <menu+0x1e34>)
 800340e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003410:	4b84      	ldr	r3, [pc, #528]	@ (8003624 <menu+0x1e34>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8003418:	4b82      	ldr	r3, [pc, #520]	@ (8003624 <menu+0x1e34>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800341e:	f000 ff2d 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003422:	2108      	movs	r1, #8
 8003424:	4881      	ldr	r0, [pc, #516]	@ (800362c <menu+0x1e3c>)
 8003426:	f007 fa37 	bl	800a898 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d118      	bne.n	8003462 <menu+0x1c72>
 8003430:	4b7f      	ldr	r3, [pc, #508]	@ (8003630 <menu+0x1e40>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d011      	beq.n	8003462 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 800343e:	4b79      	ldr	r3, [pc, #484]	@ (8003624 <menu+0x1e34>)
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	4b7c      	ldr	r3, [pc, #496]	@ (8003634 <menu+0x1e44>)
 8003444:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003446:	4b77      	ldr	r3, [pc, #476]	@ (8003624 <menu+0x1e34>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d106      	bne.n	800345c <menu+0x1c6c>
				altLimit = 1;
 800344e:	4b7a      	ldr	r3, [pc, #488]	@ (8003638 <menu+0x1e48>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003454:	4b78      	ldr	r3, [pc, #480]	@ (8003638 <menu+0x1e48>)
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <menu+0x1e44>)
 800345a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800345c:	4b77      	ldr	r3, [pc, #476]	@ (800363c <menu+0x1e4c>)
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003462:	4b77      	ldr	r3, [pc, #476]	@ (8003640 <menu+0x1e50>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b16      	cmp	r3, #22
 8003468:	d164      	bne.n	8003534 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 800346a:	4a76      	ldr	r2, [pc, #472]	@ (8003644 <menu+0x1e54>)
 800346c:	2101      	movs	r1, #1
 800346e:	2001      	movs	r0, #1
 8003470:	f005 fecc 	bl	800920c <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003474:	4a74      	ldr	r2, [pc, #464]	@ (8003648 <menu+0x1e58>)
 8003476:	2101      	movs	r1, #1
 8003478:	2002      	movs	r0, #2
 800347a:	f005 fec7 	bl	800920c <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800347e:	4b73      	ldr	r3, [pc, #460]	@ (800364c <menu+0x1e5c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	220a      	movs	r2, #10
 8003484:	4972      	ldr	r1, [pc, #456]	@ (8003650 <menu+0x1e60>)
 8003486:	4618      	mov	r0, r3
 8003488:	f00a fc0a 	bl	800dca0 <itoa>
		lcd_print(2,16,snum);
 800348c:	4a70      	ldr	r2, [pc, #448]	@ (8003650 <menu+0x1e60>)
 800348e:	2110      	movs	r1, #16
 8003490:	2002      	movs	r0, #2
 8003492:	f005 febb 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2102      	movs	r1, #2
 8003498:	4864      	ldr	r0, [pc, #400]	@ (800362c <menu+0x1e3c>)
 800349a:	f007 f9fd 	bl	800a898 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d115      	bne.n	80034d0 <menu+0x1ce0>
 80034a4:	4b62      	ldr	r3, [pc, #392]	@ (8003630 <menu+0x1e40>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 80034b2:	4b66      	ldr	r3, [pc, #408]	@ (800364c <menu+0x1e5c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b64      	ldr	r3, [pc, #400]	@ (800364c <menu+0x1e5c>)
 80034bc:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80034be:	4b63      	ldr	r3, [pc, #396]	@ (800364c <menu+0x1e5c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d902      	bls.n	80034cc <menu+0x1cdc>
				yukariValfTmr = 0;
 80034c6:	4b61      	ldr	r3, [pc, #388]	@ (800364c <menu+0x1e5c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034cc:	f000 fed6 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d0:	2104      	movs	r1, #4
 80034d2:	4856      	ldr	r0, [pc, #344]	@ (800362c <menu+0x1e3c>)
 80034d4:	f007 f9e0 	bl	800a898 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d115      	bne.n	800350a <menu+0x1d1a>
 80034de:	4b54      	ldr	r3, [pc, #336]	@ (8003630 <menu+0x1e40>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80034ec:	4b57      	ldr	r3, [pc, #348]	@ (800364c <menu+0x1e5c>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b55      	ldr	r3, [pc, #340]	@ (800364c <menu+0x1e5c>)
 80034f6:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80034f8:	4b54      	ldr	r3, [pc, #336]	@ (800364c <menu+0x1e5c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b06      	cmp	r3, #6
 80034fe:	d902      	bls.n	8003506 <menu+0x1d16>
		   		yukariValfTmr = 5;
 8003500:	4b52      	ldr	r3, [pc, #328]	@ (800364c <menu+0x1e5c>)
 8003502:	2205      	movs	r2, #5
 8003504:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003506:	f000 feb9 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800350a:	2108      	movs	r1, #8
 800350c:	4847      	ldr	r0, [pc, #284]	@ (800362c <menu+0x1e3c>)
 800350e:	f007 f9c3 	bl	800a898 <HAL_GPIO_ReadPin>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10d      	bne.n	8003534 <menu+0x1d44>
 8003518:	4b45      	ldr	r3, [pc, #276]	@ (8003630 <menu+0x1e40>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8003526:	4b49      	ldr	r3, [pc, #292]	@ (800364c <menu+0x1e5c>)
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4b42      	ldr	r3, [pc, #264]	@ (8003634 <menu+0x1e44>)
 800352c:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800352e:	4b43      	ldr	r3, [pc, #268]	@ (800363c <menu+0x1e4c>)
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003534:	4b42      	ldr	r3, [pc, #264]	@ (8003640 <menu+0x1e50>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b17      	cmp	r3, #23
 800353a:	d164      	bne.n	8003606 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 800353c:	4a45      	ldr	r2, [pc, #276]	@ (8003654 <menu+0x1e64>)
 800353e:	2101      	movs	r1, #1
 8003540:	2001      	movs	r0, #1
 8003542:	f005 fe63 	bl	800920c <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003546:	4a40      	ldr	r2, [pc, #256]	@ (8003648 <menu+0x1e58>)
 8003548:	2101      	movs	r1, #1
 800354a:	2002      	movs	r0, #2
 800354c:	f005 fe5e 	bl	800920c <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003550:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <menu+0x1e68>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	220a      	movs	r2, #10
 8003556:	493e      	ldr	r1, [pc, #248]	@ (8003650 <menu+0x1e60>)
 8003558:	4618      	mov	r0, r3
 800355a:	f00a fba1 	bl	800dca0 <itoa>
		lcd_print(2,16,snum);
 800355e:	4a3c      	ldr	r2, [pc, #240]	@ (8003650 <menu+0x1e60>)
 8003560:	2110      	movs	r1, #16
 8003562:	2002      	movs	r0, #2
 8003564:	f005 fe52 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003568:	2102      	movs	r1, #2
 800356a:	4830      	ldr	r0, [pc, #192]	@ (800362c <menu+0x1e3c>)
 800356c:	f007 f994 	bl	800a898 <HAL_GPIO_ReadPin>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d115      	bne.n	80035a2 <menu+0x1db2>
 8003576:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <menu+0x1e40>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	f083 0301 	eor.w	r3, r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003584:	4b34      	ldr	r3, [pc, #208]	@ (8003658 <menu+0x1e68>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	4b32      	ldr	r3, [pc, #200]	@ (8003658 <menu+0x1e68>)
 800358e:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003590:	4b31      	ldr	r3, [pc, #196]	@ (8003658 <menu+0x1e68>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d902      	bls.n	800359e <menu+0x1dae>
				asagiValfTmr = 0;
 8003598:	4b2f      	ldr	r3, [pc, #188]	@ (8003658 <menu+0x1e68>)
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800359e:	f000 fe6d 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035a2:	2104      	movs	r1, #4
 80035a4:	4821      	ldr	r0, [pc, #132]	@ (800362c <menu+0x1e3c>)
 80035a6:	f007 f977 	bl	800a898 <HAL_GPIO_ReadPin>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d115      	bne.n	80035dc <menu+0x1dec>
 80035b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <menu+0x1e40>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	f083 0301 	eor.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 80035be:	4b26      	ldr	r3, [pc, #152]	@ (8003658 <menu+0x1e68>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <menu+0x1e68>)
 80035c8:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80035ca:	4b23      	ldr	r3, [pc, #140]	@ (8003658 <menu+0x1e68>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d902      	bls.n	80035d8 <menu+0x1de8>
		   		asagiValfTmr = 5;
 80035d2:	4b21      	ldr	r3, [pc, #132]	@ (8003658 <menu+0x1e68>)
 80035d4:	2205      	movs	r2, #5
 80035d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035d8:	f000 fe50 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035dc:	2108      	movs	r1, #8
 80035de:	4813      	ldr	r0, [pc, #76]	@ (800362c <menu+0x1e3c>)
 80035e0:	f007 f95a 	bl	800a898 <HAL_GPIO_ReadPin>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10d      	bne.n	8003606 <menu+0x1e16>
 80035ea:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <menu+0x1e40>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80035f8:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <menu+0x1e68>)
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003634 <menu+0x1e44>)
 80035fe:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003600:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <menu+0x1e4c>)
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003606:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <menu+0x1e50>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b18      	cmp	r3, #24
 800360c:	f040 8093 	bne.w	8003736 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003610:	4b12      	ldr	r3, [pc, #72]	@ (800365c <menu+0x1e6c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d125      	bne.n	8003664 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003618:	4a11      	ldr	r2, [pc, #68]	@ (8003660 <menu+0x1e70>)
 800361a:	2101      	movs	r1, #1
 800361c:	2001      	movs	r0, #1
 800361e:	f005 fdf5 	bl	800920c <lcd_print>
 8003622:	e028      	b.n	8003676 <menu+0x1e86>
 8003624:	200016d3 	.word	0x200016d3
 8003628:	20001c5c 	.word	0x20001c5c
 800362c:	40010800 	.word	0x40010800
 8003630:	200016ef 	.word	0x200016ef
 8003634:	200011f0 	.word	0x200011f0
 8003638:	200016c6 	.word	0x200016c6
 800363c:	200016ec 	.word	0x200016ec
 8003640:	200016c0 	.word	0x200016c0
 8003644:	20001c84 	.word	0x20001c84
 8003648:	20001acc 	.word	0x20001acc
 800364c:	200016d4 	.word	0x200016d4
 8003650:	20001260 	.word	0x20001260
 8003654:	20001c98 	.word	0x20001c98
 8003658:	200016d5 	.word	0x200016d5
 800365c:	200016cf 	.word	0x200016cf
 8003660:	20001cac 	.word	0x20001cac
		} else if(devirmeYuruyusSecim == 1) {
 8003664:	4b8c      	ldr	r3, [pc, #560]	@ (8003898 <menu+0x20a8>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d104      	bne.n	8003676 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 800366c:	4a8b      	ldr	r2, [pc, #556]	@ (800389c <menu+0x20ac>)
 800366e:	2101      	movs	r1, #1
 8003670:	2001      	movs	r0, #1
 8003672:	f005 fdcb 	bl	800920c <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003676:	4a8a      	ldr	r2, [pc, #552]	@ (80038a0 <menu+0x20b0>)
 8003678:	2101      	movs	r1, #1
 800367a:	2002      	movs	r0, #2
 800367c:	f005 fdc6 	bl	800920c <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003680:	4b88      	ldr	r3, [pc, #544]	@ (80038a4 <menu+0x20b4>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	220a      	movs	r2, #10
 8003686:	4988      	ldr	r1, [pc, #544]	@ (80038a8 <menu+0x20b8>)
 8003688:	4618      	mov	r0, r3
 800368a:	f00a fb09 	bl	800dca0 <itoa>
		lcd_print(2, 16, snum);
 800368e:	4a86      	ldr	r2, [pc, #536]	@ (80038a8 <menu+0x20b8>)
 8003690:	2110      	movs	r1, #16
 8003692:	2002      	movs	r0, #2
 8003694:	f005 fdba 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003698:	2102      	movs	r1, #2
 800369a:	4884      	ldr	r0, [pc, #528]	@ (80038ac <menu+0x20bc>)
 800369c:	f007 f8fc 	bl	800a898 <HAL_GPIO_ReadPin>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d115      	bne.n	80036d2 <menu+0x1ee2>
 80036a6:	4b82      	ldr	r3, [pc, #520]	@ (80038b0 <menu+0x20c0>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	f083 0301 	eor.w	r3, r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80036b4:	4b7b      	ldr	r3, [pc, #492]	@ (80038a4 <menu+0x20b4>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b79      	ldr	r3, [pc, #484]	@ (80038a4 <menu+0x20b4>)
 80036be:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80036c0:	4b78      	ldr	r3, [pc, #480]	@ (80038a4 <menu+0x20b4>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d902      	bls.n	80036ce <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 80036c8:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <menu+0x20b4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ce:	f000 fdd5 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d2:	2104      	movs	r1, #4
 80036d4:	4875      	ldr	r0, [pc, #468]	@ (80038ac <menu+0x20bc>)
 80036d6:	f007 f8df 	bl	800a898 <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d115      	bne.n	800370c <menu+0x1f1c>
 80036e0:	4b73      	ldr	r3, [pc, #460]	@ (80038b0 <menu+0x20c0>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	f083 0301 	eor.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80036ee:	4b6d      	ldr	r3, [pc, #436]	@ (80038a4 <menu+0x20b4>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b6b      	ldr	r3, [pc, #428]	@ (80038a4 <menu+0x20b4>)
 80036f8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80036fa:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <menu+0x20b4>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8003702:	4b68      	ldr	r3, [pc, #416]	@ (80038a4 <menu+0x20b4>)
 8003704:	2205      	movs	r2, #5
 8003706:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003708:	f000 fdb8 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800370c:	2108      	movs	r1, #8
 800370e:	4867      	ldr	r0, [pc, #412]	@ (80038ac <menu+0x20bc>)
 8003710:	f007 f8c2 	bl	800a898 <HAL_GPIO_ReadPin>
 8003714:	4603      	mov	r3, r0
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10d      	bne.n	8003736 <menu+0x1f46>
 800371a:	4b65      	ldr	r3, [pc, #404]	@ (80038b0 <menu+0x20c0>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d006      	beq.n	8003736 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003728:	4b5e      	ldr	r3, [pc, #376]	@ (80038a4 <menu+0x20b4>)
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <menu+0x20c4>)
 800372e:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003730:	4b61      	ldr	r3, [pc, #388]	@ (80038b8 <menu+0x20c8>)
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003736:	4b61      	ldr	r3, [pc, #388]	@ (80038bc <menu+0x20cc>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b19      	cmp	r3, #25
 800373c:	d172      	bne.n	8003824 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800373e:	4b56      	ldr	r3, [pc, #344]	@ (8003898 <menu+0x20a8>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d105      	bne.n	8003752 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003746:	4a5e      	ldr	r2, [pc, #376]	@ (80038c0 <menu+0x20d0>)
 8003748:	2101      	movs	r1, #1
 800374a:	2001      	movs	r0, #1
 800374c:	f005 fd5e 	bl	800920c <lcd_print>
 8003750:	e008      	b.n	8003764 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8003752:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <menu+0x20a8>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d104      	bne.n	8003764 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 800375a:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <menu+0x20d4>)
 800375c:	2101      	movs	r1, #1
 800375e:	2001      	movs	r0, #1
 8003760:	f005 fd54 	bl	800920c <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003764:	4a4e      	ldr	r2, [pc, #312]	@ (80038a0 <menu+0x20b0>)
 8003766:	2101      	movs	r1, #1
 8003768:	2002      	movs	r0, #2
 800376a:	f005 fd4f 	bl	800920c <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800376e:	4b56      	ldr	r3, [pc, #344]	@ (80038c8 <menu+0x20d8>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	220a      	movs	r2, #10
 8003774:	494c      	ldr	r1, [pc, #304]	@ (80038a8 <menu+0x20b8>)
 8003776:	4618      	mov	r0, r3
 8003778:	f00a fa92 	bl	800dca0 <itoa>
		lcd_print(2,16,snum);
 800377c:	4a4a      	ldr	r2, [pc, #296]	@ (80038a8 <menu+0x20b8>)
 800377e:	2110      	movs	r1, #16
 8003780:	2002      	movs	r0, #2
 8003782:	f005 fd43 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003786:	2102      	movs	r1, #2
 8003788:	4848      	ldr	r0, [pc, #288]	@ (80038ac <menu+0x20bc>)
 800378a:	f007 f885 	bl	800a898 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d115      	bne.n	80037c0 <menu+0x1fd0>
 8003794:	4b46      	ldr	r3, [pc, #280]	@ (80038b0 <menu+0x20c0>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80037a2:	4b49      	ldr	r3, [pc, #292]	@ (80038c8 <menu+0x20d8>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <menu+0x20d8>)
 80037ac:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80037ae:	4b46      	ldr	r3, [pc, #280]	@ (80038c8 <menu+0x20d8>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d902      	bls.n	80037bc <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 80037b6:	4b44      	ldr	r3, [pc, #272]	@ (80038c8 <menu+0x20d8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037bc:	f000 fd5e 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c0:	2104      	movs	r1, #4
 80037c2:	483a      	ldr	r0, [pc, #232]	@ (80038ac <menu+0x20bc>)
 80037c4:	f007 f868 	bl	800a898 <HAL_GPIO_ReadPin>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <menu+0x200a>
 80037ce:	4b38      	ldr	r3, [pc, #224]	@ (80038b0 <menu+0x20c0>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f083 0301 	eor.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80037dc:	4b3a      	ldr	r3, [pc, #232]	@ (80038c8 <menu+0x20d8>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <menu+0x20d8>)
 80037e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80037e8:	4b37      	ldr	r3, [pc, #220]	@ (80038c8 <menu+0x20d8>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b06      	cmp	r3, #6
 80037ee:	d902      	bls.n	80037f6 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80037f0:	4b35      	ldr	r3, [pc, #212]	@ (80038c8 <menu+0x20d8>)
 80037f2:	2205      	movs	r2, #5
 80037f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037f6:	f000 fd41 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037fa:	2108      	movs	r1, #8
 80037fc:	482b      	ldr	r0, [pc, #172]	@ (80038ac <menu+0x20bc>)
 80037fe:	f007 f84b 	bl	800a898 <HAL_GPIO_ReadPin>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10d      	bne.n	8003824 <menu+0x2034>
 8003808:	4b29      	ldr	r3, [pc, #164]	@ (80038b0 <menu+0x20c0>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003816:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <menu+0x20d8>)
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <menu+0x20c4>)
 800381c:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800381e:	4b26      	ldr	r3, [pc, #152]	@ (80038b8 <menu+0x20c8>)
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <menu+0x20cc>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b1a      	cmp	r3, #26
 800382a:	f040 80b7 	bne.w	800399c <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800382e:	4a27      	ldr	r2, [pc, #156]	@ (80038cc <menu+0x20dc>)
 8003830:	2101      	movs	r1, #1
 8003832:	2001      	movs	r0, #1
 8003834:	f005 fcea 	bl	800920c <lcd_print>

		if(makineCalismaTmr > 99) {
 8003838:	4b25      	ldr	r3, [pc, #148]	@ (80038d0 <menu+0x20e0>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b63      	cmp	r3, #99	@ 0x63
 800383e:	d911      	bls.n	8003864 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8003840:	4a17      	ldr	r2, [pc, #92]	@ (80038a0 <menu+0x20b0>)
 8003842:	2101      	movs	r1, #1
 8003844:	2002      	movs	r0, #2
 8003846:	f005 fce1 	bl	800920c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800384a:	4b21      	ldr	r3, [pc, #132]	@ (80038d0 <menu+0x20e0>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	220a      	movs	r2, #10
 8003850:	4915      	ldr	r1, [pc, #84]	@ (80038a8 <menu+0x20b8>)
 8003852:	4618      	mov	r0, r3
 8003854:	f00a fa24 	bl	800dca0 <itoa>
			lcd_print(2,14,snum);
 8003858:	4a13      	ldr	r2, [pc, #76]	@ (80038a8 <menu+0x20b8>)
 800385a:	210e      	movs	r1, #14
 800385c:	2002      	movs	r0, #2
 800385e:	f005 fcd5 	bl	800920c <lcd_print>
 8003862:	e04c      	b.n	80038fe <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003864:	4b1a      	ldr	r3, [pc, #104]	@ (80038d0 <menu+0x20e0>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b09      	cmp	r3, #9
 800386a:	d933      	bls.n	80038d4 <menu+0x20e4>
 800386c:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <menu+0x20e0>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b63      	cmp	r3, #99	@ 0x63
 8003872:	d82f      	bhi.n	80038d4 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003874:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <menu+0x20b0>)
 8003876:	2101      	movs	r1, #1
 8003878:	2002      	movs	r0, #2
 800387a:	f005 fcc7 	bl	800920c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800387e:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <menu+0x20e0>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	220a      	movs	r2, #10
 8003884:	4908      	ldr	r1, [pc, #32]	@ (80038a8 <menu+0x20b8>)
 8003886:	4618      	mov	r0, r3
 8003888:	f00a fa0a 	bl	800dca0 <itoa>
			lcd_print(2, 15, snum);
 800388c:	4a06      	ldr	r2, [pc, #24]	@ (80038a8 <menu+0x20b8>)
 800388e:	210f      	movs	r1, #15
 8003890:	2002      	movs	r0, #2
 8003892:	f005 fcbb 	bl	800920c <lcd_print>
 8003896:	e032      	b.n	80038fe <menu+0x210e>
 8003898:	200016cf 	.word	0x200016cf
 800389c:	20001cc0 	.word	0x20001cc0
 80038a0:	20001acc 	.word	0x20001acc
 80038a4:	200016d6 	.word	0x200016d6
 80038a8:	20001260 	.word	0x20001260
 80038ac:	40010800 	.word	0x40010800
 80038b0:	200016ef 	.word	0x200016ef
 80038b4:	200011f0 	.word	0x200011f0
 80038b8:	200016ec 	.word	0x200016ec
 80038bc:	200016c0 	.word	0x200016c0
 80038c0:	20001cd4 	.word	0x20001cd4
 80038c4:	20001ce8 	.word	0x20001ce8
 80038c8:	200016d7 	.word	0x200016d7
 80038cc:	20001cfc 	.word	0x20001cfc
 80038d0:	200016d8 	.word	0x200016d8
		} else if(makineCalismaTmr <=  9) {
 80038d4:	4b72      	ldr	r3, [pc, #456]	@ (8003aa0 <menu+0x22b0>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b09      	cmp	r3, #9
 80038da:	d810      	bhi.n	80038fe <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 80038dc:	4a71      	ldr	r2, [pc, #452]	@ (8003aa4 <menu+0x22b4>)
 80038de:	2101      	movs	r1, #1
 80038e0:	2002      	movs	r0, #2
 80038e2:	f005 fc93 	bl	800920c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80038e6:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa0 <menu+0x22b0>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	220a      	movs	r2, #10
 80038ec:	496e      	ldr	r1, [pc, #440]	@ (8003aa8 <menu+0x22b8>)
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00a f9d6 	bl	800dca0 <itoa>
			lcd_print(2, 16, snum);
 80038f4:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa8 <menu+0x22b8>)
 80038f6:	2110      	movs	r1, #16
 80038f8:	2002      	movs	r0, #2
 80038fa:	f005 fc87 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fe:	2102      	movs	r1, #2
 8003900:	486a      	ldr	r0, [pc, #424]	@ (8003aac <menu+0x22bc>)
 8003902:	f006 ffc9 	bl	800a898 <HAL_GPIO_ReadPin>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d115      	bne.n	8003938 <menu+0x2148>
 800390c:	4b68      	ldr	r3, [pc, #416]	@ (8003ab0 <menu+0x22c0>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800391a:	4b61      	ldr	r3, [pc, #388]	@ (8003aa0 <menu+0x22b0>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa0 <menu+0x22b0>)
 8003924:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003926:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa0 <menu+0x22b0>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2bb4      	cmp	r3, #180	@ 0xb4
 800392c:	d902      	bls.n	8003934 <menu+0x2144>
				makineCalismaTmr = 0;
 800392e:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa0 <menu+0x22b0>)
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003934:	f000 fca2 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003938:	2104      	movs	r1, #4
 800393a:	485c      	ldr	r0, [pc, #368]	@ (8003aac <menu+0x22bc>)
 800393c:	f006 ffac 	bl	800a898 <HAL_GPIO_ReadPin>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d115      	bne.n	8003972 <menu+0x2182>
 8003946:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <menu+0x22c0>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003954:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <menu+0x22b0>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	3b01      	subs	r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	4b50      	ldr	r3, [pc, #320]	@ (8003aa0 <menu+0x22b0>)
 800395e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003960:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <menu+0x22b0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2bb5      	cmp	r3, #181	@ 0xb5
 8003966:	d902      	bls.n	800396e <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003968:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa0 <menu+0x22b0>)
 800396a:	22b4      	movs	r2, #180	@ 0xb4
 800396c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800396e:	f000 fc85 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003972:	2108      	movs	r1, #8
 8003974:	484d      	ldr	r0, [pc, #308]	@ (8003aac <menu+0x22bc>)
 8003976:	f006 ff8f 	bl	800a898 <HAL_GPIO_ReadPin>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10d      	bne.n	800399c <menu+0x21ac>
 8003980:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab0 <menu+0x22c0>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800398e:	4b44      	ldr	r3, [pc, #272]	@ (8003aa0 <menu+0x22b0>)
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	4b48      	ldr	r3, [pc, #288]	@ (8003ab4 <menu+0x22c4>)
 8003994:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003996:	4b48      	ldr	r3, [pc, #288]	@ (8003ab8 <menu+0x22c8>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800399c:	4b47      	ldr	r3, [pc, #284]	@ (8003abc <menu+0x22cc>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b1b      	cmp	r3, #27
 80039a2:	d166      	bne.n	8003a72 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80039a4:	4a46      	ldr	r2, [pc, #280]	@ (8003ac0 <menu+0x22d0>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	2001      	movs	r0, #1
 80039aa:	f005 fc2f 	bl	800920c <lcd_print>

		if(buzzer == 0) {
 80039ae:	4b45      	ldr	r3, [pc, #276]	@ (8003ac4 <menu+0x22d4>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 80039b6:	4a44      	ldr	r2, [pc, #272]	@ (8003ac8 <menu+0x22d8>)
 80039b8:	2101      	movs	r1, #1
 80039ba:	2002      	movs	r0, #2
 80039bc:	f005 fc26 	bl	800920c <lcd_print>
 80039c0:	e008      	b.n	80039d4 <menu+0x21e4>
		} else if(buzzer == 1) {
 80039c2:	4b40      	ldr	r3, [pc, #256]	@ (8003ac4 <menu+0x22d4>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d104      	bne.n	80039d4 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 80039ca:	4a40      	ldr	r2, [pc, #256]	@ (8003acc <menu+0x22dc>)
 80039cc:	2101      	movs	r1, #1
 80039ce:	2002      	movs	r0, #2
 80039d0:	f005 fc1c 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d4:	2102      	movs	r1, #2
 80039d6:	4835      	ldr	r0, [pc, #212]	@ (8003aac <menu+0x22bc>)
 80039d8:	f006 ff5e 	bl	800a898 <HAL_GPIO_ReadPin>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d115      	bne.n	8003a0e <menu+0x221e>
 80039e2:	4b33      	ldr	r3, [pc, #204]	@ (8003ab0 <menu+0x22c0>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	f083 0301 	eor.w	r3, r3, #1
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <menu+0x221e>
			buzzer = buzzer + 1;
 80039f0:	4b34      	ldr	r3, [pc, #208]	@ (8003ac4 <menu+0x22d4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <menu+0x22d4>)
 80039fa:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80039fc:	4b31      	ldr	r3, [pc, #196]	@ (8003ac4 <menu+0x22d4>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d902      	bls.n	8003a0a <menu+0x221a>
				buzzer = 0;
 8003a04:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac4 <menu+0x22d4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a0a:	f000 fc37 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a0e:	2104      	movs	r1, #4
 8003a10:	4826      	ldr	r0, [pc, #152]	@ (8003aac <menu+0x22bc>)
 8003a12:	f006 ff41 	bl	800a898 <HAL_GPIO_ReadPin>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d115      	bne.n	8003a48 <menu+0x2258>
 8003a1c:	4b24      	ldr	r3, [pc, #144]	@ (8003ab0 <menu+0x22c0>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	f083 0301 	eor.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00e      	beq.n	8003a48 <menu+0x2258>
			buzzer = buzzer - 1;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <menu+0x22d4>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <menu+0x22d4>)
 8003a34:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003a36:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <menu+0x22d4>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <menu+0x2254>
		   		buzzer = 1;
 8003a3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <menu+0x22d4>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a44:	f000 fc1a 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a48:	2108      	movs	r1, #8
 8003a4a:	4818      	ldr	r0, [pc, #96]	@ (8003aac <menu+0x22bc>)
 8003a4c:	f006 ff24 	bl	800a898 <HAL_GPIO_ReadPin>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10d      	bne.n	8003a72 <menu+0x2282>
 8003a56:	4b16      	ldr	r3, [pc, #88]	@ (8003ab0 <menu+0x22c0>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	f083 0301 	eor.w	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <menu+0x2282>
			eepromData[25] = buzzer;
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <menu+0x22d4>)
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <menu+0x22c4>)
 8003a6a:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <menu+0x22c8>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <menu+0x22cc>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b1c      	cmp	r3, #28
 8003a78:	f040 8088 	bne.w	8003b8c <menu+0x239c>
		calismaSayModu = 0;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <menu+0x22e0>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8003a82:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <menu+0x22e4>)
 8003a84:	2101      	movs	r1, #1
 8003a86:	2001      	movs	r0, #1
 8003a88:	f005 fbc0 	bl	800920c <lcd_print>

		if(demoMode == 0) {
 8003a8c:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <menu+0x22e8>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d123      	bne.n	8003adc <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <menu+0x22d8>)
 8003a96:	2101      	movs	r1, #1
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f005 fbb7 	bl	800920c <lcd_print>
 8003a9e:	e026      	b.n	8003aee <menu+0x22fe>
 8003aa0:	200016d8 	.word	0x200016d8
 8003aa4:	20001acc 	.word	0x20001acc
 8003aa8:	20001260 	.word	0x20001260
 8003aac:	40010800 	.word	0x40010800
 8003ab0:	200016ef 	.word	0x200016ef
 8003ab4:	200011f0 	.word	0x200011f0
 8003ab8:	200016ec 	.word	0x200016ec
 8003abc:	200016c0 	.word	0x200016c0
 8003ac0:	20000128 	.word	0x20000128
 8003ac4:	200016dc 	.word	0x200016dc
 8003ac8:	200019a0 	.word	0x200019a0
 8003acc:	200019b4 	.word	0x200019b4
 8003ad0:	200016df 	.word	0x200016df
 8003ad4:	2000013c 	.word	0x2000013c
 8003ad8:	200016de 	.word	0x200016de
		} else if(demoMode == 1) {
 8003adc:	4b80      	ldr	r3, [pc, #512]	@ (8003ce0 <menu+0x24f0>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d104      	bne.n	8003aee <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003ae4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ce4 <menu+0x24f4>)
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f005 fb8f 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aee:	2102      	movs	r1, #2
 8003af0:	487d      	ldr	r0, [pc, #500]	@ (8003ce8 <menu+0x24f8>)
 8003af2:	f006 fed1 	bl	800a898 <HAL_GPIO_ReadPin>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d115      	bne.n	8003b28 <menu+0x2338>
 8003afc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cec <menu+0x24fc>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <menu+0x2338>
			demoMode = demoMode + 1;
 8003b0a:	4b75      	ldr	r3, [pc, #468]	@ (8003ce0 <menu+0x24f0>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b73      	ldr	r3, [pc, #460]	@ (8003ce0 <menu+0x24f0>)
 8003b14:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003b16:	4b72      	ldr	r3, [pc, #456]	@ (8003ce0 <menu+0x24f0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d902      	bls.n	8003b24 <menu+0x2334>
				demoMode = 0;
 8003b1e:	4b70      	ldr	r3, [pc, #448]	@ (8003ce0 <menu+0x24f0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b24:	f000 fbaa 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b28:	2104      	movs	r1, #4
 8003b2a:	486f      	ldr	r0, [pc, #444]	@ (8003ce8 <menu+0x24f8>)
 8003b2c:	f006 feb4 	bl	800a898 <HAL_GPIO_ReadPin>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d115      	bne.n	8003b62 <menu+0x2372>
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <menu+0x24fc>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <menu+0x2372>
			demoMode = demoMode - 1;
 8003b44:	4b66      	ldr	r3, [pc, #408]	@ (8003ce0 <menu+0x24f0>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	4b64      	ldr	r3, [pc, #400]	@ (8003ce0 <menu+0x24f0>)
 8003b4e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003b50:	4b63      	ldr	r3, [pc, #396]	@ (8003ce0 <menu+0x24f0>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <menu+0x236e>
		   		demoMode = 1;
 8003b58:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <menu+0x24f0>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b5e:	f000 fb8d 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b62:	2108      	movs	r1, #8
 8003b64:	4860      	ldr	r0, [pc, #384]	@ (8003ce8 <menu+0x24f8>)
 8003b66:	f006 fe97 	bl	800a898 <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10d      	bne.n	8003b8c <menu+0x239c>
 8003b70:	4b5e      	ldr	r3, [pc, #376]	@ (8003cec <menu+0x24fc>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <menu+0x239c>
			eepromData[26] = demoMode;
 8003b7e:	4b58      	ldr	r3, [pc, #352]	@ (8003ce0 <menu+0x24f0>)
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf0 <menu+0x2500>)
 8003b84:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003b86:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <menu+0x2504>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf8 <menu+0x2508>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b1d      	cmp	r3, #29
 8003b92:	f040 80d5 	bne.w	8003d40 <menu+0x2550>
		finalCount=0;
 8003b96:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <menu+0x250c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003b9c:	4b58      	ldr	r3, [pc, #352]	@ (8003d00 <menu+0x2510>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d135      	bne.n	8003c10 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003ba4:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <menu+0x2514>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f005 fb2f 	bl	800920c <lcd_print>

			if(demoMode == 1) {
 8003bae:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce0 <menu+0x24f0>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d113      	bne.n	8003bde <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003bb6:	4b54      	ldr	r3, [pc, #336]	@ (8003d08 <menu+0x2518>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	1a9a      	subs	r2, r3, r2
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8003cfc <menu+0x250c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8003cfc <menu+0x250c>)
 8003bca:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8003d0c <menu+0x251c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <menu+0x250c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a48      	ldr	r2, [pc, #288]	@ (8003cfc <menu+0x250c>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e012      	b.n	8003c04 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003bde:	4b4c      	ldr	r3, [pc, #304]	@ (8003d10 <menu+0x2520>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	1a9a      	subs	r2, r3, r2
 8003bea:	4b44      	ldr	r3, [pc, #272]	@ (8003cfc <menu+0x250c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a42      	ldr	r2, [pc, #264]	@ (8003cfc <menu+0x250c>)
 8003bf2:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003bf4:	4b47      	ldr	r3, [pc, #284]	@ (8003d14 <menu+0x2524>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b40      	ldr	r3, [pc, #256]	@ (8003cfc <menu+0x250c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a3e      	ldr	r2, [pc, #248]	@ (8003cfc <menu+0x250c>)
 8003c02:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003c04:	4b3d      	ldr	r3, [pc, #244]	@ (8003cfc <menu+0x250c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa89 	bl	8004120 <displayCycleOnLCD>
 8003c0e:	e00d      	b.n	8003c2c <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003c10:	4b3b      	ldr	r3, [pc, #236]	@ (8003d00 <menu+0x2510>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d109      	bne.n	8003c2c <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003c18:	4a3a      	ldr	r2, [pc, #232]	@ (8003d04 <menu+0x2514>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f005 faf5 	bl	800920c <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003c22:	4a3d      	ldr	r2, [pc, #244]	@ (8003d18 <menu+0x2528>)
 8003c24:	2101      	movs	r1, #1
 8003c26:	2002      	movs	r0, #2
 8003c28:	f005 faf0 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	482e      	ldr	r0, [pc, #184]	@ (8003ce8 <menu+0x24f8>)
 8003c30:	f006 fe32 	bl	800a898 <HAL_GPIO_ReadPin>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d115      	bne.n	8003c66 <menu+0x2476>
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <menu+0x24fc>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003c48:	4b2d      	ldr	r3, [pc, #180]	@ (8003d00 <menu+0x2510>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b2b      	ldr	r3, [pc, #172]	@ (8003d00 <menu+0x2510>)
 8003c52:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <menu+0x2510>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d902      	bls.n	8003c62 <menu+0x2472>
				calismaSayModu = 0;
 8003c5c:	4b28      	ldr	r3, [pc, #160]	@ (8003d00 <menu+0x2510>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c62:	f000 fb0b 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c66:	2104      	movs	r1, #4
 8003c68:	481f      	ldr	r0, [pc, #124]	@ (8003ce8 <menu+0x24f8>)
 8003c6a:	f006 fe15 	bl	800a898 <HAL_GPIO_ReadPin>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d115      	bne.n	8003ca0 <menu+0x24b0>
 8003c74:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <menu+0x24fc>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00e      	beq.n	8003ca0 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003c82:	4b1f      	ldr	r3, [pc, #124]	@ (8003d00 <menu+0x2510>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <menu+0x2510>)
 8003c8c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <menu+0x2510>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <menu+0x24ac>
		   		calismaSayModu = 1;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <menu+0x2510>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c9c:	f000 faee 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ca0:	2108      	movs	r1, #8
 8003ca2:	4811      	ldr	r0, [pc, #68]	@ (8003ce8 <menu+0x24f8>)
 8003ca4:	f006 fdf8 	bl	800a898 <HAL_GPIO_ReadPin>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d148      	bne.n	8003d40 <menu+0x2550>
 8003cae:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <menu+0x24fc>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	f083 0301 	eor.w	r3, r3, #1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d041      	beq.n	8003d40 <menu+0x2550>
			if(demoMode == 1) {
 8003cbc:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <menu+0x24f0>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d12b      	bne.n	8003d1c <menu+0x252c>
				eepromData[28] = 0;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <menu+0x2500>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <menu+0x2500>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <menu+0x251c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <menu+0x2518>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e02a      	b.n	8003d34 <menu+0x2544>
 8003cde:	bf00      	nop
 8003ce0:	200016de 	.word	0x200016de
 8003ce4:	200019b4 	.word	0x200019b4
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	200016ef 	.word	0x200016ef
 8003cf0:	200011f0 	.word	0x200011f0
 8003cf4:	200016ec 	.word	0x200016ec
 8003cf8:	200016c0 	.word	0x200016c0
 8003cfc:	200016bc 	.word	0x200016bc
 8003d00:	200016df 	.word	0x200016df
 8003d04:	20001d10 	.word	0x20001d10
 8003d08:	200016bb 	.word	0x200016bb
 8003d0c:	200016b9 	.word	0x200016b9
 8003d10:	200016ba 	.word	0x200016ba
 8003d14:	200016b8 	.word	0x200016b8
 8003d18:	20001d24 	.word	0x20001d24
			} else {
				eepromData[27] = 0;
 8003d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e4c <menu+0x265c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003d22:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <menu+0x265c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003d28:	4b49      	ldr	r3, [pc, #292]	@ (8003e50 <menu+0x2660>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003d2e:	4b49      	ldr	r3, [pc, #292]	@ (8003e54 <menu+0x2664>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003d34:	4b48      	ldr	r3, [pc, #288]	@ (8003e58 <menu+0x2668>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003d3a:	4b48      	ldr	r3, [pc, #288]	@ (8003e5c <menu+0x266c>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003d40:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <menu+0x2670>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b1e      	cmp	r3, #30
 8003d46:	d16a      	bne.n	8003e1e <menu+0x262e>
		calismaSayModu = 0;
 8003d48:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <menu+0x2668>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003d4e:	4a45      	ldr	r2, [pc, #276]	@ (8003e64 <menu+0x2674>)
 8003d50:	2101      	movs	r1, #1
 8003d52:	2001      	movs	r0, #1
 8003d54:	f005 fa5a 	bl	800920c <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003d58:	4a43      	ldr	r2, [pc, #268]	@ (8003e68 <menu+0x2678>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	2002      	movs	r0, #2
 8003d5e:	f005 fa55 	bl	800920c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d62:	2102      	movs	r1, #2
 8003d64:	4841      	ldr	r0, [pc, #260]	@ (8003e6c <menu+0x267c>)
 8003d66:	f006 fd97 	bl	800a898 <HAL_GPIO_ReadPin>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d11c      	bne.n	8003daa <menu+0x25ba>
 8003d70:	4b3f      	ldr	r3, [pc, #252]	@ (8003e70 <menu+0x2680>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	f083 0301 	eor.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e74 <menu+0x2684>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <menu+0x2684>)
 8003d88:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e74 <menu+0x2684>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d902      	bls.n	8003d98 <menu+0x25a8>
				dilSecim = 0;
 8003d92:	4b38      	ldr	r3, [pc, #224]	@ (8003e74 <menu+0x2684>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003d98:	f003 ff70 	bl	8007c7c <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003d9c:	4b35      	ldr	r3, [pc, #212]	@ (8003e74 <menu+0x2684>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f002 fae5 	bl	8006370 <loadMenuTexts>

			bekle();
 8003da6:	f000 fa69 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003daa:	2104      	movs	r1, #4
 8003dac:	482f      	ldr	r0, [pc, #188]	@ (8003e6c <menu+0x267c>)
 8003dae:	f006 fd73 	bl	800a898 <HAL_GPIO_ReadPin>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d11c      	bne.n	8003df2 <menu+0x2602>
 8003db8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <menu+0x2680>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f083 0301 	eor.w	r3, r3, #1
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d015      	beq.n	8003df2 <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <menu+0x2684>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4b29      	ldr	r3, [pc, #164]	@ (8003e74 <menu+0x2684>)
 8003dd0:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003dd2:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <menu+0x2684>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <menu+0x25f0>
		   		dilSecim = 1;
 8003dda:	4b26      	ldr	r3, [pc, #152]	@ (8003e74 <menu+0x2684>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003de0:	f003 ff4c 	bl	8007c7c <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003de4:	4b23      	ldr	r3, [pc, #140]	@ (8003e74 <menu+0x2684>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f002 fac1 	bl	8006370 <loadMenuTexts>

			bekle();
 8003dee:	f000 fa45 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df2:	2108      	movs	r1, #8
 8003df4:	481d      	ldr	r0, [pc, #116]	@ (8003e6c <menu+0x267c>)
 8003df6:	f006 fd4f 	bl	800a898 <HAL_GPIO_ReadPin>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10e      	bne.n	8003e1e <menu+0x262e>
 8003e00:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <menu+0x2680>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f083 0301 	eor.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <menu+0x262e>
			eepromData[33] = dilSecim;
 8003e0e:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <menu+0x2684>)
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <menu+0x265c>)
 8003e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003e18:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <menu+0x266c>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <menu+0x2670>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b1f      	cmp	r3, #31
 8003e24:	f040 8087 	bne.w	8003f36 <menu+0x2746>
		calismaSayModu = 0;
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <menu+0x2668>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003e2e:	4a12      	ldr	r2, [pc, #72]	@ (8003e78 <menu+0x2688>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	2001      	movs	r0, #1
 8003e34:	f005 f9ea 	bl	800920c <lcd_print>

		if(iotMode == 0) {
 8003e38:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <menu+0x268c>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d121      	bne.n	8003e84 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003e40:	4a0f      	ldr	r2, [pc, #60]	@ (8003e80 <menu+0x2690>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	2002      	movs	r0, #2
 8003e46:	f005 f9e1 	bl	800920c <lcd_print>
 8003e4a:	e024      	b.n	8003e96 <menu+0x26a6>
 8003e4c:	200011f0 	.word	0x200011f0
 8003e50:	200016b8 	.word	0x200016b8
 8003e54:	200016ba 	.word	0x200016ba
 8003e58:	200016df 	.word	0x200016df
 8003e5c:	200016ec 	.word	0x200016ec
 8003e60:	200016c0 	.word	0x200016c0
 8003e64:	20001d38 	.word	0x20001d38
 8003e68:	20001d4c 	.word	0x20001d4c
 8003e6c:	40010800 	.word	0x40010800
 8003e70:	200016ef 	.word	0x200016ef
 8003e74:	200016e0 	.word	0x200016e0
 8003e78:	20000150 	.word	0x20000150
 8003e7c:	200016eb 	.word	0x200016eb
 8003e80:	200019a0 	.word	0x200019a0
		} else if(iotMode == 1) {
 8003e84:	4b99      	ldr	r3, [pc, #612]	@ (80040ec <menu+0x28fc>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d104      	bne.n	8003e96 <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003e8c:	4a98      	ldr	r2, [pc, #608]	@ (80040f0 <menu+0x2900>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2002      	movs	r0, #2
 8003e92:	f005 f9bb 	bl	800920c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e96:	2102      	movs	r1, #2
 8003e98:	4896      	ldr	r0, [pc, #600]	@ (80040f4 <menu+0x2904>)
 8003e9a:	f006 fcfd 	bl	800a898 <HAL_GPIO_ReadPin>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d115      	bne.n	8003ed0 <menu+0x26e0>
 8003ea4:	4b94      	ldr	r3, [pc, #592]	@ (80040f8 <menu+0x2908>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00e      	beq.n	8003ed0 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003eb2:	4b8e      	ldr	r3, [pc, #568]	@ (80040ec <menu+0x28fc>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b8c      	ldr	r3, [pc, #560]	@ (80040ec <menu+0x28fc>)
 8003ebc:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80040ec <menu+0x28fc>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d902      	bls.n	8003ecc <menu+0x26dc>
				iotMode = 0;
 8003ec6:	4b89      	ldr	r3, [pc, #548]	@ (80040ec <menu+0x28fc>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003ecc:	f000 f9d6 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	4888      	ldr	r0, [pc, #544]	@ (80040f4 <menu+0x2904>)
 8003ed4:	f006 fce0 	bl	800a898 <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d115      	bne.n	8003f0a <menu+0x271a>
 8003ede:	4b86      	ldr	r3, [pc, #536]	@ (80040f8 <menu+0x2908>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	f083 0301 	eor.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <menu+0x271a>
			iotMode = iotMode - 1;
 8003eec:	4b7f      	ldr	r3, [pc, #508]	@ (80040ec <menu+0x28fc>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80040ec <menu+0x28fc>)
 8003ef6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80040ec <menu+0x28fc>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <menu+0x2716>
		   		iotMode = 1;
 8003f00:	4b7a      	ldr	r3, [pc, #488]	@ (80040ec <menu+0x28fc>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003f06:	f000 f9b9 	bl	800427c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	4879      	ldr	r0, [pc, #484]	@ (80040f4 <menu+0x2904>)
 8003f0e:	f006 fcc3 	bl	800a898 <HAL_GPIO_ReadPin>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10e      	bne.n	8003f36 <menu+0x2746>
 8003f18:	4b77      	ldr	r3, [pc, #476]	@ (80040f8 <menu+0x2908>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <menu+0x2746>
			eepromData[48] = iotMode;
 8003f26:	4b71      	ldr	r3, [pc, #452]	@ (80040ec <menu+0x28fc>)
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	4b74      	ldr	r3, [pc, #464]	@ (80040fc <menu+0x290c>)
 8003f2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003f30:	4b73      	ldr	r3, [pc, #460]	@ (8004100 <menu+0x2910>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003f36:	4b73      	ldr	r3, [pc, #460]	@ (8004104 <menu+0x2914>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d127      	bne.n	8003f8e <menu+0x279e>
		calismaSayModu = 0;
 8003f3e:	4b72      	ldr	r3, [pc, #456]	@ (8004108 <menu+0x2918>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003f44:	4a71      	ldr	r2, [pc, #452]	@ (800410c <menu+0x291c>)
 8003f46:	2101      	movs	r1, #1
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f005 f95f 	bl	800920c <lcd_print>

		convertArrays(1);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f7fc fcaa 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003f54:	2032      	movs	r0, #50	@ 0x32
 8003f56:	f005 fecf 	bl	8009cf8 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fd fbec 	bl	8001738 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f60:	2102      	movs	r1, #2
 8003f62:	4864      	ldr	r0, [pc, #400]	@ (80040f4 <menu+0x2904>)
 8003f64:	f006 fc98 	bl	800a898 <HAL_GPIO_ReadPin>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10f      	bne.n	8003f8e <menu+0x279e>
 8003f6e:	2104      	movs	r1, #4
 8003f70:	4860      	ldr	r0, [pc, #384]	@ (80040f4 <menu+0x2904>)
 8003f72:	f006 fc91 	bl	800a898 <HAL_GPIO_ReadPin>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <menu+0x279e>
 8003f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80040f8 <menu+0x2908>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f083 0301 	eor.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003f8a:	f004 f8eb 	bl	8008164 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004104 <menu+0x2914>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b21      	cmp	r3, #33	@ 0x21
 8003f94:	d12b      	bne.n	8003fee <menu+0x27fe>
		calismaSayModu = 0;
 8003f96:	4b5c      	ldr	r3, [pc, #368]	@ (8004108 <menu+0x2918>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003f9c:	2002      	movs	r0, #2
 8003f9e:	f7fc fc83 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003fa2:	2032      	movs	r0, #50	@ 0x32
 8003fa4:	f005 fea8 	bl	8009cf8 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003fa8:	2002      	movs	r0, #2
 8003faa:	f7fd fbc5 	bl	8001738 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4850      	ldr	r0, [pc, #320]	@ (80040f4 <menu+0x2904>)
 8003fb2:	f006 fc71 	bl	800a898 <HAL_GPIO_ReadPin>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d118      	bne.n	8003fee <menu+0x27fe>
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	484d      	ldr	r0, [pc, #308]	@ (80040f4 <menu+0x2904>)
 8003fc0:	f006 fc6a 	bl	800a898 <HAL_GPIO_ReadPin>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d111      	bne.n	8003fee <menu+0x27fe>
 8003fca:	4b4b      	ldr	r3, [pc, #300]	@ (80040f8 <menu+0x2908>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <menu+0x27fe>
			takeWifiSSID();
 8003fd8:	f004 fad0 	bl	800857c <takeWifiSSID>

			convertArrays(2);
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f7fc fc63 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003fe2:	2032      	movs	r0, #50	@ 0x32
 8003fe4:	f005 fe88 	bl	8009cf8 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003fe8:	2002      	movs	r0, #2
 8003fea:	f7fd fba5 	bl	8001738 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003fee:	4b45      	ldr	r3, [pc, #276]	@ (8004104 <menu+0x2914>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b22      	cmp	r3, #34	@ 0x22
 8003ff4:	d12b      	bne.n	800404e <menu+0x285e>
		calismaSayModu = 0;
 8003ff6:	4b44      	ldr	r3, [pc, #272]	@ (8004108 <menu+0x2918>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	f7fc fc53 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8004002:	2032      	movs	r0, #50	@ 0x32
 8004004:	f005 fe78 	bl	8009cf8 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004008:	2003      	movs	r0, #3
 800400a:	f7fd fb95 	bl	8001738 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800400e:	2102      	movs	r1, #2
 8004010:	4838      	ldr	r0, [pc, #224]	@ (80040f4 <menu+0x2904>)
 8004012:	f006 fc41 	bl	800a898 <HAL_GPIO_ReadPin>
 8004016:	4603      	mov	r3, r0
 8004018:	2b01      	cmp	r3, #1
 800401a:	d118      	bne.n	800404e <menu+0x285e>
 800401c:	2104      	movs	r1, #4
 800401e:	4835      	ldr	r0, [pc, #212]	@ (80040f4 <menu+0x2904>)
 8004020:	f006 fc3a 	bl	800a898 <HAL_GPIO_ReadPin>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d111      	bne.n	800404e <menu+0x285e>
 800402a:	4b33      	ldr	r3, [pc, #204]	@ (80040f8 <menu+0x2908>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <menu+0x285e>
			takeWifiPass();
 8004038:	f004 fc4c 	bl	80088d4 <takeWifiPass>

			convertArrays(3);
 800403c:	2003      	movs	r0, #3
 800403e:	f7fc fc33 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8004042:	2032      	movs	r0, #50	@ 0x32
 8004044:	f005 fe58 	bl	8009cf8 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004048:	2003      	movs	r0, #3
 800404a:	f7fd fb75 	bl	8001738 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 800404e:	4b2d      	ldr	r3, [pc, #180]	@ (8004104 <menu+0x2914>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b23      	cmp	r3, #35	@ 0x23
 8004054:	d146      	bne.n	80040e4 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8004056:	4a2e      	ldr	r2, [pc, #184]	@ (8004110 <menu+0x2920>)
 8004058:	2101      	movs	r1, #1
 800405a:	2001      	movs	r0, #1
 800405c:	f005 f8d6 	bl	800920c <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8004060:	4a2c      	ldr	r2, [pc, #176]	@ (8004114 <menu+0x2924>)
 8004062:	2101      	movs	r1, #1
 8004064:	2002      	movs	r0, #2
 8004066:	f005 f8d1 	bl	800920c <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800406a:	2108      	movs	r1, #8
 800406c:	4821      	ldr	r0, [pc, #132]	@ (80040f4 <menu+0x2904>)
 800406e:	f006 fc13 	bl	800a898 <HAL_GPIO_ReadPin>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d135      	bne.n	80040e4 <menu+0x28f4>
			menuGiris = 0;
 8004078:	4b27      	ldr	r3, [pc, #156]	@ (8004118 <menu+0x2928>)
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 800407e:	f005 fe31 	bl	8009ce4 <HAL_GetTick>
 8004082:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8004084:	e007      	b.n	8004096 <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8004086:	f005 fe2d 	bl	8009ce4 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004094:	d806      	bhi.n	80040a4 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8004096:	4821      	ldr	r0, [pc, #132]	@ (800411c <menu+0x292c>)
 8004098:	f007 fa27 	bl	800b4ea <HAL_I2C_GetError>
 800409c:	4603      	mov	r3, r0
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d0f1      	beq.n	8004086 <menu+0x2896>
 80040a2:	e000      	b.n	80040a6 <menu+0x28b6>
			        break;
 80040a4:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 80040a6:	f005 fe1d 	bl	8009ce4 <HAL_GetTick>
 80040aa:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80040ac:	e007      	b.n	80040be <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80040ae:	f005 fe19 	bl	8009ce4 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040bc:	d806      	bhi.n	80040cc <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80040be:	4817      	ldr	r0, [pc, #92]	@ (800411c <menu+0x292c>)
 80040c0:	f007 fa06 	bl	800b4d0 <HAL_I2C_GetState>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d1f1      	bne.n	80040ae <menu+0x28be>
 80040ca:	e000      	b.n	80040ce <menu+0x28de>
			        break;
 80040cc:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f7fc fae8 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 80040d4:	f005 f8c6 	bl	8009264 <lcd_clear>
			HAL_Delay(500);
 80040d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040dc:	f005 fe0c 	bl	8009cf8 <HAL_Delay>
			NVIC_SystemReset();
 80040e0:	f7fd fb70 	bl	80017c4 <__NVIC_SystemReset>
		}
	}
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200016eb 	.word	0x200016eb
 80040f0:	200019b4 	.word	0x200019b4
 80040f4:	40010800 	.word	0x40010800
 80040f8:	200016ef 	.word	0x200016ef
 80040fc:	200011f0 	.word	0x200011f0
 8004100:	200016ec 	.word	0x200016ec
 8004104:	200016c0 	.word	0x200016c0
 8004108:	200016df 	.word	0x200016df
 800410c:	20001ec8 	.word	0x20001ec8
 8004110:	20001d60 	.word	0x20001d60
 8004114:	20001d74 	.word	0x20001d74
 8004118:	200016dd 	.word	0x200016dd
 800411c:	20001f40 	.word	0x20001f40

08004120 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8004128:	220a      	movs	r2, #10
 800412a:	491c      	ldr	r1, [pc, #112]	@ (800419c <displayCycleOnLCD+0x7c>)
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f009 fdb7 	bl	800dca0 <itoa>

    int length = strlen(snum);
 8004132:	481a      	ldr	r0, [pc, #104]	@ (800419c <displayCycleOnLCD+0x7c>)
 8004134:	f7fc f876 	bl	8000224 <strlen>
 8004138:	4603      	mov	r3, r0
 800413a:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f1c3 0310 	rsb	r3, r3, #16
 8004142:	0fda      	lsrs	r2, r3, #31
 8004144:	4413      	add	r3, r2
 8004146:	105b      	asrs	r3, r3, #1
 8004148:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	2210      	movs	r2, #16
 8004150:	2120      	movs	r1, #32
 8004152:	4618      	mov	r0, r3
 8004154:	f009 fef6 	bl	800df44 <memset>
    displayLine[16] = '\0'; // Null terminator
 8004158:	2300      	movs	r3, #0
 800415a:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004160:	e00d      	b.n	800417e <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	4413      	add	r3, r2
 8004168:	490c      	ldr	r1, [pc, #48]	@ (800419c <displayCycleOnLCD+0x7c>)
 800416a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416c:	440a      	add	r2, r1
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	3328      	adds	r3, #40	@ 0x28
 8004172:	443b      	add	r3, r7
 8004174:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	3301      	adds	r3, #1
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
 800417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	429a      	cmp	r2, r3
 8004184:	dbed      	blt.n	8004162 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	461a      	mov	r2, r3
 800418c:	2101      	movs	r1, #1
 800418e:	2002      	movs	r0, #2
 8004190:	f005 f83c 	bl	800920c <lcd_print>
}
 8004194:	bf00      	nop
 8004196:	3728      	adds	r7, #40	@ 0x28
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20001260 	.word	0x20001260

080041a0 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80041b0:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <lcdUpdate+0xa4>)
 80041b2:	2101      	movs	r1, #1
 80041b4:	2002      	movs	r0, #2
 80041b6:	f005 f829 	bl	800920c <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 80041ba:	e03e      	b.n	800423a <lcdUpdate+0x9a>
	} else if(y==2) {
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d105      	bne.n	80041ce <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80041c2:	4a20      	ldr	r2, [pc, #128]	@ (8004244 <lcdUpdate+0xa4>)
 80041c4:	2102      	movs	r1, #2
 80041c6:	2002      	movs	r0, #2
 80041c8:	f005 f820 	bl	800920c <lcd_print>
}
 80041cc:	e035      	b.n	800423a <lcdUpdate+0x9a>
	} else if(y==3) {
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d105      	bne.n	80041e0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80041d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <lcdUpdate+0xa4>)
 80041d6:	2103      	movs	r1, #3
 80041d8:	2002      	movs	r0, #2
 80041da:	f005 f817 	bl	800920c <lcd_print>
}
 80041de:	e02c      	b.n	800423a <lcdUpdate+0x9a>
	} else if(y==4) {
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d105      	bne.n	80041f2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80041e6:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <lcdUpdate+0xa4>)
 80041e8:	2104      	movs	r1, #4
 80041ea:	2002      	movs	r0, #2
 80041ec:	f005 f80e 	bl	800920c <lcd_print>
}
 80041f0:	e023      	b.n	800423a <lcdUpdate+0x9a>
	} else if(y==5) {
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d105      	bne.n	8004204 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80041f8:	4a12      	ldr	r2, [pc, #72]	@ (8004244 <lcdUpdate+0xa4>)
 80041fa:	2105      	movs	r1, #5
 80041fc:	2002      	movs	r0, #2
 80041fe:	f005 f805 	bl	800920c <lcd_print>
}
 8004202:	e01a      	b.n	800423a <lcdUpdate+0x9a>
	} else if(y==6) {
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d105      	bne.n	8004216 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800420a:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <lcdUpdate+0xa4>)
 800420c:	2106      	movs	r1, #6
 800420e:	2002      	movs	r0, #2
 8004210:	f004 fffc 	bl	800920c <lcd_print>
}
 8004214:	e011      	b.n	800423a <lcdUpdate+0x9a>
	} else if (y==7) {
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b07      	cmp	r3, #7
 800421a:	d10e      	bne.n	800423a <lcdUpdate+0x9a>
		lcd_clear();
 800421c:	f005 f822 	bl	8009264 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8004220:	4a09      	ldr	r2, [pc, #36]	@ (8004248 <lcdUpdate+0xa8>)
 8004222:	2101      	movs	r1, #1
 8004224:	2001      	movs	r0, #1
 8004226:	f004 fff1 	bl	800920c <lcd_print>
		lcd_print(2, 1, mainText2GN);
 800422a:	4a08      	ldr	r2, [pc, #32]	@ (800424c <lcdUpdate+0xac>)
 800422c:	2101      	movs	r1, #1
 800422e:	2002      	movs	r0, #2
 8004230:	f004 ffec 	bl	800920c <lcd_print>
		HAL_Delay(10);
 8004234:	200a      	movs	r0, #10
 8004236:	f005 fd5f 	bl	8009cf8 <HAL_Delay>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	0800f430 	.word	0x0800f430
 8004248:	200000c4 	.word	0x200000c4
 800424c:	200000d8 	.word	0x200000d8

08004250 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8004254:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <checkLCDBacklight+0x24>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <checkLCDBacklight+0x28>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b3b      	cmp	r3, #59	@ 0x3b
 8004260:	d903      	bls.n	800426a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004262:	2000      	movs	r0, #0
 8004264:	f005 f81e 	bl	80092a4 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004268:	e002      	b.n	8004270 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f005 f81a 	bl	80092a4 <lcd_backlight>
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20001698 	.word	0x20001698
 8004278:	200016b4 	.word	0x200016b4

0800427c <bekle>:

void bekle() {
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	timer1=millis;
 8004280:	4b47      	ldr	r3, [pc, #284]	@ (80043a0 <bekle+0x124>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a47      	ldr	r2, [pc, #284]	@ (80043a4 <bekle+0x128>)
 8004286:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004288:	e002      	b.n	8004290 <bekle+0x14>
    	butonKontrol = 1;
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <bekle+0x12c>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004290:	2101      	movs	r1, #1
 8004292:	4846      	ldr	r0, [pc, #280]	@ (80043ac <bekle+0x130>)
 8004294:	f006 fb00 	bl	800a898 <HAL_GPIO_ReadPin>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d109      	bne.n	80042b2 <bekle+0x36>
 800429e:	4b40      	ldr	r3, [pc, #256]	@ (80043a0 <bekle+0x124>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b40      	ldr	r3, [pc, #256]	@ (80043a4 <bekle+0x128>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d0ef      	beq.n	800428a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042aa:	e002      	b.n	80042b2 <bekle+0x36>
    	butonKontrol = 1;
 80042ac:	4b3e      	ldr	r3, [pc, #248]	@ (80043a8 <bekle+0x12c>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042b2:	2108      	movs	r1, #8
 80042b4:	483e      	ldr	r0, [pc, #248]	@ (80043b0 <bekle+0x134>)
 80042b6:	f006 faef 	bl	800a898 <HAL_GPIO_ReadPin>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d109      	bne.n	80042d4 <bekle+0x58>
 80042c0:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <bekle+0x124>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b37      	ldr	r3, [pc, #220]	@ (80043a4 <bekle+0x128>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d0ef      	beq.n	80042ac <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042cc:	e002      	b.n	80042d4 <bekle+0x58>
    	butonKontrol = 1;
 80042ce:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <bekle+0x12c>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042d4:	2102      	movs	r1, #2
 80042d6:	4835      	ldr	r0, [pc, #212]	@ (80043ac <bekle+0x130>)
 80042d8:	f006 fade 	bl	800a898 <HAL_GPIO_ReadPin>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d109      	bne.n	80042f6 <bekle+0x7a>
 80042e2:	4b2f      	ldr	r3, [pc, #188]	@ (80043a0 <bekle+0x124>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <bekle+0x128>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d0ef      	beq.n	80042ce <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042ee:	e002      	b.n	80042f6 <bekle+0x7a>
    	butonKontrol = 1;
 80042f0:	4b2d      	ldr	r3, [pc, #180]	@ (80043a8 <bekle+0x12c>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80042f6:	2104      	movs	r1, #4
 80042f8:	482c      	ldr	r0, [pc, #176]	@ (80043ac <bekle+0x130>)
 80042fa:	f006 facd 	bl	800a898 <HAL_GPIO_ReadPin>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b01      	cmp	r3, #1
 8004302:	d109      	bne.n	8004318 <bekle+0x9c>
 8004304:	4b26      	ldr	r3, [pc, #152]	@ (80043a0 <bekle+0x124>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b26      	ldr	r3, [pc, #152]	@ (80043a4 <bekle+0x128>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d0ef      	beq.n	80042f0 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004310:	e002      	b.n	8004318 <bekle+0x9c>
    	butonKontrol = 1;
 8004312:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <bekle+0x12c>)
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004318:	2108      	movs	r1, #8
 800431a:	4824      	ldr	r0, [pc, #144]	@ (80043ac <bekle+0x130>)
 800431c:	f006 fabc 	bl	800a898 <HAL_GPIO_ReadPin>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d109      	bne.n	800433a <bekle+0xbe>
 8004326:	4b1e      	ldr	r3, [pc, #120]	@ (80043a0 <bekle+0x124>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <bekle+0x128>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d0ef      	beq.n	8004312 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004332:	e002      	b.n	800433a <bekle+0xbe>
    	butonKontrol = 1;
 8004334:	4b1c      	ldr	r3, [pc, #112]	@ (80043a8 <bekle+0x12c>)
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800433a:	2180      	movs	r1, #128	@ 0x80
 800433c:	481c      	ldr	r0, [pc, #112]	@ (80043b0 <bekle+0x134>)
 800433e:	f006 faab 	bl	800a898 <HAL_GPIO_ReadPin>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <bekle+0xe0>
 8004348:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <bekle+0x124>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b15      	ldr	r3, [pc, #84]	@ (80043a4 <bekle+0x128>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d0ef      	beq.n	8004334 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004354:	e002      	b.n	800435c <bekle+0xe0>
    	butonKontrol = 1;
 8004356:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <bekle+0x12c>)
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800435c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004360:	4813      	ldr	r0, [pc, #76]	@ (80043b0 <bekle+0x134>)
 8004362:	f006 fa99 	bl	800a898 <HAL_GPIO_ReadPin>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <bekle+0x104>
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <bekle+0x124>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <bekle+0x128>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0ee      	beq.n	8004356 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004378:	e002      	b.n	8004380 <bekle+0x104>
    	butonKontrol = 1;
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <bekle+0x12c>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004384:	480a      	ldr	r0, [pc, #40]	@ (80043b0 <bekle+0x134>)
 8004386:	f006 fa87 	bl	800a898 <HAL_GPIO_ReadPin>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <bekle+0x120>
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <bekle+0x124>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b03      	ldr	r3, [pc, #12]	@ (80043a4 <bekle+0x128>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d0ee      	beq.n	800437a <bekle+0xfe>
    }

}
 800439c:	bf00      	nop
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20001698 	.word	0x20001698
 80043a4:	200016a0 	.word	0x200016a0
 80043a8:	200016ef 	.word	0x200016ef
 80043ac:	40010800 	.word	0x40010800
 80043b0:	40011000 	.word	0x40011000

080043b4 <buttonCheck>:

uint8_t buttonCheck(void) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 80043b8:	2101      	movs	r1, #1
 80043ba:	4815      	ldr	r0, [pc, #84]	@ (8004410 <buttonCheck+0x5c>)
 80043bc:	f006 fa6c 	bl	800a898 <HAL_GPIO_ReadPin>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d01b      	beq.n	80043fe <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 80043c6:	2108      	movs	r1, #8
 80043c8:	4812      	ldr	r0, [pc, #72]	@ (8004414 <buttonCheck+0x60>)
 80043ca:	f006 fa65 	bl	800a898 <HAL_GPIO_ReadPin>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d014      	beq.n	80043fe <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 80043d4:	2102      	movs	r1, #2
 80043d6:	480e      	ldr	r0, [pc, #56]	@ (8004410 <buttonCheck+0x5c>)
 80043d8:	f006 fa5e 	bl	800a898 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00d      	beq.n	80043fe <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 80043e2:	2104      	movs	r1, #4
 80043e4:	480a      	ldr	r0, [pc, #40]	@ (8004410 <buttonCheck+0x5c>)
 80043e6:	f006 fa57 	bl	800a898 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d006      	beq.n	80043fe <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80043f0:	2108      	movs	r1, #8
 80043f2:	4807      	ldr	r0, [pc, #28]	@ (8004410 <buttonCheck+0x5c>)
 80043f4:	f006 fa50 	bl	800a898 <HAL_GPIO_ReadPin>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d104      	bne.n	8004408 <buttonCheck+0x54>
		backLightTimer = 0;
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <buttonCheck+0x64>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
		return 1;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <buttonCheck+0x56>
	}
	return 0;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40010800 	.word	0x40010800
 8004414:	40011000 	.word	0x40011000
 8004418:	200016b4 	.word	0x200016b4

0800441c <checkBasincSalteri>:

void checkBasincSalteri() {
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004420:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <checkBasincSalteri+0x54>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <checkBasincSalteri+0x12>
		basincVar=1;
 8004428:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <checkBasincSalteri+0x58>)
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <checkBasincSalteri+0x54>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d119      	bne.n	800446a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004436:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800443a:	480f      	ldr	r0, [pc, #60]	@ (8004478 <checkBasincSalteri+0x5c>)
 800443c:	f006 fa2c 	bl	800a898 <HAL_GPIO_ReadPin>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <checkBasincSalteri+0x60>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <checkBasincSalteri+0x64>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d90a      	bls.n	800446a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004454:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <checkBasincSalteri+0x58>)
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800445a:	e006      	b.n	800446a <checkBasincSalteri+0x4e>
			timer5=millis;
 800445c:	4b07      	ldr	r3, [pc, #28]	@ (800447c <checkBasincSalteri+0x60>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a07      	ldr	r2, [pc, #28]	@ (8004480 <checkBasincSalteri+0x64>)
 8004462:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <checkBasincSalteri+0x58>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200016c7 	.word	0x200016c7
 8004474:	200016c3 	.word	0x200016c3
 8004478:	40011000 	.word	0x40011000
 800447c:	20001698 	.word	0x20001698
 8004480:	200016b0 	.word	0x200016b0

08004484 <checkBasGonder>:

void checkBasGonder() {
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004488:	4b1b      	ldr	r3, [pc, #108]	@ (80044f8 <checkBasGonder+0x74>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10b      	bne.n	80044a8 <checkBasGonder+0x24>
 8004490:	4b1a      	ldr	r3, [pc, #104]	@ (80044fc <checkBasGonder+0x78>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <checkBasGonder+0x24>
 8004498:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <checkBasGonder+0x7c>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80044a0:	4b18      	ldr	r3, [pc, #96]	@ (8004504 <checkBasGonder+0x80>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e009      	b.n	80044bc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80044a8:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <checkBasGonder+0x78>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	f083 0301 	eor.w	r3, r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80044b6:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <checkBasGonder+0x80>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <checkBasGonder+0x74>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10b      	bne.n	80044dc <checkBasGonder+0x58>
 80044c4:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <checkBasGonder+0x84>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <checkBasGonder+0x58>
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <checkBasGonder+0x7c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80044d4:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <checkBasGonder+0x88>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80044da:	e009      	b.n	80044f0 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <checkBasGonder+0x84>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f083 0301 	eor.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80044ea:	4b08      	ldr	r3, [pc, #32]	@ (800450c <checkBasGonder+0x88>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	200016c1 	.word	0x200016c1
 80044fc:	200016f5 	.word	0x200016f5
 8004500:	200016cf 	.word	0x200016cf
 8004504:	200016fc 	.word	0x200016fc
 8004508:	200016f8 	.word	0x200016f8
 800450c:	200016fd 	.word	0x200016fd

08004510 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004514:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <checkKapiSecimleri+0x98>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800451c:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <checkKapiSecimleri+0x9c>)
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004522:	4b21      	ldr	r3, [pc, #132]	@ (80045a8 <checkKapiSecimleri+0x98>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d10e      	bne.n	8004548 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800452a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800452e:	4820      	ldr	r0, [pc, #128]	@ (80045b0 <checkKapiSecimleri+0xa0>)
 8004530:	f006 f9b2 	bl	800a898 <HAL_GPIO_ReadPin>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800453a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ac <checkKapiSecimleri+0x9c>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e002      	b.n	8004548 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004542:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <checkKapiSecimleri+0x9c>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004548:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <checkKapiSecimleri+0x98>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d10e      	bne.n	800456e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004554:	4816      	ldr	r0, [pc, #88]	@ (80045b0 <checkKapiSecimleri+0xa0>)
 8004556:	f006 f99f 	bl	800a898 <HAL_GPIO_ReadPin>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004560:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <checkKapiSecimleri+0x9c>)
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e002      	b.n	800456e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004568:	4b10      	ldr	r3, [pc, #64]	@ (80045ac <checkKapiSecimleri+0x9c>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <checkKapiSecimleri+0x98>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d116      	bne.n	80045a4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004576:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800457a:	480d      	ldr	r0, [pc, #52]	@ (80045b0 <checkKapiSecimleri+0xa0>)
 800457c:	f006 f98c 	bl	800a898 <HAL_GPIO_ReadPin>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <checkKapiSecimleri+0x8e>
 8004586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800458a:	4809      	ldr	r0, [pc, #36]	@ (80045b0 <checkKapiSecimleri+0xa0>)
 800458c:	f006 f984 	bl	800a898 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <checkKapiSecimleri+0x9c>)
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800459c:	e002      	b.n	80045a4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800459e:	4b03      	ldr	r3, [pc, #12]	@ (80045ac <checkKapiSecimleri+0x9c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200016c8 	.word	0x200016c8
 80045ac:	20001712 	.word	0x20001712
 80045b0:	40010800 	.word	0x40010800

080045b4 <checkAktifCalisma>:

void checkAktifCalisma() {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80045b8:	4b66      	ldr	r3, [pc, #408]	@ (8004754 <checkAktifCalisma+0x1a0>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f041 8343 	bne.w	8005c48 <checkAktifCalisma+0x1694>
 80045c2:	4b65      	ldr	r3, [pc, #404]	@ (8004758 <checkAktifCalisma+0x1a4>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f041 833e 	bne.w	8005c48 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80045cc:	4b63      	ldr	r3, [pc, #396]	@ (800475c <checkAktifCalisma+0x1a8>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11a      	bne.n	800460a <checkAktifCalisma+0x56>
 80045d4:	4b62      	ldr	r3, [pc, #392]	@ (8004760 <checkAktifCalisma+0x1ac>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <checkAktifCalisma+0x56>
 80045dc:	4b61      	ldr	r3, [pc, #388]	@ (8004764 <checkAktifCalisma+0x1b0>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <checkAktifCalisma+0x46>
 80045e4:	4b60      	ldr	r3, [pc, #384]	@ (8004768 <checkAktifCalisma+0x1b4>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	f083 0301 	eor.w	r3, r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <checkAktifCalisma+0x46>
 80045f2:	4b5e      	ldr	r3, [pc, #376]	@ (800476c <checkAktifCalisma+0x1b8>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d007      	beq.n	800460a <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80045fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004770 <checkAktifCalisma+0x1bc>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01c      	beq.n	800463c <checkAktifCalisma+0x88>
 8004602:	4b5c      	ldr	r3, [pc, #368]	@ (8004774 <checkAktifCalisma+0x1c0>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d118      	bne.n	800463c <checkAktifCalisma+0x88>
 800460a:	4b5b      	ldr	r3, [pc, #364]	@ (8004778 <checkAktifCalisma+0x1c4>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <checkAktifCalisma+0x66>
 8004612:	4b5a      	ldr	r3, [pc, #360]	@ (800477c <checkAktifCalisma+0x1c8>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <checkAktifCalisma+0x88>
 800461a:	4b59      	ldr	r3, [pc, #356]	@ (8004780 <checkAktifCalisma+0x1cc>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004622:	2201      	movs	r2, #1
 8004624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004628:	4856      	ldr	r0, [pc, #344]	@ (8004784 <checkAktifCalisma+0x1d0>)
 800462a:	f006 f94c 	bl	800a8c6 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800462e:	4b56      	ldr	r3, [pc, #344]	@ (8004788 <checkAktifCalisma+0x1d4>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004634:	4b55      	ldr	r3, [pc, #340]	@ (800478c <checkAktifCalisma+0x1d8>)
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e008      	b.n	800464e <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004642:	4850      	ldr	r0, [pc, #320]	@ (8004784 <checkAktifCalisma+0x1d0>)
 8004644:	f006 f93f 	bl	800a8c6 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004648:	4b4f      	ldr	r3, [pc, #316]	@ (8004788 <checkAktifCalisma+0x1d4>)
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800464e:	4b42      	ldr	r3, [pc, #264]	@ (8004758 <checkAktifCalisma+0x1a4>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d164      	bne.n	8004720 <checkAktifCalisma+0x16c>
 8004656:	4b49      	ldr	r3, [pc, #292]	@ (800477c <checkAktifCalisma+0x1c8>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <checkAktifCalisma+0xb2>
 800465e:	4b46      	ldr	r3, [pc, #280]	@ (8004778 <checkAktifCalisma+0x1c4>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d05c      	beq.n	8004720 <checkAktifCalisma+0x16c>
 8004666:	4b46      	ldr	r3, [pc, #280]	@ (8004780 <checkAktifCalisma+0x1cc>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d058      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800466e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004672:	4844      	ldr	r0, [pc, #272]	@ (8004784 <checkAktifCalisma+0x1d0>)
 8004674:	f006 f910 	bl	800a898 <HAL_GPIO_ReadPin>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <checkAktifCalisma+0xd2>
 800467e:	4b44      	ldr	r3, [pc, #272]	@ (8004790 <checkAktifCalisma+0x1dc>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04c      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004686:	2102      	movs	r1, #2
 8004688:	4842      	ldr	r0, [pc, #264]	@ (8004794 <checkAktifCalisma+0x1e0>)
 800468a:	f006 f905 	bl	800a898 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d145      	bne.n	8004720 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8004694:	4b40      	ldr	r3, [pc, #256]	@ (8004798 <checkAktifCalisma+0x1e4>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d041      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800469c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046a0:	4838      	ldr	r0, [pc, #224]	@ (8004784 <checkAktifCalisma+0x1d0>)
 80046a2:	f006 f8f9 	bl	800a898 <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10e      	bne.n	80046ca <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80046ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046b0:	4834      	ldr	r0, [pc, #208]	@ (8004784 <checkAktifCalisma+0x1d0>)
 80046b2:	f006 f8f1 	bl	800a898 <HAL_GPIO_ReadPin>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80046bc:	2140      	movs	r1, #64	@ 0x40
 80046be:	4835      	ldr	r0, [pc, #212]	@ (8004794 <checkAktifCalisma+0x1e0>)
 80046c0:	f006 f8ea 	bl	800a898 <HAL_GPIO_ReadPin>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d003      	beq.n	80046d2 <checkAktifCalisma+0x11e>
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <checkAktifCalisma+0x1a8>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d026      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 80046d2:	4b24      	ldr	r3, [pc, #144]	@ (8004764 <checkAktifCalisma+0x1b0>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f083 0301 	eor.w	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01f      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 80046e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004760 <checkAktifCalisma+0x1ac>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	f083 0301 	eor.w	r3, r3, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80046ee:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <checkAktifCalisma+0x1bc>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d011      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80046fc:	4b27      	ldr	r3, [pc, #156]	@ (800479c <checkAktifCalisma+0x1e8>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f083 0301 	eor.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800470a:	4b25      	ldr	r3, [pc, #148]	@ (80047a0 <checkAktifCalisma+0x1ec>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f083 0301 	eor.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004718:	4b10      	ldr	r3, [pc, #64]	@ (800475c <checkAktifCalisma+0x1a8>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e002      	b.n	8004726 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004720:	4b0e      	ldr	r3, [pc, #56]	@ (800475c <checkAktifCalisma+0x1a8>)
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004726:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <checkAktifCalisma+0x1a8>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03c      	beq.n	80047a8 <checkAktifCalisma+0x1f4>
 800472e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004732:	4818      	ldr	r0, [pc, #96]	@ (8004794 <checkAktifCalisma+0x1e0>)
 8004734:	f006 f8b0 	bl	800a898 <HAL_GPIO_ReadPin>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d134      	bne.n	80047a8 <checkAktifCalisma+0x1f4>
 800473e:	4b19      	ldr	r3, [pc, #100]	@ (80047a4 <checkAktifCalisma+0x1f0>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d030      	beq.n	80047a8 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004746:	2201      	movs	r2, #1
 8004748:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800474c:	480d      	ldr	r0, [pc, #52]	@ (8004784 <checkAktifCalisma+0x1d0>)
 800474e:	f006 f8ba 	bl	800a8c6 <HAL_GPIO_WritePin>
 8004752:	e02f      	b.n	80047b4 <checkAktifCalisma+0x200>
 8004754:	200016de 	.word	0x200016de
 8004758:	200016dd 	.word	0x200016dd
 800475c:	200016f5 	.word	0x200016f5
 8004760:	200016f6 	.word	0x200016f6
 8004764:	200016f8 	.word	0x200016f8
 8004768:	200016f0 	.word	0x200016f0
 800476c:	200016d3 	.word	0x200016d3
 8004770:	200016f7 	.word	0x200016f7
 8004774:	200016d2 	.word	0x200016d2
 8004778:	20001711 	.word	0x20001711
 800477c:	20001724 	.word	0x20001724
 8004780:	20001712 	.word	0x20001712
 8004784:	40010c00 	.word	0x40010c00
 8004788:	20001713 	.word	0x20001713
 800478c:	200016ff 	.word	0x200016ff
 8004790:	200016fc 	.word	0x200016fc
 8004794:	40011000 	.word	0x40011000
 8004798:	200016c3 	.word	0x200016c3
 800479c:	200016fa 	.word	0x200016fa
 80047a0:	200016fb 	.word	0x200016fb
 80047a4:	200016ce 	.word	0x200016ce
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047ae:	4865      	ldr	r0, [pc, #404]	@ (8004944 <checkAktifCalisma+0x390>)
 80047b0:	f006 f889 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80047b4:	4b64      	ldr	r3, [pc, #400]	@ (8004948 <checkAktifCalisma+0x394>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <checkAktifCalisma+0x230>
 80047bc:	4b63      	ldr	r3, [pc, #396]	@ (800494c <checkAktifCalisma+0x398>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d007      	beq.n	80047d4 <checkAktifCalisma+0x220>
 80047c4:	4b61      	ldr	r3, [pc, #388]	@ (800494c <checkAktifCalisma+0x398>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d003      	beq.n	80047d4 <checkAktifCalisma+0x220>
 80047cc:	4b60      	ldr	r3, [pc, #384]	@ (8004950 <checkAktifCalisma+0x39c>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	2104      	movs	r1, #4
 80047d8:	485a      	ldr	r0, [pc, #360]	@ (8004944 <checkAktifCalisma+0x390>)
 80047da:	f006 f874 	bl	800a8c6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80047de:	4b5d      	ldr	r3, [pc, #372]	@ (8004954 <checkAktifCalisma+0x3a0>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80047e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004954 <checkAktifCalisma+0x3a0>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d033      	beq.n	8004854 <checkAktifCalisma+0x2a0>
 80047ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047f0:	4854      	ldr	r0, [pc, #336]	@ (8004944 <checkAktifCalisma+0x390>)
 80047f2:	f006 f851 	bl	800a898 <HAL_GPIO_ReadPin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <checkAktifCalisma+0x256>
 80047fc:	4b56      	ldr	r3, [pc, #344]	@ (8004958 <checkAktifCalisma+0x3a4>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f083 0301 	eor.w	r3, r3, #1
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <checkAktifCalisma+0x264>
 800480a:	2102      	movs	r1, #2
 800480c:	4853      	ldr	r0, [pc, #332]	@ (800495c <checkAktifCalisma+0x3a8>)
 800480e:	f006 f843 	bl	800a898 <HAL_GPIO_ReadPin>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d11d      	bne.n	8004854 <checkAktifCalisma+0x2a0>
 8004818:	4b51      	ldr	r3, [pc, #324]	@ (8004960 <checkAktifCalisma+0x3ac>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <checkAktifCalisma+0x274>
 8004820:	4b50      	ldr	r3, [pc, #320]	@ (8004964 <checkAktifCalisma+0x3b0>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <checkAktifCalisma+0x2a0>
 8004828:	4b4f      	ldr	r3, [pc, #316]	@ (8004968 <checkAktifCalisma+0x3b4>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d011      	beq.n	8004854 <checkAktifCalisma+0x2a0>
 8004830:	4b4e      	ldr	r3, [pc, #312]	@ (800496c <checkAktifCalisma+0x3b8>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <checkAktifCalisma+0x2a0>
 8004838:	4b4d      	ldr	r3, [pc, #308]	@ (8004970 <checkAktifCalisma+0x3bc>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f083 0301 	eor.w	r3, r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d006      	beq.n	8004854 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8004846:	4b4b      	ldr	r3, [pc, #300]	@ (8004974 <checkAktifCalisma+0x3c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4b      	ldr	r2, [pc, #300]	@ (8004978 <checkAktifCalisma+0x3c4>)
 800484c:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800484e:	4b48      	ldr	r3, [pc, #288]	@ (8004970 <checkAktifCalisma+0x3bc>)
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004854:	4b47      	ldr	r3, [pc, #284]	@ (8004974 <checkAktifCalisma+0x3c0>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b47      	ldr	r3, [pc, #284]	@ (8004978 <checkAktifCalisma+0x3c4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	4a47      	ldr	r2, [pc, #284]	@ (800497c <checkAktifCalisma+0x3c8>)
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	4293      	cmp	r3, r2
 8004864:	d303      	bcc.n	800486e <checkAktifCalisma+0x2ba>
 8004866:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <checkAktifCalisma+0x3bc>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d118      	bne.n	80048a0 <checkAktifCalisma+0x2ec>
 800486e:	4b3c      	ldr	r3, [pc, #240]	@ (8004960 <checkAktifCalisma+0x3ac>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	f083 0301 	eor.w	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d006      	beq.n	800488a <checkAktifCalisma+0x2d6>
 800487c:	4b39      	ldr	r3, [pc, #228]	@ (8004964 <checkAktifCalisma+0x3b0>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f083 0301 	eor.w	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <checkAktifCalisma+0x2ec>
 800488a:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <checkAktifCalisma+0x3b4>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	f083 0301 	eor.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <checkAktifCalisma+0x2ec>
 8004898:	4b34      	ldr	r3, [pc, #208]	@ (800496c <checkAktifCalisma+0x3b8>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80048a0:	2200      	movs	r2, #0
 80048a2:	2104      	movs	r1, #4
 80048a4:	4827      	ldr	r0, [pc, #156]	@ (8004944 <checkAktifCalisma+0x390>)
 80048a6:	f006 f80e 	bl	800a8c6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80048aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004954 <checkAktifCalisma+0x3a0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80048b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <checkAktifCalisma+0x3bc>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80048b6:	4b32      	ldr	r3, [pc, #200]	@ (8004980 <checkAktifCalisma+0x3cc>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <checkAktifCalisma+0x310>
					cerceveVar=1;
 80048be:	4b31      	ldr	r3, [pc, #196]	@ (8004984 <checkAktifCalisma+0x3d0>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80048c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004980 <checkAktifCalisma+0x3cc>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d116      	bne.n	80048fa <checkAktifCalisma+0x346>
 80048cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <checkAktifCalisma+0x3d4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d112      	bne.n	80048fa <checkAktifCalisma+0x346>
 80048d4:	2101      	movs	r1, #1
 80048d6:	4821      	ldr	r0, [pc, #132]	@ (800495c <checkAktifCalisma+0x3a8>)
 80048d8:	f005 ffde 	bl	800a898 <HAL_GPIO_ReadPin>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <checkAktifCalisma+0x346>
 80048e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048e6:	4817      	ldr	r0, [pc, #92]	@ (8004944 <checkAktifCalisma+0x390>)
 80048e8:	f005 ffd6 	bl	800a898 <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <checkAktifCalisma+0x346>
					cerceveVar=1;
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <checkAktifCalisma+0x3d0>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e011      	b.n	800491e <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80048fa:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <checkAktifCalisma+0x3cc>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10d      	bne.n	800491e <checkAktifCalisma+0x36a>
 8004902:	2101      	movs	r1, #1
 8004904:	4815      	ldr	r0, [pc, #84]	@ (800495c <checkAktifCalisma+0x3a8>)
 8004906:	f005 ffc7 	bl	800a898 <HAL_GPIO_ReadPin>
 800490a:	4603      	mov	r3, r0
 800490c:	2b01      	cmp	r3, #1
 800490e:	d106      	bne.n	800491e <checkAktifCalisma+0x36a>
 8004910:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <checkAktifCalisma+0x3d4>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004918:	4b1a      	ldr	r3, [pc, #104]	@ (8004984 <checkAktifCalisma+0x3d0>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800491e:	4b18      	ldr	r3, [pc, #96]	@ (8004980 <checkAktifCalisma+0x3cc>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d135      	bne.n	8004992 <checkAktifCalisma+0x3de>
 8004926:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <checkAktifCalisma+0x3d4>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d131      	bne.n	8004992 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800492e:	2101      	movs	r1, #1
 8004930:	480a      	ldr	r0, [pc, #40]	@ (800495c <checkAktifCalisma+0x3a8>)
 8004932:	f005 ffb1 	bl	800a898 <HAL_GPIO_ReadPin>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d127      	bne.n	800498c <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 800493c:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <checkAktifCalisma+0x3d0>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e026      	b.n	8004992 <checkAktifCalisma+0x3de>
 8004944:	40010c00 	.word	0x40010c00
 8004948:	200016f5 	.word	0x200016f5
 800494c:	200016cf 	.word	0x200016cf
 8004950:	200016d3 	.word	0x200016d3
 8004954:	200016f9 	.word	0x200016f9
 8004958:	200016fc 	.word	0x200016fc
 800495c:	40011000 	.word	0x40011000
 8004960:	20001711 	.word	0x20001711
 8004964:	20001724 	.word	0x20001724
 8004968:	20001712 	.word	0x20001712
 800496c:	200016c3 	.word	0x200016c3
 8004970:	200016f1 	.word	0x200016f1
 8004974:	20001698 	.word	0x20001698
 8004978:	200016a4 	.word	0x200016a4
 800497c:	200016d4 	.word	0x200016d4
 8004980:	200016c4 	.word	0x200016c4
 8004984:	20001716 	.word	0x20001716
 8004988:	200016c1 	.word	0x200016c1
					} else {
						cerceveVar=0;
 800498c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b8c <checkAktifCalisma+0x5d8>)
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004992:	4b7f      	ldr	r3, [pc, #508]	@ (8004b90 <checkAktifCalisma+0x5dc>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d17c      	bne.n	8004a94 <checkAktifCalisma+0x4e0>
 800499a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b94 <checkAktifCalisma+0x5e0>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d078      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
 80049a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004b98 <checkAktifCalisma+0x5e4>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d074      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80049aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049ae:	487b      	ldr	r0, [pc, #492]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 80049b0:	f005 ff72 	bl	800a898 <HAL_GPIO_ReadPin>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <checkAktifCalisma+0x40e>
 80049ba:	4b79      	ldr	r3, [pc, #484]	@ (8004ba0 <checkAktifCalisma+0x5ec>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d068      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80049c2:	4b72      	ldr	r3, [pc, #456]	@ (8004b8c <checkAktifCalisma+0x5d8>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d064      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
 80049ca:	4b76      	ldr	r3, [pc, #472]	@ (8004ba4 <checkAktifCalisma+0x5f0>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05d      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80049d8:	2104      	movs	r1, #4
 80049da:	4873      	ldr	r0, [pc, #460]	@ (8004ba8 <checkAktifCalisma+0x5f4>)
 80049dc:	f005 ff5c 	bl	800a898 <HAL_GPIO_ReadPin>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <checkAktifCalisma+0x43a>
 80049e6:	4b71      	ldr	r3, [pc, #452]	@ (8004bac <checkAktifCalisma+0x5f8>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d152      	bne.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80049ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049f2:	486a      	ldr	r0, [pc, #424]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 80049f4:	f005 ff50 	bl	800a898 <HAL_GPIO_ReadPin>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10e      	bne.n	8004a1c <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80049fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a02:	4866      	ldr	r0, [pc, #408]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 8004a04:	f005 ff48 	bl	800a898 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d106      	bne.n	8004a1c <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004a0e:	2140      	movs	r1, #64	@ 0x40
 8004a10:	4865      	ldr	r0, [pc, #404]	@ (8004ba8 <checkAktifCalisma+0x5f4>)
 8004a12:	f005 ff41 	bl	800a898 <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d003      	beq.n	8004a24 <checkAktifCalisma+0x470>
 8004a1c:	4b64      	ldr	r3, [pc, #400]	@ (8004bb0 <checkAktifCalisma+0x5fc>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d037      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004a24:	4b63      	ldr	r3, [pc, #396]	@ (8004bb4 <checkAktifCalisma+0x600>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f083 0301 	eor.w	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d030      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004a32:	4b61      	ldr	r3, [pc, #388]	@ (8004bb8 <checkAktifCalisma+0x604>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d029      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004a40:	4b5e      	ldr	r3, [pc, #376]	@ (8004bbc <checkAktifCalisma+0x608>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d022      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc0 <checkAktifCalisma+0x60c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	f083 0301 	eor.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01b      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004a5c:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <checkAktifCalisma+0x610>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d014      	beq.n	8004a94 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004a6a:	4b57      	ldr	r3, [pc, #348]	@ (8004bc8 <checkAktifCalisma+0x614>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f083 0301 	eor.w	r3, r3, #1
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004a78:	2201      	movs	r2, #1
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4847      	ldr	r0, [pc, #284]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 8004a7e:	f005 ff22 	bl	800a8c6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8004a82:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb0 <checkAktifCalisma+0x5fc>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004a88:	4b50      	ldr	r3, [pc, #320]	@ (8004bcc <checkAktifCalisma+0x618>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004a8e:	4b50      	ldr	r3, [pc, #320]	@ (8004bd0 <checkAktifCalisma+0x61c>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004a94:	4b46      	ldr	r3, [pc, #280]	@ (8004bb0 <checkAktifCalisma+0x5fc>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d033      	beq.n	8004b04 <checkAktifCalisma+0x550>
 8004a9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004aa0:	483e      	ldr	r0, [pc, #248]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 8004aa2:	f005 fef9 	bl	800a898 <HAL_GPIO_ReadPin>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <checkAktifCalisma+0x506>
 8004aac:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba0 <checkAktifCalisma+0x5ec>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f083 0301 	eor.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <checkAktifCalisma+0x51c>
 8004aba:	2104      	movs	r1, #4
 8004abc:	483a      	ldr	r0, [pc, #232]	@ (8004ba8 <checkAktifCalisma+0x5f4>)
 8004abe:	f005 feeb 	bl	800a898 <HAL_GPIO_ReadPin>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d11d      	bne.n	8004b04 <checkAktifCalisma+0x550>
 8004ac8:	4b38      	ldr	r3, [pc, #224]	@ (8004bac <checkAktifCalisma+0x5f8>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d019      	beq.n	8004b04 <checkAktifCalisma+0x550>
 8004ad0:	4b30      	ldr	r3, [pc, #192]	@ (8004b94 <checkAktifCalisma+0x5e0>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d015      	beq.n	8004b04 <checkAktifCalisma+0x550>
 8004ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8004b98 <checkAktifCalisma+0x5e4>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <checkAktifCalisma+0x550>
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <checkAktifCalisma+0x5d8>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <checkAktifCalisma+0x550>
 8004ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd4 <checkAktifCalisma+0x620>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f083 0301 	eor.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <checkAktifCalisma+0x550>
					timer2=millis;
 8004af6:	4b38      	ldr	r3, [pc, #224]	@ (8004bd8 <checkAktifCalisma+0x624>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a38      	ldr	r2, [pc, #224]	@ (8004bdc <checkAktifCalisma+0x628>)
 8004afc:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004afe:	4b35      	ldr	r3, [pc, #212]	@ (8004bd4 <checkAktifCalisma+0x620>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004b04:	4b34      	ldr	r3, [pc, #208]	@ (8004bd8 <checkAktifCalisma+0x624>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b34      	ldr	r3, [pc, #208]	@ (8004bdc <checkAktifCalisma+0x628>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	4a34      	ldr	r2, [pc, #208]	@ (8004be0 <checkAktifCalisma+0x62c>)
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d303      	bcc.n	8004b1e <checkAktifCalisma+0x56a>
 8004b16:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd4 <checkAktifCalisma+0x620>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d114      	bne.n	8004b48 <checkAktifCalisma+0x594>
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b94 <checkAktifCalisma+0x5e0>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	f083 0301 	eor.w	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <checkAktifCalisma+0x594>
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <checkAktifCalisma+0x5e4>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f083 0301 	eor.w	r3, r3, #1
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <checkAktifCalisma+0x594>
 8004b3a:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <checkAktifCalisma+0x5d8>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	f083 0301 	eor.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4813      	ldr	r0, [pc, #76]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 8004b4e:	f005 feba 	bl	800a8c6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004b52:	4b17      	ldr	r3, [pc, #92]	@ (8004bb0 <checkAktifCalisma+0x5fc>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <checkAktifCalisma+0x620>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004b5e:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <checkAktifCalisma+0x5fc>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d040      	beq.n	8004be8 <checkAktifCalisma+0x634>
 8004b66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b6a:	480f      	ldr	r0, [pc, #60]	@ (8004ba8 <checkAktifCalisma+0x5f4>)
 8004b6c:	f005 fe94 	bl	800a898 <HAL_GPIO_ReadPin>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d138      	bne.n	8004be8 <checkAktifCalisma+0x634>
 8004b76:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <checkAktifCalisma+0x630>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d034      	beq.n	8004be8 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004b7e:	2201      	movs	r2, #1
 8004b80:	2101      	movs	r1, #1
 8004b82:	4806      	ldr	r0, [pc, #24]	@ (8004b9c <checkAktifCalisma+0x5e8>)
 8004b84:	f005 fe9f 	bl	800a8c6 <HAL_GPIO_WritePin>
 8004b88:	e033      	b.n	8004bf2 <checkAktifCalisma+0x63e>
 8004b8a:	bf00      	nop
 8004b8c:	20001716 	.word	0x20001716
 8004b90:	200016dd 	.word	0x200016dd
 8004b94:	20001711 	.word	0x20001711
 8004b98:	20001712 	.word	0x20001712
 8004b9c:	40010c00 	.word	0x40010c00
 8004ba0:	200016fd 	.word	0x200016fd
 8004ba4:	20001710 	.word	0x20001710
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	200016c6 	.word	0x200016c6
 8004bb0:	200016f8 	.word	0x200016f8
 8004bb4:	200016f5 	.word	0x200016f5
 8004bb8:	200016f9 	.word	0x200016f9
 8004bbc:	200016f6 	.word	0x200016f6
 8004bc0:	200016f7 	.word	0x200016f7
 8004bc4:	200016fa 	.word	0x200016fa
 8004bc8:	200016fb 	.word	0x200016fb
 8004bcc:	20001700 	.word	0x20001700
 8004bd0:	20001720 	.word	0x20001720
 8004bd4:	200016f0 	.word	0x200016f0
 8004bd8:	20001698 	.word	0x20001698
 8004bdc:	200016a4 	.word	0x200016a4
 8004be0:	200016d5 	.word	0x200016d5
 8004be4:	200016c5 	.word	0x200016c5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004be8:	2200      	movs	r2, #0
 8004bea:	2101      	movs	r1, #1
 8004bec:	4836      	ldr	r0, [pc, #216]	@ (8004cc8 <checkAktifCalisma+0x714>)
 8004bee:	f005 fe6a 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004bf2:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <checkAktifCalisma+0x718>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 8080 	bne.w	8004cfc <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004bfc:	4b34      	ldr	r3, [pc, #208]	@ (8004cd0 <checkAktifCalisma+0x71c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d003      	beq.n	8004c0c <checkAktifCalisma+0x658>
 8004c04:	4b32      	ldr	r3, [pc, #200]	@ (8004cd0 <checkAktifCalisma+0x71c>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d177      	bne.n	8004cfc <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004c0c:	4b31      	ldr	r3, [pc, #196]	@ (8004cd4 <checkAktifCalisma+0x720>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d073      	beq.n	8004cfc <checkAktifCalisma+0x748>
 8004c14:	4b30      	ldr	r3, [pc, #192]	@ (8004cd8 <checkAktifCalisma+0x724>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06f      	beq.n	8004cfc <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004c1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c20:	4829      	ldr	r0, [pc, #164]	@ (8004cc8 <checkAktifCalisma+0x714>)
 8004c22:	f005 fe39 	bl	800a898 <HAL_GPIO_ReadPin>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d167      	bne.n	8004cfc <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004c2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c30:	482a      	ldr	r0, [pc, #168]	@ (8004cdc <checkAktifCalisma+0x728>)
 8004c32:	f005 fe31 	bl	800a898 <HAL_GPIO_ReadPin>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <checkAktifCalisma+0x690>
 8004c3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ce0 <checkAktifCalisma+0x72c>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d15b      	bne.n	8004cfc <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004c44:	2140      	movs	r1, #64	@ 0x40
 8004c46:	4825      	ldr	r0, [pc, #148]	@ (8004cdc <checkAktifCalisma+0x728>)
 8004c48:	f005 fe26 	bl	800a898 <HAL_GPIO_ReadPin>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10f      	bne.n	8004c72 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c56:	481c      	ldr	r0, [pc, #112]	@ (8004cc8 <checkAktifCalisma+0x714>)
 8004c58:	f005 fe1e 	bl	800a898 <HAL_GPIO_ReadPin>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004c62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c66:	4818      	ldr	r0, [pc, #96]	@ (8004cc8 <checkAktifCalisma+0x714>)
 8004c68:	f005 fe16 	bl	800a898 <HAL_GPIO_ReadPin>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d003      	beq.n	8004c7a <checkAktifCalisma+0x6c6>
 8004c72:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <checkAktifCalisma+0x730>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d040      	beq.n	8004cfc <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce8 <checkAktifCalisma+0x734>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	f083 0301 	eor.w	r3, r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d039      	beq.n	8004cfc <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004c88:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <checkAktifCalisma+0x738>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f083 0301 	eor.w	r3, r3, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d032      	beq.n	8004cfc <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004c96:	4b16      	ldr	r3, [pc, #88]	@ (8004cf0 <checkAktifCalisma+0x73c>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	f083 0301 	eor.w	r3, r3, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02b      	beq.n	8004cfc <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <checkAktifCalisma+0x740>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f083 0301 	eor.w	r3, r3, #1
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d024      	beq.n	8004cfc <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004cb2:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <checkAktifCalisma+0x744>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f083 0301 	eor.w	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01d      	beq.n	8004cfc <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004cc0:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <checkAktifCalisma+0x730>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e01c      	b.n	8004d02 <checkAktifCalisma+0x74e>
 8004cc8:	40010c00 	.word	0x40010c00
 8004ccc:	200016dd 	.word	0x200016dd
 8004cd0:	200016cf 	.word	0x200016cf
 8004cd4:	20001711 	.word	0x20001711
 8004cd8:	20001712 	.word	0x20001712
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	200016d0 	.word	0x200016d0
 8004ce4:	200016f6 	.word	0x200016f6
 8004ce8:	200016f5 	.word	0x200016f5
 8004cec:	200016f9 	.word	0x200016f9
 8004cf0:	200016f8 	.word	0x200016f8
 8004cf4:	200016f7 	.word	0x200016f7
 8004cf8:	200016fb 	.word	0x200016fb
				} else {
					devmotoryukaricalisiyor=0;
 8004cfc:	4b64      	ldr	r3, [pc, #400]	@ (8004e90 <checkAktifCalisma+0x8dc>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004d02:	4b63      	ldr	r3, [pc, #396]	@ (8004e90 <checkAktifCalisma+0x8dc>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	2120      	movs	r1, #32
 8004d0e:	4861      	ldr	r0, [pc, #388]	@ (8004e94 <checkAktifCalisma+0x8e0>)
 8004d10:	f005 fdd9 	bl	800a8c6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004d14:	4b60      	ldr	r3, [pc, #384]	@ (8004e98 <checkAktifCalisma+0x8e4>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004e98 <checkAktifCalisma+0x8e4>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d025      	beq.n	8004d6e <checkAktifCalisma+0x7ba>
 8004d22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d26:	485d      	ldr	r0, [pc, #372]	@ (8004e9c <checkAktifCalisma+0x8e8>)
 8004d28:	f005 fdb6 	bl	800a898 <HAL_GPIO_ReadPin>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d007      	beq.n	8004d42 <checkAktifCalisma+0x78e>
 8004d32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d36:	4857      	ldr	r0, [pc, #348]	@ (8004e94 <checkAktifCalisma+0x8e0>)
 8004d38:	f005 fdae 	bl	800a898 <HAL_GPIO_ReadPin>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d115      	bne.n	8004d6e <checkAktifCalisma+0x7ba>
 8004d42:	4b57      	ldr	r3, [pc, #348]	@ (8004ea0 <checkAktifCalisma+0x8ec>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d011      	beq.n	8004d6e <checkAktifCalisma+0x7ba>
 8004d4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ea4 <checkAktifCalisma+0x8f0>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <checkAktifCalisma+0x7ba>
 8004d52:	4b55      	ldr	r3, [pc, #340]	@ (8004ea8 <checkAktifCalisma+0x8f4>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004d60:	4b52      	ldr	r3, [pc, #328]	@ (8004eac <checkAktifCalisma+0x8f8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a52      	ldr	r2, [pc, #328]	@ (8004eb0 <checkAktifCalisma+0x8fc>)
 8004d66:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004d68:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea8 <checkAktifCalisma+0x8f4>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004eac <checkAktifCalisma+0x8f8>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb0 <checkAktifCalisma+0x8fc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb4 <checkAktifCalisma+0x900>)
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d303      	bcc.n	8004d88 <checkAktifCalisma+0x7d4>
 8004d80:	4b49      	ldr	r3, [pc, #292]	@ (8004ea8 <checkAktifCalisma+0x8f4>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10d      	bne.n	8004da4 <checkAktifCalisma+0x7f0>
 8004d88:	4b45      	ldr	r3, [pc, #276]	@ (8004ea0 <checkAktifCalisma+0x8ec>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f083 0301 	eor.w	r3, r3, #1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <checkAktifCalisma+0x7f0>
 8004d96:	4b43      	ldr	r3, [pc, #268]	@ (8004ea4 <checkAktifCalisma+0x8f0>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f083 0301 	eor.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004da4:	2200      	movs	r2, #0
 8004da6:	2120      	movs	r1, #32
 8004da8:	483a      	ldr	r0, [pc, #232]	@ (8004e94 <checkAktifCalisma+0x8e0>)
 8004daa:	f005 fd8c 	bl	800a8c6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004dae:	4b3a      	ldr	r3, [pc, #232]	@ (8004e98 <checkAktifCalisma+0x8e4>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004db4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <checkAktifCalisma+0x8f4>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <checkAktifCalisma+0x904>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 8088 	bne.w	8004ed4 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004ebc <checkAktifCalisma+0x908>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d003      	beq.n	8004dd4 <checkAktifCalisma+0x820>
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <checkAktifCalisma+0x908>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d17f      	bne.n	8004ed4 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004dd4:	4b32      	ldr	r3, [pc, #200]	@ (8004ea0 <checkAktifCalisma+0x8ec>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d07b      	beq.n	8004ed4 <checkAktifCalisma+0x920>
 8004ddc:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <checkAktifCalisma+0x8f0>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d077      	beq.n	8004ed4 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004de4:	2140      	movs	r1, #64	@ 0x40
 8004de6:	482b      	ldr	r0, [pc, #172]	@ (8004e94 <checkAktifCalisma+0x8e0>)
 8004de8:	f005 fd56 	bl	800a898 <HAL_GPIO_ReadPin>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d170      	bne.n	8004ed4 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004df2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004df6:	4827      	ldr	r0, [pc, #156]	@ (8004e94 <checkAktifCalisma+0x8e0>)
 8004df8:	f005 fd4e 	bl	800a898 <HAL_GPIO_ReadPin>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <checkAktifCalisma+0x856>
 8004e02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec0 <checkAktifCalisma+0x90c>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d164      	bne.n	8004ed4 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e0e:	4823      	ldr	r0, [pc, #140]	@ (8004e9c <checkAktifCalisma+0x8e8>)
 8004e10:	f005 fd42 	bl	800a898 <HAL_GPIO_ReadPin>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10f      	bne.n	8004e3a <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e1e:	481f      	ldr	r0, [pc, #124]	@ (8004e9c <checkAktifCalisma+0x8e8>)
 8004e20:	f005 fd3a 	bl	800a898 <HAL_GPIO_ReadPin>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004e2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e2e:	481b      	ldr	r0, [pc, #108]	@ (8004e9c <checkAktifCalisma+0x8e8>)
 8004e30:	f005 fd32 	bl	800a898 <HAL_GPIO_ReadPin>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d003      	beq.n	8004e42 <checkAktifCalisma+0x88e>
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <checkAktifCalisma+0x910>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d048      	beq.n	8004ed4 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004e42:	4b21      	ldr	r3, [pc, #132]	@ (8004ec8 <checkAktifCalisma+0x914>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	f083 0301 	eor.w	r3, r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d041      	beq.n	8004ed4 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004e50:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <checkAktifCalisma+0x918>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f083 0301 	eor.w	r3, r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d03a      	beq.n	8004ed4 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed0 <checkAktifCalisma+0x91c>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f083 0301 	eor.w	r3, r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d033      	beq.n	8004ed4 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <checkAktifCalisma+0x8e4>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f083 0301 	eor.w	r3, r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02c      	beq.n	8004ed4 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004e7a:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <checkAktifCalisma+0x8dc>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f083 0301 	eor.w	r3, r3, #1
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d025      	beq.n	8004ed4 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004e88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <checkAktifCalisma+0x910>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e024      	b.n	8004eda <checkAktifCalisma+0x926>
 8004e90:	200016f6 	.word	0x200016f6
 8004e94:	40011000 	.word	0x40011000
 8004e98:	200016fa 	.word	0x200016fa
 8004e9c:	40010c00 	.word	0x40010c00
 8004ea0:	20001711 	.word	0x20001711
 8004ea4:	20001712 	.word	0x20001712
 8004ea8:	200016f2 	.word	0x200016f2
 8004eac:	20001698 	.word	0x20001698
 8004eb0:	200016a4 	.word	0x200016a4
 8004eb4:	200016d6 	.word	0x200016d6
 8004eb8:	200016dd 	.word	0x200016dd
 8004ebc:	200016cf 	.word	0x200016cf
 8004ec0:	200016d1 	.word	0x200016d1
 8004ec4:	200016f7 	.word	0x200016f7
 8004ec8:	200016f5 	.word	0x200016f5
 8004ecc:	200016f9 	.word	0x200016f9
 8004ed0:	200016f8 	.word	0x200016f8
				} else {
					devmotorasagicalisiyor=0;
 8004ed4:	4b96      	ldr	r3, [pc, #600]	@ (8005130 <checkAktifCalisma+0xb7c>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004eda:	4b95      	ldr	r3, [pc, #596]	@ (8005130 <checkAktifCalisma+0xb7c>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2110      	movs	r1, #16
 8004ee6:	4893      	ldr	r0, [pc, #588]	@ (8005134 <checkAktifCalisma+0xb80>)
 8004ee8:	f005 fced 	bl	800a8c6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004eec:	4b92      	ldr	r3, [pc, #584]	@ (8005138 <checkAktifCalisma+0xb84>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004ef2:	4b91      	ldr	r3, [pc, #580]	@ (8005138 <checkAktifCalisma+0xb84>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d024      	beq.n	8004f44 <checkAktifCalisma+0x990>
 8004efa:	2140      	movs	r1, #64	@ 0x40
 8004efc:	488d      	ldr	r0, [pc, #564]	@ (8005134 <checkAktifCalisma+0xb80>)
 8004efe:	f005 fccb 	bl	800a898 <HAL_GPIO_ReadPin>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d007      	beq.n	8004f18 <checkAktifCalisma+0x964>
 8004f08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f0c:	4889      	ldr	r0, [pc, #548]	@ (8005134 <checkAktifCalisma+0xb80>)
 8004f0e:	f005 fcc3 	bl	800a898 <HAL_GPIO_ReadPin>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d115      	bne.n	8004f44 <checkAktifCalisma+0x990>
 8004f18:	4b88      	ldr	r3, [pc, #544]	@ (800513c <checkAktifCalisma+0xb88>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d011      	beq.n	8004f44 <checkAktifCalisma+0x990>
 8004f20:	4b87      	ldr	r3, [pc, #540]	@ (8005140 <checkAktifCalisma+0xb8c>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <checkAktifCalisma+0x990>
 8004f28:	4b86      	ldr	r3, [pc, #536]	@ (8005144 <checkAktifCalisma+0xb90>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f083 0301 	eor.w	r3, r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d006      	beq.n	8004f44 <checkAktifCalisma+0x990>
					timer2=millis;
 8004f36:	4b84      	ldr	r3, [pc, #528]	@ (8005148 <checkAktifCalisma+0xb94>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a84      	ldr	r2, [pc, #528]	@ (800514c <checkAktifCalisma+0xb98>)
 8004f3c:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004f3e:	4b81      	ldr	r3, [pc, #516]	@ (8005144 <checkAktifCalisma+0xb90>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004f44:	4b80      	ldr	r3, [pc, #512]	@ (8005148 <checkAktifCalisma+0xb94>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b80      	ldr	r3, [pc, #512]	@ (800514c <checkAktifCalisma+0xb98>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	4a80      	ldr	r2, [pc, #512]	@ (8005150 <checkAktifCalisma+0xb9c>)
 8004f50:	7812      	ldrb	r2, [r2, #0]
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d303      	bcc.n	8004f5e <checkAktifCalisma+0x9aa>
 8004f56:	4b7b      	ldr	r3, [pc, #492]	@ (8005144 <checkAktifCalisma+0xb90>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <checkAktifCalisma+0x9c6>
 8004f5e:	4b77      	ldr	r3, [pc, #476]	@ (800513c <checkAktifCalisma+0xb88>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f083 0301 	eor.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <checkAktifCalisma+0x9c6>
 8004f6c:	4b74      	ldr	r3, [pc, #464]	@ (8005140 <checkAktifCalisma+0xb8c>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f083 0301 	eor.w	r3, r3, #1
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2110      	movs	r1, #16
 8004f7e:	486d      	ldr	r0, [pc, #436]	@ (8005134 <checkAktifCalisma+0xb80>)
 8004f80:	f005 fca1 	bl	800a8c6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004f84:	4b6c      	ldr	r3, [pc, #432]	@ (8005138 <checkAktifCalisma+0xb84>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005144 <checkAktifCalisma+0xb90>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004f90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f94:	486f      	ldr	r0, [pc, #444]	@ (8005154 <checkAktifCalisma+0xba0>)
 8004f96:	f005 fc7f 	bl	800a898 <HAL_GPIO_ReadPin>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d120      	bne.n	8004fe2 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004fa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004fa4:	486b      	ldr	r0, [pc, #428]	@ (8005154 <checkAktifCalisma+0xba0>)
 8004fa6:	f005 fc77 	bl	800a898 <HAL_GPIO_ReadPin>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d118      	bne.n	8004fe2 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	4868      	ldr	r0, [pc, #416]	@ (8005154 <checkAktifCalisma+0xba0>)
 8004fb4:	f005 fc70 	bl	800a898 <HAL_GPIO_ReadPin>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d111      	bne.n	8004fe2 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	4864      	ldr	r0, [pc, #400]	@ (8005154 <checkAktifCalisma+0xba0>)
 8004fc2:	f005 fc69 	bl	800a898 <HAL_GPIO_ReadPin>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4861      	ldr	r0, [pc, #388]	@ (8005154 <checkAktifCalisma+0xba0>)
 8004fd0:	f005 fc62 	bl	800a898 <HAL_GPIO_ReadPin>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004fda:	4b5f      	ldr	r3, [pc, #380]	@ (8005158 <checkAktifCalisma+0xba4>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e002      	b.n	8004fe8 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8005158 <checkAktifCalisma+0xba4>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800515c <checkAktifCalisma+0xba8>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d144      	bne.n	800507a <checkAktifCalisma+0xac6>
 8004ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <checkAktifCalisma+0xbac>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d003      	beq.n	8005000 <checkAktifCalisma+0xa4c>
 8004ff8:	4b59      	ldr	r3, [pc, #356]	@ (8005160 <checkAktifCalisma+0xbac>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d13c      	bne.n	800507a <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	484c      	ldr	r0, [pc, #304]	@ (8005134 <checkAktifCalisma+0xb80>)
 8005004:	f005 fc48 	bl	800a898 <HAL_GPIO_ReadPin>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <checkAktifCalisma+0xa62>
 800500e:	4b55      	ldr	r3, [pc, #340]	@ (8005164 <checkAktifCalisma+0xbb0>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <checkAktifCalisma+0xa7a>
 8005016:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800501a:	484e      	ldr	r0, [pc, #312]	@ (8005154 <checkAktifCalisma+0xba0>)
 800501c:	f005 fc3c 	bl	800a898 <HAL_GPIO_ReadPin>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d129      	bne.n	800507a <checkAktifCalisma+0xac6>
 8005026:	4b4f      	ldr	r3, [pc, #316]	@ (8005164 <checkAktifCalisma+0xbb0>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d125      	bne.n	800507a <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800502e:	2104      	movs	r1, #4
 8005030:	4840      	ldr	r0, [pc, #256]	@ (8005134 <checkAktifCalisma+0xb80>)
 8005032:	f005 fc31 	bl	800a898 <HAL_GPIO_ReadPin>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d003      	beq.n	8005044 <checkAktifCalisma+0xa90>
 800503c:	4b4a      	ldr	r3, [pc, #296]	@ (8005168 <checkAktifCalisma+0xbb4>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11a      	bne.n	800507a <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005044:	2102      	movs	r1, #2
 8005046:	483b      	ldr	r0, [pc, #236]	@ (8005134 <checkAktifCalisma+0xb80>)
 8005048:	f005 fc26 	bl	800a898 <HAL_GPIO_ReadPin>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8005052:	4b46      	ldr	r3, [pc, #280]	@ (800516c <checkAktifCalisma+0xbb8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f083 0301 	eor.w	r3, r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8005060:	4b3d      	ldr	r3, [pc, #244]	@ (8005158 <checkAktifCalisma+0xba4>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8005068:	4b41      	ldr	r3, [pc, #260]	@ (8005170 <checkAktifCalisma+0xbbc>)
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800506e:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <checkAktifCalisma+0xb94>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a40      	ldr	r2, [pc, #256]	@ (8005174 <checkAktifCalisma+0xbc0>)
 8005074:	6013      	str	r3, [r2, #0]
					bekle();
 8005076:	f7ff f901 	bl	800427c <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800507a:	4b33      	ldr	r3, [pc, #204]	@ (8005148 <checkAktifCalisma+0xb94>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b3d      	ldr	r3, [pc, #244]	@ (8005174 <checkAktifCalisma+0xbc0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a3c      	ldr	r2, [pc, #240]	@ (8005178 <checkAktifCalisma+0xbc4>)
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	4293      	cmp	r3, r2
 800508a:	d211      	bcs.n	80050b0 <checkAktifCalisma+0xafc>
 800508c:	2104      	movs	r1, #4
 800508e:	4829      	ldr	r0, [pc, #164]	@ (8005134 <checkAktifCalisma+0xb80>)
 8005090:	f005 fc02 	bl	800a898 <HAL_GPIO_ReadPin>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <checkAktifCalisma+0xafc>
 800509a:	4b33      	ldr	r3, [pc, #204]	@ (8005168 <checkAktifCalisma+0xbb4>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <checkAktifCalisma+0xafc>
 80050a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005158 <checkAktifCalisma+0xba4>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f083 0301 	eor.w	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 80050b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005170 <checkAktifCalisma+0xbbc>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050b6:	4b29      	ldr	r3, [pc, #164]	@ (800515c <checkAktifCalisma+0xba8>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d160      	bne.n	8005180 <checkAktifCalisma+0xbcc>
 80050be:	4b28      	ldr	r3, [pc, #160]	@ (8005160 <checkAktifCalisma+0xbac>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d003      	beq.n	80050ce <checkAktifCalisma+0xb1a>
 80050c6:	4b26      	ldr	r3, [pc, #152]	@ (8005160 <checkAktifCalisma+0xbac>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d158      	bne.n	8005180 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80050ce:	2104      	movs	r1, #4
 80050d0:	4818      	ldr	r0, [pc, #96]	@ (8005134 <checkAktifCalisma+0xb80>)
 80050d2:	f005 fbe1 	bl	800a898 <HAL_GPIO_ReadPin>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d003      	beq.n	80050e4 <checkAktifCalisma+0xb30>
 80050dc:	4b22      	ldr	r3, [pc, #136]	@ (8005168 <checkAktifCalisma+0xbb4>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d14d      	bne.n	8005180 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80050e4:	2102      	movs	r1, #2
 80050e6:	4813      	ldr	r0, [pc, #76]	@ (8005134 <checkAktifCalisma+0xb80>)
 80050e8:	f005 fbd6 	bl	800a898 <HAL_GPIO_ReadPin>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d146      	bne.n	8005180 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80050f2:	2180      	movs	r1, #128	@ 0x80
 80050f4:	480f      	ldr	r0, [pc, #60]	@ (8005134 <checkAktifCalisma+0xb80>)
 80050f6:	f005 fbcf 	bl	800a898 <HAL_GPIO_ReadPin>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <checkAktifCalisma+0xb54>
 8005100:	4b18      	ldr	r3, [pc, #96]	@ (8005164 <checkAktifCalisma+0xbb0>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <checkAktifCalisma+0xb6c>
 8005108:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800510c:	4811      	ldr	r0, [pc, #68]	@ (8005154 <checkAktifCalisma+0xba0>)
 800510e:	f005 fbc3 	bl	800a898 <HAL_GPIO_ReadPin>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d133      	bne.n	8005180 <checkAktifCalisma+0xbcc>
 8005118:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <checkAktifCalisma+0xbb0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d12f      	bne.n	8005180 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8005120:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <checkAktifCalisma+0xba4>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02b      	beq.n	8005180 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8005128:	4b14      	ldr	r3, [pc, #80]	@ (800517c <checkAktifCalisma+0xbc8>)
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e02a      	b.n	8005186 <checkAktifCalisma+0xbd2>
 8005130:	200016f7 	.word	0x200016f7
 8005134:	40011000 	.word	0x40011000
 8005138:	200016fb 	.word	0x200016fb
 800513c:	20001711 	.word	0x20001711
 8005140:	20001712 	.word	0x20001712
 8005144:	200016f3 	.word	0x200016f3
 8005148:	20001698 	.word	0x20001698
 800514c:	200016a4 	.word	0x200016a4
 8005150:	200016d6 	.word	0x200016d6
 8005154:	40010c00 	.word	0x40010c00
 8005158:	20001701 	.word	0x20001701
 800515c:	200016c9 	.word	0x200016c9
 8005160:	200016c8 	.word	0x200016c8
 8005164:	200016cc 	.word	0x200016cc
 8005168:	200016c6 	.word	0x200016c6
 800516c:	200016ef 	.word	0x200016ef
 8005170:	20001702 	.word	0x20001702
 8005174:	2000169c 	.word	0x2000169c
 8005178:	200016d9 	.word	0x200016d9
 800517c:	20001703 	.word	0x20001703
				} else {
					kapi1butonkontrol=0;
 8005180:	4b8b      	ldr	r3, [pc, #556]	@ (80053b0 <checkAktifCalisma+0xdfc>)
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005186:	4b8b      	ldr	r3, [pc, #556]	@ (80053b4 <checkAktifCalisma+0xe00>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d121      	bne.n	80051d2 <checkAktifCalisma+0xc1e>
 800518e:	4b8a      	ldr	r3, [pc, #552]	@ (80053b8 <checkAktifCalisma+0xe04>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d003      	beq.n	800519e <checkAktifCalisma+0xbea>
 8005196:	4b88      	ldr	r3, [pc, #544]	@ (80053b8 <checkAktifCalisma+0xe04>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d119      	bne.n	80051d2 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800519e:	2104      	movs	r1, #4
 80051a0:	4886      	ldr	r0, [pc, #536]	@ (80053bc <checkAktifCalisma+0xe08>)
 80051a2:	f005 fb79 	bl	800a898 <HAL_GPIO_ReadPin>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d003      	beq.n	80051b4 <checkAktifCalisma+0xc00>
 80051ac:	4b84      	ldr	r3, [pc, #528]	@ (80053c0 <checkAktifCalisma+0xe0c>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10e      	bne.n	80051d2 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80051b4:	2102      	movs	r1, #2
 80051b6:	4881      	ldr	r0, [pc, #516]	@ (80053bc <checkAktifCalisma+0xe08>)
 80051b8:	f005 fb6e 	bl	800a898 <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 80051c2:	4b80      	ldr	r3, [pc, #512]	@ (80053c4 <checkAktifCalisma+0xe10>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 80051ca:	4b7f      	ldr	r3, [pc, #508]	@ (80053c8 <checkAktifCalisma+0xe14>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e002      	b.n	80051d8 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 80051d2:	4b7d      	ldr	r3, [pc, #500]	@ (80053c8 <checkAktifCalisma+0xe14>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80051d8:	4b75      	ldr	r3, [pc, #468]	@ (80053b0 <checkAktifCalisma+0xdfc>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <checkAktifCalisma+0xc3c>
 80051e0:	4b79      	ldr	r3, [pc, #484]	@ (80053c8 <checkAktifCalisma+0xe14>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <checkAktifCalisma+0xc3c>
 80051e8:	4b78      	ldr	r3, [pc, #480]	@ (80053cc <checkAktifCalisma+0xe18>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80051f0:	2201      	movs	r2, #1
 80051f2:	2180      	movs	r1, #128	@ 0x80
 80051f4:	4876      	ldr	r0, [pc, #472]	@ (80053d0 <checkAktifCalisma+0xe1c>)
 80051f6:	f005 fb66 	bl	800a8c6 <HAL_GPIO_WritePin>
 80051fa:	e004      	b.n	8005206 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80051fc:	2200      	movs	r2, #0
 80051fe:	2180      	movs	r1, #128	@ 0x80
 8005200:	4873      	ldr	r0, [pc, #460]	@ (80053d0 <checkAktifCalisma+0xe1c>)
 8005202:	f005 fb60 	bl	800a8c6 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005206:	4b73      	ldr	r3, [pc, #460]	@ (80053d4 <checkAktifCalisma+0xe20>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d141      	bne.n	8005292 <checkAktifCalisma+0xcde>
 800520e:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <checkAktifCalisma+0xe04>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d003      	beq.n	800521e <checkAktifCalisma+0xc6a>
 8005216:	4b68      	ldr	r3, [pc, #416]	@ (80053b8 <checkAktifCalisma+0xe04>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d139      	bne.n	8005292 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800521e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005222:	4866      	ldr	r0, [pc, #408]	@ (80053bc <checkAktifCalisma+0xe08>)
 8005224:	f005 fb38 	bl	800a898 <HAL_GPIO_ReadPin>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <checkAktifCalisma+0xc82>
 800522e:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <checkAktifCalisma+0xe24>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <checkAktifCalisma+0xc9a>
 8005236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800523a:	4868      	ldr	r0, [pc, #416]	@ (80053dc <checkAktifCalisma+0xe28>)
 800523c:	f005 fb2c 	bl	800a898 <HAL_GPIO_ReadPin>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d125      	bne.n	8005292 <checkAktifCalisma+0xcde>
 8005246:	4b64      	ldr	r3, [pc, #400]	@ (80053d8 <checkAktifCalisma+0xe24>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d121      	bne.n	8005292 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800524e:	2102      	movs	r1, #2
 8005250:	485a      	ldr	r0, [pc, #360]	@ (80053bc <checkAktifCalisma+0xe08>)
 8005252:	f005 fb21 	bl	800a898 <HAL_GPIO_ReadPin>
 8005256:	4603      	mov	r3, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	d11a      	bne.n	8005292 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800525c:	2104      	movs	r1, #4
 800525e:	4857      	ldr	r0, [pc, #348]	@ (80053bc <checkAktifCalisma+0xe08>)
 8005260:	f005 fb1a 	bl	800a898 <HAL_GPIO_ReadPin>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d113      	bne.n	8005292 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 800526a:	4b56      	ldr	r3, [pc, #344]	@ (80053c4 <checkAktifCalisma+0xe10>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8005272:	4b5b      	ldr	r3, [pc, #364]	@ (80053e0 <checkAktifCalisma+0xe2c>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	f083 0301 	eor.w	r3, r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8005280:	4b58      	ldr	r3, [pc, #352]	@ (80053e4 <checkAktifCalisma+0xe30>)
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005286:	4b58      	ldr	r3, [pc, #352]	@ (80053e8 <checkAktifCalisma+0xe34>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a58      	ldr	r2, [pc, #352]	@ (80053ec <checkAktifCalisma+0xe38>)
 800528c:	6013      	str	r3, [r2, #0]
					bekle();
 800528e:	f7fe fff5 	bl	800427c <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005292:	4b55      	ldr	r3, [pc, #340]	@ (80053e8 <checkAktifCalisma+0xe34>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b55      	ldr	r3, [pc, #340]	@ (80053ec <checkAktifCalisma+0xe38>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	4a54      	ldr	r2, [pc, #336]	@ (80053f0 <checkAktifCalisma+0xe3c>)
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d20d      	bcs.n	80052c0 <checkAktifCalisma+0xd0c>
 80052a4:	2102      	movs	r1, #2
 80052a6:	4845      	ldr	r0, [pc, #276]	@ (80053bc <checkAktifCalisma+0xe08>)
 80052a8:	f005 faf6 	bl	800a898 <HAL_GPIO_ReadPin>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <checkAktifCalisma+0xd0c>
 80052b2:	4b44      	ldr	r3, [pc, #272]	@ (80053c4 <checkAktifCalisma+0xe10>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f083 0301 	eor.w	r3, r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 80052c0:	4b48      	ldr	r3, [pc, #288]	@ (80053e4 <checkAktifCalisma+0xe30>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80052c6:	4b43      	ldr	r3, [pc, #268]	@ (80053d4 <checkAktifCalisma+0xe20>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d135      	bne.n	800533a <checkAktifCalisma+0xd86>
 80052ce:	4b3a      	ldr	r3, [pc, #232]	@ (80053b8 <checkAktifCalisma+0xe04>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d003      	beq.n	80052de <checkAktifCalisma+0xd2a>
 80052d6:	4b38      	ldr	r3, [pc, #224]	@ (80053b8 <checkAktifCalisma+0xe04>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d12d      	bne.n	800533a <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80052de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052e2:	4836      	ldr	r0, [pc, #216]	@ (80053bc <checkAktifCalisma+0xe08>)
 80052e4:	f005 fad8 	bl	800a898 <HAL_GPIO_ReadPin>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <checkAktifCalisma+0xd42>
 80052ee:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <checkAktifCalisma+0xe24>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <checkAktifCalisma+0xd5a>
 80052f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052fa:	4838      	ldr	r0, [pc, #224]	@ (80053dc <checkAktifCalisma+0xe28>)
 80052fc:	f005 facc 	bl	800a898 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d119      	bne.n	800533a <checkAktifCalisma+0xd86>
 8005306:	4b34      	ldr	r3, [pc, #208]	@ (80053d8 <checkAktifCalisma+0xe24>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d115      	bne.n	800533a <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800530e:	2102      	movs	r1, #2
 8005310:	482a      	ldr	r0, [pc, #168]	@ (80053bc <checkAktifCalisma+0xe08>)
 8005312:	f005 fac1 	bl	800a898 <HAL_GPIO_ReadPin>
 8005316:	4603      	mov	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10e      	bne.n	800533a <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800531c:	2104      	movs	r1, #4
 800531e:	4827      	ldr	r0, [pc, #156]	@ (80053bc <checkAktifCalisma+0xe08>)
 8005320:	f005 faba 	bl	800a898 <HAL_GPIO_ReadPin>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 800532a:	4b26      	ldr	r3, [pc, #152]	@ (80053c4 <checkAktifCalisma+0xe10>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8005332:	4b30      	ldr	r3, [pc, #192]	@ (80053f4 <checkAktifCalisma+0xe40>)
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e002      	b.n	8005340 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800533a:	4b2e      	ldr	r3, [pc, #184]	@ (80053f4 <checkAktifCalisma+0xe40>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005340:	4b24      	ldr	r3, [pc, #144]	@ (80053d4 <checkAktifCalisma+0xe20>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d11d      	bne.n	8005384 <checkAktifCalisma+0xdd0>
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <checkAktifCalisma+0xe04>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d003      	beq.n	8005358 <checkAktifCalisma+0xda4>
 8005350:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <checkAktifCalisma+0xe04>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d115      	bne.n	8005384 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005358:	2102      	movs	r1, #2
 800535a:	4818      	ldr	r0, [pc, #96]	@ (80053bc <checkAktifCalisma+0xe08>)
 800535c:	f005 fa9c 	bl	800a898 <HAL_GPIO_ReadPin>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005366:	2104      	movs	r1, #4
 8005368:	4814      	ldr	r0, [pc, #80]	@ (80053bc <checkAktifCalisma+0xe08>)
 800536a:	f005 fa95 	bl	800a898 <HAL_GPIO_ReadPin>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d107      	bne.n	8005384 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8005374:	4b13      	ldr	r3, [pc, #76]	@ (80053c4 <checkAktifCalisma+0xe10>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 800537c:	4b1e      	ldr	r3, [pc, #120]	@ (80053f8 <checkAktifCalisma+0xe44>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e002      	b.n	800538a <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005384:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <checkAktifCalisma+0xe44>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800538a:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <checkAktifCalisma+0xe40>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <checkAktifCalisma+0xdee>
 8005392:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <checkAktifCalisma+0xe44>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <checkAktifCalisma+0xdee>
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <checkAktifCalisma+0xe30>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02c      	beq.n	80053fc <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80053a2:	2201      	movs	r2, #1
 80053a4:	2140      	movs	r1, #64	@ 0x40
 80053a6:	480a      	ldr	r0, [pc, #40]	@ (80053d0 <checkAktifCalisma+0xe1c>)
 80053a8:	f005 fa8d 	bl	800a8c6 <HAL_GPIO_WritePin>
 80053ac:	e02b      	b.n	8005406 <checkAktifCalisma+0xe52>
 80053ae:	bf00      	nop
 80053b0:	20001703 	.word	0x20001703
 80053b4:	200016c9 	.word	0x200016c9
 80053b8:	200016c8 	.word	0x200016c8
 80053bc:	40011000 	.word	0x40011000
 80053c0:	200016c6 	.word	0x200016c6
 80053c4:	20001701 	.word	0x20001701
 80053c8:	20001704 	.word	0x20001704
 80053cc:	20001702 	.word	0x20001702
 80053d0:	40010800 	.word	0x40010800
 80053d4:	200016ca 	.word	0x200016ca
 80053d8:	200016cc 	.word	0x200016cc
 80053dc:	40010c00 	.word	0x40010c00
 80053e0:	200016ef 	.word	0x200016ef
 80053e4:	20001705 	.word	0x20001705
 80053e8:	20001698 	.word	0x20001698
 80053ec:	2000169c 	.word	0x2000169c
 80053f0:	200016da 	.word	0x200016da
 80053f4:	20001706 	.word	0x20001706
 80053f8:	20001707 	.word	0x20001707
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80053fc:	2200      	movs	r2, #0
 80053fe:	2140      	movs	r1, #64	@ 0x40
 8005400:	4889      	ldr	r0, [pc, #548]	@ (8005628 <checkAktifCalisma+0x1074>)
 8005402:	f005 fa60 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8005406:	4b89      	ldr	r3, [pc, #548]	@ (800562c <checkAktifCalisma+0x1078>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <checkAktifCalisma+0xe62>
 800540e:	4b87      	ldr	r3, [pc, #540]	@ (800562c <checkAktifCalisma+0x1078>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d115      	bne.n	8005442 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005416:	2104      	movs	r1, #4
 8005418:	4885      	ldr	r0, [pc, #532]	@ (8005630 <checkAktifCalisma+0x107c>)
 800541a:	f005 fa3d 	bl	800a898 <HAL_GPIO_ReadPin>
 800541e:	4603      	mov	r3, r0
 8005420:	2b01      	cmp	r3, #1
 8005422:	d003      	beq.n	800542c <checkAktifCalisma+0xe78>
 8005424:	4b83      	ldr	r3, [pc, #524]	@ (8005634 <checkAktifCalisma+0x1080>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800542c:	2102      	movs	r1, #2
 800542e:	4880      	ldr	r0, [pc, #512]	@ (8005630 <checkAktifCalisma+0x107c>)
 8005430:	f005 fa32 	bl	800a898 <HAL_GPIO_ReadPin>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800543a:	4b7f      	ldr	r3, [pc, #508]	@ (8005638 <checkAktifCalisma+0x1084>)
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e002      	b.n	8005448 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005442:	4b7d      	ldr	r3, [pc, #500]	@ (8005638 <checkAktifCalisma+0x1084>)
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005448:	4b78      	ldr	r3, [pc, #480]	@ (800562c <checkAktifCalisma+0x1078>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d003      	beq.n	8005458 <checkAktifCalisma+0xea4>
 8005450:	4b76      	ldr	r3, [pc, #472]	@ (800562c <checkAktifCalisma+0x1078>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d111      	bne.n	800547c <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005458:	2102      	movs	r1, #2
 800545a:	4875      	ldr	r0, [pc, #468]	@ (8005630 <checkAktifCalisma+0x107c>)
 800545c:	f005 fa1c 	bl	800a898 <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d10a      	bne.n	800547c <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005466:	2104      	movs	r1, #4
 8005468:	4871      	ldr	r0, [pc, #452]	@ (8005630 <checkAktifCalisma+0x107c>)
 800546a:	f005 fa15 	bl	800a898 <HAL_GPIO_ReadPin>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005474:	4b71      	ldr	r3, [pc, #452]	@ (800563c <checkAktifCalisma+0x1088>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e002      	b.n	8005482 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 800547c:	4b6f      	ldr	r3, [pc, #444]	@ (800563c <checkAktifCalisma+0x1088>)
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005482:	4b6d      	ldr	r3, [pc, #436]	@ (8005638 <checkAktifCalisma+0x1084>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00f      	beq.n	80054aa <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 800548a:	4b6d      	ldr	r3, [pc, #436]	@ (8005640 <checkAktifCalisma+0x108c>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10b      	bne.n	80054aa <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005496:	486b      	ldr	r0, [pc, #428]	@ (8005644 <checkAktifCalisma+0x1090>)
 8005498:	f005 f9fe 	bl	800a898 <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 80054a2:	4b69      	ldr	r3, [pc, #420]	@ (8005648 <checkAktifCalisma+0x1094>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 80054aa:	4b67      	ldr	r3, [pc, #412]	@ (8005648 <checkAktifCalisma+0x1094>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80054b0:	4b62      	ldr	r3, [pc, #392]	@ (800563c <checkAktifCalisma+0x1088>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00f      	beq.n	80054d8 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 80054b8:	4b61      	ldr	r3, [pc, #388]	@ (8005640 <checkAktifCalisma+0x108c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10b      	bne.n	80054d8 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80054c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054c4:	485f      	ldr	r0, [pc, #380]	@ (8005644 <checkAktifCalisma+0x1090>)
 80054c6:	f005 f9e7 	bl	800a898 <HAL_GPIO_ReadPin>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 80054d0:	4b5e      	ldr	r3, [pc, #376]	@ (800564c <checkAktifCalisma+0x1098>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	e002      	b.n	80054de <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 80054d8:	4b5c      	ldr	r3, [pc, #368]	@ (800564c <checkAktifCalisma+0x1098>)
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80054de:	4b5c      	ldr	r3, [pc, #368]	@ (8005650 <checkAktifCalisma+0x109c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11b      	bne.n	800551e <checkAktifCalisma+0xf6a>
 80054e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005654 <checkAktifCalisma+0x10a0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d003      	beq.n	80054f6 <checkAktifCalisma+0xf42>
 80054ee:	4b59      	ldr	r3, [pc, #356]	@ (8005654 <checkAktifCalisma+0x10a0>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d113      	bne.n	800551e <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 80054f6:	4b50      	ldr	r3, [pc, #320]	@ (8005638 <checkAktifCalisma+0x1084>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <checkAktifCalisma+0xf52>
 80054fe:	4b4f      	ldr	r3, [pc, #316]	@ (800563c <checkAktifCalisma+0x1088>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <checkAktifCalisma+0xf6a>
 8005506:	4b54      	ldr	r3, [pc, #336]	@ (8005658 <checkAktifCalisma+0x10a4>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <checkAktifCalisma+0xf62>
 800550e:	4b53      	ldr	r3, [pc, #332]	@ (800565c <checkAktifCalisma+0x10a8>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 8005516:	4b52      	ldr	r3, [pc, #328]	@ (8005660 <checkAktifCalisma+0x10ac>)
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e002      	b.n	8005524 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 800551e:	4b50      	ldr	r3, [pc, #320]	@ (8005660 <checkAktifCalisma+0x10ac>)
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005524:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <checkAktifCalisma+0x109c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d148      	bne.n	80055be <checkAktifCalisma+0x100a>
 800552c:	4b49      	ldr	r3, [pc, #292]	@ (8005654 <checkAktifCalisma+0x10a0>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d003      	beq.n	800553c <checkAktifCalisma+0xf88>
 8005534:	4b47      	ldr	r3, [pc, #284]	@ (8005654 <checkAktifCalisma+0x10a0>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d140      	bne.n	80055be <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800553c:	4b3e      	ldr	r3, [pc, #248]	@ (8005638 <checkAktifCalisma+0x1084>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <checkAktifCalisma+0xf98>
 8005544:	4b3d      	ldr	r3, [pc, #244]	@ (800563c <checkAktifCalisma+0x1088>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d038      	beq.n	80055be <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800554c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005550:	4837      	ldr	r0, [pc, #220]	@ (8005630 <checkAktifCalisma+0x107c>)
 8005552:	f005 f9a1 	bl	800a898 <HAL_GPIO_ReadPin>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800555c:	2180      	movs	r1, #128	@ 0x80
 800555e:	4834      	ldr	r0, [pc, #208]	@ (8005630 <checkAktifCalisma+0x107c>)
 8005560:	f005 f99a 	bl	800a898 <HAL_GPIO_ReadPin>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800556a:	2104      	movs	r1, #4
 800556c:	4830      	ldr	r0, [pc, #192]	@ (8005630 <checkAktifCalisma+0x107c>)
 800556e:	f005 f993 	bl	800a898 <HAL_GPIO_ReadPin>
 8005572:	4603      	mov	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d00e      	beq.n	8005596 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800557c:	482c      	ldr	r0, [pc, #176]	@ (8005630 <checkAktifCalisma+0x107c>)
 800557e:	f005 f98b 	bl	800a898 <HAL_GPIO_ReadPin>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005588:	2102      	movs	r1, #2
 800558a:	4829      	ldr	r0, [pc, #164]	@ (8005630 <checkAktifCalisma+0x107c>)
 800558c:	f005 f984 	bl	800a898 <HAL_GPIO_ReadPin>
 8005590:	4603      	mov	r3, r0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d103      	bne.n	800559e <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005596:	4b2a      	ldr	r3, [pc, #168]	@ (8005640 <checkAktifCalisma+0x108c>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <checkAktifCalisma+0xffa>
 800559e:	4b2a      	ldr	r3, [pc, #168]	@ (8005648 <checkAktifCalisma+0x1094>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <checkAktifCalisma+0xffa>
 80055a6:	4b29      	ldr	r3, [pc, #164]	@ (800564c <checkAktifCalisma+0x1098>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 80055ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <checkAktifCalisma+0x10b0>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 80055b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005668 <checkAktifCalisma+0x10b4>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e002      	b.n	80055c4 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 80055be:	4b2a      	ldr	r3, [pc, #168]	@ (8005668 <checkAktifCalisma+0x10b4>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80055c4:	4b22      	ldr	r3, [pc, #136]	@ (8005650 <checkAktifCalisma+0x109c>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d117      	bne.n	80055fc <checkAktifCalisma+0x1048>
 80055cc:	4b21      	ldr	r3, [pc, #132]	@ (8005654 <checkAktifCalisma+0x10a0>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d003      	beq.n	80055dc <checkAktifCalisma+0x1028>
 80055d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005654 <checkAktifCalisma+0x10a0>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d10f      	bne.n	80055fc <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80055dc:	4b16      	ldr	r3, [pc, #88]	@ (8005638 <checkAktifCalisma+0x1084>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <checkAktifCalisma+0x1038>
 80055e4:	4b15      	ldr	r3, [pc, #84]	@ (800563c <checkAktifCalisma+0x1088>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 80055ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <checkAktifCalisma+0x10b0>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 80055f4:	4b1d      	ldr	r3, [pc, #116]	@ (800566c <checkAktifCalisma+0x10b8>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	e002      	b.n	8005602 <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <checkAktifCalisma+0x10b8>)
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005602:	4b19      	ldr	r3, [pc, #100]	@ (8005668 <checkAktifCalisma+0x10b4>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <checkAktifCalisma+0x1066>
 800560a:	4b15      	ldr	r3, [pc, #84]	@ (8005660 <checkAktifCalisma+0x10ac>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d103      	bne.n	800561a <checkAktifCalisma+0x1066>
 8005612:	4b16      	ldr	r3, [pc, #88]	@ (800566c <checkAktifCalisma+0x10b8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02a      	beq.n	8005670 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800561a:	2201      	movs	r2, #1
 800561c:	2120      	movs	r1, #32
 800561e:	4802      	ldr	r0, [pc, #8]	@ (8005628 <checkAktifCalisma+0x1074>)
 8005620:	f005 f951 	bl	800a8c6 <HAL_GPIO_WritePin>
 8005624:	e029      	b.n	800567a <checkAktifCalisma+0x10c6>
 8005626:	bf00      	nop
 8005628:	40010800 	.word	0x40010800
 800562c:	200016cd 	.word	0x200016cd
 8005630:	40011000 	.word	0x40011000
 8005634:	200016c6 	.word	0x200016c6
 8005638:	2000170b 	.word	0x2000170b
 800563c:	2000170c 	.word	0x2000170c
 8005640:	200016cc 	.word	0x200016cc
 8005644:	40010c00 	.word	0x40010c00
 8005648:	2000171b 	.word	0x2000171b
 800564c:	2000171c 	.word	0x2000171c
 8005650:	200016cb 	.word	0x200016cb
 8005654:	200016c8 	.word	0x200016c8
 8005658:	20001702 	.word	0x20001702
 800565c:	20001705 	.word	0x20001705
 8005660:	20001708 	.word	0x20001708
 8005664:	20001701 	.word	0x20001701
 8005668:	20001709 	.word	0x20001709
 800566c:	2000170a 	.word	0x2000170a
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	2120      	movs	r1, #32
 8005674:	4887      	ldr	r0, [pc, #540]	@ (8005894 <checkAktifCalisma+0x12e0>)
 8005676:	f005 f926 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800567a:	4b87      	ldr	r3, [pc, #540]	@ (8005898 <checkAktifCalisma+0x12e4>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <checkAktifCalisma+0x10ec>
 8005682:	2102      	movs	r1, #2
 8005684:	4885      	ldr	r0, [pc, #532]	@ (800589c <checkAktifCalisma+0x12e8>)
 8005686:	f005 f907 	bl	800a898 <HAL_GPIO_ReadPin>
 800568a:	4603      	mov	r3, r0
 800568c:	2b01      	cmp	r3, #1
 800568e:	d107      	bne.n	80056a0 <checkAktifCalisma+0x10ec>
 8005690:	4b83      	ldr	r3, [pc, #524]	@ (80058a0 <checkAktifCalisma+0x12ec>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <checkAktifCalisma+0x10ec>
 8005698:	4b82      	ldr	r3, [pc, #520]	@ (80058a4 <checkAktifCalisma+0x12f0>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d112      	bne.n	80056c6 <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80056a0:	4b81      	ldr	r3, [pc, #516]	@ (80058a8 <checkAktifCalisma+0x12f4>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d032      	beq.n	800570e <checkAktifCalisma+0x115a>
 80056a8:	2104      	movs	r1, #4
 80056aa:	487c      	ldr	r0, [pc, #496]	@ (800589c <checkAktifCalisma+0x12e8>)
 80056ac:	f005 f8f4 	bl	800a898 <HAL_GPIO_ReadPin>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d12b      	bne.n	800570e <checkAktifCalisma+0x115a>
 80056b6:	4b7a      	ldr	r3, [pc, #488]	@ (80058a0 <checkAktifCalisma+0x12ec>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d027      	beq.n	800570e <checkAktifCalisma+0x115a>
 80056be:	4b79      	ldr	r3, [pc, #484]	@ (80058a4 <checkAktifCalisma+0x12f0>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d023      	beq.n	800570e <checkAktifCalisma+0x115a>



					calismaSayisi++;
 80056c6:	4b79      	ldr	r3, [pc, #484]	@ (80058ac <checkAktifCalisma+0x12f8>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4b77      	ldr	r3, [pc, #476]	@ (80058ac <checkAktifCalisma+0x12f8>)
 80056d0:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80056d2:	4b76      	ldr	r3, [pc, #472]	@ (80058ac <checkAktifCalisma+0x12f8>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2bff      	cmp	r3, #255	@ 0xff
 80056d8:	d108      	bne.n	80056ec <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 80056da:	4b74      	ldr	r3, [pc, #464]	@ (80058ac <checkAktifCalisma+0x12f8>)
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80056e0:	4b73      	ldr	r3, [pc, #460]	@ (80058b0 <checkAktifCalisma+0x12fc>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	4b71      	ldr	r3, [pc, #452]	@ (80058b0 <checkAktifCalisma+0x12fc>)
 80056ea:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80056ec:	4b6f      	ldr	r3, [pc, #444]	@ (80058ac <checkAktifCalisma+0x12f8>)
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	4b70      	ldr	r3, [pc, #448]	@ (80058b4 <checkAktifCalisma+0x1300>)
 80056f2:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80056f4:	4b6e      	ldr	r3, [pc, #440]	@ (80058b0 <checkAktifCalisma+0x12fc>)
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	4b6e      	ldr	r3, [pc, #440]	@ (80058b4 <checkAktifCalisma+0x1300>)
 80056fa:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80056fc:	4b6e      	ldr	r3, [pc, #440]	@ (80058b8 <checkAktifCalisma+0x1304>)
 80056fe:	2201      	movs	r2, #1
 8005700:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8005702:	4b65      	ldr	r3, [pc, #404]	@ (8005898 <checkAktifCalisma+0x12e4>)
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8005708:	4b67      	ldr	r3, [pc, #412]	@ (80058a8 <checkAktifCalisma+0x12f4>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800570e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005712:	486a      	ldr	r0, [pc, #424]	@ (80058bc <checkAktifCalisma+0x1308>)
 8005714:	f005 f8c0 	bl	800a898 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800571e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005722:	4866      	ldr	r0, [pc, #408]	@ (80058bc <checkAktifCalisma+0x1308>)
 8005724:	f005 f8b8 	bl	800a898 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800572e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005732:	4862      	ldr	r0, [pc, #392]	@ (80058bc <checkAktifCalisma+0x1308>)
 8005734:	f005 f8b0 	bl	800a898 <HAL_GPIO_ReadPin>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800573e:	2140      	movs	r1, #64	@ 0x40
 8005740:	4856      	ldr	r0, [pc, #344]	@ (800589c <checkAktifCalisma+0x12e8>)
 8005742:	f005 f8a9 	bl	800a898 <HAL_GPIO_ReadPin>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <checkAktifCalisma+0x11a0>

					startBasili=1;
 800574c:	4b5c      	ldr	r3, [pc, #368]	@ (80058c0 <checkAktifCalisma+0x130c>)
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e002      	b.n	800575a <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 8005754:	4b5a      	ldr	r3, [pc, #360]	@ (80058c0 <checkAktifCalisma+0x130c>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800575a:	4b59      	ldr	r3, [pc, #356]	@ (80058c0 <checkAktifCalisma+0x130c>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <checkAktifCalisma+0x11d8>
 8005762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005766:	4855      	ldr	r0, [pc, #340]	@ (80058bc <checkAktifCalisma+0x1308>)
 8005768:	f005 f896 	bl	800a898 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d10c      	bne.n	800578c <checkAktifCalisma+0x11d8>

					hataVar=1;
 8005772:	4b54      	ldr	r3, [pc, #336]	@ (80058c4 <checkAktifCalisma+0x1310>)
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005778:	2001      	movs	r0, #1
 800577a:	f7fb fd13 	bl	80011a4 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800577e:	2001      	movs	r0, #1
 8005780:	f7fb fcb8 	bl	80010f4 <hata2EEPROM>
					acilstophatasi=1;
 8005784:	4b50      	ldr	r3, [pc, #320]	@ (80058c8 <checkAktifCalisma+0x1314>)
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e018      	b.n	80057be <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800578c:	4b4e      	ldr	r3, [pc, #312]	@ (80058c8 <checkAktifCalisma+0x1314>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d014      	beq.n	80057be <checkAktifCalisma+0x120a>
 8005794:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005798:	4848      	ldr	r0, [pc, #288]	@ (80058bc <checkAktifCalisma+0x1308>)
 800579a:	f005 f87d 	bl	800a898 <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10c      	bne.n	80057be <checkAktifCalisma+0x120a>
 80057a4:	4b46      	ldr	r3, [pc, #280]	@ (80058c0 <checkAktifCalisma+0x130c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 80057b2:	4b45      	ldr	r3, [pc, #276]	@ (80058c8 <checkAktifCalisma+0x1314>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80057b8:	2001      	movs	r0, #1
 80057ba:	f7fe fcf1 	bl	80041a0 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80057be:	4b43      	ldr	r3, [pc, #268]	@ (80058cc <checkAktifCalisma+0x1318>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f083 0301 	eor.w	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d023      	beq.n	8005814 <checkAktifCalisma+0x1260>
 80057cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80057d0:	483a      	ldr	r0, [pc, #232]	@ (80058bc <checkAktifCalisma+0x1308>)
 80057d2:	f005 f861 	bl	800a898 <HAL_GPIO_ReadPin>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <checkAktifCalisma+0x1230>
 80057dc:	4b3c      	ldr	r3, [pc, #240]	@ (80058d0 <checkAktifCalisma+0x131c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <checkAktifCalisma+0x1260>
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <checkAktifCalisma+0x1320>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d113      	bne.n	8005814 <checkAktifCalisma+0x1260>
 80057ec:	4b3a      	ldr	r3, [pc, #232]	@ (80058d8 <checkAktifCalisma+0x1324>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f083 0301 	eor.w	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <checkAktifCalisma+0x1260>
					hataVar=1;
 80057fa:	4b32      	ldr	r3, [pc, #200]	@ (80058c4 <checkAktifCalisma+0x1310>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005800:	2002      	movs	r0, #2
 8005802:	f7fb fccf 	bl	80011a4 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8005806:	2002      	movs	r0, #2
 8005808:	f7fb fc74 	bl	80010f4 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 800580c:	4b32      	ldr	r3, [pc, #200]	@ (80058d8 <checkAktifCalisma+0x1324>)
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e017      	b.n	8005844 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005814:	4b30      	ldr	r3, [pc, #192]	@ (80058d8 <checkAktifCalisma+0x1324>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d013      	beq.n	8005844 <checkAktifCalisma+0x1290>
 800581c:	4b2b      	ldr	r3, [pc, #172]	@ (80058cc <checkAktifCalisma+0x1318>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <checkAktifCalisma+0x1290>
 8005824:	4b2d      	ldr	r3, [pc, #180]	@ (80058dc <checkAktifCalisma+0x1328>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f083 0301 	eor.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 8005832:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <checkAktifCalisma+0x1324>)
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005838:	4b25      	ldr	r3, [pc, #148]	@ (80058d0 <checkAktifCalisma+0x131c>)
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800583e:	2002      	movs	r0, #2
 8005840:	f7fe fcae 	bl	80041a0 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005844:	4b26      	ldr	r3, [pc, #152]	@ (80058e0 <checkAktifCalisma+0x132c>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d151      	bne.n	80058f0 <checkAktifCalisma+0x133c>
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <checkAktifCalisma+0x1330>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d14d      	bne.n	80058f0 <checkAktifCalisma+0x133c>
 8005854:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <checkAktifCalisma+0x1334>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d049      	beq.n	80058f0 <checkAktifCalisma+0x133c>
 800585c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005860:	480e      	ldr	r0, [pc, #56]	@ (800589c <checkAktifCalisma+0x12e8>)
 8005862:	f005 f819 	bl	800a898 <HAL_GPIO_ReadPin>
 8005866:	4603      	mov	r3, r0
 8005868:	2b01      	cmp	r3, #1
 800586a:	d141      	bne.n	80058f0 <checkAktifCalisma+0x133c>
 800586c:	4b1f      	ldr	r3, [pc, #124]	@ (80058ec <checkAktifCalisma+0x1338>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f083 0301 	eor.w	r3, r3, #1
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03a      	beq.n	80058f0 <checkAktifCalisma+0x133c>
					hataVar=1;
 800587a:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <checkAktifCalisma+0x1310>)
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005880:	2003      	movs	r0, #3
 8005882:	f7fb fc8f 	bl	80011a4 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8005886:	2003      	movs	r0, #3
 8005888:	f7fb fc34 	bl	80010f4 <hata2EEPROM>
					basinchatasi=1;
 800588c:	4b17      	ldr	r3, [pc, #92]	@ (80058ec <checkAktifCalisma+0x1338>)
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e043      	b.n	800591c <checkAktifCalisma+0x1368>
 8005894:	40010800 	.word	0x40010800
 8005898:	200016ff 	.word	0x200016ff
 800589c:	40011000 	.word	0x40011000
 80058a0:	200016c6 	.word	0x200016c6
 80058a4:	20001701 	.word	0x20001701
 80058a8:	20001700 	.word	0x20001700
 80058ac:	200016b8 	.word	0x200016b8
 80058b0:	200016ba 	.word	0x200016ba
 80058b4:	200011f0 	.word	0x200011f0
 80058b8:	200016ec 	.word	0x200016ec
 80058bc:	40010c00 	.word	0x40010c00
 80058c0:	2000170d 	.word	0x2000170d
 80058c4:	20001714 	.word	0x20001714
 80058c8:	2000170f 	.word	0x2000170f
 80058cc:	20001716 	.word	0x20001716
 80058d0:	20001720 	.word	0x20001720
 80058d4:	200016c4 	.word	0x200016c4
 80058d8:	20001710 	.word	0x20001710
 80058dc:	200016f8 	.word	0x200016f8
 80058e0:	200016c3 	.word	0x200016c3
 80058e4:	200016c7 	.word	0x200016c7
 80058e8:	20001713 	.word	0x20001713
 80058ec:	2000171d 	.word	0x2000171d
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80058f0:	4b85      	ldr	r3, [pc, #532]	@ (8005b08 <checkAktifCalisma+0x1554>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <checkAktifCalisma+0x1368>
 80058f8:	4b84      	ldr	r3, [pc, #528]	@ (8005b0c <checkAktifCalisma+0x1558>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10d      	bne.n	800591c <checkAktifCalisma+0x1368>
 8005900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005904:	4882      	ldr	r0, [pc, #520]	@ (8005b10 <checkAktifCalisma+0x155c>)
 8005906:	f004 ffc7 	bl	800a898 <HAL_GPIO_ReadPin>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d105      	bne.n	800591c <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005910:	4b7d      	ldr	r3, [pc, #500]	@ (8005b08 <checkAktifCalisma+0x1554>)
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8005916:	2003      	movs	r0, #3
 8005918:	f7fe fc42 	bl	80041a0 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 800591c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b14 <checkAktifCalisma+0x1560>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <checkAktifCalisma+0x1378>
 8005924:	4b7c      	ldr	r3, [pc, #496]	@ (8005b18 <checkAktifCalisma+0x1564>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d023      	beq.n	8005974 <checkAktifCalisma+0x13c0>
 800592c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005930:	487a      	ldr	r0, [pc, #488]	@ (8005b1c <checkAktifCalisma+0x1568>)
 8005932:	f004 ffb1 	bl	800a898 <HAL_GPIO_ReadPin>
 8005936:	4603      	mov	r3, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	d11b      	bne.n	8005974 <checkAktifCalisma+0x13c0>
 800593c:	4b78      	ldr	r3, [pc, #480]	@ (8005b20 <checkAktifCalisma+0x156c>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d003      	beq.n	800594c <checkAktifCalisma+0x1398>
 8005944:	4b76      	ldr	r3, [pc, #472]	@ (8005b20 <checkAktifCalisma+0x156c>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d113      	bne.n	8005974 <checkAktifCalisma+0x13c0>
 800594c:	4b75      	ldr	r3, [pc, #468]	@ (8005b24 <checkAktifCalisma+0x1570>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f083 0301 	eor.w	r3, r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00c      	beq.n	8005974 <checkAktifCalisma+0x13c0>
					hataVar=1;
 800595a:	4b73      	ldr	r3, [pc, #460]	@ (8005b28 <checkAktifCalisma+0x1574>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005960:	2004      	movs	r0, #4
 8005962:	f7fb fc1f 	bl	80011a4 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005966:	2004      	movs	r0, #4
 8005968:	f7fb fbc4 	bl	80010f4 <hata2EEPROM>
					katkapisivicihatasi=1;
 800596c:	4b6d      	ldr	r3, [pc, #436]	@ (8005b24 <checkAktifCalisma+0x1570>)
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e01f      	b.n	80059b4 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005974:	4b6b      	ldr	r3, [pc, #428]	@ (8005b24 <checkAktifCalisma+0x1570>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <checkAktifCalisma+0x1400>
 800597c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b2c <checkAktifCalisma+0x1578>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d017      	beq.n	80059b4 <checkAktifCalisma+0x1400>
 8005984:	4b63      	ldr	r3, [pc, #396]	@ (8005b14 <checkAktifCalisma+0x1560>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f083 0301 	eor.w	r3, r3, #1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d010      	beq.n	80059b4 <checkAktifCalisma+0x1400>
 8005992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005996:	4861      	ldr	r0, [pc, #388]	@ (8005b1c <checkAktifCalisma+0x1568>)
 8005998:	f004 ff7e 	bl	800a898 <HAL_GPIO_ReadPin>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d108      	bne.n	80059b4 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 80059a2:	4b60      	ldr	r3, [pc, #384]	@ (8005b24 <checkAktifCalisma+0x1570>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80059a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005b18 <checkAktifCalisma+0x1564>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80059ae:	2004      	movs	r0, #4
 80059b0:	f7fe fbf6 	bl	80041a0 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80059b4:	4b57      	ldr	r3, [pc, #348]	@ (8005b14 <checkAktifCalisma+0x1560>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <checkAktifCalisma+0x1410>
 80059bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005b30 <checkAktifCalisma+0x157c>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d023      	beq.n	8005a0c <checkAktifCalisma+0x1458>
 80059c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059c8:	4854      	ldr	r0, [pc, #336]	@ (8005b1c <checkAktifCalisma+0x1568>)
 80059ca:	f004 ff65 	bl	800a898 <HAL_GPIO_ReadPin>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d11b      	bne.n	8005a0c <checkAktifCalisma+0x1458>
 80059d4:	4b52      	ldr	r3, [pc, #328]	@ (8005b20 <checkAktifCalisma+0x156c>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d003      	beq.n	80059e4 <checkAktifCalisma+0x1430>
 80059dc:	4b50      	ldr	r3, [pc, #320]	@ (8005b20 <checkAktifCalisma+0x156c>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d113      	bne.n	8005a0c <checkAktifCalisma+0x1458>
 80059e4:	4b53      	ldr	r3, [pc, #332]	@ (8005b34 <checkAktifCalisma+0x1580>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f083 0301 	eor.w	r3, r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <checkAktifCalisma+0x1458>

					hataVar=1;
 80059f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005b28 <checkAktifCalisma+0x1574>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80059f8:	2005      	movs	r0, #5
 80059fa:	f7fb fbd3 	bl	80011a4 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80059fe:	2005      	movs	r0, #5
 8005a00:	f7fb fb78 	bl	80010f4 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005a04:	4b4b      	ldr	r3, [pc, #300]	@ (8005b34 <checkAktifCalisma+0x1580>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e023      	b.n	8005a54 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005a0c:	4b49      	ldr	r3, [pc, #292]	@ (8005b34 <checkAktifCalisma+0x1580>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01f      	beq.n	8005a54 <checkAktifCalisma+0x14a0>
 8005a14:	4b45      	ldr	r3, [pc, #276]	@ (8005b2c <checkAktifCalisma+0x1578>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01b      	beq.n	8005a54 <checkAktifCalisma+0x14a0>
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b14 <checkAktifCalisma+0x1560>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f083 0301 	eor.w	r3, r3, #1
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <checkAktifCalisma+0x14a0>
 8005a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a2e:	483b      	ldr	r0, [pc, #236]	@ (8005b1c <checkAktifCalisma+0x1568>)
 8005a30:	f004 ff32 	bl	800a898 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10c      	bne.n	8005a54 <checkAktifCalisma+0x14a0>
 8005a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8005b2c <checkAktifCalisma+0x1578>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 8005a42:	4b3c      	ldr	r3, [pc, #240]	@ (8005b34 <checkAktifCalisma+0x1580>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005a48:	4b39      	ldr	r3, [pc, #228]	@ (8005b30 <checkAktifCalisma+0x157c>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005a4e:	2005      	movs	r0, #5
 8005a50:	f7fe fba6 	bl	80041a0 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005a54:	4b38      	ldr	r3, [pc, #224]	@ (8005b38 <checkAktifCalisma+0x1584>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d107      	bne.n	8005a6c <checkAktifCalisma+0x14b8>
 8005a5c:	4b37      	ldr	r3, [pc, #220]	@ (8005b3c <checkAktifCalisma+0x1588>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <checkAktifCalisma+0x14b8>
 8005a64:	4b36      	ldr	r3, [pc, #216]	@ (8005b40 <checkAktifCalisma+0x158c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01b      	beq.n	8005aa4 <checkAktifCalisma+0x14f0>
 8005a6c:	4b35      	ldr	r3, [pc, #212]	@ (8005b44 <checkAktifCalisma+0x1590>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f083 0301 	eor.w	r3, r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d014      	beq.n	8005aa4 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005a7a:	4b33      	ldr	r3, [pc, #204]	@ (8005b48 <checkAktifCalisma+0x1594>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b33      	ldr	r3, [pc, #204]	@ (8005b4c <checkAktifCalisma+0x1598>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	4a32      	ldr	r2, [pc, #200]	@ (8005b50 <checkAktifCalisma+0x159c>)
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d30b      	bcc.n	8005aa4 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005a8c:	4b26      	ldr	r3, [pc, #152]	@ (8005b28 <checkAktifCalisma+0x1574>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005a92:	2006      	movs	r0, #6
 8005a94:	f7fb fb86 	bl	80011a4 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005a98:	2006      	movs	r0, #6
 8005a9a:	f7fb fb2b 	bl	80010f4 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005a9e:	4b29      	ldr	r3, [pc, #164]	@ (8005b44 <checkAktifCalisma+0x1590>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005aa4:	4b27      	ldr	r3, [pc, #156]	@ (8005b44 <checkAktifCalisma+0x1590>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <checkAktifCalisma+0x1520>
 8005aac:	2108      	movs	r1, #8
 8005aae:	481b      	ldr	r0, [pc, #108]	@ (8005b1c <checkAktifCalisma+0x1568>)
 8005ab0:	f004 fef2 	bl	800a898 <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00c      	beq.n	8005ad4 <checkAktifCalisma+0x1520>
 8005aba:	4b16      	ldr	r3, [pc, #88]	@ (8005b14 <checkAktifCalisma+0x1560>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f083 0301 	eor.w	r3, r3, #1
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b44 <checkAktifCalisma+0x1590>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005ace:	2006      	movs	r0, #6
 8005ad0:	f7fe fb66 	bl	80041a0 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b54 <checkAktifCalisma+0x15a0>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <checkAktifCalisma+0x1540>
 8005adc:	4b17      	ldr	r3, [pc, #92]	@ (8005b3c <checkAktifCalisma+0x1588>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <checkAktifCalisma+0x1540>
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b58 <checkAktifCalisma+0x15a4>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <checkAktifCalisma+0x1540>
 8005aec:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <checkAktifCalisma+0x158c>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d035      	beq.n	8005b60 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <checkAktifCalisma+0x15a8>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005afa:	4b07      	ldr	r3, [pc, #28]	@ (8005b18 <checkAktifCalisma+0x1564>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005b00:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <checkAktifCalisma+0x157c>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e032      	b.n	8005b6e <checkAktifCalisma+0x15ba>
 8005b08:	2000171d 	.word	0x2000171d
 8005b0c:	200016c3 	.word	0x200016c3
 8005b10:	40010c00 	.word	0x40010c00
 8005b14:	2000170d 	.word	0x2000170d
 8005b18:	20001721 	.word	0x20001721
 8005b1c:	40010800 	.word	0x40010800
 8005b20:	200016c8 	.word	0x200016c8
 8005b24:	2000171e 	.word	0x2000171e
 8005b28:	20001714 	.word	0x20001714
 8005b2c:	20001701 	.word	0x20001701
 8005b30:	20001722 	.word	0x20001722
 8005b34:	2000171f 	.word	0x2000171f
 8005b38:	20001713 	.word	0x20001713
 8005b3c:	200016f8 	.word	0x200016f8
 8005b40:	200016f7 	.word	0x200016f7
 8005b44:	2000170e 	.word	0x2000170e
 8005b48:	20001698 	.word	0x20001698
 8005b4c:	200016ac 	.word	0x200016ac
 8005b50:	200016d8 	.word	0x200016d8
 8005b54:	200016f5 	.word	0x200016f5
 8005b58:	200016f6 	.word	0x200016f6
 8005b5c:	20001715 	.word	0x20001715
				} else {
					makineCalisiyor=1;
 8005b60:	4b3a      	ldr	r3, [pc, #232]	@ (8005c4c <checkAktifCalisma+0x1698>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005b66:	4b3a      	ldr	r3, [pc, #232]	@ (8005c50 <checkAktifCalisma+0x169c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a3a      	ldr	r2, [pc, #232]	@ (8005c54 <checkAktifCalisma+0x16a0>)
 8005b6c:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c58 <checkAktifCalisma+0x16a4>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02f      	beq.n	8005bd6 <checkAktifCalisma+0x1622>
 8005b76:	4b39      	ldr	r3, [pc, #228]	@ (8005c5c <checkAktifCalisma+0x16a8>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f083 0301 	eor.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d028      	beq.n	8005bd6 <checkAktifCalisma+0x1622>
 8005b84:	4b36      	ldr	r3, [pc, #216]	@ (8005c60 <checkAktifCalisma+0x16ac>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f083 0301 	eor.w	r3, r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d021      	beq.n	8005bd6 <checkAktifCalisma+0x1622>
 8005b92:	4b34      	ldr	r3, [pc, #208]	@ (8005c64 <checkAktifCalisma+0x16b0>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	f083 0301 	eor.w	r3, r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01a      	beq.n	8005bd6 <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005ba0:	4b31      	ldr	r3, [pc, #196]	@ (8005c68 <checkAktifCalisma+0x16b4>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f083 0301 	eor.w	r3, r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d013      	beq.n	8005bd6 <checkAktifCalisma+0x1622>
 8005bae:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <checkAktifCalisma+0x16b8>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f083 0301 	eor.w	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <checkAktifCalisma+0x1622>
 8005bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005c70 <checkAktifCalisma+0x16bc>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f083 0301 	eor.w	r3, r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <checkAktifCalisma+0x1622>

					hataVar=0;
 8005bca:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <checkAktifCalisma+0x16a4>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005bd0:	2007      	movs	r0, #7
 8005bd2:	f7fe fae5 	bl	80041a0 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005bd6:	4b20      	ldr	r3, [pc, #128]	@ (8005c58 <checkAktifCalisma+0x16a4>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d02a      	beq.n	8005c34 <checkAktifCalisma+0x1680>
 8005bde:	4b1f      	ldr	r3, [pc, #124]	@ (8005c5c <checkAktifCalisma+0x16a8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f083 0301 	eor.w	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d023      	beq.n	8005c34 <checkAktifCalisma+0x1680>
 8005bec:	4b1c      	ldr	r3, [pc, #112]	@ (8005c60 <checkAktifCalisma+0x16ac>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01f      	beq.n	8005c34 <checkAktifCalisma+0x1680>
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <checkAktifCalisma+0x16b0>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005c02:	4b19      	ldr	r3, [pc, #100]	@ (8005c68 <checkAktifCalisma+0x16b4>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f083 0301 	eor.w	r3, r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <checkAktifCalisma+0x1680>
 8005c10:	4b16      	ldr	r3, [pc, #88]	@ (8005c6c <checkAktifCalisma+0x16b8>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <checkAktifCalisma+0x1680>
 8005c1e:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <checkAktifCalisma+0x16bc>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	f083 0301 	eor.w	r3, r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005c2c:	4b11      	ldr	r3, [pc, #68]	@ (8005c74 <checkAktifCalisma+0x16c0>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005c32:	e009      	b.n	8005c48 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <checkAktifCalisma+0x16ac>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f083 0301 	eor.w	r3, r3, #1
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <checkAktifCalisma+0x16c0>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20001715 	.word	0x20001715
 8005c50:	20001698 	.word	0x20001698
 8005c54:	200016ac 	.word	0x200016ac
 8005c58:	20001714 	.word	0x20001714
 8005c5c:	2000170f 	.word	0x2000170f
 8005c60:	20001710 	.word	0x20001710
 8005c64:	2000171d 	.word	0x2000171d
 8005c68:	2000171e 	.word	0x2000171e
 8005c6c:	2000171f 	.word	0x2000171f
 8005c70:	2000170e 	.word	0x2000170e
 8005c74:	20001723 	.word	0x20001723

08005c78 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005c7c:	4b8b      	ldr	r3, [pc, #556]	@ (8005eac <checkDemoModCalisma+0x234>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	f040 81c4 	bne.w	800600e <checkDemoModCalisma+0x396>
 8005c86:	4b8a      	ldr	r3, [pc, #552]	@ (8005eb0 <checkDemoModCalisma+0x238>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 81bf 	beq.w	800600e <checkDemoModCalisma+0x396>
 8005c90:	4b88      	ldr	r3, [pc, #544]	@ (8005eb4 <checkDemoModCalisma+0x23c>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 81ba 	bne.w	800600e <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	4886      	ldr	r0, [pc, #536]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005c9e:	f004 fdfb 	bl	800a898 <HAL_GPIO_ReadPin>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11d      	bne.n	8005ce4 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005ca8:	4b84      	ldr	r3, [pc, #528]	@ (8005ebc <checkDemoModCalisma+0x244>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f083 0301 	eor.w	r3, r3, #1
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005cb6:	4b82      	ldr	r3, [pc, #520]	@ (8005ec0 <checkDemoModCalisma+0x248>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f083 0301 	eor.w	r3, r3, #1
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00f      	beq.n	8005ce4 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005cc4:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec4 <checkDemoModCalisma+0x24c>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f083 0301 	eor.w	r3, r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	487c      	ldr	r0, [pc, #496]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005cd8:	f004 fdf5 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e00e      	b.n	8005d02 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005ce4:	2102      	movs	r1, #2
 8005ce6:	4874      	ldr	r0, [pc, #464]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005ce8:	f004 fdd6 	bl	800a898 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2104      	movs	r1, #4
 8005cf6:	4874      	ldr	r0, [pc, #464]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005cf8:	f004 fde5 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005cfc:	4b73      	ldr	r3, [pc, #460]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005d02:	4b72      	ldr	r3, [pc, #456]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <checkDemoModCalisma+0xaa>
 8005d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec0 <checkDemoModCalisma+0x248>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <checkDemoModCalisma+0xaa>
 8005d12:	4b6c      	ldr	r3, [pc, #432]	@ (8005ec4 <checkDemoModCalisma+0x24c>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <checkDemoModCalisma+0xaa>
 8005d1a:	4b68      	ldr	r3, [pc, #416]	@ (8005ebc <checkDemoModCalisma+0x244>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00c      	beq.n	8005d3c <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005d22:	2201      	movs	r2, #1
 8005d24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d28:	4867      	ldr	r0, [pc, #412]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005d2a:	f004 fdcc 	bl	800a8c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d34:	4864      	ldr	r0, [pc, #400]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005d36:	f004 fdc6 	bl	800a8c6 <HAL_GPIO_WritePin>
 8005d3a:	e00b      	b.n	8005d54 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d42:	4861      	ldr	r0, [pc, #388]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005d44:	f004 fdbf 	bl	800a8c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d4e:	485e      	ldr	r0, [pc, #376]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005d50:	f004 fdb9 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d54:	2102      	movs	r1, #2
 8005d56:	4858      	ldr	r0, [pc, #352]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005d58:	f004 fd9e 	bl	800a898 <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d10d      	bne.n	8005d7e <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005d62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d66:	4854      	ldr	r0, [pc, #336]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005d68:	f004 fd96 	bl	800a898 <HAL_GPIO_ReadPin>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005d72:	4b56      	ldr	r3, [pc, #344]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f083 0301 	eor.w	r3, r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d7e:	2102      	movs	r1, #2
 8005d80:	484d      	ldr	r0, [pc, #308]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005d82:	f004 fd89 	bl	800a898 <HAL_GPIO_ReadPin>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d125      	bne.n	8005dd8 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005d8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d90:	4849      	ldr	r0, [pc, #292]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005d92:	f004 fd81 	bl	800a898 <HAL_GPIO_ReadPin>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d11d      	bne.n	8005dd8 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f083 0301 	eor.w	r3, r3, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d016      	beq.n	8005dd8 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005daa:	4b44      	ldr	r3, [pc, #272]	@ (8005ebc <checkDemoModCalisma+0x244>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	f083 0301 	eor.w	r3, r3, #1
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00f      	beq.n	8005dd8 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005db8:	4b42      	ldr	r3, [pc, #264]	@ (8005ec4 <checkDemoModCalisma+0x24c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f083 0301 	eor.w	r3, r3, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	2120      	movs	r1, #32
 8005dca:	483b      	ldr	r0, [pc, #236]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005dcc:	f004 fd7b 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec0 <checkDemoModCalisma+0x248>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e007      	b.n	8005de8 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2120      	movs	r1, #32
 8005ddc:	4836      	ldr	r0, [pc, #216]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005dde:	f004 fd72 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005de2:	4b37      	ldr	r3, [pc, #220]	@ (8005ec0 <checkDemoModCalisma+0x248>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005de8:	2102      	movs	r1, #2
 8005dea:	4833      	ldr	r0, [pc, #204]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005dec:	f004 fd54 	bl	800a898 <HAL_GPIO_ReadPin>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d125      	bne.n	8005e42 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005df6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dfa:	482f      	ldr	r0, [pc, #188]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005dfc:	f004 fd4c 	bl	800a898 <HAL_GPIO_ReadPin>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11d      	bne.n	8005e42 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005e06:	4b31      	ldr	r3, [pc, #196]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f083 0301 	eor.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d016      	beq.n	8005e42 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005e14:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec0 <checkDemoModCalisma+0x248>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f083 0301 	eor.w	r3, r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005e22:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <checkDemoModCalisma+0x244>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f083 0301 	eor.w	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005e30:	2201      	movs	r2, #1
 8005e32:	2110      	movs	r1, #16
 8005e34:	4820      	ldr	r0, [pc, #128]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005e36:	f004 fd46 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005e3a:	4b22      	ldr	r3, [pc, #136]	@ (8005ec4 <checkDemoModCalisma+0x24c>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	e007      	b.n	8005e52 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e42:	2200      	movs	r2, #0
 8005e44:	2110      	movs	r1, #16
 8005e46:	481c      	ldr	r0, [pc, #112]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005e48:	f004 fd3d 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <checkDemoModCalisma+0x24c>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005e52:	2104      	movs	r1, #4
 8005e54:	4818      	ldr	r0, [pc, #96]	@ (8005eb8 <checkDemoModCalisma+0x240>)
 8005e56:	f004 fd1f 	bl	800a898 <HAL_GPIO_ReadPin>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d139      	bne.n	8005ed4 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <checkDemoModCalisma+0x254>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f083 0301 	eor.w	r3, r3, #1
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d032      	beq.n	8005ed4 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005e6e:	4b15      	ldr	r3, [pc, #84]	@ (8005ec4 <checkDemoModCalisma+0x24c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f083 0301 	eor.w	r3, r3, #1
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d02b      	beq.n	8005ed4 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005e7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <checkDemoModCalisma+0x248>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f083 0301 	eor.w	r3, r3, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d024      	beq.n	8005ed4 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	480e      	ldr	r0, [pc, #56]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005e90:	f004 fd19 	bl	800a8c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005e94:	2201      	movs	r2, #1
 8005e96:	2101      	movs	r1, #1
 8005e98:	480b      	ldr	r0, [pc, #44]	@ (8005ec8 <checkDemoModCalisma+0x250>)
 8005e9a:	f004 fd14 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005e9e:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <checkDemoModCalisma+0x244>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <checkDemoModCalisma+0x258>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e027      	b.n	8005efc <checkDemoModCalisma+0x284>
 8005eac:	200016de 	.word	0x200016de
 8005eb0:	20001711 	.word	0x20001711
 8005eb4:	200016dd 	.word	0x200016dd
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	20001718 	.word	0x20001718
 8005ec0:	20001719 	.word	0x20001719
 8005ec4:	2000171a 	.word	0x2000171a
 8005ec8:	40010c00 	.word	0x40010c00
 8005ecc:	20001717 	.word	0x20001717
 8005ed0:	200016fe 	.word	0x200016fe
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005ed4:	2104      	movs	r1, #4
 8005ed6:	486d      	ldr	r0, [pc, #436]	@ (800608c <checkDemoModCalisma+0x414>)
 8005ed8:	f004 fcde 	bl	800a898 <HAL_GPIO_ReadPin>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d10c      	bne.n	8005efc <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2102      	movs	r1, #2
 8005ee6:	486a      	ldr	r0, [pc, #424]	@ (8006090 <checkDemoModCalisma+0x418>)
 8005ee8:	f004 fced 	bl	800a8c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005eec:	2200      	movs	r2, #0
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4867      	ldr	r0, [pc, #412]	@ (8006090 <checkDemoModCalisma+0x418>)
 8005ef2:	f004 fce8 	bl	800a8c6 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005ef6:	4b67      	ldr	r3, [pc, #412]	@ (8006094 <checkDemoModCalisma+0x41c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005efc:	2104      	movs	r1, #4
 8005efe:	4863      	ldr	r0, [pc, #396]	@ (800608c <checkDemoModCalisma+0x414>)
 8005f00:	f004 fcca 	bl	800a898 <HAL_GPIO_ReadPin>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d10d      	bne.n	8005f26 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	2180      	movs	r1, #128	@ 0x80
 8005f0e:	4862      	ldr	r0, [pc, #392]	@ (8006098 <checkDemoModCalisma+0x420>)
 8005f10:	f004 fcd9 	bl	800a8c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f14:	2201      	movs	r2, #1
 8005f16:	2120      	movs	r1, #32
 8005f18:	485f      	ldr	r0, [pc, #380]	@ (8006098 <checkDemoModCalisma+0x420>)
 8005f1a:	f004 fcd4 	bl	800a8c6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800609c <checkDemoModCalisma+0x424>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a5f      	ldr	r2, [pc, #380]	@ (80060a0 <checkDemoModCalisma+0x428>)
 8005f24:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005f26:	4b5d      	ldr	r3, [pc, #372]	@ (800609c <checkDemoModCalisma+0x424>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80060a0 <checkDemoModCalisma+0x428>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d909      	bls.n	8005f48 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	@ 0x80
 8005f38:	4857      	ldr	r0, [pc, #348]	@ (8006098 <checkDemoModCalisma+0x420>)
 8005f3a:	f004 fcc4 	bl	800a8c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2120      	movs	r1, #32
 8005f42:	4855      	ldr	r0, [pc, #340]	@ (8006098 <checkDemoModCalisma+0x420>)
 8005f44:	f004 fcbf 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005f48:	2102      	movs	r1, #2
 8005f4a:	4850      	ldr	r0, [pc, #320]	@ (800608c <checkDemoModCalisma+0x414>)
 8005f4c:	f004 fca4 	bl	800a898 <HAL_GPIO_ReadPin>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d108      	bne.n	8005f68 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005f56:	2201      	movs	r2, #1
 8005f58:	2140      	movs	r1, #64	@ 0x40
 8005f5a:	484f      	ldr	r0, [pc, #316]	@ (8006098 <checkDemoModCalisma+0x420>)
 8005f5c:	f004 fcb3 	bl	800a8c6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005f60:	4b4e      	ldr	r3, [pc, #312]	@ (800609c <checkDemoModCalisma+0x424>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a4e      	ldr	r2, [pc, #312]	@ (80060a0 <checkDemoModCalisma+0x428>)
 8005f66:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005f68:	4b4c      	ldr	r3, [pc, #304]	@ (800609c <checkDemoModCalisma+0x424>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80060a0 <checkDemoModCalisma+0x428>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d904      	bls.n	8005f80 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005f76:	2200      	movs	r2, #0
 8005f78:	2140      	movs	r1, #64	@ 0x40
 8005f7a:	4847      	ldr	r0, [pc, #284]	@ (8006098 <checkDemoModCalisma+0x420>)
 8005f7c:	f004 fca3 	bl	800a8c6 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005f80:	4b48      	ldr	r3, [pc, #288]	@ (80060a4 <checkDemoModCalisma+0x42c>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d024      	beq.n	8005fd2 <checkDemoModCalisma+0x35a>
 8005f88:	4b47      	ldr	r3, [pc, #284]	@ (80060a8 <checkDemoModCalisma+0x430>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d020      	beq.n	8005fd2 <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005f90:	4b46      	ldr	r3, [pc, #280]	@ (80060ac <checkDemoModCalisma+0x434>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	4b44      	ldr	r3, [pc, #272]	@ (80060ac <checkDemoModCalisma+0x434>)
 8005f9a:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005f9c:	4b44      	ldr	r3, [pc, #272]	@ (80060b0 <checkDemoModCalisma+0x438>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2bff      	cmp	r3, #255	@ 0xff
 8005fa2:	d108      	bne.n	8005fb6 <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005fa4:	4b42      	ldr	r3, [pc, #264]	@ (80060b0 <checkDemoModCalisma+0x438>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005faa:	4b42      	ldr	r3, [pc, #264]	@ (80060b4 <checkDemoModCalisma+0x43c>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b40      	ldr	r3, [pc, #256]	@ (80060b4 <checkDemoModCalisma+0x43c>)
 8005fb4:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80060ac <checkDemoModCalisma+0x434>)
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	4b3f      	ldr	r3, [pc, #252]	@ (80060b8 <checkDemoModCalisma+0x440>)
 8005fbc:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80060bc <checkDemoModCalisma+0x444>)
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80060b8 <checkDemoModCalisma+0x440>)
 8005fc4:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <checkDemoModCalisma+0x448>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005fcc:	4b36      	ldr	r3, [pc, #216]	@ (80060a8 <checkDemoModCalisma+0x430>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80060c4 <checkDemoModCalisma+0x44c>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d156      	bne.n	8006088 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005fda:	4a3b      	ldr	r2, [pc, #236]	@ (80060c8 <checkDemoModCalisma+0x450>)
 8005fdc:	2101      	movs	r1, #1
 8005fde:	2002      	movs	r0, #2
 8005fe0:	f003 f914 	bl	800920c <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005fe4:	4a39      	ldr	r2, [pc, #228]	@ (80060cc <checkDemoModCalisma+0x454>)
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f003 f90f 	bl	800920c <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005fee:	4b2f      	ldr	r3, [pc, #188]	@ (80060ac <checkDemoModCalisma+0x434>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	220a      	movs	r2, #10
 8005ff4:	4936      	ldr	r1, [pc, #216]	@ (80060d0 <checkDemoModCalisma+0x458>)
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f007 fe52 	bl	800dca0 <itoa>
					lcd_print(2,11,snum);
 8005ffc:	4a34      	ldr	r2, [pc, #208]	@ (80060d0 <checkDemoModCalisma+0x458>)
 8005ffe:	210b      	movs	r1, #11
 8006000:	2002      	movs	r0, #2
 8006002:	f003 f903 	bl	800920c <lcd_print>
					mesajYazildi=1;
 8006006:	4b33      	ldr	r3, [pc, #204]	@ (80060d4 <checkDemoModCalisma+0x45c>)
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 800600c:	e03c      	b.n	8006088 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 800600e:	4b32      	ldr	r3, [pc, #200]	@ (80060d8 <checkDemoModCalisma+0x460>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d003      	beq.n	800601e <checkDemoModCalisma+0x3a6>
 8006016:	4b2b      	ldr	r3, [pc, #172]	@ (80060c4 <checkDemoModCalisma+0x44c>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d134      	bne.n	8006088 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800601e:	2200      	movs	r2, #0
 8006020:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006024:	481a      	ldr	r0, [pc, #104]	@ (8006090 <checkDemoModCalisma+0x418>)
 8006026:	f004 fc4e 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006030:	4817      	ldr	r0, [pc, #92]	@ (8006090 <checkDemoModCalisma+0x418>)
 8006032:	f004 fc48 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006036:	2200      	movs	r2, #0
 8006038:	2104      	movs	r1, #4
 800603a:	4815      	ldr	r0, [pc, #84]	@ (8006090 <checkDemoModCalisma+0x418>)
 800603c:	f004 fc43 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006040:	2200      	movs	r2, #0
 8006042:	2102      	movs	r1, #2
 8006044:	4812      	ldr	r0, [pc, #72]	@ (8006090 <checkDemoModCalisma+0x418>)
 8006046:	f004 fc3e 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800604a:	2200      	movs	r2, #0
 800604c:	2101      	movs	r1, #1
 800604e:	4810      	ldr	r0, [pc, #64]	@ (8006090 <checkDemoModCalisma+0x418>)
 8006050:	f004 fc39 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006054:	2200      	movs	r2, #0
 8006056:	2120      	movs	r1, #32
 8006058:	480c      	ldr	r0, [pc, #48]	@ (800608c <checkDemoModCalisma+0x414>)
 800605a:	f004 fc34 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800605e:	2200      	movs	r2, #0
 8006060:	2110      	movs	r1, #16
 8006062:	480a      	ldr	r0, [pc, #40]	@ (800608c <checkDemoModCalisma+0x414>)
 8006064:	f004 fc2f 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006068:	2200      	movs	r2, #0
 800606a:	2180      	movs	r1, #128	@ 0x80
 800606c:	480a      	ldr	r0, [pc, #40]	@ (8006098 <checkDemoModCalisma+0x420>)
 800606e:	f004 fc2a 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006072:	2200      	movs	r2, #0
 8006074:	2140      	movs	r1, #64	@ 0x40
 8006076:	4808      	ldr	r0, [pc, #32]	@ (8006098 <checkDemoModCalisma+0x420>)
 8006078:	f004 fc25 	bl	800a8c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800607c:	2200      	movs	r2, #0
 800607e:	2120      	movs	r1, #32
 8006080:	4805      	ldr	r0, [pc, #20]	@ (8006098 <checkDemoModCalisma+0x420>)
 8006082:	f004 fc20 	bl	800a8c6 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006086:	e7ff      	b.n	8006088 <checkDemoModCalisma+0x410>
 8006088:	bf00      	nop
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40011000 	.word	0x40011000
 8006090:	40010c00 	.word	0x40010c00
 8006094:	20001718 	.word	0x20001718
 8006098:	40010800 	.word	0x40010800
 800609c:	20001698 	.word	0x20001698
 80060a0:	200016a8 	.word	0x200016a8
 80060a4:	20001717 	.word	0x20001717
 80060a8:	200016fe 	.word	0x200016fe
 80060ac:	200016b9 	.word	0x200016b9
 80060b0:	200016b8 	.word	0x200016b8
 80060b4:	200016ba 	.word	0x200016ba
 80060b8:	200011f0 	.word	0x200011f0
 80060bc:	200016bb 	.word	0x200016bb
 80060c0:	200016ec 	.word	0x200016ec
 80060c4:	200016dd 	.word	0x200016dd
 80060c8:	0800f434 	.word	0x0800f434
 80060cc:	0800f440 	.word	0x0800f440
 80060d0:	20001260 	.word	0x20001260
 80060d4:	200016f4 	.word	0x200016f4
 80060d8:	200016de 	.word	0x200016de

080060dc <mainLoop>:

void mainLoop() {
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 80060e0:	f7fe f8b6 	bl	8004250 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80060e4:	2101      	movs	r1, #1
 80060e6:	488b      	ldr	r0, [pc, #556]	@ (8006314 <mainLoop+0x238>)
 80060e8:	f004 fbd6 	bl	800a898 <HAL_GPIO_ReadPin>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d136      	bne.n	8006160 <mainLoop+0x84>
 80060f2:	2108      	movs	r1, #8
 80060f4:	4888      	ldr	r0, [pc, #544]	@ (8006318 <mainLoop+0x23c>)
 80060f6:	f004 fbcf 	bl	800a898 <HAL_GPIO_ReadPin>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d12f      	bne.n	8006160 <mainLoop+0x84>
 8006100:	2102      	movs	r1, #2
 8006102:	4884      	ldr	r0, [pc, #528]	@ (8006314 <mainLoop+0x238>)
 8006104:	f004 fbc8 	bl	800a898 <HAL_GPIO_ReadPin>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d128      	bne.n	8006160 <mainLoop+0x84>
 800610e:	2104      	movs	r1, #4
 8006110:	4880      	ldr	r0, [pc, #512]	@ (8006314 <mainLoop+0x238>)
 8006112:	f004 fbc1 	bl	800a898 <HAL_GPIO_ReadPin>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d121      	bne.n	8006160 <mainLoop+0x84>
 800611c:	2108      	movs	r1, #8
 800611e:	487d      	ldr	r0, [pc, #500]	@ (8006314 <mainLoop+0x238>)
 8006120:	f004 fbba 	bl	800a898 <HAL_GPIO_ReadPin>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11a      	bne.n	8006160 <mainLoop+0x84>
 800612a:	2180      	movs	r1, #128	@ 0x80
 800612c:	487a      	ldr	r0, [pc, #488]	@ (8006318 <mainLoop+0x23c>)
 800612e:	f004 fbb3 	bl	800a898 <HAL_GPIO_ReadPin>
 8006132:	4603      	mov	r3, r0
 8006134:	2b01      	cmp	r3, #1
 8006136:	d113      	bne.n	8006160 <mainLoop+0x84>
 8006138:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800613c:	4876      	ldr	r0, [pc, #472]	@ (8006318 <mainLoop+0x23c>)
 800613e:	f004 fbab 	bl	800a898 <HAL_GPIO_ReadPin>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10b      	bne.n	8006160 <mainLoop+0x84>
 8006148:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800614c:	4872      	ldr	r0, [pc, #456]	@ (8006318 <mainLoop+0x23c>)
 800614e:	f004 fba3 	bl	800a898 <HAL_GPIO_ReadPin>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d103      	bne.n	8006160 <mainLoop+0x84>
			butonKontrol=0;
 8006158:	4b70      	ldr	r3, [pc, #448]	@ (800631c <mainLoop+0x240>)
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e003      	b.n	8006168 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8006160:	4b6f      	ldr	r3, [pc, #444]	@ (8006320 <mainLoop+0x244>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6f      	ldr	r2, [pc, #444]	@ (8006324 <mainLoop+0x248>)
 8006166:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8006168:	f7fe f924 	bl	80043b4 <buttonCheck>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d103      	bne.n	800617a <mainLoop+0x9e>
			backLightTimer = millis;
 8006172:	4b6b      	ldr	r3, [pc, #428]	@ (8006320 <mainLoop+0x244>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a6b      	ldr	r2, [pc, #428]	@ (8006324 <mainLoop+0x248>)
 8006178:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 800617a:	4b6b      	ldr	r3, [pc, #428]	@ (8006328 <mainLoop+0x24c>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <mainLoop+0xb2>
			hafizaYaz = 0;
 8006182:	4b69      	ldr	r3, [pc, #420]	@ (8006328 <mainLoop+0x24c>)
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8006188:	2001      	movs	r0, #1
 800618a:	f7fa fa8b 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800618e:	4b67      	ldr	r3, [pc, #412]	@ (800632c <mainLoop+0x250>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f083 0301 	eor.w	r3, r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d043      	beq.n	8006224 <mainLoop+0x148>
 800619c:	4864      	ldr	r0, [pc, #400]	@ (8006330 <mainLoop+0x254>)
 800619e:	f005 f997 	bl	800b4d0 <HAL_I2C_GetState>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d13d      	bne.n	8006224 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 80061a8:	4b62      	ldr	r3, [pc, #392]	@ (8006334 <mainLoop+0x258>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f083 0301 	eor.w	r3, r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d028      	beq.n	8006208 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 80061b6:	4a60      	ldr	r2, [pc, #384]	@ (8006338 <mainLoop+0x25c>)
 80061b8:	2101      	movs	r1, #1
 80061ba:	2001      	movs	r0, #1
 80061bc:	f003 f826 	bl	800920c <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 80061c0:	4a5e      	ldr	r2, [pc, #376]	@ (800633c <mainLoop+0x260>)
 80061c2:	2101      	movs	r1, #1
 80061c4:	2002      	movs	r0, #2
 80061c6:	f003 f821 	bl	800920c <lcd_print>
			  HAL_Delay(1000);
 80061ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80061ce:	f003 fd93 	bl	8009cf8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80061d2:	bf00      	nop
 80061d4:	4856      	ldr	r0, [pc, #344]	@ (8006330 <mainLoop+0x254>)
 80061d6:	f005 f988 	bl	800b4ea <HAL_I2C_GetError>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d0f9      	beq.n	80061d4 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80061e0:	e003      	b.n	80061ea <mainLoop+0x10e>
				  HAL_Delay(1000);
 80061e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80061e6:	f003 fd87 	bl	8009cf8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80061ea:	4851      	ldr	r0, [pc, #324]	@ (8006330 <mainLoop+0x254>)
 80061ec:	f005 f970 	bl	800b4d0 <HAL_I2C_GetState>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d1f5      	bne.n	80061e2 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80061f6:	4a52      	ldr	r2, [pc, #328]	@ (8006340 <mainLoop+0x264>)
 80061f8:	2101      	movs	r1, #1
 80061fa:	2002      	movs	r0, #2
 80061fc:	f003 f806 	bl	800920c <lcd_print>

			  ilkOkuma=1;
 8006200:	4b4c      	ldr	r3, [pc, #304]	@ (8006334 <mainLoop+0x258>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e006      	b.n	8006216 <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8006208:	4a4e      	ldr	r2, [pc, #312]	@ (8006344 <mainLoop+0x268>)
 800620a:	2101      	movs	r1, #1
 800620c:	2002      	movs	r0, #2
 800620e:	f002 fffd 	bl	800920c <lcd_print>
			  lcd_clear();
 8006212:	f003 f827 	bl	8009264 <lcd_clear>
		  }

		  lcd_clear();
 8006216:	f003 f825 	bl	8009264 <lcd_clear>

		  eepromKontrol();
 800621a:	f7fa f80b 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800621e:	4b43      	ldr	r3, [pc, #268]	@ (800632c <mainLoop+0x250>)
 8006220:	2201      	movs	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006224:	4b48      	ldr	r3, [pc, #288]	@ (8006348 <mainLoop+0x26c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11c      	bne.n	8006266 <mainLoop+0x18a>
 800622c:	4b47      	ldr	r3, [pc, #284]	@ (800634c <mainLoop+0x270>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f083 0301 	eor.w	r3, r3, #1
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d015      	beq.n	8006266 <mainLoop+0x18a>
 800623a:	4b45      	ldr	r3, [pc, #276]	@ (8006350 <mainLoop+0x274>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d111      	bne.n	8006266 <mainLoop+0x18a>
			lcd_clear();
 8006242:	f003 f80f 	bl	8009264 <lcd_clear>
			HAL_Delay(10);
 8006246:	200a      	movs	r0, #10
 8006248:	f003 fd56 	bl	8009cf8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 800624c:	4a41      	ldr	r2, [pc, #260]	@ (8006354 <mainLoop+0x278>)
 800624e:	2101      	movs	r1, #1
 8006250:	2001      	movs	r0, #1
 8006252:	f002 ffdb 	bl	800920c <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006256:	4a40      	ldr	r2, [pc, #256]	@ (8006358 <mainLoop+0x27c>)
 8006258:	2101      	movs	r1, #1
 800625a:	2002      	movs	r0, #2
 800625c:	f002 ffd6 	bl	800920c <lcd_print>
			mesajYazildi=1;
 8006260:	4b3a      	ldr	r3, [pc, #232]	@ (800634c <mainLoop+0x270>)
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006266:	4b38      	ldr	r3, [pc, #224]	@ (8006348 <mainLoop+0x26c>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d112      	bne.n	8006294 <mainLoop+0x1b8>
 800626e:	2102      	movs	r1, #2
 8006270:	4828      	ldr	r0, [pc, #160]	@ (8006314 <mainLoop+0x238>)
 8006272:	f004 fb11 	bl	800a898 <HAL_GPIO_ReadPin>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10b      	bne.n	8006294 <mainLoop+0x1b8>
 800627c:	2104      	movs	r1, #4
 800627e:	4825      	ldr	r0, [pc, #148]	@ (8006314 <mainLoop+0x238>)
 8006280:	f004 fb0a 	bl	800a898 <HAL_GPIO_ReadPin>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d104      	bne.n	8006294 <mainLoop+0x1b8>
			menuGiris=1;
 800628a:	4b2f      	ldr	r3, [pc, #188]	@ (8006348 <mainLoop+0x26c>)
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006290:	f002 ffe8 	bl	8009264 <lcd_clear>
		}

		if(menuGiris==1) {
 8006294:	4b2c      	ldr	r3, [pc, #176]	@ (8006348 <mainLoop+0x26c>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <mainLoop+0x1c4>
			menu();
 800629c:	f7fb faa8 	bl	80017f0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80062a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062a4:	481c      	ldr	r0, [pc, #112]	@ (8006318 <mainLoop+0x23c>)
 80062a6:	f004 fb26 	bl	800a8f6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80062aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062ae:	482b      	ldr	r0, [pc, #172]	@ (800635c <mainLoop+0x280>)
 80062b0:	f004 faf2 	bl	800a898 <HAL_GPIO_ReadPin>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <mainLoop+0x1f4>
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <mainLoop+0x284>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f083 0301 	eor.w	r3, r3, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <mainLoop+0x1f4>
			stopVar=1;
 80062c8:	4b26      	ldr	r3, [pc, #152]	@ (8006364 <mainLoop+0x288>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <mainLoop+0x1fa>
		} else {
			stopVar=0;
 80062d0:	4b24      	ldr	r3, [pc, #144]	@ (8006364 <mainLoop+0x288>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80062d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062da:	4820      	ldr	r0, [pc, #128]	@ (800635c <mainLoop+0x280>)
 80062dc:	f004 fadc 	bl	800a898 <HAL_GPIO_ReadPin>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d107      	bne.n	80062f6 <mainLoop+0x21a>
 80062e6:	4b20      	ldr	r3, [pc, #128]	@ (8006368 <mainLoop+0x28c>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <mainLoop+0x21a>
			EmnStopVar=1;
 80062ee:	4b1f      	ldr	r3, [pc, #124]	@ (800636c <mainLoop+0x290>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e002      	b.n	80062fc <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80062f6:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <mainLoop+0x290>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80062fc:	f7fe f88e 	bl	800441c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006300:	f7fe f8c0 	bl	8004484 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006304:	f7fe f904 	bl	8004510 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006308:	f7fe f954 	bl	80045b4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 800630c:	f7ff fcb4 	bl	8005c78 <checkDemoModCalisma>
		checkLCDBacklight();
 8006310:	e6e6      	b.n	80060e0 <mainLoop+0x4>
 8006312:	bf00      	nop
 8006314:	40010800 	.word	0x40010800
 8006318:	40011000 	.word	0x40011000
 800631c:	200016ef 	.word	0x200016ef
 8006320:	20001698 	.word	0x20001698
 8006324:	200016b4 	.word	0x200016b4
 8006328:	200016ec 	.word	0x200016ec
 800632c:	200016ed 	.word	0x200016ed
 8006330:	20001f40 	.word	0x20001f40
 8006334:	200016ee 	.word	0x200016ee
 8006338:	20000178 	.word	0x20000178
 800633c:	20001e78 	.word	0x20001e78
 8006340:	20001e8c 	.word	0x20001e8c
 8006344:	20001ea0 	.word	0x20001ea0
 8006348:	200016dd 	.word	0x200016dd
 800634c:	200016f4 	.word	0x200016f4
 8006350:	200016de 	.word	0x200016de
 8006354:	200000c4 	.word	0x200000c4
 8006358:	200000d8 	.word	0x200000d8
 800635c:	40010c00 	.word	0x40010c00
 8006360:	20001714 	.word	0x20001714
 8006364:	20001711 	.word	0x20001711
 8006368:	20001723 	.word	0x20001723
 800636c:	20001724 	.word	0x20001724

08006370 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006370:	b5b0      	push	{r4, r5, r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 853d 	bne.w	8006dfc <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8006382:	4ac7      	ldr	r2, [pc, #796]	@ (80066a0 <loadMenuTexts+0x330>)
 8006384:	4bc7      	ldr	r3, [pc, #796]	@ (80066a4 <loadMenuTexts+0x334>)
 8006386:	4614      	mov	r4, r2
 8006388:	461d      	mov	r5, r3
 800638a:	6828      	ldr	r0, [r5, #0]
 800638c:	6869      	ldr	r1, [r5, #4]
 800638e:	68aa      	ldr	r2, [r5, #8]
 8006390:	68eb      	ldr	r3, [r5, #12]
 8006392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006394:	7c2b      	ldrb	r3, [r5, #16]
 8006396:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006398:	4ac3      	ldr	r2, [pc, #780]	@ (80066a8 <loadMenuTexts+0x338>)
 800639a:	4bc4      	ldr	r3, [pc, #784]	@ (80066ac <loadMenuTexts+0x33c>)
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	6828      	ldr	r0, [r5, #0]
 80063a2:	6869      	ldr	r1, [r5, #4]
 80063a4:	68aa      	ldr	r2, [r5, #8]
 80063a6:	68eb      	ldr	r3, [r5, #12]
 80063a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063aa:	7c2b      	ldrb	r3, [r5, #16]
 80063ac:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 80063ae:	4ac0      	ldr	r2, [pc, #768]	@ (80066b0 <loadMenuTexts+0x340>)
 80063b0:	4bc0      	ldr	r3, [pc, #768]	@ (80066b4 <loadMenuTexts+0x344>)
 80063b2:	4614      	mov	r4, r2
 80063b4:	461d      	mov	r5, r3
 80063b6:	6828      	ldr	r0, [r5, #0]
 80063b8:	6869      	ldr	r1, [r5, #4]
 80063ba:	68aa      	ldr	r2, [r5, #8]
 80063bc:	68eb      	ldr	r3, [r5, #12]
 80063be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c0:	7c2b      	ldrb	r3, [r5, #16]
 80063c2:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 80063c4:	4abc      	ldr	r2, [pc, #752]	@ (80066b8 <loadMenuTexts+0x348>)
 80063c6:	4bbd      	ldr	r3, [pc, #756]	@ (80066bc <loadMenuTexts+0x34c>)
 80063c8:	4614      	mov	r4, r2
 80063ca:	461d      	mov	r5, r3
 80063cc:	6828      	ldr	r0, [r5, #0]
 80063ce:	6869      	ldr	r1, [r5, #4]
 80063d0:	68aa      	ldr	r2, [r5, #8]
 80063d2:	68eb      	ldr	r3, [r5, #12]
 80063d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d6:	7c2b      	ldrb	r3, [r5, #16]
 80063d8:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80063da:	4ab9      	ldr	r2, [pc, #740]	@ (80066c0 <loadMenuTexts+0x350>)
 80063dc:	4bb9      	ldr	r3, [pc, #740]	@ (80066c4 <loadMenuTexts+0x354>)
 80063de:	4614      	mov	r4, r2
 80063e0:	461d      	mov	r5, r3
 80063e2:	6828      	ldr	r0, [r5, #0]
 80063e4:	6869      	ldr	r1, [r5, #4]
 80063e6:	68aa      	ldr	r2, [r5, #8]
 80063e8:	68eb      	ldr	r3, [r5, #12]
 80063ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ec:	7c2b      	ldrb	r3, [r5, #16]
 80063ee:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80063f0:	4ab5      	ldr	r2, [pc, #724]	@ (80066c8 <loadMenuTexts+0x358>)
 80063f2:	4bb6      	ldr	r3, [pc, #728]	@ (80066cc <loadMenuTexts+0x35c>)
 80063f4:	4614      	mov	r4, r2
 80063f6:	461d      	mov	r5, r3
 80063f8:	6828      	ldr	r0, [r5, #0]
 80063fa:	6869      	ldr	r1, [r5, #4]
 80063fc:	68aa      	ldr	r2, [r5, #8]
 80063fe:	68eb      	ldr	r3, [r5, #12]
 8006400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006402:	7c2b      	ldrb	r3, [r5, #16]
 8006404:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8006406:	4ab2      	ldr	r2, [pc, #712]	@ (80066d0 <loadMenuTexts+0x360>)
 8006408:	4bb2      	ldr	r3, [pc, #712]	@ (80066d4 <loadMenuTexts+0x364>)
 800640a:	4614      	mov	r4, r2
 800640c:	461d      	mov	r5, r3
 800640e:	6828      	ldr	r0, [r5, #0]
 8006410:	6869      	ldr	r1, [r5, #4]
 8006412:	68aa      	ldr	r2, [r5, #8]
 8006414:	68eb      	ldr	r3, [r5, #12]
 8006416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006418:	7c2b      	ldrb	r3, [r5, #16]
 800641a:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 800641c:	4aae      	ldr	r2, [pc, #696]	@ (80066d8 <loadMenuTexts+0x368>)
 800641e:	4baf      	ldr	r3, [pc, #700]	@ (80066dc <loadMenuTexts+0x36c>)
 8006420:	4614      	mov	r4, r2
 8006422:	461d      	mov	r5, r3
 8006424:	6828      	ldr	r0, [r5, #0]
 8006426:	6869      	ldr	r1, [r5, #4]
 8006428:	68aa      	ldr	r2, [r5, #8]
 800642a:	68eb      	ldr	r3, [r5, #12]
 800642c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800642e:	7c2b      	ldrb	r3, [r5, #16]
 8006430:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006432:	4aab      	ldr	r2, [pc, #684]	@ (80066e0 <loadMenuTexts+0x370>)
 8006434:	4bab      	ldr	r3, [pc, #684]	@ (80066e4 <loadMenuTexts+0x374>)
 8006436:	4614      	mov	r4, r2
 8006438:	461d      	mov	r5, r3
 800643a:	6828      	ldr	r0, [r5, #0]
 800643c:	6869      	ldr	r1, [r5, #4]
 800643e:	68aa      	ldr	r2, [r5, #8]
 8006440:	68eb      	ldr	r3, [r5, #12]
 8006442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006444:	7c2b      	ldrb	r3, [r5, #16]
 8006446:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006448:	4aa7      	ldr	r2, [pc, #668]	@ (80066e8 <loadMenuTexts+0x378>)
 800644a:	4ba8      	ldr	r3, [pc, #672]	@ (80066ec <loadMenuTexts+0x37c>)
 800644c:	4614      	mov	r4, r2
 800644e:	461d      	mov	r5, r3
 8006450:	6828      	ldr	r0, [r5, #0]
 8006452:	6869      	ldr	r1, [r5, #4]
 8006454:	68aa      	ldr	r2, [r5, #8]
 8006456:	68eb      	ldr	r3, [r5, #12]
 8006458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800645a:	7c2b      	ldrb	r3, [r5, #16]
 800645c:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800645e:	4aa4      	ldr	r2, [pc, #656]	@ (80066f0 <loadMenuTexts+0x380>)
 8006460:	4ba4      	ldr	r3, [pc, #656]	@ (80066f4 <loadMenuTexts+0x384>)
 8006462:	4614      	mov	r4, r2
 8006464:	461d      	mov	r5, r3
 8006466:	6828      	ldr	r0, [r5, #0]
 8006468:	6869      	ldr	r1, [r5, #4]
 800646a:	68aa      	ldr	r2, [r5, #8]
 800646c:	68eb      	ldr	r3, [r5, #12]
 800646e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006470:	7c2b      	ldrb	r3, [r5, #16]
 8006472:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006474:	4aa0      	ldr	r2, [pc, #640]	@ (80066f8 <loadMenuTexts+0x388>)
 8006476:	4ba1      	ldr	r3, [pc, #644]	@ (80066fc <loadMenuTexts+0x38c>)
 8006478:	4614      	mov	r4, r2
 800647a:	461d      	mov	r5, r3
 800647c:	6828      	ldr	r0, [r5, #0]
 800647e:	6869      	ldr	r1, [r5, #4]
 8006480:	68aa      	ldr	r2, [r5, #8]
 8006482:	68eb      	ldr	r3, [r5, #12]
 8006484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006486:	7c2b      	ldrb	r3, [r5, #16]
 8006488:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 800648a:	4a9d      	ldr	r2, [pc, #628]	@ (8006700 <loadMenuTexts+0x390>)
 800648c:	4b9d      	ldr	r3, [pc, #628]	@ (8006704 <loadMenuTexts+0x394>)
 800648e:	4614      	mov	r4, r2
 8006490:	461d      	mov	r5, r3
 8006492:	6828      	ldr	r0, [r5, #0]
 8006494:	6869      	ldr	r1, [r5, #4]
 8006496:	68aa      	ldr	r2, [r5, #8]
 8006498:	68eb      	ldr	r3, [r5, #12]
 800649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800649c:	7c2b      	ldrb	r3, [r5, #16]
 800649e:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 80064a0:	4a99      	ldr	r2, [pc, #612]	@ (8006708 <loadMenuTexts+0x398>)
 80064a2:	4b9a      	ldr	r3, [pc, #616]	@ (800670c <loadMenuTexts+0x39c>)
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	6828      	ldr	r0, [r5, #0]
 80064aa:	6869      	ldr	r1, [r5, #4]
 80064ac:	68aa      	ldr	r2, [r5, #8]
 80064ae:	68eb      	ldr	r3, [r5, #12]
 80064b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b2:	7c2b      	ldrb	r3, [r5, #16]
 80064b4:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80064b6:	4a96      	ldr	r2, [pc, #600]	@ (8006710 <loadMenuTexts+0x3a0>)
 80064b8:	4b96      	ldr	r3, [pc, #600]	@ (8006714 <loadMenuTexts+0x3a4>)
 80064ba:	4614      	mov	r4, r2
 80064bc:	461d      	mov	r5, r3
 80064be:	6828      	ldr	r0, [r5, #0]
 80064c0:	6869      	ldr	r1, [r5, #4]
 80064c2:	68aa      	ldr	r2, [r5, #8]
 80064c4:	68eb      	ldr	r3, [r5, #12]
 80064c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c8:	7c2b      	ldrb	r3, [r5, #16]
 80064ca:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80064cc:	4a92      	ldr	r2, [pc, #584]	@ (8006718 <loadMenuTexts+0x3a8>)
 80064ce:	4b93      	ldr	r3, [pc, #588]	@ (800671c <loadMenuTexts+0x3ac>)
 80064d0:	4614      	mov	r4, r2
 80064d2:	461d      	mov	r5, r3
 80064d4:	6828      	ldr	r0, [r5, #0]
 80064d6:	6869      	ldr	r1, [r5, #4]
 80064d8:	68aa      	ldr	r2, [r5, #8]
 80064da:	68eb      	ldr	r3, [r5, #12]
 80064dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064de:	7c2b      	ldrb	r3, [r5, #16]
 80064e0:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80064e2:	4a8f      	ldr	r2, [pc, #572]	@ (8006720 <loadMenuTexts+0x3b0>)
 80064e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006724 <loadMenuTexts+0x3b4>)
 80064e6:	4614      	mov	r4, r2
 80064e8:	461d      	mov	r5, r3
 80064ea:	6828      	ldr	r0, [r5, #0]
 80064ec:	6869      	ldr	r1, [r5, #4]
 80064ee:	68aa      	ldr	r2, [r5, #8]
 80064f0:	68eb      	ldr	r3, [r5, #12]
 80064f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f4:	7c2b      	ldrb	r3, [r5, #16]
 80064f6:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80064f8:	4a8b      	ldr	r2, [pc, #556]	@ (8006728 <loadMenuTexts+0x3b8>)
 80064fa:	4b8c      	ldr	r3, [pc, #560]	@ (800672c <loadMenuTexts+0x3bc>)
 80064fc:	4614      	mov	r4, r2
 80064fe:	461d      	mov	r5, r3
 8006500:	6828      	ldr	r0, [r5, #0]
 8006502:	6869      	ldr	r1, [r5, #4]
 8006504:	68aa      	ldr	r2, [r5, #8]
 8006506:	68eb      	ldr	r3, [r5, #12]
 8006508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650a:	7c2b      	ldrb	r3, [r5, #16]
 800650c:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 800650e:	4a88      	ldr	r2, [pc, #544]	@ (8006730 <loadMenuTexts+0x3c0>)
 8006510:	4b88      	ldr	r3, [pc, #544]	@ (8006734 <loadMenuTexts+0x3c4>)
 8006512:	4614      	mov	r4, r2
 8006514:	461d      	mov	r5, r3
 8006516:	6828      	ldr	r0, [r5, #0]
 8006518:	6869      	ldr	r1, [r5, #4]
 800651a:	68aa      	ldr	r2, [r5, #8]
 800651c:	68eb      	ldr	r3, [r5, #12]
 800651e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006520:	7c2b      	ldrb	r3, [r5, #16]
 8006522:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006524:	4a84      	ldr	r2, [pc, #528]	@ (8006738 <loadMenuTexts+0x3c8>)
 8006526:	4b85      	ldr	r3, [pc, #532]	@ (800673c <loadMenuTexts+0x3cc>)
 8006528:	4614      	mov	r4, r2
 800652a:	461d      	mov	r5, r3
 800652c:	6828      	ldr	r0, [r5, #0]
 800652e:	6869      	ldr	r1, [r5, #4]
 8006530:	68aa      	ldr	r2, [r5, #8]
 8006532:	68eb      	ldr	r3, [r5, #12]
 8006534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006536:	7c2b      	ldrb	r3, [r5, #16]
 8006538:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800653a:	4a81      	ldr	r2, [pc, #516]	@ (8006740 <loadMenuTexts+0x3d0>)
 800653c:	4b81      	ldr	r3, [pc, #516]	@ (8006744 <loadMenuTexts+0x3d4>)
 800653e:	4614      	mov	r4, r2
 8006540:	461d      	mov	r5, r3
 8006542:	6828      	ldr	r0, [r5, #0]
 8006544:	6869      	ldr	r1, [r5, #4]
 8006546:	68aa      	ldr	r2, [r5, #8]
 8006548:	68eb      	ldr	r3, [r5, #12]
 800654a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800654c:	7c2b      	ldrb	r3, [r5, #16]
 800654e:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006550:	4a7d      	ldr	r2, [pc, #500]	@ (8006748 <loadMenuTexts+0x3d8>)
 8006552:	4b7e      	ldr	r3, [pc, #504]	@ (800674c <loadMenuTexts+0x3dc>)
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	6828      	ldr	r0, [r5, #0]
 800655a:	6869      	ldr	r1, [r5, #4]
 800655c:	68aa      	ldr	r2, [r5, #8]
 800655e:	68eb      	ldr	r3, [r5, #12]
 8006560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006562:	7c2b      	ldrb	r3, [r5, #16]
 8006564:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006566:	4a7a      	ldr	r2, [pc, #488]	@ (8006750 <loadMenuTexts+0x3e0>)
 8006568:	4b7a      	ldr	r3, [pc, #488]	@ (8006754 <loadMenuTexts+0x3e4>)
 800656a:	4614      	mov	r4, r2
 800656c:	461d      	mov	r5, r3
 800656e:	6828      	ldr	r0, [r5, #0]
 8006570:	6869      	ldr	r1, [r5, #4]
 8006572:	68aa      	ldr	r2, [r5, #8]
 8006574:	68eb      	ldr	r3, [r5, #12]
 8006576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006578:	7c2b      	ldrb	r3, [r5, #16]
 800657a:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 800657c:	4a76      	ldr	r2, [pc, #472]	@ (8006758 <loadMenuTexts+0x3e8>)
 800657e:	4b77      	ldr	r3, [pc, #476]	@ (800675c <loadMenuTexts+0x3ec>)
 8006580:	4614      	mov	r4, r2
 8006582:	461d      	mov	r5, r3
 8006584:	6828      	ldr	r0, [r5, #0]
 8006586:	6869      	ldr	r1, [r5, #4]
 8006588:	68aa      	ldr	r2, [r5, #8]
 800658a:	68eb      	ldr	r3, [r5, #12]
 800658c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658e:	7c2b      	ldrb	r3, [r5, #16]
 8006590:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006592:	4a73      	ldr	r2, [pc, #460]	@ (8006760 <loadMenuTexts+0x3f0>)
 8006594:	4b73      	ldr	r3, [pc, #460]	@ (8006764 <loadMenuTexts+0x3f4>)
 8006596:	4614      	mov	r4, r2
 8006598:	461d      	mov	r5, r3
 800659a:	6828      	ldr	r0, [r5, #0]
 800659c:	6869      	ldr	r1, [r5, #4]
 800659e:	68aa      	ldr	r2, [r5, #8]
 80065a0:	68eb      	ldr	r3, [r5, #12]
 80065a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a4:	7c2b      	ldrb	r3, [r5, #16]
 80065a6:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80065a8:	4a6f      	ldr	r2, [pc, #444]	@ (8006768 <loadMenuTexts+0x3f8>)
 80065aa:	4b70      	ldr	r3, [pc, #448]	@ (800676c <loadMenuTexts+0x3fc>)
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	6828      	ldr	r0, [r5, #0]
 80065b2:	6869      	ldr	r1, [r5, #4]
 80065b4:	68aa      	ldr	r2, [r5, #8]
 80065b6:	68eb      	ldr	r3, [r5, #12]
 80065b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ba:	7c2b      	ldrb	r3, [r5, #16]
 80065bc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80065be:	4a6c      	ldr	r2, [pc, #432]	@ (8006770 <loadMenuTexts+0x400>)
 80065c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006774 <loadMenuTexts+0x404>)
 80065c2:	4614      	mov	r4, r2
 80065c4:	461d      	mov	r5, r3
 80065c6:	6828      	ldr	r0, [r5, #0]
 80065c8:	6869      	ldr	r1, [r5, #4]
 80065ca:	68aa      	ldr	r2, [r5, #8]
 80065cc:	68eb      	ldr	r3, [r5, #12]
 80065ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d0:	7c2b      	ldrb	r3, [r5, #16]
 80065d2:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80065d4:	4a68      	ldr	r2, [pc, #416]	@ (8006778 <loadMenuTexts+0x408>)
 80065d6:	4b69      	ldr	r3, [pc, #420]	@ (800677c <loadMenuTexts+0x40c>)
 80065d8:	4614      	mov	r4, r2
 80065da:	461d      	mov	r5, r3
 80065dc:	6828      	ldr	r0, [r5, #0]
 80065de:	6869      	ldr	r1, [r5, #4]
 80065e0:	68aa      	ldr	r2, [r5, #8]
 80065e2:	68eb      	ldr	r3, [r5, #12]
 80065e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e6:	7c2b      	ldrb	r3, [r5, #16]
 80065e8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80065ea:	4a65      	ldr	r2, [pc, #404]	@ (8006780 <loadMenuTexts+0x410>)
 80065ec:	4b65      	ldr	r3, [pc, #404]	@ (8006784 <loadMenuTexts+0x414>)
 80065ee:	4614      	mov	r4, r2
 80065f0:	461d      	mov	r5, r3
 80065f2:	6828      	ldr	r0, [r5, #0]
 80065f4:	6869      	ldr	r1, [r5, #4]
 80065f6:	68aa      	ldr	r2, [r5, #8]
 80065f8:	68eb      	ldr	r3, [r5, #12]
 80065fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065fc:	7c2b      	ldrb	r3, [r5, #16]
 80065fe:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006600:	4a61      	ldr	r2, [pc, #388]	@ (8006788 <loadMenuTexts+0x418>)
 8006602:	4b62      	ldr	r3, [pc, #392]	@ (800678c <loadMenuTexts+0x41c>)
 8006604:	4614      	mov	r4, r2
 8006606:	461d      	mov	r5, r3
 8006608:	6828      	ldr	r0, [r5, #0]
 800660a:	6869      	ldr	r1, [r5, #4]
 800660c:	68aa      	ldr	r2, [r5, #8]
 800660e:	68eb      	ldr	r3, [r5, #12]
 8006610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006612:	7c2b      	ldrb	r3, [r5, #16]
 8006614:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8006616:	4a5e      	ldr	r2, [pc, #376]	@ (8006790 <loadMenuTexts+0x420>)
 8006618:	4b5e      	ldr	r3, [pc, #376]	@ (8006794 <loadMenuTexts+0x424>)
 800661a:	4614      	mov	r4, r2
 800661c:	461d      	mov	r5, r3
 800661e:	6828      	ldr	r0, [r5, #0]
 8006620:	6869      	ldr	r1, [r5, #4]
 8006622:	68aa      	ldr	r2, [r5, #8]
 8006624:	68eb      	ldr	r3, [r5, #12]
 8006626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006628:	7c2b      	ldrb	r3, [r5, #16]
 800662a:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 800662c:	4a5a      	ldr	r2, [pc, #360]	@ (8006798 <loadMenuTexts+0x428>)
 800662e:	4b5b      	ldr	r3, [pc, #364]	@ (800679c <loadMenuTexts+0x42c>)
 8006630:	4614      	mov	r4, r2
 8006632:	461d      	mov	r5, r3
 8006634:	6828      	ldr	r0, [r5, #0]
 8006636:	6869      	ldr	r1, [r5, #4]
 8006638:	68aa      	ldr	r2, [r5, #8]
 800663a:	68eb      	ldr	r3, [r5, #12]
 800663c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663e:	7c2b      	ldrb	r3, [r5, #16]
 8006640:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8006642:	4a57      	ldr	r2, [pc, #348]	@ (80067a0 <loadMenuTexts+0x430>)
 8006644:	4b57      	ldr	r3, [pc, #348]	@ (80067a4 <loadMenuTexts+0x434>)
 8006646:	4614      	mov	r4, r2
 8006648:	461d      	mov	r5, r3
 800664a:	6828      	ldr	r0, [r5, #0]
 800664c:	6869      	ldr	r1, [r5, #4]
 800664e:	68aa      	ldr	r2, [r5, #8]
 8006650:	68eb      	ldr	r3, [r5, #12]
 8006652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006654:	7c2b      	ldrb	r3, [r5, #16]
 8006656:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006658:	4a53      	ldr	r2, [pc, #332]	@ (80067a8 <loadMenuTexts+0x438>)
 800665a:	4b54      	ldr	r3, [pc, #336]	@ (80067ac <loadMenuTexts+0x43c>)
 800665c:	4614      	mov	r4, r2
 800665e:	461d      	mov	r5, r3
 8006660:	6828      	ldr	r0, [r5, #0]
 8006662:	6869      	ldr	r1, [r5, #4]
 8006664:	68aa      	ldr	r2, [r5, #8]
 8006666:	68eb      	ldr	r3, [r5, #12]
 8006668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800666a:	7c2b      	ldrb	r3, [r5, #16]
 800666c:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800666e:	4a50      	ldr	r2, [pc, #320]	@ (80067b0 <loadMenuTexts+0x440>)
 8006670:	4b50      	ldr	r3, [pc, #320]	@ (80067b4 <loadMenuTexts+0x444>)
 8006672:	4614      	mov	r4, r2
 8006674:	461d      	mov	r5, r3
 8006676:	6828      	ldr	r0, [r5, #0]
 8006678:	6869      	ldr	r1, [r5, #4]
 800667a:	68aa      	ldr	r2, [r5, #8]
 800667c:	68eb      	ldr	r3, [r5, #12]
 800667e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006680:	7c2b      	ldrb	r3, [r5, #16]
 8006682:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006684:	4a4c      	ldr	r2, [pc, #304]	@ (80067b8 <loadMenuTexts+0x448>)
 8006686:	4b4d      	ldr	r3, [pc, #308]	@ (80067bc <loadMenuTexts+0x44c>)
 8006688:	4614      	mov	r4, r2
 800668a:	461d      	mov	r5, r3
 800668c:	6828      	ldr	r0, [r5, #0]
 800668e:	6869      	ldr	r1, [r5, #4]
 8006690:	68aa      	ldr	r2, [r5, #8]
 8006692:	68eb      	ldr	r3, [r5, #12]
 8006694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006696:	7c2b      	ldrb	r3, [r5, #16]
 8006698:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800669a:	4a49      	ldr	r2, [pc, #292]	@ (80067c0 <loadMenuTexts+0x450>)
 800669c:	e092      	b.n	80067c4 <loadMenuTexts+0x454>
 800669e:	bf00      	nop
 80066a0:	20001824 	.word	0x20001824
 80066a4:	2000018c 	.word	0x2000018c
 80066a8:	20001838 	.word	0x20001838
 80066ac:	200001a0 	.word	0x200001a0
 80066b0:	2000184c 	.word	0x2000184c
 80066b4:	200001b4 	.word	0x200001b4
 80066b8:	20001860 	.word	0x20001860
 80066bc:	200001c8 	.word	0x200001c8
 80066c0:	20001874 	.word	0x20001874
 80066c4:	200001dc 	.word	0x200001dc
 80066c8:	20001888 	.word	0x20001888
 80066cc:	200001f0 	.word	0x200001f0
 80066d0:	2000189c 	.word	0x2000189c
 80066d4:	20000204 	.word	0x20000204
 80066d8:	200018b0 	.word	0x200018b0
 80066dc:	20000218 	.word	0x20000218
 80066e0:	200018c4 	.word	0x200018c4
 80066e4:	2000022c 	.word	0x2000022c
 80066e8:	200018d8 	.word	0x200018d8
 80066ec:	20000240 	.word	0x20000240
 80066f0:	200018ec 	.word	0x200018ec
 80066f4:	20000254 	.word	0x20000254
 80066f8:	20001900 	.word	0x20001900
 80066fc:	20000268 	.word	0x20000268
 8006700:	20001914 	.word	0x20001914
 8006704:	2000027c 	.word	0x2000027c
 8006708:	20001928 	.word	0x20001928
 800670c:	20000290 	.word	0x20000290
 8006710:	2000193c 	.word	0x2000193c
 8006714:	200002a4 	.word	0x200002a4
 8006718:	20001950 	.word	0x20001950
 800671c:	200002b8 	.word	0x200002b8
 8006720:	20001964 	.word	0x20001964
 8006724:	200002cc 	.word	0x200002cc
 8006728:	20001978 	.word	0x20001978
 800672c:	200002e0 	.word	0x200002e0
 8006730:	2000198c 	.word	0x2000198c
 8006734:	200002f4 	.word	0x200002f4
 8006738:	200019a0 	.word	0x200019a0
 800673c:	20000308 	.word	0x20000308
 8006740:	200019b4 	.word	0x200019b4
 8006744:	2000031c 	.word	0x2000031c
 8006748:	200019c8 	.word	0x200019c8
 800674c:	20000330 	.word	0x20000330
 8006750:	200019dc 	.word	0x200019dc
 8006754:	20000344 	.word	0x20000344
 8006758:	200019f0 	.word	0x200019f0
 800675c:	20000358 	.word	0x20000358
 8006760:	20001a04 	.word	0x20001a04
 8006764:	2000036c 	.word	0x2000036c
 8006768:	20001a18 	.word	0x20001a18
 800676c:	20000380 	.word	0x20000380
 8006770:	20001a2c 	.word	0x20001a2c
 8006774:	20000394 	.word	0x20000394
 8006778:	20001a40 	.word	0x20001a40
 800677c:	200003a8 	.word	0x200003a8
 8006780:	20001a54 	.word	0x20001a54
 8006784:	200003bc 	.word	0x200003bc
 8006788:	20001a68 	.word	0x20001a68
 800678c:	200003d0 	.word	0x200003d0
 8006790:	20001a7c 	.word	0x20001a7c
 8006794:	200003e4 	.word	0x200003e4
 8006798:	20001a90 	.word	0x20001a90
 800679c:	200003f8 	.word	0x200003f8
 80067a0:	20001aa4 	.word	0x20001aa4
 80067a4:	2000040c 	.word	0x2000040c
 80067a8:	20001ab8 	.word	0x20001ab8
 80067ac:	20000420 	.word	0x20000420
 80067b0:	20001acc 	.word	0x20001acc
 80067b4:	20000434 	.word	0x20000434
 80067b8:	20001ae0 	.word	0x20001ae0
 80067bc:	20000448 	.word	0x20000448
 80067c0:	20001af4 	.word	0x20001af4
 80067c4:	4bc7      	ldr	r3, [pc, #796]	@ (8006ae4 <loadMenuTexts+0x774>)
 80067c6:	4614      	mov	r4, r2
 80067c8:	461d      	mov	r5, r3
 80067ca:	6828      	ldr	r0, [r5, #0]
 80067cc:	6869      	ldr	r1, [r5, #4]
 80067ce:	68aa      	ldr	r2, [r5, #8]
 80067d0:	68eb      	ldr	r3, [r5, #12]
 80067d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d4:	7c2b      	ldrb	r3, [r5, #16]
 80067d6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80067d8:	4ac3      	ldr	r2, [pc, #780]	@ (8006ae8 <loadMenuTexts+0x778>)
 80067da:	4bc4      	ldr	r3, [pc, #784]	@ (8006aec <loadMenuTexts+0x77c>)
 80067dc:	4614      	mov	r4, r2
 80067de:	461d      	mov	r5, r3
 80067e0:	6828      	ldr	r0, [r5, #0]
 80067e2:	6869      	ldr	r1, [r5, #4]
 80067e4:	68aa      	ldr	r2, [r5, #8]
 80067e6:	68eb      	ldr	r3, [r5, #12]
 80067e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ea:	7c2b      	ldrb	r3, [r5, #16]
 80067ec:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80067ee:	4ac0      	ldr	r2, [pc, #768]	@ (8006af0 <loadMenuTexts+0x780>)
 80067f0:	4bc0      	ldr	r3, [pc, #768]	@ (8006af4 <loadMenuTexts+0x784>)
 80067f2:	4614      	mov	r4, r2
 80067f4:	461d      	mov	r5, r3
 80067f6:	6828      	ldr	r0, [r5, #0]
 80067f8:	6869      	ldr	r1, [r5, #4]
 80067fa:	68aa      	ldr	r2, [r5, #8]
 80067fc:	68eb      	ldr	r3, [r5, #12]
 80067fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006800:	7c2b      	ldrb	r3, [r5, #16]
 8006802:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006804:	4abc      	ldr	r2, [pc, #752]	@ (8006af8 <loadMenuTexts+0x788>)
 8006806:	4bbd      	ldr	r3, [pc, #756]	@ (8006afc <loadMenuTexts+0x78c>)
 8006808:	4614      	mov	r4, r2
 800680a:	461d      	mov	r5, r3
 800680c:	6828      	ldr	r0, [r5, #0]
 800680e:	6869      	ldr	r1, [r5, #4]
 8006810:	68aa      	ldr	r2, [r5, #8]
 8006812:	68eb      	ldr	r3, [r5, #12]
 8006814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006816:	7c2b      	ldrb	r3, [r5, #16]
 8006818:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800681a:	4ab9      	ldr	r2, [pc, #740]	@ (8006b00 <loadMenuTexts+0x790>)
 800681c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b04 <loadMenuTexts+0x794>)
 800681e:	4614      	mov	r4, r2
 8006820:	461d      	mov	r5, r3
 8006822:	6828      	ldr	r0, [r5, #0]
 8006824:	6869      	ldr	r1, [r5, #4]
 8006826:	68aa      	ldr	r2, [r5, #8]
 8006828:	68eb      	ldr	r3, [r5, #12]
 800682a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800682c:	7c2b      	ldrb	r3, [r5, #16]
 800682e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006830:	4ab5      	ldr	r2, [pc, #724]	@ (8006b08 <loadMenuTexts+0x798>)
 8006832:	4bb6      	ldr	r3, [pc, #728]	@ (8006b0c <loadMenuTexts+0x79c>)
 8006834:	4614      	mov	r4, r2
 8006836:	461d      	mov	r5, r3
 8006838:	6828      	ldr	r0, [r5, #0]
 800683a:	6869      	ldr	r1, [r5, #4]
 800683c:	68aa      	ldr	r2, [r5, #8]
 800683e:	68eb      	ldr	r3, [r5, #12]
 8006840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006842:	7c2b      	ldrb	r3, [r5, #16]
 8006844:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8006846:	4ab2      	ldr	r2, [pc, #712]	@ (8006b10 <loadMenuTexts+0x7a0>)
 8006848:	4bb2      	ldr	r3, [pc, #712]	@ (8006b14 <loadMenuTexts+0x7a4>)
 800684a:	4614      	mov	r4, r2
 800684c:	461d      	mov	r5, r3
 800684e:	6828      	ldr	r0, [r5, #0]
 8006850:	6869      	ldr	r1, [r5, #4]
 8006852:	68aa      	ldr	r2, [r5, #8]
 8006854:	68eb      	ldr	r3, [r5, #12]
 8006856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006858:	7c2b      	ldrb	r3, [r5, #16]
 800685a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 800685c:	4aae      	ldr	r2, [pc, #696]	@ (8006b18 <loadMenuTexts+0x7a8>)
 800685e:	4baf      	ldr	r3, [pc, #700]	@ (8006b1c <loadMenuTexts+0x7ac>)
 8006860:	4614      	mov	r4, r2
 8006862:	461d      	mov	r5, r3
 8006864:	6828      	ldr	r0, [r5, #0]
 8006866:	6869      	ldr	r1, [r5, #4]
 8006868:	68aa      	ldr	r2, [r5, #8]
 800686a:	68eb      	ldr	r3, [r5, #12]
 800686c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800686e:	7c2b      	ldrb	r3, [r5, #16]
 8006870:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8006872:	4aab      	ldr	r2, [pc, #684]	@ (8006b20 <loadMenuTexts+0x7b0>)
 8006874:	4bab      	ldr	r3, [pc, #684]	@ (8006b24 <loadMenuTexts+0x7b4>)
 8006876:	4614      	mov	r4, r2
 8006878:	461d      	mov	r5, r3
 800687a:	6828      	ldr	r0, [r5, #0]
 800687c:	6869      	ldr	r1, [r5, #4]
 800687e:	68aa      	ldr	r2, [r5, #8]
 8006880:	68eb      	ldr	r3, [r5, #12]
 8006882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006884:	7c2b      	ldrb	r3, [r5, #16]
 8006886:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006888:	4aa7      	ldr	r2, [pc, #668]	@ (8006b28 <loadMenuTexts+0x7b8>)
 800688a:	4ba8      	ldr	r3, [pc, #672]	@ (8006b2c <loadMenuTexts+0x7bc>)
 800688c:	4614      	mov	r4, r2
 800688e:	461d      	mov	r5, r3
 8006890:	6828      	ldr	r0, [r5, #0]
 8006892:	6869      	ldr	r1, [r5, #4]
 8006894:	68aa      	ldr	r2, [r5, #8]
 8006896:	68eb      	ldr	r3, [r5, #12]
 8006898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800689a:	7c2b      	ldrb	r3, [r5, #16]
 800689c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800689e:	4aa4      	ldr	r2, [pc, #656]	@ (8006b30 <loadMenuTexts+0x7c0>)
 80068a0:	4ba4      	ldr	r3, [pc, #656]	@ (8006b34 <loadMenuTexts+0x7c4>)
 80068a2:	4614      	mov	r4, r2
 80068a4:	461d      	mov	r5, r3
 80068a6:	6828      	ldr	r0, [r5, #0]
 80068a8:	6869      	ldr	r1, [r5, #4]
 80068aa:	68aa      	ldr	r2, [r5, #8]
 80068ac:	68eb      	ldr	r3, [r5, #12]
 80068ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b0:	7c2b      	ldrb	r3, [r5, #16]
 80068b2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80068b4:	4aa0      	ldr	r2, [pc, #640]	@ (8006b38 <loadMenuTexts+0x7c8>)
 80068b6:	4ba1      	ldr	r3, [pc, #644]	@ (8006b3c <loadMenuTexts+0x7cc>)
 80068b8:	4614      	mov	r4, r2
 80068ba:	461d      	mov	r5, r3
 80068bc:	6828      	ldr	r0, [r5, #0]
 80068be:	6869      	ldr	r1, [r5, #4]
 80068c0:	68aa      	ldr	r2, [r5, #8]
 80068c2:	68eb      	ldr	r3, [r5, #12]
 80068c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c6:	7c2b      	ldrb	r3, [r5, #16]
 80068c8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80068ca:	4a9d      	ldr	r2, [pc, #628]	@ (8006b40 <loadMenuTexts+0x7d0>)
 80068cc:	4b9d      	ldr	r3, [pc, #628]	@ (8006b44 <loadMenuTexts+0x7d4>)
 80068ce:	4614      	mov	r4, r2
 80068d0:	461d      	mov	r5, r3
 80068d2:	6828      	ldr	r0, [r5, #0]
 80068d4:	6869      	ldr	r1, [r5, #4]
 80068d6:	68aa      	ldr	r2, [r5, #8]
 80068d8:	68eb      	ldr	r3, [r5, #12]
 80068da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068dc:	7c2b      	ldrb	r3, [r5, #16]
 80068de:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80068e0:	4a99      	ldr	r2, [pc, #612]	@ (8006b48 <loadMenuTexts+0x7d8>)
 80068e2:	4b9a      	ldr	r3, [pc, #616]	@ (8006b4c <loadMenuTexts+0x7dc>)
 80068e4:	4614      	mov	r4, r2
 80068e6:	461d      	mov	r5, r3
 80068e8:	6828      	ldr	r0, [r5, #0]
 80068ea:	6869      	ldr	r1, [r5, #4]
 80068ec:	68aa      	ldr	r2, [r5, #8]
 80068ee:	68eb      	ldr	r3, [r5, #12]
 80068f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f2:	7c2b      	ldrb	r3, [r5, #16]
 80068f4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80068f6:	4a96      	ldr	r2, [pc, #600]	@ (8006b50 <loadMenuTexts+0x7e0>)
 80068f8:	4b96      	ldr	r3, [pc, #600]	@ (8006b54 <loadMenuTexts+0x7e4>)
 80068fa:	4614      	mov	r4, r2
 80068fc:	461d      	mov	r5, r3
 80068fe:	6828      	ldr	r0, [r5, #0]
 8006900:	6869      	ldr	r1, [r5, #4]
 8006902:	68aa      	ldr	r2, [r5, #8]
 8006904:	68eb      	ldr	r3, [r5, #12]
 8006906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006908:	7c2b      	ldrb	r3, [r5, #16]
 800690a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 800690c:	4a92      	ldr	r2, [pc, #584]	@ (8006b58 <loadMenuTexts+0x7e8>)
 800690e:	4b93      	ldr	r3, [pc, #588]	@ (8006b5c <loadMenuTexts+0x7ec>)
 8006910:	4614      	mov	r4, r2
 8006912:	461d      	mov	r5, r3
 8006914:	6828      	ldr	r0, [r5, #0]
 8006916:	6869      	ldr	r1, [r5, #4]
 8006918:	68aa      	ldr	r2, [r5, #8]
 800691a:	68eb      	ldr	r3, [r5, #12]
 800691c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800691e:	7c2b      	ldrb	r3, [r5, #16]
 8006920:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006922:	4a8f      	ldr	r2, [pc, #572]	@ (8006b60 <loadMenuTexts+0x7f0>)
 8006924:	4b8f      	ldr	r3, [pc, #572]	@ (8006b64 <loadMenuTexts+0x7f4>)
 8006926:	4614      	mov	r4, r2
 8006928:	461d      	mov	r5, r3
 800692a:	6828      	ldr	r0, [r5, #0]
 800692c:	6869      	ldr	r1, [r5, #4]
 800692e:	68aa      	ldr	r2, [r5, #8]
 8006930:	68eb      	ldr	r3, [r5, #12]
 8006932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006934:	7c2b      	ldrb	r3, [r5, #16]
 8006936:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006938:	4a8b      	ldr	r2, [pc, #556]	@ (8006b68 <loadMenuTexts+0x7f8>)
 800693a:	4b8c      	ldr	r3, [pc, #560]	@ (8006b6c <loadMenuTexts+0x7fc>)
 800693c:	4614      	mov	r4, r2
 800693e:	461d      	mov	r5, r3
 8006940:	6828      	ldr	r0, [r5, #0]
 8006942:	6869      	ldr	r1, [r5, #4]
 8006944:	68aa      	ldr	r2, [r5, #8]
 8006946:	68eb      	ldr	r3, [r5, #12]
 8006948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694a:	7c2b      	ldrb	r3, [r5, #16]
 800694c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800694e:	4a88      	ldr	r2, [pc, #544]	@ (8006b70 <loadMenuTexts+0x800>)
 8006950:	4b88      	ldr	r3, [pc, #544]	@ (8006b74 <loadMenuTexts+0x804>)
 8006952:	4614      	mov	r4, r2
 8006954:	461d      	mov	r5, r3
 8006956:	6828      	ldr	r0, [r5, #0]
 8006958:	6869      	ldr	r1, [r5, #4]
 800695a:	68aa      	ldr	r2, [r5, #8]
 800695c:	68eb      	ldr	r3, [r5, #12]
 800695e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006960:	7c2b      	ldrb	r3, [r5, #16]
 8006962:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006964:	4a84      	ldr	r2, [pc, #528]	@ (8006b78 <loadMenuTexts+0x808>)
 8006966:	4b85      	ldr	r3, [pc, #532]	@ (8006b7c <loadMenuTexts+0x80c>)
 8006968:	4614      	mov	r4, r2
 800696a:	461d      	mov	r5, r3
 800696c:	6828      	ldr	r0, [r5, #0]
 800696e:	6869      	ldr	r1, [r5, #4]
 8006970:	68aa      	ldr	r2, [r5, #8]
 8006972:	68eb      	ldr	r3, [r5, #12]
 8006974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006976:	7c2b      	ldrb	r3, [r5, #16]
 8006978:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800697a:	4a81      	ldr	r2, [pc, #516]	@ (8006b80 <loadMenuTexts+0x810>)
 800697c:	4b81      	ldr	r3, [pc, #516]	@ (8006b84 <loadMenuTexts+0x814>)
 800697e:	4614      	mov	r4, r2
 8006980:	461d      	mov	r5, r3
 8006982:	6828      	ldr	r0, [r5, #0]
 8006984:	6869      	ldr	r1, [r5, #4]
 8006986:	68aa      	ldr	r2, [r5, #8]
 8006988:	68eb      	ldr	r3, [r5, #12]
 800698a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800698c:	7c2b      	ldrb	r3, [r5, #16]
 800698e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006990:	4a7d      	ldr	r2, [pc, #500]	@ (8006b88 <loadMenuTexts+0x818>)
 8006992:	4b7e      	ldr	r3, [pc, #504]	@ (8006b8c <loadMenuTexts+0x81c>)
 8006994:	4614      	mov	r4, r2
 8006996:	461d      	mov	r5, r3
 8006998:	6828      	ldr	r0, [r5, #0]
 800699a:	6869      	ldr	r1, [r5, #4]
 800699c:	68aa      	ldr	r2, [r5, #8]
 800699e:	68eb      	ldr	r3, [r5, #12]
 80069a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a2:	7c2b      	ldrb	r3, [r5, #16]
 80069a4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80069a6:	4a7a      	ldr	r2, [pc, #488]	@ (8006b90 <loadMenuTexts+0x820>)
 80069a8:	4b7a      	ldr	r3, [pc, #488]	@ (8006b94 <loadMenuTexts+0x824>)
 80069aa:	4614      	mov	r4, r2
 80069ac:	461d      	mov	r5, r3
 80069ae:	6828      	ldr	r0, [r5, #0]
 80069b0:	6869      	ldr	r1, [r5, #4]
 80069b2:	68aa      	ldr	r2, [r5, #8]
 80069b4:	68eb      	ldr	r3, [r5, #12]
 80069b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b8:	7c2b      	ldrb	r3, [r5, #16]
 80069ba:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80069bc:	4a76      	ldr	r2, [pc, #472]	@ (8006b98 <loadMenuTexts+0x828>)
 80069be:	4b77      	ldr	r3, [pc, #476]	@ (8006b9c <loadMenuTexts+0x82c>)
 80069c0:	4614      	mov	r4, r2
 80069c2:	461d      	mov	r5, r3
 80069c4:	6828      	ldr	r0, [r5, #0]
 80069c6:	6869      	ldr	r1, [r5, #4]
 80069c8:	68aa      	ldr	r2, [r5, #8]
 80069ca:	68eb      	ldr	r3, [r5, #12]
 80069cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ce:	7c2b      	ldrb	r3, [r5, #16]
 80069d0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80069d2:	4a73      	ldr	r2, [pc, #460]	@ (8006ba0 <loadMenuTexts+0x830>)
 80069d4:	4b73      	ldr	r3, [pc, #460]	@ (8006ba4 <loadMenuTexts+0x834>)
 80069d6:	4614      	mov	r4, r2
 80069d8:	461d      	mov	r5, r3
 80069da:	6828      	ldr	r0, [r5, #0]
 80069dc:	6869      	ldr	r1, [r5, #4]
 80069de:	68aa      	ldr	r2, [r5, #8]
 80069e0:	68eb      	ldr	r3, [r5, #12]
 80069e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e4:	7c2b      	ldrb	r3, [r5, #16]
 80069e6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80069e8:	4a6f      	ldr	r2, [pc, #444]	@ (8006ba8 <loadMenuTexts+0x838>)
 80069ea:	4b70      	ldr	r3, [pc, #448]	@ (8006bac <loadMenuTexts+0x83c>)
 80069ec:	4614      	mov	r4, r2
 80069ee:	461d      	mov	r5, r3
 80069f0:	6828      	ldr	r0, [r5, #0]
 80069f2:	6869      	ldr	r1, [r5, #4]
 80069f4:	68aa      	ldr	r2, [r5, #8]
 80069f6:	68eb      	ldr	r3, [r5, #12]
 80069f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069fa:	7c2b      	ldrb	r3, [r5, #16]
 80069fc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80069fe:	4a6c      	ldr	r2, [pc, #432]	@ (8006bb0 <loadMenuTexts+0x840>)
 8006a00:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb4 <loadMenuTexts+0x844>)
 8006a02:	4614      	mov	r4, r2
 8006a04:	461d      	mov	r5, r3
 8006a06:	6828      	ldr	r0, [r5, #0]
 8006a08:	6869      	ldr	r1, [r5, #4]
 8006a0a:	68aa      	ldr	r2, [r5, #8]
 8006a0c:	68eb      	ldr	r3, [r5, #12]
 8006a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a10:	7c2b      	ldrb	r3, [r5, #16]
 8006a12:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006a14:	4a68      	ldr	r2, [pc, #416]	@ (8006bb8 <loadMenuTexts+0x848>)
 8006a16:	4b69      	ldr	r3, [pc, #420]	@ (8006bbc <loadMenuTexts+0x84c>)
 8006a18:	4614      	mov	r4, r2
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	6828      	ldr	r0, [r5, #0]
 8006a1e:	6869      	ldr	r1, [r5, #4]
 8006a20:	68aa      	ldr	r2, [r5, #8]
 8006a22:	68eb      	ldr	r3, [r5, #12]
 8006a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a26:	7c2b      	ldrb	r3, [r5, #16]
 8006a28:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8006a2a:	4a65      	ldr	r2, [pc, #404]	@ (8006bc0 <loadMenuTexts+0x850>)
 8006a2c:	4b65      	ldr	r3, [pc, #404]	@ (8006bc4 <loadMenuTexts+0x854>)
 8006a2e:	4614      	mov	r4, r2
 8006a30:	461d      	mov	r5, r3
 8006a32:	6828      	ldr	r0, [r5, #0]
 8006a34:	6869      	ldr	r1, [r5, #4]
 8006a36:	68aa      	ldr	r2, [r5, #8]
 8006a38:	68eb      	ldr	r3, [r5, #12]
 8006a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a3c:	7c2b      	ldrb	r3, [r5, #16]
 8006a3e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8006a40:	4a61      	ldr	r2, [pc, #388]	@ (8006bc8 <loadMenuTexts+0x858>)
 8006a42:	4b62      	ldr	r3, [pc, #392]	@ (8006bcc <loadMenuTexts+0x85c>)
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	6828      	ldr	r0, [r5, #0]
 8006a4a:	6869      	ldr	r1, [r5, #4]
 8006a4c:	68aa      	ldr	r2, [r5, #8]
 8006a4e:	68eb      	ldr	r3, [r5, #12]
 8006a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a52:	7c2b      	ldrb	r3, [r5, #16]
 8006a54:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8006a56:	4a5e      	ldr	r2, [pc, #376]	@ (8006bd0 <loadMenuTexts+0x860>)
 8006a58:	4b5e      	ldr	r3, [pc, #376]	@ (8006bd4 <loadMenuTexts+0x864>)
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	461d      	mov	r5, r3
 8006a5e:	6828      	ldr	r0, [r5, #0]
 8006a60:	6869      	ldr	r1, [r5, #4]
 8006a62:	68aa      	ldr	r2, [r5, #8]
 8006a64:	68eb      	ldr	r3, [r5, #12]
 8006a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a68:	7c2b      	ldrb	r3, [r5, #16]
 8006a6a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8006bd8 <loadMenuTexts+0x868>)
 8006a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8006bdc <loadMenuTexts+0x86c>)
 8006a70:	4614      	mov	r4, r2
 8006a72:	461d      	mov	r5, r3
 8006a74:	6828      	ldr	r0, [r5, #0]
 8006a76:	6869      	ldr	r1, [r5, #4]
 8006a78:	68aa      	ldr	r2, [r5, #8]
 8006a7a:	68eb      	ldr	r3, [r5, #12]
 8006a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7e:	7c2b      	ldrb	r3, [r5, #16]
 8006a80:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8006a82:	4a57      	ldr	r2, [pc, #348]	@ (8006be0 <loadMenuTexts+0x870>)
 8006a84:	4b57      	ldr	r3, [pc, #348]	@ (8006be4 <loadMenuTexts+0x874>)
 8006a86:	4614      	mov	r4, r2
 8006a88:	461d      	mov	r5, r3
 8006a8a:	6828      	ldr	r0, [r5, #0]
 8006a8c:	6869      	ldr	r1, [r5, #4]
 8006a8e:	68aa      	ldr	r2, [r5, #8]
 8006a90:	68eb      	ldr	r3, [r5, #12]
 8006a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a94:	7c2b      	ldrb	r3, [r5, #16]
 8006a96:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006a98:	4a53      	ldr	r2, [pc, #332]	@ (8006be8 <loadMenuTexts+0x878>)
 8006a9a:	4b54      	ldr	r3, [pc, #336]	@ (8006bec <loadMenuTexts+0x87c>)
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	6828      	ldr	r0, [r5, #0]
 8006aa2:	6869      	ldr	r1, [r5, #4]
 8006aa4:	68aa      	ldr	r2, [r5, #8]
 8006aa6:	68eb      	ldr	r3, [r5, #12]
 8006aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aaa:	7c2b      	ldrb	r3, [r5, #16]
 8006aac:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006aae:	4a50      	ldr	r2, [pc, #320]	@ (8006bf0 <loadMenuTexts+0x880>)
 8006ab0:	4b50      	ldr	r3, [pc, #320]	@ (8006bf4 <loadMenuTexts+0x884>)
 8006ab2:	4614      	mov	r4, r2
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	6828      	ldr	r0, [r5, #0]
 8006ab8:	6869      	ldr	r1, [r5, #4]
 8006aba:	68aa      	ldr	r2, [r5, #8]
 8006abc:	68eb      	ldr	r3, [r5, #12]
 8006abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac0:	7c2b      	ldrb	r3, [r5, #16]
 8006ac2:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8006bf8 <loadMenuTexts+0x888>)
 8006ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8006bfc <loadMenuTexts+0x88c>)
 8006ac8:	4614      	mov	r4, r2
 8006aca:	461d      	mov	r5, r3
 8006acc:	6828      	ldr	r0, [r5, #0]
 8006ace:	6869      	ldr	r1, [r5, #4]
 8006ad0:	68aa      	ldr	r2, [r5, #8]
 8006ad2:	68eb      	ldr	r3, [r5, #12]
 8006ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad6:	7c2b      	ldrb	r3, [r5, #16]
 8006ad8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006ada:	4a49      	ldr	r2, [pc, #292]	@ (8006c00 <loadMenuTexts+0x890>)
 8006adc:	4b49      	ldr	r3, [pc, #292]	@ (8006c04 <loadMenuTexts+0x894>)
 8006ade:	4614      	mov	r4, r2
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	e091      	b.n	8006c08 <loadMenuTexts+0x898>
 8006ae4:	2000045c 	.word	0x2000045c
 8006ae8:	20001b08 	.word	0x20001b08
 8006aec:	20000470 	.word	0x20000470
 8006af0:	20001b1c 	.word	0x20001b1c
 8006af4:	20000484 	.word	0x20000484
 8006af8:	20001b30 	.word	0x20001b30
 8006afc:	20000498 	.word	0x20000498
 8006b00:	20001b44 	.word	0x20001b44
 8006b04:	200004ac 	.word	0x200004ac
 8006b08:	20001b58 	.word	0x20001b58
 8006b0c:	200004c0 	.word	0x200004c0
 8006b10:	20001b6c 	.word	0x20001b6c
 8006b14:	200004d4 	.word	0x200004d4
 8006b18:	20001b80 	.word	0x20001b80
 8006b1c:	200004e8 	.word	0x200004e8
 8006b20:	20001b94 	.word	0x20001b94
 8006b24:	200004fc 	.word	0x200004fc
 8006b28:	20001ba8 	.word	0x20001ba8
 8006b2c:	20000510 	.word	0x20000510
 8006b30:	20001bbc 	.word	0x20001bbc
 8006b34:	20000524 	.word	0x20000524
 8006b38:	20001bd0 	.word	0x20001bd0
 8006b3c:	20000538 	.word	0x20000538
 8006b40:	20001be4 	.word	0x20001be4
 8006b44:	2000054c 	.word	0x2000054c
 8006b48:	20001bf8 	.word	0x20001bf8
 8006b4c:	20000560 	.word	0x20000560
 8006b50:	20001c0c 	.word	0x20001c0c
 8006b54:	20000574 	.word	0x20000574
 8006b58:	20001c20 	.word	0x20001c20
 8006b5c:	20000588 	.word	0x20000588
 8006b60:	20001c34 	.word	0x20001c34
 8006b64:	2000059c 	.word	0x2000059c
 8006b68:	20001c48 	.word	0x20001c48
 8006b6c:	200005b0 	.word	0x200005b0
 8006b70:	20001c5c 	.word	0x20001c5c
 8006b74:	200005c4 	.word	0x200005c4
 8006b78:	20001c70 	.word	0x20001c70
 8006b7c:	200005d8 	.word	0x200005d8
 8006b80:	20001c84 	.word	0x20001c84
 8006b84:	200005ec 	.word	0x200005ec
 8006b88:	20001c98 	.word	0x20001c98
 8006b8c:	20000600 	.word	0x20000600
 8006b90:	20001cac 	.word	0x20001cac
 8006b94:	20000614 	.word	0x20000614
 8006b98:	20001cc0 	.word	0x20001cc0
 8006b9c:	20000628 	.word	0x20000628
 8006ba0:	20001cd4 	.word	0x20001cd4
 8006ba4:	2000063c 	.word	0x2000063c
 8006ba8:	20001ce8 	.word	0x20001ce8
 8006bac:	20000650 	.word	0x20000650
 8006bb0:	20001cfc 	.word	0x20001cfc
 8006bb4:	20000664 	.word	0x20000664
 8006bb8:	20001d10 	.word	0x20001d10
 8006bbc:	20000678 	.word	0x20000678
 8006bc0:	20001d24 	.word	0x20001d24
 8006bc4:	2000068c 	.word	0x2000068c
 8006bc8:	20001d38 	.word	0x20001d38
 8006bcc:	200006a0 	.word	0x200006a0
 8006bd0:	20001d4c 	.word	0x20001d4c
 8006bd4:	200006b4 	.word	0x200006b4
 8006bd8:	20001d60 	.word	0x20001d60
 8006bdc:	200006c8 	.word	0x200006c8
 8006be0:	20001d74 	.word	0x20001d74
 8006be4:	200006dc 	.word	0x200006dc
 8006be8:	20001d88 	.word	0x20001d88
 8006bec:	200006f0 	.word	0x200006f0
 8006bf0:	20001d9c 	.word	0x20001d9c
 8006bf4:	20000c7c 	.word	0x20000c7c
 8006bf8:	20001db0 	.word	0x20001db0
 8006bfc:	20000c90 	.word	0x20000c90
 8006c00:	20001dc4 	.word	0x20001dc4
 8006c04:	20000ca4 	.word	0x20000ca4
 8006c08:	6828      	ldr	r0, [r5, #0]
 8006c0a:	6869      	ldr	r1, [r5, #4]
 8006c0c:	68aa      	ldr	r2, [r5, #8]
 8006c0e:	68eb      	ldr	r3, [r5, #12]
 8006c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c12:	7c2b      	ldrb	r3, [r5, #16]
 8006c14:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006c16:	4a59      	ldr	r2, [pc, #356]	@ (8006d7c <loadMenuTexts+0xa0c>)
 8006c18:	4b59      	ldr	r3, [pc, #356]	@ (8006d80 <loadMenuTexts+0xa10>)
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	6828      	ldr	r0, [r5, #0]
 8006c20:	6869      	ldr	r1, [r5, #4]
 8006c22:	68aa      	ldr	r2, [r5, #8]
 8006c24:	68eb      	ldr	r3, [r5, #12]
 8006c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c28:	7c2b      	ldrb	r3, [r5, #16]
 8006c2a:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006c2c:	4a55      	ldr	r2, [pc, #340]	@ (8006d84 <loadMenuTexts+0xa14>)
 8006c2e:	4b56      	ldr	r3, [pc, #344]	@ (8006d88 <loadMenuTexts+0xa18>)
 8006c30:	4614      	mov	r4, r2
 8006c32:	461d      	mov	r5, r3
 8006c34:	6828      	ldr	r0, [r5, #0]
 8006c36:	6869      	ldr	r1, [r5, #4]
 8006c38:	68aa      	ldr	r2, [r5, #8]
 8006c3a:	68eb      	ldr	r3, [r5, #12]
 8006c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3e:	7c2b      	ldrb	r3, [r5, #16]
 8006c40:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006c42:	4a52      	ldr	r2, [pc, #328]	@ (8006d8c <loadMenuTexts+0xa1c>)
 8006c44:	4b52      	ldr	r3, [pc, #328]	@ (8006d90 <loadMenuTexts+0xa20>)
 8006c46:	4614      	mov	r4, r2
 8006c48:	461d      	mov	r5, r3
 8006c4a:	6828      	ldr	r0, [r5, #0]
 8006c4c:	6869      	ldr	r1, [r5, #4]
 8006c4e:	68aa      	ldr	r2, [r5, #8]
 8006c50:	68eb      	ldr	r3, [r5, #12]
 8006c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c54:	7c2b      	ldrb	r3, [r5, #16]
 8006c56:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006c58:	4a4e      	ldr	r2, [pc, #312]	@ (8006d94 <loadMenuTexts+0xa24>)
 8006c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006d98 <loadMenuTexts+0xa28>)
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	461d      	mov	r5, r3
 8006c60:	6828      	ldr	r0, [r5, #0]
 8006c62:	6869      	ldr	r1, [r5, #4]
 8006c64:	68aa      	ldr	r2, [r5, #8]
 8006c66:	68eb      	ldr	r3, [r5, #12]
 8006c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c6a:	7c2b      	ldrb	r3, [r5, #16]
 8006c6c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8006d9c <loadMenuTexts+0xa2c>)
 8006c70:	4b4b      	ldr	r3, [pc, #300]	@ (8006da0 <loadMenuTexts+0xa30>)
 8006c72:	4614      	mov	r4, r2
 8006c74:	461d      	mov	r5, r3
 8006c76:	6828      	ldr	r0, [r5, #0]
 8006c78:	6869      	ldr	r1, [r5, #4]
 8006c7a:	68aa      	ldr	r2, [r5, #8]
 8006c7c:	68eb      	ldr	r3, [r5, #12]
 8006c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c80:	7c2b      	ldrb	r3, [r5, #16]
 8006c82:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006c84:	4a47      	ldr	r2, [pc, #284]	@ (8006da4 <loadMenuTexts+0xa34>)
 8006c86:	4b48      	ldr	r3, [pc, #288]	@ (8006da8 <loadMenuTexts+0xa38>)
 8006c88:	4614      	mov	r4, r2
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	6828      	ldr	r0, [r5, #0]
 8006c8e:	6869      	ldr	r1, [r5, #4]
 8006c90:	68aa      	ldr	r2, [r5, #8]
 8006c92:	68eb      	ldr	r3, [r5, #12]
 8006c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c96:	7c2b      	ldrb	r3, [r5, #16]
 8006c98:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006c9a:	4a44      	ldr	r2, [pc, #272]	@ (8006dac <loadMenuTexts+0xa3c>)
 8006c9c:	4b44      	ldr	r3, [pc, #272]	@ (8006db0 <loadMenuTexts+0xa40>)
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	6828      	ldr	r0, [r5, #0]
 8006ca4:	6869      	ldr	r1, [r5, #4]
 8006ca6:	68aa      	ldr	r2, [r5, #8]
 8006ca8:	68eb      	ldr	r3, [r5, #12]
 8006caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cac:	7c2b      	ldrb	r3, [r5, #16]
 8006cae:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006cb0:	4a40      	ldr	r2, [pc, #256]	@ (8006db4 <loadMenuTexts+0xa44>)
 8006cb2:	4b41      	ldr	r3, [pc, #260]	@ (8006db8 <loadMenuTexts+0xa48>)
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	6828      	ldr	r0, [r5, #0]
 8006cba:	6869      	ldr	r1, [r5, #4]
 8006cbc:	68aa      	ldr	r2, [r5, #8]
 8006cbe:	68eb      	ldr	r3, [r5, #12]
 8006cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc2:	7c2b      	ldrb	r3, [r5, #16]
 8006cc4:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006cc6:	4a3d      	ldr	r2, [pc, #244]	@ (8006dbc <loadMenuTexts+0xa4c>)
 8006cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc0 <loadMenuTexts+0xa50>)
 8006cca:	4614      	mov	r4, r2
 8006ccc:	461d      	mov	r5, r3
 8006cce:	6828      	ldr	r0, [r5, #0]
 8006cd0:	6869      	ldr	r1, [r5, #4]
 8006cd2:	68aa      	ldr	r2, [r5, #8]
 8006cd4:	68eb      	ldr	r3, [r5, #12]
 8006cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd8:	7c2b      	ldrb	r3, [r5, #16]
 8006cda:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006cdc:	4a39      	ldr	r2, [pc, #228]	@ (8006dc4 <loadMenuTexts+0xa54>)
 8006cde:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc8 <loadMenuTexts+0xa58>)
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	6828      	ldr	r0, [r5, #0]
 8006ce6:	6869      	ldr	r1, [r5, #4]
 8006ce8:	68aa      	ldr	r2, [r5, #8]
 8006cea:	68eb      	ldr	r3, [r5, #12]
 8006cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cee:	7c2b      	ldrb	r3, [r5, #16]
 8006cf0:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006cf2:	4a36      	ldr	r2, [pc, #216]	@ (8006dcc <loadMenuTexts+0xa5c>)
 8006cf4:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <loadMenuTexts+0xa60>)
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	461d      	mov	r5, r3
 8006cfa:	6828      	ldr	r0, [r5, #0]
 8006cfc:	6869      	ldr	r1, [r5, #4]
 8006cfe:	68aa      	ldr	r2, [r5, #8]
 8006d00:	68eb      	ldr	r3, [r5, #12]
 8006d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d04:	7c2b      	ldrb	r3, [r5, #16]
 8006d06:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006d08:	4a32      	ldr	r2, [pc, #200]	@ (8006dd4 <loadMenuTexts+0xa64>)
 8006d0a:	4b33      	ldr	r3, [pc, #204]	@ (8006dd8 <loadMenuTexts+0xa68>)
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	461d      	mov	r5, r3
 8006d10:	6828      	ldr	r0, [r5, #0]
 8006d12:	6869      	ldr	r1, [r5, #4]
 8006d14:	68aa      	ldr	r2, [r5, #8]
 8006d16:	68eb      	ldr	r3, [r5, #12]
 8006d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d1a:	7c2b      	ldrb	r3, [r5, #16]
 8006d1c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006ddc <loadMenuTexts+0xa6c>)
 8006d20:	4b2f      	ldr	r3, [pc, #188]	@ (8006de0 <loadMenuTexts+0xa70>)
 8006d22:	4614      	mov	r4, r2
 8006d24:	461d      	mov	r5, r3
 8006d26:	6828      	ldr	r0, [r5, #0]
 8006d28:	6869      	ldr	r1, [r5, #4]
 8006d2a:	68aa      	ldr	r2, [r5, #8]
 8006d2c:	68eb      	ldr	r3, [r5, #12]
 8006d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d30:	7c2b      	ldrb	r3, [r5, #16]
 8006d32:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006d34:	4a2b      	ldr	r2, [pc, #172]	@ (8006de4 <loadMenuTexts+0xa74>)
 8006d36:	4b2c      	ldr	r3, [pc, #176]	@ (8006de8 <loadMenuTexts+0xa78>)
 8006d38:	4614      	mov	r4, r2
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	6828      	ldr	r0, [r5, #0]
 8006d3e:	6869      	ldr	r1, [r5, #4]
 8006d40:	68aa      	ldr	r2, [r5, #8]
 8006d42:	68eb      	ldr	r3, [r5, #12]
 8006d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d46:	7c2b      	ldrb	r3, [r5, #16]
 8006d48:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006d4a:	4a28      	ldr	r2, [pc, #160]	@ (8006dec <loadMenuTexts+0xa7c>)
 8006d4c:	4b28      	ldr	r3, [pc, #160]	@ (8006df0 <loadMenuTexts+0xa80>)
 8006d4e:	4614      	mov	r4, r2
 8006d50:	461d      	mov	r5, r3
 8006d52:	6828      	ldr	r0, [r5, #0]
 8006d54:	6869      	ldr	r1, [r5, #4]
 8006d56:	68aa      	ldr	r2, [r5, #8]
 8006d58:	68eb      	ldr	r3, [r5, #12]
 8006d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d5c:	7c2b      	ldrb	r3, [r5, #16]
 8006d5e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006d60:	4a24      	ldr	r2, [pc, #144]	@ (8006df4 <loadMenuTexts+0xa84>)
 8006d62:	4b25      	ldr	r3, [pc, #148]	@ (8006df8 <loadMenuTexts+0xa88>)
 8006d64:	4614      	mov	r4, r2
 8006d66:	461d      	mov	r5, r3
 8006d68:	6828      	ldr	r0, [r5, #0]
 8006d6a:	6869      	ldr	r1, [r5, #4]
 8006d6c:	68aa      	ldr	r2, [r5, #8]
 8006d6e:	68eb      	ldr	r3, [r5, #12]
 8006d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d72:	7c2b      	ldrb	r3, [r5, #16]
 8006d74:	7023      	strb	r3, [r4, #0]
 8006d76:	f000 bd3a 	b.w	80077ee <loadMenuTexts+0x147e>
 8006d7a:	bf00      	nop
 8006d7c:	20001dd8 	.word	0x20001dd8
 8006d80:	20000cb8 	.word	0x20000cb8
 8006d84:	20001dec 	.word	0x20001dec
 8006d88:	20000d1c 	.word	0x20000d1c
 8006d8c:	20001e00 	.word	0x20001e00
 8006d90:	20000d30 	.word	0x20000d30
 8006d94:	20001e14 	.word	0x20001e14
 8006d98:	20000d6c 	.word	0x20000d6c
 8006d9c:	20001e28 	.word	0x20001e28
 8006da0:	20000d80 	.word	0x20000d80
 8006da4:	20001e3c 	.word	0x20001e3c
 8006da8:	20000dbc 	.word	0x20000dbc
 8006dac:	20001e50 	.word	0x20001e50
 8006db0:	20000dd0 	.word	0x20000dd0
 8006db4:	20001e64 	.word	0x20001e64
 8006db8:	20000e0c 	.word	0x20000e0c
 8006dbc:	20001e78 	.word	0x20001e78
 8006dc0:	20000e34 	.word	0x20000e34
 8006dc4:	20001e8c 	.word	0x20001e8c
 8006dc8:	20000e5c 	.word	0x20000e5c
 8006dcc:	20001ea0 	.word	0x20001ea0
 8006dd0:	20000e84 	.word	0x20000e84
 8006dd4:	20001eb4 	.word	0x20001eb4
 8006dd8:	20000eac 	.word	0x20000eac
 8006ddc:	20001ec8 	.word	0x20001ec8
 8006de0:	20000ed4 	.word	0x20000ed4
 8006de4:	20001edc 	.word	0x20001edc
 8006de8:	20000efc 	.word	0x20000efc
 8006dec:	20001ef0 	.word	0x20001ef0
 8006df0:	20000f24 	.word	0x20000f24
 8006df4:	20001f04 	.word	0x20001f04
 8006df8:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006dfc:	4ac6      	ldr	r2, [pc, #792]	@ (8007118 <loadMenuTexts+0xda8>)
 8006dfe:	4bc7      	ldr	r3, [pc, #796]	@ (800711c <loadMenuTexts+0xdac>)
 8006e00:	4614      	mov	r4, r2
 8006e02:	461d      	mov	r5, r3
 8006e04:	6828      	ldr	r0, [r5, #0]
 8006e06:	6869      	ldr	r1, [r5, #4]
 8006e08:	68aa      	ldr	r2, [r5, #8]
 8006e0a:	68eb      	ldr	r3, [r5, #12]
 8006e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e0e:	7c2b      	ldrb	r3, [r5, #16]
 8006e10:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006e12:	4ac3      	ldr	r2, [pc, #780]	@ (8007120 <loadMenuTexts+0xdb0>)
 8006e14:	4bc3      	ldr	r3, [pc, #780]	@ (8007124 <loadMenuTexts+0xdb4>)
 8006e16:	4614      	mov	r4, r2
 8006e18:	461d      	mov	r5, r3
 8006e1a:	6828      	ldr	r0, [r5, #0]
 8006e1c:	6869      	ldr	r1, [r5, #4]
 8006e1e:	68aa      	ldr	r2, [r5, #8]
 8006e20:	68eb      	ldr	r3, [r5, #12]
 8006e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e24:	7c2b      	ldrb	r3, [r5, #16]
 8006e26:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006e28:	4abf      	ldr	r2, [pc, #764]	@ (8007128 <loadMenuTexts+0xdb8>)
 8006e2a:	4bc0      	ldr	r3, [pc, #768]	@ (800712c <loadMenuTexts+0xdbc>)
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	461d      	mov	r5, r3
 8006e30:	6828      	ldr	r0, [r5, #0]
 8006e32:	6869      	ldr	r1, [r5, #4]
 8006e34:	68aa      	ldr	r2, [r5, #8]
 8006e36:	68eb      	ldr	r3, [r5, #12]
 8006e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e3a:	7c2b      	ldrb	r3, [r5, #16]
 8006e3c:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006e3e:	4abc      	ldr	r2, [pc, #752]	@ (8007130 <loadMenuTexts+0xdc0>)
 8006e40:	4bbc      	ldr	r3, [pc, #752]	@ (8007134 <loadMenuTexts+0xdc4>)
 8006e42:	4614      	mov	r4, r2
 8006e44:	461d      	mov	r5, r3
 8006e46:	6828      	ldr	r0, [r5, #0]
 8006e48:	6869      	ldr	r1, [r5, #4]
 8006e4a:	68aa      	ldr	r2, [r5, #8]
 8006e4c:	68eb      	ldr	r3, [r5, #12]
 8006e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e50:	7c2b      	ldrb	r3, [r5, #16]
 8006e52:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006e54:	4ab8      	ldr	r2, [pc, #736]	@ (8007138 <loadMenuTexts+0xdc8>)
 8006e56:	4bb9      	ldr	r3, [pc, #740]	@ (800713c <loadMenuTexts+0xdcc>)
 8006e58:	4614      	mov	r4, r2
 8006e5a:	461d      	mov	r5, r3
 8006e5c:	6828      	ldr	r0, [r5, #0]
 8006e5e:	6869      	ldr	r1, [r5, #4]
 8006e60:	68aa      	ldr	r2, [r5, #8]
 8006e62:	68eb      	ldr	r3, [r5, #12]
 8006e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e66:	7c2b      	ldrb	r3, [r5, #16]
 8006e68:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006e6a:	4ab5      	ldr	r2, [pc, #724]	@ (8007140 <loadMenuTexts+0xdd0>)
 8006e6c:	4bb5      	ldr	r3, [pc, #724]	@ (8007144 <loadMenuTexts+0xdd4>)
 8006e6e:	4614      	mov	r4, r2
 8006e70:	461d      	mov	r5, r3
 8006e72:	6828      	ldr	r0, [r5, #0]
 8006e74:	6869      	ldr	r1, [r5, #4]
 8006e76:	68aa      	ldr	r2, [r5, #8]
 8006e78:	68eb      	ldr	r3, [r5, #12]
 8006e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e7c:	7c2b      	ldrb	r3, [r5, #16]
 8006e7e:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006e80:	4ab1      	ldr	r2, [pc, #708]	@ (8007148 <loadMenuTexts+0xdd8>)
 8006e82:	4bb2      	ldr	r3, [pc, #712]	@ (800714c <loadMenuTexts+0xddc>)
 8006e84:	4614      	mov	r4, r2
 8006e86:	461d      	mov	r5, r3
 8006e88:	6828      	ldr	r0, [r5, #0]
 8006e8a:	6869      	ldr	r1, [r5, #4]
 8006e8c:	68aa      	ldr	r2, [r5, #8]
 8006e8e:	68eb      	ldr	r3, [r5, #12]
 8006e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e92:	7c2b      	ldrb	r3, [r5, #16]
 8006e94:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006e96:	4aae      	ldr	r2, [pc, #696]	@ (8007150 <loadMenuTexts+0xde0>)
 8006e98:	4bae      	ldr	r3, [pc, #696]	@ (8007154 <loadMenuTexts+0xde4>)
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	461d      	mov	r5, r3
 8006e9e:	6828      	ldr	r0, [r5, #0]
 8006ea0:	6869      	ldr	r1, [r5, #4]
 8006ea2:	68aa      	ldr	r2, [r5, #8]
 8006ea4:	68eb      	ldr	r3, [r5, #12]
 8006ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea8:	7c2b      	ldrb	r3, [r5, #16]
 8006eaa:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006eac:	4aaa      	ldr	r2, [pc, #680]	@ (8007158 <loadMenuTexts+0xde8>)
 8006eae:	4bab      	ldr	r3, [pc, #684]	@ (800715c <loadMenuTexts+0xdec>)
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	461d      	mov	r5, r3
 8006eb4:	6828      	ldr	r0, [r5, #0]
 8006eb6:	6869      	ldr	r1, [r5, #4]
 8006eb8:	68aa      	ldr	r2, [r5, #8]
 8006eba:	68eb      	ldr	r3, [r5, #12]
 8006ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ebe:	7c2b      	ldrb	r3, [r5, #16]
 8006ec0:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006ec2:	4aa7      	ldr	r2, [pc, #668]	@ (8007160 <loadMenuTexts+0xdf0>)
 8006ec4:	4ba7      	ldr	r3, [pc, #668]	@ (8007164 <loadMenuTexts+0xdf4>)
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	461d      	mov	r5, r3
 8006eca:	6828      	ldr	r0, [r5, #0]
 8006ecc:	6869      	ldr	r1, [r5, #4]
 8006ece:	68aa      	ldr	r2, [r5, #8]
 8006ed0:	68eb      	ldr	r3, [r5, #12]
 8006ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ed4:	7c2b      	ldrb	r3, [r5, #16]
 8006ed6:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006ed8:	4aa3      	ldr	r2, [pc, #652]	@ (8007168 <loadMenuTexts+0xdf8>)
 8006eda:	4ba4      	ldr	r3, [pc, #656]	@ (800716c <loadMenuTexts+0xdfc>)
 8006edc:	4614      	mov	r4, r2
 8006ede:	461d      	mov	r5, r3
 8006ee0:	6828      	ldr	r0, [r5, #0]
 8006ee2:	6869      	ldr	r1, [r5, #4]
 8006ee4:	68aa      	ldr	r2, [r5, #8]
 8006ee6:	68eb      	ldr	r3, [r5, #12]
 8006ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eea:	7c2b      	ldrb	r3, [r5, #16]
 8006eec:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006eee:	4aa0      	ldr	r2, [pc, #640]	@ (8007170 <loadMenuTexts+0xe00>)
 8006ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8007174 <loadMenuTexts+0xe04>)
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	461d      	mov	r5, r3
 8006ef6:	6828      	ldr	r0, [r5, #0]
 8006ef8:	6869      	ldr	r1, [r5, #4]
 8006efa:	68aa      	ldr	r2, [r5, #8]
 8006efc:	68eb      	ldr	r3, [r5, #12]
 8006efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f00:	7c2b      	ldrb	r3, [r5, #16]
 8006f02:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006f04:	4a9c      	ldr	r2, [pc, #624]	@ (8007178 <loadMenuTexts+0xe08>)
 8006f06:	4b9d      	ldr	r3, [pc, #628]	@ (800717c <loadMenuTexts+0xe0c>)
 8006f08:	4614      	mov	r4, r2
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	6828      	ldr	r0, [r5, #0]
 8006f0e:	6869      	ldr	r1, [r5, #4]
 8006f10:	68aa      	ldr	r2, [r5, #8]
 8006f12:	68eb      	ldr	r3, [r5, #12]
 8006f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f16:	7c2b      	ldrb	r3, [r5, #16]
 8006f18:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006f1a:	4a99      	ldr	r2, [pc, #612]	@ (8007180 <loadMenuTexts+0xe10>)
 8006f1c:	4b99      	ldr	r3, [pc, #612]	@ (8007184 <loadMenuTexts+0xe14>)
 8006f1e:	4614      	mov	r4, r2
 8006f20:	461d      	mov	r5, r3
 8006f22:	6828      	ldr	r0, [r5, #0]
 8006f24:	6869      	ldr	r1, [r5, #4]
 8006f26:	68aa      	ldr	r2, [r5, #8]
 8006f28:	68eb      	ldr	r3, [r5, #12]
 8006f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f2c:	7c2b      	ldrb	r3, [r5, #16]
 8006f2e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006f30:	4a95      	ldr	r2, [pc, #596]	@ (8007188 <loadMenuTexts+0xe18>)
 8006f32:	4b96      	ldr	r3, [pc, #600]	@ (800718c <loadMenuTexts+0xe1c>)
 8006f34:	4614      	mov	r4, r2
 8006f36:	461d      	mov	r5, r3
 8006f38:	6828      	ldr	r0, [r5, #0]
 8006f3a:	6869      	ldr	r1, [r5, #4]
 8006f3c:	68aa      	ldr	r2, [r5, #8]
 8006f3e:	68eb      	ldr	r3, [r5, #12]
 8006f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f42:	7c2b      	ldrb	r3, [r5, #16]
 8006f44:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006f46:	4a92      	ldr	r2, [pc, #584]	@ (8007190 <loadMenuTexts+0xe20>)
 8006f48:	4b92      	ldr	r3, [pc, #584]	@ (8007194 <loadMenuTexts+0xe24>)
 8006f4a:	4614      	mov	r4, r2
 8006f4c:	461d      	mov	r5, r3
 8006f4e:	6828      	ldr	r0, [r5, #0]
 8006f50:	6869      	ldr	r1, [r5, #4]
 8006f52:	68aa      	ldr	r2, [r5, #8]
 8006f54:	68eb      	ldr	r3, [r5, #12]
 8006f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f58:	7c2b      	ldrb	r3, [r5, #16]
 8006f5a:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8007198 <loadMenuTexts+0xe28>)
 8006f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800719c <loadMenuTexts+0xe2c>)
 8006f60:	4614      	mov	r4, r2
 8006f62:	461d      	mov	r5, r3
 8006f64:	6828      	ldr	r0, [r5, #0]
 8006f66:	6869      	ldr	r1, [r5, #4]
 8006f68:	68aa      	ldr	r2, [r5, #8]
 8006f6a:	68eb      	ldr	r3, [r5, #12]
 8006f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f6e:	7c2b      	ldrb	r3, [r5, #16]
 8006f70:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006f72:	4a8b      	ldr	r2, [pc, #556]	@ (80071a0 <loadMenuTexts+0xe30>)
 8006f74:	4b8b      	ldr	r3, [pc, #556]	@ (80071a4 <loadMenuTexts+0xe34>)
 8006f76:	4614      	mov	r4, r2
 8006f78:	461d      	mov	r5, r3
 8006f7a:	6828      	ldr	r0, [r5, #0]
 8006f7c:	6869      	ldr	r1, [r5, #4]
 8006f7e:	68aa      	ldr	r2, [r5, #8]
 8006f80:	68eb      	ldr	r3, [r5, #12]
 8006f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f84:	7c2b      	ldrb	r3, [r5, #16]
 8006f86:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006f88:	4a87      	ldr	r2, [pc, #540]	@ (80071a8 <loadMenuTexts+0xe38>)
 8006f8a:	4b88      	ldr	r3, [pc, #544]	@ (80071ac <loadMenuTexts+0xe3c>)
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	461d      	mov	r5, r3
 8006f90:	6828      	ldr	r0, [r5, #0]
 8006f92:	6869      	ldr	r1, [r5, #4]
 8006f94:	68aa      	ldr	r2, [r5, #8]
 8006f96:	68eb      	ldr	r3, [r5, #12]
 8006f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9a:	7c2b      	ldrb	r3, [r5, #16]
 8006f9c:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006f9e:	4a84      	ldr	r2, [pc, #528]	@ (80071b0 <loadMenuTexts+0xe40>)
 8006fa0:	4b84      	ldr	r3, [pc, #528]	@ (80071b4 <loadMenuTexts+0xe44>)
 8006fa2:	4614      	mov	r4, r2
 8006fa4:	461d      	mov	r5, r3
 8006fa6:	6828      	ldr	r0, [r5, #0]
 8006fa8:	6869      	ldr	r1, [r5, #4]
 8006faa:	68aa      	ldr	r2, [r5, #8]
 8006fac:	68eb      	ldr	r3, [r5, #12]
 8006fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb0:	7c2b      	ldrb	r3, [r5, #16]
 8006fb2:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006fb4:	4a80      	ldr	r2, [pc, #512]	@ (80071b8 <loadMenuTexts+0xe48>)
 8006fb6:	4b81      	ldr	r3, [pc, #516]	@ (80071bc <loadMenuTexts+0xe4c>)
 8006fb8:	4614      	mov	r4, r2
 8006fba:	461d      	mov	r5, r3
 8006fbc:	6828      	ldr	r0, [r5, #0]
 8006fbe:	6869      	ldr	r1, [r5, #4]
 8006fc0:	68aa      	ldr	r2, [r5, #8]
 8006fc2:	68eb      	ldr	r3, [r5, #12]
 8006fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc6:	7c2b      	ldrb	r3, [r5, #16]
 8006fc8:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006fca:	4a7d      	ldr	r2, [pc, #500]	@ (80071c0 <loadMenuTexts+0xe50>)
 8006fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80071c4 <loadMenuTexts+0xe54>)
 8006fce:	4614      	mov	r4, r2
 8006fd0:	461d      	mov	r5, r3
 8006fd2:	6828      	ldr	r0, [r5, #0]
 8006fd4:	6869      	ldr	r1, [r5, #4]
 8006fd6:	68aa      	ldr	r2, [r5, #8]
 8006fd8:	68eb      	ldr	r3, [r5, #12]
 8006fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fdc:	7c2b      	ldrb	r3, [r5, #16]
 8006fde:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006fe0:	4a79      	ldr	r2, [pc, #484]	@ (80071c8 <loadMenuTexts+0xe58>)
 8006fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80071cc <loadMenuTexts+0xe5c>)
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	6828      	ldr	r0, [r5, #0]
 8006fea:	6869      	ldr	r1, [r5, #4]
 8006fec:	68aa      	ldr	r2, [r5, #8]
 8006fee:	68eb      	ldr	r3, [r5, #12]
 8006ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff2:	7c2b      	ldrb	r3, [r5, #16]
 8006ff4:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006ff6:	4a76      	ldr	r2, [pc, #472]	@ (80071d0 <loadMenuTexts+0xe60>)
 8006ff8:	4b76      	ldr	r3, [pc, #472]	@ (80071d4 <loadMenuTexts+0xe64>)
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	6828      	ldr	r0, [r5, #0]
 8007000:	6869      	ldr	r1, [r5, #4]
 8007002:	68aa      	ldr	r2, [r5, #8]
 8007004:	68eb      	ldr	r3, [r5, #12]
 8007006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007008:	7c2b      	ldrb	r3, [r5, #16]
 800700a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 800700c:	4a72      	ldr	r2, [pc, #456]	@ (80071d8 <loadMenuTexts+0xe68>)
 800700e:	4b73      	ldr	r3, [pc, #460]	@ (80071dc <loadMenuTexts+0xe6c>)
 8007010:	4614      	mov	r4, r2
 8007012:	461d      	mov	r5, r3
 8007014:	6828      	ldr	r0, [r5, #0]
 8007016:	6869      	ldr	r1, [r5, #4]
 8007018:	68aa      	ldr	r2, [r5, #8]
 800701a:	68eb      	ldr	r3, [r5, #12]
 800701c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800701e:	7c2b      	ldrb	r3, [r5, #16]
 8007020:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8007022:	4a6f      	ldr	r2, [pc, #444]	@ (80071e0 <loadMenuTexts+0xe70>)
 8007024:	4b6f      	ldr	r3, [pc, #444]	@ (80071e4 <loadMenuTexts+0xe74>)
 8007026:	4614      	mov	r4, r2
 8007028:	461d      	mov	r5, r3
 800702a:	6828      	ldr	r0, [r5, #0]
 800702c:	6869      	ldr	r1, [r5, #4]
 800702e:	68aa      	ldr	r2, [r5, #8]
 8007030:	68eb      	ldr	r3, [r5, #12]
 8007032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007034:	7c2b      	ldrb	r3, [r5, #16]
 8007036:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8007038:	4a6b      	ldr	r2, [pc, #428]	@ (80071e8 <loadMenuTexts+0xe78>)
 800703a:	4b6c      	ldr	r3, [pc, #432]	@ (80071ec <loadMenuTexts+0xe7c>)
 800703c:	4614      	mov	r4, r2
 800703e:	461d      	mov	r5, r3
 8007040:	6828      	ldr	r0, [r5, #0]
 8007042:	6869      	ldr	r1, [r5, #4]
 8007044:	68aa      	ldr	r2, [r5, #8]
 8007046:	68eb      	ldr	r3, [r5, #12]
 8007048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800704a:	7c2b      	ldrb	r3, [r5, #16]
 800704c:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 800704e:	4a68      	ldr	r2, [pc, #416]	@ (80071f0 <loadMenuTexts+0xe80>)
 8007050:	4b68      	ldr	r3, [pc, #416]	@ (80071f4 <loadMenuTexts+0xe84>)
 8007052:	4614      	mov	r4, r2
 8007054:	461d      	mov	r5, r3
 8007056:	6828      	ldr	r0, [r5, #0]
 8007058:	6869      	ldr	r1, [r5, #4]
 800705a:	68aa      	ldr	r2, [r5, #8]
 800705c:	68eb      	ldr	r3, [r5, #12]
 800705e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007060:	7c2b      	ldrb	r3, [r5, #16]
 8007062:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8007064:	4a64      	ldr	r2, [pc, #400]	@ (80071f8 <loadMenuTexts+0xe88>)
 8007066:	4b65      	ldr	r3, [pc, #404]	@ (80071fc <loadMenuTexts+0xe8c>)
 8007068:	4614      	mov	r4, r2
 800706a:	461d      	mov	r5, r3
 800706c:	6828      	ldr	r0, [r5, #0]
 800706e:	6869      	ldr	r1, [r5, #4]
 8007070:	68aa      	ldr	r2, [r5, #8]
 8007072:	68eb      	ldr	r3, [r5, #12]
 8007074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007076:	7c2b      	ldrb	r3, [r5, #16]
 8007078:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 800707a:	4a61      	ldr	r2, [pc, #388]	@ (8007200 <loadMenuTexts+0xe90>)
 800707c:	4b61      	ldr	r3, [pc, #388]	@ (8007204 <loadMenuTexts+0xe94>)
 800707e:	4614      	mov	r4, r2
 8007080:	461d      	mov	r5, r3
 8007082:	6828      	ldr	r0, [r5, #0]
 8007084:	6869      	ldr	r1, [r5, #4]
 8007086:	68aa      	ldr	r2, [r5, #8]
 8007088:	68eb      	ldr	r3, [r5, #12]
 800708a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800708c:	7c2b      	ldrb	r3, [r5, #16]
 800708e:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8007090:	4a5d      	ldr	r2, [pc, #372]	@ (8007208 <loadMenuTexts+0xe98>)
 8007092:	4b5e      	ldr	r3, [pc, #376]	@ (800720c <loadMenuTexts+0xe9c>)
 8007094:	4614      	mov	r4, r2
 8007096:	461d      	mov	r5, r3
 8007098:	6828      	ldr	r0, [r5, #0]
 800709a:	6869      	ldr	r1, [r5, #4]
 800709c:	68aa      	ldr	r2, [r5, #8]
 800709e:	68eb      	ldr	r3, [r5, #12]
 80070a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a2:	7c2b      	ldrb	r3, [r5, #16]
 80070a4:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80070a6:	4a5a      	ldr	r2, [pc, #360]	@ (8007210 <loadMenuTexts+0xea0>)
 80070a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007214 <loadMenuTexts+0xea4>)
 80070aa:	4614      	mov	r4, r2
 80070ac:	461d      	mov	r5, r3
 80070ae:	6828      	ldr	r0, [r5, #0]
 80070b0:	6869      	ldr	r1, [r5, #4]
 80070b2:	68aa      	ldr	r2, [r5, #8]
 80070b4:	68eb      	ldr	r3, [r5, #12]
 80070b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b8:	7c2b      	ldrb	r3, [r5, #16]
 80070ba:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80070bc:	4a56      	ldr	r2, [pc, #344]	@ (8007218 <loadMenuTexts+0xea8>)
 80070be:	4b57      	ldr	r3, [pc, #348]	@ (800721c <loadMenuTexts+0xeac>)
 80070c0:	4614      	mov	r4, r2
 80070c2:	461d      	mov	r5, r3
 80070c4:	6828      	ldr	r0, [r5, #0]
 80070c6:	6869      	ldr	r1, [r5, #4]
 80070c8:	68aa      	ldr	r2, [r5, #8]
 80070ca:	68eb      	ldr	r3, [r5, #12]
 80070cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ce:	7c2b      	ldrb	r3, [r5, #16]
 80070d0:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80070d2:	4a53      	ldr	r2, [pc, #332]	@ (8007220 <loadMenuTexts+0xeb0>)
 80070d4:	4b53      	ldr	r3, [pc, #332]	@ (8007224 <loadMenuTexts+0xeb4>)
 80070d6:	4614      	mov	r4, r2
 80070d8:	461d      	mov	r5, r3
 80070da:	6828      	ldr	r0, [r5, #0]
 80070dc:	6869      	ldr	r1, [r5, #4]
 80070de:	68aa      	ldr	r2, [r5, #8]
 80070e0:	68eb      	ldr	r3, [r5, #12]
 80070e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e4:	7c2b      	ldrb	r3, [r5, #16]
 80070e6:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 80070e8:	4a4f      	ldr	r2, [pc, #316]	@ (8007228 <loadMenuTexts+0xeb8>)
 80070ea:	4b50      	ldr	r3, [pc, #320]	@ (800722c <loadMenuTexts+0xebc>)
 80070ec:	4614      	mov	r4, r2
 80070ee:	461d      	mov	r5, r3
 80070f0:	6828      	ldr	r0, [r5, #0]
 80070f2:	6869      	ldr	r1, [r5, #4]
 80070f4:	68aa      	ldr	r2, [r5, #8]
 80070f6:	68eb      	ldr	r3, [r5, #12]
 80070f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070fa:	7c2b      	ldrb	r3, [r5, #16]
 80070fc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 80070fe:	4a4c      	ldr	r2, [pc, #304]	@ (8007230 <loadMenuTexts+0xec0>)
 8007100:	4b4c      	ldr	r3, [pc, #304]	@ (8007234 <loadMenuTexts+0xec4>)
 8007102:	4614      	mov	r4, r2
 8007104:	461d      	mov	r5, r3
 8007106:	6828      	ldr	r0, [r5, #0]
 8007108:	6869      	ldr	r1, [r5, #4]
 800710a:	68aa      	ldr	r2, [r5, #8]
 800710c:	68eb      	ldr	r3, [r5, #12]
 800710e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007110:	7c2b      	ldrb	r3, [r5, #16]
 8007112:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8007114:	4a48      	ldr	r2, [pc, #288]	@ (8007238 <loadMenuTexts+0xec8>)
 8007116:	e091      	b.n	800723c <loadMenuTexts+0xecc>
 8007118:	20001824 	.word	0x20001824
 800711c:	20000704 	.word	0x20000704
 8007120:	20001838 	.word	0x20001838
 8007124:	20000718 	.word	0x20000718
 8007128:	2000184c 	.word	0x2000184c
 800712c:	2000072c 	.word	0x2000072c
 8007130:	20001860 	.word	0x20001860
 8007134:	20000740 	.word	0x20000740
 8007138:	20001874 	.word	0x20001874
 800713c:	20000754 	.word	0x20000754
 8007140:	20001888 	.word	0x20001888
 8007144:	20000768 	.word	0x20000768
 8007148:	2000189c 	.word	0x2000189c
 800714c:	2000077c 	.word	0x2000077c
 8007150:	200018b0 	.word	0x200018b0
 8007154:	20000790 	.word	0x20000790
 8007158:	200018c4 	.word	0x200018c4
 800715c:	200007a4 	.word	0x200007a4
 8007160:	200018d8 	.word	0x200018d8
 8007164:	200007b8 	.word	0x200007b8
 8007168:	200018ec 	.word	0x200018ec
 800716c:	200007cc 	.word	0x200007cc
 8007170:	20001900 	.word	0x20001900
 8007174:	200007e0 	.word	0x200007e0
 8007178:	20001914 	.word	0x20001914
 800717c:	200007f4 	.word	0x200007f4
 8007180:	20001928 	.word	0x20001928
 8007184:	20000808 	.word	0x20000808
 8007188:	2000193c 	.word	0x2000193c
 800718c:	2000081c 	.word	0x2000081c
 8007190:	20001950 	.word	0x20001950
 8007194:	20000830 	.word	0x20000830
 8007198:	20001964 	.word	0x20001964
 800719c:	20000844 	.word	0x20000844
 80071a0:	20001978 	.word	0x20001978
 80071a4:	20000858 	.word	0x20000858
 80071a8:	2000198c 	.word	0x2000198c
 80071ac:	2000086c 	.word	0x2000086c
 80071b0:	200019a0 	.word	0x200019a0
 80071b4:	20000880 	.word	0x20000880
 80071b8:	200019b4 	.word	0x200019b4
 80071bc:	20000894 	.word	0x20000894
 80071c0:	200019c8 	.word	0x200019c8
 80071c4:	200008a8 	.word	0x200008a8
 80071c8:	200019dc 	.word	0x200019dc
 80071cc:	200008bc 	.word	0x200008bc
 80071d0:	200019f0 	.word	0x200019f0
 80071d4:	200008d0 	.word	0x200008d0
 80071d8:	20001a04 	.word	0x20001a04
 80071dc:	200008e4 	.word	0x200008e4
 80071e0:	20001a18 	.word	0x20001a18
 80071e4:	200008f8 	.word	0x200008f8
 80071e8:	20001a2c 	.word	0x20001a2c
 80071ec:	2000090c 	.word	0x2000090c
 80071f0:	20001a40 	.word	0x20001a40
 80071f4:	20000920 	.word	0x20000920
 80071f8:	20001a54 	.word	0x20001a54
 80071fc:	20000934 	.word	0x20000934
 8007200:	20001a68 	.word	0x20001a68
 8007204:	20000948 	.word	0x20000948
 8007208:	20001a7c 	.word	0x20001a7c
 800720c:	2000095c 	.word	0x2000095c
 8007210:	20001a90 	.word	0x20001a90
 8007214:	20000970 	.word	0x20000970
 8007218:	20001aa4 	.word	0x20001aa4
 800721c:	20000984 	.word	0x20000984
 8007220:	20001ab8 	.word	0x20001ab8
 8007224:	20000998 	.word	0x20000998
 8007228:	20001acc 	.word	0x20001acc
 800722c:	200009ac 	.word	0x200009ac
 8007230:	20001ae0 	.word	0x20001ae0
 8007234:	200009c0 	.word	0x200009c0
 8007238:	20001af4 	.word	0x20001af4
 800723c:	4bc7      	ldr	r3, [pc, #796]	@ (800755c <loadMenuTexts+0x11ec>)
 800723e:	4614      	mov	r4, r2
 8007240:	461d      	mov	r5, r3
 8007242:	6828      	ldr	r0, [r5, #0]
 8007244:	6869      	ldr	r1, [r5, #4]
 8007246:	68aa      	ldr	r2, [r5, #8]
 8007248:	68eb      	ldr	r3, [r5, #12]
 800724a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800724c:	7c2b      	ldrb	r3, [r5, #16]
 800724e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8007250:	4ac3      	ldr	r2, [pc, #780]	@ (8007560 <loadMenuTexts+0x11f0>)
 8007252:	4bc4      	ldr	r3, [pc, #784]	@ (8007564 <loadMenuTexts+0x11f4>)
 8007254:	4614      	mov	r4, r2
 8007256:	461d      	mov	r5, r3
 8007258:	6828      	ldr	r0, [r5, #0]
 800725a:	6869      	ldr	r1, [r5, #4]
 800725c:	68aa      	ldr	r2, [r5, #8]
 800725e:	68eb      	ldr	r3, [r5, #12]
 8007260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007262:	7c2b      	ldrb	r3, [r5, #16]
 8007264:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007266:	4ac0      	ldr	r2, [pc, #768]	@ (8007568 <loadMenuTexts+0x11f8>)
 8007268:	4bc0      	ldr	r3, [pc, #768]	@ (800756c <loadMenuTexts+0x11fc>)
 800726a:	4614      	mov	r4, r2
 800726c:	461d      	mov	r5, r3
 800726e:	6828      	ldr	r0, [r5, #0]
 8007270:	6869      	ldr	r1, [r5, #4]
 8007272:	68aa      	ldr	r2, [r5, #8]
 8007274:	68eb      	ldr	r3, [r5, #12]
 8007276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007278:	7c2b      	ldrb	r3, [r5, #16]
 800727a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 800727c:	4abc      	ldr	r2, [pc, #752]	@ (8007570 <loadMenuTexts+0x1200>)
 800727e:	4bbd      	ldr	r3, [pc, #756]	@ (8007574 <loadMenuTexts+0x1204>)
 8007280:	4614      	mov	r4, r2
 8007282:	461d      	mov	r5, r3
 8007284:	6828      	ldr	r0, [r5, #0]
 8007286:	6869      	ldr	r1, [r5, #4]
 8007288:	68aa      	ldr	r2, [r5, #8]
 800728a:	68eb      	ldr	r3, [r5, #12]
 800728c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800728e:	7c2b      	ldrb	r3, [r5, #16]
 8007290:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8007292:	4ab9      	ldr	r2, [pc, #740]	@ (8007578 <loadMenuTexts+0x1208>)
 8007294:	4bb9      	ldr	r3, [pc, #740]	@ (800757c <loadMenuTexts+0x120c>)
 8007296:	4614      	mov	r4, r2
 8007298:	461d      	mov	r5, r3
 800729a:	6828      	ldr	r0, [r5, #0]
 800729c:	6869      	ldr	r1, [r5, #4]
 800729e:	68aa      	ldr	r2, [r5, #8]
 80072a0:	68eb      	ldr	r3, [r5, #12]
 80072a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a4:	7c2b      	ldrb	r3, [r5, #16]
 80072a6:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80072a8:	4ab5      	ldr	r2, [pc, #724]	@ (8007580 <loadMenuTexts+0x1210>)
 80072aa:	4bb6      	ldr	r3, [pc, #728]	@ (8007584 <loadMenuTexts+0x1214>)
 80072ac:	4614      	mov	r4, r2
 80072ae:	461d      	mov	r5, r3
 80072b0:	6828      	ldr	r0, [r5, #0]
 80072b2:	6869      	ldr	r1, [r5, #4]
 80072b4:	68aa      	ldr	r2, [r5, #8]
 80072b6:	68eb      	ldr	r3, [r5, #12]
 80072b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ba:	7c2b      	ldrb	r3, [r5, #16]
 80072bc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80072be:	4ab2      	ldr	r2, [pc, #712]	@ (8007588 <loadMenuTexts+0x1218>)
 80072c0:	4bb2      	ldr	r3, [pc, #712]	@ (800758c <loadMenuTexts+0x121c>)
 80072c2:	4614      	mov	r4, r2
 80072c4:	461d      	mov	r5, r3
 80072c6:	6828      	ldr	r0, [r5, #0]
 80072c8:	6869      	ldr	r1, [r5, #4]
 80072ca:	68aa      	ldr	r2, [r5, #8]
 80072cc:	68eb      	ldr	r3, [r5, #12]
 80072ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d0:	7c2b      	ldrb	r3, [r5, #16]
 80072d2:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80072d4:	4aae      	ldr	r2, [pc, #696]	@ (8007590 <loadMenuTexts+0x1220>)
 80072d6:	4baf      	ldr	r3, [pc, #700]	@ (8007594 <loadMenuTexts+0x1224>)
 80072d8:	4614      	mov	r4, r2
 80072da:	461d      	mov	r5, r3
 80072dc:	6828      	ldr	r0, [r5, #0]
 80072de:	6869      	ldr	r1, [r5, #4]
 80072e0:	68aa      	ldr	r2, [r5, #8]
 80072e2:	68eb      	ldr	r3, [r5, #12]
 80072e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072e6:	7c2b      	ldrb	r3, [r5, #16]
 80072e8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80072ea:	4aab      	ldr	r2, [pc, #684]	@ (8007598 <loadMenuTexts+0x1228>)
 80072ec:	4bab      	ldr	r3, [pc, #684]	@ (800759c <loadMenuTexts+0x122c>)
 80072ee:	4614      	mov	r4, r2
 80072f0:	461d      	mov	r5, r3
 80072f2:	6828      	ldr	r0, [r5, #0]
 80072f4:	6869      	ldr	r1, [r5, #4]
 80072f6:	68aa      	ldr	r2, [r5, #8]
 80072f8:	68eb      	ldr	r3, [r5, #12]
 80072fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072fc:	7c2b      	ldrb	r3, [r5, #16]
 80072fe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8007300:	4aa7      	ldr	r2, [pc, #668]	@ (80075a0 <loadMenuTexts+0x1230>)
 8007302:	4ba8      	ldr	r3, [pc, #672]	@ (80075a4 <loadMenuTexts+0x1234>)
 8007304:	4614      	mov	r4, r2
 8007306:	461d      	mov	r5, r3
 8007308:	6828      	ldr	r0, [r5, #0]
 800730a:	6869      	ldr	r1, [r5, #4]
 800730c:	68aa      	ldr	r2, [r5, #8]
 800730e:	68eb      	ldr	r3, [r5, #12]
 8007310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007312:	7c2b      	ldrb	r3, [r5, #16]
 8007314:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8007316:	4aa4      	ldr	r2, [pc, #656]	@ (80075a8 <loadMenuTexts+0x1238>)
 8007318:	4ba4      	ldr	r3, [pc, #656]	@ (80075ac <loadMenuTexts+0x123c>)
 800731a:	4614      	mov	r4, r2
 800731c:	461d      	mov	r5, r3
 800731e:	6828      	ldr	r0, [r5, #0]
 8007320:	6869      	ldr	r1, [r5, #4]
 8007322:	68aa      	ldr	r2, [r5, #8]
 8007324:	68eb      	ldr	r3, [r5, #12]
 8007326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007328:	7c2b      	ldrb	r3, [r5, #16]
 800732a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 800732c:	4aa0      	ldr	r2, [pc, #640]	@ (80075b0 <loadMenuTexts+0x1240>)
 800732e:	4ba1      	ldr	r3, [pc, #644]	@ (80075b4 <loadMenuTexts+0x1244>)
 8007330:	4614      	mov	r4, r2
 8007332:	461d      	mov	r5, r3
 8007334:	6828      	ldr	r0, [r5, #0]
 8007336:	6869      	ldr	r1, [r5, #4]
 8007338:	68aa      	ldr	r2, [r5, #8]
 800733a:	68eb      	ldr	r3, [r5, #12]
 800733c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800733e:	7c2b      	ldrb	r3, [r5, #16]
 8007340:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8007342:	4a9d      	ldr	r2, [pc, #628]	@ (80075b8 <loadMenuTexts+0x1248>)
 8007344:	4b9d      	ldr	r3, [pc, #628]	@ (80075bc <loadMenuTexts+0x124c>)
 8007346:	4614      	mov	r4, r2
 8007348:	461d      	mov	r5, r3
 800734a:	6828      	ldr	r0, [r5, #0]
 800734c:	6869      	ldr	r1, [r5, #4]
 800734e:	68aa      	ldr	r2, [r5, #8]
 8007350:	68eb      	ldr	r3, [r5, #12]
 8007352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007354:	7c2b      	ldrb	r3, [r5, #16]
 8007356:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007358:	4a99      	ldr	r2, [pc, #612]	@ (80075c0 <loadMenuTexts+0x1250>)
 800735a:	4b9a      	ldr	r3, [pc, #616]	@ (80075c4 <loadMenuTexts+0x1254>)
 800735c:	4614      	mov	r4, r2
 800735e:	461d      	mov	r5, r3
 8007360:	6828      	ldr	r0, [r5, #0]
 8007362:	6869      	ldr	r1, [r5, #4]
 8007364:	68aa      	ldr	r2, [r5, #8]
 8007366:	68eb      	ldr	r3, [r5, #12]
 8007368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800736a:	7c2b      	ldrb	r3, [r5, #16]
 800736c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800736e:	4a96      	ldr	r2, [pc, #600]	@ (80075c8 <loadMenuTexts+0x1258>)
 8007370:	4b96      	ldr	r3, [pc, #600]	@ (80075cc <loadMenuTexts+0x125c>)
 8007372:	4614      	mov	r4, r2
 8007374:	461d      	mov	r5, r3
 8007376:	6828      	ldr	r0, [r5, #0]
 8007378:	6869      	ldr	r1, [r5, #4]
 800737a:	68aa      	ldr	r2, [r5, #8]
 800737c:	68eb      	ldr	r3, [r5, #12]
 800737e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007380:	7c2b      	ldrb	r3, [r5, #16]
 8007382:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007384:	4a92      	ldr	r2, [pc, #584]	@ (80075d0 <loadMenuTexts+0x1260>)
 8007386:	4b93      	ldr	r3, [pc, #588]	@ (80075d4 <loadMenuTexts+0x1264>)
 8007388:	4614      	mov	r4, r2
 800738a:	461d      	mov	r5, r3
 800738c:	6828      	ldr	r0, [r5, #0]
 800738e:	6869      	ldr	r1, [r5, #4]
 8007390:	68aa      	ldr	r2, [r5, #8]
 8007392:	68eb      	ldr	r3, [r5, #12]
 8007394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007396:	7c2b      	ldrb	r3, [r5, #16]
 8007398:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 800739a:	4a8f      	ldr	r2, [pc, #572]	@ (80075d8 <loadMenuTexts+0x1268>)
 800739c:	4b8f      	ldr	r3, [pc, #572]	@ (80075dc <loadMenuTexts+0x126c>)
 800739e:	4614      	mov	r4, r2
 80073a0:	461d      	mov	r5, r3
 80073a2:	6828      	ldr	r0, [r5, #0]
 80073a4:	6869      	ldr	r1, [r5, #4]
 80073a6:	68aa      	ldr	r2, [r5, #8]
 80073a8:	68eb      	ldr	r3, [r5, #12]
 80073aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ac:	7c2b      	ldrb	r3, [r5, #16]
 80073ae:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 80073b0:	4a8b      	ldr	r2, [pc, #556]	@ (80075e0 <loadMenuTexts+0x1270>)
 80073b2:	4b8c      	ldr	r3, [pc, #560]	@ (80075e4 <loadMenuTexts+0x1274>)
 80073b4:	4614      	mov	r4, r2
 80073b6:	461d      	mov	r5, r3
 80073b8:	6828      	ldr	r0, [r5, #0]
 80073ba:	6869      	ldr	r1, [r5, #4]
 80073bc:	68aa      	ldr	r2, [r5, #8]
 80073be:	68eb      	ldr	r3, [r5, #12]
 80073c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c2:	7c2b      	ldrb	r3, [r5, #16]
 80073c4:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 80073c6:	4a88      	ldr	r2, [pc, #544]	@ (80075e8 <loadMenuTexts+0x1278>)
 80073c8:	4b88      	ldr	r3, [pc, #544]	@ (80075ec <loadMenuTexts+0x127c>)
 80073ca:	4614      	mov	r4, r2
 80073cc:	461d      	mov	r5, r3
 80073ce:	6828      	ldr	r0, [r5, #0]
 80073d0:	6869      	ldr	r1, [r5, #4]
 80073d2:	68aa      	ldr	r2, [r5, #8]
 80073d4:	68eb      	ldr	r3, [r5, #12]
 80073d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d8:	7c2b      	ldrb	r3, [r5, #16]
 80073da:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80073dc:	4a84      	ldr	r2, [pc, #528]	@ (80075f0 <loadMenuTexts+0x1280>)
 80073de:	4b85      	ldr	r3, [pc, #532]	@ (80075f4 <loadMenuTexts+0x1284>)
 80073e0:	4614      	mov	r4, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	6828      	ldr	r0, [r5, #0]
 80073e6:	6869      	ldr	r1, [r5, #4]
 80073e8:	68aa      	ldr	r2, [r5, #8]
 80073ea:	68eb      	ldr	r3, [r5, #12]
 80073ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ee:	7c2b      	ldrb	r3, [r5, #16]
 80073f0:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80073f2:	4a81      	ldr	r2, [pc, #516]	@ (80075f8 <loadMenuTexts+0x1288>)
 80073f4:	4b81      	ldr	r3, [pc, #516]	@ (80075fc <loadMenuTexts+0x128c>)
 80073f6:	4614      	mov	r4, r2
 80073f8:	461d      	mov	r5, r3
 80073fa:	6828      	ldr	r0, [r5, #0]
 80073fc:	6869      	ldr	r1, [r5, #4]
 80073fe:	68aa      	ldr	r2, [r5, #8]
 8007400:	68eb      	ldr	r3, [r5, #12]
 8007402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007404:	7c2b      	ldrb	r3, [r5, #16]
 8007406:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8007408:	4a7d      	ldr	r2, [pc, #500]	@ (8007600 <loadMenuTexts+0x1290>)
 800740a:	4b7e      	ldr	r3, [pc, #504]	@ (8007604 <loadMenuTexts+0x1294>)
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	6828      	ldr	r0, [r5, #0]
 8007412:	6869      	ldr	r1, [r5, #4]
 8007414:	68aa      	ldr	r2, [r5, #8]
 8007416:	68eb      	ldr	r3, [r5, #12]
 8007418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800741a:	7c2b      	ldrb	r3, [r5, #16]
 800741c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 800741e:	4a7a      	ldr	r2, [pc, #488]	@ (8007608 <loadMenuTexts+0x1298>)
 8007420:	4b7a      	ldr	r3, [pc, #488]	@ (800760c <loadMenuTexts+0x129c>)
 8007422:	4614      	mov	r4, r2
 8007424:	461d      	mov	r5, r3
 8007426:	6828      	ldr	r0, [r5, #0]
 8007428:	6869      	ldr	r1, [r5, #4]
 800742a:	68aa      	ldr	r2, [r5, #8]
 800742c:	68eb      	ldr	r3, [r5, #12]
 800742e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007430:	7c2b      	ldrb	r3, [r5, #16]
 8007432:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007434:	4a76      	ldr	r2, [pc, #472]	@ (8007610 <loadMenuTexts+0x12a0>)
 8007436:	4b77      	ldr	r3, [pc, #476]	@ (8007614 <loadMenuTexts+0x12a4>)
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	6828      	ldr	r0, [r5, #0]
 800743e:	6869      	ldr	r1, [r5, #4]
 8007440:	68aa      	ldr	r2, [r5, #8]
 8007442:	68eb      	ldr	r3, [r5, #12]
 8007444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007446:	7c2b      	ldrb	r3, [r5, #16]
 8007448:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 800744a:	4a73      	ldr	r2, [pc, #460]	@ (8007618 <loadMenuTexts+0x12a8>)
 800744c:	4b73      	ldr	r3, [pc, #460]	@ (800761c <loadMenuTexts+0x12ac>)
 800744e:	4614      	mov	r4, r2
 8007450:	461d      	mov	r5, r3
 8007452:	6828      	ldr	r0, [r5, #0]
 8007454:	6869      	ldr	r1, [r5, #4]
 8007456:	68aa      	ldr	r2, [r5, #8]
 8007458:	68eb      	ldr	r3, [r5, #12]
 800745a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800745c:	7c2b      	ldrb	r3, [r5, #16]
 800745e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007460:	4a6f      	ldr	r2, [pc, #444]	@ (8007620 <loadMenuTexts+0x12b0>)
 8007462:	4b70      	ldr	r3, [pc, #448]	@ (8007624 <loadMenuTexts+0x12b4>)
 8007464:	4614      	mov	r4, r2
 8007466:	461d      	mov	r5, r3
 8007468:	6828      	ldr	r0, [r5, #0]
 800746a:	6869      	ldr	r1, [r5, #4]
 800746c:	68aa      	ldr	r2, [r5, #8]
 800746e:	68eb      	ldr	r3, [r5, #12]
 8007470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007472:	7c2b      	ldrb	r3, [r5, #16]
 8007474:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007476:	4a6c      	ldr	r2, [pc, #432]	@ (8007628 <loadMenuTexts+0x12b8>)
 8007478:	4b6c      	ldr	r3, [pc, #432]	@ (800762c <loadMenuTexts+0x12bc>)
 800747a:	4614      	mov	r4, r2
 800747c:	461d      	mov	r5, r3
 800747e:	6828      	ldr	r0, [r5, #0]
 8007480:	6869      	ldr	r1, [r5, #4]
 8007482:	68aa      	ldr	r2, [r5, #8]
 8007484:	68eb      	ldr	r3, [r5, #12]
 8007486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007488:	7c2b      	ldrb	r3, [r5, #16]
 800748a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 800748c:	4a68      	ldr	r2, [pc, #416]	@ (8007630 <loadMenuTexts+0x12c0>)
 800748e:	4b69      	ldr	r3, [pc, #420]	@ (8007634 <loadMenuTexts+0x12c4>)
 8007490:	4614      	mov	r4, r2
 8007492:	461d      	mov	r5, r3
 8007494:	6828      	ldr	r0, [r5, #0]
 8007496:	6869      	ldr	r1, [r5, #4]
 8007498:	68aa      	ldr	r2, [r5, #8]
 800749a:	68eb      	ldr	r3, [r5, #12]
 800749c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749e:	7c2b      	ldrb	r3, [r5, #16]
 80074a0:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 80074a2:	4a65      	ldr	r2, [pc, #404]	@ (8007638 <loadMenuTexts+0x12c8>)
 80074a4:	4b65      	ldr	r3, [pc, #404]	@ (800763c <loadMenuTexts+0x12cc>)
 80074a6:	4614      	mov	r4, r2
 80074a8:	461d      	mov	r5, r3
 80074aa:	6828      	ldr	r0, [r5, #0]
 80074ac:	6869      	ldr	r1, [r5, #4]
 80074ae:	68aa      	ldr	r2, [r5, #8]
 80074b0:	68eb      	ldr	r3, [r5, #12]
 80074b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074b4:	7c2b      	ldrb	r3, [r5, #16]
 80074b6:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80074b8:	4a61      	ldr	r2, [pc, #388]	@ (8007640 <loadMenuTexts+0x12d0>)
 80074ba:	4b62      	ldr	r3, [pc, #392]	@ (8007644 <loadMenuTexts+0x12d4>)
 80074bc:	4614      	mov	r4, r2
 80074be:	461d      	mov	r5, r3
 80074c0:	6828      	ldr	r0, [r5, #0]
 80074c2:	6869      	ldr	r1, [r5, #4]
 80074c4:	68aa      	ldr	r2, [r5, #8]
 80074c6:	68eb      	ldr	r3, [r5, #12]
 80074c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ca:	7c2b      	ldrb	r3, [r5, #16]
 80074cc:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80074ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007648 <loadMenuTexts+0x12d8>)
 80074d0:	4b5e      	ldr	r3, [pc, #376]	@ (800764c <loadMenuTexts+0x12dc>)
 80074d2:	4614      	mov	r4, r2
 80074d4:	461d      	mov	r5, r3
 80074d6:	6828      	ldr	r0, [r5, #0]
 80074d8:	6869      	ldr	r1, [r5, #4]
 80074da:	68aa      	ldr	r2, [r5, #8]
 80074dc:	68eb      	ldr	r3, [r5, #12]
 80074de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074e0:	7c2b      	ldrb	r3, [r5, #16]
 80074e2:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80074e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007650 <loadMenuTexts+0x12e0>)
 80074e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007654 <loadMenuTexts+0x12e4>)
 80074e8:	4614      	mov	r4, r2
 80074ea:	461d      	mov	r5, r3
 80074ec:	6828      	ldr	r0, [r5, #0]
 80074ee:	6869      	ldr	r1, [r5, #4]
 80074f0:	68aa      	ldr	r2, [r5, #8]
 80074f2:	68eb      	ldr	r3, [r5, #12]
 80074f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f6:	7c2b      	ldrb	r3, [r5, #16]
 80074f8:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80074fa:	4a57      	ldr	r2, [pc, #348]	@ (8007658 <loadMenuTexts+0x12e8>)
 80074fc:	4b57      	ldr	r3, [pc, #348]	@ (800765c <loadMenuTexts+0x12ec>)
 80074fe:	4614      	mov	r4, r2
 8007500:	461d      	mov	r5, r3
 8007502:	6828      	ldr	r0, [r5, #0]
 8007504:	6869      	ldr	r1, [r5, #4]
 8007506:	68aa      	ldr	r2, [r5, #8]
 8007508:	68eb      	ldr	r3, [r5, #12]
 800750a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800750c:	7c2b      	ldrb	r3, [r5, #16]
 800750e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007510:	4a53      	ldr	r2, [pc, #332]	@ (8007660 <loadMenuTexts+0x12f0>)
 8007512:	4b54      	ldr	r3, [pc, #336]	@ (8007664 <loadMenuTexts+0x12f4>)
 8007514:	4614      	mov	r4, r2
 8007516:	461d      	mov	r5, r3
 8007518:	6828      	ldr	r0, [r5, #0]
 800751a:	6869      	ldr	r1, [r5, #4]
 800751c:	68aa      	ldr	r2, [r5, #8]
 800751e:	68eb      	ldr	r3, [r5, #12]
 8007520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007522:	7c2b      	ldrb	r3, [r5, #16]
 8007524:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8007526:	4a50      	ldr	r2, [pc, #320]	@ (8007668 <loadMenuTexts+0x12f8>)
 8007528:	4b50      	ldr	r3, [pc, #320]	@ (800766c <loadMenuTexts+0x12fc>)
 800752a:	4614      	mov	r4, r2
 800752c:	461d      	mov	r5, r3
 800752e:	6828      	ldr	r0, [r5, #0]
 8007530:	6869      	ldr	r1, [r5, #4]
 8007532:	68aa      	ldr	r2, [r5, #8]
 8007534:	68eb      	ldr	r3, [r5, #12]
 8007536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007538:	7c2b      	ldrb	r3, [r5, #16]
 800753a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 800753c:	4a4c      	ldr	r2, [pc, #304]	@ (8007670 <loadMenuTexts+0x1300>)
 800753e:	4b4d      	ldr	r3, [pc, #308]	@ (8007674 <loadMenuTexts+0x1304>)
 8007540:	4614      	mov	r4, r2
 8007542:	461d      	mov	r5, r3
 8007544:	6828      	ldr	r0, [r5, #0]
 8007546:	6869      	ldr	r1, [r5, #4]
 8007548:	68aa      	ldr	r2, [r5, #8]
 800754a:	68eb      	ldr	r3, [r5, #12]
 800754c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754e:	7c2b      	ldrb	r3, [r5, #16]
 8007550:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8007552:	4a49      	ldr	r2, [pc, #292]	@ (8007678 <loadMenuTexts+0x1308>)
 8007554:	4b49      	ldr	r3, [pc, #292]	@ (800767c <loadMenuTexts+0x130c>)
 8007556:	4614      	mov	r4, r2
 8007558:	461d      	mov	r5, r3
 800755a:	e091      	b.n	8007680 <loadMenuTexts+0x1310>
 800755c:	200009d4 	.word	0x200009d4
 8007560:	20001b08 	.word	0x20001b08
 8007564:	200009e8 	.word	0x200009e8
 8007568:	20001b1c 	.word	0x20001b1c
 800756c:	200009fc 	.word	0x200009fc
 8007570:	20001b30 	.word	0x20001b30
 8007574:	20000a10 	.word	0x20000a10
 8007578:	20001b44 	.word	0x20001b44
 800757c:	20000a24 	.word	0x20000a24
 8007580:	20001b58 	.word	0x20001b58
 8007584:	20000a38 	.word	0x20000a38
 8007588:	20001b6c 	.word	0x20001b6c
 800758c:	20000a4c 	.word	0x20000a4c
 8007590:	20001b80 	.word	0x20001b80
 8007594:	20000a60 	.word	0x20000a60
 8007598:	20001b94 	.word	0x20001b94
 800759c:	20000a74 	.word	0x20000a74
 80075a0:	20001ba8 	.word	0x20001ba8
 80075a4:	20000a88 	.word	0x20000a88
 80075a8:	20001bbc 	.word	0x20001bbc
 80075ac:	20000a9c 	.word	0x20000a9c
 80075b0:	20001bd0 	.word	0x20001bd0
 80075b4:	20000ab0 	.word	0x20000ab0
 80075b8:	20001be4 	.word	0x20001be4
 80075bc:	20000ac4 	.word	0x20000ac4
 80075c0:	20001bf8 	.word	0x20001bf8
 80075c4:	20000ad8 	.word	0x20000ad8
 80075c8:	20001c0c 	.word	0x20001c0c
 80075cc:	20000aec 	.word	0x20000aec
 80075d0:	20001c20 	.word	0x20001c20
 80075d4:	20000b00 	.word	0x20000b00
 80075d8:	20001c34 	.word	0x20001c34
 80075dc:	20000b14 	.word	0x20000b14
 80075e0:	20001c48 	.word	0x20001c48
 80075e4:	20000b28 	.word	0x20000b28
 80075e8:	20001c5c 	.word	0x20001c5c
 80075ec:	20000b3c 	.word	0x20000b3c
 80075f0:	20001c70 	.word	0x20001c70
 80075f4:	20000b50 	.word	0x20000b50
 80075f8:	20001c84 	.word	0x20001c84
 80075fc:	20000b64 	.word	0x20000b64
 8007600:	20001c98 	.word	0x20001c98
 8007604:	20000b78 	.word	0x20000b78
 8007608:	20001cac 	.word	0x20001cac
 800760c:	20000b8c 	.word	0x20000b8c
 8007610:	20001cc0 	.word	0x20001cc0
 8007614:	20000ba0 	.word	0x20000ba0
 8007618:	20001cd4 	.word	0x20001cd4
 800761c:	20000bb4 	.word	0x20000bb4
 8007620:	20001ce8 	.word	0x20001ce8
 8007624:	20000bc8 	.word	0x20000bc8
 8007628:	20001cfc 	.word	0x20001cfc
 800762c:	20000bdc 	.word	0x20000bdc
 8007630:	20001d10 	.word	0x20001d10
 8007634:	20000bf0 	.word	0x20000bf0
 8007638:	20001d24 	.word	0x20001d24
 800763c:	20000c04 	.word	0x20000c04
 8007640:	20001d38 	.word	0x20001d38
 8007644:	20000c18 	.word	0x20000c18
 8007648:	20001d4c 	.word	0x20001d4c
 800764c:	20000c2c 	.word	0x20000c2c
 8007650:	20001d60 	.word	0x20001d60
 8007654:	20000c40 	.word	0x20000c40
 8007658:	20001d74 	.word	0x20001d74
 800765c:	20000c54 	.word	0x20000c54
 8007660:	20001d88 	.word	0x20001d88
 8007664:	20000c68 	.word	0x20000c68
 8007668:	20001d9c 	.word	0x20001d9c
 800766c:	20000cf4 	.word	0x20000cf4
 8007670:	20001db0 	.word	0x20001db0
 8007674:	20000d08 	.word	0x20000d08
 8007678:	20001dc4 	.word	0x20001dc4
 800767c:	20000ccc 	.word	0x20000ccc
 8007680:	6828      	ldr	r0, [r5, #0]
 8007682:	6869      	ldr	r1, [r5, #4]
 8007684:	68aa      	ldr	r2, [r5, #8]
 8007686:	68eb      	ldr	r3, [r5, #12]
 8007688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768a:	7c2b      	ldrb	r3, [r5, #16]
 800768c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800768e:	4a5b      	ldr	r2, [pc, #364]	@ (80077fc <loadMenuTexts+0x148c>)
 8007690:	4b5b      	ldr	r3, [pc, #364]	@ (8007800 <loadMenuTexts+0x1490>)
 8007692:	4614      	mov	r4, r2
 8007694:	461d      	mov	r5, r3
 8007696:	6828      	ldr	r0, [r5, #0]
 8007698:	6869      	ldr	r1, [r5, #4]
 800769a:	68aa      	ldr	r2, [r5, #8]
 800769c:	68eb      	ldr	r3, [r5, #12]
 800769e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a0:	7c2b      	ldrb	r3, [r5, #16]
 80076a2:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80076a4:	4a57      	ldr	r2, [pc, #348]	@ (8007804 <loadMenuTexts+0x1494>)
 80076a6:	4b58      	ldr	r3, [pc, #352]	@ (8007808 <loadMenuTexts+0x1498>)
 80076a8:	4614      	mov	r4, r2
 80076aa:	461d      	mov	r5, r3
 80076ac:	6828      	ldr	r0, [r5, #0]
 80076ae:	6869      	ldr	r1, [r5, #4]
 80076b0:	68aa      	ldr	r2, [r5, #8]
 80076b2:	68eb      	ldr	r3, [r5, #12]
 80076b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b6:	7c2b      	ldrb	r3, [r5, #16]
 80076b8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80076ba:	4a54      	ldr	r2, [pc, #336]	@ (800780c <loadMenuTexts+0x149c>)
 80076bc:	4b54      	ldr	r3, [pc, #336]	@ (8007810 <loadMenuTexts+0x14a0>)
 80076be:	4614      	mov	r4, r2
 80076c0:	461d      	mov	r5, r3
 80076c2:	6828      	ldr	r0, [r5, #0]
 80076c4:	6869      	ldr	r1, [r5, #4]
 80076c6:	68aa      	ldr	r2, [r5, #8]
 80076c8:	68eb      	ldr	r3, [r5, #12]
 80076ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076cc:	7c2b      	ldrb	r3, [r5, #16]
 80076ce:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80076d0:	4a50      	ldr	r2, [pc, #320]	@ (8007814 <loadMenuTexts+0x14a4>)
 80076d2:	4b51      	ldr	r3, [pc, #324]	@ (8007818 <loadMenuTexts+0x14a8>)
 80076d4:	4614      	mov	r4, r2
 80076d6:	461d      	mov	r5, r3
 80076d8:	6828      	ldr	r0, [r5, #0]
 80076da:	6869      	ldr	r1, [r5, #4]
 80076dc:	68aa      	ldr	r2, [r5, #8]
 80076de:	68eb      	ldr	r3, [r5, #12]
 80076e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076e2:	7c2b      	ldrb	r3, [r5, #16]
 80076e4:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80076e6:	4a4d      	ldr	r2, [pc, #308]	@ (800781c <loadMenuTexts+0x14ac>)
 80076e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007820 <loadMenuTexts+0x14b0>)
 80076ea:	4614      	mov	r4, r2
 80076ec:	461d      	mov	r5, r3
 80076ee:	6828      	ldr	r0, [r5, #0]
 80076f0:	6869      	ldr	r1, [r5, #4]
 80076f2:	68aa      	ldr	r2, [r5, #8]
 80076f4:	68eb      	ldr	r3, [r5, #12]
 80076f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f8:	7c2b      	ldrb	r3, [r5, #16]
 80076fa:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80076fc:	4a49      	ldr	r2, [pc, #292]	@ (8007824 <loadMenuTexts+0x14b4>)
 80076fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007828 <loadMenuTexts+0x14b8>)
 8007700:	4614      	mov	r4, r2
 8007702:	461d      	mov	r5, r3
 8007704:	6828      	ldr	r0, [r5, #0]
 8007706:	6869      	ldr	r1, [r5, #4]
 8007708:	68aa      	ldr	r2, [r5, #8]
 800770a:	68eb      	ldr	r3, [r5, #12]
 800770c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800770e:	7c2b      	ldrb	r3, [r5, #16]
 8007710:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007712:	4a46      	ldr	r2, [pc, #280]	@ (800782c <loadMenuTexts+0x14bc>)
 8007714:	4b46      	ldr	r3, [pc, #280]	@ (8007830 <loadMenuTexts+0x14c0>)
 8007716:	4614      	mov	r4, r2
 8007718:	461d      	mov	r5, r3
 800771a:	6828      	ldr	r0, [r5, #0]
 800771c:	6869      	ldr	r1, [r5, #4]
 800771e:	68aa      	ldr	r2, [r5, #8]
 8007720:	68eb      	ldr	r3, [r5, #12]
 8007722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007724:	7c2b      	ldrb	r3, [r5, #16]
 8007726:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007728:	4a42      	ldr	r2, [pc, #264]	@ (8007834 <loadMenuTexts+0x14c4>)
 800772a:	4b43      	ldr	r3, [pc, #268]	@ (8007838 <loadMenuTexts+0x14c8>)
 800772c:	4614      	mov	r4, r2
 800772e:	461d      	mov	r5, r3
 8007730:	6828      	ldr	r0, [r5, #0]
 8007732:	6869      	ldr	r1, [r5, #4]
 8007734:	68aa      	ldr	r2, [r5, #8]
 8007736:	68eb      	ldr	r3, [r5, #12]
 8007738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800773a:	7c2b      	ldrb	r3, [r5, #16]
 800773c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800773e:	4a3f      	ldr	r2, [pc, #252]	@ (800783c <loadMenuTexts+0x14cc>)
 8007740:	4b3f      	ldr	r3, [pc, #252]	@ (8007840 <loadMenuTexts+0x14d0>)
 8007742:	4614      	mov	r4, r2
 8007744:	461d      	mov	r5, r3
 8007746:	6828      	ldr	r0, [r5, #0]
 8007748:	6869      	ldr	r1, [r5, #4]
 800774a:	68aa      	ldr	r2, [r5, #8]
 800774c:	68eb      	ldr	r3, [r5, #12]
 800774e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007750:	7c2b      	ldrb	r3, [r5, #16]
 8007752:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007754:	4a3b      	ldr	r2, [pc, #236]	@ (8007844 <loadMenuTexts+0x14d4>)
 8007756:	4b3c      	ldr	r3, [pc, #240]	@ (8007848 <loadMenuTexts+0x14d8>)
 8007758:	4614      	mov	r4, r2
 800775a:	461d      	mov	r5, r3
 800775c:	6828      	ldr	r0, [r5, #0]
 800775e:	6869      	ldr	r1, [r5, #4]
 8007760:	68aa      	ldr	r2, [r5, #8]
 8007762:	68eb      	ldr	r3, [r5, #12]
 8007764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007766:	7c2b      	ldrb	r3, [r5, #16]
 8007768:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 800776a:	4a38      	ldr	r2, [pc, #224]	@ (800784c <loadMenuTexts+0x14dc>)
 800776c:	4b38      	ldr	r3, [pc, #224]	@ (8007850 <loadMenuTexts+0x14e0>)
 800776e:	4614      	mov	r4, r2
 8007770:	461d      	mov	r5, r3
 8007772:	6828      	ldr	r0, [r5, #0]
 8007774:	6869      	ldr	r1, [r5, #4]
 8007776:	68aa      	ldr	r2, [r5, #8]
 8007778:	68eb      	ldr	r3, [r5, #12]
 800777a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777c:	7c2b      	ldrb	r3, [r5, #16]
 800777e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007780:	4a34      	ldr	r2, [pc, #208]	@ (8007854 <loadMenuTexts+0x14e4>)
 8007782:	4b35      	ldr	r3, [pc, #212]	@ (8007858 <loadMenuTexts+0x14e8>)
 8007784:	4614      	mov	r4, r2
 8007786:	461d      	mov	r5, r3
 8007788:	6828      	ldr	r0, [r5, #0]
 800778a:	6869      	ldr	r1, [r5, #4]
 800778c:	68aa      	ldr	r2, [r5, #8]
 800778e:	68eb      	ldr	r3, [r5, #12]
 8007790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007792:	7c2b      	ldrb	r3, [r5, #16]
 8007794:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007796:	4a31      	ldr	r2, [pc, #196]	@ (800785c <loadMenuTexts+0x14ec>)
 8007798:	4b31      	ldr	r3, [pc, #196]	@ (8007860 <loadMenuTexts+0x14f0>)
 800779a:	4614      	mov	r4, r2
 800779c:	461d      	mov	r5, r3
 800779e:	6828      	ldr	r0, [r5, #0]
 80077a0:	6869      	ldr	r1, [r5, #4]
 80077a2:	68aa      	ldr	r2, [r5, #8]
 80077a4:	68eb      	ldr	r3, [r5, #12]
 80077a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077a8:	7c2b      	ldrb	r3, [r5, #16]
 80077aa:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80077ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007864 <loadMenuTexts+0x14f4>)
 80077ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007868 <loadMenuTexts+0x14f8>)
 80077b0:	4614      	mov	r4, r2
 80077b2:	461d      	mov	r5, r3
 80077b4:	6828      	ldr	r0, [r5, #0]
 80077b6:	6869      	ldr	r1, [r5, #4]
 80077b8:	68aa      	ldr	r2, [r5, #8]
 80077ba:	68eb      	ldr	r3, [r5, #12]
 80077bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077be:	7c2b      	ldrb	r3, [r5, #16]
 80077c0:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80077c2:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <loadMenuTexts+0x14fc>)
 80077c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007870 <loadMenuTexts+0x1500>)
 80077c6:	4614      	mov	r4, r2
 80077c8:	461d      	mov	r5, r3
 80077ca:	6828      	ldr	r0, [r5, #0]
 80077cc:	6869      	ldr	r1, [r5, #4]
 80077ce:	68aa      	ldr	r2, [r5, #8]
 80077d0:	68eb      	ldr	r3, [r5, #12]
 80077d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077d4:	7c2b      	ldrb	r3, [r5, #16]
 80077d6:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80077d8:	4a26      	ldr	r2, [pc, #152]	@ (8007874 <loadMenuTexts+0x1504>)
 80077da:	4b27      	ldr	r3, [pc, #156]	@ (8007878 <loadMenuTexts+0x1508>)
 80077dc:	4614      	mov	r4, r2
 80077de:	461d      	mov	r5, r3
 80077e0:	6828      	ldr	r0, [r5, #0]
 80077e2:	6869      	ldr	r1, [r5, #4]
 80077e4:	68aa      	ldr	r2, [r5, #8]
 80077e6:	68eb      	ldr	r3, [r5, #12]
 80077e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ea:	7c2b      	ldrb	r3, [r5, #16]
 80077ec:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80077ee:	f000 f845 	bl	800787c <menuVariableFinisher>
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bdb0      	pop	{r4, r5, r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20001dd8 	.word	0x20001dd8
 8007800:	20000ce0 	.word	0x20000ce0
 8007804:	20001dec 	.word	0x20001dec
 8007808:	20000d44 	.word	0x20000d44
 800780c:	20001e00 	.word	0x20001e00
 8007810:	20000d58 	.word	0x20000d58
 8007814:	20001e14 	.word	0x20001e14
 8007818:	20000d94 	.word	0x20000d94
 800781c:	20001e28 	.word	0x20001e28
 8007820:	20000da8 	.word	0x20000da8
 8007824:	20001e3c 	.word	0x20001e3c
 8007828:	20000de4 	.word	0x20000de4
 800782c:	20001e50 	.word	0x20001e50
 8007830:	20000df8 	.word	0x20000df8
 8007834:	20001e64 	.word	0x20001e64
 8007838:	20000e20 	.word	0x20000e20
 800783c:	20001e78 	.word	0x20001e78
 8007840:	20000e48 	.word	0x20000e48
 8007844:	20001e8c 	.word	0x20001e8c
 8007848:	20000e70 	.word	0x20000e70
 800784c:	20001ea0 	.word	0x20001ea0
 8007850:	20000e98 	.word	0x20000e98
 8007854:	20001eb4 	.word	0x20001eb4
 8007858:	20000ec0 	.word	0x20000ec0
 800785c:	20001ec8 	.word	0x20001ec8
 8007860:	20000ee8 	.word	0x20000ee8
 8007864:	20001edc 	.word	0x20001edc
 8007868:	20000f10 	.word	0x20000f10
 800786c:	20001ef0 	.word	0x20001ef0
 8007870:	20000f38 	.word	0x20000f38
 8007874:	20001f04 	.word	0x20001f04
 8007878:	20000f60 	.word	0x20000f60

0800787c <menuVariableFinisher>:

void menuVariableFinisher(void) {
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007880:	4b99      	ldr	r3, [pc, #612]	@ (8007ae8 <menuVariableFinisher+0x26c>)
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007886:	4b99      	ldr	r3, [pc, #612]	@ (8007aec <menuVariableFinisher+0x270>)
 8007888:	2200      	movs	r2, #0
 800788a:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 800788c:	4b98      	ldr	r3, [pc, #608]	@ (8007af0 <menuVariableFinisher+0x274>)
 800788e:	2200      	movs	r2, #0
 8007890:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007892:	4b98      	ldr	r3, [pc, #608]	@ (8007af4 <menuVariableFinisher+0x278>)
 8007894:	2200      	movs	r2, #0
 8007896:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007898:	4b97      	ldr	r3, [pc, #604]	@ (8007af8 <menuVariableFinisher+0x27c>)
 800789a:	2200      	movs	r2, #0
 800789c:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800789e:	4b97      	ldr	r3, [pc, #604]	@ (8007afc <menuVariableFinisher+0x280>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80078a4:	4b96      	ldr	r3, [pc, #600]	@ (8007b00 <menuVariableFinisher+0x284>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80078aa:	4b96      	ldr	r3, [pc, #600]	@ (8007b04 <menuVariableFinisher+0x288>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80078b0:	4b95      	ldr	r3, [pc, #596]	@ (8007b08 <menuVariableFinisher+0x28c>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80078b6:	4b95      	ldr	r3, [pc, #596]	@ (8007b0c <menuVariableFinisher+0x290>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80078bc:	4b94      	ldr	r3, [pc, #592]	@ (8007b10 <menuVariableFinisher+0x294>)
 80078be:	2200      	movs	r2, #0
 80078c0:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80078c2:	4b94      	ldr	r3, [pc, #592]	@ (8007b14 <menuVariableFinisher+0x298>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80078c8:	4b93      	ldr	r3, [pc, #588]	@ (8007b18 <menuVariableFinisher+0x29c>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80078ce:	4b93      	ldr	r3, [pc, #588]	@ (8007b1c <menuVariableFinisher+0x2a0>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80078d4:	4b92      	ldr	r3, [pc, #584]	@ (8007b20 <menuVariableFinisher+0x2a4>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80078da:	4b92      	ldr	r3, [pc, #584]	@ (8007b24 <menuVariableFinisher+0x2a8>)
 80078dc:	2200      	movs	r2, #0
 80078de:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80078e0:	4b91      	ldr	r3, [pc, #580]	@ (8007b28 <menuVariableFinisher+0x2ac>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80078e6:	4b91      	ldr	r3, [pc, #580]	@ (8007b2c <menuVariableFinisher+0x2b0>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80078ec:	4b90      	ldr	r3, [pc, #576]	@ (8007b30 <menuVariableFinisher+0x2b4>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80078f2:	4b90      	ldr	r3, [pc, #576]	@ (8007b34 <menuVariableFinisher+0x2b8>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80078f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007b38 <menuVariableFinisher+0x2bc>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80078fe:	4b8f      	ldr	r3, [pc, #572]	@ (8007b3c <menuVariableFinisher+0x2c0>)
 8007900:	2200      	movs	r2, #0
 8007902:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007904:	4b8e      	ldr	r3, [pc, #568]	@ (8007b40 <menuVariableFinisher+0x2c4>)
 8007906:	2200      	movs	r2, #0
 8007908:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800790a:	4b8e      	ldr	r3, [pc, #568]	@ (8007b44 <menuVariableFinisher+0x2c8>)
 800790c:	2200      	movs	r2, #0
 800790e:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007910:	4b8d      	ldr	r3, [pc, #564]	@ (8007b48 <menuVariableFinisher+0x2cc>)
 8007912:	2200      	movs	r2, #0
 8007914:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007916:	4b8d      	ldr	r3, [pc, #564]	@ (8007b4c <menuVariableFinisher+0x2d0>)
 8007918:	2200      	movs	r2, #0
 800791a:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 800791c:	4b8c      	ldr	r3, [pc, #560]	@ (8007b50 <menuVariableFinisher+0x2d4>)
 800791e:	2200      	movs	r2, #0
 8007920:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007922:	4b8c      	ldr	r3, [pc, #560]	@ (8007b54 <menuVariableFinisher+0x2d8>)
 8007924:	2200      	movs	r2, #0
 8007926:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007928:	4b8b      	ldr	r3, [pc, #556]	@ (8007b58 <menuVariableFinisher+0x2dc>)
 800792a:	2200      	movs	r2, #0
 800792c:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 800792e:	4b8b      	ldr	r3, [pc, #556]	@ (8007b5c <menuVariableFinisher+0x2e0>)
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007934:	4b8a      	ldr	r3, [pc, #552]	@ (8007b60 <menuVariableFinisher+0x2e4>)
 8007936:	2200      	movs	r2, #0
 8007938:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800793a:	4b8a      	ldr	r3, [pc, #552]	@ (8007b64 <menuVariableFinisher+0x2e8>)
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007940:	4b89      	ldr	r3, [pc, #548]	@ (8007b68 <menuVariableFinisher+0x2ec>)
 8007942:	2200      	movs	r2, #0
 8007944:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007946:	4b89      	ldr	r3, [pc, #548]	@ (8007b6c <menuVariableFinisher+0x2f0>)
 8007948:	2200      	movs	r2, #0
 800794a:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 800794c:	4b88      	ldr	r3, [pc, #544]	@ (8007b70 <menuVariableFinisher+0x2f4>)
 800794e:	2200      	movs	r2, #0
 8007950:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007952:	4b88      	ldr	r3, [pc, #544]	@ (8007b74 <menuVariableFinisher+0x2f8>)
 8007954:	2200      	movs	r2, #0
 8007956:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007958:	4b87      	ldr	r3, [pc, #540]	@ (8007b78 <menuVariableFinisher+0x2fc>)
 800795a:	2200      	movs	r2, #0
 800795c:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800795e:	4b87      	ldr	r3, [pc, #540]	@ (8007b7c <menuVariableFinisher+0x300>)
 8007960:	2200      	movs	r2, #0
 8007962:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007964:	4b86      	ldr	r3, [pc, #536]	@ (8007b80 <menuVariableFinisher+0x304>)
 8007966:	2200      	movs	r2, #0
 8007968:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800796a:	4b86      	ldr	r3, [pc, #536]	@ (8007b84 <menuVariableFinisher+0x308>)
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007970:	4b85      	ldr	r3, [pc, #532]	@ (8007b88 <menuVariableFinisher+0x30c>)
 8007972:	2200      	movs	r2, #0
 8007974:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007976:	4b85      	ldr	r3, [pc, #532]	@ (8007b8c <menuVariableFinisher+0x310>)
 8007978:	2200      	movs	r2, #0
 800797a:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 800797c:	4b84      	ldr	r3, [pc, #528]	@ (8007b90 <menuVariableFinisher+0x314>)
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8007982:	4b84      	ldr	r3, [pc, #528]	@ (8007b94 <menuVariableFinisher+0x318>)
 8007984:	2200      	movs	r2, #0
 8007986:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007988:	4b83      	ldr	r3, [pc, #524]	@ (8007b98 <menuVariableFinisher+0x31c>)
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800798e:	4b83      	ldr	r3, [pc, #524]	@ (8007b9c <menuVariableFinisher+0x320>)
 8007990:	2200      	movs	r2, #0
 8007992:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007994:	4b82      	ldr	r3, [pc, #520]	@ (8007ba0 <menuVariableFinisher+0x324>)
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 800799a:	4b82      	ldr	r3, [pc, #520]	@ (8007ba4 <menuVariableFinisher+0x328>)
 800799c:	2200      	movs	r2, #0
 800799e:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80079a0:	4b81      	ldr	r3, [pc, #516]	@ (8007ba8 <menuVariableFinisher+0x32c>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80079a6:	4b81      	ldr	r3, [pc, #516]	@ (8007bac <menuVariableFinisher+0x330>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80079ac:	4b80      	ldr	r3, [pc, #512]	@ (8007bb0 <menuVariableFinisher+0x334>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80079b2:	4b80      	ldr	r3, [pc, #512]	@ (8007bb4 <menuVariableFinisher+0x338>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80079b8:	4b7f      	ldr	r3, [pc, #508]	@ (8007bb8 <menuVariableFinisher+0x33c>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80079be:	4b7f      	ldr	r3, [pc, #508]	@ (8007bbc <menuVariableFinisher+0x340>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80079c4:	4b7e      	ldr	r3, [pc, #504]	@ (8007bc0 <menuVariableFinisher+0x344>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80079ca:	4b7e      	ldr	r3, [pc, #504]	@ (8007bc4 <menuVariableFinisher+0x348>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80079d0:	4b7d      	ldr	r3, [pc, #500]	@ (8007bc8 <menuVariableFinisher+0x34c>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80079d6:	4b7d      	ldr	r3, [pc, #500]	@ (8007bcc <menuVariableFinisher+0x350>)
 80079d8:	2200      	movs	r2, #0
 80079da:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80079dc:	4b7c      	ldr	r3, [pc, #496]	@ (8007bd0 <menuVariableFinisher+0x354>)
 80079de:	2200      	movs	r2, #0
 80079e0:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80079e2:	4b7c      	ldr	r3, [pc, #496]	@ (8007bd4 <menuVariableFinisher+0x358>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80079e8:	4b7b      	ldr	r3, [pc, #492]	@ (8007bd8 <menuVariableFinisher+0x35c>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80079ee:	4b7b      	ldr	r3, [pc, #492]	@ (8007bdc <menuVariableFinisher+0x360>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80079f4:	4b7a      	ldr	r3, [pc, #488]	@ (8007be0 <menuVariableFinisher+0x364>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80079fa:	4b7a      	ldr	r3, [pc, #488]	@ (8007be4 <menuVariableFinisher+0x368>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007a00:	4b79      	ldr	r3, [pc, #484]	@ (8007be8 <menuVariableFinisher+0x36c>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007a06:	4b79      	ldr	r3, [pc, #484]	@ (8007bec <menuVariableFinisher+0x370>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007a0c:	4b78      	ldr	r3, [pc, #480]	@ (8007bf0 <menuVariableFinisher+0x374>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007a12:	4b78      	ldr	r3, [pc, #480]	@ (8007bf4 <menuVariableFinisher+0x378>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007a18:	4b77      	ldr	r3, [pc, #476]	@ (8007bf8 <menuVariableFinisher+0x37c>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007a1e:	4b77      	ldr	r3, [pc, #476]	@ (8007bfc <menuVariableFinisher+0x380>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007a24:	4b76      	ldr	r3, [pc, #472]	@ (8007c00 <menuVariableFinisher+0x384>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007a2a:	4b76      	ldr	r3, [pc, #472]	@ (8007c04 <menuVariableFinisher+0x388>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007a30:	4b75      	ldr	r3, [pc, #468]	@ (8007c08 <menuVariableFinisher+0x38c>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007a36:	4b75      	ldr	r3, [pc, #468]	@ (8007c0c <menuVariableFinisher+0x390>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007a3c:	4b74      	ldr	r3, [pc, #464]	@ (8007c10 <menuVariableFinisher+0x394>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8007a42:	4b74      	ldr	r3, [pc, #464]	@ (8007c14 <menuVariableFinisher+0x398>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007a48:	4b73      	ldr	r3, [pc, #460]	@ (8007c18 <menuVariableFinisher+0x39c>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007a4e:	4b73      	ldr	r3, [pc, #460]	@ (8007c1c <menuVariableFinisher+0x3a0>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007a54:	4b72      	ldr	r3, [pc, #456]	@ (8007c20 <menuVariableFinisher+0x3a4>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007a5a:	4b72      	ldr	r3, [pc, #456]	@ (8007c24 <menuVariableFinisher+0x3a8>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007a60:	4b71      	ldr	r3, [pc, #452]	@ (8007c28 <menuVariableFinisher+0x3ac>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007a66:	4b71      	ldr	r3, [pc, #452]	@ (8007c2c <menuVariableFinisher+0x3b0>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007a6c:	4b70      	ldr	r3, [pc, #448]	@ (8007c30 <menuVariableFinisher+0x3b4>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8007a72:	4b70      	ldr	r3, [pc, #448]	@ (8007c34 <menuVariableFinisher+0x3b8>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007a78:	4b6f      	ldr	r3, [pc, #444]	@ (8007c38 <menuVariableFinisher+0x3bc>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c3c <menuVariableFinisher+0x3c0>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007a84:	4b6e      	ldr	r3, [pc, #440]	@ (8007c40 <menuVariableFinisher+0x3c4>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8007c44 <menuVariableFinisher+0x3c8>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007a90:	4b6d      	ldr	r3, [pc, #436]	@ (8007c48 <menuVariableFinisher+0x3cc>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007a96:	4b6d      	ldr	r3, [pc, #436]	@ (8007c4c <menuVariableFinisher+0x3d0>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8007c50 <menuVariableFinisher+0x3d4>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8007c54 <menuVariableFinisher+0x3d8>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8007c58 <menuVariableFinisher+0x3dc>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007aae:	4b6b      	ldr	r3, [pc, #428]	@ (8007c5c <menuVariableFinisher+0x3e0>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8007c60 <menuVariableFinisher+0x3e4>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007aba:	4b6a      	ldr	r3, [pc, #424]	@ (8007c64 <menuVariableFinisher+0x3e8>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007ac0:	4b69      	ldr	r3, [pc, #420]	@ (8007c68 <menuVariableFinisher+0x3ec>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007ac6:	4b69      	ldr	r3, [pc, #420]	@ (8007c6c <menuVariableFinisher+0x3f0>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007acc:	4b68      	ldr	r3, [pc, #416]	@ (8007c70 <menuVariableFinisher+0x3f4>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8007ad2:	4b68      	ldr	r3, [pc, #416]	@ (8007c74 <menuVariableFinisher+0x3f8>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007ad8:	4b67      	ldr	r3, [pc, #412]	@ (8007c78 <menuVariableFinisher+0x3fc>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	741a      	strb	r2, [r3, #16]
}
 8007ade:	bf00      	nop
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	2000009c 	.word	0x2000009c
 8007aec:	200000b0 	.word	0x200000b0
 8007af0:	200000c4 	.word	0x200000c4
 8007af4:	200000d8 	.word	0x200000d8
 8007af8:	200000ec 	.word	0x200000ec
 8007afc:	20000100 	.word	0x20000100
 8007b00:	20000114 	.word	0x20000114
 8007b04:	20000128 	.word	0x20000128
 8007b08:	2000013c 	.word	0x2000013c
 8007b0c:	20000150 	.word	0x20000150
 8007b10:	20000164 	.word	0x20000164
 8007b14:	20000178 	.word	0x20000178
 8007b18:	20001824 	.word	0x20001824
 8007b1c:	20001838 	.word	0x20001838
 8007b20:	2000184c 	.word	0x2000184c
 8007b24:	20001860 	.word	0x20001860
 8007b28:	20001874 	.word	0x20001874
 8007b2c:	20001888 	.word	0x20001888
 8007b30:	2000189c 	.word	0x2000189c
 8007b34:	200018b0 	.word	0x200018b0
 8007b38:	200018c4 	.word	0x200018c4
 8007b3c:	200018d8 	.word	0x200018d8
 8007b40:	200018ec 	.word	0x200018ec
 8007b44:	20001900 	.word	0x20001900
 8007b48:	20001914 	.word	0x20001914
 8007b4c:	20001928 	.word	0x20001928
 8007b50:	2000193c 	.word	0x2000193c
 8007b54:	20001950 	.word	0x20001950
 8007b58:	20001964 	.word	0x20001964
 8007b5c:	20001978 	.word	0x20001978
 8007b60:	2000198c 	.word	0x2000198c
 8007b64:	200019a0 	.word	0x200019a0
 8007b68:	200019b4 	.word	0x200019b4
 8007b6c:	200019c8 	.word	0x200019c8
 8007b70:	200019dc 	.word	0x200019dc
 8007b74:	200019f0 	.word	0x200019f0
 8007b78:	20001a04 	.word	0x20001a04
 8007b7c:	20001a18 	.word	0x20001a18
 8007b80:	20001a2c 	.word	0x20001a2c
 8007b84:	20001a40 	.word	0x20001a40
 8007b88:	20001a54 	.word	0x20001a54
 8007b8c:	20001a68 	.word	0x20001a68
 8007b90:	20001a7c 	.word	0x20001a7c
 8007b94:	20001a90 	.word	0x20001a90
 8007b98:	20001aa4 	.word	0x20001aa4
 8007b9c:	20001ab8 	.word	0x20001ab8
 8007ba0:	20001acc 	.word	0x20001acc
 8007ba4:	20001ae0 	.word	0x20001ae0
 8007ba8:	20001af4 	.word	0x20001af4
 8007bac:	20001b08 	.word	0x20001b08
 8007bb0:	20001b1c 	.word	0x20001b1c
 8007bb4:	20001b30 	.word	0x20001b30
 8007bb8:	20001b44 	.word	0x20001b44
 8007bbc:	20001b58 	.word	0x20001b58
 8007bc0:	20001b6c 	.word	0x20001b6c
 8007bc4:	20001b80 	.word	0x20001b80
 8007bc8:	20001b94 	.word	0x20001b94
 8007bcc:	20001ba8 	.word	0x20001ba8
 8007bd0:	20001bbc 	.word	0x20001bbc
 8007bd4:	20001bd0 	.word	0x20001bd0
 8007bd8:	20001be4 	.word	0x20001be4
 8007bdc:	20001bf8 	.word	0x20001bf8
 8007be0:	20001c0c 	.word	0x20001c0c
 8007be4:	20001c20 	.word	0x20001c20
 8007be8:	20001c34 	.word	0x20001c34
 8007bec:	20001c48 	.word	0x20001c48
 8007bf0:	20001c5c 	.word	0x20001c5c
 8007bf4:	20001c70 	.word	0x20001c70
 8007bf8:	20001c84 	.word	0x20001c84
 8007bfc:	20001c98 	.word	0x20001c98
 8007c00:	20001cac 	.word	0x20001cac
 8007c04:	20001cc0 	.word	0x20001cc0
 8007c08:	20001cd4 	.word	0x20001cd4
 8007c0c:	20001ce8 	.word	0x20001ce8
 8007c10:	20001cfc 	.word	0x20001cfc
 8007c14:	20001d10 	.word	0x20001d10
 8007c18:	20001d24 	.word	0x20001d24
 8007c1c:	20001d38 	.word	0x20001d38
 8007c20:	20001d4c 	.word	0x20001d4c
 8007c24:	20001d60 	.word	0x20001d60
 8007c28:	20001d74 	.word	0x20001d74
 8007c2c:	20001d88 	.word	0x20001d88
 8007c30:	20001d9c 	.word	0x20001d9c
 8007c34:	20001db0 	.word	0x20001db0
 8007c38:	20001dc4 	.word	0x20001dc4
 8007c3c:	20001dd8 	.word	0x20001dd8
 8007c40:	20001dec 	.word	0x20001dec
 8007c44:	20001e00 	.word	0x20001e00
 8007c48:	20001e14 	.word	0x20001e14
 8007c4c:	20001e28 	.word	0x20001e28
 8007c50:	20001e3c 	.word	0x20001e3c
 8007c54:	20001e50 	.word	0x20001e50
 8007c58:	20001e64 	.word	0x20001e64
 8007c5c:	20001e78 	.word	0x20001e78
 8007c60:	20001e8c 	.word	0x20001e8c
 8007c64:	20001ea0 	.word	0x20001ea0
 8007c68:	20001eb4 	.word	0x20001eb4
 8007c6c:	20001ec8 	.word	0x20001ec8
 8007c70:	20001edc 	.word	0x20001edc
 8007c74:	20001ef0 	.word	0x20001ef0
 8007c78:	20001f04 	.word	0x20001f04

08007c7c <resetMenuTexts>:

void resetMenuTexts() {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007c80:	2211      	movs	r2, #17
 8007c82:	2100      	movs	r1, #0
 8007c84:	48d3      	ldr	r0, [pc, #844]	@ (8007fd4 <resetMenuTexts+0x358>)
 8007c86:	f006 f95d 	bl	800df44 <memset>
    memset(ayarlarText, 0, 17);
 8007c8a:	2211      	movs	r2, #17
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	48d2      	ldr	r0, [pc, #840]	@ (8007fd8 <resetMenuTexts+0x35c>)
 8007c90:	f006 f958 	bl	800df44 <memset>
    memset(hataKayitListText, 0, 17);
 8007c94:	2211      	movs	r2, #17
 8007c96:	2100      	movs	r1, #0
 8007c98:	48d0      	ldr	r0, [pc, #832]	@ (8007fdc <resetMenuTexts+0x360>)
 8007c9a:	f006 f953 	bl	800df44 <memset>
    memset(birHataKoduText, 0, 17);
 8007c9e:	2211      	movs	r2, #17
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	48cf      	ldr	r0, [pc, #828]	@ (8007fe0 <resetMenuTexts+0x364>)
 8007ca4:	f006 f94e 	bl	800df44 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007ca8:	2211      	movs	r2, #17
 8007caa:	2100      	movs	r1, #0
 8007cac:	48cd      	ldr	r0, [pc, #820]	@ (8007fe4 <resetMenuTexts+0x368>)
 8007cae:	f006 f949 	bl	800df44 <memset>
    memset(ucHataKoduText, 0, 17);
 8007cb2:	2211      	movs	r2, #17
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	48cc      	ldr	r0, [pc, #816]	@ (8007fe8 <resetMenuTexts+0x36c>)
 8007cb8:	f006 f944 	bl	800df44 <memset>
    memset(dortHataKoduText, 0, 17);
 8007cbc:	2211      	movs	r2, #17
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	48ca      	ldr	r0, [pc, #808]	@ (8007fec <resetMenuTexts+0x370>)
 8007cc2:	f006 f93f 	bl	800df44 <memset>
    memset(besHataKoduText, 0, 17);
 8007cc6:	2211      	movs	r2, #17
 8007cc8:	2100      	movs	r1, #0
 8007cca:	48c9      	ldr	r0, [pc, #804]	@ (8007ff0 <resetMenuTexts+0x374>)
 8007ccc:	f006 f93a 	bl	800df44 <memset>
    memset(altiHataKoduText, 0, 17);
 8007cd0:	2211      	movs	r2, #17
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	48c7      	ldr	r0, [pc, #796]	@ (8007ff4 <resetMenuTexts+0x378>)
 8007cd6:	f006 f935 	bl	800df44 <memset>
    memset(yediHataKoduText, 0, 17);
 8007cda:	2211      	movs	r2, #17
 8007cdc:	2100      	movs	r1, #0
 8007cde:	48c6      	ldr	r0, [pc, #792]	@ (8007ff8 <resetMenuTexts+0x37c>)
 8007ce0:	f006 f930 	bl	800df44 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007ce4:	2211      	movs	r2, #17
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	48c4      	ldr	r0, [pc, #784]	@ (8007ffc <resetMenuTexts+0x380>)
 8007cea:	f006 f92b 	bl	800df44 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007cee:	2211      	movs	r2, #17
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	48c3      	ldr	r0, [pc, #780]	@ (8008000 <resetMenuTexts+0x384>)
 8007cf4:	f006 f926 	bl	800df44 <memset>
    memset(onHataKoduText, 0, 17);
 8007cf8:	2211      	movs	r2, #17
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	48c1      	ldr	r0, [pc, #772]	@ (8008004 <resetMenuTexts+0x388>)
 8007cfe:	f006 f921 	bl	800df44 <memset>
    memset(silmekIcinText, 0, 17);
 8007d02:	2211      	movs	r2, #17
 8007d04:	2100      	movs	r1, #0
 8007d06:	48c0      	ldr	r0, [pc, #768]	@ (8008008 <resetMenuTexts+0x38c>)
 8007d08:	f006 f91c 	bl	800df44 <memset>
    memset(calismaSekliText, 0, 17);
 8007d0c:	2211      	movs	r2, #17
 8007d0e:	2100      	movs	r1, #0
 8007d10:	48be      	ldr	r0, [pc, #760]	@ (800800c <resetMenuTexts+0x390>)
 8007d12:	f006 f917 	bl	800df44 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007d16:	2211      	movs	r2, #17
 8007d18:	2100      	movs	r1, #0
 8007d1a:	48bd      	ldr	r0, [pc, #756]	@ (8008010 <resetMenuTexts+0x394>)
 8007d1c:	f006 f912 	bl	800df44 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007d20:	2211      	movs	r2, #17
 8007d22:	2100      	movs	r1, #0
 8007d24:	48bb      	ldr	r0, [pc, #748]	@ (8008014 <resetMenuTexts+0x398>)
 8007d26:	f006 f90d 	bl	800df44 <memset>
    memset(basGonderText, 0, 17);
 8007d2a:	2211      	movs	r2, #17
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	48ba      	ldr	r0, [pc, #744]	@ (8008018 <resetMenuTexts+0x39c>)
 8007d30:	f006 f908 	bl	800df44 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007d34:	2211      	movs	r2, #17
 8007d36:	2100      	movs	r1, #0
 8007d38:	48b8      	ldr	r0, [pc, #736]	@ (800801c <resetMenuTexts+0x3a0>)
 8007d3a:	f006 f903 	bl	800df44 <memset>
    memset(pasifText, 0, 17);
 8007d3e:	2211      	movs	r2, #17
 8007d40:	2100      	movs	r1, #0
 8007d42:	48b7      	ldr	r0, [pc, #732]	@ (8008020 <resetMenuTexts+0x3a4>)
 8007d44:	f006 f8fe 	bl	800df44 <memset>
    memset(aktifText, 0, 17);
 8007d48:	2211      	movs	r2, #17
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	48b5      	ldr	r0, [pc, #724]	@ (8008024 <resetMenuTexts+0x3a8>)
 8007d4e:	f006 f8f9 	bl	800df44 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007d52:	2211      	movs	r2, #17
 8007d54:	2100      	movs	r1, #0
 8007d56:	48b4      	ldr	r0, [pc, #720]	@ (8008028 <resetMenuTexts+0x3ac>)
 8007d58:	f006 f8f4 	bl	800df44 <memset>
    memset(altLimitText, 0, 17);
 8007d5c:	2211      	movs	r2, #17
 8007d5e:	2100      	movs	r1, #0
 8007d60:	48b2      	ldr	r0, [pc, #712]	@ (800802c <resetMenuTexts+0x3b0>)
 8007d62:	f006 f8ef 	bl	800df44 <memset>
    memset(basincSalteriText, 0, 17);
 8007d66:	2211      	movs	r2, #17
 8007d68:	2100      	movs	r1, #0
 8007d6a:	48b1      	ldr	r0, [pc, #708]	@ (8008030 <resetMenuTexts+0x3b4>)
 8007d6c:	f006 f8ea 	bl	800df44 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007d70:	2211      	movs	r2, #17
 8007d72:	2100      	movs	r1, #0
 8007d74:	48af      	ldr	r0, [pc, #700]	@ (8008034 <resetMenuTexts+0x3b8>)
 8007d76:	f006 f8e5 	bl	800df44 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007d7a:	2211      	movs	r2, #17
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	48ae      	ldr	r0, [pc, #696]	@ (8008038 <resetMenuTexts+0x3bc>)
 8007d80:	f006 f8e0 	bl	800df44 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007d84:	2211      	movs	r2, #17
 8007d86:	2100      	movs	r1, #0
 8007d88:	48ac      	ldr	r0, [pc, #688]	@ (800803c <resetMenuTexts+0x3c0>)
 8007d8a:	f006 f8db 	bl	800df44 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007d8e:	2211      	movs	r2, #17
 8007d90:	2100      	movs	r1, #0
 8007d92:	48ab      	ldr	r0, [pc, #684]	@ (8008040 <resetMenuTexts+0x3c4>)
 8007d94:	f006 f8d6 	bl	800df44 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007d98:	2211      	movs	r2, #17
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	48a9      	ldr	r0, [pc, #676]	@ (8008044 <resetMenuTexts+0x3c8>)
 8007d9e:	f006 f8d1 	bl	800df44 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007da2:	2211      	movs	r2, #17
 8007da4:	2100      	movs	r1, #0
 8007da6:	48a8      	ldr	r0, [pc, #672]	@ (8008048 <resetMenuTexts+0x3cc>)
 8007da8:	f006 f8cc 	bl	800df44 <memset>
    memset(katButonuEXTText, 0, 17);
 8007dac:	2211      	movs	r2, #17
 8007dae:	2100      	movs	r1, #0
 8007db0:	48a6      	ldr	r0, [pc, #664]	@ (800804c <resetMenuTexts+0x3d0>)
 8007db2:	f006 f8c7 	bl	800df44 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007db6:	2211      	movs	r2, #17
 8007db8:	2100      	movs	r1, #0
 8007dba:	48a5      	ldr	r0, [pc, #660]	@ (8008050 <resetMenuTexts+0x3d4>)
 8007dbc:	f006 f8c2 	bl	800df44 <memset>
    memset(butonKontrolluText, 0, 17);
 8007dc0:	2211      	movs	r2, #17
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	48a3      	ldr	r0, [pc, #652]	@ (8008054 <resetMenuTexts+0x3d8>)
 8007dc6:	f006 f8bd 	bl	800df44 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007dca:	2211      	movs	r2, #17
 8007dcc:	2100      	movs	r1, #0
 8007dce:	48a2      	ldr	r0, [pc, #648]	@ (8008058 <resetMenuTexts+0x3dc>)
 8007dd0:	f006 f8b8 	bl	800df44 <memset>
    memset(kacSaniyeText, 0, 17);
 8007dd4:	2211      	movs	r2, #17
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	48a0      	ldr	r0, [pc, #640]	@ (800805c <resetMenuTexts+0x3e0>)
 8007dda:	f006 f8b3 	bl	800df44 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007dde:	2211      	movs	r2, #17
 8007de0:	2100      	movs	r1, #0
 8007de2:	489f      	ldr	r0, [pc, #636]	@ (8008060 <resetMenuTexts+0x3e4>)
 8007de4:	f006 f8ae 	bl	800df44 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007de8:	2211      	movs	r2, #17
 8007dea:	2100      	movs	r1, #0
 8007dec:	489d      	ldr	r0, [pc, #628]	@ (8008064 <resetMenuTexts+0x3e8>)
 8007dee:	f006 f8a9 	bl	800df44 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007df2:	2211      	movs	r2, #17
 8007df4:	2100      	movs	r1, #0
 8007df6:	489c      	ldr	r0, [pc, #624]	@ (8008068 <resetMenuTexts+0x3ec>)
 8007df8:	f006 f8a4 	bl	800df44 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007dfc:	2211      	movs	r2, #17
 8007dfe:	2100      	movs	r1, #0
 8007e00:	489a      	ldr	r0, [pc, #616]	@ (800806c <resetMenuTexts+0x3f0>)
 8007e02:	f006 f89f 	bl	800df44 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007e06:	2211      	movs	r2, #17
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4899      	ldr	r0, [pc, #612]	@ (8008070 <resetMenuTexts+0x3f4>)
 8007e0c:	f006 f89a 	bl	800df44 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007e10:	2211      	movs	r2, #17
 8007e12:	2100      	movs	r1, #0
 8007e14:	4897      	ldr	r0, [pc, #604]	@ (8008074 <resetMenuTexts+0x3f8>)
 8007e16:	f006 f895 	bl	800df44 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007e1a:	2211      	movs	r2, #17
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4896      	ldr	r0, [pc, #600]	@ (8008078 <resetMenuTexts+0x3fc>)
 8007e20:	f006 f890 	bl	800df44 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007e24:	2211      	movs	r2, #17
 8007e26:	2100      	movs	r1, #0
 8007e28:	4894      	ldr	r0, [pc, #592]	@ (800807c <resetMenuTexts+0x400>)
 8007e2a:	f006 f88b 	bl	800df44 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007e2e:	2211      	movs	r2, #17
 8007e30:	2100      	movs	r1, #0
 8007e32:	4893      	ldr	r0, [pc, #588]	@ (8008080 <resetMenuTexts+0x404>)
 8007e34:	f006 f886 	bl	800df44 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007e38:	2211      	movs	r2, #17
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4891      	ldr	r0, [pc, #580]	@ (8008084 <resetMenuTexts+0x408>)
 8007e3e:	f006 f881 	bl	800df44 <memset>
    memset(devirmeAktifText, 0, 17);
 8007e42:	2211      	movs	r2, #17
 8007e44:	2100      	movs	r1, #0
 8007e46:	4890      	ldr	r0, [pc, #576]	@ (8008088 <resetMenuTexts+0x40c>)
 8007e48:	f006 f87c 	bl	800df44 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007e4c:	2211      	movs	r2, #17
 8007e4e:	2100      	movs	r1, #0
 8007e50:	488e      	ldr	r0, [pc, #568]	@ (800808c <resetMenuTexts+0x410>)
 8007e52:	f006 f877 	bl	800df44 <memset>
    memset(devirmeYukariText, 0, 17);
 8007e56:	2211      	movs	r2, #17
 8007e58:	2100      	movs	r1, #0
 8007e5a:	488d      	ldr	r0, [pc, #564]	@ (8008090 <resetMenuTexts+0x414>)
 8007e5c:	f006 f872 	bl	800df44 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007e60:	2211      	movs	r2, #17
 8007e62:	2100      	movs	r1, #0
 8007e64:	488b      	ldr	r0, [pc, #556]	@ (8008094 <resetMenuTexts+0x418>)
 8007e66:	f006 f86d 	bl	800df44 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007e6a:	2211      	movs	r2, #17
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	488a      	ldr	r0, [pc, #552]	@ (8008098 <resetMenuTexts+0x41c>)
 8007e70:	f006 f868 	bl	800df44 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007e74:	2211      	movs	r2, #17
 8007e76:	2100      	movs	r1, #0
 8007e78:	4888      	ldr	r0, [pc, #544]	@ (800809c <resetMenuTexts+0x420>)
 8007e7a:	f006 f863 	bl	800df44 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007e7e:	2211      	movs	r2, #17
 8007e80:	2100      	movs	r1, #0
 8007e82:	4887      	ldr	r0, [pc, #540]	@ (80080a0 <resetMenuTexts+0x424>)
 8007e84:	f006 f85e 	bl	800df44 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007e88:	2211      	movs	r2, #17
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4885      	ldr	r0, [pc, #532]	@ (80080a4 <resetMenuTexts+0x428>)
 8007e8e:	f006 f859 	bl	800df44 <memset>
    memset(tekTesirText, 0, 17);
 8007e92:	2211      	movs	r2, #17
 8007e94:	2100      	movs	r1, #0
 8007e96:	4884      	ldr	r0, [pc, #528]	@ (80080a8 <resetMenuTexts+0x42c>)
 8007e98:	f006 f854 	bl	800df44 <memset>
    memset(ciftTesirText, 0, 17);
 8007e9c:	2211      	movs	r2, #17
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4882      	ldr	r0, [pc, #520]	@ (80080ac <resetMenuTexts+0x430>)
 8007ea2:	f006 f84f 	bl	800df44 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007ea6:	2211      	movs	r2, #17
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4881      	ldr	r0, [pc, #516]	@ (80080b0 <resetMenuTexts+0x434>)
 8007eac:	f006 f84a 	bl	800df44 <memset>
    memset(yukariValfSureText, 0, 17);
 8007eb0:	2211      	movs	r2, #17
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	487f      	ldr	r0, [pc, #508]	@ (80080b4 <resetMenuTexts+0x438>)
 8007eb6:	f006 f845 	bl	800df44 <memset>
    memset(asagiValfSureText, 0, 17);
 8007eba:	2211      	movs	r2, #17
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	487e      	ldr	r0, [pc, #504]	@ (80080b8 <resetMenuTexts+0x43c>)
 8007ec0:	f006 f840 	bl	800df44 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007ec4:	2211      	movs	r2, #17
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	487c      	ldr	r0, [pc, #496]	@ (80080bc <resetMenuTexts+0x440>)
 8007eca:	f006 f83b 	bl	800df44 <memset>
    memset(ileriValfSureText, 0, 17);
 8007ece:	2211      	movs	r2, #17
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	487b      	ldr	r0, [pc, #492]	@ (80080c0 <resetMenuTexts+0x444>)
 8007ed4:	f006 f836 	bl	800df44 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007ed8:	2211      	movs	r2, #17
 8007eda:	2100      	movs	r1, #0
 8007edc:	4879      	ldr	r0, [pc, #484]	@ (80080c4 <resetMenuTexts+0x448>)
 8007ede:	f006 f831 	bl	800df44 <memset>
    memset(geriValfSureText, 0, 17);
 8007ee2:	2211      	movs	r2, #17
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4878      	ldr	r0, [pc, #480]	@ (80080c8 <resetMenuTexts+0x44c>)
 8007ee8:	f006 f82c 	bl	800df44 <memset>
    memset(calismaSuresiText, 0, 17);
 8007eec:	2211      	movs	r2, #17
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4876      	ldr	r0, [pc, #472]	@ (80080cc <resetMenuTexts+0x450>)
 8007ef2:	f006 f827 	bl	800df44 <memset>
    memset(calismaSayisiText, 0, 17);
 8007ef6:	2211      	movs	r2, #17
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4875      	ldr	r0, [pc, #468]	@ (80080d0 <resetMenuTexts+0x454>)
 8007efc:	f006 f822 	bl	800df44 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007f00:	2211      	movs	r2, #17
 8007f02:	2100      	movs	r1, #0
 8007f04:	4873      	ldr	r0, [pc, #460]	@ (80080d4 <resetMenuTexts+0x458>)
 8007f06:	f006 f81d 	bl	800df44 <memset>
    memset(dilSecimText, 0, 17);
 8007f0a:	2211      	movs	r2, #17
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4872      	ldr	r0, [pc, #456]	@ (80080d8 <resetMenuTexts+0x45c>)
 8007f10:	f006 f818 	bl	800df44 <memset>
    memset(secilenDilText, 0, 17);
 8007f14:	2211      	movs	r2, #17
 8007f16:	2100      	movs	r1, #0
 8007f18:	4870      	ldr	r0, [pc, #448]	@ (80080dc <resetMenuTexts+0x460>)
 8007f1a:	f006 f813 	bl	800df44 <memset>
    memset(menudenCikisText, 0, 17);
 8007f1e:	2211      	movs	r2, #17
 8007f20:	2100      	movs	r1, #0
 8007f22:	486f      	ldr	r0, [pc, #444]	@ (80080e0 <resetMenuTexts+0x464>)
 8007f24:	f006 f80e 	bl	800df44 <memset>
    memset(enteraBasinizText, 0, 17);
 8007f28:	2211      	movs	r2, #17
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	486d      	ldr	r0, [pc, #436]	@ (80080e4 <resetMenuTexts+0x468>)
 8007f2e:	f006 f809 	bl	800df44 <memset>
    memset(hataKoduText, 0, 17);
 8007f32:	2211      	movs	r2, #17
 8007f34:	2100      	movs	r1, #0
 8007f36:	486c      	ldr	r0, [pc, #432]	@ (80080e8 <resetMenuTexts+0x46c>)
 8007f38:	f006 f804 	bl	800df44 <memset>
    memset(dataSynchText, 0, 17);
 8007f3c:	2211      	movs	r2, #17
 8007f3e:	2100      	movs	r1, #0
 8007f40:	486a      	ldr	r0, [pc, #424]	@ (80080ec <resetMenuTexts+0x470>)
 8007f42:	f005 ffff 	bl	800df44 <memset>
    memset(dataSynch2Text, 0, 17);
 8007f46:	2211      	movs	r2, #17
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4869      	ldr	r0, [pc, #420]	@ (80080f0 <resetMenuTexts+0x474>)
 8007f4c:	f005 fffa 	bl	800df44 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007f50:	2211      	movs	r2, #17
 8007f52:	2100      	movs	r1, #0
 8007f54:	4867      	ldr	r0, [pc, #412]	@ (80080f4 <resetMenuTexts+0x478>)
 8007f56:	f005 fff5 	bl	800df44 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007f5a:	2211      	movs	r2, #17
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4866      	ldr	r0, [pc, #408]	@ (80080f8 <resetMenuTexts+0x47c>)
 8007f60:	f005 fff0 	bl	800df44 <memset>
    memset(mustBe12Text, 0, 17);
 8007f64:	2211      	movs	r2, #17
 8007f66:	2100      	movs	r1, #0
 8007f68:	4864      	ldr	r0, [pc, #400]	@ (80080fc <resetMenuTexts+0x480>)
 8007f6a:	f005 ffeb 	bl	800df44 <memset>
    memset(mustBe122Text, 0, 17);
 8007f6e:	2211      	movs	r2, #17
 8007f70:	2100      	movs	r1, #0
 8007f72:	4863      	ldr	r0, [pc, #396]	@ (8008100 <resetMenuTexts+0x484>)
 8007f74:	f005 ffe6 	bl	800df44 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007f78:	2211      	movs	r2, #17
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4861      	ldr	r0, [pc, #388]	@ (8008104 <resetMenuTexts+0x488>)
 8007f7e:	f005 ffe1 	bl	800df44 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007f82:	2211      	movs	r2, #17
 8007f84:	2100      	movs	r1, #0
 8007f86:	4860      	ldr	r0, [pc, #384]	@ (8008108 <resetMenuTexts+0x48c>)
 8007f88:	f005 ffdc 	bl	800df44 <memset>
    memset(passExceedErrorText, 0, 17);
 8007f8c:	2211      	movs	r2, #17
 8007f8e:	2100      	movs	r1, #0
 8007f90:	485e      	ldr	r0, [pc, #376]	@ (800810c <resetMenuTexts+0x490>)
 8007f92:	f005 ffd7 	bl	800df44 <memset>
    memset(passExceedError2Text, 0, 17);
 8007f96:	2211      	movs	r2, #17
 8007f98:	2100      	movs	r1, #0
 8007f9a:	485d      	ldr	r0, [pc, #372]	@ (8008110 <resetMenuTexts+0x494>)
 8007f9c:	f005 ffd2 	bl	800df44 <memset>
    memset(dataYazildiText, 0, 17);
 8007fa0:	2211      	movs	r2, #17
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	485b      	ldr	r0, [pc, #364]	@ (8008114 <resetMenuTexts+0x498>)
 8007fa6:	f005 ffcd 	bl	800df44 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007faa:	2211      	movs	r2, #17
 8007fac:	2100      	movs	r1, #0
 8007fae:	485a      	ldr	r0, [pc, #360]	@ (8008118 <resetMenuTexts+0x49c>)
 8007fb0:	f005 ffc8 	bl	800df44 <memset>
    memset(dataOkunduText, 0, 17);
 8007fb4:	2211      	movs	r2, #17
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4858      	ldr	r0, [pc, #352]	@ (800811c <resetMenuTexts+0x4a0>)
 8007fba:	f005 ffc3 	bl	800df44 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007fbe:	2211      	movs	r2, #17
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4857      	ldr	r0, [pc, #348]	@ (8008120 <resetMenuTexts+0x4a4>)
 8007fc4:	f005 ffbe 	bl	800df44 <memset>
    memset(errorCodeText, 0, 17);
 8007fc8:	2211      	movs	r2, #17
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4855      	ldr	r0, [pc, #340]	@ (8008124 <resetMenuTexts+0x4a8>)
 8007fce:	f005 ffb9 	bl	800df44 <memset>
 8007fd2:	e0a9      	b.n	8008128 <resetMenuTexts+0x4ac>
 8007fd4:	20001824 	.word	0x20001824
 8007fd8:	20001838 	.word	0x20001838
 8007fdc:	2000184c 	.word	0x2000184c
 8007fe0:	20001860 	.word	0x20001860
 8007fe4:	20001874 	.word	0x20001874
 8007fe8:	20001888 	.word	0x20001888
 8007fec:	2000189c 	.word	0x2000189c
 8007ff0:	200018b0 	.word	0x200018b0
 8007ff4:	200018c4 	.word	0x200018c4
 8007ff8:	200018d8 	.word	0x200018d8
 8007ffc:	200018ec 	.word	0x200018ec
 8008000:	20001900 	.word	0x20001900
 8008004:	20001914 	.word	0x20001914
 8008008:	20001928 	.word	0x20001928
 800800c:	2000193c 	.word	0x2000193c
 8008010:	20001950 	.word	0x20001950
 8008014:	20001964 	.word	0x20001964
 8008018:	20001978 	.word	0x20001978
 800801c:	2000198c 	.word	0x2000198c
 8008020:	200019a0 	.word	0x200019a0
 8008024:	200019b4 	.word	0x200019b4
 8008028:	200019c8 	.word	0x200019c8
 800802c:	200019dc 	.word	0x200019dc
 8008030:	200019f0 	.word	0x200019f0
 8008034:	20001a04 	.word	0x20001a04
 8008038:	20001a18 	.word	0x20001a18
 800803c:	20001a2c 	.word	0x20001a2c
 8008040:	20001a40 	.word	0x20001a40
 8008044:	20001a54 	.word	0x20001a54
 8008048:	20001a68 	.word	0x20001a68
 800804c:	20001a7c 	.word	0x20001a7c
 8008050:	20001a90 	.word	0x20001a90
 8008054:	20001aa4 	.word	0x20001aa4
 8008058:	20001ab8 	.word	0x20001ab8
 800805c:	20001acc 	.word	0x20001acc
 8008060:	20001ae0 	.word	0x20001ae0
 8008064:	20001af4 	.word	0x20001af4
 8008068:	20001b08 	.word	0x20001b08
 800806c:	20001b1c 	.word	0x20001b1c
 8008070:	20001b30 	.word	0x20001b30
 8008074:	20001b44 	.word	0x20001b44
 8008078:	20001b58 	.word	0x20001b58
 800807c:	20001b6c 	.word	0x20001b6c
 8008080:	20001b80 	.word	0x20001b80
 8008084:	20001b94 	.word	0x20001b94
 8008088:	20001ba8 	.word	0x20001ba8
 800808c:	20001bbc 	.word	0x20001bbc
 8008090:	20001bd0 	.word	0x20001bd0
 8008094:	20001be4 	.word	0x20001be4
 8008098:	20001bf8 	.word	0x20001bf8
 800809c:	20001c0c 	.word	0x20001c0c
 80080a0:	20001c20 	.word	0x20001c20
 80080a4:	20001c34 	.word	0x20001c34
 80080a8:	20001c48 	.word	0x20001c48
 80080ac:	20001c5c 	.word	0x20001c5c
 80080b0:	20001c70 	.word	0x20001c70
 80080b4:	20001c84 	.word	0x20001c84
 80080b8:	20001c98 	.word	0x20001c98
 80080bc:	20001cac 	.word	0x20001cac
 80080c0:	20001cc0 	.word	0x20001cc0
 80080c4:	20001cd4 	.word	0x20001cd4
 80080c8:	20001ce8 	.word	0x20001ce8
 80080cc:	20001cfc 	.word	0x20001cfc
 80080d0:	20001d10 	.word	0x20001d10
 80080d4:	20001d24 	.word	0x20001d24
 80080d8:	20001d38 	.word	0x20001d38
 80080dc:	20001d4c 	.word	0x20001d4c
 80080e0:	20001d60 	.word	0x20001d60
 80080e4:	20001d74 	.word	0x20001d74
 80080e8:	20001d88 	.word	0x20001d88
 80080ec:	20001d9c 	.word	0x20001d9c
 80080f0:	20001db0 	.word	0x20001db0
 80080f4:	20001dc4 	.word	0x20001dc4
 80080f8:	20001dd8 	.word	0x20001dd8
 80080fc:	20001dec 	.word	0x20001dec
 8008100:	20001e00 	.word	0x20001e00
 8008104:	20001e14 	.word	0x20001e14
 8008108:	20001e28 	.word	0x20001e28
 800810c:	20001e3c 	.word	0x20001e3c
 8008110:	20001e50 	.word	0x20001e50
 8008114:	20001e64 	.word	0x20001e64
 8008118:	20001e78 	.word	0x20001e78
 800811c:	20001e8c 	.word	0x20001e8c
 8008120:	20001ea0 	.word	0x20001ea0
 8008124:	20001eb4 	.word	0x20001eb4
    memset(machineIDText, 0, 17);
 8008128:	2211      	movs	r2, #17
 800812a:	2100      	movs	r1, #0
 800812c:	4809      	ldr	r0, [pc, #36]	@ (8008154 <resetMenuTexts+0x4d8>)
 800812e:	f005 ff09 	bl	800df44 <memset>
    memset(idConfirmationText, 0, 17);
 8008132:	2211      	movs	r2, #17
 8008134:	2100      	movs	r1, #0
 8008136:	4808      	ldr	r0, [pc, #32]	@ (8008158 <resetMenuTexts+0x4dc>)
 8008138:	f005 ff04 	bl	800df44 <memset>
    memset(idConfirmationSubText, 0, 17);
 800813c:	2211      	movs	r2, #17
 800813e:	2100      	movs	r1, #0
 8008140:	4806      	ldr	r0, [pc, #24]	@ (800815c <resetMenuTexts+0x4e0>)
 8008142:	f005 feff 	bl	800df44 <memset>
    memset(wifiConfirmationText, 0, 17);
 8008146:	2211      	movs	r2, #17
 8008148:	2100      	movs	r1, #0
 800814a:	4805      	ldr	r0, [pc, #20]	@ (8008160 <resetMenuTexts+0x4e4>)
 800814c:	f005 fefa 	bl	800df44 <memset>
}
 8008150:	bf00      	nop
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20001ec8 	.word	0x20001ec8
 8008158:	20001edc 	.word	0x20001edc
 800815c:	20001ef0 	.word	0x20001ef0
 8008160:	20001f04 	.word	0x20001f04

08008164 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800816a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800816e:	f001 fdc3 	bl	8009cf8 <HAL_Delay>
	int confirmationVal = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008176:	e012      	b.n	800819e <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008178:	4a12      	ldr	r2, [pc, #72]	@ (80081c4 <takeMachineIDWithConfirmation+0x60>)
 800817a:	2101      	movs	r1, #1
 800817c:	2001      	movs	r0, #1
 800817e:	f001 f845 	bl	800920c <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008182:	4a11      	ldr	r2, [pc, #68]	@ (80081c8 <takeMachineIDWithConfirmation+0x64>)
 8008184:	2101      	movs	r1, #1
 8008186:	2002      	movs	r0, #2
 8008188:	f001 f840 	bl	800920c <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 800818c:	2102      	movs	r1, #2
 800818e:	480f      	ldr	r0, [pc, #60]	@ (80081cc <takeMachineIDWithConfirmation+0x68>)
 8008190:	f002 fb82 	bl	800a898 <HAL_GPIO_ReadPin>
 8008194:	4603      	mov	r3, r0
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 800819a:	2301      	movs	r3, #1
 800819c:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0e9      	beq.n	8008178 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 80081a4:	f000 f814 	bl	80081d0 <takeMachineID>

	convertArrays(1);
 80081a8:	2001      	movs	r0, #1
 80081aa:	f7f8 fb7d 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 80081ae:	2032      	movs	r0, #50	@ 0x32
 80081b0:	f001 fda2 	bl	8009cf8 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7f9 fabf 	bl	8001738 <printCredentials>
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20001edc 	.word	0x20001edc
 80081c8:	20001ef0 	.word	0x20001ef0
 80081cc:	40010800 	.word	0x40010800

080081d0 <takeMachineID>:

void takeMachineID() {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 80081d6:	2001      	movs	r0, #1
 80081d8:	f001 f876 	bl	80092c8 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80081dc:	220c      	movs	r2, #12
 80081de:	2100      	movs	r1, #0
 80081e0:	48a6      	ldr	r0, [pc, #664]	@ (800847c <takeMachineID+0x2ac>)
 80081e2:	f005 feaf 	bl	800df44 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80081e6:	2305      	movs	r3, #5
 80081e8:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80081ea:	2303      	movs	r3, #3
 80081ec:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80081f2:	4ba3      	ldr	r3, [pc, #652]	@ (8008480 <takeMachineID+0x2b0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 80081f8:	2100      	movs	r1, #0
 80081fa:	2001      	movs	r0, #1
 80081fc:	f7f9 f92c 	bl	8001458 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008200:	2108      	movs	r1, #8
 8008202:	48a0      	ldr	r0, [pc, #640]	@ (8008484 <takeMachineID+0x2b4>)
 8008204:	f002 fb48 	bl	800a898 <HAL_GPIO_ReadPin>
 8008208:	4603      	mov	r3, r0
 800820a:	2b01      	cmp	r3, #1
 800820c:	d12f      	bne.n	800826e <takeMachineID+0x9e>
        	lcd_cursor(0);
 800820e:	2000      	movs	r0, #0
 8008210:	f001 f85a 	bl	80092c8 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008214:	f000 fe34 	bl	8008e80 <checkEEPROM4ID>
 8008218:	4603      	mov	r3, r0
 800821a:	2b01      	cmp	r3, #1
 800821c:	d00e      	beq.n	800823c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 800821e:	4a9a      	ldr	r2, [pc, #616]	@ (8008488 <takeMachineID+0x2b8>)
 8008220:	2101      	movs	r1, #1
 8008222:	2001      	movs	r0, #1
 8008224:	f000 fff2 	bl	800920c <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008228:	4a98      	ldr	r2, [pc, #608]	@ (800848c <takeMachineID+0x2bc>)
 800822a:	2101      	movs	r1, #1
 800822c:	2002      	movs	r0, #2
 800822e:	f000 ffed 	bl	800920c <lcd_print>
        		HAL_Delay(1250);
 8008232:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008236:	f001 fd5f 	bl	8009cf8 <HAL_Delay>

        		goto mainSection;
 800823a:	e7cc      	b.n	80081d6 <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 800823c:	f000 fe46 	bl	8008ecc <az5>
 8008240:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d103      	bne.n	8008250 <takeMachineID+0x80>
        		saveEEPROM(1);
 8008248:	2001      	movs	r0, #1
 800824a:	f7f8 fa2b 	bl	80006a4 <saveEEPROM>
 800824e:	e00e      	b.n	800826e <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 8008250:	4a8f      	ldr	r2, [pc, #572]	@ (8008490 <takeMachineID+0x2c0>)
 8008252:	2101      	movs	r1, #1
 8008254:	2001      	movs	r0, #1
 8008256:	f000 ffd9 	bl	800920c <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 800825a:	4a8e      	ldr	r2, [pc, #568]	@ (8008494 <takeMachineID+0x2c4>)
 800825c:	2101      	movs	r1, #1
 800825e:	2002      	movs	r0, #2
 8008260:	f000 ffd4 	bl	800920c <lcd_print>

        		HAL_Delay(500);
 8008264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008268:	f001 fd46 	bl	8009cf8 <HAL_Delay>

        		goto mainSection;
 800826c:	e7b3      	b.n	80081d6 <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800826e:	2101      	movs	r1, #1
 8008270:	4884      	ldr	r0, [pc, #528]	@ (8008484 <takeMachineID+0x2b4>)
 8008272:	f002 fb11 	bl	800a898 <HAL_GPIO_ReadPin>
 8008276:	4603      	mov	r3, r0
 8008278:	2b01      	cmp	r3, #1
 800827a:	d111      	bne.n	80082a0 <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b07      	cmp	r3, #7
 8008280:	d102      	bne.n	8008288 <takeMachineID+0xb8>
        		cursorPosition = 10;
 8008282:	230a      	movs	r3, #10
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e008      	b.n	800829a <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b0e      	cmp	r3, #14
 800828c:	d102      	bne.n	8008294 <takeMachineID+0xc4>
                cursorPosition = 3;
 800828e:	2303      	movs	r3, #3
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	e002      	b.n	800829a <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	3301      	adds	r3, #1
 8008298:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 800829a:	2096      	movs	r0, #150	@ 0x96
 800829c:	f001 fd2c 	bl	8009cf8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80082a0:	2108      	movs	r1, #8
 80082a2:	487d      	ldr	r0, [pc, #500]	@ (8008498 <takeMachineID+0x2c8>)
 80082a4:	f002 faf8 	bl	800a898 <HAL_GPIO_ReadPin>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d111      	bne.n	80082d2 <takeMachineID+0x102>
            if (cursorPosition == 3) {
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d102      	bne.n	80082ba <takeMachineID+0xea>
                cursorPosition = 14;
 80082b4:	230e      	movs	r3, #14
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	e008      	b.n	80082cc <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b0a      	cmp	r3, #10
 80082be:	d102      	bne.n	80082c6 <takeMachineID+0xf6>
            	cursorPosition = 7;
 80082c0:	2307      	movs	r3, #7
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	e002      	b.n	80082cc <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 80082cc:	20fa      	movs	r0, #250	@ 0xfa
 80082ce:	f001 fd13 	bl	8009cf8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80082d2:	2102      	movs	r1, #2
 80082d4:	486b      	ldr	r0, [pc, #428]	@ (8008484 <takeMachineID+0x2b4>)
 80082d6:	f002 fadf 	bl	800a898 <HAL_GPIO_ReadPin>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b01      	cmp	r3, #1
 80082de:	f040 80a1 	bne.w	8008424 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d10a      	bne.n	80082fe <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 80082e8:	4a64      	ldr	r2, [pc, #400]	@ (800847c <takeMachineID+0x2ac>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	2230      	movs	r2, #48	@ 0x30
 80082f0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80082f2:	4a6a      	ldr	r2, [pc, #424]	@ (800849c <takeMachineID+0x2cc>)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4413      	add	r3, r2
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e07c      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b04      	cmp	r3, #4
 8008302:	d10a      	bne.n	800831a <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 8008304:	4a5d      	ldr	r2, [pc, #372]	@ (800847c <takeMachineID+0x2ac>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4413      	add	r3, r2
 800830a:	2231      	movs	r2, #49	@ 0x31
 800830c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 800830e:	4a63      	ldr	r2, [pc, #396]	@ (800849c <takeMachineID+0x2cc>)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4413      	add	r3, r2
 8008314:	2201      	movs	r2, #1
 8008316:	701a      	strb	r2, [r3, #0]
 8008318:	e06e      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b05      	cmp	r3, #5
 800831e:	d10a      	bne.n	8008336 <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 8008320:	4a56      	ldr	r2, [pc, #344]	@ (800847c <takeMachineID+0x2ac>)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	2232      	movs	r2, #50	@ 0x32
 8008328:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800832a:	4a5c      	ldr	r2, [pc, #368]	@ (800849c <takeMachineID+0x2cc>)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	2202      	movs	r2, #2
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e060      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b06      	cmp	r3, #6
 800833a:	d10a      	bne.n	8008352 <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 800833c:	4a4f      	ldr	r2, [pc, #316]	@ (800847c <takeMachineID+0x2ac>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	2233      	movs	r2, #51	@ 0x33
 8008344:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008346:	4a55      	ldr	r2, [pc, #340]	@ (800849c <takeMachineID+0x2cc>)
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4413      	add	r3, r2
 800834c:	2203      	movs	r2, #3
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e052      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b07      	cmp	r3, #7
 8008356:	d10a      	bne.n	800836e <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 8008358:	4a48      	ldr	r2, [pc, #288]	@ (800847c <takeMachineID+0x2ac>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	2234      	movs	r2, #52	@ 0x34
 8008360:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008362:	4a4e      	ldr	r2, [pc, #312]	@ (800849c <takeMachineID+0x2cc>)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4413      	add	r3, r2
 8008368:	2204      	movs	r2, #4
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e044      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b0a      	cmp	r3, #10
 8008372:	d10a      	bne.n	800838a <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 8008374:	4a41      	ldr	r2, [pc, #260]	@ (800847c <takeMachineID+0x2ac>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	2235      	movs	r2, #53	@ 0x35
 800837c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 800837e:	4a47      	ldr	r2, [pc, #284]	@ (800849c <takeMachineID+0x2cc>)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4413      	add	r3, r2
 8008384:	2205      	movs	r2, #5
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e036      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b0b      	cmp	r3, #11
 800838e:	d10a      	bne.n	80083a6 <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 8008390:	4a3a      	ldr	r2, [pc, #232]	@ (800847c <takeMachineID+0x2ac>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	2236      	movs	r2, #54	@ 0x36
 8008398:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 800839a:	4a40      	ldr	r2, [pc, #256]	@ (800849c <takeMachineID+0x2cc>)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4413      	add	r3, r2
 80083a0:	2206      	movs	r2, #6
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e028      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b0c      	cmp	r3, #12
 80083aa:	d10a      	bne.n	80083c2 <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 80083ac:	4a33      	ldr	r2, [pc, #204]	@ (800847c <takeMachineID+0x2ac>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	2237      	movs	r2, #55	@ 0x37
 80083b4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80083b6:	4a39      	ldr	r2, [pc, #228]	@ (800849c <takeMachineID+0x2cc>)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4413      	add	r3, r2
 80083bc:	2207      	movs	r2, #7
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e01a      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b0d      	cmp	r3, #13
 80083c6:	d10a      	bne.n	80083de <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 80083c8:	4a2c      	ldr	r2, [pc, #176]	@ (800847c <takeMachineID+0x2ac>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	2238      	movs	r2, #56	@ 0x38
 80083d0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80083d2:	4a32      	ldr	r2, [pc, #200]	@ (800849c <takeMachineID+0x2cc>)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4413      	add	r3, r2
 80083d8:	2208      	movs	r2, #8
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e00c      	b.n	80083f8 <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b0e      	cmp	r3, #14
 80083e2:	d109      	bne.n	80083f8 <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 80083e4:	4a25      	ldr	r2, [pc, #148]	@ (800847c <takeMachineID+0x2ac>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	2239      	movs	r2, #57	@ 0x39
 80083ec:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 80083ee:	4a2b      	ldr	r2, [pc, #172]	@ (800849c <takeMachineID+0x2cc>)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4413      	add	r3, r2
 80083f4:	2209      	movs	r2, #9
 80083f6:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	b2d9      	uxtb	r1, r3
 80083fc:	4a1f      	ldr	r2, [pc, #124]	@ (800847c <takeMachineID+0x2ac>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	2001      	movs	r0, #1
 8008408:	f000 ff15 	bl	8009236 <lcd_print_char>

        	writeLoc++;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	3301      	adds	r3, #1
 8008410:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	3301      	adds	r3, #1
 800841c:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 800841e:	2096      	movs	r0, #150	@ 0x96
 8008420:	f001 fc6a 	bl	8009cf8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008424:	2104      	movs	r1, #4
 8008426:	4817      	ldr	r0, [pc, #92]	@ (8008484 <takeMachineID+0x2b4>)
 8008428:	f002 fa36 	bl	800a898 <HAL_GPIO_ReadPin>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d14c      	bne.n	80084cc <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 8008432:	4b12      	ldr	r3, [pc, #72]	@ (800847c <takeMachineID+0x2ac>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d045      	beq.n	80084c6 <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 800843a:	4a10      	ldr	r2, [pc, #64]	@ (800847c <takeMachineID+0x2ac>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008444:	4a15      	ldr	r2, [pc, #84]	@ (800849c <takeMachineID+0x2cc>)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4413      	add	r3, r2
 800844a:	2200      	movs	r2, #0
 800844c:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b05      	cmp	r3, #5
 8008452:	dd03      	ble.n	800845c <takeMachineID+0x28c>
                	writeLoc--;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3b01      	subs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
 800845a:	e004      	b.n	8008466 <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b04      	cmp	r3, #4
 8008460:	dc01      	bgt.n	8008466 <takeMachineID+0x296>
                	writeLoc = 5;
 8008462:	2305      	movs	r3, #5
 8008464:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	dd19      	ble.n	80084a0 <takeMachineID+0x2d0>
                	arrayPos--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3b01      	subs	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	60bb      	str	r3, [r7, #8]
 8008478:	e01a      	b.n	80084b0 <takeMachineID+0x2e0>
 800847a:	bf00      	nop
 800847c:	20001268 	.word	0x20001268
 8008480:	20000000 	.word	0x20000000
 8008484:	40010800 	.word	0x40010800
 8008488:	20001dec 	.word	0x20001dec
 800848c:	20001e00 	.word	0x20001e00
 8008490:	20001dc4 	.word	0x20001dc4
 8008494:	20001dd8 	.word	0x20001dd8
 8008498:	40011000 	.word	0x40011000
 800849c:	200011f0 	.word	0x200011f0
                } else if(arrayPos < 0) {
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	da04      	bge.n	80084b0 <takeMachineID+0x2e0>
                	arrayPos = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 80084aa:	4b0c      	ldr	r3, [pc, #48]	@ (80084dc <takeMachineID+0x30c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	3305      	adds	r3, #5
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	4619      	mov	r1, r3
 80084ba:	2001      	movs	r0, #1
 80084bc:	f000 fedc 	bl	8009278 <lcd_delete_char>
                HAL_Delay(50);
 80084c0:	2032      	movs	r0, #50	@ 0x32
 80084c2:	f001 fc19 	bl	8009cf8 <HAL_Delay>
            }

            HAL_Delay(150);
 80084c6:	2096      	movs	r0, #150	@ 0x96
 80084c8:	f001 fc16 	bl	8009cf8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	2002      	movs	r0, #2
 80084d4:	f000 fe7b 	bl	80091ce <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80084d8:	e692      	b.n	8008200 <takeMachineID+0x30>
 80084da:	bf00      	nop
 80084dc:	20000000 	.word	0x20000000

080084e0 <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80084ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008564 <ssidConfirmation+0x84>)
 80084ec:	2101      	movs	r1, #1
 80084ee:	2001      	movs	r0, #1
 80084f0:	f000 fe8c 	bl	800920c <lcd_print>

	while(loopVal == 1) {
 80084f4:	e012      	b.n	800851c <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80084f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008568 <ssidConfirmation+0x88>)
 80084f8:	2101      	movs	r1, #1
 80084fa:	2002      	movs	r0, #2
 80084fc:	f000 fe86 	bl	800920c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008500:	2102      	movs	r1, #2
 8008502:	481a      	ldr	r0, [pc, #104]	@ (800856c <ssidConfirmation+0x8c>)
 8008504:	f002 f9c8 	bl	800a898 <HAL_GPIO_ReadPin>
 8008508:	4603      	mov	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <ssidConfirmation+0x32>
			loopVal = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8008512:	4a17      	ldr	r2, [pc, #92]	@ (8008570 <ssidConfirmation+0x90>)
 8008514:	2101      	movs	r1, #1
 8008516:	2001      	movs	r0, #1
 8008518:	f000 fe78 	bl	800920c <lcd_print>
	while(loopVal == 1) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d0e9      	beq.n	80084f6 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8008522:	2000      	movs	r0, #0
 8008524:	f000 fed0 	bl	80092c8 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008528:	4811      	ldr	r0, [pc, #68]	@ (8008570 <ssidConfirmation+0x90>)
 800852a:	f7f7 fe7b 	bl	8000224 <strlen>
 800852e:	4603      	mov	r3, r0
 8008530:	2b14      	cmp	r3, #20
 8008532:	d90f      	bls.n	8008554 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008534:	4a0f      	ldr	r2, [pc, #60]	@ (8008574 <ssidConfirmation+0x94>)
 8008536:	2101      	movs	r1, #1
 8008538:	2001      	movs	r0, #1
 800853a:	f000 fe67 	bl	800920c <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800853e:	4a0e      	ldr	r2, [pc, #56]	@ (8008578 <ssidConfirmation+0x98>)
 8008540:	2101      	movs	r1, #1
 8008542:	2002      	movs	r0, #2
 8008544:	f000 fe62 	bl	800920c <lcd_print>
        HAL_Delay(1250);
 8008548:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800854c:	f001 fbd4 	bl	8009cf8 <HAL_Delay>

        return 0;
 8008550:	2300      	movs	r3, #0
 8008552:	e003      	b.n	800855c <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008554:	2001      	movs	r0, #1
 8008556:	f7f8 f8a5 	bl	80006a4 <saveEEPROM>

    	return 1;
 800855a:	2301      	movs	r3, #1
    }
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	0800f454 	.word	0x0800f454
 8008568:	20001f04 	.word	0x20001f04
 800856c:	40010800 	.word	0x40010800
 8008570:	20001274 	.word	0x20001274
 8008574:	20001e14 	.word	0x20001e14
 8008578:	20001e28 	.word	0x20001e28

0800857c <takeWifiSSID>:

void takeWifiSSID() {
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8008582:	2001      	movs	r0, #1
 8008584:	f000 fea0 	bl	80092c8 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8008588:	2210      	movs	r2, #16
 800858a:	2100      	movs	r1, #0
 800858c:	48a4      	ldr	r0, [pc, #656]	@ (8008820 <takeWifiSSID+0x2a4>)
 800858e:	f005 fcd9 	bl	800df44 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008592:	2301      	movs	r3, #1
 8008594:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008596:	2307      	movs	r3, #7
 8008598:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800859a:	2301      	movs	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800859e:	2300      	movs	r3, #0
 80085a0:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80085a2:	4ba0      	ldr	r3, [pc, #640]	@ (8008824 <takeWifiSSID+0x2a8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80085a8:	2101      	movs	r1, #1
 80085aa:	2002      	movs	r0, #2
 80085ac:	f7f8 ff54 	bl	8001458 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80085b0:	2108      	movs	r1, #8
 80085b2:	489d      	ldr	r0, [pc, #628]	@ (8008828 <takeWifiSSID+0x2ac>)
 80085b4:	f002 f970 	bl	800a898 <HAL_GPIO_ReadPin>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d106      	bne.n	80085cc <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80085be:	f7ff ff8f 	bl	80084e0 <ssidConfirmation>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f040 8126 	bne.w	8008816 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80085ca:	e7da      	b.n	8008582 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80085cc:	2101      	movs	r1, #1
 80085ce:	4896      	ldr	r0, [pc, #600]	@ (8008828 <takeWifiSSID+0x2ac>)
 80085d0:	f002 f962 	bl	800a898 <HAL_GPIO_ReadPin>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d14d      	bne.n	8008676 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b50      	cmp	r3, #80	@ 0x50
 80085de:	dd01      	ble.n	80085e4 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80085e0:	2301      	movs	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d13f      	bne.n	800866a <takeWifiSSID+0xee>
            	if(page == 1) {
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d109      	bne.n	8008604 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 80085f0:	2301      	movs	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
            		page++;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	3301      	adds	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80085fa:	2102      	movs	r1, #2
 80085fc:	2002      	movs	r0, #2
 80085fe:	f7f8 ff2b 	bl	8001458 <printTemplate>
 8008602:	e035      	b.n	8008670 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d109      	bne.n	800861e <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
            		page++;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	3301      	adds	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008614:	2103      	movs	r1, #3
 8008616:	2002      	movs	r0, #2
 8008618:	f7f8 ff1e 	bl	8001458 <printTemplate>
 800861c:	e028      	b.n	8008670 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b03      	cmp	r3, #3
 8008622:	d109      	bne.n	8008638 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008624:	2301      	movs	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]
            		page++;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	3301      	adds	r3, #1
 800862c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800862e:	2104      	movs	r1, #4
 8008630:	2002      	movs	r0, #2
 8008632:	f7f8 ff11 	bl	8001458 <printTemplate>
 8008636:	e01b      	b.n	8008670 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b04      	cmp	r3, #4
 800863c:	d109      	bne.n	8008652 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800863e:	2301      	movs	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]
            		page++;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	3301      	adds	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008648:	2105      	movs	r1, #5
 800864a:	2002      	movs	r0, #2
 800864c:	f7f8 ff04 	bl	8001458 <printTemplate>
 8008650:	e00e      	b.n	8008670 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b05      	cmp	r3, #5
 8008656:	d10b      	bne.n	8008670 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8008658:	2301      	movs	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800865c:	2301      	movs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008660:	2101      	movs	r1, #1
 8008662:	2002      	movs	r0, #2
 8008664:	f7f8 fef8 	bl	8001458 <printTemplate>
 8008668:	e002      	b.n	8008670 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008670:	2096      	movs	r0, #150	@ 0x96
 8008672:	f001 fb41 	bl	8009cf8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008676:	2108      	movs	r1, #8
 8008678:	486c      	ldr	r0, [pc, #432]	@ (800882c <takeWifiSSID+0x2b0>)
 800867a:	f002 f90d 	bl	800a898 <HAL_GPIO_ReadPin>
 800867e:	4603      	mov	r3, r0
 8008680:	2b01      	cmp	r3, #1
 8008682:	d149      	bne.n	8008718 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dc01      	bgt.n	800868e <takeWifiSSID+0x112>
        		cursorPosition = 80;
 800868a:	2350      	movs	r3, #80	@ 0x50
 800868c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d13b      	bne.n	800870c <takeWifiSSID+0x190>
            	if(page == 1) {
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d108      	bne.n	80086ac <takeWifiSSID+0x130>
            		cursorPosition = 16;
 800869a:	2310      	movs	r3, #16
 800869c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800869e:	2305      	movs	r3, #5
 80086a0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80086a2:	2105      	movs	r1, #5
 80086a4:	2002      	movs	r0, #2
 80086a6:	f7f8 fed7 	bl	8001458 <printTemplate>
 80086aa:	e032      	b.n	8008712 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d108      	bne.n	80086c4 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80086b2:	2310      	movs	r3, #16
 80086b4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80086ba:	2101      	movs	r1, #1
 80086bc:	2002      	movs	r0, #2
 80086be:	f7f8 fecb 	bl	8001458 <printTemplate>
 80086c2:	e026      	b.n	8008712 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d108      	bne.n	80086dc <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80086ca:	2310      	movs	r3, #16
 80086cc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80086ce:	2302      	movs	r3, #2
 80086d0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80086d2:	2102      	movs	r1, #2
 80086d4:	2002      	movs	r0, #2
 80086d6:	f7f8 febf 	bl	8001458 <printTemplate>
 80086da:	e01a      	b.n	8008712 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d108      	bne.n	80086f4 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80086e2:	2310      	movs	r3, #16
 80086e4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80086e6:	2303      	movs	r3, #3
 80086e8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80086ea:	2103      	movs	r1, #3
 80086ec:	2002      	movs	r0, #2
 80086ee:	f7f8 feb3 	bl	8001458 <printTemplate>
 80086f2:	e00e      	b.n	8008712 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d10b      	bne.n	8008712 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 80086fa:	2310      	movs	r3, #16
 80086fc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80086fe:	2304      	movs	r3, #4
 8008700:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008702:	2104      	movs	r1, #4
 8008704:	2002      	movs	r0, #2
 8008706:	f7f8 fea7 	bl	8001458 <printTemplate>
 800870a:	e002      	b.n	8008712 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3b01      	subs	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008712:	2096      	movs	r0, #150	@ 0x96
 8008714:	f001 faf0 	bl	8009cf8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008718:	2102      	movs	r1, #2
 800871a:	4843      	ldr	r0, [pc, #268]	@ (8008828 <takeWifiSSID+0x2ac>)
 800871c:	f002 f8bc 	bl	800a898 <HAL_GPIO_ReadPin>
 8008720:	4603      	mov	r3, r0
 8008722:	2b01      	cmp	r3, #1
 8008724:	d12f      	bne.n	8008786 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	b2d9      	uxtb	r1, r3
 800872a:	4a41      	ldr	r2, [pc, #260]	@ (8008830 <takeWifiSSID+0x2b4>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4413      	add	r3, r2
 8008730:	460a      	mov	r2, r1
 8008732:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008734:	4a3f      	ldr	r2, [pc, #252]	@ (8008834 <takeWifiSSID+0x2b8>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	7819      	ldrb	r1, [r3, #0]
 800873c:	4a38      	ldr	r2, [pc, #224]	@ (8008820 <takeWifiSSID+0x2a4>)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4413      	add	r3, r2
 8008742:	460a      	mov	r2, r1
 8008744:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	b2d9      	uxtb	r1, r3
 800874a:	4a3a      	ldr	r2, [pc, #232]	@ (8008834 <takeWifiSSID+0x2b8>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	2001      	movs	r0, #1
 8008756:	f000 fd6e 	bl	8009236 <lcd_print_char>

            writeLoc++;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	3301      	adds	r3, #1
 800875e:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	3301      	adds	r3, #1
 8008764:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3301      	adds	r3, #1
 800876a:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800876c:	4a30      	ldr	r2, [pc, #192]	@ (8008830 <takeWifiSSID+0x2b4>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8008776:	4a2a      	ldr	r2, [pc, #168]	@ (8008820 <takeWifiSSID+0x2a4>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4413      	add	r3, r2
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008780:	2096      	movs	r0, #150	@ 0x96
 8008782:	f001 fab9 	bl	8009cf8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008786:	2104      	movs	r1, #4
 8008788:	4827      	ldr	r0, [pc, #156]	@ (8008828 <takeWifiSSID+0x2ac>)
 800878a:	f002 f885 	bl	800a898 <HAL_GPIO_ReadPin>
 800878e:	4603      	mov	r3, r0
 8008790:	2b01      	cmp	r3, #1
 8008792:	d139      	bne.n	8008808 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008794:	4b22      	ldr	r3, [pc, #136]	@ (8008820 <takeWifiSSID+0x2a4>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d032      	beq.n	8008802 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 800879c:	4a24      	ldr	r2, [pc, #144]	@ (8008830 <takeWifiSSID+0x2b4>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80087a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008820 <takeWifiSSID+0x2a4>)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4413      	add	r3, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b07      	cmp	r3, #7
 80087b4:	dd03      	ble.n	80087be <takeWifiSSID+0x242>
        			writeLoc--;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	e004      	b.n	80087c8 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b06      	cmp	r3, #6
 80087c2:	dc01      	bgt.n	80087c8 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80087c4:	2307      	movs	r3, #7
 80087c6:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	dd06      	ble.n	80087dc <takeWifiSSID+0x260>
        			arrayPosition--;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	607b      	str	r3, [r7, #4]
 80087da:	e007      	b.n	80087ec <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da04      	bge.n	80087ec <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80087e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008824 <takeWifiSSID+0x2a8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	3307      	adds	r3, #7
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	4619      	mov	r1, r3
 80087f6:	2001      	movs	r0, #1
 80087f8:	f000 fd3e 	bl	8009278 <lcd_delete_char>
        		HAL_Delay(50);
 80087fc:	2032      	movs	r0, #50	@ 0x32
 80087fe:	f001 fa7b 	bl	8009cf8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008802:	2096      	movs	r0, #150	@ 0x96
 8008804:	f001 fa78 	bl	8009cf8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	4619      	mov	r1, r3
 800880e:	2002      	movs	r0, #2
 8008810:	f000 fcdd 	bl	80091ce <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008814:	e6cc      	b.n	80085b0 <takeWifiSSID+0x34>
        		break;
 8008816:	bf00      	nop
    }
}
 8008818:	bf00      	nop
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20001274 	.word	0x20001274
 8008824:	20000004 	.word	0x20000004
 8008828:	40010800 	.word	0x40010800
 800882c:	40011000 	.word	0x40011000
 8008830:	200011f0 	.word	0x200011f0
 8008834:	20000018 	.word	0x20000018

08008838 <passConfirmation>:

uint8_t passConfirmation() {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800883e:	2301      	movs	r3, #1
 8008840:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008842:	4a1e      	ldr	r2, [pc, #120]	@ (80088bc <passConfirmation+0x84>)
 8008844:	2101      	movs	r1, #1
 8008846:	2001      	movs	r0, #1
 8008848:	f000 fce0 	bl	800920c <lcd_print>

	while(loopVal == 1) {
 800884c:	e012      	b.n	8008874 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800884e:	4a1c      	ldr	r2, [pc, #112]	@ (80088c0 <passConfirmation+0x88>)
 8008850:	2101      	movs	r1, #1
 8008852:	2002      	movs	r0, #2
 8008854:	f000 fcda 	bl	800920c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008858:	2102      	movs	r1, #2
 800885a:	481a      	ldr	r0, [pc, #104]	@ (80088c4 <passConfirmation+0x8c>)
 800885c:	f002 f81c 	bl	800a898 <HAL_GPIO_ReadPin>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <passConfirmation+0x32>
			loopVal = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 800886a:	4a17      	ldr	r2, [pc, #92]	@ (80088c8 <passConfirmation+0x90>)
 800886c:	2101      	movs	r1, #1
 800886e:	2001      	movs	r0, #1
 8008870:	f000 fccc 	bl	800920c <lcd_print>
	while(loopVal == 1) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d0e9      	beq.n	800884e <passConfirmation+0x16>
	}

    lcd_cursor(0);
 800887a:	2000      	movs	r0, #0
 800887c:	f000 fd24 	bl	80092c8 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8008880:	4811      	ldr	r0, [pc, #68]	@ (80088c8 <passConfirmation+0x90>)
 8008882:	f7f7 fccf 	bl	8000224 <strlen>
 8008886:	4603      	mov	r3, r0
 8008888:	2b14      	cmp	r3, #20
 800888a:	d90f      	bls.n	80088ac <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 800888c:	4a0f      	ldr	r2, [pc, #60]	@ (80088cc <passConfirmation+0x94>)
 800888e:	2101      	movs	r1, #1
 8008890:	2001      	movs	r0, #1
 8008892:	f000 fcbb 	bl	800920c <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008896:	4a0e      	ldr	r2, [pc, #56]	@ (80088d0 <passConfirmation+0x98>)
 8008898:	2101      	movs	r1, #1
 800889a:	2002      	movs	r0, #2
 800889c:	f000 fcb6 	bl	800920c <lcd_print>
        HAL_Delay(1250);
 80088a0:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80088a4:	f001 fa28 	bl	8009cf8 <HAL_Delay>

        return 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e003      	b.n	80088b4 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80088ac:	2001      	movs	r0, #1
 80088ae:	f7f7 fef9 	bl	80006a4 <saveEEPROM>

    	return 1;
 80088b2:	2301      	movs	r3, #1
    }
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	0800f454 	.word	0x0800f454
 80088c0:	20001f04 	.word	0x20001f04
 80088c4:	40010800 	.word	0x40010800
 80088c8:	20001284 	.word	0x20001284
 80088cc:	20001e3c 	.word	0x20001e3c
 80088d0:	20001e50 	.word	0x20001e50

080088d4 <takeWifiPass>:

void takeWifiPass() {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80088da:	2001      	movs	r0, #1
 80088dc:	f000 fcf4 	bl	80092c8 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80088e0:	2210      	movs	r2, #16
 80088e2:	2100      	movs	r1, #0
 80088e4:	48a4      	ldr	r0, [pc, #656]	@ (8008b78 <takeWifiPass+0x2a4>)
 80088e6:	f005 fb2d 	bl	800df44 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80088ea:	2301      	movs	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80088ee:	2307      	movs	r3, #7
 80088f0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80088f2:	2301      	movs	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80088f6:	2300      	movs	r3, #0
 80088f8:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80088fa:	4ba0      	ldr	r3, [pc, #640]	@ (8008b7c <takeWifiPass+0x2a8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008900:	2101      	movs	r1, #1
 8008902:	2003      	movs	r0, #3
 8008904:	f7f8 fda8 	bl	8001458 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008908:	2108      	movs	r1, #8
 800890a:	489d      	ldr	r0, [pc, #628]	@ (8008b80 <takeWifiPass+0x2ac>)
 800890c:	f001 ffc4 	bl	800a898 <HAL_GPIO_ReadPin>
 8008910:	4603      	mov	r3, r0
 8008912:	2b01      	cmp	r3, #1
 8008914:	d106      	bne.n	8008924 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008916:	f7ff ff8f 	bl	8008838 <passConfirmation>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8126 	bne.w	8008b6e <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008922:	e7da      	b.n	80088da <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008924:	2101      	movs	r1, #1
 8008926:	4896      	ldr	r0, [pc, #600]	@ (8008b80 <takeWifiPass+0x2ac>)
 8008928:	f001 ffb6 	bl	800a898 <HAL_GPIO_ReadPin>
 800892c:	4603      	mov	r3, r0
 800892e:	2b01      	cmp	r3, #1
 8008930:	d14d      	bne.n	80089ce <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b50      	cmp	r3, #80	@ 0x50
 8008936:	dd01      	ble.n	800893c <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008938:	2301      	movs	r3, #1
 800893a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b10      	cmp	r3, #16
 8008940:	d13f      	bne.n	80089c2 <takeWifiPass+0xee>
            	if(page == 1) {
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d109      	bne.n	800895c <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008948:	2301      	movs	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
            		page++;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	3301      	adds	r3, #1
 8008950:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008952:	2102      	movs	r1, #2
 8008954:	2003      	movs	r0, #3
 8008956:	f7f8 fd7f 	bl	8001458 <printTemplate>
 800895a:	e035      	b.n	80089c8 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b02      	cmp	r3, #2
 8008960:	d109      	bne.n	8008976 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8008962:	2301      	movs	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]
            		page++;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	3301      	adds	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800896c:	2103      	movs	r1, #3
 800896e:	2003      	movs	r0, #3
 8008970:	f7f8 fd72 	bl	8001458 <printTemplate>
 8008974:	e028      	b.n	80089c8 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b03      	cmp	r3, #3
 800897a:	d109      	bne.n	8008990 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	3301      	adds	r3, #1
 8008984:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008986:	2104      	movs	r1, #4
 8008988:	2003      	movs	r0, #3
 800898a:	f7f8 fd65 	bl	8001458 <printTemplate>
 800898e:	e01b      	b.n	80089c8 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b04      	cmp	r3, #4
 8008994:	d109      	bne.n	80089aa <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008996:	2301      	movs	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
            		page++;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	3301      	adds	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80089a0:	2105      	movs	r1, #5
 80089a2:	2003      	movs	r0, #3
 80089a4:	f7f8 fd58 	bl	8001458 <printTemplate>
 80089a8:	e00e      	b.n	80089c8 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d10b      	bne.n	80089c8 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80089b8:	2101      	movs	r1, #1
 80089ba:	2003      	movs	r0, #3
 80089bc:	f7f8 fd4c 	bl	8001458 <printTemplate>
 80089c0:	e002      	b.n	80089c8 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80089c8:	2096      	movs	r0, #150	@ 0x96
 80089ca:	f001 f995 	bl	8009cf8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80089ce:	2108      	movs	r1, #8
 80089d0:	486c      	ldr	r0, [pc, #432]	@ (8008b84 <takeWifiPass+0x2b0>)
 80089d2:	f001 ff61 	bl	800a898 <HAL_GPIO_ReadPin>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d149      	bne.n	8008a70 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	dc01      	bgt.n	80089e6 <takeWifiPass+0x112>
        		cursorPosition = 80;
 80089e2:	2350      	movs	r3, #80	@ 0x50
 80089e4:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d13b      	bne.n	8008a64 <takeWifiPass+0x190>
            	if(page == 1) {
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d108      	bne.n	8008a04 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80089f2:	2310      	movs	r3, #16
 80089f4:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80089f6:	2305      	movs	r3, #5
 80089f8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80089fa:	2105      	movs	r1, #5
 80089fc:	2003      	movs	r0, #3
 80089fe:	f7f8 fd2b 	bl	8001458 <printTemplate>
 8008a02:	e032      	b.n	8008a6a <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d108      	bne.n	8008a1c <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008a0a:	2310      	movs	r3, #16
 8008a0c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008a12:	2101      	movs	r1, #1
 8008a14:	2003      	movs	r0, #3
 8008a16:	f7f8 fd1f 	bl	8001458 <printTemplate>
 8008a1a:	e026      	b.n	8008a6a <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d108      	bne.n	8008a34 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008a22:	2310      	movs	r3, #16
 8008a24:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008a26:	2302      	movs	r3, #2
 8008a28:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	2003      	movs	r0, #3
 8008a2e:	f7f8 fd13 	bl	8001458 <printTemplate>
 8008a32:	e01a      	b.n	8008a6a <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d108      	bne.n	8008a4c <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008a3a:	2310      	movs	r3, #16
 8008a3c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008a42:	2103      	movs	r1, #3
 8008a44:	2003      	movs	r0, #3
 8008a46:	f7f8 fd07 	bl	8001458 <printTemplate>
 8008a4a:	e00e      	b.n	8008a6a <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d10b      	bne.n	8008a6a <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008a52:	2310      	movs	r3, #16
 8008a54:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008a56:	2304      	movs	r3, #4
 8008a58:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	2003      	movs	r0, #3
 8008a5e:	f7f8 fcfb 	bl	8001458 <printTemplate>
 8008a62:	e002      	b.n	8008a6a <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008a6a:	2096      	movs	r0, #150	@ 0x96
 8008a6c:	f001 f944 	bl	8009cf8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008a70:	2102      	movs	r1, #2
 8008a72:	4843      	ldr	r0, [pc, #268]	@ (8008b80 <takeWifiPass+0x2ac>)
 8008a74:	f001 ff10 	bl	800a898 <HAL_GPIO_ReadPin>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d12f      	bne.n	8008ade <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	b2d9      	uxtb	r1, r3
 8008a82:	4a41      	ldr	r2, [pc, #260]	@ (8008b88 <takeWifiPass+0x2b4>)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	460a      	mov	r2, r1
 8008a8a:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b8c <takeWifiPass+0x2b8>)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	7819      	ldrb	r1, [r3, #0]
 8008a94:	4a38      	ldr	r2, [pc, #224]	@ (8008b78 <takeWifiPass+0x2a4>)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	4413      	add	r3, r2
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	b2d9      	uxtb	r1, r3
 8008aa2:	4a3a      	ldr	r2, [pc, #232]	@ (8008b8c <takeWifiPass+0x2b8>)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	2001      	movs	r0, #1
 8008aae:	f000 fbc2 	bl	8009236 <lcd_print_char>

            writeLoc++;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008ac4:	4a30      	ldr	r2, [pc, #192]	@ (8008b88 <takeWifiPass+0x2b4>)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008ace:	4a2a      	ldr	r2, [pc, #168]	@ (8008b78 <takeWifiPass+0x2a4>)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008ad8:	2096      	movs	r0, #150	@ 0x96
 8008ada:	f001 f90d 	bl	8009cf8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008ade:	2104      	movs	r1, #4
 8008ae0:	4827      	ldr	r0, [pc, #156]	@ (8008b80 <takeWifiPass+0x2ac>)
 8008ae2:	f001 fed9 	bl	800a898 <HAL_GPIO_ReadPin>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d139      	bne.n	8008b60 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008aec:	4b22      	ldr	r3, [pc, #136]	@ (8008b78 <takeWifiPass+0x2a4>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d032      	beq.n	8008b5a <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008af4:	4a24      	ldr	r2, [pc, #144]	@ (8008b88 <takeWifiPass+0x2b4>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008afe:	4a1e      	ldr	r2, [pc, #120]	@ (8008b78 <takeWifiPass+0x2a4>)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4413      	add	r3, r2
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b07      	cmp	r3, #7
 8008b0c:	dd03      	ble.n	8008b16 <takeWifiPass+0x242>
        			writeLoc--;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	e004      	b.n	8008b20 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	dc01      	bgt.n	8008b20 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008b1c:	2307      	movs	r3, #7
 8008b1e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dd06      	ble.n	8008b34 <takeWifiPass+0x260>
        			arrayPosition--;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	e007      	b.n	8008b44 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	da04      	bge.n	8008b44 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b7c <takeWifiPass+0x2a8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	3307      	adds	r3, #7
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	2001      	movs	r0, #1
 8008b50:	f000 fb92 	bl	8009278 <lcd_delete_char>
        		HAL_Delay(50);
 8008b54:	2032      	movs	r0, #50	@ 0x32
 8008b56:	f001 f8cf 	bl	8009cf8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008b5a:	2096      	movs	r0, #150	@ 0x96
 8008b5c:	f001 f8cc 	bl	8009cf8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	2002      	movs	r0, #2
 8008b68:	f000 fb31 	bl	80091ce <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008b6c:	e6cc      	b.n	8008908 <takeWifiPass+0x34>
    	        break;
 8008b6e:	bf00      	nop
    }
}
 8008b70:	bf00      	nop
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20001284 	.word	0x20001284
 8008b7c:	20000008 	.word	0x20000008
 8008b80:	40010800 	.word	0x40010800
 8008b84:	40011000 	.word	0x40011000
 8008b88:	200011f0 	.word	0x200011f0
 8008b8c:	20000018 	.word	0x20000018

08008b90 <mergeData>:

char* mergeData() {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b09c      	sub	sp, #112	@ 0x70
 8008b94:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008b96:	2300      	movs	r3, #0
 8008b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008b9e:	2229      	movs	r2, #41	@ 0x29
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f005 f9ce 	bl	800df44 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8008d28 <mergeData+0x198>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	703b      	strb	r3, [r7, #0]
 8008bae:	4b5f      	ldr	r3, [pc, #380]	@ (8008d2c <mergeData+0x19c>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	707b      	strb	r3, [r7, #1]
 8008bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8008d30 <mergeData+0x1a0>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	70bb      	strb	r3, [r7, #2]
 8008bba:	4b5e      	ldr	r3, [pc, #376]	@ (8008d34 <mergeData+0x1a4>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	70fb      	strb	r3, [r7, #3]
 8008bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8008d38 <mergeData+0x1a8>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	713b      	strb	r3, [r7, #4]
 8008bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8008d3c <mergeData+0x1ac>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	717b      	strb	r3, [r7, #5]
 8008bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8008d40 <mergeData+0x1b0>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	71bb      	strb	r3, [r7, #6]
 8008bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8008d44 <mergeData+0x1b4>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
 8008bd8:	4b5b      	ldr	r3, [pc, #364]	@ (8008d48 <mergeData+0x1b8>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	723b      	strb	r3, [r7, #8]
 8008bde:	4b5b      	ldr	r3, [pc, #364]	@ (8008d4c <mergeData+0x1bc>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	727b      	strb	r3, [r7, #9]
 8008be4:	4b5a      	ldr	r3, [pc, #360]	@ (8008d50 <mergeData+0x1c0>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	72bb      	strb	r3, [r7, #10]
 8008bea:	4b5a      	ldr	r3, [pc, #360]	@ (8008d54 <mergeData+0x1c4>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	72fb      	strb	r3, [r7, #11]
 8008bf0:	4b59      	ldr	r3, [pc, #356]	@ (8008d58 <mergeData+0x1c8>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	733b      	strb	r3, [r7, #12]
 8008bf6:	4b59      	ldr	r3, [pc, #356]	@ (8008d5c <mergeData+0x1cc>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	737b      	strb	r3, [r7, #13]
 8008bfc:	4b58      	ldr	r3, [pc, #352]	@ (8008d60 <mergeData+0x1d0>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	73bb      	strb	r3, [r7, #14]
 8008c02:	4b58      	ldr	r3, [pc, #352]	@ (8008d64 <mergeData+0x1d4>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	73fb      	strb	r3, [r7, #15]
 8008c08:	4b57      	ldr	r3, [pc, #348]	@ (8008d68 <mergeData+0x1d8>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	743b      	strb	r3, [r7, #16]
 8008c0e:	4b57      	ldr	r3, [pc, #348]	@ (8008d6c <mergeData+0x1dc>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	747b      	strb	r3, [r7, #17]
 8008c14:	4b56      	ldr	r3, [pc, #344]	@ (8008d70 <mergeData+0x1e0>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	74bb      	strb	r3, [r7, #18]
 8008c1a:	4b56      	ldr	r3, [pc, #344]	@ (8008d74 <mergeData+0x1e4>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	74fb      	strb	r3, [r7, #19]
 8008c20:	4b55      	ldr	r3, [pc, #340]	@ (8008d78 <mergeData+0x1e8>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	753b      	strb	r3, [r7, #20]
 8008c26:	4b55      	ldr	r3, [pc, #340]	@ (8008d7c <mergeData+0x1ec>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	757b      	strb	r3, [r7, #21]
 8008c2c:	4b54      	ldr	r3, [pc, #336]	@ (8008d80 <mergeData+0x1f0>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	75bb      	strb	r3, [r7, #22]
 8008c32:	4b54      	ldr	r3, [pc, #336]	@ (8008d84 <mergeData+0x1f4>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	75fb      	strb	r3, [r7, #23]
 8008c38:	4b53      	ldr	r3, [pc, #332]	@ (8008d88 <mergeData+0x1f8>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	763b      	strb	r3, [r7, #24]
 8008c3e:	4b53      	ldr	r3, [pc, #332]	@ (8008d8c <mergeData+0x1fc>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	767b      	strb	r3, [r7, #25]
 8008c44:	4b52      	ldr	r3, [pc, #328]	@ (8008d90 <mergeData+0x200>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	76bb      	strb	r3, [r7, #26]
 8008c4a:	4b52      	ldr	r3, [pc, #328]	@ (8008d94 <mergeData+0x204>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	76fb      	strb	r3, [r7, #27]
 8008c50:	4b51      	ldr	r3, [pc, #324]	@ (8008d98 <mergeData+0x208>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	773b      	strb	r3, [r7, #28]
 8008c56:	4b51      	ldr	r3, [pc, #324]	@ (8008d9c <mergeData+0x20c>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008c5c:	4b50      	ldr	r3, [pc, #320]	@ (8008da0 <mergeData+0x210>)
 8008c5e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008c62:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008c64:	4b4e      	ldr	r3, [pc, #312]	@ (8008da0 <mergeData+0x210>)
 8008c66:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008c6a:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8008da0 <mergeData+0x210>)
 8008c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008c72:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008c76:	4b4a      	ldr	r3, [pc, #296]	@ (8008da0 <mergeData+0x210>)
 8008c78:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008c7c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008c80:	4b47      	ldr	r3, [pc, #284]	@ (8008da0 <mergeData+0x210>)
 8008c82:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008c86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008c8a:	4b45      	ldr	r3, [pc, #276]	@ (8008da0 <mergeData+0x210>)
 8008c8c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008c94:	4b42      	ldr	r3, [pc, #264]	@ (8008da0 <mergeData+0x210>)
 8008c96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008c9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008c9e:	4b40      	ldr	r3, [pc, #256]	@ (8008da0 <mergeData+0x210>)
 8008ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8008da0 <mergeData+0x210>)
 8008caa:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008cae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8008da0 <mergeData+0x210>)
 8008cb4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008cbc:	233c      	movs	r3, #60	@ 0x3c
 8008cbe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cc6:	e015      	b.n	8008cf4 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008cc8:	463a      	mov	r2, r7
 8008cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ccc:	4413      	add	r3, r2
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008cd6:	4933      	ldr	r1, [pc, #204]	@ (8008da4 <mergeData+0x214>)
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f005 f899 	bl	800de10 <siprintf>
	    strcat(combinedString, temp);
 8008cde:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008ce2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f005 f8f3 	bl	800ded4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf6:	2b28      	cmp	r3, #40	@ 0x28
 8008cf8:	d9e6      	bls.n	8008cc8 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008cfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f7 fa90 	bl	8000224 <strlen>
 8008d04:	4603      	mov	r3, r0
 8008d06:	3301      	adds	r3, #1
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f004 ffcb 	bl	800dca4 <malloc>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008d12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d16:	4619      	mov	r1, r3
 8008d18:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008d1a:	f005 f965 	bl	800dfe8 <strcpy>
	return result;
 8008d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3770      	adds	r7, #112	@ 0x70
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	200016cf 	.word	0x200016cf
 8008d2c:	200016c1 	.word	0x200016c1
 8008d30:	200016c4 	.word	0x200016c4
 8008d34:	200016c5 	.word	0x200016c5
 8008d38:	200016c6 	.word	0x200016c6
 8008d3c:	200016cd 	.word	0x200016cd
 8008d40:	200016c7 	.word	0x200016c7
 8008d44:	200016c8 	.word	0x200016c8
 8008d48:	200016cc 	.word	0x200016cc
 8008d4c:	200016c9 	.word	0x200016c9
 8008d50:	200016d9 	.word	0x200016d9
 8008d54:	200016ca 	.word	0x200016ca
 8008d58:	200016da 	.word	0x200016da
 8008d5c:	200016cb 	.word	0x200016cb
 8008d60:	200016db 	.word	0x200016db
 8008d64:	200016ce 	.word	0x200016ce
 8008d68:	200016d0 	.word	0x200016d0
 8008d6c:	200016d1 	.word	0x200016d1
 8008d70:	200016d2 	.word	0x200016d2
 8008d74:	200016d3 	.word	0x200016d3
 8008d78:	200016d4 	.word	0x200016d4
 8008d7c:	200016d5 	.word	0x200016d5
 8008d80:	200016d6 	.word	0x200016d6
 8008d84:	200016d7 	.word	0x200016d7
 8008d88:	200016d8 	.word	0x200016d8
 8008d8c:	200016dc 	.word	0x200016dc
 8008d90:	200016de 	.word	0x200016de
 8008d94:	200016b8 	.word	0x200016b8
 8008d98:	200016b9 	.word	0x200016b9
 8008d9c:	200016e0 	.word	0x200016e0
 8008da0:	200011f0 	.word	0x200011f0
 8008da4:	0800f468 	.word	0x0800f468

08008da8 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008dae:	4a13      	ldr	r2, [pc, #76]	@ (8008dfc <convertAndSendData+0x54>)
 8008db0:	2101      	movs	r1, #1
 8008db2:	2001      	movs	r0, #1
 8008db4:	f000 fa2a 	bl	800920c <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008db8:	4a11      	ldr	r2, [pc, #68]	@ (8008e00 <convertAndSendData+0x58>)
 8008dba:	2101      	movs	r1, #1
 8008dbc:	2002      	movs	r0, #2
 8008dbe:	f000 fa25 	bl	800920c <lcd_print>

	for(int i=0; i<2; i++) {
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	607b      	str	r3, [r7, #4]
 8008dc6:	e00c      	b.n	8008de2 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008dc8:	f7ff fee2 	bl	8008b90 <mergeData>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <convertAndSendData+0x5c>)
 8008dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8008e08 <convertAndSendData+0x60>)
 8008dd4:	490d      	ldr	r1, [pc, #52]	@ (8008e0c <convertAndSendData+0x64>)
 8008dd6:	480e      	ldr	r0, [pc, #56]	@ (8008e10 <convertAndSendData+0x68>)
 8008dd8:	f7f7 fe1a 	bl	8000a10 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	607b      	str	r3, [r7, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	ddef      	ble.n	8008dc8 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008de8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008dec:	f000 ff84 	bl	8009cf8 <HAL_Delay>
	lcd_clear();
 8008df0:	f000 fa38 	bl	8009264 <lcd_clear>
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20001d9c 	.word	0x20001d9c
 8008e00:	20001db0 	.word	0x20001db0
 8008e04:	20001284 	.word	0x20001284
 8008e08:	20001274 	.word	0x20001274
 8008e0c:	20001268 	.word	0x20001268
 8008e10:	20001fdc 	.word	0x20001fdc

08008e14 <iotSetup>:

void iotSetup() {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008e18:	4b13      	ldr	r3, [pc, #76]	@ (8008e68 <iotSetup+0x54>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d021      	beq.n	8008e64 <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008e20:	f000 f82e 	bl	8008e80 <checkEEPROM4ID>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d001      	beq.n	8008e2e <iotSetup+0x1a>
			takeMachineID();
 8008e2a:	f7ff f9d1 	bl	80081d0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008e2e:	480f      	ldr	r0, [pc, #60]	@ (8008e6c <iotSetup+0x58>)
 8008e30:	f7f7 f9f8 	bl	8000224 <strlen>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d801      	bhi.n	8008e3e <iotSetup+0x2a>
			takeWifiSSID();
 8008e3a:	f7ff fb9f 	bl	800857c <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008e3e:	480c      	ldr	r0, [pc, #48]	@ (8008e70 <iotSetup+0x5c>)
 8008e40:	f7f7 f9f0 	bl	8000224 <strlen>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d801      	bhi.n	8008e4e <iotSetup+0x3a>
			takeWifiPass();
 8008e4a:	f7ff fd43 	bl	80088d4 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008e4e:	4a09      	ldr	r2, [pc, #36]	@ (8008e74 <iotSetup+0x60>)
 8008e50:	4909      	ldr	r1, [pc, #36]	@ (8008e78 <iotSetup+0x64>)
 8008e52:	480a      	ldr	r0, [pc, #40]	@ (8008e7c <iotSetup+0x68>)
 8008e54:	f7f7 fdaa 	bl	80009ac <ESP8266_Init>
		HAL_Delay(500);
 8008e58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e5c:	f000 ff4c 	bl	8009cf8 <HAL_Delay>
		convertAndSendData();
 8008e60:	f7ff ffa2 	bl	8008da8 <convertAndSendData>
	}
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200016eb 	.word	0x200016eb
 8008e6c:	20001274 	.word	0x20001274
 8008e70:	20001284 	.word	0x20001284
 8008e74:	0800f46c 	.word	0x0800f46c
 8008e78:	0800f484 	.word	0x0800f484
 8008e7c:	20001fdc 	.word	0x20001fdc

08008e80 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008e86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec4 <checkEEPROM4ID+0x44>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008e90:	2300      	movs	r3, #0
 8008e92:	607b      	str	r3, [r7, #4]
 8008e94:	e00d      	b.n	8008eb2 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008e96:	4a0c      	ldr	r2, [pc, #48]	@ (8008ec8 <checkEEPROM4ID+0x48>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b0b      	cmp	r3, #11
 8008eb6:	ddee      	ble.n	8008e96 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	20000000 	.word	0x20000000
 8008ec8:	200011f0 	.word	0x200011f0

08008ecc <az5>:

int az5() {
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr
	...

08008edc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	f023 030f 	bic.w	r3, r3, #15
 8008eec:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008ef4:	7b7b      	ldrb	r3, [r7, #13]
 8008ef6:	f043 030c 	orr.w	r3, r3, #12
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008efe:	7b7b      	ldrb	r3, [r7, #13]
 8008f00:	f043 0308 	orr.w	r3, r3, #8
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008f08:	7b3b      	ldrb	r3, [r7, #12]
 8008f0a:	f043 030c 	orr.w	r3, r3, #12
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008f12:	7b3b      	ldrb	r3, [r7, #12]
 8008f14:	f043 0308 	orr.w	r3, r3, #8
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008f1c:	bf00      	nop
 8008f1e:	4825      	ldr	r0, [pc, #148]	@ (8008fb4 <lcd_send_cmd+0xd8>)
 8008f20:	f002 fae3 	bl	800b4ea <HAL_I2C_GetError>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d0f9      	beq.n	8008f1e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008f2a:	bf00      	nop
 8008f2c:	4821      	ldr	r0, [pc, #132]	@ (8008fb4 <lcd_send_cmd+0xd8>)
 8008f2e:	f002 facf 	bl	800b4d0 <HAL_I2C_GetState>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d1f9      	bne.n	8008f2c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008f38:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb8 <lcd_send_cmd+0xdc>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d116      	bne.n	8008f6e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
 8008f44:	e00f      	b.n	8008f66 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	3310      	adds	r3, #16
 8008f4a:	443b      	add	r3, r7
 8008f4c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	f022 0208 	bic.w	r2, r2, #8
 8008f56:	b2d2      	uxtb	r2, r2
 8008f58:	3310      	adds	r3, #16
 8008f5a:	443b      	add	r3, r7
 8008f5c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	3301      	adds	r3, #1
 8008f64:	73fb      	strb	r3, [r7, #15]
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d9ec      	bls.n	8008f46 <lcd_send_cmd+0x6a>
 8008f6c:	e015      	b.n	8008f9a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73bb      	strb	r3, [r7, #14]
 8008f72:	e00f      	b.n	8008f94 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	3310      	adds	r3, #16
 8008f78:	443b      	add	r3, r7
 8008f7a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	f042 0208 	orr.w	r2, r2, #8
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	3310      	adds	r3, #16
 8008f88:	443b      	add	r3, r7
 8008f8a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	3301      	adds	r3, #1
 8008f92:	73bb      	strb	r3, [r7, #14]
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d9ec      	bls.n	8008f74 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008f9a:	f107 0208 	add.w	r2, r7, #8
 8008f9e:	2364      	movs	r3, #100	@ 0x64
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	2304      	movs	r3, #4
 8008fa4:	214e      	movs	r1, #78	@ 0x4e
 8008fa6:	4803      	ldr	r0, [pc, #12]	@ (8008fb4 <lcd_send_cmd+0xd8>)
 8008fa8:	f001 fe32 	bl	800ac10 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20001f40 	.word	0x20001f40
 8008fb8:	20001f15 	.word	0x20001f15

08008fbc <lcd_send_data>:

void lcd_send_data (char data) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f023 030f 	bic.w	r3, r3, #15
 8008fcc:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008fd4:	7b7b      	ldrb	r3, [r7, #13]
 8008fd6:	f043 030d 	orr.w	r3, r3, #13
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008fde:	7b7b      	ldrb	r3, [r7, #13]
 8008fe0:	f043 0309 	orr.w	r3, r3, #9
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008fe8:	7b3b      	ldrb	r3, [r7, #12]
 8008fea:	f043 030d 	orr.w	r3, r3, #13
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008ff2:	7b3b      	ldrb	r3, [r7, #12]
 8008ff4:	f043 0309 	orr.w	r3, r3, #9
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ffc:	bf00      	nop
 8008ffe:	4825      	ldr	r0, [pc, #148]	@ (8009094 <lcd_send_data+0xd8>)
 8009000:	f002 fa73 	bl	800b4ea <HAL_I2C_GetError>
 8009004:	4603      	mov	r3, r0
 8009006:	2b04      	cmp	r3, #4
 8009008:	d0f9      	beq.n	8008ffe <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800900a:	bf00      	nop
 800900c:	4821      	ldr	r0, [pc, #132]	@ (8009094 <lcd_send_data+0xd8>)
 800900e:	f002 fa5f 	bl	800b4d0 <HAL_I2C_GetState>
 8009012:	4603      	mov	r3, r0
 8009014:	2b20      	cmp	r3, #32
 8009016:	d1f9      	bne.n	800900c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009018:	4b1f      	ldr	r3, [pc, #124]	@ (8009098 <lcd_send_data+0xdc>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d116      	bne.n	800904e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
 8009024:	e00f      	b.n	8009046 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	3310      	adds	r3, #16
 800902a:	443b      	add	r3, r7
 800902c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	f022 0208 	bic.w	r2, r2, #8
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	3310      	adds	r3, #16
 800903a:	443b      	add	r3, r7
 800903c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	3301      	adds	r3, #1
 8009044:	73fb      	strb	r3, [r7, #15]
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b03      	cmp	r3, #3
 800904a:	d9ec      	bls.n	8009026 <lcd_send_data+0x6a>
 800904c:	e015      	b.n	800907a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800904e:	2300      	movs	r3, #0
 8009050:	73bb      	strb	r3, [r7, #14]
 8009052:	e00f      	b.n	8009074 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	3310      	adds	r3, #16
 8009058:	443b      	add	r3, r7
 800905a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	f042 0208 	orr.w	r2, r2, #8
 8009064:	b2d2      	uxtb	r2, r2
 8009066:	3310      	adds	r3, #16
 8009068:	443b      	add	r3, r7
 800906a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	3301      	adds	r3, #1
 8009072:	73bb      	strb	r3, [r7, #14]
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d9ec      	bls.n	8009054 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800907a:	f107 0208 	add.w	r2, r7, #8
 800907e:	2364      	movs	r3, #100	@ 0x64
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	2304      	movs	r3, #4
 8009084:	214e      	movs	r1, #78	@ 0x4e
 8009086:	4803      	ldr	r0, [pc, #12]	@ (8009094 <lcd_send_data+0xd8>)
 8009088:	f001 fdc2 	bl	800ac10 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20001f40 	.word	0x20001f40
 8009098:	20001f15 	.word	0x20001f15

0800909c <lcd_send_string>:

void lcd_send_string (char *str) {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	while (*str) {
 80090a4:	e006      	b.n	80090b4 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff ff84 	bl	8008fbc <lcd_send_data>
	while (*str) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f4      	bne.n	80090a6 <lcd_send_string+0xa>
	}
}
 80090bc:	bf00      	nop
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <lcd_send_char>:

void lcd_send_char(char ch) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	f023 030f 	bic.w	r3, r3, #15
 80090d8:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80090e0:	7b7b      	ldrb	r3, [r7, #13]
 80090e2:	f043 030d 	orr.w	r3, r3, #13
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80090ea:	7b7b      	ldrb	r3, [r7, #13]
 80090ec:	f043 0309 	orr.w	r3, r3, #9
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80090f4:	7b3b      	ldrb	r3, [r7, #12]
 80090f6:	f043 030d 	orr.w	r3, r3, #13
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80090fe:	7b3b      	ldrb	r3, [r7, #12]
 8009100:	f043 0309 	orr.w	r3, r3, #9
 8009104:	b2db      	uxtb	r3, r3
 8009106:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009108:	bf00      	nop
 800910a:	4825      	ldr	r0, [pc, #148]	@ (80091a0 <lcd_send_char+0xd8>)
 800910c:	f002 f9ed 	bl	800b4ea <HAL_I2C_GetError>
 8009110:	4603      	mov	r3, r0
 8009112:	2b04      	cmp	r3, #4
 8009114:	d0f9      	beq.n	800910a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009116:	bf00      	nop
 8009118:	4821      	ldr	r0, [pc, #132]	@ (80091a0 <lcd_send_char+0xd8>)
 800911a:	f002 f9d9 	bl	800b4d0 <HAL_I2C_GetState>
 800911e:	4603      	mov	r3, r0
 8009120:	2b20      	cmp	r3, #32
 8009122:	d1f9      	bne.n	8009118 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009124:	4b1f      	ldr	r3, [pc, #124]	@ (80091a4 <lcd_send_char+0xdc>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d116      	bne.n	800915a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
 8009130:	e00f      	b.n	8009152 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	3310      	adds	r3, #16
 8009136:	443b      	add	r3, r7
 8009138:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	f022 0208 	bic.w	r2, r2, #8
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	3310      	adds	r3, #16
 8009146:	443b      	add	r3, r7
 8009148:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	3301      	adds	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b03      	cmp	r3, #3
 8009156:	d9ec      	bls.n	8009132 <lcd_send_char+0x6a>
 8009158:	e015      	b.n	8009186 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800915a:	2300      	movs	r3, #0
 800915c:	73bb      	strb	r3, [r7, #14]
 800915e:	e00f      	b.n	8009180 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	3310      	adds	r3, #16
 8009164:	443b      	add	r3, r7
 8009166:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	f042 0208 	orr.w	r2, r2, #8
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	3310      	adds	r3, #16
 8009174:	443b      	add	r3, r7
 8009176:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	3301      	adds	r3, #1
 800917e:	73bb      	strb	r3, [r7, #14]
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b03      	cmp	r3, #3
 8009184:	d9ec      	bls.n	8009160 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8009186:	f107 0208 	add.w	r2, r7, #8
 800918a:	2364      	movs	r3, #100	@ 0x64
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	2304      	movs	r3, #4
 8009190:	214e      	movs	r1, #78	@ 0x4e
 8009192:	4803      	ldr	r0, [pc, #12]	@ (80091a0 <lcd_send_char+0xd8>)
 8009194:	f001 fd3c 	bl	800ac10 <HAL_I2C_Master_Transmit>
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20001f40 	.word	0x20001f40
 80091a4:	20001f15 	.word	0x20001f15

080091a8 <lcd_init>:

void lcd_init (void) {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80091ac:	2002      	movs	r0, #2
 80091ae:	f7ff fe95 	bl	8008edc <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80091b2:	2028      	movs	r0, #40	@ 0x28
 80091b4:	f7ff fe92 	bl	8008edc <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80091b8:	200c      	movs	r0, #12
 80091ba:	f7ff fe8f 	bl	8008edc <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80091be:	2080      	movs	r0, #128	@ 0x80
 80091c0:	f7ff fe8c 	bl	8008edc <lcd_send_cmd>
	lcd_backlight(1);
 80091c4:	2001      	movs	r0, #1
 80091c6:	f000 f86d 	bl	80092a4 <lcd_backlight>
}
 80091ca:	bf00      	nop
 80091cc:	bd80      	pop	{r7, pc}

080091ce <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	4603      	mov	r3, r0
 80091d6:	460a      	mov	r2, r1
 80091d8:	71fb      	strb	r3, [r7, #7]
 80091da:	4613      	mov	r3, r2
 80091dc:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d106      	bne.n	80091f2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80091e4:	79bb      	ldrb	r3, [r7, #6]
 80091e6:	337f      	adds	r3, #127	@ 0x7f
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fe76 	bl	8008edc <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80091f0:	e008      	b.n	8009204 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d105      	bne.n	8009204 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80091f8:	79bb      	ldrb	r3, [r7, #6]
 80091fa:	3b41      	subs	r3, #65	@ 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fe6c 	bl	8008edc <lcd_send_cmd>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	603a      	str	r2, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
 8009218:	460b      	mov	r3, r1
 800921a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800921c:	79ba      	ldrb	r2, [r7, #6]
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff ffd3 	bl	80091ce <lcd_gotoxy>
	lcd_send_string(str);
 8009228:	6838      	ldr	r0, [r7, #0]
 800922a:	f7ff ff37 	bl	800909c <lcd_send_string>
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	4603      	mov	r3, r0
 800923e:	71fb      	strb	r3, [r7, #7]
 8009240:	460b      	mov	r3, r1
 8009242:	71bb      	strb	r3, [r7, #6]
 8009244:	4613      	mov	r3, r2
 8009246:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009248:	79ba      	ldrb	r2, [r7, #6]
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff ffbd 	bl	80091ce <lcd_gotoxy>
    lcd_send_char(ch);
 8009254:	797b      	ldrb	r3, [r7, #5]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ff36 	bl	80090c8 <lcd_send_char>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <lcd_clear>:

void lcd_clear(void) {
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009268:	2001      	movs	r0, #1
 800926a:	f7ff fe37 	bl	8008edc <lcd_send_cmd>
    HAL_Delay(2);
 800926e:	2002      	movs	r0, #2
 8009270:	f000 fd42 	bl	8009cf8 <HAL_Delay>
}
 8009274:	bf00      	nop
 8009276:	bd80      	pop	{r7, pc}

08009278 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	460a      	mov	r2, r1
 8009282:	71fb      	strb	r3, [r7, #7]
 8009284:	4613      	mov	r3, r2
 8009286:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009288:	79ba      	ldrb	r2, [r7, #6]
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff ff9d 	bl	80091ce <lcd_gotoxy>

    lcd_send_char(' ');
 8009294:	2020      	movs	r0, #32
 8009296:	f7ff ff17 	bl	80090c8 <lcd_send_char>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80092ae:	4a05      	ldr	r2, [pc, #20]	@ (80092c4 <lcd_backlight+0x20>)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80092b4:	2000      	movs	r0, #0
 80092b6:	f7ff fe11 	bl	8008edc <lcd_send_cmd>
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20001f15 	.word	0x20001f15

080092c8 <lcd_cursor>:

void lcd_cursor(int state) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d106      	bne.n	80092e4 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80092d6:	200e      	movs	r0, #14
 80092d8:	f7ff fe00 	bl	8008edc <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80092dc:	200f      	movs	r0, #15
 80092de:	f7ff fdfd 	bl	8008edc <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80092e2:	e002      	b.n	80092ea <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80092e4:	200c      	movs	r0, #12
 80092e6:	f7ff fdf9 	bl	8008edc <lcd_send_cmd>
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80092fc:	4b04      	ldr	r3, [pc, #16]	@ (8009310 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3301      	adds	r3, #1
 8009302:	4a03      	ldr	r2, [pc, #12]	@ (8009310 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009304:	6013      	str	r3, [r2, #0]
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr
 8009310:	20001698 	.word	0x20001698

08009314 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a07      	ldr	r2, [pc, #28]	@ (8009340 <HAL_UART_RxCpltCallback+0x2c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d107      	bne.n	8009336 <HAL_UART_RxCpltCallback+0x22>
        // UART1 RX Callback işlemleri
        Wifi_RxCallBack(&huart1);
 8009326:	4807      	ldr	r0, [pc, #28]	@ (8009344 <HAL_UART_RxCpltCallback+0x30>)
 8009328:	f7f7 fd9a 	bl	8000e60 <Wifi_RxCallBack>
        HAL_UART_Receive_IT(&huart1, (uint8_t *)esp8266_rx_buffer, 1);  // Sürekli veri alımı için interruptı tekrar aktif hale getir
 800932c:	2201      	movs	r2, #1
 800932e:	4906      	ldr	r1, [pc, #24]	@ (8009348 <HAL_UART_RxCpltCallback+0x34>)
 8009330:	4804      	ldr	r0, [pc, #16]	@ (8009344 <HAL_UART_RxCpltCallback+0x30>)
 8009332:	f003 fef7 	bl	800d124 <HAL_UART_Receive_IT>
    }
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40013800 	.word	0x40013800
 8009344:	20001fdc 	.word	0x20001fdc
 8009348:	20001298 	.word	0x20001298

0800934c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009350:	f000 fc70 	bl	8009c34 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009354:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009358:	f000 fcce 	bl	8009cf8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800935c:	f000 f89c 	bl	8009498 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009360:	f000 f9be 	bl	80096e0 <MX_GPIO_Init>
  MX_CAN_Init();
 8009364:	f000 f8de 	bl	8009524 <MX_CAN_Init>
  MX_I2C1_Init();
 8009368:	f000 f910 	bl	800958c <MX_I2C1_Init>
  MX_TIM1_Init();
 800936c:	f000 f93c 	bl	80095e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009370:	f000 f98c 	bl	800968c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009374:	2201      	movs	r2, #1
 8009376:	2140      	movs	r1, #64	@ 0x40
 8009378:	483e      	ldr	r0, [pc, #248]	@ (8009474 <main+0x128>)
 800937a:	f001 faa4 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800937e:	2201      	movs	r2, #1
 8009380:	2180      	movs	r1, #128	@ 0x80
 8009382:	483c      	ldr	r0, [pc, #240]	@ (8009474 <main+0x128>)
 8009384:	f001 fa9f 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009388:	200a      	movs	r0, #10
 800938a:	f000 fcb5 	bl	8009cf8 <HAL_Delay>
  lcd_init();
 800938e:	f7ff ff0b 	bl	80091a8 <lcd_init>
  HAL_Delay(10);
 8009392:	200a      	movs	r0, #10
 8009394:	f000 fcb0 	bl	8009cf8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009398:	4837      	ldr	r0, [pc, #220]	@ (8009478 <main+0x12c>)
 800939a:	f003 f947 	bl	800c62c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800939e:	bf00      	nop
 80093a0:	4836      	ldr	r0, [pc, #216]	@ (800947c <main+0x130>)
 80093a2:	f002 f8a2 	bl	800b4ea <HAL_I2C_GetError>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d0f9      	beq.n	80093a0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80093ac:	bf00      	nop
 80093ae:	4833      	ldr	r0, [pc, #204]	@ (800947c <main+0x130>)
 80093b0:	f002 f88e 	bl	800b4d0 <HAL_I2C_GetState>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d1f9      	bne.n	80093ae <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80093ba:	2200      	movs	r2, #0
 80093bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80093c0:	482c      	ldr	r0, [pc, #176]	@ (8009474 <main+0x128>)
 80093c2:	f001 fa80 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80093c6:	2200      	movs	r2, #0
 80093c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80093cc:	4829      	ldr	r0, [pc, #164]	@ (8009474 <main+0x128>)
 80093ce:	f001 fa7a 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80093d2:	2200      	movs	r2, #0
 80093d4:	2104      	movs	r1, #4
 80093d6:	4827      	ldr	r0, [pc, #156]	@ (8009474 <main+0x128>)
 80093d8:	f001 fa75 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80093dc:	2200      	movs	r2, #0
 80093de:	2102      	movs	r1, #2
 80093e0:	4824      	ldr	r0, [pc, #144]	@ (8009474 <main+0x128>)
 80093e2:	f001 fa70 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80093e6:	2200      	movs	r2, #0
 80093e8:	2101      	movs	r1, #1
 80093ea:	4822      	ldr	r0, [pc, #136]	@ (8009474 <main+0x128>)
 80093ec:	f001 fa6b 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80093f0:	2200      	movs	r2, #0
 80093f2:	2120      	movs	r1, #32
 80093f4:	4822      	ldr	r0, [pc, #136]	@ (8009480 <main+0x134>)
 80093f6:	f001 fa66 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80093fa:	2200      	movs	r2, #0
 80093fc:	2110      	movs	r1, #16
 80093fe:	4820      	ldr	r0, [pc, #128]	@ (8009480 <main+0x134>)
 8009400:	f001 fa61 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009404:	2200      	movs	r2, #0
 8009406:	2180      	movs	r1, #128	@ 0x80
 8009408:	481e      	ldr	r0, [pc, #120]	@ (8009484 <main+0x138>)
 800940a:	f001 fa5c 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800940e:	2200      	movs	r2, #0
 8009410:	2140      	movs	r1, #64	@ 0x40
 8009412:	481c      	ldr	r0, [pc, #112]	@ (8009484 <main+0x138>)
 8009414:	f001 fa57 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009418:	2200      	movs	r2, #0
 800941a:	2120      	movs	r1, #32
 800941c:	4819      	ldr	r0, [pc, #100]	@ (8009484 <main+0x138>)
 800941e:	f001 fa52 	bl	800a8c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009422:	2200      	movs	r2, #0
 8009424:	2110      	movs	r1, #16
 8009426:	4817      	ldr	r0, [pc, #92]	@ (8009484 <main+0x138>)
 8009428:	f001 fa4d 	bl	800a8c6 <HAL_GPIO_WritePin>

  i2cTest();
 800942c:	f7f7 ff66 	bl	80012fc <i2cTest>
  HAL_Delay(100);
 8009430:	2064      	movs	r0, #100	@ 0x64
 8009432:	f000 fc61 	bl	8009cf8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8009436:	4a14      	ldr	r2, [pc, #80]	@ (8009488 <main+0x13c>)
 8009438:	2101      	movs	r1, #1
 800943a:	2001      	movs	r0, #1
 800943c:	f7ff fee6 	bl	800920c <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009440:	4a12      	ldr	r2, [pc, #72]	@ (800948c <main+0x140>)
 8009442:	2101      	movs	r1, #1
 8009444:	2002      	movs	r0, #2
 8009446:	f7ff fee1 	bl	800920c <lcd_print>
  HAL_Delay(1000);
 800944a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800944e:	f000 fc53 	bl	8009cf8 <HAL_Delay>
  lcd_clear();
 8009452:	f7ff ff07 	bl	8009264 <lcd_clear>

  eepromKontrol();
 8009456:	f7f6 feed 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800945a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800945e:	f000 fc4b 	bl	8009cf8 <HAL_Delay>

  backLightTimer = millis;
 8009462:	4b0b      	ldr	r3, [pc, #44]	@ (8009490 <main+0x144>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a0b      	ldr	r2, [pc, #44]	@ (8009494 <main+0x148>)
 8009468:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 800946a:	f7ff fcd3 	bl	8008e14 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800946e:	f7fc fe35 	bl	80060dc <mainLoop>
 8009472:	e7fc      	b.n	800946e <main+0x122>
 8009474:	40010c00 	.word	0x40010c00
 8009478:	20001f94 	.word	0x20001f94
 800947c:	20001f40 	.word	0x20001f40
 8009480:	40011000 	.word	0x40011000
 8009484:	40010800 	.word	0x40010800
 8009488:	2000009c 	.word	0x2000009c
 800948c:	200000b0 	.word	0x200000b0
 8009490:	20001698 	.word	0x20001698
 8009494:	200016b4 	.word	0x200016b4

08009498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b090      	sub	sp, #64	@ 0x40
 800949c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800949e:	f107 0318 	add.w	r3, r7, #24
 80094a2:	2228      	movs	r2, #40	@ 0x28
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f004 fd4c 	bl	800df44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80094ac:	1d3b      	adds	r3, r7, #4
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	605a      	str	r2, [r3, #4]
 80094b4:	609a      	str	r2, [r3, #8]
 80094b6:	60da      	str	r2, [r3, #12]
 80094b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80094ba:	2301      	movs	r3, #1
 80094bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80094c4:	2300      	movs	r3, #0
 80094c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80094c8:	2301      	movs	r3, #1
 80094ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094cc:	2302      	movs	r3, #2
 80094ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80094d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80094da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094dc:	f107 0318 	add.w	r3, r7, #24
 80094e0:	4618      	mov	r0, r3
 80094e2:	f002 fc43 	bl	800bd6c <HAL_RCC_OscConfig>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80094ec:	f000 f9a2 	bl	8009834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094f0:	230f      	movs	r3, #15
 80094f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094f4:	2302      	movs	r3, #2
 80094f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80094fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009502:	2300      	movs	r3, #0
 8009504:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	2102      	movs	r1, #2
 800950a:	4618      	mov	r0, r3
 800950c:	f002 feb0 	bl	800c270 <HAL_RCC_ClockConfig>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8009516:	f000 f98d 	bl	8009834 <Error_Handler>
  }
}
 800951a:	bf00      	nop
 800951c:	3740      	adds	r7, #64	@ 0x40
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009528:	4b16      	ldr	r3, [pc, #88]	@ (8009584 <MX_CAN_Init+0x60>)
 800952a:	4a17      	ldr	r2, [pc, #92]	@ (8009588 <MX_CAN_Init+0x64>)
 800952c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800952e:	4b15      	ldr	r3, [pc, #84]	@ (8009584 <MX_CAN_Init+0x60>)
 8009530:	2210      	movs	r2, #16
 8009532:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009534:	4b13      	ldr	r3, [pc, #76]	@ (8009584 <MX_CAN_Init+0x60>)
 8009536:	2200      	movs	r2, #0
 8009538:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800953a:	4b12      	ldr	r3, [pc, #72]	@ (8009584 <MX_CAN_Init+0x60>)
 800953c:	2200      	movs	r2, #0
 800953e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009540:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <MX_CAN_Init+0x60>)
 8009542:	2200      	movs	r2, #0
 8009544:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009546:	4b0f      	ldr	r3, [pc, #60]	@ (8009584 <MX_CAN_Init+0x60>)
 8009548:	2200      	movs	r2, #0
 800954a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <MX_CAN_Init+0x60>)
 800954e:	2200      	movs	r2, #0
 8009550:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009552:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <MX_CAN_Init+0x60>)
 8009554:	2200      	movs	r2, #0
 8009556:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009558:	4b0a      	ldr	r3, [pc, #40]	@ (8009584 <MX_CAN_Init+0x60>)
 800955a:	2200      	movs	r2, #0
 800955c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800955e:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <MX_CAN_Init+0x60>)
 8009560:	2200      	movs	r2, #0
 8009562:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009564:	4b07      	ldr	r3, [pc, #28]	@ (8009584 <MX_CAN_Init+0x60>)
 8009566:	2200      	movs	r2, #0
 8009568:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800956a:	4b06      	ldr	r3, [pc, #24]	@ (8009584 <MX_CAN_Init+0x60>)
 800956c:	2200      	movs	r2, #0
 800956e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009570:	4804      	ldr	r0, [pc, #16]	@ (8009584 <MX_CAN_Init+0x60>)
 8009572:	f000 fbe5 	bl	8009d40 <HAL_CAN_Init>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800957c:	f000 f95a 	bl	8009834 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009580:	bf00      	nop
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20001f18 	.word	0x20001f18
 8009588:	40006400 	.word	0x40006400

0800958c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009590:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <MX_I2C1_Init+0x50>)
 8009592:	4a13      	ldr	r2, [pc, #76]	@ (80095e0 <MX_I2C1_Init+0x54>)
 8009594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009596:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <MX_I2C1_Init+0x50>)
 8009598:	4a12      	ldr	r2, [pc, #72]	@ (80095e4 <MX_I2C1_Init+0x58>)
 800959a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800959c:	4b0f      	ldr	r3, [pc, #60]	@ (80095dc <MX_I2C1_Init+0x50>)
 800959e:	2200      	movs	r2, #0
 80095a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80095a2:	4b0e      	ldr	r3, [pc, #56]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095a8:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80095ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095b0:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095bc:	4b07      	ldr	r3, [pc, #28]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095be:	2200      	movs	r2, #0
 80095c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095c2:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80095c8:	4804      	ldr	r0, [pc, #16]	@ (80095dc <MX_I2C1_Init+0x50>)
 80095ca:	f001 f9ad 	bl	800a928 <HAL_I2C_Init>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80095d4:	f000 f92e 	bl	8009834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80095d8:	bf00      	nop
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20001f40 	.word	0x20001f40
 80095e0:	40005400 	.word	0x40005400
 80095e4:	00061a80 	.word	0x00061a80

080095e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	605a      	str	r2, [r3, #4]
 80095f8:	609a      	str	r2, [r3, #8]
 80095fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095fc:	463b      	mov	r3, r7
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009604:	4b1f      	ldr	r3, [pc, #124]	@ (8009684 <MX_TIM1_Init+0x9c>)
 8009606:	4a20      	ldr	r2, [pc, #128]	@ (8009688 <MX_TIM1_Init+0xa0>)
 8009608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800960a:	4b1e      	ldr	r3, [pc, #120]	@ (8009684 <MX_TIM1_Init+0x9c>)
 800960c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009612:	4b1c      	ldr	r3, [pc, #112]	@ (8009684 <MX_TIM1_Init+0x9c>)
 8009614:	2200      	movs	r2, #0
 8009616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009618:	4b1a      	ldr	r3, [pc, #104]	@ (8009684 <MX_TIM1_Init+0x9c>)
 800961a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800961e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009620:	4b18      	ldr	r3, [pc, #96]	@ (8009684 <MX_TIM1_Init+0x9c>)
 8009622:	2200      	movs	r2, #0
 8009624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009626:	4b17      	ldr	r3, [pc, #92]	@ (8009684 <MX_TIM1_Init+0x9c>)
 8009628:	2200      	movs	r2, #0
 800962a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800962c:	4b15      	ldr	r3, [pc, #84]	@ (8009684 <MX_TIM1_Init+0x9c>)
 800962e:	2200      	movs	r2, #0
 8009630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009632:	4814      	ldr	r0, [pc, #80]	@ (8009684 <MX_TIM1_Init+0x9c>)
 8009634:	f002 ffaa 	bl	800c58c <HAL_TIM_Base_Init>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800963e:	f000 f8f9 	bl	8009834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009648:	f107 0308 	add.w	r3, r7, #8
 800964c:	4619      	mov	r1, r3
 800964e:	480d      	ldr	r0, [pc, #52]	@ (8009684 <MX_TIM1_Init+0x9c>)
 8009650:	f003 f954 	bl	800c8fc <HAL_TIM_ConfigClockSource>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800965a:	f000 f8eb 	bl	8009834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800965e:	2300      	movs	r3, #0
 8009660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009666:	463b      	mov	r3, r7
 8009668:	4619      	mov	r1, r3
 800966a:	4806      	ldr	r0, [pc, #24]	@ (8009684 <MX_TIM1_Init+0x9c>)
 800966c:	f003 fb42 	bl	800ccf4 <HAL_TIMEx_MasterConfigSynchronization>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009676:	f000 f8dd 	bl	8009834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20001f94 	.word	0x20001f94
 8009688:	40012c00 	.word	0x40012c00

0800968c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009690:	4b11      	ldr	r3, [pc, #68]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 8009692:	4a12      	ldr	r2, [pc, #72]	@ (80096dc <MX_USART1_UART_Init+0x50>)
 8009694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009696:	4b10      	ldr	r3, [pc, #64]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 8009698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800969c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800969e:	4b0e      	ldr	r3, [pc, #56]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80096a4:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096aa:	4b0b      	ldr	r3, [pc, #44]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096b0:	4b09      	ldr	r3, [pc, #36]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096b2:	220c      	movs	r2, #12
 80096b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096b6:	4b08      	ldr	r3, [pc, #32]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096bc:	4b06      	ldr	r3, [pc, #24]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096be:	2200      	movs	r2, #0
 80096c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096c2:	4805      	ldr	r0, [pc, #20]	@ (80096d8 <MX_USART1_UART_Init+0x4c>)
 80096c4:	f003 fb94 	bl	800cdf0 <HAL_UART_Init>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80096ce:	f000 f8b1 	bl	8009834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80096d2:	bf00      	nop
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20001fdc 	.word	0x20001fdc
 80096dc:	40013800 	.word	0x40013800

080096e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096e6:	f107 0310 	add.w	r3, r7, #16
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	605a      	str	r2, [r3, #4]
 80096f0:	609a      	str	r2, [r3, #8]
 80096f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096f4:	4b4b      	ldr	r3, [pc, #300]	@ (8009824 <MX_GPIO_Init+0x144>)
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	4a4a      	ldr	r2, [pc, #296]	@ (8009824 <MX_GPIO_Init+0x144>)
 80096fa:	f043 0310 	orr.w	r3, r3, #16
 80096fe:	6193      	str	r3, [r2, #24]
 8009700:	4b48      	ldr	r3, [pc, #288]	@ (8009824 <MX_GPIO_Init+0x144>)
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800970c:	4b45      	ldr	r3, [pc, #276]	@ (8009824 <MX_GPIO_Init+0x144>)
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	4a44      	ldr	r2, [pc, #272]	@ (8009824 <MX_GPIO_Init+0x144>)
 8009712:	f043 0320 	orr.w	r3, r3, #32
 8009716:	6193      	str	r3, [r2, #24]
 8009718:	4b42      	ldr	r3, [pc, #264]	@ (8009824 <MX_GPIO_Init+0x144>)
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f003 0320 	and.w	r3, r3, #32
 8009720:	60bb      	str	r3, [r7, #8]
 8009722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009724:	4b3f      	ldr	r3, [pc, #252]	@ (8009824 <MX_GPIO_Init+0x144>)
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	4a3e      	ldr	r2, [pc, #248]	@ (8009824 <MX_GPIO_Init+0x144>)
 800972a:	f043 0304 	orr.w	r3, r3, #4
 800972e:	6193      	str	r3, [r2, #24]
 8009730:	4b3c      	ldr	r3, [pc, #240]	@ (8009824 <MX_GPIO_Init+0x144>)
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800973c:	4b39      	ldr	r3, [pc, #228]	@ (8009824 <MX_GPIO_Init+0x144>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	4a38      	ldr	r2, [pc, #224]	@ (8009824 <MX_GPIO_Init+0x144>)
 8009742:	f043 0308 	orr.w	r3, r3, #8
 8009746:	6193      	str	r3, [r2, #24]
 8009748:	4b36      	ldr	r3, [pc, #216]	@ (8009824 <MX_GPIO_Init+0x144>)
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009754:	2200      	movs	r2, #0
 8009756:	21f0      	movs	r1, #240	@ 0xf0
 8009758:	4833      	ldr	r0, [pc, #204]	@ (8009828 <MX_GPIO_Init+0x148>)
 800975a:	f001 f8b4 	bl	800a8c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800975e:	2200      	movs	r2, #0
 8009760:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009764:	4831      	ldr	r0, [pc, #196]	@ (800982c <MX_GPIO_Init+0x14c>)
 8009766:	f001 f8ae 	bl	800a8c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800976a:	2200      	movs	r2, #0
 800976c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009770:	482f      	ldr	r0, [pc, #188]	@ (8009830 <MX_GPIO_Init+0x150>)
 8009772:	f001 f8a8 	bl	800a8c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009776:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800977a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800977c:	2300      	movs	r3, #0
 800977e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009780:	2300      	movs	r3, #0
 8009782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009784:	f107 0310 	add.w	r3, r7, #16
 8009788:	4619      	mov	r1, r3
 800978a:	4828      	ldr	r0, [pc, #160]	@ (800982c <MX_GPIO_Init+0x14c>)
 800978c:	f000 fe24 	bl	800a3d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009790:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009794:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800979a:	2300      	movs	r3, #0
 800979c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800979e:	f107 0310 	add.w	r3, r7, #16
 80097a2:	4619      	mov	r1, r3
 80097a4:	4820      	ldr	r0, [pc, #128]	@ (8009828 <MX_GPIO_Init+0x148>)
 80097a6:	f000 fe17 	bl	800a3d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80097aa:	23f0      	movs	r3, #240	@ 0xf0
 80097ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097ae:	2301      	movs	r3, #1
 80097b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097b6:	2302      	movs	r3, #2
 80097b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ba:	f107 0310 	add.w	r3, r7, #16
 80097be:	4619      	mov	r1, r3
 80097c0:	4819      	ldr	r0, [pc, #100]	@ (8009828 <MX_GPIO_Init+0x148>)
 80097c2:	f000 fe09 	bl	800a3d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80097c6:	f241 0330 	movw	r3, #4144	@ 0x1030
 80097ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097cc:	2301      	movs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097d4:	2302      	movs	r3, #2
 80097d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097d8:	f107 0310 	add.w	r3, r7, #16
 80097dc:	4619      	mov	r1, r3
 80097de:	4813      	ldr	r0, [pc, #76]	@ (800982c <MX_GPIO_Init+0x14c>)
 80097e0:	f000 fdfa 	bl	800a3d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80097e4:	f640 4307 	movw	r3, #3079	@ 0xc07
 80097e8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097ea:	2301      	movs	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097f2:	2302      	movs	r3, #2
 80097f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097f6:	f107 0310 	add.w	r3, r7, #16
 80097fa:	4619      	mov	r1, r3
 80097fc:	480c      	ldr	r0, [pc, #48]	@ (8009830 <MX_GPIO_Init+0x150>)
 80097fe:	f000 fdeb 	bl	800a3d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009802:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8009806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800980c:	2300      	movs	r3, #0
 800980e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009810:	f107 0310 	add.w	r3, r7, #16
 8009814:	4619      	mov	r1, r3
 8009816:	4806      	ldr	r0, [pc, #24]	@ (8009830 <MX_GPIO_Init+0x150>)
 8009818:	f000 fdde 	bl	800a3d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800981c:	bf00      	nop
 800981e:	3720      	adds	r7, #32
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	40021000 	.word	0x40021000
 8009828:	40010800 	.word	0x40010800
 800982c:	40011000 	.word	0x40011000
 8009830:	40010c00 	.word	0x40010c00

08009834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009838:	bf00      	nop
 800983a:	46bd      	mov	sp, r7
 800983c:	bc80      	pop	{r7}
 800983e:	4770      	bx	lr

08009840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009846:	4b15      	ldr	r3, [pc, #84]	@ (800989c <HAL_MspInit+0x5c>)
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	4a14      	ldr	r2, [pc, #80]	@ (800989c <HAL_MspInit+0x5c>)
 800984c:	f043 0301 	orr.w	r3, r3, #1
 8009850:	6193      	str	r3, [r2, #24]
 8009852:	4b12      	ldr	r3, [pc, #72]	@ (800989c <HAL_MspInit+0x5c>)
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	60bb      	str	r3, [r7, #8]
 800985c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800985e:	4b0f      	ldr	r3, [pc, #60]	@ (800989c <HAL_MspInit+0x5c>)
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	4a0e      	ldr	r2, [pc, #56]	@ (800989c <HAL_MspInit+0x5c>)
 8009864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009868:	61d3      	str	r3, [r2, #28]
 800986a:	4b0c      	ldr	r3, [pc, #48]	@ (800989c <HAL_MspInit+0x5c>)
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009876:	4b0a      	ldr	r3, [pc, #40]	@ (80098a0 <HAL_MspInit+0x60>)
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	4a04      	ldr	r2, [pc, #16]	@ (80098a0 <HAL_MspInit+0x60>)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr
 800989c:	40021000 	.word	0x40021000
 80098a0:	40010000 	.word	0x40010000

080098a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098ac:	f107 0310 	add.w	r3, r7, #16
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	605a      	str	r2, [r3, #4]
 80098b6:	609a      	str	r2, [r3, #8]
 80098b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a1c      	ldr	r2, [pc, #112]	@ (8009930 <HAL_CAN_MspInit+0x8c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d131      	bne.n	8009928 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80098c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009934 <HAL_CAN_MspInit+0x90>)
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009934 <HAL_CAN_MspInit+0x90>)
 80098ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80098ce:	61d3      	str	r3, [r2, #28]
 80098d0:	4b18      	ldr	r3, [pc, #96]	@ (8009934 <HAL_CAN_MspInit+0x90>)
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098dc:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <HAL_CAN_MspInit+0x90>)
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	4a14      	ldr	r2, [pc, #80]	@ (8009934 <HAL_CAN_MspInit+0x90>)
 80098e2:	f043 0304 	orr.w	r3, r3, #4
 80098e6:	6193      	str	r3, [r2, #24]
 80098e8:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <HAL_CAN_MspInit+0x90>)
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80098f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009902:	f107 0310 	add.w	r3, r7, #16
 8009906:	4619      	mov	r1, r3
 8009908:	480b      	ldr	r0, [pc, #44]	@ (8009938 <HAL_CAN_MspInit+0x94>)
 800990a:	f000 fd65 	bl	800a3d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800990e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009914:	2302      	movs	r3, #2
 8009916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009918:	2303      	movs	r3, #3
 800991a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800991c:	f107 0310 	add.w	r3, r7, #16
 8009920:	4619      	mov	r1, r3
 8009922:	4805      	ldr	r0, [pc, #20]	@ (8009938 <HAL_CAN_MspInit+0x94>)
 8009924:	f000 fd58 	bl	800a3d8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009928:	bf00      	nop
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	40006400 	.word	0x40006400
 8009934:	40021000 	.word	0x40021000
 8009938:	40010800 	.word	0x40010800

0800993c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009944:	f107 0310 	add.w	r3, r7, #16
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	605a      	str	r2, [r3, #4]
 800994e:	609a      	str	r2, [r3, #8]
 8009950:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a15      	ldr	r2, [pc, #84]	@ (80099ac <HAL_I2C_MspInit+0x70>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d123      	bne.n	80099a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800995c:	4b14      	ldr	r3, [pc, #80]	@ (80099b0 <HAL_I2C_MspInit+0x74>)
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	4a13      	ldr	r2, [pc, #76]	@ (80099b0 <HAL_I2C_MspInit+0x74>)
 8009962:	f043 0308 	orr.w	r3, r3, #8
 8009966:	6193      	str	r3, [r2, #24]
 8009968:	4b11      	ldr	r3, [pc, #68]	@ (80099b0 <HAL_I2C_MspInit+0x74>)
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f003 0308 	and.w	r3, r3, #8
 8009970:	60fb      	str	r3, [r7, #12]
 8009972:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009974:	23c0      	movs	r3, #192	@ 0xc0
 8009976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009978:	2312      	movs	r3, #18
 800997a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800997c:	2303      	movs	r3, #3
 800997e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009980:	f107 0310 	add.w	r3, r7, #16
 8009984:	4619      	mov	r1, r3
 8009986:	480b      	ldr	r0, [pc, #44]	@ (80099b4 <HAL_I2C_MspInit+0x78>)
 8009988:	f000 fd26 	bl	800a3d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800998c:	4b08      	ldr	r3, [pc, #32]	@ (80099b0 <HAL_I2C_MspInit+0x74>)
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	4a07      	ldr	r2, [pc, #28]	@ (80099b0 <HAL_I2C_MspInit+0x74>)
 8009992:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009996:	61d3      	str	r3, [r2, #28]
 8009998:	4b05      	ldr	r3, [pc, #20]	@ (80099b0 <HAL_I2C_MspInit+0x74>)
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80099a4:	bf00      	nop
 80099a6:	3720      	adds	r7, #32
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	40005400 	.word	0x40005400
 80099b0:	40021000 	.word	0x40021000
 80099b4:	40010c00 	.word	0x40010c00

080099b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a0a      	ldr	r2, [pc, #40]	@ (80099f0 <HAL_I2C_MspDeInit+0x38>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d10d      	bne.n	80099e6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80099ca:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <HAL_I2C_MspDeInit+0x3c>)
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	4a09      	ldr	r2, [pc, #36]	@ (80099f4 <HAL_I2C_MspDeInit+0x3c>)
 80099d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099d4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80099d6:	2140      	movs	r1, #64	@ 0x40
 80099d8:	4807      	ldr	r0, [pc, #28]	@ (80099f8 <HAL_I2C_MspDeInit+0x40>)
 80099da:	f000 fe91 	bl	800a700 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80099de:	2180      	movs	r1, #128	@ 0x80
 80099e0:	4805      	ldr	r0, [pc, #20]	@ (80099f8 <HAL_I2C_MspDeInit+0x40>)
 80099e2:	f000 fe8d 	bl	800a700 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40005400 	.word	0x40005400
 80099f4:	40021000 	.word	0x40021000
 80099f8:	40010c00 	.word	0x40010c00

080099fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a0d      	ldr	r2, [pc, #52]	@ (8009a40 <HAL_TIM_Base_MspInit+0x44>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d113      	bne.n	8009a36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <HAL_TIM_Base_MspInit+0x48>)
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	4a0c      	ldr	r2, [pc, #48]	@ (8009a44 <HAL_TIM_Base_MspInit+0x48>)
 8009a14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009a18:	6193      	str	r3, [r2, #24]
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a44 <HAL_TIM_Base_MspInit+0x48>)
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009a26:	2200      	movs	r2, #0
 8009a28:	2100      	movs	r1, #0
 8009a2a:	2019      	movs	r0, #25
 8009a2c:	f000 fb5b 	bl	800a0e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009a30:	2019      	movs	r0, #25
 8009a32:	f000 fb74 	bl	800a11e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	40012c00 	.word	0x40012c00
 8009a44:	40021000 	.word	0x40021000

08009a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a50:	f107 0310 	add.w	r3, r7, #16
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	605a      	str	r2, [r3, #4]
 8009a5a:	609a      	str	r2, [r3, #8]
 8009a5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a20      	ldr	r2, [pc, #128]	@ (8009ae4 <HAL_UART_MspInit+0x9c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d139      	bne.n	8009adc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009a68:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae8 <HAL_UART_MspInit+0xa0>)
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae8 <HAL_UART_MspInit+0xa0>)
 8009a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a72:	6193      	str	r3, [r2, #24]
 8009a74:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <HAL_UART_MspInit+0xa0>)
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a80:	4b19      	ldr	r3, [pc, #100]	@ (8009ae8 <HAL_UART_MspInit+0xa0>)
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	4a18      	ldr	r2, [pc, #96]	@ (8009ae8 <HAL_UART_MspInit+0xa0>)
 8009a86:	f043 0304 	orr.w	r3, r3, #4
 8009a8a:	6193      	str	r3, [r2, #24]
 8009a8c:	4b16      	ldr	r3, [pc, #88]	@ (8009ae8 <HAL_UART_MspInit+0xa0>)
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	f003 0304 	and.w	r3, r3, #4
 8009a94:	60bb      	str	r3, [r7, #8]
 8009a96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aa6:	f107 0310 	add.w	r3, r7, #16
 8009aaa:	4619      	mov	r1, r3
 8009aac:	480f      	ldr	r0, [pc, #60]	@ (8009aec <HAL_UART_MspInit+0xa4>)
 8009aae:	f000 fc93 	bl	800a3d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ac0:	f107 0310 	add.w	r3, r7, #16
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4809      	ldr	r0, [pc, #36]	@ (8009aec <HAL_UART_MspInit+0xa4>)
 8009ac8:	f000 fc86 	bl	800a3d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	2025      	movs	r0, #37	@ 0x25
 8009ad2:	f000 fb08 	bl	800a0e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009ad6:	2025      	movs	r0, #37	@ 0x25
 8009ad8:	f000 fb21 	bl	800a11e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009adc:	bf00      	nop
 8009ade:	3720      	adds	r7, #32
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40013800 	.word	0x40013800
 8009ae8:	40021000 	.word	0x40021000
 8009aec:	40010800 	.word	0x40010800

08009af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009af4:	bf00      	nop
 8009af6:	e7fd      	b.n	8009af4 <NMI_Handler+0x4>

08009af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009afc:	bf00      	nop
 8009afe:	e7fd      	b.n	8009afc <HardFault_Handler+0x4>

08009b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b04:	bf00      	nop
 8009b06:	e7fd      	b.n	8009b04 <MemManage_Handler+0x4>

08009b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <BusFault_Handler+0x4>

08009b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <UsageFault_Handler+0x4>

08009b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b1c:	bf00      	nop
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bc80      	pop	{r7}
 8009b22:	4770      	bx	lr

08009b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b24:	b480      	push	{r7}
 8009b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b28:	bf00      	nop
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bc80      	pop	{r7}
 8009b2e:	4770      	bx	lr

08009b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b34:	bf00      	nop
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr

08009b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b40:	f000 f8be 	bl	8009cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b44:	bf00      	nop
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009b4c:	4802      	ldr	r0, [pc, #8]	@ (8009b58 <TIM1_UP_IRQHandler+0x10>)
 8009b4e:	f002 fdcd 	bl	800c6ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009b52:	bf00      	nop
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20001f94 	.word	0x20001f94

08009b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009b60:	4802      	ldr	r0, [pc, #8]	@ (8009b6c <USART1_IRQHandler+0x10>)
 8009b62:	f003 fb05 	bl	800d170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009b66:	bf00      	nop
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20001fdc 	.word	0x20001fdc

08009b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009b78:	4a14      	ldr	r2, [pc, #80]	@ (8009bcc <_sbrk+0x5c>)
 8009b7a:	4b15      	ldr	r3, [pc, #84]	@ (8009bd0 <_sbrk+0x60>)
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009b84:	4b13      	ldr	r3, [pc, #76]	@ (8009bd4 <_sbrk+0x64>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009b8c:	4b11      	ldr	r3, [pc, #68]	@ (8009bd4 <_sbrk+0x64>)
 8009b8e:	4a12      	ldr	r2, [pc, #72]	@ (8009bd8 <_sbrk+0x68>)
 8009b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009b92:	4b10      	ldr	r3, [pc, #64]	@ (8009bd4 <_sbrk+0x64>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4413      	add	r3, r2
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d207      	bcs.n	8009bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009ba0:	f004 f9e8 	bl	800df74 <__errno>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	220c      	movs	r2, #12
 8009ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009bae:	e009      	b.n	8009bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009bb0:	4b08      	ldr	r3, [pc, #32]	@ (8009bd4 <_sbrk+0x64>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009bb6:	4b07      	ldr	r3, [pc, #28]	@ (8009bd4 <_sbrk+0x64>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	4a05      	ldr	r2, [pc, #20]	@ (8009bd4 <_sbrk+0x64>)
 8009bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	2000c000 	.word	0x2000c000
 8009bd0:	00000400 	.word	0x00000400
 8009bd4:	20002024 	.word	0x20002024
 8009bd8:	20002178 	.word	0x20002178

08009bdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009be0:	bf00      	nop
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr

08009be8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009be8:	480c      	ldr	r0, [pc, #48]	@ (8009c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009bea:	490d      	ldr	r1, [pc, #52]	@ (8009c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009bec:	4a0d      	ldr	r2, [pc, #52]	@ (8009c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009bf0:	e002      	b.n	8009bf8 <LoopCopyDataInit>

08009bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009bf6:	3304      	adds	r3, #4

08009bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009bfc:	d3f9      	bcc.n	8009bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8009c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009c00:	4c0a      	ldr	r4, [pc, #40]	@ (8009c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c04:	e001      	b.n	8009c0a <LoopFillZerobss>

08009c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c08:	3204      	adds	r2, #4

08009c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c0c:	d3fb      	bcc.n	8009c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009c0e:	f7ff ffe5 	bl	8009bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c12:	f004 f9b5 	bl	800df80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009c16:	f7ff fb99 	bl	800934c <main>
  bx lr
 8009c1a:	4770      	bx	lr
  ldr r0, =_sdata
 8009c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c20:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009c24:	0800f520 	.word	0x0800f520
  ldr r2, =_sbss
 8009c28:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009c2c:	20002174 	.word	0x20002174

08009c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009c30:	e7fe      	b.n	8009c30 <ADC1_2_IRQHandler>
	...

08009c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c38:	4b08      	ldr	r3, [pc, #32]	@ (8009c5c <HAL_Init+0x28>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a07      	ldr	r2, [pc, #28]	@ (8009c5c <HAL_Init+0x28>)
 8009c3e:	f043 0310 	orr.w	r3, r3, #16
 8009c42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c44:	2003      	movs	r0, #3
 8009c46:	f000 fa43 	bl	800a0d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c4a:	200f      	movs	r0, #15
 8009c4c:	f000 f808 	bl	8009c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c50:	f7ff fdf6 	bl	8009840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	40022000 	.word	0x40022000

08009c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c68:	4b12      	ldr	r3, [pc, #72]	@ (8009cb4 <HAL_InitTick+0x54>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <HAL_InitTick+0x58>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	4619      	mov	r1, r3
 8009c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fa5b 	bl	800a13a <HAL_SYSTICK_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e00e      	b.n	8009cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b0f      	cmp	r3, #15
 8009c92:	d80a      	bhi.n	8009caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c94:	2200      	movs	r2, #0
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c9c:	f000 fa23 	bl	800a0e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ca0:	4a06      	ldr	r2, [pc, #24]	@ (8009cbc <HAL_InitTick+0x5c>)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e000      	b.n	8009cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000f74 	.word	0x20000f74
 8009cb8:	20000f7c 	.word	0x20000f7c
 8009cbc:	20000f78 	.word	0x20000f78

08009cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cc4:	4b05      	ldr	r3, [pc, #20]	@ (8009cdc <HAL_IncTick+0x1c>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4b05      	ldr	r3, [pc, #20]	@ (8009ce0 <HAL_IncTick+0x20>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	4a03      	ldr	r2, [pc, #12]	@ (8009ce0 <HAL_IncTick+0x20>)
 8009cd2:	6013      	str	r3, [r2, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr
 8009cdc:	20000f7c 	.word	0x20000f7c
 8009ce0:	20002028 	.word	0x20002028

08009ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8009ce8:	4b02      	ldr	r3, [pc, #8]	@ (8009cf4 <HAL_GetTick+0x10>)
 8009cea:	681b      	ldr	r3, [r3, #0]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bc80      	pop	{r7}
 8009cf2:	4770      	bx	lr
 8009cf4:	20002028 	.word	0x20002028

08009cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d00:	f7ff fff0 	bl	8009ce4 <HAL_GetTick>
 8009d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d10:	d005      	beq.n	8009d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d12:	4b0a      	ldr	r3, [pc, #40]	@ (8009d3c <HAL_Delay+0x44>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009d1e:	bf00      	nop
 8009d20:	f7ff ffe0 	bl	8009ce4 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d8f7      	bhi.n	8009d20 <HAL_Delay+0x28>
  {
  }
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000f7c 	.word	0x20000f7c

08009d40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e0ed      	b.n	8009f2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fda0 	bl	80098a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d74:	f7ff ffb6 	bl	8009ce4 <HAL_GetTick>
 8009d78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009d7a:	e012      	b.n	8009da2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009d7c:	f7ff ffb2 	bl	8009ce4 <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	2b0a      	cmp	r3, #10
 8009d88:	d90b      	bls.n	8009da2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2205      	movs	r2, #5
 8009d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e0c5      	b.n	8009f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0e5      	beq.n	8009d7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0202 	bic.w	r2, r2, #2
 8009dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009dc0:	f7ff ff90 	bl	8009ce4 <HAL_GetTick>
 8009dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009dc6:	e012      	b.n	8009dee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009dc8:	f7ff ff8c 	bl	8009ce4 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b0a      	cmp	r3, #10
 8009dd4:	d90b      	bls.n	8009dee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2205      	movs	r2, #5
 8009de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e09f      	b.n	8009f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e5      	bne.n	8009dc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	7e1b      	ldrb	r3, [r3, #24]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d108      	bne.n	8009e16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	e007      	b.n	8009e26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	7e5b      	ldrb	r3, [r3, #25]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d108      	bne.n	8009e40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e007      	b.n	8009e50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	7e9b      	ldrb	r3, [r3, #26]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d108      	bne.n	8009e6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0220 	orr.w	r2, r2, #32
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	e007      	b.n	8009e7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0220 	bic.w	r2, r2, #32
 8009e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	7edb      	ldrb	r3, [r3, #27]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d108      	bne.n	8009e94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0210 	bic.w	r2, r2, #16
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e007      	b.n	8009ea4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0210 	orr.w	r2, r2, #16
 8009ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	7f1b      	ldrb	r3, [r3, #28]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d108      	bne.n	8009ebe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0208 	orr.w	r2, r2, #8
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e007      	b.n	8009ece <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0208 	bic.w	r2, r2, #8
 8009ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7f5b      	ldrb	r3, [r3, #29]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d108      	bne.n	8009ee8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f042 0204 	orr.w	r2, r2, #4
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	e007      	b.n	8009ef8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0204 	bic.w	r2, r2, #4
 8009ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	ea42 0103 	orr.w	r1, r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <__NVIC_SetPriorityGrouping>:
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f003 0307 	and.w	r3, r3, #7
 8009f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f48:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <__NVIC_SetPriorityGrouping+0x44>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009f54:	4013      	ands	r3, r2
 8009f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f6a:	4a04      	ldr	r2, [pc, #16]	@ (8009f7c <__NVIC_SetPriorityGrouping+0x44>)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	60d3      	str	r3, [r2, #12]
}
 8009f70:	bf00      	nop
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	e000ed00 	.word	0xe000ed00

08009f80 <__NVIC_GetPriorityGrouping>:
{
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f84:	4b04      	ldr	r3, [pc, #16]	@ (8009f98 <__NVIC_GetPriorityGrouping+0x18>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	0a1b      	lsrs	r3, r3, #8
 8009f8a:	f003 0307 	and.w	r3, r3, #7
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bc80      	pop	{r7}
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	e000ed00 	.word	0xe000ed00

08009f9c <__NVIC_EnableIRQ>:
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	db0b      	blt.n	8009fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	f003 021f 	and.w	r2, r3, #31
 8009fb4:	4906      	ldr	r1, [pc, #24]	@ (8009fd0 <__NVIC_EnableIRQ+0x34>)
 8009fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fba:	095b      	lsrs	r3, r3, #5
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8009fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009fc6:	bf00      	nop
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bc80      	pop	{r7}
 8009fce:	4770      	bx	lr
 8009fd0:	e000e100 	.word	0xe000e100

08009fd4 <__NVIC_SetPriority>:
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	db0a      	blt.n	8009ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	490c      	ldr	r1, [pc, #48]	@ (800a020 <__NVIC_SetPriority+0x4c>)
 8009fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ff2:	0112      	lsls	r2, r2, #4
 8009ff4:	b2d2      	uxtb	r2, r2
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ffc:	e00a      	b.n	800a014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	b2da      	uxtb	r2, r3
 800a002:	4908      	ldr	r1, [pc, #32]	@ (800a024 <__NVIC_SetPriority+0x50>)
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	3b04      	subs	r3, #4
 800a00c:	0112      	lsls	r2, r2, #4
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	440b      	add	r3, r1
 800a012:	761a      	strb	r2, [r3, #24]
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	bc80      	pop	{r7}
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	e000e100 	.word	0xe000e100
 800a024:	e000ed00 	.word	0xe000ed00

0800a028 <NVIC_EncodePriority>:
{
 800a028:	b480      	push	{r7}
 800a02a:	b089      	sub	sp, #36	@ 0x24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f003 0307 	and.w	r3, r3, #7
 800a03a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f1c3 0307 	rsb	r3, r3, #7
 800a042:	2b04      	cmp	r3, #4
 800a044:	bf28      	it	cs
 800a046:	2304      	movcs	r3, #4
 800a048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	3304      	adds	r3, #4
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d902      	bls.n	800a058 <NVIC_EncodePriority+0x30>
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	3b03      	subs	r3, #3
 800a056:	e000      	b.n	800a05a <NVIC_EncodePriority+0x32>
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a05c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43da      	mvns	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	401a      	ands	r2, r3
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	fa01 f303 	lsl.w	r3, r1, r3
 800a07a:	43d9      	mvns	r1, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a080:	4313      	orrs	r3, r2
}
 800a082:	4618      	mov	r0, r3
 800a084:	3724      	adds	r7, #36	@ 0x24
 800a086:	46bd      	mov	sp, r7
 800a088:	bc80      	pop	{r7}
 800a08a:	4770      	bx	lr

0800a08c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3b01      	subs	r3, #1
 800a098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a09c:	d301      	bcc.n	800a0a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e00f      	b.n	800a0c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a0a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0cc <SysTick_Config+0x40>)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a0aa:	210f      	movs	r1, #15
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0b0:	f7ff ff90 	bl	8009fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0b4:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <SysTick_Config+0x40>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0ba:	4b04      	ldr	r3, [pc, #16]	@ (800a0cc <SysTick_Config+0x40>)
 800a0bc:	2207      	movs	r2, #7
 800a0be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	e000e010 	.word	0xe000e010

0800a0d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff2d 	bl	8009f38 <__NVIC_SetPriorityGrouping>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b086      	sub	sp, #24
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0f8:	f7ff ff42 	bl	8009f80 <__NVIC_GetPriorityGrouping>
 800a0fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	6978      	ldr	r0, [r7, #20]
 800a104:	f7ff ff90 	bl	800a028 <NVIC_EncodePriority>
 800a108:	4602      	mov	r2, r0
 800a10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a10e:	4611      	mov	r1, r2
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff ff5f 	bl	8009fd4 <__NVIC_SetPriority>
}
 800a116:	bf00      	nop
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	4603      	mov	r3, r0
 800a126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7ff ff35 	bl	8009f9c <__NVIC_EnableIRQ>
}
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff ffa2 	bl	800a08c <SysTick_Config>
 800a148:	4603      	mov	r3, r0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a152:	b480      	push	{r7}
 800a154:	b085      	sub	sp, #20
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b02      	cmp	r3, #2
 800a168:	d008      	beq.n	800a17c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2204      	movs	r2, #4
 800a16e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e020      	b.n	800a1be <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 020e 	bic.w	r2, r2, #14
 800a18a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0201 	bic.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	fa01 f202 	lsl.w	r2, r1, r2
 800a1aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bc80      	pop	{r7}
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d005      	beq.n	800a1ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2204      	movs	r2, #4
 800a1e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	73fb      	strb	r3, [r7, #15]
 800a1ea:	e0d6      	b.n	800a39a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 020e 	bic.w	r2, r2, #14
 800a1fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f022 0201 	bic.w	r2, r2, #1
 800a20a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	4b64      	ldr	r3, [pc, #400]	@ (800a3a4 <HAL_DMA_Abort_IT+0x1dc>)
 800a214:	429a      	cmp	r2, r3
 800a216:	d958      	bls.n	800a2ca <HAL_DMA_Abort_IT+0x102>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a62      	ldr	r2, [pc, #392]	@ (800a3a8 <HAL_DMA_Abort_IT+0x1e0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d04f      	beq.n	800a2c2 <HAL_DMA_Abort_IT+0xfa>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a61      	ldr	r2, [pc, #388]	@ (800a3ac <HAL_DMA_Abort_IT+0x1e4>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d048      	beq.n	800a2be <HAL_DMA_Abort_IT+0xf6>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a5f      	ldr	r2, [pc, #380]	@ (800a3b0 <HAL_DMA_Abort_IT+0x1e8>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d040      	beq.n	800a2b8 <HAL_DMA_Abort_IT+0xf0>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a5e      	ldr	r2, [pc, #376]	@ (800a3b4 <HAL_DMA_Abort_IT+0x1ec>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d038      	beq.n	800a2b2 <HAL_DMA_Abort_IT+0xea>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a5c      	ldr	r2, [pc, #368]	@ (800a3b8 <HAL_DMA_Abort_IT+0x1f0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d030      	beq.n	800a2ac <HAL_DMA_Abort_IT+0xe4>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a5b      	ldr	r2, [pc, #364]	@ (800a3bc <HAL_DMA_Abort_IT+0x1f4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d028      	beq.n	800a2a6 <HAL_DMA_Abort_IT+0xde>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a52      	ldr	r2, [pc, #328]	@ (800a3a4 <HAL_DMA_Abort_IT+0x1dc>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d020      	beq.n	800a2a0 <HAL_DMA_Abort_IT+0xd8>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a57      	ldr	r2, [pc, #348]	@ (800a3c0 <HAL_DMA_Abort_IT+0x1f8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d019      	beq.n	800a29c <HAL_DMA_Abort_IT+0xd4>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a55      	ldr	r2, [pc, #340]	@ (800a3c4 <HAL_DMA_Abort_IT+0x1fc>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d012      	beq.n	800a298 <HAL_DMA_Abort_IT+0xd0>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a54      	ldr	r2, [pc, #336]	@ (800a3c8 <HAL_DMA_Abort_IT+0x200>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d00a      	beq.n	800a292 <HAL_DMA_Abort_IT+0xca>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a52      	ldr	r2, [pc, #328]	@ (800a3cc <HAL_DMA_Abort_IT+0x204>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d102      	bne.n	800a28c <HAL_DMA_Abort_IT+0xc4>
 800a286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a28a:	e01b      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a28c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a290:	e018      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a296:	e015      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a298:	2310      	movs	r3, #16
 800a29a:	e013      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e011      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2a4:	e00e      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a2aa:	e00b      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2b0:	e008      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2b6:	e005      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2bc:	e002      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2be:	2310      	movs	r3, #16
 800a2c0:	e000      	b.n	800a2c4 <HAL_DMA_Abort_IT+0xfc>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4a42      	ldr	r2, [pc, #264]	@ (800a3d0 <HAL_DMA_Abort_IT+0x208>)
 800a2c6:	6053      	str	r3, [r2, #4]
 800a2c8:	e057      	b.n	800a37a <HAL_DMA_Abort_IT+0x1b2>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a36      	ldr	r2, [pc, #216]	@ (800a3a8 <HAL_DMA_Abort_IT+0x1e0>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d04f      	beq.n	800a374 <HAL_DMA_Abort_IT+0x1ac>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a34      	ldr	r2, [pc, #208]	@ (800a3ac <HAL_DMA_Abort_IT+0x1e4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d048      	beq.n	800a370 <HAL_DMA_Abort_IT+0x1a8>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a33      	ldr	r2, [pc, #204]	@ (800a3b0 <HAL_DMA_Abort_IT+0x1e8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d040      	beq.n	800a36a <HAL_DMA_Abort_IT+0x1a2>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a31      	ldr	r2, [pc, #196]	@ (800a3b4 <HAL_DMA_Abort_IT+0x1ec>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d038      	beq.n	800a364 <HAL_DMA_Abort_IT+0x19c>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a30      	ldr	r2, [pc, #192]	@ (800a3b8 <HAL_DMA_Abort_IT+0x1f0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d030      	beq.n	800a35e <HAL_DMA_Abort_IT+0x196>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a2e      	ldr	r2, [pc, #184]	@ (800a3bc <HAL_DMA_Abort_IT+0x1f4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d028      	beq.n	800a358 <HAL_DMA_Abort_IT+0x190>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a26      	ldr	r2, [pc, #152]	@ (800a3a4 <HAL_DMA_Abort_IT+0x1dc>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d020      	beq.n	800a352 <HAL_DMA_Abort_IT+0x18a>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a2a      	ldr	r2, [pc, #168]	@ (800a3c0 <HAL_DMA_Abort_IT+0x1f8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d019      	beq.n	800a34e <HAL_DMA_Abort_IT+0x186>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a29      	ldr	r2, [pc, #164]	@ (800a3c4 <HAL_DMA_Abort_IT+0x1fc>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d012      	beq.n	800a34a <HAL_DMA_Abort_IT+0x182>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a27      	ldr	r2, [pc, #156]	@ (800a3c8 <HAL_DMA_Abort_IT+0x200>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00a      	beq.n	800a344 <HAL_DMA_Abort_IT+0x17c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a26      	ldr	r2, [pc, #152]	@ (800a3cc <HAL_DMA_Abort_IT+0x204>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d102      	bne.n	800a33e <HAL_DMA_Abort_IT+0x176>
 800a338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a33c:	e01b      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a33e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a342:	e018      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a344:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a348:	e015      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a34a:	2310      	movs	r3, #16
 800a34c:	e013      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a34e:	2301      	movs	r3, #1
 800a350:	e011      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a352:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a356:	e00e      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a358:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a35c:	e00b      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a35e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a362:	e008      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a368:	e005      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a36a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a36e:	e002      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a370:	2310      	movs	r3, #16
 800a372:	e000      	b.n	800a376 <HAL_DMA_Abort_IT+0x1ae>
 800a374:	2301      	movs	r3, #1
 800a376:	4a17      	ldr	r2, [pc, #92]	@ (800a3d4 <HAL_DMA_Abort_IT+0x20c>)
 800a378:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
    } 
  }
  return status;
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	40020080 	.word	0x40020080
 800a3a8:	40020008 	.word	0x40020008
 800a3ac:	4002001c 	.word	0x4002001c
 800a3b0:	40020030 	.word	0x40020030
 800a3b4:	40020044 	.word	0x40020044
 800a3b8:	40020058 	.word	0x40020058
 800a3bc:	4002006c 	.word	0x4002006c
 800a3c0:	40020408 	.word	0x40020408
 800a3c4:	4002041c 	.word	0x4002041c
 800a3c8:	40020430 	.word	0x40020430
 800a3cc:	40020444 	.word	0x40020444
 800a3d0:	40020400 	.word	0x40020400
 800a3d4:	40020000 	.word	0x40020000

0800a3d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b08b      	sub	sp, #44	@ 0x2c
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3ea:	e179      	b.n	800a6e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	429a      	cmp	r2, r3
 800a406:	f040 8168 	bne.w	800a6da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	4a96      	ldr	r2, [pc, #600]	@ (800a668 <HAL_GPIO_Init+0x290>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d05e      	beq.n	800a4d2 <HAL_GPIO_Init+0xfa>
 800a414:	4a94      	ldr	r2, [pc, #592]	@ (800a668 <HAL_GPIO_Init+0x290>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d875      	bhi.n	800a506 <HAL_GPIO_Init+0x12e>
 800a41a:	4a94      	ldr	r2, [pc, #592]	@ (800a66c <HAL_GPIO_Init+0x294>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d058      	beq.n	800a4d2 <HAL_GPIO_Init+0xfa>
 800a420:	4a92      	ldr	r2, [pc, #584]	@ (800a66c <HAL_GPIO_Init+0x294>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d86f      	bhi.n	800a506 <HAL_GPIO_Init+0x12e>
 800a426:	4a92      	ldr	r2, [pc, #584]	@ (800a670 <HAL_GPIO_Init+0x298>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d052      	beq.n	800a4d2 <HAL_GPIO_Init+0xfa>
 800a42c:	4a90      	ldr	r2, [pc, #576]	@ (800a670 <HAL_GPIO_Init+0x298>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d869      	bhi.n	800a506 <HAL_GPIO_Init+0x12e>
 800a432:	4a90      	ldr	r2, [pc, #576]	@ (800a674 <HAL_GPIO_Init+0x29c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d04c      	beq.n	800a4d2 <HAL_GPIO_Init+0xfa>
 800a438:	4a8e      	ldr	r2, [pc, #568]	@ (800a674 <HAL_GPIO_Init+0x29c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d863      	bhi.n	800a506 <HAL_GPIO_Init+0x12e>
 800a43e:	4a8e      	ldr	r2, [pc, #568]	@ (800a678 <HAL_GPIO_Init+0x2a0>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d046      	beq.n	800a4d2 <HAL_GPIO_Init+0xfa>
 800a444:	4a8c      	ldr	r2, [pc, #560]	@ (800a678 <HAL_GPIO_Init+0x2a0>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d85d      	bhi.n	800a506 <HAL_GPIO_Init+0x12e>
 800a44a:	2b12      	cmp	r3, #18
 800a44c:	d82a      	bhi.n	800a4a4 <HAL_GPIO_Init+0xcc>
 800a44e:	2b12      	cmp	r3, #18
 800a450:	d859      	bhi.n	800a506 <HAL_GPIO_Init+0x12e>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <HAL_GPIO_Init+0x80>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a4d3 	.word	0x0800a4d3
 800a45c:	0800a4ad 	.word	0x0800a4ad
 800a460:	0800a4bf 	.word	0x0800a4bf
 800a464:	0800a501 	.word	0x0800a501
 800a468:	0800a507 	.word	0x0800a507
 800a46c:	0800a507 	.word	0x0800a507
 800a470:	0800a507 	.word	0x0800a507
 800a474:	0800a507 	.word	0x0800a507
 800a478:	0800a507 	.word	0x0800a507
 800a47c:	0800a507 	.word	0x0800a507
 800a480:	0800a507 	.word	0x0800a507
 800a484:	0800a507 	.word	0x0800a507
 800a488:	0800a507 	.word	0x0800a507
 800a48c:	0800a507 	.word	0x0800a507
 800a490:	0800a507 	.word	0x0800a507
 800a494:	0800a507 	.word	0x0800a507
 800a498:	0800a507 	.word	0x0800a507
 800a49c:	0800a4b5 	.word	0x0800a4b5
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	4a75      	ldr	r2, [pc, #468]	@ (800a67c <HAL_GPIO_Init+0x2a4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d013      	beq.n	800a4d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a4aa:	e02c      	b.n	800a506 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	623b      	str	r3, [r7, #32]
          break;
 800a4b2:	e029      	b.n	800a508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	623b      	str	r3, [r7, #32]
          break;
 800a4bc:	e024      	b.n	800a508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	623b      	str	r3, [r7, #32]
          break;
 800a4c6:	e01f      	b.n	800a508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	623b      	str	r3, [r7, #32]
          break;
 800a4d0:	e01a      	b.n	800a508 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a4da:	2304      	movs	r3, #4
 800a4dc:	623b      	str	r3, [r7, #32]
          break;
 800a4de:	e013      	b.n	800a508 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d105      	bne.n	800a4f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	611a      	str	r2, [r3, #16]
          break;
 800a4f2:	e009      	b.n	800a508 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69fa      	ldr	r2, [r7, #28]
 800a4fc:	615a      	str	r2, [r3, #20]
          break;
 800a4fe:	e003      	b.n	800a508 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a500:	2300      	movs	r3, #0
 800a502:	623b      	str	r3, [r7, #32]
          break;
 800a504:	e000      	b.n	800a508 <HAL_GPIO_Init+0x130>
          break;
 800a506:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	2bff      	cmp	r3, #255	@ 0xff
 800a50c:	d801      	bhi.n	800a512 <HAL_GPIO_Init+0x13a>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	e001      	b.n	800a516 <HAL_GPIO_Init+0x13e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3304      	adds	r3, #4
 800a516:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	2bff      	cmp	r3, #255	@ 0xff
 800a51c:	d802      	bhi.n	800a524 <HAL_GPIO_Init+0x14c>
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	e002      	b.n	800a52a <HAL_GPIO_Init+0x152>
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	3b08      	subs	r3, #8
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	210f      	movs	r1, #15
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	fa01 f303 	lsl.w	r3, r1, r3
 800a538:	43db      	mvns	r3, r3
 800a53a:	401a      	ands	r2, r3
 800a53c:	6a39      	ldr	r1, [r7, #32]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	fa01 f303 	lsl.w	r3, r1, r3
 800a544:	431a      	orrs	r2, r3
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80c1 	beq.w	800a6da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a558:	4b49      	ldr	r3, [pc, #292]	@ (800a680 <HAL_GPIO_Init+0x2a8>)
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	4a48      	ldr	r2, [pc, #288]	@ (800a680 <HAL_GPIO_Init+0x2a8>)
 800a55e:	f043 0301 	orr.w	r3, r3, #1
 800a562:	6193      	str	r3, [r2, #24]
 800a564:	4b46      	ldr	r3, [pc, #280]	@ (800a680 <HAL_GPIO_Init+0x2a8>)
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	60bb      	str	r3, [r7, #8]
 800a56e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a570:	4a44      	ldr	r2, [pc, #272]	@ (800a684 <HAL_GPIO_Init+0x2ac>)
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	089b      	lsrs	r3, r3, #2
 800a576:	3302      	adds	r3, #2
 800a578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a580:	f003 0303 	and.w	r3, r3, #3
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	220f      	movs	r2, #15
 800a588:	fa02 f303 	lsl.w	r3, r2, r3
 800a58c:	43db      	mvns	r3, r3
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	4013      	ands	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a3c      	ldr	r2, [pc, #240]	@ (800a688 <HAL_GPIO_Init+0x2b0>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d01f      	beq.n	800a5dc <HAL_GPIO_Init+0x204>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a3b      	ldr	r2, [pc, #236]	@ (800a68c <HAL_GPIO_Init+0x2b4>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d019      	beq.n	800a5d8 <HAL_GPIO_Init+0x200>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a3a      	ldr	r2, [pc, #232]	@ (800a690 <HAL_GPIO_Init+0x2b8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d013      	beq.n	800a5d4 <HAL_GPIO_Init+0x1fc>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a39      	ldr	r2, [pc, #228]	@ (800a694 <HAL_GPIO_Init+0x2bc>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00d      	beq.n	800a5d0 <HAL_GPIO_Init+0x1f8>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a38      	ldr	r2, [pc, #224]	@ (800a698 <HAL_GPIO_Init+0x2c0>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d007      	beq.n	800a5cc <HAL_GPIO_Init+0x1f4>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a37      	ldr	r2, [pc, #220]	@ (800a69c <HAL_GPIO_Init+0x2c4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d101      	bne.n	800a5c8 <HAL_GPIO_Init+0x1f0>
 800a5c4:	2305      	movs	r3, #5
 800a5c6:	e00a      	b.n	800a5de <HAL_GPIO_Init+0x206>
 800a5c8:	2306      	movs	r3, #6
 800a5ca:	e008      	b.n	800a5de <HAL_GPIO_Init+0x206>
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	e006      	b.n	800a5de <HAL_GPIO_Init+0x206>
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e004      	b.n	800a5de <HAL_GPIO_Init+0x206>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e002      	b.n	800a5de <HAL_GPIO_Init+0x206>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e000      	b.n	800a5de <HAL_GPIO_Init+0x206>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e0:	f002 0203 	and.w	r2, r2, #3
 800a5e4:	0092      	lsls	r2, r2, #2
 800a5e6:	4093      	lsls	r3, r2
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a5ee:	4925      	ldr	r1, [pc, #148]	@ (800a684 <HAL_GPIO_Init+0x2ac>)
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	089b      	lsrs	r3, r3, #2
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a608:	4b25      	ldr	r3, [pc, #148]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	4924      	ldr	r1, [pc, #144]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	4313      	orrs	r3, r2
 800a612:	608b      	str	r3, [r1, #8]
 800a614:	e006      	b.n	800a624 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a616:	4b22      	ldr	r3, [pc, #136]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a618:	689a      	ldr	r2, [r3, #8]
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	43db      	mvns	r3, r3
 800a61e:	4920      	ldr	r1, [pc, #128]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a620:	4013      	ands	r3, r2
 800a622:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d006      	beq.n	800a63e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a630:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	491a      	ldr	r1, [pc, #104]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60cb      	str	r3, [r1, #12]
 800a63c:	e006      	b.n	800a64c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a63e:	4b18      	ldr	r3, [pc, #96]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	43db      	mvns	r3, r3
 800a646:	4916      	ldr	r1, [pc, #88]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a648:	4013      	ands	r3, r2
 800a64a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d025      	beq.n	800a6a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a658:	4b11      	ldr	r3, [pc, #68]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	4910      	ldr	r1, [pc, #64]	@ (800a6a0 <HAL_GPIO_Init+0x2c8>)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	4313      	orrs	r3, r2
 800a662:	604b      	str	r3, [r1, #4]
 800a664:	e025      	b.n	800a6b2 <HAL_GPIO_Init+0x2da>
 800a666:	bf00      	nop
 800a668:	10320000 	.word	0x10320000
 800a66c:	10310000 	.word	0x10310000
 800a670:	10220000 	.word	0x10220000
 800a674:	10210000 	.word	0x10210000
 800a678:	10120000 	.word	0x10120000
 800a67c:	10110000 	.word	0x10110000
 800a680:	40021000 	.word	0x40021000
 800a684:	40010000 	.word	0x40010000
 800a688:	40010800 	.word	0x40010800
 800a68c:	40010c00 	.word	0x40010c00
 800a690:	40011000 	.word	0x40011000
 800a694:	40011400 	.word	0x40011400
 800a698:	40011800 	.word	0x40011800
 800a69c:	40011c00 	.word	0x40011c00
 800a6a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a6a4:	4b15      	ldr	r3, [pc, #84]	@ (800a6fc <HAL_GPIO_Init+0x324>)
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	43db      	mvns	r3, r3
 800a6ac:	4913      	ldr	r1, [pc, #76]	@ (800a6fc <HAL_GPIO_Init+0x324>)
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d006      	beq.n	800a6cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a6be:	4b0f      	ldr	r3, [pc, #60]	@ (800a6fc <HAL_GPIO_Init+0x324>)
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	490e      	ldr	r1, [pc, #56]	@ (800a6fc <HAL_GPIO_Init+0x324>)
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	600b      	str	r3, [r1, #0]
 800a6ca:	e006      	b.n	800a6da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a6cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a6fc <HAL_GPIO_Init+0x324>)
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	4909      	ldr	r1, [pc, #36]	@ (800a6fc <HAL_GPIO_Init+0x324>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6dc:	3301      	adds	r3, #1
 800a6de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f47f ae7e 	bne.w	800a3ec <HAL_GPIO_Init+0x14>
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	372c      	adds	r7, #44	@ 0x2c
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr
 800a6fc:	40010400 	.word	0x40010400

0800a700 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a700:	b480      	push	{r7}
 800a702:	b089      	sub	sp, #36	@ 0x24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a70a:	2300      	movs	r3, #0
 800a70c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a70e:	e0a6      	b.n	800a85e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a710:	2201      	movs	r2, #1
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	fa02 f303 	lsl.w	r3, r2, r3
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	4013      	ands	r3, r2
 800a71c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 8099 	beq.w	800a858 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a726:	4a54      	ldr	r2, [pc, #336]	@ (800a878 <HAL_GPIO_DeInit+0x178>)
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	089b      	lsrs	r3, r3, #2
 800a72c:	3302      	adds	r3, #2
 800a72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a732:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f003 0303 	and.w	r3, r3, #3
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	220f      	movs	r2, #15
 800a73e:	fa02 f303 	lsl.w	r3, r2, r3
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4013      	ands	r3, r2
 800a746:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a4c      	ldr	r2, [pc, #304]	@ (800a87c <HAL_GPIO_DeInit+0x17c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d01f      	beq.n	800a790 <HAL_GPIO_DeInit+0x90>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a4b      	ldr	r2, [pc, #300]	@ (800a880 <HAL_GPIO_DeInit+0x180>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d019      	beq.n	800a78c <HAL_GPIO_DeInit+0x8c>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a4a      	ldr	r2, [pc, #296]	@ (800a884 <HAL_GPIO_DeInit+0x184>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d013      	beq.n	800a788 <HAL_GPIO_DeInit+0x88>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a49      	ldr	r2, [pc, #292]	@ (800a888 <HAL_GPIO_DeInit+0x188>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d00d      	beq.n	800a784 <HAL_GPIO_DeInit+0x84>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a48      	ldr	r2, [pc, #288]	@ (800a88c <HAL_GPIO_DeInit+0x18c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d007      	beq.n	800a780 <HAL_GPIO_DeInit+0x80>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a47      	ldr	r2, [pc, #284]	@ (800a890 <HAL_GPIO_DeInit+0x190>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d101      	bne.n	800a77c <HAL_GPIO_DeInit+0x7c>
 800a778:	2305      	movs	r3, #5
 800a77a:	e00a      	b.n	800a792 <HAL_GPIO_DeInit+0x92>
 800a77c:	2306      	movs	r3, #6
 800a77e:	e008      	b.n	800a792 <HAL_GPIO_DeInit+0x92>
 800a780:	2304      	movs	r3, #4
 800a782:	e006      	b.n	800a792 <HAL_GPIO_DeInit+0x92>
 800a784:	2303      	movs	r3, #3
 800a786:	e004      	b.n	800a792 <HAL_GPIO_DeInit+0x92>
 800a788:	2302      	movs	r3, #2
 800a78a:	e002      	b.n	800a792 <HAL_GPIO_DeInit+0x92>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e000      	b.n	800a792 <HAL_GPIO_DeInit+0x92>
 800a790:	2300      	movs	r3, #0
 800a792:	69fa      	ldr	r2, [r7, #28]
 800a794:	f002 0203 	and.w	r2, r2, #3
 800a798:	0092      	lsls	r2, r2, #2
 800a79a:	4093      	lsls	r3, r2
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d132      	bne.n	800a808 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a7a2:	4b3c      	ldr	r3, [pc, #240]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	43db      	mvns	r3, r3
 800a7aa:	493a      	ldr	r1, [pc, #232]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a7b0:	4b38      	ldr	r3, [pc, #224]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	43db      	mvns	r3, r3
 800a7b8:	4936      	ldr	r1, [pc, #216]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a7be:	4b35      	ldr	r3, [pc, #212]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	43db      	mvns	r3, r3
 800a7c6:	4933      	ldr	r1, [pc, #204]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a7cc:	4b31      	ldr	r3, [pc, #196]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7ce:	689a      	ldr	r2, [r3, #8]
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	43db      	mvns	r3, r3
 800a7d4:	492f      	ldr	r1, [pc, #188]	@ (800a894 <HAL_GPIO_DeInit+0x194>)
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f003 0303 	and.w	r3, r3, #3
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	220f      	movs	r2, #15
 800a7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a7ea:	4a23      	ldr	r2, [pc, #140]	@ (800a878 <HAL_GPIO_DeInit+0x178>)
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	089b      	lsrs	r3, r3, #2
 800a7f0:	3302      	adds	r3, #2
 800a7f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	43da      	mvns	r2, r3
 800a7fa:	481f      	ldr	r0, [pc, #124]	@ (800a878 <HAL_GPIO_DeInit+0x178>)
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	089b      	lsrs	r3, r3, #2
 800a800:	400a      	ands	r2, r1
 800a802:	3302      	adds	r3, #2
 800a804:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	2bff      	cmp	r3, #255	@ 0xff
 800a80c:	d801      	bhi.n	800a812 <HAL_GPIO_DeInit+0x112>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	e001      	b.n	800a816 <HAL_GPIO_DeInit+0x116>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3304      	adds	r3, #4
 800a816:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2bff      	cmp	r3, #255	@ 0xff
 800a81c:	d802      	bhi.n	800a824 <HAL_GPIO_DeInit+0x124>
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	e002      	b.n	800a82a <HAL_GPIO_DeInit+0x12a>
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	3b08      	subs	r3, #8
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	210f      	movs	r1, #15
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	fa01 f303 	lsl.w	r3, r1, r3
 800a838:	43db      	mvns	r3, r3
 800a83a:	401a      	ands	r2, r3
 800a83c:	2104      	movs	r1, #4
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	fa01 f303 	lsl.w	r3, r1, r3
 800a844:	431a      	orrs	r2, r3
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68da      	ldr	r2, [r3, #12]
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	43db      	mvns	r3, r3
 800a852:	401a      	ands	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	3301      	adds	r3, #1
 800a85c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	fa22 f303 	lsr.w	r3, r2, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	f47f af52 	bne.w	800a710 <HAL_GPIO_DeInit+0x10>
  }
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	3724      	adds	r7, #36	@ 0x24
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	4770      	bx	lr
 800a878:	40010000 	.word	0x40010000
 800a87c:	40010800 	.word	0x40010800
 800a880:	40010c00 	.word	0x40010c00
 800a884:	40011000 	.word	0x40011000
 800a888:	40011400 	.word	0x40011400
 800a88c:	40011800 	.word	0x40011800
 800a890:	40011c00 	.word	0x40011c00
 800a894:	40010400 	.word	0x40010400

0800a898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	887b      	ldrh	r3, [r7, #2]
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
 800a8b4:	e001      	b.n	800a8ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr

0800a8c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	807b      	strh	r3, [r7, #2]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8d6:	787b      	ldrb	r3, [r7, #1]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8dc:	887a      	ldrh	r2, [r7, #2]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a8e2:	e003      	b.n	800a8ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a8e4:	887b      	ldrh	r3, [r7, #2]
 800a8e6:	041a      	lsls	r2, r3, #16
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	611a      	str	r2, [r3, #16]
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bc80      	pop	{r7}
 800a8f4:	4770      	bx	lr

0800a8f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	460b      	mov	r3, r1
 800a900:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a908:	887a      	ldrh	r2, [r7, #2]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4013      	ands	r3, r2
 800a90e:	041a      	lsls	r2, r3, #16
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	43d9      	mvns	r1, r3
 800a914:	887b      	ldrh	r3, [r7, #2]
 800a916:	400b      	ands	r3, r1
 800a918:	431a      	orrs	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	611a      	str	r2, [r3, #16]
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e12b      	b.n	800ab92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7fe fff4 	bl	800993c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2224      	movs	r2, #36	@ 0x24
 800a958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a97a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a98a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a98c:	f001 fdb8 	bl	800c500 <HAL_RCC_GetPCLK1Freq>
 800a990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	4a81      	ldr	r2, [pc, #516]	@ (800ab9c <HAL_I2C_Init+0x274>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d807      	bhi.n	800a9ac <HAL_I2C_Init+0x84>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4a80      	ldr	r2, [pc, #512]	@ (800aba0 <HAL_I2C_Init+0x278>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	bf94      	ite	ls
 800a9a4:	2301      	movls	r3, #1
 800a9a6:	2300      	movhi	r3, #0
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	e006      	b.n	800a9ba <HAL_I2C_Init+0x92>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4a7d      	ldr	r2, [pc, #500]	@ (800aba4 <HAL_I2C_Init+0x27c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	bf94      	ite	ls
 800a9b4:	2301      	movls	r3, #1
 800a9b6:	2300      	movhi	r3, #0
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e0e7      	b.n	800ab92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4a78      	ldr	r2, [pc, #480]	@ (800aba8 <HAL_I2C_Init+0x280>)
 800a9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ca:	0c9b      	lsrs	r3, r3, #18
 800a9cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	4a6a      	ldr	r2, [pc, #424]	@ (800ab9c <HAL_I2C_Init+0x274>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d802      	bhi.n	800a9fc <HAL_I2C_Init+0xd4>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	e009      	b.n	800aa10 <HAL_I2C_Init+0xe8>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
 800aa06:	4a69      	ldr	r2, [pc, #420]	@ (800abac <HAL_I2C_Init+0x284>)
 800aa08:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0c:	099b      	lsrs	r3, r3, #6
 800aa0e:	3301      	adds	r3, #1
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800aa22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	495c      	ldr	r1, [pc, #368]	@ (800ab9c <HAL_I2C_Init+0x274>)
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	d819      	bhi.n	800aa64 <HAL_I2C_Init+0x13c>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	1e59      	subs	r1, r3, #1
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa3e:	1c59      	adds	r1, r3, #1
 800aa40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa44:	400b      	ands	r3, r1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00a      	beq.n	800aa60 <HAL_I2C_Init+0x138>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	1e59      	subs	r1, r3, #1
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa58:	3301      	adds	r3, #1
 800aa5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa5e:	e051      	b.n	800ab04 <HAL_I2C_Init+0x1dc>
 800aa60:	2304      	movs	r3, #4
 800aa62:	e04f      	b.n	800ab04 <HAL_I2C_Init+0x1dc>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d111      	bne.n	800aa90 <HAL_I2C_Init+0x168>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	1e58      	subs	r0, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6859      	ldr	r1, [r3, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	440b      	add	r3, r1
 800aa7a:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa7e:	3301      	adds	r3, #1
 800aa80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	e012      	b.n	800aab6 <HAL_I2C_Init+0x18e>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	1e58      	subs	r0, r3, #1
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6859      	ldr	r1, [r3, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	440b      	add	r3, r1
 800aa9e:	0099      	lsls	r1, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bf0c      	ite	eq
 800aab0:	2301      	moveq	r3, #1
 800aab2:	2300      	movne	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <HAL_I2C_Init+0x196>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e022      	b.n	800ab04 <HAL_I2C_Init+0x1dc>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10e      	bne.n	800aae4 <HAL_I2C_Init+0x1bc>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	1e58      	subs	r0, r3, #1
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6859      	ldr	r1, [r3, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	440b      	add	r3, r1
 800aad4:	fbb0 f3f3 	udiv	r3, r0, r3
 800aad8:	3301      	adds	r3, #1
 800aada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aae2:	e00f      	b.n	800ab04 <HAL_I2C_Init+0x1dc>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	1e58      	subs	r0, r3, #1
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6859      	ldr	r1, [r3, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	0099      	lsls	r1, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	fbb0 f3f3 	udiv	r3, r0, r3
 800aafa:	3301      	adds	r3, #1
 800aafc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	6809      	ldr	r1, [r1, #0]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69da      	ldr	r2, [r3, #28]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ab32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6911      	ldr	r1, [r2, #16]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	68d2      	ldr	r2, [r2, #12]
 800ab3e:	4311      	orrs	r1, r2
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	6812      	ldr	r2, [r2, #0]
 800ab44:	430b      	orrs	r3, r1
 800ab46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695a      	ldr	r2, [r3, #20]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	000186a0 	.word	0x000186a0
 800aba0:	001e847f 	.word	0x001e847f
 800aba4:	003d08ff 	.word	0x003d08ff
 800aba8:	431bde83 	.word	0x431bde83
 800abac:	10624dd3 	.word	0x10624dd3

0800abb0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e021      	b.n	800ac06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2224      	movs	r2, #36	@ 0x24
 800abc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0201 	bic.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7fe feec 	bl	80099b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	607a      	str	r2, [r7, #4]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	817b      	strh	r3, [r7, #10]
 800ac20:	4613      	mov	r3, r2
 800ac22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac24:	f7ff f85e 	bl	8009ce4 <HAL_GetTick>
 800ac28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	f040 80e0 	bne.w	800adf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	2319      	movs	r3, #25
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4970      	ldr	r1, [pc, #448]	@ (800ae04 <HAL_I2C_Master_Transmit+0x1f4>)
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fe5c 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e0d3      	b.n	800adfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d101      	bne.n	800ac60 <HAL_I2C_Master_Transmit+0x50>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e0cc      	b.n	800adfa <HAL_I2C_Master_Transmit+0x1ea>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d007      	beq.n	800ac86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f042 0201 	orr.w	r2, r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2221      	movs	r2, #33	@ 0x21
 800ac9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2210      	movs	r2, #16
 800aca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	893a      	ldrh	r2, [r7, #8]
 800acb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	4a50      	ldr	r2, [pc, #320]	@ (800ae08 <HAL_I2C_Master_Transmit+0x1f8>)
 800acc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800acc8:	8979      	ldrh	r1, [r7, #10]
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f000 fc16 	bl	800b500 <I2C_MasterRequestWrite>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e08d      	b.n	800adfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	613b      	str	r3, [r7, #16]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	613b      	str	r3, [r7, #16]
 800acf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800acf4:	e066      	b.n	800adc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	6a39      	ldr	r1, [r7, #32]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 ff1a 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00d      	beq.n	800ad22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	d107      	bne.n	800ad1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e06b      	b.n	800adfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d11b      	bne.n	800ad98 <HAL_I2C_Master_Transmit+0x188>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d017      	beq.n	800ad98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6c:	781a      	ldrb	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	3b01      	subs	r3, #1
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	6a39      	ldr	r1, [r7, #32]
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f000 ff11 	bl	800bbc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00d      	beq.n	800adc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adac:	2b04      	cmp	r3, #4
 800adae:	d107      	bne.n	800adc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e01a      	b.n	800adfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d194      	bne.n	800acf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2220      	movs	r2, #32
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	e000      	b.n	800adfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800adf8:	2302      	movs	r3, #2
  }
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	00100002 	.word	0x00100002
 800ae08:	ffff0000 	.word	0xffff0000

0800ae0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	4608      	mov	r0, r1
 800ae16:	4611      	mov	r1, r2
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	817b      	strh	r3, [r7, #10]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	813b      	strh	r3, [r7, #8]
 800ae22:	4613      	mov	r3, r2
 800ae24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae26:	f7fe ff5d 	bl	8009ce4 <HAL_GetTick>
 800ae2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b20      	cmp	r3, #32
 800ae36:	f040 80d9 	bne.w	800afec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	2319      	movs	r3, #25
 800ae40:	2201      	movs	r2, #1
 800ae42:	496d      	ldr	r1, [pc, #436]	@ (800aff8 <HAL_I2C_Mem_Write+0x1ec>)
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 fd5b 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae50:	2302      	movs	r3, #2
 800ae52:	e0cc      	b.n	800afee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d101      	bne.n	800ae62 <HAL_I2C_Mem_Write+0x56>
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e0c5      	b.n	800afee <HAL_I2C_Mem_Write+0x1e2>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2201      	movs	r2, #1
 800ae66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d007      	beq.n	800ae88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f042 0201 	orr.w	r2, r2, #1
 800ae86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2221      	movs	r2, #33	@ 0x21
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2240      	movs	r2, #64	@ 0x40
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6a3a      	ldr	r2, [r7, #32]
 800aeb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aeb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4a4d      	ldr	r2, [pc, #308]	@ (800affc <HAL_I2C_Mem_Write+0x1f0>)
 800aec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aeca:	88f8      	ldrh	r0, [r7, #6]
 800aecc:	893a      	ldrh	r2, [r7, #8]
 800aece:	8979      	ldrh	r1, [r7, #10]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	4603      	mov	r3, r0
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 fb92 	bl	800b604 <I2C_RequestMemoryWrite>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d052      	beq.n	800af8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e081      	b.n	800afee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 fe20 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00d      	beq.n	800af16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d107      	bne.n	800af12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e06b      	b.n	800afee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af30:	3b01      	subs	r3, #1
 800af32:	b29a      	uxth	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b04      	cmp	r3, #4
 800af52:	d11b      	bne.n	800af8c <HAL_I2C_Mem_Write+0x180>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d017      	beq.n	800af8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af76:	3b01      	subs	r3, #1
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af82:	b29b      	uxth	r3, r3
 800af84:	3b01      	subs	r3, #1
 800af86:	b29a      	uxth	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1aa      	bne.n	800aeea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 fe13 	bl	800bbc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00d      	beq.n	800afc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	d107      	bne.n	800afbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e016      	b.n	800afee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	e000      	b.n	800afee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800afec:	2302      	movs	r3, #2
  }
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	00100002 	.word	0x00100002
 800affc:	ffff0000 	.word	0xffff0000

0800b000 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08c      	sub	sp, #48	@ 0x30
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	4608      	mov	r0, r1
 800b00a:	4611      	mov	r1, r2
 800b00c:	461a      	mov	r2, r3
 800b00e:	4603      	mov	r3, r0
 800b010:	817b      	strh	r3, [r7, #10]
 800b012:	460b      	mov	r3, r1
 800b014:	813b      	strh	r3, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b01a:	2300      	movs	r3, #0
 800b01c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b01e:	f7fe fe61 	bl	8009ce4 <HAL_GetTick>
 800b022:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	f040 8244 	bne.w	800b4ba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	2319      	movs	r3, #25
 800b038:	2201      	movs	r2, #1
 800b03a:	4982      	ldr	r1, [pc, #520]	@ (800b244 <HAL_I2C_Mem_Read+0x244>)
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fc5f 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b048:	2302      	movs	r3, #2
 800b04a:	e237      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d101      	bne.n	800b05a <HAL_I2C_Mem_Read+0x5a>
 800b056:	2302      	movs	r3, #2
 800b058:	e230      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d007      	beq.n	800b080 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b08e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2222      	movs	r2, #34	@ 0x22
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2240      	movs	r2, #64	@ 0x40
 800b09c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4a62      	ldr	r2, [pc, #392]	@ (800b248 <HAL_I2C_Mem_Read+0x248>)
 800b0c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0c2:	88f8      	ldrh	r0, [r7, #6]
 800b0c4:	893a      	ldrh	r2, [r7, #8]
 800b0c6:	8979      	ldrh	r1, [r7, #10]
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 fb2c 	bl	800b730 <I2C_RequestMemoryRead>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e1ec      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d113      	bne.n	800b112 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	61fb      	str	r3, [r7, #28]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	61fb      	str	r3, [r7, #28]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	e1c0      	b.n	800b494 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b116:	2b01      	cmp	r3, #1
 800b118:	d11e      	bne.n	800b158 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b12a:	b672      	cpsid	i
}
 800b12c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b12e:	2300      	movs	r3, #0
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	61bb      	str	r3, [r7, #24]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b154:	b662      	cpsie	i
}
 800b156:	e035      	b.n	800b1c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d11e      	bne.n	800b19e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b16e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b170:	b672      	cpsid	i
}
 800b172:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b174:	2300      	movs	r3, #0
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b19a:	b662      	cpsie	i
}
 800b19c:	e012      	b.n	800b1c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b1ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	613b      	str	r3, [r7, #16]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	613b      	str	r3, [r7, #16]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	613b      	str	r3, [r7, #16]
 800b1c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b1c4:	e166      	b.n	800b494 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	f200 811f 	bhi.w	800b40e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d123      	bne.n	800b220 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 fd39 	bl	800bc54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e167      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	691a      	ldr	r2, [r3, #16]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f6:	b2d2      	uxtb	r2, r2
 800b1f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b208:	3b01      	subs	r3, #1
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b214:	b29b      	uxth	r3, r3
 800b216:	3b01      	subs	r3, #1
 800b218:	b29a      	uxth	r2, r3
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b21e:	e139      	b.n	800b494 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b224:	2b02      	cmp	r3, #2
 800b226:	d152      	bne.n	800b2ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	2200      	movs	r2, #0
 800b230:	4906      	ldr	r1, [pc, #24]	@ (800b24c <HAL_I2C_Mem_Read+0x24c>)
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 fb64 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d008      	beq.n	800b250 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e13c      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
 800b242:	bf00      	nop
 800b244:	00100002 	.word	0x00100002
 800b248:	ffff0000 	.word	0xffff0000
 800b24c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b250:	b672      	cpsid	i
}
 800b252:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691a      	ldr	r2, [r3, #16]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b280:	3b01      	subs	r3, #1
 800b282:	b29a      	uxth	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	b29a      	uxth	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b296:	b662      	cpsie	i
}
 800b298:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691a      	ldr	r2, [r3, #16]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a4:	b2d2      	uxtb	r2, r2
 800b2a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b2cc:	e0e2      	b.n	800b494 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	497b      	ldr	r1, [pc, #492]	@ (800b4c4 <HAL_I2C_Mem_Read+0x4c4>)
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 fb11 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e0e9      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2f8:	b672      	cpsid	i
}
 800b2fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b306:	b2d2      	uxtb	r2, r2
 800b308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b318:	3b01      	subs	r3, #1
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b324:	b29b      	uxth	r3, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b32e:	4b66      	ldr	r3, [pc, #408]	@ (800b4c8 <HAL_I2C_Mem_Read+0x4c8>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	08db      	lsrs	r3, r3, #3
 800b334:	4a65      	ldr	r2, [pc, #404]	@ (800b4cc <HAL_I2C_Mem_Read+0x4cc>)
 800b336:	fba2 2303 	umull	r2, r3, r2, r3
 800b33a:	0a1a      	lsrs	r2, r3, #8
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	00da      	lsls	r2, r3, #3
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d118      	bne.n	800b386 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b36e:	f043 0220 	orr.w	r2, r3, #32
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b376:	b662      	cpsie	i
}
 800b378:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e09a      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b04      	cmp	r3, #4
 800b392:	d1d9      	bne.n	800b348 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691a      	ldr	r2, [r3, #16]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b3d6:	b662      	cpsie	i
}
 800b3d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	691a      	ldr	r2, [r3, #16]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e4:	b2d2      	uxtb	r2, r2
 800b3e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ec:	1c5a      	adds	r2, r3, #1
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b402:	b29b      	uxth	r3, r3
 800b404:	3b01      	subs	r3, #1
 800b406:	b29a      	uxth	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b40c:	e042      	b.n	800b494 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b410:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 fc1e 	bl	800bc54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e04c      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	691a      	ldr	r2, [r3, #16]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b43e:	3b01      	subs	r3, #1
 800b440:	b29a      	uxth	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	3b01      	subs	r3, #1
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d118      	bne.n	800b494 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f47f ae94 	bne.w	800b1c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e000      	b.n	800b4bc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b4ba:	2302      	movs	r3, #2
  }
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3728      	adds	r7, #40	@ 0x28
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	00010004 	.word	0x00010004
 800b4c8:	20000f74 	.word	0x20000f74
 800b4cc:	14f8b589 	.word	0x14f8b589

0800b4d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4de:	b2db      	uxtb	r3, r3
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr

0800b4ea <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr

0800b500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	460b      	mov	r3, r1
 800b50e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d006      	beq.n	800b52a <I2C_MasterRequestWrite+0x2a>
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d003      	beq.n	800b52a <I2C_MasterRequestWrite+0x2a>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b528:	d108      	bne.n	800b53c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	e00b      	b.n	800b554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b540:	2b12      	cmp	r3, #18
 800b542:	d107      	bne.n	800b554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f9cd 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00d      	beq.n	800b588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b57a:	d103      	bne.n	800b584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b582:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e035      	b.n	800b5f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b590:	d108      	bne.n	800b5a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b592:	897b      	ldrh	r3, [r7, #10]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	461a      	mov	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b5a0:	611a      	str	r2, [r3, #16]
 800b5a2:	e01b      	b.n	800b5dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b5a4:	897b      	ldrh	r3, [r7, #10]
 800b5a6:	11db      	asrs	r3, r3, #7
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	f003 0306 	and.w	r3, r3, #6
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f063 030f 	orn	r3, r3, #15
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	490e      	ldr	r1, [pc, #56]	@ (800b5fc <I2C_MasterRequestWrite+0xfc>)
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 fa16 	bl	800b9f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e010      	b.n	800b5f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5d2:	897b      	ldrh	r3, [r7, #10]
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	4907      	ldr	r1, [pc, #28]	@ (800b600 <I2C_MasterRequestWrite+0x100>)
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 fa06 	bl	800b9f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	00010008 	.word	0x00010008
 800b600:	00010002 	.word	0x00010002

0800b604 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af02      	add	r7, sp, #8
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	4608      	mov	r0, r1
 800b60e:	4611      	mov	r1, r2
 800b610:	461a      	mov	r2, r3
 800b612:	4603      	mov	r3, r0
 800b614:	817b      	strh	r3, [r7, #10]
 800b616:	460b      	mov	r3, r1
 800b618:	813b      	strh	r3, [r7, #8]
 800b61a:	4613      	mov	r3, r2
 800b61c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b62c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	2200      	movs	r2, #0
 800b636:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f960 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00d      	beq.n	800b662 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b654:	d103      	bne.n	800b65e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b65c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e05f      	b.n	800b722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b662:	897b      	ldrh	r3, [r7, #10]
 800b664:	b2db      	uxtb	r3, r3
 800b666:	461a      	mov	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b674:	6a3a      	ldr	r2, [r7, #32]
 800b676:	492d      	ldr	r1, [pc, #180]	@ (800b72c <I2C_RequestMemoryWrite+0x128>)
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f9bb 	bl	800b9f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e04c      	b.n	800b722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	617b      	str	r3, [r7, #20]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6a0:	6a39      	ldr	r1, [r7, #32]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 fa46 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00d      	beq.n	800b6ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b2:	2b04      	cmp	r3, #4
 800b6b4:	d107      	bne.n	800b6c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e02b      	b.n	800b722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6ca:	88fb      	ldrh	r3, [r7, #6]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d105      	bne.n	800b6dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6d0:	893b      	ldrh	r3, [r7, #8]
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	611a      	str	r2, [r3, #16]
 800b6da:	e021      	b.n	800b720 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6dc:	893b      	ldrh	r3, [r7, #8]
 800b6de:	0a1b      	lsrs	r3, r3, #8
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ec:	6a39      	ldr	r1, [r7, #32]
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f000 fa20 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00d      	beq.n	800b716 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d107      	bne.n	800b712 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e005      	b.n	800b722 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b716:	893b      	ldrh	r3, [r7, #8]
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	00010002 	.word	0x00010002

0800b730 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af02      	add	r7, sp, #8
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	461a      	mov	r2, r3
 800b73e:	4603      	mov	r3, r0
 800b740:	817b      	strh	r3, [r7, #10]
 800b742:	460b      	mov	r3, r1
 800b744:	813b      	strh	r3, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b758:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	2200      	movs	r2, #0
 800b772:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f000 f8c2 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00d      	beq.n	800b79e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b78c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b790:	d103      	bne.n	800b79a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b798:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b79a:	2303      	movs	r3, #3
 800b79c:	e0aa      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b79e:	897b      	ldrh	r3, [r7, #10]
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b7ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	6a3a      	ldr	r2, [r7, #32]
 800b7b2:	4952      	ldr	r1, [pc, #328]	@ (800b8fc <I2C_RequestMemoryRead+0x1cc>)
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 f91d 	bl	800b9f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e097      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7dc:	6a39      	ldr	r1, [r7, #32]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f9a8 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00d      	beq.n	800b806 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d107      	bne.n	800b802 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e076      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d105      	bne.n	800b818 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b80c:	893b      	ldrh	r3, [r7, #8]
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	611a      	str	r2, [r3, #16]
 800b816:	e021      	b.n	800b85c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b818:	893b      	ldrh	r3, [r7, #8]
 800b81a:	0a1b      	lsrs	r3, r3, #8
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b828:	6a39      	ldr	r1, [r7, #32]
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f000 f982 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00d      	beq.n	800b852 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d107      	bne.n	800b84e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b84c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e050      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b852:	893b      	ldrh	r3, [r7, #8]
 800b854:	b2da      	uxtb	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b85c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b85e:	6a39      	ldr	r1, [r7, #32]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f967 	bl	800bb34 <I2C_WaitOnTXEFlagUntilTimeout>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00d      	beq.n	800b888 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b870:	2b04      	cmp	r3, #4
 800b872:	d107      	bne.n	800b884 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b882:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e035      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b896:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 f82b 	bl	800b900 <I2C_WaitOnFlagUntilTimeout>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00d      	beq.n	800b8cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8be:	d103      	bne.n	800b8c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e013      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8cc:	897b      	ldrh	r3, [r7, #10]
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	f043 0301 	orr.w	r3, r3, #1
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	6a3a      	ldr	r2, [r7, #32]
 800b8e0:	4906      	ldr	r1, [pc, #24]	@ (800b8fc <I2C_RequestMemoryRead+0x1cc>)
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 f886 	bl	800b9f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e000      	b.n	800b8f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	00010002 	.word	0x00010002

0800b900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	603b      	str	r3, [r7, #0]
 800b90c:	4613      	mov	r3, r2
 800b90e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b910:	e048      	b.n	800b9a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b918:	d044      	beq.n	800b9a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b91a:	f7fe f9e3 	bl	8009ce4 <HAL_GetTick>
 800b91e:	4602      	mov	r2, r0
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d302      	bcc.n	800b930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d139      	bne.n	800b9a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	0c1b      	lsrs	r3, r3, #16
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b01      	cmp	r3, #1
 800b938:	d10d      	bne.n	800b956 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	43da      	mvns	r2, r3
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	4013      	ands	r3, r2
 800b946:	b29b      	uxth	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bf0c      	ite	eq
 800b94c:	2301      	moveq	r3, #1
 800b94e:	2300      	movne	r3, #0
 800b950:	b2db      	uxtb	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	e00c      	b.n	800b970 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	43da      	mvns	r2, r3
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4013      	ands	r3, r2
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	bf0c      	ite	eq
 800b968:	2301      	moveq	r3, #1
 800b96a:	2300      	movne	r3, #0
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	461a      	mov	r2, r3
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	429a      	cmp	r2, r3
 800b974:	d116      	bne.n	800b9a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2220      	movs	r2, #32
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b990:	f043 0220 	orr.w	r2, r3, #32
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e023      	b.n	800b9ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	0c1b      	lsrs	r3, r3, #16
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d10d      	bne.n	800b9ca <I2C_WaitOnFlagUntilTimeout+0xca>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	43da      	mvns	r2, r3
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bf0c      	ite	eq
 800b9c0:	2301      	moveq	r3, #1
 800b9c2:	2300      	movne	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	e00c      	b.n	800b9e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	43da      	mvns	r2, r3
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bf0c      	ite	eq
 800b9dc:	2301      	moveq	r3, #1
 800b9de:	2300      	movne	r3, #0
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d093      	beq.n	800b912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba02:	e071      	b.n	800bae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba12:	d123      	bne.n	800ba5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba48:	f043 0204 	orr.w	r2, r3, #4
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e067      	b.n	800bb2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba62:	d041      	beq.n	800bae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba64:	f7fe f93e 	bl	8009ce4 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d302      	bcc.n	800ba7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d136      	bne.n	800bae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	0c1b      	lsrs	r3, r3, #16
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d10c      	bne.n	800ba9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	43da      	mvns	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bf14      	ite	ne
 800ba96:	2301      	movne	r3, #1
 800ba98:	2300      	moveq	r3, #0
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	e00b      	b.n	800bab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	43da      	mvns	r2, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4013      	ands	r3, r2
 800baaa:	b29b      	uxth	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	bf14      	ite	ne
 800bab0:	2301      	movne	r3, #1
 800bab2:	2300      	moveq	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d016      	beq.n	800bae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad4:	f043 0220 	orr.w	r2, r3, #32
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e021      	b.n	800bb2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	0c1b      	lsrs	r3, r3, #16
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d10c      	bne.n	800bb0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	43da      	mvns	r2, r3
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	4013      	ands	r3, r2
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bf14      	ite	ne
 800bb04:	2301      	movne	r3, #1
 800bb06:	2300      	moveq	r3, #0
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	e00b      	b.n	800bb24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	43da      	mvns	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	4013      	ands	r3, r2
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	bf14      	ite	ne
 800bb1e:	2301      	movne	r3, #1
 800bb20:	2300      	moveq	r3, #0
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f47f af6d 	bne.w	800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb40:	e034      	b.n	800bbac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f000 f8e3 	bl	800bd0e <I2C_IsAcknowledgeFailed>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e034      	b.n	800bbbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb58:	d028      	beq.n	800bbac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb5a:	f7fe f8c3 	bl	8009ce4 <HAL_GetTick>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d302      	bcc.n	800bb70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d11d      	bne.n	800bbac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb7a:	2b80      	cmp	r3, #128	@ 0x80
 800bb7c:	d016      	beq.n	800bbac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2220      	movs	r2, #32
 800bb88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb98:	f043 0220 	orr.w	r2, r3, #32
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e007      	b.n	800bbbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb6:	2b80      	cmp	r3, #128	@ 0x80
 800bbb8:	d1c3      	bne.n	800bb42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbd0:	e034      	b.n	800bc3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f000 f89b 	bl	800bd0e <I2C_IsAcknowledgeFailed>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e034      	b.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbe8:	d028      	beq.n	800bc3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbea:	f7fe f87b 	bl	8009ce4 <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d302      	bcc.n	800bc00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d11d      	bne.n	800bc3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	f003 0304 	and.w	r3, r3, #4
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	d016      	beq.n	800bc3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2220      	movs	r2, #32
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc28:	f043 0220 	orr.w	r2, r3, #32
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e007      	b.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b04      	cmp	r3, #4
 800bc48:	d1c3      	bne.n	800bbd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc60:	e049      	b.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	695b      	ldr	r3, [r3, #20]
 800bc68:	f003 0310 	and.w	r3, r3, #16
 800bc6c:	2b10      	cmp	r3, #16
 800bc6e:	d119      	bne.n	800bca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f06f 0210 	mvn.w	r2, #16
 800bc78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2220      	movs	r2, #32
 800bc84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e030      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bca4:	f7fe f81e 	bl	8009ce4 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d302      	bcc.n	800bcba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d11d      	bne.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	695b      	ldr	r3, [r3, #20]
 800bcc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcc4:	2b40      	cmp	r3, #64	@ 0x40
 800bcc6:	d016      	beq.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce2:	f043 0220 	orr.w	r2, r3, #32
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e007      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd00:	2b40      	cmp	r3, #64	@ 0x40
 800bd02:	d1ae      	bne.n	800bc62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd24:	d11b      	bne.n	800bd5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bd2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd4a:	f043 0204 	orr.w	r2, r3, #4
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e000      	b.n	800bd60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bc80      	pop	{r7}
 800bd68:	4770      	bx	lr
	...

0800bd6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e272      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 0301 	and.w	r3, r3, #1
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 8087 	beq.w	800be9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd8c:	4b92      	ldr	r3, [pc, #584]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	f003 030c 	and.w	r3, r3, #12
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	d00c      	beq.n	800bdb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bd98:	4b8f      	ldr	r3, [pc, #572]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f003 030c 	and.w	r3, r3, #12
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d112      	bne.n	800bdca <HAL_RCC_OscConfig+0x5e>
 800bda4:	4b8c      	ldr	r3, [pc, #560]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb0:	d10b      	bne.n	800bdca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdb2:	4b89      	ldr	r3, [pc, #548]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d06c      	beq.n	800be98 <HAL_RCC_OscConfig+0x12c>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d168      	bne.n	800be98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e24c      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdd2:	d106      	bne.n	800bde2 <HAL_RCC_OscConfig+0x76>
 800bdd4:	4b80      	ldr	r3, [pc, #512]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a7f      	ldr	r2, [pc, #508]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	e02e      	b.n	800be40 <HAL_RCC_OscConfig+0xd4>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10c      	bne.n	800be04 <HAL_RCC_OscConfig+0x98>
 800bdea:	4b7b      	ldr	r3, [pc, #492]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a7a      	ldr	r2, [pc, #488]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	4b78      	ldr	r3, [pc, #480]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a77      	ldr	r2, [pc, #476]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bdfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	e01d      	b.n	800be40 <HAL_RCC_OscConfig+0xd4>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be0c:	d10c      	bne.n	800be28 <HAL_RCC_OscConfig+0xbc>
 800be0e:	4b72      	ldr	r3, [pc, #456]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a71      	ldr	r2, [pc, #452]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	4b6f      	ldr	r3, [pc, #444]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a6e      	ldr	r2, [pc, #440]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	e00b      	b.n	800be40 <HAL_RCC_OscConfig+0xd4>
 800be28:	4b6b      	ldr	r3, [pc, #428]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a6a      	ldr	r2, [pc, #424]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	4b68      	ldr	r3, [pc, #416]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a67      	ldr	r2, [pc, #412]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d013      	beq.n	800be70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be48:	f7fd ff4c 	bl	8009ce4 <HAL_GetTick>
 800be4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be4e:	e008      	b.n	800be62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be50:	f7fd ff48 	bl	8009ce4 <HAL_GetTick>
 800be54:	4602      	mov	r2, r0
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	2b64      	cmp	r3, #100	@ 0x64
 800be5c:	d901      	bls.n	800be62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e200      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be62:	4b5d      	ldr	r3, [pc, #372]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d0f0      	beq.n	800be50 <HAL_RCC_OscConfig+0xe4>
 800be6e:	e014      	b.n	800be9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be70:	f7fd ff38 	bl	8009ce4 <HAL_GetTick>
 800be74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be76:	e008      	b.n	800be8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be78:	f7fd ff34 	bl	8009ce4 <HAL_GetTick>
 800be7c:	4602      	mov	r2, r0
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b64      	cmp	r3, #100	@ 0x64
 800be84:	d901      	bls.n	800be8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e1ec      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be8a:	4b53      	ldr	r3, [pc, #332]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1f0      	bne.n	800be78 <HAL_RCC_OscConfig+0x10c>
 800be96:	e000      	b.n	800be9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d063      	beq.n	800bf6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bea6:	4b4c      	ldr	r3, [pc, #304]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f003 030c 	and.w	r3, r3, #12
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00b      	beq.n	800beca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800beb2:	4b49      	ldr	r3, [pc, #292]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f003 030c 	and.w	r3, r3, #12
 800beba:	2b08      	cmp	r3, #8
 800bebc:	d11c      	bne.n	800bef8 <HAL_RCC_OscConfig+0x18c>
 800bebe:	4b46      	ldr	r3, [pc, #280]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d116      	bne.n	800bef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beca:	4b43      	ldr	r3, [pc, #268]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0302 	and.w	r3, r3, #2
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d005      	beq.n	800bee2 <HAL_RCC_OscConfig+0x176>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d001      	beq.n	800bee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e1c0      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bee2:	4b3d      	ldr	r3, [pc, #244]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	4939      	ldr	r1, [pc, #228]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bef6:	e03a      	b.n	800bf6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d020      	beq.n	800bf42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf00:	4b36      	ldr	r3, [pc, #216]	@ (800bfdc <HAL_RCC_OscConfig+0x270>)
 800bf02:	2201      	movs	r2, #1
 800bf04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf06:	f7fd feed 	bl	8009ce4 <HAL_GetTick>
 800bf0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf0c:	e008      	b.n	800bf20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf0e:	f7fd fee9 	bl	8009ce4 <HAL_GetTick>
 800bf12:	4602      	mov	r2, r0
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d901      	bls.n	800bf20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e1a1      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf20:	4b2d      	ldr	r3, [pc, #180]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0302 	and.w	r3, r3, #2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0f0      	beq.n	800bf0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf2c:	4b2a      	ldr	r3, [pc, #168]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	4927      	ldr	r1, [pc, #156]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	600b      	str	r3, [r1, #0]
 800bf40:	e015      	b.n	800bf6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf42:	4b26      	ldr	r3, [pc, #152]	@ (800bfdc <HAL_RCC_OscConfig+0x270>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf48:	f7fd fecc 	bl	8009ce4 <HAL_GetTick>
 800bf4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf4e:	e008      	b.n	800bf62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf50:	f7fd fec8 	bl	8009ce4 <HAL_GetTick>
 800bf54:	4602      	mov	r2, r0
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d901      	bls.n	800bf62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e180      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf62:	4b1d      	ldr	r3, [pc, #116]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0302 	and.w	r3, r3, #2
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f0      	bne.n	800bf50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 0308 	and.w	r3, r3, #8
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d03a      	beq.n	800bff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d019      	beq.n	800bfb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf82:	4b17      	ldr	r3, [pc, #92]	@ (800bfe0 <HAL_RCC_OscConfig+0x274>)
 800bf84:	2201      	movs	r2, #1
 800bf86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf88:	f7fd feac 	bl	8009ce4 <HAL_GetTick>
 800bf8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf8e:	e008      	b.n	800bfa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf90:	f7fd fea8 	bl	8009ce4 <HAL_GetTick>
 800bf94:	4602      	mov	r2, r0
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d901      	bls.n	800bfa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e160      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfa2:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd8 <HAL_RCC_OscConfig+0x26c>)
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa6:	f003 0302 	and.w	r3, r3, #2
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0f0      	beq.n	800bf90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bfae:	2001      	movs	r0, #1
 800bfb0:	f000 face 	bl	800c550 <RCC_Delay>
 800bfb4:	e01c      	b.n	800bff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe0 <HAL_RCC_OscConfig+0x274>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfbc:	f7fd fe92 	bl	8009ce4 <HAL_GetTick>
 800bfc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfc2:	e00f      	b.n	800bfe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfc4:	f7fd fe8e 	bl	8009ce4 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d908      	bls.n	800bfe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e146      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
 800bfd6:	bf00      	nop
 800bfd8:	40021000 	.word	0x40021000
 800bfdc:	42420000 	.word	0x42420000
 800bfe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfe4:	4b92      	ldr	r3, [pc, #584]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e9      	bne.n	800bfc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 80a6 	beq.w	800c14a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bffe:	2300      	movs	r3, #0
 800c000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c002:	4b8b      	ldr	r3, [pc, #556]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10d      	bne.n	800c02a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c00e:	4b88      	ldr	r3, [pc, #544]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	4a87      	ldr	r2, [pc, #540]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c018:	61d3      	str	r3, [r2, #28]
 800c01a:	4b85      	ldr	r3, [pc, #532]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c022:	60bb      	str	r3, [r7, #8]
 800c024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c026:	2301      	movs	r3, #1
 800c028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c02a:	4b82      	ldr	r3, [pc, #520]	@ (800c234 <HAL_RCC_OscConfig+0x4c8>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c032:	2b00      	cmp	r3, #0
 800c034:	d118      	bne.n	800c068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c036:	4b7f      	ldr	r3, [pc, #508]	@ (800c234 <HAL_RCC_OscConfig+0x4c8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a7e      	ldr	r2, [pc, #504]	@ (800c234 <HAL_RCC_OscConfig+0x4c8>)
 800c03c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c042:	f7fd fe4f 	bl	8009ce4 <HAL_GetTick>
 800c046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c048:	e008      	b.n	800c05c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c04a:	f7fd fe4b 	bl	8009ce4 <HAL_GetTick>
 800c04e:	4602      	mov	r2, r0
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	2b64      	cmp	r3, #100	@ 0x64
 800c056:	d901      	bls.n	800c05c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c058:	2303      	movs	r3, #3
 800c05a:	e103      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c05c:	4b75      	ldr	r3, [pc, #468]	@ (800c234 <HAL_RCC_OscConfig+0x4c8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c064:	2b00      	cmp	r3, #0
 800c066:	d0f0      	beq.n	800c04a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d106      	bne.n	800c07e <HAL_RCC_OscConfig+0x312>
 800c070:	4b6f      	ldr	r3, [pc, #444]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	4a6e      	ldr	r2, [pc, #440]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	6213      	str	r3, [r2, #32]
 800c07c:	e02d      	b.n	800c0da <HAL_RCC_OscConfig+0x36e>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10c      	bne.n	800c0a0 <HAL_RCC_OscConfig+0x334>
 800c086:	4b6a      	ldr	r3, [pc, #424]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	4a69      	ldr	r2, [pc, #420]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	6213      	str	r3, [r2, #32]
 800c092:	4b67      	ldr	r3, [pc, #412]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	4a66      	ldr	r2, [pc, #408]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c098:	f023 0304 	bic.w	r3, r3, #4
 800c09c:	6213      	str	r3, [r2, #32]
 800c09e:	e01c      	b.n	800c0da <HAL_RCC_OscConfig+0x36e>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	2b05      	cmp	r3, #5
 800c0a6:	d10c      	bne.n	800c0c2 <HAL_RCC_OscConfig+0x356>
 800c0a8:	4b61      	ldr	r3, [pc, #388]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	4a60      	ldr	r2, [pc, #384]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0ae:	f043 0304 	orr.w	r3, r3, #4
 800c0b2:	6213      	str	r3, [r2, #32]
 800c0b4:	4b5e      	ldr	r3, [pc, #376]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	4a5d      	ldr	r2, [pc, #372]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0ba:	f043 0301 	orr.w	r3, r3, #1
 800c0be:	6213      	str	r3, [r2, #32]
 800c0c0:	e00b      	b.n	800c0da <HAL_RCC_OscConfig+0x36e>
 800c0c2:	4b5b      	ldr	r3, [pc, #364]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	4a5a      	ldr	r2, [pc, #360]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0c8:	f023 0301 	bic.w	r3, r3, #1
 800c0cc:	6213      	str	r3, [r2, #32]
 800c0ce:	4b58      	ldr	r3, [pc, #352]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	4a57      	ldr	r2, [pc, #348]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c0d4:	f023 0304 	bic.w	r3, r3, #4
 800c0d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d015      	beq.n	800c10e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0e2:	f7fd fdff 	bl	8009ce4 <HAL_GetTick>
 800c0e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0e8:	e00a      	b.n	800c100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0ea:	f7fd fdfb 	bl	8009ce4 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d901      	bls.n	800c100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e0b1      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c100:	4b4b      	ldr	r3, [pc, #300]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	f003 0302 	and.w	r3, r3, #2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0ee      	beq.n	800c0ea <HAL_RCC_OscConfig+0x37e>
 800c10c:	e014      	b.n	800c138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c10e:	f7fd fde9 	bl	8009ce4 <HAL_GetTick>
 800c112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c114:	e00a      	b.n	800c12c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c116:	f7fd fde5 	bl	8009ce4 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c124:	4293      	cmp	r3, r2
 800c126:	d901      	bls.n	800c12c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c128:	2303      	movs	r3, #3
 800c12a:	e09b      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c12c:	4b40      	ldr	r3, [pc, #256]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c12e:	6a1b      	ldr	r3, [r3, #32]
 800c130:	f003 0302 	and.w	r3, r3, #2
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1ee      	bne.n	800c116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c138:	7dfb      	ldrb	r3, [r7, #23]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d105      	bne.n	800c14a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c13e:	4b3c      	ldr	r3, [pc, #240]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	4a3b      	ldr	r2, [pc, #236]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	69db      	ldr	r3, [r3, #28]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 8087 	beq.w	800c262 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c154:	4b36      	ldr	r3, [pc, #216]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	f003 030c 	and.w	r3, r3, #12
 800c15c:	2b08      	cmp	r3, #8
 800c15e:	d061      	beq.n	800c224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	69db      	ldr	r3, [r3, #28]
 800c164:	2b02      	cmp	r3, #2
 800c166:	d146      	bne.n	800c1f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c168:	4b33      	ldr	r3, [pc, #204]	@ (800c238 <HAL_RCC_OscConfig+0x4cc>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c16e:	f7fd fdb9 	bl	8009ce4 <HAL_GetTick>
 800c172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c174:	e008      	b.n	800c188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c176:	f7fd fdb5 	bl	8009ce4 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	2b02      	cmp	r3, #2
 800c182:	d901      	bls.n	800c188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e06d      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c188:	4b29      	ldr	r3, [pc, #164]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1f0      	bne.n	800c176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c19c:	d108      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c19e:	4b24      	ldr	r3, [pc, #144]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	4921      	ldr	r1, [pc, #132]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c1b0:	4b1f      	ldr	r3, [pc, #124]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a19      	ldr	r1, [r3, #32]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c0:	430b      	orrs	r3, r1
 800c1c2:	491b      	ldr	r1, [pc, #108]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c238 <HAL_RCC_OscConfig+0x4cc>)
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1ce:	f7fd fd89 	bl	8009ce4 <HAL_GetTick>
 800c1d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1d4:	e008      	b.n	800c1e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1d6:	f7fd fd85 	bl	8009ce4 <HAL_GetTick>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d901      	bls.n	800c1e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	e03d      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1e8:	4b11      	ldr	r3, [pc, #68]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d0f0      	beq.n	800c1d6 <HAL_RCC_OscConfig+0x46a>
 800c1f4:	e035      	b.n	800c262 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1f6:	4b10      	ldr	r3, [pc, #64]	@ (800c238 <HAL_RCC_OscConfig+0x4cc>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1fc:	f7fd fd72 	bl	8009ce4 <HAL_GetTick>
 800c200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c202:	e008      	b.n	800c216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c204:	f7fd fd6e 	bl	8009ce4 <HAL_GetTick>
 800c208:	4602      	mov	r2, r0
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d901      	bls.n	800c216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e026      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c216:	4b06      	ldr	r3, [pc, #24]	@ (800c230 <HAL_RCC_OscConfig+0x4c4>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1f0      	bne.n	800c204 <HAL_RCC_OscConfig+0x498>
 800c222:	e01e      	b.n	800c262 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d107      	bne.n	800c23c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e019      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
 800c230:	40021000 	.word	0x40021000
 800c234:	40007000 	.word	0x40007000
 800c238:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c23c:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <HAL_RCC_OscConfig+0x500>)
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d106      	bne.n	800c25e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d001      	beq.n	800c262 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c25e:	2301      	movs	r3, #1
 800c260:	e000      	b.n	800c264 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	40021000 	.word	0x40021000

0800c270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e0d0      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c284:	4b6a      	ldr	r3, [pc, #424]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 0307 	and.w	r3, r3, #7
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d910      	bls.n	800c2b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c292:	4b67      	ldr	r3, [pc, #412]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f023 0207 	bic.w	r2, r3, #7
 800c29a:	4965      	ldr	r1, [pc, #404]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2a2:	4b63      	ldr	r3, [pc, #396]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	683a      	ldr	r2, [r7, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d001      	beq.n	800c2b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e0b8      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0302 	and.w	r3, r3, #2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d020      	beq.n	800c302 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 0304 	and.w	r3, r3, #4
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d005      	beq.n	800c2d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2cc:	4b59      	ldr	r3, [pc, #356]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	4a58      	ldr	r2, [pc, #352]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c2d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c2d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0308 	and.w	r3, r3, #8
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2e4:	4b53      	ldr	r3, [pc, #332]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4a52      	ldr	r2, [pc, #328]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c2ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2f0:	4b50      	ldr	r3, [pc, #320]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	494d      	ldr	r1, [pc, #308]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d040      	beq.n	800c390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d107      	bne.n	800c326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c316:	4b47      	ldr	r3, [pc, #284]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d115      	bne.n	800c34e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e07f      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d107      	bne.n	800c33e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c32e:	4b41      	ldr	r3, [pc, #260]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d109      	bne.n	800c34e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e073      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c33e:	4b3d      	ldr	r3, [pc, #244]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e06b      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c34e:	4b39      	ldr	r3, [pc, #228]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f023 0203 	bic.w	r2, r3, #3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	4936      	ldr	r1, [pc, #216]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c35c:	4313      	orrs	r3, r2
 800c35e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c360:	f7fd fcc0 	bl	8009ce4 <HAL_GetTick>
 800c364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c366:	e00a      	b.n	800c37e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c368:	f7fd fcbc 	bl	8009ce4 <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c376:	4293      	cmp	r3, r2
 800c378:	d901      	bls.n	800c37e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e053      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c37e:	4b2d      	ldr	r3, [pc, #180]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f003 020c 	and.w	r2, r3, #12
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d1eb      	bne.n	800c368 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c390:	4b27      	ldr	r3, [pc, #156]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 0307 	and.w	r3, r3, #7
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d210      	bcs.n	800c3c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c39e:	4b24      	ldr	r3, [pc, #144]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f023 0207 	bic.w	r2, r3, #7
 800c3a6:	4922      	ldr	r1, [pc, #136]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3ae:	4b20      	ldr	r3, [pc, #128]	@ (800c430 <HAL_RCC_ClockConfig+0x1c0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d001      	beq.n	800c3c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e032      	b.n	800c426 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d008      	beq.n	800c3de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3cc:	4b19      	ldr	r3, [pc, #100]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	4916      	ldr	r1, [pc, #88]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d009      	beq.n	800c3fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c3ea:	4b12      	ldr	r3, [pc, #72]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	490e      	ldr	r1, [pc, #56]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c3fe:	f000 f821 	bl	800c444 <HAL_RCC_GetSysClockFreq>
 800c402:	4602      	mov	r2, r0
 800c404:	4b0b      	ldr	r3, [pc, #44]	@ (800c434 <HAL_RCC_ClockConfig+0x1c4>)
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	091b      	lsrs	r3, r3, #4
 800c40a:	f003 030f 	and.w	r3, r3, #15
 800c40e:	490a      	ldr	r1, [pc, #40]	@ (800c438 <HAL_RCC_ClockConfig+0x1c8>)
 800c410:	5ccb      	ldrb	r3, [r1, r3]
 800c412:	fa22 f303 	lsr.w	r3, r2, r3
 800c416:	4a09      	ldr	r2, [pc, #36]	@ (800c43c <HAL_RCC_ClockConfig+0x1cc>)
 800c418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c41a:	4b09      	ldr	r3, [pc, #36]	@ (800c440 <HAL_RCC_ClockConfig+0x1d0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fd fc1e 	bl	8009c60 <HAL_InitTick>

  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	40022000 	.word	0x40022000
 800c434:	40021000 	.word	0x40021000
 800c438:	0800f48c 	.word	0x0800f48c
 800c43c:	20000f74 	.word	0x20000f74
 800c440:	20000f78 	.word	0x20000f78

0800c444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	2300      	movs	r3, #0
 800c450:	60bb      	str	r3, [r7, #8]
 800c452:	2300      	movs	r3, #0
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	2300      	movs	r3, #0
 800c458:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f003 030c 	and.w	r3, r3, #12
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	d002      	beq.n	800c474 <HAL_RCC_GetSysClockFreq+0x30>
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d003      	beq.n	800c47a <HAL_RCC_GetSysClockFreq+0x36>
 800c472:	e027      	b.n	800c4c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c474:	4b19      	ldr	r3, [pc, #100]	@ (800c4dc <HAL_RCC_GetSysClockFreq+0x98>)
 800c476:	613b      	str	r3, [r7, #16]
      break;
 800c478:	e027      	b.n	800c4ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	0c9b      	lsrs	r3, r3, #18
 800c47e:	f003 030f 	and.w	r3, r3, #15
 800c482:	4a17      	ldr	r2, [pc, #92]	@ (800c4e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c484:	5cd3      	ldrb	r3, [r2, r3]
 800c486:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d010      	beq.n	800c4b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c492:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	0c5b      	lsrs	r3, r3, #17
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	4a11      	ldr	r2, [pc, #68]	@ (800c4e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c49e:	5cd3      	ldrb	r3, [r2, r3]
 800c4a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a0d      	ldr	r2, [pc, #52]	@ (800c4dc <HAL_RCC_GetSysClockFreq+0x98>)
 800c4a6:	fb03 f202 	mul.w	r2, r3, r2
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	e004      	b.n	800c4be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c4b8:	fb02 f303 	mul.w	r3, r2, r3
 800c4bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	613b      	str	r3, [r7, #16]
      break;
 800c4c2:	e002      	b.n	800c4ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c4c4:	4b05      	ldr	r3, [pc, #20]	@ (800c4dc <HAL_RCC_GetSysClockFreq+0x98>)
 800c4c6:	613b      	str	r3, [r7, #16]
      break;
 800c4c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4ca:	693b      	ldr	r3, [r7, #16]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	371c      	adds	r7, #28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bc80      	pop	{r7}
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	40021000 	.word	0x40021000
 800c4dc:	007a1200 	.word	0x007a1200
 800c4e0:	0800f4a4 	.word	0x0800f4a4
 800c4e4:	0800f4b4 	.word	0x0800f4b4
 800c4e8:	003d0900 	.word	0x003d0900

0800c4ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4f0:	4b02      	ldr	r3, [pc, #8]	@ (800c4fc <HAL_RCC_GetHCLKFreq+0x10>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bc80      	pop	{r7}
 800c4fa:	4770      	bx	lr
 800c4fc:	20000f74 	.word	0x20000f74

0800c500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c504:	f7ff fff2 	bl	800c4ec <HAL_RCC_GetHCLKFreq>
 800c508:	4602      	mov	r2, r0
 800c50a:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	0a1b      	lsrs	r3, r3, #8
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	4903      	ldr	r1, [pc, #12]	@ (800c524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c516:	5ccb      	ldrb	r3, [r1, r3]
 800c518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	40021000 	.word	0x40021000
 800c524:	0800f49c 	.word	0x0800f49c

0800c528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c52c:	f7ff ffde 	bl	800c4ec <HAL_RCC_GetHCLKFreq>
 800c530:	4602      	mov	r2, r0
 800c532:	4b05      	ldr	r3, [pc, #20]	@ (800c548 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	0adb      	lsrs	r3, r3, #11
 800c538:	f003 0307 	and.w	r3, r3, #7
 800c53c:	4903      	ldr	r1, [pc, #12]	@ (800c54c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c53e:	5ccb      	ldrb	r3, [r1, r3]
 800c540:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c544:	4618      	mov	r0, r3
 800c546:	bd80      	pop	{r7, pc}
 800c548:	40021000 	.word	0x40021000
 800c54c:	0800f49c 	.word	0x0800f49c

0800c550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c558:	4b0a      	ldr	r3, [pc, #40]	@ (800c584 <RCC_Delay+0x34>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a0a      	ldr	r2, [pc, #40]	@ (800c588 <RCC_Delay+0x38>)
 800c55e:	fba2 2303 	umull	r2, r3, r2, r3
 800c562:	0a5b      	lsrs	r3, r3, #9
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	fb02 f303 	mul.w	r3, r2, r3
 800c56a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c56c:	bf00      	nop
  }
  while (Delay --);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1e5a      	subs	r2, r3, #1
 800c572:	60fa      	str	r2, [r7, #12]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1f9      	bne.n	800c56c <RCC_Delay+0x1c>
}
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	bc80      	pop	{r7}
 800c582:	4770      	bx	lr
 800c584:	20000f74 	.word	0x20000f74
 800c588:	10624dd3 	.word	0x10624dd3

0800c58c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e041      	b.n	800c622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d106      	bne.n	800c5b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7fd fa22 	bl	80099fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f000 fa82 	bl	800cad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d001      	beq.n	800c644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	e044      	b.n	800c6ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2202      	movs	r2, #2
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68da      	ldr	r2, [r3, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 0201 	orr.w	r2, r2, #1
 800c65a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a1d      	ldr	r2, [pc, #116]	@ (800c6d8 <HAL_TIM_Base_Start_IT+0xac>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d018      	beq.n	800c698 <HAL_TIM_Base_Start_IT+0x6c>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a1c      	ldr	r2, [pc, #112]	@ (800c6dc <HAL_TIM_Base_Start_IT+0xb0>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d013      	beq.n	800c698 <HAL_TIM_Base_Start_IT+0x6c>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c678:	d00e      	beq.n	800c698 <HAL_TIM_Base_Start_IT+0x6c>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a18      	ldr	r2, [pc, #96]	@ (800c6e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d009      	beq.n	800c698 <HAL_TIM_Base_Start_IT+0x6c>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a16      	ldr	r2, [pc, #88]	@ (800c6e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d004      	beq.n	800c698 <HAL_TIM_Base_Start_IT+0x6c>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a15      	ldr	r2, [pc, #84]	@ (800c6e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d111      	bne.n	800c6bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f003 0307 	and.w	r3, r3, #7
 800c6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b06      	cmp	r3, #6
 800c6a8:	d010      	beq.n	800c6cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f042 0201 	orr.w	r2, r2, #1
 800c6b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6ba:	e007      	b.n	800c6cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f042 0201 	orr.w	r2, r2, #1
 800c6ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bc80      	pop	{r7}
 800c6d6:	4770      	bx	lr
 800c6d8:	40012c00 	.word	0x40012c00
 800c6dc:	40013400 	.word	0x40013400
 800c6e0:	40000400 	.word	0x40000400
 800c6e4:	40000800 	.word	0x40000800
 800c6e8:	40000c00 	.word	0x40000c00

0800c6ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d122      	bne.n	800c748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d11b      	bne.n	800c748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f06f 0202 	mvn.w	r2, #2
 800c718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	f003 0303 	and.w	r3, r3, #3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d003      	beq.n	800c736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f9b4 	bl	800ca9c <HAL_TIM_IC_CaptureCallback>
 800c734:	e005      	b.n	800c742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f9a7 	bl	800ca8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f9b6 	bl	800caae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	f003 0304 	and.w	r3, r3, #4
 800c752:	2b04      	cmp	r3, #4
 800c754:	d122      	bne.n	800c79c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b04      	cmp	r3, #4
 800c762:	d11b      	bne.n	800c79c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f06f 0204 	mvn.w	r2, #4
 800c76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2202      	movs	r2, #2
 800c772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	699b      	ldr	r3, [r3, #24]
 800c77a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f98a 	bl	800ca9c <HAL_TIM_IC_CaptureCallback>
 800c788:	e005      	b.n	800c796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f97d 	bl	800ca8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f98c 	bl	800caae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	f003 0308 	and.w	r3, r3, #8
 800c7a6:	2b08      	cmp	r3, #8
 800c7a8:	d122      	bne.n	800c7f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	f003 0308 	and.w	r3, r3, #8
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d11b      	bne.n	800c7f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f06f 0208 	mvn.w	r2, #8
 800c7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2204      	movs	r2, #4
 800c7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	f003 0303 	and.w	r3, r3, #3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f960 	bl	800ca9c <HAL_TIM_IC_CaptureCallback>
 800c7dc:	e005      	b.n	800c7ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f953 	bl	800ca8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f962 	bl	800caae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	f003 0310 	and.w	r3, r3, #16
 800c7fa:	2b10      	cmp	r3, #16
 800c7fc:	d122      	bne.n	800c844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b10      	cmp	r3, #16
 800c80a:	d11b      	bne.n	800c844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f06f 0210 	mvn.w	r2, #16
 800c814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2208      	movs	r2, #8
 800c81a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	69db      	ldr	r3, [r3, #28]
 800c822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f936 	bl	800ca9c <HAL_TIM_IC_CaptureCallback>
 800c830:	e005      	b.n	800c83e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f929 	bl	800ca8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f938 	bl	800caae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	f003 0301 	and.w	r3, r3, #1
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d10e      	bne.n	800c870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d107      	bne.n	800c870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f06f 0201 	mvn.w	r2, #1
 800c868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7fc fd42 	bl	80092f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c87a:	2b80      	cmp	r3, #128	@ 0x80
 800c87c:	d10e      	bne.n	800c89c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c888:	2b80      	cmp	r3, #128	@ 0x80
 800c88a:	d107      	bne.n	800c89c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 faa1 	bl	800cdde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a6:	2b40      	cmp	r3, #64	@ 0x40
 800c8a8:	d10e      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b4:	2b40      	cmp	r3, #64	@ 0x40
 800c8b6:	d107      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f8fc 	bl	800cac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	f003 0320 	and.w	r3, r3, #32
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d10e      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	f003 0320 	and.w	r3, r3, #32
 800c8e0:	2b20      	cmp	r3, #32
 800c8e2:	d107      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f06f 0220 	mvn.w	r2, #32
 800c8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fa6c 	bl	800cdcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c910:	2b01      	cmp	r3, #1
 800c912:	d101      	bne.n	800c918 <HAL_TIM_ConfigClockSource+0x1c>
 800c914:	2302      	movs	r3, #2
 800c916:	e0b4      	b.n	800ca82 <HAL_TIM_ConfigClockSource+0x186>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c93e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c950:	d03e      	beq.n	800c9d0 <HAL_TIM_ConfigClockSource+0xd4>
 800c952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c956:	f200 8087 	bhi.w	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c95a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c95e:	f000 8086 	beq.w	800ca6e <HAL_TIM_ConfigClockSource+0x172>
 800c962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c966:	d87f      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c968:	2b70      	cmp	r3, #112	@ 0x70
 800c96a:	d01a      	beq.n	800c9a2 <HAL_TIM_ConfigClockSource+0xa6>
 800c96c:	2b70      	cmp	r3, #112	@ 0x70
 800c96e:	d87b      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c970:	2b60      	cmp	r3, #96	@ 0x60
 800c972:	d050      	beq.n	800ca16 <HAL_TIM_ConfigClockSource+0x11a>
 800c974:	2b60      	cmp	r3, #96	@ 0x60
 800c976:	d877      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c978:	2b50      	cmp	r3, #80	@ 0x50
 800c97a:	d03c      	beq.n	800c9f6 <HAL_TIM_ConfigClockSource+0xfa>
 800c97c:	2b50      	cmp	r3, #80	@ 0x50
 800c97e:	d873      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c980:	2b40      	cmp	r3, #64	@ 0x40
 800c982:	d058      	beq.n	800ca36 <HAL_TIM_ConfigClockSource+0x13a>
 800c984:	2b40      	cmp	r3, #64	@ 0x40
 800c986:	d86f      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c988:	2b30      	cmp	r3, #48	@ 0x30
 800c98a:	d064      	beq.n	800ca56 <HAL_TIM_ConfigClockSource+0x15a>
 800c98c:	2b30      	cmp	r3, #48	@ 0x30
 800c98e:	d86b      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c990:	2b20      	cmp	r3, #32
 800c992:	d060      	beq.n	800ca56 <HAL_TIM_ConfigClockSource+0x15a>
 800c994:	2b20      	cmp	r3, #32
 800c996:	d867      	bhi.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d05c      	beq.n	800ca56 <HAL_TIM_ConfigClockSource+0x15a>
 800c99c:	2b10      	cmp	r3, #16
 800c99e:	d05a      	beq.n	800ca56 <HAL_TIM_ConfigClockSource+0x15a>
 800c9a0:	e062      	b.n	800ca68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9b2:	f000 f980 	bl	800ccb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	609a      	str	r2, [r3, #8]
      break;
 800c9ce:	e04f      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9e0:	f000 f969 	bl	800ccb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	689a      	ldr	r2, [r3, #8]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c9f2:	609a      	str	r2, [r3, #8]
      break;
 800c9f4:	e03c      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca02:	461a      	mov	r2, r3
 800ca04:	f000 f8e0 	bl	800cbc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2150      	movs	r1, #80	@ 0x50
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 f937 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800ca14:	e02c      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca22:	461a      	mov	r2, r3
 800ca24:	f000 f8fe 	bl	800cc24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2160      	movs	r1, #96	@ 0x60
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 f927 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800ca34:	e01c      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca42:	461a      	mov	r2, r3
 800ca44:	f000 f8c0 	bl	800cbc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2140      	movs	r1, #64	@ 0x40
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 f917 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800ca54:	e00c      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4610      	mov	r0, r2
 800ca62:	f000 f90e 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800ca66:	e003      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca6c:	e000      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b083      	sub	sp, #12
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca92:	bf00      	nop
 800ca94:	370c      	adds	r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bc80      	pop	{r7}
 800ca9a:	4770      	bx	lr

0800ca9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bc80      	pop	{r7}
 800caac:	4770      	bx	lr

0800caae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caae:	b480      	push	{r7}
 800cab0:	b083      	sub	sp, #12
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cab6:	bf00      	nop
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	bc80      	pop	{r7}
 800cabe:	4770      	bx	lr

0800cac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	bc80      	pop	{r7}
 800cad0:	4770      	bx	lr
	...

0800cad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a33      	ldr	r2, [pc, #204]	@ (800cbb4 <TIM_Base_SetConfig+0xe0>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d013      	beq.n	800cb14 <TIM_Base_SetConfig+0x40>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a32      	ldr	r2, [pc, #200]	@ (800cbb8 <TIM_Base_SetConfig+0xe4>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d00f      	beq.n	800cb14 <TIM_Base_SetConfig+0x40>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cafa:	d00b      	beq.n	800cb14 <TIM_Base_SetConfig+0x40>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a2f      	ldr	r2, [pc, #188]	@ (800cbbc <TIM_Base_SetConfig+0xe8>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d007      	beq.n	800cb14 <TIM_Base_SetConfig+0x40>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a2e      	ldr	r2, [pc, #184]	@ (800cbc0 <TIM_Base_SetConfig+0xec>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d003      	beq.n	800cb14 <TIM_Base_SetConfig+0x40>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a2d      	ldr	r2, [pc, #180]	@ (800cbc4 <TIM_Base_SetConfig+0xf0>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d108      	bne.n	800cb26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a22      	ldr	r2, [pc, #136]	@ (800cbb4 <TIM_Base_SetConfig+0xe0>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d013      	beq.n	800cb56 <TIM_Base_SetConfig+0x82>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a21      	ldr	r2, [pc, #132]	@ (800cbb8 <TIM_Base_SetConfig+0xe4>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d00f      	beq.n	800cb56 <TIM_Base_SetConfig+0x82>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb3c:	d00b      	beq.n	800cb56 <TIM_Base_SetConfig+0x82>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a1e      	ldr	r2, [pc, #120]	@ (800cbbc <TIM_Base_SetConfig+0xe8>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d007      	beq.n	800cb56 <TIM_Base_SetConfig+0x82>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a1d      	ldr	r2, [pc, #116]	@ (800cbc0 <TIM_Base_SetConfig+0xec>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d003      	beq.n	800cb56 <TIM_Base_SetConfig+0x82>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a1c      	ldr	r2, [pc, #112]	@ (800cbc4 <TIM_Base_SetConfig+0xf0>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d108      	bne.n	800cb68 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a09      	ldr	r2, [pc, #36]	@ (800cbb4 <TIM_Base_SetConfig+0xe0>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d003      	beq.n	800cb9c <TIM_Base_SetConfig+0xc8>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a08      	ldr	r2, [pc, #32]	@ (800cbb8 <TIM_Base_SetConfig+0xe4>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d103      	bne.n	800cba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	691a      	ldr	r2, [r3, #16]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2201      	movs	r2, #1
 800cba8:	615a      	str	r2, [r3, #20]
}
 800cbaa:	bf00      	nop
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bc80      	pop	{r7}
 800cbb2:	4770      	bx	lr
 800cbb4:	40012c00 	.word	0x40012c00
 800cbb8:	40013400 	.word	0x40013400
 800cbbc:	40000400 	.word	0x40000400
 800cbc0:	40000800 	.word	0x40000800
 800cbc4:	40000c00 	.word	0x40000c00

0800cbc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	f023 0201 	bic.w	r2, r3, #1
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	011b      	lsls	r3, r3, #4
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f023 030a 	bic.w	r3, r3, #10
 800cc04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc06:	697a      	ldr	r2, [r7, #20]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	621a      	str	r2, [r3, #32]
}
 800cc1a:	bf00      	nop
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc80      	pop	{r7}
 800cc22:	4770      	bx	lr

0800cc24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	f023 0210 	bic.w	r2, r3, #16
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	031b      	lsls	r3, r3, #12
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	011b      	lsls	r3, r3, #4
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	621a      	str	r2, [r3, #32]
}
 800cc78:	bf00      	nop
 800cc7a:	371c      	adds	r7, #28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bc80      	pop	{r7}
 800cc80:	4770      	bx	lr

0800cc82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	f043 0307 	orr.w	r3, r3, #7
 800cca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	609a      	str	r2, [r3, #8]
}
 800ccac:	bf00      	nop
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bc80      	pop	{r7}
 800ccb4:	4770      	bx	lr

0800ccb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	b087      	sub	sp, #28
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
 800ccc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	021a      	lsls	r2, r3, #8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	431a      	orrs	r2, r3
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	609a      	str	r2, [r3, #8]
}
 800ccea:	bf00      	nop
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bc80      	pop	{r7}
 800ccf2:	4770      	bx	lr

0800ccf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e050      	b.n	800cdae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2202      	movs	r2, #2
 800cd18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a1b      	ldr	r2, [pc, #108]	@ (800cdb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d018      	beq.n	800cd82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a19      	ldr	r2, [pc, #100]	@ (800cdbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d013      	beq.n	800cd82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd62:	d00e      	beq.n	800cd82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a15      	ldr	r2, [pc, #84]	@ (800cdc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d009      	beq.n	800cd82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a14      	ldr	r2, [pc, #80]	@ (800cdc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d004      	beq.n	800cd82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a12      	ldr	r2, [pc, #72]	@ (800cdc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d10c      	bne.n	800cd9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bc80      	pop	{r7}
 800cdb6:	4770      	bx	lr
 800cdb8:	40012c00 	.word	0x40012c00
 800cdbc:	40013400 	.word	0x40013400
 800cdc0:	40000400 	.word	0x40000400
 800cdc4:	40000800 	.word	0x40000800
 800cdc8:	40000c00 	.word	0x40000c00

0800cdcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bc80      	pop	{r7}
 800cddc:	4770      	bx	lr

0800cdde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bc80      	pop	{r7}
 800cdee:	4770      	bx	lr

0800cdf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d101      	bne.n	800ce02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e042      	b.n	800ce88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7fc fe16 	bl	8009a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2224      	movs	r2, #36	@ 0x24
 800ce20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68da      	ldr	r2, [r3, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 fe8d 	bl	800db54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	691a      	ldr	r2, [r3, #16]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	695a      	ldr	r2, [r3, #20]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68da      	ldr	r2, [r3, #12]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	@ 0x28
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2b20      	cmp	r3, #32
 800ceae:	d16d      	bne.n	800cf8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <HAL_UART_Transmit+0x2c>
 800ceb6:	88fb      	ldrh	r3, [r7, #6]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e066      	b.n	800cf8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2221      	movs	r2, #33	@ 0x21
 800ceca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cece:	f7fc ff09 	bl	8009ce4 <HAL_GetTick>
 800ced2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	88fa      	ldrh	r2, [r7, #6]
 800ced8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	88fa      	ldrh	r2, [r7, #6]
 800cede:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cee8:	d108      	bne.n	800cefc <HAL_UART_Transmit+0x6c>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d104      	bne.n	800cefc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	e003      	b.n	800cf04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf00:	2300      	movs	r3, #0
 800cf02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf04:	e02a      	b.n	800cf5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	2180      	movs	r1, #128	@ 0x80
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 fbdc 	bl	800d6ce <UART_WaitOnFlagUntilTimeout>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e036      	b.n	800cf8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10b      	bne.n	800cf3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	3302      	adds	r3, #2
 800cf3a:	61bb      	str	r3, [r7, #24]
 800cf3c:	e007      	b.n	800cf4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	781a      	ldrb	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	3b01      	subs	r3, #1
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1cf      	bne.n	800cf06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2140      	movs	r1, #64	@ 0x40
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f000 fbac 	bl	800d6ce <UART_WaitOnFlagUntilTimeout>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	e006      	b.n	800cf8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2220      	movs	r2, #32
 800cf84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e000      	b.n	800cf8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cf8c:	2302      	movs	r3, #2
  }
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b08a      	sub	sp, #40	@ 0x28
 800cf9a:	af02      	add	r7, sp, #8
 800cf9c:	60f8      	str	r0, [r7, #12]
 800cf9e:	60b9      	str	r1, [r7, #8]
 800cfa0:	603b      	str	r3, [r7, #0]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b20      	cmp	r3, #32
 800cfb4:	d17c      	bne.n	800d0b0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <HAL_UART_Receive+0x2c>
 800cfbc:	88fb      	ldrh	r3, [r7, #6]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e075      	b.n	800d0b2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2222      	movs	r2, #34	@ 0x22
 800cfd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfda:	f7fc fe83 	bl	8009ce4 <HAL_GetTick>
 800cfde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	88fa      	ldrh	r2, [r7, #6]
 800cfe4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	88fa      	ldrh	r2, [r7, #6]
 800cfea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cff4:	d108      	bne.n	800d008 <HAL_UART_Receive+0x72>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d104      	bne.n	800d008 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800cffe:	2300      	movs	r3, #0
 800d000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	61bb      	str	r3, [r7, #24]
 800d006:	e003      	b.n	800d010 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d010:	e043      	b.n	800d09a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2200      	movs	r2, #0
 800d01a:	2120      	movs	r1, #32
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 fb56 	bl	800d6ce <UART_WaitOnFlagUntilTimeout>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e042      	b.n	800d0b2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10c      	bne.n	800d04c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d03e:	b29a      	uxth	r2, r3
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	3302      	adds	r3, #2
 800d048:	61bb      	str	r3, [r7, #24]
 800d04a:	e01f      	b.n	800d08c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d054:	d007      	beq.n	800d066 <HAL_UART_Receive+0xd0>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10a      	bne.n	800d074 <HAL_UART_Receive+0xde>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	701a      	strb	r2, [r3, #0]
 800d072:	e008      	b.n	800d086 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d080:	b2da      	uxtb	r2, r3
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	3301      	adds	r3, #1
 800d08a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1b6      	bne.n	800d012 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2220      	movs	r2, #32
 800d0a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	e000      	b.n	800d0b2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d0b0:	2302      	movs	r3, #2
  }
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3720      	adds	r7, #32
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b085      	sub	sp, #20
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b20      	cmp	r3, #32
 800d0d2:	d121      	bne.n	800d118 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <HAL_UART_Transmit_IT+0x26>
 800d0da:	88fb      	ldrh	r3, [r7, #6]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e01a      	b.n	800d11a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	88fa      	ldrh	r2, [r7, #6]
 800d0ee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	88fa      	ldrh	r2, [r7, #6]
 800d0f4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2221      	movs	r2, #33	@ 0x21
 800d100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68da      	ldr	r2, [r3, #12]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d112:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	e000      	b.n	800d11a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800d118:	2302      	movs	r3, #2
  }
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	bc80      	pop	{r7}
 800d122:	4770      	bx	lr

0800d124 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4613      	mov	r3, r2
 800d130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b20      	cmp	r3, #32
 800d13c:	d112      	bne.n	800d164 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <HAL_UART_Receive_IT+0x26>
 800d144:	88fb      	ldrh	r3, [r7, #6]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e00b      	b.n	800d166 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	461a      	mov	r2, r3
 800d158:	68b9      	ldr	r1, [r7, #8]
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f000 fb25 	bl	800d7aa <UART_Start_Receive_IT>
 800d160:	4603      	mov	r3, r0
 800d162:	e000      	b.n	800d166 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d164:	2302      	movs	r3, #2
  }
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b0ba      	sub	sp, #232	@ 0xe8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	695b      	ldr	r3, [r3, #20]
 800d192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d196:	2300      	movs	r3, #0
 800d198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d19c:	2300      	movs	r3, #0
 800d19e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1a6:	f003 030f 	and.w	r3, r3, #15
 800d1aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d1ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10f      	bne.n	800d1d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1ba:	f003 0320 	and.w	r3, r3, #32
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d009      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x66>
 800d1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1c6:	f003 0320 	and.w	r3, r3, #32
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fc01 	bl	800d9d6 <UART_Receive_IT>
      return;
 800d1d4:	e25b      	b.n	800d68e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d1d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f000 80de 	beq.w	800d39c <HAL_UART_IRQHandler+0x22c>
 800d1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1e4:	f003 0301 	and.w	r3, r3, #1
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d106      	bne.n	800d1fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 80d1 	beq.w	800d39c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d1fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00b      	beq.n	800d21e <HAL_UART_IRQHandler+0xae>
 800d206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d20a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d005      	beq.n	800d21e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d216:	f043 0201 	orr.w	r2, r3, #1
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d222:	f003 0304 	and.w	r3, r3, #4
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00b      	beq.n	800d242 <HAL_UART_IRQHandler+0xd2>
 800d22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d005      	beq.n	800d242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d23a:	f043 0202 	orr.w	r2, r3, #2
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d246:	f003 0302 	and.w	r3, r3, #2
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00b      	beq.n	800d266 <HAL_UART_IRQHandler+0xf6>
 800d24e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d005      	beq.n	800d266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d25e:	f043 0204 	orr.w	r2, r3, #4
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d26a:	f003 0308 	and.w	r3, r3, #8
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d011      	beq.n	800d296 <HAL_UART_IRQHandler+0x126>
 800d272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d105      	bne.n	800d28a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d28e:	f043 0208 	orr.w	r2, r3, #8
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f000 81f2 	beq.w	800d684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d008      	beq.n	800d2be <HAL_UART_IRQHandler+0x14e>
 800d2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2b0:	f003 0320 	and.w	r3, r3, #32
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d002      	beq.n	800d2be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fb8c 	bl	800d9d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	695b      	ldr	r3, [r3, #20]
 800d2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	bf14      	ite	ne
 800d2cc:	2301      	movne	r3, #1
 800d2ce:	2300      	moveq	r3, #0
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2da:	f003 0308 	and.w	r3, r3, #8
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d103      	bne.n	800d2ea <HAL_UART_IRQHandler+0x17a>
 800d2e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d04f      	beq.n	800d38a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fa96 	bl	800d81c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d041      	beq.n	800d382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3314      	adds	r3, #20
 800d304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d30c:	e853 3f00 	ldrex	r3, [r3]
 800d310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d31c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3314      	adds	r3, #20
 800d326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d32a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d32e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d33a:	e841 2300 	strex	r3, r2, [r1]
 800d33e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1d9      	bne.n	800d2fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d013      	beq.n	800d37a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d356:	4a7e      	ldr	r2, [pc, #504]	@ (800d550 <HAL_UART_IRQHandler+0x3e0>)
 800d358:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fc ff32 	bl	800a1c8 <HAL_DMA_Abort_IT>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d016      	beq.n	800d398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d36e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d374:	4610      	mov	r0, r2
 800d376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d378:	e00e      	b.n	800d398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f993 	bl	800d6a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d380:	e00a      	b.n	800d398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f98f 	bl	800d6a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d388:	e006      	b.n	800d398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f98b 	bl	800d6a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d396:	e175      	b.n	800d684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d398:	bf00      	nop
    return;
 800d39a:	e173      	b.n	800d684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	f040 814f 	bne.w	800d644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3aa:	f003 0310 	and.w	r3, r3, #16
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 8148 	beq.w	800d644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3b8:	f003 0310 	and.w	r3, r3, #16
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 8141 	beq.w	800d644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60bb      	str	r3, [r7, #8]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	60bb      	str	r3, [r7, #8]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	60bb      	str	r3, [r7, #8]
 800d3d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 80b6 	beq.w	800d554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d3f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 8145 	beq.w	800d688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d406:	429a      	cmp	r2, r3
 800d408:	f080 813e 	bcs.w	800d688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d412:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	2b20      	cmp	r3, #32
 800d41c:	f000 8088 	beq.w	800d530 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	330c      	adds	r3, #12
 800d426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d42e:	e853 3f00 	ldrex	r3, [r3]
 800d432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d436:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d43a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d43e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	330c      	adds	r3, #12
 800d448:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d44c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d454:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d458:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d45c:	e841 2300 	strex	r3, r2, [r1]
 800d460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1d9      	bne.n	800d420 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3314      	adds	r3, #20
 800d472:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d476:	e853 3f00 	ldrex	r3, [r3]
 800d47a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d47c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d47e:	f023 0301 	bic.w	r3, r3, #1
 800d482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	3314      	adds	r3, #20
 800d48c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d490:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d494:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d496:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d498:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d49c:	e841 2300 	strex	r3, r2, [r1]
 800d4a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d4a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1e1      	bne.n	800d46c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3314      	adds	r3, #20
 800d4ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d4b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d4cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d4ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d4d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4d4:	e841 2300 	strex	r3, r2, [r1]
 800d4d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d4da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e3      	bne.n	800d4a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2220      	movs	r2, #32
 800d4e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	330c      	adds	r3, #12
 800d4f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f8:	e853 3f00 	ldrex	r3, [r3]
 800d4fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d500:	f023 0310 	bic.w	r3, r3, #16
 800d504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	330c      	adds	r3, #12
 800d50e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d512:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d514:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d51a:	e841 2300 	strex	r3, r2, [r1]
 800d51e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1e3      	bne.n	800d4ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fc fe11 	bl	800a152 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d53e:	b29b      	uxth	r3, r3
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	b29b      	uxth	r3, r3
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f8b6 	bl	800d6b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d54c:	e09c      	b.n	800d688 <HAL_UART_IRQHandler+0x518>
 800d54e:	bf00      	nop
 800d550:	0800d8e1 	.word	0x0800d8e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d568:	b29b      	uxth	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f000 808e 	beq.w	800d68c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 8089 	beq.w	800d68c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	330c      	adds	r3, #12
 800d580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d584:	e853 3f00 	ldrex	r3, [r3]
 800d588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d58c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	330c      	adds	r3, #12
 800d59a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d59e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d5a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5a6:	e841 2300 	strex	r3, r2, [r1]
 800d5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e3      	bne.n	800d57a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3314      	adds	r3, #20
 800d5b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5bc:	e853 3f00 	ldrex	r3, [r3]
 800d5c0:	623b      	str	r3, [r7, #32]
   return(result);
 800d5c2:	6a3b      	ldr	r3, [r7, #32]
 800d5c4:	f023 0301 	bic.w	r3, r3, #1
 800d5c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3314      	adds	r3, #20
 800d5d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d5d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5de:	e841 2300 	strex	r3, r2, [r1]
 800d5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1e3      	bne.n	800d5b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	330c      	adds	r3, #12
 800d5fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	60fb      	str	r3, [r7, #12]
   return(result);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f023 0310 	bic.w	r3, r3, #16
 800d60e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	330c      	adds	r3, #12
 800d618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d61c:	61fa      	str	r2, [r7, #28]
 800d61e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d620:	69b9      	ldr	r1, [r7, #24]
 800d622:	69fa      	ldr	r2, [r7, #28]
 800d624:	e841 2300 	strex	r3, r2, [r1]
 800d628:	617b      	str	r3, [r7, #20]
   return(result);
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1e3      	bne.n	800d5f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2202      	movs	r2, #2
 800d634:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f83b 	bl	800d6b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d642:	e023      	b.n	800d68c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d009      	beq.n	800d664 <HAL_UART_IRQHandler+0x4f4>
 800d650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f953 	bl	800d908 <UART_Transmit_IT>
    return;
 800d662:	e014      	b.n	800d68e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00e      	beq.n	800d68e <HAL_UART_IRQHandler+0x51e>
 800d670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d008      	beq.n	800d68e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f992 	bl	800d9a6 <UART_EndTransmit_IT>
    return;
 800d682:	e004      	b.n	800d68e <HAL_UART_IRQHandler+0x51e>
    return;
 800d684:	bf00      	nop
 800d686:	e002      	b.n	800d68e <HAL_UART_IRQHandler+0x51e>
      return;
 800d688:	bf00      	nop
 800d68a:	e000      	b.n	800d68e <HAL_UART_IRQHandler+0x51e>
      return;
 800d68c:	bf00      	nop
  }
}
 800d68e:	37e8      	adds	r7, #232	@ 0xe8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bc80      	pop	{r7}
 800d6a4:	4770      	bx	lr

0800d6a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6a6:	b480      	push	{r7}
 800d6a8:	b083      	sub	sp, #12
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d6ae:	bf00      	nop
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bc80      	pop	{r7}
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bc80      	pop	{r7}
 800d6cc:	4770      	bx	lr

0800d6ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b090      	sub	sp, #64	@ 0x40
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	603b      	str	r3, [r7, #0]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6de:	e050      	b.n	800d782 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6e6:	d04c      	beq.n	800d782 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d6e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d007      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0x30>
 800d6ee:	f7fc faf9 	bl	8009ce4 <HAL_GetTick>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d241      	bcs.n	800d782 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	330c      	adds	r3, #12
 800d704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d710:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	330c      	adds	r3, #12
 800d71c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d71e:	637a      	str	r2, [r7, #52]	@ 0x34
 800d720:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d722:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d726:	e841 2300 	strex	r3, r2, [r1]
 800d72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1e5      	bne.n	800d6fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	3314      	adds	r3, #20
 800d738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	e853 3f00 	ldrex	r3, [r3]
 800d740:	613b      	str	r3, [r7, #16]
   return(result);
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	f023 0301 	bic.w	r3, r3, #1
 800d748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	3314      	adds	r3, #20
 800d750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d752:	623a      	str	r2, [r7, #32]
 800d754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d756:	69f9      	ldr	r1, [r7, #28]
 800d758:	6a3a      	ldr	r2, [r7, #32]
 800d75a:	e841 2300 	strex	r3, r2, [r1]
 800d75e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1e5      	bne.n	800d732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2220      	movs	r2, #32
 800d76a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2220      	movs	r2, #32
 800d772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e00f      	b.n	800d7a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	4013      	ands	r3, r2
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	429a      	cmp	r2, r3
 800d790:	bf0c      	ite	eq
 800d792:	2301      	moveq	r3, #1
 800d794:	2300      	movne	r3, #0
 800d796:	b2db      	uxtb	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d09f      	beq.n	800d6e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3740      	adds	r7, #64	@ 0x40
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7aa:	b480      	push	{r7}
 800d7ac:	b085      	sub	sp, #20
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	60f8      	str	r0, [r7, #12]
 800d7b2:	60b9      	str	r1, [r7, #8]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	88fa      	ldrh	r2, [r7, #6]
 800d7c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	88fa      	ldrh	r2, [r7, #6]
 800d7c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2222      	movs	r2, #34	@ 0x22
 800d7d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d007      	beq.n	800d7f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68da      	ldr	r2, [r3, #12]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d7ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	695a      	ldr	r2, [r3, #20]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f042 0201 	orr.w	r2, r2, #1
 800d7fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f042 0220 	orr.w	r2, r2, #32
 800d80e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	bc80      	pop	{r7}
 800d81a:	4770      	bx	lr

0800d81c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b095      	sub	sp, #84	@ 0x54
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	330c      	adds	r3, #12
 800d82a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82e:	e853 3f00 	ldrex	r3, [r3]
 800d832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	330c      	adds	r3, #12
 800d842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d844:	643a      	str	r2, [r7, #64]	@ 0x40
 800d846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d848:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d84a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d84c:	e841 2300 	strex	r3, r2, [r1]
 800d850:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1e5      	bne.n	800d824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3314      	adds	r3, #20
 800d85e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	e853 3f00 	ldrex	r3, [r3]
 800d866:	61fb      	str	r3, [r7, #28]
   return(result);
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	f023 0301 	bic.w	r3, r3, #1
 800d86e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	3314      	adds	r3, #20
 800d876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d87a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e5      	bne.n	800d858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d890:	2b01      	cmp	r3, #1
 800d892:	d119      	bne.n	800d8c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	330c      	adds	r3, #12
 800d89a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	e853 3f00 	ldrex	r3, [r3]
 800d8a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	f023 0310 	bic.w	r3, r3, #16
 800d8aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	330c      	adds	r3, #12
 800d8b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8b4:	61ba      	str	r2, [r7, #24]
 800d8b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b8:	6979      	ldr	r1, [r7, #20]
 800d8ba:	69ba      	ldr	r2, [r7, #24]
 800d8bc:	e841 2300 	strex	r3, r2, [r1]
 800d8c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1e5      	bne.n	800d894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d8d6:	bf00      	nop
 800d8d8:	3754      	adds	r7, #84	@ 0x54
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bc80      	pop	{r7}
 800d8de:	4770      	bx	lr

0800d8e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7ff fed3 	bl	800d6a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b21      	cmp	r3, #33	@ 0x21
 800d91a:	d13e      	bne.n	800d99a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d924:	d114      	bne.n	800d950 <UART_Transmit_IT+0x48>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d110      	bne.n	800d950 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	461a      	mov	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d942:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a1b      	ldr	r3, [r3, #32]
 800d948:	1c9a      	adds	r2, r3, #2
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	621a      	str	r2, [r3, #32]
 800d94e:	e008      	b.n	800d962 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	1c59      	adds	r1, r3, #1
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	6211      	str	r1, [r2, #32]
 800d95a:	781a      	ldrb	r2, [r3, #0]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d966:	b29b      	uxth	r3, r3
 800d968:	3b01      	subs	r3, #1
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4619      	mov	r1, r3
 800d970:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10f      	bne.n	800d996 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68da      	ldr	r2, [r3, #12]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d984:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	68da      	ldr	r2, [r3, #12]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d996:	2300      	movs	r3, #0
 800d998:	e000      	b.n	800d99c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d99a:	2302      	movs	r3, #2
  }
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bc80      	pop	{r7}
 800d9a4:	4770      	bx	lr

0800d9a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7ff fe64 	bl	800d694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b08c      	sub	sp, #48	@ 0x30
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b22      	cmp	r3, #34	@ 0x22
 800d9e8:	f040 80ae 	bne.w	800db48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9f4:	d117      	bne.n	800da26 <UART_Receive_IT+0x50>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d113      	bne.n	800da26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da14:	b29a      	uxth	r2, r3
 800da16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da1e:	1c9a      	adds	r2, r3, #2
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	629a      	str	r2, [r3, #40]	@ 0x28
 800da24:	e026      	b.n	800da74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da38:	d007      	beq.n	800da4a <UART_Receive_IT+0x74>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10a      	bne.n	800da58 <UART_Receive_IT+0x82>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d106      	bne.n	800da58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	b2da      	uxtb	r2, r3
 800da52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da54:	701a      	strb	r2, [r3, #0]
 800da56:	e008      	b.n	800da6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da64:	b2da      	uxtb	r2, r3
 800da66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da6e:	1c5a      	adds	r2, r3, #1
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da78:	b29b      	uxth	r3, r3
 800da7a:	3b01      	subs	r3, #1
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	4619      	mov	r1, r3
 800da82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800da84:	2b00      	cmp	r3, #0
 800da86:	d15d      	bne.n	800db44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68da      	ldr	r2, [r3, #12]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f022 0220 	bic.w	r2, r2, #32
 800da96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68da      	ldr	r2, [r3, #12]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800daa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	695a      	ldr	r2, [r3, #20]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f022 0201 	bic.w	r2, r2, #1
 800dab6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2220      	movs	r2, #32
 800dabc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d135      	bne.n	800db3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	330c      	adds	r3, #12
 800dada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	e853 3f00 	ldrex	r3, [r3]
 800dae2:	613b      	str	r3, [r7, #16]
   return(result);
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f023 0310 	bic.w	r3, r3, #16
 800daea:	627b      	str	r3, [r7, #36]	@ 0x24
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	330c      	adds	r3, #12
 800daf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daf4:	623a      	str	r2, [r7, #32]
 800daf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf8:	69f9      	ldr	r1, [r7, #28]
 800dafa:	6a3a      	ldr	r2, [r7, #32]
 800dafc:	e841 2300 	strex	r3, r2, [r1]
 800db00:	61bb      	str	r3, [r7, #24]
   return(result);
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1e5      	bne.n	800dad4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 0310 	and.w	r3, r3, #16
 800db12:	2b10      	cmp	r3, #16
 800db14:	d10a      	bne.n	800db2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	60fb      	str	r3, [r7, #12]
 800db2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff fdc0 	bl	800d6b8 <HAL_UARTEx_RxEventCallback>
 800db38:	e002      	b.n	800db40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7fb fbea 	bl	8009314 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	e002      	b.n	800db4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	e000      	b.n	800db4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800db48:	2302      	movs	r3, #2
  }
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3730      	adds	r7, #48	@ 0x30
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
	...

0800db54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68da      	ldr	r2, [r3, #12]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	430a      	orrs	r2, r1
 800db70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	431a      	orrs	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	4313      	orrs	r3, r2
 800db82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800db8e:	f023 030c 	bic.w	r3, r3, #12
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	6812      	ldr	r2, [r2, #0]
 800db96:	68b9      	ldr	r1, [r7, #8]
 800db98:	430b      	orrs	r3, r1
 800db9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	699a      	ldr	r2, [r3, #24]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a2c      	ldr	r2, [pc, #176]	@ (800dc68 <UART_SetConfig+0x114>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d103      	bne.n	800dbc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800dbbc:	f7fe fcb4 	bl	800c528 <HAL_RCC_GetPCLK2Freq>
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	e002      	b.n	800dbca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800dbc4:	f7fe fc9c 	bl	800c500 <HAL_RCC_GetPCLK1Freq>
 800dbc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	009a      	lsls	r2, r3, #2
 800dbd4:	441a      	add	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe0:	4a22      	ldr	r2, [pc, #136]	@ (800dc6c <UART_SetConfig+0x118>)
 800dbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe6:	095b      	lsrs	r3, r3, #5
 800dbe8:	0119      	lsls	r1, r3, #4
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009a      	lsls	r2, r3, #2
 800dbf4:	441a      	add	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc00:	4b1a      	ldr	r3, [pc, #104]	@ (800dc6c <UART_SetConfig+0x118>)
 800dc02:	fba3 0302 	umull	r0, r3, r3, r2
 800dc06:	095b      	lsrs	r3, r3, #5
 800dc08:	2064      	movs	r0, #100	@ 0x64
 800dc0a:	fb00 f303 	mul.w	r3, r0, r3
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	011b      	lsls	r3, r3, #4
 800dc12:	3332      	adds	r3, #50	@ 0x32
 800dc14:	4a15      	ldr	r2, [pc, #84]	@ (800dc6c <UART_SetConfig+0x118>)
 800dc16:	fba2 2303 	umull	r2, r3, r2, r3
 800dc1a:	095b      	lsrs	r3, r3, #5
 800dc1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc20:	4419      	add	r1, r3
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009a      	lsls	r2, r3, #2
 800dc2c:	441a      	add	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc38:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <UART_SetConfig+0x118>)
 800dc3a:	fba3 0302 	umull	r0, r3, r3, r2
 800dc3e:	095b      	lsrs	r3, r3, #5
 800dc40:	2064      	movs	r0, #100	@ 0x64
 800dc42:	fb00 f303 	mul.w	r3, r0, r3
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	011b      	lsls	r3, r3, #4
 800dc4a:	3332      	adds	r3, #50	@ 0x32
 800dc4c:	4a07      	ldr	r2, [pc, #28]	@ (800dc6c <UART_SetConfig+0x118>)
 800dc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc52:	095b      	lsrs	r3, r3, #5
 800dc54:	f003 020f 	and.w	r2, r3, #15
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	440a      	add	r2, r1
 800dc5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800dc60:	bf00      	nop
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	40013800 	.word	0x40013800
 800dc6c:	51eb851f 	.word	0x51eb851f

0800dc70 <__itoa>:
 800dc70:	1e93      	subs	r3, r2, #2
 800dc72:	2b22      	cmp	r3, #34	@ 0x22
 800dc74:	b510      	push	{r4, lr}
 800dc76:	460c      	mov	r4, r1
 800dc78:	d904      	bls.n	800dc84 <__itoa+0x14>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	461c      	mov	r4, r3
 800dc7e:	700b      	strb	r3, [r1, #0]
 800dc80:	4620      	mov	r0, r4
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	2a0a      	cmp	r2, #10
 800dc86:	d109      	bne.n	800dc9c <__itoa+0x2c>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	da07      	bge.n	800dc9c <__itoa+0x2c>
 800dc8c:	232d      	movs	r3, #45	@ 0x2d
 800dc8e:	700b      	strb	r3, [r1, #0]
 800dc90:	2101      	movs	r1, #1
 800dc92:	4240      	negs	r0, r0
 800dc94:	4421      	add	r1, r4
 800dc96:	f000 f8db 	bl	800de50 <__utoa>
 800dc9a:	e7f1      	b.n	800dc80 <__itoa+0x10>
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	e7f9      	b.n	800dc94 <__itoa+0x24>

0800dca0 <itoa>:
 800dca0:	f7ff bfe6 	b.w	800dc70 <__itoa>

0800dca4 <malloc>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	@ (800dcb0 <malloc+0xc>)
 800dca6:	4601      	mov	r1, r0
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	f000 b825 	b.w	800dcf8 <_malloc_r>
 800dcae:	bf00      	nop
 800dcb0:	20000f80 	.word	0x20000f80

0800dcb4 <sbrk_aligned>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	4e0f      	ldr	r6, [pc, #60]	@ (800dcf4 <sbrk_aligned+0x40>)
 800dcb8:	460c      	mov	r4, r1
 800dcba:	6831      	ldr	r1, [r6, #0]
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	b911      	cbnz	r1, 800dcc6 <sbrk_aligned+0x12>
 800dcc0:	f000 f948 	bl	800df54 <_sbrk_r>
 800dcc4:	6030      	str	r0, [r6, #0]
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f000 f943 	bl	800df54 <_sbrk_r>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d103      	bne.n	800dcda <sbrk_aligned+0x26>
 800dcd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	1cc4      	adds	r4, r0, #3
 800dcdc:	f024 0403 	bic.w	r4, r4, #3
 800dce0:	42a0      	cmp	r0, r4
 800dce2:	d0f8      	beq.n	800dcd6 <sbrk_aligned+0x22>
 800dce4:	1a21      	subs	r1, r4, r0
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 f934 	bl	800df54 <_sbrk_r>
 800dcec:	3001      	adds	r0, #1
 800dcee:	d1f2      	bne.n	800dcd6 <sbrk_aligned+0x22>
 800dcf0:	e7ef      	b.n	800dcd2 <sbrk_aligned+0x1e>
 800dcf2:	bf00      	nop
 800dcf4:	2000202c 	.word	0x2000202c

0800dcf8 <_malloc_r>:
 800dcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcfc:	1ccd      	adds	r5, r1, #3
 800dcfe:	f025 0503 	bic.w	r5, r5, #3
 800dd02:	3508      	adds	r5, #8
 800dd04:	2d0c      	cmp	r5, #12
 800dd06:	bf38      	it	cc
 800dd08:	250c      	movcc	r5, #12
 800dd0a:	2d00      	cmp	r5, #0
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	db01      	blt.n	800dd14 <_malloc_r+0x1c>
 800dd10:	42a9      	cmp	r1, r5
 800dd12:	d904      	bls.n	800dd1e <_malloc_r+0x26>
 800dd14:	230c      	movs	r3, #12
 800dd16:	6033      	str	r3, [r6, #0]
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ddf4 <_malloc_r+0xfc>
 800dd22:	f000 f869 	bl	800ddf8 <__malloc_lock>
 800dd26:	f8d8 3000 	ldr.w	r3, [r8]
 800dd2a:	461c      	mov	r4, r3
 800dd2c:	bb44      	cbnz	r4, 800dd80 <_malloc_r+0x88>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4630      	mov	r0, r6
 800dd32:	f7ff ffbf 	bl	800dcb4 <sbrk_aligned>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	4604      	mov	r4, r0
 800dd3a:	d158      	bne.n	800ddee <_malloc_r+0xf6>
 800dd3c:	f8d8 4000 	ldr.w	r4, [r8]
 800dd40:	4627      	mov	r7, r4
 800dd42:	2f00      	cmp	r7, #0
 800dd44:	d143      	bne.n	800ddce <_malloc_r+0xd6>
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	d04b      	beq.n	800dde2 <_malloc_r+0xea>
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	4630      	mov	r0, r6
 800dd50:	eb04 0903 	add.w	r9, r4, r3
 800dd54:	f000 f8fe 	bl	800df54 <_sbrk_r>
 800dd58:	4581      	cmp	r9, r0
 800dd5a:	d142      	bne.n	800dde2 <_malloc_r+0xea>
 800dd5c:	6821      	ldr	r1, [r4, #0]
 800dd5e:	4630      	mov	r0, r6
 800dd60:	1a6d      	subs	r5, r5, r1
 800dd62:	4629      	mov	r1, r5
 800dd64:	f7ff ffa6 	bl	800dcb4 <sbrk_aligned>
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d03a      	beq.n	800dde2 <_malloc_r+0xea>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	442b      	add	r3, r5
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	f8d8 3000 	ldr.w	r3, [r8]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	bb62      	cbnz	r2, 800ddd4 <_malloc_r+0xdc>
 800dd7a:	f8c8 7000 	str.w	r7, [r8]
 800dd7e:	e00f      	b.n	800dda0 <_malloc_r+0xa8>
 800dd80:	6822      	ldr	r2, [r4, #0]
 800dd82:	1b52      	subs	r2, r2, r5
 800dd84:	d420      	bmi.n	800ddc8 <_malloc_r+0xd0>
 800dd86:	2a0b      	cmp	r2, #11
 800dd88:	d917      	bls.n	800ddba <_malloc_r+0xc2>
 800dd8a:	1961      	adds	r1, r4, r5
 800dd8c:	42a3      	cmp	r3, r4
 800dd8e:	6025      	str	r5, [r4, #0]
 800dd90:	bf18      	it	ne
 800dd92:	6059      	strne	r1, [r3, #4]
 800dd94:	6863      	ldr	r3, [r4, #4]
 800dd96:	bf08      	it	eq
 800dd98:	f8c8 1000 	streq.w	r1, [r8]
 800dd9c:	5162      	str	r2, [r4, r5]
 800dd9e:	604b      	str	r3, [r1, #4]
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 f82f 	bl	800de04 <__malloc_unlock>
 800dda6:	f104 000b 	add.w	r0, r4, #11
 800ddaa:	1d23      	adds	r3, r4, #4
 800ddac:	f020 0007 	bic.w	r0, r0, #7
 800ddb0:	1ac2      	subs	r2, r0, r3
 800ddb2:	bf1c      	itt	ne
 800ddb4:	1a1b      	subne	r3, r3, r0
 800ddb6:	50a3      	strne	r3, [r4, r2]
 800ddb8:	e7af      	b.n	800dd1a <_malloc_r+0x22>
 800ddba:	6862      	ldr	r2, [r4, #4]
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	bf0c      	ite	eq
 800ddc0:	f8c8 2000 	streq.w	r2, [r8]
 800ddc4:	605a      	strne	r2, [r3, #4]
 800ddc6:	e7eb      	b.n	800dda0 <_malloc_r+0xa8>
 800ddc8:	4623      	mov	r3, r4
 800ddca:	6864      	ldr	r4, [r4, #4]
 800ddcc:	e7ae      	b.n	800dd2c <_malloc_r+0x34>
 800ddce:	463c      	mov	r4, r7
 800ddd0:	687f      	ldr	r7, [r7, #4]
 800ddd2:	e7b6      	b.n	800dd42 <_malloc_r+0x4a>
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d1fb      	bne.n	800ddd4 <_malloc_r+0xdc>
 800dddc:	2300      	movs	r3, #0
 800ddde:	6053      	str	r3, [r2, #4]
 800dde0:	e7de      	b.n	800dda0 <_malloc_r+0xa8>
 800dde2:	230c      	movs	r3, #12
 800dde4:	4630      	mov	r0, r6
 800dde6:	6033      	str	r3, [r6, #0]
 800dde8:	f000 f80c 	bl	800de04 <__malloc_unlock>
 800ddec:	e794      	b.n	800dd18 <_malloc_r+0x20>
 800ddee:	6005      	str	r5, [r0, #0]
 800ddf0:	e7d6      	b.n	800dda0 <_malloc_r+0xa8>
 800ddf2:	bf00      	nop
 800ddf4:	20002030 	.word	0x20002030

0800ddf8 <__malloc_lock>:
 800ddf8:	4801      	ldr	r0, [pc, #4]	@ (800de00 <__malloc_lock+0x8>)
 800ddfa:	f000 b8e5 	b.w	800dfc8 <__retarget_lock_acquire_recursive>
 800ddfe:	bf00      	nop
 800de00:	2000216c 	.word	0x2000216c

0800de04 <__malloc_unlock>:
 800de04:	4801      	ldr	r0, [pc, #4]	@ (800de0c <__malloc_unlock+0x8>)
 800de06:	f000 b8e0 	b.w	800dfca <__retarget_lock_release_recursive>
 800de0a:	bf00      	nop
 800de0c:	2000216c 	.word	0x2000216c

0800de10 <siprintf>:
 800de10:	b40e      	push	{r1, r2, r3}
 800de12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de16:	b500      	push	{lr}
 800de18:	b09c      	sub	sp, #112	@ 0x70
 800de1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800de1c:	9002      	str	r0, [sp, #8]
 800de1e:	9006      	str	r0, [sp, #24]
 800de20:	9107      	str	r1, [sp, #28]
 800de22:	9104      	str	r1, [sp, #16]
 800de24:	4808      	ldr	r0, [pc, #32]	@ (800de48 <siprintf+0x38>)
 800de26:	4909      	ldr	r1, [pc, #36]	@ (800de4c <siprintf+0x3c>)
 800de28:	f853 2b04 	ldr.w	r2, [r3], #4
 800de2c:	9105      	str	r1, [sp, #20]
 800de2e:	6800      	ldr	r0, [r0, #0]
 800de30:	a902      	add	r1, sp, #8
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	f000 f984 	bl	800e140 <_svfiprintf_r>
 800de38:	2200      	movs	r2, #0
 800de3a:	9b02      	ldr	r3, [sp, #8]
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	b01c      	add	sp, #112	@ 0x70
 800de40:	f85d eb04 	ldr.w	lr, [sp], #4
 800de44:	b003      	add	sp, #12
 800de46:	4770      	bx	lr
 800de48:	20000f80 	.word	0x20000f80
 800de4c:	ffff0208 	.word	0xffff0208

0800de50 <__utoa>:
 800de50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de52:	b08b      	sub	sp, #44	@ 0x2c
 800de54:	4605      	mov	r5, r0
 800de56:	460b      	mov	r3, r1
 800de58:	466e      	mov	r6, sp
 800de5a:	4c1d      	ldr	r4, [pc, #116]	@ (800ded0 <__utoa+0x80>)
 800de5c:	f104 0c20 	add.w	ip, r4, #32
 800de60:	4637      	mov	r7, r6
 800de62:	6820      	ldr	r0, [r4, #0]
 800de64:	6861      	ldr	r1, [r4, #4]
 800de66:	3408      	adds	r4, #8
 800de68:	c703      	stmia	r7!, {r0, r1}
 800de6a:	4564      	cmp	r4, ip
 800de6c:	463e      	mov	r6, r7
 800de6e:	d1f7      	bne.n	800de60 <__utoa+0x10>
 800de70:	7921      	ldrb	r1, [r4, #4]
 800de72:	6820      	ldr	r0, [r4, #0]
 800de74:	7139      	strb	r1, [r7, #4]
 800de76:	1e91      	subs	r1, r2, #2
 800de78:	2922      	cmp	r1, #34	@ 0x22
 800de7a:	6038      	str	r0, [r7, #0]
 800de7c:	f04f 0100 	mov.w	r1, #0
 800de80:	d904      	bls.n	800de8c <__utoa+0x3c>
 800de82:	7019      	strb	r1, [r3, #0]
 800de84:	460b      	mov	r3, r1
 800de86:	4618      	mov	r0, r3
 800de88:	b00b      	add	sp, #44	@ 0x2c
 800de8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de8c:	1e58      	subs	r0, r3, #1
 800de8e:	4684      	mov	ip, r0
 800de90:	fbb5 f7f2 	udiv	r7, r5, r2
 800de94:	fb02 5617 	mls	r6, r2, r7, r5
 800de98:	3628      	adds	r6, #40	@ 0x28
 800de9a:	446e      	add	r6, sp
 800de9c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800dea0:	460c      	mov	r4, r1
 800dea2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800dea6:	462e      	mov	r6, r5
 800dea8:	42b2      	cmp	r2, r6
 800deaa:	463d      	mov	r5, r7
 800deac:	f101 0101 	add.w	r1, r1, #1
 800deb0:	d9ee      	bls.n	800de90 <__utoa+0x40>
 800deb2:	2200      	movs	r2, #0
 800deb4:	545a      	strb	r2, [r3, r1]
 800deb6:	1919      	adds	r1, r3, r4
 800deb8:	1aa5      	subs	r5, r4, r2
 800deba:	42aa      	cmp	r2, r5
 800debc:	dae3      	bge.n	800de86 <__utoa+0x36>
 800debe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800dec2:	780e      	ldrb	r6, [r1, #0]
 800dec4:	3201      	adds	r2, #1
 800dec6:	7006      	strb	r6, [r0, #0]
 800dec8:	f801 5901 	strb.w	r5, [r1], #-1
 800decc:	e7f4      	b.n	800deb8 <__utoa+0x68>
 800dece:	bf00      	nop
 800ded0:	0800f4b6 	.word	0x0800f4b6

0800ded4 <strcat>:
 800ded4:	4602      	mov	r2, r0
 800ded6:	b510      	push	{r4, lr}
 800ded8:	7814      	ldrb	r4, [r2, #0]
 800deda:	4613      	mov	r3, r2
 800dedc:	3201      	adds	r2, #1
 800dede:	2c00      	cmp	r4, #0
 800dee0:	d1fa      	bne.n	800ded8 <strcat+0x4>
 800dee2:	3b01      	subs	r3, #1
 800dee4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dee8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deec:	2a00      	cmp	r2, #0
 800deee:	d1f9      	bne.n	800dee4 <strcat+0x10>
 800def0:	bd10      	pop	{r4, pc}

0800def2 <strncpy>:
 800def2:	4603      	mov	r3, r0
 800def4:	b510      	push	{r4, lr}
 800def6:	3901      	subs	r1, #1
 800def8:	b132      	cbz	r2, 800df08 <strncpy+0x16>
 800defa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800defe:	3a01      	subs	r2, #1
 800df00:	f803 4b01 	strb.w	r4, [r3], #1
 800df04:	2c00      	cmp	r4, #0
 800df06:	d1f7      	bne.n	800def8 <strncpy+0x6>
 800df08:	2100      	movs	r1, #0
 800df0a:	441a      	add	r2, r3
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d100      	bne.n	800df12 <strncpy+0x20>
 800df10:	bd10      	pop	{r4, pc}
 800df12:	f803 1b01 	strb.w	r1, [r3], #1
 800df16:	e7f9      	b.n	800df0c <strncpy+0x1a>

0800df18 <strstr>:
 800df18:	780a      	ldrb	r2, [r1, #0]
 800df1a:	b570      	push	{r4, r5, r6, lr}
 800df1c:	b96a      	cbnz	r2, 800df3a <strstr+0x22>
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
 800df20:	429a      	cmp	r2, r3
 800df22:	d109      	bne.n	800df38 <strstr+0x20>
 800df24:	460c      	mov	r4, r1
 800df26:	4605      	mov	r5, r0
 800df28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d0f6      	beq.n	800df1e <strstr+0x6>
 800df30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800df34:	429e      	cmp	r6, r3
 800df36:	d0f7      	beq.n	800df28 <strstr+0x10>
 800df38:	3001      	adds	r0, #1
 800df3a:	7803      	ldrb	r3, [r0, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1ef      	bne.n	800df20 <strstr+0x8>
 800df40:	4618      	mov	r0, r3
 800df42:	e7ec      	b.n	800df1e <strstr+0x6>

0800df44 <memset>:
 800df44:	4603      	mov	r3, r0
 800df46:	4402      	add	r2, r0
 800df48:	4293      	cmp	r3, r2
 800df4a:	d100      	bne.n	800df4e <memset+0xa>
 800df4c:	4770      	bx	lr
 800df4e:	f803 1b01 	strb.w	r1, [r3], #1
 800df52:	e7f9      	b.n	800df48 <memset+0x4>

0800df54 <_sbrk_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	2300      	movs	r3, #0
 800df58:	4d05      	ldr	r5, [pc, #20]	@ (800df70 <_sbrk_r+0x1c>)
 800df5a:	4604      	mov	r4, r0
 800df5c:	4608      	mov	r0, r1
 800df5e:	602b      	str	r3, [r5, #0]
 800df60:	f7fb fe06 	bl	8009b70 <_sbrk>
 800df64:	1c43      	adds	r3, r0, #1
 800df66:	d102      	bne.n	800df6e <_sbrk_r+0x1a>
 800df68:	682b      	ldr	r3, [r5, #0]
 800df6a:	b103      	cbz	r3, 800df6e <_sbrk_r+0x1a>
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	bd38      	pop	{r3, r4, r5, pc}
 800df70:	20002170 	.word	0x20002170

0800df74 <__errno>:
 800df74:	4b01      	ldr	r3, [pc, #4]	@ (800df7c <__errno+0x8>)
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	20000f80 	.word	0x20000f80

0800df80 <__libc_init_array>:
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	2600      	movs	r6, #0
 800df84:	4d0c      	ldr	r5, [pc, #48]	@ (800dfb8 <__libc_init_array+0x38>)
 800df86:	4c0d      	ldr	r4, [pc, #52]	@ (800dfbc <__libc_init_array+0x3c>)
 800df88:	1b64      	subs	r4, r4, r5
 800df8a:	10a4      	asrs	r4, r4, #2
 800df8c:	42a6      	cmp	r6, r4
 800df8e:	d109      	bne.n	800dfa4 <__libc_init_array+0x24>
 800df90:	f000 fbc2 	bl	800e718 <_init>
 800df94:	2600      	movs	r6, #0
 800df96:	4d0a      	ldr	r5, [pc, #40]	@ (800dfc0 <__libc_init_array+0x40>)
 800df98:	4c0a      	ldr	r4, [pc, #40]	@ (800dfc4 <__libc_init_array+0x44>)
 800df9a:	1b64      	subs	r4, r4, r5
 800df9c:	10a4      	asrs	r4, r4, #2
 800df9e:	42a6      	cmp	r6, r4
 800dfa0:	d105      	bne.n	800dfae <__libc_init_array+0x2e>
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa8:	4798      	blx	r3
 800dfaa:	3601      	adds	r6, #1
 800dfac:	e7ee      	b.n	800df8c <__libc_init_array+0xc>
 800dfae:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfb2:	4798      	blx	r3
 800dfb4:	3601      	adds	r6, #1
 800dfb6:	e7f2      	b.n	800df9e <__libc_init_array+0x1e>
 800dfb8:	0800f518 	.word	0x0800f518
 800dfbc:	0800f518 	.word	0x0800f518
 800dfc0:	0800f518 	.word	0x0800f518
 800dfc4:	0800f51c 	.word	0x0800f51c

0800dfc8 <__retarget_lock_acquire_recursive>:
 800dfc8:	4770      	bx	lr

0800dfca <__retarget_lock_release_recursive>:
 800dfca:	4770      	bx	lr

0800dfcc <memcpy>:
 800dfcc:	440a      	add	r2, r1
 800dfce:	4291      	cmp	r1, r2
 800dfd0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dfd4:	d100      	bne.n	800dfd8 <memcpy+0xc>
 800dfd6:	4770      	bx	lr
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfde:	4291      	cmp	r1, r2
 800dfe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfe4:	d1f9      	bne.n	800dfda <memcpy+0xe>
 800dfe6:	bd10      	pop	{r4, pc}

0800dfe8 <strcpy>:
 800dfe8:	4603      	mov	r3, r0
 800dfea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfee:	f803 2b01 	strb.w	r2, [r3], #1
 800dff2:	2a00      	cmp	r2, #0
 800dff4:	d1f9      	bne.n	800dfea <strcpy+0x2>
 800dff6:	4770      	bx	lr

0800dff8 <_free_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4605      	mov	r5, r0
 800dffc:	2900      	cmp	r1, #0
 800dffe:	d040      	beq.n	800e082 <_free_r+0x8a>
 800e000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e004:	1f0c      	subs	r4, r1, #4
 800e006:	2b00      	cmp	r3, #0
 800e008:	bfb8      	it	lt
 800e00a:	18e4      	addlt	r4, r4, r3
 800e00c:	f7ff fef4 	bl	800ddf8 <__malloc_lock>
 800e010:	4a1c      	ldr	r2, [pc, #112]	@ (800e084 <_free_r+0x8c>)
 800e012:	6813      	ldr	r3, [r2, #0]
 800e014:	b933      	cbnz	r3, 800e024 <_free_r+0x2c>
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	6014      	str	r4, [r2, #0]
 800e01a:	4628      	mov	r0, r5
 800e01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e020:	f7ff bef0 	b.w	800de04 <__malloc_unlock>
 800e024:	42a3      	cmp	r3, r4
 800e026:	d908      	bls.n	800e03a <_free_r+0x42>
 800e028:	6820      	ldr	r0, [r4, #0]
 800e02a:	1821      	adds	r1, r4, r0
 800e02c:	428b      	cmp	r3, r1
 800e02e:	bf01      	itttt	eq
 800e030:	6819      	ldreq	r1, [r3, #0]
 800e032:	685b      	ldreq	r3, [r3, #4]
 800e034:	1809      	addeq	r1, r1, r0
 800e036:	6021      	streq	r1, [r4, #0]
 800e038:	e7ed      	b.n	800e016 <_free_r+0x1e>
 800e03a:	461a      	mov	r2, r3
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	b10b      	cbz	r3, 800e044 <_free_r+0x4c>
 800e040:	42a3      	cmp	r3, r4
 800e042:	d9fa      	bls.n	800e03a <_free_r+0x42>
 800e044:	6811      	ldr	r1, [r2, #0]
 800e046:	1850      	adds	r0, r2, r1
 800e048:	42a0      	cmp	r0, r4
 800e04a:	d10b      	bne.n	800e064 <_free_r+0x6c>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	4401      	add	r1, r0
 800e050:	1850      	adds	r0, r2, r1
 800e052:	4283      	cmp	r3, r0
 800e054:	6011      	str	r1, [r2, #0]
 800e056:	d1e0      	bne.n	800e01a <_free_r+0x22>
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4408      	add	r0, r1
 800e05e:	6010      	str	r0, [r2, #0]
 800e060:	6053      	str	r3, [r2, #4]
 800e062:	e7da      	b.n	800e01a <_free_r+0x22>
 800e064:	d902      	bls.n	800e06c <_free_r+0x74>
 800e066:	230c      	movs	r3, #12
 800e068:	602b      	str	r3, [r5, #0]
 800e06a:	e7d6      	b.n	800e01a <_free_r+0x22>
 800e06c:	6820      	ldr	r0, [r4, #0]
 800e06e:	1821      	adds	r1, r4, r0
 800e070:	428b      	cmp	r3, r1
 800e072:	bf01      	itttt	eq
 800e074:	6819      	ldreq	r1, [r3, #0]
 800e076:	685b      	ldreq	r3, [r3, #4]
 800e078:	1809      	addeq	r1, r1, r0
 800e07a:	6021      	streq	r1, [r4, #0]
 800e07c:	6063      	str	r3, [r4, #4]
 800e07e:	6054      	str	r4, [r2, #4]
 800e080:	e7cb      	b.n	800e01a <_free_r+0x22>
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	20002030 	.word	0x20002030

0800e088 <__ssputs_r>:
 800e088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e08c:	461f      	mov	r7, r3
 800e08e:	688e      	ldr	r6, [r1, #8]
 800e090:	4682      	mov	sl, r0
 800e092:	42be      	cmp	r6, r7
 800e094:	460c      	mov	r4, r1
 800e096:	4690      	mov	r8, r2
 800e098:	680b      	ldr	r3, [r1, #0]
 800e09a:	d82d      	bhi.n	800e0f8 <__ssputs_r+0x70>
 800e09c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0a4:	d026      	beq.n	800e0f4 <__ssputs_r+0x6c>
 800e0a6:	6965      	ldr	r5, [r4, #20]
 800e0a8:	6909      	ldr	r1, [r1, #16]
 800e0aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0ae:	eba3 0901 	sub.w	r9, r3, r1
 800e0b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0b6:	1c7b      	adds	r3, r7, #1
 800e0b8:	444b      	add	r3, r9
 800e0ba:	106d      	asrs	r5, r5, #1
 800e0bc:	429d      	cmp	r5, r3
 800e0be:	bf38      	it	cc
 800e0c0:	461d      	movcc	r5, r3
 800e0c2:	0553      	lsls	r3, r2, #21
 800e0c4:	d527      	bpl.n	800e116 <__ssputs_r+0x8e>
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	f7ff fe16 	bl	800dcf8 <_malloc_r>
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	b360      	cbz	r0, 800e12a <__ssputs_r+0xa2>
 800e0d0:	464a      	mov	r2, r9
 800e0d2:	6921      	ldr	r1, [r4, #16]
 800e0d4:	f7ff ff7a 	bl	800dfcc <memcpy>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	6126      	str	r6, [r4, #16]
 800e0e6:	444e      	add	r6, r9
 800e0e8:	6026      	str	r6, [r4, #0]
 800e0ea:	463e      	mov	r6, r7
 800e0ec:	6165      	str	r5, [r4, #20]
 800e0ee:	eba5 0509 	sub.w	r5, r5, r9
 800e0f2:	60a5      	str	r5, [r4, #8]
 800e0f4:	42be      	cmp	r6, r7
 800e0f6:	d900      	bls.n	800e0fa <__ssputs_r+0x72>
 800e0f8:	463e      	mov	r6, r7
 800e0fa:	4632      	mov	r2, r6
 800e0fc:	4641      	mov	r1, r8
 800e0fe:	6820      	ldr	r0, [r4, #0]
 800e100:	f000 fada 	bl	800e6b8 <memmove>
 800e104:	2000      	movs	r0, #0
 800e106:	68a3      	ldr	r3, [r4, #8]
 800e108:	1b9b      	subs	r3, r3, r6
 800e10a:	60a3      	str	r3, [r4, #8]
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	4433      	add	r3, r6
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e116:	462a      	mov	r2, r5
 800e118:	f000 faa0 	bl	800e65c <_realloc_r>
 800e11c:	4606      	mov	r6, r0
 800e11e:	2800      	cmp	r0, #0
 800e120:	d1e0      	bne.n	800e0e4 <__ssputs_r+0x5c>
 800e122:	4650      	mov	r0, sl
 800e124:	6921      	ldr	r1, [r4, #16]
 800e126:	f7ff ff67 	bl	800dff8 <_free_r>
 800e12a:	230c      	movs	r3, #12
 800e12c:	f8ca 3000 	str.w	r3, [sl]
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	e7e9      	b.n	800e112 <__ssputs_r+0x8a>
	...

0800e140 <_svfiprintf_r>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	4698      	mov	r8, r3
 800e146:	898b      	ldrh	r3, [r1, #12]
 800e148:	4607      	mov	r7, r0
 800e14a:	061b      	lsls	r3, r3, #24
 800e14c:	460d      	mov	r5, r1
 800e14e:	4614      	mov	r4, r2
 800e150:	b09d      	sub	sp, #116	@ 0x74
 800e152:	d510      	bpl.n	800e176 <_svfiprintf_r+0x36>
 800e154:	690b      	ldr	r3, [r1, #16]
 800e156:	b973      	cbnz	r3, 800e176 <_svfiprintf_r+0x36>
 800e158:	2140      	movs	r1, #64	@ 0x40
 800e15a:	f7ff fdcd 	bl	800dcf8 <_malloc_r>
 800e15e:	6028      	str	r0, [r5, #0]
 800e160:	6128      	str	r0, [r5, #16]
 800e162:	b930      	cbnz	r0, 800e172 <_svfiprintf_r+0x32>
 800e164:	230c      	movs	r3, #12
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e16c:	b01d      	add	sp, #116	@ 0x74
 800e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e172:	2340      	movs	r3, #64	@ 0x40
 800e174:	616b      	str	r3, [r5, #20]
 800e176:	2300      	movs	r3, #0
 800e178:	9309      	str	r3, [sp, #36]	@ 0x24
 800e17a:	2320      	movs	r3, #32
 800e17c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e180:	2330      	movs	r3, #48	@ 0x30
 800e182:	f04f 0901 	mov.w	r9, #1
 800e186:	f8cd 800c 	str.w	r8, [sp, #12]
 800e18a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e324 <_svfiprintf_r+0x1e4>
 800e18e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e192:	4623      	mov	r3, r4
 800e194:	469a      	mov	sl, r3
 800e196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e19a:	b10a      	cbz	r2, 800e1a0 <_svfiprintf_r+0x60>
 800e19c:	2a25      	cmp	r2, #37	@ 0x25
 800e19e:	d1f9      	bne.n	800e194 <_svfiprintf_r+0x54>
 800e1a0:	ebba 0b04 	subs.w	fp, sl, r4
 800e1a4:	d00b      	beq.n	800e1be <_svfiprintf_r+0x7e>
 800e1a6:	465b      	mov	r3, fp
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	4629      	mov	r1, r5
 800e1ac:	4638      	mov	r0, r7
 800e1ae:	f7ff ff6b 	bl	800e088 <__ssputs_r>
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	f000 80a7 	beq.w	800e306 <_svfiprintf_r+0x1c6>
 800e1b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1ba:	445a      	add	r2, fp
 800e1bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1be:	f89a 3000 	ldrb.w	r3, [sl]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f000 809f 	beq.w	800e306 <_svfiprintf_r+0x1c6>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1d2:	f10a 0a01 	add.w	sl, sl, #1
 800e1d6:	9304      	str	r3, [sp, #16]
 800e1d8:	9307      	str	r3, [sp, #28]
 800e1da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1de:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1e0:	4654      	mov	r4, sl
 800e1e2:	2205      	movs	r2, #5
 800e1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e8:	484e      	ldr	r0, [pc, #312]	@ (800e324 <_svfiprintf_r+0x1e4>)
 800e1ea:	f000 fa7f 	bl	800e6ec <memchr>
 800e1ee:	9a04      	ldr	r2, [sp, #16]
 800e1f0:	b9d8      	cbnz	r0, 800e22a <_svfiprintf_r+0xea>
 800e1f2:	06d0      	lsls	r0, r2, #27
 800e1f4:	bf44      	itt	mi
 800e1f6:	2320      	movmi	r3, #32
 800e1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1fc:	0711      	lsls	r1, r2, #28
 800e1fe:	bf44      	itt	mi
 800e200:	232b      	movmi	r3, #43	@ 0x2b
 800e202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e206:	f89a 3000 	ldrb.w	r3, [sl]
 800e20a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e20c:	d015      	beq.n	800e23a <_svfiprintf_r+0xfa>
 800e20e:	4654      	mov	r4, sl
 800e210:	2000      	movs	r0, #0
 800e212:	f04f 0c0a 	mov.w	ip, #10
 800e216:	9a07      	ldr	r2, [sp, #28]
 800e218:	4621      	mov	r1, r4
 800e21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e21e:	3b30      	subs	r3, #48	@ 0x30
 800e220:	2b09      	cmp	r3, #9
 800e222:	d94b      	bls.n	800e2bc <_svfiprintf_r+0x17c>
 800e224:	b1b0      	cbz	r0, 800e254 <_svfiprintf_r+0x114>
 800e226:	9207      	str	r2, [sp, #28]
 800e228:	e014      	b.n	800e254 <_svfiprintf_r+0x114>
 800e22a:	eba0 0308 	sub.w	r3, r0, r8
 800e22e:	fa09 f303 	lsl.w	r3, r9, r3
 800e232:	4313      	orrs	r3, r2
 800e234:	46a2      	mov	sl, r4
 800e236:	9304      	str	r3, [sp, #16]
 800e238:	e7d2      	b.n	800e1e0 <_svfiprintf_r+0xa0>
 800e23a:	9b03      	ldr	r3, [sp, #12]
 800e23c:	1d19      	adds	r1, r3, #4
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	9103      	str	r1, [sp, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	bfbb      	ittet	lt
 800e246:	425b      	neglt	r3, r3
 800e248:	f042 0202 	orrlt.w	r2, r2, #2
 800e24c:	9307      	strge	r3, [sp, #28]
 800e24e:	9307      	strlt	r3, [sp, #28]
 800e250:	bfb8      	it	lt
 800e252:	9204      	strlt	r2, [sp, #16]
 800e254:	7823      	ldrb	r3, [r4, #0]
 800e256:	2b2e      	cmp	r3, #46	@ 0x2e
 800e258:	d10a      	bne.n	800e270 <_svfiprintf_r+0x130>
 800e25a:	7863      	ldrb	r3, [r4, #1]
 800e25c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e25e:	d132      	bne.n	800e2c6 <_svfiprintf_r+0x186>
 800e260:	9b03      	ldr	r3, [sp, #12]
 800e262:	3402      	adds	r4, #2
 800e264:	1d1a      	adds	r2, r3, #4
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	9203      	str	r2, [sp, #12]
 800e26a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e26e:	9305      	str	r3, [sp, #20]
 800e270:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e328 <_svfiprintf_r+0x1e8>
 800e274:	2203      	movs	r2, #3
 800e276:	4650      	mov	r0, sl
 800e278:	7821      	ldrb	r1, [r4, #0]
 800e27a:	f000 fa37 	bl	800e6ec <memchr>
 800e27e:	b138      	cbz	r0, 800e290 <_svfiprintf_r+0x150>
 800e280:	2240      	movs	r2, #64	@ 0x40
 800e282:	9b04      	ldr	r3, [sp, #16]
 800e284:	eba0 000a 	sub.w	r0, r0, sl
 800e288:	4082      	lsls	r2, r0
 800e28a:	4313      	orrs	r3, r2
 800e28c:	3401      	adds	r4, #1
 800e28e:	9304      	str	r3, [sp, #16]
 800e290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e294:	2206      	movs	r2, #6
 800e296:	4825      	ldr	r0, [pc, #148]	@ (800e32c <_svfiprintf_r+0x1ec>)
 800e298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e29c:	f000 fa26 	bl	800e6ec <memchr>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d036      	beq.n	800e312 <_svfiprintf_r+0x1d2>
 800e2a4:	4b22      	ldr	r3, [pc, #136]	@ (800e330 <_svfiprintf_r+0x1f0>)
 800e2a6:	bb1b      	cbnz	r3, 800e2f0 <_svfiprintf_r+0x1b0>
 800e2a8:	9b03      	ldr	r3, [sp, #12]
 800e2aa:	3307      	adds	r3, #7
 800e2ac:	f023 0307 	bic.w	r3, r3, #7
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	9303      	str	r3, [sp, #12]
 800e2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b6:	4433      	add	r3, r6
 800e2b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2ba:	e76a      	b.n	800e192 <_svfiprintf_r+0x52>
 800e2bc:	460c      	mov	r4, r1
 800e2be:	2001      	movs	r0, #1
 800e2c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2c4:	e7a8      	b.n	800e218 <_svfiprintf_r+0xd8>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f04f 0c0a 	mov.w	ip, #10
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	3401      	adds	r4, #1
 800e2d0:	9305      	str	r3, [sp, #20]
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2d8:	3a30      	subs	r2, #48	@ 0x30
 800e2da:	2a09      	cmp	r2, #9
 800e2dc:	d903      	bls.n	800e2e6 <_svfiprintf_r+0x1a6>
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0c6      	beq.n	800e270 <_svfiprintf_r+0x130>
 800e2e2:	9105      	str	r1, [sp, #20]
 800e2e4:	e7c4      	b.n	800e270 <_svfiprintf_r+0x130>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2ee:	e7f0      	b.n	800e2d2 <_svfiprintf_r+0x192>
 800e2f0:	ab03      	add	r3, sp, #12
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	462a      	mov	r2, r5
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e334 <_svfiprintf_r+0x1f4>)
 800e2fa:	a904      	add	r1, sp, #16
 800e2fc:	f3af 8000 	nop.w
 800e300:	1c42      	adds	r2, r0, #1
 800e302:	4606      	mov	r6, r0
 800e304:	d1d6      	bne.n	800e2b4 <_svfiprintf_r+0x174>
 800e306:	89ab      	ldrh	r3, [r5, #12]
 800e308:	065b      	lsls	r3, r3, #25
 800e30a:	f53f af2d 	bmi.w	800e168 <_svfiprintf_r+0x28>
 800e30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e310:	e72c      	b.n	800e16c <_svfiprintf_r+0x2c>
 800e312:	ab03      	add	r3, sp, #12
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	462a      	mov	r2, r5
 800e318:	4638      	mov	r0, r7
 800e31a:	4b06      	ldr	r3, [pc, #24]	@ (800e334 <_svfiprintf_r+0x1f4>)
 800e31c:	a904      	add	r1, sp, #16
 800e31e:	f000 f87d 	bl	800e41c <_printf_i>
 800e322:	e7ed      	b.n	800e300 <_svfiprintf_r+0x1c0>
 800e324:	0800f4db 	.word	0x0800f4db
 800e328:	0800f4e1 	.word	0x0800f4e1
 800e32c:	0800f4e5 	.word	0x0800f4e5
 800e330:	00000000 	.word	0x00000000
 800e334:	0800e089 	.word	0x0800e089

0800e338 <_printf_common>:
 800e338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e33c:	4616      	mov	r6, r2
 800e33e:	4698      	mov	r8, r3
 800e340:	688a      	ldr	r2, [r1, #8]
 800e342:	690b      	ldr	r3, [r1, #16]
 800e344:	4607      	mov	r7, r0
 800e346:	4293      	cmp	r3, r2
 800e348:	bfb8      	it	lt
 800e34a:	4613      	movlt	r3, r2
 800e34c:	6033      	str	r3, [r6, #0]
 800e34e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e352:	460c      	mov	r4, r1
 800e354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e358:	b10a      	cbz	r2, 800e35e <_printf_common+0x26>
 800e35a:	3301      	adds	r3, #1
 800e35c:	6033      	str	r3, [r6, #0]
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	0699      	lsls	r1, r3, #26
 800e362:	bf42      	ittt	mi
 800e364:	6833      	ldrmi	r3, [r6, #0]
 800e366:	3302      	addmi	r3, #2
 800e368:	6033      	strmi	r3, [r6, #0]
 800e36a:	6825      	ldr	r5, [r4, #0]
 800e36c:	f015 0506 	ands.w	r5, r5, #6
 800e370:	d106      	bne.n	800e380 <_printf_common+0x48>
 800e372:	f104 0a19 	add.w	sl, r4, #25
 800e376:	68e3      	ldr	r3, [r4, #12]
 800e378:	6832      	ldr	r2, [r6, #0]
 800e37a:	1a9b      	subs	r3, r3, r2
 800e37c:	42ab      	cmp	r3, r5
 800e37e:	dc2b      	bgt.n	800e3d8 <_printf_common+0xa0>
 800e380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e384:	6822      	ldr	r2, [r4, #0]
 800e386:	3b00      	subs	r3, #0
 800e388:	bf18      	it	ne
 800e38a:	2301      	movne	r3, #1
 800e38c:	0692      	lsls	r2, r2, #26
 800e38e:	d430      	bmi.n	800e3f2 <_printf_common+0xba>
 800e390:	4641      	mov	r1, r8
 800e392:	4638      	mov	r0, r7
 800e394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e398:	47c8      	blx	r9
 800e39a:	3001      	adds	r0, #1
 800e39c:	d023      	beq.n	800e3e6 <_printf_common+0xae>
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	6922      	ldr	r2, [r4, #16]
 800e3a2:	f003 0306 	and.w	r3, r3, #6
 800e3a6:	2b04      	cmp	r3, #4
 800e3a8:	bf14      	ite	ne
 800e3aa:	2500      	movne	r5, #0
 800e3ac:	6833      	ldreq	r3, [r6, #0]
 800e3ae:	f04f 0600 	mov.w	r6, #0
 800e3b2:	bf08      	it	eq
 800e3b4:	68e5      	ldreq	r5, [r4, #12]
 800e3b6:	f104 041a 	add.w	r4, r4, #26
 800e3ba:	bf08      	it	eq
 800e3bc:	1aed      	subeq	r5, r5, r3
 800e3be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e3c2:	bf08      	it	eq
 800e3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	bfc4      	itt	gt
 800e3cc:	1a9b      	subgt	r3, r3, r2
 800e3ce:	18ed      	addgt	r5, r5, r3
 800e3d0:	42b5      	cmp	r5, r6
 800e3d2:	d11a      	bne.n	800e40a <_printf_common+0xd2>
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	e008      	b.n	800e3ea <_printf_common+0xb2>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	4652      	mov	r2, sl
 800e3dc:	4641      	mov	r1, r8
 800e3de:	4638      	mov	r0, r7
 800e3e0:	47c8      	blx	r9
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	d103      	bne.n	800e3ee <_printf_common+0xb6>
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ee:	3501      	adds	r5, #1
 800e3f0:	e7c1      	b.n	800e376 <_printf_common+0x3e>
 800e3f2:	2030      	movs	r0, #48	@ 0x30
 800e3f4:	18e1      	adds	r1, r4, r3
 800e3f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e3fa:	1c5a      	adds	r2, r3, #1
 800e3fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e400:	4422      	add	r2, r4
 800e402:	3302      	adds	r3, #2
 800e404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e408:	e7c2      	b.n	800e390 <_printf_common+0x58>
 800e40a:	2301      	movs	r3, #1
 800e40c:	4622      	mov	r2, r4
 800e40e:	4641      	mov	r1, r8
 800e410:	4638      	mov	r0, r7
 800e412:	47c8      	blx	r9
 800e414:	3001      	adds	r0, #1
 800e416:	d0e6      	beq.n	800e3e6 <_printf_common+0xae>
 800e418:	3601      	adds	r6, #1
 800e41a:	e7d9      	b.n	800e3d0 <_printf_common+0x98>

0800e41c <_printf_i>:
 800e41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e420:	7e0f      	ldrb	r7, [r1, #24]
 800e422:	4691      	mov	r9, r2
 800e424:	2f78      	cmp	r7, #120	@ 0x78
 800e426:	4680      	mov	r8, r0
 800e428:	460c      	mov	r4, r1
 800e42a:	469a      	mov	sl, r3
 800e42c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e42e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e432:	d807      	bhi.n	800e444 <_printf_i+0x28>
 800e434:	2f62      	cmp	r7, #98	@ 0x62
 800e436:	d80a      	bhi.n	800e44e <_printf_i+0x32>
 800e438:	2f00      	cmp	r7, #0
 800e43a:	f000 80d3 	beq.w	800e5e4 <_printf_i+0x1c8>
 800e43e:	2f58      	cmp	r7, #88	@ 0x58
 800e440:	f000 80ba 	beq.w	800e5b8 <_printf_i+0x19c>
 800e444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e44c:	e03a      	b.n	800e4c4 <_printf_i+0xa8>
 800e44e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e452:	2b15      	cmp	r3, #21
 800e454:	d8f6      	bhi.n	800e444 <_printf_i+0x28>
 800e456:	a101      	add	r1, pc, #4	@ (adr r1, 800e45c <_printf_i+0x40>)
 800e458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e45c:	0800e4b5 	.word	0x0800e4b5
 800e460:	0800e4c9 	.word	0x0800e4c9
 800e464:	0800e445 	.word	0x0800e445
 800e468:	0800e445 	.word	0x0800e445
 800e46c:	0800e445 	.word	0x0800e445
 800e470:	0800e445 	.word	0x0800e445
 800e474:	0800e4c9 	.word	0x0800e4c9
 800e478:	0800e445 	.word	0x0800e445
 800e47c:	0800e445 	.word	0x0800e445
 800e480:	0800e445 	.word	0x0800e445
 800e484:	0800e445 	.word	0x0800e445
 800e488:	0800e5cb 	.word	0x0800e5cb
 800e48c:	0800e4f3 	.word	0x0800e4f3
 800e490:	0800e585 	.word	0x0800e585
 800e494:	0800e445 	.word	0x0800e445
 800e498:	0800e445 	.word	0x0800e445
 800e49c:	0800e5ed 	.word	0x0800e5ed
 800e4a0:	0800e445 	.word	0x0800e445
 800e4a4:	0800e4f3 	.word	0x0800e4f3
 800e4a8:	0800e445 	.word	0x0800e445
 800e4ac:	0800e445 	.word	0x0800e445
 800e4b0:	0800e58d 	.word	0x0800e58d
 800e4b4:	6833      	ldr	r3, [r6, #0]
 800e4b6:	1d1a      	adds	r2, r3, #4
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6032      	str	r2, [r6, #0]
 800e4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e09e      	b.n	800e606 <_printf_i+0x1ea>
 800e4c8:	6833      	ldr	r3, [r6, #0]
 800e4ca:	6820      	ldr	r0, [r4, #0]
 800e4cc:	1d19      	adds	r1, r3, #4
 800e4ce:	6031      	str	r1, [r6, #0]
 800e4d0:	0606      	lsls	r6, r0, #24
 800e4d2:	d501      	bpl.n	800e4d8 <_printf_i+0xbc>
 800e4d4:	681d      	ldr	r5, [r3, #0]
 800e4d6:	e003      	b.n	800e4e0 <_printf_i+0xc4>
 800e4d8:	0645      	lsls	r5, r0, #25
 800e4da:	d5fb      	bpl.n	800e4d4 <_printf_i+0xb8>
 800e4dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	da03      	bge.n	800e4ec <_printf_i+0xd0>
 800e4e4:	232d      	movs	r3, #45	@ 0x2d
 800e4e6:	426d      	negs	r5, r5
 800e4e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4ec:	230a      	movs	r3, #10
 800e4ee:	4859      	ldr	r0, [pc, #356]	@ (800e654 <_printf_i+0x238>)
 800e4f0:	e011      	b.n	800e516 <_printf_i+0xfa>
 800e4f2:	6821      	ldr	r1, [r4, #0]
 800e4f4:	6833      	ldr	r3, [r6, #0]
 800e4f6:	0608      	lsls	r0, r1, #24
 800e4f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4fc:	d402      	bmi.n	800e504 <_printf_i+0xe8>
 800e4fe:	0649      	lsls	r1, r1, #25
 800e500:	bf48      	it	mi
 800e502:	b2ad      	uxthmi	r5, r5
 800e504:	2f6f      	cmp	r7, #111	@ 0x6f
 800e506:	6033      	str	r3, [r6, #0]
 800e508:	bf14      	ite	ne
 800e50a:	230a      	movne	r3, #10
 800e50c:	2308      	moveq	r3, #8
 800e50e:	4851      	ldr	r0, [pc, #324]	@ (800e654 <_printf_i+0x238>)
 800e510:	2100      	movs	r1, #0
 800e512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e516:	6866      	ldr	r6, [r4, #4]
 800e518:	2e00      	cmp	r6, #0
 800e51a:	bfa8      	it	ge
 800e51c:	6821      	ldrge	r1, [r4, #0]
 800e51e:	60a6      	str	r6, [r4, #8]
 800e520:	bfa4      	itt	ge
 800e522:	f021 0104 	bicge.w	r1, r1, #4
 800e526:	6021      	strge	r1, [r4, #0]
 800e528:	b90d      	cbnz	r5, 800e52e <_printf_i+0x112>
 800e52a:	2e00      	cmp	r6, #0
 800e52c:	d04b      	beq.n	800e5c6 <_printf_i+0x1aa>
 800e52e:	4616      	mov	r6, r2
 800e530:	fbb5 f1f3 	udiv	r1, r5, r3
 800e534:	fb03 5711 	mls	r7, r3, r1, r5
 800e538:	5dc7      	ldrb	r7, [r0, r7]
 800e53a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e53e:	462f      	mov	r7, r5
 800e540:	42bb      	cmp	r3, r7
 800e542:	460d      	mov	r5, r1
 800e544:	d9f4      	bls.n	800e530 <_printf_i+0x114>
 800e546:	2b08      	cmp	r3, #8
 800e548:	d10b      	bne.n	800e562 <_printf_i+0x146>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	07df      	lsls	r7, r3, #31
 800e54e:	d508      	bpl.n	800e562 <_printf_i+0x146>
 800e550:	6923      	ldr	r3, [r4, #16]
 800e552:	6861      	ldr	r1, [r4, #4]
 800e554:	4299      	cmp	r1, r3
 800e556:	bfde      	ittt	le
 800e558:	2330      	movle	r3, #48	@ 0x30
 800e55a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e55e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e562:	1b92      	subs	r2, r2, r6
 800e564:	6122      	str	r2, [r4, #16]
 800e566:	464b      	mov	r3, r9
 800e568:	4621      	mov	r1, r4
 800e56a:	4640      	mov	r0, r8
 800e56c:	f8cd a000 	str.w	sl, [sp]
 800e570:	aa03      	add	r2, sp, #12
 800e572:	f7ff fee1 	bl	800e338 <_printf_common>
 800e576:	3001      	adds	r0, #1
 800e578:	d14a      	bne.n	800e610 <_printf_i+0x1f4>
 800e57a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e57e:	b004      	add	sp, #16
 800e580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	f043 0320 	orr.w	r3, r3, #32
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	2778      	movs	r7, #120	@ 0x78
 800e58e:	4832      	ldr	r0, [pc, #200]	@ (800e658 <_printf_i+0x23c>)
 800e590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e594:	6823      	ldr	r3, [r4, #0]
 800e596:	6831      	ldr	r1, [r6, #0]
 800e598:	061f      	lsls	r7, r3, #24
 800e59a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e59e:	d402      	bmi.n	800e5a6 <_printf_i+0x18a>
 800e5a0:	065f      	lsls	r7, r3, #25
 800e5a2:	bf48      	it	mi
 800e5a4:	b2ad      	uxthmi	r5, r5
 800e5a6:	6031      	str	r1, [r6, #0]
 800e5a8:	07d9      	lsls	r1, r3, #31
 800e5aa:	bf44      	itt	mi
 800e5ac:	f043 0320 	orrmi.w	r3, r3, #32
 800e5b0:	6023      	strmi	r3, [r4, #0]
 800e5b2:	b11d      	cbz	r5, 800e5bc <_printf_i+0x1a0>
 800e5b4:	2310      	movs	r3, #16
 800e5b6:	e7ab      	b.n	800e510 <_printf_i+0xf4>
 800e5b8:	4826      	ldr	r0, [pc, #152]	@ (800e654 <_printf_i+0x238>)
 800e5ba:	e7e9      	b.n	800e590 <_printf_i+0x174>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	f023 0320 	bic.w	r3, r3, #32
 800e5c2:	6023      	str	r3, [r4, #0]
 800e5c4:	e7f6      	b.n	800e5b4 <_printf_i+0x198>
 800e5c6:	4616      	mov	r6, r2
 800e5c8:	e7bd      	b.n	800e546 <_printf_i+0x12a>
 800e5ca:	6833      	ldr	r3, [r6, #0]
 800e5cc:	6825      	ldr	r5, [r4, #0]
 800e5ce:	1d18      	adds	r0, r3, #4
 800e5d0:	6961      	ldr	r1, [r4, #20]
 800e5d2:	6030      	str	r0, [r6, #0]
 800e5d4:	062e      	lsls	r6, r5, #24
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	d501      	bpl.n	800e5de <_printf_i+0x1c2>
 800e5da:	6019      	str	r1, [r3, #0]
 800e5dc:	e002      	b.n	800e5e4 <_printf_i+0x1c8>
 800e5de:	0668      	lsls	r0, r5, #25
 800e5e0:	d5fb      	bpl.n	800e5da <_printf_i+0x1be>
 800e5e2:	8019      	strh	r1, [r3, #0]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	4616      	mov	r6, r2
 800e5e8:	6123      	str	r3, [r4, #16]
 800e5ea:	e7bc      	b.n	800e566 <_printf_i+0x14a>
 800e5ec:	6833      	ldr	r3, [r6, #0]
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	1d1a      	adds	r2, r3, #4
 800e5f2:	6032      	str	r2, [r6, #0]
 800e5f4:	681e      	ldr	r6, [r3, #0]
 800e5f6:	6862      	ldr	r2, [r4, #4]
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f000 f877 	bl	800e6ec <memchr>
 800e5fe:	b108      	cbz	r0, 800e604 <_printf_i+0x1e8>
 800e600:	1b80      	subs	r0, r0, r6
 800e602:	6060      	str	r0, [r4, #4]
 800e604:	6863      	ldr	r3, [r4, #4]
 800e606:	6123      	str	r3, [r4, #16]
 800e608:	2300      	movs	r3, #0
 800e60a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e60e:	e7aa      	b.n	800e566 <_printf_i+0x14a>
 800e610:	4632      	mov	r2, r6
 800e612:	4649      	mov	r1, r9
 800e614:	4640      	mov	r0, r8
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	47d0      	blx	sl
 800e61a:	3001      	adds	r0, #1
 800e61c:	d0ad      	beq.n	800e57a <_printf_i+0x15e>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	079b      	lsls	r3, r3, #30
 800e622:	d413      	bmi.n	800e64c <_printf_i+0x230>
 800e624:	68e0      	ldr	r0, [r4, #12]
 800e626:	9b03      	ldr	r3, [sp, #12]
 800e628:	4298      	cmp	r0, r3
 800e62a:	bfb8      	it	lt
 800e62c:	4618      	movlt	r0, r3
 800e62e:	e7a6      	b.n	800e57e <_printf_i+0x162>
 800e630:	2301      	movs	r3, #1
 800e632:	4632      	mov	r2, r6
 800e634:	4649      	mov	r1, r9
 800e636:	4640      	mov	r0, r8
 800e638:	47d0      	blx	sl
 800e63a:	3001      	adds	r0, #1
 800e63c:	d09d      	beq.n	800e57a <_printf_i+0x15e>
 800e63e:	3501      	adds	r5, #1
 800e640:	68e3      	ldr	r3, [r4, #12]
 800e642:	9903      	ldr	r1, [sp, #12]
 800e644:	1a5b      	subs	r3, r3, r1
 800e646:	42ab      	cmp	r3, r5
 800e648:	dcf2      	bgt.n	800e630 <_printf_i+0x214>
 800e64a:	e7eb      	b.n	800e624 <_printf_i+0x208>
 800e64c:	2500      	movs	r5, #0
 800e64e:	f104 0619 	add.w	r6, r4, #25
 800e652:	e7f5      	b.n	800e640 <_printf_i+0x224>
 800e654:	0800f4ec 	.word	0x0800f4ec
 800e658:	0800f4fd 	.word	0x0800f4fd

0800e65c <_realloc_r>:
 800e65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e660:	4680      	mov	r8, r0
 800e662:	4615      	mov	r5, r2
 800e664:	460c      	mov	r4, r1
 800e666:	b921      	cbnz	r1, 800e672 <_realloc_r+0x16>
 800e668:	4611      	mov	r1, r2
 800e66a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e66e:	f7ff bb43 	b.w	800dcf8 <_malloc_r>
 800e672:	b92a      	cbnz	r2, 800e680 <_realloc_r+0x24>
 800e674:	f7ff fcc0 	bl	800dff8 <_free_r>
 800e678:	2400      	movs	r4, #0
 800e67a:	4620      	mov	r0, r4
 800e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e680:	f000 f842 	bl	800e708 <_malloc_usable_size_r>
 800e684:	4285      	cmp	r5, r0
 800e686:	4606      	mov	r6, r0
 800e688:	d802      	bhi.n	800e690 <_realloc_r+0x34>
 800e68a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e68e:	d8f4      	bhi.n	800e67a <_realloc_r+0x1e>
 800e690:	4629      	mov	r1, r5
 800e692:	4640      	mov	r0, r8
 800e694:	f7ff fb30 	bl	800dcf8 <_malloc_r>
 800e698:	4607      	mov	r7, r0
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d0ec      	beq.n	800e678 <_realloc_r+0x1c>
 800e69e:	42b5      	cmp	r5, r6
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	bf28      	it	cs
 800e6a6:	4632      	movcs	r2, r6
 800e6a8:	f7ff fc90 	bl	800dfcc <memcpy>
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	f7ff fca2 	bl	800dff8 <_free_r>
 800e6b4:	463c      	mov	r4, r7
 800e6b6:	e7e0      	b.n	800e67a <_realloc_r+0x1e>

0800e6b8 <memmove>:
 800e6b8:	4288      	cmp	r0, r1
 800e6ba:	b510      	push	{r4, lr}
 800e6bc:	eb01 0402 	add.w	r4, r1, r2
 800e6c0:	d902      	bls.n	800e6c8 <memmove+0x10>
 800e6c2:	4284      	cmp	r4, r0
 800e6c4:	4623      	mov	r3, r4
 800e6c6:	d807      	bhi.n	800e6d8 <memmove+0x20>
 800e6c8:	1e43      	subs	r3, r0, #1
 800e6ca:	42a1      	cmp	r1, r4
 800e6cc:	d008      	beq.n	800e6e0 <memmove+0x28>
 800e6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6d6:	e7f8      	b.n	800e6ca <memmove+0x12>
 800e6d8:	4601      	mov	r1, r0
 800e6da:	4402      	add	r2, r0
 800e6dc:	428a      	cmp	r2, r1
 800e6de:	d100      	bne.n	800e6e2 <memmove+0x2a>
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6ea:	e7f7      	b.n	800e6dc <memmove+0x24>

0800e6ec <memchr>:
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	b510      	push	{r4, lr}
 800e6f0:	b2c9      	uxtb	r1, r1
 800e6f2:	4402      	add	r2, r0
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	d101      	bne.n	800e6fe <memchr+0x12>
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	e003      	b.n	800e706 <memchr+0x1a>
 800e6fe:	7804      	ldrb	r4, [r0, #0]
 800e700:	3301      	adds	r3, #1
 800e702:	428c      	cmp	r4, r1
 800e704:	d1f6      	bne.n	800e6f4 <memchr+0x8>
 800e706:	bd10      	pop	{r4, pc}

0800e708 <_malloc_usable_size_r>:
 800e708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e70c:	1f18      	subs	r0, r3, #4
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bfbc      	itt	lt
 800e712:	580b      	ldrlt	r3, [r1, r0]
 800e714:	18c0      	addlt	r0, r0, r3
 800e716:	4770      	bx	lr

0800e718 <_init>:
 800e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71a:	bf00      	nop
 800e71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e71e:	bc08      	pop	{r3}
 800e720:	469e      	mov	lr, r3
 800e722:	4770      	bx	lr

0800e724 <_fini>:
 800e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e726:	bf00      	nop
 800e728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72a:	bc08      	pop	{r3}
 800e72c:	469e      	mov	lr, r3
 800e72e:	4770      	bx	lr
