
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee58  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800f03c  0800f03c  0001003c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4c8  0800f4c8  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4c8  0800f4c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4d0  0800f4d0  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4d0  0800f4d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4d4  0800f4d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f4d8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  080104a8  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  080104a8  00012b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee1  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036af  00000000  00000000  0002aeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ead  00000000  00000000  0002f898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c898  00000000  00000000  00030745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8f5  00000000  00000000  0004cfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04de  00000000  00000000  0006a8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010adb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  0010adf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001101c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800f024 	.word	0x0800f024

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800f024 	.word	0x0800f024

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9b      	ldr	r3, [pc, #620]	@ (80004b4 <eepromKontrol+0x280>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489a      	ldr	r0, [pc, #616]	@ (80004b8 <eepromKontrol+0x284>)
 8000250:	f00b fd4a 	bl	800bce8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f00a fbc2 	bl	800a9e0 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800025c:	4b95      	ldr	r3, [pc, #596]	@ (80004b4 <eepromKontrol+0x280>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b96      	ldr	r3, [pc, #600]	@ (80004bc <eepromKontrol+0x288>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b93      	ldr	r3, [pc, #588]	@ (80004b4 <eepromKontrol+0x280>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b95      	ldr	r3, [pc, #596]	@ (80004c0 <eepromKontrol+0x28c>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b91      	ldr	r3, [pc, #580]	@ (80004b4 <eepromKontrol+0x280>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b94      	ldr	r3, [pc, #592]	@ (80004c4 <eepromKontrol+0x290>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b8f      	ldr	r3, [pc, #572]	@ (80004b4 <eepromKontrol+0x280>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b93      	ldr	r3, [pc, #588]	@ (80004c8 <eepromKontrol+0x294>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8d      	ldr	r3, [pc, #564]	@ (80004b4 <eepromKontrol+0x280>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b92      	ldr	r3, [pc, #584]	@ (80004cc <eepromKontrol+0x298>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8b      	ldr	r3, [pc, #556]	@ (80004b4 <eepromKontrol+0x280>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b91      	ldr	r3, [pc, #580]	@ (80004d0 <eepromKontrol+0x29c>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b89      	ldr	r3, [pc, #548]	@ (80004b4 <eepromKontrol+0x280>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b90      	ldr	r3, [pc, #576]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b87      	ldr	r3, [pc, #540]	@ (80004b4 <eepromKontrol+0x280>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b8f      	ldr	r3, [pc, #572]	@ (80004d8 <eepromKontrol+0x2a4>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b85      	ldr	r3, [pc, #532]	@ (80004b4 <eepromKontrol+0x280>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8e      	ldr	r3, [pc, #568]	@ (80004dc <eepromKontrol+0x2a8>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b83      	ldr	r3, [pc, #524]	@ (80004b4 <eepromKontrol+0x280>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8d      	ldr	r3, [pc, #564]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b81      	ldr	r3, [pc, #516]	@ (80004b4 <eepromKontrol+0x280>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8c      	ldr	r3, [pc, #560]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b7f      	ldr	r3, [pc, #508]	@ (80004b4 <eepromKontrol+0x280>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8b      	ldr	r3, [pc, #556]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7d      	ldr	r3, [pc, #500]	@ (80004b4 <eepromKontrol+0x280>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8a      	ldr	r3, [pc, #552]	@ (80004ec <eepromKontrol+0x2b8>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7b      	ldr	r3, [pc, #492]	@ (80004b4 <eepromKontrol+0x280>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b89      	ldr	r3, [pc, #548]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b79      	ldr	r3, [pc, #484]	@ (80004b4 <eepromKontrol+0x280>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b88      	ldr	r3, [pc, #544]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b77      	ldr	r3, [pc, #476]	@ (80004b4 <eepromKontrol+0x280>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b87      	ldr	r3, [pc, #540]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b75      	ldr	r3, [pc, #468]	@ (80004b4 <eepromKontrol+0x280>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b86      	ldr	r3, [pc, #536]	@ (80004fc <eepromKontrol+0x2c8>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b73      	ldr	r3, [pc, #460]	@ (80004b4 <eepromKontrol+0x280>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b85      	ldr	r3, [pc, #532]	@ (8000500 <eepromKontrol+0x2cc>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b71      	ldr	r3, [pc, #452]	@ (80004b4 <eepromKontrol+0x280>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b84      	ldr	r3, [pc, #528]	@ (8000504 <eepromKontrol+0x2d0>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b6f      	ldr	r3, [pc, #444]	@ (80004b4 <eepromKontrol+0x280>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b83      	ldr	r3, [pc, #524]	@ (8000508 <eepromKontrol+0x2d4>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6d      	ldr	r3, [pc, #436]	@ (80004b4 <eepromKontrol+0x280>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b82      	ldr	r3, [pc, #520]	@ (800050c <eepromKontrol+0x2d8>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6b      	ldr	r3, [pc, #428]	@ (80004b4 <eepromKontrol+0x280>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b81      	ldr	r3, [pc, #516]	@ (8000510 <eepromKontrol+0x2dc>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b69      	ldr	r3, [pc, #420]	@ (80004b4 <eepromKontrol+0x280>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b80      	ldr	r3, [pc, #512]	@ (8000514 <eepromKontrol+0x2e0>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b67      	ldr	r3, [pc, #412]	@ (80004b4 <eepromKontrol+0x280>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b7f      	ldr	r3, [pc, #508]	@ (8000518 <eepromKontrol+0x2e4>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b65      	ldr	r3, [pc, #404]	@ (80004b4 <eepromKontrol+0x280>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7e      	ldr	r3, [pc, #504]	@ (800051c <eepromKontrol+0x2e8>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b63      	ldr	r3, [pc, #396]	@ (80004b4 <eepromKontrol+0x280>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7d      	ldr	r3, [pc, #500]	@ (8000520 <eepromKontrol+0x2ec>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b61      	ldr	r3, [pc, #388]	@ (80004b4 <eepromKontrol+0x280>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7c      	ldr	r3, [pc, #496]	@ (8000524 <eepromKontrol+0x2f0>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000334:	4b5f      	ldr	r3, [pc, #380]	@ (80004b4 <eepromKontrol+0x280>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7b      	ldr	r3, [pc, #492]	@ (8000528 <eepromKontrol+0x2f4>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 800033c:	4b5d      	ldr	r3, [pc, #372]	@ (80004b4 <eepromKontrol+0x280>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7a      	ldr	r3, [pc, #488]	@ (800052c <eepromKontrol+0x2f8>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000344:	4b5b      	ldr	r3, [pc, #364]	@ (80004b4 <eepromKontrol+0x280>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b79      	ldr	r3, [pc, #484]	@ (8000530 <eepromKontrol+0x2fc>)
 800034a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800034c:	4b59      	ldr	r3, [pc, #356]	@ (80004b4 <eepromKontrol+0x280>)
 800034e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000352:	4b78      	ldr	r3, [pc, #480]	@ (8000534 <eepromKontrol+0x300>)
 8000354:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000356:	4b57      	ldr	r3, [pc, #348]	@ (80004b4 <eepromKontrol+0x280>)
 8000358:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800035c:	4b76      	ldr	r3, [pc, #472]	@ (8000538 <eepromKontrol+0x304>)
 800035e:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000360:	4b54      	ldr	r3, [pc, #336]	@ (80004b4 <eepromKontrol+0x280>)
 8000362:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000366:	4b75      	ldr	r3, [pc, #468]	@ (800053c <eepromKontrol+0x308>)
 8000368:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036a:	4b52      	ldr	r3, [pc, #328]	@ (80004b4 <eepromKontrol+0x280>)
 800036c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000370:	4b73      	ldr	r3, [pc, #460]	@ (8000540 <eepromKontrol+0x30c>)
 8000372:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000374:	4b4f      	ldr	r3, [pc, #316]	@ (80004b4 <eepromKontrol+0x280>)
 8000376:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037a:	4b72      	ldr	r3, [pc, #456]	@ (8000544 <eepromKontrol+0x310>)
 800037c:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800037e:	4b4d      	ldr	r3, [pc, #308]	@ (80004b4 <eepromKontrol+0x280>)
 8000380:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000384:	4b70      	ldr	r3, [pc, #448]	@ (8000548 <eepromKontrol+0x314>)
 8000386:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000388:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <eepromKontrol+0x280>)
 800038a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800038e:	4b6f      	ldr	r3, [pc, #444]	@ (800054c <eepromKontrol+0x318>)
 8000390:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000392:	4b48      	ldr	r3, [pc, #288]	@ (80004b4 <eepromKontrol+0x280>)
 8000394:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000398:	4b6d      	ldr	r3, [pc, #436]	@ (8000550 <eepromKontrol+0x31c>)
 800039a:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 800039c:	4b45      	ldr	r3, [pc, #276]	@ (80004b4 <eepromKontrol+0x280>)
 800039e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a2:	4b6c      	ldr	r3, [pc, #432]	@ (8000554 <eepromKontrol+0x320>)
 80003a4:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a6:	4b43      	ldr	r3, [pc, #268]	@ (80004b4 <eepromKontrol+0x280>)
 80003a8:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000558 <eepromKontrol+0x324>)
 80003ae:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b0:	4b40      	ldr	r3, [pc, #256]	@ (80004b4 <eepromKontrol+0x280>)
 80003b2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b6:	4b69      	ldr	r3, [pc, #420]	@ (800055c <eepromKontrol+0x328>)
 80003b8:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003ba:	4b3e      	ldr	r3, [pc, #248]	@ (80004b4 <eepromKontrol+0x280>)
 80003bc:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c0:	4b67      	ldr	r3, [pc, #412]	@ (8000560 <eepromKontrol+0x32c>)
 80003c2:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c4:	4b3b      	ldr	r3, [pc, #236]	@ (80004b4 <eepromKontrol+0x280>)
 80003c6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ca:	4b66      	ldr	r3, [pc, #408]	@ (8000564 <eepromKontrol+0x330>)
 80003cc:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <eepromKontrol+0x280>)
 80003d0:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d4:	4b64      	ldr	r3, [pc, #400]	@ (8000568 <eepromKontrol+0x334>)
 80003d6:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 80003d8:	4b36      	ldr	r3, [pc, #216]	@ (80004b4 <eepromKontrol+0x280>)
 80003da:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80003de:	4b63      	ldr	r3, [pc, #396]	@ (800056c <eepromKontrol+0x338>)
 80003e0:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003e2:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <eepromKontrol+0x280>)
 80003e4:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003e8:	4b61      	ldr	r3, [pc, #388]	@ (8000570 <eepromKontrol+0x33c>)
 80003ea:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003ec:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d902      	bls.n	80003fa <eepromKontrol+0x1c6>
	    calismaSekli=0;
 80003f4:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003fa:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d902      	bls.n	8000408 <eepromKontrol+0x1d4>
	    emniyetCercevesi=1;
 8000402:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d902      	bls.n	8000416 <eepromKontrol+0x1e2>
	    yavaslamaLimit=0;
 8000410:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d902      	bls.n	8000424 <eepromKontrol+0x1f0>
	    altLimit=1;
 800041e:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000424:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <eepromKontrol+0x29c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d902      	bls.n	8000432 <eepromKontrol+0x1fe>
	    basincSalteri=1;
 800042c:	4b28      	ldr	r3, [pc, #160]	@ (80004d0 <eepromKontrol+0x29c>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000432:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d902      	bls.n	8000440 <eepromKontrol+0x20c>
	    kapiSecimleri=3;
 800043a:	4b26      	ldr	r3, [pc, #152]	@ (80004d4 <eepromKontrol+0x2a0>)
 800043c:	2203      	movs	r2, #3
 800043e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000440:	4b3f      	ldr	r3, [pc, #252]	@ (8000540 <eepromKontrol+0x30c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d902      	bls.n	800044e <eepromKontrol+0x21a>
	    kapiAcTipi=0;
 8000448:	4b3d      	ldr	r3, [pc, #244]	@ (8000540 <eepromKontrol+0x30c>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800044e:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b02      	cmp	r3, #2
 8000454:	d902      	bls.n	800045c <eepromKontrol+0x228>
	    kapi1Tip=1;
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800045c:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d902      	bls.n	800046a <eepromKontrol+0x236>
	    kapi1AcSure=5;
 8000464:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000466:	2205      	movs	r2, #5
 8000468:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b02      	cmp	r3, #2
 8000470:	d902      	bls.n	8000478 <eepromKontrol+0x244>
	    kapi2Tip=1;
 8000472:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <eepromKontrol+0x2b0>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b05      	cmp	r3, #5
 800047e:	d902      	bls.n	8000486 <eepromKontrol+0x252>
	    kapi2AcSure=5;
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000482:	2205      	movs	r2, #5
 8000484:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000486:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d902      	bls.n	8000494 <eepromKontrol+0x260>
	    kapitablaTip=1;
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000494:	4b28      	ldr	r3, [pc, #160]	@ (8000538 <eepromKontrol+0x304>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d902      	bls.n	80004a2 <eepromKontrol+0x26e>
	    kapiTablaAcKonum=2;
 800049c:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <eepromKontrol+0x304>)
 800049e:	2202      	movs	r2, #2
 80004a0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b05      	cmp	r3, #5
 80004a8:	d964      	bls.n	8000574 <eepromKontrol+0x340>
	    kapiTablaAcSure=5;
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <eepromKontrol+0x2b8>)
 80004ac:	2205      	movs	r2, #5
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	e060      	b.n	8000574 <eepromKontrol+0x340>
 80004b2:	bf00      	nop
 80004b4:	20000fec 	.word	0x20000fec
 80004b8:	2000193c 	.word	0x2000193c
 80004bc:	20001091 	.word	0x20001091
 80004c0:	200010bd 	.word	0x200010bd
 80004c4:	200010c0 	.word	0x200010c0
 80004c8:	200010c1 	.word	0x200010c1
 80004cc:	200010c2 	.word	0x200010c2
 80004d0:	200010c3 	.word	0x200010c3
 80004d4:	200010c4 	.word	0x200010c4
 80004d8:	200010c5 	.word	0x200010c5
 80004dc:	200010d5 	.word	0x200010d5
 80004e0:	200010c6 	.word	0x200010c6
 80004e4:	200010d6 	.word	0x200010d6
 80004e8:	200010c7 	.word	0x200010c7
 80004ec:	200010d7 	.word	0x200010d7
 80004f0:	200010ca 	.word	0x200010ca
 80004f4:	200010cb 	.word	0x200010cb
 80004f8:	200010cc 	.word	0x200010cc
 80004fc:	200010cd 	.word	0x200010cd
 8000500:	200010ce 	.word	0x200010ce
 8000504:	200010cf 	.word	0x200010cf
 8000508:	200010d0 	.word	0x200010d0
 800050c:	200010d1 	.word	0x200010d1
 8000510:	200010d2 	.word	0x200010d2
 8000514:	200010d3 	.word	0x200010d3
 8000518:	200010d4 	.word	0x200010d4
 800051c:	200010d8 	.word	0x200010d8
 8000520:	200010da 	.word	0x200010da
 8000524:	200010b4 	.word	0x200010b4
 8000528:	200010b5 	.word	0x200010b5
 800052c:	200010b6 	.word	0x200010b6
 8000530:	200010b7 	.word	0x200010b7
 8000534:	200010dd 	.word	0x200010dd
 8000538:	200010c9 	.word	0x200010c9
 800053c:	200010dc 	.word	0x200010dc
 8000540:	200010c8 	.word	0x200010c8
 8000544:	200010de 	.word	0x200010de
 8000548:	200010df 	.word	0x200010df
 800054c:	200010e0 	.word	0x200010e0
 8000550:	200010e1 	.word	0x200010e1
 8000554:	200010e2 	.word	0x200010e2
 8000558:	200010e3 	.word	0x200010e3
 800055c:	200010e4 	.word	0x200010e4
 8000560:	200010e5 	.word	0x200010e5
 8000564:	200010e6 	.word	0x200010e6
 8000568:	200010e7 	.word	0x200010e7
 800056c:	200010db 	.word	0x200010db
 8000570:	20001090 	.word	0x20001090
	}

	if(yukariYavasLimit>1) {
 8000574:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <eepromKontrol+0x454>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d902      	bls.n	8000582 <eepromKontrol+0x34e>
	    yukariYavasLimit=0;
 800057c:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <eepromKontrol+0x454>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000582:	4b42      	ldr	r3, [pc, #264]	@ (800068c <eepromKontrol+0x458>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d902      	bls.n	8000590 <eepromKontrol+0x35c>
	    devirmeYuruyusSecim=0;
 800058a:	4b40      	ldr	r3, [pc, #256]	@ (800068c <eepromKontrol+0x458>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000590:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <eepromKontrol+0x45c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d902      	bls.n	800059e <eepromKontrol+0x36a>
	    devirmeYukariIleriLimit=1;
 8000598:	4b3d      	ldr	r3, [pc, #244]	@ (8000690 <eepromKontrol+0x45c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800059e:	4b3d      	ldr	r3, [pc, #244]	@ (8000694 <eepromKontrol+0x460>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d902      	bls.n	80005ac <eepromKontrol+0x378>
	    devirmeAsagiGeriLimit=1;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000694 <eepromKontrol+0x460>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80005ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000698 <eepromKontrol+0x464>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d902      	bls.n	80005ba <eepromKontrol+0x386>
	    devirmeSilindirTipi=0;
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <eepromKontrol+0x464>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005ba:	4b38      	ldr	r3, [pc, #224]	@ (800069c <eepromKontrol+0x468>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d902      	bls.n	80005c8 <eepromKontrol+0x394>
	    platformSilindirTipi=0;
 80005c2:	4b36      	ldr	r3, [pc, #216]	@ (800069c <eepromKontrol+0x468>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <eepromKontrol+0x46c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d902      	bls.n	80005d6 <eepromKontrol+0x3a2>
	    yukariValfTmr=0;
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <eepromKontrol+0x46c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <eepromKontrol+0x470>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d902      	bls.n	80005e4 <eepromKontrol+0x3b0>
	    asagiValfTmr=0;
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <eepromKontrol+0x470>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <eepromKontrol+0x474>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	d902      	bls.n	80005f2 <eepromKontrol+0x3be>
	    devirmeYukariIleriTmr=0;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <eepromKontrol+0x474>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <eepromKontrol+0x478>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d902      	bls.n	8000600 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriTmr=0;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <eepromKontrol+0x478>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <eepromKontrol+0x47c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2bb4      	cmp	r3, #180	@ 0xb4
 8000606:	d902      	bls.n	800060e <eepromKontrol+0x3da>
	    makineCalismaTmr=60;
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <eepromKontrol+0x47c>)
 800060a:	223c      	movs	r2, #60	@ 0x3c
 800060c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <eepromKontrol+0x480>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d902      	bls.n	800061c <eepromKontrol+0x3e8>
	    buzzer=0;
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <eepromKontrol+0x480>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <eepromKontrol+0x484>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d902      	bls.n	800062a <eepromKontrol+0x3f6>
	    demoMode=0;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <eepromKontrol+0x484>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <eepromKontrol+0x488>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d902      	bls.n	8000638 <eepromKontrol+0x404>
	    calismaSayModu=0;
 8000632:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <eepromKontrol+0x488>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <eepromKontrol+0x48c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d902      	bls.n	8000646 <eepromKontrol+0x412>
	    dilSecim=0;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <eepromKontrol+0x48c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000646:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <eepromKontrol+0x490>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d902      	bls.n	8000654 <eepromKontrol+0x420>
		iotMode=0;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <eepromKontrol+0x490>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f837 	bl	80006c8 <convertArrays>
	HAL_Delay(250);
 800065a:	20fa      	movs	r0, #250	@ 0xfa
 800065c:	f00a f9c0 	bl	800a9e0 <HAL_Delay>

	convertArrays(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 f831 	bl	80006c8 <convertArrays>
	HAL_Delay(250);
 8000666:	20fa      	movs	r0, #250	@ 0xfa
 8000668:	f00a f9ba 	bl	800a9e0 <HAL_Delay>

	convertArrays(3);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f82b 	bl	80006c8 <convertArrays>
	HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	@ 0xfa
 8000674:	f00a f9b4 	bl	800a9e0 <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <eepromKontrol+0x48c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f006 ff5f 	bl	8007540 <loadMenuTexts>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200010ca 	.word	0x200010ca
 800068c:	200010cb 	.word	0x200010cb
 8000690:	200010cc 	.word	0x200010cc
 8000694:	200010cd 	.word	0x200010cd
 8000698:	200010ce 	.word	0x200010ce
 800069c:	200010cf 	.word	0x200010cf
 80006a0:	200010d0 	.word	0x200010d0
 80006a4:	200010d1 	.word	0x200010d1
 80006a8:	200010d2 	.word	0x200010d2
 80006ac:	200010d3 	.word	0x200010d3
 80006b0:	200010d4 	.word	0x200010d4
 80006b4:	200010d8 	.word	0x200010d8
 80006b8:	200010da 	.word	0x200010da
 80006bc:	200010dc 	.word	0x200010dc
 80006c0:	200010dd 	.word	0x200010dd
 80006c4:	200010db 	.word	0x200010db

080006c8 <convertArrays>:
		HAL_Delay(500);
		lcd_clear();
	}
}

void convertArrays(int state) {
 80006c8:	b480      	push	{r7}
 80006ca:	b08b      	sub	sp, #44	@ 0x2c
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d11d      	bne.n	8000712 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80006d6:	4b34      	ldr	r3, [pc, #208]	@ (80007a8 <convertArrays+0xe0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e013      	b.n	800070a <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80006e2:	4a32      	ldr	r2, [pc, #200]	@ (80007ac <convertArrays+0xe4>)
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80006ec:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <convertArrays+0xe8>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	7819      	ldrb	r1, [r3, #0]
 80006f4:	4a2f      	ldr	r2, [pc, #188]	@ (80007b4 <convertArrays+0xec>)
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80006fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000700:	3301      	adds	r3, #1
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	3301      	adds	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
 800070a:	6a3b      	ldr	r3, [r7, #32]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	dde8      	ble.n	80006e2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000710:	e045      	b.n	800079e <convertArrays+0xd6>
	} else if(state == 2) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d121      	bne.n	800075c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <convertArrays+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	e017      	b.n	8000754 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000724:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <convertArrays+0xe4>)
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00e      	beq.n	800074e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000730:	4a1e      	ldr	r2, [pc, #120]	@ (80007ac <convertArrays+0xe4>)
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <convertArrays+0xf4>)
 800073c:	5c99      	ldrb	r1, [r3, r2]
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <convertArrays+0xf8>)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3301      	adds	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	3301      	adds	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	dde4      	ble.n	8000724 <convertArrays+0x5c>
}
 800075a:	e020      	b.n	800079e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <convertArrays+0xfc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	e017      	b.n	8000798 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000768:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <convertArrays+0xe4>)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00e      	beq.n	8000792 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <convertArrays+0xe4>)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <convertArrays+0xf4>)
 8000780:	5c99      	ldrb	r1, [r3, r2]
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <convertArrays+0x100>)
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3301      	adds	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	dde4      	ble.n	8000768 <convertArrays+0xa0>
}
 800079e:	bf00      	nop
 80007a0:	372c      	adds	r7, #44	@ 0x2c
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000fec 	.word	0x20000fec
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	20001064 	.word	0x20001064
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000018 	.word	0x20000018
 80007c0:	20001070 	.word	0x20001070
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20001080 	.word	0x20001080

080007cc <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b09f      	sub	sp, #124	@ 0x7c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80007d8:	4948      	ldr	r1, [pc, #288]	@ (80008fc <ESP8266_Init+0x130>)
 80007da:	4849      	ldr	r0, [pc, #292]	@ (8000900 <ESP8266_Init+0x134>)
 80007dc:	f00d ffb4 	bl	800e748 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80007e0:	4847      	ldr	r0, [pc, #284]	@ (8000900 <ESP8266_Init+0x134>)
 80007e2:	f7ff fd1f 	bl	8000224 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4944      	ldr	r1, [pc, #272]	@ (8000900 <ESP8266_Init+0x134>)
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f00d f9c2 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f8:	f00a f8f2 	bl	800a9e0 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80007fc:	4941      	ldr	r1, [pc, #260]	@ (8000904 <ESP8266_Init+0x138>)
 80007fe:	4840      	ldr	r0, [pc, #256]	@ (8000900 <ESP8266_Init+0x134>)
 8000800:	f00d ffa2 	bl	800e748 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000804:	483e      	ldr	r0, [pc, #248]	@ (8000900 <ESP8266_Init+0x134>)
 8000806:	f7ff fd0d 	bl	8000224 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29b      	uxth	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	493b      	ldr	r1, [pc, #236]	@ (8000900 <ESP8266_Init+0x134>)
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f00d f9b0 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081c:	f00a f8e0 	bl	800a9e0 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000820:	4939      	ldr	r1, [pc, #228]	@ (8000908 <ESP8266_Init+0x13c>)
 8000822:	4837      	ldr	r0, [pc, #220]	@ (8000900 <ESP8266_Init+0x134>)
 8000824:	f00d ff90 	bl	800e748 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000828:	4835      	ldr	r0, [pc, #212]	@ (8000900 <ESP8266_Init+0x134>)
 800082a:	f7ff fcfb 	bl	8000224 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4932      	ldr	r1, [pc, #200]	@ (8000900 <ESP8266_Init+0x134>)
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f00d f99e 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800083c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000840:	f00a f8ce 	bl	800a9e0 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000844:	4931      	ldr	r1, [pc, #196]	@ (800090c <ESP8266_Init+0x140>)
 8000846:	482e      	ldr	r0, [pc, #184]	@ (8000900 <ESP8266_Init+0x134>)
 8000848:	f00d ff7e 	bl	800e748 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800084c:	482c      	ldr	r0, [pc, #176]	@ (8000900 <ESP8266_Init+0x134>)
 800084e:	f7ff fce9 	bl	8000224 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	4929      	ldr	r1, [pc, #164]	@ (8000900 <ESP8266_Init+0x134>)
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f00d f98c 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000860:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000864:	f00a f8bc 	bl	800a9e0 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <ESP8266_Init+0x144>)
 800086e:	461c      	mov	r4, r3
 8000870:	4613      	mov	r3, r2
 8000872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000874:	c407      	stmia	r4!, {r0, r1, r2}
 8000876:	8023      	strh	r3, [r4, #0]
 8000878:	3402      	adds	r4, #2
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	68b9      	ldr	r1, [r7, #8]
 8000884:	4618      	mov	r0, r3
 8000886:	f00d ffc1 	bl	800e80c <strcat>
	strcat(str, "\",\"");
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fcc8 	bl	8000224 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4413      	add	r3, r2
 800089e:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <ESP8266_Init+0x148>)
 80008a0:	6810      	ldr	r0, [r2, #0]
 80008a2:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00d ffae 	bl	800e80c <strcat>
	strcat(str, "\"\r\n");
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcb5 	bl	8000224 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4413      	add	r3, r2
 80008c4:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <ESP8266_Init+0x14c>)
 80008c6:	6810      	ldr	r0, [r2, #0]
 80008c8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	461a      	mov	r2, r3
 80008d0:	4912      	ldr	r1, [pc, #72]	@ (800091c <ESP8266_Init+0x150>)
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <ESP8266_Init+0x134>)
 80008d4:	f00d ff38 	bl	800e748 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <ESP8266_Init+0x134>)
 80008da:	f7ff fca3 	bl	8000224 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	4906      	ldr	r1, [pc, #24]	@ (8000900 <ESP8266_Init+0x134>)
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f00d f946 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008f0:	f00a f876 	bl	800a9e0 <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	377c      	adds	r7, #124	@ 0x7c
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	0800f03c 	.word	0x0800f03c
 8000900:	20001124 	.word	0x20001124
 8000904:	0800f04c 	.word	0x0800f04c
 8000908:	0800f058 	.word	0x0800f058
 800090c:	0800f060 	.word	0x0800f060
 8000910:	0800f070 	.word	0x0800f070
 8000914:	0800f080 	.word	0x0800f080
 8000918:	0800f084 	.word	0x0800f084
 800091c:	0800f088 	.word	0x0800f088

08000920 <sendMachineData>:
    sprintf(bufferTX, "AT+CIPCLOSE=0");
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8000926:	af04      	add	r7, sp, #16
 8000928:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 800092c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000930:	6020      	str	r0, [r4, #0]
 8000932:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8000936:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800093a:	6001      	str	r1, [r0, #0]
 800093c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000940:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000944:	600a      	str	r2, [r1, #0]
 8000946:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800094a:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 800094e:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000950:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000954:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000958:	f107 0014 	add.w	r0, r7, #20
 800095c:	220c      	movs	r2, #12
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	f00d ff63 	bl	800e82a <strncpy>
	subMachineID[12] = '\0';
 8000964:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000968:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800096c:	2200      	movs	r2, #0
 800096e:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000970:	4a35      	ldr	r2, [pc, #212]	@ (8000a48 <sendMachineData+0x128>)
 8000972:	4936      	ldr	r1, [pc, #216]	@ (8000a4c <sendMachineData+0x12c>)
 8000974:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <sendMachineData+0x130>)
 8000976:	f00d fee7 	bl	800e748 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800097a:	4835      	ldr	r0, [pc, #212]	@ (8000a50 <sendMachineData+0x130>)
 800097c:	f7ff fc52 	bl	8000224 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	b29a      	uxth	r2, r3
 8000984:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000988:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800098c:	4930      	ldr	r1, [pc, #192]	@ (8000a50 <sendMachineData+0x130>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	f00d f8f2 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000994:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000998:	f00a f822 	bl	800a9e0 <HAL_Delay>

	sprintf(local_txA,
 800099c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009a0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80009a4:	f107 0114 	add.w	r1, r7, #20
 80009a8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80009ac:	4a29      	ldr	r2, [pc, #164]	@ (8000a54 <sendMachineData+0x134>)
 80009ae:	9202      	str	r2, [sp, #8]
 80009b0:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80009ba:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	460a      	mov	r2, r1
 80009c6:	4924      	ldr	r1, [pc, #144]	@ (8000a58 <sendMachineData+0x138>)
 80009c8:	f00d febe 	bl	800e748 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc27 	bl	8000224 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80009e4:	491d      	ldr	r1, [pc, #116]	@ (8000a5c <sendMachineData+0x13c>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00d feae 	bl	800e748 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc17 	bl	8000224 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80009fe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a02:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f00d f8b6 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a0c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a10:	f009 ffe6 	bl	800a9e0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fc03 	bl	8000224 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a26:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a2a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	f00d f8a2 	bl	800db78 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000a34:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a38:	f009 ffd2 	bl	800a9e0 <HAL_Delay>
}
 8000a3c:	bf00      	nop
 8000a3e:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800f178 	.word	0x0800f178
 8000a4c:	0800f188 	.word	0x0800f188
 8000a50:	20001124 	.word	0x20001124
 8000a54:	0800f21c 	.word	0x0800f21c
 8000a58:	0800f1a8 	.word	0x0800f1a8
 8000a5c:	0800f230 	.word	0x0800f230

08000a60 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b089      	sub	sp, #36	@ 0x24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a6a:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a24      	ldr	r2, [pc, #144]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a7e:	f000 f8d1 	bl	8000c24 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a82:	e000      	b.n	8000a86 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a84:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e012      	b.n	8000ab2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a1c      	ldr	r2, [pc, #112]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d107      	bne.n	8000aac <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4918      	ldr	r1, [pc, #96]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	54ca      	strb	r2, [r1, r3]
					break;
 8000aaa:	e007      	b.n	8000abc <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbe7      	blt.n	8000a8c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	b298      	uxth	r0, r3
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <hata2EEPROM+0xa4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <hata2EEPROM+0xa8>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <hata2EEPROM+0xa0>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	b292      	uxth	r2, r2
 8000ad6:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000ada:	9402      	str	r4, [sp, #8]
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	460a      	mov	r2, r1
 8000ae4:	21a0      	movs	r1, #160	@ 0xa0
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <hata2EEPROM+0xac>)
 8000ae8:	f00b f804 	bl	800baf4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000aec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af0:	f009 ff76 	bl	800a9e0 <HAL_Delay>
	eepromKontrol();
 8000af4:	f7ff fb9e 	bl	8000234 <eepromKontrol>
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	20000094 	.word	0x20000094
 8000b04:	20000098 	.word	0x20000098
 8000b08:	20000fec 	.word	0x20000fec
 8000b0c:	2000193c 	.word	0x2000193c

08000b10 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10f      	bne.n	8000b40 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000b20:	4a38      	ldr	r2, [pc, #224]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	2001      	movs	r0, #1
 8000b26:	f009 fa01 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, "1");
 8000b2a:	4a37      	ldr	r2, [pc, #220]	@ (8000c08 <hataKoduLcdGoster+0xf8>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f009 f9fc 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b34:	4a35      	ldr	r2, [pc, #212]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000b36:	2107      	movs	r1, #7
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f009 f9f7 	bl	8009f2c <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b3e:	e05d      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d10f      	bne.n	8000b66 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000b46:	4a2f      	ldr	r2, [pc, #188]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f009 f9ee 	bl	8009f2c <lcd_print>
		lcd_print(2, 2, "2");
 8000b50:	4a2f      	ldr	r2, [pc, #188]	@ (8000c10 <hataKoduLcdGoster+0x100>)
 8000b52:	2102      	movs	r1, #2
 8000b54:	2002      	movs	r0, #2
 8000b56:	f009 f9e9 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f009 f9e4 	bl	8009f2c <lcd_print>
}
 8000b64:	e04a      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d10f      	bne.n	8000b8c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000b6c:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2001      	movs	r0, #1
 8000b72:	f009 f9db 	bl	8009f2c <lcd_print>
		lcd_print(2, 3, "3");
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <hataKoduLcdGoster+0x104>)
 8000b78:	2103      	movs	r1, #3
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f009 f9d6 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000b82:	2107      	movs	r1, #7
 8000b84:	2002      	movs	r0, #2
 8000b86:	f009 f9d1 	bl	8009f2c <lcd_print>
}
 8000b8a:	e037      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d10f      	bne.n	8000bb2 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000b92:	4a1c      	ldr	r2, [pc, #112]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	2001      	movs	r0, #1
 8000b98:	f009 f9c8 	bl	8009f2c <lcd_print>
		lcd_print(2, 4, "4");
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <hataKoduLcdGoster+0x108>)
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f009 f9c3 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "          ");
 8000ba6:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000ba8:	2107      	movs	r1, #7
 8000baa:	2002      	movs	r0, #2
 8000bac:	f009 f9be 	bl	8009f2c <lcd_print>
}
 8000bb0:	e024      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d10f      	bne.n	8000bd8 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000bb8:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f009 f9b5 	bl	8009f2c <lcd_print>
		lcd_print(2, 5, "5");
 8000bc2:	4a16      	ldr	r2, [pc, #88]	@ (8000c1c <hataKoduLcdGoster+0x10c>)
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f009 f9b0 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000bce:	2107      	movs	r1, #7
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f009 f9ab 	bl	8009f2c <lcd_print>
}
 8000bd6:	e011      	b.n	8000bfc <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d10e      	bne.n	8000bfc <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <hataKoduLcdGoster+0xf4>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	2001      	movs	r0, #1
 8000be4:	f009 f9a2 	bl	8009f2c <lcd_print>
		lcd_print(2, 6, "6");
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <hataKoduLcdGoster+0x110>)
 8000bea:	2106      	movs	r1, #6
 8000bec:	2002      	movs	r0, #2
 8000bee:	f009 f99d 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf2:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <hataKoduLcdGoster+0xfc>)
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f009 f998 	bl	8009f2c <lcd_print>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200018b0 	.word	0x200018b0
 8000c08:	0800f2a4 	.word	0x0800f2a4
 8000c0c:	0800f2a8 	.word	0x0800f2a8
 8000c10:	0800f2b4 	.word	0x0800f2b4
 8000c14:	0800f2b8 	.word	0x0800f2b8
 8000c18:	0800f2bc 	.word	0x0800f2bc
 8000c1c:	0800f2c0 	.word	0x0800f2c0
 8000c20:	0800f2c4 	.word	0x0800f2c4

08000c24 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	e009      	b.n	8000c44 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <eepromDataFillWithEmpty+0x38>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <eepromDataFillWithEmpty+0x3c>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <eepromDataFillWithEmpty+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbf0      	blt.n	8000c30 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000006c 	.word	0x2000006c
 8000c60:	20000fec 	.word	0x20000fec
 8000c64:	20000094 	.word	0x20000094

08000c68 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c7a:	4b50      	ldr	r3, [pc, #320]	@ (8000dbc <i2cTest+0x154>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b4e      	ldr	r3, [pc, #312]	@ (8000dbc <i2cTest+0x154>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 0201 	bic.w	r2, r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c8a:	484c      	ldr	r0, [pc, #304]	@ (8000dbc <i2cTest+0x154>)
 8000c8c:	f00a fe04 	bl	800b898 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c90:	23c0      	movs	r3, #192	@ 0xc0
 8000c92:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c94:	2311      	movs	r3, #17
 8000c96:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4846      	ldr	r0, [pc, #280]	@ (8000dc0 <i2cTest+0x158>)
 8000ca6:	f00a fa0b 	bl	800b0c0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	4844      	ldr	r0, [pc, #272]	@ (8000dc0 <i2cTest+0x158>)
 8000cb0:	f00a fc7d 	bl	800b5ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	4841      	ldr	r0, [pc, #260]	@ (8000dc0 <i2cTest+0x158>)
 8000cba:	f00a fc78 	bl	800b5ae <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f009 fe8e 	bl	800a9e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cc4:	bf00      	nop
 8000cc6:	2140      	movs	r1, #64	@ 0x40
 8000cc8:	483d      	ldr	r0, [pc, #244]	@ (8000dc0 <i2cTest+0x158>)
 8000cca:	f00a fc59 	bl	800b580 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d006      	beq.n	8000ce2 <i2cTest+0x7a>
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	483a      	ldr	r0, [pc, #232]	@ (8000dc0 <i2cTest+0x158>)
 8000cd8:	f00a fc52 	bl	800b580 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d1f1      	bne.n	8000cc6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	4836      	ldr	r0, [pc, #216]	@ (8000dc0 <i2cTest+0x158>)
 8000ce8:	f00a fc61 	bl	800b5ae <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f009 fe77 	bl	800a9e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cf2:	bf00      	nop
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	4832      	ldr	r0, [pc, #200]	@ (8000dc0 <i2cTest+0x158>)
 8000cf8:	f00a fc42 	bl	800b580 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d0f8      	beq.n	8000cf4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	482e      	ldr	r0, [pc, #184]	@ (8000dc0 <i2cTest+0x158>)
 8000d08:	f00a fc51 	bl	800b5ae <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d0c:	200a      	movs	r0, #10
 8000d0e:	f009 fe67 	bl	800a9e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d12:	bf00      	nop
 8000d14:	2140      	movs	r1, #64	@ 0x40
 8000d16:	482a      	ldr	r0, [pc, #168]	@ (8000dc0 <i2cTest+0x158>)
 8000d18:	f00a fc32 	bl	800b580 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d0f8      	beq.n	8000d14 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	4826      	ldr	r0, [pc, #152]	@ (8000dc0 <i2cTest+0x158>)
 8000d28:	f00a fc41 	bl	800b5ae <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f009 fe57 	bl	800a9e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d32:	bf00      	nop
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	4822      	ldr	r0, [pc, #136]	@ (8000dc0 <i2cTest+0x158>)
 8000d38:	f00a fc22 	bl	800b580 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d1f8      	bne.n	8000d34 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <i2cTest+0x158>)
 8000d48:	f00a fc31 	bl	800b5ae <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f009 fe47 	bl	800a9e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d52:	bf00      	nop
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	481a      	ldr	r0, [pc, #104]	@ (8000dc0 <i2cTest+0x158>)
 8000d58:	f00a fc12 	bl	800b580 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d1f8      	bne.n	8000d54 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d62:	23c0      	movs	r3, #192	@ 0xc0
 8000d64:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d66:	2312      	movs	r3, #18
 8000d68:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4812      	ldr	r0, [pc, #72]	@ (8000dc0 <i2cTest+0x158>)
 8000d78:	f00a f9a2 	bl	800b0c0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <i2cTest+0x154>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <i2cTest+0x154>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d8a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <i2cTest+0x154>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <i2cTest+0x154>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d9a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <i2cTest+0x154>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <i2cTest+0x154>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <i2cTest+0x154>)
 8000dae:	f00a fc2f 	bl	800b610 <HAL_I2C_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000193c 	.word	0x2000193c
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dce:	20c8      	movs	r0, #200	@ 0xc8
 8000dd0:	f009 fe06 	bl	800a9e0 <HAL_Delay>
	lcd_clear();
 8000dd4:	f009 f8d6 	bl	8009f84 <lcd_clear>
	if(type == 1 && page == 0) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d13e      	bne.n	8000e5c <printTemplate+0x98>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d13b      	bne.n	8000e5c <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000de4:	4a9a      	ldr	r2, [pc, #616]	@ (8001050 <printTemplate+0x28c>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2001      	movs	r0, #1
 8000dea:	f009 f89f 	bl	8009f2c <lcd_print>
		lcd_print(2, 3, "0");
 8000dee:	4a99      	ldr	r2, [pc, #612]	@ (8001054 <printTemplate+0x290>)
 8000df0:	2103      	movs	r1, #3
 8000df2:	2002      	movs	r0, #2
 8000df4:	f009 f89a 	bl	8009f2c <lcd_print>
		lcd_print(2, 4, "1");
 8000df8:	4a97      	ldr	r2, [pc, #604]	@ (8001058 <printTemplate+0x294>)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f009 f895 	bl	8009f2c <lcd_print>
		lcd_print(2, 5, "2");
 8000e02:	4a96      	ldr	r2, [pc, #600]	@ (800105c <printTemplate+0x298>)
 8000e04:	2105      	movs	r1, #5
 8000e06:	2002      	movs	r0, #2
 8000e08:	f009 f890 	bl	8009f2c <lcd_print>
		lcd_print(2, 6, "3");
 8000e0c:	4a94      	ldr	r2, [pc, #592]	@ (8001060 <printTemplate+0x29c>)
 8000e0e:	2106      	movs	r1, #6
 8000e10:	2002      	movs	r0, #2
 8000e12:	f009 f88b 	bl	8009f2c <lcd_print>
		lcd_print(2, 7, "4");
 8000e16:	4a93      	ldr	r2, [pc, #588]	@ (8001064 <printTemplate+0x2a0>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f009 f886 	bl	8009f2c <lcd_print>
		lcd_print(2, 10, "5");
 8000e20:	4a91      	ldr	r2, [pc, #580]	@ (8001068 <printTemplate+0x2a4>)
 8000e22:	210a      	movs	r1, #10
 8000e24:	2002      	movs	r0, #2
 8000e26:	f009 f881 	bl	8009f2c <lcd_print>
		lcd_print(2, 11, "6");
 8000e2a:	4a90      	ldr	r2, [pc, #576]	@ (800106c <printTemplate+0x2a8>)
 8000e2c:	210b      	movs	r1, #11
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f009 f87c 	bl	8009f2c <lcd_print>
		lcd_print(2, 12, "7");
 8000e34:	4a8e      	ldr	r2, [pc, #568]	@ (8001070 <printTemplate+0x2ac>)
 8000e36:	210c      	movs	r1, #12
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f009 f877 	bl	8009f2c <lcd_print>
		lcd_print(2, 13, "8");
 8000e3e:	4a8d      	ldr	r2, [pc, #564]	@ (8001074 <printTemplate+0x2b0>)
 8000e40:	210d      	movs	r1, #13
 8000e42:	2002      	movs	r0, #2
 8000e44:	f009 f872 	bl	8009f2c <lcd_print>
		lcd_print(2, 14, "9");
 8000e48:	4a8b      	ldr	r2, [pc, #556]	@ (8001078 <printTemplate+0x2b4>)
 8000e4a:	210e      	movs	r1, #14
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f009 f86d 	bl	8009f2c <lcd_print>
		lcd_gotoxy(2, 3);
 8000e52:	2103      	movs	r1, #3
 8000e54:	2002      	movs	r0, #2
 8000e56:	f009 f84a 	bl	8009eee <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000e5a:	e0f5      	b.n	8001048 <printTemplate+0x284>
	} else if(type == 2) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d178      	bne.n	8000f54 <printTemplate+0x190>
		if(page == 1) {
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d114      	bne.n	8000e92 <printTemplate+0xce>
			lcd_clear();
 8000e68:	f009 f88c 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f009 fdb7 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e72:	4a82      	ldr	r2, [pc, #520]	@ (800107c <printTemplate+0x2b8>)
 8000e74:	2101      	movs	r1, #1
 8000e76:	2001      	movs	r0, #1
 8000e78:	f009 f858 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e7c:	4a80      	ldr	r2, [pc, #512]	@ (8001080 <printTemplate+0x2bc>)
 8000e7e:	2107      	movs	r1, #7
 8000e80:	2001      	movs	r0, #1
 8000e82:	f009 f853 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e86:	4a7f      	ldr	r2, [pc, #508]	@ (8001084 <printTemplate+0x2c0>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f009 f84e 	bl	8009f2c <lcd_print>
}
 8000e90:	e0da      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 2) {
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d114      	bne.n	8000ec2 <printTemplate+0xfe>
			lcd_clear();
 8000e98:	f009 f874 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000e9c:	2064      	movs	r0, #100	@ 0x64
 8000e9e:	f009 fd9f 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ea2:	4a79      	ldr	r2, [pc, #484]	@ (8001088 <printTemplate+0x2c4>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f009 f840 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eac:	4a74      	ldr	r2, [pc, #464]	@ (8001080 <printTemplate+0x2bc>)
 8000eae:	2107      	movs	r1, #7
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f009 f83b 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000eb6:	4a75      	ldr	r2, [pc, #468]	@ (800108c <printTemplate+0x2c8>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f009 f836 	bl	8009f2c <lcd_print>
}
 8000ec0:	e0c2      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 3) {
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d114      	bne.n	8000ef2 <printTemplate+0x12e>
			lcd_clear();
 8000ec8:	f009 f85c 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000ecc:	2064      	movs	r0, #100	@ 0x64
 8000ece:	f009 fd87 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800107c <printTemplate+0x2b8>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f009 f828 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000edc:	4a68      	ldr	r2, [pc, #416]	@ (8001080 <printTemplate+0x2bc>)
 8000ede:	2107      	movs	r1, #7
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f009 f823 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8001090 <printTemplate+0x2cc>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2002      	movs	r0, #2
 8000eec:	f009 f81e 	bl	8009f2c <lcd_print>
}
 8000ef0:	e0aa      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 4) {
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d114      	bne.n	8000f22 <printTemplate+0x15e>
			lcd_clear();
 8000ef8:	f009 f844 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	@ 0x64
 8000efe:	f009 fd6f 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f02:	4a5e      	ldr	r2, [pc, #376]	@ (800107c <printTemplate+0x2b8>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f009 f810 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001080 <printTemplate+0x2bc>)
 8000f0e:	2107      	movs	r1, #7
 8000f10:	2001      	movs	r0, #1
 8000f12:	f009 f80b 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f16:	4a5f      	ldr	r2, [pc, #380]	@ (8001094 <printTemplate+0x2d0>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f009 f806 	bl	8009f2c <lcd_print>
}
 8000f20:	e092      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 5) {
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	f040 808f 	bne.w	8001048 <printTemplate+0x284>
			lcd_clear();
 8000f2a:	f009 f82b 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	@ 0x64
 8000f30:	f009 fd56 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f34:	4a51      	ldr	r2, [pc, #324]	@ (800107c <printTemplate+0x2b8>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f008 fff7 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f3e:	4a50      	ldr	r2, [pc, #320]	@ (8001080 <printTemplate+0x2bc>)
 8000f40:	2107      	movs	r1, #7
 8000f42:	2001      	movs	r0, #1
 8000f44:	f008 fff2 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f48:	4a53      	ldr	r2, [pc, #332]	@ (8001098 <printTemplate+0x2d4>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f008 ffed 	bl	8009f2c <lcd_print>
}
 8000f52:	e079      	b.n	8001048 <printTemplate+0x284>
	} else if(type == 3) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d176      	bne.n	8001048 <printTemplate+0x284>
		if(page == 1) {
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d114      	bne.n	8000f8a <printTemplate+0x1c6>
			lcd_clear();
 8000f60:	f009 f810 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000f64:	2064      	movs	r0, #100	@ 0x64
 8000f66:	f009 fd3b 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <printTemplate+0x2d8>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f008 ffdc 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f74:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <printTemplate+0x2dc>)
 8000f76:	2107      	movs	r1, #7
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f008 ffd7 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f7e:	4a41      	ldr	r2, [pc, #260]	@ (8001084 <printTemplate+0x2c0>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	2002      	movs	r0, #2
 8000f84:	f008 ffd2 	bl	8009f2c <lcd_print>
}
 8000f88:	e05e      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 2) {
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d114      	bne.n	8000fba <printTemplate+0x1f6>
			lcd_clear();
 8000f90:	f008 fff8 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	@ 0x64
 8000f96:	f009 fd23 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f9a:	4a40      	ldr	r2, [pc, #256]	@ (800109c <printTemplate+0x2d8>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f008 ffc4 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80010a0 <printTemplate+0x2dc>)
 8000fa6:	2107      	movs	r1, #7
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f008 ffbf 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fae:	4a37      	ldr	r2, [pc, #220]	@ (800108c <printTemplate+0x2c8>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f008 ffba 	bl	8009f2c <lcd_print>
}
 8000fb8:	e046      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 3) {
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d114      	bne.n	8000fea <printTemplate+0x226>
			lcd_clear();
 8000fc0:	f008 ffe0 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000fc4:	2064      	movs	r0, #100	@ 0x64
 8000fc6:	f009 fd0b 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <printTemplate+0x2d8>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f008 ffac 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fd4:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <printTemplate+0x2dc>)
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f008 ffa7 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000fde:	4a2c      	ldr	r2, [pc, #176]	@ (8001090 <printTemplate+0x2cc>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f008 ffa2 	bl	8009f2c <lcd_print>
}
 8000fe8:	e02e      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 4) {
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d114      	bne.n	800101a <printTemplate+0x256>
			lcd_clear();
 8000ff0:	f008 ffc8 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	@ 0x64
 8000ff6:	f009 fcf3 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ffa:	4a28      	ldr	r2, [pc, #160]	@ (800109c <printTemplate+0x2d8>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2001      	movs	r0, #1
 8001000:	f008 ff94 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001004:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <printTemplate+0x2dc>)
 8001006:	2107      	movs	r1, #7
 8001008:	2001      	movs	r0, #1
 800100a:	f008 ff8f 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800100e:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <printTemplate+0x2d0>)
 8001010:	2101      	movs	r1, #1
 8001012:	2002      	movs	r0, #2
 8001014:	f008 ff8a 	bl	8009f2c <lcd_print>
}
 8001018:	e016      	b.n	8001048 <printTemplate+0x284>
		} else if(page == 5) {
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d113      	bne.n	8001048 <printTemplate+0x284>
			lcd_clear();
 8001020:	f008 ffb0 	bl	8009f84 <lcd_clear>
			HAL_Delay(100);
 8001024:	2064      	movs	r0, #100	@ 0x64
 8001026:	f009 fcdb 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <printTemplate+0x2d8>)
 800102c:	2101      	movs	r1, #1
 800102e:	2001      	movs	r0, #1
 8001030:	f008 ff7c 	bl	8009f2c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001034:	4a1a      	ldr	r2, [pc, #104]	@ (80010a0 <printTemplate+0x2dc>)
 8001036:	2107      	movs	r1, #7
 8001038:	2001      	movs	r0, #1
 800103a:	f008 ff77 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800103e:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <printTemplate+0x2d4>)
 8001040:	2101      	movs	r1, #1
 8001042:	2002      	movs	r0, #2
 8001044:	f008 ff72 	bl	8009f2c <lcd_print>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800f2c8 	.word	0x0800f2c8
 8001054:	0800f2d0 	.word	0x0800f2d0
 8001058:	0800f2d4 	.word	0x0800f2d4
 800105c:	0800f2d8 	.word	0x0800f2d8
 8001060:	0800f2dc 	.word	0x0800f2dc
 8001064:	0800f2e0 	.word	0x0800f2e0
 8001068:	0800f2e4 	.word	0x0800f2e4
 800106c:	0800f2e8 	.word	0x0800f2e8
 8001070:	0800f2ec 	.word	0x0800f2ec
 8001074:	0800f2f0 	.word	0x0800f2f0
 8001078:	0800f2f4 	.word	0x0800f2f4
 800107c:	0800f2f8 	.word	0x0800f2f8
 8001080:	20001070 	.word	0x20001070
 8001084:	0800f30c 	.word	0x0800f30c
 8001088:	0800f320 	.word	0x0800f320
 800108c:	0800f328 	.word	0x0800f328
 8001090:	0800f33c 	.word	0x0800f33c
 8001094:	0800f350 	.word	0x0800f350
 8001098:	0800f364 	.word	0x0800f364
 800109c:	0800f378 	.word	0x0800f378
 80010a0:	20001080 	.word	0x20001080

080010a4 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10a      	bne.n	80010c8 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <printCredentials+0x70>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	2002      	movs	r0, #2
 80010b8:	f008 ff38 	bl	8009f2c <lcd_print>
		lcd_print(2, 13, "    ");
 80010bc:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <printCredentials+0x74>)
 80010be:	210d      	movs	r1, #13
 80010c0:	2002      	movs	r0, #2
 80010c2:	f008 ff33 	bl	8009f2c <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80010c6:	e021      	b.n	800110c <printCredentials+0x68>
	} else if(type == 2) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d10f      	bne.n	80010ee <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <printCredentials+0x78>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	2001      	movs	r0, #1
 80010d4:	f008 ff2a 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, "                ");
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <printCredentials+0x7c>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f008 ff25 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80010e2:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <printCredentials+0x80>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2002      	movs	r0, #2
 80010e8:	f008 ff20 	bl	8009f2c <lcd_print>
}
 80010ec:	e00e      	b.n	800110c <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <printCredentials+0x84>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	2001      	movs	r0, #1
 80010f4:	f008 ff1a 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, "                ");
 80010f8:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <printCredentials+0x7c>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2002      	movs	r0, #2
 80010fe:	f008 ff15 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <printCredentials+0x88>)
 8001104:	2101      	movs	r1, #1
 8001106:	2002      	movs	r0, #2
 8001108:	f008 ff10 	bl	8009f2c <lcd_print>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20001064 	.word	0x20001064
 8001118:	0800f38c 	.word	0x0800f38c
 800111c:	0800f394 	.word	0x0800f394
 8001120:	0800f3a8 	.word	0x0800f3a8
 8001124:	20001070 	.word	0x20001070
 8001128:	0800f3bc 	.word	0x0800f3bc
 800112c:	20001080 	.word	0x20001080

08001130 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001134:	f3bf 8f4f 	dsb	sy
}
 8001138:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <__NVIC_SystemReset+0x24>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001142:	4904      	ldr	r1, [pc, #16]	@ (8001154 <__NVIC_SystemReset+0x24>)
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <__NVIC_SystemReset+0x28>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800114a:	f3bf 8f4f 	dsb	sy
}
 800114e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <__NVIC_SystemReset+0x20>
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	05fa0004 	.word	0x05fa0004

0800115c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001162:	2101      	movs	r1, #1
 8001164:	488e      	ldr	r0, [pc, #568]	@ (80013a0 <menu+0x244>)
 8001166:	f00a fa0b 	bl	800b580 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	f040 8099 	bne.w	80012a4 <menu+0x148>
 8001172:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <menu+0x248>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f083 0301 	eor.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8091 	beq.w	80012a4 <menu+0x148>
		menuSayac = menuSayac+1;
 8001182:	4b89      	ldr	r3, [pc, #548]	@ (80013a8 <menu+0x24c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b87      	ldr	r3, [pc, #540]	@ (80013a8 <menu+0x24c>)
 800118c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800118e:	4b86      	ldr	r3, [pc, #536]	@ (80013a8 <menu+0x24c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b24      	cmp	r3, #36	@ 0x24
 8001194:	d102      	bne.n	800119c <menu+0x40>
			menuSayac = 1;
 8001196:	4b84      	ldr	r3, [pc, #528]	@ (80013a8 <menu+0x24c>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800119c:	4b82      	ldr	r3, [pc, #520]	@ (80013a8 <menu+0x24c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b12      	cmp	r3, #18
 80011a2:	d106      	bne.n	80011b2 <menu+0x56>
 80011a4:	4b81      	ldr	r3, [pc, #516]	@ (80013ac <menu+0x250>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <menu+0x56>
			menuSayac = 21;
 80011ac:	4b7e      	ldr	r3, [pc, #504]	@ (80013a8 <menu+0x24c>)
 80011ae:	2215      	movs	r2, #21
 80011b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011b2:	4b7d      	ldr	r3, [pc, #500]	@ (80013a8 <menu+0x24c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d106      	bne.n	80011c8 <menu+0x6c>
 80011ba:	4b7d      	ldr	r3, [pc, #500]	@ (80013b0 <menu+0x254>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <menu+0x6c>
			menuSayac = 16;
 80011c2:	4b79      	ldr	r3, [pc, #484]	@ (80013a8 <menu+0x24c>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80011c8:	4b77      	ldr	r3, [pc, #476]	@ (80013a8 <menu+0x24c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b0d      	cmp	r3, #13
 80011ce:	d106      	bne.n	80011de <menu+0x82>
 80011d0:	4b77      	ldr	r3, [pc, #476]	@ (80013b0 <menu+0x254>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <menu+0x82>
			menuSayac = 16;
 80011d8:	4b73      	ldr	r3, [pc, #460]	@ (80013a8 <menu+0x24c>)
 80011da:	2210      	movs	r2, #16
 80011dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80011de:	4b72      	ldr	r3, [pc, #456]	@ (80013a8 <menu+0x24c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	d106      	bne.n	80011f4 <menu+0x98>
 80011e6:	4b72      	ldr	r3, [pc, #456]	@ (80013b0 <menu+0x254>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d102      	bne.n	80011f4 <menu+0x98>
			menuSayac = 13;
 80011ee:	4b6e      	ldr	r3, [pc, #440]	@ (80013a8 <menu+0x24c>)
 80011f0:	220d      	movs	r2, #13
 80011f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80011f4:	4b6c      	ldr	r3, [pc, #432]	@ (80013a8 <menu+0x24c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b0a      	cmp	r3, #10
 80011fa:	d10a      	bne.n	8001212 <menu+0xb6>
 80011fc:	4b6d      	ldr	r3, [pc, #436]	@ (80013b4 <menu+0x258>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <menu+0xb0>
 8001204:	4b6b      	ldr	r3, [pc, #428]	@ (80013b4 <menu+0x258>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d102      	bne.n	8001212 <menu+0xb6>
			menuSayac = 11;
 800120c:	4b66      	ldr	r3, [pc, #408]	@ (80013a8 <menu+0x24c>)
 800120e:	220b      	movs	r2, #11
 8001210:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001212:	4b65      	ldr	r3, [pc, #404]	@ (80013a8 <menu+0x24c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d10e      	bne.n	8001238 <menu+0xdc>
 800121a:	4b67      	ldr	r3, [pc, #412]	@ (80013b8 <menu+0x25c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d003      	beq.n	800122a <menu+0xce>
 8001222:	4b65      	ldr	r3, [pc, #404]	@ (80013b8 <menu+0x25c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d106      	bne.n	8001238 <menu+0xdc>
 800122a:	4b61      	ldr	r3, [pc, #388]	@ (80013b0 <menu+0x254>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <menu+0xdc>
			menuSayac = 16;
 8001232:	4b5d      	ldr	r3, [pc, #372]	@ (80013a8 <menu+0x24c>)
 8001234:	2210      	movs	r2, #16
 8001236:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001238:	4b5b      	ldr	r3, [pc, #364]	@ (80013a8 <menu+0x24c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d10e      	bne.n	800125e <menu+0x102>
 8001240:	4b5d      	ldr	r3, [pc, #372]	@ (80013b8 <menu+0x25c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d003      	beq.n	8001250 <menu+0xf4>
 8001248:	4b5b      	ldr	r3, [pc, #364]	@ (80013b8 <menu+0x25c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d106      	bne.n	800125e <menu+0x102>
 8001250:	4b57      	ldr	r3, [pc, #348]	@ (80013b0 <menu+0x254>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d102      	bne.n	800125e <menu+0x102>
			menuSayac = 13;
 8001258:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <menu+0x24c>)
 800125a:	220d      	movs	r2, #13
 800125c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800125e:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <menu+0x24c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	d106      	bne.n	8001274 <menu+0x118>
 8001266:	4b55      	ldr	r3, [pc, #340]	@ (80013bc <menu+0x260>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <menu+0x118>
			menuSayac = 16;
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <menu+0x24c>)
 8001270:	2210      	movs	r2, #16
 8001272:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001274:	4b4c      	ldr	r3, [pc, #304]	@ (80013a8 <menu+0x24c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b18      	cmp	r3, #24
 800127a:	d106      	bne.n	800128a <menu+0x12e>
 800127c:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <menu+0x250>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <menu+0x12e>
			menuSayac = 26;
 8001284:	4b48      	ldr	r3, [pc, #288]	@ (80013a8 <menu+0x24c>)
 8001286:	221a      	movs	r2, #26
 8001288:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <menu+0x24c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b21      	cmp	r3, #33	@ 0x21
 8001290:	d106      	bne.n	80012a0 <menu+0x144>
 8001292:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <menu+0x264>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <menu+0x144>
			menuSayac = 35;
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <menu+0x24c>)
 800129c:	2223      	movs	r2, #35	@ 0x23
 800129e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012a0:	f002 fc78 	bl	8003b94 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012a4:	2108      	movs	r1, #8
 80012a6:	4847      	ldr	r0, [pc, #284]	@ (80013c4 <menu+0x268>)
 80012a8:	f00a f96a 	bl	800b580 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	f040 8097 	bne.w	80013e2 <menu+0x286>
 80012b4:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <menu+0x248>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f083 0301 	eor.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 808f 	beq.w	80013e2 <menu+0x286>
		if (menuSayac <= 1) {
 80012c4:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <menu+0x24c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d802      	bhi.n	80012d2 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012cc:	4b36      	ldr	r3, [pc, #216]	@ (80013a8 <menu+0x24c>)
 80012ce:	2224      	movs	r2, #36	@ 0x24
 80012d0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80012d2:	4b35      	ldr	r3, [pc, #212]	@ (80013a8 <menu+0x24c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <menu+0x24c>)
 80012dc:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <menu+0x24c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b14      	cmp	r3, #20
 80012e4:	d106      	bne.n	80012f4 <menu+0x198>
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <menu+0x250>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <menu+0x198>
			menuSayac = 17;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <menu+0x24c>)
 80012f0:	2211      	movs	r2, #17
 80012f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <menu+0x24c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d106      	bne.n	800130a <menu+0x1ae>
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <menu+0x254>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <menu+0x1ae>
			menuSayac = 7;
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <menu+0x24c>)
 8001306:	2207      	movs	r2, #7
 8001308:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800130a:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <menu+0x24c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d106      	bne.n	8001320 <menu+0x1c4>
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <menu+0x254>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <menu+0x1c4>
			menuSayac = 12;
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <menu+0x24c>)
 800131c:	220c      	movs	r2, #12
 800131e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <menu+0x24c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d106      	bne.n	8001336 <menu+0x1da>
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <menu+0x254>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d102      	bne.n	8001336 <menu+0x1da>
			menuSayac = 8;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <menu+0x24c>)
 8001332:	2208      	movs	r2, #8
 8001334:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <menu+0x24c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d10a      	bne.n	8001354 <menu+0x1f8>
 800133e:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <menu+0x258>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <menu+0x1f2>
 8001346:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <menu+0x258>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d102      	bne.n	8001354 <menu+0x1f8>
			menuSayac = 9;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <menu+0x24c>)
 8001350:	2209      	movs	r2, #9
 8001352:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <menu+0x24c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d10a      	bne.n	8001372 <menu+0x216>
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <menu+0x25c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d003      	beq.n	800136c <menu+0x210>
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <menu+0x25c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d102      	bne.n	8001372 <menu+0x216>
			menuSayac = 11;
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <menu+0x24c>)
 800136e:	220b      	movs	r2, #11
 8001370:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <menu+0x24c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d106      	bne.n	8001388 <menu+0x22c>
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <menu+0x260>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <menu+0x22c>
			menuSayac = 14;
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <menu+0x24c>)
 8001384:	220e      	movs	r2, #14
 8001386:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <menu+0x24c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b19      	cmp	r3, #25
 800138e:	d11b      	bne.n	80013c8 <menu+0x26c>
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <menu+0x250>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d117      	bne.n	80013c8 <menu+0x26c>
			menuSayac = 23;
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <menu+0x24c>)
 800139a:	2217      	movs	r2, #23
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e013      	b.n	80013c8 <menu+0x26c>
 80013a0:	40010800 	.word	0x40010800
 80013a4:	200010eb 	.word	0x200010eb
 80013a8:	200010bc 	.word	0x200010bc
 80013ac:	200010cb 	.word	0x200010cb
 80013b0:	200010c4 	.word	0x200010c4
 80013b4:	200010c5 	.word	0x200010c5
 80013b8:	200010c6 	.word	0x200010c6
 80013bc:	200010c7 	.word	0x200010c7
 80013c0:	200010db 	.word	0x200010db
 80013c4:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80013c8:	4bb0      	ldr	r3, [pc, #704]	@ (800168c <menu+0x530>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b22      	cmp	r3, #34	@ 0x22
 80013ce:	d106      	bne.n	80013de <menu+0x282>
 80013d0:	4baf      	ldr	r3, [pc, #700]	@ (8001690 <menu+0x534>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <menu+0x282>
			menuSayac = 32;
 80013d8:	4bac      	ldr	r3, [pc, #688]	@ (800168c <menu+0x530>)
 80013da:	2220      	movs	r2, #32
 80013dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013de:	f002 fbd9 	bl	8003b94 <bekle>
	}

	if (menuSayac == 0) {
 80013e2:	4baa      	ldr	r3, [pc, #680]	@ (800168c <menu+0x530>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80013ea:	4aaa      	ldr	r2, [pc, #680]	@ (8001694 <menu+0x538>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	2001      	movs	r0, #1
 80013f0:	f008 fd9c 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80013f4:	4aa8      	ldr	r2, [pc, #672]	@ (8001698 <menu+0x53c>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	2002      	movs	r0, #2
 80013fa:	f008 fd97 	bl	8009f2c <lcd_print>
	}

	if (menuSayac == 1) {
 80013fe:	4ba3      	ldr	r3, [pc, #652]	@ (800168c <menu+0x530>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 81f4 	bne.w	80017f0 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001408:	4aa4      	ldr	r2, [pc, #656]	@ (800169c <menu+0x540>)
 800140a:	2101      	movs	r1, #1
 800140c:	2001      	movs	r0, #1
 800140e:	f008 fd8d 	bl	8009f2c <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001412:	4ba3      	ldr	r3, [pc, #652]	@ (80016a0 <menu+0x544>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d115      	bne.n	8001446 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800141a:	4aa2      	ldr	r2, [pc, #648]	@ (80016a4 <menu+0x548>)
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f008 fd84 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "   ");
 8001424:	4aa0      	ldr	r2, [pc, #640]	@ (80016a8 <menu+0x54c>)
 8001426:	210f      	movs	r1, #15
 8001428:	2002      	movs	r0, #2
 800142a:	f008 fd7f 	bl	8009f2c <lcd_print>
			itoa(hataKayit1, snum, 10);
 800142e:	4b9f      	ldr	r3, [pc, #636]	@ (80016ac <menu+0x550>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	220a      	movs	r2, #10
 8001434:	499e      	ldr	r1, [pc, #632]	@ (80016b0 <menu+0x554>)
 8001436:	4618      	mov	r0, r3
 8001438:	f00d f8ce 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 800143c:	4a9c      	ldr	r2, [pc, #624]	@ (80016b0 <menu+0x554>)
 800143e:	210e      	movs	r1, #14
 8001440:	2002      	movs	r0, #2
 8001442:	f008 fd73 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001446:	4b96      	ldr	r3, [pc, #600]	@ (80016a0 <menu+0x544>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d115      	bne.n	800147a <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800144e:	4a99      	ldr	r2, [pc, #612]	@ (80016b4 <menu+0x558>)
 8001450:	2101      	movs	r1, #1
 8001452:	2002      	movs	r0, #2
 8001454:	f008 fd6a 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 8001458:	4a97      	ldr	r2, [pc, #604]	@ (80016b8 <menu+0x55c>)
 800145a:	210f      	movs	r1, #15
 800145c:	2002      	movs	r0, #2
 800145e:	f008 fd65 	bl	8009f2c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001462:	4b96      	ldr	r3, [pc, #600]	@ (80016bc <menu+0x560>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	220a      	movs	r2, #10
 8001468:	4991      	ldr	r1, [pc, #580]	@ (80016b0 <menu+0x554>)
 800146a:	4618      	mov	r0, r3
 800146c:	f00d f8b4 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 8001470:	4a8f      	ldr	r2, [pc, #572]	@ (80016b0 <menu+0x554>)
 8001472:	210e      	movs	r1, #14
 8001474:	2002      	movs	r0, #2
 8001476:	f008 fd59 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800147a:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <menu+0x544>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d115      	bne.n	80014ae <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001482:	4a8f      	ldr	r2, [pc, #572]	@ (80016c0 <menu+0x564>)
 8001484:	2101      	movs	r1, #1
 8001486:	2002      	movs	r0, #2
 8001488:	f008 fd50 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 800148c:	4a8a      	ldr	r2, [pc, #552]	@ (80016b8 <menu+0x55c>)
 800148e:	210f      	movs	r1, #15
 8001490:	2002      	movs	r0, #2
 8001492:	f008 fd4b 	bl	8009f2c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001496:	4b8b      	ldr	r3, [pc, #556]	@ (80016c4 <menu+0x568>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	220a      	movs	r2, #10
 800149c:	4984      	ldr	r1, [pc, #528]	@ (80016b0 <menu+0x554>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f00d f89a 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 80014a4:	4a82      	ldr	r2, [pc, #520]	@ (80016b0 <menu+0x554>)
 80014a6:	210e      	movs	r1, #14
 80014a8:	2002      	movs	r0, #2
 80014aa:	f008 fd3f 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80014ae:	4b7c      	ldr	r3, [pc, #496]	@ (80016a0 <menu+0x544>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d115      	bne.n	80014e2 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80014b6:	4a84      	ldr	r2, [pc, #528]	@ (80016c8 <menu+0x56c>)
 80014b8:	2101      	movs	r1, #1
 80014ba:	2002      	movs	r0, #2
 80014bc:	f008 fd36 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 80014c0:	4a7d      	ldr	r2, [pc, #500]	@ (80016b8 <menu+0x55c>)
 80014c2:	210f      	movs	r1, #15
 80014c4:	2002      	movs	r0, #2
 80014c6:	f008 fd31 	bl	8009f2c <lcd_print>
			itoa(hataKayit4, snum, 10);
 80014ca:	4b80      	ldr	r3, [pc, #512]	@ (80016cc <menu+0x570>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	220a      	movs	r2, #10
 80014d0:	4977      	ldr	r1, [pc, #476]	@ (80016b0 <menu+0x554>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00d f880 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 80014d8:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <menu+0x554>)
 80014da:	210e      	movs	r1, #14
 80014dc:	2002      	movs	r0, #2
 80014de:	f008 fd25 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014e2:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <menu+0x544>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d115      	bne.n	8001516 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80014ea:	4a79      	ldr	r2, [pc, #484]	@ (80016d0 <menu+0x574>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f008 fd1c 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 80014f4:	4a70      	ldr	r2, [pc, #448]	@ (80016b8 <menu+0x55c>)
 80014f6:	210f      	movs	r1, #15
 80014f8:	2002      	movs	r0, #2
 80014fa:	f008 fd17 	bl	8009f2c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014fe:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <menu+0x578>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	220a      	movs	r2, #10
 8001504:	496a      	ldr	r1, [pc, #424]	@ (80016b0 <menu+0x554>)
 8001506:	4618      	mov	r0, r3
 8001508:	f00d f866 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 800150c:	4a68      	ldr	r2, [pc, #416]	@ (80016b0 <menu+0x554>)
 800150e:	210e      	movs	r1, #14
 8001510:	2002      	movs	r0, #2
 8001512:	f008 fd0b 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001516:	4b62      	ldr	r3, [pc, #392]	@ (80016a0 <menu+0x544>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d115      	bne.n	800154a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800151e:	4a6e      	ldr	r2, [pc, #440]	@ (80016d8 <menu+0x57c>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f008 fd02 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 8001528:	4a63      	ldr	r2, [pc, #396]	@ (80016b8 <menu+0x55c>)
 800152a:	210f      	movs	r1, #15
 800152c:	2002      	movs	r0, #2
 800152e:	f008 fcfd 	bl	8009f2c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001532:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <menu+0x580>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	220a      	movs	r2, #10
 8001538:	495d      	ldr	r1, [pc, #372]	@ (80016b0 <menu+0x554>)
 800153a:	4618      	mov	r0, r3
 800153c:	f00d f84c 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 8001540:	4a5b      	ldr	r2, [pc, #364]	@ (80016b0 <menu+0x554>)
 8001542:	210e      	movs	r1, #14
 8001544:	2002      	movs	r0, #2
 8001546:	f008 fcf1 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800154a:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <menu+0x544>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b06      	cmp	r3, #6
 8001550:	d115      	bne.n	800157e <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001552:	4a63      	ldr	r2, [pc, #396]	@ (80016e0 <menu+0x584>)
 8001554:	2101      	movs	r1, #1
 8001556:	2002      	movs	r0, #2
 8001558:	f008 fce8 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 800155c:	4a56      	ldr	r2, [pc, #344]	@ (80016b8 <menu+0x55c>)
 800155e:	210f      	movs	r1, #15
 8001560:	2002      	movs	r0, #2
 8001562:	f008 fce3 	bl	8009f2c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001566:	4b5f      	ldr	r3, [pc, #380]	@ (80016e4 <menu+0x588>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	220a      	movs	r2, #10
 800156c:	4950      	ldr	r1, [pc, #320]	@ (80016b0 <menu+0x554>)
 800156e:	4618      	mov	r0, r3
 8001570:	f00d f832 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 8001574:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <menu+0x554>)
 8001576:	210e      	movs	r1, #14
 8001578:	2002      	movs	r0, #2
 800157a:	f008 fcd7 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <menu+0x544>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b07      	cmp	r3, #7
 8001584:	d115      	bne.n	80015b2 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001586:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <menu+0x58c>)
 8001588:	2101      	movs	r1, #1
 800158a:	2002      	movs	r0, #2
 800158c:	f008 fcce 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 8001590:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <menu+0x55c>)
 8001592:	210f      	movs	r1, #15
 8001594:	2002      	movs	r0, #2
 8001596:	f008 fcc9 	bl	8009f2c <lcd_print>
			itoa(hataKayit8, snum, 10);
 800159a:	4b54      	ldr	r3, [pc, #336]	@ (80016ec <menu+0x590>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	220a      	movs	r2, #10
 80015a0:	4943      	ldr	r1, [pc, #268]	@ (80016b0 <menu+0x554>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00d f818 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 80015a8:	4a41      	ldr	r2, [pc, #260]	@ (80016b0 <menu+0x554>)
 80015aa:	210e      	movs	r1, #14
 80015ac:	2002      	movs	r0, #2
 80015ae:	f008 fcbd 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <menu+0x544>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d115      	bne.n	80015e6 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80015ba:	4a4d      	ldr	r2, [pc, #308]	@ (80016f0 <menu+0x594>)
 80015bc:	2101      	movs	r1, #1
 80015be:	2002      	movs	r0, #2
 80015c0:	f008 fcb4 	bl	8009f2c <lcd_print>
			lcd_print(2, 15, "  ");
 80015c4:	4a3c      	ldr	r2, [pc, #240]	@ (80016b8 <menu+0x55c>)
 80015c6:	210f      	movs	r1, #15
 80015c8:	2002      	movs	r0, #2
 80015ca:	f008 fcaf 	bl	8009f2c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80015ce:	4b49      	ldr	r3, [pc, #292]	@ (80016f4 <menu+0x598>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	220a      	movs	r2, #10
 80015d4:	4936      	ldr	r1, [pc, #216]	@ (80016b0 <menu+0x554>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00c fffe 	bl	800e5d8 <itoa>
			lcd_print(2, 14, snum);
 80015dc:	4a34      	ldr	r2, [pc, #208]	@ (80016b0 <menu+0x554>)
 80015de:	210e      	movs	r1, #14
 80015e0:	2002      	movs	r0, #2
 80015e2:	f008 fca3 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <menu+0x544>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	d115      	bne.n	800161a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80015ee:	4a42      	ldr	r2, [pc, #264]	@ (80016f8 <menu+0x59c>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	2002      	movs	r0, #2
 80015f4:	f008 fc9a 	bl	8009f2c <lcd_print>
			lcd_print(2, 16, " ");
 80015f8:	4a40      	ldr	r2, [pc, #256]	@ (80016fc <menu+0x5a0>)
 80015fa:	2110      	movs	r1, #16
 80015fc:	2002      	movs	r0, #2
 80015fe:	f008 fc95 	bl	8009f2c <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001602:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <menu+0x5a4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	220a      	movs	r2, #10
 8001608:	4929      	ldr	r1, [pc, #164]	@ (80016b0 <menu+0x554>)
 800160a:	4618      	mov	r0, r3
 800160c:	f00c ffe4 	bl	800e5d8 <itoa>
			lcd_print(2, 15, snum);
 8001610:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <menu+0x554>)
 8001612:	210f      	movs	r1, #15
 8001614:	2002      	movs	r0, #2
 8001616:	f008 fc89 	bl	8009f2c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <menu+0x544>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0a      	cmp	r3, #10
 8001620:	d104      	bne.n	800162c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001622:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <menu+0x5a8>)
 8001624:	2101      	movs	r1, #1
 8001626:	2002      	movs	r0, #2
 8001628:	f008 fc80 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800162c:	2102      	movs	r1, #2
 800162e:	4836      	ldr	r0, [pc, #216]	@ (8001708 <menu+0x5ac>)
 8001630:	f009 ffa6 	bl	800b580 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d119      	bne.n	800166e <menu+0x512>
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <menu+0x5b0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f083 0301 	eor.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d012      	beq.n	800166e <menu+0x512>
 8001648:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <menu+0x5b4>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10e      	bne.n	800166e <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <menu+0x544>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <menu+0x544>)
 800165a:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <menu+0x544>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b0a      	cmp	r3, #10
 8001662:	d902      	bls.n	800166a <menu+0x50e>
				hataGostermeSirasi = 0;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <menu+0x544>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800166a:	f002 fa93 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800166e:	2104      	movs	r1, #4
 8001670:	4825      	ldr	r0, [pc, #148]	@ (8001708 <menu+0x5ac>)
 8001672:	f009 ff85 	bl	800b580 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d15e      	bne.n	800173a <menu+0x5de>
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <menu+0x5b0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d057      	beq.n	800173a <menu+0x5de>
 800168a:	e043      	b.n	8001714 <menu+0x5b8>
 800168c:	200010bc 	.word	0x200010bc
 8001690:	200010db 	.word	0x200010db
 8001694:	20001220 	.word	0x20001220
 8001698:	20001234 	.word	0x20001234
 800169c:	20001248 	.word	0x20001248
 80016a0:	200010be 	.word	0x200010be
 80016a4:	2000125c 	.word	0x2000125c
 80016a8:	0800f3d0 	.word	0x0800f3d0
 80016ac:	200010de 	.word	0x200010de
 80016b0:	2000105c 	.word	0x2000105c
 80016b4:	20001270 	.word	0x20001270
 80016b8:	0800f3d4 	.word	0x0800f3d4
 80016bc:	200010df 	.word	0x200010df
 80016c0:	20001284 	.word	0x20001284
 80016c4:	200010e0 	.word	0x200010e0
 80016c8:	20001298 	.word	0x20001298
 80016cc:	200010e1 	.word	0x200010e1
 80016d0:	200012ac 	.word	0x200012ac
 80016d4:	200010e2 	.word	0x200010e2
 80016d8:	200012c0 	.word	0x200012c0
 80016dc:	200010e3 	.word	0x200010e3
 80016e0:	200012d4 	.word	0x200012d4
 80016e4:	200010e4 	.word	0x200010e4
 80016e8:	200012e8 	.word	0x200012e8
 80016ec:	200010e5 	.word	0x200010e5
 80016f0:	200012fc 	.word	0x200012fc
 80016f4:	200010e6 	.word	0x200010e6
 80016f8:	20001310 	.word	0x20001310
 80016fc:	0800f3d8 	.word	0x0800f3d8
 8001700:	200010e7 	.word	0x200010e7
 8001704:	20001324 	.word	0x20001324
 8001708:	40010800 	.word	0x40010800
 800170c:	200010eb 	.word	0x200010eb
 8001710:	200010cb 	.word	0x200010cb
 8001714:	4b8a      	ldr	r3, [pc, #552]	@ (8001940 <menu+0x7e4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10e      	bne.n	800173a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800171c:	4b89      	ldr	r3, [pc, #548]	@ (8001944 <menu+0x7e8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b87      	ldr	r3, [pc, #540]	@ (8001944 <menu+0x7e8>)
 8001726:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001728:	4b86      	ldr	r3, [pc, #536]	@ (8001944 <menu+0x7e8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b0b      	cmp	r3, #11
 800172e:	d902      	bls.n	8001736 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001730:	4b84      	ldr	r3, [pc, #528]	@ (8001944 <menu+0x7e8>)
 8001732:	220a      	movs	r2, #10
 8001734:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001736:	f002 fa2d 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800173a:	2108      	movs	r1, #8
 800173c:	4882      	ldr	r0, [pc, #520]	@ (8001948 <menu+0x7ec>)
 800173e:	f009 ff1f 	bl	800b580 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d153      	bne.n	80017f0 <menu+0x694>
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <menu+0x7f0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04c      	beq.n	80017f0 <menu+0x694>
 8001756:	4b7b      	ldr	r3, [pc, #492]	@ (8001944 <menu+0x7e8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d148      	bne.n	80017f0 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 800175e:	4b7c      	ldr	r3, [pc, #496]	@ (8001950 <menu+0x7f4>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	4b7b      	ldr	r3, [pc, #492]	@ (8001954 <menu+0x7f8>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800176c:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <menu+0x7fc>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	4b78      	ldr	r3, [pc, #480]	@ (8001954 <menu+0x7f8>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800177a:	4b78      	ldr	r3, [pc, #480]	@ (800195c <menu+0x800>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	4b74      	ldr	r3, [pc, #464]	@ (8001954 <menu+0x7f8>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001788:	4b75      	ldr	r3, [pc, #468]	@ (8001960 <menu+0x804>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	4b71      	ldr	r3, [pc, #452]	@ (8001954 <menu+0x7f8>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001796:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <menu+0x808>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	4b6d      	ldr	r3, [pc, #436]	@ (8001954 <menu+0x7f8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80017a4:	4b70      	ldr	r3, [pc, #448]	@ (8001968 <menu+0x80c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <menu+0x7f8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80017b2:	4b6e      	ldr	r3, [pc, #440]	@ (800196c <menu+0x810>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <menu+0x7f8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80017c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001970 <menu+0x814>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <menu+0x7f8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80017ce:	4b69      	ldr	r3, [pc, #420]	@ (8001974 <menu+0x818>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001954 <menu+0x7f8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80017dc:	4b66      	ldr	r3, [pc, #408]	@ (8001978 <menu+0x81c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001954 <menu+0x7f8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80017ea:	4b64      	ldr	r3, [pc, #400]	@ (800197c <menu+0x820>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80017f0:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <menu+0x824>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	f040 808e 	bne.w	8001916 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80017fa:	4a62      	ldr	r2, [pc, #392]	@ (8001984 <menu+0x828>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	2001      	movs	r0, #1
 8001800:	f008 fb94 	bl	8009f2c <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001804:	4b4e      	ldr	r3, [pc, #312]	@ (8001940 <menu+0x7e4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d003      	beq.n	8001814 <menu+0x6b8>
 800180c:	4b4c      	ldr	r3, [pc, #304]	@ (8001940 <menu+0x7e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d104      	bne.n	800181e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001814:	4a5c      	ldr	r2, [pc, #368]	@ (8001988 <menu+0x82c>)
 8001816:	2101      	movs	r1, #1
 8001818:	2002      	movs	r0, #2
 800181a:	f008 fb87 	bl	8009f2c <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800181e:	4b5b      	ldr	r3, [pc, #364]	@ (800198c <menu+0x830>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <menu+0x6dc>
 8001826:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <menu+0x7e4>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 800182e:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <menu+0x834>)
 8001830:	2101      	movs	r1, #1
 8001832:	2002      	movs	r0, #2
 8001834:	f008 fb7a 	bl	8009f2c <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001838:	4b54      	ldr	r3, [pc, #336]	@ (800198c <menu+0x830>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <menu+0x6f6>
 8001840:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <menu+0x7e4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d104      	bne.n	8001852 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001848:	4a52      	ldr	r2, [pc, #328]	@ (8001994 <menu+0x838>)
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f008 fb6d 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001852:	2102      	movs	r1, #2
 8001854:	483c      	ldr	r0, [pc, #240]	@ (8001948 <menu+0x7ec>)
 8001856:	f009 fe93 	bl	800b580 <HAL_GPIO_ReadPin>
 800185a:	4603      	mov	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d119      	bne.n	8001894 <menu+0x738>
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <menu+0x7f0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	f083 0301 	eor.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d012      	beq.n	8001894 <menu+0x738>
 800186e:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <menu+0x7e4>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10e      	bne.n	8001894 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001876:	4b45      	ldr	r3, [pc, #276]	@ (800198c <menu+0x830>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b43      	ldr	r3, [pc, #268]	@ (800198c <menu+0x830>)
 8001880:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001882:	4b42      	ldr	r3, [pc, #264]	@ (800198c <menu+0x830>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d902      	bls.n	8001890 <menu+0x734>
				calismaSekli = 0;
 800188a:	4b40      	ldr	r3, [pc, #256]	@ (800198c <menu+0x830>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001890:	f002 f980 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001894:	2104      	movs	r1, #4
 8001896:	482c      	ldr	r0, [pc, #176]	@ (8001948 <menu+0x7ec>)
 8001898:	f009 fe72 	bl	800b580 <HAL_GPIO_ReadPin>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d119      	bne.n	80018d6 <menu+0x77a>
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <menu+0x7f0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	f083 0301 	eor.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d012      	beq.n	80018d6 <menu+0x77a>
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <menu+0x7e4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10e      	bne.n	80018d6 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 80018b8:	4b34      	ldr	r3, [pc, #208]	@ (800198c <menu+0x830>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b32      	ldr	r3, [pc, #200]	@ (800198c <menu+0x830>)
 80018c2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80018c4:	4b31      	ldr	r3, [pc, #196]	@ (800198c <menu+0x830>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <menu+0x776>
	    		calismaSekli = 1;
 80018cc:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <menu+0x830>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018d2:	f002 f95f 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018d6:	2108      	movs	r1, #8
 80018d8:	481b      	ldr	r0, [pc, #108]	@ (8001948 <menu+0x7ec>)
 80018da:	f009 fe51 	bl	800b580 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d118      	bne.n	8001916 <menu+0x7ba>
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <menu+0x7f0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d011      	beq.n	8001916 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <menu+0x830>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <menu+0x7f8>)
 80018f8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <menu+0x830>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d106      	bne.n	8001910 <menu+0x7b4>
				altLimit = 1;
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <menu+0x83c>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <menu+0x83c>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <menu+0x7f8>)
 800190e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001910:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <menu+0x820>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <menu+0x824>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b03      	cmp	r3, #3
 800191c:	f040 809c 	bne.w	8001a58 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001920:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <menu+0x840>)
 8001922:	2101      	movs	r1, #1
 8001924:	2001      	movs	r0, #1
 8001926:	f008 fb01 	bl	8009f2c <lcd_print>

		if(emniyetCercevesi == 0) {
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <menu+0x844>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13a      	bne.n	80019a8 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <menu+0x848>)
 8001934:	2101      	movs	r1, #1
 8001936:	2002      	movs	r0, #2
 8001938:	f008 faf8 	bl	8009f2c <lcd_print>
 800193c:	e03d      	b.n	80019ba <menu+0x85e>
 800193e:	bf00      	nop
 8001940:	200010cb 	.word	0x200010cb
 8001944:	200010be 	.word	0x200010be
 8001948:	40010800 	.word	0x40010800
 800194c:	200010eb 	.word	0x200010eb
 8001950:	200010de 	.word	0x200010de
 8001954:	20000fec 	.word	0x20000fec
 8001958:	200010df 	.word	0x200010df
 800195c:	200010e0 	.word	0x200010e0
 8001960:	200010e1 	.word	0x200010e1
 8001964:	200010e2 	.word	0x200010e2
 8001968:	200010e3 	.word	0x200010e3
 800196c:	200010e4 	.word	0x200010e4
 8001970:	200010e5 	.word	0x200010e5
 8001974:	200010e6 	.word	0x200010e6
 8001978:	200010e7 	.word	0x200010e7
 800197c:	200010e8 	.word	0x200010e8
 8001980:	200010bc 	.word	0x200010bc
 8001984:	20001338 	.word	0x20001338
 8001988:	2000134c 	.word	0x2000134c
 800198c:	200010bd 	.word	0x200010bd
 8001990:	20001360 	.word	0x20001360
 8001994:	20001374 	.word	0x20001374
 8001998:	200010c2 	.word	0x200010c2
 800199c:	20001388 	.word	0x20001388
 80019a0:	200010c0 	.word	0x200010c0
 80019a4:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 80019a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b58 <menu+0x9fc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d104      	bne.n	80019ba <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 80019b0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b5c <menu+0xa00>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	2002      	movs	r0, #2
 80019b6:	f008 fab9 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019ba:	2102      	movs	r1, #2
 80019bc:	4868      	ldr	r0, [pc, #416]	@ (8001b60 <menu+0xa04>)
 80019be:	f009 fddf 	bl	800b580 <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d115      	bne.n	80019f4 <menu+0x898>
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <menu+0xa08>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 80019d6:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <menu+0x9fc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <menu+0x9fc>)
 80019e0:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <menu+0x9fc>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d902      	bls.n	80019f0 <menu+0x894>
				emniyetCercevesi = 0;
 80019ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <menu+0x9fc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019f0:	f002 f8d0 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019f4:	2104      	movs	r1, #4
 80019f6:	485a      	ldr	r0, [pc, #360]	@ (8001b60 <menu+0xa04>)
 80019f8:	f009 fdc2 	bl	800b580 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d115      	bne.n	8001a2e <menu+0x8d2>
 8001a02:	4b58      	ldr	r3, [pc, #352]	@ (8001b64 <menu+0xa08>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001a10:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <menu+0x9fc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <menu+0x9fc>)
 8001a1a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <menu+0x9fc>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001a24:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <menu+0x9fc>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a2a:	f002 f8b3 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001a2e:	2108      	movs	r1, #8
 8001a30:	484b      	ldr	r0, [pc, #300]	@ (8001b60 <menu+0xa04>)
 8001a32:	f009 fda5 	bl	800b580 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10d      	bne.n	8001a58 <menu+0x8fc>
 8001a3c:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <menu+0xa08>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001a4a:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <menu+0x9fc>)
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b46      	ldr	r3, [pc, #280]	@ (8001b68 <menu+0xa0c>)
 8001a50:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001a52:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <menu+0xa10>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001a58:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <menu+0xa14>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d166      	bne.n	8001b2e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001a60:	4a44      	ldr	r2, [pc, #272]	@ (8001b74 <menu+0xa18>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	2001      	movs	r0, #1
 8001a66:	f008 fa61 	bl	8009f2c <lcd_print>

		if(yavaslamaLimit == 0) {
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <menu+0xa1c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001a72:	4a42      	ldr	r2, [pc, #264]	@ (8001b7c <menu+0xa20>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	2002      	movs	r0, #2
 8001a78:	f008 fa58 	bl	8009f2c <lcd_print>
 8001a7c:	e008      	b.n	8001a90 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <menu+0xa1c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d104      	bne.n	8001a90 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001a86:	4a3e      	ldr	r2, [pc, #248]	@ (8001b80 <menu+0xa24>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f008 fa4e 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a90:	2102      	movs	r1, #2
 8001a92:	4833      	ldr	r0, [pc, #204]	@ (8001b60 <menu+0xa04>)
 8001a94:	f009 fd74 	bl	800b580 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d115      	bne.n	8001aca <menu+0x96e>
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <menu+0xa08>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00e      	beq.n	8001aca <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <menu+0xa1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <menu+0xa1c>)
 8001ab6:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <menu+0xa1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d902      	bls.n	8001ac6 <menu+0x96a>
				yavaslamaLimit = 0;
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <menu+0xa1c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac6:	f002 f865 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001aca:	2104      	movs	r1, #4
 8001acc:	4824      	ldr	r0, [pc, #144]	@ (8001b60 <menu+0xa04>)
 8001ace:	f009 fd57 	bl	800b580 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d115      	bne.n	8001b04 <menu+0x9a8>
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <menu+0xa08>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f083 0301 	eor.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <menu+0xa1c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <menu+0xa1c>)
 8001af0:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <menu+0xa1c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <menu+0xa1c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b00:	f002 f848 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b04:	2108      	movs	r1, #8
 8001b06:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <menu+0xa04>)
 8001b08:	f009 fd3a 	bl	800b580 <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <menu+0x9d2>
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <menu+0xa08>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f083 0301 	eor.w	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <menu+0xa1c>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <menu+0xa0c>)
 8001b26:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <menu+0xa10>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <menu+0xa14>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	f040 80aa 	bne.w	8001c8c <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001b38:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <menu+0xa28>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f008 f9f5 	bl	8009f2c <lcd_print>

		if(altLimit == 0) {
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <menu+0xa2c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d120      	bne.n	8001b8c <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b7c <menu+0xa20>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f008 f9ec 	bl	8009f2c <lcd_print>
 8001b54:	e023      	b.n	8001b9e <menu+0xa42>
 8001b56:	bf00      	nop
 8001b58:	200010c0 	.word	0x200010c0
 8001b5c:	200000ec 	.word	0x200000ec
 8001b60:	40010800 	.word	0x40010800
 8001b64:	200010eb 	.word	0x200010eb
 8001b68:	20000fec 	.word	0x20000fec
 8001b6c:	200010e8 	.word	0x200010e8
 8001b70:	200010bc 	.word	0x200010bc
 8001b74:	200013c4 	.word	0x200013c4
 8001b78:	200010c1 	.word	0x200010c1
 8001b7c:	2000139c 	.word	0x2000139c
 8001b80:	200013b0 	.word	0x200013b0
 8001b84:	200013d8 	.word	0x200013d8
 8001b88:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 8001b8c:	4b89      	ldr	r3, [pc, #548]	@ (8001db4 <menu+0xc58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d104      	bne.n	8001b9e <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001b94:	4a88      	ldr	r2, [pc, #544]	@ (8001db8 <menu+0xc5c>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f008 f9c7 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4886      	ldr	r0, [pc, #536]	@ (8001dbc <menu+0xc60>)
 8001ba2:	f009 fced 	bl	800b580 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d119      	bne.n	8001be0 <menu+0xa84>
 8001bac:	4b84      	ldr	r3, [pc, #528]	@ (8001dc0 <menu+0xc64>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f083 0301 	eor.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <menu+0xa84>
 8001bba:	4b82      	ldr	r3, [pc, #520]	@ (8001dc4 <menu+0xc68>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10e      	bne.n	8001be0 <menu+0xa84>
			altLimit = altLimit + 1;
 8001bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <menu+0xc58>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b7a      	ldr	r3, [pc, #488]	@ (8001db4 <menu+0xc58>)
 8001bcc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001bce:	4b79      	ldr	r3, [pc, #484]	@ (8001db4 <menu+0xc58>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d902      	bls.n	8001bdc <menu+0xa80>
				altLimit = 0;
 8001bd6:	4b77      	ldr	r3, [pc, #476]	@ (8001db4 <menu+0xc58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bdc:	f001 ffda 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001be0:	2104      	movs	r1, #4
 8001be2:	4876      	ldr	r0, [pc, #472]	@ (8001dbc <menu+0xc60>)
 8001be4:	f009 fccc 	bl	800b580 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d119      	bne.n	8001c22 <menu+0xac6>
 8001bee:	4b74      	ldr	r3, [pc, #464]	@ (8001dc0 <menu+0xc64>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <menu+0xac6>
 8001bfc:	4b71      	ldr	r3, [pc, #452]	@ (8001dc4 <menu+0xc68>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10e      	bne.n	8001c22 <menu+0xac6>
			altLimit = altLimit - 1;
 8001c04:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <menu+0xc58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b69      	ldr	r3, [pc, #420]	@ (8001db4 <menu+0xc58>)
 8001c0e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <menu+0xc58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <menu+0xac2>
		   		altLimit = 1;
 8001c18:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <menu+0xc58>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c1e:	f001 ffb9 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c22:	2108      	movs	r1, #8
 8001c24:	4865      	ldr	r0, [pc, #404]	@ (8001dbc <menu+0xc60>)
 8001c26:	f009 fcab 	bl	800b580 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d12d      	bne.n	8001c8c <menu+0xb30>
 8001c30:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <menu+0xc64>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f083 0301 	eor.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d026      	beq.n	8001c8c <menu+0xb30>
			eepromData[5] = altLimit;
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <menu+0xc58>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b61      	ldr	r3, [pc, #388]	@ (8001dc8 <menu+0xc6c>)
 8001c44:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001c46:	4b5b      	ldr	r3, [pc, #364]	@ (8001db4 <menu+0xc58>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d110      	bne.n	8001c70 <menu+0xb14>
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dcc <menu+0xc70>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <menu+0xb02>
 8001c56:	4b5d      	ldr	r3, [pc, #372]	@ (8001dcc <menu+0xc70>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d108      	bne.n	8001c70 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <menu+0xc70>)
 8001c60:	2203      	movs	r2, #3
 8001c62:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001c64:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <menu+0xc70>)
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <menu+0xc6c>)
 8001c6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001c6e:	e00a      	b.n	8001c86 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <menu+0xc58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d106      	bne.n	8001c86 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001c78:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <menu+0xc74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001c7e:	4b54      	ldr	r3, [pc, #336]	@ (8001dd0 <menu+0xc74>)
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	4b51      	ldr	r3, [pc, #324]	@ (8001dc8 <menu+0xc6c>)
 8001c84:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001c86:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <menu+0xc78>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001c8c:	4b52      	ldr	r3, [pc, #328]	@ (8001dd8 <menu+0xc7c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d166      	bne.n	8001d62 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001c94:	4a51      	ldr	r2, [pc, #324]	@ (8001ddc <menu+0xc80>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f008 f947 	bl	8009f2c <lcd_print>

		if(basincSalteri == 0) {
 8001c9e:	4b50      	ldr	r3, [pc, #320]	@ (8001de0 <menu+0xc84>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001ca6:	4a4f      	ldr	r2, [pc, #316]	@ (8001de4 <menu+0xc88>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2002      	movs	r0, #2
 8001cac:	f008 f93e 	bl	8009f2c <lcd_print>
 8001cb0:	e008      	b.n	8001cc4 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001de0 <menu+0xc84>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001cba:	4a3f      	ldr	r2, [pc, #252]	@ (8001db8 <menu+0xc5c>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f008 f934 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	483d      	ldr	r0, [pc, #244]	@ (8001dbc <menu+0xc60>)
 8001cc8:	f009 fc5a 	bl	800b580 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d115      	bne.n	8001cfe <menu+0xba2>
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <menu+0xc64>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8001de0 <menu+0xc84>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <menu+0xc84>)
 8001cea:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001cec:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <menu+0xc84>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d902      	bls.n	8001cfa <menu+0xb9e>
				basincSalteri = 0;
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <menu+0xc84>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cfa:	f001 ff4b 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cfe:	2104      	movs	r1, #4
 8001d00:	482e      	ldr	r0, [pc, #184]	@ (8001dbc <menu+0xc60>)
 8001d02:	f009 fc3d 	bl	800b580 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d115      	bne.n	8001d38 <menu+0xbdc>
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <menu+0xc64>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00e      	beq.n	8001d38 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <menu+0xc84>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <menu+0xc84>)
 8001d24:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <menu+0xc84>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <menu+0xbd8>
		   		basincSalteri = 1;
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <menu+0xc84>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d34:	f001 ff2e 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d38:	2108      	movs	r1, #8
 8001d3a:	4820      	ldr	r0, [pc, #128]	@ (8001dbc <menu+0xc60>)
 8001d3c:	f009 fc20 	bl	800b580 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <menu+0xc06>
 8001d46:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <menu+0xc64>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <menu+0xc84>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <menu+0xc6c>)
 8001d5a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <menu+0xc78>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <menu+0xc7c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	f040 80a9 	bne.w	8001ebe <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <menu+0xc8c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2001      	movs	r0, #1
 8001d72:	f008 f8db 	bl	8009f2c <lcd_print>

		if(kapiSecimleri == 0) {
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <menu+0xc90>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001d7e:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <menu+0xc88>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f008 f8d2 	bl	8009f2c <lcd_print>
 8001d88:	e03f      	b.n	8001e0a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <menu+0xc90>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001d92:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <menu+0xc94>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2002      	movs	r0, #2
 8001d98:	f008 f8c8 	bl	8009f2c <lcd_print>
 8001d9c:	e035      	b.n	8001e0a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001d9e:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <menu+0xc90>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d128      	bne.n	8001df8 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001da6:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <menu+0xc98>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	2002      	movs	r0, #2
 8001dac:	f008 f8be 	bl	8009f2c <lcd_print>
 8001db0:	e02b      	b.n	8001e0a <menu+0xcae>
 8001db2:	bf00      	nop
 8001db4:	200010c2 	.word	0x200010c2
 8001db8:	200013b0 	.word	0x200013b0
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	200010eb 	.word	0x200010eb
 8001dc4:	200010bd 	.word	0x200010bd
 8001dc8:	20000fec 	.word	0x20000fec
 8001dcc:	200010c9 	.word	0x200010c9
 8001dd0:	200010cf 	.word	0x200010cf
 8001dd4:	200010e8 	.word	0x200010e8
 8001dd8:	200010bc 	.word	0x200010bc
 8001ddc:	200013ec 	.word	0x200013ec
 8001de0:	200010c3 	.word	0x200010c3
 8001de4:	2000139c 	.word	0x2000139c
 8001de8:	20001400 	.word	0x20001400
 8001dec:	200010c4 	.word	0x200010c4
 8001df0:	20001414 	.word	0x20001414
 8001df4:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8001df8:	4b76      	ldr	r3, [pc, #472]	@ (8001fd4 <menu+0xe78>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d104      	bne.n	8001e0a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001e00:	4a75      	ldr	r2, [pc, #468]	@ (8001fd8 <menu+0xe7c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f008 f891 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4873      	ldr	r0, [pc, #460]	@ (8001fdc <menu+0xe80>)
 8001e0e:	f009 fbb7 	bl	800b580 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d115      	bne.n	8001e44 <menu+0xce8>
 8001e18:	4b71      	ldr	r3, [pc, #452]	@ (8001fe0 <menu+0xe84>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001e26:	4b6b      	ldr	r3, [pc, #428]	@ (8001fd4 <menu+0xe78>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b69      	ldr	r3, [pc, #420]	@ (8001fd4 <menu+0xe78>)
 8001e30:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001e32:	4b68      	ldr	r3, [pc, #416]	@ (8001fd4 <menu+0xe78>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d902      	bls.n	8001e40 <menu+0xce4>
				kapiSecimleri = 0;
 8001e3a:	4b66      	ldr	r3, [pc, #408]	@ (8001fd4 <menu+0xe78>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e40:	f001 fea8 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e44:	2104      	movs	r1, #4
 8001e46:	4865      	ldr	r0, [pc, #404]	@ (8001fdc <menu+0xe80>)
 8001e48:	f009 fb9a 	bl	800b580 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d115      	bne.n	8001e7e <menu+0xd22>
 8001e52:	4b63      	ldr	r3, [pc, #396]	@ (8001fe0 <menu+0xe84>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001e60:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <menu+0xe78>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd4 <menu+0xe78>)
 8001e6a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001e6c:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <menu+0xe78>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d902      	bls.n	8001e7a <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001e74:	4b57      	ldr	r3, [pc, #348]	@ (8001fd4 <menu+0xe78>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e7a:	f001 fe8b 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4856      	ldr	r0, [pc, #344]	@ (8001fdc <menu+0xe80>)
 8001e82:	f009 fb7d 	bl	800b580 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d118      	bne.n	8001ebe <menu+0xd62>
 8001e8c:	4b54      	ldr	r3, [pc, #336]	@ (8001fe0 <menu+0xe84>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd4 <menu+0xe78>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <menu+0xe88>)
 8001ea0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <menu+0xe78>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <menu+0xd5c>
				altLimit = 1;
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <menu+0xe8c>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe8 <menu+0xe8c>)
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe4 <menu+0xe88>)
 8001eb6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <menu+0xe90>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff0 <menu+0xe94>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d167      	bne.n	8001f96 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <menu+0xe98>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f008 f82e 	bl	8009f2c <lcd_print>

		if(kapiAcTipi == 0) {
 8001ed0:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <menu+0xe9c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8001ed8:	4a48      	ldr	r2, [pc, #288]	@ (8001ffc <menu+0xea0>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2002      	movs	r0, #2
 8001ede:	f008 f825 	bl	8009f2c <lcd_print>
 8001ee2:	e008      	b.n	8001ef6 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8001ee4:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <menu+0xe9c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d104      	bne.n	8001ef6 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8001eec:	4a44      	ldr	r2, [pc, #272]	@ (8002000 <menu+0xea4>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f008 f81b 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4838      	ldr	r0, [pc, #224]	@ (8001fdc <menu+0xe80>)
 8001efa:	f009 fb41 	bl	800b580 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d115      	bne.n	8001f30 <menu+0xdd4>
 8001f04:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <menu+0xe84>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8001f12:	4b39      	ldr	r3, [pc, #228]	@ (8001ff8 <menu+0xe9c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <menu+0xe9c>)
 8001f1c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001f1e:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <menu+0xe9c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d902      	bls.n	8001f2c <menu+0xdd0>
				kapiAcTipi = 0;
 8001f26:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <menu+0xe9c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f2c:	f001 fe32 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f30:	2104      	movs	r1, #4
 8001f32:	482a      	ldr	r0, [pc, #168]	@ (8001fdc <menu+0xe80>)
 8001f34:	f009 fb24 	bl	800b580 <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d115      	bne.n	8001f6a <menu+0xe0e>
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <menu+0xe84>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <menu+0xe9c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <menu+0xe9c>)
 8001f56:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <menu+0xe9c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <menu+0xe9c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f66:	f001 fe15 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f6a:	2108      	movs	r1, #8
 8001f6c:	481b      	ldr	r0, [pc, #108]	@ (8001fdc <menu+0xe80>)
 8001f6e:	f009 fb07 	bl	800b580 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d10e      	bne.n	8001f96 <menu+0xe3a>
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <menu+0xe84>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <menu+0xe9c>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <menu+0xe88>)
 8001f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <menu+0xe90>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <menu+0xe94>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	f040 8092 	bne.w	80020c4 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8001fa0:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <menu+0xea8>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f007 ffc1 	bl	8009f2c <lcd_print>

		if(kapi1Tip == 0) {
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <menu+0xeac>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8001fb2:	4a16      	ldr	r2, [pc, #88]	@ (800200c <menu+0xeb0>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f007 ffb8 	bl	8009f2c <lcd_print>
 8001fbc:	e033      	b.n	8002026 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <menu+0xeac>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d126      	bne.n	8002014 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <menu+0xeb4>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f007 ffae 	bl	8009f2c <lcd_print>
 8001fd0:	e029      	b.n	8002026 <menu+0xeca>
 8001fd2:	bf00      	nop
 8001fd4:	200010c4 	.word	0x200010c4
 8001fd8:	2000143c 	.word	0x2000143c
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	200010eb 	.word	0x200010eb
 8001fe4:	20000fec 	.word	0x20000fec
 8001fe8:	200010c2 	.word	0x200010c2
 8001fec:	200010e8 	.word	0x200010e8
 8001ff0:	200010bc 	.word	0x200010bc
 8001ff4:	20001450 	.word	0x20001450
 8001ff8:	200010c8 	.word	0x200010c8
 8001ffc:	20001464 	.word	0x20001464
 8002000:	20001478 	.word	0x20001478
 8002004:	2000148c 	.word	0x2000148c
 8002008:	200010c5 	.word	0x200010c5
 800200c:	20000100 	.word	0x20000100
 8002010:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 8002014:	4b73      	ldr	r3, [pc, #460]	@ (80021e4 <menu+0x1088>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d104      	bne.n	8002026 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800201c:	4a72      	ldr	r2, [pc, #456]	@ (80021e8 <menu+0x108c>)
 800201e:	2101      	movs	r1, #1
 8002020:	2002      	movs	r0, #2
 8002022:	f007 ff83 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2102      	movs	r1, #2
 8002028:	4870      	ldr	r0, [pc, #448]	@ (80021ec <menu+0x1090>)
 800202a:	f009 faa9 	bl	800b580 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d115      	bne.n	8002060 <menu+0xf04>
 8002034:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <menu+0x1094>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002042:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <menu+0x1088>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <menu+0x1088>)
 800204c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <menu+0x1088>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <menu+0xf00>
				kapi1Tip = 0;
 8002056:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <menu+0x1088>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800205c:	f001 fd9a 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002060:	2104      	movs	r1, #4
 8002062:	4862      	ldr	r0, [pc, #392]	@ (80021ec <menu+0x1090>)
 8002064:	f009 fa8c 	bl	800b580 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d115      	bne.n	800209a <menu+0xf3e>
 800206e:	4b60      	ldr	r3, [pc, #384]	@ (80021f0 <menu+0x1094>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f083 0301 	eor.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00e      	beq.n	800209a <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 800207c:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <menu+0x1088>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b57      	ldr	r3, [pc, #348]	@ (80021e4 <menu+0x1088>)
 8002086:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002088:	4b56      	ldr	r3, [pc, #344]	@ (80021e4 <menu+0x1088>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d902      	bls.n	8002096 <menu+0xf3a>
		   		kapi1Tip = 2;
 8002090:	4b54      	ldr	r3, [pc, #336]	@ (80021e4 <menu+0x1088>)
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002096:	f001 fd7d 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800209a:	2108      	movs	r1, #8
 800209c:	4853      	ldr	r0, [pc, #332]	@ (80021ec <menu+0x1090>)
 800209e:	f009 fa6f 	bl	800b580 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <menu+0xf68>
 80020a8:	4b51      	ldr	r3, [pc, #324]	@ (80021f0 <menu+0x1094>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80020b6:	4b4b      	ldr	r3, [pc, #300]	@ (80021e4 <menu+0x1088>)
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <menu+0x1098>)
 80020bc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80020be:	4b4e      	ldr	r3, [pc, #312]	@ (80021f8 <menu+0x109c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80020c4:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <menu+0x10a0>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0a      	cmp	r3, #10
 80020ca:	d16c      	bne.n	80021a6 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80020cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <menu+0x10a4>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f007 ff2b 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80020d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002204 <menu+0x10a8>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f007 ff26 	bl	8009f2c <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80020e0:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <menu+0x10ac>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	220a      	movs	r2, #10
 80020e6:	4949      	ldr	r1, [pc, #292]	@ (800220c <menu+0x10b0>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00c fa75 	bl	800e5d8 <itoa>
		lcd_print(2,16,snum);
 80020ee:	4a47      	ldr	r2, [pc, #284]	@ (800220c <menu+0x10b0>)
 80020f0:	2110      	movs	r1, #16
 80020f2:	2002      	movs	r0, #2
 80020f4:	f007 ff1a 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80020f8:	2102      	movs	r1, #2
 80020fa:	483c      	ldr	r0, [pc, #240]	@ (80021ec <menu+0x1090>)
 80020fc:	f009 fa40 	bl	800b580 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d119      	bne.n	800213a <menu+0xfde>
 8002106:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <menu+0x1094>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <menu+0xfde>
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <menu+0x1088>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10e      	bne.n	800213a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800211c:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <menu+0x10ac>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <menu+0x10ac>)
 8002126:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002128:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <menu+0x10ac>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d902      	bls.n	8002136 <menu+0xfda>
				kapi1AcSure = 0;
 8002130:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <menu+0x10ac>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002136:	f001 fd2d 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800213a:	2104      	movs	r1, #4
 800213c:	482b      	ldr	r0, [pc, #172]	@ (80021ec <menu+0x1090>)
 800213e:	f009 fa1f 	bl	800b580 <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <menu+0x1020>
 8002148:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <menu+0x1094>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <menu+0x1020>
 8002156:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <menu+0x1088>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800215e:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <menu+0x10ac>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <menu+0x10ac>)
 8002168:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <menu+0x10ac>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <menu+0x101c>
		   		kapi1AcSure = 5;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <menu+0x10ac>)
 8002174:	2205      	movs	r2, #5
 8002176:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002178:	f001 fd0c 	bl	8003b94 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800217c:	2108      	movs	r1, #8
 800217e:	481b      	ldr	r0, [pc, #108]	@ (80021ec <menu+0x1090>)
 8002180:	f009 f9fe 	bl	800b580 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10d      	bne.n	80021a6 <menu+0x104a>
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <menu+0x1094>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <menu+0x10ac>)
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <menu+0x1098>)
 800219e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <menu+0x109c>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <menu+0x10a0>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b0b      	cmp	r3, #11
 80021ac:	f040 8090 	bne.w	80022d0 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80021b0:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <menu+0x10b4>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2001      	movs	r0, #1
 80021b6:	f007 feb9 	bl	8009f2c <lcd_print>

		if(kapi2Tip == 0) {
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <menu+0x10b8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80021c2:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <menu+0x10bc>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f007 feb0 	bl	8009f2c <lcd_print>
 80021cc:	e031      	b.n	8002232 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <menu+0x10b8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d124      	bne.n	8002220 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80021d6:	4a11      	ldr	r2, [pc, #68]	@ (800221c <menu+0x10c0>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f007 fea6 	bl	8009f2c <lcd_print>
 80021e0:	e027      	b.n	8002232 <menu+0x10d6>
 80021e2:	bf00      	nop
 80021e4:	200010c5 	.word	0x200010c5
 80021e8:	20000114 	.word	0x20000114
 80021ec:	40010800 	.word	0x40010800
 80021f0:	200010eb 	.word	0x200010eb
 80021f4:	20000fec 	.word	0x20000fec
 80021f8:	200010e8 	.word	0x200010e8
 80021fc:	200010bc 	.word	0x200010bc
 8002200:	200014b4 	.word	0x200014b4
 8002204:	200014c8 	.word	0x200014c8
 8002208:	200010d5 	.word	0x200010d5
 800220c:	2000105c 	.word	0x2000105c
 8002210:	200014dc 	.word	0x200014dc
 8002214:	200010c6 	.word	0x200010c6
 8002218:	20000100 	.word	0x20000100
 800221c:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 8002220:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <menu+0x1294>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d104      	bne.n	8002232 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002228:	4a72      	ldr	r2, [pc, #456]	@ (80023f4 <menu+0x1298>)
 800222a:	2101      	movs	r1, #1
 800222c:	2002      	movs	r0, #2
 800222e:	f007 fe7d 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002232:	2102      	movs	r1, #2
 8002234:	4870      	ldr	r0, [pc, #448]	@ (80023f8 <menu+0x129c>)
 8002236:	f009 f9a3 	bl	800b580 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d115      	bne.n	800226c <menu+0x1110>
 8002240:	4b6e      	ldr	r3, [pc, #440]	@ (80023fc <menu+0x12a0>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00e      	beq.n	800226c <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800224e:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <menu+0x1294>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <menu+0x1294>)
 8002258:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800225a:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <menu+0x1294>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d902      	bls.n	8002268 <menu+0x110c>
				kapi2Tip = 0;
 8002262:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <menu+0x1294>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002268:	f001 fc94 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800226c:	2104      	movs	r1, #4
 800226e:	4862      	ldr	r0, [pc, #392]	@ (80023f8 <menu+0x129c>)
 8002270:	f009 f986 	bl	800b580 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <menu+0x114a>
 800227a:	4b60      	ldr	r3, [pc, #384]	@ (80023fc <menu+0x12a0>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <menu+0x1294>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <menu+0x1294>)
 8002292:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002294:	4b56      	ldr	r3, [pc, #344]	@ (80023f0 <menu+0x1294>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d902      	bls.n	80022a2 <menu+0x1146>
		   		kapi2Tip = 2;
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <menu+0x1294>)
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022a2:	f001 fc77 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a6:	2108      	movs	r1, #8
 80022a8:	4853      	ldr	r0, [pc, #332]	@ (80023f8 <menu+0x129c>)
 80022aa:	f009 f969 	bl	800b580 <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10d      	bne.n	80022d0 <menu+0x1174>
 80022b4:	4b51      	ldr	r3, [pc, #324]	@ (80023fc <menu+0x12a0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80022c2:	4b4b      	ldr	r3, [pc, #300]	@ (80023f0 <menu+0x1294>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002400 <menu+0x12a4>)
 80022c8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80022ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <menu+0x12a8>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80022d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002408 <menu+0x12ac>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d16c      	bne.n	80023b2 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80022d8:	4a4c      	ldr	r2, [pc, #304]	@ (800240c <menu+0x12b0>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2001      	movs	r0, #1
 80022de:	f007 fe25 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80022e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002410 <menu+0x12b4>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f007 fe20 	bl	8009f2c <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80022ec:	4b49      	ldr	r3, [pc, #292]	@ (8002414 <menu+0x12b8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	220a      	movs	r2, #10
 80022f2:	4949      	ldr	r1, [pc, #292]	@ (8002418 <menu+0x12bc>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00c f96f 	bl	800e5d8 <itoa>
		lcd_print(2,16,snum);
 80022fa:	4a47      	ldr	r2, [pc, #284]	@ (8002418 <menu+0x12bc>)
 80022fc:	2110      	movs	r1, #16
 80022fe:	2002      	movs	r0, #2
 8002300:	f007 fe14 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002304:	2102      	movs	r1, #2
 8002306:	483c      	ldr	r0, [pc, #240]	@ (80023f8 <menu+0x129c>)
 8002308:	f009 f93a 	bl	800b580 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d119      	bne.n	8002346 <menu+0x11ea>
 8002312:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <menu+0x12a0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d012      	beq.n	8002346 <menu+0x11ea>
 8002320:	4b33      	ldr	r3, [pc, #204]	@ (80023f0 <menu+0x1294>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002328:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <menu+0x12b8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <menu+0x12b8>)
 8002332:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002334:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <menu+0x12b8>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d902      	bls.n	8002342 <menu+0x11e6>
				kapi2AcSure = 0;
 800233c:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <menu+0x12b8>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002342:	f001 fc27 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002346:	2104      	movs	r1, #4
 8002348:	482b      	ldr	r0, [pc, #172]	@ (80023f8 <menu+0x129c>)
 800234a:	f009 f919 	bl	800b580 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d119      	bne.n	8002388 <menu+0x122c>
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <menu+0x12a0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <menu+0x122c>
 8002362:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <menu+0x1294>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10e      	bne.n	8002388 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <menu+0x12b8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <menu+0x12b8>)
 8002374:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002376:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <menu+0x12b8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <menu+0x1228>
		   		kapi2AcSure = 5;
 800237e:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <menu+0x12b8>)
 8002380:	2205      	movs	r2, #5
 8002382:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002384:	f001 fc06 	bl	8003b94 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002388:	2108      	movs	r1, #8
 800238a:	481b      	ldr	r0, [pc, #108]	@ (80023f8 <menu+0x129c>)
 800238c:	f009 f8f8 	bl	800b580 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d10d      	bne.n	80023b2 <menu+0x1256>
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <menu+0x12a0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <menu+0x12b8>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <menu+0x12a4>)
 80023aa:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <menu+0x12a8>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <menu+0x12ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b0d      	cmp	r3, #13
 80023b8:	f040 8090 	bne.w	80024dc <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <menu+0x12c0>)
 80023be:	2101      	movs	r1, #1
 80023c0:	2001      	movs	r0, #1
 80023c2:	f007 fdb3 	bl	8009f2c <lcd_print>

		if(kapitablaTip == 0) {
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <menu+0x12c4>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80023ce:	4a15      	ldr	r2, [pc, #84]	@ (8002424 <menu+0x12c8>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f007 fdaa 	bl	8009f2c <lcd_print>
 80023d8:	e031      	b.n	800243e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <menu+0x12c4>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d124      	bne.n	800242c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80023e2:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <menu+0x12cc>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f007 fda0 	bl	8009f2c <lcd_print>
 80023ec:	e027      	b.n	800243e <menu+0x12e2>
 80023ee:	bf00      	nop
 80023f0:	200010c6 	.word	0x200010c6
 80023f4:	20000114 	.word	0x20000114
 80023f8:	40010800 	.word	0x40010800
 80023fc:	200010eb 	.word	0x200010eb
 8002400:	20000fec 	.word	0x20000fec
 8002404:	200010e8 	.word	0x200010e8
 8002408:	200010bc 	.word	0x200010bc
 800240c:	200014f0 	.word	0x200014f0
 8002410:	200014c8 	.word	0x200014c8
 8002414:	200010d6 	.word	0x200010d6
 8002418:	2000105c 	.word	0x2000105c
 800241c:	20001504 	.word	0x20001504
 8002420:	200010c7 	.word	0x200010c7
 8002424:	20000100 	.word	0x20000100
 8002428:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 800242c:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <menu+0x13d0>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d104      	bne.n	800243e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002434:	4a3e      	ldr	r2, [pc, #248]	@ (8002530 <menu+0x13d4>)
 8002436:	2101      	movs	r1, #1
 8002438:	2002      	movs	r0, #2
 800243a:	f007 fd77 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800243e:	2102      	movs	r1, #2
 8002440:	483c      	ldr	r0, [pc, #240]	@ (8002534 <menu+0x13d8>)
 8002442:	f009 f89d 	bl	800b580 <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d115      	bne.n	8002478 <menu+0x131c>
 800244c:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <menu+0x13dc>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00e      	beq.n	8002478 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 800245a:	4b34      	ldr	r3, [pc, #208]	@ (800252c <menu+0x13d0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b32      	ldr	r3, [pc, #200]	@ (800252c <menu+0x13d0>)
 8002464:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002466:	4b31      	ldr	r3, [pc, #196]	@ (800252c <menu+0x13d0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d902      	bls.n	8002474 <menu+0x1318>
				kapitablaTip = 0;
 800246e:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <menu+0x13d0>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002474:	f001 fb8e 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002478:	2104      	movs	r1, #4
 800247a:	482e      	ldr	r0, [pc, #184]	@ (8002534 <menu+0x13d8>)
 800247c:	f009 f880 	bl	800b580 <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d115      	bne.n	80024b2 <menu+0x1356>
 8002486:	4b2c      	ldr	r3, [pc, #176]	@ (8002538 <menu+0x13dc>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002494:	4b25      	ldr	r3, [pc, #148]	@ (800252c <menu+0x13d0>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3b01      	subs	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <menu+0x13d0>)
 800249e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80024a0:	4b22      	ldr	r3, [pc, #136]	@ (800252c <menu+0x13d0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d902      	bls.n	80024ae <menu+0x1352>
		   		kapitablaTip = 2;
 80024a8:	4b20      	ldr	r3, [pc, #128]	@ (800252c <menu+0x13d0>)
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ae:	f001 fb71 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b2:	2108      	movs	r1, #8
 80024b4:	481f      	ldr	r0, [pc, #124]	@ (8002534 <menu+0x13d8>)
 80024b6:	f009 f863 	bl	800b580 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10d      	bne.n	80024dc <menu+0x1380>
 80024c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <menu+0x13dc>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80024ce:	4b17      	ldr	r3, [pc, #92]	@ (800252c <menu+0x13d0>)
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <menu+0x13e0>)
 80024d4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <menu+0x13e4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <menu+0x13e8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b0e      	cmp	r3, #14
 80024e2:	f040 80a3 	bne.w	800262c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80024e6:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <menu+0x13ec>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2001      	movs	r0, #1
 80024ec:	f007 fd1e 	bl	8009f2c <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80024f0:	4b16      	ldr	r3, [pc, #88]	@ (800254c <menu+0x13f0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80024f8:	4a15      	ldr	r2, [pc, #84]	@ (8002550 <menu+0x13f4>)
 80024fa:	2101      	movs	r1, #1
 80024fc:	2002      	movs	r0, #2
 80024fe:	f007 fd15 	bl	8009f2c <lcd_print>
 8002502:	e034      	b.n	800256e <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <menu+0x13f0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <menu+0x13f8>)
 800250e:	2101      	movs	r1, #1
 8002510:	2002      	movs	r0, #2
 8002512:	f007 fd0b 	bl	8009f2c <lcd_print>
 8002516:	e02a      	b.n	800256e <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <menu+0x13f0>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d11d      	bne.n	800255c <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <menu+0x13fc>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f007 fd01 	bl	8009f2c <lcd_print>
 800252a:	e020      	b.n	800256e <menu+0x1412>
 800252c:	200010c7 	.word	0x200010c7
 8002530:	20000114 	.word	0x20000114
 8002534:	40010800 	.word	0x40010800
 8002538:	200010eb 	.word	0x200010eb
 800253c:	20000fec 	.word	0x20000fec
 8002540:	200010e8 	.word	0x200010e8
 8002544:	200010bc 	.word	0x200010bc
 8002548:	20001518 	.word	0x20001518
 800254c:	200010c9 	.word	0x200010c9
 8002550:	2000152c 	.word	0x2000152c
 8002554:	20001540 	.word	0x20001540
 8002558:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 800255c:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <menu+0x15dc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d104      	bne.n	800256e <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002564:	4a75      	ldr	r2, [pc, #468]	@ (800273c <menu+0x15e0>)
 8002566:	2101      	movs	r1, #1
 8002568:	2002      	movs	r0, #2
 800256a:	f007 fcdf 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800256e:	2102      	movs	r1, #2
 8002570:	4873      	ldr	r0, [pc, #460]	@ (8002740 <menu+0x15e4>)
 8002572:	f009 f805 	bl	800b580 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d115      	bne.n	80025a8 <menu+0x144c>
 800257c:	4b71      	ldr	r3, [pc, #452]	@ (8002744 <menu+0x15e8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800258a:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <menu+0x15dc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b69      	ldr	r3, [pc, #420]	@ (8002738 <menu+0x15dc>)
 8002594:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002596:	4b68      	ldr	r3, [pc, #416]	@ (8002738 <menu+0x15dc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <menu+0x1448>
				kapiTablaAcKonum = 0;
 800259e:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <menu+0x15dc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025a4:	f001 faf6 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a8:	2104      	movs	r1, #4
 80025aa:	4865      	ldr	r0, [pc, #404]	@ (8002740 <menu+0x15e4>)
 80025ac:	f008 ffe8 	bl	800b580 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d115      	bne.n	80025e2 <menu+0x1486>
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <menu+0x15e8>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80025c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002738 <menu+0x15dc>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <menu+0x15dc>)
 80025ce:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <menu+0x15dc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d902      	bls.n	80025de <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80025d8:	4b57      	ldr	r3, [pc, #348]	@ (8002738 <menu+0x15dc>)
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025de:	f001 fad9 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025e2:	2108      	movs	r1, #8
 80025e4:	4856      	ldr	r0, [pc, #344]	@ (8002740 <menu+0x15e4>)
 80025e6:	f008 ffcb 	bl	800b580 <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d11d      	bne.n	800262c <menu+0x14d0>
 80025f0:	4b54      	ldr	r3, [pc, #336]	@ (8002744 <menu+0x15e8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80025fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002738 <menu+0x15dc>)
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <menu+0x15ec>)
 8002604:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002608:	4b4b      	ldr	r3, [pc, #300]	@ (8002738 <menu+0x15dc>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <menu+0x14bc>
 8002610:	4b49      	ldr	r3, [pc, #292]	@ (8002738 <menu+0x15dc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d106      	bne.n	8002626 <menu+0x14ca>
				altLimit = 1;
 8002618:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <menu+0x15f0>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <menu+0x15f0>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <menu+0x15ec>)
 8002624:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002626:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <menu+0x15f4>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800262c:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <menu+0x15f8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d16c      	bne.n	800270e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002634:	4a48      	ldr	r2, [pc, #288]	@ (8002758 <menu+0x15fc>)
 8002636:	2101      	movs	r1, #1
 8002638:	2001      	movs	r0, #1
 800263a:	f007 fc77 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800263e:	4a47      	ldr	r2, [pc, #284]	@ (800275c <menu+0x1600>)
 8002640:	2101      	movs	r1, #1
 8002642:	2002      	movs	r0, #2
 8002644:	f007 fc72 	bl	8009f2c <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002648:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <menu+0x1604>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	220a      	movs	r2, #10
 800264e:	4945      	ldr	r1, [pc, #276]	@ (8002764 <menu+0x1608>)
 8002650:	4618      	mov	r0, r3
 8002652:	f00b ffc1 	bl	800e5d8 <itoa>
		lcd_print(2,16,snum);
 8002656:	4a43      	ldr	r2, [pc, #268]	@ (8002764 <menu+0x1608>)
 8002658:	2110      	movs	r1, #16
 800265a:	2002      	movs	r0, #2
 800265c:	f007 fc66 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002660:	2102      	movs	r1, #2
 8002662:	4837      	ldr	r0, [pc, #220]	@ (8002740 <menu+0x15e4>)
 8002664:	f008 ff8c 	bl	800b580 <HAL_GPIO_ReadPin>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d119      	bne.n	80026a2 <menu+0x1546>
 800266e:	4b35      	ldr	r3, [pc, #212]	@ (8002744 <menu+0x15e8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f083 0301 	eor.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <menu+0x1546>
 800267c:	4b3a      	ldr	r3, [pc, #232]	@ (8002768 <menu+0x160c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002684:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <menu+0x1604>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <menu+0x1604>)
 800268e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002690:	4b33      	ldr	r3, [pc, #204]	@ (8002760 <menu+0x1604>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d902      	bls.n	800269e <menu+0x1542>
				kapiTablaAcSure = 0;
 8002698:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <menu+0x1604>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800269e:	f001 fa79 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80026a2:	2104      	movs	r1, #4
 80026a4:	4826      	ldr	r0, [pc, #152]	@ (8002740 <menu+0x15e4>)
 80026a6:	f008 ff6b 	bl	800b580 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <menu+0x1588>
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <menu+0x15e8>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <menu+0x1588>
 80026be:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <menu+0x160c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10e      	bne.n	80026e4 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <menu+0x1604>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <menu+0x1604>)
 80026d0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <menu+0x1604>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <menu+0x1604>)
 80026dc:	2205      	movs	r2, #5
 80026de:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80026e0:	f001 fa58 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026e4:	2108      	movs	r1, #8
 80026e6:	4816      	ldr	r0, [pc, #88]	@ (8002740 <menu+0x15e4>)
 80026e8:	f008 ff4a 	bl	800b580 <HAL_GPIO_ReadPin>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10d      	bne.n	800270e <menu+0x15b2>
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <menu+0x15e8>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002700:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <menu+0x1604>)
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <menu+0x15ec>)
 8002706:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <menu+0x15f4>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <menu+0x15f8>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	f040 8086 	bne.w	8002824 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002718:	4a14      	ldr	r2, [pc, #80]	@ (800276c <menu+0x1610>)
 800271a:	2101      	movs	r1, #1
 800271c:	2001      	movs	r0, #1
 800271e:	f007 fc05 	bl	8009f2c <lcd_print>

		if(yukariYavasLimit == 0) {
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <menu+0x1614>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d124      	bne.n	8002774 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <menu+0x15e0>)
 800272c:	2101      	movs	r1, #1
 800272e:	2002      	movs	r0, #2
 8002730:	f007 fbfc 	bl	8009f2c <lcd_print>
 8002734:	e027      	b.n	8002786 <menu+0x162a>
 8002736:	bf00      	nop
 8002738:	200010c9 	.word	0x200010c9
 800273c:	2000139c 	.word	0x2000139c
 8002740:	40010800 	.word	0x40010800
 8002744:	200010eb 	.word	0x200010eb
 8002748:	20000fec 	.word	0x20000fec
 800274c:	200010c2 	.word	0x200010c2
 8002750:	200010e8 	.word	0x200010e8
 8002754:	200010bc 	.word	0x200010bc
 8002758:	20001568 	.word	0x20001568
 800275c:	200014c8 	.word	0x200014c8
 8002760:	200010d7 	.word	0x200010d7
 8002764:	2000105c 	.word	0x2000105c
 8002768:	200010c7 	.word	0x200010c7
 800276c:	2000157c 	.word	0x2000157c
 8002770:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002774:	4b84      	ldr	r3, [pc, #528]	@ (8002988 <menu+0x182c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d104      	bne.n	8002786 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 800277c:	4a83      	ldr	r2, [pc, #524]	@ (800298c <menu+0x1830>)
 800277e:	2101      	movs	r1, #1
 8002780:	2002      	movs	r0, #2
 8002782:	f007 fbd3 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002786:	2102      	movs	r1, #2
 8002788:	4881      	ldr	r0, [pc, #516]	@ (8002990 <menu+0x1834>)
 800278a:	f008 fef9 	bl	800b580 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d115      	bne.n	80027c0 <menu+0x1664>
 8002794:	4b7f      	ldr	r3, [pc, #508]	@ (8002994 <menu+0x1838>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00e      	beq.n	80027c0 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 80027a2:	4b79      	ldr	r3, [pc, #484]	@ (8002988 <menu+0x182c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b77      	ldr	r3, [pc, #476]	@ (8002988 <menu+0x182c>)
 80027ac:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80027ae:	4b76      	ldr	r3, [pc, #472]	@ (8002988 <menu+0x182c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d902      	bls.n	80027bc <menu+0x1660>
				yukariYavasLimit = 0;
 80027b6:	4b74      	ldr	r3, [pc, #464]	@ (8002988 <menu+0x182c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027bc:	f001 f9ea 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c0:	2104      	movs	r1, #4
 80027c2:	4873      	ldr	r0, [pc, #460]	@ (8002990 <menu+0x1834>)
 80027c4:	f008 fedc 	bl	800b580 <HAL_GPIO_ReadPin>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d115      	bne.n	80027fa <menu+0x169e>
 80027ce:	4b71      	ldr	r3, [pc, #452]	@ (8002994 <menu+0x1838>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f083 0301 	eor.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 80027dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <menu+0x182c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b68      	ldr	r3, [pc, #416]	@ (8002988 <menu+0x182c>)
 80027e6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80027e8:	4b67      	ldr	r3, [pc, #412]	@ (8002988 <menu+0x182c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <menu+0x169a>
		   		yukariYavasLimit = 1;
 80027f0:	4b65      	ldr	r3, [pc, #404]	@ (8002988 <menu+0x182c>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027f6:	f001 f9cd 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fa:	2108      	movs	r1, #8
 80027fc:	4864      	ldr	r0, [pc, #400]	@ (8002990 <menu+0x1834>)
 80027fe:	f008 febf 	bl	800b580 <HAL_GPIO_ReadPin>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10d      	bne.n	8002824 <menu+0x16c8>
 8002808:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <menu+0x1838>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f083 0301 	eor.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002816:	4b5c      	ldr	r3, [pc, #368]	@ (8002988 <menu+0x182c>)
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	4b5f      	ldr	r3, [pc, #380]	@ (8002998 <menu+0x183c>)
 800281c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800281e:	4b5f      	ldr	r3, [pc, #380]	@ (800299c <menu+0x1840>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002824:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <menu+0x1844>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b11      	cmp	r3, #17
 800282a:	f040 808b 	bne.w	8002944 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 800282e:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <menu+0x1848>)
 8002830:	2101      	movs	r1, #1
 8002832:	2001      	movs	r0, #1
 8002834:	f007 fb7a 	bl	8009f2c <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002838:	4b5b      	ldr	r3, [pc, #364]	@ (80029a8 <menu+0x184c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d105      	bne.n	800284c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002840:	4a5a      	ldr	r2, [pc, #360]	@ (80029ac <menu+0x1850>)
 8002842:	2101      	movs	r1, #1
 8002844:	2002      	movs	r0, #2
 8002846:	f007 fb71 	bl	8009f2c <lcd_print>
 800284a:	e012      	b.n	8002872 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 800284c:	4b56      	ldr	r3, [pc, #344]	@ (80029a8 <menu+0x184c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002854:	4a56      	ldr	r2, [pc, #344]	@ (80029b0 <menu+0x1854>)
 8002856:	2101      	movs	r1, #1
 8002858:	2002      	movs	r0, #2
 800285a:	f007 fb67 	bl	8009f2c <lcd_print>
 800285e:	e008      	b.n	8002872 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002860:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <menu+0x184c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002868:	4a52      	ldr	r2, [pc, #328]	@ (80029b4 <menu+0x1858>)
 800286a:	2101      	movs	r1, #1
 800286c:	2002      	movs	r0, #2
 800286e:	f007 fb5d 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2102      	movs	r1, #2
 8002874:	4846      	ldr	r0, [pc, #280]	@ (8002990 <menu+0x1834>)
 8002876:	f008 fe83 	bl	800b580 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d115      	bne.n	80028ac <menu+0x1750>
 8002880:	4b44      	ldr	r3, [pc, #272]	@ (8002994 <menu+0x1838>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00e      	beq.n	80028ac <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800288e:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <menu+0x184c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <menu+0x184c>)
 8002898:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800289a:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <menu+0x184c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <menu+0x184c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028a8:	f001 f974 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ac:	2104      	movs	r1, #4
 80028ae:	4838      	ldr	r0, [pc, #224]	@ (8002990 <menu+0x1834>)
 80028b0:	f008 fe66 	bl	800b580 <HAL_GPIO_ReadPin>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d115      	bne.n	80028e6 <menu+0x178a>
 80028ba:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <menu+0x1838>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80028c8:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <menu+0x184c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b35      	ldr	r3, [pc, #212]	@ (80029a8 <menu+0x184c>)
 80028d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80028d4:	4b34      	ldr	r3, [pc, #208]	@ (80029a8 <menu+0x184c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d902      	bls.n	80028e2 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 80028dc:	4b32      	ldr	r3, [pc, #200]	@ (80029a8 <menu+0x184c>)
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028e2:	f001 f957 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028e6:	2108      	movs	r1, #8
 80028e8:	4829      	ldr	r0, [pc, #164]	@ (8002990 <menu+0x1834>)
 80028ea:	f008 fe49 	bl	800b580 <HAL_GPIO_ReadPin>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d127      	bne.n	8002944 <menu+0x17e8>
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <menu+0x1838>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f083 0301 	eor.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002902:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <menu+0x184c>)
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <menu+0x183c>)
 8002908:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800290a:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <menu+0x184c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <menu+0x17be>
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <menu+0x184c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d106      	bne.n	8002928 <menu+0x17cc>
				calismaSekli = 0;
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <menu+0x185c>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <menu+0x185c>)
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <menu+0x183c>)
 8002926:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002928:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <menu+0x184c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <menu+0x1860>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <menu+0x1860>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <menu+0x183c>)
 800293c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <menu+0x1840>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <menu+0x1844>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b12      	cmp	r3, #18
 800294a:	f040 8097 	bne.w	8002a7c <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 800294e:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <menu+0x184c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d105      	bne.n	8002962 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002956:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <menu+0x1864>)
 8002958:	2101      	movs	r1, #1
 800295a:	2001      	movs	r0, #1
 800295c:	f007 fae6 	bl	8009f2c <lcd_print>
 8002960:	e008      	b.n	8002974 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <menu+0x184c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d104      	bne.n	8002974 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 800296a:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <menu+0x1868>)
 800296c:	2101      	movs	r1, #1
 800296e:	2001      	movs	r0, #1
 8002970:	f007 fadc 	bl	8009f2c <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <menu+0x186c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d127      	bne.n	80029cc <menu+0x1870>
			lcd_print(2, 1, pasifText);
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <menu+0x1858>)
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f007 fad3 	bl	8009f2c <lcd_print>
 8002986:	e02a      	b.n	80029de <menu+0x1882>
 8002988:	200010ca 	.word	0x200010ca
 800298c:	200013b0 	.word	0x200013b0
 8002990:	40010800 	.word	0x40010800
 8002994:	200010eb 	.word	0x200010eb
 8002998:	20000fec 	.word	0x20000fec
 800299c:	200010e8 	.word	0x200010e8
 80029a0:	200010bc 	.word	0x200010bc
 80029a4:	20001590 	.word	0x20001590
 80029a8:	200010cb 	.word	0x200010cb
 80029ac:	200015a4 	.word	0x200015a4
 80029b0:	200015b8 	.word	0x200015b8
 80029b4:	2000139c 	.word	0x2000139c
 80029b8:	200010bd 	.word	0x200010bd
 80029bc:	200010ce 	.word	0x200010ce
 80029c0:	200015cc 	.word	0x200015cc
 80029c4:	200015e0 	.word	0x200015e0
 80029c8:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 80029cc:	4b79      	ldr	r3, [pc, #484]	@ (8002bb4 <menu+0x1a58>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d104      	bne.n	80029de <menu+0x1882>
			lcd_print(2, 1, aktifText);
 80029d4:	4a78      	ldr	r2, [pc, #480]	@ (8002bb8 <menu+0x1a5c>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	2002      	movs	r0, #2
 80029da:	f007 faa7 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029de:	2102      	movs	r1, #2
 80029e0:	4876      	ldr	r0, [pc, #472]	@ (8002bbc <menu+0x1a60>)
 80029e2:	f008 fdcd 	bl	800b580 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d115      	bne.n	8002a18 <menu+0x18bc>
 80029ec:	4b74      	ldr	r3, [pc, #464]	@ (8002bc0 <menu+0x1a64>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f083 0301 	eor.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00e      	beq.n	8002a18 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80029fa:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb4 <menu+0x1a58>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <menu+0x1a58>)
 8002a04:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002a06:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb4 <menu+0x1a58>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d902      	bls.n	8002a14 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002a0e:	4b69      	ldr	r3, [pc, #420]	@ (8002bb4 <menu+0x1a58>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a14:	f001 f8be 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a18:	2104      	movs	r1, #4
 8002a1a:	4868      	ldr	r0, [pc, #416]	@ (8002bbc <menu+0x1a60>)
 8002a1c:	f008 fdb0 	bl	800b580 <HAL_GPIO_ReadPin>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d115      	bne.n	8002a52 <menu+0x18f6>
 8002a26:	4b66      	ldr	r3, [pc, #408]	@ (8002bc0 <menu+0x1a64>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	f083 0301 	eor.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <menu+0x1a58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <menu+0x1a58>)
 8002a3e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002a40:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb4 <menu+0x1a58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002a48:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <menu+0x1a58>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a4e:	f001 f8a1 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a52:	2108      	movs	r1, #8
 8002a54:	4859      	ldr	r0, [pc, #356]	@ (8002bbc <menu+0x1a60>)
 8002a56:	f008 fd93 	bl	800b580 <HAL_GPIO_ReadPin>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10d      	bne.n	8002a7c <menu+0x1920>
 8002a60:	4b57      	ldr	r3, [pc, #348]	@ (8002bc0 <menu+0x1a64>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	f083 0301 	eor.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002a6e:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <menu+0x1a58>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <menu+0x1a68>)
 8002a74:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002a76:	4b54      	ldr	r3, [pc, #336]	@ (8002bc8 <menu+0x1a6c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <menu+0x1a70>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b13      	cmp	r3, #19
 8002a82:	d174      	bne.n	8002b6e <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002a84:	4b52      	ldr	r3, [pc, #328]	@ (8002bd0 <menu+0x1a74>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d105      	bne.n	8002a98 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002a8c:	4a51      	ldr	r2, [pc, #324]	@ (8002bd4 <menu+0x1a78>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2001      	movs	r0, #1
 8002a92:	f007 fa4b 	bl	8009f2c <lcd_print>
 8002a96:	e008      	b.n	8002aaa <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002a98:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd0 <menu+0x1a74>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d104      	bne.n	8002aaa <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd8 <menu+0x1a7c>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f007 fa41 	bl	8009f2c <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8002bdc <menu+0x1a80>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	@ (8002be0 <menu+0x1a84>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f007 fa38 	bl	8009f2c <lcd_print>
 8002abc:	e008      	b.n	8002ad0 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <menu+0x1a80>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb8 <menu+0x1a5c>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2002      	movs	r0, #2
 8002acc:	f007 fa2e 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	483a      	ldr	r0, [pc, #232]	@ (8002bbc <menu+0x1a60>)
 8002ad4:	f008 fd54 	bl	800b580 <HAL_GPIO_ReadPin>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d115      	bne.n	8002b0a <menu+0x19ae>
 8002ade:	4b38      	ldr	r3, [pc, #224]	@ (8002bc0 <menu+0x1a64>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002aec:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <menu+0x1a80>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <menu+0x1a80>)
 8002af6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002af8:	4b38      	ldr	r3, [pc, #224]	@ (8002bdc <menu+0x1a80>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d902      	bls.n	8002b06 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002b00:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <menu+0x1a80>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b06:	f001 f845 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	482b      	ldr	r0, [pc, #172]	@ (8002bbc <menu+0x1a60>)
 8002b0e:	f008 fd37 	bl	800b580 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d115      	bne.n	8002b44 <menu+0x19e8>
 8002b18:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <menu+0x1a64>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002b26:	4b2d      	ldr	r3, [pc, #180]	@ (8002bdc <menu+0x1a80>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <menu+0x1a80>)
 8002b30:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002b32:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <menu+0x1a80>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <menu+0x1a80>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b40:	f001 f828 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b44:	2108      	movs	r1, #8
 8002b46:	481d      	ldr	r0, [pc, #116]	@ (8002bbc <menu+0x1a60>)
 8002b48:	f008 fd1a 	bl	800b580 <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10d      	bne.n	8002b6e <menu+0x1a12>
 8002b52:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <menu+0x1a64>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <menu+0x1a80>)
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <menu+0x1a68>)
 8002b66:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <menu+0x1a6c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <menu+0x1a70>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b14      	cmp	r3, #20
 8002b74:	f040 809e 	bne.w	8002cb4 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <menu+0x1a74>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002b80:	4a18      	ldr	r2, [pc, #96]	@ (8002be4 <menu+0x1a88>)
 8002b82:	2101      	movs	r1, #1
 8002b84:	2001      	movs	r0, #1
 8002b86:	f007 f9d1 	bl	8009f2c <lcd_print>
 8002b8a:	e008      	b.n	8002b9e <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <menu+0x1a74>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d104      	bne.n	8002b9e <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <menu+0x1a8c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f007 f9c7 	bl	8009f2c <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <menu+0x1a90>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d126      	bne.n	8002bf4 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002ba6:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <menu+0x1a94>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f007 f9be 	bl	8009f2c <lcd_print>
 8002bb0:	e029      	b.n	8002c06 <menu+0x1aaa>
 8002bb2:	bf00      	nop
 8002bb4:	200010cc 	.word	0x200010cc
 8002bb8:	200013b0 	.word	0x200013b0
 8002bbc:	40010800 	.word	0x40010800
 8002bc0:	200010eb 	.word	0x200010eb
 8002bc4:	20000fec 	.word	0x20000fec
 8002bc8:	200010e8 	.word	0x200010e8
 8002bcc:	200010bc 	.word	0x200010bc
 8002bd0:	200010cb 	.word	0x200010cb
 8002bd4:	200015f4 	.word	0x200015f4
 8002bd8:	20001608 	.word	0x20001608
 8002bdc:	200010cd 	.word	0x200010cd
 8002be0:	2000139c 	.word	0x2000139c
 8002be4:	2000161c 	.word	0x2000161c
 8002be8:	20001630 	.word	0x20001630
 8002bec:	200010ce 	.word	0x200010ce
 8002bf0:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 8002bf4:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <menu+0x1b80>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d104      	bne.n	8002c06 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002bfc:	4a38      	ldr	r2, [pc, #224]	@ (8002ce0 <menu+0x1b84>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2002      	movs	r0, #2
 8002c02:	f007 f993 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c06:	2102      	movs	r1, #2
 8002c08:	4836      	ldr	r0, [pc, #216]	@ (8002ce4 <menu+0x1b88>)
 8002c0a:	f008 fcb9 	bl	800b580 <HAL_GPIO_ReadPin>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d119      	bne.n	8002c48 <menu+0x1aec>
 8002c14:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <menu+0x1b8c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <menu+0x1aec>
 8002c22:	4b32      	ldr	r3, [pc, #200]	@ (8002cec <menu+0x1b90>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d10e      	bne.n	8002c48 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <menu+0x1b80>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <menu+0x1b80>)
 8002c34:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <menu+0x1b80>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d902      	bls.n	8002c44 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002c3e:	4b27      	ldr	r3, [pc, #156]	@ (8002cdc <menu+0x1b80>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c44:	f000 ffa6 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c48:	2104      	movs	r1, #4
 8002c4a:	4826      	ldr	r0, [pc, #152]	@ (8002ce4 <menu+0x1b88>)
 8002c4c:	f008 fc98 	bl	800b580 <HAL_GPIO_ReadPin>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d119      	bne.n	8002c8a <menu+0x1b2e>
 8002c56:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <menu+0x1b8c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	f083 0301 	eor.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d012      	beq.n	8002c8a <menu+0x1b2e>
 8002c64:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <menu+0x1b90>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d10e      	bne.n	8002c8a <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <menu+0x1b80>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <menu+0x1b80>)
 8002c76:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002c78:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <menu+0x1b80>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <menu+0x1b80>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c86:	f000 ff85 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	4815      	ldr	r0, [pc, #84]	@ (8002ce4 <menu+0x1b88>)
 8002c8e:	f008 fc77 	bl	800b580 <HAL_GPIO_ReadPin>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10d      	bne.n	8002cb4 <menu+0x1b58>
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <menu+0x1b8c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <menu+0x1b80>)
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <menu+0x1b94>)
 8002cac:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <menu+0x1b98>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002cb4:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <menu+0x1b9c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b15      	cmp	r3, #21
 8002cba:	f040 8088 	bne.w	8002dce <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002cfc <menu+0x1ba0>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f007 f932 	bl	8009f2c <lcd_print>

		if(platformSilindirTipi == 0) {
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <menu+0x1ba4>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11b      	bne.n	8002d08 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <menu+0x1ba8>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f007 f929 	bl	8009f2c <lcd_print>
 8002cda:	e01e      	b.n	8002d1a <menu+0x1bbe>
 8002cdc:	200010ce 	.word	0x200010ce
 8002ce0:	20001658 	.word	0x20001658
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	200010eb 	.word	0x200010eb
 8002cec:	200010cb 	.word	0x200010cb
 8002cf0:	20000fec 	.word	0x20000fec
 8002cf4:	200010e8 	.word	0x200010e8
 8002cf8:	200010bc 	.word	0x200010bc
 8002cfc:	2000166c 	.word	0x2000166c
 8002d00:	200010cf 	.word	0x200010cf
 8002d04:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8002d08:	4ba1      	ldr	r3, [pc, #644]	@ (8002f90 <menu+0x1e34>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d104      	bne.n	8002d1a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002d10:	4aa0      	ldr	r2, [pc, #640]	@ (8002f94 <menu+0x1e38>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	2002      	movs	r0, #2
 8002d16:	f007 f909 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	489e      	ldr	r0, [pc, #632]	@ (8002f98 <menu+0x1e3c>)
 8002d1e:	f008 fc2f 	bl	800b580 <HAL_GPIO_ReadPin>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d115      	bne.n	8002d54 <menu+0x1bf8>
 8002d28:	4b9c      	ldr	r3, [pc, #624]	@ (8002f9c <menu+0x1e40>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002d36:	4b96      	ldr	r3, [pc, #600]	@ (8002f90 <menu+0x1e34>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4b94      	ldr	r3, [pc, #592]	@ (8002f90 <menu+0x1e34>)
 8002d40:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002d42:	4b93      	ldr	r3, [pc, #588]	@ (8002f90 <menu+0x1e34>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d902      	bls.n	8002d50 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002d4a:	4b91      	ldr	r3, [pc, #580]	@ (8002f90 <menu+0x1e34>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d50:	f000 ff20 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d54:	2104      	movs	r1, #4
 8002d56:	4890      	ldr	r0, [pc, #576]	@ (8002f98 <menu+0x1e3c>)
 8002d58:	f008 fc12 	bl	800b580 <HAL_GPIO_ReadPin>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d115      	bne.n	8002d8e <menu+0x1c32>
 8002d62:	4b8e      	ldr	r3, [pc, #568]	@ (8002f9c <menu+0x1e40>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002d70:	4b87      	ldr	r3, [pc, #540]	@ (8002f90 <menu+0x1e34>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b85      	ldr	r3, [pc, #532]	@ (8002f90 <menu+0x1e34>)
 8002d7a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002d7c:	4b84      	ldr	r3, [pc, #528]	@ (8002f90 <menu+0x1e34>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002d84:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <menu+0x1e34>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d8a:	f000 ff03 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8e:	2108      	movs	r1, #8
 8002d90:	4881      	ldr	r0, [pc, #516]	@ (8002f98 <menu+0x1e3c>)
 8002d92:	f008 fbf5 	bl	800b580 <HAL_GPIO_ReadPin>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d118      	bne.n	8002dce <menu+0x1c72>
 8002d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f9c <menu+0x1e40>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d011      	beq.n	8002dce <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002daa:	4b79      	ldr	r3, [pc, #484]	@ (8002f90 <menu+0x1e34>)
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <menu+0x1e44>)
 8002db0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002db2:	4b77      	ldr	r3, [pc, #476]	@ (8002f90 <menu+0x1e34>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d106      	bne.n	8002dc8 <menu+0x1c6c>
				altLimit = 1;
 8002dba:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa4 <menu+0x1e48>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002dc0:	4b78      	ldr	r3, [pc, #480]	@ (8002fa4 <menu+0x1e48>)
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <menu+0x1e44>)
 8002dc6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002dc8:	4b77      	ldr	r3, [pc, #476]	@ (8002fa8 <menu+0x1e4c>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002dce:	4b77      	ldr	r3, [pc, #476]	@ (8002fac <menu+0x1e50>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b16      	cmp	r3, #22
 8002dd4:	d164      	bne.n	8002ea0 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002dd6:	4a76      	ldr	r2, [pc, #472]	@ (8002fb0 <menu+0x1e54>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f007 f8a6 	bl	8009f2c <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002de0:	4a74      	ldr	r2, [pc, #464]	@ (8002fb4 <menu+0x1e58>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f007 f8a1 	bl	8009f2c <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002dea:	4b73      	ldr	r3, [pc, #460]	@ (8002fb8 <menu+0x1e5c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	220a      	movs	r2, #10
 8002df0:	4972      	ldr	r1, [pc, #456]	@ (8002fbc <menu+0x1e60>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f00b fbf0 	bl	800e5d8 <itoa>
		lcd_print(2,16,snum);
 8002df8:	4a70      	ldr	r2, [pc, #448]	@ (8002fbc <menu+0x1e60>)
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f007 f895 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e02:	2102      	movs	r1, #2
 8002e04:	4864      	ldr	r0, [pc, #400]	@ (8002f98 <menu+0x1e3c>)
 8002e06:	f008 fbbb 	bl	800b580 <HAL_GPIO_ReadPin>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d115      	bne.n	8002e3c <menu+0x1ce0>
 8002e10:	4b62      	ldr	r3, [pc, #392]	@ (8002f9c <menu+0x1e40>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00e      	beq.n	8002e3c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002e1e:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <menu+0x1e5c>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b64      	ldr	r3, [pc, #400]	@ (8002fb8 <menu+0x1e5c>)
 8002e28:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002e2a:	4b63      	ldr	r3, [pc, #396]	@ (8002fb8 <menu+0x1e5c>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d902      	bls.n	8002e38 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002e32:	4b61      	ldr	r3, [pc, #388]	@ (8002fb8 <menu+0x1e5c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e38:	f000 feac 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	4856      	ldr	r0, [pc, #344]	@ (8002f98 <menu+0x1e3c>)
 8002e40:	f008 fb9e 	bl	800b580 <HAL_GPIO_ReadPin>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d115      	bne.n	8002e76 <menu+0x1d1a>
 8002e4a:	4b54      	ldr	r3, [pc, #336]	@ (8002f9c <menu+0x1e40>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002e58:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <menu+0x1e5c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <menu+0x1e5c>)
 8002e62:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002e64:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <menu+0x1e5c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d902      	bls.n	8002e72 <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <menu+0x1e5c>)
 8002e6e:	2205      	movs	r2, #5
 8002e70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e72:	f000 fe8f 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e76:	2108      	movs	r1, #8
 8002e78:	4847      	ldr	r0, [pc, #284]	@ (8002f98 <menu+0x1e3c>)
 8002e7a:	f008 fb81 	bl	800b580 <HAL_GPIO_ReadPin>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10d      	bne.n	8002ea0 <menu+0x1d44>
 8002e84:	4b45      	ldr	r3, [pc, #276]	@ (8002f9c <menu+0x1e40>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002e92:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <menu+0x1e5c>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b42      	ldr	r3, [pc, #264]	@ (8002fa0 <menu+0x1e44>)
 8002e98:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e9a:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <menu+0x1e4c>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002ea0:	4b42      	ldr	r3, [pc, #264]	@ (8002fac <menu+0x1e50>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b17      	cmp	r3, #23
 8002ea6:	d164      	bne.n	8002f72 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002ea8:	4a45      	ldr	r2, [pc, #276]	@ (8002fc0 <menu+0x1e64>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2001      	movs	r0, #1
 8002eae:	f007 f83d 	bl	8009f2c <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002eb2:	4a40      	ldr	r2, [pc, #256]	@ (8002fb4 <menu+0x1e58>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	f007 f838 	bl	8009f2c <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <menu+0x1e68>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	220a      	movs	r2, #10
 8002ec2:	493e      	ldr	r1, [pc, #248]	@ (8002fbc <menu+0x1e60>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00b fb87 	bl	800e5d8 <itoa>
		lcd_print(2,16,snum);
 8002eca:	4a3c      	ldr	r2, [pc, #240]	@ (8002fbc <menu+0x1e60>)
 8002ecc:	2110      	movs	r1, #16
 8002ece:	2002      	movs	r0, #2
 8002ed0:	f007 f82c 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4830      	ldr	r0, [pc, #192]	@ (8002f98 <menu+0x1e3c>)
 8002ed8:	f008 fb52 	bl	800b580 <HAL_GPIO_ReadPin>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d115      	bne.n	8002f0e <menu+0x1db2>
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8002f9c <menu+0x1e40>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <menu+0x1e68>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <menu+0x1e68>)
 8002efa:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <menu+0x1e68>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d902      	bls.n	8002f0a <menu+0x1dae>
				asagiValfTmr = 0;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <menu+0x1e68>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f0a:	f000 fe43 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0e:	2104      	movs	r1, #4
 8002f10:	4821      	ldr	r0, [pc, #132]	@ (8002f98 <menu+0x1e3c>)
 8002f12:	f008 fb35 	bl	800b580 <HAL_GPIO_ReadPin>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d115      	bne.n	8002f48 <menu+0x1dec>
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <menu+0x1e40>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8002f2a:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <menu+0x1e68>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <menu+0x1e68>)
 8002f34:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002f36:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <menu+0x1e68>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <menu+0x1de8>
		   		asagiValfTmr = 5;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <menu+0x1e68>)
 8002f40:	2205      	movs	r2, #5
 8002f42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f44:	f000 fe26 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f48:	2108      	movs	r1, #8
 8002f4a:	4813      	ldr	r0, [pc, #76]	@ (8002f98 <menu+0x1e3c>)
 8002f4c:	f008 fb18 	bl	800b580 <HAL_GPIO_ReadPin>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10d      	bne.n	8002f72 <menu+0x1e16>
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <menu+0x1e40>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	f083 0301 	eor.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <menu+0x1e68>)
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <menu+0x1e44>)
 8002f6a:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <menu+0x1e4c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <menu+0x1e50>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	f040 8093 	bne.w	80030a2 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <menu+0x1e6c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d125      	bne.n	8002fd0 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <menu+0x1e70>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f006 ffcf 	bl	8009f2c <lcd_print>
 8002f8e:	e028      	b.n	8002fe2 <menu+0x1e86>
 8002f90:	200010cf 	.word	0x200010cf
 8002f94:	20001658 	.word	0x20001658
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	200010eb 	.word	0x200010eb
 8002fa0:	20000fec 	.word	0x20000fec
 8002fa4:	200010c2 	.word	0x200010c2
 8002fa8:	200010e8 	.word	0x200010e8
 8002fac:	200010bc 	.word	0x200010bc
 8002fb0:	20001680 	.word	0x20001680
 8002fb4:	200014c8 	.word	0x200014c8
 8002fb8:	200010d0 	.word	0x200010d0
 8002fbc:	2000105c 	.word	0x2000105c
 8002fc0:	20001694 	.word	0x20001694
 8002fc4:	200010d1 	.word	0x200010d1
 8002fc8:	200010cb 	.word	0x200010cb
 8002fcc:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003204 <menu+0x20a8>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d104      	bne.n	8002fe2 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8002fd8:	4a8b      	ldr	r2, [pc, #556]	@ (8003208 <menu+0x20ac>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f006 ffa5 	bl	8009f2c <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fe2:	4a8a      	ldr	r2, [pc, #552]	@ (800320c <menu+0x20b0>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f006 ffa0 	bl	8009f2c <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002fec:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <menu+0x20b4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	220a      	movs	r2, #10
 8002ff2:	4988      	ldr	r1, [pc, #544]	@ (8003214 <menu+0x20b8>)
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f00b faef 	bl	800e5d8 <itoa>
		lcd_print(2, 16, snum);
 8002ffa:	4a86      	ldr	r2, [pc, #536]	@ (8003214 <menu+0x20b8>)
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	2002      	movs	r0, #2
 8003000:	f006 ff94 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003004:	2102      	movs	r1, #2
 8003006:	4884      	ldr	r0, [pc, #528]	@ (8003218 <menu+0x20bc>)
 8003008:	f008 faba 	bl	800b580 <HAL_GPIO_ReadPin>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d115      	bne.n	800303e <menu+0x1ee2>
 8003012:	4b82      	ldr	r3, [pc, #520]	@ (800321c <menu+0x20c0>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	f083 0301 	eor.w	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003020:	4b7b      	ldr	r3, [pc, #492]	@ (8003210 <menu+0x20b4>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <menu+0x20b4>)
 800302a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800302c:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <menu+0x20b4>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d902      	bls.n	800303a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003034:	4b76      	ldr	r3, [pc, #472]	@ (8003210 <menu+0x20b4>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800303a:	f000 fdab 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800303e:	2104      	movs	r1, #4
 8003040:	4875      	ldr	r0, [pc, #468]	@ (8003218 <menu+0x20bc>)
 8003042:	f008 fa9d 	bl	800b580 <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <menu+0x1f1c>
 800304c:	4b73      	ldr	r3, [pc, #460]	@ (800321c <menu+0x20c0>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800305a:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <menu+0x20b4>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3b01      	subs	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b6b      	ldr	r3, [pc, #428]	@ (8003210 <menu+0x20b4>)
 8003064:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003066:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <menu+0x20b4>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800306e:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <menu+0x20b4>)
 8003070:	2205      	movs	r2, #5
 8003072:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003074:	f000 fd8e 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003078:	2108      	movs	r1, #8
 800307a:	4867      	ldr	r0, [pc, #412]	@ (8003218 <menu+0x20bc>)
 800307c:	f008 fa80 	bl	800b580 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10d      	bne.n	80030a2 <menu+0x1f46>
 8003086:	4b65      	ldr	r3, [pc, #404]	@ (800321c <menu+0x20c0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003094:	4b5e      	ldr	r3, [pc, #376]	@ (8003210 <menu+0x20b4>)
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	4b61      	ldr	r3, [pc, #388]	@ (8003220 <menu+0x20c4>)
 800309a:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800309c:	4b61      	ldr	r3, [pc, #388]	@ (8003224 <menu+0x20c8>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80030a2:	4b61      	ldr	r3, [pc, #388]	@ (8003228 <menu+0x20cc>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b19      	cmp	r3, #25
 80030a8:	d172      	bne.n	8003190 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80030aa:	4b56      	ldr	r3, [pc, #344]	@ (8003204 <menu+0x20a8>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d105      	bne.n	80030be <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80030b2:	4a5e      	ldr	r2, [pc, #376]	@ (800322c <menu+0x20d0>)
 80030b4:	2101      	movs	r1, #1
 80030b6:	2001      	movs	r0, #1
 80030b8:	f006 ff38 	bl	8009f2c <lcd_print>
 80030bc:	e008      	b.n	80030d0 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80030be:	4b51      	ldr	r3, [pc, #324]	@ (8003204 <menu+0x20a8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d104      	bne.n	80030d0 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80030c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003230 <menu+0x20d4>)
 80030c8:	2101      	movs	r1, #1
 80030ca:	2001      	movs	r0, #1
 80030cc:	f006 ff2e 	bl	8009f2c <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80030d0:	4a4e      	ldr	r2, [pc, #312]	@ (800320c <menu+0x20b0>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	2002      	movs	r0, #2
 80030d6:	f006 ff29 	bl	8009f2c <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80030da:	4b56      	ldr	r3, [pc, #344]	@ (8003234 <menu+0x20d8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	220a      	movs	r2, #10
 80030e0:	494c      	ldr	r1, [pc, #304]	@ (8003214 <menu+0x20b8>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00b fa78 	bl	800e5d8 <itoa>
		lcd_print(2,16,snum);
 80030e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003214 <menu+0x20b8>)
 80030ea:	2110      	movs	r1, #16
 80030ec:	2002      	movs	r0, #2
 80030ee:	f006 ff1d 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f2:	2102      	movs	r1, #2
 80030f4:	4848      	ldr	r0, [pc, #288]	@ (8003218 <menu+0x20bc>)
 80030f6:	f008 fa43 	bl	800b580 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d115      	bne.n	800312c <menu+0x1fd0>
 8003100:	4b46      	ldr	r3, [pc, #280]	@ (800321c <menu+0x20c0>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800310e:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <menu+0x20d8>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <menu+0x20d8>)
 8003118:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800311a:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <menu+0x20d8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d902      	bls.n	8003128 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <menu+0x20d8>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003128:	f000 fd34 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800312c:	2104      	movs	r1, #4
 800312e:	483a      	ldr	r0, [pc, #232]	@ (8003218 <menu+0x20bc>)
 8003130:	f008 fa26 	bl	800b580 <HAL_GPIO_ReadPin>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d115      	bne.n	8003166 <menu+0x200a>
 800313a:	4b38      	ldr	r3, [pc, #224]	@ (800321c <menu+0x20c0>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003148:	4b3a      	ldr	r3, [pc, #232]	@ (8003234 <menu+0x20d8>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <menu+0x20d8>)
 8003152:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003154:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <menu+0x20d8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d902      	bls.n	8003162 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <menu+0x20d8>)
 800315e:	2205      	movs	r2, #5
 8003160:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003162:	f000 fd17 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003166:	2108      	movs	r1, #8
 8003168:	482b      	ldr	r0, [pc, #172]	@ (8003218 <menu+0x20bc>)
 800316a:	f008 fa09 	bl	800b580 <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10d      	bne.n	8003190 <menu+0x2034>
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <menu+0x20c0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003182:	4b2c      	ldr	r3, [pc, #176]	@ (8003234 <menu+0x20d8>)
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <menu+0x20c4>)
 8003188:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800318a:	4b26      	ldr	r3, [pc, #152]	@ (8003224 <menu+0x20c8>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003190:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <menu+0x20cc>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b1a      	cmp	r3, #26
 8003196:	f040 80b7 	bne.w	8003308 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800319a:	4a27      	ldr	r2, [pc, #156]	@ (8003238 <menu+0x20dc>)
 800319c:	2101      	movs	r1, #1
 800319e:	2001      	movs	r0, #1
 80031a0:	f006 fec4 	bl	8009f2c <lcd_print>

		if(makineCalismaTmr > 99) {
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <menu+0x20e0>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b63      	cmp	r3, #99	@ 0x63
 80031aa:	d911      	bls.n	80031d0 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <menu+0x20b0>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f006 febb 	bl	8009f2c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80031b6:	4b21      	ldr	r3, [pc, #132]	@ (800323c <menu+0x20e0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	220a      	movs	r2, #10
 80031bc:	4915      	ldr	r1, [pc, #84]	@ (8003214 <menu+0x20b8>)
 80031be:	4618      	mov	r0, r3
 80031c0:	f00b fa0a 	bl	800e5d8 <itoa>
			lcd_print(2,14,snum);
 80031c4:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <menu+0x20b8>)
 80031c6:	210e      	movs	r1, #14
 80031c8:	2002      	movs	r0, #2
 80031ca:	f006 feaf 	bl	8009f2c <lcd_print>
 80031ce:	e04c      	b.n	800326a <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <menu+0x20e0>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d933      	bls.n	8003240 <menu+0x20e4>
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <menu+0x20e0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b63      	cmp	r3, #99	@ 0x63
 80031de:	d82f      	bhi.n	8003240 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80031e0:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <menu+0x20b0>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2002      	movs	r0, #2
 80031e6:	f006 fea1 	bl	8009f2c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80031ea:	4b14      	ldr	r3, [pc, #80]	@ (800323c <menu+0x20e0>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	220a      	movs	r2, #10
 80031f0:	4908      	ldr	r1, [pc, #32]	@ (8003214 <menu+0x20b8>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00b f9f0 	bl	800e5d8 <itoa>
			lcd_print(2, 15, snum);
 80031f8:	4a06      	ldr	r2, [pc, #24]	@ (8003214 <menu+0x20b8>)
 80031fa:	210f      	movs	r1, #15
 80031fc:	2002      	movs	r0, #2
 80031fe:	f006 fe95 	bl	8009f2c <lcd_print>
 8003202:	e032      	b.n	800326a <menu+0x210e>
 8003204:	200010cb 	.word	0x200010cb
 8003208:	200016bc 	.word	0x200016bc
 800320c:	200014c8 	.word	0x200014c8
 8003210:	200010d2 	.word	0x200010d2
 8003214:	2000105c 	.word	0x2000105c
 8003218:	40010800 	.word	0x40010800
 800321c:	200010eb 	.word	0x200010eb
 8003220:	20000fec 	.word	0x20000fec
 8003224:	200010e8 	.word	0x200010e8
 8003228:	200010bc 	.word	0x200010bc
 800322c:	200016d0 	.word	0x200016d0
 8003230:	200016e4 	.word	0x200016e4
 8003234:	200010d3 	.word	0x200010d3
 8003238:	200016f8 	.word	0x200016f8
 800323c:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 8003240:	4b72      	ldr	r3, [pc, #456]	@ (800340c <menu+0x22b0>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b09      	cmp	r3, #9
 8003246:	d810      	bhi.n	800326a <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003248:	4a71      	ldr	r2, [pc, #452]	@ (8003410 <menu+0x22b4>)
 800324a:	2101      	movs	r1, #1
 800324c:	2002      	movs	r0, #2
 800324e:	f006 fe6d 	bl	8009f2c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003252:	4b6e      	ldr	r3, [pc, #440]	@ (800340c <menu+0x22b0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	220a      	movs	r2, #10
 8003258:	496e      	ldr	r1, [pc, #440]	@ (8003414 <menu+0x22b8>)
 800325a:	4618      	mov	r0, r3
 800325c:	f00b f9bc 	bl	800e5d8 <itoa>
			lcd_print(2, 16, snum);
 8003260:	4a6c      	ldr	r2, [pc, #432]	@ (8003414 <menu+0x22b8>)
 8003262:	2110      	movs	r1, #16
 8003264:	2002      	movs	r0, #2
 8003266:	f006 fe61 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800326a:	2102      	movs	r1, #2
 800326c:	486a      	ldr	r0, [pc, #424]	@ (8003418 <menu+0x22bc>)
 800326e:	f008 f987 	bl	800b580 <HAL_GPIO_ReadPin>
 8003272:	4603      	mov	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d115      	bne.n	80032a4 <menu+0x2148>
 8003278:	4b68      	ldr	r3, [pc, #416]	@ (800341c <menu+0x22c0>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003286:	4b61      	ldr	r3, [pc, #388]	@ (800340c <menu+0x22b0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b5f      	ldr	r3, [pc, #380]	@ (800340c <menu+0x22b0>)
 8003290:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003292:	4b5e      	ldr	r3, [pc, #376]	@ (800340c <menu+0x22b0>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2bb4      	cmp	r3, #180	@ 0xb4
 8003298:	d902      	bls.n	80032a0 <menu+0x2144>
				makineCalismaTmr = 0;
 800329a:	4b5c      	ldr	r3, [pc, #368]	@ (800340c <menu+0x22b0>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032a0:	f000 fc78 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a4:	2104      	movs	r1, #4
 80032a6:	485c      	ldr	r0, [pc, #368]	@ (8003418 <menu+0x22bc>)
 80032a8:	f008 f96a 	bl	800b580 <HAL_GPIO_ReadPin>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d115      	bne.n	80032de <menu+0x2182>
 80032b2:	4b5a      	ldr	r3, [pc, #360]	@ (800341c <menu+0x22c0>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f083 0301 	eor.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80032c0:	4b52      	ldr	r3, [pc, #328]	@ (800340c <menu+0x22b0>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <menu+0x22b0>)
 80032ca:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80032cc:	4b4f      	ldr	r3, [pc, #316]	@ (800340c <menu+0x22b0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2bb5      	cmp	r3, #181	@ 0xb5
 80032d2:	d902      	bls.n	80032da <menu+0x217e>
		   		makineCalismaTmr = 180;
 80032d4:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <menu+0x22b0>)
 80032d6:	22b4      	movs	r2, #180	@ 0xb4
 80032d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032da:	f000 fc5b 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032de:	2108      	movs	r1, #8
 80032e0:	484d      	ldr	r0, [pc, #308]	@ (8003418 <menu+0x22bc>)
 80032e2:	f008 f94d 	bl	800b580 <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10d      	bne.n	8003308 <menu+0x21ac>
 80032ec:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <menu+0x22c0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d006      	beq.n	8003308 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80032fa:	4b44      	ldr	r3, [pc, #272]	@ (800340c <menu+0x22b0>)
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	4b48      	ldr	r3, [pc, #288]	@ (8003420 <menu+0x22c4>)
 8003300:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003302:	4b48      	ldr	r3, [pc, #288]	@ (8003424 <menu+0x22c8>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003308:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <menu+0x22cc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b1b      	cmp	r3, #27
 800330e:	d166      	bne.n	80033de <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003310:	4a46      	ldr	r2, [pc, #280]	@ (800342c <menu+0x22d0>)
 8003312:	2101      	movs	r1, #1
 8003314:	2001      	movs	r0, #1
 8003316:	f006 fe09 	bl	8009f2c <lcd_print>

		if(buzzer == 0) {
 800331a:	4b45      	ldr	r3, [pc, #276]	@ (8003430 <menu+0x22d4>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003322:	4a44      	ldr	r2, [pc, #272]	@ (8003434 <menu+0x22d8>)
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f006 fe00 	bl	8009f2c <lcd_print>
 800332c:	e008      	b.n	8003340 <menu+0x21e4>
		} else if(buzzer == 1) {
 800332e:	4b40      	ldr	r3, [pc, #256]	@ (8003430 <menu+0x22d4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d104      	bne.n	8003340 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003336:	4a40      	ldr	r2, [pc, #256]	@ (8003438 <menu+0x22dc>)
 8003338:	2101      	movs	r1, #1
 800333a:	2002      	movs	r0, #2
 800333c:	f006 fdf6 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003340:	2102      	movs	r1, #2
 8003342:	4835      	ldr	r0, [pc, #212]	@ (8003418 <menu+0x22bc>)
 8003344:	f008 f91c 	bl	800b580 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	d115      	bne.n	800337a <menu+0x221e>
 800334e:	4b33      	ldr	r3, [pc, #204]	@ (800341c <menu+0x22c0>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <menu+0x221e>
			buzzer = buzzer + 1;
 800335c:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <menu+0x22d4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <menu+0x22d4>)
 8003366:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003368:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <menu+0x22d4>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d902      	bls.n	8003376 <menu+0x221a>
				buzzer = 0;
 8003370:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <menu+0x22d4>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003376:	f000 fc0d 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800337a:	2104      	movs	r1, #4
 800337c:	4826      	ldr	r0, [pc, #152]	@ (8003418 <menu+0x22bc>)
 800337e:	f008 f8ff 	bl	800b580 <HAL_GPIO_ReadPin>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d115      	bne.n	80033b4 <menu+0x2258>
 8003388:	4b24      	ldr	r3, [pc, #144]	@ (800341c <menu+0x22c0>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	f083 0301 	eor.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <menu+0x2258>
			buzzer = buzzer - 1;
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <menu+0x22d4>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b24      	ldr	r3, [pc, #144]	@ (8003430 <menu+0x22d4>)
 80033a0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80033a2:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <menu+0x22d4>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <menu+0x2254>
		   		buzzer = 1;
 80033aa:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <menu+0x22d4>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033b0:	f000 fbf0 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b4:	2108      	movs	r1, #8
 80033b6:	4818      	ldr	r0, [pc, #96]	@ (8003418 <menu+0x22bc>)
 80033b8:	f008 f8e2 	bl	800b580 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <menu+0x2282>
 80033c2:	4b16      	ldr	r3, [pc, #88]	@ (800341c <menu+0x22c0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <menu+0x2282>
			eepromData[25] = buzzer;
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <menu+0x22d4>)
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <menu+0x22c4>)
 80033d6:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <menu+0x22c8>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <menu+0x22cc>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b1c      	cmp	r3, #28
 80033e4:	f040 8088 	bne.w	80034f8 <menu+0x239c>
		calismaSayModu = 0;
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <menu+0x22e0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80033ee:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <menu+0x22e4>)
 80033f0:	2101      	movs	r1, #1
 80033f2:	2001      	movs	r0, #1
 80033f4:	f006 fd9a 	bl	8009f2c <lcd_print>

		if(demoMode == 0) {
 80033f8:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <menu+0x22e8>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d123      	bne.n	8003448 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <menu+0x22d8>)
 8003402:	2101      	movs	r1, #1
 8003404:	2002      	movs	r0, #2
 8003406:	f006 fd91 	bl	8009f2c <lcd_print>
 800340a:	e026      	b.n	800345a <menu+0x22fe>
 800340c:	200010d4 	.word	0x200010d4
 8003410:	200014c8 	.word	0x200014c8
 8003414:	2000105c 	.word	0x2000105c
 8003418:	40010800 	.word	0x40010800
 800341c:	200010eb 	.word	0x200010eb
 8003420:	20000fec 	.word	0x20000fec
 8003424:	200010e8 	.word	0x200010e8
 8003428:	200010bc 	.word	0x200010bc
 800342c:	20000128 	.word	0x20000128
 8003430:	200010d8 	.word	0x200010d8
 8003434:	2000139c 	.word	0x2000139c
 8003438:	200013b0 	.word	0x200013b0
 800343c:	200010dc 	.word	0x200010dc
 8003440:	2000013c 	.word	0x2000013c
 8003444:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003448:	4b86      	ldr	r3, [pc, #536]	@ (8003664 <menu+0x2508>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d104      	bne.n	800345a <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003450:	4a85      	ldr	r2, [pc, #532]	@ (8003668 <menu+0x250c>)
 8003452:	2101      	movs	r1, #1
 8003454:	2002      	movs	r0, #2
 8003456:	f006 fd69 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800345a:	2102      	movs	r1, #2
 800345c:	4883      	ldr	r0, [pc, #524]	@ (800366c <menu+0x2510>)
 800345e:	f008 f88f 	bl	800b580 <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <menu+0x2338>
 8003468:	4b81      	ldr	r3, [pc, #516]	@ (8003670 <menu+0x2514>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <menu+0x2338>
			demoMode = demoMode + 1;
 8003476:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <menu+0x2508>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b79      	ldr	r3, [pc, #484]	@ (8003664 <menu+0x2508>)
 8003480:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003482:	4b78      	ldr	r3, [pc, #480]	@ (8003664 <menu+0x2508>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d902      	bls.n	8003490 <menu+0x2334>
				demoMode = 0;
 800348a:	4b76      	ldr	r3, [pc, #472]	@ (8003664 <menu+0x2508>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003490:	f000 fb80 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003494:	2104      	movs	r1, #4
 8003496:	4875      	ldr	r0, [pc, #468]	@ (800366c <menu+0x2510>)
 8003498:	f008 f872 	bl	800b580 <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d115      	bne.n	80034ce <menu+0x2372>
 80034a2:	4b73      	ldr	r3, [pc, #460]	@ (8003670 <menu+0x2514>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f083 0301 	eor.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <menu+0x2372>
			demoMode = demoMode - 1;
 80034b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003664 <menu+0x2508>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <menu+0x2508>)
 80034ba:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80034bc:	4b69      	ldr	r3, [pc, #420]	@ (8003664 <menu+0x2508>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <menu+0x236e>
		   		demoMode = 1;
 80034c4:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <menu+0x2508>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ca:	f000 fb63 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ce:	2108      	movs	r1, #8
 80034d0:	4866      	ldr	r0, [pc, #408]	@ (800366c <menu+0x2510>)
 80034d2:	f008 f855 	bl	800b580 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10d      	bne.n	80034f8 <menu+0x239c>
 80034dc:	4b64      	ldr	r3, [pc, #400]	@ (8003670 <menu+0x2514>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <menu+0x239c>
			eepromData[26] = demoMode;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <menu+0x2508>)
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b61      	ldr	r3, [pc, #388]	@ (8003674 <menu+0x2518>)
 80034f0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80034f2:	4b61      	ldr	r3, [pc, #388]	@ (8003678 <menu+0x251c>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80034f8:	4b60      	ldr	r3, [pc, #384]	@ (800367c <menu+0x2520>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b1d      	cmp	r3, #29
 80034fe:	f040 80e5 	bne.w	80036cc <menu+0x2570>
		finalCount=0;
 8003502:	4b5f      	ldr	r3, [pc, #380]	@ (8003680 <menu+0x2524>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003508:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <menu+0x2528>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d141      	bne.n	8003594 <menu+0x2438>
			lcd_print(1, 1, calismaSayisiText);
 8003510:	4a5d      	ldr	r2, [pc, #372]	@ (8003688 <menu+0x252c>)
 8003512:	2101      	movs	r1, #1
 8003514:	2001      	movs	r0, #1
 8003516:	f006 fd09 	bl	8009f2c <lcd_print>

			if(demoMode == 1) {
 800351a:	4b52      	ldr	r3, [pc, #328]	@ (8003664 <menu+0x2508>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d113      	bne.n	800354a <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003522:	4b5a      	ldr	r3, [pc, #360]	@ (800368c <menu+0x2530>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4613      	mov	r3, r2
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	1a9a      	subs	r2, r3, r2
 800352e:	4b54      	ldr	r3, [pc, #336]	@ (8003680 <menu+0x2524>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <menu+0x2524>)
 8003536:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003538:	4b55      	ldr	r3, [pc, #340]	@ (8003690 <menu+0x2534>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <menu+0x2524>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4413      	add	r3, r2
 8003544:	4a4e      	ldr	r2, [pc, #312]	@ (8003680 <menu+0x2524>)
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e012      	b.n	8003570 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 800354a:	4b52      	ldr	r3, [pc, #328]	@ (8003694 <menu+0x2538>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4613      	mov	r3, r2
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	1a9a      	subs	r2, r3, r2
 8003556:	4b4a      	ldr	r3, [pc, #296]	@ (8003680 <menu+0x2524>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a48      	ldr	r2, [pc, #288]	@ (8003680 <menu+0x2524>)
 800355e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003560:	4b4d      	ldr	r3, [pc, #308]	@ (8003698 <menu+0x253c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <menu+0x2524>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a44      	ldr	r2, [pc, #272]	@ (8003680 <menu+0x2524>)
 800356e:	6013      	str	r3, [r2, #0]
			}

			itoa(finalCount, snum, 10);
 8003570:	4b43      	ldr	r3, [pc, #268]	@ (8003680 <menu+0x2524>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	220a      	movs	r2, #10
 8003576:	4949      	ldr	r1, [pc, #292]	@ (800369c <menu+0x2540>)
 8003578:	4618      	mov	r0, r3
 800357a:	f00b f82d 	bl	800e5d8 <itoa>
			lcd_print(2, 10, snum);
 800357e:	4a47      	ldr	r2, [pc, #284]	@ (800369c <menu+0x2540>)
 8003580:	210a      	movs	r1, #10
 8003582:	2002      	movs	r0, #2
 8003584:	f006 fcd2 	bl	8009f2c <lcd_print>

			lcd_print(2, 1, "           ");
 8003588:	4a45      	ldr	r2, [pc, #276]	@ (80036a0 <menu+0x2544>)
 800358a:	2101      	movs	r1, #1
 800358c:	2002      	movs	r0, #2
 800358e:	f006 fccd 	bl	8009f2c <lcd_print>
 8003592:	e00d      	b.n	80035b0 <menu+0x2454>
		} else if(calismaSayModu == 1) {
 8003594:	4b3b      	ldr	r3, [pc, #236]	@ (8003684 <menu+0x2528>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d109      	bne.n	80035b0 <menu+0x2454>
			lcd_print(1, 1, calismaSayisiText);
 800359c:	4a3a      	ldr	r2, [pc, #232]	@ (8003688 <menu+0x252c>)
 800359e:	2101      	movs	r1, #1
 80035a0:	2001      	movs	r0, #1
 80035a2:	f006 fcc3 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80035a6:	4a3f      	ldr	r2, [pc, #252]	@ (80036a4 <menu+0x2548>)
 80035a8:	2101      	movs	r1, #1
 80035aa:	2002      	movs	r0, #2
 80035ac:	f006 fcbe 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035b0:	2102      	movs	r1, #2
 80035b2:	482e      	ldr	r0, [pc, #184]	@ (800366c <menu+0x2510>)
 80035b4:	f007 ffe4 	bl	800b580 <HAL_GPIO_ReadPin>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d115      	bne.n	80035ea <menu+0x248e>
 80035be:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <menu+0x2514>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	f083 0301 	eor.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <menu+0x248e>
			calismaSayModu = calismaSayModu + 1;
 80035cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <menu+0x2528>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003684 <menu+0x2528>)
 80035d6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80035d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <menu+0x2528>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d902      	bls.n	80035e6 <menu+0x248a>
				calismaSayModu = 0;
 80035e0:	4b28      	ldr	r3, [pc, #160]	@ (8003684 <menu+0x2528>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035e6:	f000 fad5 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ea:	2104      	movs	r1, #4
 80035ec:	481f      	ldr	r0, [pc, #124]	@ (800366c <menu+0x2510>)
 80035ee:	f007 ffc7 	bl	800b580 <HAL_GPIO_ReadPin>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d115      	bne.n	8003624 <menu+0x24c8>
 80035f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <menu+0x2514>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f083 0301 	eor.w	r3, r3, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <menu+0x24c8>
			calismaSayModu = calismaSayModu - 1;
 8003606:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <menu+0x2528>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <menu+0x2528>)
 8003610:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003612:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <menu+0x2528>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <menu+0x24c4>
		   		calismaSayModu = 1;
 800361a:	4b1a      	ldr	r3, [pc, #104]	@ (8003684 <menu+0x2528>)
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003620:	f000 fab8 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003624:	2108      	movs	r1, #8
 8003626:	4811      	ldr	r0, [pc, #68]	@ (800366c <menu+0x2510>)
 8003628:	f007 ffaa 	bl	800b580 <HAL_GPIO_ReadPin>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d14c      	bne.n	80036cc <menu+0x2570>
 8003632:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <menu+0x2514>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	f083 0301 	eor.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d045      	beq.n	80036cc <menu+0x2570>
			if(demoMode == 1) {
 8003640:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <menu+0x2508>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d12f      	bne.n	80036a8 <menu+0x254c>
				eepromData[28] = 0;
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <menu+0x2518>)
 800364a:	2200      	movs	r2, #0
 800364c:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <menu+0x2518>)
 8003650:	2200      	movs	r2, #0
 8003652:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003654:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <menu+0x2534>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800365a:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <menu+0x2530>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e02e      	b.n	80036c0 <menu+0x2564>
 8003662:	bf00      	nop
 8003664:	200010da 	.word	0x200010da
 8003668:	200013b0 	.word	0x200013b0
 800366c:	40010800 	.word	0x40010800
 8003670:	200010eb 	.word	0x200010eb
 8003674:	20000fec 	.word	0x20000fec
 8003678:	200010e8 	.word	0x200010e8
 800367c:	200010bc 	.word	0x200010bc
 8003680:	200010b8 	.word	0x200010b8
 8003684:	200010dc 	.word	0x200010dc
 8003688:	2000170c 	.word	0x2000170c
 800368c:	200010b7 	.word	0x200010b7
 8003690:	200010b5 	.word	0x200010b5
 8003694:	200010b6 	.word	0x200010b6
 8003698:	200010b4 	.word	0x200010b4
 800369c:	2000105c 	.word	0x2000105c
 80036a0:	0800f3dc 	.word	0x0800f3dc
 80036a4:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 80036a8:	4b49      	ldr	r3, [pc, #292]	@ (80037d0 <menu+0x2674>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 80036ae:	4b48      	ldr	r3, [pc, #288]	@ (80037d0 <menu+0x2674>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 80036b4:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <menu+0x2678>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 80036ba:	4b47      	ldr	r3, [pc, #284]	@ (80037d8 <menu+0x267c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 80036c0:	4b46      	ldr	r3, [pc, #280]	@ (80037dc <menu+0x2680>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80036c6:	4b46      	ldr	r3, [pc, #280]	@ (80037e0 <menu+0x2684>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80036cc:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <menu+0x2688>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b1e      	cmp	r3, #30
 80036d2:	d166      	bne.n	80037a2 <menu+0x2646>
		calismaSayModu = 0;
 80036d4:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <menu+0x2680>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80036da:	4a43      	ldr	r2, [pc, #268]	@ (80037e8 <menu+0x268c>)
 80036dc:	2101      	movs	r1, #1
 80036de:	2001      	movs	r0, #1
 80036e0:	f006 fc24 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80036e4:	4a41      	ldr	r2, [pc, #260]	@ (80037ec <menu+0x2690>)
 80036e6:	2101      	movs	r1, #1
 80036e8:	2002      	movs	r0, #2
 80036ea:	f006 fc1f 	bl	8009f2c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ee:	2102      	movs	r1, #2
 80036f0:	483f      	ldr	r0, [pc, #252]	@ (80037f0 <menu+0x2694>)
 80036f2:	f007 ff45 	bl	800b580 <HAL_GPIO_ReadPin>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d11a      	bne.n	8003732 <menu+0x25d6>
 80036fc:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <menu+0x2698>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f083 0301 	eor.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <menu+0x25d6>
			dilSecim = dilSecim + 1;
 800370a:	4b3b      	ldr	r3, [pc, #236]	@ (80037f8 <menu+0x269c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b39      	ldr	r3, [pc, #228]	@ (80037f8 <menu+0x269c>)
 8003714:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003716:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <menu+0x269c>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d902      	bls.n	8003724 <menu+0x25c8>
				dilSecim = 0;
 800371e:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <menu+0x269c>)
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003724:	4b34      	ldr	r3, [pc, #208]	@ (80037f8 <menu+0x269c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 ff09 	bl	8007540 <loadMenuTexts>

			bekle();
 800372e:	f000 fa31 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003732:	2104      	movs	r1, #4
 8003734:	482e      	ldr	r0, [pc, #184]	@ (80037f0 <menu+0x2694>)
 8003736:	f007 ff23 	bl	800b580 <HAL_GPIO_ReadPin>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d11a      	bne.n	8003776 <menu+0x261a>
 8003740:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <menu+0x2698>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <menu+0x261a>
			dilSecim = dilSecim - 1;
 800374e:	4b2a      	ldr	r3, [pc, #168]	@ (80037f8 <menu+0x269c>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	3b01      	subs	r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b28      	ldr	r3, [pc, #160]	@ (80037f8 <menu+0x269c>)
 8003758:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800375a:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <menu+0x269c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <menu+0x260c>
		   		dilSecim = 1;
 8003762:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <menu+0x269c>)
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003768:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <menu+0x269c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 fee7 	bl	8007540 <loadMenuTexts>

			bekle();
 8003772:	f000 fa0f 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003776:	2108      	movs	r1, #8
 8003778:	481d      	ldr	r0, [pc, #116]	@ (80037f0 <menu+0x2694>)
 800377a:	f007 ff01 	bl	800b580 <HAL_GPIO_ReadPin>
 800377e:	4603      	mov	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d10e      	bne.n	80037a2 <menu+0x2646>
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <menu+0x2698>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f083 0301 	eor.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <menu+0x2646>
			eepromData[33] = dilSecim;
 8003792:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <menu+0x269c>)
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <menu+0x2674>)
 8003798:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <menu+0x2684>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <menu+0x2688>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b1f      	cmp	r3, #31
 80037a8:	f040 8087 	bne.w	80038ba <menu+0x275e>
		calismaSayModu = 0;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <menu+0x2680>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 80037b2:	4a12      	ldr	r2, [pc, #72]	@ (80037fc <menu+0x26a0>)
 80037b4:	2101      	movs	r1, #1
 80037b6:	2001      	movs	r0, #1
 80037b8:	f006 fbb8 	bl	8009f2c <lcd_print>

		if(iotMode == 0) {
 80037bc:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <menu+0x26a4>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d121      	bne.n	8003808 <menu+0x26ac>
			lcd_print(2, 1, pasifText);
 80037c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003804 <menu+0x26a8>)
 80037c6:	2101      	movs	r1, #1
 80037c8:	2002      	movs	r0, #2
 80037ca:	f006 fbaf 	bl	8009f2c <lcd_print>
 80037ce:	e024      	b.n	800381a <menu+0x26be>
 80037d0:	20000fec 	.word	0x20000fec
 80037d4:	200010b4 	.word	0x200010b4
 80037d8:	200010b6 	.word	0x200010b6
 80037dc:	200010dc 	.word	0x200010dc
 80037e0:	200010e8 	.word	0x200010e8
 80037e4:	200010bc 	.word	0x200010bc
 80037e8:	20001734 	.word	0x20001734
 80037ec:	20001748 	.word	0x20001748
 80037f0:	40010800 	.word	0x40010800
 80037f4:	200010eb 	.word	0x200010eb
 80037f8:	200010dd 	.word	0x200010dd
 80037fc:	20000150 	.word	0x20000150
 8003800:	200010db 	.word	0x200010db
 8003804:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 8003808:	4ba0      	ldr	r3, [pc, #640]	@ (8003a8c <menu+0x2930>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d104      	bne.n	800381a <menu+0x26be>
			lcd_print(2, 1, aktifText);
 8003810:	4a9f      	ldr	r2, [pc, #636]	@ (8003a90 <menu+0x2934>)
 8003812:	2101      	movs	r1, #1
 8003814:	2002      	movs	r0, #2
 8003816:	f006 fb89 	bl	8009f2c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800381a:	2102      	movs	r1, #2
 800381c:	489d      	ldr	r0, [pc, #628]	@ (8003a94 <menu+0x2938>)
 800381e:	f007 feaf 	bl	800b580 <HAL_GPIO_ReadPin>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d115      	bne.n	8003854 <menu+0x26f8>
 8003828:	4b9b      	ldr	r3, [pc, #620]	@ (8003a98 <menu+0x293c>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	f083 0301 	eor.w	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <menu+0x26f8>
			iotMode = iotMode + 1;
 8003836:	4b95      	ldr	r3, [pc, #596]	@ (8003a8c <menu+0x2930>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	3301      	adds	r3, #1
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b93      	ldr	r3, [pc, #588]	@ (8003a8c <menu+0x2930>)
 8003840:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003842:	4b92      	ldr	r3, [pc, #584]	@ (8003a8c <menu+0x2930>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d902      	bls.n	8003850 <menu+0x26f4>
				iotMode = 0;
 800384a:	4b90      	ldr	r3, [pc, #576]	@ (8003a8c <menu+0x2930>)
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003850:	f000 f9a0 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003854:	2104      	movs	r1, #4
 8003856:	488f      	ldr	r0, [pc, #572]	@ (8003a94 <menu+0x2938>)
 8003858:	f007 fe92 	bl	800b580 <HAL_GPIO_ReadPin>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d115      	bne.n	800388e <menu+0x2732>
 8003862:	4b8d      	ldr	r3, [pc, #564]	@ (8003a98 <menu+0x293c>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	f083 0301 	eor.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <menu+0x2732>
			iotMode = iotMode - 1;
 8003870:	4b86      	ldr	r3, [pc, #536]	@ (8003a8c <menu+0x2930>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	4b84      	ldr	r3, [pc, #528]	@ (8003a8c <menu+0x2930>)
 800387a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800387c:	4b83      	ldr	r3, [pc, #524]	@ (8003a8c <menu+0x2930>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <menu+0x272e>
		   		iotMode = 1;
 8003884:	4b81      	ldr	r3, [pc, #516]	@ (8003a8c <menu+0x2930>)
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800388a:	f000 f983 	bl	8003b94 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800388e:	2108      	movs	r1, #8
 8003890:	4880      	ldr	r0, [pc, #512]	@ (8003a94 <menu+0x2938>)
 8003892:	f007 fe75 	bl	800b580 <HAL_GPIO_ReadPin>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10e      	bne.n	80038ba <menu+0x275e>
 800389c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a98 <menu+0x293c>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	f083 0301 	eor.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <menu+0x275e>
			eepromData[48] = iotMode;
 80038aa:	4b78      	ldr	r3, [pc, #480]	@ (8003a8c <menu+0x2930>)
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	4b7b      	ldr	r3, [pc, #492]	@ (8003a9c <menu+0x2940>)
 80038b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 80038b4:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa0 <menu+0x2944>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80038ba:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa4 <menu+0x2948>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d127      	bne.n	8003912 <menu+0x27b6>
		calismaSayModu = 0;
 80038c2:	4b79      	ldr	r3, [pc, #484]	@ (8003aa8 <menu+0x294c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 80038c8:	4a78      	ldr	r2, [pc, #480]	@ (8003aac <menu+0x2950>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	2001      	movs	r0, #1
 80038ce:	f006 fb2d 	bl	8009f2c <lcd_print>

		convertArrays(1);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f7fc fef8 	bl	80006c8 <convertArrays>
		HAL_Delay(50);
 80038d8:	2032      	movs	r0, #50	@ 0x32
 80038da:	f007 f881 	bl	800a9e0 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80038de:	2001      	movs	r0, #1
 80038e0:	f7fd fbe0 	bl	80010a4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038e4:	2102      	movs	r1, #2
 80038e6:	486b      	ldr	r0, [pc, #428]	@ (8003a94 <menu+0x2938>)
 80038e8:	f007 fe4a 	bl	800b580 <HAL_GPIO_ReadPin>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10f      	bne.n	8003912 <menu+0x27b6>
 80038f2:	2104      	movs	r1, #4
 80038f4:	4867      	ldr	r0, [pc, #412]	@ (8003a94 <menu+0x2938>)
 80038f6:	f007 fe43 	bl	800b580 <HAL_GPIO_ReadPin>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d108      	bne.n	8003912 <menu+0x27b6>
 8003900:	4b65      	ldr	r3, [pc, #404]	@ (8003a98 <menu+0x293c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f083 0301 	eor.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <menu+0x27b6>
			takeMachineIDWithConfirmation();
 800390e:	f005 fa9d 	bl	8008e4c <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003912:	4b64      	ldr	r3, [pc, #400]	@ (8003aa4 <menu+0x2948>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b21      	cmp	r3, #33	@ 0x21
 8003918:	d12b      	bne.n	8003972 <menu+0x2816>
		calismaSayModu = 0;
 800391a:	4b63      	ldr	r3, [pc, #396]	@ (8003aa8 <menu+0x294c>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003920:	2002      	movs	r0, #2
 8003922:	f7fc fed1 	bl	80006c8 <convertArrays>
		HAL_Delay(50);
 8003926:	2032      	movs	r0, #50	@ 0x32
 8003928:	f007 f85a 	bl	800a9e0 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 800392c:	2002      	movs	r0, #2
 800392e:	f7fd fbb9 	bl	80010a4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003932:	2102      	movs	r1, #2
 8003934:	4857      	ldr	r0, [pc, #348]	@ (8003a94 <menu+0x2938>)
 8003936:	f007 fe23 	bl	800b580 <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d118      	bne.n	8003972 <menu+0x2816>
 8003940:	2104      	movs	r1, #4
 8003942:	4854      	ldr	r0, [pc, #336]	@ (8003a94 <menu+0x2938>)
 8003944:	f007 fe1c 	bl	800b580 <HAL_GPIO_ReadPin>
 8003948:	4603      	mov	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d111      	bne.n	8003972 <menu+0x2816>
 800394e:	4b52      	ldr	r3, [pc, #328]	@ (8003a98 <menu+0x293c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f083 0301 	eor.w	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <menu+0x2816>
			takeWifiSSID();
 800395c:	f005 fc8e 	bl	800927c <takeWifiSSID>

			convertArrays(2);
 8003960:	2002      	movs	r0, #2
 8003962:	f7fc feb1 	bl	80006c8 <convertArrays>
			HAL_Delay(50);
 8003966:	2032      	movs	r0, #50	@ 0x32
 8003968:	f007 f83a 	bl	800a9e0 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 800396c:	2002      	movs	r0, #2
 800396e:	f7fd fb99 	bl	80010a4 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003972:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa4 <menu+0x2948>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b22      	cmp	r3, #34	@ 0x22
 8003978:	d12b      	bne.n	80039d2 <menu+0x2876>
		calismaSayModu = 0;
 800397a:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa8 <menu+0x294c>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003980:	2003      	movs	r0, #3
 8003982:	f7fc fea1 	bl	80006c8 <convertArrays>
		HAL_Delay(50);
 8003986:	2032      	movs	r0, #50	@ 0x32
 8003988:	f007 f82a 	bl	800a9e0 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 800398c:	2003      	movs	r0, #3
 800398e:	f7fd fb89 	bl	80010a4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003992:	2102      	movs	r1, #2
 8003994:	483f      	ldr	r0, [pc, #252]	@ (8003a94 <menu+0x2938>)
 8003996:	f007 fdf3 	bl	800b580 <HAL_GPIO_ReadPin>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d118      	bne.n	80039d2 <menu+0x2876>
 80039a0:	2104      	movs	r1, #4
 80039a2:	483c      	ldr	r0, [pc, #240]	@ (8003a94 <menu+0x2938>)
 80039a4:	f007 fdec 	bl	800b580 <HAL_GPIO_ReadPin>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d111      	bne.n	80039d2 <menu+0x2876>
 80039ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003a98 <menu+0x293c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	f083 0301 	eor.w	r3, r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <menu+0x2876>
			takeWifiPass();
 80039bc:	f005 fe1c 	bl	80095f8 <takeWifiPass>

			convertArrays(3);
 80039c0:	2003      	movs	r0, #3
 80039c2:	f7fc fe81 	bl	80006c8 <convertArrays>
			HAL_Delay(50);
 80039c6:	2032      	movs	r0, #50	@ 0x32
 80039c8:	f007 f80a 	bl	800a9e0 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 80039cc:	2003      	movs	r0, #3
 80039ce:	f7fd fb69 	bl	80010a4 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 80039d2:	4b34      	ldr	r3, [pc, #208]	@ (8003aa4 <menu+0x2948>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b23      	cmp	r3, #35	@ 0x23
 80039d8:	d154      	bne.n	8003a84 <menu+0x2928>
		lcd_print(1, 1, menudenCikisText);
 80039da:	4a35      	ldr	r2, [pc, #212]	@ (8003ab0 <menu+0x2954>)
 80039dc:	2101      	movs	r1, #1
 80039de:	2001      	movs	r0, #1
 80039e0:	f006 faa4 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80039e4:	4a33      	ldr	r2, [pc, #204]	@ (8003ab4 <menu+0x2958>)
 80039e6:	2101      	movs	r1, #1
 80039e8:	2002      	movs	r0, #2
 80039ea:	f006 fa9f 	bl	8009f2c <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80039ee:	2108      	movs	r1, #8
 80039f0:	4828      	ldr	r0, [pc, #160]	@ (8003a94 <menu+0x2938>)
 80039f2:	f007 fdc5 	bl	800b580 <HAL_GPIO_ReadPin>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d143      	bne.n	8003a84 <menu+0x2928>
			menuGiris = 0;
 80039fc:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab8 <menu+0x295c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003a02:	f006 ffe3 	bl	800a9cc <HAL_GetTick>
 8003a06:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003a08:	e007      	b.n	8003a1a <menu+0x28be>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003a0a:	f006 ffdf 	bl	800a9cc <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a18:	d806      	bhi.n	8003a28 <menu+0x28cc>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003a1a:	4828      	ldr	r0, [pc, #160]	@ (8003abc <menu+0x2960>)
 8003a1c:	f008 fbd9 	bl	800c1d2 <HAL_I2C_GetError>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d0f1      	beq.n	8003a0a <menu+0x28ae>
 8003a26:	e000      	b.n	8003a2a <menu+0x28ce>
			        break;
 8003a28:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003a2a:	f006 ffcf 	bl	800a9cc <HAL_GetTick>
 8003a2e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003a30:	e007      	b.n	8003a42 <menu+0x28e6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003a32:	f006 ffcb 	bl	800a9cc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a40:	d806      	bhi.n	8003a50 <menu+0x28f4>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003a42:	481e      	ldr	r0, [pc, #120]	@ (8003abc <menu+0x2960>)
 8003a44:	f008 fbb8 	bl	800c1b8 <HAL_I2C_GetState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d1f1      	bne.n	8003a32 <menu+0x28d6>
 8003a4e:	e000      	b.n	8003a52 <menu+0x28f6>
			        break;
 8003a50:	bf00      	nop
			    }
			}

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003a52:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	236e      	movs	r3, #110	@ 0x6e
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <menu+0x2940>)
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	236e      	movs	r3, #110	@ 0x6e
 8003a62:	2200      	movs	r2, #0
 8003a64:	21a0      	movs	r1, #160	@ 0xa0
 8003a66:	4815      	ldr	r0, [pc, #84]	@ (8003abc <menu+0x2960>)
 8003a68:	f008 f844 	bl	800baf4 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003a6c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003a70:	f006 ffb6 	bl	800a9e0 <HAL_Delay>

			lcd_clear();
 8003a74:	f006 fa86 	bl	8009f84 <lcd_clear>
			HAL_Delay(500);
 8003a78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a7c:	f006 ffb0 	bl	800a9e0 <HAL_Delay>
			NVIC_SystemReset();
 8003a80:	f7fd fb56 	bl	8001130 <__NVIC_SystemReset>
		}
	}
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200010db 	.word	0x200010db
 8003a90:	200013b0 	.word	0x200013b0
 8003a94:	40010800 	.word	0x40010800
 8003a98:	200010eb 	.word	0x200010eb
 8003a9c:	20000fec 	.word	0x20000fec
 8003aa0:	200010e8 	.word	0x200010e8
 8003aa4:	200010bc 	.word	0x200010bc
 8003aa8:	200010dc 	.word	0x200010dc
 8003aac:	200018c4 	.word	0x200018c4
 8003ab0:	2000175c 	.word	0x2000175c
 8003ab4:	20001770 	.word	0x20001770
 8003ab8:	200010d9 	.word	0x200010d9
 8003abc:	2000193c 	.word	0x2000193c

08003ac0 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003ad0:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <lcdUpdate+0x9c>)
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	2002      	movs	r0, #2
 8003ad6:	f006 fa29 	bl	8009f2c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003ada:	e03b      	b.n	8003b54 <lcdUpdate+0x94>
	} else if(y==2) {
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d105      	bne.n	8003aee <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b5c <lcdUpdate+0x9c>)
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	f006 fa20 	bl	8009f2c <lcd_print>
}
 8003aec:	e032      	b.n	8003b54 <lcdUpdate+0x94>
	} else if(y==3) {
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d105      	bne.n	8003b00 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <lcdUpdate+0x9c>)
 8003af6:	2103      	movs	r1, #3
 8003af8:	2002      	movs	r0, #2
 8003afa:	f006 fa17 	bl	8009f2c <lcd_print>
}
 8003afe:	e029      	b.n	8003b54 <lcdUpdate+0x94>
	} else if(y==4) {
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d105      	bne.n	8003b12 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003b06:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <lcdUpdate+0x9c>)
 8003b08:	2104      	movs	r1, #4
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f006 fa0e 	bl	8009f2c <lcd_print>
}
 8003b10:	e020      	b.n	8003b54 <lcdUpdate+0x94>
	} else if(y==5) {
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d105      	bne.n	8003b24 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003b18:	4a10      	ldr	r2, [pc, #64]	@ (8003b5c <lcdUpdate+0x9c>)
 8003b1a:	2105      	movs	r1, #5
 8003b1c:	2002      	movs	r0, #2
 8003b1e:	f006 fa05 	bl	8009f2c <lcd_print>
}
 8003b22:	e017      	b.n	8003b54 <lcdUpdate+0x94>
	} else if(y==6) {
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d105      	bne.n	8003b36 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b5c <lcdUpdate+0x9c>)
 8003b2c:	2106      	movs	r1, #6
 8003b2e:	2002      	movs	r0, #2
 8003b30:	f006 f9fc 	bl	8009f2c <lcd_print>
}
 8003b34:	e00e      	b.n	8003b54 <lcdUpdate+0x94>
	} else if (y==7) {
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d10b      	bne.n	8003b54 <lcdUpdate+0x94>
		lcd_clear();
 8003b3c:	f006 fa22 	bl	8009f84 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003b40:	4a07      	ldr	r2, [pc, #28]	@ (8003b60 <lcdUpdate+0xa0>)
 8003b42:	2101      	movs	r1, #1
 8003b44:	2001      	movs	r0, #1
 8003b46:	f006 f9f1 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003b4a:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <lcdUpdate+0xa4>)
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f006 f9ec 	bl	8009f2c <lcd_print>
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	0800f3e8 	.word	0x0800f3e8
 8003b60:	200000c4 	.word	0x200000c4
 8003b64:	200000d8 	.word	0x200000d8

08003b68 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <checkLCDBacklight+0x24>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <checkLCDBacklight+0x28>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b3b      	cmp	r3, #59	@ 0x3b
 8003b78:	d903      	bls.n	8003b82 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f006 fa22 	bl	8009fc4 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003b80:	e002      	b.n	8003b88 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003b82:	2001      	movs	r0, #1
 8003b84:	f006 fa1e 	bl	8009fc4 <lcd_backlight>
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20001094 	.word	0x20001094
 8003b90:	200010b0 	.word	0x200010b0

08003b94 <bekle>:

void bekle() {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	timer1=millis;
 8003b98:	4b47      	ldr	r3, [pc, #284]	@ (8003cb8 <bekle+0x124>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a47      	ldr	r2, [pc, #284]	@ (8003cbc <bekle+0x128>)
 8003b9e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ba0:	e002      	b.n	8003ba8 <bekle+0x14>
    	butonKontrol = 1;
 8003ba2:	4b47      	ldr	r3, [pc, #284]	@ (8003cc0 <bekle+0x12c>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4846      	ldr	r0, [pc, #280]	@ (8003cc4 <bekle+0x130>)
 8003bac:	f007 fce8 	bl	800b580 <HAL_GPIO_ReadPin>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d109      	bne.n	8003bca <bekle+0x36>
 8003bb6:	4b40      	ldr	r3, [pc, #256]	@ (8003cb8 <bekle+0x124>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b40      	ldr	r3, [pc, #256]	@ (8003cbc <bekle+0x128>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d0ef      	beq.n	8003ba2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bc2:	e002      	b.n	8003bca <bekle+0x36>
    	butonKontrol = 1;
 8003bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc0 <bekle+0x12c>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bca:	2108      	movs	r1, #8
 8003bcc:	483e      	ldr	r0, [pc, #248]	@ (8003cc8 <bekle+0x134>)
 8003bce:	f007 fcd7 	bl	800b580 <HAL_GPIO_ReadPin>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d109      	bne.n	8003bec <bekle+0x58>
 8003bd8:	4b37      	ldr	r3, [pc, #220]	@ (8003cb8 <bekle+0x124>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b37      	ldr	r3, [pc, #220]	@ (8003cbc <bekle+0x128>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d0ef      	beq.n	8003bc4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003be4:	e002      	b.n	8003bec <bekle+0x58>
    	butonKontrol = 1;
 8003be6:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <bekle+0x12c>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bec:	2102      	movs	r1, #2
 8003bee:	4835      	ldr	r0, [pc, #212]	@ (8003cc4 <bekle+0x130>)
 8003bf0:	f007 fcc6 	bl	800b580 <HAL_GPIO_ReadPin>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d109      	bne.n	8003c0e <bekle+0x7a>
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <bekle+0x124>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003cbc <bekle+0x128>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d0ef      	beq.n	8003be6 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c06:	e002      	b.n	8003c0e <bekle+0x7a>
    	butonKontrol = 1;
 8003c08:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <bekle+0x12c>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c0e:	2104      	movs	r1, #4
 8003c10:	482c      	ldr	r0, [pc, #176]	@ (8003cc4 <bekle+0x130>)
 8003c12:	f007 fcb5 	bl	800b580 <HAL_GPIO_ReadPin>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d109      	bne.n	8003c30 <bekle+0x9c>
 8003c1c:	4b26      	ldr	r3, [pc, #152]	@ (8003cb8 <bekle+0x124>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b26      	ldr	r3, [pc, #152]	@ (8003cbc <bekle+0x128>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d0ef      	beq.n	8003c08 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c28:	e002      	b.n	8003c30 <bekle+0x9c>
    	butonKontrol = 1;
 8003c2a:	4b25      	ldr	r3, [pc, #148]	@ (8003cc0 <bekle+0x12c>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c30:	2108      	movs	r1, #8
 8003c32:	4824      	ldr	r0, [pc, #144]	@ (8003cc4 <bekle+0x130>)
 8003c34:	f007 fca4 	bl	800b580 <HAL_GPIO_ReadPin>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d109      	bne.n	8003c52 <bekle+0xbe>
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <bekle+0x124>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <bekle+0x128>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d0ef      	beq.n	8003c2a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c4a:	e002      	b.n	8003c52 <bekle+0xbe>
    	butonKontrol = 1;
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc0 <bekle+0x12c>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c52:	2180      	movs	r1, #128	@ 0x80
 8003c54:	481c      	ldr	r0, [pc, #112]	@ (8003cc8 <bekle+0x134>)
 8003c56:	f007 fc93 	bl	800b580 <HAL_GPIO_ReadPin>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <bekle+0xe0>
 8003c60:	4b15      	ldr	r3, [pc, #84]	@ (8003cb8 <bekle+0x124>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <bekle+0x128>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d0ef      	beq.n	8003c4c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c6c:	e002      	b.n	8003c74 <bekle+0xe0>
    	butonKontrol = 1;
 8003c6e:	4b14      	ldr	r3, [pc, #80]	@ (8003cc0 <bekle+0x12c>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c78:	4813      	ldr	r0, [pc, #76]	@ (8003cc8 <bekle+0x134>)
 8003c7a:	f007 fc81 	bl	800b580 <HAL_GPIO_ReadPin>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <bekle+0x104>
 8003c84:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <bekle+0x124>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <bekle+0x128>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d0ee      	beq.n	8003c6e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c90:	e002      	b.n	8003c98 <bekle+0x104>
    	butonKontrol = 1;
 8003c92:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <bekle+0x12c>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c9c:	480a      	ldr	r0, [pc, #40]	@ (8003cc8 <bekle+0x134>)
 8003c9e:	f007 fc6f 	bl	800b580 <HAL_GPIO_ReadPin>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <bekle+0x120>
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <bekle+0x124>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <bekle+0x128>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d0ee      	beq.n	8003c92 <bekle+0xfe>
    }

}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20001094 	.word	0x20001094
 8003cbc:	2000109c 	.word	0x2000109c
 8003cc0:	200010eb 	.word	0x200010eb
 8003cc4:	40010800 	.word	0x40010800
 8003cc8:	40011000 	.word	0x40011000

08003ccc <buttonCheck>:

uint8_t buttonCheck(void) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4815      	ldr	r0, [pc, #84]	@ (8003d28 <buttonCheck+0x5c>)
 8003cd4:	f007 fc54 	bl	800b580 <HAL_GPIO_ReadPin>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d01b      	beq.n	8003d16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003cde:	2108      	movs	r1, #8
 8003ce0:	4812      	ldr	r0, [pc, #72]	@ (8003d2c <buttonCheck+0x60>)
 8003ce2:	f007 fc4d 	bl	800b580 <HAL_GPIO_ReadPin>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d014      	beq.n	8003d16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003cec:	2102      	movs	r1, #2
 8003cee:	480e      	ldr	r0, [pc, #56]	@ (8003d28 <buttonCheck+0x5c>)
 8003cf0:	f007 fc46 	bl	800b580 <HAL_GPIO_ReadPin>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d00d      	beq.n	8003d16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003cfa:	2104      	movs	r1, #4
 8003cfc:	480a      	ldr	r0, [pc, #40]	@ (8003d28 <buttonCheck+0x5c>)
 8003cfe:	f007 fc3f 	bl	800b580 <HAL_GPIO_ReadPin>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d006      	beq.n	8003d16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003d08:	2108      	movs	r1, #8
 8003d0a:	4807      	ldr	r0, [pc, #28]	@ (8003d28 <buttonCheck+0x5c>)
 8003d0c:	f007 fc38 	bl	800b580 <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d104      	bne.n	8003d20 <buttonCheck+0x54>
		backLightTimer = 0;
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <buttonCheck+0x64>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
		return 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <buttonCheck+0x56>
	}
	return 0;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40010800 	.word	0x40010800
 8003d2c:	40011000 	.word	0x40011000
 8003d30:	200010b0 	.word	0x200010b0

08003d34 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <checkBasincSalteri+0x54>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <checkBasincSalteri+0x12>
		basincVar=1;
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <checkBasincSalteri+0x58>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <checkBasincSalteri+0x54>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d119      	bne.n	8003d82 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d52:	480f      	ldr	r0, [pc, #60]	@ (8003d90 <checkBasincSalteri+0x5c>)
 8003d54:	f007 fc14 	bl	800b580 <HAL_GPIO_ReadPin>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <checkBasincSalteri+0x60>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <checkBasincSalteri+0x64>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d90a      	bls.n	8003d82 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <checkBasincSalteri+0x58>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003d72:	e006      	b.n	8003d82 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <checkBasincSalteri+0x60>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <checkBasincSalteri+0x64>)
 8003d7a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	@ (8003d8c <checkBasincSalteri+0x58>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200010c3 	.word	0x200010c3
 8003d8c:	200010bf 	.word	0x200010bf
 8003d90:	40011000 	.word	0x40011000
 8003d94:	20001094 	.word	0x20001094
 8003d98:	200010ac 	.word	0x200010ac

08003d9c <checkBasGonder>:

void checkBasGonder() {
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <checkBasGonder+0x74>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10b      	bne.n	8003dc0 <checkBasGonder+0x24>
 8003da8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e14 <checkBasGonder+0x78>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <checkBasGonder+0x24>
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <checkBasGonder+0x7c>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003db8:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <checkBasGonder+0x80>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e009      	b.n	8003dd4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003dc0:	4b14      	ldr	r3, [pc, #80]	@ (8003e14 <checkBasGonder+0x78>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f083 0301 	eor.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003dce:	4b13      	ldr	r3, [pc, #76]	@ (8003e1c <checkBasGonder+0x80>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <checkBasGonder+0x74>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10b      	bne.n	8003df4 <checkBasGonder+0x58>
 8003ddc:	4b10      	ldr	r3, [pc, #64]	@ (8003e20 <checkBasGonder+0x84>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <checkBasGonder+0x58>
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <checkBasGonder+0x7c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003dec:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <checkBasGonder+0x88>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003df2:	e009      	b.n	8003e08 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003df4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <checkBasGonder+0x84>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	f083 0301 	eor.w	r3, r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <checkBasGonder+0x88>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	200010bd 	.word	0x200010bd
 8003e14:	200010f1 	.word	0x200010f1
 8003e18:	200010cb 	.word	0x200010cb
 8003e1c:	200010f8 	.word	0x200010f8
 8003e20:	200010f4 	.word	0x200010f4
 8003e24:	200010f9 	.word	0x200010f9

08003e28 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003e2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <checkKapiSecimleri+0x98>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003e34:	4b23      	ldr	r3, [pc, #140]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003e3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ec0 <checkKapiSecimleri+0x98>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10e      	bne.n	8003e60 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003e42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e46:	4820      	ldr	r0, [pc, #128]	@ (8003ec8 <checkKapiSecimleri+0xa0>)
 8003e48:	f007 fb9a 	bl	800b580 <HAL_GPIO_ReadPin>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003e52:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e002      	b.n	8003e60 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003e60:	4b17      	ldr	r3, [pc, #92]	@ (8003ec0 <checkKapiSecimleri+0x98>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d10e      	bne.n	8003e86 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003e68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e6c:	4816      	ldr	r0, [pc, #88]	@ (8003ec8 <checkKapiSecimleri+0xa0>)
 8003e6e:	f007 fb87 	bl	800b580 <HAL_GPIO_ReadPin>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003e78:	4b12      	ldr	r3, [pc, #72]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e002      	b.n	8003e86 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003e80:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003e86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <checkKapiSecimleri+0x98>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d116      	bne.n	8003ebc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003e8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e92:	480d      	ldr	r0, [pc, #52]	@ (8003ec8 <checkKapiSecimleri+0xa0>)
 8003e94:	f007 fb74 	bl	800b580 <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <checkKapiSecimleri+0x8e>
 8003e9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ea2:	4809      	ldr	r0, [pc, #36]	@ (8003ec8 <checkKapiSecimleri+0xa0>)
 8003ea4:	f007 fb6c 	bl	800b580 <HAL_GPIO_ReadPin>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8003eae:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003eb4:	e002      	b.n	8003ebc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003eb6:	4b03      	ldr	r3, [pc, #12]	@ (8003ec4 <checkKapiSecimleri+0x9c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200010c4 	.word	0x200010c4
 8003ec4:	2000110e 	.word	0x2000110e
 8003ec8:	40010800 	.word	0x40010800

08003ecc <checkAktifCalisma>:

void checkAktifCalisma() {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003ed0:	4b66      	ldr	r3, [pc, #408]	@ (800406c <checkAktifCalisma+0x1a0>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f041 83ab 	bne.w	8005630 <checkAktifCalisma+0x1764>
 8003eda:	4b65      	ldr	r3, [pc, #404]	@ (8004070 <checkAktifCalisma+0x1a4>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f041 83a6 	bne.w	8005630 <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003ee4:	4b63      	ldr	r3, [pc, #396]	@ (8004074 <checkAktifCalisma+0x1a8>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11a      	bne.n	8003f22 <checkAktifCalisma+0x56>
 8003eec:	4b62      	ldr	r3, [pc, #392]	@ (8004078 <checkAktifCalisma+0x1ac>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d116      	bne.n	8003f22 <checkAktifCalisma+0x56>
 8003ef4:	4b61      	ldr	r3, [pc, #388]	@ (800407c <checkAktifCalisma+0x1b0>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <checkAktifCalisma+0x46>
 8003efc:	4b60      	ldr	r3, [pc, #384]	@ (8004080 <checkAktifCalisma+0x1b4>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	f083 0301 	eor.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <checkAktifCalisma+0x46>
 8003f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004084 <checkAktifCalisma+0x1b8>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d007      	beq.n	8003f22 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003f12:	4b5d      	ldr	r3, [pc, #372]	@ (8004088 <checkAktifCalisma+0x1bc>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01c      	beq.n	8003f54 <checkAktifCalisma+0x88>
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800408c <checkAktifCalisma+0x1c0>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d118      	bne.n	8003f54 <checkAktifCalisma+0x88>
 8003f22:	4b5b      	ldr	r3, [pc, #364]	@ (8004090 <checkAktifCalisma+0x1c4>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <checkAktifCalisma+0x66>
 8003f2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004094 <checkAktifCalisma+0x1c8>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <checkAktifCalisma+0x88>
 8003f32:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <checkAktifCalisma+0x1cc>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f40:	4856      	ldr	r0, [pc, #344]	@ (800409c <checkAktifCalisma+0x1d0>)
 8003f42:	f007 fb34 	bl	800b5ae <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003f46:	4b56      	ldr	r3, [pc, #344]	@ (80040a0 <checkAktifCalisma+0x1d4>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003f4c:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <checkAktifCalisma+0x1d8>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e008      	b.n	8003f66 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f5a:	4850      	ldr	r0, [pc, #320]	@ (800409c <checkAktifCalisma+0x1d0>)
 8003f5c:	f007 fb27 	bl	800b5ae <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8003f60:	4b4f      	ldr	r3, [pc, #316]	@ (80040a0 <checkAktifCalisma+0x1d4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003f66:	4b42      	ldr	r3, [pc, #264]	@ (8004070 <checkAktifCalisma+0x1a4>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d164      	bne.n	8004038 <checkAktifCalisma+0x16c>
 8003f6e:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <checkAktifCalisma+0x1c8>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <checkAktifCalisma+0xb2>
 8003f76:	4b46      	ldr	r3, [pc, #280]	@ (8004090 <checkAktifCalisma+0x1c4>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d05c      	beq.n	8004038 <checkAktifCalisma+0x16c>
 8003f7e:	4b46      	ldr	r3, [pc, #280]	@ (8004098 <checkAktifCalisma+0x1cc>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d058      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003f86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f8a:	4844      	ldr	r0, [pc, #272]	@ (800409c <checkAktifCalisma+0x1d0>)
 8003f8c:	f007 faf8 	bl	800b580 <HAL_GPIO_ReadPin>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <checkAktifCalisma+0xd2>
 8003f96:	4b44      	ldr	r3, [pc, #272]	@ (80040a8 <checkAktifCalisma+0x1dc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d04c      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4842      	ldr	r0, [pc, #264]	@ (80040ac <checkAktifCalisma+0x1e0>)
 8003fa2:	f007 faed 	bl	800b580 <HAL_GPIO_ReadPin>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d145      	bne.n	8004038 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <checkAktifCalisma+0x1e4>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d041      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003fb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fb8:	4838      	ldr	r0, [pc, #224]	@ (800409c <checkAktifCalisma+0x1d0>)
 8003fba:	f007 fae1 	bl	800b580 <HAL_GPIO_ReadPin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10e      	bne.n	8003fe2 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003fc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fc8:	4834      	ldr	r0, [pc, #208]	@ (800409c <checkAktifCalisma+0x1d0>)
 8003fca:	f007 fad9 	bl	800b580 <HAL_GPIO_ReadPin>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d106      	bne.n	8003fe2 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	4835      	ldr	r0, [pc, #212]	@ (80040ac <checkAktifCalisma+0x1e0>)
 8003fd8:	f007 fad2 	bl	800b580 <HAL_GPIO_ReadPin>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d003      	beq.n	8003fea <checkAktifCalisma+0x11e>
 8003fe2:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <checkAktifCalisma+0x1a8>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d026      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <checkAktifCalisma+0x1b0>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f083 0301 	eor.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <checkAktifCalisma+0x1ac>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f083 0301 	eor.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d018      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004006:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <checkAktifCalisma+0x1bc>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004014:	4b27      	ldr	r3, [pc, #156]	@ (80040b4 <checkAktifCalisma+0x1e8>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	f083 0301 	eor.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8004022:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <checkAktifCalisma+0x1ec>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004030:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <checkAktifCalisma+0x1a8>)
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e002      	b.n	800403e <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004038:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <checkAktifCalisma+0x1a8>)
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800403e:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <checkAktifCalisma+0x1a8>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03c      	beq.n	80040c0 <checkAktifCalisma+0x1f4>
 8004046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800404a:	4818      	ldr	r0, [pc, #96]	@ (80040ac <checkAktifCalisma+0x1e0>)
 800404c:	f007 fa98 	bl	800b580 <HAL_GPIO_ReadPin>
 8004050:	4603      	mov	r3, r0
 8004052:	2b01      	cmp	r3, #1
 8004054:	d134      	bne.n	80040c0 <checkAktifCalisma+0x1f4>
 8004056:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <checkAktifCalisma+0x1f0>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d030      	beq.n	80040c0 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800405e:	2201      	movs	r2, #1
 8004060:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004064:	480d      	ldr	r0, [pc, #52]	@ (800409c <checkAktifCalisma+0x1d0>)
 8004066:	f007 faa2 	bl	800b5ae <HAL_GPIO_WritePin>
 800406a:	e02f      	b.n	80040cc <checkAktifCalisma+0x200>
 800406c:	200010da 	.word	0x200010da
 8004070:	200010d9 	.word	0x200010d9
 8004074:	200010f1 	.word	0x200010f1
 8004078:	200010f2 	.word	0x200010f2
 800407c:	200010f4 	.word	0x200010f4
 8004080:	200010ec 	.word	0x200010ec
 8004084:	200010cf 	.word	0x200010cf
 8004088:	200010f3 	.word	0x200010f3
 800408c:	200010ce 	.word	0x200010ce
 8004090:	2000110d 	.word	0x2000110d
 8004094:	20001120 	.word	0x20001120
 8004098:	2000110e 	.word	0x2000110e
 800409c:	40010c00 	.word	0x40010c00
 80040a0:	2000110f 	.word	0x2000110f
 80040a4:	200010fb 	.word	0x200010fb
 80040a8:	200010f8 	.word	0x200010f8
 80040ac:	40011000 	.word	0x40011000
 80040b0:	200010bf 	.word	0x200010bf
 80040b4:	200010f6 	.word	0x200010f6
 80040b8:	200010f7 	.word	0x200010f7
 80040bc:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040c6:	4865      	ldr	r0, [pc, #404]	@ (800425c <checkAktifCalisma+0x390>)
 80040c8:	f007 fa71 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80040cc:	4b64      	ldr	r3, [pc, #400]	@ (8004260 <checkAktifCalisma+0x394>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <checkAktifCalisma+0x230>
 80040d4:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <checkAktifCalisma+0x398>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d007      	beq.n	80040ec <checkAktifCalisma+0x220>
 80040dc:	4b61      	ldr	r3, [pc, #388]	@ (8004264 <checkAktifCalisma+0x398>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d003      	beq.n	80040ec <checkAktifCalisma+0x220>
 80040e4:	4b60      	ldr	r3, [pc, #384]	@ (8004268 <checkAktifCalisma+0x39c>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80040ec:	2201      	movs	r2, #1
 80040ee:	2104      	movs	r1, #4
 80040f0:	485a      	ldr	r0, [pc, #360]	@ (800425c <checkAktifCalisma+0x390>)
 80040f2:	f007 fa5c 	bl	800b5ae <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80040f6:	4b5d      	ldr	r3, [pc, #372]	@ (800426c <checkAktifCalisma+0x3a0>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80040fc:	4b5b      	ldr	r3, [pc, #364]	@ (800426c <checkAktifCalisma+0x3a0>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d033      	beq.n	800416c <checkAktifCalisma+0x2a0>
 8004104:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004108:	4854      	ldr	r0, [pc, #336]	@ (800425c <checkAktifCalisma+0x390>)
 800410a:	f007 fa39 	bl	800b580 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <checkAktifCalisma+0x256>
 8004114:	4b56      	ldr	r3, [pc, #344]	@ (8004270 <checkAktifCalisma+0x3a4>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <checkAktifCalisma+0x264>
 8004122:	2102      	movs	r1, #2
 8004124:	4853      	ldr	r0, [pc, #332]	@ (8004274 <checkAktifCalisma+0x3a8>)
 8004126:	f007 fa2b 	bl	800b580 <HAL_GPIO_ReadPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d11d      	bne.n	800416c <checkAktifCalisma+0x2a0>
 8004130:	4b51      	ldr	r3, [pc, #324]	@ (8004278 <checkAktifCalisma+0x3ac>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <checkAktifCalisma+0x274>
 8004138:	4b50      	ldr	r3, [pc, #320]	@ (800427c <checkAktifCalisma+0x3b0>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <checkAktifCalisma+0x2a0>
 8004140:	4b4f      	ldr	r3, [pc, #316]	@ (8004280 <checkAktifCalisma+0x3b4>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d011      	beq.n	800416c <checkAktifCalisma+0x2a0>
 8004148:	4b4e      	ldr	r3, [pc, #312]	@ (8004284 <checkAktifCalisma+0x3b8>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <checkAktifCalisma+0x2a0>
 8004150:	4b4d      	ldr	r3, [pc, #308]	@ (8004288 <checkAktifCalisma+0x3bc>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f083 0301 	eor.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <checkAktifCalisma+0x2a0>
					timer2=millis;
 800415e:	4b4b      	ldr	r3, [pc, #300]	@ (800428c <checkAktifCalisma+0x3c0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4b      	ldr	r2, [pc, #300]	@ (8004290 <checkAktifCalisma+0x3c4>)
 8004164:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8004166:	4b48      	ldr	r3, [pc, #288]	@ (8004288 <checkAktifCalisma+0x3bc>)
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 800416c:	4b47      	ldr	r3, [pc, #284]	@ (800428c <checkAktifCalisma+0x3c0>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <checkAktifCalisma+0x3c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	4a47      	ldr	r2, [pc, #284]	@ (8004294 <checkAktifCalisma+0x3c8>)
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	4293      	cmp	r3, r2
 800417c:	d303      	bcc.n	8004186 <checkAktifCalisma+0x2ba>
 800417e:	4b42      	ldr	r3, [pc, #264]	@ (8004288 <checkAktifCalisma+0x3bc>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d118      	bne.n	80041b8 <checkAktifCalisma+0x2ec>
 8004186:	4b3c      	ldr	r3, [pc, #240]	@ (8004278 <checkAktifCalisma+0x3ac>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d006      	beq.n	80041a2 <checkAktifCalisma+0x2d6>
 8004194:	4b39      	ldr	r3, [pc, #228]	@ (800427c <checkAktifCalisma+0x3b0>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f083 0301 	eor.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <checkAktifCalisma+0x2ec>
 80041a2:	4b37      	ldr	r3, [pc, #220]	@ (8004280 <checkAktifCalisma+0x3b4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <checkAktifCalisma+0x2ec>
 80041b0:	4b34      	ldr	r3, [pc, #208]	@ (8004284 <checkAktifCalisma+0x3b8>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80041b8:	2200      	movs	r2, #0
 80041ba:	2104      	movs	r1, #4
 80041bc:	4827      	ldr	r0, [pc, #156]	@ (800425c <checkAktifCalisma+0x390>)
 80041be:	f007 f9f6 	bl	800b5ae <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <checkAktifCalisma+0x3a0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80041c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <checkAktifCalisma+0x3bc>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80041ce:	4b32      	ldr	r3, [pc, #200]	@ (8004298 <checkAktifCalisma+0x3cc>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <checkAktifCalisma+0x310>
					cerceveVar=1;
 80041d6:	4b31      	ldr	r3, [pc, #196]	@ (800429c <checkAktifCalisma+0x3d0>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <checkAktifCalisma+0x3cc>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d116      	bne.n	8004212 <checkAktifCalisma+0x346>
 80041e4:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <checkAktifCalisma+0x3d4>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d112      	bne.n	8004212 <checkAktifCalisma+0x346>
 80041ec:	2101      	movs	r1, #1
 80041ee:	4821      	ldr	r0, [pc, #132]	@ (8004274 <checkAktifCalisma+0x3a8>)
 80041f0:	f007 f9c6 	bl	800b580 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <checkAktifCalisma+0x346>
 80041fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041fe:	4817      	ldr	r0, [pc, #92]	@ (800425c <checkAktifCalisma+0x390>)
 8004200:	f007 f9be 	bl	800b580 <HAL_GPIO_ReadPin>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800420a:	4b24      	ldr	r3, [pc, #144]	@ (800429c <checkAktifCalisma+0x3d0>)
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e011      	b.n	8004236 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004212:	4b21      	ldr	r3, [pc, #132]	@ (8004298 <checkAktifCalisma+0x3cc>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10d      	bne.n	8004236 <checkAktifCalisma+0x36a>
 800421a:	2101      	movs	r1, #1
 800421c:	4815      	ldr	r0, [pc, #84]	@ (8004274 <checkAktifCalisma+0x3a8>)
 800421e:	f007 f9af 	bl	800b580 <HAL_GPIO_ReadPin>
 8004222:	4603      	mov	r3, r0
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <checkAktifCalisma+0x36a>
 8004228:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <checkAktifCalisma+0x3d4>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004230:	4b1a      	ldr	r3, [pc, #104]	@ (800429c <checkAktifCalisma+0x3d0>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004236:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <checkAktifCalisma+0x3cc>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d135      	bne.n	80042aa <checkAktifCalisma+0x3de>
 800423e:	4b18      	ldr	r3, [pc, #96]	@ (80042a0 <checkAktifCalisma+0x3d4>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d131      	bne.n	80042aa <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004246:	2101      	movs	r1, #1
 8004248:	480a      	ldr	r0, [pc, #40]	@ (8004274 <checkAktifCalisma+0x3a8>)
 800424a:	f007 f999 	bl	800b580 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d127      	bne.n	80042a4 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <checkAktifCalisma+0x3d0>)
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	e026      	b.n	80042aa <checkAktifCalisma+0x3de>
 800425c:	40010c00 	.word	0x40010c00
 8004260:	200010f1 	.word	0x200010f1
 8004264:	200010cb 	.word	0x200010cb
 8004268:	200010cf 	.word	0x200010cf
 800426c:	200010f5 	.word	0x200010f5
 8004270:	200010f8 	.word	0x200010f8
 8004274:	40011000 	.word	0x40011000
 8004278:	2000110d 	.word	0x2000110d
 800427c:	20001120 	.word	0x20001120
 8004280:	2000110e 	.word	0x2000110e
 8004284:	200010bf 	.word	0x200010bf
 8004288:	200010ed 	.word	0x200010ed
 800428c:	20001094 	.word	0x20001094
 8004290:	200010a0 	.word	0x200010a0
 8004294:	200010d0 	.word	0x200010d0
 8004298:	200010c0 	.word	0x200010c0
 800429c:	20001112 	.word	0x20001112
 80042a0:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 80042a4:	4b7f      	ldr	r3, [pc, #508]	@ (80044a4 <checkAktifCalisma+0x5d8>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80042aa:	4b7f      	ldr	r3, [pc, #508]	@ (80044a8 <checkAktifCalisma+0x5dc>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d17c      	bne.n	80043ac <checkAktifCalisma+0x4e0>
 80042b2:	4b7e      	ldr	r3, [pc, #504]	@ (80044ac <checkAktifCalisma+0x5e0>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d078      	beq.n	80043ac <checkAktifCalisma+0x4e0>
 80042ba:	4b7d      	ldr	r3, [pc, #500]	@ (80044b0 <checkAktifCalisma+0x5e4>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d074      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80042c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042c6:	487b      	ldr	r0, [pc, #492]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 80042c8:	f007 f95a 	bl	800b580 <HAL_GPIO_ReadPin>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <checkAktifCalisma+0x40e>
 80042d2:	4b79      	ldr	r3, [pc, #484]	@ (80044b8 <checkAktifCalisma+0x5ec>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d068      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <checkAktifCalisma+0x5d8>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d064      	beq.n	80043ac <checkAktifCalisma+0x4e0>
 80042e2:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <checkAktifCalisma+0x5f0>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	f083 0301 	eor.w	r3, r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d05d      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80042f0:	2104      	movs	r1, #4
 80042f2:	4873      	ldr	r0, [pc, #460]	@ (80044c0 <checkAktifCalisma+0x5f4>)
 80042f4:	f007 f944 	bl	800b580 <HAL_GPIO_ReadPin>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <checkAktifCalisma+0x43a>
 80042fe:	4b71      	ldr	r3, [pc, #452]	@ (80044c4 <checkAktifCalisma+0x5f8>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d152      	bne.n	80043ac <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004306:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800430a:	486a      	ldr	r0, [pc, #424]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 800430c:	f007 f938 	bl	800b580 <HAL_GPIO_ReadPin>
 8004310:	4603      	mov	r3, r0
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10e      	bne.n	8004334 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004316:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800431a:	4866      	ldr	r0, [pc, #408]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 800431c:	f007 f930 	bl	800b580 <HAL_GPIO_ReadPin>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d106      	bne.n	8004334 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004326:	2140      	movs	r1, #64	@ 0x40
 8004328:	4865      	ldr	r0, [pc, #404]	@ (80044c0 <checkAktifCalisma+0x5f4>)
 800432a:	f007 f929 	bl	800b580 <HAL_GPIO_ReadPin>
 800432e:	4603      	mov	r3, r0
 8004330:	2b01      	cmp	r3, #1
 8004332:	d003      	beq.n	800433c <checkAktifCalisma+0x470>
 8004334:	4b64      	ldr	r3, [pc, #400]	@ (80044c8 <checkAktifCalisma+0x5fc>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d037      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 800433c:	4b63      	ldr	r3, [pc, #396]	@ (80044cc <checkAktifCalisma+0x600>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f083 0301 	eor.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d030      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800434a:	4b61      	ldr	r3, [pc, #388]	@ (80044d0 <checkAktifCalisma+0x604>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d029      	beq.n	80043ac <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004358:	4b5e      	ldr	r3, [pc, #376]	@ (80044d4 <checkAktifCalisma+0x608>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	f083 0301 	eor.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d022      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004366:	4b5c      	ldr	r3, [pc, #368]	@ (80044d8 <checkAktifCalisma+0x60c>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004374:	4b59      	ldr	r3, [pc, #356]	@ (80044dc <checkAktifCalisma+0x610>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	f083 0301 	eor.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d014      	beq.n	80043ac <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004382:	4b57      	ldr	r3, [pc, #348]	@ (80044e0 <checkAktifCalisma+0x614>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004390:	2201      	movs	r2, #1
 8004392:	2102      	movs	r1, #2
 8004394:	4847      	ldr	r0, [pc, #284]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 8004396:	f007 f90a 	bl	800b5ae <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800439a:	4b4b      	ldr	r3, [pc, #300]	@ (80044c8 <checkAktifCalisma+0x5fc>)
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80043a0:	4b50      	ldr	r3, [pc, #320]	@ (80044e4 <checkAktifCalisma+0x618>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80043a6:	4b50      	ldr	r3, [pc, #320]	@ (80044e8 <checkAktifCalisma+0x61c>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80043ac:	4b46      	ldr	r3, [pc, #280]	@ (80044c8 <checkAktifCalisma+0x5fc>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d033      	beq.n	800441c <checkAktifCalisma+0x550>
 80043b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043b8:	483e      	ldr	r0, [pc, #248]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 80043ba:	f007 f8e1 	bl	800b580 <HAL_GPIO_ReadPin>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d106      	bne.n	80043d2 <checkAktifCalisma+0x506>
 80043c4:	4b3c      	ldr	r3, [pc, #240]	@ (80044b8 <checkAktifCalisma+0x5ec>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f083 0301 	eor.w	r3, r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <checkAktifCalisma+0x51c>
 80043d2:	2104      	movs	r1, #4
 80043d4:	483a      	ldr	r0, [pc, #232]	@ (80044c0 <checkAktifCalisma+0x5f4>)
 80043d6:	f007 f8d3 	bl	800b580 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d11d      	bne.n	800441c <checkAktifCalisma+0x550>
 80043e0:	4b38      	ldr	r3, [pc, #224]	@ (80044c4 <checkAktifCalisma+0x5f8>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d019      	beq.n	800441c <checkAktifCalisma+0x550>
 80043e8:	4b30      	ldr	r3, [pc, #192]	@ (80044ac <checkAktifCalisma+0x5e0>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d015      	beq.n	800441c <checkAktifCalisma+0x550>
 80043f0:	4b2f      	ldr	r3, [pc, #188]	@ (80044b0 <checkAktifCalisma+0x5e4>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d011      	beq.n	800441c <checkAktifCalisma+0x550>
 80043f8:	4b2a      	ldr	r3, [pc, #168]	@ (80044a4 <checkAktifCalisma+0x5d8>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <checkAktifCalisma+0x550>
 8004400:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <checkAktifCalisma+0x620>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <checkAktifCalisma+0x550>
					timer2=millis;
 800440e:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <checkAktifCalisma+0x624>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <checkAktifCalisma+0x628>)
 8004414:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004416:	4b35      	ldr	r3, [pc, #212]	@ (80044ec <checkAktifCalisma+0x620>)
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800441c:	4b34      	ldr	r3, [pc, #208]	@ (80044f0 <checkAktifCalisma+0x624>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <checkAktifCalisma+0x628>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	4a34      	ldr	r2, [pc, #208]	@ (80044f8 <checkAktifCalisma+0x62c>)
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	4293      	cmp	r3, r2
 800442c:	d303      	bcc.n	8004436 <checkAktifCalisma+0x56a>
 800442e:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <checkAktifCalisma+0x620>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d114      	bne.n	8004460 <checkAktifCalisma+0x594>
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <checkAktifCalisma+0x5e0>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f083 0301 	eor.w	r3, r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <checkAktifCalisma+0x594>
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <checkAktifCalisma+0x5e4>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f083 0301 	eor.w	r3, r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <checkAktifCalisma+0x594>
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <checkAktifCalisma+0x5d8>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004460:	2200      	movs	r2, #0
 8004462:	2102      	movs	r1, #2
 8004464:	4813      	ldr	r0, [pc, #76]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 8004466:	f007 f8a2 	bl	800b5ae <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800446a:	4b17      	ldr	r3, [pc, #92]	@ (80044c8 <checkAktifCalisma+0x5fc>)
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004470:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <checkAktifCalisma+0x620>)
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004476:	4b14      	ldr	r3, [pc, #80]	@ (80044c8 <checkAktifCalisma+0x5fc>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d040      	beq.n	8004500 <checkAktifCalisma+0x634>
 800447e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004482:	480f      	ldr	r0, [pc, #60]	@ (80044c0 <checkAktifCalisma+0x5f4>)
 8004484:	f007 f87c 	bl	800b580 <HAL_GPIO_ReadPin>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d138      	bne.n	8004500 <checkAktifCalisma+0x634>
 800448e:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <checkAktifCalisma+0x630>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d034      	beq.n	8004500 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004496:	2201      	movs	r2, #1
 8004498:	2101      	movs	r1, #1
 800449a:	4806      	ldr	r0, [pc, #24]	@ (80044b4 <checkAktifCalisma+0x5e8>)
 800449c:	f007 f887 	bl	800b5ae <HAL_GPIO_WritePin>
 80044a0:	e033      	b.n	800450a <checkAktifCalisma+0x63e>
 80044a2:	bf00      	nop
 80044a4:	20001112 	.word	0x20001112
 80044a8:	200010d9 	.word	0x200010d9
 80044ac:	2000110d 	.word	0x2000110d
 80044b0:	2000110e 	.word	0x2000110e
 80044b4:	40010c00 	.word	0x40010c00
 80044b8:	200010f9 	.word	0x200010f9
 80044bc:	2000110c 	.word	0x2000110c
 80044c0:	40011000 	.word	0x40011000
 80044c4:	200010c2 	.word	0x200010c2
 80044c8:	200010f4 	.word	0x200010f4
 80044cc:	200010f1 	.word	0x200010f1
 80044d0:	200010f5 	.word	0x200010f5
 80044d4:	200010f2 	.word	0x200010f2
 80044d8:	200010f3 	.word	0x200010f3
 80044dc:	200010f6 	.word	0x200010f6
 80044e0:	200010f7 	.word	0x200010f7
 80044e4:	200010fc 	.word	0x200010fc
 80044e8:	2000111c 	.word	0x2000111c
 80044ec:	200010ec 	.word	0x200010ec
 80044f0:	20001094 	.word	0x20001094
 80044f4:	200010a0 	.word	0x200010a0
 80044f8:	200010d1 	.word	0x200010d1
 80044fc:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004500:	2200      	movs	r2, #0
 8004502:	2101      	movs	r1, #1
 8004504:	4836      	ldr	r0, [pc, #216]	@ (80045e0 <checkAktifCalisma+0x714>)
 8004506:	f007 f852 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <checkAktifCalisma+0x718>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 8080 	bne.w	8004614 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004514:	4b34      	ldr	r3, [pc, #208]	@ (80045e8 <checkAktifCalisma+0x71c>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d003      	beq.n	8004524 <checkAktifCalisma+0x658>
 800451c:	4b32      	ldr	r3, [pc, #200]	@ (80045e8 <checkAktifCalisma+0x71c>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d177      	bne.n	8004614 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004524:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <checkAktifCalisma+0x720>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d073      	beq.n	8004614 <checkAktifCalisma+0x748>
 800452c:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <checkAktifCalisma+0x724>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d06f      	beq.n	8004614 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004538:	4829      	ldr	r0, [pc, #164]	@ (80045e0 <checkAktifCalisma+0x714>)
 800453a:	f007 f821 	bl	800b580 <HAL_GPIO_ReadPin>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d167      	bne.n	8004614 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004548:	482a      	ldr	r0, [pc, #168]	@ (80045f4 <checkAktifCalisma+0x728>)
 800454a:	f007 f819 	bl	800b580 <HAL_GPIO_ReadPin>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <checkAktifCalisma+0x690>
 8004554:	4b28      	ldr	r3, [pc, #160]	@ (80045f8 <checkAktifCalisma+0x72c>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d15b      	bne.n	8004614 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800455c:	2140      	movs	r1, #64	@ 0x40
 800455e:	4825      	ldr	r0, [pc, #148]	@ (80045f4 <checkAktifCalisma+0x728>)
 8004560:	f007 f80e 	bl	800b580 <HAL_GPIO_ReadPin>
 8004564:	4603      	mov	r3, r0
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10f      	bne.n	800458a <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800456a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800456e:	481c      	ldr	r0, [pc, #112]	@ (80045e0 <checkAktifCalisma+0x714>)
 8004570:	f007 f806 	bl	800b580 <HAL_GPIO_ReadPin>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800457a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800457e:	4818      	ldr	r0, [pc, #96]	@ (80045e0 <checkAktifCalisma+0x714>)
 8004580:	f006 fffe 	bl	800b580 <HAL_GPIO_ReadPin>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d003      	beq.n	8004592 <checkAktifCalisma+0x6c6>
 800458a:	4b1c      	ldr	r3, [pc, #112]	@ (80045fc <checkAktifCalisma+0x730>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d040      	beq.n	8004614 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004592:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <checkAktifCalisma+0x734>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d039      	beq.n	8004614 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80045a0:	4b18      	ldr	r3, [pc, #96]	@ (8004604 <checkAktifCalisma+0x738>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	f083 0301 	eor.w	r3, r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d032      	beq.n	8004614 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80045ae:	4b16      	ldr	r3, [pc, #88]	@ (8004608 <checkAktifCalisma+0x73c>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f083 0301 	eor.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02b      	beq.n	8004614 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 80045bc:	4b13      	ldr	r3, [pc, #76]	@ (800460c <checkAktifCalisma+0x740>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f083 0301 	eor.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d024      	beq.n	8004614 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 80045ca:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <checkAktifCalisma+0x744>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01d      	beq.n	8004614 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 80045d8:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <checkAktifCalisma+0x730>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e01c      	b.n	800461a <checkAktifCalisma+0x74e>
 80045e0:	40010c00 	.word	0x40010c00
 80045e4:	200010d9 	.word	0x200010d9
 80045e8:	200010cb 	.word	0x200010cb
 80045ec:	2000110d 	.word	0x2000110d
 80045f0:	2000110e 	.word	0x2000110e
 80045f4:	40011000 	.word	0x40011000
 80045f8:	200010cc 	.word	0x200010cc
 80045fc:	200010f2 	.word	0x200010f2
 8004600:	200010f1 	.word	0x200010f1
 8004604:	200010f5 	.word	0x200010f5
 8004608:	200010f4 	.word	0x200010f4
 800460c:	200010f3 	.word	0x200010f3
 8004610:	200010f7 	.word	0x200010f7
				} else {
					devmotoryukaricalisiyor=0;
 8004614:	4b64      	ldr	r3, [pc, #400]	@ (80047a8 <checkAktifCalisma+0x8dc>)
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800461a:	4b63      	ldr	r3, [pc, #396]	@ (80047a8 <checkAktifCalisma+0x8dc>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004622:	2201      	movs	r2, #1
 8004624:	2120      	movs	r1, #32
 8004626:	4861      	ldr	r0, [pc, #388]	@ (80047ac <checkAktifCalisma+0x8e0>)
 8004628:	f006 ffc1 	bl	800b5ae <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 800462c:	4b60      	ldr	r3, [pc, #384]	@ (80047b0 <checkAktifCalisma+0x8e4>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004632:	4b5f      	ldr	r3, [pc, #380]	@ (80047b0 <checkAktifCalisma+0x8e4>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d025      	beq.n	8004686 <checkAktifCalisma+0x7ba>
 800463a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800463e:	485d      	ldr	r0, [pc, #372]	@ (80047b4 <checkAktifCalisma+0x8e8>)
 8004640:	f006 ff9e 	bl	800b580 <HAL_GPIO_ReadPin>
 8004644:	4603      	mov	r3, r0
 8004646:	2b01      	cmp	r3, #1
 8004648:	d007      	beq.n	800465a <checkAktifCalisma+0x78e>
 800464a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800464e:	4857      	ldr	r0, [pc, #348]	@ (80047ac <checkAktifCalisma+0x8e0>)
 8004650:	f006 ff96 	bl	800b580 <HAL_GPIO_ReadPin>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d115      	bne.n	8004686 <checkAktifCalisma+0x7ba>
 800465a:	4b57      	ldr	r3, [pc, #348]	@ (80047b8 <checkAktifCalisma+0x8ec>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d011      	beq.n	8004686 <checkAktifCalisma+0x7ba>
 8004662:	4b56      	ldr	r3, [pc, #344]	@ (80047bc <checkAktifCalisma+0x8f0>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <checkAktifCalisma+0x7ba>
 800466a:	4b55      	ldr	r3, [pc, #340]	@ (80047c0 <checkAktifCalisma+0x8f4>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004678:	4b52      	ldr	r3, [pc, #328]	@ (80047c4 <checkAktifCalisma+0x8f8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a52      	ldr	r2, [pc, #328]	@ (80047c8 <checkAktifCalisma+0x8fc>)
 800467e:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004680:	4b4f      	ldr	r3, [pc, #316]	@ (80047c0 <checkAktifCalisma+0x8f4>)
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004686:	4b4f      	ldr	r3, [pc, #316]	@ (80047c4 <checkAktifCalisma+0x8f8>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <checkAktifCalisma+0x8fc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	4a4e      	ldr	r2, [pc, #312]	@ (80047cc <checkAktifCalisma+0x900>)
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	4293      	cmp	r3, r2
 8004696:	d303      	bcc.n	80046a0 <checkAktifCalisma+0x7d4>
 8004698:	4b49      	ldr	r3, [pc, #292]	@ (80047c0 <checkAktifCalisma+0x8f4>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <checkAktifCalisma+0x7f0>
 80046a0:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <checkAktifCalisma+0x8ec>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f083 0301 	eor.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <checkAktifCalisma+0x7f0>
 80046ae:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <checkAktifCalisma+0x8f0>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f083 0301 	eor.w	r3, r3, #1
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80046bc:	2200      	movs	r2, #0
 80046be:	2120      	movs	r1, #32
 80046c0:	483a      	ldr	r0, [pc, #232]	@ (80047ac <checkAktifCalisma+0x8e0>)
 80046c2:	f006 ff74 	bl	800b5ae <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 80046c6:	4b3a      	ldr	r3, [pc, #232]	@ (80047b0 <checkAktifCalisma+0x8e4>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 80046cc:	4b3c      	ldr	r3, [pc, #240]	@ (80047c0 <checkAktifCalisma+0x8f4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 80046d2:	4b3f      	ldr	r3, [pc, #252]	@ (80047d0 <checkAktifCalisma+0x904>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 8088 	bne.w	80047ec <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80046dc:	4b3d      	ldr	r3, [pc, #244]	@ (80047d4 <checkAktifCalisma+0x908>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d003      	beq.n	80046ec <checkAktifCalisma+0x820>
 80046e4:	4b3b      	ldr	r3, [pc, #236]	@ (80047d4 <checkAktifCalisma+0x908>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d17f      	bne.n	80047ec <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 80046ec:	4b32      	ldr	r3, [pc, #200]	@ (80047b8 <checkAktifCalisma+0x8ec>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d07b      	beq.n	80047ec <checkAktifCalisma+0x920>
 80046f4:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <checkAktifCalisma+0x8f0>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d077      	beq.n	80047ec <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80046fc:	2140      	movs	r1, #64	@ 0x40
 80046fe:	482b      	ldr	r0, [pc, #172]	@ (80047ac <checkAktifCalisma+0x8e0>)
 8004700:	f006 ff3e 	bl	800b580 <HAL_GPIO_ReadPin>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d170      	bne.n	80047ec <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800470a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800470e:	4827      	ldr	r0, [pc, #156]	@ (80047ac <checkAktifCalisma+0x8e0>)
 8004710:	f006 ff36 	bl	800b580 <HAL_GPIO_ReadPin>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <checkAktifCalisma+0x856>
 800471a:	4b2f      	ldr	r3, [pc, #188]	@ (80047d8 <checkAktifCalisma+0x90c>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d164      	bne.n	80047ec <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004726:	4823      	ldr	r0, [pc, #140]	@ (80047b4 <checkAktifCalisma+0x8e8>)
 8004728:	f006 ff2a 	bl	800b580 <HAL_GPIO_ReadPin>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10f      	bne.n	8004752 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004736:	481f      	ldr	r0, [pc, #124]	@ (80047b4 <checkAktifCalisma+0x8e8>)
 8004738:	f006 ff22 	bl	800b580 <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004746:	481b      	ldr	r0, [pc, #108]	@ (80047b4 <checkAktifCalisma+0x8e8>)
 8004748:	f006 ff1a 	bl	800b580 <HAL_GPIO_ReadPin>
 800474c:	4603      	mov	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	d003      	beq.n	800475a <checkAktifCalisma+0x88e>
 8004752:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <checkAktifCalisma+0x910>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d048      	beq.n	80047ec <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 800475a:	4b21      	ldr	r3, [pc, #132]	@ (80047e0 <checkAktifCalisma+0x914>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d041      	beq.n	80047ec <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004768:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <checkAktifCalisma+0x918>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f083 0301 	eor.w	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d03a      	beq.n	80047ec <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004776:	4b1c      	ldr	r3, [pc, #112]	@ (80047e8 <checkAktifCalisma+0x91c>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f083 0301 	eor.w	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d033      	beq.n	80047ec <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004784:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <checkAktifCalisma+0x8e4>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f083 0301 	eor.w	r3, r3, #1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d02c      	beq.n	80047ec <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004792:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <checkAktifCalisma+0x8dc>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f083 0301 	eor.w	r3, r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d025      	beq.n	80047ec <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 80047a0:	4b0e      	ldr	r3, [pc, #56]	@ (80047dc <checkAktifCalisma+0x910>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e024      	b.n	80047f2 <checkAktifCalisma+0x926>
 80047a8:	200010f2 	.word	0x200010f2
 80047ac:	40011000 	.word	0x40011000
 80047b0:	200010f6 	.word	0x200010f6
 80047b4:	40010c00 	.word	0x40010c00
 80047b8:	2000110d 	.word	0x2000110d
 80047bc:	2000110e 	.word	0x2000110e
 80047c0:	200010ee 	.word	0x200010ee
 80047c4:	20001094 	.word	0x20001094
 80047c8:	200010a0 	.word	0x200010a0
 80047cc:	200010d2 	.word	0x200010d2
 80047d0:	200010d9 	.word	0x200010d9
 80047d4:	200010cb 	.word	0x200010cb
 80047d8:	200010cd 	.word	0x200010cd
 80047dc:	200010f3 	.word	0x200010f3
 80047e0:	200010f1 	.word	0x200010f1
 80047e4:	200010f5 	.word	0x200010f5
 80047e8:	200010f4 	.word	0x200010f4
				} else {
					devmotorasagicalisiyor=0;
 80047ec:	4b96      	ldr	r3, [pc, #600]	@ (8004a48 <checkAktifCalisma+0xb7c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 80047f2:	4b95      	ldr	r3, [pc, #596]	@ (8004a48 <checkAktifCalisma+0xb7c>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80047fa:	2201      	movs	r2, #1
 80047fc:	2110      	movs	r1, #16
 80047fe:	4893      	ldr	r0, [pc, #588]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004800:	f006 fed5 	bl	800b5ae <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004804:	4b92      	ldr	r3, [pc, #584]	@ (8004a50 <checkAktifCalisma+0xb84>)
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800480a:	4b91      	ldr	r3, [pc, #580]	@ (8004a50 <checkAktifCalisma+0xb84>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d024      	beq.n	800485c <checkAktifCalisma+0x990>
 8004812:	2140      	movs	r1, #64	@ 0x40
 8004814:	488d      	ldr	r0, [pc, #564]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004816:	f006 feb3 	bl	800b580 <HAL_GPIO_ReadPin>
 800481a:	4603      	mov	r3, r0
 800481c:	2b01      	cmp	r3, #1
 800481e:	d007      	beq.n	8004830 <checkAktifCalisma+0x964>
 8004820:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004824:	4889      	ldr	r0, [pc, #548]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004826:	f006 feab 	bl	800b580 <HAL_GPIO_ReadPin>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d115      	bne.n	800485c <checkAktifCalisma+0x990>
 8004830:	4b88      	ldr	r3, [pc, #544]	@ (8004a54 <checkAktifCalisma+0xb88>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <checkAktifCalisma+0x990>
 8004838:	4b87      	ldr	r3, [pc, #540]	@ (8004a58 <checkAktifCalisma+0xb8c>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <checkAktifCalisma+0x990>
 8004840:	4b86      	ldr	r3, [pc, #536]	@ (8004a5c <checkAktifCalisma+0xb90>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f083 0301 	eor.w	r3, r3, #1
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <checkAktifCalisma+0x990>
					timer2=millis;
 800484e:	4b84      	ldr	r3, [pc, #528]	@ (8004a60 <checkAktifCalisma+0xb94>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a84      	ldr	r2, [pc, #528]	@ (8004a64 <checkAktifCalisma+0xb98>)
 8004854:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004856:	4b81      	ldr	r3, [pc, #516]	@ (8004a5c <checkAktifCalisma+0xb90>)
 8004858:	2201      	movs	r2, #1
 800485a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800485c:	4b80      	ldr	r3, [pc, #512]	@ (8004a60 <checkAktifCalisma+0xb94>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <checkAktifCalisma+0xb98>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	4a80      	ldr	r2, [pc, #512]	@ (8004a68 <checkAktifCalisma+0xb9c>)
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	4293      	cmp	r3, r2
 800486c:	d303      	bcc.n	8004876 <checkAktifCalisma+0x9aa>
 800486e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a5c <checkAktifCalisma+0xb90>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <checkAktifCalisma+0x9c6>
 8004876:	4b77      	ldr	r3, [pc, #476]	@ (8004a54 <checkAktifCalisma+0xb88>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f083 0301 	eor.w	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <checkAktifCalisma+0x9c6>
 8004884:	4b74      	ldr	r3, [pc, #464]	@ (8004a58 <checkAktifCalisma+0xb8c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f083 0301 	eor.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004892:	2200      	movs	r2, #0
 8004894:	2110      	movs	r1, #16
 8004896:	486d      	ldr	r0, [pc, #436]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004898:	f006 fe89 	bl	800b5ae <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 800489c:	4b6c      	ldr	r3, [pc, #432]	@ (8004a50 <checkAktifCalisma+0xb84>)
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 80048a2:	4b6e      	ldr	r3, [pc, #440]	@ (8004a5c <checkAktifCalisma+0xb90>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80048a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048ac:	486f      	ldr	r0, [pc, #444]	@ (8004a6c <checkAktifCalisma+0xba0>)
 80048ae:	f006 fe67 	bl	800b580 <HAL_GPIO_ReadPin>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d120      	bne.n	80048fa <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80048b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048bc:	486b      	ldr	r0, [pc, #428]	@ (8004a6c <checkAktifCalisma+0xba0>)
 80048be:	f006 fe5f 	bl	800b580 <HAL_GPIO_ReadPin>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d118      	bne.n	80048fa <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80048c8:	2104      	movs	r1, #4
 80048ca:	4868      	ldr	r0, [pc, #416]	@ (8004a6c <checkAktifCalisma+0xba0>)
 80048cc:	f006 fe58 	bl	800b580 <HAL_GPIO_ReadPin>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d111      	bne.n	80048fa <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80048d6:	2102      	movs	r1, #2
 80048d8:	4864      	ldr	r0, [pc, #400]	@ (8004a6c <checkAktifCalisma+0xba0>)
 80048da:	f006 fe51 	bl	800b580 <HAL_GPIO_ReadPin>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80048e4:	2101      	movs	r1, #1
 80048e6:	4861      	ldr	r0, [pc, #388]	@ (8004a6c <checkAktifCalisma+0xba0>)
 80048e8:	f006 fe4a 	bl	800b580 <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <checkAktifCalisma+0xa2e>
					makineStop=1;
 80048f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a70 <checkAktifCalisma+0xba4>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e002      	b.n	8004900 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 80048fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004a70 <checkAktifCalisma+0xba4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004900:	4b5c      	ldr	r3, [pc, #368]	@ (8004a74 <checkAktifCalisma+0xba8>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d144      	bne.n	8004992 <checkAktifCalisma+0xac6>
 8004908:	4b5b      	ldr	r3, [pc, #364]	@ (8004a78 <checkAktifCalisma+0xbac>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d003      	beq.n	8004918 <checkAktifCalisma+0xa4c>
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <checkAktifCalisma+0xbac>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d13c      	bne.n	8004992 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004918:	2180      	movs	r1, #128	@ 0x80
 800491a:	484c      	ldr	r0, [pc, #304]	@ (8004a4c <checkAktifCalisma+0xb80>)
 800491c:	f006 fe30 	bl	800b580 <HAL_GPIO_ReadPin>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <checkAktifCalisma+0xa62>
 8004926:	4b55      	ldr	r3, [pc, #340]	@ (8004a7c <checkAktifCalisma+0xbb0>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <checkAktifCalisma+0xa7a>
 800492e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004932:	484e      	ldr	r0, [pc, #312]	@ (8004a6c <checkAktifCalisma+0xba0>)
 8004934:	f006 fe24 	bl	800b580 <HAL_GPIO_ReadPin>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d129      	bne.n	8004992 <checkAktifCalisma+0xac6>
 800493e:	4b4f      	ldr	r3, [pc, #316]	@ (8004a7c <checkAktifCalisma+0xbb0>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d125      	bne.n	8004992 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004946:	2104      	movs	r1, #4
 8004948:	4840      	ldr	r0, [pc, #256]	@ (8004a4c <checkAktifCalisma+0xb80>)
 800494a:	f006 fe19 	bl	800b580 <HAL_GPIO_ReadPin>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d003      	beq.n	800495c <checkAktifCalisma+0xa90>
 8004954:	4b4a      	ldr	r3, [pc, #296]	@ (8004a80 <checkAktifCalisma+0xbb4>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11a      	bne.n	8004992 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800495c:	2102      	movs	r1, #2
 800495e:	483b      	ldr	r0, [pc, #236]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004960:	f006 fe0e 	bl	800b580 <HAL_GPIO_ReadPin>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d113      	bne.n	8004992 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 800496a:	4b46      	ldr	r3, [pc, #280]	@ (8004a84 <checkAktifCalisma+0xbb8>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f083 0301 	eor.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004978:	4b3d      	ldr	r3, [pc, #244]	@ (8004a70 <checkAktifCalisma+0xba4>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004980:	4b41      	ldr	r3, [pc, #260]	@ (8004a88 <checkAktifCalisma+0xbbc>)
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004986:	4b36      	ldr	r3, [pc, #216]	@ (8004a60 <checkAktifCalisma+0xb94>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a40      	ldr	r2, [pc, #256]	@ (8004a8c <checkAktifCalisma+0xbc0>)
 800498c:	6013      	str	r3, [r2, #0]
					bekle();
 800498e:	f7ff f901 	bl	8003b94 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004992:	4b33      	ldr	r3, [pc, #204]	@ (8004a60 <checkAktifCalisma+0xb94>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <checkAktifCalisma+0xbc0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a90 <checkAktifCalisma+0xbc4>)
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d211      	bcs.n	80049c8 <checkAktifCalisma+0xafc>
 80049a4:	2104      	movs	r1, #4
 80049a6:	4829      	ldr	r0, [pc, #164]	@ (8004a4c <checkAktifCalisma+0xb80>)
 80049a8:	f006 fdea 	bl	800b580 <HAL_GPIO_ReadPin>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <checkAktifCalisma+0xafc>
 80049b2:	4b33      	ldr	r3, [pc, #204]	@ (8004a80 <checkAktifCalisma+0xbb4>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <checkAktifCalisma+0xafc>
 80049ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004a70 <checkAktifCalisma+0xba4>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	f083 0301 	eor.w	r3, r3, #1
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 80049c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <checkAktifCalisma+0xbbc>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80049ce:	4b29      	ldr	r3, [pc, #164]	@ (8004a74 <checkAktifCalisma+0xba8>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d160      	bne.n	8004a98 <checkAktifCalisma+0xbcc>
 80049d6:	4b28      	ldr	r3, [pc, #160]	@ (8004a78 <checkAktifCalisma+0xbac>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d003      	beq.n	80049e6 <checkAktifCalisma+0xb1a>
 80049de:	4b26      	ldr	r3, [pc, #152]	@ (8004a78 <checkAktifCalisma+0xbac>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d158      	bne.n	8004a98 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80049e6:	2104      	movs	r1, #4
 80049e8:	4818      	ldr	r0, [pc, #96]	@ (8004a4c <checkAktifCalisma+0xb80>)
 80049ea:	f006 fdc9 	bl	800b580 <HAL_GPIO_ReadPin>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d003      	beq.n	80049fc <checkAktifCalisma+0xb30>
 80049f4:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <checkAktifCalisma+0xbb4>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d14d      	bne.n	8004a98 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80049fc:	2102      	movs	r1, #2
 80049fe:	4813      	ldr	r0, [pc, #76]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004a00:	f006 fdbe 	bl	800b580 <HAL_GPIO_ReadPin>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d146      	bne.n	8004a98 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a0a:	2180      	movs	r1, #128	@ 0x80
 8004a0c:	480f      	ldr	r0, [pc, #60]	@ (8004a4c <checkAktifCalisma+0xb80>)
 8004a0e:	f006 fdb7 	bl	800b580 <HAL_GPIO_ReadPin>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <checkAktifCalisma+0xb54>
 8004a18:	4b18      	ldr	r3, [pc, #96]	@ (8004a7c <checkAktifCalisma+0xbb0>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <checkAktifCalisma+0xb6c>
 8004a20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a24:	4811      	ldr	r0, [pc, #68]	@ (8004a6c <checkAktifCalisma+0xba0>)
 8004a26:	f006 fdab 	bl	800b580 <HAL_GPIO_ReadPin>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d133      	bne.n	8004a98 <checkAktifCalisma+0xbcc>
 8004a30:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <checkAktifCalisma+0xbb0>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d12f      	bne.n	8004a98 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004a38:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <checkAktifCalisma+0xba4>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02b      	beq.n	8004a98 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004a40:	4b14      	ldr	r3, [pc, #80]	@ (8004a94 <checkAktifCalisma+0xbc8>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e02a      	b.n	8004a9e <checkAktifCalisma+0xbd2>
 8004a48:	200010f3 	.word	0x200010f3
 8004a4c:	40011000 	.word	0x40011000
 8004a50:	200010f7 	.word	0x200010f7
 8004a54:	2000110d 	.word	0x2000110d
 8004a58:	2000110e 	.word	0x2000110e
 8004a5c:	200010ef 	.word	0x200010ef
 8004a60:	20001094 	.word	0x20001094
 8004a64:	200010a0 	.word	0x200010a0
 8004a68:	200010d2 	.word	0x200010d2
 8004a6c:	40010c00 	.word	0x40010c00
 8004a70:	200010fd 	.word	0x200010fd
 8004a74:	200010c5 	.word	0x200010c5
 8004a78:	200010c4 	.word	0x200010c4
 8004a7c:	200010c8 	.word	0x200010c8
 8004a80:	200010c2 	.word	0x200010c2
 8004a84:	200010eb 	.word	0x200010eb
 8004a88:	200010fe 	.word	0x200010fe
 8004a8c:	20001098 	.word	0x20001098
 8004a90:	200010d5 	.word	0x200010d5
 8004a94:	200010ff 	.word	0x200010ff
				} else {
					kapi1butonkontrol=0;
 8004a98:	4b8b      	ldr	r3, [pc, #556]	@ (8004cc8 <checkAktifCalisma+0xdfc>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8004ccc <checkAktifCalisma+0xe00>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d121      	bne.n	8004aea <checkAktifCalisma+0xc1e>
 8004aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d003      	beq.n	8004ab6 <checkAktifCalisma+0xbea>
 8004aae:	4b88      	ldr	r3, [pc, #544]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d119      	bne.n	8004aea <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4886      	ldr	r0, [pc, #536]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004aba:	f006 fd61 	bl	800b580 <HAL_GPIO_ReadPin>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d003      	beq.n	8004acc <checkAktifCalisma+0xc00>
 8004ac4:	4b84      	ldr	r3, [pc, #528]	@ (8004cd8 <checkAktifCalisma+0xe0c>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10e      	bne.n	8004aea <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004acc:	2102      	movs	r1, #2
 8004ace:	4881      	ldr	r0, [pc, #516]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004ad0:	f006 fd56 	bl	800b580 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d107      	bne.n	8004aea <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004ada:	4b80      	ldr	r3, [pc, #512]	@ (8004cdc <checkAktifCalisma+0xe10>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce0 <checkAktifCalisma+0xe14>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e002      	b.n	8004af0 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004aea:	4b7d      	ldr	r3, [pc, #500]	@ (8004ce0 <checkAktifCalisma+0xe14>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004af0:	4b75      	ldr	r3, [pc, #468]	@ (8004cc8 <checkAktifCalisma+0xdfc>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <checkAktifCalisma+0xc3c>
 8004af8:	4b79      	ldr	r3, [pc, #484]	@ (8004ce0 <checkAktifCalisma+0xe14>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <checkAktifCalisma+0xc3c>
 8004b00:	4b78      	ldr	r3, [pc, #480]	@ (8004ce4 <checkAktifCalisma+0xe18>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2180      	movs	r1, #128	@ 0x80
 8004b0c:	4876      	ldr	r0, [pc, #472]	@ (8004ce8 <checkAktifCalisma+0xe1c>)
 8004b0e:	f006 fd4e 	bl	800b5ae <HAL_GPIO_WritePin>
 8004b12:	e004      	b.n	8004b1e <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	4873      	ldr	r0, [pc, #460]	@ (8004ce8 <checkAktifCalisma+0xe1c>)
 8004b1a:	f006 fd48 	bl	800b5ae <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b1e:	4b73      	ldr	r3, [pc, #460]	@ (8004cec <checkAktifCalisma+0xe20>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d141      	bne.n	8004baa <checkAktifCalisma+0xcde>
 8004b26:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d003      	beq.n	8004b36 <checkAktifCalisma+0xc6a>
 8004b2e:	4b68      	ldr	r3, [pc, #416]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d139      	bne.n	8004baa <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b3a:	4866      	ldr	r0, [pc, #408]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004b3c:	f006 fd20 	bl	800b580 <HAL_GPIO_ReadPin>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <checkAktifCalisma+0xc82>
 8004b46:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf0 <checkAktifCalisma+0xe24>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <checkAktifCalisma+0xc9a>
 8004b4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b52:	4868      	ldr	r0, [pc, #416]	@ (8004cf4 <checkAktifCalisma+0xe28>)
 8004b54:	f006 fd14 	bl	800b580 <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d125      	bne.n	8004baa <checkAktifCalisma+0xcde>
 8004b5e:	4b64      	ldr	r3, [pc, #400]	@ (8004cf0 <checkAktifCalisma+0xe24>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d121      	bne.n	8004baa <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004b66:	2102      	movs	r1, #2
 8004b68:	485a      	ldr	r0, [pc, #360]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004b6a:	f006 fd09 	bl	800b580 <HAL_GPIO_ReadPin>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d11a      	bne.n	8004baa <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004b74:	2104      	movs	r1, #4
 8004b76:	4857      	ldr	r0, [pc, #348]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004b78:	f006 fd02 	bl	800b580 <HAL_GPIO_ReadPin>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d113      	bne.n	8004baa <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004b82:	4b56      	ldr	r3, [pc, #344]	@ (8004cdc <checkAktifCalisma+0xe10>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00f      	beq.n	8004baa <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <checkAktifCalisma+0xe2c>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f083 0301 	eor.w	r3, r3, #1
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004b98:	4b58      	ldr	r3, [pc, #352]	@ (8004cfc <checkAktifCalisma+0xe30>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004b9e:	4b58      	ldr	r3, [pc, #352]	@ (8004d00 <checkAktifCalisma+0xe34>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a58      	ldr	r2, [pc, #352]	@ (8004d04 <checkAktifCalisma+0xe38>)
 8004ba4:	6013      	str	r3, [r2, #0]
					bekle();
 8004ba6:	f7fe fff5 	bl	8003b94 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004baa:	4b55      	ldr	r3, [pc, #340]	@ (8004d00 <checkAktifCalisma+0xe34>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b55      	ldr	r3, [pc, #340]	@ (8004d04 <checkAktifCalisma+0xe38>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	4a54      	ldr	r2, [pc, #336]	@ (8004d08 <checkAktifCalisma+0xe3c>)
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d20d      	bcs.n	8004bd8 <checkAktifCalisma+0xd0c>
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	4845      	ldr	r0, [pc, #276]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004bc0:	f006 fcde 	bl	800b580 <HAL_GPIO_ReadPin>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d006      	beq.n	8004bd8 <checkAktifCalisma+0xd0c>
 8004bca:	4b44      	ldr	r3, [pc, #272]	@ (8004cdc <checkAktifCalisma+0xe10>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f083 0301 	eor.w	r3, r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004bd8:	4b48      	ldr	r3, [pc, #288]	@ (8004cfc <checkAktifCalisma+0xe30>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004bde:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <checkAktifCalisma+0xe20>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d135      	bne.n	8004c52 <checkAktifCalisma+0xd86>
 8004be6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d003      	beq.n	8004bf6 <checkAktifCalisma+0xd2a>
 8004bee:	4b38      	ldr	r3, [pc, #224]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d12d      	bne.n	8004c52 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004bf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bfa:	4836      	ldr	r0, [pc, #216]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004bfc:	f006 fcc0 	bl	800b580 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <checkAktifCalisma+0xd42>
 8004c06:	4b3a      	ldr	r3, [pc, #232]	@ (8004cf0 <checkAktifCalisma+0xe24>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <checkAktifCalisma+0xd5a>
 8004c0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c12:	4838      	ldr	r0, [pc, #224]	@ (8004cf4 <checkAktifCalisma+0xe28>)
 8004c14:	f006 fcb4 	bl	800b580 <HAL_GPIO_ReadPin>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d119      	bne.n	8004c52 <checkAktifCalisma+0xd86>
 8004c1e:	4b34      	ldr	r3, [pc, #208]	@ (8004cf0 <checkAktifCalisma+0xe24>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d115      	bne.n	8004c52 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c26:	2102      	movs	r1, #2
 8004c28:	482a      	ldr	r0, [pc, #168]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004c2a:	f006 fca9 	bl	800b580 <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10e      	bne.n	8004c52 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c34:	2104      	movs	r1, #4
 8004c36:	4827      	ldr	r0, [pc, #156]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004c38:	f006 fca2 	bl	800b580 <HAL_GPIO_ReadPin>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004c42:	4b26      	ldr	r3, [pc, #152]	@ (8004cdc <checkAktifCalisma+0xe10>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004c4a:	4b30      	ldr	r3, [pc, #192]	@ (8004d0c <checkAktifCalisma+0xe40>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e002      	b.n	8004c58 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004c52:	4b2e      	ldr	r3, [pc, #184]	@ (8004d0c <checkAktifCalisma+0xe40>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c58:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <checkAktifCalisma+0xe20>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d11d      	bne.n	8004c9c <checkAktifCalisma+0xdd0>
 8004c60:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d003      	beq.n	8004c70 <checkAktifCalisma+0xda4>
 8004c68:	4b19      	ldr	r3, [pc, #100]	@ (8004cd0 <checkAktifCalisma+0xe04>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d115      	bne.n	8004c9c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c70:	2102      	movs	r1, #2
 8004c72:	4818      	ldr	r0, [pc, #96]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004c74:	f006 fc84 	bl	800b580 <HAL_GPIO_ReadPin>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10e      	bne.n	8004c9c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c7e:	2104      	movs	r1, #4
 8004c80:	4814      	ldr	r0, [pc, #80]	@ (8004cd4 <checkAktifCalisma+0xe08>)
 8004c82:	f006 fc7d 	bl	800b580 <HAL_GPIO_ReadPin>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004c8c:	4b13      	ldr	r3, [pc, #76]	@ (8004cdc <checkAktifCalisma+0xe10>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <checkAktifCalisma+0xe44>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e002      	b.n	8004ca2 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004d10 <checkAktifCalisma+0xe44>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d0c <checkAktifCalisma+0xe40>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <checkAktifCalisma+0xdee>
 8004caa:	4b19      	ldr	r3, [pc, #100]	@ (8004d10 <checkAktifCalisma+0xe44>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <checkAktifCalisma+0xdee>
 8004cb2:	4b12      	ldr	r3, [pc, #72]	@ (8004cfc <checkAktifCalisma+0xe30>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02c      	beq.n	8004d14 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004cba:	2201      	movs	r2, #1
 8004cbc:	2140      	movs	r1, #64	@ 0x40
 8004cbe:	480a      	ldr	r0, [pc, #40]	@ (8004ce8 <checkAktifCalisma+0xe1c>)
 8004cc0:	f006 fc75 	bl	800b5ae <HAL_GPIO_WritePin>
 8004cc4:	e02b      	b.n	8004d1e <checkAktifCalisma+0xe52>
 8004cc6:	bf00      	nop
 8004cc8:	200010ff 	.word	0x200010ff
 8004ccc:	200010c5 	.word	0x200010c5
 8004cd0:	200010c4 	.word	0x200010c4
 8004cd4:	40011000 	.word	0x40011000
 8004cd8:	200010c2 	.word	0x200010c2
 8004cdc:	200010fd 	.word	0x200010fd
 8004ce0:	20001100 	.word	0x20001100
 8004ce4:	200010fe 	.word	0x200010fe
 8004ce8:	40010800 	.word	0x40010800
 8004cec:	200010c6 	.word	0x200010c6
 8004cf0:	200010c8 	.word	0x200010c8
 8004cf4:	40010c00 	.word	0x40010c00
 8004cf8:	200010eb 	.word	0x200010eb
 8004cfc:	20001101 	.word	0x20001101
 8004d00:	20001094 	.word	0x20001094
 8004d04:	20001098 	.word	0x20001098
 8004d08:	200010d6 	.word	0x200010d6
 8004d0c:	20001102 	.word	0x20001102
 8004d10:	20001103 	.word	0x20001103
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004d14:	2200      	movs	r2, #0
 8004d16:	2140      	movs	r1, #64	@ 0x40
 8004d18:	4835      	ldr	r0, [pc, #212]	@ (8004df0 <checkAktifCalisma+0xf24>)
 8004d1a:	f006 fc48 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004d1e:	4b35      	ldr	r3, [pc, #212]	@ (8004df4 <checkAktifCalisma+0xf28>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <checkAktifCalisma+0xe62>
 8004d26:	4b33      	ldr	r3, [pc, #204]	@ (8004df4 <checkAktifCalisma+0xf28>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d115      	bne.n	8004d5a <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4831      	ldr	r0, [pc, #196]	@ (8004df8 <checkAktifCalisma+0xf2c>)
 8004d32:	f006 fc25 	bl	800b580 <HAL_GPIO_ReadPin>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d003      	beq.n	8004d44 <checkAktifCalisma+0xe78>
 8004d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004dfc <checkAktifCalisma+0xf30>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004d44:	2102      	movs	r1, #2
 8004d46:	482c      	ldr	r0, [pc, #176]	@ (8004df8 <checkAktifCalisma+0xf2c>)
 8004d48:	f006 fc1a 	bl	800b580 <HAL_GPIO_ReadPin>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004d52:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <checkAktifCalisma+0xf34>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e002      	b.n	8004d60 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004d5a:	4b29      	ldr	r3, [pc, #164]	@ (8004e00 <checkAktifCalisma+0xf34>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004d60:	4b24      	ldr	r3, [pc, #144]	@ (8004df4 <checkAktifCalisma+0xf28>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d003      	beq.n	8004d70 <checkAktifCalisma+0xea4>
 8004d68:	4b22      	ldr	r3, [pc, #136]	@ (8004df4 <checkAktifCalisma+0xf28>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d111      	bne.n	8004d94 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d70:	2102      	movs	r1, #2
 8004d72:	4821      	ldr	r0, [pc, #132]	@ (8004df8 <checkAktifCalisma+0xf2c>)
 8004d74:	f006 fc04 	bl	800b580 <HAL_GPIO_ReadPin>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10a      	bne.n	8004d94 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004d7e:	2104      	movs	r1, #4
 8004d80:	481d      	ldr	r0, [pc, #116]	@ (8004df8 <checkAktifCalisma+0xf2c>)
 8004d82:	f006 fbfd 	bl	800b580 <HAL_GPIO_ReadPin>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e04 <checkAktifCalisma+0xf38>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e002      	b.n	8004d9a <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004d94:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <checkAktifCalisma+0xf38>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004d9a:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <checkAktifCalisma+0xf34>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004da2:	4b19      	ldr	r3, [pc, #100]	@ (8004e08 <checkAktifCalisma+0xf3c>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d10b      	bne.n	8004dc2 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004daa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dae:	4817      	ldr	r0, [pc, #92]	@ (8004e0c <checkAktifCalisma+0xf40>)
 8004db0:	f006 fbe6 	bl	800b580 <HAL_GPIO_ReadPin>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004dba:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <checkAktifCalisma+0xf44>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e002      	b.n	8004dc8 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	@ (8004e10 <checkAktifCalisma+0xf44>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <checkAktifCalisma+0xf38>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d023      	beq.n	8004e18 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <checkAktifCalisma+0xf3c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d11f      	bne.n	8004e18 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004dd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ddc:	480b      	ldr	r0, [pc, #44]	@ (8004e0c <checkAktifCalisma+0xf40>)
 8004dde:	f006 fbcf 	bl	800b580 <HAL_GPIO_ReadPin>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d117      	bne.n	8004e18 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e14 <checkAktifCalisma+0xf48>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e016      	b.n	8004e1e <checkAktifCalisma+0xf52>
 8004df0:	40010800 	.word	0x40010800
 8004df4:	200010c9 	.word	0x200010c9
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	200010c2 	.word	0x200010c2
 8004e00:	20001107 	.word	0x20001107
 8004e04:	20001108 	.word	0x20001108
 8004e08:	200010c8 	.word	0x200010c8
 8004e0c:	40010c00 	.word	0x40010c00
 8004e10:	20001117 	.word	0x20001117
 8004e14:	20001118 	.word	0x20001118
				} else {
					kapiactablaesp2=0;
 8004e18:	4b7e      	ldr	r3, [pc, #504]	@ (8005014 <checkAktifCalisma+0x1148>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004e1e:	4b7e      	ldr	r3, [pc, #504]	@ (8005018 <checkAktifCalisma+0x114c>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d154      	bne.n	8004ed0 <checkAktifCalisma+0x1004>
 8004e26:	4b7d      	ldr	r3, [pc, #500]	@ (800501c <checkAktifCalisma+0x1150>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <checkAktifCalisma+0xf6a>
 8004e2e:	4b7b      	ldr	r3, [pc, #492]	@ (800501c <checkAktifCalisma+0x1150>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d14c      	bne.n	8004ed0 <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004e36:	4b7a      	ldr	r3, [pc, #488]	@ (8005020 <checkAktifCalisma+0x1154>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <checkAktifCalisma+0xf7a>
 8004e3e:	4b79      	ldr	r3, [pc, #484]	@ (8005024 <checkAktifCalisma+0x1158>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d044      	beq.n	8004ed0 <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004e46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e4a:	4877      	ldr	r0, [pc, #476]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004e4c:	f006 fb98 	bl	800b580 <HAL_GPIO_ReadPin>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01c      	beq.n	8004e90 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004e56:	2180      	movs	r1, #128	@ 0x80
 8004e58:	4873      	ldr	r0, [pc, #460]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004e5a:	f006 fb91 	bl	800b580 <HAL_GPIO_ReadPin>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004e64:	2104      	movs	r1, #4
 8004e66:	4870      	ldr	r0, [pc, #448]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004e68:	f006 fb8a 	bl	800b580 <HAL_GPIO_ReadPin>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00e      	beq.n	8004e90 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004e72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e76:	486c      	ldr	r0, [pc, #432]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004e78:	f006 fb82 	bl	800b580 <HAL_GPIO_ReadPin>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004e82:	2102      	movs	r1, #2
 8004e84:	4868      	ldr	r0, [pc, #416]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004e86:	f006 fb7b 	bl	800b580 <HAL_GPIO_ReadPin>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d103      	bne.n	8004e98 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004e90:	4b66      	ldr	r3, [pc, #408]	@ (800502c <checkAktifCalisma+0x1160>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <checkAktifCalisma+0xfdc>
 8004e98:	4b65      	ldr	r3, [pc, #404]	@ (8005030 <checkAktifCalisma+0x1164>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <checkAktifCalisma+0xfdc>
 8004ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8005014 <checkAktifCalisma+0x1148>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004ea8:	4b62      	ldr	r3, [pc, #392]	@ (8005034 <checkAktifCalisma+0x1168>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00f      	beq.n	8004ed0 <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 8004eb0:	4b61      	ldr	r3, [pc, #388]	@ (8005038 <checkAktifCalisma+0x116c>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 8004ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800503c <checkAktifCalisma+0x1170>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8005040 <checkAktifCalisma+0x1174>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8005044 <checkAktifCalisma+0x1178>)
 8004eca:	6013      	str	r3, [r2, #0]
					bekle();
 8004ecc:	f7fe fe62 	bl	8003b94 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8005040 <checkAktifCalisma+0x1174>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <checkAktifCalisma+0x1178>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	4a5b      	ldr	r2, [pc, #364]	@ (8005048 <checkAktifCalisma+0x117c>)
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d214      	bcs.n	8004f0c <checkAktifCalisma+0x1040>
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8005020 <checkAktifCalisma+0x1154>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f083 0301 	eor.w	r3, r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <checkAktifCalisma+0x1032>
 8004ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8005024 <checkAktifCalisma+0x1158>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f083 0301 	eor.w	r3, r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <checkAktifCalisma+0x1040>
 8004efe:	4b4d      	ldr	r3, [pc, #308]	@ (8005034 <checkAktifCalisma+0x1168>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	f083 0301 	eor.w	r3, r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8004f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800503c <checkAktifCalisma+0x1170>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f12:	4b41      	ldr	r3, [pc, #260]	@ (8005018 <checkAktifCalisma+0x114c>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d148      	bne.n	8004fac <checkAktifCalisma+0x10e0>
 8004f1a:	4b40      	ldr	r3, [pc, #256]	@ (800501c <checkAktifCalisma+0x1150>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d003      	beq.n	8004f2a <checkAktifCalisma+0x105e>
 8004f22:	4b3e      	ldr	r3, [pc, #248]	@ (800501c <checkAktifCalisma+0x1150>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d140      	bne.n	8004fac <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005020 <checkAktifCalisma+0x1154>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <checkAktifCalisma+0x106e>
 8004f32:	4b3c      	ldr	r3, [pc, #240]	@ (8005024 <checkAktifCalisma+0x1158>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d038      	beq.n	8004fac <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f3e:	483a      	ldr	r0, [pc, #232]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004f40:	f006 fb1e 	bl	800b580 <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01c      	beq.n	8004f84 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	4836      	ldr	r0, [pc, #216]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004f4e:	f006 fb17 	bl	800b580 <HAL_GPIO_ReadPin>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004f58:	2104      	movs	r1, #4
 8004f5a:	4833      	ldr	r0, [pc, #204]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004f5c:	f006 fb10 	bl	800b580 <HAL_GPIO_ReadPin>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d00e      	beq.n	8004f84 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f6a:	482f      	ldr	r0, [pc, #188]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004f6c:	f006 fb08 	bl	800b580 <HAL_GPIO_ReadPin>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004f76:	2102      	movs	r1, #2
 8004f78:	482b      	ldr	r0, [pc, #172]	@ (8005028 <checkAktifCalisma+0x115c>)
 8004f7a:	f006 fb01 	bl	800b580 <HAL_GPIO_ReadPin>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d103      	bne.n	8004f8c <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004f84:	4b29      	ldr	r3, [pc, #164]	@ (800502c <checkAktifCalisma+0x1160>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <checkAktifCalisma+0x10d0>
 8004f8c:	4b28      	ldr	r3, [pc, #160]	@ (8005030 <checkAktifCalisma+0x1164>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <checkAktifCalisma+0x10d0>
 8004f94:	4b1f      	ldr	r3, [pc, #124]	@ (8005014 <checkAktifCalisma+0x1148>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004f9c:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <checkAktifCalisma+0x1168>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004fa4:	4b29      	ldr	r3, [pc, #164]	@ (800504c <checkAktifCalisma+0x1180>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004fac:	4b27      	ldr	r3, [pc, #156]	@ (800504c <checkAktifCalisma+0x1180>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004fb2:	4b19      	ldr	r3, [pc, #100]	@ (8005018 <checkAktifCalisma+0x114c>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d117      	bne.n	8004fea <checkAktifCalisma+0x111e>
 8004fba:	4b18      	ldr	r3, [pc, #96]	@ (800501c <checkAktifCalisma+0x1150>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d003      	beq.n	8004fca <checkAktifCalisma+0x10fe>
 8004fc2:	4b16      	ldr	r3, [pc, #88]	@ (800501c <checkAktifCalisma+0x1150>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d10f      	bne.n	8004fea <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004fca:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <checkAktifCalisma+0x1154>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <checkAktifCalisma+0x110e>
 8004fd2:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <checkAktifCalisma+0x1158>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004fda:	4b16      	ldr	r3, [pc, #88]	@ (8005034 <checkAktifCalisma+0x1168>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <checkAktifCalisma+0x1184>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e002      	b.n	8004ff0 <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004fea:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <checkAktifCalisma+0x1184>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004ff0:	4b16      	ldr	r3, [pc, #88]	@ (800504c <checkAktifCalisma+0x1180>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <checkAktifCalisma+0x113c>
 8004ff8:	4b10      	ldr	r3, [pc, #64]	@ (800503c <checkAktifCalisma+0x1170>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d103      	bne.n	8005008 <checkAktifCalisma+0x113c>
 8005000:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <checkAktifCalisma+0x1184>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d027      	beq.n	8005058 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005008:	2201      	movs	r2, #1
 800500a:	2120      	movs	r1, #32
 800500c:	4811      	ldr	r0, [pc, #68]	@ (8005054 <checkAktifCalisma+0x1188>)
 800500e:	f006 face 	bl	800b5ae <HAL_GPIO_WritePin>
 8005012:	e026      	b.n	8005062 <checkAktifCalisma+0x1196>
 8005014:	20001118 	.word	0x20001118
 8005018:	200010c7 	.word	0x200010c7
 800501c:	200010c4 	.word	0x200010c4
 8005020:	20001107 	.word	0x20001107
 8005024:	20001108 	.word	0x20001108
 8005028:	40011000 	.word	0x40011000
 800502c:	200010c8 	.word	0x200010c8
 8005030:	20001117 	.word	0x20001117
 8005034:	200010fd 	.word	0x200010fd
 8005038:	200010eb 	.word	0x200010eb
 800503c:	20001104 	.word	0x20001104
 8005040:	20001094 	.word	0x20001094
 8005044:	20001098 	.word	0x20001098
 8005048:	200010d7 	.word	0x200010d7
 800504c:	20001105 	.word	0x20001105
 8005050:	20001106 	.word	0x20001106
 8005054:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005058:	2200      	movs	r2, #0
 800505a:	2120      	movs	r1, #32
 800505c:	4887      	ldr	r0, [pc, #540]	@ (800527c <checkAktifCalisma+0x13b0>)
 800505e:	f006 faa6 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005062:	4b87      	ldr	r3, [pc, #540]	@ (8005280 <checkAktifCalisma+0x13b4>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <checkAktifCalisma+0x11bc>
 800506a:	2102      	movs	r1, #2
 800506c:	4885      	ldr	r0, [pc, #532]	@ (8005284 <checkAktifCalisma+0x13b8>)
 800506e:	f006 fa87 	bl	800b580 <HAL_GPIO_ReadPin>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <checkAktifCalisma+0x11bc>
 8005078:	4b83      	ldr	r3, [pc, #524]	@ (8005288 <checkAktifCalisma+0x13bc>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <checkAktifCalisma+0x11bc>
 8005080:	4b82      	ldr	r3, [pc, #520]	@ (800528c <checkAktifCalisma+0x13c0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d112      	bne.n	80050ae <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005088:	4b81      	ldr	r3, [pc, #516]	@ (8005290 <checkAktifCalisma+0x13c4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d032      	beq.n	80050f6 <checkAktifCalisma+0x122a>
 8005090:	2104      	movs	r1, #4
 8005092:	487c      	ldr	r0, [pc, #496]	@ (8005284 <checkAktifCalisma+0x13b8>)
 8005094:	f006 fa74 	bl	800b580 <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d12b      	bne.n	80050f6 <checkAktifCalisma+0x122a>
 800509e:	4b7a      	ldr	r3, [pc, #488]	@ (8005288 <checkAktifCalisma+0x13bc>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d027      	beq.n	80050f6 <checkAktifCalisma+0x122a>
 80050a6:	4b79      	ldr	r3, [pc, #484]	@ (800528c <checkAktifCalisma+0x13c0>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d023      	beq.n	80050f6 <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 80050ae:	4b79      	ldr	r3, [pc, #484]	@ (8005294 <checkAktifCalisma+0x13c8>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	3b02      	subs	r3, #2
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4b77      	ldr	r3, [pc, #476]	@ (8005294 <checkAktifCalisma+0x13c8>)
 80050b8:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80050ba:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <checkAktifCalisma+0x13c8>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2bff      	cmp	r3, #255	@ 0xff
 80050c0:	d108      	bne.n	80050d4 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 80050c2:	4b74      	ldr	r3, [pc, #464]	@ (8005294 <checkAktifCalisma+0x13c8>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80050c8:	4b73      	ldr	r3, [pc, #460]	@ (8005298 <checkAktifCalisma+0x13cc>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	4b71      	ldr	r3, [pc, #452]	@ (8005298 <checkAktifCalisma+0x13cc>)
 80050d2:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80050d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005294 <checkAktifCalisma+0x13c8>)
 80050d6:	781a      	ldrb	r2, [r3, #0]
 80050d8:	4b70      	ldr	r3, [pc, #448]	@ (800529c <checkAktifCalisma+0x13d0>)
 80050da:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80050dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005298 <checkAktifCalisma+0x13cc>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	4b6e      	ldr	r3, [pc, #440]	@ (800529c <checkAktifCalisma+0x13d0>)
 80050e2:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80050e4:	4b6e      	ldr	r3, [pc, #440]	@ (80052a0 <checkAktifCalisma+0x13d4>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80050ea:	4b65      	ldr	r3, [pc, #404]	@ (8005280 <checkAktifCalisma+0x13b4>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80050f0:	4b67      	ldr	r3, [pc, #412]	@ (8005290 <checkAktifCalisma+0x13c4>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80050f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050fa:	486a      	ldr	r0, [pc, #424]	@ (80052a4 <checkAktifCalisma+0x13d8>)
 80050fc:	f006 fa40 	bl	800b580 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005106:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800510a:	4866      	ldr	r0, [pc, #408]	@ (80052a4 <checkAktifCalisma+0x13d8>)
 800510c:	f006 fa38 	bl	800b580 <HAL_GPIO_ReadPin>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800511a:	4862      	ldr	r0, [pc, #392]	@ (80052a4 <checkAktifCalisma+0x13d8>)
 800511c:	f006 fa30 	bl	800b580 <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005126:	2140      	movs	r1, #64	@ 0x40
 8005128:	4856      	ldr	r0, [pc, #344]	@ (8005284 <checkAktifCalisma+0x13b8>)
 800512a:	f006 fa29 	bl	800b580 <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <checkAktifCalisma+0x1270>

					startBasili=1;
 8005134:	4b5c      	ldr	r3, [pc, #368]	@ (80052a8 <checkAktifCalisma+0x13dc>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e002      	b.n	8005142 <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 800513c:	4b5a      	ldr	r3, [pc, #360]	@ (80052a8 <checkAktifCalisma+0x13dc>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005142:	4b59      	ldr	r3, [pc, #356]	@ (80052a8 <checkAktifCalisma+0x13dc>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <checkAktifCalisma+0x12a8>
 800514a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800514e:	4855      	ldr	r0, [pc, #340]	@ (80052a4 <checkAktifCalisma+0x13d8>)
 8005150:	f006 fa16 	bl	800b580 <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d10c      	bne.n	8005174 <checkAktifCalisma+0x12a8>

					hataVar=1;
 800515a:	4b54      	ldr	r3, [pc, #336]	@ (80052ac <checkAktifCalisma+0x13e0>)
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005160:	2001      	movs	r0, #1
 8005162:	f7fb fcd5 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005166:	2001      	movs	r0, #1
 8005168:	f7fb fc7a 	bl	8000a60 <hata2EEPROM>
					acilstophatasi=1;
 800516c:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <checkAktifCalisma+0x13e4>)
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e018      	b.n	80051a6 <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005174:	4b4e      	ldr	r3, [pc, #312]	@ (80052b0 <checkAktifCalisma+0x13e4>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d014      	beq.n	80051a6 <checkAktifCalisma+0x12da>
 800517c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005180:	4848      	ldr	r0, [pc, #288]	@ (80052a4 <checkAktifCalisma+0x13d8>)
 8005182:	f006 f9fd 	bl	800b580 <HAL_GPIO_ReadPin>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10c      	bne.n	80051a6 <checkAktifCalisma+0x12da>
 800518c:	4b46      	ldr	r3, [pc, #280]	@ (80052a8 <checkAktifCalisma+0x13dc>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f083 0301 	eor.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 800519a:	4b45      	ldr	r3, [pc, #276]	@ (80052b0 <checkAktifCalisma+0x13e4>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80051a0:	2001      	movs	r0, #1
 80051a2:	f7fe fc8d 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80051a6:	4b43      	ldr	r3, [pc, #268]	@ (80052b4 <checkAktifCalisma+0x13e8>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f083 0301 	eor.w	r3, r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d023      	beq.n	80051fc <checkAktifCalisma+0x1330>
 80051b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80051b8:	483a      	ldr	r0, [pc, #232]	@ (80052a4 <checkAktifCalisma+0x13d8>)
 80051ba:	f006 f9e1 	bl	800b580 <HAL_GPIO_ReadPin>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <checkAktifCalisma+0x1300>
 80051c4:	4b3c      	ldr	r3, [pc, #240]	@ (80052b8 <checkAktifCalisma+0x13ec>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d017      	beq.n	80051fc <checkAktifCalisma+0x1330>
 80051cc:	4b3b      	ldr	r3, [pc, #236]	@ (80052bc <checkAktifCalisma+0x13f0>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d113      	bne.n	80051fc <checkAktifCalisma+0x1330>
 80051d4:	4b3a      	ldr	r3, [pc, #232]	@ (80052c0 <checkAktifCalisma+0x13f4>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00c      	beq.n	80051fc <checkAktifCalisma+0x1330>
					hataVar=1;
 80051e2:	4b32      	ldr	r3, [pc, #200]	@ (80052ac <checkAktifCalisma+0x13e0>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80051e8:	2002      	movs	r0, #2
 80051ea:	f7fb fc91 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80051ee:	2002      	movs	r0, #2
 80051f0:	f7fb fc36 	bl	8000a60 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80051f4:	4b32      	ldr	r3, [pc, #200]	@ (80052c0 <checkAktifCalisma+0x13f4>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e017      	b.n	800522c <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80051fc:	4b30      	ldr	r3, [pc, #192]	@ (80052c0 <checkAktifCalisma+0x13f4>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d013      	beq.n	800522c <checkAktifCalisma+0x1360>
 8005204:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <checkAktifCalisma+0x13e8>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <checkAktifCalisma+0x1360>
 800520c:	4b2d      	ldr	r3, [pc, #180]	@ (80052c4 <checkAktifCalisma+0x13f8>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f083 0301 	eor.w	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800521a:	4b29      	ldr	r3, [pc, #164]	@ (80052c0 <checkAktifCalisma+0x13f4>)
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005220:	4b25      	ldr	r3, [pc, #148]	@ (80052b8 <checkAktifCalisma+0x13ec>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8005226:	2002      	movs	r0, #2
 8005228:	f7fe fc4a 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800522c:	4b26      	ldr	r3, [pc, #152]	@ (80052c8 <checkAktifCalisma+0x13fc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d151      	bne.n	80052d8 <checkAktifCalisma+0x140c>
 8005234:	4b25      	ldr	r3, [pc, #148]	@ (80052cc <checkAktifCalisma+0x1400>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d14d      	bne.n	80052d8 <checkAktifCalisma+0x140c>
 800523c:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <checkAktifCalisma+0x1404>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d049      	beq.n	80052d8 <checkAktifCalisma+0x140c>
 8005244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005248:	480e      	ldr	r0, [pc, #56]	@ (8005284 <checkAktifCalisma+0x13b8>)
 800524a:	f006 f999 	bl	800b580 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d141      	bne.n	80052d8 <checkAktifCalisma+0x140c>
 8005254:	4b1f      	ldr	r3, [pc, #124]	@ (80052d4 <checkAktifCalisma+0x1408>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f083 0301 	eor.w	r3, r3, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03a      	beq.n	80052d8 <checkAktifCalisma+0x140c>
					hataVar=1;
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <checkAktifCalisma+0x13e0>)
 8005264:	2201      	movs	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005268:	2003      	movs	r0, #3
 800526a:	f7fb fc51 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(3);
 800526e:	2003      	movs	r0, #3
 8005270:	f7fb fbf6 	bl	8000a60 <hata2EEPROM>
					basinchatasi=1;
 8005274:	4b17      	ldr	r3, [pc, #92]	@ (80052d4 <checkAktifCalisma+0x1408>)
 8005276:	2201      	movs	r2, #1
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	e043      	b.n	8005304 <checkAktifCalisma+0x1438>
 800527c:	40010800 	.word	0x40010800
 8005280:	200010fb 	.word	0x200010fb
 8005284:	40011000 	.word	0x40011000
 8005288:	200010c2 	.word	0x200010c2
 800528c:	200010fd 	.word	0x200010fd
 8005290:	200010fc 	.word	0x200010fc
 8005294:	200010b4 	.word	0x200010b4
 8005298:	200010b6 	.word	0x200010b6
 800529c:	20000fec 	.word	0x20000fec
 80052a0:	200010e8 	.word	0x200010e8
 80052a4:	40010c00 	.word	0x40010c00
 80052a8:	20001109 	.word	0x20001109
 80052ac:	20001110 	.word	0x20001110
 80052b0:	2000110b 	.word	0x2000110b
 80052b4:	20001112 	.word	0x20001112
 80052b8:	2000111c 	.word	0x2000111c
 80052bc:	200010c0 	.word	0x200010c0
 80052c0:	2000110c 	.word	0x2000110c
 80052c4:	200010f4 	.word	0x200010f4
 80052c8:	200010bf 	.word	0x200010bf
 80052cc:	200010c3 	.word	0x200010c3
 80052d0:	2000110f 	.word	0x2000110f
 80052d4:	20001119 	.word	0x20001119
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80052d8:	4b85      	ldr	r3, [pc, #532]	@ (80054f0 <checkAktifCalisma+0x1624>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <checkAktifCalisma+0x1438>
 80052e0:	4b84      	ldr	r3, [pc, #528]	@ (80054f4 <checkAktifCalisma+0x1628>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10d      	bne.n	8005304 <checkAktifCalisma+0x1438>
 80052e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052ec:	4882      	ldr	r0, [pc, #520]	@ (80054f8 <checkAktifCalisma+0x162c>)
 80052ee:	f006 f947 	bl	800b580 <HAL_GPIO_ReadPin>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d105      	bne.n	8005304 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 80052f8:	4b7d      	ldr	r3, [pc, #500]	@ (80054f0 <checkAktifCalisma+0x1624>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80052fe:	2003      	movs	r0, #3
 8005300:	f7fe fbde 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005304:	4b7d      	ldr	r3, [pc, #500]	@ (80054fc <checkAktifCalisma+0x1630>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <checkAktifCalisma+0x1448>
 800530c:	4b7c      	ldr	r3, [pc, #496]	@ (8005500 <checkAktifCalisma+0x1634>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d023      	beq.n	800535c <checkAktifCalisma+0x1490>
 8005314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005318:	487a      	ldr	r0, [pc, #488]	@ (8005504 <checkAktifCalisma+0x1638>)
 800531a:	f006 f931 	bl	800b580 <HAL_GPIO_ReadPin>
 800531e:	4603      	mov	r3, r0
 8005320:	2b01      	cmp	r3, #1
 8005322:	d11b      	bne.n	800535c <checkAktifCalisma+0x1490>
 8005324:	4b78      	ldr	r3, [pc, #480]	@ (8005508 <checkAktifCalisma+0x163c>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d003      	beq.n	8005334 <checkAktifCalisma+0x1468>
 800532c:	4b76      	ldr	r3, [pc, #472]	@ (8005508 <checkAktifCalisma+0x163c>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d113      	bne.n	800535c <checkAktifCalisma+0x1490>
 8005334:	4b75      	ldr	r3, [pc, #468]	@ (800550c <checkAktifCalisma+0x1640>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f083 0301 	eor.w	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00c      	beq.n	800535c <checkAktifCalisma+0x1490>
					hataVar=1;
 8005342:	4b73      	ldr	r3, [pc, #460]	@ (8005510 <checkAktifCalisma+0x1644>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005348:	2004      	movs	r0, #4
 800534a:	f7fb fbe1 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800534e:	2004      	movs	r0, #4
 8005350:	f7fb fb86 	bl	8000a60 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005354:	4b6d      	ldr	r3, [pc, #436]	@ (800550c <checkAktifCalisma+0x1640>)
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e01f      	b.n	800539c <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800535c:	4b6b      	ldr	r3, [pc, #428]	@ (800550c <checkAktifCalisma+0x1640>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01b      	beq.n	800539c <checkAktifCalisma+0x14d0>
 8005364:	4b6b      	ldr	r3, [pc, #428]	@ (8005514 <checkAktifCalisma+0x1648>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d017      	beq.n	800539c <checkAktifCalisma+0x14d0>
 800536c:	4b63      	ldr	r3, [pc, #396]	@ (80054fc <checkAktifCalisma+0x1630>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f083 0301 	eor.w	r3, r3, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <checkAktifCalisma+0x14d0>
 800537a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800537e:	4861      	ldr	r0, [pc, #388]	@ (8005504 <checkAktifCalisma+0x1638>)
 8005380:	f006 f8fe 	bl	800b580 <HAL_GPIO_ReadPin>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 800538a:	4b60      	ldr	r3, [pc, #384]	@ (800550c <checkAktifCalisma+0x1640>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005390:	4b5b      	ldr	r3, [pc, #364]	@ (8005500 <checkAktifCalisma+0x1634>)
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005396:	2004      	movs	r0, #4
 8005398:	f7fe fb92 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 800539c:	4b57      	ldr	r3, [pc, #348]	@ (80054fc <checkAktifCalisma+0x1630>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <checkAktifCalisma+0x14e0>
 80053a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005518 <checkAktifCalisma+0x164c>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d023      	beq.n	80053f4 <checkAktifCalisma+0x1528>
 80053ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053b0:	4854      	ldr	r0, [pc, #336]	@ (8005504 <checkAktifCalisma+0x1638>)
 80053b2:	f006 f8e5 	bl	800b580 <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d11b      	bne.n	80053f4 <checkAktifCalisma+0x1528>
 80053bc:	4b52      	ldr	r3, [pc, #328]	@ (8005508 <checkAktifCalisma+0x163c>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d003      	beq.n	80053cc <checkAktifCalisma+0x1500>
 80053c4:	4b50      	ldr	r3, [pc, #320]	@ (8005508 <checkAktifCalisma+0x163c>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d113      	bne.n	80053f4 <checkAktifCalisma+0x1528>
 80053cc:	4b53      	ldr	r3, [pc, #332]	@ (800551c <checkAktifCalisma+0x1650>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f083 0301 	eor.w	r3, r3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <checkAktifCalisma+0x1528>

					hataVar=1;
 80053da:	4b4d      	ldr	r3, [pc, #308]	@ (8005510 <checkAktifCalisma+0x1644>)
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80053e0:	2005      	movs	r0, #5
 80053e2:	f7fb fb95 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80053e6:	2005      	movs	r0, #5
 80053e8:	f7fb fb3a 	bl	8000a60 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80053ec:	4b4b      	ldr	r3, [pc, #300]	@ (800551c <checkAktifCalisma+0x1650>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e023      	b.n	800543c <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80053f4:	4b49      	ldr	r3, [pc, #292]	@ (800551c <checkAktifCalisma+0x1650>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01f      	beq.n	800543c <checkAktifCalisma+0x1570>
 80053fc:	4b45      	ldr	r3, [pc, #276]	@ (8005514 <checkAktifCalisma+0x1648>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01b      	beq.n	800543c <checkAktifCalisma+0x1570>
 8005404:	4b3d      	ldr	r3, [pc, #244]	@ (80054fc <checkAktifCalisma+0x1630>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f083 0301 	eor.w	r3, r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d014      	beq.n	800543c <checkAktifCalisma+0x1570>
 8005412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005416:	483b      	ldr	r0, [pc, #236]	@ (8005504 <checkAktifCalisma+0x1638>)
 8005418:	f006 f8b2 	bl	800b580 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <checkAktifCalisma+0x1570>
 8005422:	4b3c      	ldr	r3, [pc, #240]	@ (8005514 <checkAktifCalisma+0x1648>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 800542a:	4b3c      	ldr	r3, [pc, #240]	@ (800551c <checkAktifCalisma+0x1650>)
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005430:	4b39      	ldr	r3, [pc, #228]	@ (8005518 <checkAktifCalisma+0x164c>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005436:	2005      	movs	r0, #5
 8005438:	f7fe fb42 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 800543c:	4b38      	ldr	r3, [pc, #224]	@ (8005520 <checkAktifCalisma+0x1654>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <checkAktifCalisma+0x1588>
 8005444:	4b37      	ldr	r3, [pc, #220]	@ (8005524 <checkAktifCalisma+0x1658>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d103      	bne.n	8005454 <checkAktifCalisma+0x1588>
 800544c:	4b36      	ldr	r3, [pc, #216]	@ (8005528 <checkAktifCalisma+0x165c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <checkAktifCalisma+0x15c0>
 8005454:	4b35      	ldr	r3, [pc, #212]	@ (800552c <checkAktifCalisma+0x1660>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f083 0301 	eor.w	r3, r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d014      	beq.n	800548c <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005462:	4b33      	ldr	r3, [pc, #204]	@ (8005530 <checkAktifCalisma+0x1664>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b33      	ldr	r3, [pc, #204]	@ (8005534 <checkAktifCalisma+0x1668>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	4a32      	ldr	r2, [pc, #200]	@ (8005538 <checkAktifCalisma+0x166c>)
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	4293      	cmp	r3, r2
 8005472:	d30b      	bcc.n	800548c <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 8005474:	4b26      	ldr	r3, [pc, #152]	@ (8005510 <checkAktifCalisma+0x1644>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800547a:	2006      	movs	r0, #6
 800547c:	f7fb fb48 	bl	8000b10 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005480:	2006      	movs	r0, #6
 8005482:	f7fb faed 	bl	8000a60 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005486:	4b29      	ldr	r3, [pc, #164]	@ (800552c <checkAktifCalisma+0x1660>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800548c:	4b27      	ldr	r3, [pc, #156]	@ (800552c <checkAktifCalisma+0x1660>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d013      	beq.n	80054bc <checkAktifCalisma+0x15f0>
 8005494:	2108      	movs	r1, #8
 8005496:	481b      	ldr	r0, [pc, #108]	@ (8005504 <checkAktifCalisma+0x1638>)
 8005498:	f006 f872 	bl	800b580 <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00c      	beq.n	80054bc <checkAktifCalisma+0x15f0>
 80054a2:	4b16      	ldr	r3, [pc, #88]	@ (80054fc <checkAktifCalisma+0x1630>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f083 0301 	eor.w	r3, r3, #1
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 80054b0:	4b1e      	ldr	r3, [pc, #120]	@ (800552c <checkAktifCalisma+0x1660>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80054b6:	2006      	movs	r0, #6
 80054b8:	f7fe fb02 	bl	8003ac0 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <checkAktifCalisma+0x1670>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <checkAktifCalisma+0x1610>
 80054c4:	4b17      	ldr	r3, [pc, #92]	@ (8005524 <checkAktifCalisma+0x1658>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <checkAktifCalisma+0x1610>
 80054cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <checkAktifCalisma+0x1674>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <checkAktifCalisma+0x1610>
 80054d4:	4b14      	ldr	r3, [pc, #80]	@ (8005528 <checkAktifCalisma+0x165c>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d035      	beq.n	8005548 <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 80054dc:	4b19      	ldr	r3, [pc, #100]	@ (8005544 <checkAktifCalisma+0x1678>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80054e2:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <checkAktifCalisma+0x1634>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80054e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <checkAktifCalisma+0x164c>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e032      	b.n	8005556 <checkAktifCalisma+0x168a>
 80054f0:	20001119 	.word	0x20001119
 80054f4:	200010bf 	.word	0x200010bf
 80054f8:	40010c00 	.word	0x40010c00
 80054fc:	20001109 	.word	0x20001109
 8005500:	2000111d 	.word	0x2000111d
 8005504:	40010800 	.word	0x40010800
 8005508:	200010c4 	.word	0x200010c4
 800550c:	2000111a 	.word	0x2000111a
 8005510:	20001110 	.word	0x20001110
 8005514:	200010fd 	.word	0x200010fd
 8005518:	2000111e 	.word	0x2000111e
 800551c:	2000111b 	.word	0x2000111b
 8005520:	2000110f 	.word	0x2000110f
 8005524:	200010f4 	.word	0x200010f4
 8005528:	200010f3 	.word	0x200010f3
 800552c:	2000110a 	.word	0x2000110a
 8005530:	20001094 	.word	0x20001094
 8005534:	200010a8 	.word	0x200010a8
 8005538:	200010d4 	.word	0x200010d4
 800553c:	200010f1 	.word	0x200010f1
 8005540:	200010f2 	.word	0x200010f2
 8005544:	20001111 	.word	0x20001111
				} else {
					makineCalisiyor=1;
 8005548:	4b3a      	ldr	r3, [pc, #232]	@ (8005634 <checkAktifCalisma+0x1768>)
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 800554e:	4b3a      	ldr	r3, [pc, #232]	@ (8005638 <checkAktifCalisma+0x176c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a3a      	ldr	r2, [pc, #232]	@ (800563c <checkAktifCalisma+0x1770>)
 8005554:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005556:	4b3a      	ldr	r3, [pc, #232]	@ (8005640 <checkAktifCalisma+0x1774>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02f      	beq.n	80055be <checkAktifCalisma+0x16f2>
 800555e:	4b39      	ldr	r3, [pc, #228]	@ (8005644 <checkAktifCalisma+0x1778>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f083 0301 	eor.w	r3, r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d028      	beq.n	80055be <checkAktifCalisma+0x16f2>
 800556c:	4b36      	ldr	r3, [pc, #216]	@ (8005648 <checkAktifCalisma+0x177c>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d021      	beq.n	80055be <checkAktifCalisma+0x16f2>
 800557a:	4b34      	ldr	r3, [pc, #208]	@ (800564c <checkAktifCalisma+0x1780>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f083 0301 	eor.w	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01a      	beq.n	80055be <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005588:	4b31      	ldr	r3, [pc, #196]	@ (8005650 <checkAktifCalisma+0x1784>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f083 0301 	eor.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d013      	beq.n	80055be <checkAktifCalisma+0x16f2>
 8005596:	4b2f      	ldr	r3, [pc, #188]	@ (8005654 <checkAktifCalisma+0x1788>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f083 0301 	eor.w	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <checkAktifCalisma+0x16f2>
 80055a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005658 <checkAktifCalisma+0x178c>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f083 0301 	eor.w	r3, r3, #1
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <checkAktifCalisma+0x16f2>

					hataVar=0;
 80055b2:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <checkAktifCalisma+0x1774>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 80055b8:	2007      	movs	r0, #7
 80055ba:	f7fe fa81 	bl	8003ac0 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 80055be:	4b20      	ldr	r3, [pc, #128]	@ (8005640 <checkAktifCalisma+0x1774>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02a      	beq.n	800561c <checkAktifCalisma+0x1750>
 80055c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005644 <checkAktifCalisma+0x1778>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d023      	beq.n	800561c <checkAktifCalisma+0x1750>
 80055d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005648 <checkAktifCalisma+0x177c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01f      	beq.n	800561c <checkAktifCalisma+0x1750>
 80055dc:	4b1b      	ldr	r3, [pc, #108]	@ (800564c <checkAktifCalisma+0x1780>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d018      	beq.n	800561c <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 80055ea:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <checkAktifCalisma+0x1784>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f083 0301 	eor.w	r3, r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <checkAktifCalisma+0x1750>
 80055f8:	4b16      	ldr	r3, [pc, #88]	@ (8005654 <checkAktifCalisma+0x1788>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f083 0301 	eor.w	r3, r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <checkAktifCalisma+0x1750>
 8005606:	4b14      	ldr	r3, [pc, #80]	@ (8005658 <checkAktifCalisma+0x178c>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f083 0301 	eor.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8005614:	4b11      	ldr	r3, [pc, #68]	@ (800565c <checkAktifCalisma+0x1790>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 800561a:	e009      	b.n	8005630 <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <checkAktifCalisma+0x177c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f083 0301 	eor.w	r3, r3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <checkAktifCalisma+0x1790>)
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
}
 8005630:	bf00      	nop
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20001111 	.word	0x20001111
 8005638:	20001094 	.word	0x20001094
 800563c:	200010a8 	.word	0x200010a8
 8005640:	20001110 	.word	0x20001110
 8005644:	2000110b 	.word	0x2000110b
 8005648:	2000110c 	.word	0x2000110c
 800564c:	20001119 	.word	0x20001119
 8005650:	2000111a 	.word	0x2000111a
 8005654:	2000111b 	.word	0x2000111b
 8005658:	2000110a 	.word	0x2000110a
 800565c:	2000111f 	.word	0x2000111f

08005660 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005664:	4b66      	ldr	r3, [pc, #408]	@ (8005800 <checkDemoModCalisma+0x1a0>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f041 83ab 	bne.w	8006dc4 <checkDemoModCalisma+0x1764>
 800566e:	4b65      	ldr	r3, [pc, #404]	@ (8005804 <checkDemoModCalisma+0x1a4>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f041 83a6 	bne.w	8006dc4 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005678:	4b63      	ldr	r3, [pc, #396]	@ (8005808 <checkDemoModCalisma+0x1a8>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d11a      	bne.n	80056b6 <checkDemoModCalisma+0x56>
 8005680:	4b62      	ldr	r3, [pc, #392]	@ (800580c <checkDemoModCalisma+0x1ac>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d116      	bne.n	80056b6 <checkDemoModCalisma+0x56>
 8005688:	4b61      	ldr	r3, [pc, #388]	@ (8005810 <checkDemoModCalisma+0x1b0>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <checkDemoModCalisma+0x46>
 8005690:	4b60      	ldr	r3, [pc, #384]	@ (8005814 <checkDemoModCalisma+0x1b4>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f083 0301 	eor.w	r3, r3, #1
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <checkDemoModCalisma+0x46>
 800569e:	4b5e      	ldr	r3, [pc, #376]	@ (8005818 <checkDemoModCalisma+0x1b8>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d007      	beq.n	80056b6 <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80056a6:	4b5d      	ldr	r3, [pc, #372]	@ (800581c <checkDemoModCalisma+0x1bc>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01c      	beq.n	80056e8 <checkDemoModCalisma+0x88>
 80056ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005820 <checkDemoModCalisma+0x1c0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d118      	bne.n	80056e8 <checkDemoModCalisma+0x88>
 80056b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005824 <checkDemoModCalisma+0x1c4>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <checkDemoModCalisma+0x66>
 80056be:	4b5a      	ldr	r3, [pc, #360]	@ (8005828 <checkDemoModCalisma+0x1c8>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <checkDemoModCalisma+0x88>
 80056c6:	4b59      	ldr	r3, [pc, #356]	@ (800582c <checkDemoModCalisma+0x1cc>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80056ce:	2201      	movs	r2, #1
 80056d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056d4:	4856      	ldr	r0, [pc, #344]	@ (8005830 <checkDemoModCalisma+0x1d0>)
 80056d6:	f005 ff6a 	bl	800b5ae <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80056da:	4b56      	ldr	r3, [pc, #344]	@ (8005834 <checkDemoModCalisma+0x1d4>)
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80056e0:	4b55      	ldr	r3, [pc, #340]	@ (8005838 <checkDemoModCalisma+0x1d8>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e008      	b.n	80056fa <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056ee:	4850      	ldr	r0, [pc, #320]	@ (8005830 <checkDemoModCalisma+0x1d0>)
 80056f0:	f005 ff5d 	bl	800b5ae <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80056f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005834 <checkDemoModCalisma+0x1d4>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80056fa:	4b42      	ldr	r3, [pc, #264]	@ (8005804 <checkDemoModCalisma+0x1a4>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d164      	bne.n	80057cc <checkDemoModCalisma+0x16c>
 8005702:	4b49      	ldr	r3, [pc, #292]	@ (8005828 <checkDemoModCalisma+0x1c8>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <checkDemoModCalisma+0xb2>
 800570a:	4b46      	ldr	r3, [pc, #280]	@ (8005824 <checkDemoModCalisma+0x1c4>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d05c      	beq.n	80057cc <checkDemoModCalisma+0x16c>
 8005712:	4b46      	ldr	r3, [pc, #280]	@ (800582c <checkDemoModCalisma+0x1cc>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d058      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800571a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800571e:	4844      	ldr	r0, [pc, #272]	@ (8005830 <checkDemoModCalisma+0x1d0>)
 8005720:	f005 ff2e 	bl	800b580 <HAL_GPIO_ReadPin>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <checkDemoModCalisma+0xd2>
 800572a:	4b44      	ldr	r3, [pc, #272]	@ (800583c <checkDemoModCalisma+0x1dc>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04c      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005732:	2102      	movs	r1, #2
 8005734:	4842      	ldr	r0, [pc, #264]	@ (8005840 <checkDemoModCalisma+0x1e0>)
 8005736:	f005 ff23 	bl	800b580 <HAL_GPIO_ReadPin>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d145      	bne.n	80057cc <checkDemoModCalisma+0x16c>
							&& (basincVar)
 8005740:	4b40      	ldr	r3, [pc, #256]	@ (8005844 <checkDemoModCalisma+0x1e4>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d041      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800574c:	4838      	ldr	r0, [pc, #224]	@ (8005830 <checkDemoModCalisma+0x1d0>)
 800574e:	f005 ff17 	bl	800b580 <HAL_GPIO_ReadPin>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10e      	bne.n	8005776 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800575c:	4834      	ldr	r0, [pc, #208]	@ (8005830 <checkDemoModCalisma+0x1d0>)
 800575e:	f005 ff0f 	bl	800b580 <HAL_GPIO_ReadPin>
 8005762:	4603      	mov	r3, r0
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005768:	2140      	movs	r1, #64	@ 0x40
 800576a:	4835      	ldr	r0, [pc, #212]	@ (8005840 <checkDemoModCalisma+0x1e0>)
 800576c:	f005 ff08 	bl	800b580 <HAL_GPIO_ReadPin>
 8005770:	4603      	mov	r3, r0
 8005772:	2b01      	cmp	r3, #1
 8005774:	d003      	beq.n	800577e <checkDemoModCalisma+0x11e>
 8005776:	4b24      	ldr	r3, [pc, #144]	@ (8005808 <checkDemoModCalisma+0x1a8>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d026      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800577e:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <checkDemoModCalisma+0x1b0>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	f083 0301 	eor.w	r3, r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01f      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 800578c:	4b1f      	ldr	r3, [pc, #124]	@ (800580c <checkDemoModCalisma+0x1ac>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f083 0301 	eor.w	r3, r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d018      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 800579a:	4b20      	ldr	r3, [pc, #128]	@ (800581c <checkDemoModCalisma+0x1bc>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f083 0301 	eor.w	r3, r3, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d011      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80057a8:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <checkDemoModCalisma+0x1e8>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f083 0301 	eor.w	r3, r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80057b6:	4b25      	ldr	r3, [pc, #148]	@ (800584c <checkDemoModCalisma+0x1ec>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	f083 0301 	eor.w	r3, r3, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80057c4:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <checkDemoModCalisma+0x1a8>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80057cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005808 <checkDemoModCalisma+0x1a8>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <checkDemoModCalisma+0x1a8>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d03c      	beq.n	8005854 <checkDemoModCalisma+0x1f4>
 80057da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057de:	4818      	ldr	r0, [pc, #96]	@ (8005840 <checkDemoModCalisma+0x1e0>)
 80057e0:	f005 fece 	bl	800b580 <HAL_GPIO_ReadPin>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d134      	bne.n	8005854 <checkDemoModCalisma+0x1f4>
 80057ea:	4b19      	ldr	r3, [pc, #100]	@ (8005850 <checkDemoModCalisma+0x1f0>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d030      	beq.n	8005854 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80057f2:	2201      	movs	r2, #1
 80057f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057f8:	480d      	ldr	r0, [pc, #52]	@ (8005830 <checkDemoModCalisma+0x1d0>)
 80057fa:	f005 fed8 	bl	800b5ae <HAL_GPIO_WritePin>
 80057fe:	e02f      	b.n	8005860 <checkDemoModCalisma+0x200>
 8005800:	200010da 	.word	0x200010da
 8005804:	200010d9 	.word	0x200010d9
 8005808:	200010f1 	.word	0x200010f1
 800580c:	200010f2 	.word	0x200010f2
 8005810:	200010f4 	.word	0x200010f4
 8005814:	200010ec 	.word	0x200010ec
 8005818:	200010cf 	.word	0x200010cf
 800581c:	200010f3 	.word	0x200010f3
 8005820:	200010ce 	.word	0x200010ce
 8005824:	2000110d 	.word	0x2000110d
 8005828:	20001120 	.word	0x20001120
 800582c:	2000110e 	.word	0x2000110e
 8005830:	40010c00 	.word	0x40010c00
 8005834:	2000110f 	.word	0x2000110f
 8005838:	200010fb 	.word	0x200010fb
 800583c:	200010f8 	.word	0x200010f8
 8005840:	40011000 	.word	0x40011000
 8005844:	200010bf 	.word	0x200010bf
 8005848:	200010f6 	.word	0x200010f6
 800584c:	200010f7 	.word	0x200010f7
 8005850:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005854:	2200      	movs	r2, #0
 8005856:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800585a:	4865      	ldr	r0, [pc, #404]	@ (80059f0 <checkDemoModCalisma+0x390>)
 800585c:	f005 fea7 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005860:	4b64      	ldr	r3, [pc, #400]	@ (80059f4 <checkDemoModCalisma+0x394>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <checkDemoModCalisma+0x230>
 8005868:	4b63      	ldr	r3, [pc, #396]	@ (80059f8 <checkDemoModCalisma+0x398>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d007      	beq.n	8005880 <checkDemoModCalisma+0x220>
 8005870:	4b61      	ldr	r3, [pc, #388]	@ (80059f8 <checkDemoModCalisma+0x398>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d003      	beq.n	8005880 <checkDemoModCalisma+0x220>
 8005878:	4b60      	ldr	r3, [pc, #384]	@ (80059fc <checkDemoModCalisma+0x39c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005880:	2201      	movs	r2, #1
 8005882:	2104      	movs	r1, #4
 8005884:	485a      	ldr	r0, [pc, #360]	@ (80059f0 <checkDemoModCalisma+0x390>)
 8005886:	f005 fe92 	bl	800b5ae <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800588a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a00 <checkDemoModCalisma+0x3a0>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005890:	4b5b      	ldr	r3, [pc, #364]	@ (8005a00 <checkDemoModCalisma+0x3a0>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d033      	beq.n	8005900 <checkDemoModCalisma+0x2a0>
 8005898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800589c:	4854      	ldr	r0, [pc, #336]	@ (80059f0 <checkDemoModCalisma+0x390>)
 800589e:	f005 fe6f 	bl	800b580 <HAL_GPIO_ReadPin>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d106      	bne.n	80058b6 <checkDemoModCalisma+0x256>
 80058a8:	4b56      	ldr	r3, [pc, #344]	@ (8005a04 <checkDemoModCalisma+0x3a4>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f083 0301 	eor.w	r3, r3, #1
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <checkDemoModCalisma+0x264>
 80058b6:	2102      	movs	r1, #2
 80058b8:	4853      	ldr	r0, [pc, #332]	@ (8005a08 <checkDemoModCalisma+0x3a8>)
 80058ba:	f005 fe61 	bl	800b580 <HAL_GPIO_ReadPin>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d11d      	bne.n	8005900 <checkDemoModCalisma+0x2a0>
 80058c4:	4b51      	ldr	r3, [pc, #324]	@ (8005a0c <checkDemoModCalisma+0x3ac>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <checkDemoModCalisma+0x274>
 80058cc:	4b50      	ldr	r3, [pc, #320]	@ (8005a10 <checkDemoModCalisma+0x3b0>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <checkDemoModCalisma+0x2a0>
 80058d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005a14 <checkDemoModCalisma+0x3b4>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d011      	beq.n	8005900 <checkDemoModCalisma+0x2a0>
 80058dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a18 <checkDemoModCalisma+0x3b8>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <checkDemoModCalisma+0x2a0>
 80058e4:	4b4d      	ldr	r3, [pc, #308]	@ (8005a1c <checkDemoModCalisma+0x3bc>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f083 0301 	eor.w	r3, r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <checkDemoModCalisma+0x2a0>
					timer2=millis;
 80058f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a20 <checkDemoModCalisma+0x3c0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a4b      	ldr	r2, [pc, #300]	@ (8005a24 <checkDemoModCalisma+0x3c4>)
 80058f8:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80058fa:	4b48      	ldr	r3, [pc, #288]	@ (8005a1c <checkDemoModCalisma+0x3bc>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8005900:	4b47      	ldr	r3, [pc, #284]	@ (8005a20 <checkDemoModCalisma+0x3c0>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4b47      	ldr	r3, [pc, #284]	@ (8005a24 <checkDemoModCalisma+0x3c4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	4a47      	ldr	r2, [pc, #284]	@ (8005a28 <checkDemoModCalisma+0x3c8>)
 800590c:	7812      	ldrb	r2, [r2, #0]
 800590e:	4293      	cmp	r3, r2
 8005910:	d303      	bcc.n	800591a <checkDemoModCalisma+0x2ba>
 8005912:	4b42      	ldr	r3, [pc, #264]	@ (8005a1c <checkDemoModCalisma+0x3bc>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d118      	bne.n	800594c <checkDemoModCalisma+0x2ec>
 800591a:	4b3c      	ldr	r3, [pc, #240]	@ (8005a0c <checkDemoModCalisma+0x3ac>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <checkDemoModCalisma+0x2d6>
 8005928:	4b39      	ldr	r3, [pc, #228]	@ (8005a10 <checkDemoModCalisma+0x3b0>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <checkDemoModCalisma+0x2ec>
 8005936:	4b37      	ldr	r3, [pc, #220]	@ (8005a14 <checkDemoModCalisma+0x3b4>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d103      	bne.n	800594c <checkDemoModCalisma+0x2ec>
 8005944:	4b34      	ldr	r3, [pc, #208]	@ (8005a18 <checkDemoModCalisma+0x3b8>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800594c:	2200      	movs	r2, #0
 800594e:	2104      	movs	r1, #4
 8005950:	4827      	ldr	r0, [pc, #156]	@ (80059f0 <checkDemoModCalisma+0x390>)
 8005952:	f005 fe2c 	bl	800b5ae <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8005956:	4b2a      	ldr	r3, [pc, #168]	@ (8005a00 <checkDemoModCalisma+0x3a0>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800595c:	4b2f      	ldr	r3, [pc, #188]	@ (8005a1c <checkDemoModCalisma+0x3bc>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8005962:	4b32      	ldr	r3, [pc, #200]	@ (8005a2c <checkDemoModCalisma+0x3cc>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <checkDemoModCalisma+0x310>
					cerceveVar=1;
 800596a:	4b31      	ldr	r3, [pc, #196]	@ (8005a30 <checkDemoModCalisma+0x3d0>)
 800596c:	2201      	movs	r2, #1
 800596e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005970:	4b2e      	ldr	r3, [pc, #184]	@ (8005a2c <checkDemoModCalisma+0x3cc>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d116      	bne.n	80059a6 <checkDemoModCalisma+0x346>
 8005978:	4b2e      	ldr	r3, [pc, #184]	@ (8005a34 <checkDemoModCalisma+0x3d4>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d112      	bne.n	80059a6 <checkDemoModCalisma+0x346>
 8005980:	2101      	movs	r1, #1
 8005982:	4821      	ldr	r0, [pc, #132]	@ (8005a08 <checkDemoModCalisma+0x3a8>)
 8005984:	f005 fdfc 	bl	800b580 <HAL_GPIO_ReadPin>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <checkDemoModCalisma+0x346>
 800598e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005992:	4817      	ldr	r0, [pc, #92]	@ (80059f0 <checkDemoModCalisma+0x390>)
 8005994:	f005 fdf4 	bl	800b580 <HAL_GPIO_ReadPin>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 800599e:	4b24      	ldr	r3, [pc, #144]	@ (8005a30 <checkDemoModCalisma+0x3d0>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e011      	b.n	80059ca <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80059a6:	4b21      	ldr	r3, [pc, #132]	@ (8005a2c <checkDemoModCalisma+0x3cc>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10d      	bne.n	80059ca <checkDemoModCalisma+0x36a>
 80059ae:	2101      	movs	r1, #1
 80059b0:	4815      	ldr	r0, [pc, #84]	@ (8005a08 <checkDemoModCalisma+0x3a8>)
 80059b2:	f005 fde5 	bl	800b580 <HAL_GPIO_ReadPin>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <checkDemoModCalisma+0x36a>
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <checkDemoModCalisma+0x3d4>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 80059c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <checkDemoModCalisma+0x3d0>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80059ca:	4b18      	ldr	r3, [pc, #96]	@ (8005a2c <checkDemoModCalisma+0x3cc>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d135      	bne.n	8005a3e <checkDemoModCalisma+0x3de>
 80059d2:	4b18      	ldr	r3, [pc, #96]	@ (8005a34 <checkDemoModCalisma+0x3d4>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d131      	bne.n	8005a3e <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80059da:	2101      	movs	r1, #1
 80059dc:	480a      	ldr	r0, [pc, #40]	@ (8005a08 <checkDemoModCalisma+0x3a8>)
 80059de:	f005 fdcf 	bl	800b580 <HAL_GPIO_ReadPin>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d127      	bne.n	8005a38 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 80059e8:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <checkDemoModCalisma+0x3d0>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e026      	b.n	8005a3e <checkDemoModCalisma+0x3de>
 80059f0:	40010c00 	.word	0x40010c00
 80059f4:	200010f1 	.word	0x200010f1
 80059f8:	200010cb 	.word	0x200010cb
 80059fc:	200010cf 	.word	0x200010cf
 8005a00:	200010f5 	.word	0x200010f5
 8005a04:	200010f8 	.word	0x200010f8
 8005a08:	40011000 	.word	0x40011000
 8005a0c:	2000110d 	.word	0x2000110d
 8005a10:	20001120 	.word	0x20001120
 8005a14:	2000110e 	.word	0x2000110e
 8005a18:	200010bf 	.word	0x200010bf
 8005a1c:	200010ed 	.word	0x200010ed
 8005a20:	20001094 	.word	0x20001094
 8005a24:	200010a0 	.word	0x200010a0
 8005a28:	200010d0 	.word	0x200010d0
 8005a2c:	200010c0 	.word	0x200010c0
 8005a30:	20001112 	.word	0x20001112
 8005a34:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 8005a38:	4b7f      	ldr	r3, [pc, #508]	@ (8005c38 <checkDemoModCalisma+0x5d8>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c3c <checkDemoModCalisma+0x5dc>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d17c      	bne.n	8005b40 <checkDemoModCalisma+0x4e0>
 8005a46:	4b7e      	ldr	r3, [pc, #504]	@ (8005c40 <checkDemoModCalisma+0x5e0>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d078      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
 8005a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c44 <checkDemoModCalisma+0x5e4>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d074      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005a56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a5a:	487b      	ldr	r0, [pc, #492]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005a5c:	f005 fd90 	bl	800b580 <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <checkDemoModCalisma+0x40e>
 8005a66:	4b79      	ldr	r3, [pc, #484]	@ (8005c4c <checkDemoModCalisma+0x5ec>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d068      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005a6e:	4b72      	ldr	r3, [pc, #456]	@ (8005c38 <checkDemoModCalisma+0x5d8>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d064      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
 8005a76:	4b76      	ldr	r3, [pc, #472]	@ (8005c50 <checkDemoModCalisma+0x5f0>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	f083 0301 	eor.w	r3, r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05d      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005a84:	2104      	movs	r1, #4
 8005a86:	4873      	ldr	r0, [pc, #460]	@ (8005c54 <checkDemoModCalisma+0x5f4>)
 8005a88:	f005 fd7a 	bl	800b580 <HAL_GPIO_ReadPin>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <checkDemoModCalisma+0x43a>
 8005a92:	4b71      	ldr	r3, [pc, #452]	@ (8005c58 <checkDemoModCalisma+0x5f8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d152      	bne.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a9e:	486a      	ldr	r0, [pc, #424]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005aa0:	f005 fd6e 	bl	800b580 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10e      	bne.n	8005ac8 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aae:	4866      	ldr	r0, [pc, #408]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005ab0:	f005 fd66 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d106      	bne.n	8005ac8 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005aba:	2140      	movs	r1, #64	@ 0x40
 8005abc:	4865      	ldr	r0, [pc, #404]	@ (8005c54 <checkDemoModCalisma+0x5f4>)
 8005abe:	f005 fd5f 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d003      	beq.n	8005ad0 <checkDemoModCalisma+0x470>
 8005ac8:	4b64      	ldr	r3, [pc, #400]	@ (8005c5c <checkDemoModCalisma+0x5fc>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d037      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8005ad0:	4b63      	ldr	r3, [pc, #396]	@ (8005c60 <checkDemoModCalisma+0x600>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f083 0301 	eor.w	r3, r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d030      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8005ade:	4b61      	ldr	r3, [pc, #388]	@ (8005c64 <checkDemoModCalisma+0x604>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	f083 0301 	eor.w	r3, r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d029      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005aec:	4b5e      	ldr	r3, [pc, #376]	@ (8005c68 <checkDemoModCalisma+0x608>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f083 0301 	eor.w	r3, r3, #1
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d022      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8005afa:	4b5c      	ldr	r3, [pc, #368]	@ (8005c6c <checkDemoModCalisma+0x60c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f083 0301 	eor.w	r3, r3, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8005b08:	4b59      	ldr	r3, [pc, #356]	@ (8005c70 <checkDemoModCalisma+0x610>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f083 0301 	eor.w	r3, r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d014      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8005b16:	4b57      	ldr	r3, [pc, #348]	@ (8005c74 <checkDemoModCalisma+0x614>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f083 0301 	eor.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005b24:	2201      	movs	r2, #1
 8005b26:	2102      	movs	r1, #2
 8005b28:	4847      	ldr	r0, [pc, #284]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005b2a:	f005 fd40 	bl	800b5ae <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8005b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c5c <checkDemoModCalisma+0x5fc>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005b34:	4b50      	ldr	r3, [pc, #320]	@ (8005c78 <checkDemoModCalisma+0x618>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8005b3a:	4b50      	ldr	r3, [pc, #320]	@ (8005c7c <checkDemoModCalisma+0x61c>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005b40:	4b46      	ldr	r3, [pc, #280]	@ (8005c5c <checkDemoModCalisma+0x5fc>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d033      	beq.n	8005bb0 <checkDemoModCalisma+0x550>
 8005b48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005b4c:	483e      	ldr	r0, [pc, #248]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005b4e:	f005 fd17 	bl	800b580 <HAL_GPIO_ReadPin>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d106      	bne.n	8005b66 <checkDemoModCalisma+0x506>
 8005b58:	4b3c      	ldr	r3, [pc, #240]	@ (8005c4c <checkDemoModCalisma+0x5ec>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f083 0301 	eor.w	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <checkDemoModCalisma+0x51c>
 8005b66:	2104      	movs	r1, #4
 8005b68:	483a      	ldr	r0, [pc, #232]	@ (8005c54 <checkDemoModCalisma+0x5f4>)
 8005b6a:	f005 fd09 	bl	800b580 <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d11d      	bne.n	8005bb0 <checkDemoModCalisma+0x550>
 8005b74:	4b38      	ldr	r3, [pc, #224]	@ (8005c58 <checkDemoModCalisma+0x5f8>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <checkDemoModCalisma+0x550>
 8005b7c:	4b30      	ldr	r3, [pc, #192]	@ (8005c40 <checkDemoModCalisma+0x5e0>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <checkDemoModCalisma+0x550>
 8005b84:	4b2f      	ldr	r3, [pc, #188]	@ (8005c44 <checkDemoModCalisma+0x5e4>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d011      	beq.n	8005bb0 <checkDemoModCalisma+0x550>
 8005b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005c38 <checkDemoModCalisma+0x5d8>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <checkDemoModCalisma+0x550>
 8005b94:	4b3a      	ldr	r3, [pc, #232]	@ (8005c80 <checkDemoModCalisma+0x620>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <checkDemoModCalisma+0x550>
					timer2=millis;
 8005ba2:	4b38      	ldr	r3, [pc, #224]	@ (8005c84 <checkDemoModCalisma+0x624>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a38      	ldr	r2, [pc, #224]	@ (8005c88 <checkDemoModCalisma+0x628>)
 8005ba8:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005baa:	4b35      	ldr	r3, [pc, #212]	@ (8005c80 <checkDemoModCalisma+0x620>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005bb0:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <checkDemoModCalisma+0x624>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b34      	ldr	r3, [pc, #208]	@ (8005c88 <checkDemoModCalisma+0x628>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	4a34      	ldr	r2, [pc, #208]	@ (8005c8c <checkDemoModCalisma+0x62c>)
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d303      	bcc.n	8005bca <checkDemoModCalisma+0x56a>
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c80 <checkDemoModCalisma+0x620>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d114      	bne.n	8005bf4 <checkDemoModCalisma+0x594>
 8005bca:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <checkDemoModCalisma+0x5e0>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f083 0301 	eor.w	r3, r3, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <checkDemoModCalisma+0x594>
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c44 <checkDemoModCalisma+0x5e4>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f083 0301 	eor.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <checkDemoModCalisma+0x594>
 8005be6:	4b14      	ldr	r3, [pc, #80]	@ (8005c38 <checkDemoModCalisma+0x5d8>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4813      	ldr	r0, [pc, #76]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005bfa:	f005 fcd8 	bl	800b5ae <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005bfe:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <checkDemoModCalisma+0x5fc>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005c04:	4b1e      	ldr	r3, [pc, #120]	@ (8005c80 <checkDemoModCalisma+0x620>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005c0a:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <checkDemoModCalisma+0x5fc>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d040      	beq.n	8005c94 <checkDemoModCalisma+0x634>
 8005c12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c16:	480f      	ldr	r0, [pc, #60]	@ (8005c54 <checkDemoModCalisma+0x5f4>)
 8005c18:	f005 fcb2 	bl	800b580 <HAL_GPIO_ReadPin>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d138      	bne.n	8005c94 <checkDemoModCalisma+0x634>
 8005c22:	4b1b      	ldr	r3, [pc, #108]	@ (8005c90 <checkDemoModCalisma+0x630>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d034      	beq.n	8005c94 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4806      	ldr	r0, [pc, #24]	@ (8005c48 <checkDemoModCalisma+0x5e8>)
 8005c30:	f005 fcbd 	bl	800b5ae <HAL_GPIO_WritePin>
 8005c34:	e033      	b.n	8005c9e <checkDemoModCalisma+0x63e>
 8005c36:	bf00      	nop
 8005c38:	20001112 	.word	0x20001112
 8005c3c:	200010d9 	.word	0x200010d9
 8005c40:	2000110d 	.word	0x2000110d
 8005c44:	2000110e 	.word	0x2000110e
 8005c48:	40010c00 	.word	0x40010c00
 8005c4c:	200010f9 	.word	0x200010f9
 8005c50:	2000110c 	.word	0x2000110c
 8005c54:	40011000 	.word	0x40011000
 8005c58:	200010c2 	.word	0x200010c2
 8005c5c:	200010f4 	.word	0x200010f4
 8005c60:	200010f1 	.word	0x200010f1
 8005c64:	200010f5 	.word	0x200010f5
 8005c68:	200010f2 	.word	0x200010f2
 8005c6c:	200010f3 	.word	0x200010f3
 8005c70:	200010f6 	.word	0x200010f6
 8005c74:	200010f7 	.word	0x200010f7
 8005c78:	200010fc 	.word	0x200010fc
 8005c7c:	2000111c 	.word	0x2000111c
 8005c80:	200010ec 	.word	0x200010ec
 8005c84:	20001094 	.word	0x20001094
 8005c88:	200010a0 	.word	0x200010a0
 8005c8c:	200010d1 	.word	0x200010d1
 8005c90:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2101      	movs	r1, #1
 8005c98:	4836      	ldr	r0, [pc, #216]	@ (8005d74 <checkDemoModCalisma+0x714>)
 8005c9a:	f005 fc88 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005c9e:	4b36      	ldr	r3, [pc, #216]	@ (8005d78 <checkDemoModCalisma+0x718>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 8080 	bne.w	8005da8 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005ca8:	4b34      	ldr	r3, [pc, #208]	@ (8005d7c <checkDemoModCalisma+0x71c>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d003      	beq.n	8005cb8 <checkDemoModCalisma+0x658>
 8005cb0:	4b32      	ldr	r3, [pc, #200]	@ (8005d7c <checkDemoModCalisma+0x71c>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d177      	bne.n	8005da8 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005cb8:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <checkDemoModCalisma+0x720>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d073      	beq.n	8005da8 <checkDemoModCalisma+0x748>
 8005cc0:	4b30      	ldr	r3, [pc, #192]	@ (8005d84 <checkDemoModCalisma+0x724>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d06f      	beq.n	8005da8 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005cc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ccc:	4829      	ldr	r0, [pc, #164]	@ (8005d74 <checkDemoModCalisma+0x714>)
 8005cce:	f005 fc57 	bl	800b580 <HAL_GPIO_ReadPin>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d167      	bne.n	8005da8 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005cd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005cdc:	482a      	ldr	r0, [pc, #168]	@ (8005d88 <checkDemoModCalisma+0x728>)
 8005cde:	f005 fc4f 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <checkDemoModCalisma+0x690>
 8005ce8:	4b28      	ldr	r3, [pc, #160]	@ (8005d8c <checkDemoModCalisma+0x72c>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d15b      	bne.n	8005da8 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005cf0:	2140      	movs	r1, #64	@ 0x40
 8005cf2:	4825      	ldr	r0, [pc, #148]	@ (8005d88 <checkDemoModCalisma+0x728>)
 8005cf4:	f005 fc44 	bl	800b580 <HAL_GPIO_ReadPin>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10f      	bne.n	8005d1e <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005cfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d02:	481c      	ldr	r0, [pc, #112]	@ (8005d74 <checkDemoModCalisma+0x714>)
 8005d04:	f005 fc3c 	bl	800b580 <HAL_GPIO_ReadPin>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005d0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d12:	4818      	ldr	r0, [pc, #96]	@ (8005d74 <checkDemoModCalisma+0x714>)
 8005d14:	f005 fc34 	bl	800b580 <HAL_GPIO_ReadPin>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d003      	beq.n	8005d26 <checkDemoModCalisma+0x6c6>
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d90 <checkDemoModCalisma+0x730>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d040      	beq.n	8005da8 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8005d26:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <checkDemoModCalisma+0x734>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f083 0301 	eor.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d039      	beq.n	8005da8 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8005d34:	4b18      	ldr	r3, [pc, #96]	@ (8005d98 <checkDemoModCalisma+0x738>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f083 0301 	eor.w	r3, r3, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d032      	beq.n	8005da8 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8005d42:	4b16      	ldr	r3, [pc, #88]	@ (8005d9c <checkDemoModCalisma+0x73c>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f083 0301 	eor.w	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02b      	beq.n	8005da8 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8005d50:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <checkDemoModCalisma+0x740>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f083 0301 	eor.w	r3, r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d024      	beq.n	8005da8 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8005d5e:	4b11      	ldr	r3, [pc, #68]	@ (8005da4 <checkDemoModCalisma+0x744>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f083 0301 	eor.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01d      	beq.n	8005da8 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8005d6c:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <checkDemoModCalisma+0x730>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e01c      	b.n	8005dae <checkDemoModCalisma+0x74e>
 8005d74:	40010c00 	.word	0x40010c00
 8005d78:	200010d9 	.word	0x200010d9
 8005d7c:	200010cb 	.word	0x200010cb
 8005d80:	2000110d 	.word	0x2000110d
 8005d84:	2000110e 	.word	0x2000110e
 8005d88:	40011000 	.word	0x40011000
 8005d8c:	200010cc 	.word	0x200010cc
 8005d90:	200010f2 	.word	0x200010f2
 8005d94:	200010f1 	.word	0x200010f1
 8005d98:	200010f5 	.word	0x200010f5
 8005d9c:	200010f4 	.word	0x200010f4
 8005da0:	200010f3 	.word	0x200010f3
 8005da4:	200010f7 	.word	0x200010f7
				} else {
					devmotoryukaricalisiyor=0;
 8005da8:	4b64      	ldr	r3, [pc, #400]	@ (8005f3c <checkDemoModCalisma+0x8dc>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005dae:	4b63      	ldr	r3, [pc, #396]	@ (8005f3c <checkDemoModCalisma+0x8dc>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005db6:	2201      	movs	r2, #1
 8005db8:	2120      	movs	r1, #32
 8005dba:	4861      	ldr	r0, [pc, #388]	@ (8005f40 <checkDemoModCalisma+0x8e0>)
 8005dbc:	f005 fbf7 	bl	800b5ae <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005dc0:	4b60      	ldr	r3, [pc, #384]	@ (8005f44 <checkDemoModCalisma+0x8e4>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f44 <checkDemoModCalisma+0x8e4>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d025      	beq.n	8005e1a <checkDemoModCalisma+0x7ba>
 8005dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dd2:	485d      	ldr	r0, [pc, #372]	@ (8005f48 <checkDemoModCalisma+0x8e8>)
 8005dd4:	f005 fbd4 	bl	800b580 <HAL_GPIO_ReadPin>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d007      	beq.n	8005dee <checkDemoModCalisma+0x78e>
 8005dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005de2:	4857      	ldr	r0, [pc, #348]	@ (8005f40 <checkDemoModCalisma+0x8e0>)
 8005de4:	f005 fbcc 	bl	800b580 <HAL_GPIO_ReadPin>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d115      	bne.n	8005e1a <checkDemoModCalisma+0x7ba>
 8005dee:	4b57      	ldr	r3, [pc, #348]	@ (8005f4c <checkDemoModCalisma+0x8ec>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d011      	beq.n	8005e1a <checkDemoModCalisma+0x7ba>
 8005df6:	4b56      	ldr	r3, [pc, #344]	@ (8005f50 <checkDemoModCalisma+0x8f0>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <checkDemoModCalisma+0x7ba>
 8005dfe:	4b55      	ldr	r3, [pc, #340]	@ (8005f54 <checkDemoModCalisma+0x8f4>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f083 0301 	eor.w	r3, r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d006      	beq.n	8005e1a <checkDemoModCalisma+0x7ba>
					timer2=millis;
 8005e0c:	4b52      	ldr	r3, [pc, #328]	@ (8005f58 <checkDemoModCalisma+0x8f8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a52      	ldr	r2, [pc, #328]	@ (8005f5c <checkDemoModCalisma+0x8fc>)
 8005e12:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005e14:	4b4f      	ldr	r3, [pc, #316]	@ (8005f54 <checkDemoModCalisma+0x8f4>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f58 <checkDemoModCalisma+0x8f8>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f5c <checkDemoModCalisma+0x8fc>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	4a4e      	ldr	r2, [pc, #312]	@ (8005f60 <checkDemoModCalisma+0x900>)
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d303      	bcc.n	8005e34 <checkDemoModCalisma+0x7d4>
 8005e2c:	4b49      	ldr	r3, [pc, #292]	@ (8005f54 <checkDemoModCalisma+0x8f4>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <checkDemoModCalisma+0x7f0>
 8005e34:	4b45      	ldr	r3, [pc, #276]	@ (8005f4c <checkDemoModCalisma+0x8ec>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f083 0301 	eor.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <checkDemoModCalisma+0x7f0>
 8005e42:	4b43      	ldr	r3, [pc, #268]	@ (8005f50 <checkDemoModCalisma+0x8f0>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f083 0301 	eor.w	r3, r3, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e50:	2200      	movs	r2, #0
 8005e52:	2120      	movs	r1, #32
 8005e54:	483a      	ldr	r0, [pc, #232]	@ (8005f40 <checkDemoModCalisma+0x8e0>)
 8005e56:	f005 fbaa 	bl	800b5ae <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f44 <checkDemoModCalisma+0x8e4>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005e60:	4b3c      	ldr	r3, [pc, #240]	@ (8005f54 <checkDemoModCalisma+0x8f4>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005e66:	4b3f      	ldr	r3, [pc, #252]	@ (8005f64 <checkDemoModCalisma+0x904>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 8088 	bne.w	8005f80 <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005e70:	4b3d      	ldr	r3, [pc, #244]	@ (8005f68 <checkDemoModCalisma+0x908>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d003      	beq.n	8005e80 <checkDemoModCalisma+0x820>
 8005e78:	4b3b      	ldr	r3, [pc, #236]	@ (8005f68 <checkDemoModCalisma+0x908>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d17f      	bne.n	8005f80 <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8005e80:	4b32      	ldr	r3, [pc, #200]	@ (8005f4c <checkDemoModCalisma+0x8ec>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d07b      	beq.n	8005f80 <checkDemoModCalisma+0x920>
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <checkDemoModCalisma+0x8f0>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d077      	beq.n	8005f80 <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005e90:	2140      	movs	r1, #64	@ 0x40
 8005e92:	482b      	ldr	r0, [pc, #172]	@ (8005f40 <checkDemoModCalisma+0x8e0>)
 8005e94:	f005 fb74 	bl	800b580 <HAL_GPIO_ReadPin>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d170      	bne.n	8005f80 <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005e9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ea2:	4827      	ldr	r0, [pc, #156]	@ (8005f40 <checkDemoModCalisma+0x8e0>)
 8005ea4:	f005 fb6c 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <checkDemoModCalisma+0x856>
 8005eae:	4b2f      	ldr	r3, [pc, #188]	@ (8005f6c <checkDemoModCalisma+0x90c>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d164      	bne.n	8005f80 <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005eba:	4823      	ldr	r0, [pc, #140]	@ (8005f48 <checkDemoModCalisma+0x8e8>)
 8005ebc:	f005 fb60 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d10f      	bne.n	8005ee6 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005ec6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005eca:	481f      	ldr	r0, [pc, #124]	@ (8005f48 <checkDemoModCalisma+0x8e8>)
 8005ecc:	f005 fb58 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d107      	bne.n	8005ee6 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005eda:	481b      	ldr	r0, [pc, #108]	@ (8005f48 <checkDemoModCalisma+0x8e8>)
 8005edc:	f005 fb50 	bl	800b580 <HAL_GPIO_ReadPin>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d003      	beq.n	8005eee <checkDemoModCalisma+0x88e>
 8005ee6:	4b22      	ldr	r3, [pc, #136]	@ (8005f70 <checkDemoModCalisma+0x910>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d048      	beq.n	8005f80 <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8005eee:	4b21      	ldr	r3, [pc, #132]	@ (8005f74 <checkDemoModCalisma+0x914>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f083 0301 	eor.w	r3, r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d041      	beq.n	8005f80 <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8005efc:	4b1e      	ldr	r3, [pc, #120]	@ (8005f78 <checkDemoModCalisma+0x918>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f083 0301 	eor.w	r3, r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03a      	beq.n	8005f80 <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8005f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f7c <checkDemoModCalisma+0x91c>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f083 0301 	eor.w	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d033      	beq.n	8005f80 <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005f18:	4b0a      	ldr	r3, [pc, #40]	@ (8005f44 <checkDemoModCalisma+0x8e4>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f083 0301 	eor.w	r3, r3, #1
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02c      	beq.n	8005f80 <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8005f26:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <checkDemoModCalisma+0x8dc>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f083 0301 	eor.w	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d025      	beq.n	8005f80 <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 8005f34:	4b0e      	ldr	r3, [pc, #56]	@ (8005f70 <checkDemoModCalisma+0x910>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e024      	b.n	8005f86 <checkDemoModCalisma+0x926>
 8005f3c:	200010f2 	.word	0x200010f2
 8005f40:	40011000 	.word	0x40011000
 8005f44:	200010f6 	.word	0x200010f6
 8005f48:	40010c00 	.word	0x40010c00
 8005f4c:	2000110d 	.word	0x2000110d
 8005f50:	2000110e 	.word	0x2000110e
 8005f54:	200010ee 	.word	0x200010ee
 8005f58:	20001094 	.word	0x20001094
 8005f5c:	200010a0 	.word	0x200010a0
 8005f60:	200010d2 	.word	0x200010d2
 8005f64:	200010d9 	.word	0x200010d9
 8005f68:	200010cb 	.word	0x200010cb
 8005f6c:	200010cd 	.word	0x200010cd
 8005f70:	200010f3 	.word	0x200010f3
 8005f74:	200010f1 	.word	0x200010f1
 8005f78:	200010f5 	.word	0x200010f5
 8005f7c:	200010f4 	.word	0x200010f4
				} else {
					devmotorasagicalisiyor=0;
 8005f80:	4b96      	ldr	r3, [pc, #600]	@ (80061dc <checkDemoModCalisma+0xb7c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005f86:	4b95      	ldr	r3, [pc, #596]	@ (80061dc <checkDemoModCalisma+0xb7c>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005f8e:	2201      	movs	r2, #1
 8005f90:	2110      	movs	r1, #16
 8005f92:	4893      	ldr	r0, [pc, #588]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 8005f94:	f005 fb0b 	bl	800b5ae <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005f98:	4b92      	ldr	r3, [pc, #584]	@ (80061e4 <checkDemoModCalisma+0xb84>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005f9e:	4b91      	ldr	r3, [pc, #580]	@ (80061e4 <checkDemoModCalisma+0xb84>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d024      	beq.n	8005ff0 <checkDemoModCalisma+0x990>
 8005fa6:	2140      	movs	r1, #64	@ 0x40
 8005fa8:	488d      	ldr	r0, [pc, #564]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 8005faa:	f005 fae9 	bl	800b580 <HAL_GPIO_ReadPin>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d007      	beq.n	8005fc4 <checkDemoModCalisma+0x964>
 8005fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fb8:	4889      	ldr	r0, [pc, #548]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 8005fba:	f005 fae1 	bl	800b580 <HAL_GPIO_ReadPin>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d115      	bne.n	8005ff0 <checkDemoModCalisma+0x990>
 8005fc4:	4b88      	ldr	r3, [pc, #544]	@ (80061e8 <checkDemoModCalisma+0xb88>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d011      	beq.n	8005ff0 <checkDemoModCalisma+0x990>
 8005fcc:	4b87      	ldr	r3, [pc, #540]	@ (80061ec <checkDemoModCalisma+0xb8c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <checkDemoModCalisma+0x990>
 8005fd4:	4b86      	ldr	r3, [pc, #536]	@ (80061f0 <checkDemoModCalisma+0xb90>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f083 0301 	eor.w	r3, r3, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d006      	beq.n	8005ff0 <checkDemoModCalisma+0x990>
					timer2=millis;
 8005fe2:	4b84      	ldr	r3, [pc, #528]	@ (80061f4 <checkDemoModCalisma+0xb94>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a84      	ldr	r2, [pc, #528]	@ (80061f8 <checkDemoModCalisma+0xb98>)
 8005fe8:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005fea:	4b81      	ldr	r3, [pc, #516]	@ (80061f0 <checkDemoModCalisma+0xb90>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005ff0:	4b80      	ldr	r3, [pc, #512]	@ (80061f4 <checkDemoModCalisma+0xb94>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b80      	ldr	r3, [pc, #512]	@ (80061f8 <checkDemoModCalisma+0xb98>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	4a80      	ldr	r2, [pc, #512]	@ (80061fc <checkDemoModCalisma+0xb9c>)
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d303      	bcc.n	800600a <checkDemoModCalisma+0x9aa>
 8006002:	4b7b      	ldr	r3, [pc, #492]	@ (80061f0 <checkDemoModCalisma+0xb90>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <checkDemoModCalisma+0x9c6>
 800600a:	4b77      	ldr	r3, [pc, #476]	@ (80061e8 <checkDemoModCalisma+0xb88>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f083 0301 	eor.w	r3, r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <checkDemoModCalisma+0x9c6>
 8006018:	4b74      	ldr	r3, [pc, #464]	@ (80061ec <checkDemoModCalisma+0xb8c>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f083 0301 	eor.w	r3, r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006026:	2200      	movs	r2, #0
 8006028:	2110      	movs	r1, #16
 800602a:	486d      	ldr	r0, [pc, #436]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 800602c:	f005 fabf 	bl	800b5ae <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8006030:	4b6c      	ldr	r3, [pc, #432]	@ (80061e4 <checkDemoModCalisma+0xb84>)
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8006036:	4b6e      	ldr	r3, [pc, #440]	@ (80061f0 <checkDemoModCalisma+0xb90>)
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800603c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006040:	486f      	ldr	r0, [pc, #444]	@ (8006200 <checkDemoModCalisma+0xba0>)
 8006042:	f005 fa9d 	bl	800b580 <HAL_GPIO_ReadPin>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d120      	bne.n	800608e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800604c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006050:	486b      	ldr	r0, [pc, #428]	@ (8006200 <checkDemoModCalisma+0xba0>)
 8006052:	f005 fa95 	bl	800b580 <HAL_GPIO_ReadPin>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d118      	bne.n	800608e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800605c:	2104      	movs	r1, #4
 800605e:	4868      	ldr	r0, [pc, #416]	@ (8006200 <checkDemoModCalisma+0xba0>)
 8006060:	f005 fa8e 	bl	800b580 <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d111      	bne.n	800608e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800606a:	2102      	movs	r1, #2
 800606c:	4864      	ldr	r0, [pc, #400]	@ (8006200 <checkDemoModCalisma+0xba0>)
 800606e:	f005 fa87 	bl	800b580 <HAL_GPIO_ReadPin>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006078:	2101      	movs	r1, #1
 800607a:	4861      	ldr	r0, [pc, #388]	@ (8006200 <checkDemoModCalisma+0xba0>)
 800607c:	f005 fa80 	bl	800b580 <HAL_GPIO_ReadPin>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <checkDemoModCalisma+0xa2e>
					makineStop=1;
 8006086:	4b5f      	ldr	r3, [pc, #380]	@ (8006204 <checkDemoModCalisma+0xba4>)
 8006088:	2201      	movs	r2, #1
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e002      	b.n	8006094 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 800608e:	4b5d      	ldr	r3, [pc, #372]	@ (8006204 <checkDemoModCalisma+0xba4>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006094:	4b5c      	ldr	r3, [pc, #368]	@ (8006208 <checkDemoModCalisma+0xba8>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d144      	bne.n	8006126 <checkDemoModCalisma+0xac6>
 800609c:	4b5b      	ldr	r3, [pc, #364]	@ (800620c <checkDemoModCalisma+0xbac>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d003      	beq.n	80060ac <checkDemoModCalisma+0xa4c>
 80060a4:	4b59      	ldr	r3, [pc, #356]	@ (800620c <checkDemoModCalisma+0xbac>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d13c      	bne.n	8006126 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80060ac:	2180      	movs	r1, #128	@ 0x80
 80060ae:	484c      	ldr	r0, [pc, #304]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 80060b0:	f005 fa66 	bl	800b580 <HAL_GPIO_ReadPin>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <checkDemoModCalisma+0xa62>
 80060ba:	4b55      	ldr	r3, [pc, #340]	@ (8006210 <checkDemoModCalisma+0xbb0>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <checkDemoModCalisma+0xa7a>
 80060c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80060c6:	484e      	ldr	r0, [pc, #312]	@ (8006200 <checkDemoModCalisma+0xba0>)
 80060c8:	f005 fa5a 	bl	800b580 <HAL_GPIO_ReadPin>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d129      	bne.n	8006126 <checkDemoModCalisma+0xac6>
 80060d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006210 <checkDemoModCalisma+0xbb0>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d125      	bne.n	8006126 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80060da:	2104      	movs	r1, #4
 80060dc:	4840      	ldr	r0, [pc, #256]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 80060de:	f005 fa4f 	bl	800b580 <HAL_GPIO_ReadPin>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d003      	beq.n	80060f0 <checkDemoModCalisma+0xa90>
 80060e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006214 <checkDemoModCalisma+0xbb4>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d11a      	bne.n	8006126 <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060f0:	2102      	movs	r1, #2
 80060f2:	483b      	ldr	r0, [pc, #236]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 80060f4:	f005 fa44 	bl	800b580 <HAL_GPIO_ReadPin>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d113      	bne.n	8006126 <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 80060fe:	4b46      	ldr	r3, [pc, #280]	@ (8006218 <checkDemoModCalisma+0xbb8>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f083 0301 	eor.w	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00c      	beq.n	8006126 <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 800610c:	4b3d      	ldr	r3, [pc, #244]	@ (8006204 <checkDemoModCalisma+0xba4>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 8006114:	4b41      	ldr	r3, [pc, #260]	@ (800621c <checkDemoModCalisma+0xbbc>)
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800611a:	4b36      	ldr	r3, [pc, #216]	@ (80061f4 <checkDemoModCalisma+0xb94>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a40      	ldr	r2, [pc, #256]	@ (8006220 <checkDemoModCalisma+0xbc0>)
 8006120:	6013      	str	r3, [r2, #0]
					bekle();
 8006122:	f7fd fd37 	bl	8003b94 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006126:	4b33      	ldr	r3, [pc, #204]	@ (80061f4 <checkDemoModCalisma+0xb94>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b3d      	ldr	r3, [pc, #244]	@ (8006220 <checkDemoModCalisma+0xbc0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	4a3c      	ldr	r2, [pc, #240]	@ (8006224 <checkDemoModCalisma+0xbc4>)
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	4293      	cmp	r3, r2
 8006136:	d211      	bcs.n	800615c <checkDemoModCalisma+0xafc>
 8006138:	2104      	movs	r1, #4
 800613a:	4829      	ldr	r0, [pc, #164]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 800613c:	f005 fa20 	bl	800b580 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <checkDemoModCalisma+0xafc>
 8006146:	4b33      	ldr	r3, [pc, #204]	@ (8006214 <checkDemoModCalisma+0xbb4>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <checkDemoModCalisma+0xafc>
 800614e:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <checkDemoModCalisma+0xba4>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f083 0301 	eor.w	r3, r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 800615c:	4b2f      	ldr	r3, [pc, #188]	@ (800621c <checkDemoModCalisma+0xbbc>)
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006162:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <checkDemoModCalisma+0xba8>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d160      	bne.n	800622c <checkDemoModCalisma+0xbcc>
 800616a:	4b28      	ldr	r3, [pc, #160]	@ (800620c <checkDemoModCalisma+0xbac>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d003      	beq.n	800617a <checkDemoModCalisma+0xb1a>
 8006172:	4b26      	ldr	r3, [pc, #152]	@ (800620c <checkDemoModCalisma+0xbac>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d158      	bne.n	800622c <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800617a:	2104      	movs	r1, #4
 800617c:	4818      	ldr	r0, [pc, #96]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 800617e:	f005 f9ff 	bl	800b580 <HAL_GPIO_ReadPin>
 8006182:	4603      	mov	r3, r0
 8006184:	2b01      	cmp	r3, #1
 8006186:	d003      	beq.n	8006190 <checkDemoModCalisma+0xb30>
 8006188:	4b22      	ldr	r3, [pc, #136]	@ (8006214 <checkDemoModCalisma+0xbb4>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d14d      	bne.n	800622c <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006190:	2102      	movs	r1, #2
 8006192:	4813      	ldr	r0, [pc, #76]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 8006194:	f005 f9f4 	bl	800b580 <HAL_GPIO_ReadPin>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d146      	bne.n	800622c <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800619e:	2180      	movs	r1, #128	@ 0x80
 80061a0:	480f      	ldr	r0, [pc, #60]	@ (80061e0 <checkDemoModCalisma+0xb80>)
 80061a2:	f005 f9ed 	bl	800b580 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d103      	bne.n	80061b4 <checkDemoModCalisma+0xb54>
 80061ac:	4b18      	ldr	r3, [pc, #96]	@ (8006210 <checkDemoModCalisma+0xbb0>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <checkDemoModCalisma+0xb6c>
 80061b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80061b8:	4811      	ldr	r0, [pc, #68]	@ (8006200 <checkDemoModCalisma+0xba0>)
 80061ba:	f005 f9e1 	bl	800b580 <HAL_GPIO_ReadPin>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d133      	bne.n	800622c <checkDemoModCalisma+0xbcc>
 80061c4:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <checkDemoModCalisma+0xbb0>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d12f      	bne.n	800622c <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 80061cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006204 <checkDemoModCalisma+0xba4>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02b      	beq.n	800622c <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 80061d4:	4b14      	ldr	r3, [pc, #80]	@ (8006228 <checkDemoModCalisma+0xbc8>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e02a      	b.n	8006232 <checkDemoModCalisma+0xbd2>
 80061dc:	200010f3 	.word	0x200010f3
 80061e0:	40011000 	.word	0x40011000
 80061e4:	200010f7 	.word	0x200010f7
 80061e8:	2000110d 	.word	0x2000110d
 80061ec:	2000110e 	.word	0x2000110e
 80061f0:	200010ef 	.word	0x200010ef
 80061f4:	20001094 	.word	0x20001094
 80061f8:	200010a0 	.word	0x200010a0
 80061fc:	200010d2 	.word	0x200010d2
 8006200:	40010c00 	.word	0x40010c00
 8006204:	200010fd 	.word	0x200010fd
 8006208:	200010c5 	.word	0x200010c5
 800620c:	200010c4 	.word	0x200010c4
 8006210:	200010c8 	.word	0x200010c8
 8006214:	200010c2 	.word	0x200010c2
 8006218:	200010eb 	.word	0x200010eb
 800621c:	200010fe 	.word	0x200010fe
 8006220:	20001098 	.word	0x20001098
 8006224:	200010d5 	.word	0x200010d5
 8006228:	200010ff 	.word	0x200010ff
				} else {
					kapi1butonkontrol=0;
 800622c:	4b8b      	ldr	r3, [pc, #556]	@ (800645c <checkDemoModCalisma+0xdfc>)
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006232:	4b8b      	ldr	r3, [pc, #556]	@ (8006460 <checkDemoModCalisma+0xe00>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d121      	bne.n	800627e <checkDemoModCalisma+0xc1e>
 800623a:	4b8a      	ldr	r3, [pc, #552]	@ (8006464 <checkDemoModCalisma+0xe04>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d003      	beq.n	800624a <checkDemoModCalisma+0xbea>
 8006242:	4b88      	ldr	r3, [pc, #544]	@ (8006464 <checkDemoModCalisma+0xe04>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d119      	bne.n	800627e <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800624a:	2104      	movs	r1, #4
 800624c:	4886      	ldr	r0, [pc, #536]	@ (8006468 <checkDemoModCalisma+0xe08>)
 800624e:	f005 f997 	bl	800b580 <HAL_GPIO_ReadPin>
 8006252:	4603      	mov	r3, r0
 8006254:	2b01      	cmp	r3, #1
 8006256:	d003      	beq.n	8006260 <checkDemoModCalisma+0xc00>
 8006258:	4b84      	ldr	r3, [pc, #528]	@ (800646c <checkDemoModCalisma+0xe0c>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10e      	bne.n	800627e <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006260:	2102      	movs	r1, #2
 8006262:	4881      	ldr	r0, [pc, #516]	@ (8006468 <checkDemoModCalisma+0xe08>)
 8006264:	f005 f98c 	bl	800b580 <HAL_GPIO_ReadPin>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d107      	bne.n	800627e <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 800626e:	4b80      	ldr	r3, [pc, #512]	@ (8006470 <checkDemoModCalisma+0xe10>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 8006276:	4b7f      	ldr	r3, [pc, #508]	@ (8006474 <checkDemoModCalisma+0xe14>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e002      	b.n	8006284 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 800627e:	4b7d      	ldr	r3, [pc, #500]	@ (8006474 <checkDemoModCalisma+0xe14>)
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006284:	4b75      	ldr	r3, [pc, #468]	@ (800645c <checkDemoModCalisma+0xdfc>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <checkDemoModCalisma+0xc3c>
 800628c:	4b79      	ldr	r3, [pc, #484]	@ (8006474 <checkDemoModCalisma+0xe14>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d103      	bne.n	800629c <checkDemoModCalisma+0xc3c>
 8006294:	4b78      	ldr	r3, [pc, #480]	@ (8006478 <checkDemoModCalisma+0xe18>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800629c:	2201      	movs	r2, #1
 800629e:	2180      	movs	r1, #128	@ 0x80
 80062a0:	4876      	ldr	r0, [pc, #472]	@ (800647c <checkDemoModCalisma+0xe1c>)
 80062a2:	f005 f984 	bl	800b5ae <HAL_GPIO_WritePin>
 80062a6:	e004      	b.n	80062b2 <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80062a8:	2200      	movs	r2, #0
 80062aa:	2180      	movs	r1, #128	@ 0x80
 80062ac:	4873      	ldr	r0, [pc, #460]	@ (800647c <checkDemoModCalisma+0xe1c>)
 80062ae:	f005 f97e 	bl	800b5ae <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80062b2:	4b73      	ldr	r3, [pc, #460]	@ (8006480 <checkDemoModCalisma+0xe20>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d141      	bne.n	800633e <checkDemoModCalisma+0xcde>
 80062ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006464 <checkDemoModCalisma+0xe04>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d003      	beq.n	80062ca <checkDemoModCalisma+0xc6a>
 80062c2:	4b68      	ldr	r3, [pc, #416]	@ (8006464 <checkDemoModCalisma+0xe04>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d139      	bne.n	800633e <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80062ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062ce:	4866      	ldr	r0, [pc, #408]	@ (8006468 <checkDemoModCalisma+0xe08>)
 80062d0:	f005 f956 	bl	800b580 <HAL_GPIO_ReadPin>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <checkDemoModCalisma+0xc82>
 80062da:	4b6a      	ldr	r3, [pc, #424]	@ (8006484 <checkDemoModCalisma+0xe24>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <checkDemoModCalisma+0xc9a>
 80062e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80062e6:	4868      	ldr	r0, [pc, #416]	@ (8006488 <checkDemoModCalisma+0xe28>)
 80062e8:	f005 f94a 	bl	800b580 <HAL_GPIO_ReadPin>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d125      	bne.n	800633e <checkDemoModCalisma+0xcde>
 80062f2:	4b64      	ldr	r3, [pc, #400]	@ (8006484 <checkDemoModCalisma+0xe24>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d121      	bne.n	800633e <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062fa:	2102      	movs	r1, #2
 80062fc:	485a      	ldr	r0, [pc, #360]	@ (8006468 <checkDemoModCalisma+0xe08>)
 80062fe:	f005 f93f 	bl	800b580 <HAL_GPIO_ReadPin>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d11a      	bne.n	800633e <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006308:	2104      	movs	r1, #4
 800630a:	4857      	ldr	r0, [pc, #348]	@ (8006468 <checkDemoModCalisma+0xe08>)
 800630c:	f005 f938 	bl	800b580 <HAL_GPIO_ReadPin>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 8006316:	4b56      	ldr	r3, [pc, #344]	@ (8006470 <checkDemoModCalisma+0xe10>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00f      	beq.n	800633e <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 800631e:	4b5b      	ldr	r3, [pc, #364]	@ (800648c <checkDemoModCalisma+0xe2c>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f083 0301 	eor.w	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 800632c:	4b58      	ldr	r3, [pc, #352]	@ (8006490 <checkDemoModCalisma+0xe30>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006332:	4b58      	ldr	r3, [pc, #352]	@ (8006494 <checkDemoModCalisma+0xe34>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a58      	ldr	r2, [pc, #352]	@ (8006498 <checkDemoModCalisma+0xe38>)
 8006338:	6013      	str	r3, [r2, #0]
					bekle();
 800633a:	f7fd fc2b 	bl	8003b94 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800633e:	4b55      	ldr	r3, [pc, #340]	@ (8006494 <checkDemoModCalisma+0xe34>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b55      	ldr	r3, [pc, #340]	@ (8006498 <checkDemoModCalisma+0xe38>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	4a54      	ldr	r2, [pc, #336]	@ (800649c <checkDemoModCalisma+0xe3c>)
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	4293      	cmp	r3, r2
 800634e:	d20d      	bcs.n	800636c <checkDemoModCalisma+0xd0c>
 8006350:	2102      	movs	r1, #2
 8006352:	4845      	ldr	r0, [pc, #276]	@ (8006468 <checkDemoModCalisma+0xe08>)
 8006354:	f005 f914 	bl	800b580 <HAL_GPIO_ReadPin>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <checkDemoModCalisma+0xd0c>
 800635e:	4b44      	ldr	r3, [pc, #272]	@ (8006470 <checkDemoModCalisma+0xe10>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	f083 0301 	eor.w	r3, r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 800636c:	4b48      	ldr	r3, [pc, #288]	@ (8006490 <checkDemoModCalisma+0xe30>)
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006372:	4b43      	ldr	r3, [pc, #268]	@ (8006480 <checkDemoModCalisma+0xe20>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d135      	bne.n	80063e6 <checkDemoModCalisma+0xd86>
 800637a:	4b3a      	ldr	r3, [pc, #232]	@ (8006464 <checkDemoModCalisma+0xe04>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d003      	beq.n	800638a <checkDemoModCalisma+0xd2a>
 8006382:	4b38      	ldr	r3, [pc, #224]	@ (8006464 <checkDemoModCalisma+0xe04>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d12d      	bne.n	80063e6 <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800638a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800638e:	4836      	ldr	r0, [pc, #216]	@ (8006468 <checkDemoModCalisma+0xe08>)
 8006390:	f005 f8f6 	bl	800b580 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <checkDemoModCalisma+0xd42>
 800639a:	4b3a      	ldr	r3, [pc, #232]	@ (8006484 <checkDemoModCalisma+0xe24>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <checkDemoModCalisma+0xd5a>
 80063a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80063a6:	4838      	ldr	r0, [pc, #224]	@ (8006488 <checkDemoModCalisma+0xe28>)
 80063a8:	f005 f8ea 	bl	800b580 <HAL_GPIO_ReadPin>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <checkDemoModCalisma+0xd86>
 80063b2:	4b34      	ldr	r3, [pc, #208]	@ (8006484 <checkDemoModCalisma+0xe24>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d115      	bne.n	80063e6 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063ba:	2102      	movs	r1, #2
 80063bc:	482a      	ldr	r0, [pc, #168]	@ (8006468 <checkDemoModCalisma+0xe08>)
 80063be:	f005 f8df 	bl	800b580 <HAL_GPIO_ReadPin>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10e      	bne.n	80063e6 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063c8:	2104      	movs	r1, #4
 80063ca:	4827      	ldr	r0, [pc, #156]	@ (8006468 <checkDemoModCalisma+0xe08>)
 80063cc:	f005 f8d8 	bl	800b580 <HAL_GPIO_ReadPin>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 80063d6:	4b26      	ldr	r3, [pc, #152]	@ (8006470 <checkDemoModCalisma+0xe10>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 80063de:	4b30      	ldr	r3, [pc, #192]	@ (80064a0 <checkDemoModCalisma+0xe40>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e002      	b.n	80063ec <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80063e6:	4b2e      	ldr	r3, [pc, #184]	@ (80064a0 <checkDemoModCalisma+0xe40>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80063ec:	4b24      	ldr	r3, [pc, #144]	@ (8006480 <checkDemoModCalisma+0xe20>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d11d      	bne.n	8006430 <checkDemoModCalisma+0xdd0>
 80063f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006464 <checkDemoModCalisma+0xe04>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d003      	beq.n	8006404 <checkDemoModCalisma+0xda4>
 80063fc:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <checkDemoModCalisma+0xe04>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d115      	bne.n	8006430 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006404:	2102      	movs	r1, #2
 8006406:	4818      	ldr	r0, [pc, #96]	@ (8006468 <checkDemoModCalisma+0xe08>)
 8006408:	f005 f8ba 	bl	800b580 <HAL_GPIO_ReadPin>
 800640c:	4603      	mov	r3, r0
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10e      	bne.n	8006430 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006412:	2104      	movs	r1, #4
 8006414:	4814      	ldr	r0, [pc, #80]	@ (8006468 <checkDemoModCalisma+0xe08>)
 8006416:	f005 f8b3 	bl	800b580 <HAL_GPIO_ReadPin>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d107      	bne.n	8006430 <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 8006420:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <checkDemoModCalisma+0xe10>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 8006428:	4b1e      	ldr	r3, [pc, #120]	@ (80064a4 <checkDemoModCalisma+0xe44>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e002      	b.n	8006436 <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8006430:	4b1c      	ldr	r3, [pc, #112]	@ (80064a4 <checkDemoModCalisma+0xe44>)
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006436:	4b1a      	ldr	r3, [pc, #104]	@ (80064a0 <checkDemoModCalisma+0xe40>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <checkDemoModCalisma+0xdee>
 800643e:	4b19      	ldr	r3, [pc, #100]	@ (80064a4 <checkDemoModCalisma+0xe44>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <checkDemoModCalisma+0xdee>
 8006446:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <checkDemoModCalisma+0xe30>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d02c      	beq.n	80064a8 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800644e:	2201      	movs	r2, #1
 8006450:	2140      	movs	r1, #64	@ 0x40
 8006452:	480a      	ldr	r0, [pc, #40]	@ (800647c <checkDemoModCalisma+0xe1c>)
 8006454:	f005 f8ab 	bl	800b5ae <HAL_GPIO_WritePin>
 8006458:	e02b      	b.n	80064b2 <checkDemoModCalisma+0xe52>
 800645a:	bf00      	nop
 800645c:	200010ff 	.word	0x200010ff
 8006460:	200010c5 	.word	0x200010c5
 8006464:	200010c4 	.word	0x200010c4
 8006468:	40011000 	.word	0x40011000
 800646c:	200010c2 	.word	0x200010c2
 8006470:	200010fd 	.word	0x200010fd
 8006474:	20001100 	.word	0x20001100
 8006478:	200010fe 	.word	0x200010fe
 800647c:	40010800 	.word	0x40010800
 8006480:	200010c6 	.word	0x200010c6
 8006484:	200010c8 	.word	0x200010c8
 8006488:	40010c00 	.word	0x40010c00
 800648c:	200010eb 	.word	0x200010eb
 8006490:	20001101 	.word	0x20001101
 8006494:	20001094 	.word	0x20001094
 8006498:	20001098 	.word	0x20001098
 800649c:	200010d6 	.word	0x200010d6
 80064a0:	20001102 	.word	0x20001102
 80064a4:	20001103 	.word	0x20001103
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80064a8:	2200      	movs	r2, #0
 80064aa:	2140      	movs	r1, #64	@ 0x40
 80064ac:	4835      	ldr	r0, [pc, #212]	@ (8006584 <checkDemoModCalisma+0xf24>)
 80064ae:	f005 f87e 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80064b2:	4b35      	ldr	r3, [pc, #212]	@ (8006588 <checkDemoModCalisma+0xf28>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <checkDemoModCalisma+0xe62>
 80064ba:	4b33      	ldr	r3, [pc, #204]	@ (8006588 <checkDemoModCalisma+0xf28>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d115      	bne.n	80064ee <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80064c2:	2104      	movs	r1, #4
 80064c4:	4831      	ldr	r0, [pc, #196]	@ (800658c <checkDemoModCalisma+0xf2c>)
 80064c6:	f005 f85b 	bl	800b580 <HAL_GPIO_ReadPin>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d003      	beq.n	80064d8 <checkDemoModCalisma+0xe78>
 80064d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006590 <checkDemoModCalisma+0xf30>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80064d8:	2102      	movs	r1, #2
 80064da:	482c      	ldr	r0, [pc, #176]	@ (800658c <checkDemoModCalisma+0xf2c>)
 80064dc:	f005 f850 	bl	800b580 <HAL_GPIO_ReadPin>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80064e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006594 <checkDemoModCalisma+0xf34>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e002      	b.n	80064f4 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80064ee:	4b29      	ldr	r3, [pc, #164]	@ (8006594 <checkDemoModCalisma+0xf34>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80064f4:	4b24      	ldr	r3, [pc, #144]	@ (8006588 <checkDemoModCalisma+0xf28>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d003      	beq.n	8006504 <checkDemoModCalisma+0xea4>
 80064fc:	4b22      	ldr	r3, [pc, #136]	@ (8006588 <checkDemoModCalisma+0xf28>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d111      	bne.n	8006528 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006504:	2102      	movs	r1, #2
 8006506:	4821      	ldr	r0, [pc, #132]	@ (800658c <checkDemoModCalisma+0xf2c>)
 8006508:	f005 f83a 	bl	800b580 <HAL_GPIO_ReadPin>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10a      	bne.n	8006528 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006512:	2104      	movs	r1, #4
 8006514:	481d      	ldr	r0, [pc, #116]	@ (800658c <checkDemoModCalisma+0xf2c>)
 8006516:	f005 f833 	bl	800b580 <HAL_GPIO_ReadPin>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8006520:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <checkDemoModCalisma+0xf38>)
 8006522:	2201      	movs	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e002      	b.n	800652e <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8006528:	4b1b      	ldr	r3, [pc, #108]	@ (8006598 <checkDemoModCalisma+0xf38>)
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800652e:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <checkDemoModCalisma+0xf34>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00f      	beq.n	8006556 <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 8006536:	4b19      	ldr	r3, [pc, #100]	@ (800659c <checkDemoModCalisma+0xf3c>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d10b      	bne.n	8006556 <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800653e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006542:	4817      	ldr	r0, [pc, #92]	@ (80065a0 <checkDemoModCalisma+0xf40>)
 8006544:	f005 f81c 	bl	800b580 <HAL_GPIO_ReadPin>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 800654e:	4b15      	ldr	r3, [pc, #84]	@ (80065a4 <checkDemoModCalisma+0xf44>)
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e002      	b.n	800655c <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <checkDemoModCalisma+0xf44>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 800655c:	4b0e      	ldr	r3, [pc, #56]	@ (8006598 <checkDemoModCalisma+0xf38>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d023      	beq.n	80065ac <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 8006564:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <checkDemoModCalisma+0xf3c>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d11f      	bne.n	80065ac <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800656c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006570:	480b      	ldr	r0, [pc, #44]	@ (80065a0 <checkDemoModCalisma+0xf40>)
 8006572:	f005 f805 	bl	800b580 <HAL_GPIO_ReadPin>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d117      	bne.n	80065ac <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <checkDemoModCalisma+0xf48>)
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e016      	b.n	80065b2 <checkDemoModCalisma+0xf52>
 8006584:	40010800 	.word	0x40010800
 8006588:	200010c9 	.word	0x200010c9
 800658c:	40011000 	.word	0x40011000
 8006590:	200010c2 	.word	0x200010c2
 8006594:	20001107 	.word	0x20001107
 8006598:	20001108 	.word	0x20001108
 800659c:	200010c8 	.word	0x200010c8
 80065a0:	40010c00 	.word	0x40010c00
 80065a4:	20001117 	.word	0x20001117
 80065a8:	20001118 	.word	0x20001118
				} else {
					kapiactablaesp2=0;
 80065ac:	4b7e      	ldr	r3, [pc, #504]	@ (80067a8 <checkDemoModCalisma+0x1148>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80065b2:	4b7e      	ldr	r3, [pc, #504]	@ (80067ac <checkDemoModCalisma+0x114c>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d154      	bne.n	8006664 <checkDemoModCalisma+0x1004>
 80065ba:	4b7d      	ldr	r3, [pc, #500]	@ (80067b0 <checkDemoModCalisma+0x1150>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d003      	beq.n	80065ca <checkDemoModCalisma+0xf6a>
 80065c2:	4b7b      	ldr	r3, [pc, #492]	@ (80067b0 <checkDemoModCalisma+0x1150>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d14c      	bne.n	8006664 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80065ca:	4b7a      	ldr	r3, [pc, #488]	@ (80067b4 <checkDemoModCalisma+0x1154>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <checkDemoModCalisma+0xf7a>
 80065d2:	4b79      	ldr	r3, [pc, #484]	@ (80067b8 <checkDemoModCalisma+0x1158>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d044      	beq.n	8006664 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80065da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065de:	4877      	ldr	r0, [pc, #476]	@ (80067bc <checkDemoModCalisma+0x115c>)
 80065e0:	f004 ffce 	bl	800b580 <HAL_GPIO_ReadPin>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01c      	beq.n	8006624 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80065ea:	2180      	movs	r1, #128	@ 0x80
 80065ec:	4873      	ldr	r0, [pc, #460]	@ (80067bc <checkDemoModCalisma+0x115c>)
 80065ee:	f004 ffc7 	bl	800b580 <HAL_GPIO_ReadPin>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80065f8:	2104      	movs	r1, #4
 80065fa:	4870      	ldr	r0, [pc, #448]	@ (80067bc <checkDemoModCalisma+0x115c>)
 80065fc:	f004 ffc0 	bl	800b580 <HAL_GPIO_ReadPin>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d00e      	beq.n	8006624 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800660a:	486c      	ldr	r0, [pc, #432]	@ (80067bc <checkDemoModCalisma+0x115c>)
 800660c:	f004 ffb8 	bl	800b580 <HAL_GPIO_ReadPin>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006616:	2102      	movs	r1, #2
 8006618:	4868      	ldr	r0, [pc, #416]	@ (80067bc <checkDemoModCalisma+0x115c>)
 800661a:	f004 ffb1 	bl	800b580 <HAL_GPIO_ReadPin>
 800661e:	4603      	mov	r3, r0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d103      	bne.n	800662c <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006624:	4b66      	ldr	r3, [pc, #408]	@ (80067c0 <checkDemoModCalisma+0x1160>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <checkDemoModCalisma+0xfdc>
 800662c:	4b65      	ldr	r3, [pc, #404]	@ (80067c4 <checkDemoModCalisma+0x1164>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <checkDemoModCalisma+0xfdc>
 8006634:	4b5c      	ldr	r3, [pc, #368]	@ (80067a8 <checkDemoModCalisma+0x1148>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 800663c:	4b62      	ldr	r3, [pc, #392]	@ (80067c8 <checkDemoModCalisma+0x1168>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00f      	beq.n	8006664 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 8006644:	4b61      	ldr	r3, [pc, #388]	@ (80067cc <checkDemoModCalisma+0x116c>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f083 0301 	eor.w	r3, r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 8006652:	4b5f      	ldr	r3, [pc, #380]	@ (80067d0 <checkDemoModCalisma+0x1170>)
 8006654:	2201      	movs	r2, #1
 8006656:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006658:	4b5e      	ldr	r3, [pc, #376]	@ (80067d4 <checkDemoModCalisma+0x1174>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5e      	ldr	r2, [pc, #376]	@ (80067d8 <checkDemoModCalisma+0x1178>)
 800665e:	6013      	str	r3, [r2, #0]
					bekle();
 8006660:	f7fd fa98 	bl	8003b94 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006664:	4b5b      	ldr	r3, [pc, #364]	@ (80067d4 <checkDemoModCalisma+0x1174>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b5b      	ldr	r3, [pc, #364]	@ (80067d8 <checkDemoModCalisma+0x1178>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	4a5b      	ldr	r2, [pc, #364]	@ (80067dc <checkDemoModCalisma+0x117c>)
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	4293      	cmp	r3, r2
 8006674:	d214      	bcs.n	80066a0 <checkDemoModCalisma+0x1040>
 8006676:	4b4f      	ldr	r3, [pc, #316]	@ (80067b4 <checkDemoModCalisma+0x1154>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f083 0301 	eor.w	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <checkDemoModCalisma+0x1032>
 8006684:	4b4c      	ldr	r3, [pc, #304]	@ (80067b8 <checkDemoModCalisma+0x1158>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f083 0301 	eor.w	r3, r3, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <checkDemoModCalisma+0x1040>
 8006692:	4b4d      	ldr	r3, [pc, #308]	@ (80067c8 <checkDemoModCalisma+0x1168>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f083 0301 	eor.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 80066a0:	4b4b      	ldr	r3, [pc, #300]	@ (80067d0 <checkDemoModCalisma+0x1170>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80066a6:	4b41      	ldr	r3, [pc, #260]	@ (80067ac <checkDemoModCalisma+0x114c>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d148      	bne.n	8006740 <checkDemoModCalisma+0x10e0>
 80066ae:	4b40      	ldr	r3, [pc, #256]	@ (80067b0 <checkDemoModCalisma+0x1150>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d003      	beq.n	80066be <checkDemoModCalisma+0x105e>
 80066b6:	4b3e      	ldr	r3, [pc, #248]	@ (80067b0 <checkDemoModCalisma+0x1150>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d140      	bne.n	8006740 <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80066be:	4b3d      	ldr	r3, [pc, #244]	@ (80067b4 <checkDemoModCalisma+0x1154>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <checkDemoModCalisma+0x106e>
 80066c6:	4b3c      	ldr	r3, [pc, #240]	@ (80067b8 <checkDemoModCalisma+0x1158>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d038      	beq.n	8006740 <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80066ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066d2:	483a      	ldr	r0, [pc, #232]	@ (80067bc <checkDemoModCalisma+0x115c>)
 80066d4:	f004 ff54 	bl	800b580 <HAL_GPIO_ReadPin>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01c      	beq.n	8006718 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80066de:	2180      	movs	r1, #128	@ 0x80
 80066e0:	4836      	ldr	r0, [pc, #216]	@ (80067bc <checkDemoModCalisma+0x115c>)
 80066e2:	f004 ff4d 	bl	800b580 <HAL_GPIO_ReadPin>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80066ec:	2104      	movs	r1, #4
 80066ee:	4833      	ldr	r0, [pc, #204]	@ (80067bc <checkDemoModCalisma+0x115c>)
 80066f0:	f004 ff46 	bl	800b580 <HAL_GPIO_ReadPin>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d00e      	beq.n	8006718 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80066fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066fe:	482f      	ldr	r0, [pc, #188]	@ (80067bc <checkDemoModCalisma+0x115c>)
 8006700:	f004 ff3e 	bl	800b580 <HAL_GPIO_ReadPin>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800670a:	2102      	movs	r1, #2
 800670c:	482b      	ldr	r0, [pc, #172]	@ (80067bc <checkDemoModCalisma+0x115c>)
 800670e:	f004 ff37 	bl	800b580 <HAL_GPIO_ReadPin>
 8006712:	4603      	mov	r3, r0
 8006714:	2b01      	cmp	r3, #1
 8006716:	d103      	bne.n	8006720 <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006718:	4b29      	ldr	r3, [pc, #164]	@ (80067c0 <checkDemoModCalisma+0x1160>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <checkDemoModCalisma+0x10d0>
 8006720:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <checkDemoModCalisma+0x1164>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <checkDemoModCalisma+0x10d0>
 8006728:	4b1f      	ldr	r3, [pc, #124]	@ (80067a8 <checkDemoModCalisma+0x1148>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 8006730:	4b25      	ldr	r3, [pc, #148]	@ (80067c8 <checkDemoModCalisma+0x1168>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8006738:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <checkDemoModCalisma+0x1180>)
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e002      	b.n	8006746 <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8006740:	4b27      	ldr	r3, [pc, #156]	@ (80067e0 <checkDemoModCalisma+0x1180>)
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006746:	4b19      	ldr	r3, [pc, #100]	@ (80067ac <checkDemoModCalisma+0x114c>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d117      	bne.n	800677e <checkDemoModCalisma+0x111e>
 800674e:	4b18      	ldr	r3, [pc, #96]	@ (80067b0 <checkDemoModCalisma+0x1150>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d003      	beq.n	800675e <checkDemoModCalisma+0x10fe>
 8006756:	4b16      	ldr	r3, [pc, #88]	@ (80067b0 <checkDemoModCalisma+0x1150>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d10f      	bne.n	800677e <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <checkDemoModCalisma+0x1154>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <checkDemoModCalisma+0x110e>
 8006766:	4b14      	ldr	r3, [pc, #80]	@ (80067b8 <checkDemoModCalisma+0x1158>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 800676e:	4b16      	ldr	r3, [pc, #88]	@ (80067c8 <checkDemoModCalisma+0x1168>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 8006776:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <checkDemoModCalisma+0x1184>)
 8006778:	2201      	movs	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e002      	b.n	8006784 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 800677e:	4b19      	ldr	r3, [pc, #100]	@ (80067e4 <checkDemoModCalisma+0x1184>)
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006784:	4b16      	ldr	r3, [pc, #88]	@ (80067e0 <checkDemoModCalisma+0x1180>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <checkDemoModCalisma+0x113c>
 800678c:	4b10      	ldr	r3, [pc, #64]	@ (80067d0 <checkDemoModCalisma+0x1170>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <checkDemoModCalisma+0x113c>
 8006794:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <checkDemoModCalisma+0x1184>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d027      	beq.n	80067ec <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800679c:	2201      	movs	r2, #1
 800679e:	2120      	movs	r1, #32
 80067a0:	4811      	ldr	r0, [pc, #68]	@ (80067e8 <checkDemoModCalisma+0x1188>)
 80067a2:	f004 ff04 	bl	800b5ae <HAL_GPIO_WritePin>
 80067a6:	e026      	b.n	80067f6 <checkDemoModCalisma+0x1196>
 80067a8:	20001118 	.word	0x20001118
 80067ac:	200010c7 	.word	0x200010c7
 80067b0:	200010c4 	.word	0x200010c4
 80067b4:	20001107 	.word	0x20001107
 80067b8:	20001108 	.word	0x20001108
 80067bc:	40011000 	.word	0x40011000
 80067c0:	200010c8 	.word	0x200010c8
 80067c4:	20001117 	.word	0x20001117
 80067c8:	200010fd 	.word	0x200010fd
 80067cc:	200010eb 	.word	0x200010eb
 80067d0:	20001104 	.word	0x20001104
 80067d4:	20001094 	.word	0x20001094
 80067d8:	20001098 	.word	0x20001098
 80067dc:	200010d7 	.word	0x200010d7
 80067e0:	20001105 	.word	0x20001105
 80067e4:	20001106 	.word	0x20001106
 80067e8:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067ec:	2200      	movs	r2, #0
 80067ee:	2120      	movs	r1, #32
 80067f0:	4887      	ldr	r0, [pc, #540]	@ (8006a10 <checkDemoModCalisma+0x13b0>)
 80067f2:	f004 fedc 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80067f6:	4b87      	ldr	r3, [pc, #540]	@ (8006a14 <checkDemoModCalisma+0x13b4>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00e      	beq.n	800681c <checkDemoModCalisma+0x11bc>
 80067fe:	2102      	movs	r1, #2
 8006800:	4885      	ldr	r0, [pc, #532]	@ (8006a18 <checkDemoModCalisma+0x13b8>)
 8006802:	f004 febd 	bl	800b580 <HAL_GPIO_ReadPin>
 8006806:	4603      	mov	r3, r0
 8006808:	2b01      	cmp	r3, #1
 800680a:	d107      	bne.n	800681c <checkDemoModCalisma+0x11bc>
 800680c:	4b83      	ldr	r3, [pc, #524]	@ (8006a1c <checkDemoModCalisma+0x13bc>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <checkDemoModCalisma+0x11bc>
 8006814:	4b82      	ldr	r3, [pc, #520]	@ (8006a20 <checkDemoModCalisma+0x13c0>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d112      	bne.n	8006842 <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800681c:	4b81      	ldr	r3, [pc, #516]	@ (8006a24 <checkDemoModCalisma+0x13c4>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d032      	beq.n	800688a <checkDemoModCalisma+0x122a>
 8006824:	2104      	movs	r1, #4
 8006826:	487c      	ldr	r0, [pc, #496]	@ (8006a18 <checkDemoModCalisma+0x13b8>)
 8006828:	f004 feaa 	bl	800b580 <HAL_GPIO_ReadPin>
 800682c:	4603      	mov	r3, r0
 800682e:	2b01      	cmp	r3, #1
 8006830:	d12b      	bne.n	800688a <checkDemoModCalisma+0x122a>
 8006832:	4b7a      	ldr	r3, [pc, #488]	@ (8006a1c <checkDemoModCalisma+0x13bc>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d027      	beq.n	800688a <checkDemoModCalisma+0x122a>
 800683a:	4b79      	ldr	r3, [pc, #484]	@ (8006a20 <checkDemoModCalisma+0x13c0>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d023      	beq.n	800688a <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 8006842:	4b79      	ldr	r3, [pc, #484]	@ (8006a28 <checkDemoModCalisma+0x13c8>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	3301      	adds	r3, #1
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b77      	ldr	r3, [pc, #476]	@ (8006a28 <checkDemoModCalisma+0x13c8>)
 800684c:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800684e:	4b76      	ldr	r3, [pc, #472]	@ (8006a28 <checkDemoModCalisma+0x13c8>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2bff      	cmp	r3, #255	@ 0xff
 8006854:	d108      	bne.n	8006868 <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 8006856:	4b74      	ldr	r3, [pc, #464]	@ (8006a28 <checkDemoModCalisma+0x13c8>)
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 800685c:	4b73      	ldr	r3, [pc, #460]	@ (8006a2c <checkDemoModCalisma+0x13cc>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	4b71      	ldr	r3, [pc, #452]	@ (8006a2c <checkDemoModCalisma+0x13cc>)
 8006866:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8006868:	4b6f      	ldr	r3, [pc, #444]	@ (8006a28 <checkDemoModCalisma+0x13c8>)
 800686a:	781a      	ldrb	r2, [r3, #0]
 800686c:	4b70      	ldr	r3, [pc, #448]	@ (8006a30 <checkDemoModCalisma+0x13d0>)
 800686e:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8006870:	4b6e      	ldr	r3, [pc, #440]	@ (8006a2c <checkDemoModCalisma+0x13cc>)
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	4b6e      	ldr	r3, [pc, #440]	@ (8006a30 <checkDemoModCalisma+0x13d0>)
 8006876:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8006878:	4b6e      	ldr	r3, [pc, #440]	@ (8006a34 <checkDemoModCalisma+0x13d4>)
 800687a:	2201      	movs	r2, #1
 800687c:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800687e:	4b65      	ldr	r3, [pc, #404]	@ (8006a14 <checkDemoModCalisma+0x13b4>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8006884:	4b67      	ldr	r3, [pc, #412]	@ (8006a24 <checkDemoModCalisma+0x13c4>)
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800688a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800688e:	486a      	ldr	r0, [pc, #424]	@ (8006a38 <checkDemoModCalisma+0x13d8>)
 8006890:	f004 fe76 	bl	800b580 <HAL_GPIO_ReadPin>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d016      	beq.n	80068c8 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800689a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800689e:	4866      	ldr	r0, [pc, #408]	@ (8006a38 <checkDemoModCalisma+0x13d8>)
 80068a0:	f004 fe6e 	bl	800b580 <HAL_GPIO_ReadPin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80068aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068ae:	4862      	ldr	r0, [pc, #392]	@ (8006a38 <checkDemoModCalisma+0x13d8>)
 80068b0:	f004 fe66 	bl	800b580 <HAL_GPIO_ReadPin>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d006      	beq.n	80068c8 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80068ba:	2140      	movs	r1, #64	@ 0x40
 80068bc:	4856      	ldr	r0, [pc, #344]	@ (8006a18 <checkDemoModCalisma+0x13b8>)
 80068be:	f004 fe5f 	bl	800b580 <HAL_GPIO_ReadPin>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d103      	bne.n	80068d0 <checkDemoModCalisma+0x1270>

					startBasili=1;
 80068c8:	4b5c      	ldr	r3, [pc, #368]	@ (8006a3c <checkDemoModCalisma+0x13dc>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e002      	b.n	80068d6 <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 80068d0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a3c <checkDemoModCalisma+0x13dc>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80068d6:	4b59      	ldr	r3, [pc, #356]	@ (8006a3c <checkDemoModCalisma+0x13dc>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d014      	beq.n	8006908 <checkDemoModCalisma+0x12a8>
 80068de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068e2:	4855      	ldr	r0, [pc, #340]	@ (8006a38 <checkDemoModCalisma+0x13d8>)
 80068e4:	f004 fe4c 	bl	800b580 <HAL_GPIO_ReadPin>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10c      	bne.n	8006908 <checkDemoModCalisma+0x12a8>

					hataVar=1;
 80068ee:	4b54      	ldr	r3, [pc, #336]	@ (8006a40 <checkDemoModCalisma+0x13e0>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80068f4:	2001      	movs	r0, #1
 80068f6:	f7fa f90b 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80068fa:	2001      	movs	r0, #1
 80068fc:	f7fa f8b0 	bl	8000a60 <hata2EEPROM>
					acilstophatasi=1;
 8006900:	4b50      	ldr	r3, [pc, #320]	@ (8006a44 <checkDemoModCalisma+0x13e4>)
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e018      	b.n	800693a <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006908:	4b4e      	ldr	r3, [pc, #312]	@ (8006a44 <checkDemoModCalisma+0x13e4>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d014      	beq.n	800693a <checkDemoModCalisma+0x12da>
 8006910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006914:	4848      	ldr	r0, [pc, #288]	@ (8006a38 <checkDemoModCalisma+0x13d8>)
 8006916:	f004 fe33 	bl	800b580 <HAL_GPIO_ReadPin>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10c      	bne.n	800693a <checkDemoModCalisma+0x12da>
 8006920:	4b46      	ldr	r3, [pc, #280]	@ (8006a3c <checkDemoModCalisma+0x13dc>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f083 0301 	eor.w	r3, r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 800692e:	4b45      	ldr	r3, [pc, #276]	@ (8006a44 <checkDemoModCalisma+0x13e4>)
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8006934:	2001      	movs	r0, #1
 8006936:	f7fd f8c3 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800693a:	4b43      	ldr	r3, [pc, #268]	@ (8006a48 <checkDemoModCalisma+0x13e8>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f083 0301 	eor.w	r3, r3, #1
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d023      	beq.n	8006990 <checkDemoModCalisma+0x1330>
 8006948:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800694c:	483a      	ldr	r0, [pc, #232]	@ (8006a38 <checkDemoModCalisma+0x13d8>)
 800694e:	f004 fe17 	bl	800b580 <HAL_GPIO_ReadPin>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <checkDemoModCalisma+0x1300>
 8006958:	4b3c      	ldr	r3, [pc, #240]	@ (8006a4c <checkDemoModCalisma+0x13ec>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d017      	beq.n	8006990 <checkDemoModCalisma+0x1330>
 8006960:	4b3b      	ldr	r3, [pc, #236]	@ (8006a50 <checkDemoModCalisma+0x13f0>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d113      	bne.n	8006990 <checkDemoModCalisma+0x1330>
 8006968:	4b3a      	ldr	r3, [pc, #232]	@ (8006a54 <checkDemoModCalisma+0x13f4>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f083 0301 	eor.w	r3, r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <checkDemoModCalisma+0x1330>
					hataVar=1;
 8006976:	4b32      	ldr	r3, [pc, #200]	@ (8006a40 <checkDemoModCalisma+0x13e0>)
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 800697c:	2002      	movs	r0, #2
 800697e:	f7fa f8c7 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8006982:	2002      	movs	r0, #2
 8006984:	f7fa f86c 	bl	8000a60 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006988:	4b32      	ldr	r3, [pc, #200]	@ (8006a54 <checkDemoModCalisma+0x13f4>)
 800698a:	2201      	movs	r2, #1
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e017      	b.n	80069c0 <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006990:	4b30      	ldr	r3, [pc, #192]	@ (8006a54 <checkDemoModCalisma+0x13f4>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d013      	beq.n	80069c0 <checkDemoModCalisma+0x1360>
 8006998:	4b2b      	ldr	r3, [pc, #172]	@ (8006a48 <checkDemoModCalisma+0x13e8>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00f      	beq.n	80069c0 <checkDemoModCalisma+0x1360>
 80069a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a58 <checkDemoModCalisma+0x13f8>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	f083 0301 	eor.w	r3, r3, #1
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 80069ae:	4b29      	ldr	r3, [pc, #164]	@ (8006a54 <checkDemoModCalisma+0x13f4>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80069b4:	4b25      	ldr	r3, [pc, #148]	@ (8006a4c <checkDemoModCalisma+0x13ec>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80069ba:	2002      	movs	r0, #2
 80069bc:	f7fd f880 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80069c0:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <checkDemoModCalisma+0x13fc>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d151      	bne.n	8006a6c <checkDemoModCalisma+0x140c>
 80069c8:	4b25      	ldr	r3, [pc, #148]	@ (8006a60 <checkDemoModCalisma+0x1400>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d14d      	bne.n	8006a6c <checkDemoModCalisma+0x140c>
 80069d0:	4b24      	ldr	r3, [pc, #144]	@ (8006a64 <checkDemoModCalisma+0x1404>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d049      	beq.n	8006a6c <checkDemoModCalisma+0x140c>
 80069d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069dc:	480e      	ldr	r0, [pc, #56]	@ (8006a18 <checkDemoModCalisma+0x13b8>)
 80069de:	f004 fdcf 	bl	800b580 <HAL_GPIO_ReadPin>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d141      	bne.n	8006a6c <checkDemoModCalisma+0x140c>
 80069e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a68 <checkDemoModCalisma+0x1408>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f083 0301 	eor.w	r3, r3, #1
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d03a      	beq.n	8006a6c <checkDemoModCalisma+0x140c>
					hataVar=1;
 80069f6:	4b12      	ldr	r3, [pc, #72]	@ (8006a40 <checkDemoModCalisma+0x13e0>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80069fc:	2003      	movs	r0, #3
 80069fe:	f7fa f887 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006a02:	2003      	movs	r0, #3
 8006a04:	f7fa f82c 	bl	8000a60 <hata2EEPROM>
					basinchatasi=1;
 8006a08:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <checkDemoModCalisma+0x1408>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e043      	b.n	8006a98 <checkDemoModCalisma+0x1438>
 8006a10:	40010800 	.word	0x40010800
 8006a14:	200010fb 	.word	0x200010fb
 8006a18:	40011000 	.word	0x40011000
 8006a1c:	200010c2 	.word	0x200010c2
 8006a20:	200010fd 	.word	0x200010fd
 8006a24:	200010fc 	.word	0x200010fc
 8006a28:	200010b4 	.word	0x200010b4
 8006a2c:	200010b6 	.word	0x200010b6
 8006a30:	20000fec 	.word	0x20000fec
 8006a34:	200010e8 	.word	0x200010e8
 8006a38:	40010c00 	.word	0x40010c00
 8006a3c:	20001109 	.word	0x20001109
 8006a40:	20001110 	.word	0x20001110
 8006a44:	2000110b 	.word	0x2000110b
 8006a48:	20001112 	.word	0x20001112
 8006a4c:	2000111c 	.word	0x2000111c
 8006a50:	200010c0 	.word	0x200010c0
 8006a54:	2000110c 	.word	0x2000110c
 8006a58:	200010f4 	.word	0x200010f4
 8006a5c:	200010bf 	.word	0x200010bf
 8006a60:	200010c3 	.word	0x200010c3
 8006a64:	2000110f 	.word	0x2000110f
 8006a68:	20001119 	.word	0x20001119
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006a6c:	4b85      	ldr	r3, [pc, #532]	@ (8006c84 <checkDemoModCalisma+0x1624>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <checkDemoModCalisma+0x1438>
 8006a74:	4b84      	ldr	r3, [pc, #528]	@ (8006c88 <checkDemoModCalisma+0x1628>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10d      	bne.n	8006a98 <checkDemoModCalisma+0x1438>
 8006a7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006a80:	4882      	ldr	r0, [pc, #520]	@ (8006c8c <checkDemoModCalisma+0x162c>)
 8006a82:	f004 fd7d 	bl	800b580 <HAL_GPIO_ReadPin>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d105      	bne.n	8006a98 <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 8006a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8006c84 <checkDemoModCalisma+0x1624>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8006a92:	2003      	movs	r0, #3
 8006a94:	f7fd f814 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006a98:	4b7d      	ldr	r3, [pc, #500]	@ (8006c90 <checkDemoModCalisma+0x1630>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <checkDemoModCalisma+0x1448>
 8006aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8006c94 <checkDemoModCalisma+0x1634>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d023      	beq.n	8006af0 <checkDemoModCalisma+0x1490>
 8006aa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006aac:	487a      	ldr	r0, [pc, #488]	@ (8006c98 <checkDemoModCalisma+0x1638>)
 8006aae:	f004 fd67 	bl	800b580 <HAL_GPIO_ReadPin>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d11b      	bne.n	8006af0 <checkDemoModCalisma+0x1490>
 8006ab8:	4b78      	ldr	r3, [pc, #480]	@ (8006c9c <checkDemoModCalisma+0x163c>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d003      	beq.n	8006ac8 <checkDemoModCalisma+0x1468>
 8006ac0:	4b76      	ldr	r3, [pc, #472]	@ (8006c9c <checkDemoModCalisma+0x163c>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d113      	bne.n	8006af0 <checkDemoModCalisma+0x1490>
 8006ac8:	4b75      	ldr	r3, [pc, #468]	@ (8006ca0 <checkDemoModCalisma+0x1640>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f083 0301 	eor.w	r3, r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <checkDemoModCalisma+0x1490>
					hataVar=1;
 8006ad6:	4b73      	ldr	r3, [pc, #460]	@ (8006ca4 <checkDemoModCalisma+0x1644>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006adc:	2004      	movs	r0, #4
 8006ade:	f7fa f817 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006ae2:	2004      	movs	r0, #4
 8006ae4:	f7f9 ffbc 	bl	8000a60 <hata2EEPROM>
					katkapisivicihatasi=1;
 8006ae8:	4b6d      	ldr	r3, [pc, #436]	@ (8006ca0 <checkDemoModCalisma+0x1640>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e01f      	b.n	8006b30 <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006af0:	4b6b      	ldr	r3, [pc, #428]	@ (8006ca0 <checkDemoModCalisma+0x1640>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01b      	beq.n	8006b30 <checkDemoModCalisma+0x14d0>
 8006af8:	4b6b      	ldr	r3, [pc, #428]	@ (8006ca8 <checkDemoModCalisma+0x1648>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d017      	beq.n	8006b30 <checkDemoModCalisma+0x14d0>
 8006b00:	4b63      	ldr	r3, [pc, #396]	@ (8006c90 <checkDemoModCalisma+0x1630>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f083 0301 	eor.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <checkDemoModCalisma+0x14d0>
 8006b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b12:	4861      	ldr	r0, [pc, #388]	@ (8006c98 <checkDemoModCalisma+0x1638>)
 8006b14:	f004 fd34 	bl	800b580 <HAL_GPIO_ReadPin>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d108      	bne.n	8006b30 <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 8006b1e:	4b60      	ldr	r3, [pc, #384]	@ (8006ca0 <checkDemoModCalisma+0x1640>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006b24:	4b5b      	ldr	r3, [pc, #364]	@ (8006c94 <checkDemoModCalisma+0x1634>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8006b2a:	2004      	movs	r0, #4
 8006b2c:	f7fc ffc8 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8006b30:	4b57      	ldr	r3, [pc, #348]	@ (8006c90 <checkDemoModCalisma+0x1630>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <checkDemoModCalisma+0x14e0>
 8006b38:	4b5c      	ldr	r3, [pc, #368]	@ (8006cac <checkDemoModCalisma+0x164c>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d023      	beq.n	8006b88 <checkDemoModCalisma+0x1528>
 8006b40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b44:	4854      	ldr	r0, [pc, #336]	@ (8006c98 <checkDemoModCalisma+0x1638>)
 8006b46:	f004 fd1b 	bl	800b580 <HAL_GPIO_ReadPin>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d11b      	bne.n	8006b88 <checkDemoModCalisma+0x1528>
 8006b50:	4b52      	ldr	r3, [pc, #328]	@ (8006c9c <checkDemoModCalisma+0x163c>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d003      	beq.n	8006b60 <checkDemoModCalisma+0x1500>
 8006b58:	4b50      	ldr	r3, [pc, #320]	@ (8006c9c <checkDemoModCalisma+0x163c>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d113      	bne.n	8006b88 <checkDemoModCalisma+0x1528>
 8006b60:	4b53      	ldr	r3, [pc, #332]	@ (8006cb0 <checkDemoModCalisma+0x1650>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f083 0301 	eor.w	r3, r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <checkDemoModCalisma+0x1528>

					hataVar=1;
 8006b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8006ca4 <checkDemoModCalisma+0x1644>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006b74:	2005      	movs	r0, #5
 8006b76:	f7f9 ffcb 	bl	8000b10 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006b7a:	2005      	movs	r0, #5
 8006b7c:	f7f9 ff70 	bl	8000a60 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006b80:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb0 <checkDemoModCalisma+0x1650>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	e023      	b.n	8006bd0 <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006b88:	4b49      	ldr	r3, [pc, #292]	@ (8006cb0 <checkDemoModCalisma+0x1650>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01f      	beq.n	8006bd0 <checkDemoModCalisma+0x1570>
 8006b90:	4b45      	ldr	r3, [pc, #276]	@ (8006ca8 <checkDemoModCalisma+0x1648>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01b      	beq.n	8006bd0 <checkDemoModCalisma+0x1570>
 8006b98:	4b3d      	ldr	r3, [pc, #244]	@ (8006c90 <checkDemoModCalisma+0x1630>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f083 0301 	eor.w	r3, r3, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d014      	beq.n	8006bd0 <checkDemoModCalisma+0x1570>
 8006ba6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006baa:	483b      	ldr	r0, [pc, #236]	@ (8006c98 <checkDemoModCalisma+0x1638>)
 8006bac:	f004 fce8 	bl	800b580 <HAL_GPIO_ReadPin>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10c      	bne.n	8006bd0 <checkDemoModCalisma+0x1570>
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca8 <checkDemoModCalisma+0x1648>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d008      	beq.n	8006bd0 <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 8006bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb0 <checkDemoModCalisma+0x1650>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006bc4:	4b39      	ldr	r3, [pc, #228]	@ (8006cac <checkDemoModCalisma+0x164c>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006bca:	2005      	movs	r0, #5
 8006bcc:	f7fc ff78 	bl	8003ac0 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006bd0:	4b38      	ldr	r3, [pc, #224]	@ (8006cb4 <checkDemoModCalisma+0x1654>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d107      	bne.n	8006be8 <checkDemoModCalisma+0x1588>
 8006bd8:	4b37      	ldr	r3, [pc, #220]	@ (8006cb8 <checkDemoModCalisma+0x1658>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <checkDemoModCalisma+0x1588>
 8006be0:	4b36      	ldr	r3, [pc, #216]	@ (8006cbc <checkDemoModCalisma+0x165c>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01b      	beq.n	8006c20 <checkDemoModCalisma+0x15c0>
 8006be8:	4b35      	ldr	r3, [pc, #212]	@ (8006cc0 <checkDemoModCalisma+0x1660>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f083 0301 	eor.w	r3, r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d014      	beq.n	8006c20 <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8006bf6:	4b33      	ldr	r3, [pc, #204]	@ (8006cc4 <checkDemoModCalisma+0x1664>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b33      	ldr	r3, [pc, #204]	@ (8006cc8 <checkDemoModCalisma+0x1668>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	4a32      	ldr	r2, [pc, #200]	@ (8006ccc <checkDemoModCalisma+0x166c>)
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d30b      	bcc.n	8006c20 <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 8006c08:	4b26      	ldr	r3, [pc, #152]	@ (8006ca4 <checkDemoModCalisma+0x1644>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8006c0e:	2006      	movs	r0, #6
 8006c10:	f7f9 ff7e 	bl	8000b10 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006c14:	2006      	movs	r0, #6
 8006c16:	f7f9 ff23 	bl	8000a60 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006c1a:	4b29      	ldr	r3, [pc, #164]	@ (8006cc0 <checkDemoModCalisma+0x1660>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006c20:	4b27      	ldr	r3, [pc, #156]	@ (8006cc0 <checkDemoModCalisma+0x1660>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d013      	beq.n	8006c50 <checkDemoModCalisma+0x15f0>
 8006c28:	2108      	movs	r1, #8
 8006c2a:	481b      	ldr	r0, [pc, #108]	@ (8006c98 <checkDemoModCalisma+0x1638>)
 8006c2c:	f004 fca8 	bl	800b580 <HAL_GPIO_ReadPin>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <checkDemoModCalisma+0x15f0>
 8006c36:	4b16      	ldr	r3, [pc, #88]	@ (8006c90 <checkDemoModCalisma+0x1630>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f083 0301 	eor.w	r3, r3, #1
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8006c44:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <checkDemoModCalisma+0x1660>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006c4a:	2006      	movs	r0, #6
 8006c4c:	f7fc ff38 	bl	8003ac0 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006c50:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <checkDemoModCalisma+0x1670>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10b      	bne.n	8006c70 <checkDemoModCalisma+0x1610>
 8006c58:	4b17      	ldr	r3, [pc, #92]	@ (8006cb8 <checkDemoModCalisma+0x1658>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d107      	bne.n	8006c70 <checkDemoModCalisma+0x1610>
 8006c60:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd4 <checkDemoModCalisma+0x1674>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <checkDemoModCalisma+0x1610>
 8006c68:	4b14      	ldr	r3, [pc, #80]	@ (8006cbc <checkDemoModCalisma+0x165c>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d035      	beq.n	8006cdc <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 8006c70:	4b19      	ldr	r3, [pc, #100]	@ (8006cd8 <checkDemoModCalisma+0x1678>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006c76:	4b07      	ldr	r3, [pc, #28]	@ (8006c94 <checkDemoModCalisma+0x1634>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <checkDemoModCalisma+0x164c>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	e032      	b.n	8006cea <checkDemoModCalisma+0x168a>
 8006c84:	20001119 	.word	0x20001119
 8006c88:	200010bf 	.word	0x200010bf
 8006c8c:	40010c00 	.word	0x40010c00
 8006c90:	20001109 	.word	0x20001109
 8006c94:	2000111d 	.word	0x2000111d
 8006c98:	40010800 	.word	0x40010800
 8006c9c:	200010c4 	.word	0x200010c4
 8006ca0:	2000111a 	.word	0x2000111a
 8006ca4:	20001110 	.word	0x20001110
 8006ca8:	200010fd 	.word	0x200010fd
 8006cac:	2000111e 	.word	0x2000111e
 8006cb0:	2000111b 	.word	0x2000111b
 8006cb4:	2000110f 	.word	0x2000110f
 8006cb8:	200010f4 	.word	0x200010f4
 8006cbc:	200010f3 	.word	0x200010f3
 8006cc0:	2000110a 	.word	0x2000110a
 8006cc4:	20001094 	.word	0x20001094
 8006cc8:	200010a8 	.word	0x200010a8
 8006ccc:	200010d4 	.word	0x200010d4
 8006cd0:	200010f1 	.word	0x200010f1
 8006cd4:	200010f2 	.word	0x200010f2
 8006cd8:	20001111 	.word	0x20001111
				} else {
					makineCalisiyor=1;
 8006cdc:	4b90      	ldr	r3, [pc, #576]	@ (8006f20 <checkDemoModCalisma+0x18c0>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006ce2:	4b90      	ldr	r3, [pc, #576]	@ (8006f24 <checkDemoModCalisma+0x18c4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a90      	ldr	r2, [pc, #576]	@ (8006f28 <checkDemoModCalisma+0x18c8>)
 8006ce8:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006cea:	4b90      	ldr	r3, [pc, #576]	@ (8006f2c <checkDemoModCalisma+0x18cc>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d02f      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>
 8006cf2:	4b8f      	ldr	r3, [pc, #572]	@ (8006f30 <checkDemoModCalisma+0x18d0>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f083 0301 	eor.w	r3, r3, #1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d028      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>
 8006d00:	4b8c      	ldr	r3, [pc, #560]	@ (8006f34 <checkDemoModCalisma+0x18d4>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f083 0301 	eor.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d021      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>
 8006d0e:	4b8a      	ldr	r3, [pc, #552]	@ (8006f38 <checkDemoModCalisma+0x18d8>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f083 0301 	eor.w	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01a      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006d1c:	4b87      	ldr	r3, [pc, #540]	@ (8006f3c <checkDemoModCalisma+0x18dc>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f083 0301 	eor.w	r3, r3, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d013      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>
 8006d2a:	4b85      	ldr	r3, [pc, #532]	@ (8006f40 <checkDemoModCalisma+0x18e0>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	f083 0301 	eor.w	r3, r3, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00c      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>
 8006d38:	4b82      	ldr	r3, [pc, #520]	@ (8006f44 <checkDemoModCalisma+0x18e4>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f083 0301 	eor.w	r3, r3, #1
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <checkDemoModCalisma+0x16f2>

					hataVar=0;
 8006d46:	4b79      	ldr	r3, [pc, #484]	@ (8006f2c <checkDemoModCalisma+0x18cc>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006d4c:	2007      	movs	r0, #7
 8006d4e:	f7fc feb7 	bl	8003ac0 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8006d52:	4b76      	ldr	r3, [pc, #472]	@ (8006f2c <checkDemoModCalisma+0x18cc>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02a      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
 8006d5a:	4b75      	ldr	r3, [pc, #468]	@ (8006f30 <checkDemoModCalisma+0x18d0>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	f083 0301 	eor.w	r3, r3, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d023      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
 8006d68:	4b72      	ldr	r3, [pc, #456]	@ (8006f34 <checkDemoModCalisma+0x18d4>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01f      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
 8006d70:	4b71      	ldr	r3, [pc, #452]	@ (8006f38 <checkDemoModCalisma+0x18d8>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f083 0301 	eor.w	r3, r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8006d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8006f3c <checkDemoModCalisma+0x18dc>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f083 0301 	eor.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d011      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
 8006d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006f40 <checkDemoModCalisma+0x18e0>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f083 0301 	eor.w	r3, r3, #1
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f44 <checkDemoModCalisma+0x18e4>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	f083 0301 	eor.w	r3, r3, #1
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006da8:	4b67      	ldr	r3, [pc, #412]	@ (8006f48 <checkDemoModCalisma+0x18e8>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e009      	b.n	8006dc4 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 8006db0:	4b60      	ldr	r3, [pc, #384]	@ (8006f34 <checkDemoModCalisma+0x18d4>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f083 0301 	eor.w	r3, r3, #1
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 8006dbe:	4b62      	ldr	r3, [pc, #392]	@ (8006f48 <checkDemoModCalisma+0x18e8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006dc4:	4b61      	ldr	r3, [pc, #388]	@ (8006f4c <checkDemoModCalisma+0x18ec>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f040 81d8 	bne.w	800717e <checkDemoModCalisma+0x1b1e>
 8006dce:	4b60      	ldr	r3, [pc, #384]	@ (8006f50 <checkDemoModCalisma+0x18f0>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 81d3 	beq.w	800717e <checkDemoModCalisma+0x1b1e>
 8006dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8006f54 <checkDemoModCalisma+0x18f4>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 81ce 	bne.w	800717e <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006de2:	2102      	movs	r1, #2
 8006de4:	485c      	ldr	r0, [pc, #368]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006de6:	f004 fbcb 	bl	800b580 <HAL_GPIO_ReadPin>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11d      	bne.n	8006e2c <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 8006df0:	4b5a      	ldr	r3, [pc, #360]	@ (8006f5c <checkDemoModCalisma+0x18fc>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f083 0301 	eor.w	r3, r3, #1
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 8006dfe:	4b58      	ldr	r3, [pc, #352]	@ (8006f60 <checkDemoModCalisma+0x1900>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f083 0301 	eor.w	r3, r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00f      	beq.n	8006e2c <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 8006e0c:	4b55      	ldr	r3, [pc, #340]	@ (8006f64 <checkDemoModCalisma+0x1904>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	f083 0301 	eor.w	r3, r3, #1
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d008      	beq.n	8006e2c <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	4852      	ldr	r0, [pc, #328]	@ (8006f68 <checkDemoModCalisma+0x1908>)
 8006e20:	f004 fbc5 	bl	800b5ae <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006e24:	4b51      	ldr	r3, [pc, #324]	@ (8006f6c <checkDemoModCalisma+0x190c>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e00e      	b.n	8006e4a <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	484a      	ldr	r0, [pc, #296]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006e30:	f004 fba6 	bl	800b580 <HAL_GPIO_ReadPin>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2104      	movs	r1, #4
 8006e3e:	484a      	ldr	r0, [pc, #296]	@ (8006f68 <checkDemoModCalisma+0x1908>)
 8006e40:	f004 fbb5 	bl	800b5ae <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006e44:	4b49      	ldr	r3, [pc, #292]	@ (8006f6c <checkDemoModCalisma+0x190c>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006e4a:	4b48      	ldr	r3, [pc, #288]	@ (8006f6c <checkDemoModCalisma+0x190c>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <checkDemoModCalisma+0x180a>
 8006e52:	4b43      	ldr	r3, [pc, #268]	@ (8006f60 <checkDemoModCalisma+0x1900>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d107      	bne.n	8006e6a <checkDemoModCalisma+0x180a>
 8006e5a:	4b42      	ldr	r3, [pc, #264]	@ (8006f64 <checkDemoModCalisma+0x1904>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <checkDemoModCalisma+0x180a>
 8006e62:	4b3e      	ldr	r3, [pc, #248]	@ (8006f5c <checkDemoModCalisma+0x18fc>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e70:	483d      	ldr	r0, [pc, #244]	@ (8006f68 <checkDemoModCalisma+0x1908>)
 8006e72:	f004 fb9c 	bl	800b5ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006e76:	2201      	movs	r2, #1
 8006e78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e7c:	483a      	ldr	r0, [pc, #232]	@ (8006f68 <checkDemoModCalisma+0x1908>)
 8006e7e:	f004 fb96 	bl	800b5ae <HAL_GPIO_WritePin>
 8006e82:	e00b      	b.n	8006e9c <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006e84:	2200      	movs	r2, #0
 8006e86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e8a:	4837      	ldr	r0, [pc, #220]	@ (8006f68 <checkDemoModCalisma+0x1908>)
 8006e8c:	f004 fb8f 	bl	800b5ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e96:	4834      	ldr	r0, [pc, #208]	@ (8006f68 <checkDemoModCalisma+0x1908>)
 8006e98:	f004 fb89 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	482e      	ldr	r0, [pc, #184]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006ea0:	f004 fb6e 	bl	800b580 <HAL_GPIO_ReadPin>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d10d      	bne.n	8006ec6 <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006eaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006eae:	482a      	ldr	r0, [pc, #168]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006eb0:	f004 fb66 	bl	800b580 <HAL_GPIO_ReadPin>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 8006eba:	4b2c      	ldr	r3, [pc, #176]	@ (8006f6c <checkDemoModCalisma+0x190c>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f083 0301 	eor.w	r3, r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	4823      	ldr	r0, [pc, #140]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006eca:	f004 fb59 	bl	800b580 <HAL_GPIO_ReadPin>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d14d      	bne.n	8006f70 <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006ed4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ed8:	481f      	ldr	r0, [pc, #124]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006eda:	f004 fb51 	bl	800b580 <HAL_GPIO_ReadPin>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d145      	bne.n	8006f70 <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 8006ee4:	4b21      	ldr	r3, [pc, #132]	@ (8006f6c <checkDemoModCalisma+0x190c>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f083 0301 	eor.w	r3, r3, #1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d03e      	beq.n	8006f70 <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <checkDemoModCalisma+0x18fc>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f083 0301 	eor.w	r3, r3, #1
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d037      	beq.n	8006f70 <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 8006f00:	4b18      	ldr	r3, [pc, #96]	@ (8006f64 <checkDemoModCalisma+0x1904>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f083 0301 	eor.w	r3, r3, #1
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d030      	beq.n	8006f70 <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2120      	movs	r1, #32
 8006f12:	4811      	ldr	r0, [pc, #68]	@ (8006f58 <checkDemoModCalisma+0x18f8>)
 8006f14:	f004 fb4b 	bl	800b5ae <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006f18:	4b11      	ldr	r3, [pc, #68]	@ (8006f60 <checkDemoModCalisma+0x1900>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e02f      	b.n	8006f80 <checkDemoModCalisma+0x1920>
 8006f20:	20001111 	.word	0x20001111
 8006f24:	20001094 	.word	0x20001094
 8006f28:	200010a8 	.word	0x200010a8
 8006f2c:	20001110 	.word	0x20001110
 8006f30:	2000110b 	.word	0x2000110b
 8006f34:	2000110c 	.word	0x2000110c
 8006f38:	20001119 	.word	0x20001119
 8006f3c:	2000111a 	.word	0x2000111a
 8006f40:	2000111b 	.word	0x2000111b
 8006f44:	2000110a 	.word	0x2000110a
 8006f48:	2000111f 	.word	0x2000111f
 8006f4c:	200010da 	.word	0x200010da
 8006f50:	2000110d 	.word	0x2000110d
 8006f54:	200010d9 	.word	0x200010d9
 8006f58:	40011000 	.word	0x40011000
 8006f5c:	20001114 	.word	0x20001114
 8006f60:	20001115 	.word	0x20001115
 8006f64:	20001116 	.word	0x20001116
 8006f68:	40010c00 	.word	0x40010c00
 8006f6c:	20001113 	.word	0x20001113
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006f70:	2200      	movs	r2, #0
 8006f72:	2120      	movs	r1, #32
 8006f74:	48a1      	ldr	r0, [pc, #644]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8006f76:	f004 fb1a 	bl	800b5ae <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8007200 <checkDemoModCalisma+0x1ba0>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006f80:	2102      	movs	r1, #2
 8006f82:	489e      	ldr	r0, [pc, #632]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8006f84:	f004 fafc 	bl	800b580 <HAL_GPIO_ReadPin>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d125      	bne.n	8006fda <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006f8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006f92:	489a      	ldr	r0, [pc, #616]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8006f94:	f004 faf4 	bl	800b580 <HAL_GPIO_ReadPin>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11d      	bne.n	8006fda <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 8006f9e:	4b99      	ldr	r3, [pc, #612]	@ (8007204 <checkDemoModCalisma+0x1ba4>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f083 0301 	eor.w	r3, r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d016      	beq.n	8006fda <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 8006fac:	4b94      	ldr	r3, [pc, #592]	@ (8007200 <checkDemoModCalisma+0x1ba0>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f083 0301 	eor.w	r3, r3, #1
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00f      	beq.n	8006fda <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 8006fba:	4b93      	ldr	r3, [pc, #588]	@ (8007208 <checkDemoModCalisma+0x1ba8>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	f083 0301 	eor.w	r3, r3, #1
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2110      	movs	r1, #16
 8006fcc:	488b      	ldr	r0, [pc, #556]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8006fce:	f004 faee 	bl	800b5ae <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006fd2:	4b8e      	ldr	r3, [pc, #568]	@ (800720c <checkDemoModCalisma+0x1bac>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e007      	b.n	8006fea <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2110      	movs	r1, #16
 8006fde:	4887      	ldr	r0, [pc, #540]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8006fe0:	f004 fae5 	bl	800b5ae <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006fe4:	4b89      	ldr	r3, [pc, #548]	@ (800720c <checkDemoModCalisma+0x1bac>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006fea:	2104      	movs	r1, #4
 8006fec:	4883      	ldr	r0, [pc, #524]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8006fee:	f004 fac7 	bl	800b580 <HAL_GPIO_ReadPin>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d125      	bne.n	8007044 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 8006ff8:	4b82      	ldr	r3, [pc, #520]	@ (8007204 <checkDemoModCalisma+0x1ba4>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f083 0301 	eor.w	r3, r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01e      	beq.n	8007044 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 8007006:	4b81      	ldr	r3, [pc, #516]	@ (800720c <checkDemoModCalisma+0x1bac>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	f083 0301 	eor.w	r3, r3, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d017      	beq.n	8007044 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 8007014:	4b7a      	ldr	r3, [pc, #488]	@ (8007200 <checkDemoModCalisma+0x1ba0>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f083 0301 	eor.w	r3, r3, #1
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d010      	beq.n	8007044 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007022:	2201      	movs	r2, #1
 8007024:	2102      	movs	r1, #2
 8007026:	487a      	ldr	r0, [pc, #488]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 8007028:	f004 fac1 	bl	800b5ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800702c:	2201      	movs	r2, #1
 800702e:	2101      	movs	r1, #1
 8007030:	4877      	ldr	r0, [pc, #476]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 8007032:	f004 fabc 	bl	800b5ae <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8007036:	4b74      	ldr	r3, [pc, #464]	@ (8007208 <checkDemoModCalisma+0x1ba8>)
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 800703c:	4b75      	ldr	r3, [pc, #468]	@ (8007214 <checkDemoModCalisma+0x1bb4>)
 800703e:	2201      	movs	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e013      	b.n	800706c <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007044:	2104      	movs	r1, #4
 8007046:	486d      	ldr	r0, [pc, #436]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8007048:	f004 fa9a 	bl	800b580 <HAL_GPIO_ReadPin>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d10c      	bne.n	800706c <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007052:	2200      	movs	r2, #0
 8007054:	2102      	movs	r1, #2
 8007056:	486e      	ldr	r0, [pc, #440]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 8007058:	f004 faa9 	bl	800b5ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800705c:	2200      	movs	r2, #0
 800705e:	2101      	movs	r1, #1
 8007060:	486b      	ldr	r0, [pc, #428]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 8007062:	f004 faa4 	bl	800b5ae <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8007066:	4b68      	ldr	r3, [pc, #416]	@ (8007208 <checkDemoModCalisma+0x1ba8>)
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800706c:	2104      	movs	r1, #4
 800706e:	4863      	ldr	r0, [pc, #396]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 8007070:	f004 fa86 	bl	800b580 <HAL_GPIO_ReadPin>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10d      	bne.n	8007096 <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800707a:	2201      	movs	r2, #1
 800707c:	2180      	movs	r1, #128	@ 0x80
 800707e:	4866      	ldr	r0, [pc, #408]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 8007080:	f004 fa95 	bl	800b5ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007084:	2201      	movs	r2, #1
 8007086:	2120      	movs	r1, #32
 8007088:	4863      	ldr	r0, [pc, #396]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 800708a:	f004 fa90 	bl	800b5ae <HAL_GPIO_WritePin>
					timer3 = millis;
 800708e:	4b63      	ldr	r3, [pc, #396]	@ (800721c <checkDemoModCalisma+0x1bbc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a63      	ldr	r2, [pc, #396]	@ (8007220 <checkDemoModCalisma+0x1bc0>)
 8007094:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8007096:	4b61      	ldr	r3, [pc, #388]	@ (800721c <checkDemoModCalisma+0x1bbc>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b61      	ldr	r3, [pc, #388]	@ (8007220 <checkDemoModCalisma+0x1bc0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d909      	bls.n	80070b8 <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80070a4:	2200      	movs	r2, #0
 80070a6:	2180      	movs	r1, #128	@ 0x80
 80070a8:	485b      	ldr	r0, [pc, #364]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80070aa:	f004 fa80 	bl	800b5ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80070ae:	2200      	movs	r2, #0
 80070b0:	2120      	movs	r1, #32
 80070b2:	4859      	ldr	r0, [pc, #356]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80070b4:	f004 fa7b 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80070b8:	2102      	movs	r1, #2
 80070ba:	4850      	ldr	r0, [pc, #320]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 80070bc:	f004 fa60 	bl	800b580 <HAL_GPIO_ReadPin>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d108      	bne.n	80070d8 <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80070c6:	2201      	movs	r2, #1
 80070c8:	2140      	movs	r1, #64	@ 0x40
 80070ca:	4853      	ldr	r0, [pc, #332]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80070cc:	f004 fa6f 	bl	800b5ae <HAL_GPIO_WritePin>
					timer3 = millis;
 80070d0:	4b52      	ldr	r3, [pc, #328]	@ (800721c <checkDemoModCalisma+0x1bbc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a52      	ldr	r2, [pc, #328]	@ (8007220 <checkDemoModCalisma+0x1bc0>)
 80070d6:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 80070d8:	4b50      	ldr	r3, [pc, #320]	@ (800721c <checkDemoModCalisma+0x1bbc>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b50      	ldr	r3, [pc, #320]	@ (8007220 <checkDemoModCalisma+0x1bc0>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d904      	bls.n	80070f0 <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80070e6:	2200      	movs	r2, #0
 80070e8:	2140      	movs	r1, #64	@ 0x40
 80070ea:	484b      	ldr	r0, [pc, #300]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80070ec:	f004 fa5f 	bl	800b5ae <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80070f0:	4b44      	ldr	r3, [pc, #272]	@ (8007204 <checkDemoModCalisma+0x1ba4>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d024      	beq.n	8007142 <checkDemoModCalisma+0x1ae2>
 80070f8:	4b46      	ldr	r3, [pc, #280]	@ (8007214 <checkDemoModCalisma+0x1bb4>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d020      	beq.n	8007142 <checkDemoModCalisma+0x1ae2>

					calismaSayisiDemo++;
 8007100:	4b48      	ldr	r3, [pc, #288]	@ (8007224 <checkDemoModCalisma+0x1bc4>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	b2da      	uxtb	r2, r3
 8007108:	4b46      	ldr	r3, [pc, #280]	@ (8007224 <checkDemoModCalisma+0x1bc4>)
 800710a:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800710c:	4b46      	ldr	r3, [pc, #280]	@ (8007228 <checkDemoModCalisma+0x1bc8>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2bff      	cmp	r3, #255	@ 0xff
 8007112:	d108      	bne.n	8007126 <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 8007114:	4b44      	ldr	r3, [pc, #272]	@ (8007228 <checkDemoModCalisma+0x1bc8>)
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 800711a:	4b44      	ldr	r3, [pc, #272]	@ (800722c <checkDemoModCalisma+0x1bcc>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	4b42      	ldr	r3, [pc, #264]	@ (800722c <checkDemoModCalisma+0x1bcc>)
 8007124:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8007126:	4b3f      	ldr	r3, [pc, #252]	@ (8007224 <checkDemoModCalisma+0x1bc4>)
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	4b41      	ldr	r3, [pc, #260]	@ (8007230 <checkDemoModCalisma+0x1bd0>)
 800712c:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 800712e:	4b41      	ldr	r3, [pc, #260]	@ (8007234 <checkDemoModCalisma+0x1bd4>)
 8007130:	781a      	ldrb	r2, [r3, #0]
 8007132:	4b3f      	ldr	r3, [pc, #252]	@ (8007230 <checkDemoModCalisma+0x1bd0>)
 8007134:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8007136:	4b40      	ldr	r3, [pc, #256]	@ (8007238 <checkDemoModCalisma+0x1bd8>)
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 800713c:	4b35      	ldr	r3, [pc, #212]	@ (8007214 <checkDemoModCalisma+0x1bb4>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8007142:	4b3e      	ldr	r3, [pc, #248]	@ (800723c <checkDemoModCalisma+0x1bdc>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d156      	bne.n	80071f8 <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 800714a:	4a3d      	ldr	r2, [pc, #244]	@ (8007240 <checkDemoModCalisma+0x1be0>)
 800714c:	2101      	movs	r1, #1
 800714e:	2002      	movs	r0, #2
 8007150:	f002 feec 	bl	8009f2c <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8007154:	4a3b      	ldr	r2, [pc, #236]	@ (8007244 <checkDemoModCalisma+0x1be4>)
 8007156:	2101      	movs	r1, #1
 8007158:	2001      	movs	r0, #1
 800715a:	f002 fee7 	bl	8009f2c <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 800715e:	4b31      	ldr	r3, [pc, #196]	@ (8007224 <checkDemoModCalisma+0x1bc4>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	220a      	movs	r2, #10
 8007164:	4938      	ldr	r1, [pc, #224]	@ (8007248 <checkDemoModCalisma+0x1be8>)
 8007166:	4618      	mov	r0, r3
 8007168:	f007 fa36 	bl	800e5d8 <itoa>
					lcd_print(2,11,snum);
 800716c:	4a36      	ldr	r2, [pc, #216]	@ (8007248 <checkDemoModCalisma+0x1be8>)
 800716e:	210b      	movs	r1, #11
 8007170:	2002      	movs	r0, #2
 8007172:	f002 fedb 	bl	8009f2c <lcd_print>
					mesajYazildi=1;
 8007176:	4b35      	ldr	r3, [pc, #212]	@ (800724c <checkDemoModCalisma+0x1bec>)
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 800717c:	e03c      	b.n	80071f8 <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 800717e:	4b34      	ldr	r3, [pc, #208]	@ (8007250 <checkDemoModCalisma+0x1bf0>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d003      	beq.n	800718e <checkDemoModCalisma+0x1b2e>
 8007186:	4b2d      	ldr	r3, [pc, #180]	@ (800723c <checkDemoModCalisma+0x1bdc>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d134      	bne.n	80071f8 <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800718e:	2200      	movs	r2, #0
 8007190:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007194:	481e      	ldr	r0, [pc, #120]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 8007196:	f004 fa0a 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800719a:	2200      	movs	r2, #0
 800719c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80071a0:	481b      	ldr	r0, [pc, #108]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 80071a2:	f004 fa04 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80071a6:	2200      	movs	r2, #0
 80071a8:	2104      	movs	r1, #4
 80071aa:	4819      	ldr	r0, [pc, #100]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 80071ac:	f004 f9ff 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80071b0:	2200      	movs	r2, #0
 80071b2:	2102      	movs	r1, #2
 80071b4:	4816      	ldr	r0, [pc, #88]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 80071b6:	f004 f9fa 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80071ba:	2200      	movs	r2, #0
 80071bc:	2101      	movs	r1, #1
 80071be:	4814      	ldr	r0, [pc, #80]	@ (8007210 <checkDemoModCalisma+0x1bb0>)
 80071c0:	f004 f9f5 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80071c4:	2200      	movs	r2, #0
 80071c6:	2120      	movs	r1, #32
 80071c8:	480c      	ldr	r0, [pc, #48]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 80071ca:	f004 f9f0 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80071ce:	2200      	movs	r2, #0
 80071d0:	2110      	movs	r1, #16
 80071d2:	480a      	ldr	r0, [pc, #40]	@ (80071fc <checkDemoModCalisma+0x1b9c>)
 80071d4:	f004 f9eb 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	@ 0x80
 80071dc:	480e      	ldr	r0, [pc, #56]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80071de:	f004 f9e6 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2140      	movs	r1, #64	@ 0x40
 80071e6:	480c      	ldr	r0, [pc, #48]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80071e8:	f004 f9e1 	bl	800b5ae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80071ec:	2200      	movs	r2, #0
 80071ee:	2120      	movs	r1, #32
 80071f0:	4809      	ldr	r0, [pc, #36]	@ (8007218 <checkDemoModCalisma+0x1bb8>)
 80071f2:	f004 f9dc 	bl	800b5ae <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 80071f6:	e7ff      	b.n	80071f8 <checkDemoModCalisma+0x1b98>
 80071f8:	bf00      	nop
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40011000 	.word	0x40011000
 8007200:	20001115 	.word	0x20001115
 8007204:	20001113 	.word	0x20001113
 8007208:	20001114 	.word	0x20001114
 800720c:	20001116 	.word	0x20001116
 8007210:	40010c00 	.word	0x40010c00
 8007214:	200010fa 	.word	0x200010fa
 8007218:	40010800 	.word	0x40010800
 800721c:	20001094 	.word	0x20001094
 8007220:	200010a4 	.word	0x200010a4
 8007224:	200010b5 	.word	0x200010b5
 8007228:	200010b4 	.word	0x200010b4
 800722c:	200010b6 	.word	0x200010b6
 8007230:	20000fec 	.word	0x20000fec
 8007234:	200010b7 	.word	0x200010b7
 8007238:	200010e8 	.word	0x200010e8
 800723c:	200010d9 	.word	0x200010d9
 8007240:	0800f3ec 	.word	0x0800f3ec
 8007244:	0800f3f8 	.word	0x0800f3f8
 8007248:	2000105c 	.word	0x2000105c
 800724c:	200010f0 	.word	0x200010f0
 8007250:	200010da 	.word	0x200010da

08007254 <mainLoop>:

void mainLoop() {
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800725a:	f7fc fc85 	bl	8003b68 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800725e:	2101      	movs	r1, #1
 8007260:	489e      	ldr	r0, [pc, #632]	@ (80074dc <mainLoop+0x288>)
 8007262:	f004 f98d 	bl	800b580 <HAL_GPIO_ReadPin>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d136      	bne.n	80072da <mainLoop+0x86>
 800726c:	2108      	movs	r1, #8
 800726e:	489c      	ldr	r0, [pc, #624]	@ (80074e0 <mainLoop+0x28c>)
 8007270:	f004 f986 	bl	800b580 <HAL_GPIO_ReadPin>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d12f      	bne.n	80072da <mainLoop+0x86>
 800727a:	2102      	movs	r1, #2
 800727c:	4897      	ldr	r0, [pc, #604]	@ (80074dc <mainLoop+0x288>)
 800727e:	f004 f97f 	bl	800b580 <HAL_GPIO_ReadPin>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d128      	bne.n	80072da <mainLoop+0x86>
 8007288:	2104      	movs	r1, #4
 800728a:	4894      	ldr	r0, [pc, #592]	@ (80074dc <mainLoop+0x288>)
 800728c:	f004 f978 	bl	800b580 <HAL_GPIO_ReadPin>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d121      	bne.n	80072da <mainLoop+0x86>
 8007296:	2108      	movs	r1, #8
 8007298:	4890      	ldr	r0, [pc, #576]	@ (80074dc <mainLoop+0x288>)
 800729a:	f004 f971 	bl	800b580 <HAL_GPIO_ReadPin>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11a      	bne.n	80072da <mainLoop+0x86>
 80072a4:	2180      	movs	r1, #128	@ 0x80
 80072a6:	488e      	ldr	r0, [pc, #568]	@ (80074e0 <mainLoop+0x28c>)
 80072a8:	f004 f96a 	bl	800b580 <HAL_GPIO_ReadPin>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d113      	bne.n	80072da <mainLoop+0x86>
 80072b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072b6:	488a      	ldr	r0, [pc, #552]	@ (80074e0 <mainLoop+0x28c>)
 80072b8:	f004 f962 	bl	800b580 <HAL_GPIO_ReadPin>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10b      	bne.n	80072da <mainLoop+0x86>
 80072c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80072c6:	4886      	ldr	r0, [pc, #536]	@ (80074e0 <mainLoop+0x28c>)
 80072c8:	f004 f95a 	bl	800b580 <HAL_GPIO_ReadPin>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d103      	bne.n	80072da <mainLoop+0x86>
			butonKontrol=0;
 80072d2:	4b84      	ldr	r3, [pc, #528]	@ (80074e4 <mainLoop+0x290>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e003      	b.n	80072e2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80072da:	4b83      	ldr	r3, [pc, #524]	@ (80074e8 <mainLoop+0x294>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a83      	ldr	r2, [pc, #524]	@ (80074ec <mainLoop+0x298>)
 80072e0:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 80072e2:	f7fc fcf3 	bl	8003ccc <buttonCheck>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d103      	bne.n	80072f4 <mainLoop+0xa0>
			backLightTimer = millis;
 80072ec:	4b7e      	ldr	r3, [pc, #504]	@ (80074e8 <mainLoop+0x294>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a7e      	ldr	r2, [pc, #504]	@ (80074ec <mainLoop+0x298>)
 80072f2:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80072f4:	4b7e      	ldr	r3, [pc, #504]	@ (80074f0 <mainLoop+0x29c>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02c      	beq.n	8007356 <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80072fc:	bf00      	nop
 80072fe:	487d      	ldr	r0, [pc, #500]	@ (80074f4 <mainLoop+0x2a0>)
 8007300:	f004 ff67 	bl	800c1d2 <HAL_I2C_GetError>
 8007304:	4603      	mov	r3, r0
 8007306:	2b04      	cmp	r3, #4
 8007308:	d0f9      	beq.n	80072fe <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800730a:	bf00      	nop
 800730c:	4879      	ldr	r0, [pc, #484]	@ (80074f4 <mainLoop+0x2a0>)
 800730e:	f004 ff53 	bl	800c1b8 <HAL_I2C_GetState>
 8007312:	4603      	mov	r3, r0
 8007314:	2b20      	cmp	r3, #32
 8007316:	d1f9      	bne.n	800730c <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007318:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	236e      	movs	r3, #110	@ 0x6e
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	4b75      	ldr	r3, [pc, #468]	@ (80074f8 <mainLoop+0x2a4>)
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	236e      	movs	r3, #110	@ 0x6e
 8007328:	2200      	movs	r2, #0
 800732a:	21a0      	movs	r1, #160	@ 0xa0
 800732c:	4871      	ldr	r0, [pc, #452]	@ (80074f4 <mainLoop+0x2a0>)
 800732e:	f004 fbe1 	bl	800baf4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007332:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007336:	f003 fb53 	bl	800a9e0 <HAL_Delay>

		  hafizaYaz=0;
 800733a:	4b6d      	ldr	r3, [pc, #436]	@ (80074f0 <mainLoop+0x29c>)
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8007340:	4a6e      	ldr	r2, [pc, #440]	@ (80074fc <mainLoop+0x2a8>)
 8007342:	2101      	movs	r1, #1
 8007344:	2002      	movs	r0, #2
 8007346:	f002 fdf1 	bl	8009f2c <lcd_print>

		  HAL_Delay(1000);
 800734a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800734e:	f003 fb47 	bl	800a9e0 <HAL_Delay>
		  lcd_clear();
 8007352:	f002 fe17 	bl	8009f84 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007356:	4b6a      	ldr	r3, [pc, #424]	@ (8007500 <mainLoop+0x2ac>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f083 0301 	eor.w	r3, r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d043      	beq.n	80073ec <mainLoop+0x198>
 8007364:	4863      	ldr	r0, [pc, #396]	@ (80074f4 <mainLoop+0x2a0>)
 8007366:	f004 ff27 	bl	800c1b8 <HAL_I2C_GetState>
 800736a:	4603      	mov	r3, r0
 800736c:	2b20      	cmp	r3, #32
 800736e:	d13d      	bne.n	80073ec <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8007370:	4b64      	ldr	r3, [pc, #400]	@ (8007504 <mainLoop+0x2b0>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f083 0301 	eor.w	r3, r3, #1
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d028      	beq.n	80073d0 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 800737e:	4a62      	ldr	r2, [pc, #392]	@ (8007508 <mainLoop+0x2b4>)
 8007380:	2101      	movs	r1, #1
 8007382:	2001      	movs	r0, #1
 8007384:	f002 fdd2 	bl	8009f2c <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8007388:	4a60      	ldr	r2, [pc, #384]	@ (800750c <mainLoop+0x2b8>)
 800738a:	2101      	movs	r1, #1
 800738c:	2002      	movs	r0, #2
 800738e:	f002 fdcd 	bl	8009f2c <lcd_print>
			  HAL_Delay(1000);
 8007392:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007396:	f003 fb23 	bl	800a9e0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800739a:	bf00      	nop
 800739c:	4855      	ldr	r0, [pc, #340]	@ (80074f4 <mainLoop+0x2a0>)
 800739e:	f004 ff18 	bl	800c1d2 <HAL_I2C_GetError>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d0f9      	beq.n	800739c <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80073a8:	e003      	b.n	80073b2 <mainLoop+0x15e>
				  HAL_Delay(1000);
 80073aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80073ae:	f003 fb17 	bl	800a9e0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80073b2:	4850      	ldr	r0, [pc, #320]	@ (80074f4 <mainLoop+0x2a0>)
 80073b4:	f004 ff00 	bl	800c1b8 <HAL_I2C_GetState>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d1f5      	bne.n	80073aa <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80073be:	4a54      	ldr	r2, [pc, #336]	@ (8007510 <mainLoop+0x2bc>)
 80073c0:	2101      	movs	r1, #1
 80073c2:	2002      	movs	r0, #2
 80073c4:	f002 fdb2 	bl	8009f2c <lcd_print>

			  ilkOkuma=1;
 80073c8:	4b4e      	ldr	r3, [pc, #312]	@ (8007504 <mainLoop+0x2b0>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e006      	b.n	80073de <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 80073d0:	4a50      	ldr	r2, [pc, #320]	@ (8007514 <mainLoop+0x2c0>)
 80073d2:	2101      	movs	r1, #1
 80073d4:	2002      	movs	r0, #2
 80073d6:	f002 fda9 	bl	8009f2c <lcd_print>
			  lcd_clear();
 80073da:	f002 fdd3 	bl	8009f84 <lcd_clear>
		  }

		  lcd_clear();
 80073de:	f002 fdd1 	bl	8009f84 <lcd_clear>

		  eepromKontrol();
 80073e2:	f7f8 ff27 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80073e6:	4b46      	ldr	r3, [pc, #280]	@ (8007500 <mainLoop+0x2ac>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80073ec:	4b4a      	ldr	r3, [pc, #296]	@ (8007518 <mainLoop+0x2c4>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11c      	bne.n	800742e <mainLoop+0x1da>
 80073f4:	4b49      	ldr	r3, [pc, #292]	@ (800751c <mainLoop+0x2c8>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f083 0301 	eor.w	r3, r3, #1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d015      	beq.n	800742e <mainLoop+0x1da>
 8007402:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <mainLoop+0x2cc>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d111      	bne.n	800742e <mainLoop+0x1da>
			lcd_clear();
 800740a:	f002 fdbb 	bl	8009f84 <lcd_clear>
			HAL_Delay(10);
 800740e:	200a      	movs	r0, #10
 8007410:	f003 fae6 	bl	800a9e0 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8007414:	4a43      	ldr	r2, [pc, #268]	@ (8007524 <mainLoop+0x2d0>)
 8007416:	2101      	movs	r1, #1
 8007418:	2001      	movs	r0, #1
 800741a:	f002 fd87 	bl	8009f2c <lcd_print>
			lcd_print(2, 1, mainText2GN);
 800741e:	4a42      	ldr	r2, [pc, #264]	@ (8007528 <mainLoop+0x2d4>)
 8007420:	2101      	movs	r1, #1
 8007422:	2002      	movs	r0, #2
 8007424:	f002 fd82 	bl	8009f2c <lcd_print>
			mesajYazildi=1;
 8007428:	4b3c      	ldr	r3, [pc, #240]	@ (800751c <mainLoop+0x2c8>)
 800742a:	2201      	movs	r2, #1
 800742c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800742e:	4b3a      	ldr	r3, [pc, #232]	@ (8007518 <mainLoop+0x2c4>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d112      	bne.n	800745c <mainLoop+0x208>
 8007436:	2102      	movs	r1, #2
 8007438:	4828      	ldr	r0, [pc, #160]	@ (80074dc <mainLoop+0x288>)
 800743a:	f004 f8a1 	bl	800b580 <HAL_GPIO_ReadPin>
 800743e:	4603      	mov	r3, r0
 8007440:	2b01      	cmp	r3, #1
 8007442:	d10b      	bne.n	800745c <mainLoop+0x208>
 8007444:	2104      	movs	r1, #4
 8007446:	4825      	ldr	r0, [pc, #148]	@ (80074dc <mainLoop+0x288>)
 8007448:	f004 f89a 	bl	800b580 <HAL_GPIO_ReadPin>
 800744c:	4603      	mov	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d104      	bne.n	800745c <mainLoop+0x208>
			menuGiris=1;
 8007452:	4b31      	ldr	r3, [pc, #196]	@ (8007518 <mainLoop+0x2c4>)
 8007454:	2201      	movs	r2, #1
 8007456:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007458:	f002 fd94 	bl	8009f84 <lcd_clear>
		}

		if(menuGiris==1) {
 800745c:	4b2e      	ldr	r3, [pc, #184]	@ (8007518 <mainLoop+0x2c4>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <mainLoop+0x214>
			menu();
 8007464:	f7f9 fe7a 	bl	800115c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007468:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800746c:	481c      	ldr	r0, [pc, #112]	@ (80074e0 <mainLoop+0x28c>)
 800746e:	f004 f8b6 	bl	800b5de <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007472:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007476:	482d      	ldr	r0, [pc, #180]	@ (800752c <mainLoop+0x2d8>)
 8007478:	f004 f882 	bl	800b580 <HAL_GPIO_ReadPin>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <mainLoop+0x244>
 8007482:	4b2b      	ldr	r3, [pc, #172]	@ (8007530 <mainLoop+0x2dc>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f083 0301 	eor.w	r3, r3, #1
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <mainLoop+0x244>
			stopVar=1;
 8007490:	4b28      	ldr	r3, [pc, #160]	@ (8007534 <mainLoop+0x2e0>)
 8007492:	2201      	movs	r2, #1
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <mainLoop+0x24a>
		} else {
			stopVar=0;
 8007498:	4b26      	ldr	r3, [pc, #152]	@ (8007534 <mainLoop+0x2e0>)
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 800749e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80074a2:	4822      	ldr	r0, [pc, #136]	@ (800752c <mainLoop+0x2d8>)
 80074a4:	f004 f86c 	bl	800b580 <HAL_GPIO_ReadPin>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d107      	bne.n	80074be <mainLoop+0x26a>
 80074ae:	4b22      	ldr	r3, [pc, #136]	@ (8007538 <mainLoop+0x2e4>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <mainLoop+0x26a>
			EmnStopVar=1;
 80074b6:	4b21      	ldr	r3, [pc, #132]	@ (800753c <mainLoop+0x2e8>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e002      	b.n	80074c4 <mainLoop+0x270>
		} else {
			EmnStopVar=0;
 80074be:	4b1f      	ldr	r3, [pc, #124]	@ (800753c <mainLoop+0x2e8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80074c4:	f7fc fc36 	bl	8003d34 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80074c8:	f7fc fc68 	bl	8003d9c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80074cc:	f7fc fcac 	bl	8003e28 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80074d0:	f7fc fcfc 	bl	8003ecc <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80074d4:	f7fe f8c4 	bl	8005660 <checkDemoModCalisma>
		checkLCDBacklight();
 80074d8:	e6bf      	b.n	800725a <mainLoop+0x6>
 80074da:	bf00      	nop
 80074dc:	40010800 	.word	0x40010800
 80074e0:	40011000 	.word	0x40011000
 80074e4:	200010eb 	.word	0x200010eb
 80074e8:	20001094 	.word	0x20001094
 80074ec:	200010b0 	.word	0x200010b0
 80074f0:	200010e8 	.word	0x200010e8
 80074f4:	2000193c 	.word	0x2000193c
 80074f8:	20000fec 	.word	0x20000fec
 80074fc:	20001860 	.word	0x20001860
 8007500:	200010e9 	.word	0x200010e9
 8007504:	200010ea 	.word	0x200010ea
 8007508:	20000178 	.word	0x20000178
 800750c:	20001874 	.word	0x20001874
 8007510:	20001888 	.word	0x20001888
 8007514:	2000189c 	.word	0x2000189c
 8007518:	200010d9 	.word	0x200010d9
 800751c:	200010f0 	.word	0x200010f0
 8007520:	200010da 	.word	0x200010da
 8007524:	200000c4 	.word	0x200000c4
 8007528:	200000d8 	.word	0x200000d8
 800752c:	40010c00 	.word	0x40010c00
 8007530:	20001110 	.word	0x20001110
 8007534:	2000110d 	.word	0x2000110d
 8007538:	2000111f 	.word	0x2000111f
 800753c:	20001120 	.word	0x20001120

08007540 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8007540:	b5b0      	push	{r4, r5, r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 853d 	bne.w	8007fcc <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8007552:	4ac7      	ldr	r2, [pc, #796]	@ (8007870 <loadMenuTexts+0x330>)
 8007554:	4bc7      	ldr	r3, [pc, #796]	@ (8007874 <loadMenuTexts+0x334>)
 8007556:	4614      	mov	r4, r2
 8007558:	461d      	mov	r5, r3
 800755a:	6828      	ldr	r0, [r5, #0]
 800755c:	6869      	ldr	r1, [r5, #4]
 800755e:	68aa      	ldr	r2, [r5, #8]
 8007560:	68eb      	ldr	r3, [r5, #12]
 8007562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007564:	7c2b      	ldrb	r3, [r5, #16]
 8007566:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8007568:	4ac3      	ldr	r2, [pc, #780]	@ (8007878 <loadMenuTexts+0x338>)
 800756a:	4bc4      	ldr	r3, [pc, #784]	@ (800787c <loadMenuTexts+0x33c>)
 800756c:	4614      	mov	r4, r2
 800756e:	461d      	mov	r5, r3
 8007570:	6828      	ldr	r0, [r5, #0]
 8007572:	6869      	ldr	r1, [r5, #4]
 8007574:	68aa      	ldr	r2, [r5, #8]
 8007576:	68eb      	ldr	r3, [r5, #12]
 8007578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800757a:	7c2b      	ldrb	r3, [r5, #16]
 800757c:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 800757e:	4ac0      	ldr	r2, [pc, #768]	@ (8007880 <loadMenuTexts+0x340>)
 8007580:	4bc0      	ldr	r3, [pc, #768]	@ (8007884 <loadMenuTexts+0x344>)
 8007582:	4614      	mov	r4, r2
 8007584:	461d      	mov	r5, r3
 8007586:	6828      	ldr	r0, [r5, #0]
 8007588:	6869      	ldr	r1, [r5, #4]
 800758a:	68aa      	ldr	r2, [r5, #8]
 800758c:	68eb      	ldr	r3, [r5, #12]
 800758e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007590:	7c2b      	ldrb	r3, [r5, #16]
 8007592:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8007594:	4abc      	ldr	r2, [pc, #752]	@ (8007888 <loadMenuTexts+0x348>)
 8007596:	4bbd      	ldr	r3, [pc, #756]	@ (800788c <loadMenuTexts+0x34c>)
 8007598:	4614      	mov	r4, r2
 800759a:	461d      	mov	r5, r3
 800759c:	6828      	ldr	r0, [r5, #0]
 800759e:	6869      	ldr	r1, [r5, #4]
 80075a0:	68aa      	ldr	r2, [r5, #8]
 80075a2:	68eb      	ldr	r3, [r5, #12]
 80075a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a6:	7c2b      	ldrb	r3, [r5, #16]
 80075a8:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80075aa:	4ab9      	ldr	r2, [pc, #740]	@ (8007890 <loadMenuTexts+0x350>)
 80075ac:	4bb9      	ldr	r3, [pc, #740]	@ (8007894 <loadMenuTexts+0x354>)
 80075ae:	4614      	mov	r4, r2
 80075b0:	461d      	mov	r5, r3
 80075b2:	6828      	ldr	r0, [r5, #0]
 80075b4:	6869      	ldr	r1, [r5, #4]
 80075b6:	68aa      	ldr	r2, [r5, #8]
 80075b8:	68eb      	ldr	r3, [r5, #12]
 80075ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075bc:	7c2b      	ldrb	r3, [r5, #16]
 80075be:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80075c0:	4ab5      	ldr	r2, [pc, #724]	@ (8007898 <loadMenuTexts+0x358>)
 80075c2:	4bb6      	ldr	r3, [pc, #728]	@ (800789c <loadMenuTexts+0x35c>)
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	6828      	ldr	r0, [r5, #0]
 80075ca:	6869      	ldr	r1, [r5, #4]
 80075cc:	68aa      	ldr	r2, [r5, #8]
 80075ce:	68eb      	ldr	r3, [r5, #12]
 80075d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d2:	7c2b      	ldrb	r3, [r5, #16]
 80075d4:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80075d6:	4ab2      	ldr	r2, [pc, #712]	@ (80078a0 <loadMenuTexts+0x360>)
 80075d8:	4bb2      	ldr	r3, [pc, #712]	@ (80078a4 <loadMenuTexts+0x364>)
 80075da:	4614      	mov	r4, r2
 80075dc:	461d      	mov	r5, r3
 80075de:	6828      	ldr	r0, [r5, #0]
 80075e0:	6869      	ldr	r1, [r5, #4]
 80075e2:	68aa      	ldr	r2, [r5, #8]
 80075e4:	68eb      	ldr	r3, [r5, #12]
 80075e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e8:	7c2b      	ldrb	r3, [r5, #16]
 80075ea:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80075ec:	4aae      	ldr	r2, [pc, #696]	@ (80078a8 <loadMenuTexts+0x368>)
 80075ee:	4baf      	ldr	r3, [pc, #700]	@ (80078ac <loadMenuTexts+0x36c>)
 80075f0:	4614      	mov	r4, r2
 80075f2:	461d      	mov	r5, r3
 80075f4:	6828      	ldr	r0, [r5, #0]
 80075f6:	6869      	ldr	r1, [r5, #4]
 80075f8:	68aa      	ldr	r2, [r5, #8]
 80075fa:	68eb      	ldr	r3, [r5, #12]
 80075fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075fe:	7c2b      	ldrb	r3, [r5, #16]
 8007600:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8007602:	4aab      	ldr	r2, [pc, #684]	@ (80078b0 <loadMenuTexts+0x370>)
 8007604:	4bab      	ldr	r3, [pc, #684]	@ (80078b4 <loadMenuTexts+0x374>)
 8007606:	4614      	mov	r4, r2
 8007608:	461d      	mov	r5, r3
 800760a:	6828      	ldr	r0, [r5, #0]
 800760c:	6869      	ldr	r1, [r5, #4]
 800760e:	68aa      	ldr	r2, [r5, #8]
 8007610:	68eb      	ldr	r3, [r5, #12]
 8007612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007614:	7c2b      	ldrb	r3, [r5, #16]
 8007616:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007618:	4aa7      	ldr	r2, [pc, #668]	@ (80078b8 <loadMenuTexts+0x378>)
 800761a:	4ba8      	ldr	r3, [pc, #672]	@ (80078bc <loadMenuTexts+0x37c>)
 800761c:	4614      	mov	r4, r2
 800761e:	461d      	mov	r5, r3
 8007620:	6828      	ldr	r0, [r5, #0]
 8007622:	6869      	ldr	r1, [r5, #4]
 8007624:	68aa      	ldr	r2, [r5, #8]
 8007626:	68eb      	ldr	r3, [r5, #12]
 8007628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800762a:	7c2b      	ldrb	r3, [r5, #16]
 800762c:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800762e:	4aa4      	ldr	r2, [pc, #656]	@ (80078c0 <loadMenuTexts+0x380>)
 8007630:	4ba4      	ldr	r3, [pc, #656]	@ (80078c4 <loadMenuTexts+0x384>)
 8007632:	4614      	mov	r4, r2
 8007634:	461d      	mov	r5, r3
 8007636:	6828      	ldr	r0, [r5, #0]
 8007638:	6869      	ldr	r1, [r5, #4]
 800763a:	68aa      	ldr	r2, [r5, #8]
 800763c:	68eb      	ldr	r3, [r5, #12]
 800763e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007640:	7c2b      	ldrb	r3, [r5, #16]
 8007642:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8007644:	4aa0      	ldr	r2, [pc, #640]	@ (80078c8 <loadMenuTexts+0x388>)
 8007646:	4ba1      	ldr	r3, [pc, #644]	@ (80078cc <loadMenuTexts+0x38c>)
 8007648:	4614      	mov	r4, r2
 800764a:	461d      	mov	r5, r3
 800764c:	6828      	ldr	r0, [r5, #0]
 800764e:	6869      	ldr	r1, [r5, #4]
 8007650:	68aa      	ldr	r2, [r5, #8]
 8007652:	68eb      	ldr	r3, [r5, #12]
 8007654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007656:	7c2b      	ldrb	r3, [r5, #16]
 8007658:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 800765a:	4a9d      	ldr	r2, [pc, #628]	@ (80078d0 <loadMenuTexts+0x390>)
 800765c:	4b9d      	ldr	r3, [pc, #628]	@ (80078d4 <loadMenuTexts+0x394>)
 800765e:	4614      	mov	r4, r2
 8007660:	461d      	mov	r5, r3
 8007662:	6828      	ldr	r0, [r5, #0]
 8007664:	6869      	ldr	r1, [r5, #4]
 8007666:	68aa      	ldr	r2, [r5, #8]
 8007668:	68eb      	ldr	r3, [r5, #12]
 800766a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800766c:	7c2b      	ldrb	r3, [r5, #16]
 800766e:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8007670:	4a99      	ldr	r2, [pc, #612]	@ (80078d8 <loadMenuTexts+0x398>)
 8007672:	4b9a      	ldr	r3, [pc, #616]	@ (80078dc <loadMenuTexts+0x39c>)
 8007674:	4614      	mov	r4, r2
 8007676:	461d      	mov	r5, r3
 8007678:	6828      	ldr	r0, [r5, #0]
 800767a:	6869      	ldr	r1, [r5, #4]
 800767c:	68aa      	ldr	r2, [r5, #8]
 800767e:	68eb      	ldr	r3, [r5, #12]
 8007680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007682:	7c2b      	ldrb	r3, [r5, #16]
 8007684:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8007686:	4a96      	ldr	r2, [pc, #600]	@ (80078e0 <loadMenuTexts+0x3a0>)
 8007688:	4b96      	ldr	r3, [pc, #600]	@ (80078e4 <loadMenuTexts+0x3a4>)
 800768a:	4614      	mov	r4, r2
 800768c:	461d      	mov	r5, r3
 800768e:	6828      	ldr	r0, [r5, #0]
 8007690:	6869      	ldr	r1, [r5, #4]
 8007692:	68aa      	ldr	r2, [r5, #8]
 8007694:	68eb      	ldr	r3, [r5, #12]
 8007696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007698:	7c2b      	ldrb	r3, [r5, #16]
 800769a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 800769c:	4a92      	ldr	r2, [pc, #584]	@ (80078e8 <loadMenuTexts+0x3a8>)
 800769e:	4b93      	ldr	r3, [pc, #588]	@ (80078ec <loadMenuTexts+0x3ac>)
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	6828      	ldr	r0, [r5, #0]
 80076a6:	6869      	ldr	r1, [r5, #4]
 80076a8:	68aa      	ldr	r2, [r5, #8]
 80076aa:	68eb      	ldr	r3, [r5, #12]
 80076ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ae:	7c2b      	ldrb	r3, [r5, #16]
 80076b0:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80076b2:	4a8f      	ldr	r2, [pc, #572]	@ (80078f0 <loadMenuTexts+0x3b0>)
 80076b4:	4b8f      	ldr	r3, [pc, #572]	@ (80078f4 <loadMenuTexts+0x3b4>)
 80076b6:	4614      	mov	r4, r2
 80076b8:	461d      	mov	r5, r3
 80076ba:	6828      	ldr	r0, [r5, #0]
 80076bc:	6869      	ldr	r1, [r5, #4]
 80076be:	68aa      	ldr	r2, [r5, #8]
 80076c0:	68eb      	ldr	r3, [r5, #12]
 80076c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076c4:	7c2b      	ldrb	r3, [r5, #16]
 80076c6:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80076c8:	4a8b      	ldr	r2, [pc, #556]	@ (80078f8 <loadMenuTexts+0x3b8>)
 80076ca:	4b8c      	ldr	r3, [pc, #560]	@ (80078fc <loadMenuTexts+0x3bc>)
 80076cc:	4614      	mov	r4, r2
 80076ce:	461d      	mov	r5, r3
 80076d0:	6828      	ldr	r0, [r5, #0]
 80076d2:	6869      	ldr	r1, [r5, #4]
 80076d4:	68aa      	ldr	r2, [r5, #8]
 80076d6:	68eb      	ldr	r3, [r5, #12]
 80076d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076da:	7c2b      	ldrb	r3, [r5, #16]
 80076dc:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80076de:	4a88      	ldr	r2, [pc, #544]	@ (8007900 <loadMenuTexts+0x3c0>)
 80076e0:	4b88      	ldr	r3, [pc, #544]	@ (8007904 <loadMenuTexts+0x3c4>)
 80076e2:	4614      	mov	r4, r2
 80076e4:	461d      	mov	r5, r3
 80076e6:	6828      	ldr	r0, [r5, #0]
 80076e8:	6869      	ldr	r1, [r5, #4]
 80076ea:	68aa      	ldr	r2, [r5, #8]
 80076ec:	68eb      	ldr	r3, [r5, #12]
 80076ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f0:	7c2b      	ldrb	r3, [r5, #16]
 80076f2:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80076f4:	4a84      	ldr	r2, [pc, #528]	@ (8007908 <loadMenuTexts+0x3c8>)
 80076f6:	4b85      	ldr	r3, [pc, #532]	@ (800790c <loadMenuTexts+0x3cc>)
 80076f8:	4614      	mov	r4, r2
 80076fa:	461d      	mov	r5, r3
 80076fc:	6828      	ldr	r0, [r5, #0]
 80076fe:	6869      	ldr	r1, [r5, #4]
 8007700:	68aa      	ldr	r2, [r5, #8]
 8007702:	68eb      	ldr	r3, [r5, #12]
 8007704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007706:	7c2b      	ldrb	r3, [r5, #16]
 8007708:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800770a:	4a81      	ldr	r2, [pc, #516]	@ (8007910 <loadMenuTexts+0x3d0>)
 800770c:	4b81      	ldr	r3, [pc, #516]	@ (8007914 <loadMenuTexts+0x3d4>)
 800770e:	4614      	mov	r4, r2
 8007710:	461d      	mov	r5, r3
 8007712:	6828      	ldr	r0, [r5, #0]
 8007714:	6869      	ldr	r1, [r5, #4]
 8007716:	68aa      	ldr	r2, [r5, #8]
 8007718:	68eb      	ldr	r3, [r5, #12]
 800771a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771c:	7c2b      	ldrb	r3, [r5, #16]
 800771e:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8007720:	4a7d      	ldr	r2, [pc, #500]	@ (8007918 <loadMenuTexts+0x3d8>)
 8007722:	4b7e      	ldr	r3, [pc, #504]	@ (800791c <loadMenuTexts+0x3dc>)
 8007724:	4614      	mov	r4, r2
 8007726:	461d      	mov	r5, r3
 8007728:	6828      	ldr	r0, [r5, #0]
 800772a:	6869      	ldr	r1, [r5, #4]
 800772c:	68aa      	ldr	r2, [r5, #8]
 800772e:	68eb      	ldr	r3, [r5, #12]
 8007730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007732:	7c2b      	ldrb	r3, [r5, #16]
 8007734:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8007736:	4a7a      	ldr	r2, [pc, #488]	@ (8007920 <loadMenuTexts+0x3e0>)
 8007738:	4b7a      	ldr	r3, [pc, #488]	@ (8007924 <loadMenuTexts+0x3e4>)
 800773a:	4614      	mov	r4, r2
 800773c:	461d      	mov	r5, r3
 800773e:	6828      	ldr	r0, [r5, #0]
 8007740:	6869      	ldr	r1, [r5, #4]
 8007742:	68aa      	ldr	r2, [r5, #8]
 8007744:	68eb      	ldr	r3, [r5, #12]
 8007746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007748:	7c2b      	ldrb	r3, [r5, #16]
 800774a:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 800774c:	4a76      	ldr	r2, [pc, #472]	@ (8007928 <loadMenuTexts+0x3e8>)
 800774e:	4b77      	ldr	r3, [pc, #476]	@ (800792c <loadMenuTexts+0x3ec>)
 8007750:	4614      	mov	r4, r2
 8007752:	461d      	mov	r5, r3
 8007754:	6828      	ldr	r0, [r5, #0]
 8007756:	6869      	ldr	r1, [r5, #4]
 8007758:	68aa      	ldr	r2, [r5, #8]
 800775a:	68eb      	ldr	r3, [r5, #12]
 800775c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800775e:	7c2b      	ldrb	r3, [r5, #16]
 8007760:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8007762:	4a73      	ldr	r2, [pc, #460]	@ (8007930 <loadMenuTexts+0x3f0>)
 8007764:	4b73      	ldr	r3, [pc, #460]	@ (8007934 <loadMenuTexts+0x3f4>)
 8007766:	4614      	mov	r4, r2
 8007768:	461d      	mov	r5, r3
 800776a:	6828      	ldr	r0, [r5, #0]
 800776c:	6869      	ldr	r1, [r5, #4]
 800776e:	68aa      	ldr	r2, [r5, #8]
 8007770:	68eb      	ldr	r3, [r5, #12]
 8007772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007774:	7c2b      	ldrb	r3, [r5, #16]
 8007776:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8007778:	4a6f      	ldr	r2, [pc, #444]	@ (8007938 <loadMenuTexts+0x3f8>)
 800777a:	4b70      	ldr	r3, [pc, #448]	@ (800793c <loadMenuTexts+0x3fc>)
 800777c:	4614      	mov	r4, r2
 800777e:	461d      	mov	r5, r3
 8007780:	6828      	ldr	r0, [r5, #0]
 8007782:	6869      	ldr	r1, [r5, #4]
 8007784:	68aa      	ldr	r2, [r5, #8]
 8007786:	68eb      	ldr	r3, [r5, #12]
 8007788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800778a:	7c2b      	ldrb	r3, [r5, #16]
 800778c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800778e:	4a6c      	ldr	r2, [pc, #432]	@ (8007940 <loadMenuTexts+0x400>)
 8007790:	4b6c      	ldr	r3, [pc, #432]	@ (8007944 <loadMenuTexts+0x404>)
 8007792:	4614      	mov	r4, r2
 8007794:	461d      	mov	r5, r3
 8007796:	6828      	ldr	r0, [r5, #0]
 8007798:	6869      	ldr	r1, [r5, #4]
 800779a:	68aa      	ldr	r2, [r5, #8]
 800779c:	68eb      	ldr	r3, [r5, #12]
 800779e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077a0:	7c2b      	ldrb	r3, [r5, #16]
 80077a2:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80077a4:	4a68      	ldr	r2, [pc, #416]	@ (8007948 <loadMenuTexts+0x408>)
 80077a6:	4b69      	ldr	r3, [pc, #420]	@ (800794c <loadMenuTexts+0x40c>)
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	6828      	ldr	r0, [r5, #0]
 80077ae:	6869      	ldr	r1, [r5, #4]
 80077b0:	68aa      	ldr	r2, [r5, #8]
 80077b2:	68eb      	ldr	r3, [r5, #12]
 80077b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077b6:	7c2b      	ldrb	r3, [r5, #16]
 80077b8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80077ba:	4a65      	ldr	r2, [pc, #404]	@ (8007950 <loadMenuTexts+0x410>)
 80077bc:	4b65      	ldr	r3, [pc, #404]	@ (8007954 <loadMenuTexts+0x414>)
 80077be:	4614      	mov	r4, r2
 80077c0:	461d      	mov	r5, r3
 80077c2:	6828      	ldr	r0, [r5, #0]
 80077c4:	6869      	ldr	r1, [r5, #4]
 80077c6:	68aa      	ldr	r2, [r5, #8]
 80077c8:	68eb      	ldr	r3, [r5, #12]
 80077ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077cc:	7c2b      	ldrb	r3, [r5, #16]
 80077ce:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80077d0:	4a61      	ldr	r2, [pc, #388]	@ (8007958 <loadMenuTexts+0x418>)
 80077d2:	4b62      	ldr	r3, [pc, #392]	@ (800795c <loadMenuTexts+0x41c>)
 80077d4:	4614      	mov	r4, r2
 80077d6:	461d      	mov	r5, r3
 80077d8:	6828      	ldr	r0, [r5, #0]
 80077da:	6869      	ldr	r1, [r5, #4]
 80077dc:	68aa      	ldr	r2, [r5, #8]
 80077de:	68eb      	ldr	r3, [r5, #12]
 80077e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e2:	7c2b      	ldrb	r3, [r5, #16]
 80077e4:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80077e6:	4a5e      	ldr	r2, [pc, #376]	@ (8007960 <loadMenuTexts+0x420>)
 80077e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007964 <loadMenuTexts+0x424>)
 80077ea:	4614      	mov	r4, r2
 80077ec:	461d      	mov	r5, r3
 80077ee:	6828      	ldr	r0, [r5, #0]
 80077f0:	6869      	ldr	r1, [r5, #4]
 80077f2:	68aa      	ldr	r2, [r5, #8]
 80077f4:	68eb      	ldr	r3, [r5, #12]
 80077f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077f8:	7c2b      	ldrb	r3, [r5, #16]
 80077fa:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80077fc:	4a5a      	ldr	r2, [pc, #360]	@ (8007968 <loadMenuTexts+0x428>)
 80077fe:	4b5b      	ldr	r3, [pc, #364]	@ (800796c <loadMenuTexts+0x42c>)
 8007800:	4614      	mov	r4, r2
 8007802:	461d      	mov	r5, r3
 8007804:	6828      	ldr	r0, [r5, #0]
 8007806:	6869      	ldr	r1, [r5, #4]
 8007808:	68aa      	ldr	r2, [r5, #8]
 800780a:	68eb      	ldr	r3, [r5, #12]
 800780c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800780e:	7c2b      	ldrb	r3, [r5, #16]
 8007810:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8007812:	4a57      	ldr	r2, [pc, #348]	@ (8007970 <loadMenuTexts+0x430>)
 8007814:	4b57      	ldr	r3, [pc, #348]	@ (8007974 <loadMenuTexts+0x434>)
 8007816:	4614      	mov	r4, r2
 8007818:	461d      	mov	r5, r3
 800781a:	6828      	ldr	r0, [r5, #0]
 800781c:	6869      	ldr	r1, [r5, #4]
 800781e:	68aa      	ldr	r2, [r5, #8]
 8007820:	68eb      	ldr	r3, [r5, #12]
 8007822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007824:	7c2b      	ldrb	r3, [r5, #16]
 8007826:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8007828:	4a53      	ldr	r2, [pc, #332]	@ (8007978 <loadMenuTexts+0x438>)
 800782a:	4b54      	ldr	r3, [pc, #336]	@ (800797c <loadMenuTexts+0x43c>)
 800782c:	4614      	mov	r4, r2
 800782e:	461d      	mov	r5, r3
 8007830:	6828      	ldr	r0, [r5, #0]
 8007832:	6869      	ldr	r1, [r5, #4]
 8007834:	68aa      	ldr	r2, [r5, #8]
 8007836:	68eb      	ldr	r3, [r5, #12]
 8007838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783a:	7c2b      	ldrb	r3, [r5, #16]
 800783c:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800783e:	4a50      	ldr	r2, [pc, #320]	@ (8007980 <loadMenuTexts+0x440>)
 8007840:	4b50      	ldr	r3, [pc, #320]	@ (8007984 <loadMenuTexts+0x444>)
 8007842:	4614      	mov	r4, r2
 8007844:	461d      	mov	r5, r3
 8007846:	6828      	ldr	r0, [r5, #0]
 8007848:	6869      	ldr	r1, [r5, #4]
 800784a:	68aa      	ldr	r2, [r5, #8]
 800784c:	68eb      	ldr	r3, [r5, #12]
 800784e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007850:	7c2b      	ldrb	r3, [r5, #16]
 8007852:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8007854:	4a4c      	ldr	r2, [pc, #304]	@ (8007988 <loadMenuTexts+0x448>)
 8007856:	4b4d      	ldr	r3, [pc, #308]	@ (800798c <loadMenuTexts+0x44c>)
 8007858:	4614      	mov	r4, r2
 800785a:	461d      	mov	r5, r3
 800785c:	6828      	ldr	r0, [r5, #0]
 800785e:	6869      	ldr	r1, [r5, #4]
 8007860:	68aa      	ldr	r2, [r5, #8]
 8007862:	68eb      	ldr	r3, [r5, #12]
 8007864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007866:	7c2b      	ldrb	r3, [r5, #16]
 8007868:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800786a:	4a49      	ldr	r2, [pc, #292]	@ (8007990 <loadMenuTexts+0x450>)
 800786c:	e092      	b.n	8007994 <loadMenuTexts+0x454>
 800786e:	bf00      	nop
 8007870:	20001220 	.word	0x20001220
 8007874:	2000018c 	.word	0x2000018c
 8007878:	20001234 	.word	0x20001234
 800787c:	200001a0 	.word	0x200001a0
 8007880:	20001248 	.word	0x20001248
 8007884:	200001b4 	.word	0x200001b4
 8007888:	2000125c 	.word	0x2000125c
 800788c:	200001c8 	.word	0x200001c8
 8007890:	20001270 	.word	0x20001270
 8007894:	200001dc 	.word	0x200001dc
 8007898:	20001284 	.word	0x20001284
 800789c:	200001f0 	.word	0x200001f0
 80078a0:	20001298 	.word	0x20001298
 80078a4:	20000204 	.word	0x20000204
 80078a8:	200012ac 	.word	0x200012ac
 80078ac:	20000218 	.word	0x20000218
 80078b0:	200012c0 	.word	0x200012c0
 80078b4:	2000022c 	.word	0x2000022c
 80078b8:	200012d4 	.word	0x200012d4
 80078bc:	20000240 	.word	0x20000240
 80078c0:	200012e8 	.word	0x200012e8
 80078c4:	20000254 	.word	0x20000254
 80078c8:	200012fc 	.word	0x200012fc
 80078cc:	20000268 	.word	0x20000268
 80078d0:	20001310 	.word	0x20001310
 80078d4:	2000027c 	.word	0x2000027c
 80078d8:	20001324 	.word	0x20001324
 80078dc:	20000290 	.word	0x20000290
 80078e0:	20001338 	.word	0x20001338
 80078e4:	200002a4 	.word	0x200002a4
 80078e8:	2000134c 	.word	0x2000134c
 80078ec:	200002b8 	.word	0x200002b8
 80078f0:	20001360 	.word	0x20001360
 80078f4:	200002cc 	.word	0x200002cc
 80078f8:	20001374 	.word	0x20001374
 80078fc:	200002e0 	.word	0x200002e0
 8007900:	20001388 	.word	0x20001388
 8007904:	200002f4 	.word	0x200002f4
 8007908:	2000139c 	.word	0x2000139c
 800790c:	20000308 	.word	0x20000308
 8007910:	200013b0 	.word	0x200013b0
 8007914:	2000031c 	.word	0x2000031c
 8007918:	200013c4 	.word	0x200013c4
 800791c:	20000330 	.word	0x20000330
 8007920:	200013d8 	.word	0x200013d8
 8007924:	20000344 	.word	0x20000344
 8007928:	200013ec 	.word	0x200013ec
 800792c:	20000358 	.word	0x20000358
 8007930:	20001400 	.word	0x20001400
 8007934:	2000036c 	.word	0x2000036c
 8007938:	20001414 	.word	0x20001414
 800793c:	20000380 	.word	0x20000380
 8007940:	20001428 	.word	0x20001428
 8007944:	20000394 	.word	0x20000394
 8007948:	2000143c 	.word	0x2000143c
 800794c:	200003a8 	.word	0x200003a8
 8007950:	20001450 	.word	0x20001450
 8007954:	200003bc 	.word	0x200003bc
 8007958:	20001464 	.word	0x20001464
 800795c:	200003d0 	.word	0x200003d0
 8007960:	20001478 	.word	0x20001478
 8007964:	200003e4 	.word	0x200003e4
 8007968:	2000148c 	.word	0x2000148c
 800796c:	200003f8 	.word	0x200003f8
 8007970:	200014a0 	.word	0x200014a0
 8007974:	2000040c 	.word	0x2000040c
 8007978:	200014b4 	.word	0x200014b4
 800797c:	20000420 	.word	0x20000420
 8007980:	200014c8 	.word	0x200014c8
 8007984:	20000434 	.word	0x20000434
 8007988:	200014dc 	.word	0x200014dc
 800798c:	20000448 	.word	0x20000448
 8007990:	200014f0 	.word	0x200014f0
 8007994:	4bc7      	ldr	r3, [pc, #796]	@ (8007cb4 <loadMenuTexts+0x774>)
 8007996:	4614      	mov	r4, r2
 8007998:	461d      	mov	r5, r3
 800799a:	6828      	ldr	r0, [r5, #0]
 800799c:	6869      	ldr	r1, [r5, #4]
 800799e:	68aa      	ldr	r2, [r5, #8]
 80079a0:	68eb      	ldr	r3, [r5, #12]
 80079a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a4:	7c2b      	ldrb	r3, [r5, #16]
 80079a6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80079a8:	4ac3      	ldr	r2, [pc, #780]	@ (8007cb8 <loadMenuTexts+0x778>)
 80079aa:	4bc4      	ldr	r3, [pc, #784]	@ (8007cbc <loadMenuTexts+0x77c>)
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	6828      	ldr	r0, [r5, #0]
 80079b2:	6869      	ldr	r1, [r5, #4]
 80079b4:	68aa      	ldr	r2, [r5, #8]
 80079b6:	68eb      	ldr	r3, [r5, #12]
 80079b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ba:	7c2b      	ldrb	r3, [r5, #16]
 80079bc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80079be:	4ac0      	ldr	r2, [pc, #768]	@ (8007cc0 <loadMenuTexts+0x780>)
 80079c0:	4bc0      	ldr	r3, [pc, #768]	@ (8007cc4 <loadMenuTexts+0x784>)
 80079c2:	4614      	mov	r4, r2
 80079c4:	461d      	mov	r5, r3
 80079c6:	6828      	ldr	r0, [r5, #0]
 80079c8:	6869      	ldr	r1, [r5, #4]
 80079ca:	68aa      	ldr	r2, [r5, #8]
 80079cc:	68eb      	ldr	r3, [r5, #12]
 80079ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d0:	7c2b      	ldrb	r3, [r5, #16]
 80079d2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80079d4:	4abc      	ldr	r2, [pc, #752]	@ (8007cc8 <loadMenuTexts+0x788>)
 80079d6:	4bbd      	ldr	r3, [pc, #756]	@ (8007ccc <loadMenuTexts+0x78c>)
 80079d8:	4614      	mov	r4, r2
 80079da:	461d      	mov	r5, r3
 80079dc:	6828      	ldr	r0, [r5, #0]
 80079de:	6869      	ldr	r1, [r5, #4]
 80079e0:	68aa      	ldr	r2, [r5, #8]
 80079e2:	68eb      	ldr	r3, [r5, #12]
 80079e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e6:	7c2b      	ldrb	r3, [r5, #16]
 80079e8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80079ea:	4ab9      	ldr	r2, [pc, #740]	@ (8007cd0 <loadMenuTexts+0x790>)
 80079ec:	4bb9      	ldr	r3, [pc, #740]	@ (8007cd4 <loadMenuTexts+0x794>)
 80079ee:	4614      	mov	r4, r2
 80079f0:	461d      	mov	r5, r3
 80079f2:	6828      	ldr	r0, [r5, #0]
 80079f4:	6869      	ldr	r1, [r5, #4]
 80079f6:	68aa      	ldr	r2, [r5, #8]
 80079f8:	68eb      	ldr	r3, [r5, #12]
 80079fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fc:	7c2b      	ldrb	r3, [r5, #16]
 80079fe:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007a00:	4ab5      	ldr	r2, [pc, #724]	@ (8007cd8 <loadMenuTexts+0x798>)
 8007a02:	4bb6      	ldr	r3, [pc, #728]	@ (8007cdc <loadMenuTexts+0x79c>)
 8007a04:	4614      	mov	r4, r2
 8007a06:	461d      	mov	r5, r3
 8007a08:	6828      	ldr	r0, [r5, #0]
 8007a0a:	6869      	ldr	r1, [r5, #4]
 8007a0c:	68aa      	ldr	r2, [r5, #8]
 8007a0e:	68eb      	ldr	r3, [r5, #12]
 8007a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a12:	7c2b      	ldrb	r3, [r5, #16]
 8007a14:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8007a16:	4ab2      	ldr	r2, [pc, #712]	@ (8007ce0 <loadMenuTexts+0x7a0>)
 8007a18:	4bb2      	ldr	r3, [pc, #712]	@ (8007ce4 <loadMenuTexts+0x7a4>)
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	461d      	mov	r5, r3
 8007a1e:	6828      	ldr	r0, [r5, #0]
 8007a20:	6869      	ldr	r1, [r5, #4]
 8007a22:	68aa      	ldr	r2, [r5, #8]
 8007a24:	68eb      	ldr	r3, [r5, #12]
 8007a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a28:	7c2b      	ldrb	r3, [r5, #16]
 8007a2a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007a2c:	4aae      	ldr	r2, [pc, #696]	@ (8007ce8 <loadMenuTexts+0x7a8>)
 8007a2e:	4baf      	ldr	r3, [pc, #700]	@ (8007cec <loadMenuTexts+0x7ac>)
 8007a30:	4614      	mov	r4, r2
 8007a32:	461d      	mov	r5, r3
 8007a34:	6828      	ldr	r0, [r5, #0]
 8007a36:	6869      	ldr	r1, [r5, #4]
 8007a38:	68aa      	ldr	r2, [r5, #8]
 8007a3a:	68eb      	ldr	r3, [r5, #12]
 8007a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a3e:	7c2b      	ldrb	r3, [r5, #16]
 8007a40:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8007a42:	4aab      	ldr	r2, [pc, #684]	@ (8007cf0 <loadMenuTexts+0x7b0>)
 8007a44:	4bab      	ldr	r3, [pc, #684]	@ (8007cf4 <loadMenuTexts+0x7b4>)
 8007a46:	4614      	mov	r4, r2
 8007a48:	461d      	mov	r5, r3
 8007a4a:	6828      	ldr	r0, [r5, #0]
 8007a4c:	6869      	ldr	r1, [r5, #4]
 8007a4e:	68aa      	ldr	r2, [r5, #8]
 8007a50:	68eb      	ldr	r3, [r5, #12]
 8007a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a54:	7c2b      	ldrb	r3, [r5, #16]
 8007a56:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8007a58:	4aa7      	ldr	r2, [pc, #668]	@ (8007cf8 <loadMenuTexts+0x7b8>)
 8007a5a:	4ba8      	ldr	r3, [pc, #672]	@ (8007cfc <loadMenuTexts+0x7bc>)
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	461d      	mov	r5, r3
 8007a60:	6828      	ldr	r0, [r5, #0]
 8007a62:	6869      	ldr	r1, [r5, #4]
 8007a64:	68aa      	ldr	r2, [r5, #8]
 8007a66:	68eb      	ldr	r3, [r5, #12]
 8007a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a6a:	7c2b      	ldrb	r3, [r5, #16]
 8007a6c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8007a6e:	4aa4      	ldr	r2, [pc, #656]	@ (8007d00 <loadMenuTexts+0x7c0>)
 8007a70:	4ba4      	ldr	r3, [pc, #656]	@ (8007d04 <loadMenuTexts+0x7c4>)
 8007a72:	4614      	mov	r4, r2
 8007a74:	461d      	mov	r5, r3
 8007a76:	6828      	ldr	r0, [r5, #0]
 8007a78:	6869      	ldr	r1, [r5, #4]
 8007a7a:	68aa      	ldr	r2, [r5, #8]
 8007a7c:	68eb      	ldr	r3, [r5, #12]
 8007a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a80:	7c2b      	ldrb	r3, [r5, #16]
 8007a82:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8007a84:	4aa0      	ldr	r2, [pc, #640]	@ (8007d08 <loadMenuTexts+0x7c8>)
 8007a86:	4ba1      	ldr	r3, [pc, #644]	@ (8007d0c <loadMenuTexts+0x7cc>)
 8007a88:	4614      	mov	r4, r2
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	6828      	ldr	r0, [r5, #0]
 8007a8e:	6869      	ldr	r1, [r5, #4]
 8007a90:	68aa      	ldr	r2, [r5, #8]
 8007a92:	68eb      	ldr	r3, [r5, #12]
 8007a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a96:	7c2b      	ldrb	r3, [r5, #16]
 8007a98:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8007a9a:	4a9d      	ldr	r2, [pc, #628]	@ (8007d10 <loadMenuTexts+0x7d0>)
 8007a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8007d14 <loadMenuTexts+0x7d4>)
 8007a9e:	4614      	mov	r4, r2
 8007aa0:	461d      	mov	r5, r3
 8007aa2:	6828      	ldr	r0, [r5, #0]
 8007aa4:	6869      	ldr	r1, [r5, #4]
 8007aa6:	68aa      	ldr	r2, [r5, #8]
 8007aa8:	68eb      	ldr	r3, [r5, #12]
 8007aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aac:	7c2b      	ldrb	r3, [r5, #16]
 8007aae:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8007ab0:	4a99      	ldr	r2, [pc, #612]	@ (8007d18 <loadMenuTexts+0x7d8>)
 8007ab2:	4b9a      	ldr	r3, [pc, #616]	@ (8007d1c <loadMenuTexts+0x7dc>)
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	6828      	ldr	r0, [r5, #0]
 8007aba:	6869      	ldr	r1, [r5, #4]
 8007abc:	68aa      	ldr	r2, [r5, #8]
 8007abe:	68eb      	ldr	r3, [r5, #12]
 8007ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac2:	7c2b      	ldrb	r3, [r5, #16]
 8007ac4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8007ac6:	4a96      	ldr	r2, [pc, #600]	@ (8007d20 <loadMenuTexts+0x7e0>)
 8007ac8:	4b96      	ldr	r3, [pc, #600]	@ (8007d24 <loadMenuTexts+0x7e4>)
 8007aca:	4614      	mov	r4, r2
 8007acc:	461d      	mov	r5, r3
 8007ace:	6828      	ldr	r0, [r5, #0]
 8007ad0:	6869      	ldr	r1, [r5, #4]
 8007ad2:	68aa      	ldr	r2, [r5, #8]
 8007ad4:	68eb      	ldr	r3, [r5, #12]
 8007ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad8:	7c2b      	ldrb	r3, [r5, #16]
 8007ada:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007adc:	4a92      	ldr	r2, [pc, #584]	@ (8007d28 <loadMenuTexts+0x7e8>)
 8007ade:	4b93      	ldr	r3, [pc, #588]	@ (8007d2c <loadMenuTexts+0x7ec>)
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	461d      	mov	r5, r3
 8007ae4:	6828      	ldr	r0, [r5, #0]
 8007ae6:	6869      	ldr	r1, [r5, #4]
 8007ae8:	68aa      	ldr	r2, [r5, #8]
 8007aea:	68eb      	ldr	r3, [r5, #12]
 8007aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aee:	7c2b      	ldrb	r3, [r5, #16]
 8007af0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007af2:	4a8f      	ldr	r2, [pc, #572]	@ (8007d30 <loadMenuTexts+0x7f0>)
 8007af4:	4b8f      	ldr	r3, [pc, #572]	@ (8007d34 <loadMenuTexts+0x7f4>)
 8007af6:	4614      	mov	r4, r2
 8007af8:	461d      	mov	r5, r3
 8007afa:	6828      	ldr	r0, [r5, #0]
 8007afc:	6869      	ldr	r1, [r5, #4]
 8007afe:	68aa      	ldr	r2, [r5, #8]
 8007b00:	68eb      	ldr	r3, [r5, #12]
 8007b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b04:	7c2b      	ldrb	r3, [r5, #16]
 8007b06:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8007b08:	4a8b      	ldr	r2, [pc, #556]	@ (8007d38 <loadMenuTexts+0x7f8>)
 8007b0a:	4b8c      	ldr	r3, [pc, #560]	@ (8007d3c <loadMenuTexts+0x7fc>)
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	461d      	mov	r5, r3
 8007b10:	6828      	ldr	r0, [r5, #0]
 8007b12:	6869      	ldr	r1, [r5, #4]
 8007b14:	68aa      	ldr	r2, [r5, #8]
 8007b16:	68eb      	ldr	r3, [r5, #12]
 8007b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b1a:	7c2b      	ldrb	r3, [r5, #16]
 8007b1c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007b1e:	4a88      	ldr	r2, [pc, #544]	@ (8007d40 <loadMenuTexts+0x800>)
 8007b20:	4b88      	ldr	r3, [pc, #544]	@ (8007d44 <loadMenuTexts+0x804>)
 8007b22:	4614      	mov	r4, r2
 8007b24:	461d      	mov	r5, r3
 8007b26:	6828      	ldr	r0, [r5, #0]
 8007b28:	6869      	ldr	r1, [r5, #4]
 8007b2a:	68aa      	ldr	r2, [r5, #8]
 8007b2c:	68eb      	ldr	r3, [r5, #12]
 8007b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b30:	7c2b      	ldrb	r3, [r5, #16]
 8007b32:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007b34:	4a84      	ldr	r2, [pc, #528]	@ (8007d48 <loadMenuTexts+0x808>)
 8007b36:	4b85      	ldr	r3, [pc, #532]	@ (8007d4c <loadMenuTexts+0x80c>)
 8007b38:	4614      	mov	r4, r2
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	6828      	ldr	r0, [r5, #0]
 8007b3e:	6869      	ldr	r1, [r5, #4]
 8007b40:	68aa      	ldr	r2, [r5, #8]
 8007b42:	68eb      	ldr	r3, [r5, #12]
 8007b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b46:	7c2b      	ldrb	r3, [r5, #16]
 8007b48:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8007b4a:	4a81      	ldr	r2, [pc, #516]	@ (8007d50 <loadMenuTexts+0x810>)
 8007b4c:	4b81      	ldr	r3, [pc, #516]	@ (8007d54 <loadMenuTexts+0x814>)
 8007b4e:	4614      	mov	r4, r2
 8007b50:	461d      	mov	r5, r3
 8007b52:	6828      	ldr	r0, [r5, #0]
 8007b54:	6869      	ldr	r1, [r5, #4]
 8007b56:	68aa      	ldr	r2, [r5, #8]
 8007b58:	68eb      	ldr	r3, [r5, #12]
 8007b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b5c:	7c2b      	ldrb	r3, [r5, #16]
 8007b5e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8007b60:	4a7d      	ldr	r2, [pc, #500]	@ (8007d58 <loadMenuTexts+0x818>)
 8007b62:	4b7e      	ldr	r3, [pc, #504]	@ (8007d5c <loadMenuTexts+0x81c>)
 8007b64:	4614      	mov	r4, r2
 8007b66:	461d      	mov	r5, r3
 8007b68:	6828      	ldr	r0, [r5, #0]
 8007b6a:	6869      	ldr	r1, [r5, #4]
 8007b6c:	68aa      	ldr	r2, [r5, #8]
 8007b6e:	68eb      	ldr	r3, [r5, #12]
 8007b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b72:	7c2b      	ldrb	r3, [r5, #16]
 8007b74:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8007b76:	4a7a      	ldr	r2, [pc, #488]	@ (8007d60 <loadMenuTexts+0x820>)
 8007b78:	4b7a      	ldr	r3, [pc, #488]	@ (8007d64 <loadMenuTexts+0x824>)
 8007b7a:	4614      	mov	r4, r2
 8007b7c:	461d      	mov	r5, r3
 8007b7e:	6828      	ldr	r0, [r5, #0]
 8007b80:	6869      	ldr	r1, [r5, #4]
 8007b82:	68aa      	ldr	r2, [r5, #8]
 8007b84:	68eb      	ldr	r3, [r5, #12]
 8007b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b88:	7c2b      	ldrb	r3, [r5, #16]
 8007b8a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8007b8c:	4a76      	ldr	r2, [pc, #472]	@ (8007d68 <loadMenuTexts+0x828>)
 8007b8e:	4b77      	ldr	r3, [pc, #476]	@ (8007d6c <loadMenuTexts+0x82c>)
 8007b90:	4614      	mov	r4, r2
 8007b92:	461d      	mov	r5, r3
 8007b94:	6828      	ldr	r0, [r5, #0]
 8007b96:	6869      	ldr	r1, [r5, #4]
 8007b98:	68aa      	ldr	r2, [r5, #8]
 8007b9a:	68eb      	ldr	r3, [r5, #12]
 8007b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9e:	7c2b      	ldrb	r3, [r5, #16]
 8007ba0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8007ba2:	4a73      	ldr	r2, [pc, #460]	@ (8007d70 <loadMenuTexts+0x830>)
 8007ba4:	4b73      	ldr	r3, [pc, #460]	@ (8007d74 <loadMenuTexts+0x834>)
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	461d      	mov	r5, r3
 8007baa:	6828      	ldr	r0, [r5, #0]
 8007bac:	6869      	ldr	r1, [r5, #4]
 8007bae:	68aa      	ldr	r2, [r5, #8]
 8007bb0:	68eb      	ldr	r3, [r5, #12]
 8007bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb4:	7c2b      	ldrb	r3, [r5, #16]
 8007bb6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8007bb8:	4a6f      	ldr	r2, [pc, #444]	@ (8007d78 <loadMenuTexts+0x838>)
 8007bba:	4b70      	ldr	r3, [pc, #448]	@ (8007d7c <loadMenuTexts+0x83c>)
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	6828      	ldr	r0, [r5, #0]
 8007bc2:	6869      	ldr	r1, [r5, #4]
 8007bc4:	68aa      	ldr	r2, [r5, #8]
 8007bc6:	68eb      	ldr	r3, [r5, #12]
 8007bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bca:	7c2b      	ldrb	r3, [r5, #16]
 8007bcc:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8007bce:	4a6c      	ldr	r2, [pc, #432]	@ (8007d80 <loadMenuTexts+0x840>)
 8007bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8007d84 <loadMenuTexts+0x844>)
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	461d      	mov	r5, r3
 8007bd6:	6828      	ldr	r0, [r5, #0]
 8007bd8:	6869      	ldr	r1, [r5, #4]
 8007bda:	68aa      	ldr	r2, [r5, #8]
 8007bdc:	68eb      	ldr	r3, [r5, #12]
 8007bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007be0:	7c2b      	ldrb	r3, [r5, #16]
 8007be2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007be4:	4a68      	ldr	r2, [pc, #416]	@ (8007d88 <loadMenuTexts+0x848>)
 8007be6:	4b69      	ldr	r3, [pc, #420]	@ (8007d8c <loadMenuTexts+0x84c>)
 8007be8:	4614      	mov	r4, r2
 8007bea:	461d      	mov	r5, r3
 8007bec:	6828      	ldr	r0, [r5, #0]
 8007bee:	6869      	ldr	r1, [r5, #4]
 8007bf0:	68aa      	ldr	r2, [r5, #8]
 8007bf2:	68eb      	ldr	r3, [r5, #12]
 8007bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf6:	7c2b      	ldrb	r3, [r5, #16]
 8007bf8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8007bfa:	4a65      	ldr	r2, [pc, #404]	@ (8007d90 <loadMenuTexts+0x850>)
 8007bfc:	4b65      	ldr	r3, [pc, #404]	@ (8007d94 <loadMenuTexts+0x854>)
 8007bfe:	4614      	mov	r4, r2
 8007c00:	461d      	mov	r5, r3
 8007c02:	6828      	ldr	r0, [r5, #0]
 8007c04:	6869      	ldr	r1, [r5, #4]
 8007c06:	68aa      	ldr	r2, [r5, #8]
 8007c08:	68eb      	ldr	r3, [r5, #12]
 8007c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0c:	7c2b      	ldrb	r3, [r5, #16]
 8007c0e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007c10:	4a61      	ldr	r2, [pc, #388]	@ (8007d98 <loadMenuTexts+0x858>)
 8007c12:	4b62      	ldr	r3, [pc, #392]	@ (8007d9c <loadMenuTexts+0x85c>)
 8007c14:	4614      	mov	r4, r2
 8007c16:	461d      	mov	r5, r3
 8007c18:	6828      	ldr	r0, [r5, #0]
 8007c1a:	6869      	ldr	r1, [r5, #4]
 8007c1c:	68aa      	ldr	r2, [r5, #8]
 8007c1e:	68eb      	ldr	r3, [r5, #12]
 8007c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c22:	7c2b      	ldrb	r3, [r5, #16]
 8007c24:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8007c26:	4a5e      	ldr	r2, [pc, #376]	@ (8007da0 <loadMenuTexts+0x860>)
 8007c28:	4b5e      	ldr	r3, [pc, #376]	@ (8007da4 <loadMenuTexts+0x864>)
 8007c2a:	4614      	mov	r4, r2
 8007c2c:	461d      	mov	r5, r3
 8007c2e:	6828      	ldr	r0, [r5, #0]
 8007c30:	6869      	ldr	r1, [r5, #4]
 8007c32:	68aa      	ldr	r2, [r5, #8]
 8007c34:	68eb      	ldr	r3, [r5, #12]
 8007c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c38:	7c2b      	ldrb	r3, [r5, #16]
 8007c3a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8007c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8007da8 <loadMenuTexts+0x868>)
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007dac <loadMenuTexts+0x86c>)
 8007c40:	4614      	mov	r4, r2
 8007c42:	461d      	mov	r5, r3
 8007c44:	6828      	ldr	r0, [r5, #0]
 8007c46:	6869      	ldr	r1, [r5, #4]
 8007c48:	68aa      	ldr	r2, [r5, #8]
 8007c4a:	68eb      	ldr	r3, [r5, #12]
 8007c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c4e:	7c2b      	ldrb	r3, [r5, #16]
 8007c50:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007c52:	4a57      	ldr	r2, [pc, #348]	@ (8007db0 <loadMenuTexts+0x870>)
 8007c54:	4b57      	ldr	r3, [pc, #348]	@ (8007db4 <loadMenuTexts+0x874>)
 8007c56:	4614      	mov	r4, r2
 8007c58:	461d      	mov	r5, r3
 8007c5a:	6828      	ldr	r0, [r5, #0]
 8007c5c:	6869      	ldr	r1, [r5, #4]
 8007c5e:	68aa      	ldr	r2, [r5, #8]
 8007c60:	68eb      	ldr	r3, [r5, #12]
 8007c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c64:	7c2b      	ldrb	r3, [r5, #16]
 8007c66:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8007c68:	4a53      	ldr	r2, [pc, #332]	@ (8007db8 <loadMenuTexts+0x878>)
 8007c6a:	4b54      	ldr	r3, [pc, #336]	@ (8007dbc <loadMenuTexts+0x87c>)
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	461d      	mov	r5, r3
 8007c70:	6828      	ldr	r0, [r5, #0]
 8007c72:	6869      	ldr	r1, [r5, #4]
 8007c74:	68aa      	ldr	r2, [r5, #8]
 8007c76:	68eb      	ldr	r3, [r5, #12]
 8007c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c7a:	7c2b      	ldrb	r3, [r5, #16]
 8007c7c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8007c7e:	4a50      	ldr	r2, [pc, #320]	@ (8007dc0 <loadMenuTexts+0x880>)
 8007c80:	4b50      	ldr	r3, [pc, #320]	@ (8007dc4 <loadMenuTexts+0x884>)
 8007c82:	4614      	mov	r4, r2
 8007c84:	461d      	mov	r5, r3
 8007c86:	6828      	ldr	r0, [r5, #0]
 8007c88:	6869      	ldr	r1, [r5, #4]
 8007c8a:	68aa      	ldr	r2, [r5, #8]
 8007c8c:	68eb      	ldr	r3, [r5, #12]
 8007c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c90:	7c2b      	ldrb	r3, [r5, #16]
 8007c92:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8007c94:	4a4c      	ldr	r2, [pc, #304]	@ (8007dc8 <loadMenuTexts+0x888>)
 8007c96:	4b4d      	ldr	r3, [pc, #308]	@ (8007dcc <loadMenuTexts+0x88c>)
 8007c98:	4614      	mov	r4, r2
 8007c9a:	461d      	mov	r5, r3
 8007c9c:	6828      	ldr	r0, [r5, #0]
 8007c9e:	6869      	ldr	r1, [r5, #4]
 8007ca0:	68aa      	ldr	r2, [r5, #8]
 8007ca2:	68eb      	ldr	r3, [r5, #12]
 8007ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca6:	7c2b      	ldrb	r3, [r5, #16]
 8007ca8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8007caa:	4a49      	ldr	r2, [pc, #292]	@ (8007dd0 <loadMenuTexts+0x890>)
 8007cac:	4b49      	ldr	r3, [pc, #292]	@ (8007dd4 <loadMenuTexts+0x894>)
 8007cae:	4614      	mov	r4, r2
 8007cb0:	461d      	mov	r5, r3
 8007cb2:	e091      	b.n	8007dd8 <loadMenuTexts+0x898>
 8007cb4:	2000045c 	.word	0x2000045c
 8007cb8:	20001504 	.word	0x20001504
 8007cbc:	20000470 	.word	0x20000470
 8007cc0:	20001518 	.word	0x20001518
 8007cc4:	20000484 	.word	0x20000484
 8007cc8:	2000152c 	.word	0x2000152c
 8007ccc:	20000498 	.word	0x20000498
 8007cd0:	20001540 	.word	0x20001540
 8007cd4:	200004ac 	.word	0x200004ac
 8007cd8:	20001554 	.word	0x20001554
 8007cdc:	200004c0 	.word	0x200004c0
 8007ce0:	20001568 	.word	0x20001568
 8007ce4:	200004d4 	.word	0x200004d4
 8007ce8:	2000157c 	.word	0x2000157c
 8007cec:	200004e8 	.word	0x200004e8
 8007cf0:	20001590 	.word	0x20001590
 8007cf4:	200004fc 	.word	0x200004fc
 8007cf8:	200015a4 	.word	0x200015a4
 8007cfc:	20000510 	.word	0x20000510
 8007d00:	200015b8 	.word	0x200015b8
 8007d04:	20000524 	.word	0x20000524
 8007d08:	200015cc 	.word	0x200015cc
 8007d0c:	20000538 	.word	0x20000538
 8007d10:	200015e0 	.word	0x200015e0
 8007d14:	2000054c 	.word	0x2000054c
 8007d18:	200015f4 	.word	0x200015f4
 8007d1c:	20000560 	.word	0x20000560
 8007d20:	20001608 	.word	0x20001608
 8007d24:	20000574 	.word	0x20000574
 8007d28:	2000161c 	.word	0x2000161c
 8007d2c:	20000588 	.word	0x20000588
 8007d30:	20001630 	.word	0x20001630
 8007d34:	2000059c 	.word	0x2000059c
 8007d38:	20001644 	.word	0x20001644
 8007d3c:	200005b0 	.word	0x200005b0
 8007d40:	20001658 	.word	0x20001658
 8007d44:	200005c4 	.word	0x200005c4
 8007d48:	2000166c 	.word	0x2000166c
 8007d4c:	200005d8 	.word	0x200005d8
 8007d50:	20001680 	.word	0x20001680
 8007d54:	200005ec 	.word	0x200005ec
 8007d58:	20001694 	.word	0x20001694
 8007d5c:	20000600 	.word	0x20000600
 8007d60:	200016a8 	.word	0x200016a8
 8007d64:	20000614 	.word	0x20000614
 8007d68:	200016bc 	.word	0x200016bc
 8007d6c:	20000628 	.word	0x20000628
 8007d70:	200016d0 	.word	0x200016d0
 8007d74:	2000063c 	.word	0x2000063c
 8007d78:	200016e4 	.word	0x200016e4
 8007d7c:	20000650 	.word	0x20000650
 8007d80:	200016f8 	.word	0x200016f8
 8007d84:	20000664 	.word	0x20000664
 8007d88:	2000170c 	.word	0x2000170c
 8007d8c:	20000678 	.word	0x20000678
 8007d90:	20001720 	.word	0x20001720
 8007d94:	2000068c 	.word	0x2000068c
 8007d98:	20001734 	.word	0x20001734
 8007d9c:	200006a0 	.word	0x200006a0
 8007da0:	20001748 	.word	0x20001748
 8007da4:	200006b4 	.word	0x200006b4
 8007da8:	2000175c 	.word	0x2000175c
 8007dac:	200006c8 	.word	0x200006c8
 8007db0:	20001770 	.word	0x20001770
 8007db4:	200006dc 	.word	0x200006dc
 8007db8:	20001784 	.word	0x20001784
 8007dbc:	200006f0 	.word	0x200006f0
 8007dc0:	20001798 	.word	0x20001798
 8007dc4:	20000c7c 	.word	0x20000c7c
 8007dc8:	200017ac 	.word	0x200017ac
 8007dcc:	20000c90 	.word	0x20000c90
 8007dd0:	200017c0 	.word	0x200017c0
 8007dd4:	20000ca4 	.word	0x20000ca4
 8007dd8:	6828      	ldr	r0, [r5, #0]
 8007dda:	6869      	ldr	r1, [r5, #4]
 8007ddc:	68aa      	ldr	r2, [r5, #8]
 8007dde:	68eb      	ldr	r3, [r5, #12]
 8007de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007de2:	7c2b      	ldrb	r3, [r5, #16]
 8007de4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8007de6:	4a59      	ldr	r2, [pc, #356]	@ (8007f4c <loadMenuTexts+0xa0c>)
 8007de8:	4b59      	ldr	r3, [pc, #356]	@ (8007f50 <loadMenuTexts+0xa10>)
 8007dea:	4614      	mov	r4, r2
 8007dec:	461d      	mov	r5, r3
 8007dee:	6828      	ldr	r0, [r5, #0]
 8007df0:	6869      	ldr	r1, [r5, #4]
 8007df2:	68aa      	ldr	r2, [r5, #8]
 8007df4:	68eb      	ldr	r3, [r5, #12]
 8007df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007df8:	7c2b      	ldrb	r3, [r5, #16]
 8007dfa:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8007dfc:	4a55      	ldr	r2, [pc, #340]	@ (8007f54 <loadMenuTexts+0xa14>)
 8007dfe:	4b56      	ldr	r3, [pc, #344]	@ (8007f58 <loadMenuTexts+0xa18>)
 8007e00:	4614      	mov	r4, r2
 8007e02:	461d      	mov	r5, r3
 8007e04:	6828      	ldr	r0, [r5, #0]
 8007e06:	6869      	ldr	r1, [r5, #4]
 8007e08:	68aa      	ldr	r2, [r5, #8]
 8007e0a:	68eb      	ldr	r3, [r5, #12]
 8007e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0e:	7c2b      	ldrb	r3, [r5, #16]
 8007e10:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8007e12:	4a52      	ldr	r2, [pc, #328]	@ (8007f5c <loadMenuTexts+0xa1c>)
 8007e14:	4b52      	ldr	r3, [pc, #328]	@ (8007f60 <loadMenuTexts+0xa20>)
 8007e16:	4614      	mov	r4, r2
 8007e18:	461d      	mov	r5, r3
 8007e1a:	6828      	ldr	r0, [r5, #0]
 8007e1c:	6869      	ldr	r1, [r5, #4]
 8007e1e:	68aa      	ldr	r2, [r5, #8]
 8007e20:	68eb      	ldr	r3, [r5, #12]
 8007e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e24:	7c2b      	ldrb	r3, [r5, #16]
 8007e26:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8007e28:	4a4e      	ldr	r2, [pc, #312]	@ (8007f64 <loadMenuTexts+0xa24>)
 8007e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f68 <loadMenuTexts+0xa28>)
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	461d      	mov	r5, r3
 8007e30:	6828      	ldr	r0, [r5, #0]
 8007e32:	6869      	ldr	r1, [r5, #4]
 8007e34:	68aa      	ldr	r2, [r5, #8]
 8007e36:	68eb      	ldr	r3, [r5, #12]
 8007e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e3a:	7c2b      	ldrb	r3, [r5, #16]
 8007e3c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8007e3e:	4a4b      	ldr	r2, [pc, #300]	@ (8007f6c <loadMenuTexts+0xa2c>)
 8007e40:	4b4b      	ldr	r3, [pc, #300]	@ (8007f70 <loadMenuTexts+0xa30>)
 8007e42:	4614      	mov	r4, r2
 8007e44:	461d      	mov	r5, r3
 8007e46:	6828      	ldr	r0, [r5, #0]
 8007e48:	6869      	ldr	r1, [r5, #4]
 8007e4a:	68aa      	ldr	r2, [r5, #8]
 8007e4c:	68eb      	ldr	r3, [r5, #12]
 8007e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e50:	7c2b      	ldrb	r3, [r5, #16]
 8007e52:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8007e54:	4a47      	ldr	r2, [pc, #284]	@ (8007f74 <loadMenuTexts+0xa34>)
 8007e56:	4b48      	ldr	r3, [pc, #288]	@ (8007f78 <loadMenuTexts+0xa38>)
 8007e58:	4614      	mov	r4, r2
 8007e5a:	461d      	mov	r5, r3
 8007e5c:	6828      	ldr	r0, [r5, #0]
 8007e5e:	6869      	ldr	r1, [r5, #4]
 8007e60:	68aa      	ldr	r2, [r5, #8]
 8007e62:	68eb      	ldr	r3, [r5, #12]
 8007e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e66:	7c2b      	ldrb	r3, [r5, #16]
 8007e68:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8007e6a:	4a44      	ldr	r2, [pc, #272]	@ (8007f7c <loadMenuTexts+0xa3c>)
 8007e6c:	4b44      	ldr	r3, [pc, #272]	@ (8007f80 <loadMenuTexts+0xa40>)
 8007e6e:	4614      	mov	r4, r2
 8007e70:	461d      	mov	r5, r3
 8007e72:	6828      	ldr	r0, [r5, #0]
 8007e74:	6869      	ldr	r1, [r5, #4]
 8007e76:	68aa      	ldr	r2, [r5, #8]
 8007e78:	68eb      	ldr	r3, [r5, #12]
 8007e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e7c:	7c2b      	ldrb	r3, [r5, #16]
 8007e7e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8007e80:	4a40      	ldr	r2, [pc, #256]	@ (8007f84 <loadMenuTexts+0xa44>)
 8007e82:	4b41      	ldr	r3, [pc, #260]	@ (8007f88 <loadMenuTexts+0xa48>)
 8007e84:	4614      	mov	r4, r2
 8007e86:	461d      	mov	r5, r3
 8007e88:	6828      	ldr	r0, [r5, #0]
 8007e8a:	6869      	ldr	r1, [r5, #4]
 8007e8c:	68aa      	ldr	r2, [r5, #8]
 8007e8e:	68eb      	ldr	r3, [r5, #12]
 8007e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e92:	7c2b      	ldrb	r3, [r5, #16]
 8007e94:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8007e96:	4a3d      	ldr	r2, [pc, #244]	@ (8007f8c <loadMenuTexts+0xa4c>)
 8007e98:	4b3d      	ldr	r3, [pc, #244]	@ (8007f90 <loadMenuTexts+0xa50>)
 8007e9a:	4614      	mov	r4, r2
 8007e9c:	461d      	mov	r5, r3
 8007e9e:	6828      	ldr	r0, [r5, #0]
 8007ea0:	6869      	ldr	r1, [r5, #4]
 8007ea2:	68aa      	ldr	r2, [r5, #8]
 8007ea4:	68eb      	ldr	r3, [r5, #12]
 8007ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea8:	7c2b      	ldrb	r3, [r5, #16]
 8007eaa:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8007eac:	4a39      	ldr	r2, [pc, #228]	@ (8007f94 <loadMenuTexts+0xa54>)
 8007eae:	4b3a      	ldr	r3, [pc, #232]	@ (8007f98 <loadMenuTexts+0xa58>)
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	461d      	mov	r5, r3
 8007eb4:	6828      	ldr	r0, [r5, #0]
 8007eb6:	6869      	ldr	r1, [r5, #4]
 8007eb8:	68aa      	ldr	r2, [r5, #8]
 8007eba:	68eb      	ldr	r3, [r5, #12]
 8007ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ebe:	7c2b      	ldrb	r3, [r5, #16]
 8007ec0:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8007ec2:	4a36      	ldr	r2, [pc, #216]	@ (8007f9c <loadMenuTexts+0xa5c>)
 8007ec4:	4b36      	ldr	r3, [pc, #216]	@ (8007fa0 <loadMenuTexts+0xa60>)
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	461d      	mov	r5, r3
 8007eca:	6828      	ldr	r0, [r5, #0]
 8007ecc:	6869      	ldr	r1, [r5, #4]
 8007ece:	68aa      	ldr	r2, [r5, #8]
 8007ed0:	68eb      	ldr	r3, [r5, #12]
 8007ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ed4:	7c2b      	ldrb	r3, [r5, #16]
 8007ed6:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007ed8:	4a32      	ldr	r2, [pc, #200]	@ (8007fa4 <loadMenuTexts+0xa64>)
 8007eda:	4b33      	ldr	r3, [pc, #204]	@ (8007fa8 <loadMenuTexts+0xa68>)
 8007edc:	4614      	mov	r4, r2
 8007ede:	461d      	mov	r5, r3
 8007ee0:	6828      	ldr	r0, [r5, #0]
 8007ee2:	6869      	ldr	r1, [r5, #4]
 8007ee4:	68aa      	ldr	r2, [r5, #8]
 8007ee6:	68eb      	ldr	r3, [r5, #12]
 8007ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eea:	7c2b      	ldrb	r3, [r5, #16]
 8007eec:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8007eee:	4a2f      	ldr	r2, [pc, #188]	@ (8007fac <loadMenuTexts+0xa6c>)
 8007ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8007fb0 <loadMenuTexts+0xa70>)
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	461d      	mov	r5, r3
 8007ef6:	6828      	ldr	r0, [r5, #0]
 8007ef8:	6869      	ldr	r1, [r5, #4]
 8007efa:	68aa      	ldr	r2, [r5, #8]
 8007efc:	68eb      	ldr	r3, [r5, #12]
 8007efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f00:	7c2b      	ldrb	r3, [r5, #16]
 8007f02:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8007f04:	4a2b      	ldr	r2, [pc, #172]	@ (8007fb4 <loadMenuTexts+0xa74>)
 8007f06:	4b2c      	ldr	r3, [pc, #176]	@ (8007fb8 <loadMenuTexts+0xa78>)
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	6828      	ldr	r0, [r5, #0]
 8007f0e:	6869      	ldr	r1, [r5, #4]
 8007f10:	68aa      	ldr	r2, [r5, #8]
 8007f12:	68eb      	ldr	r3, [r5, #12]
 8007f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f16:	7c2b      	ldrb	r3, [r5, #16]
 8007f18:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8007f1a:	4a28      	ldr	r2, [pc, #160]	@ (8007fbc <loadMenuTexts+0xa7c>)
 8007f1c:	4b28      	ldr	r3, [pc, #160]	@ (8007fc0 <loadMenuTexts+0xa80>)
 8007f1e:	4614      	mov	r4, r2
 8007f20:	461d      	mov	r5, r3
 8007f22:	6828      	ldr	r0, [r5, #0]
 8007f24:	6869      	ldr	r1, [r5, #4]
 8007f26:	68aa      	ldr	r2, [r5, #8]
 8007f28:	68eb      	ldr	r3, [r5, #12]
 8007f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f2c:	7c2b      	ldrb	r3, [r5, #16]
 8007f2e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8007f30:	4a24      	ldr	r2, [pc, #144]	@ (8007fc4 <loadMenuTexts+0xa84>)
 8007f32:	4b25      	ldr	r3, [pc, #148]	@ (8007fc8 <loadMenuTexts+0xa88>)
 8007f34:	4614      	mov	r4, r2
 8007f36:	461d      	mov	r5, r3
 8007f38:	6828      	ldr	r0, [r5, #0]
 8007f3a:	6869      	ldr	r1, [r5, #4]
 8007f3c:	68aa      	ldr	r2, [r5, #8]
 8007f3e:	68eb      	ldr	r3, [r5, #12]
 8007f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f42:	7c2b      	ldrb	r3, [r5, #16]
 8007f44:	7023      	strb	r3, [r4, #0]
 8007f46:	f000 bd3a 	b.w	80089be <loadMenuTexts+0x147e>
 8007f4a:	bf00      	nop
 8007f4c:	200017d4 	.word	0x200017d4
 8007f50:	20000cb8 	.word	0x20000cb8
 8007f54:	200017e8 	.word	0x200017e8
 8007f58:	20000d1c 	.word	0x20000d1c
 8007f5c:	200017fc 	.word	0x200017fc
 8007f60:	20000d30 	.word	0x20000d30
 8007f64:	20001810 	.word	0x20001810
 8007f68:	20000d6c 	.word	0x20000d6c
 8007f6c:	20001824 	.word	0x20001824
 8007f70:	20000d80 	.word	0x20000d80
 8007f74:	20001838 	.word	0x20001838
 8007f78:	20000dbc 	.word	0x20000dbc
 8007f7c:	2000184c 	.word	0x2000184c
 8007f80:	20000dd0 	.word	0x20000dd0
 8007f84:	20001860 	.word	0x20001860
 8007f88:	20000e0c 	.word	0x20000e0c
 8007f8c:	20001874 	.word	0x20001874
 8007f90:	20000e34 	.word	0x20000e34
 8007f94:	20001888 	.word	0x20001888
 8007f98:	20000e5c 	.word	0x20000e5c
 8007f9c:	2000189c 	.word	0x2000189c
 8007fa0:	20000e84 	.word	0x20000e84
 8007fa4:	200018b0 	.word	0x200018b0
 8007fa8:	20000eac 	.word	0x20000eac
 8007fac:	200018c4 	.word	0x200018c4
 8007fb0:	20000ed4 	.word	0x20000ed4
 8007fb4:	200018d8 	.word	0x200018d8
 8007fb8:	20000efc 	.word	0x20000efc
 8007fbc:	200018ec 	.word	0x200018ec
 8007fc0:	20000f24 	.word	0x20000f24
 8007fc4:	20001900 	.word	0x20001900
 8007fc8:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8007fcc:	4ac6      	ldr	r2, [pc, #792]	@ (80082e8 <loadMenuTexts+0xda8>)
 8007fce:	4bc7      	ldr	r3, [pc, #796]	@ (80082ec <loadMenuTexts+0xdac>)
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	461d      	mov	r5, r3
 8007fd4:	6828      	ldr	r0, [r5, #0]
 8007fd6:	6869      	ldr	r1, [r5, #4]
 8007fd8:	68aa      	ldr	r2, [r5, #8]
 8007fda:	68eb      	ldr	r3, [r5, #12]
 8007fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fde:	7c2b      	ldrb	r3, [r5, #16]
 8007fe0:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8007fe2:	4ac3      	ldr	r2, [pc, #780]	@ (80082f0 <loadMenuTexts+0xdb0>)
 8007fe4:	4bc3      	ldr	r3, [pc, #780]	@ (80082f4 <loadMenuTexts+0xdb4>)
 8007fe6:	4614      	mov	r4, r2
 8007fe8:	461d      	mov	r5, r3
 8007fea:	6828      	ldr	r0, [r5, #0]
 8007fec:	6869      	ldr	r1, [r5, #4]
 8007fee:	68aa      	ldr	r2, [r5, #8]
 8007ff0:	68eb      	ldr	r3, [r5, #12]
 8007ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ff4:	7c2b      	ldrb	r3, [r5, #16]
 8007ff6:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007ff8:	4abf      	ldr	r2, [pc, #764]	@ (80082f8 <loadMenuTexts+0xdb8>)
 8007ffa:	4bc0      	ldr	r3, [pc, #768]	@ (80082fc <loadMenuTexts+0xdbc>)
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	461d      	mov	r5, r3
 8008000:	6828      	ldr	r0, [r5, #0]
 8008002:	6869      	ldr	r1, [r5, #4]
 8008004:	68aa      	ldr	r2, [r5, #8]
 8008006:	68eb      	ldr	r3, [r5, #12]
 8008008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800800a:	7c2b      	ldrb	r3, [r5, #16]
 800800c:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 800800e:	4abc      	ldr	r2, [pc, #752]	@ (8008300 <loadMenuTexts+0xdc0>)
 8008010:	4bbc      	ldr	r3, [pc, #752]	@ (8008304 <loadMenuTexts+0xdc4>)
 8008012:	4614      	mov	r4, r2
 8008014:	461d      	mov	r5, r3
 8008016:	6828      	ldr	r0, [r5, #0]
 8008018:	6869      	ldr	r1, [r5, #4]
 800801a:	68aa      	ldr	r2, [r5, #8]
 800801c:	68eb      	ldr	r3, [r5, #12]
 800801e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008020:	7c2b      	ldrb	r3, [r5, #16]
 8008022:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8008024:	4ab8      	ldr	r2, [pc, #736]	@ (8008308 <loadMenuTexts+0xdc8>)
 8008026:	4bb9      	ldr	r3, [pc, #740]	@ (800830c <loadMenuTexts+0xdcc>)
 8008028:	4614      	mov	r4, r2
 800802a:	461d      	mov	r5, r3
 800802c:	6828      	ldr	r0, [r5, #0]
 800802e:	6869      	ldr	r1, [r5, #4]
 8008030:	68aa      	ldr	r2, [r5, #8]
 8008032:	68eb      	ldr	r3, [r5, #12]
 8008034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008036:	7c2b      	ldrb	r3, [r5, #16]
 8008038:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 800803a:	4ab5      	ldr	r2, [pc, #724]	@ (8008310 <loadMenuTexts+0xdd0>)
 800803c:	4bb5      	ldr	r3, [pc, #724]	@ (8008314 <loadMenuTexts+0xdd4>)
 800803e:	4614      	mov	r4, r2
 8008040:	461d      	mov	r5, r3
 8008042:	6828      	ldr	r0, [r5, #0]
 8008044:	6869      	ldr	r1, [r5, #4]
 8008046:	68aa      	ldr	r2, [r5, #8]
 8008048:	68eb      	ldr	r3, [r5, #12]
 800804a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800804c:	7c2b      	ldrb	r3, [r5, #16]
 800804e:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8008050:	4ab1      	ldr	r2, [pc, #708]	@ (8008318 <loadMenuTexts+0xdd8>)
 8008052:	4bb2      	ldr	r3, [pc, #712]	@ (800831c <loadMenuTexts+0xddc>)
 8008054:	4614      	mov	r4, r2
 8008056:	461d      	mov	r5, r3
 8008058:	6828      	ldr	r0, [r5, #0]
 800805a:	6869      	ldr	r1, [r5, #4]
 800805c:	68aa      	ldr	r2, [r5, #8]
 800805e:	68eb      	ldr	r3, [r5, #12]
 8008060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008062:	7c2b      	ldrb	r3, [r5, #16]
 8008064:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8008066:	4aae      	ldr	r2, [pc, #696]	@ (8008320 <loadMenuTexts+0xde0>)
 8008068:	4bae      	ldr	r3, [pc, #696]	@ (8008324 <loadMenuTexts+0xde4>)
 800806a:	4614      	mov	r4, r2
 800806c:	461d      	mov	r5, r3
 800806e:	6828      	ldr	r0, [r5, #0]
 8008070:	6869      	ldr	r1, [r5, #4]
 8008072:	68aa      	ldr	r2, [r5, #8]
 8008074:	68eb      	ldr	r3, [r5, #12]
 8008076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008078:	7c2b      	ldrb	r3, [r5, #16]
 800807a:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 800807c:	4aaa      	ldr	r2, [pc, #680]	@ (8008328 <loadMenuTexts+0xde8>)
 800807e:	4bab      	ldr	r3, [pc, #684]	@ (800832c <loadMenuTexts+0xdec>)
 8008080:	4614      	mov	r4, r2
 8008082:	461d      	mov	r5, r3
 8008084:	6828      	ldr	r0, [r5, #0]
 8008086:	6869      	ldr	r1, [r5, #4]
 8008088:	68aa      	ldr	r2, [r5, #8]
 800808a:	68eb      	ldr	r3, [r5, #12]
 800808c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800808e:	7c2b      	ldrb	r3, [r5, #16]
 8008090:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8008092:	4aa7      	ldr	r2, [pc, #668]	@ (8008330 <loadMenuTexts+0xdf0>)
 8008094:	4ba7      	ldr	r3, [pc, #668]	@ (8008334 <loadMenuTexts+0xdf4>)
 8008096:	4614      	mov	r4, r2
 8008098:	461d      	mov	r5, r3
 800809a:	6828      	ldr	r0, [r5, #0]
 800809c:	6869      	ldr	r1, [r5, #4]
 800809e:	68aa      	ldr	r2, [r5, #8]
 80080a0:	68eb      	ldr	r3, [r5, #12]
 80080a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a4:	7c2b      	ldrb	r3, [r5, #16]
 80080a6:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 80080a8:	4aa3      	ldr	r2, [pc, #652]	@ (8008338 <loadMenuTexts+0xdf8>)
 80080aa:	4ba4      	ldr	r3, [pc, #656]	@ (800833c <loadMenuTexts+0xdfc>)
 80080ac:	4614      	mov	r4, r2
 80080ae:	461d      	mov	r5, r3
 80080b0:	6828      	ldr	r0, [r5, #0]
 80080b2:	6869      	ldr	r1, [r5, #4]
 80080b4:	68aa      	ldr	r2, [r5, #8]
 80080b6:	68eb      	ldr	r3, [r5, #12]
 80080b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ba:	7c2b      	ldrb	r3, [r5, #16]
 80080bc:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 80080be:	4aa0      	ldr	r2, [pc, #640]	@ (8008340 <loadMenuTexts+0xe00>)
 80080c0:	4ba0      	ldr	r3, [pc, #640]	@ (8008344 <loadMenuTexts+0xe04>)
 80080c2:	4614      	mov	r4, r2
 80080c4:	461d      	mov	r5, r3
 80080c6:	6828      	ldr	r0, [r5, #0]
 80080c8:	6869      	ldr	r1, [r5, #4]
 80080ca:	68aa      	ldr	r2, [r5, #8]
 80080cc:	68eb      	ldr	r3, [r5, #12]
 80080ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080d0:	7c2b      	ldrb	r3, [r5, #16]
 80080d2:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 80080d4:	4a9c      	ldr	r2, [pc, #624]	@ (8008348 <loadMenuTexts+0xe08>)
 80080d6:	4b9d      	ldr	r3, [pc, #628]	@ (800834c <loadMenuTexts+0xe0c>)
 80080d8:	4614      	mov	r4, r2
 80080da:	461d      	mov	r5, r3
 80080dc:	6828      	ldr	r0, [r5, #0]
 80080de:	6869      	ldr	r1, [r5, #4]
 80080e0:	68aa      	ldr	r2, [r5, #8]
 80080e2:	68eb      	ldr	r3, [r5, #12]
 80080e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e6:	7c2b      	ldrb	r3, [r5, #16]
 80080e8:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 80080ea:	4a99      	ldr	r2, [pc, #612]	@ (8008350 <loadMenuTexts+0xe10>)
 80080ec:	4b99      	ldr	r3, [pc, #612]	@ (8008354 <loadMenuTexts+0xe14>)
 80080ee:	4614      	mov	r4, r2
 80080f0:	461d      	mov	r5, r3
 80080f2:	6828      	ldr	r0, [r5, #0]
 80080f4:	6869      	ldr	r1, [r5, #4]
 80080f6:	68aa      	ldr	r2, [r5, #8]
 80080f8:	68eb      	ldr	r3, [r5, #12]
 80080fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080fc:	7c2b      	ldrb	r3, [r5, #16]
 80080fe:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8008100:	4a95      	ldr	r2, [pc, #596]	@ (8008358 <loadMenuTexts+0xe18>)
 8008102:	4b96      	ldr	r3, [pc, #600]	@ (800835c <loadMenuTexts+0xe1c>)
 8008104:	4614      	mov	r4, r2
 8008106:	461d      	mov	r5, r3
 8008108:	6828      	ldr	r0, [r5, #0]
 800810a:	6869      	ldr	r1, [r5, #4]
 800810c:	68aa      	ldr	r2, [r5, #8]
 800810e:	68eb      	ldr	r3, [r5, #12]
 8008110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008112:	7c2b      	ldrb	r3, [r5, #16]
 8008114:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8008116:	4a92      	ldr	r2, [pc, #584]	@ (8008360 <loadMenuTexts+0xe20>)
 8008118:	4b92      	ldr	r3, [pc, #584]	@ (8008364 <loadMenuTexts+0xe24>)
 800811a:	4614      	mov	r4, r2
 800811c:	461d      	mov	r5, r3
 800811e:	6828      	ldr	r0, [r5, #0]
 8008120:	6869      	ldr	r1, [r5, #4]
 8008122:	68aa      	ldr	r2, [r5, #8]
 8008124:	68eb      	ldr	r3, [r5, #12]
 8008126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008128:	7c2b      	ldrb	r3, [r5, #16]
 800812a:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 800812c:	4a8e      	ldr	r2, [pc, #568]	@ (8008368 <loadMenuTexts+0xe28>)
 800812e:	4b8f      	ldr	r3, [pc, #572]	@ (800836c <loadMenuTexts+0xe2c>)
 8008130:	4614      	mov	r4, r2
 8008132:	461d      	mov	r5, r3
 8008134:	6828      	ldr	r0, [r5, #0]
 8008136:	6869      	ldr	r1, [r5, #4]
 8008138:	68aa      	ldr	r2, [r5, #8]
 800813a:	68eb      	ldr	r3, [r5, #12]
 800813c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800813e:	7c2b      	ldrb	r3, [r5, #16]
 8008140:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8008142:	4a8b      	ldr	r2, [pc, #556]	@ (8008370 <loadMenuTexts+0xe30>)
 8008144:	4b8b      	ldr	r3, [pc, #556]	@ (8008374 <loadMenuTexts+0xe34>)
 8008146:	4614      	mov	r4, r2
 8008148:	461d      	mov	r5, r3
 800814a:	6828      	ldr	r0, [r5, #0]
 800814c:	6869      	ldr	r1, [r5, #4]
 800814e:	68aa      	ldr	r2, [r5, #8]
 8008150:	68eb      	ldr	r3, [r5, #12]
 8008152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008154:	7c2b      	ldrb	r3, [r5, #16]
 8008156:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8008158:	4a87      	ldr	r2, [pc, #540]	@ (8008378 <loadMenuTexts+0xe38>)
 800815a:	4b88      	ldr	r3, [pc, #544]	@ (800837c <loadMenuTexts+0xe3c>)
 800815c:	4614      	mov	r4, r2
 800815e:	461d      	mov	r5, r3
 8008160:	6828      	ldr	r0, [r5, #0]
 8008162:	6869      	ldr	r1, [r5, #4]
 8008164:	68aa      	ldr	r2, [r5, #8]
 8008166:	68eb      	ldr	r3, [r5, #12]
 8008168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800816a:	7c2b      	ldrb	r3, [r5, #16]
 800816c:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 800816e:	4a84      	ldr	r2, [pc, #528]	@ (8008380 <loadMenuTexts+0xe40>)
 8008170:	4b84      	ldr	r3, [pc, #528]	@ (8008384 <loadMenuTexts+0xe44>)
 8008172:	4614      	mov	r4, r2
 8008174:	461d      	mov	r5, r3
 8008176:	6828      	ldr	r0, [r5, #0]
 8008178:	6869      	ldr	r1, [r5, #4]
 800817a:	68aa      	ldr	r2, [r5, #8]
 800817c:	68eb      	ldr	r3, [r5, #12]
 800817e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008180:	7c2b      	ldrb	r3, [r5, #16]
 8008182:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8008184:	4a80      	ldr	r2, [pc, #512]	@ (8008388 <loadMenuTexts+0xe48>)
 8008186:	4b81      	ldr	r3, [pc, #516]	@ (800838c <loadMenuTexts+0xe4c>)
 8008188:	4614      	mov	r4, r2
 800818a:	461d      	mov	r5, r3
 800818c:	6828      	ldr	r0, [r5, #0]
 800818e:	6869      	ldr	r1, [r5, #4]
 8008190:	68aa      	ldr	r2, [r5, #8]
 8008192:	68eb      	ldr	r3, [r5, #12]
 8008194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008196:	7c2b      	ldrb	r3, [r5, #16]
 8008198:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 800819a:	4a7d      	ldr	r2, [pc, #500]	@ (8008390 <loadMenuTexts+0xe50>)
 800819c:	4b7d      	ldr	r3, [pc, #500]	@ (8008394 <loadMenuTexts+0xe54>)
 800819e:	4614      	mov	r4, r2
 80081a0:	461d      	mov	r5, r3
 80081a2:	6828      	ldr	r0, [r5, #0]
 80081a4:	6869      	ldr	r1, [r5, #4]
 80081a6:	68aa      	ldr	r2, [r5, #8]
 80081a8:	68eb      	ldr	r3, [r5, #12]
 80081aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ac:	7c2b      	ldrb	r3, [r5, #16]
 80081ae:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 80081b0:	4a79      	ldr	r2, [pc, #484]	@ (8008398 <loadMenuTexts+0xe58>)
 80081b2:	4b7a      	ldr	r3, [pc, #488]	@ (800839c <loadMenuTexts+0xe5c>)
 80081b4:	4614      	mov	r4, r2
 80081b6:	461d      	mov	r5, r3
 80081b8:	6828      	ldr	r0, [r5, #0]
 80081ba:	6869      	ldr	r1, [r5, #4]
 80081bc:	68aa      	ldr	r2, [r5, #8]
 80081be:	68eb      	ldr	r3, [r5, #12]
 80081c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081c2:	7c2b      	ldrb	r3, [r5, #16]
 80081c4:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 80081c6:	4a76      	ldr	r2, [pc, #472]	@ (80083a0 <loadMenuTexts+0xe60>)
 80081c8:	4b76      	ldr	r3, [pc, #472]	@ (80083a4 <loadMenuTexts+0xe64>)
 80081ca:	4614      	mov	r4, r2
 80081cc:	461d      	mov	r5, r3
 80081ce:	6828      	ldr	r0, [r5, #0]
 80081d0:	6869      	ldr	r1, [r5, #4]
 80081d2:	68aa      	ldr	r2, [r5, #8]
 80081d4:	68eb      	ldr	r3, [r5, #12]
 80081d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081d8:	7c2b      	ldrb	r3, [r5, #16]
 80081da:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 80081dc:	4a72      	ldr	r2, [pc, #456]	@ (80083a8 <loadMenuTexts+0xe68>)
 80081de:	4b73      	ldr	r3, [pc, #460]	@ (80083ac <loadMenuTexts+0xe6c>)
 80081e0:	4614      	mov	r4, r2
 80081e2:	461d      	mov	r5, r3
 80081e4:	6828      	ldr	r0, [r5, #0]
 80081e6:	6869      	ldr	r1, [r5, #4]
 80081e8:	68aa      	ldr	r2, [r5, #8]
 80081ea:	68eb      	ldr	r3, [r5, #12]
 80081ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ee:	7c2b      	ldrb	r3, [r5, #16]
 80081f0:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 80081f2:	4a6f      	ldr	r2, [pc, #444]	@ (80083b0 <loadMenuTexts+0xe70>)
 80081f4:	4b6f      	ldr	r3, [pc, #444]	@ (80083b4 <loadMenuTexts+0xe74>)
 80081f6:	4614      	mov	r4, r2
 80081f8:	461d      	mov	r5, r3
 80081fa:	6828      	ldr	r0, [r5, #0]
 80081fc:	6869      	ldr	r1, [r5, #4]
 80081fe:	68aa      	ldr	r2, [r5, #8]
 8008200:	68eb      	ldr	r3, [r5, #12]
 8008202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008204:	7c2b      	ldrb	r3, [r5, #16]
 8008206:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8008208:	4a6b      	ldr	r2, [pc, #428]	@ (80083b8 <loadMenuTexts+0xe78>)
 800820a:	4b6c      	ldr	r3, [pc, #432]	@ (80083bc <loadMenuTexts+0xe7c>)
 800820c:	4614      	mov	r4, r2
 800820e:	461d      	mov	r5, r3
 8008210:	6828      	ldr	r0, [r5, #0]
 8008212:	6869      	ldr	r1, [r5, #4]
 8008214:	68aa      	ldr	r2, [r5, #8]
 8008216:	68eb      	ldr	r3, [r5, #12]
 8008218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800821a:	7c2b      	ldrb	r3, [r5, #16]
 800821c:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 800821e:	4a68      	ldr	r2, [pc, #416]	@ (80083c0 <loadMenuTexts+0xe80>)
 8008220:	4b68      	ldr	r3, [pc, #416]	@ (80083c4 <loadMenuTexts+0xe84>)
 8008222:	4614      	mov	r4, r2
 8008224:	461d      	mov	r5, r3
 8008226:	6828      	ldr	r0, [r5, #0]
 8008228:	6869      	ldr	r1, [r5, #4]
 800822a:	68aa      	ldr	r2, [r5, #8]
 800822c:	68eb      	ldr	r3, [r5, #12]
 800822e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008230:	7c2b      	ldrb	r3, [r5, #16]
 8008232:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8008234:	4a64      	ldr	r2, [pc, #400]	@ (80083c8 <loadMenuTexts+0xe88>)
 8008236:	4b65      	ldr	r3, [pc, #404]	@ (80083cc <loadMenuTexts+0xe8c>)
 8008238:	4614      	mov	r4, r2
 800823a:	461d      	mov	r5, r3
 800823c:	6828      	ldr	r0, [r5, #0]
 800823e:	6869      	ldr	r1, [r5, #4]
 8008240:	68aa      	ldr	r2, [r5, #8]
 8008242:	68eb      	ldr	r3, [r5, #12]
 8008244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008246:	7c2b      	ldrb	r3, [r5, #16]
 8008248:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 800824a:	4a61      	ldr	r2, [pc, #388]	@ (80083d0 <loadMenuTexts+0xe90>)
 800824c:	4b61      	ldr	r3, [pc, #388]	@ (80083d4 <loadMenuTexts+0xe94>)
 800824e:	4614      	mov	r4, r2
 8008250:	461d      	mov	r5, r3
 8008252:	6828      	ldr	r0, [r5, #0]
 8008254:	6869      	ldr	r1, [r5, #4]
 8008256:	68aa      	ldr	r2, [r5, #8]
 8008258:	68eb      	ldr	r3, [r5, #12]
 800825a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800825c:	7c2b      	ldrb	r3, [r5, #16]
 800825e:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8008260:	4a5d      	ldr	r2, [pc, #372]	@ (80083d8 <loadMenuTexts+0xe98>)
 8008262:	4b5e      	ldr	r3, [pc, #376]	@ (80083dc <loadMenuTexts+0xe9c>)
 8008264:	4614      	mov	r4, r2
 8008266:	461d      	mov	r5, r3
 8008268:	6828      	ldr	r0, [r5, #0]
 800826a:	6869      	ldr	r1, [r5, #4]
 800826c:	68aa      	ldr	r2, [r5, #8]
 800826e:	68eb      	ldr	r3, [r5, #12]
 8008270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008272:	7c2b      	ldrb	r3, [r5, #16]
 8008274:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8008276:	4a5a      	ldr	r2, [pc, #360]	@ (80083e0 <loadMenuTexts+0xea0>)
 8008278:	4b5a      	ldr	r3, [pc, #360]	@ (80083e4 <loadMenuTexts+0xea4>)
 800827a:	4614      	mov	r4, r2
 800827c:	461d      	mov	r5, r3
 800827e:	6828      	ldr	r0, [r5, #0]
 8008280:	6869      	ldr	r1, [r5, #4]
 8008282:	68aa      	ldr	r2, [r5, #8]
 8008284:	68eb      	ldr	r3, [r5, #12]
 8008286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008288:	7c2b      	ldrb	r3, [r5, #16]
 800828a:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 800828c:	4a56      	ldr	r2, [pc, #344]	@ (80083e8 <loadMenuTexts+0xea8>)
 800828e:	4b57      	ldr	r3, [pc, #348]	@ (80083ec <loadMenuTexts+0xeac>)
 8008290:	4614      	mov	r4, r2
 8008292:	461d      	mov	r5, r3
 8008294:	6828      	ldr	r0, [r5, #0]
 8008296:	6869      	ldr	r1, [r5, #4]
 8008298:	68aa      	ldr	r2, [r5, #8]
 800829a:	68eb      	ldr	r3, [r5, #12]
 800829c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800829e:	7c2b      	ldrb	r3, [r5, #16]
 80082a0:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80082a2:	4a53      	ldr	r2, [pc, #332]	@ (80083f0 <loadMenuTexts+0xeb0>)
 80082a4:	4b53      	ldr	r3, [pc, #332]	@ (80083f4 <loadMenuTexts+0xeb4>)
 80082a6:	4614      	mov	r4, r2
 80082a8:	461d      	mov	r5, r3
 80082aa:	6828      	ldr	r0, [r5, #0]
 80082ac:	6869      	ldr	r1, [r5, #4]
 80082ae:	68aa      	ldr	r2, [r5, #8]
 80082b0:	68eb      	ldr	r3, [r5, #12]
 80082b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b4:	7c2b      	ldrb	r3, [r5, #16]
 80082b6:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 80082b8:	4a4f      	ldr	r2, [pc, #316]	@ (80083f8 <loadMenuTexts+0xeb8>)
 80082ba:	4b50      	ldr	r3, [pc, #320]	@ (80083fc <loadMenuTexts+0xebc>)
 80082bc:	4614      	mov	r4, r2
 80082be:	461d      	mov	r5, r3
 80082c0:	6828      	ldr	r0, [r5, #0]
 80082c2:	6869      	ldr	r1, [r5, #4]
 80082c4:	68aa      	ldr	r2, [r5, #8]
 80082c6:	68eb      	ldr	r3, [r5, #12]
 80082c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082ca:	7c2b      	ldrb	r3, [r5, #16]
 80082cc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 80082ce:	4a4c      	ldr	r2, [pc, #304]	@ (8008400 <loadMenuTexts+0xec0>)
 80082d0:	4b4c      	ldr	r3, [pc, #304]	@ (8008404 <loadMenuTexts+0xec4>)
 80082d2:	4614      	mov	r4, r2
 80082d4:	461d      	mov	r5, r3
 80082d6:	6828      	ldr	r0, [r5, #0]
 80082d8:	6869      	ldr	r1, [r5, #4]
 80082da:	68aa      	ldr	r2, [r5, #8]
 80082dc:	68eb      	ldr	r3, [r5, #12]
 80082de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e0:	7c2b      	ldrb	r3, [r5, #16]
 80082e2:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 80082e4:	4a48      	ldr	r2, [pc, #288]	@ (8008408 <loadMenuTexts+0xec8>)
 80082e6:	e091      	b.n	800840c <loadMenuTexts+0xecc>
 80082e8:	20001220 	.word	0x20001220
 80082ec:	20000704 	.word	0x20000704
 80082f0:	20001234 	.word	0x20001234
 80082f4:	20000718 	.word	0x20000718
 80082f8:	20001248 	.word	0x20001248
 80082fc:	2000072c 	.word	0x2000072c
 8008300:	2000125c 	.word	0x2000125c
 8008304:	20000740 	.word	0x20000740
 8008308:	20001270 	.word	0x20001270
 800830c:	20000754 	.word	0x20000754
 8008310:	20001284 	.word	0x20001284
 8008314:	20000768 	.word	0x20000768
 8008318:	20001298 	.word	0x20001298
 800831c:	2000077c 	.word	0x2000077c
 8008320:	200012ac 	.word	0x200012ac
 8008324:	20000790 	.word	0x20000790
 8008328:	200012c0 	.word	0x200012c0
 800832c:	200007a4 	.word	0x200007a4
 8008330:	200012d4 	.word	0x200012d4
 8008334:	200007b8 	.word	0x200007b8
 8008338:	200012e8 	.word	0x200012e8
 800833c:	200007cc 	.word	0x200007cc
 8008340:	200012fc 	.word	0x200012fc
 8008344:	200007e0 	.word	0x200007e0
 8008348:	20001310 	.word	0x20001310
 800834c:	200007f4 	.word	0x200007f4
 8008350:	20001324 	.word	0x20001324
 8008354:	20000808 	.word	0x20000808
 8008358:	20001338 	.word	0x20001338
 800835c:	2000081c 	.word	0x2000081c
 8008360:	2000134c 	.word	0x2000134c
 8008364:	20000830 	.word	0x20000830
 8008368:	20001360 	.word	0x20001360
 800836c:	20000844 	.word	0x20000844
 8008370:	20001374 	.word	0x20001374
 8008374:	20000858 	.word	0x20000858
 8008378:	20001388 	.word	0x20001388
 800837c:	2000086c 	.word	0x2000086c
 8008380:	2000139c 	.word	0x2000139c
 8008384:	20000880 	.word	0x20000880
 8008388:	200013b0 	.word	0x200013b0
 800838c:	20000894 	.word	0x20000894
 8008390:	200013c4 	.word	0x200013c4
 8008394:	200008a8 	.word	0x200008a8
 8008398:	200013d8 	.word	0x200013d8
 800839c:	200008bc 	.word	0x200008bc
 80083a0:	200013ec 	.word	0x200013ec
 80083a4:	200008d0 	.word	0x200008d0
 80083a8:	20001400 	.word	0x20001400
 80083ac:	200008e4 	.word	0x200008e4
 80083b0:	20001414 	.word	0x20001414
 80083b4:	200008f8 	.word	0x200008f8
 80083b8:	20001428 	.word	0x20001428
 80083bc:	2000090c 	.word	0x2000090c
 80083c0:	2000143c 	.word	0x2000143c
 80083c4:	20000920 	.word	0x20000920
 80083c8:	20001450 	.word	0x20001450
 80083cc:	20000934 	.word	0x20000934
 80083d0:	20001464 	.word	0x20001464
 80083d4:	20000948 	.word	0x20000948
 80083d8:	20001478 	.word	0x20001478
 80083dc:	2000095c 	.word	0x2000095c
 80083e0:	2000148c 	.word	0x2000148c
 80083e4:	20000970 	.word	0x20000970
 80083e8:	200014a0 	.word	0x200014a0
 80083ec:	20000984 	.word	0x20000984
 80083f0:	200014b4 	.word	0x200014b4
 80083f4:	20000998 	.word	0x20000998
 80083f8:	200014c8 	.word	0x200014c8
 80083fc:	200009ac 	.word	0x200009ac
 8008400:	200014dc 	.word	0x200014dc
 8008404:	200009c0 	.word	0x200009c0
 8008408:	200014f0 	.word	0x200014f0
 800840c:	4bc7      	ldr	r3, [pc, #796]	@ (800872c <loadMenuTexts+0x11ec>)
 800840e:	4614      	mov	r4, r2
 8008410:	461d      	mov	r5, r3
 8008412:	6828      	ldr	r0, [r5, #0]
 8008414:	6869      	ldr	r1, [r5, #4]
 8008416:	68aa      	ldr	r2, [r5, #8]
 8008418:	68eb      	ldr	r3, [r5, #12]
 800841a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800841c:	7c2b      	ldrb	r3, [r5, #16]
 800841e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8008420:	4ac3      	ldr	r2, [pc, #780]	@ (8008730 <loadMenuTexts+0x11f0>)
 8008422:	4bc4      	ldr	r3, [pc, #784]	@ (8008734 <loadMenuTexts+0x11f4>)
 8008424:	4614      	mov	r4, r2
 8008426:	461d      	mov	r5, r3
 8008428:	6828      	ldr	r0, [r5, #0]
 800842a:	6869      	ldr	r1, [r5, #4]
 800842c:	68aa      	ldr	r2, [r5, #8]
 800842e:	68eb      	ldr	r3, [r5, #12]
 8008430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008432:	7c2b      	ldrb	r3, [r5, #16]
 8008434:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8008436:	4ac0      	ldr	r2, [pc, #768]	@ (8008738 <loadMenuTexts+0x11f8>)
 8008438:	4bc0      	ldr	r3, [pc, #768]	@ (800873c <loadMenuTexts+0x11fc>)
 800843a:	4614      	mov	r4, r2
 800843c:	461d      	mov	r5, r3
 800843e:	6828      	ldr	r0, [r5, #0]
 8008440:	6869      	ldr	r1, [r5, #4]
 8008442:	68aa      	ldr	r2, [r5, #8]
 8008444:	68eb      	ldr	r3, [r5, #12]
 8008446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008448:	7c2b      	ldrb	r3, [r5, #16]
 800844a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 800844c:	4abc      	ldr	r2, [pc, #752]	@ (8008740 <loadMenuTexts+0x1200>)
 800844e:	4bbd      	ldr	r3, [pc, #756]	@ (8008744 <loadMenuTexts+0x1204>)
 8008450:	4614      	mov	r4, r2
 8008452:	461d      	mov	r5, r3
 8008454:	6828      	ldr	r0, [r5, #0]
 8008456:	6869      	ldr	r1, [r5, #4]
 8008458:	68aa      	ldr	r2, [r5, #8]
 800845a:	68eb      	ldr	r3, [r5, #12]
 800845c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800845e:	7c2b      	ldrb	r3, [r5, #16]
 8008460:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8008462:	4ab9      	ldr	r2, [pc, #740]	@ (8008748 <loadMenuTexts+0x1208>)
 8008464:	4bb9      	ldr	r3, [pc, #740]	@ (800874c <loadMenuTexts+0x120c>)
 8008466:	4614      	mov	r4, r2
 8008468:	461d      	mov	r5, r3
 800846a:	6828      	ldr	r0, [r5, #0]
 800846c:	6869      	ldr	r1, [r5, #4]
 800846e:	68aa      	ldr	r2, [r5, #8]
 8008470:	68eb      	ldr	r3, [r5, #12]
 8008472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008474:	7c2b      	ldrb	r3, [r5, #16]
 8008476:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8008478:	4ab5      	ldr	r2, [pc, #724]	@ (8008750 <loadMenuTexts+0x1210>)
 800847a:	4bb6      	ldr	r3, [pc, #728]	@ (8008754 <loadMenuTexts+0x1214>)
 800847c:	4614      	mov	r4, r2
 800847e:	461d      	mov	r5, r3
 8008480:	6828      	ldr	r0, [r5, #0]
 8008482:	6869      	ldr	r1, [r5, #4]
 8008484:	68aa      	ldr	r2, [r5, #8]
 8008486:	68eb      	ldr	r3, [r5, #12]
 8008488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800848a:	7c2b      	ldrb	r3, [r5, #16]
 800848c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 800848e:	4ab2      	ldr	r2, [pc, #712]	@ (8008758 <loadMenuTexts+0x1218>)
 8008490:	4bb2      	ldr	r3, [pc, #712]	@ (800875c <loadMenuTexts+0x121c>)
 8008492:	4614      	mov	r4, r2
 8008494:	461d      	mov	r5, r3
 8008496:	6828      	ldr	r0, [r5, #0]
 8008498:	6869      	ldr	r1, [r5, #4]
 800849a:	68aa      	ldr	r2, [r5, #8]
 800849c:	68eb      	ldr	r3, [r5, #12]
 800849e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084a0:	7c2b      	ldrb	r3, [r5, #16]
 80084a2:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80084a4:	4aae      	ldr	r2, [pc, #696]	@ (8008760 <loadMenuTexts+0x1220>)
 80084a6:	4baf      	ldr	r3, [pc, #700]	@ (8008764 <loadMenuTexts+0x1224>)
 80084a8:	4614      	mov	r4, r2
 80084aa:	461d      	mov	r5, r3
 80084ac:	6828      	ldr	r0, [r5, #0]
 80084ae:	6869      	ldr	r1, [r5, #4]
 80084b0:	68aa      	ldr	r2, [r5, #8]
 80084b2:	68eb      	ldr	r3, [r5, #12]
 80084b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b6:	7c2b      	ldrb	r3, [r5, #16]
 80084b8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80084ba:	4aab      	ldr	r2, [pc, #684]	@ (8008768 <loadMenuTexts+0x1228>)
 80084bc:	4bab      	ldr	r3, [pc, #684]	@ (800876c <loadMenuTexts+0x122c>)
 80084be:	4614      	mov	r4, r2
 80084c0:	461d      	mov	r5, r3
 80084c2:	6828      	ldr	r0, [r5, #0]
 80084c4:	6869      	ldr	r1, [r5, #4]
 80084c6:	68aa      	ldr	r2, [r5, #8]
 80084c8:	68eb      	ldr	r3, [r5, #12]
 80084ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084cc:	7c2b      	ldrb	r3, [r5, #16]
 80084ce:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80084d0:	4aa7      	ldr	r2, [pc, #668]	@ (8008770 <loadMenuTexts+0x1230>)
 80084d2:	4ba8      	ldr	r3, [pc, #672]	@ (8008774 <loadMenuTexts+0x1234>)
 80084d4:	4614      	mov	r4, r2
 80084d6:	461d      	mov	r5, r3
 80084d8:	6828      	ldr	r0, [r5, #0]
 80084da:	6869      	ldr	r1, [r5, #4]
 80084dc:	68aa      	ldr	r2, [r5, #8]
 80084de:	68eb      	ldr	r3, [r5, #12]
 80084e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084e2:	7c2b      	ldrb	r3, [r5, #16]
 80084e4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80084e6:	4aa4      	ldr	r2, [pc, #656]	@ (8008778 <loadMenuTexts+0x1238>)
 80084e8:	4ba4      	ldr	r3, [pc, #656]	@ (800877c <loadMenuTexts+0x123c>)
 80084ea:	4614      	mov	r4, r2
 80084ec:	461d      	mov	r5, r3
 80084ee:	6828      	ldr	r0, [r5, #0]
 80084f0:	6869      	ldr	r1, [r5, #4]
 80084f2:	68aa      	ldr	r2, [r5, #8]
 80084f4:	68eb      	ldr	r3, [r5, #12]
 80084f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f8:	7c2b      	ldrb	r3, [r5, #16]
 80084fa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80084fc:	4aa0      	ldr	r2, [pc, #640]	@ (8008780 <loadMenuTexts+0x1240>)
 80084fe:	4ba1      	ldr	r3, [pc, #644]	@ (8008784 <loadMenuTexts+0x1244>)
 8008500:	4614      	mov	r4, r2
 8008502:	461d      	mov	r5, r3
 8008504:	6828      	ldr	r0, [r5, #0]
 8008506:	6869      	ldr	r1, [r5, #4]
 8008508:	68aa      	ldr	r2, [r5, #8]
 800850a:	68eb      	ldr	r3, [r5, #12]
 800850c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800850e:	7c2b      	ldrb	r3, [r5, #16]
 8008510:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8008512:	4a9d      	ldr	r2, [pc, #628]	@ (8008788 <loadMenuTexts+0x1248>)
 8008514:	4b9d      	ldr	r3, [pc, #628]	@ (800878c <loadMenuTexts+0x124c>)
 8008516:	4614      	mov	r4, r2
 8008518:	461d      	mov	r5, r3
 800851a:	6828      	ldr	r0, [r5, #0]
 800851c:	6869      	ldr	r1, [r5, #4]
 800851e:	68aa      	ldr	r2, [r5, #8]
 8008520:	68eb      	ldr	r3, [r5, #12]
 8008522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008524:	7c2b      	ldrb	r3, [r5, #16]
 8008526:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8008528:	4a99      	ldr	r2, [pc, #612]	@ (8008790 <loadMenuTexts+0x1250>)
 800852a:	4b9a      	ldr	r3, [pc, #616]	@ (8008794 <loadMenuTexts+0x1254>)
 800852c:	4614      	mov	r4, r2
 800852e:	461d      	mov	r5, r3
 8008530:	6828      	ldr	r0, [r5, #0]
 8008532:	6869      	ldr	r1, [r5, #4]
 8008534:	68aa      	ldr	r2, [r5, #8]
 8008536:	68eb      	ldr	r3, [r5, #12]
 8008538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800853a:	7c2b      	ldrb	r3, [r5, #16]
 800853c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800853e:	4a96      	ldr	r2, [pc, #600]	@ (8008798 <loadMenuTexts+0x1258>)
 8008540:	4b96      	ldr	r3, [pc, #600]	@ (800879c <loadMenuTexts+0x125c>)
 8008542:	4614      	mov	r4, r2
 8008544:	461d      	mov	r5, r3
 8008546:	6828      	ldr	r0, [r5, #0]
 8008548:	6869      	ldr	r1, [r5, #4]
 800854a:	68aa      	ldr	r2, [r5, #8]
 800854c:	68eb      	ldr	r3, [r5, #12]
 800854e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008550:	7c2b      	ldrb	r3, [r5, #16]
 8008552:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8008554:	4a92      	ldr	r2, [pc, #584]	@ (80087a0 <loadMenuTexts+0x1260>)
 8008556:	4b93      	ldr	r3, [pc, #588]	@ (80087a4 <loadMenuTexts+0x1264>)
 8008558:	4614      	mov	r4, r2
 800855a:	461d      	mov	r5, r3
 800855c:	6828      	ldr	r0, [r5, #0]
 800855e:	6869      	ldr	r1, [r5, #4]
 8008560:	68aa      	ldr	r2, [r5, #8]
 8008562:	68eb      	ldr	r3, [r5, #12]
 8008564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008566:	7c2b      	ldrb	r3, [r5, #16]
 8008568:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 800856a:	4a8f      	ldr	r2, [pc, #572]	@ (80087a8 <loadMenuTexts+0x1268>)
 800856c:	4b8f      	ldr	r3, [pc, #572]	@ (80087ac <loadMenuTexts+0x126c>)
 800856e:	4614      	mov	r4, r2
 8008570:	461d      	mov	r5, r3
 8008572:	6828      	ldr	r0, [r5, #0]
 8008574:	6869      	ldr	r1, [r5, #4]
 8008576:	68aa      	ldr	r2, [r5, #8]
 8008578:	68eb      	ldr	r3, [r5, #12]
 800857a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857c:	7c2b      	ldrb	r3, [r5, #16]
 800857e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8008580:	4a8b      	ldr	r2, [pc, #556]	@ (80087b0 <loadMenuTexts+0x1270>)
 8008582:	4b8c      	ldr	r3, [pc, #560]	@ (80087b4 <loadMenuTexts+0x1274>)
 8008584:	4614      	mov	r4, r2
 8008586:	461d      	mov	r5, r3
 8008588:	6828      	ldr	r0, [r5, #0]
 800858a:	6869      	ldr	r1, [r5, #4]
 800858c:	68aa      	ldr	r2, [r5, #8]
 800858e:	68eb      	ldr	r3, [r5, #12]
 8008590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008592:	7c2b      	ldrb	r3, [r5, #16]
 8008594:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8008596:	4a88      	ldr	r2, [pc, #544]	@ (80087b8 <loadMenuTexts+0x1278>)
 8008598:	4b88      	ldr	r3, [pc, #544]	@ (80087bc <loadMenuTexts+0x127c>)
 800859a:	4614      	mov	r4, r2
 800859c:	461d      	mov	r5, r3
 800859e:	6828      	ldr	r0, [r5, #0]
 80085a0:	6869      	ldr	r1, [r5, #4]
 80085a2:	68aa      	ldr	r2, [r5, #8]
 80085a4:	68eb      	ldr	r3, [r5, #12]
 80085a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085a8:	7c2b      	ldrb	r3, [r5, #16]
 80085aa:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80085ac:	4a84      	ldr	r2, [pc, #528]	@ (80087c0 <loadMenuTexts+0x1280>)
 80085ae:	4b85      	ldr	r3, [pc, #532]	@ (80087c4 <loadMenuTexts+0x1284>)
 80085b0:	4614      	mov	r4, r2
 80085b2:	461d      	mov	r5, r3
 80085b4:	6828      	ldr	r0, [r5, #0]
 80085b6:	6869      	ldr	r1, [r5, #4]
 80085b8:	68aa      	ldr	r2, [r5, #8]
 80085ba:	68eb      	ldr	r3, [r5, #12]
 80085bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085be:	7c2b      	ldrb	r3, [r5, #16]
 80085c0:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80085c2:	4a81      	ldr	r2, [pc, #516]	@ (80087c8 <loadMenuTexts+0x1288>)
 80085c4:	4b81      	ldr	r3, [pc, #516]	@ (80087cc <loadMenuTexts+0x128c>)
 80085c6:	4614      	mov	r4, r2
 80085c8:	461d      	mov	r5, r3
 80085ca:	6828      	ldr	r0, [r5, #0]
 80085cc:	6869      	ldr	r1, [r5, #4]
 80085ce:	68aa      	ldr	r2, [r5, #8]
 80085d0:	68eb      	ldr	r3, [r5, #12]
 80085d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085d4:	7c2b      	ldrb	r3, [r5, #16]
 80085d6:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80085d8:	4a7d      	ldr	r2, [pc, #500]	@ (80087d0 <loadMenuTexts+0x1290>)
 80085da:	4b7e      	ldr	r3, [pc, #504]	@ (80087d4 <loadMenuTexts+0x1294>)
 80085dc:	4614      	mov	r4, r2
 80085de:	461d      	mov	r5, r3
 80085e0:	6828      	ldr	r0, [r5, #0]
 80085e2:	6869      	ldr	r1, [r5, #4]
 80085e4:	68aa      	ldr	r2, [r5, #8]
 80085e6:	68eb      	ldr	r3, [r5, #12]
 80085e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085ea:	7c2b      	ldrb	r3, [r5, #16]
 80085ec:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80085ee:	4a7a      	ldr	r2, [pc, #488]	@ (80087d8 <loadMenuTexts+0x1298>)
 80085f0:	4b7a      	ldr	r3, [pc, #488]	@ (80087dc <loadMenuTexts+0x129c>)
 80085f2:	4614      	mov	r4, r2
 80085f4:	461d      	mov	r5, r3
 80085f6:	6828      	ldr	r0, [r5, #0]
 80085f8:	6869      	ldr	r1, [r5, #4]
 80085fa:	68aa      	ldr	r2, [r5, #8]
 80085fc:	68eb      	ldr	r3, [r5, #12]
 80085fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008600:	7c2b      	ldrb	r3, [r5, #16]
 8008602:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8008604:	4a76      	ldr	r2, [pc, #472]	@ (80087e0 <loadMenuTexts+0x12a0>)
 8008606:	4b77      	ldr	r3, [pc, #476]	@ (80087e4 <loadMenuTexts+0x12a4>)
 8008608:	4614      	mov	r4, r2
 800860a:	461d      	mov	r5, r3
 800860c:	6828      	ldr	r0, [r5, #0]
 800860e:	6869      	ldr	r1, [r5, #4]
 8008610:	68aa      	ldr	r2, [r5, #8]
 8008612:	68eb      	ldr	r3, [r5, #12]
 8008614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008616:	7c2b      	ldrb	r3, [r5, #16]
 8008618:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 800861a:	4a73      	ldr	r2, [pc, #460]	@ (80087e8 <loadMenuTexts+0x12a8>)
 800861c:	4b73      	ldr	r3, [pc, #460]	@ (80087ec <loadMenuTexts+0x12ac>)
 800861e:	4614      	mov	r4, r2
 8008620:	461d      	mov	r5, r3
 8008622:	6828      	ldr	r0, [r5, #0]
 8008624:	6869      	ldr	r1, [r5, #4]
 8008626:	68aa      	ldr	r2, [r5, #8]
 8008628:	68eb      	ldr	r3, [r5, #12]
 800862a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800862c:	7c2b      	ldrb	r3, [r5, #16]
 800862e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008630:	4a6f      	ldr	r2, [pc, #444]	@ (80087f0 <loadMenuTexts+0x12b0>)
 8008632:	4b70      	ldr	r3, [pc, #448]	@ (80087f4 <loadMenuTexts+0x12b4>)
 8008634:	4614      	mov	r4, r2
 8008636:	461d      	mov	r5, r3
 8008638:	6828      	ldr	r0, [r5, #0]
 800863a:	6869      	ldr	r1, [r5, #4]
 800863c:	68aa      	ldr	r2, [r5, #8]
 800863e:	68eb      	ldr	r3, [r5, #12]
 8008640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008642:	7c2b      	ldrb	r3, [r5, #16]
 8008644:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8008646:	4a6c      	ldr	r2, [pc, #432]	@ (80087f8 <loadMenuTexts+0x12b8>)
 8008648:	4b6c      	ldr	r3, [pc, #432]	@ (80087fc <loadMenuTexts+0x12bc>)
 800864a:	4614      	mov	r4, r2
 800864c:	461d      	mov	r5, r3
 800864e:	6828      	ldr	r0, [r5, #0]
 8008650:	6869      	ldr	r1, [r5, #4]
 8008652:	68aa      	ldr	r2, [r5, #8]
 8008654:	68eb      	ldr	r3, [r5, #12]
 8008656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008658:	7c2b      	ldrb	r3, [r5, #16]
 800865a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 800865c:	4a68      	ldr	r2, [pc, #416]	@ (8008800 <loadMenuTexts+0x12c0>)
 800865e:	4b69      	ldr	r3, [pc, #420]	@ (8008804 <loadMenuTexts+0x12c4>)
 8008660:	4614      	mov	r4, r2
 8008662:	461d      	mov	r5, r3
 8008664:	6828      	ldr	r0, [r5, #0]
 8008666:	6869      	ldr	r1, [r5, #4]
 8008668:	68aa      	ldr	r2, [r5, #8]
 800866a:	68eb      	ldr	r3, [r5, #12]
 800866c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800866e:	7c2b      	ldrb	r3, [r5, #16]
 8008670:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8008672:	4a65      	ldr	r2, [pc, #404]	@ (8008808 <loadMenuTexts+0x12c8>)
 8008674:	4b65      	ldr	r3, [pc, #404]	@ (800880c <loadMenuTexts+0x12cc>)
 8008676:	4614      	mov	r4, r2
 8008678:	461d      	mov	r5, r3
 800867a:	6828      	ldr	r0, [r5, #0]
 800867c:	6869      	ldr	r1, [r5, #4]
 800867e:	68aa      	ldr	r2, [r5, #8]
 8008680:	68eb      	ldr	r3, [r5, #12]
 8008682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008684:	7c2b      	ldrb	r3, [r5, #16]
 8008686:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8008688:	4a61      	ldr	r2, [pc, #388]	@ (8008810 <loadMenuTexts+0x12d0>)
 800868a:	4b62      	ldr	r3, [pc, #392]	@ (8008814 <loadMenuTexts+0x12d4>)
 800868c:	4614      	mov	r4, r2
 800868e:	461d      	mov	r5, r3
 8008690:	6828      	ldr	r0, [r5, #0]
 8008692:	6869      	ldr	r1, [r5, #4]
 8008694:	68aa      	ldr	r2, [r5, #8]
 8008696:	68eb      	ldr	r3, [r5, #12]
 8008698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800869a:	7c2b      	ldrb	r3, [r5, #16]
 800869c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800869e:	4a5e      	ldr	r2, [pc, #376]	@ (8008818 <loadMenuTexts+0x12d8>)
 80086a0:	4b5e      	ldr	r3, [pc, #376]	@ (800881c <loadMenuTexts+0x12dc>)
 80086a2:	4614      	mov	r4, r2
 80086a4:	461d      	mov	r5, r3
 80086a6:	6828      	ldr	r0, [r5, #0]
 80086a8:	6869      	ldr	r1, [r5, #4]
 80086aa:	68aa      	ldr	r2, [r5, #8]
 80086ac:	68eb      	ldr	r3, [r5, #12]
 80086ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086b0:	7c2b      	ldrb	r3, [r5, #16]
 80086b2:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80086b4:	4a5a      	ldr	r2, [pc, #360]	@ (8008820 <loadMenuTexts+0x12e0>)
 80086b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008824 <loadMenuTexts+0x12e4>)
 80086b8:	4614      	mov	r4, r2
 80086ba:	461d      	mov	r5, r3
 80086bc:	6828      	ldr	r0, [r5, #0]
 80086be:	6869      	ldr	r1, [r5, #4]
 80086c0:	68aa      	ldr	r2, [r5, #8]
 80086c2:	68eb      	ldr	r3, [r5, #12]
 80086c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086c6:	7c2b      	ldrb	r3, [r5, #16]
 80086c8:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80086ca:	4a57      	ldr	r2, [pc, #348]	@ (8008828 <loadMenuTexts+0x12e8>)
 80086cc:	4b57      	ldr	r3, [pc, #348]	@ (800882c <loadMenuTexts+0x12ec>)
 80086ce:	4614      	mov	r4, r2
 80086d0:	461d      	mov	r5, r3
 80086d2:	6828      	ldr	r0, [r5, #0]
 80086d4:	6869      	ldr	r1, [r5, #4]
 80086d6:	68aa      	ldr	r2, [r5, #8]
 80086d8:	68eb      	ldr	r3, [r5, #12]
 80086da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086dc:	7c2b      	ldrb	r3, [r5, #16]
 80086de:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80086e0:	4a53      	ldr	r2, [pc, #332]	@ (8008830 <loadMenuTexts+0x12f0>)
 80086e2:	4b54      	ldr	r3, [pc, #336]	@ (8008834 <loadMenuTexts+0x12f4>)
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
 80086e8:	6828      	ldr	r0, [r5, #0]
 80086ea:	6869      	ldr	r1, [r5, #4]
 80086ec:	68aa      	ldr	r2, [r5, #8]
 80086ee:	68eb      	ldr	r3, [r5, #12]
 80086f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086f2:	7c2b      	ldrb	r3, [r5, #16]
 80086f4:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80086f6:	4a50      	ldr	r2, [pc, #320]	@ (8008838 <loadMenuTexts+0x12f8>)
 80086f8:	4b50      	ldr	r3, [pc, #320]	@ (800883c <loadMenuTexts+0x12fc>)
 80086fa:	4614      	mov	r4, r2
 80086fc:	461d      	mov	r5, r3
 80086fe:	6828      	ldr	r0, [r5, #0]
 8008700:	6869      	ldr	r1, [r5, #4]
 8008702:	68aa      	ldr	r2, [r5, #8]
 8008704:	68eb      	ldr	r3, [r5, #12]
 8008706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008708:	7c2b      	ldrb	r3, [r5, #16]
 800870a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 800870c:	4a4c      	ldr	r2, [pc, #304]	@ (8008840 <loadMenuTexts+0x1300>)
 800870e:	4b4d      	ldr	r3, [pc, #308]	@ (8008844 <loadMenuTexts+0x1304>)
 8008710:	4614      	mov	r4, r2
 8008712:	461d      	mov	r5, r3
 8008714:	6828      	ldr	r0, [r5, #0]
 8008716:	6869      	ldr	r1, [r5, #4]
 8008718:	68aa      	ldr	r2, [r5, #8]
 800871a:	68eb      	ldr	r3, [r5, #12]
 800871c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800871e:	7c2b      	ldrb	r3, [r5, #16]
 8008720:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8008722:	4a49      	ldr	r2, [pc, #292]	@ (8008848 <loadMenuTexts+0x1308>)
 8008724:	4b49      	ldr	r3, [pc, #292]	@ (800884c <loadMenuTexts+0x130c>)
 8008726:	4614      	mov	r4, r2
 8008728:	461d      	mov	r5, r3
 800872a:	e091      	b.n	8008850 <loadMenuTexts+0x1310>
 800872c:	200009d4 	.word	0x200009d4
 8008730:	20001504 	.word	0x20001504
 8008734:	200009e8 	.word	0x200009e8
 8008738:	20001518 	.word	0x20001518
 800873c:	200009fc 	.word	0x200009fc
 8008740:	2000152c 	.word	0x2000152c
 8008744:	20000a10 	.word	0x20000a10
 8008748:	20001540 	.word	0x20001540
 800874c:	20000a24 	.word	0x20000a24
 8008750:	20001554 	.word	0x20001554
 8008754:	20000a38 	.word	0x20000a38
 8008758:	20001568 	.word	0x20001568
 800875c:	20000a4c 	.word	0x20000a4c
 8008760:	2000157c 	.word	0x2000157c
 8008764:	20000a60 	.word	0x20000a60
 8008768:	20001590 	.word	0x20001590
 800876c:	20000a74 	.word	0x20000a74
 8008770:	200015a4 	.word	0x200015a4
 8008774:	20000a88 	.word	0x20000a88
 8008778:	200015b8 	.word	0x200015b8
 800877c:	20000a9c 	.word	0x20000a9c
 8008780:	200015cc 	.word	0x200015cc
 8008784:	20000ab0 	.word	0x20000ab0
 8008788:	200015e0 	.word	0x200015e0
 800878c:	20000ac4 	.word	0x20000ac4
 8008790:	200015f4 	.word	0x200015f4
 8008794:	20000ad8 	.word	0x20000ad8
 8008798:	20001608 	.word	0x20001608
 800879c:	20000aec 	.word	0x20000aec
 80087a0:	2000161c 	.word	0x2000161c
 80087a4:	20000b00 	.word	0x20000b00
 80087a8:	20001630 	.word	0x20001630
 80087ac:	20000b14 	.word	0x20000b14
 80087b0:	20001644 	.word	0x20001644
 80087b4:	20000b28 	.word	0x20000b28
 80087b8:	20001658 	.word	0x20001658
 80087bc:	20000b3c 	.word	0x20000b3c
 80087c0:	2000166c 	.word	0x2000166c
 80087c4:	20000b50 	.word	0x20000b50
 80087c8:	20001680 	.word	0x20001680
 80087cc:	20000b64 	.word	0x20000b64
 80087d0:	20001694 	.word	0x20001694
 80087d4:	20000b78 	.word	0x20000b78
 80087d8:	200016a8 	.word	0x200016a8
 80087dc:	20000b8c 	.word	0x20000b8c
 80087e0:	200016bc 	.word	0x200016bc
 80087e4:	20000ba0 	.word	0x20000ba0
 80087e8:	200016d0 	.word	0x200016d0
 80087ec:	20000bb4 	.word	0x20000bb4
 80087f0:	200016e4 	.word	0x200016e4
 80087f4:	20000bc8 	.word	0x20000bc8
 80087f8:	200016f8 	.word	0x200016f8
 80087fc:	20000bdc 	.word	0x20000bdc
 8008800:	2000170c 	.word	0x2000170c
 8008804:	20000bf0 	.word	0x20000bf0
 8008808:	20001720 	.word	0x20001720
 800880c:	20000c04 	.word	0x20000c04
 8008810:	20001734 	.word	0x20001734
 8008814:	20000c18 	.word	0x20000c18
 8008818:	20001748 	.word	0x20001748
 800881c:	20000c2c 	.word	0x20000c2c
 8008820:	2000175c 	.word	0x2000175c
 8008824:	20000c40 	.word	0x20000c40
 8008828:	20001770 	.word	0x20001770
 800882c:	20000c54 	.word	0x20000c54
 8008830:	20001784 	.word	0x20001784
 8008834:	20000c68 	.word	0x20000c68
 8008838:	20001798 	.word	0x20001798
 800883c:	20000cf4 	.word	0x20000cf4
 8008840:	200017ac 	.word	0x200017ac
 8008844:	20000d08 	.word	0x20000d08
 8008848:	200017c0 	.word	0x200017c0
 800884c:	20000ccc 	.word	0x20000ccc
 8008850:	6828      	ldr	r0, [r5, #0]
 8008852:	6869      	ldr	r1, [r5, #4]
 8008854:	68aa      	ldr	r2, [r5, #8]
 8008856:	68eb      	ldr	r3, [r5, #12]
 8008858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800885a:	7c2b      	ldrb	r3, [r5, #16]
 800885c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800885e:	4a5b      	ldr	r2, [pc, #364]	@ (80089cc <loadMenuTexts+0x148c>)
 8008860:	4b5b      	ldr	r3, [pc, #364]	@ (80089d0 <loadMenuTexts+0x1490>)
 8008862:	4614      	mov	r4, r2
 8008864:	461d      	mov	r5, r3
 8008866:	6828      	ldr	r0, [r5, #0]
 8008868:	6869      	ldr	r1, [r5, #4]
 800886a:	68aa      	ldr	r2, [r5, #8]
 800886c:	68eb      	ldr	r3, [r5, #12]
 800886e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008870:	7c2b      	ldrb	r3, [r5, #16]
 8008872:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8008874:	4a57      	ldr	r2, [pc, #348]	@ (80089d4 <loadMenuTexts+0x1494>)
 8008876:	4b58      	ldr	r3, [pc, #352]	@ (80089d8 <loadMenuTexts+0x1498>)
 8008878:	4614      	mov	r4, r2
 800887a:	461d      	mov	r5, r3
 800887c:	6828      	ldr	r0, [r5, #0]
 800887e:	6869      	ldr	r1, [r5, #4]
 8008880:	68aa      	ldr	r2, [r5, #8]
 8008882:	68eb      	ldr	r3, [r5, #12]
 8008884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008886:	7c2b      	ldrb	r3, [r5, #16]
 8008888:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800888a:	4a54      	ldr	r2, [pc, #336]	@ (80089dc <loadMenuTexts+0x149c>)
 800888c:	4b54      	ldr	r3, [pc, #336]	@ (80089e0 <loadMenuTexts+0x14a0>)
 800888e:	4614      	mov	r4, r2
 8008890:	461d      	mov	r5, r3
 8008892:	6828      	ldr	r0, [r5, #0]
 8008894:	6869      	ldr	r1, [r5, #4]
 8008896:	68aa      	ldr	r2, [r5, #8]
 8008898:	68eb      	ldr	r3, [r5, #12]
 800889a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800889c:	7c2b      	ldrb	r3, [r5, #16]
 800889e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80088a0:	4a50      	ldr	r2, [pc, #320]	@ (80089e4 <loadMenuTexts+0x14a4>)
 80088a2:	4b51      	ldr	r3, [pc, #324]	@ (80089e8 <loadMenuTexts+0x14a8>)
 80088a4:	4614      	mov	r4, r2
 80088a6:	461d      	mov	r5, r3
 80088a8:	6828      	ldr	r0, [r5, #0]
 80088aa:	6869      	ldr	r1, [r5, #4]
 80088ac:	68aa      	ldr	r2, [r5, #8]
 80088ae:	68eb      	ldr	r3, [r5, #12]
 80088b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b2:	7c2b      	ldrb	r3, [r5, #16]
 80088b4:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80088b6:	4a4d      	ldr	r2, [pc, #308]	@ (80089ec <loadMenuTexts+0x14ac>)
 80088b8:	4b4d      	ldr	r3, [pc, #308]	@ (80089f0 <loadMenuTexts+0x14b0>)
 80088ba:	4614      	mov	r4, r2
 80088bc:	461d      	mov	r5, r3
 80088be:	6828      	ldr	r0, [r5, #0]
 80088c0:	6869      	ldr	r1, [r5, #4]
 80088c2:	68aa      	ldr	r2, [r5, #8]
 80088c4:	68eb      	ldr	r3, [r5, #12]
 80088c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088c8:	7c2b      	ldrb	r3, [r5, #16]
 80088ca:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80088cc:	4a49      	ldr	r2, [pc, #292]	@ (80089f4 <loadMenuTexts+0x14b4>)
 80088ce:	4b4a      	ldr	r3, [pc, #296]	@ (80089f8 <loadMenuTexts+0x14b8>)
 80088d0:	4614      	mov	r4, r2
 80088d2:	461d      	mov	r5, r3
 80088d4:	6828      	ldr	r0, [r5, #0]
 80088d6:	6869      	ldr	r1, [r5, #4]
 80088d8:	68aa      	ldr	r2, [r5, #8]
 80088da:	68eb      	ldr	r3, [r5, #12]
 80088dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088de:	7c2b      	ldrb	r3, [r5, #16]
 80088e0:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80088e2:	4a46      	ldr	r2, [pc, #280]	@ (80089fc <loadMenuTexts+0x14bc>)
 80088e4:	4b46      	ldr	r3, [pc, #280]	@ (8008a00 <loadMenuTexts+0x14c0>)
 80088e6:	4614      	mov	r4, r2
 80088e8:	461d      	mov	r5, r3
 80088ea:	6828      	ldr	r0, [r5, #0]
 80088ec:	6869      	ldr	r1, [r5, #4]
 80088ee:	68aa      	ldr	r2, [r5, #8]
 80088f0:	68eb      	ldr	r3, [r5, #12]
 80088f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f4:	7c2b      	ldrb	r3, [r5, #16]
 80088f6:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80088f8:	4a42      	ldr	r2, [pc, #264]	@ (8008a04 <loadMenuTexts+0x14c4>)
 80088fa:	4b43      	ldr	r3, [pc, #268]	@ (8008a08 <loadMenuTexts+0x14c8>)
 80088fc:	4614      	mov	r4, r2
 80088fe:	461d      	mov	r5, r3
 8008900:	6828      	ldr	r0, [r5, #0]
 8008902:	6869      	ldr	r1, [r5, #4]
 8008904:	68aa      	ldr	r2, [r5, #8]
 8008906:	68eb      	ldr	r3, [r5, #12]
 8008908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800890a:	7c2b      	ldrb	r3, [r5, #16]
 800890c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800890e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a0c <loadMenuTexts+0x14cc>)
 8008910:	4b3f      	ldr	r3, [pc, #252]	@ (8008a10 <loadMenuTexts+0x14d0>)
 8008912:	4614      	mov	r4, r2
 8008914:	461d      	mov	r5, r3
 8008916:	6828      	ldr	r0, [r5, #0]
 8008918:	6869      	ldr	r1, [r5, #4]
 800891a:	68aa      	ldr	r2, [r5, #8]
 800891c:	68eb      	ldr	r3, [r5, #12]
 800891e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008920:	7c2b      	ldrb	r3, [r5, #16]
 8008922:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8008924:	4a3b      	ldr	r2, [pc, #236]	@ (8008a14 <loadMenuTexts+0x14d4>)
 8008926:	4b3c      	ldr	r3, [pc, #240]	@ (8008a18 <loadMenuTexts+0x14d8>)
 8008928:	4614      	mov	r4, r2
 800892a:	461d      	mov	r5, r3
 800892c:	6828      	ldr	r0, [r5, #0]
 800892e:	6869      	ldr	r1, [r5, #4]
 8008930:	68aa      	ldr	r2, [r5, #8]
 8008932:	68eb      	ldr	r3, [r5, #12]
 8008934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008936:	7c2b      	ldrb	r3, [r5, #16]
 8008938:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 800893a:	4a38      	ldr	r2, [pc, #224]	@ (8008a1c <loadMenuTexts+0x14dc>)
 800893c:	4b38      	ldr	r3, [pc, #224]	@ (8008a20 <loadMenuTexts+0x14e0>)
 800893e:	4614      	mov	r4, r2
 8008940:	461d      	mov	r5, r3
 8008942:	6828      	ldr	r0, [r5, #0]
 8008944:	6869      	ldr	r1, [r5, #4]
 8008946:	68aa      	ldr	r2, [r5, #8]
 8008948:	68eb      	ldr	r3, [r5, #12]
 800894a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800894c:	7c2b      	ldrb	r3, [r5, #16]
 800894e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8008950:	4a34      	ldr	r2, [pc, #208]	@ (8008a24 <loadMenuTexts+0x14e4>)
 8008952:	4b35      	ldr	r3, [pc, #212]	@ (8008a28 <loadMenuTexts+0x14e8>)
 8008954:	4614      	mov	r4, r2
 8008956:	461d      	mov	r5, r3
 8008958:	6828      	ldr	r0, [r5, #0]
 800895a:	6869      	ldr	r1, [r5, #4]
 800895c:	68aa      	ldr	r2, [r5, #8]
 800895e:	68eb      	ldr	r3, [r5, #12]
 8008960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008962:	7c2b      	ldrb	r3, [r5, #16]
 8008964:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8008966:	4a31      	ldr	r2, [pc, #196]	@ (8008a2c <loadMenuTexts+0x14ec>)
 8008968:	4b31      	ldr	r3, [pc, #196]	@ (8008a30 <loadMenuTexts+0x14f0>)
 800896a:	4614      	mov	r4, r2
 800896c:	461d      	mov	r5, r3
 800896e:	6828      	ldr	r0, [r5, #0]
 8008970:	6869      	ldr	r1, [r5, #4]
 8008972:	68aa      	ldr	r2, [r5, #8]
 8008974:	68eb      	ldr	r3, [r5, #12]
 8008976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008978:	7c2b      	ldrb	r3, [r5, #16]
 800897a:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 800897c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a34 <loadMenuTexts+0x14f4>)
 800897e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a38 <loadMenuTexts+0x14f8>)
 8008980:	4614      	mov	r4, r2
 8008982:	461d      	mov	r5, r3
 8008984:	6828      	ldr	r0, [r5, #0]
 8008986:	6869      	ldr	r1, [r5, #4]
 8008988:	68aa      	ldr	r2, [r5, #8]
 800898a:	68eb      	ldr	r3, [r5, #12]
 800898c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800898e:	7c2b      	ldrb	r3, [r5, #16]
 8008990:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8008992:	4a2a      	ldr	r2, [pc, #168]	@ (8008a3c <loadMenuTexts+0x14fc>)
 8008994:	4b2a      	ldr	r3, [pc, #168]	@ (8008a40 <loadMenuTexts+0x1500>)
 8008996:	4614      	mov	r4, r2
 8008998:	461d      	mov	r5, r3
 800899a:	6828      	ldr	r0, [r5, #0]
 800899c:	6869      	ldr	r1, [r5, #4]
 800899e:	68aa      	ldr	r2, [r5, #8]
 80089a0:	68eb      	ldr	r3, [r5, #12]
 80089a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a4:	7c2b      	ldrb	r3, [r5, #16]
 80089a6:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80089a8:	4a26      	ldr	r2, [pc, #152]	@ (8008a44 <loadMenuTexts+0x1504>)
 80089aa:	4b27      	ldr	r3, [pc, #156]	@ (8008a48 <loadMenuTexts+0x1508>)
 80089ac:	4614      	mov	r4, r2
 80089ae:	461d      	mov	r5, r3
 80089b0:	6828      	ldr	r0, [r5, #0]
 80089b2:	6869      	ldr	r1, [r5, #4]
 80089b4:	68aa      	ldr	r2, [r5, #8]
 80089b6:	68eb      	ldr	r3, [r5, #12]
 80089b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ba:	7c2b      	ldrb	r3, [r5, #16]
 80089bc:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80089be:	f000 f845 	bl	8008a4c <menuVariableFinisher>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bdb0      	pop	{r4, r5, r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200017d4 	.word	0x200017d4
 80089d0:	20000ce0 	.word	0x20000ce0
 80089d4:	200017e8 	.word	0x200017e8
 80089d8:	20000d44 	.word	0x20000d44
 80089dc:	200017fc 	.word	0x200017fc
 80089e0:	20000d58 	.word	0x20000d58
 80089e4:	20001810 	.word	0x20001810
 80089e8:	20000d94 	.word	0x20000d94
 80089ec:	20001824 	.word	0x20001824
 80089f0:	20000da8 	.word	0x20000da8
 80089f4:	20001838 	.word	0x20001838
 80089f8:	20000de4 	.word	0x20000de4
 80089fc:	2000184c 	.word	0x2000184c
 8008a00:	20000df8 	.word	0x20000df8
 8008a04:	20001860 	.word	0x20001860
 8008a08:	20000e20 	.word	0x20000e20
 8008a0c:	20001874 	.word	0x20001874
 8008a10:	20000e48 	.word	0x20000e48
 8008a14:	20001888 	.word	0x20001888
 8008a18:	20000e70 	.word	0x20000e70
 8008a1c:	2000189c 	.word	0x2000189c
 8008a20:	20000e98 	.word	0x20000e98
 8008a24:	200018b0 	.word	0x200018b0
 8008a28:	20000ec0 	.word	0x20000ec0
 8008a2c:	200018c4 	.word	0x200018c4
 8008a30:	20000ee8 	.word	0x20000ee8
 8008a34:	200018d8 	.word	0x200018d8
 8008a38:	20000f10 	.word	0x20000f10
 8008a3c:	200018ec 	.word	0x200018ec
 8008a40:	20000f38 	.word	0x20000f38
 8008a44:	20001900 	.word	0x20001900
 8008a48:	20000f60 	.word	0x20000f60

08008a4c <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8008a50:	4b99      	ldr	r3, [pc, #612]	@ (8008cb8 <menuVariableFinisher+0x26c>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8008a56:	4b99      	ldr	r3, [pc, #612]	@ (8008cbc <menuVariableFinisher+0x270>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8008a5c:	4b98      	ldr	r3, [pc, #608]	@ (8008cc0 <menuVariableFinisher+0x274>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8008a62:	4b98      	ldr	r3, [pc, #608]	@ (8008cc4 <menuVariableFinisher+0x278>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8008a68:	4b97      	ldr	r3, [pc, #604]	@ (8008cc8 <menuVariableFinisher+0x27c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8008a6e:	4b97      	ldr	r3, [pc, #604]	@ (8008ccc <menuVariableFinisher+0x280>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8008a74:	4b96      	ldr	r3, [pc, #600]	@ (8008cd0 <menuVariableFinisher+0x284>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8008a7a:	4b96      	ldr	r3, [pc, #600]	@ (8008cd4 <menuVariableFinisher+0x288>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8008a80:	4b95      	ldr	r3, [pc, #596]	@ (8008cd8 <menuVariableFinisher+0x28c>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8008a86:	4b95      	ldr	r3, [pc, #596]	@ (8008cdc <menuVariableFinisher+0x290>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8008a8c:	4b94      	ldr	r3, [pc, #592]	@ (8008ce0 <menuVariableFinisher+0x294>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8008a92:	4b94      	ldr	r3, [pc, #592]	@ (8008ce4 <menuVariableFinisher+0x298>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8008a98:	4b93      	ldr	r3, [pc, #588]	@ (8008ce8 <menuVariableFinisher+0x29c>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8008a9e:	4b93      	ldr	r3, [pc, #588]	@ (8008cec <menuVariableFinisher+0x2a0>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8008aa4:	4b92      	ldr	r3, [pc, #584]	@ (8008cf0 <menuVariableFinisher+0x2a4>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8008aaa:	4b92      	ldr	r3, [pc, #584]	@ (8008cf4 <menuVariableFinisher+0x2a8>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8008ab0:	4b91      	ldr	r3, [pc, #580]	@ (8008cf8 <menuVariableFinisher+0x2ac>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8008ab6:	4b91      	ldr	r3, [pc, #580]	@ (8008cfc <menuVariableFinisher+0x2b0>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8008abc:	4b90      	ldr	r3, [pc, #576]	@ (8008d00 <menuVariableFinisher+0x2b4>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8008ac2:	4b90      	ldr	r3, [pc, #576]	@ (8008d04 <menuVariableFinisher+0x2b8>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8008ac8:	4b8f      	ldr	r3, [pc, #572]	@ (8008d08 <menuVariableFinisher+0x2bc>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8008ace:	4b8f      	ldr	r3, [pc, #572]	@ (8008d0c <menuVariableFinisher+0x2c0>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8008ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8008d10 <menuVariableFinisher+0x2c4>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8008ada:	4b8e      	ldr	r3, [pc, #568]	@ (8008d14 <menuVariableFinisher+0x2c8>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8008ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8008d18 <menuVariableFinisher+0x2cc>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8008ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8008d1c <menuVariableFinisher+0x2d0>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8008aec:	4b8c      	ldr	r3, [pc, #560]	@ (8008d20 <menuVariableFinisher+0x2d4>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8008af2:	4b8c      	ldr	r3, [pc, #560]	@ (8008d24 <menuVariableFinisher+0x2d8>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8008af8:	4b8b      	ldr	r3, [pc, #556]	@ (8008d28 <menuVariableFinisher+0x2dc>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8008afe:	4b8b      	ldr	r3, [pc, #556]	@ (8008d2c <menuVariableFinisher+0x2e0>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8008b04:	4b8a      	ldr	r3, [pc, #552]	@ (8008d30 <menuVariableFinisher+0x2e4>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8008b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8008d34 <menuVariableFinisher+0x2e8>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8008b10:	4b89      	ldr	r3, [pc, #548]	@ (8008d38 <menuVariableFinisher+0x2ec>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8008b16:	4b89      	ldr	r3, [pc, #548]	@ (8008d3c <menuVariableFinisher+0x2f0>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8008b1c:	4b88      	ldr	r3, [pc, #544]	@ (8008d40 <menuVariableFinisher+0x2f4>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8008b22:	4b88      	ldr	r3, [pc, #544]	@ (8008d44 <menuVariableFinisher+0x2f8>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8008b28:	4b87      	ldr	r3, [pc, #540]	@ (8008d48 <menuVariableFinisher+0x2fc>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8008b2e:	4b87      	ldr	r3, [pc, #540]	@ (8008d4c <menuVariableFinisher+0x300>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8008b34:	4b86      	ldr	r3, [pc, #536]	@ (8008d50 <menuVariableFinisher+0x304>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8008b3a:	4b86      	ldr	r3, [pc, #536]	@ (8008d54 <menuVariableFinisher+0x308>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8008b40:	4b85      	ldr	r3, [pc, #532]	@ (8008d58 <menuVariableFinisher+0x30c>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8008b46:	4b85      	ldr	r3, [pc, #532]	@ (8008d5c <menuVariableFinisher+0x310>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8008b4c:	4b84      	ldr	r3, [pc, #528]	@ (8008d60 <menuVariableFinisher+0x314>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8008b52:	4b84      	ldr	r3, [pc, #528]	@ (8008d64 <menuVariableFinisher+0x318>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8008b58:	4b83      	ldr	r3, [pc, #524]	@ (8008d68 <menuVariableFinisher+0x31c>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8008b5e:	4b83      	ldr	r3, [pc, #524]	@ (8008d6c <menuVariableFinisher+0x320>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8008b64:	4b82      	ldr	r3, [pc, #520]	@ (8008d70 <menuVariableFinisher+0x324>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8008b6a:	4b82      	ldr	r3, [pc, #520]	@ (8008d74 <menuVariableFinisher+0x328>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8008b70:	4b81      	ldr	r3, [pc, #516]	@ (8008d78 <menuVariableFinisher+0x32c>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8008b76:	4b81      	ldr	r3, [pc, #516]	@ (8008d7c <menuVariableFinisher+0x330>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8008b7c:	4b80      	ldr	r3, [pc, #512]	@ (8008d80 <menuVariableFinisher+0x334>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8008b82:	4b80      	ldr	r3, [pc, #512]	@ (8008d84 <menuVariableFinisher+0x338>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8008b88:	4b7f      	ldr	r3, [pc, #508]	@ (8008d88 <menuVariableFinisher+0x33c>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8008b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d8c <menuVariableFinisher+0x340>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8008b94:	4b7e      	ldr	r3, [pc, #504]	@ (8008d90 <menuVariableFinisher+0x344>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8008b9a:	4b7e      	ldr	r3, [pc, #504]	@ (8008d94 <menuVariableFinisher+0x348>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8008ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8008d98 <menuVariableFinisher+0x34c>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8008ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8008d9c <menuVariableFinisher+0x350>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8008bac:	4b7c      	ldr	r3, [pc, #496]	@ (8008da0 <menuVariableFinisher+0x354>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8008bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8008da4 <menuVariableFinisher+0x358>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8008bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8008da8 <menuVariableFinisher+0x35c>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8008bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8008dac <menuVariableFinisher+0x360>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8008bc4:	4b7a      	ldr	r3, [pc, #488]	@ (8008db0 <menuVariableFinisher+0x364>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8008bca:	4b7a      	ldr	r3, [pc, #488]	@ (8008db4 <menuVariableFinisher+0x368>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8008bd0:	4b79      	ldr	r3, [pc, #484]	@ (8008db8 <menuVariableFinisher+0x36c>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8008bd6:	4b79      	ldr	r3, [pc, #484]	@ (8008dbc <menuVariableFinisher+0x370>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8008bdc:	4b78      	ldr	r3, [pc, #480]	@ (8008dc0 <menuVariableFinisher+0x374>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8008be2:	4b78      	ldr	r3, [pc, #480]	@ (8008dc4 <menuVariableFinisher+0x378>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8008be8:	4b77      	ldr	r3, [pc, #476]	@ (8008dc8 <menuVariableFinisher+0x37c>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8008bee:	4b77      	ldr	r3, [pc, #476]	@ (8008dcc <menuVariableFinisher+0x380>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8008bf4:	4b76      	ldr	r3, [pc, #472]	@ (8008dd0 <menuVariableFinisher+0x384>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8008bfa:	4b76      	ldr	r3, [pc, #472]	@ (8008dd4 <menuVariableFinisher+0x388>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8008c00:	4b75      	ldr	r3, [pc, #468]	@ (8008dd8 <menuVariableFinisher+0x38c>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8008c06:	4b75      	ldr	r3, [pc, #468]	@ (8008ddc <menuVariableFinisher+0x390>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8008c0c:	4b74      	ldr	r3, [pc, #464]	@ (8008de0 <menuVariableFinisher+0x394>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8008c12:	4b74      	ldr	r3, [pc, #464]	@ (8008de4 <menuVariableFinisher+0x398>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8008c18:	4b73      	ldr	r3, [pc, #460]	@ (8008de8 <menuVariableFinisher+0x39c>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8008c1e:	4b73      	ldr	r3, [pc, #460]	@ (8008dec <menuVariableFinisher+0x3a0>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008c24:	4b72      	ldr	r3, [pc, #456]	@ (8008df0 <menuVariableFinisher+0x3a4>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008c2a:	4b72      	ldr	r3, [pc, #456]	@ (8008df4 <menuVariableFinisher+0x3a8>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8008c30:	4b71      	ldr	r3, [pc, #452]	@ (8008df8 <menuVariableFinisher+0x3ac>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008c36:	4b71      	ldr	r3, [pc, #452]	@ (8008dfc <menuVariableFinisher+0x3b0>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8008c3c:	4b70      	ldr	r3, [pc, #448]	@ (8008e00 <menuVariableFinisher+0x3b4>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8008c42:	4b70      	ldr	r3, [pc, #448]	@ (8008e04 <menuVariableFinisher+0x3b8>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8008c48:	4b6f      	ldr	r3, [pc, #444]	@ (8008e08 <menuVariableFinisher+0x3bc>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8008c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8008e0c <menuVariableFinisher+0x3c0>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8008c54:	4b6e      	ldr	r3, [pc, #440]	@ (8008e10 <menuVariableFinisher+0x3c4>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8008c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8008e14 <menuVariableFinisher+0x3c8>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8008c60:	4b6d      	ldr	r3, [pc, #436]	@ (8008e18 <menuVariableFinisher+0x3cc>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8008c66:	4b6d      	ldr	r3, [pc, #436]	@ (8008e1c <menuVariableFinisher+0x3d0>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8008c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8008e20 <menuVariableFinisher+0x3d4>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8008c72:	4b6c      	ldr	r3, [pc, #432]	@ (8008e24 <menuVariableFinisher+0x3d8>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008c78:	4b6b      	ldr	r3, [pc, #428]	@ (8008e28 <menuVariableFinisher+0x3dc>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8008c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8008e2c <menuVariableFinisher+0x3e0>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008c84:	4b6a      	ldr	r3, [pc, #424]	@ (8008e30 <menuVariableFinisher+0x3e4>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8008c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008e34 <menuVariableFinisher+0x3e8>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008c90:	4b69      	ldr	r3, [pc, #420]	@ (8008e38 <menuVariableFinisher+0x3ec>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8008c96:	4b69      	ldr	r3, [pc, #420]	@ (8008e3c <menuVariableFinisher+0x3f0>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8008c9c:	4b68      	ldr	r3, [pc, #416]	@ (8008e40 <menuVariableFinisher+0x3f4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8008ca2:	4b68      	ldr	r3, [pc, #416]	@ (8008e44 <menuVariableFinisher+0x3f8>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8008ca8:	4b67      	ldr	r3, [pc, #412]	@ (8008e48 <menuVariableFinisher+0x3fc>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	741a      	strb	r2, [r3, #16]
}
 8008cae:	bf00      	nop
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	2000009c 	.word	0x2000009c
 8008cbc:	200000b0 	.word	0x200000b0
 8008cc0:	200000c4 	.word	0x200000c4
 8008cc4:	200000d8 	.word	0x200000d8
 8008cc8:	200000ec 	.word	0x200000ec
 8008ccc:	20000100 	.word	0x20000100
 8008cd0:	20000114 	.word	0x20000114
 8008cd4:	20000128 	.word	0x20000128
 8008cd8:	2000013c 	.word	0x2000013c
 8008cdc:	20000150 	.word	0x20000150
 8008ce0:	20000164 	.word	0x20000164
 8008ce4:	20000178 	.word	0x20000178
 8008ce8:	20001220 	.word	0x20001220
 8008cec:	20001234 	.word	0x20001234
 8008cf0:	20001248 	.word	0x20001248
 8008cf4:	2000125c 	.word	0x2000125c
 8008cf8:	20001270 	.word	0x20001270
 8008cfc:	20001284 	.word	0x20001284
 8008d00:	20001298 	.word	0x20001298
 8008d04:	200012ac 	.word	0x200012ac
 8008d08:	200012c0 	.word	0x200012c0
 8008d0c:	200012d4 	.word	0x200012d4
 8008d10:	200012e8 	.word	0x200012e8
 8008d14:	200012fc 	.word	0x200012fc
 8008d18:	20001310 	.word	0x20001310
 8008d1c:	20001324 	.word	0x20001324
 8008d20:	20001338 	.word	0x20001338
 8008d24:	2000134c 	.word	0x2000134c
 8008d28:	20001360 	.word	0x20001360
 8008d2c:	20001374 	.word	0x20001374
 8008d30:	20001388 	.word	0x20001388
 8008d34:	2000139c 	.word	0x2000139c
 8008d38:	200013b0 	.word	0x200013b0
 8008d3c:	200013c4 	.word	0x200013c4
 8008d40:	200013d8 	.word	0x200013d8
 8008d44:	200013ec 	.word	0x200013ec
 8008d48:	20001400 	.word	0x20001400
 8008d4c:	20001414 	.word	0x20001414
 8008d50:	20001428 	.word	0x20001428
 8008d54:	2000143c 	.word	0x2000143c
 8008d58:	20001450 	.word	0x20001450
 8008d5c:	20001464 	.word	0x20001464
 8008d60:	20001478 	.word	0x20001478
 8008d64:	2000148c 	.word	0x2000148c
 8008d68:	200014a0 	.word	0x200014a0
 8008d6c:	200014b4 	.word	0x200014b4
 8008d70:	200014c8 	.word	0x200014c8
 8008d74:	200014dc 	.word	0x200014dc
 8008d78:	200014f0 	.word	0x200014f0
 8008d7c:	20001504 	.word	0x20001504
 8008d80:	20001518 	.word	0x20001518
 8008d84:	2000152c 	.word	0x2000152c
 8008d88:	20001540 	.word	0x20001540
 8008d8c:	20001554 	.word	0x20001554
 8008d90:	20001568 	.word	0x20001568
 8008d94:	2000157c 	.word	0x2000157c
 8008d98:	20001590 	.word	0x20001590
 8008d9c:	200015a4 	.word	0x200015a4
 8008da0:	200015b8 	.word	0x200015b8
 8008da4:	200015cc 	.word	0x200015cc
 8008da8:	200015e0 	.word	0x200015e0
 8008dac:	200015f4 	.word	0x200015f4
 8008db0:	20001608 	.word	0x20001608
 8008db4:	2000161c 	.word	0x2000161c
 8008db8:	20001630 	.word	0x20001630
 8008dbc:	20001644 	.word	0x20001644
 8008dc0:	20001658 	.word	0x20001658
 8008dc4:	2000166c 	.word	0x2000166c
 8008dc8:	20001680 	.word	0x20001680
 8008dcc:	20001694 	.word	0x20001694
 8008dd0:	200016a8 	.word	0x200016a8
 8008dd4:	200016bc 	.word	0x200016bc
 8008dd8:	200016d0 	.word	0x200016d0
 8008ddc:	200016e4 	.word	0x200016e4
 8008de0:	200016f8 	.word	0x200016f8
 8008de4:	2000170c 	.word	0x2000170c
 8008de8:	20001720 	.word	0x20001720
 8008dec:	20001734 	.word	0x20001734
 8008df0:	20001748 	.word	0x20001748
 8008df4:	2000175c 	.word	0x2000175c
 8008df8:	20001770 	.word	0x20001770
 8008dfc:	20001784 	.word	0x20001784
 8008e00:	20001798 	.word	0x20001798
 8008e04:	200017ac 	.word	0x200017ac
 8008e08:	200017c0 	.word	0x200017c0
 8008e0c:	200017d4 	.word	0x200017d4
 8008e10:	200017e8 	.word	0x200017e8
 8008e14:	200017fc 	.word	0x200017fc
 8008e18:	20001810 	.word	0x20001810
 8008e1c:	20001824 	.word	0x20001824
 8008e20:	20001838 	.word	0x20001838
 8008e24:	2000184c 	.word	0x2000184c
 8008e28:	20001860 	.word	0x20001860
 8008e2c:	20001874 	.word	0x20001874
 8008e30:	20001888 	.word	0x20001888
 8008e34:	2000189c 	.word	0x2000189c
 8008e38:	200018b0 	.word	0x200018b0
 8008e3c:	200018c4 	.word	0x200018c4
 8008e40:	200018d8 	.word	0x200018d8
 8008e44:	200018ec 	.word	0x200018ec
 8008e48:	20001900 	.word	0x20001900

08008e4c <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008e52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e56:	f001 fdc3 	bl	800a9e0 <HAL_Delay>
	int confirmationVal = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008e5e:	e012      	b.n	8008e86 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008e60:	4a12      	ldr	r2, [pc, #72]	@ (8008eac <takeMachineIDWithConfirmation+0x60>)
 8008e62:	2101      	movs	r1, #1
 8008e64:	2001      	movs	r0, #1
 8008e66:	f001 f861 	bl	8009f2c <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008e6a:	4a11      	ldr	r2, [pc, #68]	@ (8008eb0 <takeMachineIDWithConfirmation+0x64>)
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	2002      	movs	r0, #2
 8008e70:	f001 f85c 	bl	8009f2c <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008e74:	2102      	movs	r1, #2
 8008e76:	480f      	ldr	r0, [pc, #60]	@ (8008eb4 <takeMachineIDWithConfirmation+0x68>)
 8008e78:	f002 fb82 	bl	800b580 <HAL_GPIO_ReadPin>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008e82:	2301      	movs	r3, #1
 8008e84:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0e9      	beq.n	8008e60 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008e8c:	f000 f814 	bl	8008eb8 <takeMachineID>

	convertArrays(1);
 8008e90:	2001      	movs	r0, #1
 8008e92:	f7f7 fc19 	bl	80006c8 <convertArrays>
	HAL_Delay(50);
 8008e96:	2032      	movs	r0, #50	@ 0x32
 8008e98:	f001 fda2 	bl	800a9e0 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	f7f8 f901 	bl	80010a4 <printCredentials>
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	200018d8 	.word	0x200018d8
 8008eb0:	200018ec 	.word	0x200018ec
 8008eb4:	40010800 	.word	0x40010800

08008eb8 <takeMachineID>:

void takeMachineID() {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	f001 f892 	bl	8009fe8 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008ec4:	220c      	movs	r2, #12
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	48a2      	ldr	r0, [pc, #648]	@ (8009154 <takeMachineID+0x29c>)
 8008eca:	f005 fcc1 	bl	800e850 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8008ece:	2305      	movs	r3, #5
 8008ed0:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008eda:	4b9f      	ldr	r3, [pc, #636]	@ (8009158 <takeMachineID+0x2a0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	f7f7 ff6e 	bl	8000dc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008ee8:	2108      	movs	r1, #8
 8008eea:	489c      	ldr	r0, [pc, #624]	@ (800915c <takeMachineID+0x2a4>)
 8008eec:	f002 fb48 	bl	800b580 <HAL_GPIO_ReadPin>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d128      	bne.n	8008f48 <takeMachineID+0x90>
        	lcd_cursor(0);
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	f001 f876 	bl	8009fe8 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008efc:	f000 fe58 	bl	8009bb0 <checkEEPROM4ID>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d00e      	beq.n	8008f24 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008f06:	4a96      	ldr	r2, [pc, #600]	@ (8009160 <takeMachineID+0x2a8>)
 8008f08:	2101      	movs	r1, #1
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	f001 f80e 	bl	8009f2c <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008f10:	4a94      	ldr	r2, [pc, #592]	@ (8009164 <takeMachineID+0x2ac>)
 8008f12:	2101      	movs	r1, #1
 8008f14:	2002      	movs	r0, #2
 8008f16:	f001 f809 	bl	8009f2c <lcd_print>
        		HAL_Delay(1250);
 8008f1a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008f1e:	f001 fd5f 	bl	800a9e0 <HAL_Delay>

        		goto mainSection;
 8008f22:	e7cc      	b.n	8008ebe <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008f24:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008f28:	9302      	str	r3, [sp, #8]
 8008f2a:	236e      	movs	r3, #110	@ 0x6e
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	4b8e      	ldr	r3, [pc, #568]	@ (8009168 <takeMachineID+0x2b0>)
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	236e      	movs	r3, #110	@ 0x6e
 8008f34:	2200      	movs	r2, #0
 8008f36:	21a0      	movs	r1, #160	@ 0xa0
 8008f38:	488c      	ldr	r0, [pc, #560]	@ (800916c <takeMachineID+0x2b4>)
 8008f3a:	f002 fddb 	bl	800baf4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8008f3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008f42:	f001 fd4d 	bl	800a9e0 <HAL_Delay>

            	break;
 8008f46:	e132      	b.n	80091ae <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008f48:	2101      	movs	r1, #1
 8008f4a:	4884      	ldr	r0, [pc, #528]	@ (800915c <takeMachineID+0x2a4>)
 8008f4c:	f002 fb18 	bl	800b580 <HAL_GPIO_ReadPin>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d111      	bne.n	8008f7a <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b07      	cmp	r3, #7
 8008f5a:	d102      	bne.n	8008f62 <takeMachineID+0xaa>
        		cursorPosition = 10;
 8008f5c:	230a      	movs	r3, #10
 8008f5e:	60bb      	str	r3, [r7, #8]
 8008f60:	e008      	b.n	8008f74 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b0e      	cmp	r3, #14
 8008f66:	d102      	bne.n	8008f6e <takeMachineID+0xb6>
                cursorPosition = 3;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	e002      	b.n	8008f74 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8008f74:	2096      	movs	r0, #150	@ 0x96
 8008f76:	f001 fd33 	bl	800a9e0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008f7a:	2108      	movs	r1, #8
 8008f7c:	487c      	ldr	r0, [pc, #496]	@ (8009170 <takeMachineID+0x2b8>)
 8008f7e:	f002 faff 	bl	800b580 <HAL_GPIO_ReadPin>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d111      	bne.n	8008fac <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d102      	bne.n	8008f94 <takeMachineID+0xdc>
                cursorPosition = 14;
 8008f8e:	230e      	movs	r3, #14
 8008f90:	60bb      	str	r3, [r7, #8]
 8008f92:	e008      	b.n	8008fa6 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b0a      	cmp	r3, #10
 8008f98:	d102      	bne.n	8008fa0 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8008f9a:	2307      	movs	r3, #7
 8008f9c:	60bb      	str	r3, [r7, #8]
 8008f9e:	e002      	b.n	8008fa6 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8008fa6:	20fa      	movs	r0, #250	@ 0xfa
 8008fa8:	f001 fd1a 	bl	800a9e0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008fac:	2102      	movs	r1, #2
 8008fae:	486b      	ldr	r0, [pc, #428]	@ (800915c <takeMachineID+0x2a4>)
 8008fb0:	f002 fae6 	bl	800b580 <HAL_GPIO_ReadPin>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	f040 80a1 	bne.w	80090fe <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d10a      	bne.n	8008fd8 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8008fc2:	4a64      	ldr	r2, [pc, #400]	@ (8009154 <takeMachineID+0x29c>)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	2230      	movs	r2, #48	@ 0x30
 8008fca:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008fcc:	4a66      	ldr	r2, [pc, #408]	@ (8009168 <takeMachineID+0x2b0>)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	e07c      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d10a      	bne.n	8008ff4 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8008fde:	4a5d      	ldr	r2, [pc, #372]	@ (8009154 <takeMachineID+0x29c>)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	2231      	movs	r2, #49	@ 0x31
 8008fe6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8009168 <takeMachineID+0x2b0>)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	4413      	add	r3, r2
 8008fee:	2201      	movs	r2, #1
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	e06e      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d10a      	bne.n	8009010 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8008ffa:	4a56      	ldr	r2, [pc, #344]	@ (8009154 <takeMachineID+0x29c>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4413      	add	r3, r2
 8009000:	2232      	movs	r2, #50	@ 0x32
 8009002:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8009004:	4a58      	ldr	r2, [pc, #352]	@ (8009168 <takeMachineID+0x2b0>)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	4413      	add	r3, r2
 800900a:	2202      	movs	r2, #2
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	e060      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b06      	cmp	r3, #6
 8009014:	d10a      	bne.n	800902c <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8009016:	4a4f      	ldr	r2, [pc, #316]	@ (8009154 <takeMachineID+0x29c>)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4413      	add	r3, r2
 800901c:	2233      	movs	r2, #51	@ 0x33
 800901e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8009020:	4a51      	ldr	r2, [pc, #324]	@ (8009168 <takeMachineID+0x2b0>)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	4413      	add	r3, r2
 8009026:	2203      	movs	r2, #3
 8009028:	701a      	strb	r2, [r3, #0]
 800902a:	e052      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2b07      	cmp	r3, #7
 8009030:	d10a      	bne.n	8009048 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8009032:	4a48      	ldr	r2, [pc, #288]	@ (8009154 <takeMachineID+0x29c>)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4413      	add	r3, r2
 8009038:	2234      	movs	r2, #52	@ 0x34
 800903a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 800903c:	4a4a      	ldr	r2, [pc, #296]	@ (8009168 <takeMachineID+0x2b0>)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	4413      	add	r3, r2
 8009042:	2204      	movs	r2, #4
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e044      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b0a      	cmp	r3, #10
 800904c:	d10a      	bne.n	8009064 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 800904e:	4a41      	ldr	r2, [pc, #260]	@ (8009154 <takeMachineID+0x29c>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	2235      	movs	r2, #53	@ 0x35
 8009056:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8009058:	4a43      	ldr	r2, [pc, #268]	@ (8009168 <takeMachineID+0x2b0>)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	4413      	add	r3, r2
 800905e:	2205      	movs	r2, #5
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	e036      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b0b      	cmp	r3, #11
 8009068:	d10a      	bne.n	8009080 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 800906a:	4a3a      	ldr	r2, [pc, #232]	@ (8009154 <takeMachineID+0x29c>)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	2236      	movs	r2, #54	@ 0x36
 8009072:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8009074:	4a3c      	ldr	r2, [pc, #240]	@ (8009168 <takeMachineID+0x2b0>)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	4413      	add	r3, r2
 800907a:	2206      	movs	r2, #6
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	e028      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b0c      	cmp	r3, #12
 8009084:	d10a      	bne.n	800909c <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8009086:	4a33      	ldr	r2, [pc, #204]	@ (8009154 <takeMachineID+0x29c>)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4413      	add	r3, r2
 800908c:	2237      	movs	r2, #55	@ 0x37
 800908e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8009090:	4a35      	ldr	r2, [pc, #212]	@ (8009168 <takeMachineID+0x2b0>)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	4413      	add	r3, r2
 8009096:	2207      	movs	r2, #7
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	e01a      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b0d      	cmp	r3, #13
 80090a0:	d10a      	bne.n	80090b8 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 80090a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009154 <takeMachineID+0x29c>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	2238      	movs	r2, #56	@ 0x38
 80090aa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80090ac:	4a2e      	ldr	r2, [pc, #184]	@ (8009168 <takeMachineID+0x2b0>)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	4413      	add	r3, r2
 80090b2:	2208      	movs	r2, #8
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e00c      	b.n	80090d2 <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b0e      	cmp	r3, #14
 80090bc:	d109      	bne.n	80090d2 <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 80090be:	4a25      	ldr	r2, [pc, #148]	@ (8009154 <takeMachineID+0x29c>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4413      	add	r3, r2
 80090c4:	2239      	movs	r2, #57	@ 0x39
 80090c6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 80090c8:	4a27      	ldr	r2, [pc, #156]	@ (8009168 <takeMachineID+0x2b0>)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	4413      	add	r3, r2
 80090ce:	2209      	movs	r2, #9
 80090d0:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	b2d9      	uxtb	r1, r3
 80090d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009154 <takeMachineID+0x29c>)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	2001      	movs	r0, #1
 80090e2:	f000 ff38 	bl	8009f56 <lcd_print_char>

        	writeLoc++;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3301      	adds	r3, #1
 80090ea:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3301      	adds	r3, #1
 80090f0:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 80090f8:	2096      	movs	r0, #150	@ 0x96
 80090fa:	f001 fc71 	bl	800a9e0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80090fe:	2104      	movs	r1, #4
 8009100:	4816      	ldr	r0, [pc, #88]	@ (800915c <takeMachineID+0x2a4>)
 8009102:	f002 fa3d 	bl	800b580 <HAL_GPIO_ReadPin>
 8009106:	4603      	mov	r3, r0
 8009108:	2b01      	cmp	r3, #1
 800910a:	d149      	bne.n	80091a0 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 800910c:	4b11      	ldr	r3, [pc, #68]	@ (8009154 <takeMachineID+0x29c>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d042      	beq.n	800919a <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8009114:	4a0f      	ldr	r2, [pc, #60]	@ (8009154 <takeMachineID+0x29c>)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 800911e:	4a12      	ldr	r2, [pc, #72]	@ (8009168 <takeMachineID+0x2b0>)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	4413      	add	r3, r2
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b05      	cmp	r3, #5
 800912c:	dd03      	ble.n	8009136 <takeMachineID+0x27e>
                	writeLoc--;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3b01      	subs	r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e004      	b.n	8009140 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b04      	cmp	r3, #4
 800913a:	dc01      	bgt.n	8009140 <takeMachineID+0x288>
                	writeLoc = 5;
 800913c:	2305      	movs	r3, #5
 800913e:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd16      	ble.n	8009174 <takeMachineID+0x2bc>
                	arrayPos--;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3b01      	subs	r3, #1
 800914a:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	3b01      	subs	r3, #1
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	e017      	b.n	8009184 <takeMachineID+0x2cc>
 8009154:	20001064 	.word	0x20001064
 8009158:	20000000 	.word	0x20000000
 800915c:	40010800 	.word	0x40010800
 8009160:	200017e8 	.word	0x200017e8
 8009164:	200017fc 	.word	0x200017fc
 8009168:	20000fec 	.word	0x20000fec
 800916c:	2000193c 	.word	0x2000193c
 8009170:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	da04      	bge.n	8009184 <takeMachineID+0x2cc>
                	arrayPos = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 800917e:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <takeMachineID+0x300>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	3305      	adds	r3, #5
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	2001      	movs	r0, #1
 8009190:	f000 ff02 	bl	8009f98 <lcd_delete_char>
                HAL_Delay(50);
 8009194:	2032      	movs	r0, #50	@ 0x32
 8009196:	f001 fc23 	bl	800a9e0 <HAL_Delay>
            }

            HAL_Delay(150);
 800919a:	2096      	movs	r0, #150	@ 0x96
 800919c:	f001 fc20 	bl	800a9e0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	2002      	movs	r0, #2
 80091a8:	f000 fea1 	bl	8009eee <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80091ac:	e69c      	b.n	8008ee8 <takeMachineID+0x30>
    }
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000000 	.word	0x20000000

080091bc <ssidConfirmation>:

uint8_t ssidConfirmation() {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af04      	add	r7, sp, #16
	int loopVal = 1;
 80091c2:	2301      	movs	r3, #1
 80091c4:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80091c6:	4a25      	ldr	r2, [pc, #148]	@ (800925c <ssidConfirmation+0xa0>)
 80091c8:	2101      	movs	r1, #1
 80091ca:	2001      	movs	r0, #1
 80091cc:	f000 feae 	bl	8009f2c <lcd_print>

	while(loopVal == 1) {
 80091d0:	e012      	b.n	80091f8 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80091d2:	4a23      	ldr	r2, [pc, #140]	@ (8009260 <ssidConfirmation+0xa4>)
 80091d4:	2101      	movs	r1, #1
 80091d6:	2002      	movs	r0, #2
 80091d8:	f000 fea8 	bl	8009f2c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80091dc:	2102      	movs	r1, #2
 80091de:	4821      	ldr	r0, [pc, #132]	@ (8009264 <ssidConfirmation+0xa8>)
 80091e0:	f002 f9ce 	bl	800b580 <HAL_GPIO_ReadPin>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <ssidConfirmation+0x32>
			loopVal = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 80091ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009268 <ssidConfirmation+0xac>)
 80091f0:	2101      	movs	r1, #1
 80091f2:	2001      	movs	r0, #1
 80091f4:	f000 fe9a 	bl	8009f2c <lcd_print>
	while(loopVal == 1) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d0e9      	beq.n	80091d2 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 80091fe:	2000      	movs	r0, #0
 8009200:	f000 fef2 	bl	8009fe8 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8009204:	4818      	ldr	r0, [pc, #96]	@ (8009268 <ssidConfirmation+0xac>)
 8009206:	f7f7 f80d 	bl	8000224 <strlen>
 800920a:	4603      	mov	r3, r0
 800920c:	2b14      	cmp	r3, #20
 800920e:	d90f      	bls.n	8009230 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8009210:	4a16      	ldr	r2, [pc, #88]	@ (800926c <ssidConfirmation+0xb0>)
 8009212:	2101      	movs	r1, #1
 8009214:	2001      	movs	r0, #1
 8009216:	f000 fe89 	bl	8009f2c <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800921a:	4a15      	ldr	r2, [pc, #84]	@ (8009270 <ssidConfirmation+0xb4>)
 800921c:	2101      	movs	r1, #1
 800921e:	2002      	movs	r0, #2
 8009220:	f000 fe84 	bl	8009f2c <lcd_print>
        HAL_Delay(1250);
 8009224:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8009228:	f001 fbda 	bl	800a9e0 <HAL_Delay>

        return 0;
 800922c:	2300      	movs	r3, #0
 800922e:	e011      	b.n	8009254 <ssidConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009230:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009234:	9302      	str	r3, [sp, #8]
 8009236:	236e      	movs	r3, #110	@ 0x6e
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <ssidConfirmation+0xb8>)
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	236e      	movs	r3, #110	@ 0x6e
 8009240:	2200      	movs	r2, #0
 8009242:	21a0      	movs	r1, #160	@ 0xa0
 8009244:	480c      	ldr	r0, [pc, #48]	@ (8009278 <ssidConfirmation+0xbc>)
 8009246:	f002 fc55 	bl	800baf4 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 800924a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800924e:	f001 fbc7 	bl	800a9e0 <HAL_Delay>

    	return 1;
 8009252:	2301      	movs	r3, #1
    }
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	0800f40c 	.word	0x0800f40c
 8009260:	20001900 	.word	0x20001900
 8009264:	40010800 	.word	0x40010800
 8009268:	20001070 	.word	0x20001070
 800926c:	20001810 	.word	0x20001810
 8009270:	20001824 	.word	0x20001824
 8009274:	20000fec 	.word	0x20000fec
 8009278:	2000193c 	.word	0x2000193c

0800927c <takeWifiSSID>:

void takeWifiSSID() {
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8009282:	2001      	movs	r0, #1
 8009284:	f000 feb0 	bl	8009fe8 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8009288:	2210      	movs	r2, #16
 800928a:	2100      	movs	r1, #0
 800928c:	48a4      	ldr	r0, [pc, #656]	@ (8009520 <takeWifiSSID+0x2a4>)
 800928e:	f005 fadf 	bl	800e850 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8009292:	2301      	movs	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8009296:	2307      	movs	r3, #7
 8009298:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800929a:	2301      	movs	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800929e:	2300      	movs	r3, #0
 80092a0:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80092a2:	4ba0      	ldr	r3, [pc, #640]	@ (8009524 <takeWifiSSID+0x2a8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80092a8:	2101      	movs	r1, #1
 80092aa:	2002      	movs	r0, #2
 80092ac:	f7f7 fd8a 	bl	8000dc4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80092b0:	2108      	movs	r1, #8
 80092b2:	489d      	ldr	r0, [pc, #628]	@ (8009528 <takeWifiSSID+0x2ac>)
 80092b4:	f002 f964 	bl	800b580 <HAL_GPIO_ReadPin>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d106      	bne.n	80092cc <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80092be:	f7ff ff7d 	bl	80091bc <ssidConfirmation>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f040 8126 	bne.w	8009516 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80092ca:	e7da      	b.n	8009282 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80092cc:	2101      	movs	r1, #1
 80092ce:	4896      	ldr	r0, [pc, #600]	@ (8009528 <takeWifiSSID+0x2ac>)
 80092d0:	f002 f956 	bl	800b580 <HAL_GPIO_ReadPin>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d14d      	bne.n	8009376 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b50      	cmp	r3, #80	@ 0x50
 80092de:	dd01      	ble.n	80092e4 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80092e0:	2301      	movs	r3, #1
 80092e2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d13f      	bne.n	800936a <takeWifiSSID+0xee>
            	if(page == 1) {
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d109      	bne.n	8009304 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 80092f0:	2301      	movs	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
            		page++;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	3301      	adds	r3, #1
 80092f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80092fa:	2102      	movs	r1, #2
 80092fc:	2002      	movs	r0, #2
 80092fe:	f7f7 fd61 	bl	8000dc4 <printTemplate>
 8009302:	e035      	b.n	8009370 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d109      	bne.n	800931e <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800930a:	2301      	movs	r3, #1
 800930c:	60fb      	str	r3, [r7, #12]
            		page++;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	3301      	adds	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009314:	2103      	movs	r1, #3
 8009316:	2002      	movs	r0, #2
 8009318:	f7f7 fd54 	bl	8000dc4 <printTemplate>
 800931c:	e028      	b.n	8009370 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b03      	cmp	r3, #3
 8009322:	d109      	bne.n	8009338 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8009324:	2301      	movs	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
            		page++;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	3301      	adds	r3, #1
 800932c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800932e:	2104      	movs	r1, #4
 8009330:	2002      	movs	r0, #2
 8009332:	f7f7 fd47 	bl	8000dc4 <printTemplate>
 8009336:	e01b      	b.n	8009370 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b04      	cmp	r3, #4
 800933c:	d109      	bne.n	8009352 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800933e:	2301      	movs	r3, #1
 8009340:	60fb      	str	r3, [r7, #12]
            		page++;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	3301      	adds	r3, #1
 8009346:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8009348:	2105      	movs	r1, #5
 800934a:	2002      	movs	r0, #2
 800934c:	f7f7 fd3a 	bl	8000dc4 <printTemplate>
 8009350:	e00e      	b.n	8009370 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b05      	cmp	r3, #5
 8009356:	d10b      	bne.n	8009370 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8009358:	2301      	movs	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800935c:	2301      	movs	r3, #1
 800935e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8009360:	2101      	movs	r1, #1
 8009362:	2002      	movs	r0, #2
 8009364:	f7f7 fd2e 	bl	8000dc4 <printTemplate>
 8009368:	e002      	b.n	8009370 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009370:	2096      	movs	r0, #150	@ 0x96
 8009372:	f001 fb35 	bl	800a9e0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8009376:	2108      	movs	r1, #8
 8009378:	486c      	ldr	r0, [pc, #432]	@ (800952c <takeWifiSSID+0x2b0>)
 800937a:	f002 f901 	bl	800b580 <HAL_GPIO_ReadPin>
 800937e:	4603      	mov	r3, r0
 8009380:	2b01      	cmp	r3, #1
 8009382:	d149      	bne.n	8009418 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	dc01      	bgt.n	800938e <takeWifiSSID+0x112>
        		cursorPosition = 80;
 800938a:	2350      	movs	r3, #80	@ 0x50
 800938c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d13b      	bne.n	800940c <takeWifiSSID+0x190>
            	if(page == 1) {
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d108      	bne.n	80093ac <takeWifiSSID+0x130>
            		cursorPosition = 16;
 800939a:	2310      	movs	r3, #16
 800939c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800939e:	2305      	movs	r3, #5
 80093a0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80093a2:	2105      	movs	r1, #5
 80093a4:	2002      	movs	r0, #2
 80093a6:	f7f7 fd0d 	bl	8000dc4 <printTemplate>
 80093aa:	e032      	b.n	8009412 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d108      	bne.n	80093c4 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80093b2:	2310      	movs	r3, #16
 80093b4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80093b6:	2301      	movs	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80093ba:	2101      	movs	r1, #1
 80093bc:	2002      	movs	r0, #2
 80093be:	f7f7 fd01 	bl	8000dc4 <printTemplate>
 80093c2:	e026      	b.n	8009412 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d108      	bne.n	80093dc <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80093ca:	2310      	movs	r3, #16
 80093cc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80093ce:	2302      	movs	r3, #2
 80093d0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80093d2:	2102      	movs	r1, #2
 80093d4:	2002      	movs	r0, #2
 80093d6:	f7f7 fcf5 	bl	8000dc4 <printTemplate>
 80093da:	e01a      	b.n	8009412 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d108      	bne.n	80093f4 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80093e2:	2310      	movs	r3, #16
 80093e4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80093e6:	2303      	movs	r3, #3
 80093e8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80093ea:	2103      	movs	r1, #3
 80093ec:	2002      	movs	r0, #2
 80093ee:	f7f7 fce9 	bl	8000dc4 <printTemplate>
 80093f2:	e00e      	b.n	8009412 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2b05      	cmp	r3, #5
 80093f8:	d10b      	bne.n	8009412 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 80093fa:	2310      	movs	r3, #16
 80093fc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80093fe:	2304      	movs	r3, #4
 8009400:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009402:	2104      	movs	r1, #4
 8009404:	2002      	movs	r0, #2
 8009406:	f7f7 fcdd 	bl	8000dc4 <printTemplate>
 800940a:	e002      	b.n	8009412 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3b01      	subs	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009412:	2096      	movs	r0, #150	@ 0x96
 8009414:	f001 fae4 	bl	800a9e0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009418:	2102      	movs	r1, #2
 800941a:	4843      	ldr	r0, [pc, #268]	@ (8009528 <takeWifiSSID+0x2ac>)
 800941c:	f002 f8b0 	bl	800b580 <HAL_GPIO_ReadPin>
 8009420:	4603      	mov	r3, r0
 8009422:	2b01      	cmp	r3, #1
 8009424:	d12f      	bne.n	8009486 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	b2d9      	uxtb	r1, r3
 800942a:	4a41      	ldr	r2, [pc, #260]	@ (8009530 <takeWifiSSID+0x2b4>)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4413      	add	r3, r2
 8009430:	460a      	mov	r2, r1
 8009432:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8009434:	4a3f      	ldr	r2, [pc, #252]	@ (8009534 <takeWifiSSID+0x2b8>)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4413      	add	r3, r2
 800943a:	7819      	ldrb	r1, [r3, #0]
 800943c:	4a38      	ldr	r2, [pc, #224]	@ (8009520 <takeWifiSSID+0x2a4>)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	4413      	add	r3, r2
 8009442:	460a      	mov	r2, r1
 8009444:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	b2d9      	uxtb	r1, r3
 800944a:	4a3a      	ldr	r2, [pc, #232]	@ (8009534 <takeWifiSSID+0x2b8>)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4413      	add	r3, r2
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	2001      	movs	r0, #1
 8009456:	f000 fd7e 	bl	8009f56 <lcd_print_char>

            writeLoc++;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	3301      	adds	r3, #1
 8009464:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3301      	adds	r3, #1
 800946a:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800946c:	4a30      	ldr	r2, [pc, #192]	@ (8009530 <takeWifiSSID+0x2b4>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8009476:	4a2a      	ldr	r2, [pc, #168]	@ (8009520 <takeWifiSSID+0x2a4>)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4413      	add	r3, r2
 800947c:	2200      	movs	r2, #0
 800947e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8009480:	2096      	movs	r0, #150	@ 0x96
 8009482:	f001 faad 	bl	800a9e0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009486:	2104      	movs	r1, #4
 8009488:	4827      	ldr	r0, [pc, #156]	@ (8009528 <takeWifiSSID+0x2ac>)
 800948a:	f002 f879 	bl	800b580 <HAL_GPIO_ReadPin>
 800948e:	4603      	mov	r3, r0
 8009490:	2b01      	cmp	r3, #1
 8009492:	d139      	bne.n	8009508 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8009494:	4b22      	ldr	r3, [pc, #136]	@ (8009520 <takeWifiSSID+0x2a4>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d032      	beq.n	8009502 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 800949c:	4a24      	ldr	r2, [pc, #144]	@ (8009530 <takeWifiSSID+0x2b4>)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80094a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009520 <takeWifiSSID+0x2a4>)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4413      	add	r3, r2
 80094ac:	2200      	movs	r2, #0
 80094ae:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	dd03      	ble.n	80094be <takeWifiSSID+0x242>
        			writeLoc--;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	e004      	b.n	80094c8 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b06      	cmp	r3, #6
 80094c2:	dc01      	bgt.n	80094c8 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80094c4:	2307      	movs	r3, #7
 80094c6:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dd06      	ble.n	80094dc <takeWifiSSID+0x260>
        			arrayPosition--;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	607b      	str	r3, [r7, #4]
 80094da:	e007      	b.n	80094ec <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da04      	bge.n	80094ec <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80094e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009524 <takeWifiSSID+0x2a8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	3307      	adds	r3, #7
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	4619      	mov	r1, r3
 80094f6:	2001      	movs	r0, #1
 80094f8:	f000 fd4e 	bl	8009f98 <lcd_delete_char>
        		HAL_Delay(50);
 80094fc:	2032      	movs	r0, #50	@ 0x32
 80094fe:	f001 fa6f 	bl	800a9e0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8009502:	2096      	movs	r0, #150	@ 0x96
 8009504:	f001 fa6c 	bl	800a9e0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	4619      	mov	r1, r3
 800950e:	2002      	movs	r0, #2
 8009510:	f000 fced 	bl	8009eee <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009514:	e6cc      	b.n	80092b0 <takeWifiSSID+0x34>
        		break;
 8009516:	bf00      	nop
    }
}
 8009518:	bf00      	nop
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20001070 	.word	0x20001070
 8009524:	20000004 	.word	0x20000004
 8009528:	40010800 	.word	0x40010800
 800952c:	40011000 	.word	0x40011000
 8009530:	20000fec 	.word	0x20000fec
 8009534:	20000018 	.word	0x20000018

08009538 <passConfirmation>:

uint8_t passConfirmation() {
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af04      	add	r7, sp, #16
	int loopVal = 1;
 800953e:	2301      	movs	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8009542:	4a25      	ldr	r2, [pc, #148]	@ (80095d8 <passConfirmation+0xa0>)
 8009544:	2101      	movs	r1, #1
 8009546:	2001      	movs	r0, #1
 8009548:	f000 fcf0 	bl	8009f2c <lcd_print>

	while(loopVal == 1) {
 800954c:	e012      	b.n	8009574 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800954e:	4a23      	ldr	r2, [pc, #140]	@ (80095dc <passConfirmation+0xa4>)
 8009550:	2101      	movs	r1, #1
 8009552:	2002      	movs	r0, #2
 8009554:	f000 fcea 	bl	8009f2c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009558:	2102      	movs	r1, #2
 800955a:	4821      	ldr	r0, [pc, #132]	@ (80095e0 <passConfirmation+0xa8>)
 800955c:	f002 f810 	bl	800b580 <HAL_GPIO_ReadPin>
 8009560:	4603      	mov	r3, r0
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <passConfirmation+0x32>
			loopVal = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 800956a:	4a1e      	ldr	r2, [pc, #120]	@ (80095e4 <passConfirmation+0xac>)
 800956c:	2101      	movs	r1, #1
 800956e:	2001      	movs	r0, #1
 8009570:	f000 fcdc 	bl	8009f2c <lcd_print>
	while(loopVal == 1) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d0e9      	beq.n	800954e <passConfirmation+0x16>
	}

    lcd_cursor(0);
 800957a:	2000      	movs	r0, #0
 800957c:	f000 fd34 	bl	8009fe8 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8009580:	4818      	ldr	r0, [pc, #96]	@ (80095e4 <passConfirmation+0xac>)
 8009582:	f7f6 fe4f 	bl	8000224 <strlen>
 8009586:	4603      	mov	r3, r0
 8009588:	2b14      	cmp	r3, #20
 800958a:	d90f      	bls.n	80095ac <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 800958c:	4a16      	ldr	r2, [pc, #88]	@ (80095e8 <passConfirmation+0xb0>)
 800958e:	2101      	movs	r1, #1
 8009590:	2001      	movs	r0, #1
 8009592:	f000 fccb 	bl	8009f2c <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8009596:	4a15      	ldr	r2, [pc, #84]	@ (80095ec <passConfirmation+0xb4>)
 8009598:	2101      	movs	r1, #1
 800959a:	2002      	movs	r0, #2
 800959c:	f000 fcc6 	bl	8009f2c <lcd_print>
        HAL_Delay(1250);
 80095a0:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80095a4:	f001 fa1c 	bl	800a9e0 <HAL_Delay>

        return 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e011      	b.n	80095d0 <passConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80095ac:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80095b0:	9302      	str	r3, [sp, #8]
 80095b2:	236e      	movs	r3, #110	@ 0x6e
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	4b0e      	ldr	r3, [pc, #56]	@ (80095f0 <passConfirmation+0xb8>)
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	236e      	movs	r3, #110	@ 0x6e
 80095bc:	2200      	movs	r2, #0
 80095be:	21a0      	movs	r1, #160	@ 0xa0
 80095c0:	480c      	ldr	r0, [pc, #48]	@ (80095f4 <passConfirmation+0xbc>)
 80095c2:	f002 fa97 	bl	800baf4 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 80095c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80095ca:	f001 fa09 	bl	800a9e0 <HAL_Delay>

    	return 1;
 80095ce:	2301      	movs	r3, #1
    }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	0800f40c 	.word	0x0800f40c
 80095dc:	20001900 	.word	0x20001900
 80095e0:	40010800 	.word	0x40010800
 80095e4:	20001080 	.word	0x20001080
 80095e8:	20001838 	.word	0x20001838
 80095ec:	2000184c 	.word	0x2000184c
 80095f0:	20000fec 	.word	0x20000fec
 80095f4:	2000193c 	.word	0x2000193c

080095f8 <takeWifiPass>:

void takeWifiPass() {
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80095fe:	2001      	movs	r0, #1
 8009600:	f000 fcf2 	bl	8009fe8 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8009604:	2210      	movs	r2, #16
 8009606:	2100      	movs	r1, #0
 8009608:	48a4      	ldr	r0, [pc, #656]	@ (800989c <takeWifiPass+0x2a4>)
 800960a:	f005 f921 	bl	800e850 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800960e:	2301      	movs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8009612:	2307      	movs	r3, #7
 8009614:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8009616:	2301      	movs	r3, #1
 8009618:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800961a:	2300      	movs	r3, #0
 800961c:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800961e:	4ba0      	ldr	r3, [pc, #640]	@ (80098a0 <takeWifiPass+0x2a8>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8009624:	2101      	movs	r1, #1
 8009626:	2003      	movs	r0, #3
 8009628:	f7f7 fbcc 	bl	8000dc4 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800962c:	2108      	movs	r1, #8
 800962e:	489d      	ldr	r0, [pc, #628]	@ (80098a4 <takeWifiPass+0x2ac>)
 8009630:	f001 ffa6 	bl	800b580 <HAL_GPIO_ReadPin>
 8009634:	4603      	mov	r3, r0
 8009636:	2b01      	cmp	r3, #1
 8009638:	d106      	bne.n	8009648 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800963a:	f7ff ff7d 	bl	8009538 <passConfirmation>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8126 	bne.w	8009892 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8009646:	e7da      	b.n	80095fe <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009648:	2101      	movs	r1, #1
 800964a:	4896      	ldr	r0, [pc, #600]	@ (80098a4 <takeWifiPass+0x2ac>)
 800964c:	f001 ff98 	bl	800b580 <HAL_GPIO_ReadPin>
 8009650:	4603      	mov	r3, r0
 8009652:	2b01      	cmp	r3, #1
 8009654:	d14d      	bne.n	80096f2 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b50      	cmp	r3, #80	@ 0x50
 800965a:	dd01      	ble.n	8009660 <takeWifiPass+0x68>
        		cursorPosition = 1;
 800965c:	2301      	movs	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b10      	cmp	r3, #16
 8009664:	d13f      	bne.n	80096e6 <takeWifiPass+0xee>
            	if(page == 1) {
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d109      	bne.n	8009680 <takeWifiPass+0x88>
            		cursorPosition = 1;
 800966c:	2301      	movs	r3, #1
 800966e:	60fb      	str	r3, [r7, #12]
            		page++;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	3301      	adds	r3, #1
 8009674:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8009676:	2102      	movs	r1, #2
 8009678:	2003      	movs	r0, #3
 800967a:	f7f7 fba3 	bl	8000dc4 <printTemplate>
 800967e:	e035      	b.n	80096ec <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d109      	bne.n	800969a <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8009686:	2301      	movs	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
            		page++;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	3301      	adds	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8009690:	2103      	movs	r1, #3
 8009692:	2003      	movs	r0, #3
 8009694:	f7f7 fb96 	bl	8000dc4 <printTemplate>
 8009698:	e028      	b.n	80096ec <takeWifiPass+0xf4>
            	} else if(page == 3) {
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b03      	cmp	r3, #3
 800969e:	d109      	bne.n	80096b4 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80096a0:	2301      	movs	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]
            		page++;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	3301      	adds	r3, #1
 80096a8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80096aa:	2104      	movs	r1, #4
 80096ac:	2003      	movs	r0, #3
 80096ae:	f7f7 fb89 	bl	8000dc4 <printTemplate>
 80096b2:	e01b      	b.n	80096ec <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d109      	bne.n	80096ce <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80096ba:	2301      	movs	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
            		page++;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	3301      	adds	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80096c4:	2105      	movs	r1, #5
 80096c6:	2003      	movs	r0, #3
 80096c8:	f7f7 fb7c 	bl	8000dc4 <printTemplate>
 80096cc:	e00e      	b.n	80096ec <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	d10b      	bne.n	80096ec <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80096d4:	2301      	movs	r3, #1
 80096d6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80096dc:	2101      	movs	r1, #1
 80096de:	2003      	movs	r0, #3
 80096e0:	f7f7 fb70 	bl	8000dc4 <printTemplate>
 80096e4:	e002      	b.n	80096ec <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80096ec:	2096      	movs	r0, #150	@ 0x96
 80096ee:	f001 f977 	bl	800a9e0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80096f2:	2108      	movs	r1, #8
 80096f4:	486c      	ldr	r0, [pc, #432]	@ (80098a8 <takeWifiPass+0x2b0>)
 80096f6:	f001 ff43 	bl	800b580 <HAL_GPIO_ReadPin>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d149      	bne.n	8009794 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dc01      	bgt.n	800970a <takeWifiPass+0x112>
        		cursorPosition = 80;
 8009706:	2350      	movs	r3, #80	@ 0x50
 8009708:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d13b      	bne.n	8009788 <takeWifiPass+0x190>
            	if(page == 1) {
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d108      	bne.n	8009728 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8009716:	2310      	movs	r3, #16
 8009718:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800971a:	2305      	movs	r3, #5
 800971c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800971e:	2105      	movs	r1, #5
 8009720:	2003      	movs	r0, #3
 8009722:	f7f7 fb4f 	bl	8000dc4 <printTemplate>
 8009726:	e032      	b.n	800978e <takeWifiPass+0x196>
            	} else if(page == 2) {
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2b02      	cmp	r3, #2
 800972c:	d108      	bne.n	8009740 <takeWifiPass+0x148>
            		cursorPosition = 16;
 800972e:	2310      	movs	r3, #16
 8009730:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009732:	2301      	movs	r3, #1
 8009734:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009736:	2101      	movs	r1, #1
 8009738:	2003      	movs	r0, #3
 800973a:	f7f7 fb43 	bl	8000dc4 <printTemplate>
 800973e:	e026      	b.n	800978e <takeWifiPass+0x196>
            	} else if(page == 3) {
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b03      	cmp	r3, #3
 8009744:	d108      	bne.n	8009758 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8009746:	2310      	movs	r3, #16
 8009748:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800974a:	2302      	movs	r3, #2
 800974c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800974e:	2102      	movs	r1, #2
 8009750:	2003      	movs	r0, #3
 8009752:	f7f7 fb37 	bl	8000dc4 <printTemplate>
 8009756:	e01a      	b.n	800978e <takeWifiPass+0x196>
            	} else if(page == 4) {
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2b04      	cmp	r3, #4
 800975c:	d108      	bne.n	8009770 <takeWifiPass+0x178>
            		cursorPosition = 16;
 800975e:	2310      	movs	r3, #16
 8009760:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8009762:	2303      	movs	r3, #3
 8009764:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8009766:	2103      	movs	r1, #3
 8009768:	2003      	movs	r0, #3
 800976a:	f7f7 fb2b 	bl	8000dc4 <printTemplate>
 800976e:	e00e      	b.n	800978e <takeWifiPass+0x196>
            	} else if(page == 5) {
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2b05      	cmp	r3, #5
 8009774:	d10b      	bne.n	800978e <takeWifiPass+0x196>
            		cursorPosition = 16;
 8009776:	2310      	movs	r3, #16
 8009778:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800977a:	2304      	movs	r3, #4
 800977c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800977e:	2104      	movs	r1, #4
 8009780:	2003      	movs	r0, #3
 8009782:	f7f7 fb1f 	bl	8000dc4 <printTemplate>
 8009786:	e002      	b.n	800978e <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3b01      	subs	r3, #1
 800978c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800978e:	2096      	movs	r0, #150	@ 0x96
 8009790:	f001 f926 	bl	800a9e0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009794:	2102      	movs	r1, #2
 8009796:	4843      	ldr	r0, [pc, #268]	@ (80098a4 <takeWifiPass+0x2ac>)
 8009798:	f001 fef2 	bl	800b580 <HAL_GPIO_ReadPin>
 800979c:	4603      	mov	r3, r0
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d12f      	bne.n	8009802 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	b2d9      	uxtb	r1, r3
 80097a6:	4a41      	ldr	r2, [pc, #260]	@ (80098ac <takeWifiPass+0x2b4>)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4413      	add	r3, r2
 80097ac:	460a      	mov	r2, r1
 80097ae:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80097b0:	4a3f      	ldr	r2, [pc, #252]	@ (80098b0 <takeWifiPass+0x2b8>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	7819      	ldrb	r1, [r3, #0]
 80097b8:	4a38      	ldr	r2, [pc, #224]	@ (800989c <takeWifiPass+0x2a4>)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4413      	add	r3, r2
 80097be:	460a      	mov	r2, r1
 80097c0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	b2d9      	uxtb	r1, r3
 80097c6:	4a3a      	ldr	r2, [pc, #232]	@ (80098b0 <takeWifiPass+0x2b8>)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4413      	add	r3, r2
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	2001      	movs	r0, #1
 80097d2:	f000 fbc0 	bl	8009f56 <lcd_print_char>

            writeLoc++;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3301      	adds	r3, #1
 80097da:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	3301      	adds	r3, #1
 80097e0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3301      	adds	r3, #1
 80097e6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80097e8:	4a30      	ldr	r2, [pc, #192]	@ (80098ac <takeWifiPass+0x2b4>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 80097f2:	4a2a      	ldr	r2, [pc, #168]	@ (800989c <takeWifiPass+0x2a4>)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	4413      	add	r3, r2
 80097f8:	2200      	movs	r2, #0
 80097fa:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80097fc:	2096      	movs	r0, #150	@ 0x96
 80097fe:	f001 f8ef 	bl	800a9e0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009802:	2104      	movs	r1, #4
 8009804:	4827      	ldr	r0, [pc, #156]	@ (80098a4 <takeWifiPass+0x2ac>)
 8009806:	f001 febb 	bl	800b580 <HAL_GPIO_ReadPin>
 800980a:	4603      	mov	r3, r0
 800980c:	2b01      	cmp	r3, #1
 800980e:	d139      	bne.n	8009884 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8009810:	4b22      	ldr	r3, [pc, #136]	@ (800989c <takeWifiPass+0x2a4>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d032      	beq.n	800987e <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8009818:	4a24      	ldr	r2, [pc, #144]	@ (80098ac <takeWifiPass+0x2b4>)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	2200      	movs	r2, #0
 8009820:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8009822:	4a1e      	ldr	r2, [pc, #120]	@ (800989c <takeWifiPass+0x2a4>)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4413      	add	r3, r2
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b07      	cmp	r3, #7
 8009830:	dd03      	ble.n	800983a <takeWifiPass+0x242>
        			writeLoc--;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	3b01      	subs	r3, #1
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	e004      	b.n	8009844 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b06      	cmp	r3, #6
 800983e:	dc01      	bgt.n	8009844 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8009840:	2307      	movs	r3, #7
 8009842:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	dd06      	ble.n	8009858 <takeWifiPass+0x260>
        			arrayPosition--;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3b01      	subs	r3, #1
 800984e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3b01      	subs	r3, #1
 8009854:	607b      	str	r3, [r7, #4]
 8009856:	e007      	b.n	8009868 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	da04      	bge.n	8009868 <takeWifiPass+0x270>
        			arrayPosition = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8009862:	4b0f      	ldr	r3, [pc, #60]	@ (80098a0 <takeWifiPass+0x2a8>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	b2db      	uxtb	r3, r3
 800986c:	3307      	adds	r3, #7
 800986e:	b2db      	uxtb	r3, r3
 8009870:	4619      	mov	r1, r3
 8009872:	2001      	movs	r0, #1
 8009874:	f000 fb90 	bl	8009f98 <lcd_delete_char>
        		HAL_Delay(50);
 8009878:	2032      	movs	r0, #50	@ 0x32
 800987a:	f001 f8b1 	bl	800a9e0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800987e:	2096      	movs	r0, #150	@ 0x96
 8009880:	f001 f8ae 	bl	800a9e0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	4619      	mov	r1, r3
 800988a:	2002      	movs	r0, #2
 800988c:	f000 fb2f 	bl	8009eee <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009890:	e6cc      	b.n	800962c <takeWifiPass+0x34>
    	        break;
 8009892:	bf00      	nop
    }
}
 8009894:	bf00      	nop
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20001080 	.word	0x20001080
 80098a0:	20000008 	.word	0x20000008
 80098a4:	40010800 	.word	0x40010800
 80098a8:	40011000 	.word	0x40011000
 80098ac:	20000fec 	.word	0x20000fec
 80098b0:	20000018 	.word	0x20000018

080098b4 <mergeData>:

char* mergeData() {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b09c      	sub	sp, #112	@ 0x70
 80098b8:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80098ba:	2300      	movs	r3, #0
 80098bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80098c2:	2229      	movs	r2, #41	@ 0x29
 80098c4:	2100      	movs	r1, #0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f004 ffc2 	bl	800e850 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80098cc:	4b5f      	ldr	r3, [pc, #380]	@ (8009a4c <mergeData+0x198>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	703b      	strb	r3, [r7, #0]
 80098d2:	4b5f      	ldr	r3, [pc, #380]	@ (8009a50 <mergeData+0x19c>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	707b      	strb	r3, [r7, #1]
 80098d8:	4b5e      	ldr	r3, [pc, #376]	@ (8009a54 <mergeData+0x1a0>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	70bb      	strb	r3, [r7, #2]
 80098de:	4b5e      	ldr	r3, [pc, #376]	@ (8009a58 <mergeData+0x1a4>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	70fb      	strb	r3, [r7, #3]
 80098e4:	4b5d      	ldr	r3, [pc, #372]	@ (8009a5c <mergeData+0x1a8>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	713b      	strb	r3, [r7, #4]
 80098ea:	4b5d      	ldr	r3, [pc, #372]	@ (8009a60 <mergeData+0x1ac>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	717b      	strb	r3, [r7, #5]
 80098f0:	4b5c      	ldr	r3, [pc, #368]	@ (8009a64 <mergeData+0x1b0>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	71bb      	strb	r3, [r7, #6]
 80098f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009a68 <mergeData+0x1b4>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
 80098fc:	4b5b      	ldr	r3, [pc, #364]	@ (8009a6c <mergeData+0x1b8>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	723b      	strb	r3, [r7, #8]
 8009902:	4b5b      	ldr	r3, [pc, #364]	@ (8009a70 <mergeData+0x1bc>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	727b      	strb	r3, [r7, #9]
 8009908:	4b5a      	ldr	r3, [pc, #360]	@ (8009a74 <mergeData+0x1c0>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	72bb      	strb	r3, [r7, #10]
 800990e:	4b5a      	ldr	r3, [pc, #360]	@ (8009a78 <mergeData+0x1c4>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	72fb      	strb	r3, [r7, #11]
 8009914:	4b59      	ldr	r3, [pc, #356]	@ (8009a7c <mergeData+0x1c8>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	733b      	strb	r3, [r7, #12]
 800991a:	4b59      	ldr	r3, [pc, #356]	@ (8009a80 <mergeData+0x1cc>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	737b      	strb	r3, [r7, #13]
 8009920:	4b58      	ldr	r3, [pc, #352]	@ (8009a84 <mergeData+0x1d0>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	73bb      	strb	r3, [r7, #14]
 8009926:	4b58      	ldr	r3, [pc, #352]	@ (8009a88 <mergeData+0x1d4>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	73fb      	strb	r3, [r7, #15]
 800992c:	4b57      	ldr	r3, [pc, #348]	@ (8009a8c <mergeData+0x1d8>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	743b      	strb	r3, [r7, #16]
 8009932:	4b57      	ldr	r3, [pc, #348]	@ (8009a90 <mergeData+0x1dc>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	747b      	strb	r3, [r7, #17]
 8009938:	4b56      	ldr	r3, [pc, #344]	@ (8009a94 <mergeData+0x1e0>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	74bb      	strb	r3, [r7, #18]
 800993e:	4b56      	ldr	r3, [pc, #344]	@ (8009a98 <mergeData+0x1e4>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	74fb      	strb	r3, [r7, #19]
 8009944:	4b55      	ldr	r3, [pc, #340]	@ (8009a9c <mergeData+0x1e8>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	753b      	strb	r3, [r7, #20]
 800994a:	4b55      	ldr	r3, [pc, #340]	@ (8009aa0 <mergeData+0x1ec>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	757b      	strb	r3, [r7, #21]
 8009950:	4b54      	ldr	r3, [pc, #336]	@ (8009aa4 <mergeData+0x1f0>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	75bb      	strb	r3, [r7, #22]
 8009956:	4b54      	ldr	r3, [pc, #336]	@ (8009aa8 <mergeData+0x1f4>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	75fb      	strb	r3, [r7, #23]
 800995c:	4b53      	ldr	r3, [pc, #332]	@ (8009aac <mergeData+0x1f8>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	763b      	strb	r3, [r7, #24]
 8009962:	4b53      	ldr	r3, [pc, #332]	@ (8009ab0 <mergeData+0x1fc>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	767b      	strb	r3, [r7, #25]
 8009968:	4b52      	ldr	r3, [pc, #328]	@ (8009ab4 <mergeData+0x200>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	76bb      	strb	r3, [r7, #26]
 800996e:	4b52      	ldr	r3, [pc, #328]	@ (8009ab8 <mergeData+0x204>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	76fb      	strb	r3, [r7, #27]
 8009974:	4b51      	ldr	r3, [pc, #324]	@ (8009abc <mergeData+0x208>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	773b      	strb	r3, [r7, #28]
 800997a:	4b51      	ldr	r3, [pc, #324]	@ (8009ac0 <mergeData+0x20c>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8009980:	4b50      	ldr	r3, [pc, #320]	@ (8009ac4 <mergeData+0x210>)
 8009982:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8009986:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8009988:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac4 <mergeData+0x210>)
 800998a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 800998e:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8009990:	4b4c      	ldr	r3, [pc, #304]	@ (8009ac4 <mergeData+0x210>)
 8009992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8009996:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 800999a:	4b4a      	ldr	r3, [pc, #296]	@ (8009ac4 <mergeData+0x210>)
 800999c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 80099a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 80099a4:	4b47      	ldr	r3, [pc, #284]	@ (8009ac4 <mergeData+0x210>)
 80099a6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 80099aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 80099ae:	4b45      	ldr	r3, [pc, #276]	@ (8009ac4 <mergeData+0x210>)
 80099b0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 80099b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 80099b8:	4b42      	ldr	r3, [pc, #264]	@ (8009ac4 <mergeData+0x210>)
 80099ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 80099be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 80099c2:	4b40      	ldr	r3, [pc, #256]	@ (8009ac4 <mergeData+0x210>)
 80099c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 80099c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 80099cc:	4b3d      	ldr	r3, [pc, #244]	@ (8009ac4 <mergeData+0x210>)
 80099ce:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 80099d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 80099d6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac4 <mergeData+0x210>)
 80099d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 80099dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80099e0:	2306      	movs	r3, #6
 80099e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80099e6:	2300      	movs	r3, #0
 80099e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099ea:	e015      	b.n	8009a18 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 80099ec:	463a      	mov	r2, r7
 80099ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f0:	4413      	add	r3, r2
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099fa:	4933      	ldr	r1, [pc, #204]	@ (8009ac8 <mergeData+0x214>)
 80099fc:	4618      	mov	r0, r3
 80099fe:	f004 fea3 	bl	800e748 <siprintf>
	    strcat(combinedString, temp);
 8009a02:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009a06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f004 fefd 	bl	800e80c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8009a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a14:	3301      	adds	r3, #1
 8009a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a1a:	2b28      	cmp	r3, #40	@ 0x28
 8009a1c:	d9e6      	bls.n	80099ec <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8009a1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f6 fbfe 	bl	8000224 <strlen>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f004 fdd5 	bl	800e5dc <malloc>
 8009a32:	4603      	mov	r3, r0
 8009a34:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8009a36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8009a3e:	f004 ff4b 	bl	800e8d8 <strcpy>
	return result;
 8009a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3770      	adds	r7, #112	@ 0x70
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	200010cb 	.word	0x200010cb
 8009a50:	200010bd 	.word	0x200010bd
 8009a54:	200010c0 	.word	0x200010c0
 8009a58:	200010c1 	.word	0x200010c1
 8009a5c:	200010c2 	.word	0x200010c2
 8009a60:	200010c9 	.word	0x200010c9
 8009a64:	200010c3 	.word	0x200010c3
 8009a68:	200010c4 	.word	0x200010c4
 8009a6c:	200010c8 	.word	0x200010c8
 8009a70:	200010c5 	.word	0x200010c5
 8009a74:	200010d5 	.word	0x200010d5
 8009a78:	200010c6 	.word	0x200010c6
 8009a7c:	200010d6 	.word	0x200010d6
 8009a80:	200010c7 	.word	0x200010c7
 8009a84:	200010d7 	.word	0x200010d7
 8009a88:	200010ca 	.word	0x200010ca
 8009a8c:	200010cc 	.word	0x200010cc
 8009a90:	200010cd 	.word	0x200010cd
 8009a94:	200010ce 	.word	0x200010ce
 8009a98:	200010cf 	.word	0x200010cf
 8009a9c:	200010d0 	.word	0x200010d0
 8009aa0:	200010d1 	.word	0x200010d1
 8009aa4:	200010d2 	.word	0x200010d2
 8009aa8:	200010d3 	.word	0x200010d3
 8009aac:	200010d4 	.word	0x200010d4
 8009ab0:	200010d8 	.word	0x200010d8
 8009ab4:	200010da 	.word	0x200010da
 8009ab8:	200010b4 	.word	0x200010b4
 8009abc:	200010b5 	.word	0x200010b5
 8009ac0:	200010dd 	.word	0x200010dd
 8009ac4:	20000fec 	.word	0x20000fec
 8009ac8:	0800f420 	.word	0x0800f420

08009acc <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8009ad2:	4a13      	ldr	r2, [pc, #76]	@ (8009b20 <convertAndSendData+0x54>)
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	f000 fa28 	bl	8009f2c <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8009adc:	4a11      	ldr	r2, [pc, #68]	@ (8009b24 <convertAndSendData+0x58>)
 8009ade:	2101      	movs	r1, #1
 8009ae0:	2002      	movs	r0, #2
 8009ae2:	f000 fa23 	bl	8009f2c <lcd_print>

	for(int i=0; i<2; i++) {
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	e00c      	b.n	8009b06 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8009aec:	f7ff fee2 	bl	80098b4 <mergeData>
 8009af0:	4603      	mov	r3, r0
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <convertAndSendData+0x5c>)
 8009af6:	4a0d      	ldr	r2, [pc, #52]	@ (8009b2c <convertAndSendData+0x60>)
 8009af8:	490d      	ldr	r1, [pc, #52]	@ (8009b30 <convertAndSendData+0x64>)
 8009afa:	480e      	ldr	r0, [pc, #56]	@ (8009b34 <convertAndSendData+0x68>)
 8009afc:	f7f6 ff10 	bl	8000920 <sendMachineData>
	for(int i=0; i<2; i++) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3301      	adds	r3, #1
 8009b04:	607b      	str	r3, [r7, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	ddef      	ble.n	8009aec <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8009b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b10:	f000 ff66 	bl	800a9e0 <HAL_Delay>
	lcd_clear();
 8009b14:	f000 fa36 	bl	8009f84 <lcd_clear>
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20001798 	.word	0x20001798
 8009b24:	200017ac 	.word	0x200017ac
 8009b28:	20001080 	.word	0x20001080
 8009b2c:	20001070 	.word	0x20001070
 8009b30:	20001064 	.word	0x20001064
 8009b34:	200019d8 	.word	0x200019d8

08009b38 <iotSetup>:

void iotSetup() {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8009b3c:	4b15      	ldr	r3, [pc, #84]	@ (8009b94 <iotSetup+0x5c>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d025      	beq.n	8009b90 <iotSetup+0x58>
		if(setupCompleted != 1) {
 8009b44:	4b14      	ldr	r3, [pc, #80]	@ (8009b98 <iotSetup+0x60>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d121      	bne.n	8009b90 <iotSetup+0x58>
				takeMachineID();
				HAL_Delay(200);
				goto takeIDSection;
			}*/
		} else {
			if(checkEEPROM4ID() != 1) {
 8009b4c:	f000 f830 	bl	8009bb0 <checkEEPROM4ID>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d001      	beq.n	8009b5a <iotSetup+0x22>
				takeMachineID();
 8009b56:	f7ff f9af 	bl	8008eb8 <takeMachineID>
			}

			if(!(strlen(wifiSSID) >= 2)) {
 8009b5a:	4810      	ldr	r0, [pc, #64]	@ (8009b9c <iotSetup+0x64>)
 8009b5c:	f7f6 fb62 	bl	8000224 <strlen>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d801      	bhi.n	8009b6a <iotSetup+0x32>
				takeWifiSSID();
 8009b66:	f7ff fb89 	bl	800927c <takeWifiSSID>
			}

			if(!(strlen(wifiPass) >= 2)) {
 8009b6a:	480d      	ldr	r0, [pc, #52]	@ (8009ba0 <iotSetup+0x68>)
 8009b6c:	f7f6 fb5a 	bl	8000224 <strlen>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d801      	bhi.n	8009b7a <iotSetup+0x42>
				takeWifiPass();
 8009b76:	f7ff fd3f 	bl	80095f8 <takeWifiPass>
			}

			ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8009b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba4 <iotSetup+0x6c>)
 8009b7c:	490a      	ldr	r1, [pc, #40]	@ (8009ba8 <iotSetup+0x70>)
 8009b7e:	480b      	ldr	r0, [pc, #44]	@ (8009bac <iotSetup+0x74>)
 8009b80:	f7f6 fe24 	bl	80007cc <ESP8266_Init>
			HAL_Delay(500);
 8009b84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b88:	f000 ff2a 	bl	800a9e0 <HAL_Delay>
			convertAndSendData();
 8009b8c:	f7ff ff9e 	bl	8009acc <convertAndSendData>
		}
	}
}
 8009b90:	bf00      	nop
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200010db 	.word	0x200010db
 8009b98:	20001090 	.word	0x20001090
 8009b9c:	20001070 	.word	0x20001070
 8009ba0:	20001080 	.word	0x20001080
 8009ba4:	0800f424 	.word	0x0800f424
 8009ba8:	0800f43c 	.word	0x0800f43c
 8009bac:	200019d8 	.word	0x200019d8

08009bb0 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8009bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf4 <checkEEPROM4ID+0x44>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	e00d      	b.n	8009be2 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8009bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf8 <checkEEPROM4ID+0x48>)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3301      	adds	r3, #1
 8009be0:	607b      	str	r3, [r7, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b0b      	cmp	r3, #11
 8009be6:	ddee      	ble.n	8009bc6 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8009be8:	68bb      	ldr	r3, [r7, #8]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr
 8009bf4:	20000000 	.word	0x20000000
 8009bf8:	20000fec 	.word	0x20000fec

08009bfc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	4603      	mov	r3, r0
 8009c04:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	f023 030f 	bic.w	r3, r3, #15
 8009c0c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	011b      	lsls	r3, r3, #4
 8009c12:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8009c14:	7b7b      	ldrb	r3, [r7, #13]
 8009c16:	f043 030c 	orr.w	r3, r3, #12
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8009c1e:	7b7b      	ldrb	r3, [r7, #13]
 8009c20:	f043 0308 	orr.w	r3, r3, #8
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8009c28:	7b3b      	ldrb	r3, [r7, #12]
 8009c2a:	f043 030c 	orr.w	r3, r3, #12
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8009c32:	7b3b      	ldrb	r3, [r7, #12]
 8009c34:	f043 0308 	orr.w	r3, r3, #8
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009c3c:	bf00      	nop
 8009c3e:	4825      	ldr	r0, [pc, #148]	@ (8009cd4 <lcd_send_cmd+0xd8>)
 8009c40:	f002 fac7 	bl	800c1d2 <HAL_I2C_GetError>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d0f9      	beq.n	8009c3e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009c4a:	bf00      	nop
 8009c4c:	4821      	ldr	r0, [pc, #132]	@ (8009cd4 <lcd_send_cmd+0xd8>)
 8009c4e:	f002 fab3 	bl	800c1b8 <HAL_I2C_GetState>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	d1f9      	bne.n	8009c4c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009c58:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd8 <lcd_send_cmd+0xdc>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d116      	bne.n	8009c8e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
 8009c64:	e00f      	b.n	8009c86 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	3310      	adds	r3, #16
 8009c6a:	443b      	add	r3, r7
 8009c6c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	f022 0208 	bic.w	r2, r2, #8
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	3310      	adds	r3, #16
 8009c7a:	443b      	add	r3, r7
 8009c7c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	3301      	adds	r3, #1
 8009c84:	73fb      	strb	r3, [r7, #15]
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d9ec      	bls.n	8009c66 <lcd_send_cmd+0x6a>
 8009c8c:	e015      	b.n	8009cba <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73bb      	strb	r3, [r7, #14]
 8009c92:	e00f      	b.n	8009cb4 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	3310      	adds	r3, #16
 8009c98:	443b      	add	r3, r7
 8009c9a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	f042 0208 	orr.w	r2, r2, #8
 8009ca4:	b2d2      	uxtb	r2, r2
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	443b      	add	r3, r7
 8009caa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	73bb      	strb	r3, [r7, #14]
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d9ec      	bls.n	8009c94 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009cba:	f107 0208 	add.w	r2, r7, #8
 8009cbe:	2364      	movs	r3, #100	@ 0x64
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	2304      	movs	r3, #4
 8009cc4:	214e      	movs	r1, #78	@ 0x4e
 8009cc6:	4803      	ldr	r0, [pc, #12]	@ (8009cd4 <lcd_send_cmd+0xd8>)
 8009cc8:	f001 fe16 	bl	800b8f8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	2000193c 	.word	0x2000193c
 8009cd8:	20001911 	.word	0x20001911

08009cdc <lcd_send_data>:

void lcd_send_data (char data) {
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	f023 030f 	bic.w	r3, r3, #15
 8009cec:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009cf4:	7b7b      	ldrb	r3, [r7, #13]
 8009cf6:	f043 030d 	orr.w	r3, r3, #13
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8009cfe:	7b7b      	ldrb	r3, [r7, #13]
 8009d00:	f043 0309 	orr.w	r3, r3, #9
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8009d08:	7b3b      	ldrb	r3, [r7, #12]
 8009d0a:	f043 030d 	orr.w	r3, r3, #13
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8009d12:	7b3b      	ldrb	r3, [r7, #12]
 8009d14:	f043 0309 	orr.w	r3, r3, #9
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009d1c:	bf00      	nop
 8009d1e:	4825      	ldr	r0, [pc, #148]	@ (8009db4 <lcd_send_data+0xd8>)
 8009d20:	f002 fa57 	bl	800c1d2 <HAL_I2C_GetError>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d0f9      	beq.n	8009d1e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009d2a:	bf00      	nop
 8009d2c:	4821      	ldr	r0, [pc, #132]	@ (8009db4 <lcd_send_data+0xd8>)
 8009d2e:	f002 fa43 	bl	800c1b8 <HAL_I2C_GetState>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d1f9      	bne.n	8009d2c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009d38:	4b1f      	ldr	r3, [pc, #124]	@ (8009db8 <lcd_send_data+0xdc>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d116      	bne.n	8009d6e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
 8009d44:	e00f      	b.n	8009d66 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	3310      	adds	r3, #16
 8009d4a:	443b      	add	r3, r7
 8009d4c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	f022 0208 	bic.w	r2, r2, #8
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	3310      	adds	r3, #16
 8009d5a:	443b      	add	r3, r7
 8009d5c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	3301      	adds	r3, #1
 8009d64:	73fb      	strb	r3, [r7, #15]
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d9ec      	bls.n	8009d46 <lcd_send_data+0x6a>
 8009d6c:	e015      	b.n	8009d9a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73bb      	strb	r3, [r7, #14]
 8009d72:	e00f      	b.n	8009d94 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	3310      	adds	r3, #16
 8009d78:	443b      	add	r3, r7
 8009d7a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	f042 0208 	orr.w	r2, r2, #8
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	3310      	adds	r3, #16
 8009d88:	443b      	add	r3, r7
 8009d8a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	3301      	adds	r3, #1
 8009d92:	73bb      	strb	r3, [r7, #14]
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d9ec      	bls.n	8009d74 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009d9a:	f107 0208 	add.w	r2, r7, #8
 8009d9e:	2364      	movs	r3, #100	@ 0x64
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	2304      	movs	r3, #4
 8009da4:	214e      	movs	r1, #78	@ 0x4e
 8009da6:	4803      	ldr	r0, [pc, #12]	@ (8009db4 <lcd_send_data+0xd8>)
 8009da8:	f001 fda6 	bl	800b8f8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	2000193c 	.word	0x2000193c
 8009db8:	20001911 	.word	0x20001911

08009dbc <lcd_send_string>:

void lcd_send_string (char *str) {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
	while (*str) {
 8009dc4:	e006      	b.n	8009dd4 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff ff84 	bl	8009cdc <lcd_send_data>
	while (*str) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f4      	bne.n	8009dc6 <lcd_send_string+0xa>
	}
}
 8009ddc:	bf00      	nop
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <lcd_send_char>:

void lcd_send_char(char ch) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af02      	add	r7, sp, #8
 8009dee:	4603      	mov	r3, r0
 8009df0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	f023 030f 	bic.w	r3, r3, #15
 8009df8:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009e00:	7b7b      	ldrb	r3, [r7, #13]
 8009e02:	f043 030d 	orr.w	r3, r3, #13
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8009e0a:	7b7b      	ldrb	r3, [r7, #13]
 8009e0c:	f043 0309 	orr.w	r3, r3, #9
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8009e14:	7b3b      	ldrb	r3, [r7, #12]
 8009e16:	f043 030d 	orr.w	r3, r3, #13
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009e1e:	7b3b      	ldrb	r3, [r7, #12]
 8009e20:	f043 0309 	orr.w	r3, r3, #9
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009e28:	bf00      	nop
 8009e2a:	4825      	ldr	r0, [pc, #148]	@ (8009ec0 <lcd_send_char+0xd8>)
 8009e2c:	f002 f9d1 	bl	800c1d2 <HAL_I2C_GetError>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d0f9      	beq.n	8009e2a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009e36:	bf00      	nop
 8009e38:	4821      	ldr	r0, [pc, #132]	@ (8009ec0 <lcd_send_char+0xd8>)
 8009e3a:	f002 f9bd 	bl	800c1b8 <HAL_I2C_GetState>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d1f9      	bne.n	8009e38 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009e44:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec4 <lcd_send_char+0xdc>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d116      	bne.n	8009e7a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73fb      	strb	r3, [r7, #15]
 8009e50:	e00f      	b.n	8009e72 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	3310      	adds	r3, #16
 8009e56:	443b      	add	r3, r7
 8009e58:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	f022 0208 	bic.w	r2, r2, #8
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	3310      	adds	r3, #16
 8009e66:	443b      	add	r3, r7
 8009e68:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	73fb      	strb	r3, [r7, #15]
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d9ec      	bls.n	8009e52 <lcd_send_char+0x6a>
 8009e78:	e015      	b.n	8009ea6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73bb      	strb	r3, [r7, #14]
 8009e7e:	e00f      	b.n	8009ea0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	3310      	adds	r3, #16
 8009e84:	443b      	add	r3, r7
 8009e86:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	f042 0208 	orr.w	r2, r2, #8
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	3310      	adds	r3, #16
 8009e94:	443b      	add	r3, r7
 8009e96:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	73bb      	strb	r3, [r7, #14]
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d9ec      	bls.n	8009e80 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8009ea6:	f107 0208 	add.w	r2, r7, #8
 8009eaa:	2364      	movs	r3, #100	@ 0x64
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	2304      	movs	r3, #4
 8009eb0:	214e      	movs	r1, #78	@ 0x4e
 8009eb2:	4803      	ldr	r0, [pc, #12]	@ (8009ec0 <lcd_send_char+0xd8>)
 8009eb4:	f001 fd20 	bl	800b8f8 <HAL_I2C_Master_Transmit>
}
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	2000193c 	.word	0x2000193c
 8009ec4:	20001911 	.word	0x20001911

08009ec8 <lcd_init>:

void lcd_init (void) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8009ecc:	2002      	movs	r0, #2
 8009ece:	f7ff fe95 	bl	8009bfc <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8009ed2:	2028      	movs	r0, #40	@ 0x28
 8009ed4:	f7ff fe92 	bl	8009bfc <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8009ed8:	200c      	movs	r0, #12
 8009eda:	f7ff fe8f 	bl	8009bfc <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009ede:	2080      	movs	r0, #128	@ 0x80
 8009ee0:	f7ff fe8c 	bl	8009bfc <lcd_send_cmd>
	lcd_backlight(1);
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	f000 f86d 	bl	8009fc4 <lcd_backlight>
}
 8009eea:	bf00      	nop
 8009eec:	bd80      	pop	{r7, pc}

08009eee <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	460a      	mov	r2, r1
 8009ef8:	71fb      	strb	r3, [r7, #7]
 8009efa:	4613      	mov	r3, r2
 8009efc:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009efe:	79fb      	ldrb	r3, [r7, #7]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d106      	bne.n	8009f12 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009f04:	79bb      	ldrb	r3, [r7, #6]
 8009f06:	337f      	adds	r3, #127	@ 0x7f
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff fe76 	bl	8009bfc <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009f10:	e008      	b.n	8009f24 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d105      	bne.n	8009f24 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8009f18:	79bb      	ldrb	r3, [r7, #6]
 8009f1a:	3b41      	subs	r3, #65	@ 0x41
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fe6c 	bl	8009bfc <lcd_send_cmd>
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	603a      	str	r2, [r7, #0]
 8009f36:	71fb      	strb	r3, [r7, #7]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009f3c:	79ba      	ldrb	r2, [r7, #6]
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff ffd3 	bl	8009eee <lcd_gotoxy>
	lcd_send_string(str);
 8009f48:	6838      	ldr	r0, [r7, #0]
 8009f4a:	f7ff ff37 	bl	8009dbc <lcd_send_string>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	71fb      	strb	r3, [r7, #7]
 8009f60:	460b      	mov	r3, r1
 8009f62:	71bb      	strb	r3, [r7, #6]
 8009f64:	4613      	mov	r3, r2
 8009f66:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009f68:	79ba      	ldrb	r2, [r7, #6]
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ffbd 	bl	8009eee <lcd_gotoxy>
    lcd_send_char(ch);
 8009f74:	797b      	ldrb	r3, [r7, #5]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff ff36 	bl	8009de8 <lcd_send_char>
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <lcd_clear>:

void lcd_clear(void) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009f88:	2001      	movs	r0, #1
 8009f8a:	f7ff fe37 	bl	8009bfc <lcd_send_cmd>
    HAL_Delay(2);
 8009f8e:	2002      	movs	r0, #2
 8009f90:	f000 fd26 	bl	800a9e0 <HAL_Delay>
}
 8009f94:	bf00      	nop
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	460a      	mov	r2, r1
 8009fa2:	71fb      	strb	r3, [r7, #7]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009fa8:	79ba      	ldrb	r2, [r7, #6]
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff ff9d 	bl	8009eee <lcd_gotoxy>

    lcd_send_char(' ');
 8009fb4:	2020      	movs	r0, #32
 8009fb6:	f7ff ff17 	bl	8009de8 <lcd_send_char>
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	4603      	mov	r3, r0
 8009fcc:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009fce:	4a05      	ldr	r2, [pc, #20]	@ (8009fe4 <lcd_backlight+0x20>)
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	f7ff fe11 	bl	8009bfc <lcd_send_cmd>
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20001911 	.word	0x20001911

08009fe8 <lcd_cursor>:

void lcd_cursor(int state) {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d106      	bne.n	800a004 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009ff6:	200e      	movs	r0, #14
 8009ff8:	f7ff fe00 	bl	8009bfc <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009ffc:	200f      	movs	r0, #15
 8009ffe:	f7ff fdfd 	bl	8009bfc <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800a002:	e002      	b.n	800a00a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800a004:	200c      	movs	r0, #12
 800a006:	f7ff fdf9 	bl	8009bfc <lcd_send_cmd>
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800a01c:	4b04      	ldr	r3, [pc, #16]	@ (800a030 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3301      	adds	r3, #1
 800a022:	4a03      	ldr	r2, [pc, #12]	@ (800a030 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800a024:	6013      	str	r3, [r2, #0]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bc80      	pop	{r7}
 800a02e:	4770      	bx	lr
 800a030:	20001094 	.word	0x20001094

0800a034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a038:	f000 fc70 	bl	800a91c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800a03c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a040:	f000 fcce 	bl	800a9e0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a044:	f000 f89c 	bl	800a180 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a048:	f000 f9be 	bl	800a3c8 <MX_GPIO_Init>
  MX_CAN_Init();
 800a04c:	f000 f8de 	bl	800a20c <MX_CAN_Init>
  MX_I2C1_Init();
 800a050:	f000 f910 	bl	800a274 <MX_I2C1_Init>
  MX_TIM1_Init();
 800a054:	f000 f93c 	bl	800a2d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800a058:	f000 f98c 	bl	800a374 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800a05c:	2201      	movs	r2, #1
 800a05e:	2140      	movs	r1, #64	@ 0x40
 800a060:	483e      	ldr	r0, [pc, #248]	@ (800a15c <main+0x128>)
 800a062:	f001 faa4 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a066:	2201      	movs	r2, #1
 800a068:	2180      	movs	r1, #128	@ 0x80
 800a06a:	483c      	ldr	r0, [pc, #240]	@ (800a15c <main+0x128>)
 800a06c:	f001 fa9f 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800a070:	200a      	movs	r0, #10
 800a072:	f000 fcb5 	bl	800a9e0 <HAL_Delay>
  lcd_init();
 800a076:	f7ff ff27 	bl	8009ec8 <lcd_init>
  HAL_Delay(10);
 800a07a:	200a      	movs	r0, #10
 800a07c:	f000 fcb0 	bl	800a9e0 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800a080:	4837      	ldr	r0, [pc, #220]	@ (800a160 <main+0x12c>)
 800a082:	f003 f947 	bl	800d314 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800a086:	bf00      	nop
 800a088:	4836      	ldr	r0, [pc, #216]	@ (800a164 <main+0x130>)
 800a08a:	f002 f8a2 	bl	800c1d2 <HAL_I2C_GetError>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b04      	cmp	r3, #4
 800a092:	d0f9      	beq.n	800a088 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800a094:	bf00      	nop
 800a096:	4833      	ldr	r0, [pc, #204]	@ (800a164 <main+0x130>)
 800a098:	f002 f88e 	bl	800c1b8 <HAL_I2C_GetState>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d1f9      	bne.n	800a096 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a0a8:	482c      	ldr	r0, [pc, #176]	@ (800a15c <main+0x128>)
 800a0aa:	f001 fa80 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a0b4:	4829      	ldr	r0, [pc, #164]	@ (800a15c <main+0x128>)
 800a0b6:	f001 fa7a 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2104      	movs	r1, #4
 800a0be:	4827      	ldr	r0, [pc, #156]	@ (800a15c <main+0x128>)
 800a0c0:	f001 fa75 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	4824      	ldr	r0, [pc, #144]	@ (800a15c <main+0x128>)
 800a0ca:	f001 fa70 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	4822      	ldr	r0, [pc, #136]	@ (800a15c <main+0x128>)
 800a0d4:	f001 fa6b 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2120      	movs	r1, #32
 800a0dc:	4822      	ldr	r0, [pc, #136]	@ (800a168 <main+0x134>)
 800a0de:	f001 fa66 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2110      	movs	r1, #16
 800a0e6:	4820      	ldr	r0, [pc, #128]	@ (800a168 <main+0x134>)
 800a0e8:	f001 fa61 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2180      	movs	r1, #128	@ 0x80
 800a0f0:	481e      	ldr	r0, [pc, #120]	@ (800a16c <main+0x138>)
 800a0f2:	f001 fa5c 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2140      	movs	r1, #64	@ 0x40
 800a0fa:	481c      	ldr	r0, [pc, #112]	@ (800a16c <main+0x138>)
 800a0fc:	f001 fa57 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800a100:	2200      	movs	r2, #0
 800a102:	2120      	movs	r1, #32
 800a104:	4819      	ldr	r0, [pc, #100]	@ (800a16c <main+0x138>)
 800a106:	f001 fa52 	bl	800b5ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800a10a:	2200      	movs	r2, #0
 800a10c:	2110      	movs	r1, #16
 800a10e:	4817      	ldr	r0, [pc, #92]	@ (800a16c <main+0x138>)
 800a110:	f001 fa4d 	bl	800b5ae <HAL_GPIO_WritePin>

  i2cTest();
 800a114:	f7f6 fda8 	bl	8000c68 <i2cTest>
  HAL_Delay(100);
 800a118:	2064      	movs	r0, #100	@ 0x64
 800a11a:	f000 fc61 	bl	800a9e0 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800a11e:	4a14      	ldr	r2, [pc, #80]	@ (800a170 <main+0x13c>)
 800a120:	2101      	movs	r1, #1
 800a122:	2001      	movs	r0, #1
 800a124:	f7ff ff02 	bl	8009f2c <lcd_print>
  lcd_print(2, 1, splashText2GN);
 800a128:	4a12      	ldr	r2, [pc, #72]	@ (800a174 <main+0x140>)
 800a12a:	2101      	movs	r1, #1
 800a12c:	2002      	movs	r0, #2
 800a12e:	f7ff fefd 	bl	8009f2c <lcd_print>
  HAL_Delay(1000);
 800a132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a136:	f000 fc53 	bl	800a9e0 <HAL_Delay>
  lcd_clear();
 800a13a:	f7ff ff23 	bl	8009f84 <lcd_clear>

  eepromKontrol();
 800a13e:	f7f6 f879 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800a142:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a146:	f000 fc4b 	bl	800a9e0 <HAL_Delay>

  backLightTimer = millis;
 800a14a:	4b0b      	ldr	r3, [pc, #44]	@ (800a178 <main+0x144>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a0b      	ldr	r2, [pc, #44]	@ (800a17c <main+0x148>)
 800a150:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 800a152:	f7ff fcf1 	bl	8009b38 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800a156:	f7fd f87d 	bl	8007254 <mainLoop>
 800a15a:	e7fc      	b.n	800a156 <main+0x122>
 800a15c:	40010c00 	.word	0x40010c00
 800a160:	20001990 	.word	0x20001990
 800a164:	2000193c 	.word	0x2000193c
 800a168:	40011000 	.word	0x40011000
 800a16c:	40010800 	.word	0x40010800
 800a170:	2000009c 	.word	0x2000009c
 800a174:	200000b0 	.word	0x200000b0
 800a178:	20001094 	.word	0x20001094
 800a17c:	200010b0 	.word	0x200010b0

0800a180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b090      	sub	sp, #64	@ 0x40
 800a184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a186:	f107 0318 	add.w	r3, r7, #24
 800a18a:	2228      	movs	r2, #40	@ 0x28
 800a18c:	2100      	movs	r1, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f004 fb5e 	bl	800e850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a194:	1d3b      	adds	r3, r7, #4
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	605a      	str	r2, [r3, #4]
 800a19c:	609a      	str	r2, [r3, #8]
 800a19e:	60da      	str	r2, [r3, #12]
 800a1a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a1a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a1aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a1bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a1be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a1c4:	f107 0318 	add.w	r3, r7, #24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f002 fc43 	bl	800ca54 <HAL_RCC_OscConfig>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800a1d4:	f000 f9a2 	bl	800a51c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1d8:	230f      	movs	r3, #15
 800a1da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a1dc:	2302      	movs	r3, #2
 800a1de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a1e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a1ee:	1d3b      	adds	r3, r7, #4
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f002 feb0 	bl	800cf58 <HAL_RCC_ClockConfig>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800a1fe:	f000 f98d 	bl	800a51c <Error_Handler>
  }
}
 800a202:	bf00      	nop
 800a204:	3740      	adds	r7, #64	@ 0x40
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800a210:	4b16      	ldr	r3, [pc, #88]	@ (800a26c <MX_CAN_Init+0x60>)
 800a212:	4a17      	ldr	r2, [pc, #92]	@ (800a270 <MX_CAN_Init+0x64>)
 800a214:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800a216:	4b15      	ldr	r3, [pc, #84]	@ (800a26c <MX_CAN_Init+0x60>)
 800a218:	2210      	movs	r2, #16
 800a21a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800a21c:	4b13      	ldr	r3, [pc, #76]	@ (800a26c <MX_CAN_Init+0x60>)
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a222:	4b12      	ldr	r3, [pc, #72]	@ (800a26c <MX_CAN_Init+0x60>)
 800a224:	2200      	movs	r2, #0
 800a226:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800a228:	4b10      	ldr	r3, [pc, #64]	@ (800a26c <MX_CAN_Init+0x60>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <MX_CAN_Init+0x60>)
 800a230:	2200      	movs	r2, #0
 800a232:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800a234:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <MX_CAN_Init+0x60>)
 800a236:	2200      	movs	r2, #0
 800a238:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800a23a:	4b0c      	ldr	r3, [pc, #48]	@ (800a26c <MX_CAN_Init+0x60>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800a240:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <MX_CAN_Init+0x60>)
 800a242:	2200      	movs	r2, #0
 800a244:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800a246:	4b09      	ldr	r3, [pc, #36]	@ (800a26c <MX_CAN_Init+0x60>)
 800a248:	2200      	movs	r2, #0
 800a24a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800a24c:	4b07      	ldr	r3, [pc, #28]	@ (800a26c <MX_CAN_Init+0x60>)
 800a24e:	2200      	movs	r2, #0
 800a250:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800a252:	4b06      	ldr	r3, [pc, #24]	@ (800a26c <MX_CAN_Init+0x60>)
 800a254:	2200      	movs	r2, #0
 800a256:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800a258:	4804      	ldr	r0, [pc, #16]	@ (800a26c <MX_CAN_Init+0x60>)
 800a25a:	f000 fbe5 	bl	800aa28 <HAL_CAN_Init>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800a264:	f000 f95a 	bl	800a51c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800a268:	bf00      	nop
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20001914 	.word	0x20001914
 800a270:	40006400 	.word	0x40006400

0800a274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a278:	4b12      	ldr	r3, [pc, #72]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a27a:	4a13      	ldr	r2, [pc, #76]	@ (800a2c8 <MX_I2C1_Init+0x54>)
 800a27c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800a27e:	4b11      	ldr	r3, [pc, #68]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a280:	4a12      	ldr	r2, [pc, #72]	@ (800a2cc <MX_I2C1_Init+0x58>)
 800a282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a284:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a286:	2200      	movs	r2, #0
 800a288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a28a:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a290:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a292:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a298:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a2a4:	4b07      	ldr	r3, [pc, #28]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a2aa:	4b06      	ldr	r3, [pc, #24]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a2b0:	4804      	ldr	r0, [pc, #16]	@ (800a2c4 <MX_I2C1_Init+0x50>)
 800a2b2:	f001 f9ad 	bl	800b610 <HAL_I2C_Init>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a2bc:	f000 f92e 	bl	800a51c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800a2c0:	bf00      	nop
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	2000193c 	.word	0x2000193c
 800a2c8:	40005400 	.word	0x40005400
 800a2cc:	00061a80 	.word	0x00061a80

0800a2d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	605a      	str	r2, [r3, #4]
 800a2e0:	609a      	str	r2, [r3, #8]
 800a2e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a2ec:	4b1f      	ldr	r3, [pc, #124]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a2ee:	4a20      	ldr	r2, [pc, #128]	@ (800a370 <MX_TIM1_Init+0xa0>)
 800a2f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800a2f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a2f4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800a2f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800a300:	4b1a      	ldr	r3, [pc, #104]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a302:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800a306:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a308:	4b18      	ldr	r3, [pc, #96]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a30e:	4b17      	ldr	r3, [pc, #92]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a310:	2200      	movs	r2, #0
 800a312:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a314:	4b15      	ldr	r3, [pc, #84]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a316:	2200      	movs	r2, #0
 800a318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a31a:	4814      	ldr	r0, [pc, #80]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a31c:	f002 ffaa 	bl	800d274 <HAL_TIM_Base_Init>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a326:	f000 f8f9 	bl	800a51c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a32a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a32e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a330:	f107 0308 	add.w	r3, r7, #8
 800a334:	4619      	mov	r1, r3
 800a336:	480d      	ldr	r0, [pc, #52]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a338:	f003 f954 	bl	800d5e4 <HAL_TIM_ConfigClockSource>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a342:	f000 f8eb 	bl	800a51c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a346:	2300      	movs	r3, #0
 800a348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a34e:	463b      	mov	r3, r7
 800a350:	4619      	mov	r1, r3
 800a352:	4806      	ldr	r0, [pc, #24]	@ (800a36c <MX_TIM1_Init+0x9c>)
 800a354:	f003 fb42 	bl	800d9dc <HAL_TIMEx_MasterConfigSynchronization>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a35e:	f000 f8dd 	bl	800a51c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a362:	bf00      	nop
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20001990 	.word	0x20001990
 800a370:	40012c00 	.word	0x40012c00

0800a374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a378:	4b11      	ldr	r3, [pc, #68]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a37a:	4a12      	ldr	r2, [pc, #72]	@ (800a3c4 <MX_USART1_UART_Init+0x50>)
 800a37c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a37e:	4b10      	ldr	r3, [pc, #64]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a386:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a388:	2200      	movs	r2, #0
 800a38a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a38c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a38e:	2200      	movs	r2, #0
 800a390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a392:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a394:	2200      	movs	r2, #0
 800a396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a398:	4b09      	ldr	r3, [pc, #36]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a39a:	220c      	movs	r2, #12
 800a39c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a39e:	4b08      	ldr	r3, [pc, #32]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3a4:	4b06      	ldr	r3, [pc, #24]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a3aa:	4805      	ldr	r0, [pc, #20]	@ (800a3c0 <MX_USART1_UART_Init+0x4c>)
 800a3ac:	f003 fb94 	bl	800dad8 <HAL_UART_Init>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a3b6:	f000 f8b1 	bl	800a51c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a3ba:	bf00      	nop
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	200019d8 	.word	0x200019d8
 800a3c4:	40013800 	.word	0x40013800

0800a3c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ce:	f107 0310 	add.w	r3, r7, #16
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
 800a3d8:	609a      	str	r2, [r3, #8]
 800a3da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3dc:	4b4b      	ldr	r3, [pc, #300]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	4a4a      	ldr	r2, [pc, #296]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a3e2:	f043 0310 	orr.w	r3, r3, #16
 800a3e6:	6193      	str	r3, [r2, #24]
 800a3e8:	4b48      	ldr	r3, [pc, #288]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	f003 0310 	and.w	r3, r3, #16
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a3f4:	4b45      	ldr	r3, [pc, #276]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	4a44      	ldr	r2, [pc, #272]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a3fa:	f043 0320 	orr.w	r3, r3, #32
 800a3fe:	6193      	str	r3, [r2, #24]
 800a400:	4b42      	ldr	r3, [pc, #264]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	f003 0320 	and.w	r3, r3, #32
 800a408:	60bb      	str	r3, [r7, #8]
 800a40a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a40c:	4b3f      	ldr	r3, [pc, #252]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	4a3e      	ldr	r2, [pc, #248]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a412:	f043 0304 	orr.w	r3, r3, #4
 800a416:	6193      	str	r3, [r2, #24]
 800a418:	4b3c      	ldr	r3, [pc, #240]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	607b      	str	r3, [r7, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a424:	4b39      	ldr	r3, [pc, #228]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	4a38      	ldr	r2, [pc, #224]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a42a:	f043 0308 	orr.w	r3, r3, #8
 800a42e:	6193      	str	r3, [r2, #24]
 800a430:	4b36      	ldr	r3, [pc, #216]	@ (800a50c <MX_GPIO_Init+0x144>)
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800a43c:	2200      	movs	r2, #0
 800a43e:	21f0      	movs	r1, #240	@ 0xf0
 800a440:	4833      	ldr	r0, [pc, #204]	@ (800a510 <MX_GPIO_Init+0x148>)
 800a442:	f001 f8b4 	bl	800b5ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800a446:	2200      	movs	r2, #0
 800a448:	f241 0130 	movw	r1, #4144	@ 0x1030
 800a44c:	4831      	ldr	r0, [pc, #196]	@ (800a514 <MX_GPIO_Init+0x14c>)
 800a44e:	f001 f8ae 	bl	800b5ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a452:	2200      	movs	r2, #0
 800a454:	f640 4107 	movw	r1, #3079	@ 0xc07
 800a458:	482f      	ldr	r0, [pc, #188]	@ (800a518 <MX_GPIO_Init+0x150>)
 800a45a:	f001 f8a8 	bl	800b5ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800a45e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800a462:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a468:	2300      	movs	r3, #0
 800a46a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a46c:	f107 0310 	add.w	r3, r7, #16
 800a470:	4619      	mov	r1, r3
 800a472:	4828      	ldr	r0, [pc, #160]	@ (800a514 <MX_GPIO_Init+0x14c>)
 800a474:	f000 fe24 	bl	800b0c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800a478:	f248 130f 	movw	r3, #33039	@ 0x810f
 800a47c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a482:	2300      	movs	r3, #0
 800a484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a486:	f107 0310 	add.w	r3, r7, #16
 800a48a:	4619      	mov	r1, r3
 800a48c:	4820      	ldr	r0, [pc, #128]	@ (800a510 <MX_GPIO_Init+0x148>)
 800a48e:	f000 fe17 	bl	800b0c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800a492:	23f0      	movs	r3, #240	@ 0xf0
 800a494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a496:	2301      	movs	r3, #1
 800a498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4819      	ldr	r0, [pc, #100]	@ (800a510 <MX_GPIO_Init+0x148>)
 800a4aa:	f000 fe09 	bl	800b0c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800a4ae:	f241 0330 	movw	r3, #4144	@ 0x1030
 800a4b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4c0:	f107 0310 	add.w	r3, r7, #16
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4813      	ldr	r0, [pc, #76]	@ (800a514 <MX_GPIO_Init+0x14c>)
 800a4c8:	f000 fdfa 	bl	800b0c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a4cc:	f640 4307 	movw	r3, #3079	@ 0xc07
 800a4d0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4de:	f107 0310 	add.w	r3, r7, #16
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	480c      	ldr	r0, [pc, #48]	@ (800a518 <MX_GPIO_Init+0x150>)
 800a4e6:	f000 fdeb 	bl	800b0c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800a4ea:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a4ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4f8:	f107 0310 	add.w	r3, r7, #16
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4806      	ldr	r0, [pc, #24]	@ (800a518 <MX_GPIO_Init+0x150>)
 800a500:	f000 fdde 	bl	800b0c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a504:	bf00      	nop
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	40021000 	.word	0x40021000
 800a510:	40010800 	.word	0x40010800
 800a514:	40011000 	.word	0x40011000
 800a518:	40010c00 	.word	0x40010c00

0800a51c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a51c:	b480      	push	{r7}
 800a51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800a520:	bf00      	nop
 800a522:	46bd      	mov	sp, r7
 800a524:	bc80      	pop	{r7}
 800a526:	4770      	bx	lr

0800a528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a52e:	4b15      	ldr	r3, [pc, #84]	@ (800a584 <HAL_MspInit+0x5c>)
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	4a14      	ldr	r2, [pc, #80]	@ (800a584 <HAL_MspInit+0x5c>)
 800a534:	f043 0301 	orr.w	r3, r3, #1
 800a538:	6193      	str	r3, [r2, #24]
 800a53a:	4b12      	ldr	r3, [pc, #72]	@ (800a584 <HAL_MspInit+0x5c>)
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	60bb      	str	r3, [r7, #8]
 800a544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a546:	4b0f      	ldr	r3, [pc, #60]	@ (800a584 <HAL_MspInit+0x5c>)
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	4a0e      	ldr	r2, [pc, #56]	@ (800a584 <HAL_MspInit+0x5c>)
 800a54c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a550:	61d3      	str	r3, [r2, #28]
 800a552:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <HAL_MspInit+0x5c>)
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a55a:	607b      	str	r3, [r7, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a55e:	4b0a      	ldr	r3, [pc, #40]	@ (800a588 <HAL_MspInit+0x60>)
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	4a04      	ldr	r2, [pc, #16]	@ (800a588 <HAL_MspInit+0x60>)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	bc80      	pop	{r7}
 800a582:	4770      	bx	lr
 800a584:	40021000 	.word	0x40021000
 800a588:	40010000 	.word	0x40010000

0800a58c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a594:	f107 0310 	add.w	r3, r7, #16
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	605a      	str	r2, [r3, #4]
 800a59e:	609a      	str	r2, [r3, #8]
 800a5a0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a618 <HAL_CAN_MspInit+0x8c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d131      	bne.n	800a610 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a5ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a61c <HAL_CAN_MspInit+0x90>)
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a61c <HAL_CAN_MspInit+0x90>)
 800a5b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a5b6:	61d3      	str	r3, [r2, #28]
 800a5b8:	4b18      	ldr	r3, [pc, #96]	@ (800a61c <HAL_CAN_MspInit+0x90>)
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5c4:	4b15      	ldr	r3, [pc, #84]	@ (800a61c <HAL_CAN_MspInit+0x90>)
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	4a14      	ldr	r2, [pc, #80]	@ (800a61c <HAL_CAN_MspInit+0x90>)
 800a5ca:	f043 0304 	orr.w	r3, r3, #4
 800a5ce:	6193      	str	r3, [r2, #24]
 800a5d0:	4b12      	ldr	r3, [pc, #72]	@ (800a61c <HAL_CAN_MspInit+0x90>)
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	60bb      	str	r3, [r7, #8]
 800a5da:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a5dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ea:	f107 0310 	add.w	r3, r7, #16
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	480b      	ldr	r0, [pc, #44]	@ (800a620 <HAL_CAN_MspInit+0x94>)
 800a5f2:	f000 fd65 	bl	800b0c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a5f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a600:	2303      	movs	r3, #3
 800a602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a604:	f107 0310 	add.w	r3, r7, #16
 800a608:	4619      	mov	r1, r3
 800a60a:	4805      	ldr	r0, [pc, #20]	@ (800a620 <HAL_CAN_MspInit+0x94>)
 800a60c:	f000 fd58 	bl	800b0c0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800a610:	bf00      	nop
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	40006400 	.word	0x40006400
 800a61c:	40021000 	.word	0x40021000
 800a620:	40010800 	.word	0x40010800

0800a624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a62c:	f107 0310 	add.w	r3, r7, #16
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	605a      	str	r2, [r3, #4]
 800a636:	609a      	str	r2, [r3, #8]
 800a638:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a15      	ldr	r2, [pc, #84]	@ (800a694 <HAL_I2C_MspInit+0x70>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d123      	bne.n	800a68c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a644:	4b14      	ldr	r3, [pc, #80]	@ (800a698 <HAL_I2C_MspInit+0x74>)
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	4a13      	ldr	r2, [pc, #76]	@ (800a698 <HAL_I2C_MspInit+0x74>)
 800a64a:	f043 0308 	orr.w	r3, r3, #8
 800a64e:	6193      	str	r3, [r2, #24]
 800a650:	4b11      	ldr	r3, [pc, #68]	@ (800a698 <HAL_I2C_MspInit+0x74>)
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a65c:	23c0      	movs	r3, #192	@ 0xc0
 800a65e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a660:	2312      	movs	r3, #18
 800a662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a664:	2303      	movs	r3, #3
 800a666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	4619      	mov	r1, r3
 800a66e:	480b      	ldr	r0, [pc, #44]	@ (800a69c <HAL_I2C_MspInit+0x78>)
 800a670:	f000 fd26 	bl	800b0c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a674:	4b08      	ldr	r3, [pc, #32]	@ (800a698 <HAL_I2C_MspInit+0x74>)
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	4a07      	ldr	r2, [pc, #28]	@ (800a698 <HAL_I2C_MspInit+0x74>)
 800a67a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a67e:	61d3      	str	r3, [r2, #28]
 800a680:	4b05      	ldr	r3, [pc, #20]	@ (800a698 <HAL_I2C_MspInit+0x74>)
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a688:	60bb      	str	r3, [r7, #8]
 800a68a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800a68c:	bf00      	nop
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40005400 	.word	0x40005400
 800a698:	40021000 	.word	0x40021000
 800a69c:	40010c00 	.word	0x40010c00

0800a6a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a6d8 <HAL_I2C_MspDeInit+0x38>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d10d      	bne.n	800a6ce <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <HAL_I2C_MspDeInit+0x3c>)
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	4a09      	ldr	r2, [pc, #36]	@ (800a6dc <HAL_I2C_MspDeInit+0x3c>)
 800a6b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6bc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800a6be:	2140      	movs	r1, #64	@ 0x40
 800a6c0:	4807      	ldr	r0, [pc, #28]	@ (800a6e0 <HAL_I2C_MspDeInit+0x40>)
 800a6c2:	f000 fe91 	bl	800b3e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800a6c6:	2180      	movs	r1, #128	@ 0x80
 800a6c8:	4805      	ldr	r0, [pc, #20]	@ (800a6e0 <HAL_I2C_MspDeInit+0x40>)
 800a6ca:	f000 fe8d 	bl	800b3e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	40005400 	.word	0x40005400
 800a6dc:	40021000 	.word	0x40021000
 800a6e0:	40010c00 	.word	0x40010c00

0800a6e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a728 <HAL_TIM_Base_MspInit+0x44>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d113      	bne.n	800a71e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a72c <HAL_TIM_Base_MspInit+0x48>)
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a72c <HAL_TIM_Base_MspInit+0x48>)
 800a6fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a700:	6193      	str	r3, [r2, #24]
 800a702:	4b0a      	ldr	r3, [pc, #40]	@ (800a72c <HAL_TIM_Base_MspInit+0x48>)
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a70e:	2200      	movs	r2, #0
 800a710:	2100      	movs	r1, #0
 800a712:	2019      	movs	r0, #25
 800a714:	f000 fb5b 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a718:	2019      	movs	r0, #25
 800a71a:	f000 fb74 	bl	800ae06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	40012c00 	.word	0x40012c00
 800a72c:	40021000 	.word	0x40021000

0800a730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	605a      	str	r2, [r3, #4]
 800a742:	609a      	str	r2, [r3, #8]
 800a744:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a20      	ldr	r2, [pc, #128]	@ (800a7cc <HAL_UART_MspInit+0x9c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d139      	bne.n	800a7c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a750:	4b1f      	ldr	r3, [pc, #124]	@ (800a7d0 <HAL_UART_MspInit+0xa0>)
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	4a1e      	ldr	r2, [pc, #120]	@ (800a7d0 <HAL_UART_MspInit+0xa0>)
 800a756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a75a:	6193      	str	r3, [r2, #24]
 800a75c:	4b1c      	ldr	r3, [pc, #112]	@ (800a7d0 <HAL_UART_MspInit+0xa0>)
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a764:	60fb      	str	r3, [r7, #12]
 800a766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a768:	4b19      	ldr	r3, [pc, #100]	@ (800a7d0 <HAL_UART_MspInit+0xa0>)
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	4a18      	ldr	r2, [pc, #96]	@ (800a7d0 <HAL_UART_MspInit+0xa0>)
 800a76e:	f043 0304 	orr.w	r3, r3, #4
 800a772:	6193      	str	r3, [r2, #24]
 800a774:	4b16      	ldr	r3, [pc, #88]	@ (800a7d0 <HAL_UART_MspInit+0xa0>)
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	60bb      	str	r3, [r7, #8]
 800a77e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a786:	2302      	movs	r3, #2
 800a788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a78a:	2303      	movs	r3, #3
 800a78c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a78e:	f107 0310 	add.w	r3, r7, #16
 800a792:	4619      	mov	r1, r3
 800a794:	480f      	ldr	r0, [pc, #60]	@ (800a7d4 <HAL_UART_MspInit+0xa4>)
 800a796:	f000 fc93 	bl	800b0c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a79a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a79e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7a8:	f107 0310 	add.w	r3, r7, #16
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4809      	ldr	r0, [pc, #36]	@ (800a7d4 <HAL_UART_MspInit+0xa4>)
 800a7b0:	f000 fc86 	bl	800b0c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	2025      	movs	r0, #37	@ 0x25
 800a7ba:	f000 fb08 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a7be:	2025      	movs	r0, #37	@ 0x25
 800a7c0:	f000 fb21 	bl	800ae06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800a7c4:	bf00      	nop
 800a7c6:	3720      	adds	r7, #32
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40013800 	.word	0x40013800
 800a7d0:	40021000 	.word	0x40021000
 800a7d4:	40010800 	.word	0x40010800

0800a7d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a7dc:	bf00      	nop
 800a7de:	e7fd      	b.n	800a7dc <NMI_Handler+0x4>

0800a7e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <HardFault_Handler+0x4>

0800a7e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <MemManage_Handler+0x4>

0800a7f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <BusFault_Handler+0x4>

0800a7f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a7fc:	bf00      	nop
 800a7fe:	e7fd      	b.n	800a7fc <UsageFault_Handler+0x4>

0800a800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a800:	b480      	push	{r7}
 800a802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a804:	bf00      	nop
 800a806:	46bd      	mov	sp, r7
 800a808:	bc80      	pop	{r7}
 800a80a:	4770      	bx	lr

0800a80c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a810:	bf00      	nop
 800a812:	46bd      	mov	sp, r7
 800a814:	bc80      	pop	{r7}
 800a816:	4770      	bx	lr

0800a818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a81c:	bf00      	nop
 800a81e:	46bd      	mov	sp, r7
 800a820:	bc80      	pop	{r7}
 800a822:	4770      	bx	lr

0800a824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a828:	f000 f8be 	bl	800a9a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a82c:	bf00      	nop
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a834:	4802      	ldr	r0, [pc, #8]	@ (800a840 <TIM1_UP_IRQHandler+0x10>)
 800a836:	f002 fdcd 	bl	800d3d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a83a:	bf00      	nop
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20001990 	.word	0x20001990

0800a844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a848:	4802      	ldr	r0, [pc, #8]	@ (800a854 <USART1_IRQHandler+0x10>)
 800a84a:	f003 f9cb 	bl	800dbe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a84e:	bf00      	nop
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	200019d8 	.word	0x200019d8

0800a858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a860:	4a14      	ldr	r2, [pc, #80]	@ (800a8b4 <_sbrk+0x5c>)
 800a862:	4b15      	ldr	r3, [pc, #84]	@ (800a8b8 <_sbrk+0x60>)
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a86c:	4b13      	ldr	r3, [pc, #76]	@ (800a8bc <_sbrk+0x64>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a874:	4b11      	ldr	r3, [pc, #68]	@ (800a8bc <_sbrk+0x64>)
 800a876:	4a12      	ldr	r2, [pc, #72]	@ (800a8c0 <_sbrk+0x68>)
 800a878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a87a:	4b10      	ldr	r3, [pc, #64]	@ (800a8bc <_sbrk+0x64>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4413      	add	r3, r2
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	429a      	cmp	r2, r3
 800a886:	d207      	bcs.n	800a898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a888:	f003 fffa 	bl	800e880 <__errno>
 800a88c:	4603      	mov	r3, r0
 800a88e:	220c      	movs	r2, #12
 800a890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a896:	e009      	b.n	800a8ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a898:	4b08      	ldr	r3, [pc, #32]	@ (800a8bc <_sbrk+0x64>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a89e:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <_sbrk+0x64>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	4a05      	ldr	r2, [pc, #20]	@ (800a8bc <_sbrk+0x64>)
 800a8a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	2000c000 	.word	0x2000c000
 800a8b8:	00000400 	.word	0x00000400
 800a8bc:	20001a20 	.word	0x20001a20
 800a8c0:	20001b70 	.word	0x20001b70

0800a8c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a8c8:	bf00      	nop
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr

0800a8d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a8d0:	480c      	ldr	r0, [pc, #48]	@ (800a904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a8d2:	490d      	ldr	r1, [pc, #52]	@ (800a908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a8d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a90c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a8d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a8d8:	e002      	b.n	800a8e0 <LoopCopyDataInit>

0800a8da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a8da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a8dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a8de:	3304      	adds	r3, #4

0800a8e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a8e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a8e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a8e4:	d3f9      	bcc.n	800a8da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a8e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a8e8:	4c0a      	ldr	r4, [pc, #40]	@ (800a914 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a8ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a8ec:	e001      	b.n	800a8f2 <LoopFillZerobss>

0800a8ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a8ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a8f0:	3204      	adds	r2, #4

0800a8f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a8f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a8f4:	d3fb      	bcc.n	800a8ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a8f6:	f7ff ffe5 	bl	800a8c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a8fa:	f003 ffc7 	bl	800e88c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a8fe:	f7ff fb99 	bl	800a034 <main>
  bx lr
 800a902:	4770      	bx	lr
  ldr r0, =_sdata
 800a904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a908:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 800a90c:	0800f4d8 	.word	0x0800f4d8
  ldr r2, =_sbss
 800a910:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 800a914:	20001b70 	.word	0x20001b70

0800a918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a918:	e7fe      	b.n	800a918 <ADC1_2_IRQHandler>
	...

0800a91c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a920:	4b08      	ldr	r3, [pc, #32]	@ (800a944 <HAL_Init+0x28>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a07      	ldr	r2, [pc, #28]	@ (800a944 <HAL_Init+0x28>)
 800a926:	f043 0310 	orr.w	r3, r3, #16
 800a92a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a92c:	2003      	movs	r0, #3
 800a92e:	f000 fa43 	bl	800adb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a932:	200f      	movs	r0, #15
 800a934:	f000 f808 	bl	800a948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a938:	f7ff fdf6 	bl	800a528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	40022000 	.word	0x40022000

0800a948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a950:	4b12      	ldr	r3, [pc, #72]	@ (800a99c <HAL_InitTick+0x54>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b12      	ldr	r3, [pc, #72]	@ (800a9a0 <HAL_InitTick+0x58>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	4619      	mov	r1, r3
 800a95a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a95e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a962:	fbb2 f3f3 	udiv	r3, r2, r3
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fa5b 	bl	800ae22 <HAL_SYSTICK_Config>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e00e      	b.n	800a994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b0f      	cmp	r3, #15
 800a97a:	d80a      	bhi.n	800a992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a97c:	2200      	movs	r2, #0
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a984:	f000 fa23 	bl	800adce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a988:	4a06      	ldr	r2, [pc, #24]	@ (800a9a4 <HAL_InitTick+0x5c>)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	e000      	b.n	800a994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20000f74 	.word	0x20000f74
 800a9a0:	20000f7c 	.word	0x20000f7c
 800a9a4:	20000f78 	.word	0x20000f78

0800a9a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a9ac:	4b05      	ldr	r3, [pc, #20]	@ (800a9c4 <HAL_IncTick+0x1c>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4b05      	ldr	r3, [pc, #20]	@ (800a9c8 <HAL_IncTick+0x20>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	4a03      	ldr	r2, [pc, #12]	@ (800a9c8 <HAL_IncTick+0x20>)
 800a9ba:	6013      	str	r3, [r2, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr
 800a9c4:	20000f7c 	.word	0x20000f7c
 800a9c8:	20001a24 	.word	0x20001a24

0800a9cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  return uwTick;
 800a9d0:	4b02      	ldr	r3, [pc, #8]	@ (800a9dc <HAL_GetTick+0x10>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc80      	pop	{r7}
 800a9da:	4770      	bx	lr
 800a9dc:	20001a24 	.word	0x20001a24

0800a9e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a9e8:	f7ff fff0 	bl	800a9cc <HAL_GetTick>
 800a9ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9f8:	d005      	beq.n	800aa06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <HAL_Delay+0x44>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aa06:	bf00      	nop
 800aa08:	f7ff ffe0 	bl	800a9cc <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d8f7      	bhi.n	800aa08 <HAL_Delay+0x28>
  {
  }
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20000f7c 	.word	0x20000f7c

0800aa28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e0ed      	b.n	800ac16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff fda0 	bl	800a58c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f042 0201 	orr.w	r2, r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa5c:	f7ff ffb6 	bl	800a9cc <HAL_GetTick>
 800aa60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aa62:	e012      	b.n	800aa8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aa64:	f7ff ffb2 	bl	800a9cc <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	d90b      	bls.n	800aa8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2205      	movs	r2, #5
 800aa82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e0c5      	b.n	800ac16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0e5      	beq.n	800aa64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0202 	bic.w	r2, r2, #2
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aaa8:	f7ff ff90 	bl	800a9cc <HAL_GetTick>
 800aaac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aaae:	e012      	b.n	800aad6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aab0:	f7ff ff8c 	bl	800a9cc <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b0a      	cmp	r3, #10
 800aabc:	d90b      	bls.n	800aad6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2205      	movs	r2, #5
 800aace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e09f      	b.n	800ac16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	f003 0302 	and.w	r3, r3, #2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e5      	bne.n	800aab0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	7e1b      	ldrb	r3, [r3, #24]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d108      	bne.n	800aafe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	e007      	b.n	800ab0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	7e5b      	ldrb	r3, [r3, #25]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d108      	bne.n	800ab28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	e007      	b.n	800ab38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7e9b      	ldrb	r3, [r3, #26]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d108      	bne.n	800ab52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0220 	orr.w	r2, r2, #32
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	e007      	b.n	800ab62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f022 0220 	bic.w	r2, r2, #32
 800ab60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	7edb      	ldrb	r3, [r3, #27]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d108      	bne.n	800ab7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0210 	bic.w	r2, r2, #16
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	e007      	b.n	800ab8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f042 0210 	orr.w	r2, r2, #16
 800ab8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	7f1b      	ldrb	r3, [r3, #28]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d108      	bne.n	800aba6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f042 0208 	orr.w	r2, r2, #8
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	e007      	b.n	800abb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0208 	bic.w	r2, r2, #8
 800abb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	7f5b      	ldrb	r3, [r3, #29]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d108      	bne.n	800abd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f042 0204 	orr.w	r2, r2, #4
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	e007      	b.n	800abe0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0204 	bic.w	r2, r2, #4
 800abde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	695b      	ldr	r3, [r3, #20]
 800abf4:	ea42 0103 	orr.w	r1, r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	1e5a      	subs	r2, r3, #1
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <__NVIC_SetPriorityGrouping>:
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f003 0307 	and.w	r3, r3, #7
 800ac2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac30:	4b0c      	ldr	r3, [pc, #48]	@ (800ac64 <__NVIC_SetPriorityGrouping+0x44>)
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ac48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ac4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac52:	4a04      	ldr	r2, [pc, #16]	@ (800ac64 <__NVIC_SetPriorityGrouping+0x44>)
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	60d3      	str	r3, [r2, #12]
}
 800ac58:	bf00      	nop
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bc80      	pop	{r7}
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	e000ed00 	.word	0xe000ed00

0800ac68 <__NVIC_GetPriorityGrouping>:
{
 800ac68:	b480      	push	{r7}
 800ac6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac6c:	4b04      	ldr	r3, [pc, #16]	@ (800ac80 <__NVIC_GetPriorityGrouping+0x18>)
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	0a1b      	lsrs	r3, r3, #8
 800ac72:	f003 0307 	and.w	r3, r3, #7
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bc80      	pop	{r7}
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	e000ed00 	.word	0xe000ed00

0800ac84 <__NVIC_EnableIRQ>:
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	db0b      	blt.n	800acae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	f003 021f 	and.w	r2, r3, #31
 800ac9c:	4906      	ldr	r1, [pc, #24]	@ (800acb8 <__NVIC_EnableIRQ+0x34>)
 800ac9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca2:	095b      	lsrs	r3, r3, #5
 800aca4:	2001      	movs	r0, #1
 800aca6:	fa00 f202 	lsl.w	r2, r0, r2
 800acaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bc80      	pop	{r7}
 800acb6:	4770      	bx	lr
 800acb8:	e000e100 	.word	0xe000e100

0800acbc <__NVIC_SetPriority>:
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800accc:	2b00      	cmp	r3, #0
 800acce:	db0a      	blt.n	800ace6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	490c      	ldr	r1, [pc, #48]	@ (800ad08 <__NVIC_SetPriority+0x4c>)
 800acd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acda:	0112      	lsls	r2, r2, #4
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	440b      	add	r3, r1
 800ace0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ace4:	e00a      	b.n	800acfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	4908      	ldr	r1, [pc, #32]	@ (800ad0c <__NVIC_SetPriority+0x50>)
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	3b04      	subs	r3, #4
 800acf4:	0112      	lsls	r2, r2, #4
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	440b      	add	r3, r1
 800acfa:	761a      	strb	r2, [r3, #24]
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bc80      	pop	{r7}
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	e000e100 	.word	0xe000e100
 800ad0c:	e000ed00 	.word	0xe000ed00

0800ad10 <NVIC_EncodePriority>:
{
 800ad10:	b480      	push	{r7}
 800ad12:	b089      	sub	sp, #36	@ 0x24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	f1c3 0307 	rsb	r3, r3, #7
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	bf28      	it	cs
 800ad2e:	2304      	movcs	r3, #4
 800ad30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	3304      	adds	r3, #4
 800ad36:	2b06      	cmp	r3, #6
 800ad38:	d902      	bls.n	800ad40 <NVIC_EncodePriority+0x30>
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	3b03      	subs	r3, #3
 800ad3e:	e000      	b.n	800ad42 <NVIC_EncodePriority+0x32>
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4e:	43da      	mvns	r2, r3
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	401a      	ands	r2, r3
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad62:	43d9      	mvns	r1, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad68:	4313      	orrs	r3, r2
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3724      	adds	r7, #36	@ 0x24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bc80      	pop	{r7}
 800ad72:	4770      	bx	lr

0800ad74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad84:	d301      	bcc.n	800ad8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad86:	2301      	movs	r3, #1
 800ad88:	e00f      	b.n	800adaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	@ (800adb4 <SysTick_Config+0x40>)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad92:	210f      	movs	r1, #15
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad98:	f7ff ff90 	bl	800acbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad9c:	4b05      	ldr	r3, [pc, #20]	@ (800adb4 <SysTick_Config+0x40>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ada2:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <SysTick_Config+0x40>)
 800ada4:	2207      	movs	r2, #7
 800ada6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	e000e010 	.word	0xe000e010

0800adb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff ff2d 	bl	800ac20 <__NVIC_SetPriorityGrouping>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af00      	add	r7, sp, #0
 800add4:	4603      	mov	r3, r0
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800addc:	2300      	movs	r3, #0
 800adde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ade0:	f7ff ff42 	bl	800ac68 <__NVIC_GetPriorityGrouping>
 800ade4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	6978      	ldr	r0, [r7, #20]
 800adec:	f7ff ff90 	bl	800ad10 <NVIC_EncodePriority>
 800adf0:	4602      	mov	r2, r0
 800adf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ff5f 	bl	800acbc <__NVIC_SetPriority>
}
 800adfe:	bf00      	nop
 800ae00:	3718      	adds	r7, #24
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ff35 	bl	800ac84 <__NVIC_EnableIRQ>
}
 800ae1a:	bf00      	nop
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7ff ffa2 	bl	800ad74 <SysTick_Config>
 800ae30:	4603      	mov	r3, r0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d008      	beq.n	800ae64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2204      	movs	r2, #4
 800ae56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e020      	b.n	800aea6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 020e 	bic.w	r2, r2, #14
 800ae72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0201 	bic.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	fa01 f202 	lsl.w	r2, r1, r2
 800ae92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d005      	beq.n	800aed4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2204      	movs	r2, #4
 800aecc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
 800aed2:	e0d6      	b.n	800b082 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 020e 	bic.w	r2, r2, #14
 800aee2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0201 	bic.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	4b64      	ldr	r3, [pc, #400]	@ (800b08c <HAL_DMA_Abort_IT+0x1dc>)
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d958      	bls.n	800afb2 <HAL_DMA_Abort_IT+0x102>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a62      	ldr	r2, [pc, #392]	@ (800b090 <HAL_DMA_Abort_IT+0x1e0>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d04f      	beq.n	800afaa <HAL_DMA_Abort_IT+0xfa>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a61      	ldr	r2, [pc, #388]	@ (800b094 <HAL_DMA_Abort_IT+0x1e4>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d048      	beq.n	800afa6 <HAL_DMA_Abort_IT+0xf6>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a5f      	ldr	r2, [pc, #380]	@ (800b098 <HAL_DMA_Abort_IT+0x1e8>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d040      	beq.n	800afa0 <HAL_DMA_Abort_IT+0xf0>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a5e      	ldr	r2, [pc, #376]	@ (800b09c <HAL_DMA_Abort_IT+0x1ec>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d038      	beq.n	800af9a <HAL_DMA_Abort_IT+0xea>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a5c      	ldr	r2, [pc, #368]	@ (800b0a0 <HAL_DMA_Abort_IT+0x1f0>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d030      	beq.n	800af94 <HAL_DMA_Abort_IT+0xe4>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a5b      	ldr	r2, [pc, #364]	@ (800b0a4 <HAL_DMA_Abort_IT+0x1f4>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d028      	beq.n	800af8e <HAL_DMA_Abort_IT+0xde>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a52      	ldr	r2, [pc, #328]	@ (800b08c <HAL_DMA_Abort_IT+0x1dc>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d020      	beq.n	800af88 <HAL_DMA_Abort_IT+0xd8>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a57      	ldr	r2, [pc, #348]	@ (800b0a8 <HAL_DMA_Abort_IT+0x1f8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d019      	beq.n	800af84 <HAL_DMA_Abort_IT+0xd4>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a55      	ldr	r2, [pc, #340]	@ (800b0ac <HAL_DMA_Abort_IT+0x1fc>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d012      	beq.n	800af80 <HAL_DMA_Abort_IT+0xd0>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a54      	ldr	r2, [pc, #336]	@ (800b0b0 <HAL_DMA_Abort_IT+0x200>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d00a      	beq.n	800af7a <HAL_DMA_Abort_IT+0xca>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a52      	ldr	r2, [pc, #328]	@ (800b0b4 <HAL_DMA_Abort_IT+0x204>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d102      	bne.n	800af74 <HAL_DMA_Abort_IT+0xc4>
 800af6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af72:	e01b      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800af78:	e018      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af7e:	e015      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af80:	2310      	movs	r3, #16
 800af82:	e013      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af84:	2301      	movs	r3, #1
 800af86:	e011      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800af8c:	e00e      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800af92:	e00b      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800af98:	e008      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800af9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af9e:	e005      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800afa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afa4:	e002      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800afa6:	2310      	movs	r3, #16
 800afa8:	e000      	b.n	800afac <HAL_DMA_Abort_IT+0xfc>
 800afaa:	2301      	movs	r3, #1
 800afac:	4a42      	ldr	r2, [pc, #264]	@ (800b0b8 <HAL_DMA_Abort_IT+0x208>)
 800afae:	6053      	str	r3, [r2, #4]
 800afb0:	e057      	b.n	800b062 <HAL_DMA_Abort_IT+0x1b2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a36      	ldr	r2, [pc, #216]	@ (800b090 <HAL_DMA_Abort_IT+0x1e0>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d04f      	beq.n	800b05c <HAL_DMA_Abort_IT+0x1ac>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a34      	ldr	r2, [pc, #208]	@ (800b094 <HAL_DMA_Abort_IT+0x1e4>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d048      	beq.n	800b058 <HAL_DMA_Abort_IT+0x1a8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a33      	ldr	r2, [pc, #204]	@ (800b098 <HAL_DMA_Abort_IT+0x1e8>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d040      	beq.n	800b052 <HAL_DMA_Abort_IT+0x1a2>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a31      	ldr	r2, [pc, #196]	@ (800b09c <HAL_DMA_Abort_IT+0x1ec>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d038      	beq.n	800b04c <HAL_DMA_Abort_IT+0x19c>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a30      	ldr	r2, [pc, #192]	@ (800b0a0 <HAL_DMA_Abort_IT+0x1f0>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d030      	beq.n	800b046 <HAL_DMA_Abort_IT+0x196>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a2e      	ldr	r2, [pc, #184]	@ (800b0a4 <HAL_DMA_Abort_IT+0x1f4>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d028      	beq.n	800b040 <HAL_DMA_Abort_IT+0x190>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a26      	ldr	r2, [pc, #152]	@ (800b08c <HAL_DMA_Abort_IT+0x1dc>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d020      	beq.n	800b03a <HAL_DMA_Abort_IT+0x18a>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a2a      	ldr	r2, [pc, #168]	@ (800b0a8 <HAL_DMA_Abort_IT+0x1f8>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d019      	beq.n	800b036 <HAL_DMA_Abort_IT+0x186>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a29      	ldr	r2, [pc, #164]	@ (800b0ac <HAL_DMA_Abort_IT+0x1fc>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d012      	beq.n	800b032 <HAL_DMA_Abort_IT+0x182>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a27      	ldr	r2, [pc, #156]	@ (800b0b0 <HAL_DMA_Abort_IT+0x200>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d00a      	beq.n	800b02c <HAL_DMA_Abort_IT+0x17c>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a26      	ldr	r2, [pc, #152]	@ (800b0b4 <HAL_DMA_Abort_IT+0x204>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d102      	bne.n	800b026 <HAL_DMA_Abort_IT+0x176>
 800b020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b024:	e01b      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b026:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b02a:	e018      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b02c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b030:	e015      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b032:	2310      	movs	r3, #16
 800b034:	e013      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b036:	2301      	movs	r3, #1
 800b038:	e011      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b03a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b03e:	e00e      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b040:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b044:	e00b      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b04a:	e008      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b04c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b050:	e005      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b056:	e002      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b058:	2310      	movs	r3, #16
 800b05a:	e000      	b.n	800b05e <HAL_DMA_Abort_IT+0x1ae>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4a17      	ldr	r2, [pc, #92]	@ (800b0bc <HAL_DMA_Abort_IT+0x20c>)
 800b060:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
    } 
  }
  return status;
 800b082:	7bfb      	ldrb	r3, [r7, #15]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	40020080 	.word	0x40020080
 800b090:	40020008 	.word	0x40020008
 800b094:	4002001c 	.word	0x4002001c
 800b098:	40020030 	.word	0x40020030
 800b09c:	40020044 	.word	0x40020044
 800b0a0:	40020058 	.word	0x40020058
 800b0a4:	4002006c 	.word	0x4002006c
 800b0a8:	40020408 	.word	0x40020408
 800b0ac:	4002041c 	.word	0x4002041c
 800b0b0:	40020430 	.word	0x40020430
 800b0b4:	40020444 	.word	0x40020444
 800b0b8:	40020400 	.word	0x40020400
 800b0bc:	40020000 	.word	0x40020000

0800b0c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b08b      	sub	sp, #44	@ 0x2c
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b0d2:	e179      	b.n	800b3c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69fa      	ldr	r2, [r7, #28]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	f040 8168 	bne.w	800b3c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	4a96      	ldr	r2, [pc, #600]	@ (800b350 <HAL_GPIO_Init+0x290>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d05e      	beq.n	800b1ba <HAL_GPIO_Init+0xfa>
 800b0fc:	4a94      	ldr	r2, [pc, #592]	@ (800b350 <HAL_GPIO_Init+0x290>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d875      	bhi.n	800b1ee <HAL_GPIO_Init+0x12e>
 800b102:	4a94      	ldr	r2, [pc, #592]	@ (800b354 <HAL_GPIO_Init+0x294>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d058      	beq.n	800b1ba <HAL_GPIO_Init+0xfa>
 800b108:	4a92      	ldr	r2, [pc, #584]	@ (800b354 <HAL_GPIO_Init+0x294>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d86f      	bhi.n	800b1ee <HAL_GPIO_Init+0x12e>
 800b10e:	4a92      	ldr	r2, [pc, #584]	@ (800b358 <HAL_GPIO_Init+0x298>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d052      	beq.n	800b1ba <HAL_GPIO_Init+0xfa>
 800b114:	4a90      	ldr	r2, [pc, #576]	@ (800b358 <HAL_GPIO_Init+0x298>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d869      	bhi.n	800b1ee <HAL_GPIO_Init+0x12e>
 800b11a:	4a90      	ldr	r2, [pc, #576]	@ (800b35c <HAL_GPIO_Init+0x29c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d04c      	beq.n	800b1ba <HAL_GPIO_Init+0xfa>
 800b120:	4a8e      	ldr	r2, [pc, #568]	@ (800b35c <HAL_GPIO_Init+0x29c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d863      	bhi.n	800b1ee <HAL_GPIO_Init+0x12e>
 800b126:	4a8e      	ldr	r2, [pc, #568]	@ (800b360 <HAL_GPIO_Init+0x2a0>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d046      	beq.n	800b1ba <HAL_GPIO_Init+0xfa>
 800b12c:	4a8c      	ldr	r2, [pc, #560]	@ (800b360 <HAL_GPIO_Init+0x2a0>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d85d      	bhi.n	800b1ee <HAL_GPIO_Init+0x12e>
 800b132:	2b12      	cmp	r3, #18
 800b134:	d82a      	bhi.n	800b18c <HAL_GPIO_Init+0xcc>
 800b136:	2b12      	cmp	r3, #18
 800b138:	d859      	bhi.n	800b1ee <HAL_GPIO_Init+0x12e>
 800b13a:	a201      	add	r2, pc, #4	@ (adr r2, 800b140 <HAL_GPIO_Init+0x80>)
 800b13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b140:	0800b1bb 	.word	0x0800b1bb
 800b144:	0800b195 	.word	0x0800b195
 800b148:	0800b1a7 	.word	0x0800b1a7
 800b14c:	0800b1e9 	.word	0x0800b1e9
 800b150:	0800b1ef 	.word	0x0800b1ef
 800b154:	0800b1ef 	.word	0x0800b1ef
 800b158:	0800b1ef 	.word	0x0800b1ef
 800b15c:	0800b1ef 	.word	0x0800b1ef
 800b160:	0800b1ef 	.word	0x0800b1ef
 800b164:	0800b1ef 	.word	0x0800b1ef
 800b168:	0800b1ef 	.word	0x0800b1ef
 800b16c:	0800b1ef 	.word	0x0800b1ef
 800b170:	0800b1ef 	.word	0x0800b1ef
 800b174:	0800b1ef 	.word	0x0800b1ef
 800b178:	0800b1ef 	.word	0x0800b1ef
 800b17c:	0800b1ef 	.word	0x0800b1ef
 800b180:	0800b1ef 	.word	0x0800b1ef
 800b184:	0800b19d 	.word	0x0800b19d
 800b188:	0800b1b1 	.word	0x0800b1b1
 800b18c:	4a75      	ldr	r2, [pc, #468]	@ (800b364 <HAL_GPIO_Init+0x2a4>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d013      	beq.n	800b1ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b192:	e02c      	b.n	800b1ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	623b      	str	r3, [r7, #32]
          break;
 800b19a:	e029      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	623b      	str	r3, [r7, #32]
          break;
 800b1a4:	e024      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	623b      	str	r3, [r7, #32]
          break;
 800b1ae:	e01f      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	623b      	str	r3, [r7, #32]
          break;
 800b1b8:	e01a      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d102      	bne.n	800b1c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b1c2:	2304      	movs	r3, #4
 800b1c4:	623b      	str	r3, [r7, #32]
          break;
 800b1c6:	e013      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d105      	bne.n	800b1dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	611a      	str	r2, [r3, #16]
          break;
 800b1da:	e009      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b1dc:	2308      	movs	r3, #8
 800b1de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	615a      	str	r2, [r3, #20]
          break;
 800b1e6:	e003      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	623b      	str	r3, [r7, #32]
          break;
 800b1ec:	e000      	b.n	800b1f0 <HAL_GPIO_Init+0x130>
          break;
 800b1ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	2bff      	cmp	r3, #255	@ 0xff
 800b1f4:	d801      	bhi.n	800b1fa <HAL_GPIO_Init+0x13a>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	e001      	b.n	800b1fe <HAL_GPIO_Init+0x13e>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2bff      	cmp	r3, #255	@ 0xff
 800b204:	d802      	bhi.n	800b20c <HAL_GPIO_Init+0x14c>
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	e002      	b.n	800b212 <HAL_GPIO_Init+0x152>
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	3b08      	subs	r3, #8
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	210f      	movs	r1, #15
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	fa01 f303 	lsl.w	r3, r1, r3
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	6a39      	ldr	r1, [r7, #32]
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	fa01 f303 	lsl.w	r3, r1, r3
 800b22c:	431a      	orrs	r2, r3
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80c1 	beq.w	800b3c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b240:	4b49      	ldr	r3, [pc, #292]	@ (800b368 <HAL_GPIO_Init+0x2a8>)
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	4a48      	ldr	r2, [pc, #288]	@ (800b368 <HAL_GPIO_Init+0x2a8>)
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	6193      	str	r3, [r2, #24]
 800b24c:	4b46      	ldr	r3, [pc, #280]	@ (800b368 <HAL_GPIO_Init+0x2a8>)
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	60bb      	str	r3, [r7, #8]
 800b256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800b258:	4a44      	ldr	r2, [pc, #272]	@ (800b36c <HAL_GPIO_Init+0x2ac>)
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	089b      	lsrs	r3, r3, #2
 800b25e:	3302      	adds	r3, #2
 800b260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	220f      	movs	r2, #15
 800b270:	fa02 f303 	lsl.w	r3, r2, r3
 800b274:	43db      	mvns	r3, r3
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4013      	ands	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a3c      	ldr	r2, [pc, #240]	@ (800b370 <HAL_GPIO_Init+0x2b0>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d01f      	beq.n	800b2c4 <HAL_GPIO_Init+0x204>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a3b      	ldr	r2, [pc, #236]	@ (800b374 <HAL_GPIO_Init+0x2b4>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d019      	beq.n	800b2c0 <HAL_GPIO_Init+0x200>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a3a      	ldr	r2, [pc, #232]	@ (800b378 <HAL_GPIO_Init+0x2b8>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d013      	beq.n	800b2bc <HAL_GPIO_Init+0x1fc>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a39      	ldr	r2, [pc, #228]	@ (800b37c <HAL_GPIO_Init+0x2bc>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d00d      	beq.n	800b2b8 <HAL_GPIO_Init+0x1f8>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a38      	ldr	r2, [pc, #224]	@ (800b380 <HAL_GPIO_Init+0x2c0>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d007      	beq.n	800b2b4 <HAL_GPIO_Init+0x1f4>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a37      	ldr	r2, [pc, #220]	@ (800b384 <HAL_GPIO_Init+0x2c4>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d101      	bne.n	800b2b0 <HAL_GPIO_Init+0x1f0>
 800b2ac:	2305      	movs	r3, #5
 800b2ae:	e00a      	b.n	800b2c6 <HAL_GPIO_Init+0x206>
 800b2b0:	2306      	movs	r3, #6
 800b2b2:	e008      	b.n	800b2c6 <HAL_GPIO_Init+0x206>
 800b2b4:	2304      	movs	r3, #4
 800b2b6:	e006      	b.n	800b2c6 <HAL_GPIO_Init+0x206>
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e004      	b.n	800b2c6 <HAL_GPIO_Init+0x206>
 800b2bc:	2302      	movs	r3, #2
 800b2be:	e002      	b.n	800b2c6 <HAL_GPIO_Init+0x206>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <HAL_GPIO_Init+0x206>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2c8:	f002 0203 	and.w	r2, r2, #3
 800b2cc:	0092      	lsls	r2, r2, #2
 800b2ce:	4093      	lsls	r3, r2
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800b2d6:	4925      	ldr	r1, [pc, #148]	@ (800b36c <HAL_GPIO_Init+0x2ac>)
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2da:	089b      	lsrs	r3, r3, #2
 800b2dc:	3302      	adds	r3, #2
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800b2f0:	4b25      	ldr	r3, [pc, #148]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b2f2:	689a      	ldr	r2, [r3, #8]
 800b2f4:	4924      	ldr	r1, [pc, #144]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	608b      	str	r3, [r1, #8]
 800b2fc:	e006      	b.n	800b30c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800b2fe:	4b22      	ldr	r3, [pc, #136]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b300:	689a      	ldr	r2, [r3, #8]
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	43db      	mvns	r3, r3
 800b306:	4920      	ldr	r1, [pc, #128]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b308:	4013      	ands	r3, r2
 800b30a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800b318:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	491a      	ldr	r1, [pc, #104]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	4313      	orrs	r3, r2
 800b322:	60cb      	str	r3, [r1, #12]
 800b324:	e006      	b.n	800b334 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800b326:	4b18      	ldr	r3, [pc, #96]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	43db      	mvns	r3, r3
 800b32e:	4916      	ldr	r1, [pc, #88]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b330:	4013      	ands	r3, r2
 800b332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d025      	beq.n	800b38c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800b340:	4b11      	ldr	r3, [pc, #68]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	4910      	ldr	r1, [pc, #64]	@ (800b388 <HAL_GPIO_Init+0x2c8>)
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	4313      	orrs	r3, r2
 800b34a:	604b      	str	r3, [r1, #4]
 800b34c:	e025      	b.n	800b39a <HAL_GPIO_Init+0x2da>
 800b34e:	bf00      	nop
 800b350:	10320000 	.word	0x10320000
 800b354:	10310000 	.word	0x10310000
 800b358:	10220000 	.word	0x10220000
 800b35c:	10210000 	.word	0x10210000
 800b360:	10120000 	.word	0x10120000
 800b364:	10110000 	.word	0x10110000
 800b368:	40021000 	.word	0x40021000
 800b36c:	40010000 	.word	0x40010000
 800b370:	40010800 	.word	0x40010800
 800b374:	40010c00 	.word	0x40010c00
 800b378:	40011000 	.word	0x40011000
 800b37c:	40011400 	.word	0x40011400
 800b380:	40011800 	.word	0x40011800
 800b384:	40011c00 	.word	0x40011c00
 800b388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800b38c:	4b15      	ldr	r3, [pc, #84]	@ (800b3e4 <HAL_GPIO_Init+0x324>)
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	43db      	mvns	r3, r3
 800b394:	4913      	ldr	r1, [pc, #76]	@ (800b3e4 <HAL_GPIO_Init+0x324>)
 800b396:	4013      	ands	r3, r2
 800b398:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d006      	beq.n	800b3b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <HAL_GPIO_Init+0x324>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	490e      	ldr	r1, [pc, #56]	@ (800b3e4 <HAL_GPIO_Init+0x324>)
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	600b      	str	r3, [r1, #0]
 800b3b2:	e006      	b.n	800b3c2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800b3b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e4 <HAL_GPIO_Init+0x324>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	43db      	mvns	r3, r3
 800b3bc:	4909      	ldr	r1, [pc, #36]	@ (800b3e4 <HAL_GPIO_Init+0x324>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f47f ae7e 	bne.w	800b0d4 <HAL_GPIO_Init+0x14>
  }
}
 800b3d8:	bf00      	nop
 800b3da:	bf00      	nop
 800b3dc:	372c      	adds	r7, #44	@ 0x2c
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bc80      	pop	{r7}
 800b3e2:	4770      	bx	lr
 800b3e4:	40010400 	.word	0x40010400

0800b3e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b089      	sub	sp, #36	@ 0x24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800b3f6:	e0a6      	b.n	800b546 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	4013      	ands	r3, r2
 800b404:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 8099 	beq.w	800b540 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800b40e:	4a54      	ldr	r2, [pc, #336]	@ (800b560 <HAL_GPIO_DeInit+0x178>)
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	089b      	lsrs	r3, r3, #2
 800b414:	3302      	adds	r3, #2
 800b416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b41a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	f003 0303 	and.w	r3, r3, #3
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	220f      	movs	r2, #15
 800b426:	fa02 f303 	lsl.w	r3, r2, r3
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4013      	ands	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a4c      	ldr	r2, [pc, #304]	@ (800b564 <HAL_GPIO_DeInit+0x17c>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d01f      	beq.n	800b478 <HAL_GPIO_DeInit+0x90>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a4b      	ldr	r2, [pc, #300]	@ (800b568 <HAL_GPIO_DeInit+0x180>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d019      	beq.n	800b474 <HAL_GPIO_DeInit+0x8c>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a4a      	ldr	r2, [pc, #296]	@ (800b56c <HAL_GPIO_DeInit+0x184>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d013      	beq.n	800b470 <HAL_GPIO_DeInit+0x88>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a49      	ldr	r2, [pc, #292]	@ (800b570 <HAL_GPIO_DeInit+0x188>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00d      	beq.n	800b46c <HAL_GPIO_DeInit+0x84>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a48      	ldr	r2, [pc, #288]	@ (800b574 <HAL_GPIO_DeInit+0x18c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d007      	beq.n	800b468 <HAL_GPIO_DeInit+0x80>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a47      	ldr	r2, [pc, #284]	@ (800b578 <HAL_GPIO_DeInit+0x190>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d101      	bne.n	800b464 <HAL_GPIO_DeInit+0x7c>
 800b460:	2305      	movs	r3, #5
 800b462:	e00a      	b.n	800b47a <HAL_GPIO_DeInit+0x92>
 800b464:	2306      	movs	r3, #6
 800b466:	e008      	b.n	800b47a <HAL_GPIO_DeInit+0x92>
 800b468:	2304      	movs	r3, #4
 800b46a:	e006      	b.n	800b47a <HAL_GPIO_DeInit+0x92>
 800b46c:	2303      	movs	r3, #3
 800b46e:	e004      	b.n	800b47a <HAL_GPIO_DeInit+0x92>
 800b470:	2302      	movs	r3, #2
 800b472:	e002      	b.n	800b47a <HAL_GPIO_DeInit+0x92>
 800b474:	2301      	movs	r3, #1
 800b476:	e000      	b.n	800b47a <HAL_GPIO_DeInit+0x92>
 800b478:	2300      	movs	r3, #0
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	f002 0203 	and.w	r2, r2, #3
 800b480:	0092      	lsls	r2, r2, #2
 800b482:	4093      	lsls	r3, r2
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	429a      	cmp	r2, r3
 800b488:	d132      	bne.n	800b4f0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800b48a:	4b3c      	ldr	r3, [pc, #240]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	43db      	mvns	r3, r3
 800b492:	493a      	ldr	r1, [pc, #232]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b494:	4013      	ands	r3, r2
 800b496:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800b498:	4b38      	ldr	r3, [pc, #224]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	43db      	mvns	r3, r3
 800b4a0:	4936      	ldr	r1, [pc, #216]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800b4a6:	4b35      	ldr	r3, [pc, #212]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b4a8:	68da      	ldr	r2, [r3, #12]
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	43db      	mvns	r3, r3
 800b4ae:	4933      	ldr	r1, [pc, #204]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800b4b4:	4b31      	ldr	r3, [pc, #196]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b4b6:	689a      	ldr	r2, [r3, #8]
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	43db      	mvns	r3, r3
 800b4bc:	492f      	ldr	r1, [pc, #188]	@ (800b57c <HAL_GPIO_DeInit+0x194>)
 800b4be:	4013      	ands	r3, r2
 800b4c0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	f003 0303 	and.w	r3, r3, #3
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	220f      	movs	r2, #15
 800b4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800b4d2:	4a23      	ldr	r2, [pc, #140]	@ (800b560 <HAL_GPIO_DeInit+0x178>)
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	089b      	lsrs	r3, r3, #2
 800b4d8:	3302      	adds	r3, #2
 800b4da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	43da      	mvns	r2, r3
 800b4e2:	481f      	ldr	r0, [pc, #124]	@ (800b560 <HAL_GPIO_DeInit+0x178>)
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	089b      	lsrs	r3, r3, #2
 800b4e8:	400a      	ands	r2, r1
 800b4ea:	3302      	adds	r3, #2
 800b4ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	2bff      	cmp	r3, #255	@ 0xff
 800b4f4:	d801      	bhi.n	800b4fa <HAL_GPIO_DeInit+0x112>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	e001      	b.n	800b4fe <HAL_GPIO_DeInit+0x116>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	2bff      	cmp	r3, #255	@ 0xff
 800b504:	d802      	bhi.n	800b50c <HAL_GPIO_DeInit+0x124>
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	e002      	b.n	800b512 <HAL_GPIO_DeInit+0x12a>
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	3b08      	subs	r3, #8
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	210f      	movs	r1, #15
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	fa01 f303 	lsl.w	r3, r1, r3
 800b520:	43db      	mvns	r3, r3
 800b522:	401a      	ands	r2, r3
 800b524:	2104      	movs	r1, #4
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	fa01 f303 	lsl.w	r3, r1, r3
 800b52c:	431a      	orrs	r2, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	43db      	mvns	r3, r3
 800b53a:	401a      	ands	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60da      	str	r2, [r3, #12]
    }

    position++;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	3301      	adds	r3, #1
 800b544:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	fa22 f303 	lsr.w	r3, r2, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f47f af52 	bne.w	800b3f8 <HAL_GPIO_DeInit+0x10>
  }
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	3724      	adds	r7, #36	@ 0x24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bc80      	pop	{r7}
 800b55e:	4770      	bx	lr
 800b560:	40010000 	.word	0x40010000
 800b564:	40010800 	.word	0x40010800
 800b568:	40010c00 	.word	0x40010c00
 800b56c:	40011000 	.word	0x40011000
 800b570:	40011400 	.word	0x40011400
 800b574:	40011800 	.word	0x40011800
 800b578:	40011c00 	.word	0x40011c00
 800b57c:	40010400 	.word	0x40010400

0800b580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689a      	ldr	r2, [r3, #8]
 800b590:	887b      	ldrh	r3, [r7, #2]
 800b592:	4013      	ands	r3, r2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b598:	2301      	movs	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]
 800b59c:	e001      	b.n	800b5a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bc80      	pop	{r7}
 800b5ac:	4770      	bx	lr

0800b5ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	807b      	strh	r3, [r7, #2]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b5be:	787b      	ldrb	r3, [r7, #1]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b5c4:	887a      	ldrh	r2, [r7, #2]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b5ca:	e003      	b.n	800b5d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b5cc:	887b      	ldrh	r3, [r7, #2]
 800b5ce:	041a      	lsls	r2, r3, #16
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	611a      	str	r2, [r3, #16]
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bc80      	pop	{r7}
 800b5dc:	4770      	bx	lr

0800b5de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b5f0:	887a      	ldrh	r2, [r7, #2]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	041a      	lsls	r2, r3, #16
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	43d9      	mvns	r1, r3
 800b5fc:	887b      	ldrh	r3, [r7, #2]
 800b5fe:	400b      	ands	r3, r1
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	611a      	str	r2, [r3, #16]
}
 800b606:	bf00      	nop
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bc80      	pop	{r7}
 800b60e:	4770      	bx	lr

0800b610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e12b      	b.n	800b87a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe fff4 	bl	800a624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2224      	movs	r2, #36	@ 0x24
 800b640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0201 	bic.w	r2, r2, #1
 800b652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b674:	f001 fdb8 	bl	800d1e8 <HAL_RCC_GetPCLK1Freq>
 800b678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	4a81      	ldr	r2, [pc, #516]	@ (800b884 <HAL_I2C_Init+0x274>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d807      	bhi.n	800b694 <HAL_I2C_Init+0x84>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4a80      	ldr	r2, [pc, #512]	@ (800b888 <HAL_I2C_Init+0x278>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	bf94      	ite	ls
 800b68c:	2301      	movls	r3, #1
 800b68e:	2300      	movhi	r3, #0
 800b690:	b2db      	uxtb	r3, r3
 800b692:	e006      	b.n	800b6a2 <HAL_I2C_Init+0x92>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4a7d      	ldr	r2, [pc, #500]	@ (800b88c <HAL_I2C_Init+0x27c>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	bf94      	ite	ls
 800b69c:	2301      	movls	r3, #1
 800b69e:	2300      	movhi	r3, #0
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e0e7      	b.n	800b87a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	4a78      	ldr	r2, [pc, #480]	@ (800b890 <HAL_I2C_Init+0x280>)
 800b6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b2:	0c9b      	lsrs	r3, r3, #18
 800b6b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	4a6a      	ldr	r2, [pc, #424]	@ (800b884 <HAL_I2C_Init+0x274>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d802      	bhi.n	800b6e4 <HAL_I2C_Init+0xd4>
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	e009      	b.n	800b6f8 <HAL_I2C_Init+0xe8>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b6ea:	fb02 f303 	mul.w	r3, r2, r3
 800b6ee:	4a69      	ldr	r2, [pc, #420]	@ (800b894 <HAL_I2C_Init+0x284>)
 800b6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f4:	099b      	lsrs	r3, r3, #6
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	6812      	ldr	r2, [r2, #0]
 800b6fc:	430b      	orrs	r3, r1
 800b6fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b70a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	495c      	ldr	r1, [pc, #368]	@ (800b884 <HAL_I2C_Init+0x274>)
 800b714:	428b      	cmp	r3, r1
 800b716:	d819      	bhi.n	800b74c <HAL_I2C_Init+0x13c>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	1e59      	subs	r1, r3, #1
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	fbb1 f3f3 	udiv	r3, r1, r3
 800b726:	1c59      	adds	r1, r3, #1
 800b728:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b72c:	400b      	ands	r3, r1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00a      	beq.n	800b748 <HAL_I2C_Init+0x138>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	1e59      	subs	r1, r3, #1
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b740:	3301      	adds	r3, #1
 800b742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b746:	e051      	b.n	800b7ec <HAL_I2C_Init+0x1dc>
 800b748:	2304      	movs	r3, #4
 800b74a:	e04f      	b.n	800b7ec <HAL_I2C_Init+0x1dc>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d111      	bne.n	800b778 <HAL_I2C_Init+0x168>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	1e58      	subs	r0, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6859      	ldr	r1, [r3, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	440b      	add	r3, r1
 800b762:	fbb0 f3f3 	udiv	r3, r0, r3
 800b766:	3301      	adds	r3, #1
 800b768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bf0c      	ite	eq
 800b770:	2301      	moveq	r3, #1
 800b772:	2300      	movne	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	e012      	b.n	800b79e <HAL_I2C_Init+0x18e>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	1e58      	subs	r0, r3, #1
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6859      	ldr	r1, [r3, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	440b      	add	r3, r1
 800b786:	0099      	lsls	r1, r3, #2
 800b788:	440b      	add	r3, r1
 800b78a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b78e:	3301      	adds	r3, #1
 800b790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b794:	2b00      	cmp	r3, #0
 800b796:	bf0c      	ite	eq
 800b798:	2301      	moveq	r3, #1
 800b79a:	2300      	movne	r3, #0
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <HAL_I2C_Init+0x196>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e022      	b.n	800b7ec <HAL_I2C_Init+0x1dc>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10e      	bne.n	800b7cc <HAL_I2C_Init+0x1bc>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	1e58      	subs	r0, r3, #1
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6859      	ldr	r1, [r3, #4]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	440b      	add	r3, r1
 800b7bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7ca:	e00f      	b.n	800b7ec <HAL_I2C_Init+0x1dc>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	1e58      	subs	r0, r3, #1
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6859      	ldr	r1, [r3, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	440b      	add	r3, r1
 800b7da:	0099      	lsls	r1, r3, #2
 800b7dc:	440b      	add	r3, r1
 800b7de:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7ec:	6879      	ldr	r1, [r7, #4]
 800b7ee:	6809      	ldr	r1, [r1, #0]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	69da      	ldr	r2, [r3, #28]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	430a      	orrs	r2, r1
 800b80e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b81a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	6911      	ldr	r1, [r2, #16]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	68d2      	ldr	r2, [r2, #12]
 800b826:	4311      	orrs	r1, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	430b      	orrs	r3, r1
 800b82e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	695a      	ldr	r2, [r3, #20]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	431a      	orrs	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f042 0201 	orr.w	r2, r2, #1
 800b85a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2220      	movs	r2, #32
 800b866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	000186a0 	.word	0x000186a0
 800b888:	001e847f 	.word	0x001e847f
 800b88c:	003d08ff 	.word	0x003d08ff
 800b890:	431bde83 	.word	0x431bde83
 800b894:	10624dd3 	.word	0x10624dd3

0800b898 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e021      	b.n	800b8ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2224      	movs	r2, #36	@ 0x24
 800b8ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f022 0201 	bic.w	r2, r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7fe feec 	bl	800a6a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af02      	add	r7, sp, #8
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	461a      	mov	r2, r3
 800b904:	460b      	mov	r3, r1
 800b906:	817b      	strh	r3, [r7, #10]
 800b908:	4613      	mov	r3, r2
 800b90a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b90c:	f7ff f85e 	bl	800a9cc <HAL_GetTick>
 800b910:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b20      	cmp	r3, #32
 800b91c:	f040 80e0 	bne.w	800bae0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	2319      	movs	r3, #25
 800b926:	2201      	movs	r2, #1
 800b928:	4970      	ldr	r1, [pc, #448]	@ (800baec <HAL_I2C_Master_Transmit+0x1f4>)
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 fe5c 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b936:	2302      	movs	r3, #2
 800b938:	e0d3      	b.n	800bae2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b940:	2b01      	cmp	r3, #1
 800b942:	d101      	bne.n	800b948 <HAL_I2C_Master_Transmit+0x50>
 800b944:	2302      	movs	r3, #2
 800b946:	e0cc      	b.n	800bae2 <HAL_I2C_Master_Transmit+0x1ea>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0301 	and.w	r3, r3, #1
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d007      	beq.n	800b96e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f042 0201 	orr.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b97c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2221      	movs	r2, #33	@ 0x21
 800b982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2210      	movs	r2, #16
 800b98a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	893a      	ldrh	r2, [r7, #8]
 800b99e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4a50      	ldr	r2, [pc, #320]	@ (800baf0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b9ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b9b0:	8979      	ldrh	r1, [r7, #10]
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	6a3a      	ldr	r2, [r7, #32]
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 fc16 	bl	800c1e8 <I2C_MasterRequestWrite>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e08d      	b.n	800bae2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	613b      	str	r3, [r7, #16]
 800b9da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b9dc:	e066      	b.n	800baac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	6a39      	ldr	r1, [r7, #32]
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 ff1a 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00d      	beq.n	800ba0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d107      	bne.n	800ba06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e06b      	b.n	800bae2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba32:	3b01      	subs	r3, #1
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b04      	cmp	r3, #4
 800ba46:	d11b      	bne.n	800ba80 <HAL_I2C_Master_Transmit+0x188>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d017      	beq.n	800ba80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba54:	781a      	ldrb	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	6a39      	ldr	r1, [r7, #32]
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f000 ff11 	bl	800c8ac <I2C_WaitOnBTFFlagUntilTimeout>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00d      	beq.n	800baac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d107      	bne.n	800baa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e01a      	b.n	800bae2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d194      	bne.n	800b9de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2220      	movs	r2, #32
 800bac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	e000      	b.n	800bae2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bae0:	2302      	movs	r3, #2
  }
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	00100002 	.word	0x00100002
 800baf0:	ffff0000 	.word	0xffff0000

0800baf4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	4608      	mov	r0, r1
 800bafe:	4611      	mov	r1, r2
 800bb00:	461a      	mov	r2, r3
 800bb02:	4603      	mov	r3, r0
 800bb04:	817b      	strh	r3, [r7, #10]
 800bb06:	460b      	mov	r3, r1
 800bb08:	813b      	strh	r3, [r7, #8]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bb0e:	f7fe ff5d 	bl	800a9cc <HAL_GetTick>
 800bb12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	f040 80d9 	bne.w	800bcd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	2319      	movs	r3, #25
 800bb28:	2201      	movs	r2, #1
 800bb2a:	496d      	ldr	r1, [pc, #436]	@ (800bce0 <HAL_I2C_Mem_Write+0x1ec>)
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f000 fd5b 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e0cc      	b.n	800bcd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d101      	bne.n	800bb4a <HAL_I2C_Mem_Write+0x56>
 800bb46:	2302      	movs	r3, #2
 800bb48:	e0c5      	b.n	800bcd6 <HAL_I2C_Mem_Write+0x1e2>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d007      	beq.n	800bb70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f042 0201 	orr.w	r2, r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2221      	movs	r2, #33	@ 0x21
 800bb84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2240      	movs	r2, #64	@ 0x40
 800bb8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6a3a      	ldr	r2, [r7, #32]
 800bb9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4a4d      	ldr	r2, [pc, #308]	@ (800bce4 <HAL_I2C_Mem_Write+0x1f0>)
 800bbb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bbb2:	88f8      	ldrh	r0, [r7, #6]
 800bbb4:	893a      	ldrh	r2, [r7, #8]
 800bbb6:	8979      	ldrh	r1, [r7, #10]
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 fb92 	bl	800c2ec <I2C_RequestMemoryWrite>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d052      	beq.n	800bc74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e081      	b.n	800bcd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 fe20 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00d      	beq.n	800bbfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe6:	2b04      	cmp	r3, #4
 800bbe8:	d107      	bne.n	800bbfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e06b      	b.n	800bcd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc02:	781a      	ldrb	r2, [r3, #0]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	3b01      	subs	r3, #1
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d11b      	bne.n	800bc74 <HAL_I2C_Mem_Write+0x180>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d017      	beq.n	800bc74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1aa      	bne.n	800bbd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f000 fe13 	bl	800c8ac <I2C_WaitOnBTFFlagUntilTimeout>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00d      	beq.n	800bca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d107      	bne.n	800bca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e016      	b.n	800bcd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bcb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	e000      	b.n	800bcd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bcd4:	2302      	movs	r3, #2
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	00100002 	.word	0x00100002
 800bce4:	ffff0000 	.word	0xffff0000

0800bce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08c      	sub	sp, #48	@ 0x30
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	817b      	strh	r3, [r7, #10]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	813b      	strh	r3, [r7, #8]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd06:	f7fe fe61 	bl	800a9cc <HAL_GetTick>
 800bd0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	f040 8244 	bne.w	800c1a2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	2319      	movs	r3, #25
 800bd20:	2201      	movs	r2, #1
 800bd22:	4982      	ldr	r1, [pc, #520]	@ (800bf2c <HAL_I2C_Mem_Read+0x244>)
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 fc5f 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800bd30:	2302      	movs	r3, #2
 800bd32:	e237      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d101      	bne.n	800bd42 <HAL_I2C_Mem_Read+0x5a>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e230      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d007      	beq.n	800bd68 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0201 	orr.w	r2, r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2222      	movs	r2, #34	@ 0x22
 800bd7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2240      	movs	r2, #64	@ 0x40
 800bd84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800bd98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4a62      	ldr	r2, [pc, #392]	@ (800bf30 <HAL_I2C_Mem_Read+0x248>)
 800bda8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdaa:	88f8      	ldrh	r0, [r7, #6]
 800bdac:	893a      	ldrh	r2, [r7, #8]
 800bdae:	8979      	ldrh	r1, [r7, #10]
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	4603      	mov	r3, r0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 fb2c 	bl	800c418 <I2C_RequestMemoryRead>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e1ec      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d113      	bne.n	800bdfa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	61fb      	str	r3, [r7, #28]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	61fb      	str	r3, [r7, #28]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	61fb      	str	r3, [r7, #28]
 800bde6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	e1c0      	b.n	800c17c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d11e      	bne.n	800be40 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800be12:	b672      	cpsid	i
}
 800be14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be16:	2300      	movs	r3, #0
 800be18:	61bb      	str	r3, [r7, #24]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	61bb      	str	r3, [r7, #24]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800be3c:	b662      	cpsie	i
}
 800be3e:	e035      	b.n	800beac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be44:	2b02      	cmp	r3, #2
 800be46:	d11e      	bne.n	800be86 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800be58:	b672      	cpsid	i
}
 800be5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800be82:	b662      	cpsie	i
}
 800be84:	e012      	b.n	800beac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800be94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be96:	2300      	movs	r3, #0
 800be98:	613b      	str	r3, [r7, #16]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	613b      	str	r3, [r7, #16]
 800beaa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800beac:	e166      	b.n	800c17c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	f200 811f 	bhi.w	800c0f6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d123      	bne.n	800bf08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 fd39 	bl	800c93c <I2C_WaitOnRXNEFlagUntilTimeout>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e167      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	691a      	ldr	r2, [r3, #16]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bef0:	3b01      	subs	r3, #1
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800befc:	b29b      	uxth	r3, r3
 800befe:	3b01      	subs	r3, #1
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bf06:	e139      	b.n	800c17c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d152      	bne.n	800bfb6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf16:	2200      	movs	r2, #0
 800bf18:	4906      	ldr	r1, [pc, #24]	@ (800bf34 <HAL_I2C_Mem_Read+0x24c>)
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 fb64 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d008      	beq.n	800bf38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e13c      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
 800bf2a:	bf00      	nop
 800bf2c:	00100002 	.word	0x00100002
 800bf30:	ffff0000 	.word	0xffff0000
 800bf34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800bf38:	b672      	cpsid	i
}
 800bf3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	691a      	ldr	r2, [r3, #16]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf56:	b2d2      	uxtb	r2, r2
 800bf58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bf7e:	b662      	cpsie	i
}
 800bf80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	691a      	ldr	r2, [r3, #16]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf8c:	b2d2      	uxtb	r2, r2
 800bf8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	3b01      	subs	r3, #1
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bfb4:	e0e2      	b.n	800c17c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	497b      	ldr	r1, [pc, #492]	@ (800c1ac <HAL_I2C_Mem_Read+0x4c4>)
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 fb11 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e0e9      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfe0:	b672      	cpsid	i
}
 800bfe2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691a      	ldr	r2, [r3, #16]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfee:	b2d2      	uxtb	r2, r2
 800bff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c000:	3b01      	subs	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	3b01      	subs	r3, #1
 800c010:	b29a      	uxth	r2, r3
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c016:	4b66      	ldr	r3, [pc, #408]	@ (800c1b0 <HAL_I2C_Mem_Read+0x4c8>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	08db      	lsrs	r3, r3, #3
 800c01c:	4a65      	ldr	r2, [pc, #404]	@ (800c1b4 <HAL_I2C_Mem_Read+0x4cc>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	0a1a      	lsrs	r2, r3, #8
 800c024:	4613      	mov	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	00da      	lsls	r2, r3, #3
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	3b01      	subs	r3, #1
 800c034:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d118      	bne.n	800c06e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2220      	movs	r2, #32
 800c046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c056:	f043 0220 	orr.w	r2, r3, #32
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800c05e:	b662      	cpsie	i
}
 800c060:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e09a      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	695b      	ldr	r3, [r3, #20]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b04      	cmp	r3, #4
 800c07a:	d1d9      	bne.n	800c030 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c08a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	691a      	ldr	r2, [r3, #16]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c096:	b2d2      	uxtb	r2, r2
 800c098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c0be:	b662      	cpsie	i
}
 800c0c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	691a      	ldr	r2, [r3, #16]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0cc:	b2d2      	uxtb	r2, r2
 800c0ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c0f4:	e042      	b.n	800c17c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 fc1e 	bl	800c93c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e04c      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	691a      	ldr	r2, [r3, #16]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c114:	b2d2      	uxtb	r2, r2
 800c116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c126:	3b01      	subs	r3, #1
 800c128:	b29a      	uxth	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c132:	b29b      	uxth	r3, r3
 800c134:	3b01      	subs	r3, #1
 800c136:	b29a      	uxth	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	f003 0304 	and.w	r3, r3, #4
 800c146:	2b04      	cmp	r3, #4
 800c148:	d118      	bne.n	800c17c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	691a      	ldr	r2, [r3, #16]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c154:	b2d2      	uxtb	r2, r2
 800c156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c166:	3b01      	subs	r3, #1
 800c168:	b29a      	uxth	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c172:	b29b      	uxth	r3, r3
 800c174:	3b01      	subs	r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c180:	2b00      	cmp	r3, #0
 800c182:	f47f ae94 	bne.w	800beae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2220      	movs	r2, #32
 800c18a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e000      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800c1a2:	2302      	movs	r3, #2
  }
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3728      	adds	r7, #40	@ 0x28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	00010004 	.word	0x00010004
 800c1b0:	20000f74 	.word	0x20000f74
 800c1b4:	14f8b589 	.word	0x14f8b589

0800c1b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1c6:	b2db      	uxtb	r3, r3
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bc80      	pop	{r7}
 800c1d0:	4770      	bx	lr

0800c1d2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bc80      	pop	{r7}
 800c1e6:	4770      	bx	lr

0800c1e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b088      	sub	sp, #32
 800c1ec:	af02      	add	r7, sp, #8
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	607a      	str	r2, [r7, #4]
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b08      	cmp	r3, #8
 800c202:	d006      	beq.n	800c212 <I2C_MasterRequestWrite+0x2a>
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d003      	beq.n	800c212 <I2C_MasterRequestWrite+0x2a>
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c210:	d108      	bne.n	800c224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c220:	601a      	str	r2, [r3, #0]
 800c222:	e00b      	b.n	800c23c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c228:	2b12      	cmp	r3, #18
 800c22a:	d107      	bne.n	800c23c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c23a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f9cd 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00d      	beq.n	800c270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c25e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c262:	d103      	bne.n	800c26c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c26a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e035      	b.n	800c2dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c278:	d108      	bne.n	800c28c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c27a:	897b      	ldrh	r3, [r7, #10]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	461a      	mov	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c288:	611a      	str	r2, [r3, #16]
 800c28a:	e01b      	b.n	800c2c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c28c:	897b      	ldrh	r3, [r7, #10]
 800c28e:	11db      	asrs	r3, r3, #7
 800c290:	b2db      	uxtb	r3, r3
 800c292:	f003 0306 	and.w	r3, r3, #6
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f063 030f 	orn	r3, r3, #15
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	490e      	ldr	r1, [pc, #56]	@ (800c2e4 <I2C_MasterRequestWrite+0xfc>)
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f000 fa16 	bl	800c6dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e010      	b.n	800c2dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c2ba:	897b      	ldrh	r3, [r7, #10]
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	4907      	ldr	r1, [pc, #28]	@ (800c2e8 <I2C_MasterRequestWrite+0x100>)
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 fa06 	bl	800c6dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	00010008 	.word	0x00010008
 800c2e8:	00010002 	.word	0x00010002

0800c2ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af02      	add	r7, sp, #8
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	817b      	strh	r3, [r7, #10]
 800c2fe:	460b      	mov	r3, r1
 800c300:	813b      	strh	r3, [r7, #8]
 800c302:	4613      	mov	r3, r2
 800c304:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 f960 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00d      	beq.n	800c34a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c33c:	d103      	bne.n	800c346 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e05f      	b.n	800c40a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c34a:	897b      	ldrh	r3, [r7, #10]
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	461a      	mov	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	6a3a      	ldr	r2, [r7, #32]
 800c35e:	492d      	ldr	r1, [pc, #180]	@ (800c414 <I2C_RequestMemoryWrite+0x128>)
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f000 f9bb 	bl	800c6dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e04c      	b.n	800c40a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	617b      	str	r3, [r7, #20]
 800c384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c388:	6a39      	ldr	r1, [r7, #32]
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f000 fa46 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00d      	beq.n	800c3b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	d107      	bne.n	800c3ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e02b      	b.n	800c40a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c3b2:	88fb      	ldrh	r3, [r7, #6]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d105      	bne.n	800c3c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c3b8:	893b      	ldrh	r3, [r7, #8]
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	611a      	str	r2, [r3, #16]
 800c3c2:	e021      	b.n	800c408 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c3c4:	893b      	ldrh	r3, [r7, #8]
 800c3c6:	0a1b      	lsrs	r3, r3, #8
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3d4:	6a39      	ldr	r1, [r7, #32]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f000 fa20 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00d      	beq.n	800c3fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e6:	2b04      	cmp	r3, #4
 800c3e8:	d107      	bne.n	800c3fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e005      	b.n	800c40a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c3fe:	893b      	ldrh	r3, [r7, #8]
 800c400:	b2da      	uxtb	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	00010002 	.word	0x00010002

0800c418 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	4608      	mov	r0, r1
 800c422:	4611      	mov	r1, r2
 800c424:	461a      	mov	r2, r3
 800c426:	4603      	mov	r3, r0
 800c428:	817b      	strh	r3, [r7, #10]
 800c42a:	460b      	mov	r3, r1
 800c42c:	813b      	strh	r3, [r7, #8]
 800c42e:	4613      	mov	r3, r2
 800c430:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c440:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	2200      	movs	r2, #0
 800c45a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 f8c2 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00d      	beq.n	800c486 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c478:	d103      	bne.n	800c482 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c480:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e0aa      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c486:	897b      	ldrh	r3, [r7, #10]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	461a      	mov	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	6a3a      	ldr	r2, [r7, #32]
 800c49a:	4952      	ldr	r1, [pc, #328]	@ (800c5e4 <I2C_RequestMemoryRead+0x1cc>)
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f000 f91d 	bl	800c6dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e097      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4c4:	6a39      	ldr	r1, [r7, #32]
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 f9a8 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00d      	beq.n	800c4ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d6:	2b04      	cmp	r3, #4
 800c4d8:	d107      	bne.n	800c4ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e076      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c4ee:	88fb      	ldrh	r3, [r7, #6]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d105      	bne.n	800c500 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c4f4:	893b      	ldrh	r3, [r7, #8]
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	611a      	str	r2, [r3, #16]
 800c4fe:	e021      	b.n	800c544 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c500:	893b      	ldrh	r3, [r7, #8]
 800c502:	0a1b      	lsrs	r3, r3, #8
 800c504:	b29b      	uxth	r3, r3
 800c506:	b2da      	uxtb	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c510:	6a39      	ldr	r1, [r7, #32]
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 f982 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00d      	beq.n	800c53a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c522:	2b04      	cmp	r3, #4
 800c524:	d107      	bne.n	800c536 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e050      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c53a:	893b      	ldrh	r3, [r7, #8]
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c546:	6a39      	ldr	r1, [r7, #32]
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	f000 f967 	bl	800c81c <I2C_WaitOnTXEFlagUntilTimeout>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00d      	beq.n	800c570 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d107      	bne.n	800c56c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c56a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e035      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c57e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	2200      	movs	r2, #0
 800c588:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 f82b 	bl	800c5e8 <I2C_WaitOnFlagUntilTimeout>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5a6:	d103      	bne.n	800c5b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e013      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c5b4:	897b      	ldrh	r3, [r7, #10]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f043 0301 	orr.w	r3, r3, #1
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c6:	6a3a      	ldr	r2, [r7, #32]
 800c5c8:	4906      	ldr	r1, [pc, #24]	@ (800c5e4 <I2C_RequestMemoryRead+0x1cc>)
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f000 f886 	bl	800c6dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	00010002 	.word	0x00010002

0800c5e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	603b      	str	r3, [r7, #0]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5f8:	e048      	b.n	800c68c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c600:	d044      	beq.n	800c68c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c602:	f7fe f9e3 	bl	800a9cc <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d302      	bcc.n	800c618 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d139      	bne.n	800c68c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d10d      	bne.n	800c63e <I2C_WaitOnFlagUntilTimeout+0x56>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	695b      	ldr	r3, [r3, #20]
 800c628:	43da      	mvns	r2, r3
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	4013      	ands	r3, r2
 800c62e:	b29b      	uxth	r3, r3
 800c630:	2b00      	cmp	r3, #0
 800c632:	bf0c      	ite	eq
 800c634:	2301      	moveq	r3, #1
 800c636:	2300      	movne	r3, #0
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	461a      	mov	r2, r3
 800c63c:	e00c      	b.n	800c658 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	43da      	mvns	r2, r3
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	4013      	ands	r3, r2
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	bf0c      	ite	eq
 800c650:	2301      	moveq	r3, #1
 800c652:	2300      	movne	r3, #0
 800c654:	b2db      	uxtb	r3, r3
 800c656:	461a      	mov	r2, r3
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d116      	bne.n	800c68c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2220      	movs	r2, #32
 800c668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c678:	f043 0220 	orr.w	r2, r3, #32
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e023      	b.n	800c6d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	0c1b      	lsrs	r3, r3, #16
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b01      	cmp	r3, #1
 800c694:	d10d      	bne.n	800c6b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	43da      	mvns	r2, r3
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bf0c      	ite	eq
 800c6a8:	2301      	moveq	r3, #1
 800c6aa:	2300      	movne	r3, #0
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	e00c      	b.n	800c6cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	43da      	mvns	r2, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	4013      	ands	r3, r2
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bf0c      	ite	eq
 800c6c4:	2301      	moveq	r3, #1
 800c6c6:	2300      	movne	r3, #0
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	79fb      	ldrb	r3, [r7, #7]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d093      	beq.n	800c5fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c6ea:	e071      	b.n	800c7d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6fa:	d123      	bne.n	800c744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c70a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2220      	movs	r2, #32
 800c720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c730:	f043 0204 	orr.w	r2, r3, #4
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e067      	b.n	800c814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c74a:	d041      	beq.n	800c7d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c74c:	f7fe f93e 	bl	800a9cc <HAL_GetTick>
 800c750:	4602      	mov	r2, r0
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d302      	bcc.n	800c762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d136      	bne.n	800c7d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	0c1b      	lsrs	r3, r3, #16
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d10c      	bne.n	800c786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	43da      	mvns	r2, r3
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	4013      	ands	r3, r2
 800c778:	b29b      	uxth	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bf14      	ite	ne
 800c77e:	2301      	movne	r3, #1
 800c780:	2300      	moveq	r3, #0
 800c782:	b2db      	uxtb	r3, r3
 800c784:	e00b      	b.n	800c79e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	43da      	mvns	r2, r3
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	4013      	ands	r3, r2
 800c792:	b29b      	uxth	r3, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	bf14      	ite	ne
 800c798:	2301      	movne	r3, #1
 800c79a:	2300      	moveq	r3, #0
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d016      	beq.n	800c7d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7bc:	f043 0220 	orr.w	r2, r3, #32
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e021      	b.n	800c814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	0c1b      	lsrs	r3, r3, #16
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d10c      	bne.n	800c7f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	43da      	mvns	r2, r3
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	bf14      	ite	ne
 800c7ec:	2301      	movne	r3, #1
 800c7ee:	2300      	moveq	r3, #0
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	e00b      	b.n	800c80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	43da      	mvns	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	4013      	ands	r3, r2
 800c800:	b29b      	uxth	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	bf14      	ite	ne
 800c806:	2301      	movne	r3, #1
 800c808:	2300      	moveq	r3, #0
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f47f af6d 	bne.w	800c6ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c828:	e034      	b.n	800c894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 f8e3 	bl	800c9f6 <I2C_IsAcknowledgeFailed>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	e034      	b.n	800c8a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c840:	d028      	beq.n	800c894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c842:	f7fe f8c3 	bl	800a9cc <HAL_GetTick>
 800c846:	4602      	mov	r2, r0
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d302      	bcc.n	800c858 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d11d      	bne.n	800c894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c862:	2b80      	cmp	r3, #128	@ 0x80
 800c864:	d016      	beq.n	800c894 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2220      	movs	r2, #32
 800c870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c880:	f043 0220 	orr.w	r2, r3, #32
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e007      	b.n	800c8a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c89e:	2b80      	cmp	r3, #128	@ 0x80
 800c8a0:	d1c3      	bne.n	800c82a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c8b8:	e034      	b.n	800c924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f000 f89b 	bl	800c9f6 <I2C_IsAcknowledgeFailed>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e034      	b.n	800c934 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8d0:	d028      	beq.n	800c924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8d2:	f7fe f87b 	bl	800a9cc <HAL_GetTick>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d302      	bcc.n	800c8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d11d      	bne.n	800c924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	f003 0304 	and.w	r3, r3, #4
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d016      	beq.n	800c924 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2220      	movs	r2, #32
 800c900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c910:	f043 0220 	orr.w	r2, r3, #32
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e007      	b.n	800c934 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	695b      	ldr	r3, [r3, #20]
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d1c3      	bne.n	800c8ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c948:	e049      	b.n	800c9de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	695b      	ldr	r3, [r3, #20]
 800c950:	f003 0310 	and.w	r3, r3, #16
 800c954:	2b10      	cmp	r3, #16
 800c956:	d119      	bne.n	800c98c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f06f 0210 	mvn.w	r2, #16
 800c960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2220      	movs	r2, #32
 800c96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2200      	movs	r2, #0
 800c984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	e030      	b.n	800c9ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c98c:	f7fe f81e 	bl	800a9cc <HAL_GetTick>
 800c990:	4602      	mov	r2, r0
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d302      	bcc.n	800c9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d11d      	bne.n	800c9de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ac:	2b40      	cmp	r3, #64	@ 0x40
 800c9ae:	d016      	beq.n	800c9de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2220      	movs	r2, #32
 800c9ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ca:	f043 0220 	orr.w	r2, r3, #32
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e007      	b.n	800c9ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e8:	2b40      	cmp	r3, #64	@ 0x40
 800c9ea:	d1ae      	bne.n	800c94a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca0c:	d11b      	bne.n	800ca46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ca16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca32:	f043 0204 	orr.w	r2, r3, #4
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e000      	b.n	800ca48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bc80      	pop	{r7}
 800ca50:	4770      	bx	lr
	...

0800ca54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e272      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8087 	beq.w	800cb82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca74:	4b92      	ldr	r3, [pc, #584]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	f003 030c 	and.w	r3, r3, #12
 800ca7c:	2b04      	cmp	r3, #4
 800ca7e:	d00c      	beq.n	800ca9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ca80:	4b8f      	ldr	r3, [pc, #572]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f003 030c 	and.w	r3, r3, #12
 800ca88:	2b08      	cmp	r3, #8
 800ca8a:	d112      	bne.n	800cab2 <HAL_RCC_OscConfig+0x5e>
 800ca8c:	4b8c      	ldr	r3, [pc, #560]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ca94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca98:	d10b      	bne.n	800cab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca9a:	4b89      	ldr	r3, [pc, #548]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d06c      	beq.n	800cb80 <HAL_RCC_OscConfig+0x12c>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d168      	bne.n	800cb80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e24c      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caba:	d106      	bne.n	800caca <HAL_RCC_OscConfig+0x76>
 800cabc:	4b80      	ldr	r3, [pc, #512]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a7f      	ldr	r2, [pc, #508]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	e02e      	b.n	800cb28 <HAL_RCC_OscConfig+0xd4>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10c      	bne.n	800caec <HAL_RCC_OscConfig+0x98>
 800cad2:	4b7b      	ldr	r3, [pc, #492]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a7a      	ldr	r2, [pc, #488]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	4b78      	ldr	r3, [pc, #480]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a77      	ldr	r2, [pc, #476]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	e01d      	b.n	800cb28 <HAL_RCC_OscConfig+0xd4>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800caf4:	d10c      	bne.n	800cb10 <HAL_RCC_OscConfig+0xbc>
 800caf6:	4b72      	ldr	r3, [pc, #456]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a71      	ldr	r2, [pc, #452]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cafc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb00:	6013      	str	r3, [r2, #0]
 800cb02:	4b6f      	ldr	r3, [pc, #444]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a6e      	ldr	r2, [pc, #440]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb0c:	6013      	str	r3, [r2, #0]
 800cb0e:	e00b      	b.n	800cb28 <HAL_RCC_OscConfig+0xd4>
 800cb10:	4b6b      	ldr	r3, [pc, #428]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a6a      	ldr	r2, [pc, #424]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	4b68      	ldr	r3, [pc, #416]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a67      	ldr	r2, [pc, #412]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d013      	beq.n	800cb58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb30:	f7fd ff4c 	bl	800a9cc <HAL_GetTick>
 800cb34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb36:	e008      	b.n	800cb4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb38:	f7fd ff48 	bl	800a9cc <HAL_GetTick>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	2b64      	cmp	r3, #100	@ 0x64
 800cb44:	d901      	bls.n	800cb4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e200      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb4a:	4b5d      	ldr	r3, [pc, #372]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0f0      	beq.n	800cb38 <HAL_RCC_OscConfig+0xe4>
 800cb56:	e014      	b.n	800cb82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb58:	f7fd ff38 	bl	800a9cc <HAL_GetTick>
 800cb5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb5e:	e008      	b.n	800cb72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb60:	f7fd ff34 	bl	800a9cc <HAL_GetTick>
 800cb64:	4602      	mov	r2, r0
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	2b64      	cmp	r3, #100	@ 0x64
 800cb6c:	d901      	bls.n	800cb72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e1ec      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb72:	4b53      	ldr	r3, [pc, #332]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1f0      	bne.n	800cb60 <HAL_RCC_OscConfig+0x10c>
 800cb7e:	e000      	b.n	800cb82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 0302 	and.w	r3, r3, #2
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d063      	beq.n	800cc56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cb8e:	4b4c      	ldr	r3, [pc, #304]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	f003 030c 	and.w	r3, r3, #12
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00b      	beq.n	800cbb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800cb9a:	4b49      	ldr	r3, [pc, #292]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f003 030c 	and.w	r3, r3, #12
 800cba2:	2b08      	cmp	r3, #8
 800cba4:	d11c      	bne.n	800cbe0 <HAL_RCC_OscConfig+0x18c>
 800cba6:	4b46      	ldr	r3, [pc, #280]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d116      	bne.n	800cbe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbb2:	4b43      	ldr	r3, [pc, #268]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d005      	beq.n	800cbca <HAL_RCC_OscConfig+0x176>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d001      	beq.n	800cbca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e1c0      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbca:	4b3d      	ldr	r3, [pc, #244]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	4939      	ldr	r1, [pc, #228]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbde:	e03a      	b.n	800cc56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d020      	beq.n	800cc2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cbe8:	4b36      	ldr	r3, [pc, #216]	@ (800ccc4 <HAL_RCC_OscConfig+0x270>)
 800cbea:	2201      	movs	r2, #1
 800cbec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbee:	f7fd feed 	bl	800a9cc <HAL_GetTick>
 800cbf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbf4:	e008      	b.n	800cc08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbf6:	f7fd fee9 	bl	800a9cc <HAL_GetTick>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d901      	bls.n	800cc08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e1a1      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc08:	4b2d      	ldr	r3, [pc, #180]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 0302 	and.w	r3, r3, #2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0f0      	beq.n	800cbf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc14:	4b2a      	ldr	r3, [pc, #168]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	4927      	ldr	r1, [pc, #156]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cc24:	4313      	orrs	r3, r2
 800cc26:	600b      	str	r3, [r1, #0]
 800cc28:	e015      	b.n	800cc56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc2a:	4b26      	ldr	r3, [pc, #152]	@ (800ccc4 <HAL_RCC_OscConfig+0x270>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc30:	f7fd fecc 	bl	800a9cc <HAL_GetTick>
 800cc34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc36:	e008      	b.n	800cc4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc38:	f7fd fec8 	bl	800a9cc <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d901      	bls.n	800cc4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e180      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc4a:	4b1d      	ldr	r3, [pc, #116]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1f0      	bne.n	800cc38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 0308 	and.w	r3, r3, #8
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d03a      	beq.n	800ccd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d019      	beq.n	800cc9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc6a:	4b17      	ldr	r3, [pc, #92]	@ (800ccc8 <HAL_RCC_OscConfig+0x274>)
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc70:	f7fd feac 	bl	800a9cc <HAL_GetTick>
 800cc74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc76:	e008      	b.n	800cc8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc78:	f7fd fea8 	bl	800a9cc <HAL_GetTick>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d901      	bls.n	800cc8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e160      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc0 <HAL_RCC_OscConfig+0x26c>)
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8e:	f003 0302 	and.w	r3, r3, #2
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d0f0      	beq.n	800cc78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800cc96:	2001      	movs	r0, #1
 800cc98:	f000 face 	bl	800d238 <RCC_Delay>
 800cc9c:	e01c      	b.n	800ccd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc9e:	4b0a      	ldr	r3, [pc, #40]	@ (800ccc8 <HAL_RCC_OscConfig+0x274>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cca4:	f7fd fe92 	bl	800a9cc <HAL_GetTick>
 800cca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ccaa:	e00f      	b.n	800cccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ccac:	f7fd fe8e 	bl	800a9cc <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d908      	bls.n	800cccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e146      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
 800ccbe:	bf00      	nop
 800ccc0:	40021000 	.word	0x40021000
 800ccc4:	42420000 	.word	0x42420000
 800ccc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cccc:	4b92      	ldr	r3, [pc, #584]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ccce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1e9      	bne.n	800ccac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0304 	and.w	r3, r3, #4
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 80a6 	beq.w	800ce32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cce6:	2300      	movs	r3, #0
 800cce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccea:	4b8b      	ldr	r3, [pc, #556]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10d      	bne.n	800cd12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccf6:	4b88      	ldr	r3, [pc, #544]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	4a87      	ldr	r2, [pc, #540]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ccfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd00:	61d3      	str	r3, [r2, #28]
 800cd02:	4b85      	ldr	r3, [pc, #532]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd0a:	60bb      	str	r3, [r7, #8]
 800cd0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd12:	4b82      	ldr	r3, [pc, #520]	@ (800cf1c <HAL_RCC_OscConfig+0x4c8>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d118      	bne.n	800cd50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd1e:	4b7f      	ldr	r3, [pc, #508]	@ (800cf1c <HAL_RCC_OscConfig+0x4c8>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a7e      	ldr	r2, [pc, #504]	@ (800cf1c <HAL_RCC_OscConfig+0x4c8>)
 800cd24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd2a:	f7fd fe4f 	bl	800a9cc <HAL_GetTick>
 800cd2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd30:	e008      	b.n	800cd44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd32:	f7fd fe4b 	bl	800a9cc <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b64      	cmp	r3, #100	@ 0x64
 800cd3e:	d901      	bls.n	800cd44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e103      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd44:	4b75      	ldr	r3, [pc, #468]	@ (800cf1c <HAL_RCC_OscConfig+0x4c8>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d0f0      	beq.n	800cd32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d106      	bne.n	800cd66 <HAL_RCC_OscConfig+0x312>
 800cd58:	4b6f      	ldr	r3, [pc, #444]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd5a:	6a1b      	ldr	r3, [r3, #32]
 800cd5c:	4a6e      	ldr	r2, [pc, #440]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd5e:	f043 0301 	orr.w	r3, r3, #1
 800cd62:	6213      	str	r3, [r2, #32]
 800cd64:	e02d      	b.n	800cdc2 <HAL_RCC_OscConfig+0x36e>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10c      	bne.n	800cd88 <HAL_RCC_OscConfig+0x334>
 800cd6e:	4b6a      	ldr	r3, [pc, #424]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	4a69      	ldr	r2, [pc, #420]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd74:	f023 0301 	bic.w	r3, r3, #1
 800cd78:	6213      	str	r3, [r2, #32]
 800cd7a:	4b67      	ldr	r3, [pc, #412]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	4a66      	ldr	r2, [pc, #408]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd80:	f023 0304 	bic.w	r3, r3, #4
 800cd84:	6213      	str	r3, [r2, #32]
 800cd86:	e01c      	b.n	800cdc2 <HAL_RCC_OscConfig+0x36e>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	2b05      	cmp	r3, #5
 800cd8e:	d10c      	bne.n	800cdaa <HAL_RCC_OscConfig+0x356>
 800cd90:	4b61      	ldr	r3, [pc, #388]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	4a60      	ldr	r2, [pc, #384]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd96:	f043 0304 	orr.w	r3, r3, #4
 800cd9a:	6213      	str	r3, [r2, #32]
 800cd9c:	4b5e      	ldr	r3, [pc, #376]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	4a5d      	ldr	r2, [pc, #372]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cda2:	f043 0301 	orr.w	r3, r3, #1
 800cda6:	6213      	str	r3, [r2, #32]
 800cda8:	e00b      	b.n	800cdc2 <HAL_RCC_OscConfig+0x36e>
 800cdaa:	4b5b      	ldr	r3, [pc, #364]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	4a5a      	ldr	r2, [pc, #360]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cdb0:	f023 0301 	bic.w	r3, r3, #1
 800cdb4:	6213      	str	r3, [r2, #32]
 800cdb6:	4b58      	ldr	r3, [pc, #352]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	4a57      	ldr	r2, [pc, #348]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cdbc:	f023 0304 	bic.w	r3, r3, #4
 800cdc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d015      	beq.n	800cdf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cdca:	f7fd fdff 	bl	800a9cc <HAL_GetTick>
 800cdce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdd0:	e00a      	b.n	800cde8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdd2:	f7fd fdfb 	bl	800a9cc <HAL_GetTick>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d901      	bls.n	800cde8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e0b1      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cde8:	4b4b      	ldr	r3, [pc, #300]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cdea:	6a1b      	ldr	r3, [r3, #32]
 800cdec:	f003 0302 	and.w	r3, r3, #2
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0ee      	beq.n	800cdd2 <HAL_RCC_OscConfig+0x37e>
 800cdf4:	e014      	b.n	800ce20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cdf6:	f7fd fde9 	bl	800a9cc <HAL_GetTick>
 800cdfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdfc:	e00a      	b.n	800ce14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdfe:	f7fd fde5 	bl	800a9cc <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d901      	bls.n	800ce14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e09b      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce14:	4b40      	ldr	r3, [pc, #256]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce16:	6a1b      	ldr	r3, [r3, #32]
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1ee      	bne.n	800cdfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d105      	bne.n	800ce32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce26:	4b3c      	ldr	r3, [pc, #240]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	4a3b      	ldr	r2, [pc, #236]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 8087 	beq.w	800cf4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ce3c:	4b36      	ldr	r3, [pc, #216]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	f003 030c 	and.w	r3, r3, #12
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d061      	beq.n	800cf0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d146      	bne.n	800cede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce50:	4b33      	ldr	r3, [pc, #204]	@ (800cf20 <HAL_RCC_OscConfig+0x4cc>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce56:	f7fd fdb9 	bl	800a9cc <HAL_GetTick>
 800ce5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ce5c:	e008      	b.n	800ce70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce5e:	f7fd fdb5 	bl	800a9cc <HAL_GetTick>
 800ce62:	4602      	mov	r2, r0
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d901      	bls.n	800ce70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	e06d      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ce70:	4b29      	ldr	r3, [pc, #164]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1f0      	bne.n	800ce5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce84:	d108      	bne.n	800ce98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ce86:	4b24      	ldr	r3, [pc, #144]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	4921      	ldr	r1, [pc, #132]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce98:	4b1f      	ldr	r3, [pc, #124]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a19      	ldr	r1, [r3, #32]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea8:	430b      	orrs	r3, r1
 800ceaa:	491b      	ldr	r1, [pc, #108]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ceb0:	4b1b      	ldr	r3, [pc, #108]	@ (800cf20 <HAL_RCC_OscConfig+0x4cc>)
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ceb6:	f7fd fd89 	bl	800a9cc <HAL_GetTick>
 800ceba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cebc:	e008      	b.n	800ced0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cebe:	f7fd fd85 	bl	800a9cc <HAL_GetTick>
 800cec2:	4602      	mov	r2, r0
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d901      	bls.n	800ced0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800cecc:	2303      	movs	r3, #3
 800cece:	e03d      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ced0:	4b11      	ldr	r3, [pc, #68]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d0f0      	beq.n	800cebe <HAL_RCC_OscConfig+0x46a>
 800cedc:	e035      	b.n	800cf4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cede:	4b10      	ldr	r3, [pc, #64]	@ (800cf20 <HAL_RCC_OscConfig+0x4cc>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cee4:	f7fd fd72 	bl	800a9cc <HAL_GetTick>
 800cee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ceea:	e008      	b.n	800cefe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ceec:	f7fd fd6e 	bl	800a9cc <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d901      	bls.n	800cefe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e026      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cefe:	4b06      	ldr	r3, [pc, #24]	@ (800cf18 <HAL_RCC_OscConfig+0x4c4>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1f0      	bne.n	800ceec <HAL_RCC_OscConfig+0x498>
 800cf0a:	e01e      	b.n	800cf4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d107      	bne.n	800cf24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800cf14:	2301      	movs	r3, #1
 800cf16:	e019      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
 800cf18:	40021000 	.word	0x40021000
 800cf1c:	40007000 	.word	0x40007000
 800cf20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cf24:	4b0b      	ldr	r3, [pc, #44]	@ (800cf54 <HAL_RCC_OscConfig+0x500>)
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d106      	bne.n	800cf46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d001      	beq.n	800cf4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e000      	b.n	800cf4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3718      	adds	r7, #24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	40021000 	.word	0x40021000

0800cf58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e0d0      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf6c:	4b6a      	ldr	r3, [pc, #424]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0307 	and.w	r3, r3, #7
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d910      	bls.n	800cf9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf7a:	4b67      	ldr	r3, [pc, #412]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f023 0207 	bic.w	r2, r3, #7
 800cf82:	4965      	ldr	r1, [pc, #404]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf8a:	4b63      	ldr	r3, [pc, #396]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d001      	beq.n	800cf9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e0b8      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 0302 	and.w	r3, r3, #2
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d020      	beq.n	800cfea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 0304 	and.w	r3, r3, #4
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cfb4:	4b59      	ldr	r3, [pc, #356]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	4a58      	ldr	r2, [pc, #352]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800cfba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cfbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 0308 	and.w	r3, r3, #8
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cfcc:	4b53      	ldr	r3, [pc, #332]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4a52      	ldr	r2, [pc, #328]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800cfd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800cfd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cfd8:	4b50      	ldr	r3, [pc, #320]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	494d      	ldr	r1, [pc, #308]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d040      	beq.n	800d078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d107      	bne.n	800d00e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cffe:	4b47      	ldr	r3, [pc, #284]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d006:	2b00      	cmp	r3, #0
 800d008:	d115      	bne.n	800d036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e07f      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	2b02      	cmp	r3, #2
 800d014:	d107      	bne.n	800d026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d016:	4b41      	ldr	r3, [pc, #260]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d109      	bne.n	800d036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e073      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d026:	4b3d      	ldr	r3, [pc, #244]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e06b      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d036:	4b39      	ldr	r3, [pc, #228]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	f023 0203 	bic.w	r2, r3, #3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	4936      	ldr	r1, [pc, #216]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d044:	4313      	orrs	r3, r2
 800d046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d048:	f7fd fcc0 	bl	800a9cc <HAL_GetTick>
 800d04c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d04e:	e00a      	b.n	800d066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d050:	f7fd fcbc 	bl	800a9cc <HAL_GetTick>
 800d054:	4602      	mov	r2, r0
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d05e:	4293      	cmp	r3, r2
 800d060:	d901      	bls.n	800d066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e053      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d066:	4b2d      	ldr	r3, [pc, #180]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f003 020c 	and.w	r2, r3, #12
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	429a      	cmp	r2, r3
 800d076:	d1eb      	bne.n	800d050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d078:	4b27      	ldr	r3, [pc, #156]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0307 	and.w	r3, r3, #7
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d210      	bcs.n	800d0a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d086:	4b24      	ldr	r3, [pc, #144]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f023 0207 	bic.w	r2, r3, #7
 800d08e:	4922      	ldr	r1, [pc, #136]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	4313      	orrs	r3, r2
 800d094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d096:	4b20      	ldr	r3, [pc, #128]	@ (800d118 <HAL_RCC_ClockConfig+0x1c0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0307 	and.w	r3, r3, #7
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d001      	beq.n	800d0a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e032      	b.n	800d10e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 0304 	and.w	r3, r3, #4
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d008      	beq.n	800d0c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d0b4:	4b19      	ldr	r3, [pc, #100]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	4916      	ldr	r1, [pc, #88]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 0308 	and.w	r3, r3, #8
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d009      	beq.n	800d0e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d0d2:	4b12      	ldr	r3, [pc, #72]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	691b      	ldr	r3, [r3, #16]
 800d0de:	00db      	lsls	r3, r3, #3
 800d0e0:	490e      	ldr	r1, [pc, #56]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d0e6:	f000 f821 	bl	800d12c <HAL_RCC_GetSysClockFreq>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	4b0b      	ldr	r3, [pc, #44]	@ (800d11c <HAL_RCC_ClockConfig+0x1c4>)
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	091b      	lsrs	r3, r3, #4
 800d0f2:	f003 030f 	and.w	r3, r3, #15
 800d0f6:	490a      	ldr	r1, [pc, #40]	@ (800d120 <HAL_RCC_ClockConfig+0x1c8>)
 800d0f8:	5ccb      	ldrb	r3, [r1, r3]
 800d0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d0fe:	4a09      	ldr	r2, [pc, #36]	@ (800d124 <HAL_RCC_ClockConfig+0x1cc>)
 800d100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d102:	4b09      	ldr	r3, [pc, #36]	@ (800d128 <HAL_RCC_ClockConfig+0x1d0>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f7fd fc1e 	bl	800a948 <HAL_InitTick>

  return HAL_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	40022000 	.word	0x40022000
 800d11c:	40021000 	.word	0x40021000
 800d120:	0800f444 	.word	0x0800f444
 800d124:	20000f74 	.word	0x20000f74
 800d128:	20000f78 	.word	0x20000f78

0800d12c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	60fb      	str	r3, [r7, #12]
 800d136:	2300      	movs	r3, #0
 800d138:	60bb      	str	r3, [r7, #8]
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]
 800d13e:	2300      	movs	r3, #0
 800d140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800d146:	4b1e      	ldr	r3, [pc, #120]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f003 030c 	and.w	r3, r3, #12
 800d152:	2b04      	cmp	r3, #4
 800d154:	d002      	beq.n	800d15c <HAL_RCC_GetSysClockFreq+0x30>
 800d156:	2b08      	cmp	r3, #8
 800d158:	d003      	beq.n	800d162 <HAL_RCC_GetSysClockFreq+0x36>
 800d15a:	e027      	b.n	800d1ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d15c:	4b19      	ldr	r3, [pc, #100]	@ (800d1c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800d15e:	613b      	str	r3, [r7, #16]
      break;
 800d160:	e027      	b.n	800d1b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	0c9b      	lsrs	r3, r3, #18
 800d166:	f003 030f 	and.w	r3, r3, #15
 800d16a:	4a17      	ldr	r2, [pc, #92]	@ (800d1c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800d16c:	5cd3      	ldrb	r3, [r2, r3]
 800d16e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d010      	beq.n	800d19c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d17a:	4b11      	ldr	r3, [pc, #68]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	0c5b      	lsrs	r3, r3, #17
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	4a11      	ldr	r2, [pc, #68]	@ (800d1cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800d186:	5cd3      	ldrb	r3, [r2, r3]
 800d188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a0d      	ldr	r2, [pc, #52]	@ (800d1c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800d18e:	fb03 f202 	mul.w	r2, r3, r2
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	fbb2 f3f3 	udiv	r3, r2, r3
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	e004      	b.n	800d1a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a0c      	ldr	r2, [pc, #48]	@ (800d1d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d1a0:	fb02 f303 	mul.w	r3, r2, r3
 800d1a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	613b      	str	r3, [r7, #16]
      break;
 800d1aa:	e002      	b.n	800d1b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d1ac:	4b05      	ldr	r3, [pc, #20]	@ (800d1c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800d1ae:	613b      	str	r3, [r7, #16]
      break;
 800d1b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d1b2:	693b      	ldr	r3, [r7, #16]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	371c      	adds	r7, #28
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bc80      	pop	{r7}
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	40021000 	.word	0x40021000
 800d1c4:	007a1200 	.word	0x007a1200
 800d1c8:	0800f45c 	.word	0x0800f45c
 800d1cc:	0800f46c 	.word	0x0800f46c
 800d1d0:	003d0900 	.word	0x003d0900

0800d1d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1d8:	4b02      	ldr	r3, [pc, #8]	@ (800d1e4 <HAL_RCC_GetHCLKFreq+0x10>)
 800d1da:	681b      	ldr	r3, [r3, #0]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bc80      	pop	{r7}
 800d1e2:	4770      	bx	lr
 800d1e4:	20000f74 	.word	0x20000f74

0800d1e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d1ec:	f7ff fff2 	bl	800d1d4 <HAL_RCC_GetHCLKFreq>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	4b05      	ldr	r3, [pc, #20]	@ (800d208 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	f003 0307 	and.w	r3, r3, #7
 800d1fc:	4903      	ldr	r1, [pc, #12]	@ (800d20c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d1fe:	5ccb      	ldrb	r3, [r1, r3]
 800d200:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d204:	4618      	mov	r0, r3
 800d206:	bd80      	pop	{r7, pc}
 800d208:	40021000 	.word	0x40021000
 800d20c:	0800f454 	.word	0x0800f454

0800d210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d214:	f7ff ffde 	bl	800d1d4 <HAL_RCC_GetHCLKFreq>
 800d218:	4602      	mov	r2, r0
 800d21a:	4b05      	ldr	r3, [pc, #20]	@ (800d230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	0adb      	lsrs	r3, r3, #11
 800d220:	f003 0307 	and.w	r3, r3, #7
 800d224:	4903      	ldr	r1, [pc, #12]	@ (800d234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d226:	5ccb      	ldrb	r3, [r1, r3]
 800d228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	40021000 	.word	0x40021000
 800d234:	0800f454 	.word	0x0800f454

0800d238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800d240:	4b0a      	ldr	r3, [pc, #40]	@ (800d26c <RCC_Delay+0x34>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a0a      	ldr	r2, [pc, #40]	@ (800d270 <RCC_Delay+0x38>)
 800d246:	fba2 2303 	umull	r2, r3, r2, r3
 800d24a:	0a5b      	lsrs	r3, r3, #9
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	fb02 f303 	mul.w	r3, r2, r3
 800d252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800d254:	bf00      	nop
  }
  while (Delay --);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	1e5a      	subs	r2, r3, #1
 800d25a:	60fa      	str	r2, [r7, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1f9      	bne.n	800d254 <RCC_Delay+0x1c>
}
 800d260:	bf00      	nop
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	bc80      	pop	{r7}
 800d26a:	4770      	bx	lr
 800d26c:	20000f74 	.word	0x20000f74
 800d270:	10624dd3 	.word	0x10624dd3

0800d274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e041      	b.n	800d30a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7fd fa22 	bl	800a6e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	f000 fa82 	bl	800d7bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b01      	cmp	r3, #1
 800d326:	d001      	beq.n	800d32c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	e044      	b.n	800d3b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2202      	movs	r2, #2
 800d330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	68da      	ldr	r2, [r3, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f042 0201 	orr.w	r2, r2, #1
 800d342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a1d      	ldr	r2, [pc, #116]	@ (800d3c0 <HAL_TIM_Base_Start_IT+0xac>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d018      	beq.n	800d380 <HAL_TIM_Base_Start_IT+0x6c>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a1c      	ldr	r2, [pc, #112]	@ (800d3c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d013      	beq.n	800d380 <HAL_TIM_Base_Start_IT+0x6c>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d360:	d00e      	beq.n	800d380 <HAL_TIM_Base_Start_IT+0x6c>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a18      	ldr	r2, [pc, #96]	@ (800d3c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d009      	beq.n	800d380 <HAL_TIM_Base_Start_IT+0x6c>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a16      	ldr	r2, [pc, #88]	@ (800d3cc <HAL_TIM_Base_Start_IT+0xb8>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d004      	beq.n	800d380 <HAL_TIM_Base_Start_IT+0x6c>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a15      	ldr	r2, [pc, #84]	@ (800d3d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d111      	bne.n	800d3a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	f003 0307 	and.w	r3, r3, #7
 800d38a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b06      	cmp	r3, #6
 800d390:	d010      	beq.n	800d3b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0201 	orr.w	r2, r2, #1
 800d3a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3a2:	e007      	b.n	800d3b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0201 	orr.w	r2, r2, #1
 800d3b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bc80      	pop	{r7}
 800d3be:	4770      	bx	lr
 800d3c0:	40012c00 	.word	0x40012c00
 800d3c4:	40013400 	.word	0x40013400
 800d3c8:	40000400 	.word	0x40000400
 800d3cc:	40000800 	.word	0x40000800
 800d3d0:	40000c00 	.word	0x40000c00

0800d3d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	f003 0302 	and.w	r3, r3, #2
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d122      	bne.n	800d430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	f003 0302 	and.w	r3, r3, #2
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d11b      	bne.n	800d430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f06f 0202 	mvn.w	r2, #2
 800d400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f003 0303 	and.w	r3, r3, #3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d003      	beq.n	800d41e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f9b4 	bl	800d784 <HAL_TIM_IC_CaptureCallback>
 800d41c:	e005      	b.n	800d42a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f9a7 	bl	800d772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f9b6 	bl	800d796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	f003 0304 	and.w	r3, r3, #4
 800d43a:	2b04      	cmp	r3, #4
 800d43c:	d122      	bne.n	800d484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	f003 0304 	and.w	r3, r3, #4
 800d448:	2b04      	cmp	r3, #4
 800d44a:	d11b      	bne.n	800d484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f06f 0204 	mvn.w	r2, #4
 800d454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2202      	movs	r2, #2
 800d45a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f98a 	bl	800d784 <HAL_TIM_IC_CaptureCallback>
 800d470:	e005      	b.n	800d47e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f97d 	bl	800d772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 f98c 	bl	800d796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	f003 0308 	and.w	r3, r3, #8
 800d48e:	2b08      	cmp	r3, #8
 800d490:	d122      	bne.n	800d4d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	f003 0308 	and.w	r3, r3, #8
 800d49c:	2b08      	cmp	r3, #8
 800d49e:	d11b      	bne.n	800d4d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f06f 0208 	mvn.w	r2, #8
 800d4a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	f003 0303 	and.w	r3, r3, #3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f960 	bl	800d784 <HAL_TIM_IC_CaptureCallback>
 800d4c4:	e005      	b.n	800d4d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f953 	bl	800d772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f962 	bl	800d796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	f003 0310 	and.w	r3, r3, #16
 800d4e2:	2b10      	cmp	r3, #16
 800d4e4:	d122      	bne.n	800d52c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	f003 0310 	and.w	r3, r3, #16
 800d4f0:	2b10      	cmp	r3, #16
 800d4f2:	d11b      	bne.n	800d52c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f06f 0210 	mvn.w	r2, #16
 800d4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2208      	movs	r2, #8
 800d502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f936 	bl	800d784 <HAL_TIM_IC_CaptureCallback>
 800d518:	e005      	b.n	800d526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f929 	bl	800d772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f938 	bl	800d796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b01      	cmp	r3, #1
 800d538:	d10e      	bne.n	800d558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b01      	cmp	r3, #1
 800d546:	d107      	bne.n	800d558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f06f 0201 	mvn.w	r2, #1
 800d550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7fc fd5e 	bl	800a014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d562:	2b80      	cmp	r3, #128	@ 0x80
 800d564:	d10e      	bne.n	800d584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d570:	2b80      	cmp	r3, #128	@ 0x80
 800d572:	d107      	bne.n	800d584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 faa1 	bl	800dac6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	691b      	ldr	r3, [r3, #16]
 800d58a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d58e:	2b40      	cmp	r3, #64	@ 0x40
 800d590:	d10e      	bne.n	800d5b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d59c:	2b40      	cmp	r3, #64	@ 0x40
 800d59e:	d107      	bne.n	800d5b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f8fc 	bl	800d7a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	f003 0320 	and.w	r3, r3, #32
 800d5ba:	2b20      	cmp	r3, #32
 800d5bc:	d10e      	bne.n	800d5dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	f003 0320 	and.w	r3, r3, #32
 800d5c8:	2b20      	cmp	r3, #32
 800d5ca:	d107      	bne.n	800d5dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f06f 0220 	mvn.w	r2, #32
 800d5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fa6c 	bl	800dab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5dc:	bf00      	nop
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d101      	bne.n	800d600 <HAL_TIM_ConfigClockSource+0x1c>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e0b4      	b.n	800d76a <HAL_TIM_ConfigClockSource+0x186>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d638:	d03e      	beq.n	800d6b8 <HAL_TIM_ConfigClockSource+0xd4>
 800d63a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d63e:	f200 8087 	bhi.w	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d646:	f000 8086 	beq.w	800d756 <HAL_TIM_ConfigClockSource+0x172>
 800d64a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d64e:	d87f      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d650:	2b70      	cmp	r3, #112	@ 0x70
 800d652:	d01a      	beq.n	800d68a <HAL_TIM_ConfigClockSource+0xa6>
 800d654:	2b70      	cmp	r3, #112	@ 0x70
 800d656:	d87b      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d658:	2b60      	cmp	r3, #96	@ 0x60
 800d65a:	d050      	beq.n	800d6fe <HAL_TIM_ConfigClockSource+0x11a>
 800d65c:	2b60      	cmp	r3, #96	@ 0x60
 800d65e:	d877      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d660:	2b50      	cmp	r3, #80	@ 0x50
 800d662:	d03c      	beq.n	800d6de <HAL_TIM_ConfigClockSource+0xfa>
 800d664:	2b50      	cmp	r3, #80	@ 0x50
 800d666:	d873      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d668:	2b40      	cmp	r3, #64	@ 0x40
 800d66a:	d058      	beq.n	800d71e <HAL_TIM_ConfigClockSource+0x13a>
 800d66c:	2b40      	cmp	r3, #64	@ 0x40
 800d66e:	d86f      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d670:	2b30      	cmp	r3, #48	@ 0x30
 800d672:	d064      	beq.n	800d73e <HAL_TIM_ConfigClockSource+0x15a>
 800d674:	2b30      	cmp	r3, #48	@ 0x30
 800d676:	d86b      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d678:	2b20      	cmp	r3, #32
 800d67a:	d060      	beq.n	800d73e <HAL_TIM_ConfigClockSource+0x15a>
 800d67c:	2b20      	cmp	r3, #32
 800d67e:	d867      	bhi.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
 800d680:	2b00      	cmp	r3, #0
 800d682:	d05c      	beq.n	800d73e <HAL_TIM_ConfigClockSource+0x15a>
 800d684:	2b10      	cmp	r3, #16
 800d686:	d05a      	beq.n	800d73e <HAL_TIM_ConfigClockSource+0x15a>
 800d688:	e062      	b.n	800d750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d69a:	f000 f980 	bl	800d99e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d6ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	609a      	str	r2, [r3, #8]
      break;
 800d6b6:	e04f      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6c8:	f000 f969 	bl	800d99e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	689a      	ldr	r2, [r3, #8]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d6da:	609a      	str	r2, [r3, #8]
      break;
 800d6dc:	e03c      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	f000 f8e0 	bl	800d8b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2150      	movs	r1, #80	@ 0x50
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f000 f937 	bl	800d96a <TIM_ITRx_SetConfig>
      break;
 800d6fc:	e02c      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d70a:	461a      	mov	r2, r3
 800d70c:	f000 f8fe 	bl	800d90c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2160      	movs	r1, #96	@ 0x60
 800d716:	4618      	mov	r0, r3
 800d718:	f000 f927 	bl	800d96a <TIM_ITRx_SetConfig>
      break;
 800d71c:	e01c      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d72a:	461a      	mov	r2, r3
 800d72c:	f000 f8c0 	bl	800d8b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2140      	movs	r1, #64	@ 0x40
 800d736:	4618      	mov	r0, r3
 800d738:	f000 f917 	bl	800d96a <TIM_ITRx_SetConfig>
      break;
 800d73c:	e00c      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4619      	mov	r1, r3
 800d748:	4610      	mov	r0, r2
 800d74a:	f000 f90e 	bl	800d96a <TIM_ITRx_SetConfig>
      break;
 800d74e:	e003      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	73fb      	strb	r3, [r7, #15]
      break;
 800d754:	e000      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d768:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d772:	b480      	push	{r7}
 800d774:	b083      	sub	sp, #12
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d77a:	bf00      	nop
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	bc80      	pop	{r7}
 800d782:	4770      	bx	lr

0800d784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	bc80      	pop	{r7}
 800d794:	4770      	bx	lr

0800d796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d796:	b480      	push	{r7}
 800d798:	b083      	sub	sp, #12
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d79e:	bf00      	nop
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bc80      	pop	{r7}
 800d7a6:	4770      	bx	lr

0800d7a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bc80      	pop	{r7}
 800d7b8:	4770      	bx	lr
	...

0800d7bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a33      	ldr	r2, [pc, #204]	@ (800d89c <TIM_Base_SetConfig+0xe0>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d013      	beq.n	800d7fc <TIM_Base_SetConfig+0x40>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a32      	ldr	r2, [pc, #200]	@ (800d8a0 <TIM_Base_SetConfig+0xe4>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d00f      	beq.n	800d7fc <TIM_Base_SetConfig+0x40>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7e2:	d00b      	beq.n	800d7fc <TIM_Base_SetConfig+0x40>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a2f      	ldr	r2, [pc, #188]	@ (800d8a4 <TIM_Base_SetConfig+0xe8>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d007      	beq.n	800d7fc <TIM_Base_SetConfig+0x40>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a2e      	ldr	r2, [pc, #184]	@ (800d8a8 <TIM_Base_SetConfig+0xec>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d003      	beq.n	800d7fc <TIM_Base_SetConfig+0x40>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a2d      	ldr	r2, [pc, #180]	@ (800d8ac <TIM_Base_SetConfig+0xf0>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d108      	bne.n	800d80e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a22      	ldr	r2, [pc, #136]	@ (800d89c <TIM_Base_SetConfig+0xe0>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d013      	beq.n	800d83e <TIM_Base_SetConfig+0x82>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a21      	ldr	r2, [pc, #132]	@ (800d8a0 <TIM_Base_SetConfig+0xe4>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d00f      	beq.n	800d83e <TIM_Base_SetConfig+0x82>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d824:	d00b      	beq.n	800d83e <TIM_Base_SetConfig+0x82>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a1e      	ldr	r2, [pc, #120]	@ (800d8a4 <TIM_Base_SetConfig+0xe8>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d007      	beq.n	800d83e <TIM_Base_SetConfig+0x82>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a1d      	ldr	r2, [pc, #116]	@ (800d8a8 <TIM_Base_SetConfig+0xec>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d003      	beq.n	800d83e <TIM_Base_SetConfig+0x82>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a1c      	ldr	r2, [pc, #112]	@ (800d8ac <TIM_Base_SetConfig+0xf0>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d108      	bne.n	800d850 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	689a      	ldr	r2, [r3, #8]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a09      	ldr	r2, [pc, #36]	@ (800d89c <TIM_Base_SetConfig+0xe0>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d003      	beq.n	800d884 <TIM_Base_SetConfig+0xc8>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a08      	ldr	r2, [pc, #32]	@ (800d8a0 <TIM_Base_SetConfig+0xe4>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d103      	bne.n	800d88c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	691a      	ldr	r2, [r3, #16]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	615a      	str	r2, [r3, #20]
}
 800d892:	bf00      	nop
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	bc80      	pop	{r7}
 800d89a:	4770      	bx	lr
 800d89c:	40012c00 	.word	0x40012c00
 800d8a0:	40013400 	.word	0x40013400
 800d8a4:	40000400 	.word	0x40000400
 800d8a8:	40000800 	.word	0x40000800
 800d8ac:	40000c00 	.word	0x40000c00

0800d8b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	f023 0201 	bic.w	r2, r3, #1
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d8da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	011b      	lsls	r3, r3, #4
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f023 030a 	bic.w	r3, r3, #10
 800d8ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	621a      	str	r2, [r3, #32]
}
 800d902:	bf00      	nop
 800d904:	371c      	adds	r7, #28
 800d906:	46bd      	mov	sp, r7
 800d908:	bc80      	pop	{r7}
 800d90a:	4770      	bx	lr

0800d90c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b087      	sub	sp, #28
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6a1b      	ldr	r3, [r3, #32]
 800d922:	f023 0210 	bic.w	r2, r3, #16
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	031b      	lsls	r3, r3, #12
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	4313      	orrs	r3, r2
 800d940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d948:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	011b      	lsls	r3, r3, #4
 800d94e:	697a      	ldr	r2, [r7, #20]
 800d950:	4313      	orrs	r3, r2
 800d952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	693a      	ldr	r2, [r7, #16]
 800d958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	621a      	str	r2, [r3, #32]
}
 800d960:	bf00      	nop
 800d962:	371c      	adds	r7, #28
 800d964:	46bd      	mov	sp, r7
 800d966:	bc80      	pop	{r7}
 800d968:	4770      	bx	lr

0800d96a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d96a:	b480      	push	{r7}
 800d96c:	b085      	sub	sp, #20
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
 800d972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4313      	orrs	r3, r2
 800d988:	f043 0307 	orr.w	r3, r3, #7
 800d98c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	609a      	str	r2, [r3, #8]
}
 800d994:	bf00      	nop
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	bc80      	pop	{r7}
 800d99c:	4770      	bx	lr

0800d99e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b087      	sub	sp, #28
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	60b9      	str	r1, [r7, #8]
 800d9a8:	607a      	str	r2, [r7, #4]
 800d9aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d9b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	021a      	lsls	r2, r3, #8
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	431a      	orrs	r2, r3
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	609a      	str	r2, [r3, #8]
}
 800d9d2:	bf00      	nop
 800d9d4:	371c      	adds	r7, #28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bc80      	pop	{r7}
 800d9da:	4770      	bx	lr

0800d9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d101      	bne.n	800d9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e050      	b.n	800da96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2202      	movs	r2, #2
 800da00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a1b      	ldr	r2, [pc, #108]	@ (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d018      	beq.n	800da6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a19      	ldr	r2, [pc, #100]	@ (800daa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d013      	beq.n	800da6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da4a:	d00e      	beq.n	800da6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a15      	ldr	r2, [pc, #84]	@ (800daa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d009      	beq.n	800da6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a14      	ldr	r2, [pc, #80]	@ (800daac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d004      	beq.n	800da6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a12      	ldr	r2, [pc, #72]	@ (800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d10c      	bne.n	800da84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	4313      	orrs	r3, r2
 800da7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bc80      	pop	{r7}
 800da9e:	4770      	bx	lr
 800daa0:	40012c00 	.word	0x40012c00
 800daa4:	40013400 	.word	0x40013400
 800daa8:	40000400 	.word	0x40000400
 800daac:	40000800 	.word	0x40000800
 800dab0:	40000c00 	.word	0x40000c00

0800dab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bc80      	pop	{r7}
 800dac4:	4770      	bx	lr

0800dac6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dace:	bf00      	nop
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bc80      	pop	{r7}
 800dad6:	4770      	bx	lr

0800dad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d101      	bne.n	800daea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dae6:	2301      	movs	r3, #1
 800dae8:	e042      	b.n	800db70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f7fc fe16 	bl	800a730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2224      	movs	r2, #36	@ 0x24
 800db08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68da      	ldr	r2, [r3, #12]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800db1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fcb5 	bl	800e48c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	691a      	ldr	r2, [r3, #16]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800db30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	695a      	ldr	r2, [r3, #20]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800db40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800db50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2220      	movs	r2, #32
 800db5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2220      	movs	r2, #32
 800db64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	4613      	mov	r3, r2
 800db84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	2b20      	cmp	r3, #32
 800db90:	d121      	bne.n	800dbd6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <HAL_UART_Transmit_IT+0x26>
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	e01a      	b.n	800dbd8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	88fa      	ldrh	r2, [r7, #6]
 800dbac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	88fa      	ldrh	r2, [r7, #6]
 800dbb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2221      	movs	r2, #33	@ 0x21
 800dbbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68da      	ldr	r2, [r3, #12]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dbd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	e000      	b.n	800dbd8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800dbd6:	2302      	movs	r3, #2
  }
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bc80      	pop	{r7}
 800dbe0:	4770      	bx	lr
	...

0800dbe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b0ba      	sub	sp, #232	@ 0xe8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800dc10:	2300      	movs	r3, #0
 800dc12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc1a:	f003 030f 	and.w	r3, r3, #15
 800dc1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800dc22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10f      	bne.n	800dc4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dc2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d009      	beq.n	800dc4a <HAL_UART_IRQHandler+0x66>
 800dc36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc3a:	f003 0320 	and.w	r3, r3, #32
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fb63 	bl	800e30e <UART_Receive_IT>
      return;
 800dc48:	e25b      	b.n	800e102 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dc4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 80de 	beq.w	800de10 <HAL_UART_IRQHandler+0x22c>
 800dc54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d106      	bne.n	800dc6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dc60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f000 80d1 	beq.w	800de10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc72:	f003 0301 	and.w	r3, r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00b      	beq.n	800dc92 <HAL_UART_IRQHandler+0xae>
 800dc7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d005      	beq.n	800dc92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc8a:	f043 0201 	orr.w	r2, r3, #1
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc96:	f003 0304 	and.w	r3, r3, #4
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00b      	beq.n	800dcb6 <HAL_UART_IRQHandler+0xd2>
 800dc9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d005      	beq.n	800dcb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcae:	f043 0202 	orr.w	r2, r3, #2
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dcb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcba:	f003 0302 	and.w	r3, r3, #2
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00b      	beq.n	800dcda <HAL_UART_IRQHandler+0xf6>
 800dcc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d005      	beq.n	800dcda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcd2:	f043 0204 	orr.w	r2, r3, #4
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dcda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcde:	f003 0308 	and.w	r3, r3, #8
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d011      	beq.n	800dd0a <HAL_UART_IRQHandler+0x126>
 800dce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcea:	f003 0320 	and.w	r3, r3, #32
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d105      	bne.n	800dcfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dcf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d005      	beq.n	800dd0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd02:	f043 0208 	orr.w	r2, r3, #8
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f000 81f2 	beq.w	800e0f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd18:	f003 0320 	and.w	r3, r3, #32
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d008      	beq.n	800dd32 <HAL_UART_IRQHandler+0x14e>
 800dd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd24:	f003 0320 	and.w	r3, r3, #32
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 faee 	bl	800e30e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	bf14      	ite	ne
 800dd40:	2301      	movne	r3, #1
 800dd42:	2300      	moveq	r3, #0
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd4e:	f003 0308 	and.w	r3, r3, #8
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d103      	bne.n	800dd5e <HAL_UART_IRQHandler+0x17a>
 800dd56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d04f      	beq.n	800ddfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f9f8 	bl	800e154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d041      	beq.n	800ddf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3314      	adds	r3, #20
 800dd78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dd80:	e853 3f00 	ldrex	r3, [r3]
 800dd84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dd88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	3314      	adds	r3, #20
 800dd9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dd9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dda2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ddaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ddae:	e841 2300 	strex	r3, r2, [r1]
 800ddb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ddb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1d9      	bne.n	800dd72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d013      	beq.n	800ddee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddca:	4a7e      	ldr	r2, [pc, #504]	@ (800dfc4 <HAL_UART_IRQHandler+0x3e0>)
 800ddcc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fd f86c 	bl	800aeb0 <HAL_DMA_Abort_IT>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d016      	beq.n	800de0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dde2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800dde8:	4610      	mov	r0, r2
 800ddea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddec:	e00e      	b.n	800de0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f99c 	bl	800e12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf4:	e00a      	b.n	800de0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f998 	bl	800e12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddfc:	e006      	b.n	800de0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f994 	bl	800e12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2200      	movs	r2, #0
 800de08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800de0a:	e175      	b.n	800e0f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de0c:	bf00      	nop
    return;
 800de0e:	e173      	b.n	800e0f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de14:	2b01      	cmp	r3, #1
 800de16:	f040 814f 	bne.w	800e0b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800de1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de1e:	f003 0310 	and.w	r3, r3, #16
 800de22:	2b00      	cmp	r3, #0
 800de24:	f000 8148 	beq.w	800e0b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800de28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de2c:	f003 0310 	and.w	r3, r3, #16
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 8141 	beq.w	800e0b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60bb      	str	r3, [r7, #8]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	60bb      	str	r3, [r7, #8]
 800de4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	695b      	ldr	r3, [r3, #20]
 800de52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 80b6 	beq.w	800dfc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800de68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f000 8145 	beq.w	800e0fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800de76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de7a:	429a      	cmp	r2, r3
 800de7c:	f080 813e 	bcs.w	800e0fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800de86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	2b20      	cmp	r3, #32
 800de90:	f000 8088 	beq.w	800dfa4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	330c      	adds	r3, #12
 800de9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dea2:	e853 3f00 	ldrex	r3, [r3]
 800dea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800deaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800deae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800deb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	330c      	adds	r3, #12
 800debc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dec0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dec4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800decc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ded0:	e841 2300 	strex	r3, r2, [r1]
 800ded4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ded8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1d9      	bne.n	800de94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3314      	adds	r3, #20
 800dee6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800deea:	e853 3f00 	ldrex	r3, [r3]
 800deee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800def0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800def2:	f023 0301 	bic.w	r3, r3, #1
 800def6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3314      	adds	r3, #20
 800df00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800df04:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800df08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800df0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800df10:	e841 2300 	strex	r3, r2, [r1]
 800df14:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800df16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1e1      	bne.n	800dee0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3314      	adds	r3, #20
 800df22:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df26:	e853 3f00 	ldrex	r3, [r3]
 800df2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800df2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3314      	adds	r3, #20
 800df3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800df40:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800df42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800df46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800df48:	e841 2300 	strex	r3, r2, [r1]
 800df4c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800df4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1e3      	bne.n	800df1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2220      	movs	r2, #32
 800df58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	330c      	adds	r3, #12
 800df68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df6c:	e853 3f00 	ldrex	r3, [r3]
 800df70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df74:	f023 0310 	bic.w	r3, r3, #16
 800df78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	330c      	adds	r3, #12
 800df82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800df86:	65ba      	str	r2, [r7, #88]	@ 0x58
 800df88:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df8e:	e841 2300 	strex	r3, r2, [r1]
 800df92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800df94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1e3      	bne.n	800df62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fc ff4b 	bl	800ae3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2202      	movs	r2, #2
 800dfa8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f8bf 	bl	800e13e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dfc0:	e09c      	b.n	800e0fc <HAL_UART_IRQHandler+0x518>
 800dfc2:	bf00      	nop
 800dfc4:	0800e219 	.word	0x0800e219
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 808e 	beq.w	800e100 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800dfe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f000 8089 	beq.w	800e100 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	330c      	adds	r3, #12
 800dff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff8:	e853 3f00 	ldrex	r3, [r3]
 800dffc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	330c      	adds	r3, #12
 800e00e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e012:	647a      	str	r2, [r7, #68]	@ 0x44
 800e014:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e016:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e01a:	e841 2300 	strex	r3, r2, [r1]
 800e01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1e3      	bne.n	800dfee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	3314      	adds	r3, #20
 800e02c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e030:	e853 3f00 	ldrex	r3, [r3]
 800e034:	623b      	str	r3, [r7, #32]
   return(result);
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	f023 0301 	bic.w	r3, r3, #1
 800e03c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3314      	adds	r3, #20
 800e046:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e04a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e052:	e841 2300 	strex	r3, r2, [r1]
 800e056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1e3      	bne.n	800e026 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2220      	movs	r2, #32
 800e062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	330c      	adds	r3, #12
 800e072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	e853 3f00 	ldrex	r3, [r3]
 800e07a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f023 0310 	bic.w	r3, r3, #16
 800e082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	330c      	adds	r3, #12
 800e08c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e090:	61fa      	str	r2, [r7, #28]
 800e092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e094:	69b9      	ldr	r1, [r7, #24]
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	e841 2300 	strex	r3, r2, [r1]
 800e09c:	617b      	str	r3, [r7, #20]
   return(result);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e3      	bne.n	800e06c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 f844 	bl	800e13e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e0b6:	e023      	b.n	800e100 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d009      	beq.n	800e0d8 <HAL_UART_IRQHandler+0x4f4>
 800e0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d003      	beq.n	800e0d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 f8b5 	bl	800e240 <UART_Transmit_IT>
    return;
 800e0d6:	e014      	b.n	800e102 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00e      	beq.n	800e102 <HAL_UART_IRQHandler+0x51e>
 800e0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d008      	beq.n	800e102 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f8f4 	bl	800e2de <UART_EndTransmit_IT>
    return;
 800e0f6:	e004      	b.n	800e102 <HAL_UART_IRQHandler+0x51e>
    return;
 800e0f8:	bf00      	nop
 800e0fa:	e002      	b.n	800e102 <HAL_UART_IRQHandler+0x51e>
      return;
 800e0fc:	bf00      	nop
 800e0fe:	e000      	b.n	800e102 <HAL_UART_IRQHandler+0x51e>
      return;
 800e100:	bf00      	nop
  }
}
 800e102:	37e8      	adds	r7, #232	@ 0xe8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e110:	bf00      	nop
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	bc80      	pop	{r7}
 800e118:	4770      	bx	lr

0800e11a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e11a:	b480      	push	{r7}
 800e11c:	b083      	sub	sp, #12
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e122:	bf00      	nop
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	bc80      	pop	{r7}
 800e12a:	4770      	bx	lr

0800e12c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	bc80      	pop	{r7}
 800e13c:	4770      	bx	lr

0800e13e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e13e:	b480      	push	{r7}
 800e140:	b083      	sub	sp, #12
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	460b      	mov	r3, r1
 800e148:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e14a:	bf00      	nop
 800e14c:	370c      	adds	r7, #12
 800e14e:	46bd      	mov	sp, r7
 800e150:	bc80      	pop	{r7}
 800e152:	4770      	bx	lr

0800e154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e154:	b480      	push	{r7}
 800e156:	b095      	sub	sp, #84	@ 0x54
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	330c      	adds	r3, #12
 800e162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e166:	e853 3f00 	ldrex	r3, [r3]
 800e16a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	330c      	adds	r3, #12
 800e17a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e17c:	643a      	str	r2, [r7, #64]	@ 0x40
 800e17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e184:	e841 2300 	strex	r3, r2, [r1]
 800e188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1e5      	bne.n	800e15c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3314      	adds	r3, #20
 800e196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	e853 3f00 	ldrex	r3, [r3]
 800e19e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	f023 0301 	bic.w	r3, r3, #1
 800e1a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3314      	adds	r3, #20
 800e1ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1b8:	e841 2300 	strex	r3, r2, [r1]
 800e1bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1e5      	bne.n	800e190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d119      	bne.n	800e200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	330c      	adds	r3, #12
 800e1d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	e853 3f00 	ldrex	r3, [r3]
 800e1da:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	f023 0310 	bic.w	r3, r3, #16
 800e1e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	330c      	adds	r3, #12
 800e1ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1ec:	61ba      	str	r2, [r7, #24]
 800e1ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	6979      	ldr	r1, [r7, #20]
 800e1f2:	69ba      	ldr	r2, [r7, #24]
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	613b      	str	r3, [r7, #16]
   return(result);
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e5      	bne.n	800e1cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2220      	movs	r2, #32
 800e204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e20e:	bf00      	nop
 800e210:	3754      	adds	r7, #84	@ 0x54
 800e212:	46bd      	mov	sp, r7
 800e214:	bc80      	pop	{r7}
 800e216:	4770      	bx	lr

0800e218 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e224:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff ff7a 	bl	800e12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e238:	bf00      	nop
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b21      	cmp	r3, #33	@ 0x21
 800e252:	d13e      	bne.n	800e2d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e25c:	d114      	bne.n	800e288 <UART_Transmit_IT+0x48>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d110      	bne.n	800e288 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a1b      	ldr	r3, [r3, #32]
 800e26a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	461a      	mov	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e27a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6a1b      	ldr	r3, [r3, #32]
 800e280:	1c9a      	adds	r2, r3, #2
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	621a      	str	r2, [r3, #32]
 800e286:	e008      	b.n	800e29a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a1b      	ldr	r3, [r3, #32]
 800e28c:	1c59      	adds	r1, r3, #1
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	6211      	str	r1, [r2, #32]
 800e292:	781a      	ldrb	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10f      	bne.n	800e2ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68da      	ldr	r2, [r3, #12]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e2bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68da      	ldr	r2, [r3, #12]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e2cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e000      	b.n	800e2d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e2d2:	2302      	movs	r3, #2
  }
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bc80      	pop	{r7}
 800e2dc:	4770      	bx	lr

0800e2de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	68da      	ldr	r2, [r3, #12]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2220      	movs	r2, #32
 800e2fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff ff02 	bl	800e108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b08c      	sub	sp, #48	@ 0x30
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b22      	cmp	r3, #34	@ 0x22
 800e320:	f040 80ae 	bne.w	800e480 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e32c:	d117      	bne.n	800e35e <UART_Receive_IT+0x50>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d113      	bne.n	800e35e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e33e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	b29b      	uxth	r3, r3
 800e348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e350:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e356:	1c9a      	adds	r2, r3, #2
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	629a      	str	r2, [r3, #40]	@ 0x28
 800e35c:	e026      	b.n	800e3ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e362:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e364:	2300      	movs	r3, #0
 800e366:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e370:	d007      	beq.n	800e382 <UART_Receive_IT+0x74>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10a      	bne.n	800e390 <UART_Receive_IT+0x82>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d106      	bne.n	800e390 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	e008      	b.n	800e3a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	b2db      	uxtb	r3, r3
 800e398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d15d      	bne.n	800e47c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68da      	ldr	r2, [r3, #12]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f022 0220 	bic.w	r2, r2, #32
 800e3ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68da      	ldr	r2, [r3, #12]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e3de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	695a      	ldr	r2, [r3, #20]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f022 0201 	bic.w	r2, r2, #1
 800e3ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2220      	movs	r2, #32
 800e3f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e402:	2b01      	cmp	r3, #1
 800e404:	d135      	bne.n	800e472 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	330c      	adds	r3, #12
 800e412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	e853 3f00 	ldrex	r3, [r3]
 800e41a:	613b      	str	r3, [r7, #16]
   return(result);
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f023 0310 	bic.w	r3, r3, #16
 800e422:	627b      	str	r3, [r7, #36]	@ 0x24
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	330c      	adds	r3, #12
 800e42a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e42c:	623a      	str	r2, [r7, #32]
 800e42e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e430:	69f9      	ldr	r1, [r7, #28]
 800e432:	6a3a      	ldr	r2, [r7, #32]
 800e434:	e841 2300 	strex	r3, r2, [r1]
 800e438:	61bb      	str	r3, [r7, #24]
   return(result);
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1e5      	bne.n	800e40c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f003 0310 	and.w	r3, r3, #16
 800e44a:	2b10      	cmp	r3, #16
 800e44c:	d10a      	bne.n	800e464 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e44e:	2300      	movs	r3, #0
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7ff fe67 	bl	800e13e <HAL_UARTEx_RxEventCallback>
 800e470:	e002      	b.n	800e478 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff fe51 	bl	800e11a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	e002      	b.n	800e482 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	e000      	b.n	800e482 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e480:	2302      	movs	r3, #2
  }
}
 800e482:	4618      	mov	r0, r3
 800e484:	3730      	adds	r7, #48	@ 0x30
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	430a      	orrs	r2, r1
 800e4a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	689a      	ldr	r2, [r3, #8]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	691b      	ldr	r3, [r3, #16]
 800e4b2:	431a      	orrs	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800e4c6:	f023 030c 	bic.w	r3, r3, #12
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	6812      	ldr	r2, [r2, #0]
 800e4ce:	68b9      	ldr	r1, [r7, #8]
 800e4d0:	430b      	orrs	r3, r1
 800e4d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	695b      	ldr	r3, [r3, #20]
 800e4da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	699a      	ldr	r2, [r3, #24]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	430a      	orrs	r2, r1
 800e4e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a2c      	ldr	r2, [pc, #176]	@ (800e5a0 <UART_SetConfig+0x114>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d103      	bne.n	800e4fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e4f4:	f7fe fe8c 	bl	800d210 <HAL_RCC_GetPCLK2Freq>
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	e002      	b.n	800e502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e4fc:	f7fe fe74 	bl	800d1e8 <HAL_RCC_GetPCLK1Freq>
 800e500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	4613      	mov	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	4413      	add	r3, r2
 800e50a:	009a      	lsls	r2, r3, #2
 800e50c:	441a      	add	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	fbb2 f3f3 	udiv	r3, r2, r3
 800e518:	4a22      	ldr	r2, [pc, #136]	@ (800e5a4 <UART_SetConfig+0x118>)
 800e51a:	fba2 2303 	umull	r2, r3, r2, r3
 800e51e:	095b      	lsrs	r3, r3, #5
 800e520:	0119      	lsls	r1, r3, #4
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009a      	lsls	r2, r3, #2
 800e52c:	441a      	add	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	fbb2 f2f3 	udiv	r2, r2, r3
 800e538:	4b1a      	ldr	r3, [pc, #104]	@ (800e5a4 <UART_SetConfig+0x118>)
 800e53a:	fba3 0302 	umull	r0, r3, r3, r2
 800e53e:	095b      	lsrs	r3, r3, #5
 800e540:	2064      	movs	r0, #100	@ 0x64
 800e542:	fb00 f303 	mul.w	r3, r0, r3
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	011b      	lsls	r3, r3, #4
 800e54a:	3332      	adds	r3, #50	@ 0x32
 800e54c:	4a15      	ldr	r2, [pc, #84]	@ (800e5a4 <UART_SetConfig+0x118>)
 800e54e:	fba2 2303 	umull	r2, r3, r2, r3
 800e552:	095b      	lsrs	r3, r3, #5
 800e554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e558:	4419      	add	r1, r3
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	009a      	lsls	r2, r3, #2
 800e564:	441a      	add	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e570:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a4 <UART_SetConfig+0x118>)
 800e572:	fba3 0302 	umull	r0, r3, r3, r2
 800e576:	095b      	lsrs	r3, r3, #5
 800e578:	2064      	movs	r0, #100	@ 0x64
 800e57a:	fb00 f303 	mul.w	r3, r0, r3
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	011b      	lsls	r3, r3, #4
 800e582:	3332      	adds	r3, #50	@ 0x32
 800e584:	4a07      	ldr	r2, [pc, #28]	@ (800e5a4 <UART_SetConfig+0x118>)
 800e586:	fba2 2303 	umull	r2, r3, r2, r3
 800e58a:	095b      	lsrs	r3, r3, #5
 800e58c:	f003 020f 	and.w	r2, r3, #15
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	440a      	add	r2, r1
 800e596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e598:	bf00      	nop
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	40013800 	.word	0x40013800
 800e5a4:	51eb851f 	.word	0x51eb851f

0800e5a8 <__itoa>:
 800e5a8:	1e93      	subs	r3, r2, #2
 800e5aa:	2b22      	cmp	r3, #34	@ 0x22
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	d904      	bls.n	800e5bc <__itoa+0x14>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	461c      	mov	r4, r3
 800e5b6:	700b      	strb	r3, [r1, #0]
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	bd10      	pop	{r4, pc}
 800e5bc:	2a0a      	cmp	r2, #10
 800e5be:	d109      	bne.n	800e5d4 <__itoa+0x2c>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	da07      	bge.n	800e5d4 <__itoa+0x2c>
 800e5c4:	232d      	movs	r3, #45	@ 0x2d
 800e5c6:	700b      	strb	r3, [r1, #0]
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	4240      	negs	r0, r0
 800e5cc:	4421      	add	r1, r4
 800e5ce:	f000 f8db 	bl	800e788 <__utoa>
 800e5d2:	e7f1      	b.n	800e5b8 <__itoa+0x10>
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	e7f9      	b.n	800e5cc <__itoa+0x24>

0800e5d8 <itoa>:
 800e5d8:	f7ff bfe6 	b.w	800e5a8 <__itoa>

0800e5dc <malloc>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	@ (800e5e8 <malloc+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f000 b825 	b.w	800e630 <_malloc_r>
 800e5e6:	bf00      	nop
 800e5e8:	20000f80 	.word	0x20000f80

0800e5ec <sbrk_aligned>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	4e0f      	ldr	r6, [pc, #60]	@ (800e62c <sbrk_aligned+0x40>)
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	6831      	ldr	r1, [r6, #0]
 800e5f4:	4605      	mov	r5, r0
 800e5f6:	b911      	cbnz	r1, 800e5fe <sbrk_aligned+0x12>
 800e5f8:	f000 f932 	bl	800e860 <_sbrk_r>
 800e5fc:	6030      	str	r0, [r6, #0]
 800e5fe:	4621      	mov	r1, r4
 800e600:	4628      	mov	r0, r5
 800e602:	f000 f92d 	bl	800e860 <_sbrk_r>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d103      	bne.n	800e612 <sbrk_aligned+0x26>
 800e60a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e60e:	4620      	mov	r0, r4
 800e610:	bd70      	pop	{r4, r5, r6, pc}
 800e612:	1cc4      	adds	r4, r0, #3
 800e614:	f024 0403 	bic.w	r4, r4, #3
 800e618:	42a0      	cmp	r0, r4
 800e61a:	d0f8      	beq.n	800e60e <sbrk_aligned+0x22>
 800e61c:	1a21      	subs	r1, r4, r0
 800e61e:	4628      	mov	r0, r5
 800e620:	f000 f91e 	bl	800e860 <_sbrk_r>
 800e624:	3001      	adds	r0, #1
 800e626:	d1f2      	bne.n	800e60e <sbrk_aligned+0x22>
 800e628:	e7ef      	b.n	800e60a <sbrk_aligned+0x1e>
 800e62a:	bf00      	nop
 800e62c:	20001a28 	.word	0x20001a28

0800e630 <_malloc_r>:
 800e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e634:	1ccd      	adds	r5, r1, #3
 800e636:	f025 0503 	bic.w	r5, r5, #3
 800e63a:	3508      	adds	r5, #8
 800e63c:	2d0c      	cmp	r5, #12
 800e63e:	bf38      	it	cc
 800e640:	250c      	movcc	r5, #12
 800e642:	2d00      	cmp	r5, #0
 800e644:	4606      	mov	r6, r0
 800e646:	db01      	blt.n	800e64c <_malloc_r+0x1c>
 800e648:	42a9      	cmp	r1, r5
 800e64a:	d904      	bls.n	800e656 <_malloc_r+0x26>
 800e64c:	230c      	movs	r3, #12
 800e64e:	6033      	str	r3, [r6, #0]
 800e650:	2000      	movs	r0, #0
 800e652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e72c <_malloc_r+0xfc>
 800e65a:	f000 f869 	bl	800e730 <__malloc_lock>
 800e65e:	f8d8 3000 	ldr.w	r3, [r8]
 800e662:	461c      	mov	r4, r3
 800e664:	bb44      	cbnz	r4, 800e6b8 <_malloc_r+0x88>
 800e666:	4629      	mov	r1, r5
 800e668:	4630      	mov	r0, r6
 800e66a:	f7ff ffbf 	bl	800e5ec <sbrk_aligned>
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	4604      	mov	r4, r0
 800e672:	d158      	bne.n	800e726 <_malloc_r+0xf6>
 800e674:	f8d8 4000 	ldr.w	r4, [r8]
 800e678:	4627      	mov	r7, r4
 800e67a:	2f00      	cmp	r7, #0
 800e67c:	d143      	bne.n	800e706 <_malloc_r+0xd6>
 800e67e:	2c00      	cmp	r4, #0
 800e680:	d04b      	beq.n	800e71a <_malloc_r+0xea>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	4639      	mov	r1, r7
 800e686:	4630      	mov	r0, r6
 800e688:	eb04 0903 	add.w	r9, r4, r3
 800e68c:	f000 f8e8 	bl	800e860 <_sbrk_r>
 800e690:	4581      	cmp	r9, r0
 800e692:	d142      	bne.n	800e71a <_malloc_r+0xea>
 800e694:	6821      	ldr	r1, [r4, #0]
 800e696:	4630      	mov	r0, r6
 800e698:	1a6d      	subs	r5, r5, r1
 800e69a:	4629      	mov	r1, r5
 800e69c:	f7ff ffa6 	bl	800e5ec <sbrk_aligned>
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	d03a      	beq.n	800e71a <_malloc_r+0xea>
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	442b      	add	r3, r5
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	bb62      	cbnz	r2, 800e70c <_malloc_r+0xdc>
 800e6b2:	f8c8 7000 	str.w	r7, [r8]
 800e6b6:	e00f      	b.n	800e6d8 <_malloc_r+0xa8>
 800e6b8:	6822      	ldr	r2, [r4, #0]
 800e6ba:	1b52      	subs	r2, r2, r5
 800e6bc:	d420      	bmi.n	800e700 <_malloc_r+0xd0>
 800e6be:	2a0b      	cmp	r2, #11
 800e6c0:	d917      	bls.n	800e6f2 <_malloc_r+0xc2>
 800e6c2:	1961      	adds	r1, r4, r5
 800e6c4:	42a3      	cmp	r3, r4
 800e6c6:	6025      	str	r5, [r4, #0]
 800e6c8:	bf18      	it	ne
 800e6ca:	6059      	strne	r1, [r3, #4]
 800e6cc:	6863      	ldr	r3, [r4, #4]
 800e6ce:	bf08      	it	eq
 800e6d0:	f8c8 1000 	streq.w	r1, [r8]
 800e6d4:	5162      	str	r2, [r4, r5]
 800e6d6:	604b      	str	r3, [r1, #4]
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f000 f82f 	bl	800e73c <__malloc_unlock>
 800e6de:	f104 000b 	add.w	r0, r4, #11
 800e6e2:	1d23      	adds	r3, r4, #4
 800e6e4:	f020 0007 	bic.w	r0, r0, #7
 800e6e8:	1ac2      	subs	r2, r0, r3
 800e6ea:	bf1c      	itt	ne
 800e6ec:	1a1b      	subne	r3, r3, r0
 800e6ee:	50a3      	strne	r3, [r4, r2]
 800e6f0:	e7af      	b.n	800e652 <_malloc_r+0x22>
 800e6f2:	6862      	ldr	r2, [r4, #4]
 800e6f4:	42a3      	cmp	r3, r4
 800e6f6:	bf0c      	ite	eq
 800e6f8:	f8c8 2000 	streq.w	r2, [r8]
 800e6fc:	605a      	strne	r2, [r3, #4]
 800e6fe:	e7eb      	b.n	800e6d8 <_malloc_r+0xa8>
 800e700:	4623      	mov	r3, r4
 800e702:	6864      	ldr	r4, [r4, #4]
 800e704:	e7ae      	b.n	800e664 <_malloc_r+0x34>
 800e706:	463c      	mov	r4, r7
 800e708:	687f      	ldr	r7, [r7, #4]
 800e70a:	e7b6      	b.n	800e67a <_malloc_r+0x4a>
 800e70c:	461a      	mov	r2, r3
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	42a3      	cmp	r3, r4
 800e712:	d1fb      	bne.n	800e70c <_malloc_r+0xdc>
 800e714:	2300      	movs	r3, #0
 800e716:	6053      	str	r3, [r2, #4]
 800e718:	e7de      	b.n	800e6d8 <_malloc_r+0xa8>
 800e71a:	230c      	movs	r3, #12
 800e71c:	4630      	mov	r0, r6
 800e71e:	6033      	str	r3, [r6, #0]
 800e720:	f000 f80c 	bl	800e73c <__malloc_unlock>
 800e724:	e794      	b.n	800e650 <_malloc_r+0x20>
 800e726:	6005      	str	r5, [r0, #0]
 800e728:	e7d6      	b.n	800e6d8 <_malloc_r+0xa8>
 800e72a:	bf00      	nop
 800e72c:	20001a2c 	.word	0x20001a2c

0800e730 <__malloc_lock>:
 800e730:	4801      	ldr	r0, [pc, #4]	@ (800e738 <__malloc_lock+0x8>)
 800e732:	f000 b8cf 	b.w	800e8d4 <__retarget_lock_acquire_recursive>
 800e736:	bf00      	nop
 800e738:	20001b68 	.word	0x20001b68

0800e73c <__malloc_unlock>:
 800e73c:	4801      	ldr	r0, [pc, #4]	@ (800e744 <__malloc_unlock+0x8>)
 800e73e:	f000 b8ca 	b.w	800e8d6 <__retarget_lock_release_recursive>
 800e742:	bf00      	nop
 800e744:	20001b68 	.word	0x20001b68

0800e748 <siprintf>:
 800e748:	b40e      	push	{r1, r2, r3}
 800e74a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e74e:	b500      	push	{lr}
 800e750:	b09c      	sub	sp, #112	@ 0x70
 800e752:	ab1d      	add	r3, sp, #116	@ 0x74
 800e754:	9002      	str	r0, [sp, #8]
 800e756:	9006      	str	r0, [sp, #24]
 800e758:	9107      	str	r1, [sp, #28]
 800e75a:	9104      	str	r1, [sp, #16]
 800e75c:	4808      	ldr	r0, [pc, #32]	@ (800e780 <siprintf+0x38>)
 800e75e:	4909      	ldr	r1, [pc, #36]	@ (800e784 <siprintf+0x3c>)
 800e760:	f853 2b04 	ldr.w	r2, [r3], #4
 800e764:	9105      	str	r1, [sp, #20]
 800e766:	6800      	ldr	r0, [r0, #0]
 800e768:	a902      	add	r1, sp, #8
 800e76a:	9301      	str	r3, [sp, #4]
 800e76c:	f000 f960 	bl	800ea30 <_svfiprintf_r>
 800e770:	2200      	movs	r2, #0
 800e772:	9b02      	ldr	r3, [sp, #8]
 800e774:	701a      	strb	r2, [r3, #0]
 800e776:	b01c      	add	sp, #112	@ 0x70
 800e778:	f85d eb04 	ldr.w	lr, [sp], #4
 800e77c:	b003      	add	sp, #12
 800e77e:	4770      	bx	lr
 800e780:	20000f80 	.word	0x20000f80
 800e784:	ffff0208 	.word	0xffff0208

0800e788 <__utoa>:
 800e788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e78a:	b08b      	sub	sp, #44	@ 0x2c
 800e78c:	4605      	mov	r5, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	466e      	mov	r6, sp
 800e792:	4c1d      	ldr	r4, [pc, #116]	@ (800e808 <__utoa+0x80>)
 800e794:	f104 0c20 	add.w	ip, r4, #32
 800e798:	4637      	mov	r7, r6
 800e79a:	6820      	ldr	r0, [r4, #0]
 800e79c:	6861      	ldr	r1, [r4, #4]
 800e79e:	3408      	adds	r4, #8
 800e7a0:	c703      	stmia	r7!, {r0, r1}
 800e7a2:	4564      	cmp	r4, ip
 800e7a4:	463e      	mov	r6, r7
 800e7a6:	d1f7      	bne.n	800e798 <__utoa+0x10>
 800e7a8:	7921      	ldrb	r1, [r4, #4]
 800e7aa:	6820      	ldr	r0, [r4, #0]
 800e7ac:	7139      	strb	r1, [r7, #4]
 800e7ae:	1e91      	subs	r1, r2, #2
 800e7b0:	2922      	cmp	r1, #34	@ 0x22
 800e7b2:	6038      	str	r0, [r7, #0]
 800e7b4:	f04f 0100 	mov.w	r1, #0
 800e7b8:	d904      	bls.n	800e7c4 <__utoa+0x3c>
 800e7ba:	7019      	strb	r1, [r3, #0]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4618      	mov	r0, r3
 800e7c0:	b00b      	add	sp, #44	@ 0x2c
 800e7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7c4:	1e58      	subs	r0, r3, #1
 800e7c6:	4684      	mov	ip, r0
 800e7c8:	fbb5 f7f2 	udiv	r7, r5, r2
 800e7cc:	fb02 5617 	mls	r6, r2, r7, r5
 800e7d0:	3628      	adds	r6, #40	@ 0x28
 800e7d2:	446e      	add	r6, sp
 800e7d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e7d8:	460c      	mov	r4, r1
 800e7da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e7de:	462e      	mov	r6, r5
 800e7e0:	42b2      	cmp	r2, r6
 800e7e2:	463d      	mov	r5, r7
 800e7e4:	f101 0101 	add.w	r1, r1, #1
 800e7e8:	d9ee      	bls.n	800e7c8 <__utoa+0x40>
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	545a      	strb	r2, [r3, r1]
 800e7ee:	1919      	adds	r1, r3, r4
 800e7f0:	1aa5      	subs	r5, r4, r2
 800e7f2:	42aa      	cmp	r2, r5
 800e7f4:	dae3      	bge.n	800e7be <__utoa+0x36>
 800e7f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e7fa:	780e      	ldrb	r6, [r1, #0]
 800e7fc:	3201      	adds	r2, #1
 800e7fe:	7006      	strb	r6, [r0, #0]
 800e800:	f801 5901 	strb.w	r5, [r1], #-1
 800e804:	e7f4      	b.n	800e7f0 <__utoa+0x68>
 800e806:	bf00      	nop
 800e808:	0800f46e 	.word	0x0800f46e

0800e80c <strcat>:
 800e80c:	4602      	mov	r2, r0
 800e80e:	b510      	push	{r4, lr}
 800e810:	7814      	ldrb	r4, [r2, #0]
 800e812:	4613      	mov	r3, r2
 800e814:	3201      	adds	r2, #1
 800e816:	2c00      	cmp	r4, #0
 800e818:	d1fa      	bne.n	800e810 <strcat+0x4>
 800e81a:	3b01      	subs	r3, #1
 800e81c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e820:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e824:	2a00      	cmp	r2, #0
 800e826:	d1f9      	bne.n	800e81c <strcat+0x10>
 800e828:	bd10      	pop	{r4, pc}

0800e82a <strncpy>:
 800e82a:	4603      	mov	r3, r0
 800e82c:	b510      	push	{r4, lr}
 800e82e:	3901      	subs	r1, #1
 800e830:	b132      	cbz	r2, 800e840 <strncpy+0x16>
 800e832:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e836:	3a01      	subs	r2, #1
 800e838:	f803 4b01 	strb.w	r4, [r3], #1
 800e83c:	2c00      	cmp	r4, #0
 800e83e:	d1f7      	bne.n	800e830 <strncpy+0x6>
 800e840:	2100      	movs	r1, #0
 800e842:	441a      	add	r2, r3
 800e844:	4293      	cmp	r3, r2
 800e846:	d100      	bne.n	800e84a <strncpy+0x20>
 800e848:	bd10      	pop	{r4, pc}
 800e84a:	f803 1b01 	strb.w	r1, [r3], #1
 800e84e:	e7f9      	b.n	800e844 <strncpy+0x1a>

0800e850 <memset>:
 800e850:	4603      	mov	r3, r0
 800e852:	4402      	add	r2, r0
 800e854:	4293      	cmp	r3, r2
 800e856:	d100      	bne.n	800e85a <memset+0xa>
 800e858:	4770      	bx	lr
 800e85a:	f803 1b01 	strb.w	r1, [r3], #1
 800e85e:	e7f9      	b.n	800e854 <memset+0x4>

0800e860 <_sbrk_r>:
 800e860:	b538      	push	{r3, r4, r5, lr}
 800e862:	2300      	movs	r3, #0
 800e864:	4d05      	ldr	r5, [pc, #20]	@ (800e87c <_sbrk_r+0x1c>)
 800e866:	4604      	mov	r4, r0
 800e868:	4608      	mov	r0, r1
 800e86a:	602b      	str	r3, [r5, #0]
 800e86c:	f7fb fff4 	bl	800a858 <_sbrk>
 800e870:	1c43      	adds	r3, r0, #1
 800e872:	d102      	bne.n	800e87a <_sbrk_r+0x1a>
 800e874:	682b      	ldr	r3, [r5, #0]
 800e876:	b103      	cbz	r3, 800e87a <_sbrk_r+0x1a>
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	20001b6c 	.word	0x20001b6c

0800e880 <__errno>:
 800e880:	4b01      	ldr	r3, [pc, #4]	@ (800e888 <__errno+0x8>)
 800e882:	6818      	ldr	r0, [r3, #0]
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20000f80 	.word	0x20000f80

0800e88c <__libc_init_array>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	2600      	movs	r6, #0
 800e890:	4d0c      	ldr	r5, [pc, #48]	@ (800e8c4 <__libc_init_array+0x38>)
 800e892:	4c0d      	ldr	r4, [pc, #52]	@ (800e8c8 <__libc_init_array+0x3c>)
 800e894:	1b64      	subs	r4, r4, r5
 800e896:	10a4      	asrs	r4, r4, #2
 800e898:	42a6      	cmp	r6, r4
 800e89a:	d109      	bne.n	800e8b0 <__libc_init_array+0x24>
 800e89c:	f000 fbc2 	bl	800f024 <_init>
 800e8a0:	2600      	movs	r6, #0
 800e8a2:	4d0a      	ldr	r5, [pc, #40]	@ (800e8cc <__libc_init_array+0x40>)
 800e8a4:	4c0a      	ldr	r4, [pc, #40]	@ (800e8d0 <__libc_init_array+0x44>)
 800e8a6:	1b64      	subs	r4, r4, r5
 800e8a8:	10a4      	asrs	r4, r4, #2
 800e8aa:	42a6      	cmp	r6, r4
 800e8ac:	d105      	bne.n	800e8ba <__libc_init_array+0x2e>
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}
 800e8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b4:	4798      	blx	r3
 800e8b6:	3601      	adds	r6, #1
 800e8b8:	e7ee      	b.n	800e898 <__libc_init_array+0xc>
 800e8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8be:	4798      	blx	r3
 800e8c0:	3601      	adds	r6, #1
 800e8c2:	e7f2      	b.n	800e8aa <__libc_init_array+0x1e>
 800e8c4:	0800f4d0 	.word	0x0800f4d0
 800e8c8:	0800f4d0 	.word	0x0800f4d0
 800e8cc:	0800f4d0 	.word	0x0800f4d0
 800e8d0:	0800f4d4 	.word	0x0800f4d4

0800e8d4 <__retarget_lock_acquire_recursive>:
 800e8d4:	4770      	bx	lr

0800e8d6 <__retarget_lock_release_recursive>:
 800e8d6:	4770      	bx	lr

0800e8d8 <strcpy>:
 800e8d8:	4603      	mov	r3, r0
 800e8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8de:	f803 2b01 	strb.w	r2, [r3], #1
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	d1f9      	bne.n	800e8da <strcpy+0x2>
 800e8e6:	4770      	bx	lr

0800e8e8 <_free_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d040      	beq.n	800e972 <_free_r+0x8a>
 800e8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f4:	1f0c      	subs	r4, r1, #4
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	bfb8      	it	lt
 800e8fa:	18e4      	addlt	r4, r4, r3
 800e8fc:	f7ff ff18 	bl	800e730 <__malloc_lock>
 800e900:	4a1c      	ldr	r2, [pc, #112]	@ (800e974 <_free_r+0x8c>)
 800e902:	6813      	ldr	r3, [r2, #0]
 800e904:	b933      	cbnz	r3, 800e914 <_free_r+0x2c>
 800e906:	6063      	str	r3, [r4, #4]
 800e908:	6014      	str	r4, [r2, #0]
 800e90a:	4628      	mov	r0, r5
 800e90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e910:	f7ff bf14 	b.w	800e73c <__malloc_unlock>
 800e914:	42a3      	cmp	r3, r4
 800e916:	d908      	bls.n	800e92a <_free_r+0x42>
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	1821      	adds	r1, r4, r0
 800e91c:	428b      	cmp	r3, r1
 800e91e:	bf01      	itttt	eq
 800e920:	6819      	ldreq	r1, [r3, #0]
 800e922:	685b      	ldreq	r3, [r3, #4]
 800e924:	1809      	addeq	r1, r1, r0
 800e926:	6021      	streq	r1, [r4, #0]
 800e928:	e7ed      	b.n	800e906 <_free_r+0x1e>
 800e92a:	461a      	mov	r2, r3
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	b10b      	cbz	r3, 800e934 <_free_r+0x4c>
 800e930:	42a3      	cmp	r3, r4
 800e932:	d9fa      	bls.n	800e92a <_free_r+0x42>
 800e934:	6811      	ldr	r1, [r2, #0]
 800e936:	1850      	adds	r0, r2, r1
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d10b      	bne.n	800e954 <_free_r+0x6c>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	4401      	add	r1, r0
 800e940:	1850      	adds	r0, r2, r1
 800e942:	4283      	cmp	r3, r0
 800e944:	6011      	str	r1, [r2, #0]
 800e946:	d1e0      	bne.n	800e90a <_free_r+0x22>
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	4408      	add	r0, r1
 800e94e:	6010      	str	r0, [r2, #0]
 800e950:	6053      	str	r3, [r2, #4]
 800e952:	e7da      	b.n	800e90a <_free_r+0x22>
 800e954:	d902      	bls.n	800e95c <_free_r+0x74>
 800e956:	230c      	movs	r3, #12
 800e958:	602b      	str	r3, [r5, #0]
 800e95a:	e7d6      	b.n	800e90a <_free_r+0x22>
 800e95c:	6820      	ldr	r0, [r4, #0]
 800e95e:	1821      	adds	r1, r4, r0
 800e960:	428b      	cmp	r3, r1
 800e962:	bf01      	itttt	eq
 800e964:	6819      	ldreq	r1, [r3, #0]
 800e966:	685b      	ldreq	r3, [r3, #4]
 800e968:	1809      	addeq	r1, r1, r0
 800e96a:	6021      	streq	r1, [r4, #0]
 800e96c:	6063      	str	r3, [r4, #4]
 800e96e:	6054      	str	r4, [r2, #4]
 800e970:	e7cb      	b.n	800e90a <_free_r+0x22>
 800e972:	bd38      	pop	{r3, r4, r5, pc}
 800e974:	20001a2c 	.word	0x20001a2c

0800e978 <__ssputs_r>:
 800e978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e97c:	461f      	mov	r7, r3
 800e97e:	688e      	ldr	r6, [r1, #8]
 800e980:	4682      	mov	sl, r0
 800e982:	42be      	cmp	r6, r7
 800e984:	460c      	mov	r4, r1
 800e986:	4690      	mov	r8, r2
 800e988:	680b      	ldr	r3, [r1, #0]
 800e98a:	d82d      	bhi.n	800e9e8 <__ssputs_r+0x70>
 800e98c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e990:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e994:	d026      	beq.n	800e9e4 <__ssputs_r+0x6c>
 800e996:	6965      	ldr	r5, [r4, #20]
 800e998:	6909      	ldr	r1, [r1, #16]
 800e99a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e99e:	eba3 0901 	sub.w	r9, r3, r1
 800e9a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9a6:	1c7b      	adds	r3, r7, #1
 800e9a8:	444b      	add	r3, r9
 800e9aa:	106d      	asrs	r5, r5, #1
 800e9ac:	429d      	cmp	r5, r3
 800e9ae:	bf38      	it	cc
 800e9b0:	461d      	movcc	r5, r3
 800e9b2:	0553      	lsls	r3, r2, #21
 800e9b4:	d527      	bpl.n	800ea06 <__ssputs_r+0x8e>
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	f7ff fe3a 	bl	800e630 <_malloc_r>
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b360      	cbz	r0, 800ea1a <__ssputs_r+0xa2>
 800e9c0:	464a      	mov	r2, r9
 800e9c2:	6921      	ldr	r1, [r4, #16]
 800e9c4:	f000 fb18 	bl	800eff8 <memcpy>
 800e9c8:	89a3      	ldrh	r3, [r4, #12]
 800e9ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9d2:	81a3      	strh	r3, [r4, #12]
 800e9d4:	6126      	str	r6, [r4, #16]
 800e9d6:	444e      	add	r6, r9
 800e9d8:	6026      	str	r6, [r4, #0]
 800e9da:	463e      	mov	r6, r7
 800e9dc:	6165      	str	r5, [r4, #20]
 800e9de:	eba5 0509 	sub.w	r5, r5, r9
 800e9e2:	60a5      	str	r5, [r4, #8]
 800e9e4:	42be      	cmp	r6, r7
 800e9e6:	d900      	bls.n	800e9ea <__ssputs_r+0x72>
 800e9e8:	463e      	mov	r6, r7
 800e9ea:	4632      	mov	r2, r6
 800e9ec:	4641      	mov	r1, r8
 800e9ee:	6820      	ldr	r0, [r4, #0]
 800e9f0:	f000 fada 	bl	800efa8 <memmove>
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	68a3      	ldr	r3, [r4, #8]
 800e9f8:	1b9b      	subs	r3, r3, r6
 800e9fa:	60a3      	str	r3, [r4, #8]
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	4433      	add	r3, r6
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea06:	462a      	mov	r2, r5
 800ea08:	f000 faa0 	bl	800ef4c <_realloc_r>
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d1e0      	bne.n	800e9d4 <__ssputs_r+0x5c>
 800ea12:	4650      	mov	r0, sl
 800ea14:	6921      	ldr	r1, [r4, #16]
 800ea16:	f7ff ff67 	bl	800e8e8 <_free_r>
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	f8ca 3000 	str.w	r3, [sl]
 800ea20:	89a3      	ldrh	r3, [r4, #12]
 800ea22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea2a:	81a3      	strh	r3, [r4, #12]
 800ea2c:	e7e9      	b.n	800ea02 <__ssputs_r+0x8a>
	...

0800ea30 <_svfiprintf_r>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	4698      	mov	r8, r3
 800ea36:	898b      	ldrh	r3, [r1, #12]
 800ea38:	4607      	mov	r7, r0
 800ea3a:	061b      	lsls	r3, r3, #24
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	4614      	mov	r4, r2
 800ea40:	b09d      	sub	sp, #116	@ 0x74
 800ea42:	d510      	bpl.n	800ea66 <_svfiprintf_r+0x36>
 800ea44:	690b      	ldr	r3, [r1, #16]
 800ea46:	b973      	cbnz	r3, 800ea66 <_svfiprintf_r+0x36>
 800ea48:	2140      	movs	r1, #64	@ 0x40
 800ea4a:	f7ff fdf1 	bl	800e630 <_malloc_r>
 800ea4e:	6028      	str	r0, [r5, #0]
 800ea50:	6128      	str	r0, [r5, #16]
 800ea52:	b930      	cbnz	r0, 800ea62 <_svfiprintf_r+0x32>
 800ea54:	230c      	movs	r3, #12
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea5c:	b01d      	add	sp, #116	@ 0x74
 800ea5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea62:	2340      	movs	r3, #64	@ 0x40
 800ea64:	616b      	str	r3, [r5, #20]
 800ea66:	2300      	movs	r3, #0
 800ea68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea6a:	2320      	movs	r3, #32
 800ea6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea70:	2330      	movs	r3, #48	@ 0x30
 800ea72:	f04f 0901 	mov.w	r9, #1
 800ea76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ec14 <_svfiprintf_r+0x1e4>
 800ea7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea82:	4623      	mov	r3, r4
 800ea84:	469a      	mov	sl, r3
 800ea86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea8a:	b10a      	cbz	r2, 800ea90 <_svfiprintf_r+0x60>
 800ea8c:	2a25      	cmp	r2, #37	@ 0x25
 800ea8e:	d1f9      	bne.n	800ea84 <_svfiprintf_r+0x54>
 800ea90:	ebba 0b04 	subs.w	fp, sl, r4
 800ea94:	d00b      	beq.n	800eaae <_svfiprintf_r+0x7e>
 800ea96:	465b      	mov	r3, fp
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	4638      	mov	r0, r7
 800ea9e:	f7ff ff6b 	bl	800e978 <__ssputs_r>
 800eaa2:	3001      	adds	r0, #1
 800eaa4:	f000 80a7 	beq.w	800ebf6 <_svfiprintf_r+0x1c6>
 800eaa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eaaa:	445a      	add	r2, fp
 800eaac:	9209      	str	r2, [sp, #36]	@ 0x24
 800eaae:	f89a 3000 	ldrb.w	r3, [sl]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 809f 	beq.w	800ebf6 <_svfiprintf_r+0x1c6>
 800eab8:	2300      	movs	r3, #0
 800eaba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eabe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eac2:	f10a 0a01 	add.w	sl, sl, #1
 800eac6:	9304      	str	r3, [sp, #16]
 800eac8:	9307      	str	r3, [sp, #28]
 800eaca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eace:	931a      	str	r3, [sp, #104]	@ 0x68
 800ead0:	4654      	mov	r4, sl
 800ead2:	2205      	movs	r2, #5
 800ead4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead8:	484e      	ldr	r0, [pc, #312]	@ (800ec14 <_svfiprintf_r+0x1e4>)
 800eada:	f000 fa7f 	bl	800efdc <memchr>
 800eade:	9a04      	ldr	r2, [sp, #16]
 800eae0:	b9d8      	cbnz	r0, 800eb1a <_svfiprintf_r+0xea>
 800eae2:	06d0      	lsls	r0, r2, #27
 800eae4:	bf44      	itt	mi
 800eae6:	2320      	movmi	r3, #32
 800eae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaec:	0711      	lsls	r1, r2, #28
 800eaee:	bf44      	itt	mi
 800eaf0:	232b      	movmi	r3, #43	@ 0x2b
 800eaf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaf6:	f89a 3000 	ldrb.w	r3, [sl]
 800eafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800eafc:	d015      	beq.n	800eb2a <_svfiprintf_r+0xfa>
 800eafe:	4654      	mov	r4, sl
 800eb00:	2000      	movs	r0, #0
 800eb02:	f04f 0c0a 	mov.w	ip, #10
 800eb06:	9a07      	ldr	r2, [sp, #28]
 800eb08:	4621      	mov	r1, r4
 800eb0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb0e:	3b30      	subs	r3, #48	@ 0x30
 800eb10:	2b09      	cmp	r3, #9
 800eb12:	d94b      	bls.n	800ebac <_svfiprintf_r+0x17c>
 800eb14:	b1b0      	cbz	r0, 800eb44 <_svfiprintf_r+0x114>
 800eb16:	9207      	str	r2, [sp, #28]
 800eb18:	e014      	b.n	800eb44 <_svfiprintf_r+0x114>
 800eb1a:	eba0 0308 	sub.w	r3, r0, r8
 800eb1e:	fa09 f303 	lsl.w	r3, r9, r3
 800eb22:	4313      	orrs	r3, r2
 800eb24:	46a2      	mov	sl, r4
 800eb26:	9304      	str	r3, [sp, #16]
 800eb28:	e7d2      	b.n	800ead0 <_svfiprintf_r+0xa0>
 800eb2a:	9b03      	ldr	r3, [sp, #12]
 800eb2c:	1d19      	adds	r1, r3, #4
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	9103      	str	r1, [sp, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	bfbb      	ittet	lt
 800eb36:	425b      	neglt	r3, r3
 800eb38:	f042 0202 	orrlt.w	r2, r2, #2
 800eb3c:	9307      	strge	r3, [sp, #28]
 800eb3e:	9307      	strlt	r3, [sp, #28]
 800eb40:	bfb8      	it	lt
 800eb42:	9204      	strlt	r2, [sp, #16]
 800eb44:	7823      	ldrb	r3, [r4, #0]
 800eb46:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb48:	d10a      	bne.n	800eb60 <_svfiprintf_r+0x130>
 800eb4a:	7863      	ldrb	r3, [r4, #1]
 800eb4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb4e:	d132      	bne.n	800ebb6 <_svfiprintf_r+0x186>
 800eb50:	9b03      	ldr	r3, [sp, #12]
 800eb52:	3402      	adds	r4, #2
 800eb54:	1d1a      	adds	r2, r3, #4
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	9203      	str	r2, [sp, #12]
 800eb5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb5e:	9305      	str	r3, [sp, #20]
 800eb60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ec18 <_svfiprintf_r+0x1e8>
 800eb64:	2203      	movs	r2, #3
 800eb66:	4650      	mov	r0, sl
 800eb68:	7821      	ldrb	r1, [r4, #0]
 800eb6a:	f000 fa37 	bl	800efdc <memchr>
 800eb6e:	b138      	cbz	r0, 800eb80 <_svfiprintf_r+0x150>
 800eb70:	2240      	movs	r2, #64	@ 0x40
 800eb72:	9b04      	ldr	r3, [sp, #16]
 800eb74:	eba0 000a 	sub.w	r0, r0, sl
 800eb78:	4082      	lsls	r2, r0
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	3401      	adds	r4, #1
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb84:	2206      	movs	r2, #6
 800eb86:	4825      	ldr	r0, [pc, #148]	@ (800ec1c <_svfiprintf_r+0x1ec>)
 800eb88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb8c:	f000 fa26 	bl	800efdc <memchr>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	d036      	beq.n	800ec02 <_svfiprintf_r+0x1d2>
 800eb94:	4b22      	ldr	r3, [pc, #136]	@ (800ec20 <_svfiprintf_r+0x1f0>)
 800eb96:	bb1b      	cbnz	r3, 800ebe0 <_svfiprintf_r+0x1b0>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	3307      	adds	r3, #7
 800eb9c:	f023 0307 	bic.w	r3, r3, #7
 800eba0:	3308      	adds	r3, #8
 800eba2:	9303      	str	r3, [sp, #12]
 800eba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba6:	4433      	add	r3, r6
 800eba8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebaa:	e76a      	b.n	800ea82 <_svfiprintf_r+0x52>
 800ebac:	460c      	mov	r4, r1
 800ebae:	2001      	movs	r0, #1
 800ebb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebb4:	e7a8      	b.n	800eb08 <_svfiprintf_r+0xd8>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f04f 0c0a 	mov.w	ip, #10
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	3401      	adds	r4, #1
 800ebc0:	9305      	str	r3, [sp, #20]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebc8:	3a30      	subs	r2, #48	@ 0x30
 800ebca:	2a09      	cmp	r2, #9
 800ebcc:	d903      	bls.n	800ebd6 <_svfiprintf_r+0x1a6>
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0c6      	beq.n	800eb60 <_svfiprintf_r+0x130>
 800ebd2:	9105      	str	r1, [sp, #20]
 800ebd4:	e7c4      	b.n	800eb60 <_svfiprintf_r+0x130>
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	2301      	movs	r3, #1
 800ebda:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebde:	e7f0      	b.n	800ebc2 <_svfiprintf_r+0x192>
 800ebe0:	ab03      	add	r3, sp, #12
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	462a      	mov	r2, r5
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec24 <_svfiprintf_r+0x1f4>)
 800ebea:	a904      	add	r1, sp, #16
 800ebec:	f3af 8000 	nop.w
 800ebf0:	1c42      	adds	r2, r0, #1
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	d1d6      	bne.n	800eba4 <_svfiprintf_r+0x174>
 800ebf6:	89ab      	ldrh	r3, [r5, #12]
 800ebf8:	065b      	lsls	r3, r3, #25
 800ebfa:	f53f af2d 	bmi.w	800ea58 <_svfiprintf_r+0x28>
 800ebfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec00:	e72c      	b.n	800ea5c <_svfiprintf_r+0x2c>
 800ec02:	ab03      	add	r3, sp, #12
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	462a      	mov	r2, r5
 800ec08:	4638      	mov	r0, r7
 800ec0a:	4b06      	ldr	r3, [pc, #24]	@ (800ec24 <_svfiprintf_r+0x1f4>)
 800ec0c:	a904      	add	r1, sp, #16
 800ec0e:	f000 f87d 	bl	800ed0c <_printf_i>
 800ec12:	e7ed      	b.n	800ebf0 <_svfiprintf_r+0x1c0>
 800ec14:	0800f493 	.word	0x0800f493
 800ec18:	0800f499 	.word	0x0800f499
 800ec1c:	0800f49d 	.word	0x0800f49d
 800ec20:	00000000 	.word	0x00000000
 800ec24:	0800e979 	.word	0x0800e979

0800ec28 <_printf_common>:
 800ec28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec2c:	4616      	mov	r6, r2
 800ec2e:	4698      	mov	r8, r3
 800ec30:	688a      	ldr	r2, [r1, #8]
 800ec32:	690b      	ldr	r3, [r1, #16]
 800ec34:	4607      	mov	r7, r0
 800ec36:	4293      	cmp	r3, r2
 800ec38:	bfb8      	it	lt
 800ec3a:	4613      	movlt	r3, r2
 800ec3c:	6033      	str	r3, [r6, #0]
 800ec3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec42:	460c      	mov	r4, r1
 800ec44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec48:	b10a      	cbz	r2, 800ec4e <_printf_common+0x26>
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	6033      	str	r3, [r6, #0]
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	0699      	lsls	r1, r3, #26
 800ec52:	bf42      	ittt	mi
 800ec54:	6833      	ldrmi	r3, [r6, #0]
 800ec56:	3302      	addmi	r3, #2
 800ec58:	6033      	strmi	r3, [r6, #0]
 800ec5a:	6825      	ldr	r5, [r4, #0]
 800ec5c:	f015 0506 	ands.w	r5, r5, #6
 800ec60:	d106      	bne.n	800ec70 <_printf_common+0x48>
 800ec62:	f104 0a19 	add.w	sl, r4, #25
 800ec66:	68e3      	ldr	r3, [r4, #12]
 800ec68:	6832      	ldr	r2, [r6, #0]
 800ec6a:	1a9b      	subs	r3, r3, r2
 800ec6c:	42ab      	cmp	r3, r5
 800ec6e:	dc2b      	bgt.n	800ecc8 <_printf_common+0xa0>
 800ec70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec74:	6822      	ldr	r2, [r4, #0]
 800ec76:	3b00      	subs	r3, #0
 800ec78:	bf18      	it	ne
 800ec7a:	2301      	movne	r3, #1
 800ec7c:	0692      	lsls	r2, r2, #26
 800ec7e:	d430      	bmi.n	800ece2 <_printf_common+0xba>
 800ec80:	4641      	mov	r1, r8
 800ec82:	4638      	mov	r0, r7
 800ec84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec88:	47c8      	blx	r9
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	d023      	beq.n	800ecd6 <_printf_common+0xae>
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	6922      	ldr	r2, [r4, #16]
 800ec92:	f003 0306 	and.w	r3, r3, #6
 800ec96:	2b04      	cmp	r3, #4
 800ec98:	bf14      	ite	ne
 800ec9a:	2500      	movne	r5, #0
 800ec9c:	6833      	ldreq	r3, [r6, #0]
 800ec9e:	f04f 0600 	mov.w	r6, #0
 800eca2:	bf08      	it	eq
 800eca4:	68e5      	ldreq	r5, [r4, #12]
 800eca6:	f104 041a 	add.w	r4, r4, #26
 800ecaa:	bf08      	it	eq
 800ecac:	1aed      	subeq	r5, r5, r3
 800ecae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ecb2:	bf08      	it	eq
 800ecb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	bfc4      	itt	gt
 800ecbc:	1a9b      	subgt	r3, r3, r2
 800ecbe:	18ed      	addgt	r5, r5, r3
 800ecc0:	42b5      	cmp	r5, r6
 800ecc2:	d11a      	bne.n	800ecfa <_printf_common+0xd2>
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	e008      	b.n	800ecda <_printf_common+0xb2>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	4652      	mov	r2, sl
 800eccc:	4641      	mov	r1, r8
 800ecce:	4638      	mov	r0, r7
 800ecd0:	47c8      	blx	r9
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	d103      	bne.n	800ecde <_printf_common+0xb6>
 800ecd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecde:	3501      	adds	r5, #1
 800ece0:	e7c1      	b.n	800ec66 <_printf_common+0x3e>
 800ece2:	2030      	movs	r0, #48	@ 0x30
 800ece4:	18e1      	adds	r1, r4, r3
 800ece6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ecf0:	4422      	add	r2, r4
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ecf8:	e7c2      	b.n	800ec80 <_printf_common+0x58>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	4622      	mov	r2, r4
 800ecfe:	4641      	mov	r1, r8
 800ed00:	4638      	mov	r0, r7
 800ed02:	47c8      	blx	r9
 800ed04:	3001      	adds	r0, #1
 800ed06:	d0e6      	beq.n	800ecd6 <_printf_common+0xae>
 800ed08:	3601      	adds	r6, #1
 800ed0a:	e7d9      	b.n	800ecc0 <_printf_common+0x98>

0800ed0c <_printf_i>:
 800ed0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed10:	7e0f      	ldrb	r7, [r1, #24]
 800ed12:	4691      	mov	r9, r2
 800ed14:	2f78      	cmp	r7, #120	@ 0x78
 800ed16:	4680      	mov	r8, r0
 800ed18:	460c      	mov	r4, r1
 800ed1a:	469a      	mov	sl, r3
 800ed1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed22:	d807      	bhi.n	800ed34 <_printf_i+0x28>
 800ed24:	2f62      	cmp	r7, #98	@ 0x62
 800ed26:	d80a      	bhi.n	800ed3e <_printf_i+0x32>
 800ed28:	2f00      	cmp	r7, #0
 800ed2a:	f000 80d3 	beq.w	800eed4 <_printf_i+0x1c8>
 800ed2e:	2f58      	cmp	r7, #88	@ 0x58
 800ed30:	f000 80ba 	beq.w	800eea8 <_printf_i+0x19c>
 800ed34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed3c:	e03a      	b.n	800edb4 <_printf_i+0xa8>
 800ed3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed42:	2b15      	cmp	r3, #21
 800ed44:	d8f6      	bhi.n	800ed34 <_printf_i+0x28>
 800ed46:	a101      	add	r1, pc, #4	@ (adr r1, 800ed4c <_printf_i+0x40>)
 800ed48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed4c:	0800eda5 	.word	0x0800eda5
 800ed50:	0800edb9 	.word	0x0800edb9
 800ed54:	0800ed35 	.word	0x0800ed35
 800ed58:	0800ed35 	.word	0x0800ed35
 800ed5c:	0800ed35 	.word	0x0800ed35
 800ed60:	0800ed35 	.word	0x0800ed35
 800ed64:	0800edb9 	.word	0x0800edb9
 800ed68:	0800ed35 	.word	0x0800ed35
 800ed6c:	0800ed35 	.word	0x0800ed35
 800ed70:	0800ed35 	.word	0x0800ed35
 800ed74:	0800ed35 	.word	0x0800ed35
 800ed78:	0800eebb 	.word	0x0800eebb
 800ed7c:	0800ede3 	.word	0x0800ede3
 800ed80:	0800ee75 	.word	0x0800ee75
 800ed84:	0800ed35 	.word	0x0800ed35
 800ed88:	0800ed35 	.word	0x0800ed35
 800ed8c:	0800eedd 	.word	0x0800eedd
 800ed90:	0800ed35 	.word	0x0800ed35
 800ed94:	0800ede3 	.word	0x0800ede3
 800ed98:	0800ed35 	.word	0x0800ed35
 800ed9c:	0800ed35 	.word	0x0800ed35
 800eda0:	0800ee7d 	.word	0x0800ee7d
 800eda4:	6833      	ldr	r3, [r6, #0]
 800eda6:	1d1a      	adds	r2, r3, #4
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	6032      	str	r2, [r6, #0]
 800edac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edb4:	2301      	movs	r3, #1
 800edb6:	e09e      	b.n	800eef6 <_printf_i+0x1ea>
 800edb8:	6833      	ldr	r3, [r6, #0]
 800edba:	6820      	ldr	r0, [r4, #0]
 800edbc:	1d19      	adds	r1, r3, #4
 800edbe:	6031      	str	r1, [r6, #0]
 800edc0:	0606      	lsls	r6, r0, #24
 800edc2:	d501      	bpl.n	800edc8 <_printf_i+0xbc>
 800edc4:	681d      	ldr	r5, [r3, #0]
 800edc6:	e003      	b.n	800edd0 <_printf_i+0xc4>
 800edc8:	0645      	lsls	r5, r0, #25
 800edca:	d5fb      	bpl.n	800edc4 <_printf_i+0xb8>
 800edcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	da03      	bge.n	800eddc <_printf_i+0xd0>
 800edd4:	232d      	movs	r3, #45	@ 0x2d
 800edd6:	426d      	negs	r5, r5
 800edd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eddc:	230a      	movs	r3, #10
 800edde:	4859      	ldr	r0, [pc, #356]	@ (800ef44 <_printf_i+0x238>)
 800ede0:	e011      	b.n	800ee06 <_printf_i+0xfa>
 800ede2:	6821      	ldr	r1, [r4, #0]
 800ede4:	6833      	ldr	r3, [r6, #0]
 800ede6:	0608      	lsls	r0, r1, #24
 800ede8:	f853 5b04 	ldr.w	r5, [r3], #4
 800edec:	d402      	bmi.n	800edf4 <_printf_i+0xe8>
 800edee:	0649      	lsls	r1, r1, #25
 800edf0:	bf48      	it	mi
 800edf2:	b2ad      	uxthmi	r5, r5
 800edf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800edf6:	6033      	str	r3, [r6, #0]
 800edf8:	bf14      	ite	ne
 800edfa:	230a      	movne	r3, #10
 800edfc:	2308      	moveq	r3, #8
 800edfe:	4851      	ldr	r0, [pc, #324]	@ (800ef44 <_printf_i+0x238>)
 800ee00:	2100      	movs	r1, #0
 800ee02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee06:	6866      	ldr	r6, [r4, #4]
 800ee08:	2e00      	cmp	r6, #0
 800ee0a:	bfa8      	it	ge
 800ee0c:	6821      	ldrge	r1, [r4, #0]
 800ee0e:	60a6      	str	r6, [r4, #8]
 800ee10:	bfa4      	itt	ge
 800ee12:	f021 0104 	bicge.w	r1, r1, #4
 800ee16:	6021      	strge	r1, [r4, #0]
 800ee18:	b90d      	cbnz	r5, 800ee1e <_printf_i+0x112>
 800ee1a:	2e00      	cmp	r6, #0
 800ee1c:	d04b      	beq.n	800eeb6 <_printf_i+0x1aa>
 800ee1e:	4616      	mov	r6, r2
 800ee20:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee24:	fb03 5711 	mls	r7, r3, r1, r5
 800ee28:	5dc7      	ldrb	r7, [r0, r7]
 800ee2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee2e:	462f      	mov	r7, r5
 800ee30:	42bb      	cmp	r3, r7
 800ee32:	460d      	mov	r5, r1
 800ee34:	d9f4      	bls.n	800ee20 <_printf_i+0x114>
 800ee36:	2b08      	cmp	r3, #8
 800ee38:	d10b      	bne.n	800ee52 <_printf_i+0x146>
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	07df      	lsls	r7, r3, #31
 800ee3e:	d508      	bpl.n	800ee52 <_printf_i+0x146>
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	6861      	ldr	r1, [r4, #4]
 800ee44:	4299      	cmp	r1, r3
 800ee46:	bfde      	ittt	le
 800ee48:	2330      	movle	r3, #48	@ 0x30
 800ee4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee4e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ee52:	1b92      	subs	r2, r2, r6
 800ee54:	6122      	str	r2, [r4, #16]
 800ee56:	464b      	mov	r3, r9
 800ee58:	4621      	mov	r1, r4
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	f8cd a000 	str.w	sl, [sp]
 800ee60:	aa03      	add	r2, sp, #12
 800ee62:	f7ff fee1 	bl	800ec28 <_printf_common>
 800ee66:	3001      	adds	r0, #1
 800ee68:	d14a      	bne.n	800ef00 <_printf_i+0x1f4>
 800ee6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee6e:	b004      	add	sp, #16
 800ee70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	f043 0320 	orr.w	r3, r3, #32
 800ee7a:	6023      	str	r3, [r4, #0]
 800ee7c:	2778      	movs	r7, #120	@ 0x78
 800ee7e:	4832      	ldr	r0, [pc, #200]	@ (800ef48 <_printf_i+0x23c>)
 800ee80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee84:	6823      	ldr	r3, [r4, #0]
 800ee86:	6831      	ldr	r1, [r6, #0]
 800ee88:	061f      	lsls	r7, r3, #24
 800ee8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee8e:	d402      	bmi.n	800ee96 <_printf_i+0x18a>
 800ee90:	065f      	lsls	r7, r3, #25
 800ee92:	bf48      	it	mi
 800ee94:	b2ad      	uxthmi	r5, r5
 800ee96:	6031      	str	r1, [r6, #0]
 800ee98:	07d9      	lsls	r1, r3, #31
 800ee9a:	bf44      	itt	mi
 800ee9c:	f043 0320 	orrmi.w	r3, r3, #32
 800eea0:	6023      	strmi	r3, [r4, #0]
 800eea2:	b11d      	cbz	r5, 800eeac <_printf_i+0x1a0>
 800eea4:	2310      	movs	r3, #16
 800eea6:	e7ab      	b.n	800ee00 <_printf_i+0xf4>
 800eea8:	4826      	ldr	r0, [pc, #152]	@ (800ef44 <_printf_i+0x238>)
 800eeaa:	e7e9      	b.n	800ee80 <_printf_i+0x174>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	f023 0320 	bic.w	r3, r3, #32
 800eeb2:	6023      	str	r3, [r4, #0]
 800eeb4:	e7f6      	b.n	800eea4 <_printf_i+0x198>
 800eeb6:	4616      	mov	r6, r2
 800eeb8:	e7bd      	b.n	800ee36 <_printf_i+0x12a>
 800eeba:	6833      	ldr	r3, [r6, #0]
 800eebc:	6825      	ldr	r5, [r4, #0]
 800eebe:	1d18      	adds	r0, r3, #4
 800eec0:	6961      	ldr	r1, [r4, #20]
 800eec2:	6030      	str	r0, [r6, #0]
 800eec4:	062e      	lsls	r6, r5, #24
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	d501      	bpl.n	800eece <_printf_i+0x1c2>
 800eeca:	6019      	str	r1, [r3, #0]
 800eecc:	e002      	b.n	800eed4 <_printf_i+0x1c8>
 800eece:	0668      	lsls	r0, r5, #25
 800eed0:	d5fb      	bpl.n	800eeca <_printf_i+0x1be>
 800eed2:	8019      	strh	r1, [r3, #0]
 800eed4:	2300      	movs	r3, #0
 800eed6:	4616      	mov	r6, r2
 800eed8:	6123      	str	r3, [r4, #16]
 800eeda:	e7bc      	b.n	800ee56 <_printf_i+0x14a>
 800eedc:	6833      	ldr	r3, [r6, #0]
 800eede:	2100      	movs	r1, #0
 800eee0:	1d1a      	adds	r2, r3, #4
 800eee2:	6032      	str	r2, [r6, #0]
 800eee4:	681e      	ldr	r6, [r3, #0]
 800eee6:	6862      	ldr	r2, [r4, #4]
 800eee8:	4630      	mov	r0, r6
 800eeea:	f000 f877 	bl	800efdc <memchr>
 800eeee:	b108      	cbz	r0, 800eef4 <_printf_i+0x1e8>
 800eef0:	1b80      	subs	r0, r0, r6
 800eef2:	6060      	str	r0, [r4, #4]
 800eef4:	6863      	ldr	r3, [r4, #4]
 800eef6:	6123      	str	r3, [r4, #16]
 800eef8:	2300      	movs	r3, #0
 800eefa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eefe:	e7aa      	b.n	800ee56 <_printf_i+0x14a>
 800ef00:	4632      	mov	r2, r6
 800ef02:	4649      	mov	r1, r9
 800ef04:	4640      	mov	r0, r8
 800ef06:	6923      	ldr	r3, [r4, #16]
 800ef08:	47d0      	blx	sl
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	d0ad      	beq.n	800ee6a <_printf_i+0x15e>
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	079b      	lsls	r3, r3, #30
 800ef12:	d413      	bmi.n	800ef3c <_printf_i+0x230>
 800ef14:	68e0      	ldr	r0, [r4, #12]
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	4298      	cmp	r0, r3
 800ef1a:	bfb8      	it	lt
 800ef1c:	4618      	movlt	r0, r3
 800ef1e:	e7a6      	b.n	800ee6e <_printf_i+0x162>
 800ef20:	2301      	movs	r3, #1
 800ef22:	4632      	mov	r2, r6
 800ef24:	4649      	mov	r1, r9
 800ef26:	4640      	mov	r0, r8
 800ef28:	47d0      	blx	sl
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	d09d      	beq.n	800ee6a <_printf_i+0x15e>
 800ef2e:	3501      	adds	r5, #1
 800ef30:	68e3      	ldr	r3, [r4, #12]
 800ef32:	9903      	ldr	r1, [sp, #12]
 800ef34:	1a5b      	subs	r3, r3, r1
 800ef36:	42ab      	cmp	r3, r5
 800ef38:	dcf2      	bgt.n	800ef20 <_printf_i+0x214>
 800ef3a:	e7eb      	b.n	800ef14 <_printf_i+0x208>
 800ef3c:	2500      	movs	r5, #0
 800ef3e:	f104 0619 	add.w	r6, r4, #25
 800ef42:	e7f5      	b.n	800ef30 <_printf_i+0x224>
 800ef44:	0800f4a4 	.word	0x0800f4a4
 800ef48:	0800f4b5 	.word	0x0800f4b5

0800ef4c <_realloc_r>:
 800ef4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef50:	4680      	mov	r8, r0
 800ef52:	4615      	mov	r5, r2
 800ef54:	460c      	mov	r4, r1
 800ef56:	b921      	cbnz	r1, 800ef62 <_realloc_r+0x16>
 800ef58:	4611      	mov	r1, r2
 800ef5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5e:	f7ff bb67 	b.w	800e630 <_malloc_r>
 800ef62:	b92a      	cbnz	r2, 800ef70 <_realloc_r+0x24>
 800ef64:	f7ff fcc0 	bl	800e8e8 <_free_r>
 800ef68:	2400      	movs	r4, #0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef70:	f000 f850 	bl	800f014 <_malloc_usable_size_r>
 800ef74:	4285      	cmp	r5, r0
 800ef76:	4606      	mov	r6, r0
 800ef78:	d802      	bhi.n	800ef80 <_realloc_r+0x34>
 800ef7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ef7e:	d8f4      	bhi.n	800ef6a <_realloc_r+0x1e>
 800ef80:	4629      	mov	r1, r5
 800ef82:	4640      	mov	r0, r8
 800ef84:	f7ff fb54 	bl	800e630 <_malloc_r>
 800ef88:	4607      	mov	r7, r0
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d0ec      	beq.n	800ef68 <_realloc_r+0x1c>
 800ef8e:	42b5      	cmp	r5, r6
 800ef90:	462a      	mov	r2, r5
 800ef92:	4621      	mov	r1, r4
 800ef94:	bf28      	it	cs
 800ef96:	4632      	movcs	r2, r6
 800ef98:	f000 f82e 	bl	800eff8 <memcpy>
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	4640      	mov	r0, r8
 800efa0:	f7ff fca2 	bl	800e8e8 <_free_r>
 800efa4:	463c      	mov	r4, r7
 800efa6:	e7e0      	b.n	800ef6a <_realloc_r+0x1e>

0800efa8 <memmove>:
 800efa8:	4288      	cmp	r0, r1
 800efaa:	b510      	push	{r4, lr}
 800efac:	eb01 0402 	add.w	r4, r1, r2
 800efb0:	d902      	bls.n	800efb8 <memmove+0x10>
 800efb2:	4284      	cmp	r4, r0
 800efb4:	4623      	mov	r3, r4
 800efb6:	d807      	bhi.n	800efc8 <memmove+0x20>
 800efb8:	1e43      	subs	r3, r0, #1
 800efba:	42a1      	cmp	r1, r4
 800efbc:	d008      	beq.n	800efd0 <memmove+0x28>
 800efbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efc6:	e7f8      	b.n	800efba <memmove+0x12>
 800efc8:	4601      	mov	r1, r0
 800efca:	4402      	add	r2, r0
 800efcc:	428a      	cmp	r2, r1
 800efce:	d100      	bne.n	800efd2 <memmove+0x2a>
 800efd0:	bd10      	pop	{r4, pc}
 800efd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efda:	e7f7      	b.n	800efcc <memmove+0x24>

0800efdc <memchr>:
 800efdc:	4603      	mov	r3, r0
 800efde:	b510      	push	{r4, lr}
 800efe0:	b2c9      	uxtb	r1, r1
 800efe2:	4402      	add	r2, r0
 800efe4:	4293      	cmp	r3, r2
 800efe6:	4618      	mov	r0, r3
 800efe8:	d101      	bne.n	800efee <memchr+0x12>
 800efea:	2000      	movs	r0, #0
 800efec:	e003      	b.n	800eff6 <memchr+0x1a>
 800efee:	7804      	ldrb	r4, [r0, #0]
 800eff0:	3301      	adds	r3, #1
 800eff2:	428c      	cmp	r4, r1
 800eff4:	d1f6      	bne.n	800efe4 <memchr+0x8>
 800eff6:	bd10      	pop	{r4, pc}

0800eff8 <memcpy>:
 800eff8:	440a      	add	r2, r1
 800effa:	4291      	cmp	r1, r2
 800effc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f000:	d100      	bne.n	800f004 <memcpy+0xc>
 800f002:	4770      	bx	lr
 800f004:	b510      	push	{r4, lr}
 800f006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f00a:	4291      	cmp	r1, r2
 800f00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f010:	d1f9      	bne.n	800f006 <memcpy+0xe>
 800f012:	bd10      	pop	{r4, pc}

0800f014 <_malloc_usable_size_r>:
 800f014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f018:	1f18      	subs	r0, r3, #4
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bfbc      	itt	lt
 800f01e:	580b      	ldrlt	r3, [r1, r0]
 800f020:	18c0      	addlt	r0, r0, r3
 800f022:	4770      	bx	lr

0800f024 <_init>:
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f026:	bf00      	nop
 800f028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02a:	bc08      	pop	{r3}
 800f02c:	469e      	mov	lr, r3
 800f02e:	4770      	bx	lr

0800f030 <_fini>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	bf00      	nop
 800f034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f036:	bc08      	pop	{r3}
 800f038:	469e      	mov	lr, r3
 800f03a:	4770      	bx	lr
