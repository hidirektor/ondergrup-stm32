
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dedc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  0800e0c0  0800e0c0  0000f0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e990  0800e990  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e990  0800e990  0000f990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e998  0800e998  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e998  0800e998  0000f998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e99c  0800e99c  0000f99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800e9a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  0800f970  00010fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800f970  00011b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190f3  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003797  00000000  00000000  0002a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0002ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ae  00000000  00000000  0002faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb93  00000000  00000000  0004c352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05f2  00000000  00000000  00068ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001094d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005510  00000000  00000000  0010951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e0a8 	.word	0x0800e0a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e0a8 	.word	0x0800e0a8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 faca 	bl	80007d8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]
	idVerifyVal = eepromData[49];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800025c:	4b95      	ldr	r3, [pc, #596]	@ (80004b4 <eepromKontrol+0x280>)
 800025e:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000260:	4b91      	ldr	r3, [pc, #580]	@ (80004a8 <eepromKontrol+0x274>)
 8000262:	78da      	ldrb	r2, [r3, #3]
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b8f      	ldr	r3, [pc, #572]	@ (80004a8 <eepromKontrol+0x274>)
 800026a:	785a      	ldrb	r2, [r3, #1]
 800026c:	4b93      	ldr	r3, [pc, #588]	@ (80004bc <eepromKontrol+0x288>)
 800026e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000270:	4b8d      	ldr	r3, [pc, #564]	@ (80004a8 <eepromKontrol+0x274>)
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	4b92      	ldr	r3, [pc, #584]	@ (80004c0 <eepromKontrol+0x28c>)
 8000276:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000278:	4b8b      	ldr	r3, [pc, #556]	@ (80004a8 <eepromKontrol+0x274>)
 800027a:	791a      	ldrb	r2, [r3, #4]
 800027c:	4b91      	ldr	r3, [pc, #580]	@ (80004c4 <eepromKontrol+0x290>)
 800027e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000280:	4b89      	ldr	r3, [pc, #548]	@ (80004a8 <eepromKontrol+0x274>)
 8000282:	795a      	ldrb	r2, [r3, #5]
 8000284:	4b90      	ldr	r3, [pc, #576]	@ (80004c8 <eepromKontrol+0x294>)
 8000286:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000288:	4b87      	ldr	r3, [pc, #540]	@ (80004a8 <eepromKontrol+0x274>)
 800028a:	799a      	ldrb	r2, [r3, #6]
 800028c:	4b8f      	ldr	r3, [pc, #572]	@ (80004cc <eepromKontrol+0x298>)
 800028e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000290:	4b85      	ldr	r3, [pc, #532]	@ (80004a8 <eepromKontrol+0x274>)
 8000292:	79da      	ldrb	r2, [r3, #7]
 8000294:	4b8e      	ldr	r3, [pc, #568]	@ (80004d0 <eepromKontrol+0x29c>)
 8000296:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000298:	4b83      	ldr	r3, [pc, #524]	@ (80004a8 <eepromKontrol+0x274>)
 800029a:	7a1a      	ldrb	r2, [r3, #8]
 800029c:	4b8d      	ldr	r3, [pc, #564]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a0:	4b81      	ldr	r3, [pc, #516]	@ (80004a8 <eepromKontrol+0x274>)
 80002a2:	7a5a      	ldrb	r2, [r3, #9]
 80002a4:	4b8c      	ldr	r3, [pc, #560]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a8:	4b7f      	ldr	r3, [pc, #508]	@ (80004a8 <eepromKontrol+0x274>)
 80002aa:	7a9a      	ldrb	r2, [r3, #10]
 80002ac:	4b8b      	ldr	r3, [pc, #556]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b0:	4b7d      	ldr	r3, [pc, #500]	@ (80004a8 <eepromKontrol+0x274>)
 80002b2:	7ada      	ldrb	r2, [r3, #11]
 80002b4:	4b8a      	ldr	r3, [pc, #552]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b8:	4b7b      	ldr	r3, [pc, #492]	@ (80004a8 <eepromKontrol+0x274>)
 80002ba:	7b1a      	ldrb	r2, [r3, #12]
 80002bc:	4b89      	ldr	r3, [pc, #548]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002be:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c0:	4b79      	ldr	r3, [pc, #484]	@ (80004a8 <eepromKontrol+0x274>)
 80002c2:	7b5a      	ldrb	r2, [r3, #13]
 80002c4:	4b88      	ldr	r3, [pc, #544]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c8:	4b77      	ldr	r3, [pc, #476]	@ (80004a8 <eepromKontrol+0x274>)
 80002ca:	7b9a      	ldrb	r2, [r3, #14]
 80002cc:	4b87      	ldr	r3, [pc, #540]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ce:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d0:	4b75      	ldr	r3, [pc, #468]	@ (80004a8 <eepromKontrol+0x274>)
 80002d2:	7bda      	ldrb	r2, [r3, #15]
 80002d4:	4b86      	ldr	r3, [pc, #536]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d8:	4b73      	ldr	r3, [pc, #460]	@ (80004a8 <eepromKontrol+0x274>)
 80002da:	7c1a      	ldrb	r2, [r3, #16]
 80002dc:	4b85      	ldr	r3, [pc, #532]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002de:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e0:	4b71      	ldr	r3, [pc, #452]	@ (80004a8 <eepromKontrol+0x274>)
 80002e2:	7c5a      	ldrb	r2, [r3, #17]
 80002e4:	4b84      	ldr	r3, [pc, #528]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e6:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e8:	4b6f      	ldr	r3, [pc, #444]	@ (80004a8 <eepromKontrol+0x274>)
 80002ea:	7c9a      	ldrb	r2, [r3, #18]
 80002ec:	4b83      	ldr	r3, [pc, #524]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ee:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f0:	4b6d      	ldr	r3, [pc, #436]	@ (80004a8 <eepromKontrol+0x274>)
 80002f2:	7cda      	ldrb	r2, [r3, #19]
 80002f4:	4b82      	ldr	r3, [pc, #520]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f8:	4b6b      	ldr	r3, [pc, #428]	@ (80004a8 <eepromKontrol+0x274>)
 80002fa:	7d1a      	ldrb	r2, [r3, #20]
 80002fc:	4b81      	ldr	r3, [pc, #516]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fe:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000300:	4b69      	ldr	r3, [pc, #420]	@ (80004a8 <eepromKontrol+0x274>)
 8000302:	7d5a      	ldrb	r2, [r3, #21]
 8000304:	4b80      	ldr	r3, [pc, #512]	@ (8000508 <eepromKontrol+0x2d4>)
 8000306:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000308:	4b67      	ldr	r3, [pc, #412]	@ (80004a8 <eepromKontrol+0x274>)
 800030a:	7d9a      	ldrb	r2, [r3, #22]
 800030c:	4b7f      	ldr	r3, [pc, #508]	@ (800050c <eepromKontrol+0x2d8>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000310:	4b65      	ldr	r3, [pc, #404]	@ (80004a8 <eepromKontrol+0x274>)
 8000312:	7dda      	ldrb	r2, [r3, #23]
 8000314:	4b7e      	ldr	r3, [pc, #504]	@ (8000510 <eepromKontrol+0x2dc>)
 8000316:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000318:	4b63      	ldr	r3, [pc, #396]	@ (80004a8 <eepromKontrol+0x274>)
 800031a:	7e1a      	ldrb	r2, [r3, #24]
 800031c:	4b7d      	ldr	r3, [pc, #500]	@ (8000514 <eepromKontrol+0x2e0>)
 800031e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000320:	4b61      	ldr	r3, [pc, #388]	@ (80004a8 <eepromKontrol+0x274>)
 8000322:	7e5a      	ldrb	r2, [r3, #25]
 8000324:	4b7c      	ldr	r3, [pc, #496]	@ (8000518 <eepromKontrol+0x2e4>)
 8000326:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000328:	4b5f      	ldr	r3, [pc, #380]	@ (80004a8 <eepromKontrol+0x274>)
 800032a:	7e9a      	ldrb	r2, [r3, #26]
 800032c:	4b7b      	ldr	r3, [pc, #492]	@ (800051c <eepromKontrol+0x2e8>)
 800032e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000330:	4b5d      	ldr	r3, [pc, #372]	@ (80004a8 <eepromKontrol+0x274>)
 8000332:	7eda      	ldrb	r2, [r3, #27]
 8000334:	4b7a      	ldr	r3, [pc, #488]	@ (8000520 <eepromKontrol+0x2ec>)
 8000336:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000338:	4b5b      	ldr	r3, [pc, #364]	@ (80004a8 <eepromKontrol+0x274>)
 800033a:	7f1a      	ldrb	r2, [r3, #28]
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <eepromKontrol+0x2f0>)
 800033e:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000340:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <eepromKontrol+0x274>)
 8000342:	7f5a      	ldrb	r2, [r3, #29]
 8000344:	4b78      	ldr	r3, [pc, #480]	@ (8000528 <eepromKontrol+0x2f4>)
 8000346:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000348:	4b57      	ldr	r3, [pc, #348]	@ (80004a8 <eepromKontrol+0x274>)
 800034a:	7f9a      	ldrb	r2, [r3, #30]
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d2:	4b35      	ldr	r3, [pc, #212]	@ (80004a8 <eepromKontrol+0x274>)
 80003d4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d8:	4b62      	ldr	r3, [pc, #392]	@ (8000564 <eepromKontrol+0x330>)
 80003da:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <eepromKontrol+0x288>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d902      	bls.n	80003ea <eepromKontrol+0x1b6>
	    calismaSekli=0;
 80003e4:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <eepromKontrol+0x288>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d902      	bls.n	80003f8 <eepromKontrol+0x1c4>
	    emniyetCercevesi=1;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003f8:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d902      	bls.n	8000406 <eepromKontrol+0x1d2>
	    yavaslamaLimit=0;
 8000400:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000406:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <eepromKontrol+0x294>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d902      	bls.n	8000414 <eepromKontrol+0x1e0>
	    altLimit=1;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <eepromKontrol+0x294>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000414:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d902      	bls.n	8000422 <eepromKontrol+0x1ee>
	    basincSalteri=1;
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000422:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <eepromKontrol+0x29c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d902      	bls.n	8000430 <eepromKontrol+0x1fc>
	    kapiSecimleri=3;
 800042a:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <eepromKontrol+0x29c>)
 800042c:	2203      	movs	r2, #3
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000430:	4b42      	ldr	r3, [pc, #264]	@ (800053c <eepromKontrol+0x308>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d902      	bls.n	800043e <eepromKontrol+0x20a>
	    kapiAcTipi=0;
 8000438:	4b40      	ldr	r3, [pc, #256]	@ (800053c <eepromKontrol+0x308>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800043e:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d902      	bls.n	800044c <eepromKontrol+0x218>
	    kapi1Tip=1;
 8000446:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b05      	cmp	r3, #5
 8000452:	d902      	bls.n	800045a <eepromKontrol+0x226>
	    kapi1AcSure=5;
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <eepromKontrol+0x2a8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d902      	bls.n	8000468 <eepromKontrol+0x234>
	    kapi2Tip=1;
 8000462:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <eepromKontrol+0x2a8>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b05      	cmp	r3, #5
 800046e:	d902      	bls.n	8000476 <eepromKontrol+0x242>
	    kapi2AcSure=5;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d902      	bls.n	8000484 <eepromKontrol+0x250>
	    kapitablaTip=1;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000484:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <eepromKontrol+0x300>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d902      	bls.n	8000492 <eepromKontrol+0x25e>
	    kapiTablaAcKonum=2;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <eepromKontrol+0x300>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d902      	bls.n	80004a0 <eepromKontrol+0x26c>
	    kapiTablaAcSure=5;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <eepromKontrol+0x2b4>)
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	e05f      	b.n	8000568 <eepromKontrol+0x334>
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	200010e8 	.word	0x200010e8
 80004b8:	20001091 	.word	0x20001091
 80004bc:	200010bd 	.word	0x200010bd
 80004c0:	200010c0 	.word	0x200010c0
 80004c4:	200010c1 	.word	0x200010c1
 80004c8:	200010c2 	.word	0x200010c2
 80004cc:	200010c3 	.word	0x200010c3
 80004d0:	200010c4 	.word	0x200010c4
 80004d4:	200010c5 	.word	0x200010c5
 80004d8:	200010d5 	.word	0x200010d5
 80004dc:	200010c6 	.word	0x200010c6
 80004e0:	200010d6 	.word	0x200010d6
 80004e4:	200010c7 	.word	0x200010c7
 80004e8:	200010d7 	.word	0x200010d7
 80004ec:	200010ca 	.word	0x200010ca
 80004f0:	200010cb 	.word	0x200010cb
 80004f4:	200010cc 	.word	0x200010cc
 80004f8:	200010cd 	.word	0x200010cd
 80004fc:	200010ce 	.word	0x200010ce
 8000500:	200010cf 	.word	0x200010cf
 8000504:	200010d0 	.word	0x200010d0
 8000508:	200010d1 	.word	0x200010d1
 800050c:	200010d2 	.word	0x200010d2
 8000510:	200010d3 	.word	0x200010d3
 8000514:	200010d4 	.word	0x200010d4
 8000518:	200010d8 	.word	0x200010d8
 800051c:	200010da 	.word	0x200010da
 8000520:	200010b4 	.word	0x200010b4
 8000524:	200010b5 	.word	0x200010b5
 8000528:	200010b6 	.word	0x200010b6
 800052c:	200010b7 	.word	0x200010b7
 8000530:	200010dc 	.word	0x200010dc
 8000534:	200010c9 	.word	0x200010c9
 8000538:	200010db 	.word	0x200010db
 800053c:	200010c8 	.word	0x200010c8
 8000540:	200010dd 	.word	0x200010dd
 8000544:	200010de 	.word	0x200010de
 8000548:	200010df 	.word	0x200010df
 800054c:	200010e0 	.word	0x200010e0
 8000550:	200010e1 	.word	0x200010e1
 8000554:	200010e2 	.word	0x200010e2
 8000558:	200010e3 	.word	0x200010e3
 800055c:	200010e4 	.word	0x200010e4
 8000560:	200010e5 	.word	0x200010e5
 8000564:	200010e6 	.word	0x200010e6
 8000568:	d902      	bls.n	8000570 <eepromKontrol+0x33c>
	    yukariYavasLimit=0;
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <eepromKontrol+0x440>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000570:	4b41      	ldr	r3, [pc, #260]	@ (8000678 <eepromKontrol+0x444>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d902      	bls.n	800057e <eepromKontrol+0x34a>
	    devirmeYuruyusSecim=0;
 8000578:	4b3f      	ldr	r3, [pc, #252]	@ (8000678 <eepromKontrol+0x444>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800057e:	4b3f      	ldr	r3, [pc, #252]	@ (800067c <eepromKontrol+0x448>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d902      	bls.n	800058c <eepromKontrol+0x358>
	    devirmeYukariIleriLimit=1;
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <eepromKontrol+0x448>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <eepromKontrol+0x44c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d902      	bls.n	800059a <eepromKontrol+0x366>
	    devirmeAsagiGeriLimit=1;
 8000594:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <eepromKontrol+0x44c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <eepromKontrol+0x450>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d902      	bls.n	80005a8 <eepromKontrol+0x374>
	    devirmeSilindirTipi=0;
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <eepromKontrol+0x450>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005a8:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <eepromKontrol+0x454>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d902      	bls.n	80005b6 <eepromKontrol+0x382>
	    platformSilindirTipi=0;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <eepromKontrol+0x454>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005b6:	4b35      	ldr	r3, [pc, #212]	@ (800068c <eepromKontrol+0x458>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	d902      	bls.n	80005c4 <eepromKontrol+0x390>
	    yukariValfTmr=0;
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <eepromKontrol+0x458>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005c4:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <eepromKontrol+0x45c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d902      	bls.n	80005d2 <eepromKontrol+0x39e>
	    asagiValfTmr=0;
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <eepromKontrol+0x45c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005d2:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <eepromKontrol+0x460>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b05      	cmp	r3, #5
 80005d8:	d902      	bls.n	80005e0 <eepromKontrol+0x3ac>
	    devirmeYukariIleriTmr=0;
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <eepromKontrol+0x460>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <eepromKontrol+0x464>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d902      	bls.n	80005ee <eepromKontrol+0x3ba>
	    devirmeAsagiGeriTmr=0;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <eepromKontrol+0x464>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <eepromKontrol+0x468>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2bb4      	cmp	r3, #180	@ 0xb4
 80005f4:	d902      	bls.n	80005fc <eepromKontrol+0x3c8>
	    makineCalismaTmr=60;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <eepromKontrol+0x468>)
 80005f8:	223c      	movs	r2, #60	@ 0x3c
 80005fa:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <eepromKontrol+0x46c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d902      	bls.n	800060a <eepromKontrol+0x3d6>
	    buzzer=0;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <eepromKontrol+0x46c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <eepromKontrol+0x470>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d902      	bls.n	8000618 <eepromKontrol+0x3e4>
	    demoMode=0;
 8000612:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <eepromKontrol+0x470>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <eepromKontrol+0x474>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d902      	bls.n	8000626 <eepromKontrol+0x3f2>
	    calismaSayModu=0;
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <eepromKontrol+0x474>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <eepromKontrol+0x478>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d902      	bls.n	8000634 <eepromKontrol+0x400>
	    dilSecim=0;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <eepromKontrol+0x478>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <eepromKontrol+0x47c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d902      	bls.n	8000642 <eepromKontrol+0x40e>
		iotMode=0;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <eepromKontrol+0x47c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 f938 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 f9e9 	bl	8009a20 <HAL_Delay>

	convertArrays(2);
 800064e:	2002      	movs	r0, #2
 8000650:	f000 f932 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 f9e3 	bl	8009a20 <HAL_Delay>

	convertArrays(3);
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f92c 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000660:	20fa      	movs	r0, #250	@ 0xfa
 8000662:	f009 f9dd 	bl	8009a20 <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <eepromKontrol+0x478>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fd4e 	bl	800610c <loadMenuTexts>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200010ca 	.word	0x200010ca
 8000678:	200010cb 	.word	0x200010cb
 800067c:	200010cc 	.word	0x200010cc
 8000680:	200010cd 	.word	0x200010cd
 8000684:	200010ce 	.word	0x200010ce
 8000688:	200010cf 	.word	0x200010cf
 800068c:	200010d0 	.word	0x200010d0
 8000690:	200010d1 	.word	0x200010d1
 8000694:	200010d2 	.word	0x200010d2
 8000698:	200010d3 	.word	0x200010d3
 800069c:	200010d4 	.word	0x200010d4
 80006a0:	200010d8 	.word	0x200010d8
 80006a4:	200010da 	.word	0x200010da
 80006a8:	200010db 	.word	0x200010db
 80006ac:	200010dc 	.word	0x200010dc
 80006b0:	200010e7 	.word	0x200010e7

080006b4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006bc:	236e      	movs	r3, #110	@ 0x6e
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <saveEEPROM+0x38>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f816 	bl	80006f4 <EEPROM_Write>

    if(resultText == 1) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d104      	bne.n	80006d8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <saveEEPROM+0x3c>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	2002      	movs	r0, #2
 80006d4:	f008 fc4a 	bl	8008f6c <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006dc:	f009 f9a0 	bl	8009a20 <HAL_Delay>
    lcd_clear();
 80006e0:	f008 fc70 	bl	8008fc4 <lcd_clear>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000fec 	.word	0x20000fec
 80006f0:	20001860 	.word	0x20001860

080006f4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	81fb      	strh	r3, [r7, #14]
 8000702:	460b      	mov	r3, r1
 8000704:	81bb      	strh	r3, [r7, #12]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 800070a:	2306      	movs	r3, #6
 800070c:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	89bb      	ldrh	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	da00      	bge.n	800071e <EEPROM_Write+0x2a>
 800071c:	333f      	adds	r3, #63	@ 0x3f
 800071e:	119b      	asrs	r3, r3, #6
 8000720:	b29a      	uxth	r2, r3
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	4413      	add	r3, r2
 8000726:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000728:	8afa      	ldrh	r2, [r7, #22]
 800072a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	e041      	b.n	80007c2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800073e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	b21a      	sxth	r2, r3
 8000748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000758:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800075a:	8bfa      	ldrh	r2, [r7, #30]
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d901      	bls.n	8000766 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	8a79      	ldrh	r1, [r7, #18]
 800076e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000772:	9202      	str	r2, [sp, #8]
 8000774:	8bfa      	ldrh	r2, [r7, #30]
 8000776:	9201      	str	r2, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2310      	movs	r3, #16
 800077c:	460a      	mov	r2, r1
 800077e:	21a0      	movs	r1, #160	@ 0xa0
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <EEPROM_Write+0xdc>)
 8000782:	f00a f9d7 	bl	800ab34 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800078a:	7c7b      	ldrb	r3, [r7, #17]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000790:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <EEPROM_Write+0xe0>)
 8000792:	2101      	movs	r1, #1
 8000794:	2002      	movs	r0, #2
 8000796:	f008 fbe9 	bl	8008f6c <lcd_print>
            return;
 800079a:	e016      	b.n	80007ca <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800079c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800079e:	3301      	adds	r3, #1
 80007a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	8bfb      	ldrh	r3, [r7, #30]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 80007ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007b0:	8bfb      	ldrh	r3, [r7, #30]
 80007b2:	4413      	add	r3, r2
 80007b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f009 f932 	bl	8009a20 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3301      	adds	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	8abb      	ldrh	r3, [r7, #20]
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbb9      	blt.n	800073e <EEPROM_Write+0x4a>
    }
}
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000193c 	.word	0x2000193c
 80007d4:	0800e0c0 	.word	0x0800e0c0

080007d8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af04      	add	r7, sp, #16
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	81fb      	strh	r3, [r7, #14]
 80007e6:	460b      	mov	r3, r1
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007ee:	2306      	movs	r3, #6
 80007f0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da00      	bge.n	8000802 <EEPROM_Read+0x2a>
 8000800:	333f      	adds	r3, #63	@ 0x3f
 8000802:	119b      	asrs	r3, r3, #6
 8000804:	b29a      	uxth	r2, r3
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4413      	add	r3, r2
 800080a:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 800080c:	8afa      	ldrh	r2, [r7, #22]
 800080e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	3301      	adds	r3, #1
 8000816:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
 8000820:	e03e      	b.n	80008a0 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000822:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800083c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800083e:	8bfa      	ldrh	r2, [r7, #30]
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	429a      	cmp	r2, r3
 8000844:	d901      	bls.n	800084a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	8a79      	ldrh	r1, [r7, #18]
 8000852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000856:	9202      	str	r2, [sp, #8]
 8000858:	8bfa      	ldrh	r2, [r7, #30]
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2310      	movs	r3, #16
 8000860:	460a      	mov	r2, r1
 8000862:	21a0      	movs	r1, #160	@ 0xa0
 8000864:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <EEPROM_Read+0xd8>)
 8000866:	f00a fa5f 	bl	800ad28 <HAL_I2C_Mem_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800086e:	7c7b      	ldrb	r3, [r7, #17]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000874:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <EEPROM_Read+0xdc>)
 8000876:	2101      	movs	r1, #1
 8000878:	2002      	movs	r0, #2
 800087a:	f008 fb77 	bl	8008f6c <lcd_print>
            return;
 800087e:	e013      	b.n	80008a8 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000882:	3301      	adds	r3, #1
 8000884:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	8bfb      	ldrh	r3, [r7, #30]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000894:	8bfb      	ldrh	r3, [r7, #30]
 8000896:	4413      	add	r3, r2
 8000898:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	3301      	adds	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	8abb      	ldrh	r3, [r7, #20]
 80008a2:	6a3a      	ldr	r2, [r7, #32]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbbc      	blt.n	8000822 <EEPROM_Read+0x4a>
    }
}
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000193c 	.word	0x2000193c
 80008b4:	0800e0d4 	.word	0x0800e0d4

080008b8 <convertArrays>:

void convertArrays(int state) {
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11d      	bne.n	8000902 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <convertArrays+0xe0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
 80008d0:	e013      	b.n	80008fa <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008d2:	4a32      	ldr	r2, [pc, #200]	@ (800099c <convertArrays+0xe4>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008dc:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <convertArrays+0xe8>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	@ (80009a4 <convertArrays+0xec>)
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	4413      	add	r3, r2
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	3301      	adds	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	3301      	adds	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b0b      	cmp	r3, #11
 80008fe:	dde8      	ble.n	80008d2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000900:	e045      	b.n	800098e <convertArrays+0xd6>
	} else if(state == 2) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d121      	bne.n	800094c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <convertArrays+0xf0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e017      	b.n	8000944 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <convertArrays+0xe4>)
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00e      	beq.n	800093e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <convertArrays+0xe4>)
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <convertArrays+0xf4>)
 800092c:	5c99      	ldrb	r1, [r3, r2]
 800092e:	4a20      	ldr	r2, [pc, #128]	@ (80009b0 <convertArrays+0xf8>)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4413      	add	r3, r2
 8000934:	460a      	mov	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	3301      	adds	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	dde4      	ble.n	8000914 <convertArrays+0x5c>
}
 800094a:	e020      	b.n	800098e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <convertArrays+0xfc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e017      	b.n	8000988 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000958:	4a10      	ldr	r2, [pc, #64]	@ (800099c <convertArrays+0xe4>)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00e      	beq.n	8000982 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <convertArrays+0xe4>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <convertArrays+0xf4>)
 8000970:	5c99      	ldrb	r1, [r3, r2]
 8000972:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <convertArrays+0x100>)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	3301      	adds	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	dde4      	ble.n	8000958 <convertArrays+0xa0>
}
 800098e:	bf00      	nop
 8000990:	372c      	adds	r7, #44	@ 0x2c
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000000 	.word	0x20000000
 800099c:	20000fec 	.word	0x20000fec
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20001064 	.word	0x20001064
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000018 	.word	0x20000018
 80009b0:	20001070 	.word	0x20001070
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20001080 	.word	0x20001080

080009bc <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b09f      	sub	sp, #124	@ 0x7c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009c8:	4948      	ldr	r1, [pc, #288]	@ (8000aec <ESP8266_Init+0x130>)
 80009ca:	4849      	ldr	r0, [pc, #292]	@ (8000af0 <ESP8266_Init+0x134>)
 80009cc:	f00c ff10 	bl	800d7f0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009d0:	4847      	ldr	r0, [pc, #284]	@ (8000af0 <ESP8266_Init+0x134>)
 80009d2:	f7ff fc27 	bl	8000224 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	4944      	ldr	r1, [pc, #272]	@ (8000af0 <ESP8266_Init+0x134>)
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f00c f8ea 	bl	800cbb8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e8:	f009 f81a 	bl	8009a20 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009ec:	4941      	ldr	r1, [pc, #260]	@ (8000af4 <ESP8266_Init+0x138>)
 80009ee:	4840      	ldr	r0, [pc, #256]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f0:	f00c fefe 	bl	800d7f0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f4:	483e      	ldr	r0, [pc, #248]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f6:	f7ff fc15 	bl	8000224 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	493b      	ldr	r1, [pc, #236]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f00c f8d8 	bl	800cbb8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0c:	f009 f808 	bl	8009a20 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a10:	4939      	ldr	r1, [pc, #228]	@ (8000af8 <ESP8266_Init+0x13c>)
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a14:	f00c feec 	bl	800d7f0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a18:	4835      	ldr	r0, [pc, #212]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a1a:	f7ff fc03 	bl	8000224 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4932      	ldr	r1, [pc, #200]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f00c f8c6 	bl	800cbb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a30:	f008 fff6 	bl	8009a20 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a34:	4931      	ldr	r1, [pc, #196]	@ (8000afc <ESP8266_Init+0x140>)
 8000a36:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a38:	f00c feda 	bl	800d7f0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a3c:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a3e:	f7ff fbf1 	bl	8000224 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4929      	ldr	r1, [pc, #164]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f00c f8b4 	bl	800cbb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a54:	f008 ffe4 	bl	8009a20 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <ESP8266_Init+0x144>)
 8000a5e:	461c      	mov	r4, r3
 8000a60:	4613      	mov	r3, r2
 8000a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a64:	c407      	stmia	r4!, {r0, r1, r2}
 8000a66:	8023      	strh	r3, [r4, #0]
 8000a68:	3402      	adds	r4, #2
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00c ff1d 	bl	800d8b4 <strcat>
	strcat(str, "\",\"");
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbd0 	bl	8000224 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <ESP8266_Init+0x148>)
 8000a90:	6810      	ldr	r0, [r2, #0]
 8000a92:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00c ff0a 	bl	800d8b4 <strcat>
	strcat(str, "\"\r\n");
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbbd 	bl	8000224 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <ESP8266_Init+0x14c>)
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4912      	ldr	r1, [pc, #72]	@ (8000b0c <ESP8266_Init+0x150>)
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ac4:	f00c fe94 	bl	800d7f0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <ESP8266_Init+0x134>)
 8000aca:	f7ff fbab 	bl	8000224 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4906      	ldr	r1, [pc, #24]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f00c f86e 	bl	800cbb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000adc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae0:	f008 ff9e 	bl	8009a20 <HAL_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	377c      	adds	r7, #124	@ 0x7c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	0800e0e8 	.word	0x0800e0e8
 8000af0:	20001124 	.word	0x20001124
 8000af4:	0800e0f8 	.word	0x0800e0f8
 8000af8:	0800e104 	.word	0x0800e104
 8000afc:	0800e10c 	.word	0x0800e10c
 8000b00:	0800e11c 	.word	0x0800e11c
 8000b04:	0800e12c 	.word	0x0800e12c
 8000b08:	0800e130 	.word	0x0800e130
 8000b0c:	0800e134 	.word	0x0800e134

08000b10 <sendMachineData>:

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
	HAL_Delay(3000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	f6ad 0d94 	subw	sp, sp, #2196	@ 0x894
 8000b16:	af2c      	add	r7, sp, #176	@ 0xb0
 8000b18:	f507 64fc 	add.w	r4, r7, #2016	@ 0x7e0
 8000b1c:	f2a4 7444 	subw	r4, r4, #1860	@ 0x744
 8000b20:	6020      	str	r0, [r4, #0]
 8000b22:	f507 60fc 	add.w	r0, r7, #2016	@ 0x7e0
 8000b26:	f5a0 60e9 	sub.w	r0, r0, #1864	@ 0x748
 8000b2a:	6001      	str	r1, [r0, #0]
 8000b2c:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 8000b30:	f2a1 714c 	subw	r1, r1, #1868	@ 0x74c
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	f507 62fc 	add.w	r2, r7, #2016	@ 0x7e0
 8000b3a:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 8000b3e:	6013      	str	r3, [r2, #0]
    char local_txB[50];
    char json_data[1300];
    int len;

    // JSON verisini manuel olarak oluşturma
    snprintf(json_data, sizeof(json_data),
 8000b40:	4b9e      	ldr	r3, [pc, #632]	@ (8000dbc <sendMachineData+0x2ac>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b48:	4b9d      	ldr	r3, [pc, #628]	@ (8000dc0 <sendMachineData+0x2b0>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000b50:	4b9c      	ldr	r3, [pc, #624]	@ (8000dc4 <sendMachineData+0x2b4>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b58:	4b9b      	ldr	r3, [pc, #620]	@ (8000dc8 <sendMachineData+0x2b8>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b60:	4b9a      	ldr	r3, [pc, #616]	@ (8000dcc <sendMachineData+0x2bc>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000b66:	4b9a      	ldr	r3, [pc, #616]	@ (8000dd0 <sendMachineData+0x2c0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000b6c:	4b99      	ldr	r3, [pc, #612]	@ (8000dd4 <sendMachineData+0x2c4>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b72:	4b99      	ldr	r3, [pc, #612]	@ (8000dd8 <sendMachineData+0x2c8>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b78:	4b98      	ldr	r3, [pc, #608]	@ (8000ddc <sendMachineData+0x2cc>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000b7e:	4b98      	ldr	r3, [pc, #608]	@ (8000de0 <sendMachineData+0x2d0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b84:	4b97      	ldr	r3, [pc, #604]	@ (8000de4 <sendMachineData+0x2d4>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b8a:	4b97      	ldr	r3, [pc, #604]	@ (8000de8 <sendMachineData+0x2d8>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b90:	4b96      	ldr	r3, [pc, #600]	@ (8000dec <sendMachineData+0x2dc>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b96:	4b96      	ldr	r3, [pc, #600]	@ (8000df0 <sendMachineData+0x2e0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000b9c:	4b95      	ldr	r3, [pc, #596]	@ (8000df4 <sendMachineData+0x2e4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ba2:	4b95      	ldr	r3, [pc, #596]	@ (8000df8 <sendMachineData+0x2e8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ba8:	4b94      	ldr	r3, [pc, #592]	@ (8000dfc <sendMachineData+0x2ec>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bae:	4b94      	ldr	r3, [pc, #592]	@ (8000e00 <sendMachineData+0x2f0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bb4:	4b93      	ldr	r3, [pc, #588]	@ (8000e04 <sendMachineData+0x2f4>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000bba:	4b93      	ldr	r3, [pc, #588]	@ (8000e08 <sendMachineData+0x2f8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8000bc0:	4b92      	ldr	r3, [pc, #584]	@ (8000e0c <sendMachineData+0x2fc>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000bc6:	4b92      	ldr	r3, [pc, #584]	@ (8000e10 <sendMachineData+0x300>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bcc:	4b91      	ldr	r3, [pc, #580]	@ (8000e14 <sendMachineData+0x304>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bd2:	4b91      	ldr	r3, [pc, #580]	@ (8000e18 <sendMachineData+0x308>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000bd8:	4b90      	ldr	r3, [pc, #576]	@ (8000e1c <sendMachineData+0x30c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bde:	4b90      	ldr	r3, [pc, #576]	@ (8000e20 <sendMachineData+0x310>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000be4:	4b8f      	ldr	r3, [pc, #572]	@ (8000e24 <sendMachineData+0x314>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bea:	4b8f      	ldr	r3, [pc, #572]	@ (8000e28 <sendMachineData+0x318>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8000e2c <sendMachineData+0x31c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	4b8e      	ldr	r3, [pc, #568]	@ (8000e30 <sendMachineData+0x320>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	61bb      	str	r3, [r7, #24]
             machineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit,
             kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure,
             kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit,
             devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr,
             devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim,
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8000e34 <sendMachineData+0x324>)
 8000bfe:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    snprintf(json_data, sizeof(json_data),
 8000c02:	617b      	str	r3, [r7, #20]
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c04:	4b8b      	ldr	r3, [pc, #556]	@ (8000e34 <sendMachineData+0x324>)
 8000c06:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
    snprintf(json_data, sizeof(json_data),
 8000c0a:	613b      	str	r3, [r7, #16]
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c0c:	4b89      	ldr	r3, [pc, #548]	@ (8000e34 <sendMachineData+0x324>)
 8000c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    snprintf(json_data, sizeof(json_data),
 8000c12:	60fb      	str	r3, [r7, #12]
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c14:	4b87      	ldr	r3, [pc, #540]	@ (8000e34 <sendMachineData+0x324>)
 8000c16:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    snprintf(json_data, sizeof(json_data),
 8000c1a:	60bb      	str	r3, [r7, #8]
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c1c:	4b85      	ldr	r3, [pc, #532]	@ (8000e34 <sendMachineData+0x324>)
 8000c1e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    snprintf(json_data, sizeof(json_data),
 8000c22:	607b      	str	r3, [r7, #4]
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c24:	4b83      	ldr	r3, [pc, #524]	@ (8000e34 <sendMachineData+0x324>)
 8000c26:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    snprintf(json_data, sizeof(json_data),
 8000c2a:	603b      	str	r3, [r7, #0]
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c2c:	4b81      	ldr	r3, [pc, #516]	@ (8000e34 <sendMachineData+0x324>)
 8000c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    snprintf(json_data, sizeof(json_data),
 8000c32:	461d      	mov	r5, r3
             eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c34:	4b7f      	ldr	r3, [pc, #508]	@ (8000e34 <sendMachineData+0x324>)
 8000c36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    snprintf(json_data, sizeof(json_data),
 8000c3a:	4618      	mov	r0, r3
             eepromData[46], eepromData[47], lcdBacklightSure);
 8000c3c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e34 <sendMachineData+0x324>)
 8000c3e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    snprintf(json_data, sizeof(json_data),
 8000c42:	4619      	mov	r1, r3
             eepromData[46], eepromData[47], lcdBacklightSure);
 8000c44:	4b7b      	ldr	r3, [pc, #492]	@ (8000e34 <sendMachineData+0x324>)
 8000c46:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
    snprintf(json_data, sizeof(json_data),
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000c50:	f5a3 64e9 	sub.w	r4, r3, #1864	@ 0x748
 8000c54:	f107 06a0 	add.w	r6, r7, #160	@ 0xa0
 8000c58:	2306      	movs	r3, #6
 8000c5a:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000c5c:	9229      	str	r2, [sp, #164]	@ 0xa4
 8000c5e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8000c60:	9027      	str	r0, [sp, #156]	@ 0x9c
 8000c62:	9526      	str	r5, [sp, #152]	@ 0x98
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	9225      	str	r2, [sp, #148]	@ 0x94
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	9224      	str	r2, [sp, #144]	@ 0x90
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	9222      	str	r2, [sp, #136]	@ 0x88
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	9221      	str	r2, [sp, #132]	@ 0x84
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	9220      	str	r2, [sp, #128]	@ 0x80
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	921e      	str	r2, [sp, #120]	@ 0x78
 8000c84:	6a3a      	ldr	r2, [r7, #32]
 8000c86:	921d      	str	r2, [sp, #116]	@ 0x74
 8000c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c8a:	921c      	str	r2, [sp, #112]	@ 0x70
 8000c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c92:	921a      	str	r2, [sp, #104]	@ 0x68
 8000c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c96:	9219      	str	r2, [sp, #100]	@ 0x64
 8000c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c9a:	9218      	str	r2, [sp, #96]	@ 0x60
 8000c9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c9e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000ca0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ca2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ca6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000caa:	9214      	str	r2, [sp, #80]	@ 0x50
 8000cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cae:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cb2:	9212      	str	r2, [sp, #72]	@ 0x48
 8000cb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cb6:	9211      	str	r2, [sp, #68]	@ 0x44
 8000cb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000cba:	9210      	str	r2, [sp, #64]	@ 0x40
 8000cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000cbe:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000cc0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000cc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8000cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cc6:	920d      	str	r2, [sp, #52]	@ 0x34
 8000cc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000cca:	920c      	str	r2, [sp, #48]	@ 0x30
 8000ccc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000cce:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000cd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000cd2:	920a      	str	r2, [sp, #40]	@ 0x28
 8000cd4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cd8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000cda:	9208      	str	r2, [sp, #32]
 8000cdc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000cde:	9207      	str	r2, [sp, #28]
 8000ce0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000ce2:	9206      	str	r2, [sp, #24]
 8000ce4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000ce8:	9205      	str	r2, [sp, #20]
 8000cea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000cee:	9204      	str	r2, [sp, #16]
 8000cf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000cf4:	9203      	str	r2, [sp, #12]
 8000cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000d00:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000d0c:	f2a3 734c 	subw	r3, r3, #1868	@ 0x74c
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	4a48      	ldr	r2, [pc, #288]	@ (8000e38 <sendMachineData+0x328>)
 8000d18:	f240 5114 	movw	r1, #1300	@ 0x514
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f00c fd27 	bl	800d770 <sniprintf>

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000d22:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8000d26:	4a45      	ldr	r2, [pc, #276]	@ (8000e3c <sendMachineData+0x32c>)
 8000d28:	4945      	ldr	r1, [pc, #276]	@ (8000e40 <sendMachineData+0x330>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00c fd60 	bl	800d7f0 <siprintf>
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000d30:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fa75 	bl	8000224 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 8000d42:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000d46:	f2a3 7344 	subw	r3, r3, #1860	@ 0x744
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f00b ff34 	bl	800cbb8 <HAL_UART_Transmit_IT>
    HAL_Delay(4000);
 8000d50:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d54:	f008 fe64 	bl	8009a20 <HAL_Delay>

    snprintf(bufferTX, sizeof(bufferTX),
 8000d58:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa61 	bl	8000224 <strlen>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f507 60bd 	add.w	r0, r7, #1512	@ 0x5e8
 8000d68:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	9200      	str	r2, [sp, #0]
 8000d70:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <sendMachineData+0x334>)
 8000d72:	4a35      	ldr	r2, [pc, #212]	@ (8000e48 <sendMachineData+0x338>)
 8000d74:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d78:	f00c fcfa 	bl	800d770 <sniprintf>
             "Host: %s\r\n"
             "Content-Type: application/json\r\n"
             "Content-Length: %d\r\n\r\n"
             "%s",
             mainServerWithPort, strlen(json_data), json_data);
    len = strlen(bufferTX);
 8000d7c:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fa4f 	bl	8000224 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000d8c:	f207 53b4 	addw	r3, r7, #1460	@ 0x5b4
 8000d90:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 8000d94:	492d      	ldr	r1, [pc, #180]	@ (8000e4c <sendMachineData+0x33c>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00c fd2a 	bl	800d7f0 <siprintf>

    HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000d9c:	f207 53b4 	addw	r3, r7, #1460	@ 0x5b4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa3f 	bl	8000224 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f207 51b4 	addw	r1, r7, #1460	@ 0x5b4
 8000dae:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000db2:	f2a3 7344 	subw	r3, r3, #1860	@ 0x744
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	e04a      	b.n	8000e50 <sendMachineData+0x340>
 8000dba:	bf00      	nop
 8000dbc:	200010cb 	.word	0x200010cb
 8000dc0:	200010bd 	.word	0x200010bd
 8000dc4:	200010c0 	.word	0x200010c0
 8000dc8:	200010c1 	.word	0x200010c1
 8000dcc:	200010c2 	.word	0x200010c2
 8000dd0:	200010c9 	.word	0x200010c9
 8000dd4:	200010c3 	.word	0x200010c3
 8000dd8:	200010c4 	.word	0x200010c4
 8000ddc:	200010c8 	.word	0x200010c8
 8000de0:	200010c5 	.word	0x200010c5
 8000de4:	200010d5 	.word	0x200010d5
 8000de8:	200010c6 	.word	0x200010c6
 8000dec:	200010d6 	.word	0x200010d6
 8000df0:	200010c7 	.word	0x200010c7
 8000df4:	200010d7 	.word	0x200010d7
 8000df8:	200010ca 	.word	0x200010ca
 8000dfc:	200010cc 	.word	0x200010cc
 8000e00:	200010cd 	.word	0x200010cd
 8000e04:	200010ce 	.word	0x200010ce
 8000e08:	200010cf 	.word	0x200010cf
 8000e0c:	200010d0 	.word	0x200010d0
 8000e10:	200010d1 	.word	0x200010d1
 8000e14:	200010d2 	.word	0x200010d2
 8000e18:	200010d3 	.word	0x200010d3
 8000e1c:	200010d4 	.word	0x200010d4
 8000e20:	200010d8 	.word	0x200010d8
 8000e24:	200010da 	.word	0x200010da
 8000e28:	200010b4 	.word	0x200010b4
 8000e2c:	200010b5 	.word	0x200010b5
 8000e30:	200010dc 	.word	0x200010dc
 8000e34:	20000fec 	.word	0x20000fec
 8000e38:	0800e2ec 	.word	0x0800e2ec
 8000e3c:	0800e224 	.word	0x0800e224
 8000e40:	0800e234 	.word	0x0800e234
 8000e44:	0800e2c8 	.word	0x0800e2c8
 8000e48:	0800e6a0 	.word	0x0800e6a0
 8000e4c:	0800e2dc 	.word	0x0800e2dc
 8000e50:	f00b feb2 	bl	800cbb8 <HAL_UART_Transmit_IT>
    HAL_Delay(4000);
 8000e54:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000e58:	f008 fde2 	bl	8009a20 <HAL_Delay>

    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000e5c:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f9df 	bl	8000224 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 8000e6e:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8000e72:	f2a3 7344 	subw	r3, r3, #1860	@ 0x744
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	f00b fe9e 	bl	800cbb8 <HAL_UART_Transmit_IT>
    HAL_Delay(3000);
 8000e7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e80:	f008 fdce 	bl	8009a20 <HAL_Delay>
}
 8000e84:	bf00      	nop
 8000e86:	f207 77e4 	addw	r7, r7, #2020	@ 0x7e4
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8e:	bf00      	nop

08000e90 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000e9a:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <hata2EEPROM+0xa0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1e5a      	subs	r2, r3, #1
 8000ea0:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <hata2EEPROM+0xa4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a24      	ldr	r2, [pc, #144]	@ (8000f38 <hata2EEPROM+0xa8>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000eae:	f000 f8d1 	bl	8001054 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000eb2:	e000      	b.n	8000eb6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000eb4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	e012      	b.n	8000ee2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <hata2EEPROM+0xa4>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <hata2EEPROM+0xa8>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d107      	bne.n	8000edc <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <hata2EEPROM+0xa4>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4918      	ldr	r1, [pc, #96]	@ (8000f38 <hata2EEPROM+0xa8>)
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	54ca      	strb	r2, [r1, r3]
					break;
 8000eda:	e007      	b.n	8000eec <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <hata2EEPROM+0xa0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbe7      	blt.n	8000ebc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <hata2EEPROM+0xa4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	b299      	uxth	r1, r3
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <hata2EEPROM+0xa0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b298      	uxth	r0, r3
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <hata2EEPROM+0xa4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <hata2EEPROM+0xa8>)
 8000efe:	4413      	add	r3, r2
 8000f00:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <hata2EEPROM+0xa0>)
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	b292      	uxth	r2, r2
 8000f06:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000f0a:	9402      	str	r4, [sp, #8]
 8000f0c:	9201      	str	r2, [sp, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4603      	mov	r3, r0
 8000f12:	460a      	mov	r2, r1
 8000f14:	21a0      	movs	r1, #160	@ 0xa0
 8000f16:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <hata2EEPROM+0xac>)
 8000f18:	f009 fe0c 	bl	800ab34 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000f1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f20:	f008 fd7e 	bl	8009a20 <HAL_Delay>
	eepromKontrol();
 8000f24:	f7ff f986 	bl	8000234 <eepromKontrol>
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	20000094 	.word	0x20000094
 8000f34:	20000098 	.word	0x20000098
 8000f38:	20000fec 	.word	0x20000fec
 8000f3c:	2000193c 	.word	0x2000193c

08000f40 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10f      	bne.n	8000f70 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000f50:	4a38      	ldr	r2, [pc, #224]	@ (8001034 <hataKoduLcdGoster+0xf4>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2001      	movs	r0, #1
 8000f56:	f008 f809 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, "1");
 8000f5a:	4a37      	ldr	r2, [pc, #220]	@ (8001038 <hataKoduLcdGoster+0xf8>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f008 f804 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000f64:	4a35      	ldr	r2, [pc, #212]	@ (800103c <hataKoduLcdGoster+0xfc>)
 8000f66:	2107      	movs	r1, #7
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f007 ffff 	bl	8008f6c <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000f6e:	e05d      	b.n	800102c <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d10f      	bne.n	8000f96 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000f76:	4a2f      	ldr	r2, [pc, #188]	@ (8001034 <hataKoduLcdGoster+0xf4>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f007 fff6 	bl	8008f6c <lcd_print>
		lcd_print(2, 2, "2");
 8000f80:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <hataKoduLcdGoster+0x100>)
 8000f82:	2102      	movs	r1, #2
 8000f84:	2002      	movs	r0, #2
 8000f86:	f007 fff1 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800103c <hataKoduLcdGoster+0xfc>)
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f007 ffec 	bl	8008f6c <lcd_print>
}
 8000f94:	e04a      	b.n	800102c <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d10f      	bne.n	8000fbc <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <hataKoduLcdGoster+0xf4>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f007 ffe3 	bl	8008f6c <lcd_print>
		lcd_print(2, 3, "3");
 8000fa6:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <hataKoduLcdGoster+0x104>)
 8000fa8:	2103      	movs	r1, #3
 8000faa:	2002      	movs	r0, #2
 8000fac:	f007 ffde 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000fb0:	4a22      	ldr	r2, [pc, #136]	@ (800103c <hataKoduLcdGoster+0xfc>)
 8000fb2:	2107      	movs	r1, #7
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f007 ffd9 	bl	8008f6c <lcd_print>
}
 8000fba:	e037      	b.n	800102c <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d10f      	bne.n	8000fe2 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <hataKoduLcdGoster+0xf4>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f007 ffd0 	bl	8008f6c <lcd_print>
		lcd_print(2, 4, "4");
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001048 <hataKoduLcdGoster+0x108>)
 8000fce:	2104      	movs	r1, #4
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f007 ffcb 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000fd6:	4a19      	ldr	r2, [pc, #100]	@ (800103c <hataKoduLcdGoster+0xfc>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f007 ffc6 	bl	8008f6c <lcd_print>
}
 8000fe0:	e024      	b.n	800102c <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d10f      	bne.n	8001008 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000fe8:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <hataKoduLcdGoster+0xf4>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2001      	movs	r0, #1
 8000fee:	f007 ffbd 	bl	8008f6c <lcd_print>
		lcd_print(2, 5, "5");
 8000ff2:	4a16      	ldr	r2, [pc, #88]	@ (800104c <hataKoduLcdGoster+0x10c>)
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f007 ffb8 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <hataKoduLcdGoster+0xfc>)
 8000ffe:	2107      	movs	r1, #7
 8001000:	2002      	movs	r0, #2
 8001002:	f007 ffb3 	bl	8008f6c <lcd_print>
}
 8001006:	e011      	b.n	800102c <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b06      	cmp	r3, #6
 800100c:	d10e      	bne.n	800102c <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <hataKoduLcdGoster+0xf4>)
 8001010:	2101      	movs	r1, #1
 8001012:	2001      	movs	r0, #1
 8001014:	f007 ffaa 	bl	8008f6c <lcd_print>
		lcd_print(2, 6, "6");
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <hataKoduLcdGoster+0x110>)
 800101a:	2106      	movs	r1, #6
 800101c:	2002      	movs	r0, #2
 800101e:	f007 ffa5 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "          ");
 8001022:	4a06      	ldr	r2, [pc, #24]	@ (800103c <hataKoduLcdGoster+0xfc>)
 8001024:	2107      	movs	r1, #7
 8001026:	2002      	movs	r0, #2
 8001028:	f007 ffa0 	bl	8008f6c <lcd_print>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200018b0 	.word	0x200018b0
 8001038:	0800e778 	.word	0x0800e778
 800103c:	0800e77c 	.word	0x0800e77c
 8001040:	0800e788 	.word	0x0800e788
 8001044:	0800e78c 	.word	0x0800e78c
 8001048:	0800e790 	.word	0x0800e790
 800104c:	0800e794 	.word	0x0800e794
 8001050:	0800e798 	.word	0x0800e798

08001054 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	e009      	b.n	8001074 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8001060:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <eepromDataFillWithEmpty+0x38>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <eepromDataFillWithEmpty+0x3c>)
 800106a:	2100      	movs	r1, #0
 800106c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3301      	adds	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <eepromDataFillWithEmpty+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	dbf0      	blt.n	8001060 <eepromDataFillWithEmpty+0xc>
	}
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000006c 	.word	0x2000006c
 8001090:	20000fec 	.word	0x20000fec
 8001094:	20000094 	.word	0x20000094

08001098 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80010aa:	4b50      	ldr	r3, [pc, #320]	@ (80011ec <i2cTest+0x154>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b4e      	ldr	r3, [pc, #312]	@ (80011ec <i2cTest+0x154>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80010ba:	484c      	ldr	r0, [pc, #304]	@ (80011ec <i2cTest+0x154>)
 80010bc:	f009 fc0c 	bl	800a8d8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c0:	23c0      	movs	r3, #192	@ 0xc0
 80010c2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80010c4:	2311      	movs	r3, #17
 80010c6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4846      	ldr	r0, [pc, #280]	@ (80011f0 <i2cTest+0x158>)
 80010d6:	f009 f813 	bl	800a100 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	4844      	ldr	r0, [pc, #272]	@ (80011f0 <i2cTest+0x158>)
 80010e0:	f009 fa85 	bl	800a5ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	4841      	ldr	r0, [pc, #260]	@ (80011f0 <i2cTest+0x158>)
 80010ea:	f009 fa80 	bl	800a5ee <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f008 fc96 	bl	8009a20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80010f4:	bf00      	nop
 80010f6:	2140      	movs	r1, #64	@ 0x40
 80010f8:	483d      	ldr	r0, [pc, #244]	@ (80011f0 <i2cTest+0x158>)
 80010fa:	f009 fa61 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d006      	beq.n	8001112 <i2cTest+0x7a>
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	483a      	ldr	r0, [pc, #232]	@ (80011f0 <i2cTest+0x158>)
 8001108:	f009 fa5a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d1f1      	bne.n	80010f6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	4836      	ldr	r0, [pc, #216]	@ (80011f0 <i2cTest+0x158>)
 8001118:	f009 fa69 	bl	800a5ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f008 fc7f 	bl	8009a20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001122:	bf00      	nop
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	4832      	ldr	r0, [pc, #200]	@ (80011f0 <i2cTest+0x158>)
 8001128:	f009 fa4a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d0f8      	beq.n	8001124 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2140      	movs	r1, #64	@ 0x40
 8001136:	482e      	ldr	r0, [pc, #184]	@ (80011f0 <i2cTest+0x158>)
 8001138:	f009 fa59 	bl	800a5ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800113c:	200a      	movs	r0, #10
 800113e:	f008 fc6f 	bl	8009a20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001142:	bf00      	nop
 8001144:	2140      	movs	r1, #64	@ 0x40
 8001146:	482a      	ldr	r0, [pc, #168]	@ (80011f0 <i2cTest+0x158>)
 8001148:	f009 fa3a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d0f8      	beq.n	8001144 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2140      	movs	r1, #64	@ 0x40
 8001156:	4826      	ldr	r0, [pc, #152]	@ (80011f0 <i2cTest+0x158>)
 8001158:	f009 fa49 	bl	800a5ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800115c:	200a      	movs	r0, #10
 800115e:	f008 fc5f 	bl	8009a20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8001162:	bf00      	nop
 8001164:	2140      	movs	r1, #64	@ 0x40
 8001166:	4822      	ldr	r0, [pc, #136]	@ (80011f0 <i2cTest+0x158>)
 8001168:	f009 fa2a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d1f8      	bne.n	8001164 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2180      	movs	r1, #128	@ 0x80
 8001176:	481e      	ldr	r0, [pc, #120]	@ (80011f0 <i2cTest+0x158>)
 8001178:	f009 fa39 	bl	800a5ee <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f008 fc4f 	bl	8009a20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001182:	bf00      	nop
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	481a      	ldr	r0, [pc, #104]	@ (80011f0 <i2cTest+0x158>)
 8001188:	f009 fa1a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d1f8      	bne.n	8001184 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001192:	23c0      	movs	r3, #192	@ 0xc0
 8001194:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8001196:	2312      	movs	r3, #18
 8001198:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4812      	ldr	r0, [pc, #72]	@ (80011f0 <i2cTest+0x158>)
 80011a8:	f008 ffaa 	bl	800a100 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <i2cTest+0x154>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <i2cTest+0x154>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011ba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <i2cTest+0x154>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <i2cTest+0x154>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011ca:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <i2cTest+0x154>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <i2cTest+0x154>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80011dc:	4803      	ldr	r0, [pc, #12]	@ (80011ec <i2cTest+0x154>)
 80011de:	f009 fa37 	bl	800a650 <HAL_I2C_Init>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000193c 	.word	0x2000193c
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80011fe:	20c8      	movs	r0, #200	@ 0xc8
 8001200:	f008 fc0e 	bl	8009a20 <HAL_Delay>
	lcd_clear();
 8001204:	f007 fede 	bl	8008fc4 <lcd_clear>
	if(type == 1 && page == 0) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d13e      	bne.n	800128c <printTemplate+0x98>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d13b      	bne.n	800128c <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001214:	4a9a      	ldr	r2, [pc, #616]	@ (8001480 <printTemplate+0x28c>)
 8001216:	2101      	movs	r1, #1
 8001218:	2001      	movs	r0, #1
 800121a:	f007 fea7 	bl	8008f6c <lcd_print>
		lcd_print(2, 3, "0");
 800121e:	4a99      	ldr	r2, [pc, #612]	@ (8001484 <printTemplate+0x290>)
 8001220:	2103      	movs	r1, #3
 8001222:	2002      	movs	r0, #2
 8001224:	f007 fea2 	bl	8008f6c <lcd_print>
		lcd_print(2, 4, "1");
 8001228:	4a97      	ldr	r2, [pc, #604]	@ (8001488 <printTemplate+0x294>)
 800122a:	2104      	movs	r1, #4
 800122c:	2002      	movs	r0, #2
 800122e:	f007 fe9d 	bl	8008f6c <lcd_print>
		lcd_print(2, 5, "2");
 8001232:	4a96      	ldr	r2, [pc, #600]	@ (800148c <printTemplate+0x298>)
 8001234:	2105      	movs	r1, #5
 8001236:	2002      	movs	r0, #2
 8001238:	f007 fe98 	bl	8008f6c <lcd_print>
		lcd_print(2, 6, "3");
 800123c:	4a94      	ldr	r2, [pc, #592]	@ (8001490 <printTemplate+0x29c>)
 800123e:	2106      	movs	r1, #6
 8001240:	2002      	movs	r0, #2
 8001242:	f007 fe93 	bl	8008f6c <lcd_print>
		lcd_print(2, 7, "4");
 8001246:	4a93      	ldr	r2, [pc, #588]	@ (8001494 <printTemplate+0x2a0>)
 8001248:	2107      	movs	r1, #7
 800124a:	2002      	movs	r0, #2
 800124c:	f007 fe8e 	bl	8008f6c <lcd_print>
		lcd_print(2, 10, "5");
 8001250:	4a91      	ldr	r2, [pc, #580]	@ (8001498 <printTemplate+0x2a4>)
 8001252:	210a      	movs	r1, #10
 8001254:	2002      	movs	r0, #2
 8001256:	f007 fe89 	bl	8008f6c <lcd_print>
		lcd_print(2, 11, "6");
 800125a:	4a90      	ldr	r2, [pc, #576]	@ (800149c <printTemplate+0x2a8>)
 800125c:	210b      	movs	r1, #11
 800125e:	2002      	movs	r0, #2
 8001260:	f007 fe84 	bl	8008f6c <lcd_print>
		lcd_print(2, 12, "7");
 8001264:	4a8e      	ldr	r2, [pc, #568]	@ (80014a0 <printTemplate+0x2ac>)
 8001266:	210c      	movs	r1, #12
 8001268:	2002      	movs	r0, #2
 800126a:	f007 fe7f 	bl	8008f6c <lcd_print>
		lcd_print(2, 13, "8");
 800126e:	4a8d      	ldr	r2, [pc, #564]	@ (80014a4 <printTemplate+0x2b0>)
 8001270:	210d      	movs	r1, #13
 8001272:	2002      	movs	r0, #2
 8001274:	f007 fe7a 	bl	8008f6c <lcd_print>
		lcd_print(2, 14, "9");
 8001278:	4a8b      	ldr	r2, [pc, #556]	@ (80014a8 <printTemplate+0x2b4>)
 800127a:	210e      	movs	r1, #14
 800127c:	2002      	movs	r0, #2
 800127e:	f007 fe75 	bl	8008f6c <lcd_print>
		lcd_gotoxy(2, 3);
 8001282:	2103      	movs	r1, #3
 8001284:	2002      	movs	r0, #2
 8001286:	f007 fe52 	bl	8008f2e <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 800128a:	e0f5      	b.n	8001478 <printTemplate+0x284>
	} else if(type == 2) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d178      	bne.n	8001384 <printTemplate+0x190>
		if(page == 1) {
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d114      	bne.n	80012c2 <printTemplate+0xce>
			lcd_clear();
 8001298:	f007 fe94 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	@ 0x64
 800129e:	f008 fbbf 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80012a2:	4a82      	ldr	r2, [pc, #520]	@ (80014ac <printTemplate+0x2b8>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	2001      	movs	r0, #1
 80012a8:	f007 fe60 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012ac:	4a80      	ldr	r2, [pc, #512]	@ (80014b0 <printTemplate+0x2bc>)
 80012ae:	2107      	movs	r1, #7
 80012b0:	2001      	movs	r0, #1
 80012b2:	f007 fe5b 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80012b6:	4a7f      	ldr	r2, [pc, #508]	@ (80014b4 <printTemplate+0x2c0>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	2002      	movs	r0, #2
 80012bc:	f007 fe56 	bl	8008f6c <lcd_print>
}
 80012c0:	e0da      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 2) {
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d114      	bne.n	80012f2 <printTemplate+0xfe>
			lcd_clear();
 80012c8:	f007 fe7c 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f008 fba7 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80012d2:	4a79      	ldr	r2, [pc, #484]	@ (80014b8 <printTemplate+0x2c4>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	2001      	movs	r0, #1
 80012d8:	f007 fe48 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012dc:	4a74      	ldr	r2, [pc, #464]	@ (80014b0 <printTemplate+0x2bc>)
 80012de:	2107      	movs	r1, #7
 80012e0:	2001      	movs	r0, #1
 80012e2:	f007 fe43 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80012e6:	4a75      	ldr	r2, [pc, #468]	@ (80014bc <printTemplate+0x2c8>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	2002      	movs	r0, #2
 80012ec:	f007 fe3e 	bl	8008f6c <lcd_print>
}
 80012f0:	e0c2      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 3) {
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d114      	bne.n	8001322 <printTemplate+0x12e>
			lcd_clear();
 80012f8:	f007 fe64 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 80012fc:	2064      	movs	r0, #100	@ 0x64
 80012fe:	f008 fb8f 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001302:	4a6a      	ldr	r2, [pc, #424]	@ (80014ac <printTemplate+0x2b8>)
 8001304:	2101      	movs	r1, #1
 8001306:	2001      	movs	r0, #1
 8001308:	f007 fe30 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800130c:	4a68      	ldr	r2, [pc, #416]	@ (80014b0 <printTemplate+0x2bc>)
 800130e:	2107      	movs	r1, #7
 8001310:	2001      	movs	r0, #1
 8001312:	f007 fe2b 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001316:	4a6a      	ldr	r2, [pc, #424]	@ (80014c0 <printTemplate+0x2cc>)
 8001318:	2101      	movs	r1, #1
 800131a:	2002      	movs	r0, #2
 800131c:	f007 fe26 	bl	8008f6c <lcd_print>
}
 8001320:	e0aa      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 4) {
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d114      	bne.n	8001352 <printTemplate+0x15e>
			lcd_clear();
 8001328:	f007 fe4c 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	@ 0x64
 800132e:	f008 fb77 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001332:	4a5e      	ldr	r2, [pc, #376]	@ (80014ac <printTemplate+0x2b8>)
 8001334:	2101      	movs	r1, #1
 8001336:	2001      	movs	r0, #1
 8001338:	f007 fe18 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800133c:	4a5c      	ldr	r2, [pc, #368]	@ (80014b0 <printTemplate+0x2bc>)
 800133e:	2107      	movs	r1, #7
 8001340:	2001      	movs	r0, #1
 8001342:	f007 fe13 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001346:	4a5f      	ldr	r2, [pc, #380]	@ (80014c4 <printTemplate+0x2d0>)
 8001348:	2101      	movs	r1, #1
 800134a:	2002      	movs	r0, #2
 800134c:	f007 fe0e 	bl	8008f6c <lcd_print>
}
 8001350:	e092      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 5) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b05      	cmp	r3, #5
 8001356:	f040 808f 	bne.w	8001478 <printTemplate+0x284>
			lcd_clear();
 800135a:	f007 fe33 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 800135e:	2064      	movs	r0, #100	@ 0x64
 8001360:	f008 fb5e 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001364:	4a51      	ldr	r2, [pc, #324]	@ (80014ac <printTemplate+0x2b8>)
 8001366:	2101      	movs	r1, #1
 8001368:	2001      	movs	r0, #1
 800136a:	f007 fdff 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800136e:	4a50      	ldr	r2, [pc, #320]	@ (80014b0 <printTemplate+0x2bc>)
 8001370:	2107      	movs	r1, #7
 8001372:	2001      	movs	r0, #1
 8001374:	f007 fdfa 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001378:	4a53      	ldr	r2, [pc, #332]	@ (80014c8 <printTemplate+0x2d4>)
 800137a:	2101      	movs	r1, #1
 800137c:	2002      	movs	r0, #2
 800137e:	f007 fdf5 	bl	8008f6c <lcd_print>
}
 8001382:	e079      	b.n	8001478 <printTemplate+0x284>
	} else if(type == 3) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d176      	bne.n	8001478 <printTemplate+0x284>
		if(page == 1) {
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d114      	bne.n	80013ba <printTemplate+0x1c6>
			lcd_clear();
 8001390:	f007 fe18 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	@ 0x64
 8001396:	f008 fb43 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800139a:	4a4c      	ldr	r2, [pc, #304]	@ (80014cc <printTemplate+0x2d8>)
 800139c:	2101      	movs	r1, #1
 800139e:	2001      	movs	r0, #1
 80013a0:	f007 fde4 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013a4:	4a4a      	ldr	r2, [pc, #296]	@ (80014d0 <printTemplate+0x2dc>)
 80013a6:	2107      	movs	r1, #7
 80013a8:	2001      	movs	r0, #1
 80013aa:	f007 fddf 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80013ae:	4a41      	ldr	r2, [pc, #260]	@ (80014b4 <printTemplate+0x2c0>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	2002      	movs	r0, #2
 80013b4:	f007 fdda 	bl	8008f6c <lcd_print>
}
 80013b8:	e05e      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 2) {
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d114      	bne.n	80013ea <printTemplate+0x1f6>
			lcd_clear();
 80013c0:	f007 fe00 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 80013c4:	2064      	movs	r0, #100	@ 0x64
 80013c6:	f008 fb2b 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013ca:	4a40      	ldr	r2, [pc, #256]	@ (80014cc <printTemplate+0x2d8>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	2001      	movs	r0, #1
 80013d0:	f007 fdcc 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013d4:	4a3e      	ldr	r2, [pc, #248]	@ (80014d0 <printTemplate+0x2dc>)
 80013d6:	2107      	movs	r1, #7
 80013d8:	2001      	movs	r0, #1
 80013da:	f007 fdc7 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80013de:	4a37      	ldr	r2, [pc, #220]	@ (80014bc <printTemplate+0x2c8>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	2002      	movs	r0, #2
 80013e4:	f007 fdc2 	bl	8008f6c <lcd_print>
}
 80013e8:	e046      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 3) {
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d114      	bne.n	800141a <printTemplate+0x226>
			lcd_clear();
 80013f0:	f007 fde8 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 80013f4:	2064      	movs	r0, #100	@ 0x64
 80013f6:	f008 fb13 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013fa:	4a34      	ldr	r2, [pc, #208]	@ (80014cc <printTemplate+0x2d8>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2001      	movs	r0, #1
 8001400:	f007 fdb4 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001404:	4a32      	ldr	r2, [pc, #200]	@ (80014d0 <printTemplate+0x2dc>)
 8001406:	2107      	movs	r1, #7
 8001408:	2001      	movs	r0, #1
 800140a:	f007 fdaf 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800140e:	4a2c      	ldr	r2, [pc, #176]	@ (80014c0 <printTemplate+0x2cc>)
 8001410:	2101      	movs	r1, #1
 8001412:	2002      	movs	r0, #2
 8001414:	f007 fdaa 	bl	8008f6c <lcd_print>
}
 8001418:	e02e      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 4) {
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d114      	bne.n	800144a <printTemplate+0x256>
			lcd_clear();
 8001420:	f007 fdd0 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 8001424:	2064      	movs	r0, #100	@ 0x64
 8001426:	f008 fafb 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800142a:	4a28      	ldr	r2, [pc, #160]	@ (80014cc <printTemplate+0x2d8>)
 800142c:	2101      	movs	r1, #1
 800142e:	2001      	movs	r0, #1
 8001430:	f007 fd9c 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001434:	4a26      	ldr	r2, [pc, #152]	@ (80014d0 <printTemplate+0x2dc>)
 8001436:	2107      	movs	r1, #7
 8001438:	2001      	movs	r0, #1
 800143a:	f007 fd97 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800143e:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <printTemplate+0x2d0>)
 8001440:	2101      	movs	r1, #1
 8001442:	2002      	movs	r0, #2
 8001444:	f007 fd92 	bl	8008f6c <lcd_print>
}
 8001448:	e016      	b.n	8001478 <printTemplate+0x284>
		} else if(page == 5) {
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d113      	bne.n	8001478 <printTemplate+0x284>
			lcd_clear();
 8001450:	f007 fdb8 	bl	8008fc4 <lcd_clear>
			HAL_Delay(100);
 8001454:	2064      	movs	r0, #100	@ 0x64
 8001456:	f008 fae3 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800145a:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <printTemplate+0x2d8>)
 800145c:	2101      	movs	r1, #1
 800145e:	2001      	movs	r0, #1
 8001460:	f007 fd84 	bl	8008f6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001464:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <printTemplate+0x2dc>)
 8001466:	2107      	movs	r1, #7
 8001468:	2001      	movs	r0, #1
 800146a:	f007 fd7f 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800146e:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <printTemplate+0x2d4>)
 8001470:	2101      	movs	r1, #1
 8001472:	2002      	movs	r0, #2
 8001474:	f007 fd7a 	bl	8008f6c <lcd_print>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0800e79c 	.word	0x0800e79c
 8001484:	0800e7a4 	.word	0x0800e7a4
 8001488:	0800e7a8 	.word	0x0800e7a8
 800148c:	0800e7ac 	.word	0x0800e7ac
 8001490:	0800e7b0 	.word	0x0800e7b0
 8001494:	0800e7b4 	.word	0x0800e7b4
 8001498:	0800e7b8 	.word	0x0800e7b8
 800149c:	0800e7bc 	.word	0x0800e7bc
 80014a0:	0800e7c0 	.word	0x0800e7c0
 80014a4:	0800e7c4 	.word	0x0800e7c4
 80014a8:	0800e7c8 	.word	0x0800e7c8
 80014ac:	0800e7cc 	.word	0x0800e7cc
 80014b0:	20001070 	.word	0x20001070
 80014b4:	0800e7e0 	.word	0x0800e7e0
 80014b8:	0800e7f4 	.word	0x0800e7f4
 80014bc:	0800e7fc 	.word	0x0800e7fc
 80014c0:	0800e810 	.word	0x0800e810
 80014c4:	0800e824 	.word	0x0800e824
 80014c8:	0800e838 	.word	0x0800e838
 80014cc:	0800e84c 	.word	0x0800e84c
 80014d0:	20001080 	.word	0x20001080

080014d4 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10a      	bne.n	80014f8 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80014e2:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <printCredentials+0x70>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	2002      	movs	r0, #2
 80014e8:	f007 fd40 	bl	8008f6c <lcd_print>
		lcd_print(2, 13, "    ");
 80014ec:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <printCredentials+0x74>)
 80014ee:	210d      	movs	r1, #13
 80014f0:	2002      	movs	r0, #2
 80014f2:	f007 fd3b 	bl	8008f6c <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80014f6:	e021      	b.n	800153c <printCredentials+0x68>
	} else if(type == 2) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d10f      	bne.n	800151e <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <printCredentials+0x78>)
 8001500:	2101      	movs	r1, #1
 8001502:	2001      	movs	r0, #1
 8001504:	f007 fd32 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, "                ");
 8001508:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <printCredentials+0x7c>)
 800150a:	2101      	movs	r1, #1
 800150c:	2002      	movs	r0, #2
 800150e:	f007 fd2d 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <printCredentials+0x80>)
 8001514:	2101      	movs	r1, #1
 8001516:	2002      	movs	r0, #2
 8001518:	f007 fd28 	bl	8008f6c <lcd_print>
}
 800151c:	e00e      	b.n	800153c <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <printCredentials+0x84>)
 8001520:	2101      	movs	r1, #1
 8001522:	2001      	movs	r0, #1
 8001524:	f007 fd22 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, "                ");
 8001528:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <printCredentials+0x7c>)
 800152a:	2101      	movs	r1, #1
 800152c:	2002      	movs	r0, #2
 800152e:	f007 fd1d 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <printCredentials+0x88>)
 8001534:	2101      	movs	r1, #1
 8001536:	2002      	movs	r0, #2
 8001538:	f007 fd18 	bl	8008f6c <lcd_print>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20001064 	.word	0x20001064
 8001548:	0800e860 	.word	0x0800e860
 800154c:	0800e868 	.word	0x0800e868
 8001550:	0800e87c 	.word	0x0800e87c
 8001554:	20001070 	.word	0x20001070
 8001558:	0800e890 	.word	0x0800e890
 800155c:	20001080 	.word	0x20001080

08001560 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <__NVIC_SystemReset+0x24>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001572:	4904      	ldr	r1, [pc, #16]	@ (8001584 <__NVIC_SystemReset+0x24>)
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_SystemReset+0x28>)
 8001576:	4313      	orrs	r3, r2
 8001578:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800157a:	f3bf 8f4f 	dsb	sy
}
 800157e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <__NVIC_SystemReset+0x20>
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	05fa0004 	.word	0x05fa0004

0800158c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001592:	2101      	movs	r1, #1
 8001594:	488e      	ldr	r0, [pc, #568]	@ (80017d0 <menu+0x244>)
 8001596:	f009 f813 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800159a:	4603      	mov	r3, r0
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 8099 	bne.w	80016d4 <menu+0x148>
 80015a2:	4b8c      	ldr	r3, [pc, #560]	@ (80017d4 <menu+0x248>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8091 	beq.w	80016d4 <menu+0x148>
		menuSayac = menuSayac+1;
 80015b2:	4b89      	ldr	r3, [pc, #548]	@ (80017d8 <menu+0x24c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b87      	ldr	r3, [pc, #540]	@ (80017d8 <menu+0x24c>)
 80015bc:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015be:	4b86      	ldr	r3, [pc, #536]	@ (80017d8 <menu+0x24c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b24      	cmp	r3, #36	@ 0x24
 80015c4:	d102      	bne.n	80015cc <menu+0x40>
			menuSayac = 1;
 80015c6:	4b84      	ldr	r3, [pc, #528]	@ (80017d8 <menu+0x24c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015cc:	4b82      	ldr	r3, [pc, #520]	@ (80017d8 <menu+0x24c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b12      	cmp	r3, #18
 80015d2:	d106      	bne.n	80015e2 <menu+0x56>
 80015d4:	4b81      	ldr	r3, [pc, #516]	@ (80017dc <menu+0x250>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <menu+0x56>
			menuSayac = 21;
 80015dc:	4b7e      	ldr	r3, [pc, #504]	@ (80017d8 <menu+0x24c>)
 80015de:	2215      	movs	r2, #21
 80015e0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80015e2:	4b7d      	ldr	r3, [pc, #500]	@ (80017d8 <menu+0x24c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d106      	bne.n	80015f8 <menu+0x6c>
 80015ea:	4b7d      	ldr	r3, [pc, #500]	@ (80017e0 <menu+0x254>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <menu+0x6c>
			menuSayac = 16;
 80015f2:	4b79      	ldr	r3, [pc, #484]	@ (80017d8 <menu+0x24c>)
 80015f4:	2210      	movs	r2, #16
 80015f6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80015f8:	4b77      	ldr	r3, [pc, #476]	@ (80017d8 <menu+0x24c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b0d      	cmp	r3, #13
 80015fe:	d106      	bne.n	800160e <menu+0x82>
 8001600:	4b77      	ldr	r3, [pc, #476]	@ (80017e0 <menu+0x254>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <menu+0x82>
			menuSayac = 16;
 8001608:	4b73      	ldr	r3, [pc, #460]	@ (80017d8 <menu+0x24c>)
 800160a:	2210      	movs	r2, #16
 800160c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800160e:	4b72      	ldr	r3, [pc, #456]	@ (80017d8 <menu+0x24c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b09      	cmp	r3, #9
 8001614:	d106      	bne.n	8001624 <menu+0x98>
 8001616:	4b72      	ldr	r3, [pc, #456]	@ (80017e0 <menu+0x254>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d102      	bne.n	8001624 <menu+0x98>
			menuSayac = 13;
 800161e:	4b6e      	ldr	r3, [pc, #440]	@ (80017d8 <menu+0x24c>)
 8001620:	220d      	movs	r2, #13
 8001622:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001624:	4b6c      	ldr	r3, [pc, #432]	@ (80017d8 <menu+0x24c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b0a      	cmp	r3, #10
 800162a:	d10a      	bne.n	8001642 <menu+0xb6>
 800162c:	4b6d      	ldr	r3, [pc, #436]	@ (80017e4 <menu+0x258>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d003      	beq.n	800163c <menu+0xb0>
 8001634:	4b6b      	ldr	r3, [pc, #428]	@ (80017e4 <menu+0x258>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d102      	bne.n	8001642 <menu+0xb6>
			menuSayac = 11;
 800163c:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <menu+0x24c>)
 800163e:	220b      	movs	r2, #11
 8001640:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001642:	4b65      	ldr	r3, [pc, #404]	@ (80017d8 <menu+0x24c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d10e      	bne.n	8001668 <menu+0xdc>
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <menu+0x25c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d003      	beq.n	800165a <menu+0xce>
 8001652:	4b65      	ldr	r3, [pc, #404]	@ (80017e8 <menu+0x25c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d106      	bne.n	8001668 <menu+0xdc>
 800165a:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <menu+0x254>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <menu+0xdc>
			menuSayac = 16;
 8001662:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <menu+0x24c>)
 8001664:	2210      	movs	r2, #16
 8001666:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001668:	4b5b      	ldr	r3, [pc, #364]	@ (80017d8 <menu+0x24c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d10e      	bne.n	800168e <menu+0x102>
 8001670:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <menu+0x25c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d003      	beq.n	8001680 <menu+0xf4>
 8001678:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <menu+0x25c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d106      	bne.n	800168e <menu+0x102>
 8001680:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <menu+0x254>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d102      	bne.n	800168e <menu+0x102>
			menuSayac = 13;
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <menu+0x24c>)
 800168a:	220d      	movs	r2, #13
 800168c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800168e:	4b52      	ldr	r3, [pc, #328]	@ (80017d8 <menu+0x24c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d106      	bne.n	80016a4 <menu+0x118>
 8001696:	4b55      	ldr	r3, [pc, #340]	@ (80017ec <menu+0x260>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d102      	bne.n	80016a4 <menu+0x118>
			menuSayac = 16;
 800169e:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <menu+0x24c>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016a4:	4b4c      	ldr	r3, [pc, #304]	@ (80017d8 <menu+0x24c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b18      	cmp	r3, #24
 80016aa:	d106      	bne.n	80016ba <menu+0x12e>
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <menu+0x250>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <menu+0x12e>
			menuSayac = 26;
 80016b4:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <menu+0x24c>)
 80016b6:	221a      	movs	r2, #26
 80016b8:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80016ba:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <menu+0x24c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b21      	cmp	r3, #33	@ 0x21
 80016c0:	d106      	bne.n	80016d0 <menu+0x144>
 80016c2:	4b4b      	ldr	r3, [pc, #300]	@ (80017f0 <menu+0x264>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <menu+0x144>
			menuSayac = 35;
 80016ca:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <menu+0x24c>)
 80016cc:	2223      	movs	r2, #35	@ 0x23
 80016ce:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016d0:	f002 fca2 	bl	8004018 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016d4:	2108      	movs	r1, #8
 80016d6:	4847      	ldr	r0, [pc, #284]	@ (80017f4 <menu+0x268>)
 80016d8:	f008 ff72 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 8097 	bne.w	8001812 <menu+0x286>
 80016e4:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <menu+0x248>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 808f 	beq.w	8001812 <menu+0x286>
		if (menuSayac <= 1) {
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <menu+0x24c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d802      	bhi.n	8001702 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <menu+0x24c>)
 80016fe:	2224      	movs	r2, #36	@ 0x24
 8001700:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001702:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <menu+0x24c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <menu+0x24c>)
 800170c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <menu+0x24c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b14      	cmp	r3, #20
 8001714:	d106      	bne.n	8001724 <menu+0x198>
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <menu+0x250>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <menu+0x198>
			menuSayac = 17;
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <menu+0x24c>)
 8001720:	2211      	movs	r2, #17
 8001722:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001724:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <menu+0x24c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d106      	bne.n	800173a <menu+0x1ae>
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <menu+0x254>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <menu+0x1ae>
			menuSayac = 7;
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <menu+0x24c>)
 8001736:	2207      	movs	r2, #7
 8001738:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800173a:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <menu+0x24c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	d106      	bne.n	8001750 <menu+0x1c4>
 8001742:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <menu+0x254>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d102      	bne.n	8001750 <menu+0x1c4>
			menuSayac = 12;
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <menu+0x24c>)
 800174c:	220c      	movs	r2, #12
 800174e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <menu+0x24c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d106      	bne.n	8001766 <menu+0x1da>
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <menu+0x254>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d102      	bne.n	8001766 <menu+0x1da>
			menuSayac = 8;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <menu+0x24c>)
 8001762:	2208      	movs	r2, #8
 8001764:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <menu+0x24c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b0a      	cmp	r3, #10
 800176c:	d10a      	bne.n	8001784 <menu+0x1f8>
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <menu+0x258>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d003      	beq.n	800177e <menu+0x1f2>
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <menu+0x258>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d102      	bne.n	8001784 <menu+0x1f8>
			menuSayac = 9;
 800177e:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <menu+0x24c>)
 8001780:	2209      	movs	r2, #9
 8001782:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <menu+0x24c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d10a      	bne.n	80017a2 <menu+0x216>
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <menu+0x25c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d003      	beq.n	800179c <menu+0x210>
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <menu+0x25c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d102      	bne.n	80017a2 <menu+0x216>
			menuSayac = 11;
 800179c:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <menu+0x24c>)
 800179e:	220b      	movs	r2, #11
 80017a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <menu+0x24c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d106      	bne.n	80017b8 <menu+0x22c>
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <menu+0x260>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <menu+0x22c>
			menuSayac = 14;
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <menu+0x24c>)
 80017b4:	220e      	movs	r2, #14
 80017b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <menu+0x24c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b19      	cmp	r3, #25
 80017be:	d11b      	bne.n	80017f8 <menu+0x26c>
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <menu+0x250>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d117      	bne.n	80017f8 <menu+0x26c>
			menuSayac = 23;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <menu+0x24c>)
 80017ca:	2217      	movs	r2, #23
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e013      	b.n	80017f8 <menu+0x26c>
 80017d0:	40010800 	.word	0x40010800
 80017d4:	200010ec 	.word	0x200010ec
 80017d8:	200010bc 	.word	0x200010bc
 80017dc:	200010cb 	.word	0x200010cb
 80017e0:	200010c4 	.word	0x200010c4
 80017e4:	200010c5 	.word	0x200010c5
 80017e8:	200010c6 	.word	0x200010c6
 80017ec:	200010c7 	.word	0x200010c7
 80017f0:	200010e7 	.word	0x200010e7
 80017f4:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80017f8:	4bb0      	ldr	r3, [pc, #704]	@ (8001abc <menu+0x530>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b22      	cmp	r3, #34	@ 0x22
 80017fe:	d106      	bne.n	800180e <menu+0x282>
 8001800:	4baf      	ldr	r3, [pc, #700]	@ (8001ac0 <menu+0x534>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <menu+0x282>
			menuSayac = 32;
 8001808:	4bac      	ldr	r3, [pc, #688]	@ (8001abc <menu+0x530>)
 800180a:	2220      	movs	r2, #32
 800180c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800180e:	f002 fc03 	bl	8004018 <bekle>
	}

	if (menuSayac == 0) {
 8001812:	4baa      	ldr	r3, [pc, #680]	@ (8001abc <menu+0x530>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800181a:	4aaa      	ldr	r2, [pc, #680]	@ (8001ac4 <menu+0x538>)
 800181c:	2101      	movs	r1, #1
 800181e:	2001      	movs	r0, #1
 8001820:	f007 fba4 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001824:	4aa8      	ldr	r2, [pc, #672]	@ (8001ac8 <menu+0x53c>)
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f007 fb9f 	bl	8008f6c <lcd_print>
	}

	if (menuSayac == 1) {
 800182e:	4ba3      	ldr	r3, [pc, #652]	@ (8001abc <menu+0x530>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	f040 81f4 	bne.w	8001c20 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001838:	4aa4      	ldr	r2, [pc, #656]	@ (8001acc <menu+0x540>)
 800183a:	2101      	movs	r1, #1
 800183c:	2001      	movs	r0, #1
 800183e:	f007 fb95 	bl	8008f6c <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001842:	4ba3      	ldr	r3, [pc, #652]	@ (8001ad0 <menu+0x544>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d115      	bne.n	8001876 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800184a:	4aa2      	ldr	r2, [pc, #648]	@ (8001ad4 <menu+0x548>)
 800184c:	2101      	movs	r1, #1
 800184e:	2002      	movs	r0, #2
 8001850:	f007 fb8c 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "   ");
 8001854:	4aa0      	ldr	r2, [pc, #640]	@ (8001ad8 <menu+0x54c>)
 8001856:	210f      	movs	r1, #15
 8001858:	2002      	movs	r0, #2
 800185a:	f007 fb87 	bl	8008f6c <lcd_print>
			itoa(hataKayit1, snum, 10);
 800185e:	4b9f      	ldr	r3, [pc, #636]	@ (8001adc <menu+0x550>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	220a      	movs	r2, #10
 8001864:	499e      	ldr	r1, [pc, #632]	@ (8001ae0 <menu+0x554>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00b fed6 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 800186c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ae0 <menu+0x554>)
 800186e:	210e      	movs	r1, #14
 8001870:	2002      	movs	r0, #2
 8001872:	f007 fb7b 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001876:	4b96      	ldr	r3, [pc, #600]	@ (8001ad0 <menu+0x544>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d115      	bne.n	80018aa <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800187e:	4a99      	ldr	r2, [pc, #612]	@ (8001ae4 <menu+0x558>)
 8001880:	2101      	movs	r1, #1
 8001882:	2002      	movs	r0, #2
 8001884:	f007 fb72 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 8001888:	4a97      	ldr	r2, [pc, #604]	@ (8001ae8 <menu+0x55c>)
 800188a:	210f      	movs	r1, #15
 800188c:	2002      	movs	r0, #2
 800188e:	f007 fb6d 	bl	8008f6c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001892:	4b96      	ldr	r3, [pc, #600]	@ (8001aec <menu+0x560>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	220a      	movs	r2, #10
 8001898:	4991      	ldr	r1, [pc, #580]	@ (8001ae0 <menu+0x554>)
 800189a:	4618      	mov	r0, r3
 800189c:	f00b febc 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 80018a0:	4a8f      	ldr	r2, [pc, #572]	@ (8001ae0 <menu+0x554>)
 80018a2:	210e      	movs	r1, #14
 80018a4:	2002      	movs	r0, #2
 80018a6:	f007 fb61 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80018aa:	4b89      	ldr	r3, [pc, #548]	@ (8001ad0 <menu+0x544>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d115      	bne.n	80018de <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80018b2:	4a8f      	ldr	r2, [pc, #572]	@ (8001af0 <menu+0x564>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	2002      	movs	r0, #2
 80018b8:	f007 fb58 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 80018bc:	4a8a      	ldr	r2, [pc, #552]	@ (8001ae8 <menu+0x55c>)
 80018be:	210f      	movs	r1, #15
 80018c0:	2002      	movs	r0, #2
 80018c2:	f007 fb53 	bl	8008f6c <lcd_print>
			itoa(hataKayit3, snum, 10);
 80018c6:	4b8b      	ldr	r3, [pc, #556]	@ (8001af4 <menu+0x568>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	220a      	movs	r2, #10
 80018cc:	4984      	ldr	r1, [pc, #528]	@ (8001ae0 <menu+0x554>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00b fea2 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 80018d4:	4a82      	ldr	r2, [pc, #520]	@ (8001ae0 <menu+0x554>)
 80018d6:	210e      	movs	r1, #14
 80018d8:	2002      	movs	r0, #2
 80018da:	f007 fb47 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80018de:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad0 <menu+0x544>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d115      	bne.n	8001912 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80018e6:	4a84      	ldr	r2, [pc, #528]	@ (8001af8 <menu+0x56c>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2002      	movs	r0, #2
 80018ec:	f007 fb3e 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 80018f0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ae8 <menu+0x55c>)
 80018f2:	210f      	movs	r1, #15
 80018f4:	2002      	movs	r0, #2
 80018f6:	f007 fb39 	bl	8008f6c <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018fa:	4b80      	ldr	r3, [pc, #512]	@ (8001afc <menu+0x570>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	220a      	movs	r2, #10
 8001900:	4977      	ldr	r1, [pc, #476]	@ (8001ae0 <menu+0x554>)
 8001902:	4618      	mov	r0, r3
 8001904:	f00b fe88 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 8001908:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <menu+0x554>)
 800190a:	210e      	movs	r1, #14
 800190c:	2002      	movs	r0, #2
 800190e:	f007 fb2d 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001912:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad0 <menu+0x544>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d115      	bne.n	8001946 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 800191a:	4a79      	ldr	r2, [pc, #484]	@ (8001b00 <menu+0x574>)
 800191c:	2101      	movs	r1, #1
 800191e:	2002      	movs	r0, #2
 8001920:	f007 fb24 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 8001924:	4a70      	ldr	r2, [pc, #448]	@ (8001ae8 <menu+0x55c>)
 8001926:	210f      	movs	r1, #15
 8001928:	2002      	movs	r0, #2
 800192a:	f007 fb1f 	bl	8008f6c <lcd_print>
			itoa(hataKayit5, snum, 10);
 800192e:	4b75      	ldr	r3, [pc, #468]	@ (8001b04 <menu+0x578>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	220a      	movs	r2, #10
 8001934:	496a      	ldr	r1, [pc, #424]	@ (8001ae0 <menu+0x554>)
 8001936:	4618      	mov	r0, r3
 8001938:	f00b fe6e 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 800193c:	4a68      	ldr	r2, [pc, #416]	@ (8001ae0 <menu+0x554>)
 800193e:	210e      	movs	r1, #14
 8001940:	2002      	movs	r0, #2
 8001942:	f007 fb13 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001946:	4b62      	ldr	r3, [pc, #392]	@ (8001ad0 <menu+0x544>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d115      	bne.n	800197a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800194e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <menu+0x57c>)
 8001950:	2101      	movs	r1, #1
 8001952:	2002      	movs	r0, #2
 8001954:	f007 fb0a 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 8001958:	4a63      	ldr	r2, [pc, #396]	@ (8001ae8 <menu+0x55c>)
 800195a:	210f      	movs	r1, #15
 800195c:	2002      	movs	r0, #2
 800195e:	f007 fb05 	bl	8008f6c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001962:	4b6a      	ldr	r3, [pc, #424]	@ (8001b0c <menu+0x580>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	220a      	movs	r2, #10
 8001968:	495d      	ldr	r1, [pc, #372]	@ (8001ae0 <menu+0x554>)
 800196a:	4618      	mov	r0, r3
 800196c:	f00b fe54 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 8001970:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae0 <menu+0x554>)
 8001972:	210e      	movs	r1, #14
 8001974:	2002      	movs	r0, #2
 8001976:	f007 faf9 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800197a:	4b55      	ldr	r3, [pc, #340]	@ (8001ad0 <menu+0x544>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b06      	cmp	r3, #6
 8001980:	d115      	bne.n	80019ae <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001982:	4a63      	ldr	r2, [pc, #396]	@ (8001b10 <menu+0x584>)
 8001984:	2101      	movs	r1, #1
 8001986:	2002      	movs	r0, #2
 8001988:	f007 faf0 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 800198c:	4a56      	ldr	r2, [pc, #344]	@ (8001ae8 <menu+0x55c>)
 800198e:	210f      	movs	r1, #15
 8001990:	2002      	movs	r0, #2
 8001992:	f007 faeb 	bl	8008f6c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001996:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <menu+0x588>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	220a      	movs	r2, #10
 800199c:	4950      	ldr	r1, [pc, #320]	@ (8001ae0 <menu+0x554>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f00b fe3a 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 80019a4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <menu+0x554>)
 80019a6:	210e      	movs	r1, #14
 80019a8:	2002      	movs	r0, #2
 80019aa:	f007 fadf 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019ae:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <menu+0x544>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	d115      	bne.n	80019e2 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80019b6:	4a58      	ldr	r2, [pc, #352]	@ (8001b18 <menu+0x58c>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	2002      	movs	r0, #2
 80019bc:	f007 fad6 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 80019c0:	4a49      	ldr	r2, [pc, #292]	@ (8001ae8 <menu+0x55c>)
 80019c2:	210f      	movs	r1, #15
 80019c4:	2002      	movs	r0, #2
 80019c6:	f007 fad1 	bl	8008f6c <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019ca:	4b54      	ldr	r3, [pc, #336]	@ (8001b1c <menu+0x590>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	220a      	movs	r2, #10
 80019d0:	4943      	ldr	r1, [pc, #268]	@ (8001ae0 <menu+0x554>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00b fe20 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 80019d8:	4a41      	ldr	r2, [pc, #260]	@ (8001ae0 <menu+0x554>)
 80019da:	210e      	movs	r1, #14
 80019dc:	2002      	movs	r0, #2
 80019de:	f007 fac5 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <menu+0x544>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d115      	bne.n	8001a16 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80019ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001b20 <menu+0x594>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	2002      	movs	r0, #2
 80019f0:	f007 fabc 	bl	8008f6c <lcd_print>
			lcd_print(2, 15, "  ");
 80019f4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae8 <menu+0x55c>)
 80019f6:	210f      	movs	r1, #15
 80019f8:	2002      	movs	r0, #2
 80019fa:	f007 fab7 	bl	8008f6c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019fe:	4b49      	ldr	r3, [pc, #292]	@ (8001b24 <menu+0x598>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	220a      	movs	r2, #10
 8001a04:	4936      	ldr	r1, [pc, #216]	@ (8001ae0 <menu+0x554>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00b fe06 	bl	800d618 <itoa>
			lcd_print(2, 14, snum);
 8001a0c:	4a34      	ldr	r2, [pc, #208]	@ (8001ae0 <menu+0x554>)
 8001a0e:	210e      	movs	r1, #14
 8001a10:	2002      	movs	r0, #2
 8001a12:	f007 faab 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a16:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <menu+0x544>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	d115      	bne.n	8001a4a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001a1e:	4a42      	ldr	r2, [pc, #264]	@ (8001b28 <menu+0x59c>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	2002      	movs	r0, #2
 8001a24:	f007 faa2 	bl	8008f6c <lcd_print>
			lcd_print(2, 16, " ");
 8001a28:	4a40      	ldr	r2, [pc, #256]	@ (8001b2c <menu+0x5a0>)
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f007 fa9d 	bl	8008f6c <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a32:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <menu+0x5a4>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	220a      	movs	r2, #10
 8001a38:	4929      	ldr	r1, [pc, #164]	@ (8001ae0 <menu+0x554>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00b fdec 	bl	800d618 <itoa>
			lcd_print(2, 15, snum);
 8001a40:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <menu+0x554>)
 8001a42:	210f      	movs	r1, #15
 8001a44:	2002      	movs	r0, #2
 8001a46:	f007 fa91 	bl	8008f6c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <menu+0x544>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b0a      	cmp	r3, #10
 8001a50:	d104      	bne.n	8001a5c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001a52:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <menu+0x5a8>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	2002      	movs	r0, #2
 8001a58:	f007 fa88 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4836      	ldr	r0, [pc, #216]	@ (8001b38 <menu+0x5ac>)
 8001a60:	f008 fdae 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d119      	bne.n	8001a9e <menu+0x512>
 8001a6a:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <menu+0x5b0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d012      	beq.n	8001a9e <menu+0x512>
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <menu+0x5b4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10e      	bne.n	8001a9e <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <menu+0x544>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <menu+0x544>)
 8001a8a:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <menu+0x544>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d902      	bls.n	8001a9a <menu+0x50e>
				hataGostermeSirasi = 0;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <menu+0x544>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a9a:	f002 fabd 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4825      	ldr	r0, [pc, #148]	@ (8001b38 <menu+0x5ac>)
 8001aa2:	f008 fd8d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d15e      	bne.n	8001b6a <menu+0x5de>
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <menu+0x5b0>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d057      	beq.n	8001b6a <menu+0x5de>
 8001aba:	e043      	b.n	8001b44 <menu+0x5b8>
 8001abc:	200010bc 	.word	0x200010bc
 8001ac0:	200010e7 	.word	0x200010e7
 8001ac4:	20001220 	.word	0x20001220
 8001ac8:	20001234 	.word	0x20001234
 8001acc:	20001248 	.word	0x20001248
 8001ad0:	200010be 	.word	0x200010be
 8001ad4:	2000125c 	.word	0x2000125c
 8001ad8:	0800e8a4 	.word	0x0800e8a4
 8001adc:	200010dd 	.word	0x200010dd
 8001ae0:	2000105c 	.word	0x2000105c
 8001ae4:	20001270 	.word	0x20001270
 8001ae8:	0800e8a8 	.word	0x0800e8a8
 8001aec:	200010de 	.word	0x200010de
 8001af0:	20001284 	.word	0x20001284
 8001af4:	200010df 	.word	0x200010df
 8001af8:	20001298 	.word	0x20001298
 8001afc:	200010e0 	.word	0x200010e0
 8001b00:	200012ac 	.word	0x200012ac
 8001b04:	200010e1 	.word	0x200010e1
 8001b08:	200012c0 	.word	0x200012c0
 8001b0c:	200010e2 	.word	0x200010e2
 8001b10:	200012d4 	.word	0x200012d4
 8001b14:	200010e3 	.word	0x200010e3
 8001b18:	200012e8 	.word	0x200012e8
 8001b1c:	200010e4 	.word	0x200010e4
 8001b20:	200012fc 	.word	0x200012fc
 8001b24:	200010e5 	.word	0x200010e5
 8001b28:	20001310 	.word	0x20001310
 8001b2c:	0800e8ac 	.word	0x0800e8ac
 8001b30:	200010e6 	.word	0x200010e6
 8001b34:	20001324 	.word	0x20001324
 8001b38:	40010800 	.word	0x40010800
 8001b3c:	200010ec 	.word	0x200010ec
 8001b40:	200010cb 	.word	0x200010cb
 8001b44:	4b8a      	ldr	r3, [pc, #552]	@ (8001d70 <menu+0x7e4>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10e      	bne.n	8001b6a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b4c:	4b89      	ldr	r3, [pc, #548]	@ (8001d74 <menu+0x7e8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b87      	ldr	r3, [pc, #540]	@ (8001d74 <menu+0x7e8>)
 8001b56:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b58:	4b86      	ldr	r3, [pc, #536]	@ (8001d74 <menu+0x7e8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b0b      	cmp	r3, #11
 8001b5e:	d902      	bls.n	8001b66 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001b60:	4b84      	ldr	r3, [pc, #528]	@ (8001d74 <menu+0x7e8>)
 8001b62:	220a      	movs	r2, #10
 8001b64:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b66:	f002 fa57 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4882      	ldr	r0, [pc, #520]	@ (8001d78 <menu+0x7ec>)
 8001b6e:	f008 fd27 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d153      	bne.n	8001c20 <menu+0x694>
 8001b78:	4b80      	ldr	r3, [pc, #512]	@ (8001d7c <menu+0x7f0>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d04c      	beq.n	8001c20 <menu+0x694>
 8001b86:	4b7b      	ldr	r3, [pc, #492]	@ (8001d74 <menu+0x7e8>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b0a      	cmp	r3, #10
 8001b8c:	d148      	bne.n	8001c20 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <menu+0x7f4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	4b7b      	ldr	r3, [pc, #492]	@ (8001d84 <menu+0x7f8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b9c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d88 <menu+0x7fc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	4b78      	ldr	r3, [pc, #480]	@ (8001d84 <menu+0x7f8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001baa:	4b78      	ldr	r3, [pc, #480]	@ (8001d8c <menu+0x800>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	4b74      	ldr	r3, [pc, #464]	@ (8001d84 <menu+0x7f8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001bb8:	4b75      	ldr	r3, [pc, #468]	@ (8001d90 <menu+0x804>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	4b71      	ldr	r3, [pc, #452]	@ (8001d84 <menu+0x7f8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001bc6:	4b73      	ldr	r3, [pc, #460]	@ (8001d94 <menu+0x808>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8001d84 <menu+0x7f8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001bd4:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <menu+0x80c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <menu+0x7f8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001be2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d9c <menu+0x810>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <menu+0x7f8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8001da0 <menu+0x814>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	4b63      	ldr	r3, [pc, #396]	@ (8001d84 <menu+0x7f8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001bfe:	4b69      	ldr	r3, [pc, #420]	@ (8001da4 <menu+0x818>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <menu+0x7f8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c0c:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <menu+0x81c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	4b5c      	ldr	r3, [pc, #368]	@ (8001d84 <menu+0x7f8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001c1a:	4b64      	ldr	r3, [pc, #400]	@ (8001dac <menu+0x820>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c20:	4b63      	ldr	r3, [pc, #396]	@ (8001db0 <menu+0x824>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	f040 808e 	bne.w	8001d46 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001c2a:	4a62      	ldr	r2, [pc, #392]	@ (8001db4 <menu+0x828>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f007 f99c 	bl	8008f6c <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c34:	4b4e      	ldr	r3, [pc, #312]	@ (8001d70 <menu+0x7e4>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d003      	beq.n	8001c44 <menu+0x6b8>
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <menu+0x7e4>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d104      	bne.n	8001c4e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001c44:	4a5c      	ldr	r2, [pc, #368]	@ (8001db8 <menu+0x82c>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f007 f98f 	bl	8008f6c <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dbc <menu+0x830>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <menu+0x6dc>
 8001c56:	4b46      	ldr	r3, [pc, #280]	@ (8001d70 <menu+0x7e4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001c5e:	4a58      	ldr	r2, [pc, #352]	@ (8001dc0 <menu+0x834>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	2002      	movs	r0, #2
 8001c64:	f007 f982 	bl	8008f6c <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c68:	4b54      	ldr	r3, [pc, #336]	@ (8001dbc <menu+0x830>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <menu+0x6f6>
 8001c70:	4b3f      	ldr	r3, [pc, #252]	@ (8001d70 <menu+0x7e4>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001c78:	4a52      	ldr	r2, [pc, #328]	@ (8001dc4 <menu+0x838>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f007 f975 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c82:	2102      	movs	r1, #2
 8001c84:	483c      	ldr	r0, [pc, #240]	@ (8001d78 <menu+0x7ec>)
 8001c86:	f008 fc9b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d119      	bne.n	8001cc4 <menu+0x738>
 8001c90:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <menu+0x7f0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <menu+0x738>
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <menu+0x7e4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10e      	bne.n	8001cc4 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <menu+0x830>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <menu+0x830>)
 8001cb0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001cb2:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <menu+0x830>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d902      	bls.n	8001cc0 <menu+0x734>
				calismaSekli = 0;
 8001cba:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <menu+0x830>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc0:	f002 f9aa 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	482c      	ldr	r0, [pc, #176]	@ (8001d78 <menu+0x7ec>)
 8001cc8:	f008 fc7a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d119      	bne.n	8001d06 <menu+0x77a>
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <menu+0x7f0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d012      	beq.n	8001d06 <menu+0x77a>
 8001ce0:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <menu+0x7e4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10e      	bne.n	8001d06 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001ce8:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <menu+0x830>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <menu+0x830>)
 8001cf2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001cf4:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <menu+0x830>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <menu+0x776>
	    		calismaSekli = 1;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001dbc <menu+0x830>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d02:	f002 f989 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d06:	2108      	movs	r1, #8
 8001d08:	481b      	ldr	r0, [pc, #108]	@ (8001d78 <menu+0x7ec>)
 8001d0a:	f008 fc59 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d118      	bne.n	8001d46 <menu+0x7ba>
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <menu+0x7f0>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d011      	beq.n	8001d46 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <menu+0x830>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <menu+0x7f8>)
 8001d28:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <menu+0x830>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <menu+0x7b4>
				altLimit = 1;
 8001d32:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <menu+0x83c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d38:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <menu+0x83c>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <menu+0x7f8>)
 8001d3e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <menu+0x820>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <menu+0x824>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	f040 809c 	bne.w	8001e88 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001d50:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <menu+0x840>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	2001      	movs	r0, #1
 8001d56:	f007 f909 	bl	8008f6c <lcd_print>

		if(emniyetCercevesi == 0) {
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <menu+0x844>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d13a      	bne.n	8001dd8 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001d62:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <menu+0x848>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	2002      	movs	r0, #2
 8001d68:	f007 f900 	bl	8008f6c <lcd_print>
 8001d6c:	e03d      	b.n	8001dea <menu+0x85e>
 8001d6e:	bf00      	nop
 8001d70:	200010cb 	.word	0x200010cb
 8001d74:	200010be 	.word	0x200010be
 8001d78:	40010800 	.word	0x40010800
 8001d7c:	200010ec 	.word	0x200010ec
 8001d80:	200010dd 	.word	0x200010dd
 8001d84:	20000fec 	.word	0x20000fec
 8001d88:	200010de 	.word	0x200010de
 8001d8c:	200010df 	.word	0x200010df
 8001d90:	200010e0 	.word	0x200010e0
 8001d94:	200010e1 	.word	0x200010e1
 8001d98:	200010e2 	.word	0x200010e2
 8001d9c:	200010e3 	.word	0x200010e3
 8001da0:	200010e4 	.word	0x200010e4
 8001da4:	200010e5 	.word	0x200010e5
 8001da8:	200010e6 	.word	0x200010e6
 8001dac:	200010e9 	.word	0x200010e9
 8001db0:	200010bc 	.word	0x200010bc
 8001db4:	20001338 	.word	0x20001338
 8001db8:	2000134c 	.word	0x2000134c
 8001dbc:	200010bd 	.word	0x200010bd
 8001dc0:	20001360 	.word	0x20001360
 8001dc4:	20001374 	.word	0x20001374
 8001dc8:	200010c2 	.word	0x200010c2
 8001dcc:	20001388 	.word	0x20001388
 8001dd0:	200010c0 	.word	0x200010c0
 8001dd4:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 8001dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001f88 <menu+0x9fc>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d104      	bne.n	8001dea <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001de0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f8c <menu+0xa00>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	2002      	movs	r0, #2
 8001de6:	f007 f8c1 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dea:	2102      	movs	r1, #2
 8001dec:	4868      	ldr	r0, [pc, #416]	@ (8001f90 <menu+0xa04>)
 8001dee:	f008 fbe7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d115      	bne.n	8001e24 <menu+0x898>
 8001df8:	4b66      	ldr	r3, [pc, #408]	@ (8001f94 <menu+0xa08>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	f083 0301 	eor.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e06:	4b60      	ldr	r3, [pc, #384]	@ (8001f88 <menu+0x9fc>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f88 <menu+0x9fc>)
 8001e10:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e12:	4b5d      	ldr	r3, [pc, #372]	@ (8001f88 <menu+0x9fc>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d902      	bls.n	8001e20 <menu+0x894>
				emniyetCercevesi = 0;
 8001e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f88 <menu+0x9fc>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e20:	f002 f8fa 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e24:	2104      	movs	r1, #4
 8001e26:	485a      	ldr	r0, [pc, #360]	@ (8001f90 <menu+0xa04>)
 8001e28:	f008 fbca 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d115      	bne.n	8001e5e <menu+0x8d2>
 8001e32:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <menu+0xa08>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e40:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <menu+0x9fc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b4f      	ldr	r3, [pc, #316]	@ (8001f88 <menu+0x9fc>)
 8001e4a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f88 <menu+0x9fc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001e54:	4b4c      	ldr	r3, [pc, #304]	@ (8001f88 <menu+0x9fc>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e5a:	f002 f8dd 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e5e:	2108      	movs	r1, #8
 8001e60:	484b      	ldr	r0, [pc, #300]	@ (8001f90 <menu+0xa04>)
 8001e62:	f008 fbad 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10d      	bne.n	8001e88 <menu+0x8fc>
 8001e6c:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <menu+0xa08>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001e7a:	4b43      	ldr	r3, [pc, #268]	@ (8001f88 <menu+0x9fc>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <menu+0xa0c>)
 8001e80:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e82:	4b46      	ldr	r3, [pc, #280]	@ (8001f9c <menu+0xa10>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e88:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <menu+0xa14>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d166      	bne.n	8001f5e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001e90:	4a44      	ldr	r2, [pc, #272]	@ (8001fa4 <menu+0xa18>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	2001      	movs	r0, #1
 8001e96:	f007 f869 	bl	8008f6c <lcd_print>

		if(yavaslamaLimit == 0) {
 8001e9a:	4b43      	ldr	r3, [pc, #268]	@ (8001fa8 <menu+0xa1c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d105      	bne.n	8001eae <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001ea2:	4a42      	ldr	r2, [pc, #264]	@ (8001fac <menu+0xa20>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f007 f860 	bl	8008f6c <lcd_print>
 8001eac:	e008      	b.n	8001ec0 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001eae:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa8 <menu+0xa1c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d104      	bne.n	8001ec0 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb0 <menu+0xa24>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f007 f856 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4833      	ldr	r0, [pc, #204]	@ (8001f90 <menu+0xa04>)
 8001ec4:	f008 fb7c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d115      	bne.n	8001efa <menu+0x96e>
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <menu+0xa08>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f083 0301 	eor.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00e      	beq.n	8001efa <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001edc:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <menu+0xa1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <menu+0xa1c>)
 8001ee6:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <menu+0xa1c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d902      	bls.n	8001ef6 <menu+0x96a>
				yavaslamaLimit = 0;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <menu+0xa1c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ef6:	f002 f88f 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001efa:	2104      	movs	r1, #4
 8001efc:	4824      	ldr	r0, [pc, #144]	@ (8001f90 <menu+0xa04>)
 8001efe:	f008 fb5f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d115      	bne.n	8001f34 <menu+0x9a8>
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <menu+0xa08>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00e      	beq.n	8001f34 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <menu+0xa1c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <menu+0xa1c>)
 8001f20:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f22:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <menu+0xa1c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <menu+0xa1c>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f30:	f002 f872 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f34:	2108      	movs	r1, #8
 8001f36:	4816      	ldr	r0, [pc, #88]	@ (8001f90 <menu+0xa04>)
 8001f38:	f008 fb42 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10d      	bne.n	8001f5e <menu+0x9d2>
 8001f42:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <menu+0xa08>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	f083 0301 	eor.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <menu+0xa1c>)
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <menu+0xa0c>)
 8001f56:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <menu+0xa10>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <menu+0xa14>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	f040 80aa 	bne.w	80020bc <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001f68:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <menu+0xa28>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f006 fffd 	bl	8008f6c <lcd_print>

		if(altLimit == 0) {
 8001f72:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <menu+0xa2c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d120      	bne.n	8001fbc <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <menu+0xa20>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f006 fff4 	bl	8008f6c <lcd_print>
 8001f84:	e023      	b.n	8001fce <menu+0xa42>
 8001f86:	bf00      	nop
 8001f88:	200010c0 	.word	0x200010c0
 8001f8c:	200000ec 	.word	0x200000ec
 8001f90:	40010800 	.word	0x40010800
 8001f94:	200010ec 	.word	0x200010ec
 8001f98:	20000fec 	.word	0x20000fec
 8001f9c:	200010e9 	.word	0x200010e9
 8001fa0:	200010bc 	.word	0x200010bc
 8001fa4:	200013c4 	.word	0x200013c4
 8001fa8:	200010c1 	.word	0x200010c1
 8001fac:	2000139c 	.word	0x2000139c
 8001fb0:	200013b0 	.word	0x200013b0
 8001fb4:	200013d8 	.word	0x200013d8
 8001fb8:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 8001fbc:	4b89      	ldr	r3, [pc, #548]	@ (80021e4 <menu+0xc58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d104      	bne.n	8001fce <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001fc4:	4a88      	ldr	r2, [pc, #544]	@ (80021e8 <menu+0xc5c>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f006 ffcf 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4886      	ldr	r0, [pc, #536]	@ (80021ec <menu+0xc60>)
 8001fd2:	f008 faf5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d119      	bne.n	8002010 <menu+0xa84>
 8001fdc:	4b84      	ldr	r3, [pc, #528]	@ (80021f0 <menu+0xc64>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <menu+0xa84>
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <menu+0xc68>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <menu+0xa84>
			altLimit = altLimit + 1;
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80021e4 <menu+0xc58>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <menu+0xc58>)
 8001ffc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ffe:	4b79      	ldr	r3, [pc, #484]	@ (80021e4 <menu+0xc58>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d902      	bls.n	800200c <menu+0xa80>
				altLimit = 0;
 8002006:	4b77      	ldr	r3, [pc, #476]	@ (80021e4 <menu+0xc58>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800200c:	f002 f804 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002010:	2104      	movs	r1, #4
 8002012:	4876      	ldr	r0, [pc, #472]	@ (80021ec <menu+0xc60>)
 8002014:	f008 fad4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d119      	bne.n	8002052 <menu+0xac6>
 800201e:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <menu+0xc64>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f083 0301 	eor.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <menu+0xac6>
 800202c:	4b71      	ldr	r3, [pc, #452]	@ (80021f4 <menu+0xc68>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10e      	bne.n	8002052 <menu+0xac6>
			altLimit = altLimit - 1;
 8002034:	4b6b      	ldr	r3, [pc, #428]	@ (80021e4 <menu+0xc58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b69      	ldr	r3, [pc, #420]	@ (80021e4 <menu+0xc58>)
 800203e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002040:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <menu+0xc58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <menu+0xac2>
		   		altLimit = 1;
 8002048:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <menu+0xc58>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204e:	f001 ffe3 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002052:	2108      	movs	r1, #8
 8002054:	4865      	ldr	r0, [pc, #404]	@ (80021ec <menu+0xc60>)
 8002056:	f008 fab3 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b01      	cmp	r3, #1
 800205e:	d12d      	bne.n	80020bc <menu+0xb30>
 8002060:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <menu+0xc64>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d026      	beq.n	80020bc <menu+0xb30>
			eepromData[5] = altLimit;
 800206e:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <menu+0xc58>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <menu+0xc6c>)
 8002074:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002076:	4b5b      	ldr	r3, [pc, #364]	@ (80021e4 <menu+0xc58>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d110      	bne.n	80020a0 <menu+0xb14>
 800207e:	4b5f      	ldr	r3, [pc, #380]	@ (80021fc <menu+0xc70>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <menu+0xb02>
 8002086:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <menu+0xc70>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d108      	bne.n	80020a0 <menu+0xb14>
				kapiTablaAcKonum = 3;
 800208e:	4b5b      	ldr	r3, [pc, #364]	@ (80021fc <menu+0xc70>)
 8002090:	2203      	movs	r2, #3
 8002092:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002094:	4b59      	ldr	r3, [pc, #356]	@ (80021fc <menu+0xc70>)
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	4b57      	ldr	r3, [pc, #348]	@ (80021f8 <menu+0xc6c>)
 800209a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800209e:	e00a      	b.n	80020b6 <menu+0xb2a>
			} else if(altLimit == 0) {
 80020a0:	4b50      	ldr	r3, [pc, #320]	@ (80021e4 <menu+0xc58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <menu+0xb2a>
				platformSilindirTipi = 0;
 80020a8:	4b55      	ldr	r3, [pc, #340]	@ (8002200 <menu+0xc74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020ae:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <menu+0xc74>)
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	4b51      	ldr	r3, [pc, #324]	@ (80021f8 <menu+0xc6c>)
 80020b4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020b6:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <menu+0xc78>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020bc:	4b52      	ldr	r3, [pc, #328]	@ (8002208 <menu+0xc7c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d166      	bne.n	8002192 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 80020c4:	4a51      	ldr	r2, [pc, #324]	@ (800220c <menu+0xc80>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2001      	movs	r0, #1
 80020ca:	f006 ff4f 	bl	8008f6c <lcd_print>

		if(basincSalteri == 0) {
 80020ce:	4b50      	ldr	r3, [pc, #320]	@ (8002210 <menu+0xc84>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 80020d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002214 <menu+0xc88>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f006 ff46 	bl	8008f6c <lcd_print>
 80020e0:	e008      	b.n	80020f4 <menu+0xb68>
		} else if(basincSalteri == 1) {
 80020e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002210 <menu+0xc84>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d104      	bne.n	80020f4 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 80020ea:	4a3f      	ldr	r2, [pc, #252]	@ (80021e8 <menu+0xc5c>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f006 ff3c 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f4:	2102      	movs	r1, #2
 80020f6:	483d      	ldr	r0, [pc, #244]	@ (80021ec <menu+0xc60>)
 80020f8:	f008 fa62 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d115      	bne.n	800212e <menu+0xba2>
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <menu+0xc64>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8002110:	4b3f      	ldr	r3, [pc, #252]	@ (8002210 <menu+0xc84>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b3d      	ldr	r3, [pc, #244]	@ (8002210 <menu+0xc84>)
 800211a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800211c:	4b3c      	ldr	r3, [pc, #240]	@ (8002210 <menu+0xc84>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d902      	bls.n	800212a <menu+0xb9e>
				basincSalteri = 0;
 8002124:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <menu+0xc84>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212a:	f001 ff75 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800212e:	2104      	movs	r1, #4
 8002130:	482e      	ldr	r0, [pc, #184]	@ (80021ec <menu+0xc60>)
 8002132:	f008 fa45 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d115      	bne.n	8002168 <menu+0xbdc>
 800213c:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <menu+0xc64>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f083 0301 	eor.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00e      	beq.n	8002168 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 800214a:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <menu+0xc84>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <menu+0xc84>)
 8002154:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002156:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <menu+0xc84>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <menu+0xbd8>
		   		basincSalteri = 1;
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <menu+0xc84>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002164:	f001 ff58 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002168:	2108      	movs	r1, #8
 800216a:	4820      	ldr	r0, [pc, #128]	@ (80021ec <menu+0xc60>)
 800216c:	f008 fa28 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10d      	bne.n	8002192 <menu+0xc06>
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <menu+0xc64>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8002184:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <menu+0xc84>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <menu+0xc6c>)
 800218a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <menu+0xc78>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <menu+0xc7c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b07      	cmp	r3, #7
 8002198:	f040 80a9 	bne.w	80022ee <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 800219c:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <menu+0xc8c>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2001      	movs	r0, #1
 80021a2:	f006 fee3 	bl	8008f6c <lcd_print>

		if(kapiSecimleri == 0) {
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <menu+0xc90>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 80021ae:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <menu+0xc88>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	2002      	movs	r0, #2
 80021b4:	f006 feda 	bl	8008f6c <lcd_print>
 80021b8:	e03f      	b.n	800223a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 80021ba:	4b18      	ldr	r3, [pc, #96]	@ (800221c <menu+0xc90>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <menu+0xc94>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f006 fed0 	bl	8008f6c <lcd_print>
 80021cc:	e035      	b.n	800223a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <menu+0xc90>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d128      	bne.n	8002228 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <menu+0xc98>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f006 fec6 	bl	8008f6c <lcd_print>
 80021e0:	e02b      	b.n	800223a <menu+0xcae>
 80021e2:	bf00      	nop
 80021e4:	200010c2 	.word	0x200010c2
 80021e8:	200013b0 	.word	0x200013b0
 80021ec:	40010800 	.word	0x40010800
 80021f0:	200010ec 	.word	0x200010ec
 80021f4:	200010bd 	.word	0x200010bd
 80021f8:	20000fec 	.word	0x20000fec
 80021fc:	200010c9 	.word	0x200010c9
 8002200:	200010cf 	.word	0x200010cf
 8002204:	200010e9 	.word	0x200010e9
 8002208:	200010bc 	.word	0x200010bc
 800220c:	200013ec 	.word	0x200013ec
 8002210:	200010c3 	.word	0x200010c3
 8002214:	2000139c 	.word	0x2000139c
 8002218:	20001400 	.word	0x20001400
 800221c:	200010c4 	.word	0x200010c4
 8002220:	20001414 	.word	0x20001414
 8002224:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8002228:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <menu+0xe78>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d104      	bne.n	800223a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002230:	4a75      	ldr	r2, [pc, #468]	@ (8002408 <menu+0xe7c>)
 8002232:	2101      	movs	r1, #1
 8002234:	2002      	movs	r0, #2
 8002236:	f006 fe99 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800223a:	2102      	movs	r1, #2
 800223c:	4873      	ldr	r0, [pc, #460]	@ (800240c <menu+0xe80>)
 800223e:	f008 f9bf 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d115      	bne.n	8002274 <menu+0xce8>
 8002248:	4b71      	ldr	r3, [pc, #452]	@ (8002410 <menu+0xe84>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002256:	4b6b      	ldr	r3, [pc, #428]	@ (8002404 <menu+0xe78>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b69      	ldr	r3, [pc, #420]	@ (8002404 <menu+0xe78>)
 8002260:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002262:	4b68      	ldr	r3, [pc, #416]	@ (8002404 <menu+0xe78>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d902      	bls.n	8002270 <menu+0xce4>
				kapiSecimleri = 0;
 800226a:	4b66      	ldr	r3, [pc, #408]	@ (8002404 <menu+0xe78>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002270:	f001 fed2 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002274:	2104      	movs	r1, #4
 8002276:	4865      	ldr	r0, [pc, #404]	@ (800240c <menu+0xe80>)
 8002278:	f008 f9a2 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d115      	bne.n	80022ae <menu+0xd22>
 8002282:	4b63      	ldr	r3, [pc, #396]	@ (8002410 <menu+0xe84>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <menu+0xe78>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3b01      	subs	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b5a      	ldr	r3, [pc, #360]	@ (8002404 <menu+0xe78>)
 800229a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800229c:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <menu+0xe78>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d902      	bls.n	80022aa <menu+0xd1e>
		   		kapiSecimleri = 3;
 80022a4:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <menu+0xe78>)
 80022a6:	2203      	movs	r2, #3
 80022a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022aa:	f001 feb5 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ae:	2108      	movs	r1, #8
 80022b0:	4856      	ldr	r0, [pc, #344]	@ (800240c <menu+0xe80>)
 80022b2:	f008 f985 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d118      	bne.n	80022ee <menu+0xd62>
 80022bc:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <menu+0xe84>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	f083 0301 	eor.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d011      	beq.n	80022ee <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 80022ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <menu+0xe78>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b51      	ldr	r3, [pc, #324]	@ (8002414 <menu+0xe88>)
 80022d0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002404 <menu+0xe78>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <menu+0xd5c>
				altLimit = 1;
 80022da:	4b4f      	ldr	r3, [pc, #316]	@ (8002418 <menu+0xe8c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002418 <menu+0xe8c>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <menu+0xe88>)
 80022e6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80022e8:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <menu+0xe90>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80022ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002420 <menu+0xe94>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d167      	bne.n	80023c6 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80022f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002424 <menu+0xe98>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2001      	movs	r0, #1
 80022fc:	f006 fe36 	bl	8008f6c <lcd_print>

		if(kapiAcTipi == 0) {
 8002300:	4b49      	ldr	r3, [pc, #292]	@ (8002428 <menu+0xe9c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002308:	4a48      	ldr	r2, [pc, #288]	@ (800242c <menu+0xea0>)
 800230a:	2101      	movs	r1, #1
 800230c:	2002      	movs	r0, #2
 800230e:	f006 fe2d 	bl	8008f6c <lcd_print>
 8002312:	e008      	b.n	8002326 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002314:	4b44      	ldr	r3, [pc, #272]	@ (8002428 <menu+0xe9c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d104      	bne.n	8002326 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 800231c:	4a44      	ldr	r2, [pc, #272]	@ (8002430 <menu+0xea4>)
 800231e:	2101      	movs	r1, #1
 8002320:	2002      	movs	r0, #2
 8002322:	f006 fe23 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002326:	2102      	movs	r1, #2
 8002328:	4838      	ldr	r0, [pc, #224]	@ (800240c <menu+0xe80>)
 800232a:	f008 f949 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d115      	bne.n	8002360 <menu+0xdd4>
 8002334:	4b36      	ldr	r3, [pc, #216]	@ (8002410 <menu+0xe84>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00e      	beq.n	8002360 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <menu+0xe9c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <menu+0xe9c>)
 800234c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800234e:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <menu+0xe9c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d902      	bls.n	800235c <menu+0xdd0>
				kapiAcTipi = 0;
 8002356:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <menu+0xe9c>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800235c:	f001 fe5c 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002360:	2104      	movs	r1, #4
 8002362:	482a      	ldr	r0, [pc, #168]	@ (800240c <menu+0xe80>)
 8002364:	f008 f92c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002368:	4603      	mov	r3, r0
 800236a:	2b01      	cmp	r3, #1
 800236c:	d115      	bne.n	800239a <menu+0xe0e>
 800236e:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <menu+0xe84>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f083 0301 	eor.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 800237c:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <menu+0xe9c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <menu+0xe9c>)
 8002386:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <menu+0xe9c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <menu+0xe9c>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002396:	f001 fe3f 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800239a:	2108      	movs	r1, #8
 800239c:	481b      	ldr	r0, [pc, #108]	@ (800240c <menu+0xe80>)
 800239e:	f008 f90f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10e      	bne.n	80023c6 <menu+0xe3a>
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <menu+0xe84>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <menu+0xe9c>)
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <menu+0xe88>)
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80023c0:	4b16      	ldr	r3, [pc, #88]	@ (800241c <menu+0xe90>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <menu+0xe94>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b09      	cmp	r3, #9
 80023cc:	f040 8092 	bne.w	80024f4 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 80023d0:	4a18      	ldr	r2, [pc, #96]	@ (8002434 <menu+0xea8>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	2001      	movs	r0, #1
 80023d6:	f006 fdc9 	bl	8008f6c <lcd_print>

		if(kapi1Tip == 0) {
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <menu+0xeac>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 80023e2:	4a16      	ldr	r2, [pc, #88]	@ (800243c <menu+0xeb0>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f006 fdc0 	bl	8008f6c <lcd_print>
 80023ec:	e033      	b.n	8002456 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <menu+0xeac>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d126      	bne.n	8002444 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80023f6:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <menu+0xeb4>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2002      	movs	r0, #2
 80023fc:	f006 fdb6 	bl	8008f6c <lcd_print>
 8002400:	e029      	b.n	8002456 <menu+0xeca>
 8002402:	bf00      	nop
 8002404:	200010c4 	.word	0x200010c4
 8002408:	2000143c 	.word	0x2000143c
 800240c:	40010800 	.word	0x40010800
 8002410:	200010ec 	.word	0x200010ec
 8002414:	20000fec 	.word	0x20000fec
 8002418:	200010c2 	.word	0x200010c2
 800241c:	200010e9 	.word	0x200010e9
 8002420:	200010bc 	.word	0x200010bc
 8002424:	20001450 	.word	0x20001450
 8002428:	200010c8 	.word	0x200010c8
 800242c:	20001464 	.word	0x20001464
 8002430:	20001478 	.word	0x20001478
 8002434:	2000148c 	.word	0x2000148c
 8002438:	200010c5 	.word	0x200010c5
 800243c:	20000100 	.word	0x20000100
 8002440:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 8002444:	4b73      	ldr	r3, [pc, #460]	@ (8002614 <menu+0x1088>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d104      	bne.n	8002456 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800244c:	4a72      	ldr	r2, [pc, #456]	@ (8002618 <menu+0x108c>)
 800244e:	2101      	movs	r1, #1
 8002450:	2002      	movs	r0, #2
 8002452:	f006 fd8b 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002456:	2102      	movs	r1, #2
 8002458:	4870      	ldr	r0, [pc, #448]	@ (800261c <menu+0x1090>)
 800245a:	f008 f8b1 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d115      	bne.n	8002490 <menu+0xf04>
 8002464:	4b6e      	ldr	r3, [pc, #440]	@ (8002620 <menu+0x1094>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f083 0301 	eor.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002472:	4b68      	ldr	r3, [pc, #416]	@ (8002614 <menu+0x1088>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b66      	ldr	r3, [pc, #408]	@ (8002614 <menu+0x1088>)
 800247c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800247e:	4b65      	ldr	r3, [pc, #404]	@ (8002614 <menu+0x1088>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d902      	bls.n	800248c <menu+0xf00>
				kapi1Tip = 0;
 8002486:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <menu+0x1088>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800248c:	f001 fdc4 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002490:	2104      	movs	r1, #4
 8002492:	4862      	ldr	r0, [pc, #392]	@ (800261c <menu+0x1090>)
 8002494:	f008 f894 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d115      	bne.n	80024ca <menu+0xf3e>
 800249e:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <menu+0x1094>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80024ac:	4b59      	ldr	r3, [pc, #356]	@ (8002614 <menu+0x1088>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b57      	ldr	r3, [pc, #348]	@ (8002614 <menu+0x1088>)
 80024b6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024b8:	4b56      	ldr	r3, [pc, #344]	@ (8002614 <menu+0x1088>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d902      	bls.n	80024c6 <menu+0xf3a>
		   		kapi1Tip = 2;
 80024c0:	4b54      	ldr	r3, [pc, #336]	@ (8002614 <menu+0x1088>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024c6:	f001 fda7 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ca:	2108      	movs	r1, #8
 80024cc:	4853      	ldr	r0, [pc, #332]	@ (800261c <menu+0x1090>)
 80024ce:	f008 f877 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10d      	bne.n	80024f4 <menu+0xf68>
 80024d8:	4b51      	ldr	r3, [pc, #324]	@ (8002620 <menu+0x1094>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80024e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002614 <menu+0x1088>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002624 <menu+0x1098>)
 80024ec:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002628 <menu+0x109c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024f4:	4b4d      	ldr	r3, [pc, #308]	@ (800262c <menu+0x10a0>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b0a      	cmp	r3, #10
 80024fa:	d16c      	bne.n	80025d6 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80024fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002630 <menu+0x10a4>)
 80024fe:	2101      	movs	r1, #1
 8002500:	2001      	movs	r0, #1
 8002502:	f006 fd33 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002506:	4a4b      	ldr	r2, [pc, #300]	@ (8002634 <menu+0x10a8>)
 8002508:	2101      	movs	r1, #1
 800250a:	2002      	movs	r0, #2
 800250c:	f006 fd2e 	bl	8008f6c <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002510:	4b49      	ldr	r3, [pc, #292]	@ (8002638 <menu+0x10ac>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	220a      	movs	r2, #10
 8002516:	4949      	ldr	r1, [pc, #292]	@ (800263c <menu+0x10b0>)
 8002518:	4618      	mov	r0, r3
 800251a:	f00b f87d 	bl	800d618 <itoa>
		lcd_print(2,16,snum);
 800251e:	4a47      	ldr	r2, [pc, #284]	@ (800263c <menu+0x10b0>)
 8002520:	2110      	movs	r1, #16
 8002522:	2002      	movs	r0, #2
 8002524:	f006 fd22 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002528:	2102      	movs	r1, #2
 800252a:	483c      	ldr	r0, [pc, #240]	@ (800261c <menu+0x1090>)
 800252c:	f008 f848 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d119      	bne.n	800256a <menu+0xfde>
 8002536:	4b3a      	ldr	r3, [pc, #232]	@ (8002620 <menu+0x1094>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d012      	beq.n	800256a <menu+0xfde>
 8002544:	4b33      	ldr	r3, [pc, #204]	@ (8002614 <menu+0x1088>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10e      	bne.n	800256a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800254c:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <menu+0x10ac>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <menu+0x10ac>)
 8002556:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002558:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <menu+0x10ac>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d902      	bls.n	8002566 <menu+0xfda>
				kapi1AcSure = 0;
 8002560:	4b35      	ldr	r3, [pc, #212]	@ (8002638 <menu+0x10ac>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002566:	f001 fd57 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800256a:	2104      	movs	r1, #4
 800256c:	482b      	ldr	r0, [pc, #172]	@ (800261c <menu+0x1090>)
 800256e:	f008 f827 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d119      	bne.n	80025ac <menu+0x1020>
 8002578:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <menu+0x1094>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <menu+0x1020>
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <menu+0x1088>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <menu+0x10ac>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3b01      	subs	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <menu+0x10ac>)
 8002598:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800259a:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <menu+0x10ac>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <menu+0x101c>
		   		kapi1AcSure = 5;
 80025a2:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <menu+0x10ac>)
 80025a4:	2205      	movs	r2, #5
 80025a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025a8:	f001 fd36 	bl	8004018 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ac:	2108      	movs	r1, #8
 80025ae:	481b      	ldr	r0, [pc, #108]	@ (800261c <menu+0x1090>)
 80025b0:	f008 f806 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10d      	bne.n	80025d6 <menu+0x104a>
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <menu+0x1094>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <menu+0x10ac>)
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <menu+0x1098>)
 80025ce:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025d0:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <menu+0x109c>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <menu+0x10a0>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b0b      	cmp	r3, #11
 80025dc:	f040 8090 	bne.w	8002700 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80025e0:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <menu+0x10b4>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	2001      	movs	r0, #1
 80025e6:	f006 fcc1 	bl	8008f6c <lcd_print>

		if(kapi2Tip == 0) {
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <menu+0x10b8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80025f2:	4a15      	ldr	r2, [pc, #84]	@ (8002648 <menu+0x10bc>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	2002      	movs	r0, #2
 80025f8:	f006 fcb8 	bl	8008f6c <lcd_print>
 80025fc:	e031      	b.n	8002662 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80025fe:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <menu+0x10b8>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d124      	bne.n	8002650 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002606:	4a11      	ldr	r2, [pc, #68]	@ (800264c <menu+0x10c0>)
 8002608:	2101      	movs	r1, #1
 800260a:	2002      	movs	r0, #2
 800260c:	f006 fcae 	bl	8008f6c <lcd_print>
 8002610:	e027      	b.n	8002662 <menu+0x10d6>
 8002612:	bf00      	nop
 8002614:	200010c5 	.word	0x200010c5
 8002618:	20000114 	.word	0x20000114
 800261c:	40010800 	.word	0x40010800
 8002620:	200010ec 	.word	0x200010ec
 8002624:	20000fec 	.word	0x20000fec
 8002628:	200010e9 	.word	0x200010e9
 800262c:	200010bc 	.word	0x200010bc
 8002630:	200014b4 	.word	0x200014b4
 8002634:	200014c8 	.word	0x200014c8
 8002638:	200010d5 	.word	0x200010d5
 800263c:	2000105c 	.word	0x2000105c
 8002640:	200014dc 	.word	0x200014dc
 8002644:	200010c6 	.word	0x200010c6
 8002648:	20000100 	.word	0x20000100
 800264c:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 8002650:	4b73      	ldr	r3, [pc, #460]	@ (8002820 <menu+0x1294>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d104      	bne.n	8002662 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002658:	4a72      	ldr	r2, [pc, #456]	@ (8002824 <menu+0x1298>)
 800265a:	2101      	movs	r1, #1
 800265c:	2002      	movs	r0, #2
 800265e:	f006 fc85 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002662:	2102      	movs	r1, #2
 8002664:	4870      	ldr	r0, [pc, #448]	@ (8002828 <menu+0x129c>)
 8002666:	f007 ffab 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d115      	bne.n	800269c <menu+0x1110>
 8002670:	4b6e      	ldr	r3, [pc, #440]	@ (800282c <menu+0x12a0>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f083 0301 	eor.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00e      	beq.n	800269c <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800267e:	4b68      	ldr	r3, [pc, #416]	@ (8002820 <menu+0x1294>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b66      	ldr	r3, [pc, #408]	@ (8002820 <menu+0x1294>)
 8002688:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800268a:	4b65      	ldr	r3, [pc, #404]	@ (8002820 <menu+0x1294>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d902      	bls.n	8002698 <menu+0x110c>
				kapi2Tip = 0;
 8002692:	4b63      	ldr	r3, [pc, #396]	@ (8002820 <menu+0x1294>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002698:	f001 fcbe 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800269c:	2104      	movs	r1, #4
 800269e:	4862      	ldr	r0, [pc, #392]	@ (8002828 <menu+0x129c>)
 80026a0:	f007 ff8e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d115      	bne.n	80026d6 <menu+0x114a>
 80026aa:	4b60      	ldr	r3, [pc, #384]	@ (800282c <menu+0x12a0>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80026b8:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <menu+0x1294>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3b01      	subs	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <menu+0x1294>)
 80026c2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80026c4:	4b56      	ldr	r3, [pc, #344]	@ (8002820 <menu+0x1294>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d902      	bls.n	80026d2 <menu+0x1146>
		   		kapi2Tip = 2;
 80026cc:	4b54      	ldr	r3, [pc, #336]	@ (8002820 <menu+0x1294>)
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d2:	f001 fca1 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d6:	2108      	movs	r1, #8
 80026d8:	4853      	ldr	r0, [pc, #332]	@ (8002828 <menu+0x129c>)
 80026da:	f007 ff71 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10d      	bne.n	8002700 <menu+0x1174>
 80026e4:	4b51      	ldr	r3, [pc, #324]	@ (800282c <menu+0x12a0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f083 0301 	eor.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80026f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002820 <menu+0x1294>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002830 <menu+0x12a4>)
 80026f8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80026fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002834 <menu+0x12a8>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002700:	4b4d      	ldr	r3, [pc, #308]	@ (8002838 <menu+0x12ac>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d16c      	bne.n	80027e2 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002708:	4a4c      	ldr	r2, [pc, #304]	@ (800283c <menu+0x12b0>)
 800270a:	2101      	movs	r1, #1
 800270c:	2001      	movs	r0, #1
 800270e:	f006 fc2d 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002712:	4a4b      	ldr	r2, [pc, #300]	@ (8002840 <menu+0x12b4>)
 8002714:	2101      	movs	r1, #1
 8002716:	2002      	movs	r0, #2
 8002718:	f006 fc28 	bl	8008f6c <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800271c:	4b49      	ldr	r3, [pc, #292]	@ (8002844 <menu+0x12b8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	220a      	movs	r2, #10
 8002722:	4949      	ldr	r1, [pc, #292]	@ (8002848 <menu+0x12bc>)
 8002724:	4618      	mov	r0, r3
 8002726:	f00a ff77 	bl	800d618 <itoa>
		lcd_print(2,16,snum);
 800272a:	4a47      	ldr	r2, [pc, #284]	@ (8002848 <menu+0x12bc>)
 800272c:	2110      	movs	r1, #16
 800272e:	2002      	movs	r0, #2
 8002730:	f006 fc1c 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002734:	2102      	movs	r1, #2
 8002736:	483c      	ldr	r0, [pc, #240]	@ (8002828 <menu+0x129c>)
 8002738:	f007 ff42 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d119      	bne.n	8002776 <menu+0x11ea>
 8002742:	4b3a      	ldr	r3, [pc, #232]	@ (800282c <menu+0x12a0>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f083 0301 	eor.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <menu+0x11ea>
 8002750:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <menu+0x1294>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10e      	bne.n	8002776 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002758:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <menu+0x12b8>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <menu+0x12b8>)
 8002762:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002764:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <menu+0x12b8>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d902      	bls.n	8002772 <menu+0x11e6>
				kapi2AcSure = 0;
 800276c:	4b35      	ldr	r3, [pc, #212]	@ (8002844 <menu+0x12b8>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002772:	f001 fc51 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002776:	2104      	movs	r1, #4
 8002778:	482b      	ldr	r0, [pc, #172]	@ (8002828 <menu+0x129c>)
 800277a:	f007 ff21 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d119      	bne.n	80027b8 <menu+0x122c>
 8002784:	4b29      	ldr	r3, [pc, #164]	@ (800282c <menu+0x12a0>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f083 0301 	eor.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d012      	beq.n	80027b8 <menu+0x122c>
 8002792:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <menu+0x1294>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 800279a:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <menu+0x12b8>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	3b01      	subs	r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b28      	ldr	r3, [pc, #160]	@ (8002844 <menu+0x12b8>)
 80027a4:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80027a6:	4b27      	ldr	r3, [pc, #156]	@ (8002844 <menu+0x12b8>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <menu+0x1228>
		   		kapi2AcSure = 5;
 80027ae:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <menu+0x12b8>)
 80027b0:	2205      	movs	r2, #5
 80027b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b4:	f001 fc30 	bl	8004018 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b8:	2108      	movs	r1, #8
 80027ba:	481b      	ldr	r0, [pc, #108]	@ (8002828 <menu+0x129c>)
 80027bc:	f007 ff00 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <menu+0x1256>
 80027c6:	4b19      	ldr	r3, [pc, #100]	@ (800282c <menu+0x12a0>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f083 0301 	eor.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <menu+0x12b8>)
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <menu+0x12a4>)
 80027da:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80027dc:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <menu+0x12a8>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <menu+0x12ac>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b0d      	cmp	r3, #13
 80027e8:	f040 8090 	bne.w	800290c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80027ec:	4a17      	ldr	r2, [pc, #92]	@ (800284c <menu+0x12c0>)
 80027ee:	2101      	movs	r1, #1
 80027f0:	2001      	movs	r0, #1
 80027f2:	f006 fbbb 	bl	8008f6c <lcd_print>

		if(kapitablaTip == 0) {
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <menu+0x12c4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80027fe:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <menu+0x12c8>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f006 fbb2 	bl	8008f6c <lcd_print>
 8002808:	e031      	b.n	800286e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <menu+0x12c4>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d124      	bne.n	800285c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002812:	4a11      	ldr	r2, [pc, #68]	@ (8002858 <menu+0x12cc>)
 8002814:	2101      	movs	r1, #1
 8002816:	2002      	movs	r0, #2
 8002818:	f006 fba8 	bl	8008f6c <lcd_print>
 800281c:	e027      	b.n	800286e <menu+0x12e2>
 800281e:	bf00      	nop
 8002820:	200010c6 	.word	0x200010c6
 8002824:	20000114 	.word	0x20000114
 8002828:	40010800 	.word	0x40010800
 800282c:	200010ec 	.word	0x200010ec
 8002830:	20000fec 	.word	0x20000fec
 8002834:	200010e9 	.word	0x200010e9
 8002838:	200010bc 	.word	0x200010bc
 800283c:	200014f0 	.word	0x200014f0
 8002840:	200014c8 	.word	0x200014c8
 8002844:	200010d6 	.word	0x200010d6
 8002848:	2000105c 	.word	0x2000105c
 800284c:	20001504 	.word	0x20001504
 8002850:	200010c7 	.word	0x200010c7
 8002854:	20000100 	.word	0x20000100
 8002858:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 800285c:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <menu+0x13d0>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d104      	bne.n	800286e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002864:	4a3e      	ldr	r2, [pc, #248]	@ (8002960 <menu+0x13d4>)
 8002866:	2101      	movs	r1, #1
 8002868:	2002      	movs	r0, #2
 800286a:	f006 fb7f 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800286e:	2102      	movs	r1, #2
 8002870:	483c      	ldr	r0, [pc, #240]	@ (8002964 <menu+0x13d8>)
 8002872:	f007 fea5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002876:	4603      	mov	r3, r0
 8002878:	2b01      	cmp	r3, #1
 800287a:	d115      	bne.n	80028a8 <menu+0x131c>
 800287c:	4b3a      	ldr	r3, [pc, #232]	@ (8002968 <menu+0x13dc>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00e      	beq.n	80028a8 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 800288a:	4b34      	ldr	r3, [pc, #208]	@ (800295c <menu+0x13d0>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b32      	ldr	r3, [pc, #200]	@ (800295c <menu+0x13d0>)
 8002894:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002896:	4b31      	ldr	r3, [pc, #196]	@ (800295c <menu+0x13d0>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <menu+0x1318>
				kapitablaTip = 0;
 800289e:	4b2f      	ldr	r3, [pc, #188]	@ (800295c <menu+0x13d0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028a4:	f001 fbb8 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a8:	2104      	movs	r1, #4
 80028aa:	482e      	ldr	r0, [pc, #184]	@ (8002964 <menu+0x13d8>)
 80028ac:	f007 fe88 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d115      	bne.n	80028e2 <menu+0x1356>
 80028b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002968 <menu+0x13dc>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	f083 0301 	eor.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <menu+0x13d0>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b23      	ldr	r3, [pc, #140]	@ (800295c <menu+0x13d0>)
 80028ce:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80028d0:	4b22      	ldr	r3, [pc, #136]	@ (800295c <menu+0x13d0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d902      	bls.n	80028de <menu+0x1352>
		   		kapitablaTip = 2;
 80028d8:	4b20      	ldr	r3, [pc, #128]	@ (800295c <menu+0x13d0>)
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028de:	f001 fb9b 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028e2:	2108      	movs	r1, #8
 80028e4:	481f      	ldr	r0, [pc, #124]	@ (8002964 <menu+0x13d8>)
 80028e6:	f007 fe6b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d10d      	bne.n	800290c <menu+0x1380>
 80028f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <menu+0x13dc>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <menu+0x13d0>)
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <menu+0x13e0>)
 8002904:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <menu+0x13e4>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <menu+0x13e8>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b0e      	cmp	r3, #14
 8002912:	f040 80a3 	bne.w	8002a5c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <menu+0x13ec>)
 8002918:	2101      	movs	r1, #1
 800291a:	2001      	movs	r0, #1
 800291c:	f006 fb26 	bl	8008f6c <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002920:	4b16      	ldr	r3, [pc, #88]	@ (800297c <menu+0x13f0>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002928:	4a15      	ldr	r2, [pc, #84]	@ (8002980 <menu+0x13f4>)
 800292a:	2101      	movs	r1, #1
 800292c:	2002      	movs	r0, #2
 800292e:	f006 fb1d 	bl	8008f6c <lcd_print>
 8002932:	e034      	b.n	800299e <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <menu+0x13f0>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 800293c:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <menu+0x13f8>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f006 fb13 	bl	8008f6c <lcd_print>
 8002946:	e02a      	b.n	800299e <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <menu+0x13f0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d11d      	bne.n	800298c <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <menu+0x13fc>)
 8002952:	2101      	movs	r1, #1
 8002954:	2002      	movs	r0, #2
 8002956:	f006 fb09 	bl	8008f6c <lcd_print>
 800295a:	e020      	b.n	800299e <menu+0x1412>
 800295c:	200010c7 	.word	0x200010c7
 8002960:	20000114 	.word	0x20000114
 8002964:	40010800 	.word	0x40010800
 8002968:	200010ec 	.word	0x200010ec
 800296c:	20000fec 	.word	0x20000fec
 8002970:	200010e9 	.word	0x200010e9
 8002974:	200010bc 	.word	0x200010bc
 8002978:	20001518 	.word	0x20001518
 800297c:	200010c9 	.word	0x200010c9
 8002980:	2000152c 	.word	0x2000152c
 8002984:	20001540 	.word	0x20001540
 8002988:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 800298c:	4b76      	ldr	r3, [pc, #472]	@ (8002b68 <menu+0x15dc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d104      	bne.n	800299e <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002994:	4a75      	ldr	r2, [pc, #468]	@ (8002b6c <menu+0x15e0>)
 8002996:	2101      	movs	r1, #1
 8002998:	2002      	movs	r0, #2
 800299a:	f006 fae7 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800299e:	2102      	movs	r1, #2
 80029a0:	4873      	ldr	r0, [pc, #460]	@ (8002b70 <menu+0x15e4>)
 80029a2:	f007 fe0d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d115      	bne.n	80029d8 <menu+0x144c>
 80029ac:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <menu+0x15e8>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00e      	beq.n	80029d8 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80029ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002b68 <menu+0x15dc>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b69      	ldr	r3, [pc, #420]	@ (8002b68 <menu+0x15dc>)
 80029c4:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80029c6:	4b68      	ldr	r3, [pc, #416]	@ (8002b68 <menu+0x15dc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d902      	bls.n	80029d4 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80029ce:	4b66      	ldr	r3, [pc, #408]	@ (8002b68 <menu+0x15dc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029d4:	f001 fb20 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029d8:	2104      	movs	r1, #4
 80029da:	4865      	ldr	r0, [pc, #404]	@ (8002b70 <menu+0x15e4>)
 80029dc:	f007 fdf0 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d115      	bne.n	8002a12 <menu+0x1486>
 80029e6:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <menu+0x15e8>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80029f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b68 <menu+0x15dc>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002b68 <menu+0x15dc>)
 80029fe:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002a00:	4b59      	ldr	r3, [pc, #356]	@ (8002b68 <menu+0x15dc>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d902      	bls.n	8002a0e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002a08:	4b57      	ldr	r3, [pc, #348]	@ (8002b68 <menu+0x15dc>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a0e:	f001 fb03 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a12:	2108      	movs	r1, #8
 8002a14:	4856      	ldr	r0, [pc, #344]	@ (8002b70 <menu+0x15e4>)
 8002a16:	f007 fdd3 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d11d      	bne.n	8002a5c <menu+0x14d0>
 8002a20:	4b54      	ldr	r3, [pc, #336]	@ (8002b74 <menu+0x15e8>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b68 <menu+0x15dc>)
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <menu+0x15ec>)
 8002a34:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <menu+0x15dc>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <menu+0x14bc>
 8002a40:	4b49      	ldr	r3, [pc, #292]	@ (8002b68 <menu+0x15dc>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d106      	bne.n	8002a56 <menu+0x14ca>
				altLimit = 1;
 8002a48:	4b4c      	ldr	r3, [pc, #304]	@ (8002b7c <menu+0x15f0>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b7c <menu+0x15f0>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b49      	ldr	r3, [pc, #292]	@ (8002b78 <menu+0x15ec>)
 8002a54:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002a56:	4b4a      	ldr	r3, [pc, #296]	@ (8002b80 <menu+0x15f4>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002a5c:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <menu+0x15f8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	d16c      	bne.n	8002b3e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002a64:	4a48      	ldr	r2, [pc, #288]	@ (8002b88 <menu+0x15fc>)
 8002a66:	2101      	movs	r1, #1
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f006 fa7f 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002a6e:	4a47      	ldr	r2, [pc, #284]	@ (8002b8c <menu+0x1600>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	2002      	movs	r0, #2
 8002a74:	f006 fa7a 	bl	8008f6c <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002a78:	4b45      	ldr	r3, [pc, #276]	@ (8002b90 <menu+0x1604>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	220a      	movs	r2, #10
 8002a7e:	4945      	ldr	r1, [pc, #276]	@ (8002b94 <menu+0x1608>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00a fdc9 	bl	800d618 <itoa>
		lcd_print(2,16,snum);
 8002a86:	4a43      	ldr	r2, [pc, #268]	@ (8002b94 <menu+0x1608>)
 8002a88:	2110      	movs	r1, #16
 8002a8a:	2002      	movs	r0, #2
 8002a8c:	f006 fa6e 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002a90:	2102      	movs	r1, #2
 8002a92:	4837      	ldr	r0, [pc, #220]	@ (8002b70 <menu+0x15e4>)
 8002a94:	f007 fd94 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d119      	bne.n	8002ad2 <menu+0x1546>
 8002a9e:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <menu+0x15e8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	f083 0301 	eor.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <menu+0x1546>
 8002aac:	4b3a      	ldr	r3, [pc, #232]	@ (8002b98 <menu+0x160c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ab4:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <menu+0x1604>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <menu+0x1604>)
 8002abe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ac0:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <menu+0x1604>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d902      	bls.n	8002ace <menu+0x1542>
				kapiTablaAcSure = 0;
 8002ac8:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <menu+0x1604>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ace:	f001 faa3 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	4826      	ldr	r0, [pc, #152]	@ (8002b70 <menu+0x15e4>)
 8002ad6:	f007 fd73 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d119      	bne.n	8002b14 <menu+0x1588>
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <menu+0x15e8>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <menu+0x1588>
 8002aee:	4b2a      	ldr	r3, [pc, #168]	@ (8002b98 <menu+0x160c>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002af6:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <menu+0x1604>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <menu+0x1604>)
 8002b00:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002b02:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <menu+0x1604>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d902      	bls.n	8002b10 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <menu+0x1604>)
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002b10:	f001 fa82 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b14:	2108      	movs	r1, #8
 8002b16:	4816      	ldr	r0, [pc, #88]	@ (8002b70 <menu+0x15e4>)
 8002b18:	f007 fd52 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10d      	bne.n	8002b3e <menu+0x15b2>
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <menu+0x15e8>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002b30:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <menu+0x1604>)
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <menu+0x15ec>)
 8002b36:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <menu+0x15f4>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <menu+0x15f8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	f040 8086 	bne.w	8002c54 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <menu+0x1610>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f006 fa0d 	bl	8008f6c <lcd_print>

		if(yukariYavasLimit == 0) {
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <menu+0x1614>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d124      	bne.n	8002ba4 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002b5a:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <menu+0x15e0>)
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f006 fa04 	bl	8008f6c <lcd_print>
 8002b64:	e027      	b.n	8002bb6 <menu+0x162a>
 8002b66:	bf00      	nop
 8002b68:	200010c9 	.word	0x200010c9
 8002b6c:	2000139c 	.word	0x2000139c
 8002b70:	40010800 	.word	0x40010800
 8002b74:	200010ec 	.word	0x200010ec
 8002b78:	20000fec 	.word	0x20000fec
 8002b7c:	200010c2 	.word	0x200010c2
 8002b80:	200010e9 	.word	0x200010e9
 8002b84:	200010bc 	.word	0x200010bc
 8002b88:	20001568 	.word	0x20001568
 8002b8c:	200014c8 	.word	0x200014c8
 8002b90:	200010d7 	.word	0x200010d7
 8002b94:	2000105c 	.word	0x2000105c
 8002b98:	200010c7 	.word	0x200010c7
 8002b9c:	2000157c 	.word	0x2000157c
 8002ba0:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002ba4:	4b84      	ldr	r3, [pc, #528]	@ (8002db8 <menu+0x182c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d104      	bne.n	8002bb6 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002bac:	4a83      	ldr	r2, [pc, #524]	@ (8002dbc <menu+0x1830>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f006 f9db 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4881      	ldr	r0, [pc, #516]	@ (8002dc0 <menu+0x1834>)
 8002bba:	f007 fd01 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d115      	bne.n	8002bf0 <menu+0x1664>
 8002bc4:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc4 <menu+0x1838>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00e      	beq.n	8002bf0 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002bd2:	4b79      	ldr	r3, [pc, #484]	@ (8002db8 <menu+0x182c>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b77      	ldr	r3, [pc, #476]	@ (8002db8 <menu+0x182c>)
 8002bdc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002bde:	4b76      	ldr	r3, [pc, #472]	@ (8002db8 <menu+0x182c>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d902      	bls.n	8002bec <menu+0x1660>
				yukariYavasLimit = 0;
 8002be6:	4b74      	ldr	r3, [pc, #464]	@ (8002db8 <menu+0x182c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bec:	f001 fa14 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	4873      	ldr	r0, [pc, #460]	@ (8002dc0 <menu+0x1834>)
 8002bf4:	f007 fce4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d115      	bne.n	8002c2a <menu+0x169e>
 8002bfe:	4b71      	ldr	r3, [pc, #452]	@ (8002dc4 <menu+0x1838>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002db8 <menu+0x182c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b68      	ldr	r3, [pc, #416]	@ (8002db8 <menu+0x182c>)
 8002c16:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002c18:	4b67      	ldr	r3, [pc, #412]	@ (8002db8 <menu+0x182c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002c20:	4b65      	ldr	r3, [pc, #404]	@ (8002db8 <menu+0x182c>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c26:	f001 f9f7 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	4864      	ldr	r0, [pc, #400]	@ (8002dc0 <menu+0x1834>)
 8002c2e:	f007 fcc7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10d      	bne.n	8002c54 <menu+0x16c8>
 8002c38:	4b62      	ldr	r3, [pc, #392]	@ (8002dc4 <menu+0x1838>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002c46:	4b5c      	ldr	r3, [pc, #368]	@ (8002db8 <menu+0x182c>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc8 <menu+0x183c>)
 8002c4c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dcc <menu+0x1840>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002c54:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd0 <menu+0x1844>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b11      	cmp	r3, #17
 8002c5a:	f040 808b 	bne.w	8002d74 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002c5e:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd4 <menu+0x1848>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	2001      	movs	r0, #1
 8002c64:	f006 f982 	bl	8008f6c <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002c68:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd8 <menu+0x184c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d105      	bne.n	8002c7c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002c70:	4a5a      	ldr	r2, [pc, #360]	@ (8002ddc <menu+0x1850>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	2002      	movs	r0, #2
 8002c76:	f006 f979 	bl	8008f6c <lcd_print>
 8002c7a:	e012      	b.n	8002ca2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002c7c:	4b56      	ldr	r3, [pc, #344]	@ (8002dd8 <menu+0x184c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002c84:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <menu+0x1854>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f006 f96f 	bl	8008f6c <lcd_print>
 8002c8e:	e008      	b.n	8002ca2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002c90:	4b51      	ldr	r3, [pc, #324]	@ (8002dd8 <menu+0x184c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002c98:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <menu+0x1858>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f006 f965 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4846      	ldr	r0, [pc, #280]	@ (8002dc0 <menu+0x1834>)
 8002ca6:	f007 fc8b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d115      	bne.n	8002cdc <menu+0x1750>
 8002cb0:	4b44      	ldr	r3, [pc, #272]	@ (8002dc4 <menu+0x1838>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00e      	beq.n	8002cdc <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002cbe:	4b46      	ldr	r3, [pc, #280]	@ (8002dd8 <menu+0x184c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b44      	ldr	r3, [pc, #272]	@ (8002dd8 <menu+0x184c>)
 8002cc8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002cca:	4b43      	ldr	r3, [pc, #268]	@ (8002dd8 <menu+0x184c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <menu+0x184c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cd8:	f001 f99e 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cdc:	2104      	movs	r1, #4
 8002cde:	4838      	ldr	r0, [pc, #224]	@ (8002dc0 <menu+0x1834>)
 8002ce0:	f007 fc6e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d115      	bne.n	8002d16 <menu+0x178a>
 8002cea:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <menu+0x1838>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002cf8:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <menu+0x184c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <menu+0x184c>)
 8002d02:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002d04:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <menu+0x184c>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d902      	bls.n	8002d12 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002d0c:	4b32      	ldr	r3, [pc, #200]	@ (8002dd8 <menu+0x184c>)
 8002d0e:	2202      	movs	r2, #2
 8002d10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d12:	f001 f981 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d16:	2108      	movs	r1, #8
 8002d18:	4829      	ldr	r0, [pc, #164]	@ (8002dc0 <menu+0x1834>)
 8002d1a:	f007 fc51 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d127      	bne.n	8002d74 <menu+0x17e8>
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <menu+0x1838>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d020      	beq.n	8002d74 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002d32:	4b29      	ldr	r3, [pc, #164]	@ (8002dd8 <menu+0x184c>)
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	4b24      	ldr	r3, [pc, #144]	@ (8002dc8 <menu+0x183c>)
 8002d38:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002d3a:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <menu+0x184c>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <menu+0x17be>
 8002d42:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <menu+0x184c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d106      	bne.n	8002d58 <menu+0x17cc>
				calismaSekli = 0;
 8002d4a:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <menu+0x185c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <menu+0x185c>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <menu+0x183c>)
 8002d56:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <menu+0x184c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002d60:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <menu+0x1860>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002d66:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <menu+0x1860>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b17      	ldr	r3, [pc, #92]	@ (8002dc8 <menu+0x183c>)
 8002d6c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <menu+0x1840>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <menu+0x1844>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b12      	cmp	r3, #18
 8002d7a:	f040 8097 	bne.w	8002eac <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <menu+0x184c>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d105      	bne.n	8002d92 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002d86:	4a1a      	ldr	r2, [pc, #104]	@ (8002df0 <menu+0x1864>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f006 f8ee 	bl	8008f6c <lcd_print>
 8002d90:	e008      	b.n	8002da4 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002d92:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <menu+0x184c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d104      	bne.n	8002da4 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002d9a:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <menu+0x1868>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f006 f8e4 	bl	8008f6c <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <menu+0x186c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d127      	bne.n	8002dfc <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002dac:	4a0d      	ldr	r2, [pc, #52]	@ (8002de4 <menu+0x1858>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	2002      	movs	r0, #2
 8002db2:	f006 f8db 	bl	8008f6c <lcd_print>
 8002db6:	e02a      	b.n	8002e0e <menu+0x1882>
 8002db8:	200010ca 	.word	0x200010ca
 8002dbc:	200013b0 	.word	0x200013b0
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	200010ec 	.word	0x200010ec
 8002dc8:	20000fec 	.word	0x20000fec
 8002dcc:	200010e9 	.word	0x200010e9
 8002dd0:	200010bc 	.word	0x200010bc
 8002dd4:	20001590 	.word	0x20001590
 8002dd8:	200010cb 	.word	0x200010cb
 8002ddc:	200015a4 	.word	0x200015a4
 8002de0:	200015b8 	.word	0x200015b8
 8002de4:	2000139c 	.word	0x2000139c
 8002de8:	200010bd 	.word	0x200010bd
 8002dec:	200010ce 	.word	0x200010ce
 8002df0:	200015cc 	.word	0x200015cc
 8002df4:	200015e0 	.word	0x200015e0
 8002df8:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002dfc:	4b79      	ldr	r3, [pc, #484]	@ (8002fe4 <menu+0x1a58>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d104      	bne.n	8002e0e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002e04:	4a78      	ldr	r2, [pc, #480]	@ (8002fe8 <menu+0x1a5c>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f006 f8af 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4876      	ldr	r0, [pc, #472]	@ (8002fec <menu+0x1a60>)
 8002e12:	f007 fbd5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d115      	bne.n	8002e48 <menu+0x18bc>
 8002e1c:	4b74      	ldr	r3, [pc, #464]	@ (8002ff0 <menu+0x1a64>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00e      	beq.n	8002e48 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002e2a:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe4 <menu+0x1a58>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <menu+0x1a58>)
 8002e34:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002e36:	4b6b      	ldr	r3, [pc, #428]	@ (8002fe4 <menu+0x1a58>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d902      	bls.n	8002e44 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002e3e:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <menu+0x1a58>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e44:	f001 f8e8 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e48:	2104      	movs	r1, #4
 8002e4a:	4868      	ldr	r0, [pc, #416]	@ (8002fec <menu+0x1a60>)
 8002e4c:	f007 fbb8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d115      	bne.n	8002e82 <menu+0x18f6>
 8002e56:	4b66      	ldr	r3, [pc, #408]	@ (8002ff0 <menu+0x1a64>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	f083 0301 	eor.w	r3, r3, #1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00e      	beq.n	8002e82 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002e64:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe4 <menu+0x1a58>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe4 <menu+0x1a58>)
 8002e6e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002e70:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe4 <menu+0x1a58>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002e78:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <menu+0x1a58>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e7e:	f001 f8cb 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e82:	2108      	movs	r1, #8
 8002e84:	4859      	ldr	r0, [pc, #356]	@ (8002fec <menu+0x1a60>)
 8002e86:	f007 fb9b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10d      	bne.n	8002eac <menu+0x1920>
 8002e90:	4b57      	ldr	r3, [pc, #348]	@ (8002ff0 <menu+0x1a64>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	f083 0301 	eor.w	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002e9e:	4b51      	ldr	r3, [pc, #324]	@ (8002fe4 <menu+0x1a58>)
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <menu+0x1a68>)
 8002ea4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002ea6:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <menu+0x1a6c>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002eac:	4b53      	ldr	r3, [pc, #332]	@ (8002ffc <menu+0x1a70>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b13      	cmp	r3, #19
 8002eb2:	d174      	bne.n	8002f9e <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002eb4:	4b52      	ldr	r3, [pc, #328]	@ (8003000 <menu+0x1a74>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d105      	bne.n	8002ec8 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002ebc:	4a51      	ldr	r2, [pc, #324]	@ (8003004 <menu+0x1a78>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f006 f853 	bl	8008f6c <lcd_print>
 8002ec6:	e008      	b.n	8002eda <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8003000 <menu+0x1a74>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d104      	bne.n	8002eda <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8003008 <menu+0x1a7c>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f006 f849 	bl	8008f6c <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002eda:	4b4c      	ldr	r3, [pc, #304]	@ (800300c <menu+0x1a80>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002ee2:	4a4b      	ldr	r2, [pc, #300]	@ (8003010 <menu+0x1a84>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f006 f840 	bl	8008f6c <lcd_print>
 8002eec:	e008      	b.n	8002f00 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002eee:	4b47      	ldr	r3, [pc, #284]	@ (800300c <menu+0x1a80>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d104      	bne.n	8002f00 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe8 <menu+0x1a5c>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2002      	movs	r0, #2
 8002efc:	f006 f836 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f00:	2102      	movs	r1, #2
 8002f02:	483a      	ldr	r0, [pc, #232]	@ (8002fec <menu+0x1a60>)
 8002f04:	f007 fb5c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d115      	bne.n	8002f3a <menu+0x19ae>
 8002f0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <menu+0x1a64>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	f083 0301 	eor.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800300c <menu+0x1a80>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b39      	ldr	r3, [pc, #228]	@ (800300c <menu+0x1a80>)
 8002f26:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002f28:	4b38      	ldr	r3, [pc, #224]	@ (800300c <menu+0x1a80>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d902      	bls.n	8002f36 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002f30:	4b36      	ldr	r3, [pc, #216]	@ (800300c <menu+0x1a80>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f36:	f001 f86f 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	482b      	ldr	r0, [pc, #172]	@ (8002fec <menu+0x1a60>)
 8002f3e:	f007 fb3f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d115      	bne.n	8002f74 <menu+0x19e8>
 8002f48:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <menu+0x1a64>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f56:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <menu+0x1a80>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <menu+0x1a80>)
 8002f60:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <menu+0x1a80>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002f6a:	4b28      	ldr	r3, [pc, #160]	@ (800300c <menu+0x1a80>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f70:	f001 f852 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f74:	2108      	movs	r1, #8
 8002f76:	481d      	ldr	r0, [pc, #116]	@ (8002fec <menu+0x1a60>)
 8002f78:	f007 fb22 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10d      	bne.n	8002f9e <menu+0x1a12>
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <menu+0x1a64>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002f90:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <menu+0x1a80>)
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <menu+0x1a68>)
 8002f96:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002f98:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <menu+0x1a6c>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002f9e:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <menu+0x1a70>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b14      	cmp	r3, #20
 8002fa4:	f040 809e 	bne.w	80030e4 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <menu+0x1a74>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002fb0:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <menu+0x1a88>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f005 ffd9 	bl	8008f6c <lcd_print>
 8002fba:	e008      	b.n	8002fce <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002fbc:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <menu+0x1a74>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d104      	bne.n	8002fce <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <menu+0x1a8c>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f005 ffcf 	bl	8008f6c <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <menu+0x1a90>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d126      	bne.n	8003024 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002fd6:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <menu+0x1a94>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f005 ffc6 	bl	8008f6c <lcd_print>
 8002fe0:	e029      	b.n	8003036 <menu+0x1aaa>
 8002fe2:	bf00      	nop
 8002fe4:	200010cc 	.word	0x200010cc
 8002fe8:	200013b0 	.word	0x200013b0
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	200010ec 	.word	0x200010ec
 8002ff4:	20000fec 	.word	0x20000fec
 8002ff8:	200010e9 	.word	0x200010e9
 8002ffc:	200010bc 	.word	0x200010bc
 8003000:	200010cb 	.word	0x200010cb
 8003004:	200015f4 	.word	0x200015f4
 8003008:	20001608 	.word	0x20001608
 800300c:	200010cd 	.word	0x200010cd
 8003010:	2000139c 	.word	0x2000139c
 8003014:	2000161c 	.word	0x2000161c
 8003018:	20001630 	.word	0x20001630
 800301c:	200010ce 	.word	0x200010ce
 8003020:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 8003024:	4b39      	ldr	r3, [pc, #228]	@ (800310c <menu+0x1b80>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d104      	bne.n	8003036 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 800302c:	4a38      	ldr	r2, [pc, #224]	@ (8003110 <menu+0x1b84>)
 800302e:	2101      	movs	r1, #1
 8003030:	2002      	movs	r0, #2
 8003032:	f005 ff9b 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003036:	2102      	movs	r1, #2
 8003038:	4836      	ldr	r0, [pc, #216]	@ (8003114 <menu+0x1b88>)
 800303a:	f007 fac1 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d119      	bne.n	8003078 <menu+0x1aec>
 8003044:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <menu+0x1b8c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <menu+0x1aec>
 8003052:	4b32      	ldr	r3, [pc, #200]	@ (800311c <menu+0x1b90>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d10e      	bne.n	8003078 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800305a:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <menu+0x1b80>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b2a      	ldr	r3, [pc, #168]	@ (800310c <menu+0x1b80>)
 8003064:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003066:	4b29      	ldr	r3, [pc, #164]	@ (800310c <menu+0x1b80>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d902      	bls.n	8003074 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 800306e:	4b27      	ldr	r3, [pc, #156]	@ (800310c <menu+0x1b80>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003074:	f000 ffd0 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003078:	2104      	movs	r1, #4
 800307a:	4826      	ldr	r0, [pc, #152]	@ (8003114 <menu+0x1b88>)
 800307c:	f007 faa0 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d119      	bne.n	80030ba <menu+0x1b2e>
 8003086:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <menu+0x1b8c>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <menu+0x1b2e>
 8003094:	4b21      	ldr	r3, [pc, #132]	@ (800311c <menu+0x1b90>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d10e      	bne.n	80030ba <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <menu+0x1b80>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <menu+0x1b80>)
 80030a6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80030a8:	4b18      	ldr	r3, [pc, #96]	@ (800310c <menu+0x1b80>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 80030b0:	4b16      	ldr	r3, [pc, #88]	@ (800310c <menu+0x1b80>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030b6:	f000 ffaf 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ba:	2108      	movs	r1, #8
 80030bc:	4815      	ldr	r0, [pc, #84]	@ (8003114 <menu+0x1b88>)
 80030be:	f007 fa7f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <menu+0x1b58>
 80030c8:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <menu+0x1b8c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <menu+0x1b80>)
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <menu+0x1b94>)
 80030dc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80030de:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <menu+0x1b98>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80030e4:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <menu+0x1b9c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b15      	cmp	r3, #21
 80030ea:	f040 8088 	bne.w	80031fe <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 80030ee:	4a0f      	ldr	r2, [pc, #60]	@ (800312c <menu+0x1ba0>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	2001      	movs	r0, #1
 80030f4:	f005 ff3a 	bl	8008f6c <lcd_print>

		if(platformSilindirTipi == 0) {
 80030f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <menu+0x1ba4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11b      	bne.n	8003138 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8003100:	4a0c      	ldr	r2, [pc, #48]	@ (8003134 <menu+0x1ba8>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f005 ff31 	bl	8008f6c <lcd_print>
 800310a:	e01e      	b.n	800314a <menu+0x1bbe>
 800310c:	200010ce 	.word	0x200010ce
 8003110:	20001658 	.word	0x20001658
 8003114:	40010800 	.word	0x40010800
 8003118:	200010ec 	.word	0x200010ec
 800311c:	200010cb 	.word	0x200010cb
 8003120:	20000fec 	.word	0x20000fec
 8003124:	200010e9 	.word	0x200010e9
 8003128:	200010bc 	.word	0x200010bc
 800312c:	2000166c 	.word	0x2000166c
 8003130:	200010cf 	.word	0x200010cf
 8003134:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8003138:	4ba1      	ldr	r3, [pc, #644]	@ (80033c0 <menu+0x1e34>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d104      	bne.n	800314a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003140:	4aa0      	ldr	r2, [pc, #640]	@ (80033c4 <menu+0x1e38>)
 8003142:	2101      	movs	r1, #1
 8003144:	2002      	movs	r0, #2
 8003146:	f005 ff11 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800314a:	2102      	movs	r1, #2
 800314c:	489e      	ldr	r0, [pc, #632]	@ (80033c8 <menu+0x1e3c>)
 800314e:	f007 fa37 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d115      	bne.n	8003184 <menu+0x1bf8>
 8003158:	4b9c      	ldr	r3, [pc, #624]	@ (80033cc <menu+0x1e40>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	f083 0301 	eor.w	r3, r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00e      	beq.n	8003184 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003166:	4b96      	ldr	r3, [pc, #600]	@ (80033c0 <menu+0x1e34>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4b94      	ldr	r3, [pc, #592]	@ (80033c0 <menu+0x1e34>)
 8003170:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003172:	4b93      	ldr	r3, [pc, #588]	@ (80033c0 <menu+0x1e34>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d902      	bls.n	8003180 <menu+0x1bf4>
				platformSilindirTipi = 0;
 800317a:	4b91      	ldr	r3, [pc, #580]	@ (80033c0 <menu+0x1e34>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003180:	f000 ff4a 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003184:	2104      	movs	r1, #4
 8003186:	4890      	ldr	r0, [pc, #576]	@ (80033c8 <menu+0x1e3c>)
 8003188:	f007 fa1a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800318c:	4603      	mov	r3, r0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d115      	bne.n	80031be <menu+0x1c32>
 8003192:	4b8e      	ldr	r3, [pc, #568]	@ (80033cc <menu+0x1e40>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00e      	beq.n	80031be <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 80031a0:	4b87      	ldr	r3, [pc, #540]	@ (80033c0 <menu+0x1e34>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b85      	ldr	r3, [pc, #532]	@ (80033c0 <menu+0x1e34>)
 80031aa:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80031ac:	4b84      	ldr	r3, [pc, #528]	@ (80033c0 <menu+0x1e34>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 80031b4:	4b82      	ldr	r3, [pc, #520]	@ (80033c0 <menu+0x1e34>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ba:	f000 ff2d 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031be:	2108      	movs	r1, #8
 80031c0:	4881      	ldr	r0, [pc, #516]	@ (80033c8 <menu+0x1e3c>)
 80031c2:	f007 f9fd 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d118      	bne.n	80031fe <menu+0x1c72>
 80031cc:	4b7f      	ldr	r3, [pc, #508]	@ (80033cc <menu+0x1e40>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 80031da:	4b79      	ldr	r3, [pc, #484]	@ (80033c0 <menu+0x1e34>)
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <menu+0x1e44>)
 80031e0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80031e2:	4b77      	ldr	r3, [pc, #476]	@ (80033c0 <menu+0x1e34>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d106      	bne.n	80031f8 <menu+0x1c6c>
				altLimit = 1;
 80031ea:	4b7a      	ldr	r3, [pc, #488]	@ (80033d4 <menu+0x1e48>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80031f0:	4b78      	ldr	r3, [pc, #480]	@ (80033d4 <menu+0x1e48>)
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	4b76      	ldr	r3, [pc, #472]	@ (80033d0 <menu+0x1e44>)
 80031f6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80031f8:	4b77      	ldr	r3, [pc, #476]	@ (80033d8 <menu+0x1e4c>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80031fe:	4b77      	ldr	r3, [pc, #476]	@ (80033dc <menu+0x1e50>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b16      	cmp	r3, #22
 8003204:	d164      	bne.n	80032d0 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8003206:	4a76      	ldr	r2, [pc, #472]	@ (80033e0 <menu+0x1e54>)
 8003208:	2101      	movs	r1, #1
 800320a:	2001      	movs	r0, #1
 800320c:	f005 feae 	bl	8008f6c <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003210:	4a74      	ldr	r2, [pc, #464]	@ (80033e4 <menu+0x1e58>)
 8003212:	2101      	movs	r1, #1
 8003214:	2002      	movs	r0, #2
 8003216:	f005 fea9 	bl	8008f6c <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800321a:	4b73      	ldr	r3, [pc, #460]	@ (80033e8 <menu+0x1e5c>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	220a      	movs	r2, #10
 8003220:	4972      	ldr	r1, [pc, #456]	@ (80033ec <menu+0x1e60>)
 8003222:	4618      	mov	r0, r3
 8003224:	f00a f9f8 	bl	800d618 <itoa>
		lcd_print(2,16,snum);
 8003228:	4a70      	ldr	r2, [pc, #448]	@ (80033ec <menu+0x1e60>)
 800322a:	2110      	movs	r1, #16
 800322c:	2002      	movs	r0, #2
 800322e:	f005 fe9d 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003232:	2102      	movs	r1, #2
 8003234:	4864      	ldr	r0, [pc, #400]	@ (80033c8 <menu+0x1e3c>)
 8003236:	f007 f9c3 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d115      	bne.n	800326c <menu+0x1ce0>
 8003240:	4b62      	ldr	r3, [pc, #392]	@ (80033cc <menu+0x1e40>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800324e:	4b66      	ldr	r3, [pc, #408]	@ (80033e8 <menu+0x1e5c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b64      	ldr	r3, [pc, #400]	@ (80033e8 <menu+0x1e5c>)
 8003258:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800325a:	4b63      	ldr	r3, [pc, #396]	@ (80033e8 <menu+0x1e5c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b05      	cmp	r3, #5
 8003260:	d902      	bls.n	8003268 <menu+0x1cdc>
				yukariValfTmr = 0;
 8003262:	4b61      	ldr	r3, [pc, #388]	@ (80033e8 <menu+0x1e5c>)
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003268:	f000 fed6 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800326c:	2104      	movs	r1, #4
 800326e:	4856      	ldr	r0, [pc, #344]	@ (80033c8 <menu+0x1e3c>)
 8003270:	f007 f9a6 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d115      	bne.n	80032a6 <menu+0x1d1a>
 800327a:	4b54      	ldr	r3, [pc, #336]	@ (80033cc <menu+0x1e40>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	f083 0301 	eor.w	r3, r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00e      	beq.n	80032a6 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003288:	4b57      	ldr	r3, [pc, #348]	@ (80033e8 <menu+0x1e5c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b55      	ldr	r3, [pc, #340]	@ (80033e8 <menu+0x1e5c>)
 8003292:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003294:	4b54      	ldr	r3, [pc, #336]	@ (80033e8 <menu+0x1e5c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d902      	bls.n	80032a2 <menu+0x1d16>
		   		yukariValfTmr = 5;
 800329c:	4b52      	ldr	r3, [pc, #328]	@ (80033e8 <menu+0x1e5c>)
 800329e:	2205      	movs	r2, #5
 80032a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032a2:	f000 feb9 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a6:	2108      	movs	r1, #8
 80032a8:	4847      	ldr	r0, [pc, #284]	@ (80033c8 <menu+0x1e3c>)
 80032aa:	f007 f989 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10d      	bne.n	80032d0 <menu+0x1d44>
 80032b4:	4b45      	ldr	r3, [pc, #276]	@ (80033cc <menu+0x1e40>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 80032c2:	4b49      	ldr	r3, [pc, #292]	@ (80033e8 <menu+0x1e5c>)
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	4b42      	ldr	r3, [pc, #264]	@ (80033d0 <menu+0x1e44>)
 80032c8:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80032ca:	4b43      	ldr	r3, [pc, #268]	@ (80033d8 <menu+0x1e4c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80032d0:	4b42      	ldr	r3, [pc, #264]	@ (80033dc <menu+0x1e50>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b17      	cmp	r3, #23
 80032d6:	d164      	bne.n	80033a2 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 80032d8:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <menu+0x1e64>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2001      	movs	r0, #1
 80032de:	f005 fe45 	bl	8008f6c <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032e2:	4a40      	ldr	r2, [pc, #256]	@ (80033e4 <menu+0x1e58>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	2002      	movs	r0, #2
 80032e8:	f005 fe40 	bl	8008f6c <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80032ec:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <menu+0x1e68>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	220a      	movs	r2, #10
 80032f2:	493e      	ldr	r1, [pc, #248]	@ (80033ec <menu+0x1e60>)
 80032f4:	4618      	mov	r0, r3
 80032f6:	f00a f98f 	bl	800d618 <itoa>
		lcd_print(2,16,snum);
 80032fa:	4a3c      	ldr	r2, [pc, #240]	@ (80033ec <menu+0x1e60>)
 80032fc:	2110      	movs	r1, #16
 80032fe:	2002      	movs	r0, #2
 8003300:	f005 fe34 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003304:	2102      	movs	r1, #2
 8003306:	4830      	ldr	r0, [pc, #192]	@ (80033c8 <menu+0x1e3c>)
 8003308:	f007 f95a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d115      	bne.n	800333e <menu+0x1db2>
 8003312:	4b2e      	ldr	r3, [pc, #184]	@ (80033cc <menu+0x1e40>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00e      	beq.n	800333e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003320:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <menu+0x1e68>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b32      	ldr	r3, [pc, #200]	@ (80033f4 <menu+0x1e68>)
 800332a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800332c:	4b31      	ldr	r3, [pc, #196]	@ (80033f4 <menu+0x1e68>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b05      	cmp	r3, #5
 8003332:	d902      	bls.n	800333a <menu+0x1dae>
				asagiValfTmr = 0;
 8003334:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <menu+0x1e68>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800333a:	f000 fe6d 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800333e:	2104      	movs	r1, #4
 8003340:	4821      	ldr	r0, [pc, #132]	@ (80033c8 <menu+0x1e3c>)
 8003342:	f007 f93d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d115      	bne.n	8003378 <menu+0x1dec>
 800334c:	4b1f      	ldr	r3, [pc, #124]	@ (80033cc <menu+0x1e40>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 800335a:	4b26      	ldr	r3, [pc, #152]	@ (80033f4 <menu+0x1e68>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <menu+0x1e68>)
 8003364:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003366:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <menu+0x1e68>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800336e:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <menu+0x1e68>)
 8003370:	2205      	movs	r2, #5
 8003372:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003374:	f000 fe50 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003378:	2108      	movs	r1, #8
 800337a:	4813      	ldr	r0, [pc, #76]	@ (80033c8 <menu+0x1e3c>)
 800337c:	f007 f920 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10d      	bne.n	80033a2 <menu+0x1e16>
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <menu+0x1e40>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8003394:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <menu+0x1e68>)
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <menu+0x1e44>)
 800339a:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800339c:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <menu+0x1e4c>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <menu+0x1e50>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b18      	cmp	r3, #24
 80033a8:	f040 8093 	bne.w	80034d2 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <menu+0x1e6c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d125      	bne.n	8003400 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80033b4:	4a11      	ldr	r2, [pc, #68]	@ (80033fc <menu+0x1e70>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	2001      	movs	r0, #1
 80033ba:	f005 fdd7 	bl	8008f6c <lcd_print>
 80033be:	e028      	b.n	8003412 <menu+0x1e86>
 80033c0:	200010cf 	.word	0x200010cf
 80033c4:	20001658 	.word	0x20001658
 80033c8:	40010800 	.word	0x40010800
 80033cc:	200010ec 	.word	0x200010ec
 80033d0:	20000fec 	.word	0x20000fec
 80033d4:	200010c2 	.word	0x200010c2
 80033d8:	200010e9 	.word	0x200010e9
 80033dc:	200010bc 	.word	0x200010bc
 80033e0:	20001680 	.word	0x20001680
 80033e4:	200014c8 	.word	0x200014c8
 80033e8:	200010d0 	.word	0x200010d0
 80033ec:	2000105c 	.word	0x2000105c
 80033f0:	20001694 	.word	0x20001694
 80033f4:	200010d1 	.word	0x200010d1
 80033f8:	200010cb 	.word	0x200010cb
 80033fc:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 8003400:	4b8c      	ldr	r3, [pc, #560]	@ (8003634 <menu+0x20a8>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d104      	bne.n	8003412 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003408:	4a8b      	ldr	r2, [pc, #556]	@ (8003638 <menu+0x20ac>)
 800340a:	2101      	movs	r1, #1
 800340c:	2001      	movs	r0, #1
 800340e:	f005 fdad 	bl	8008f6c <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003412:	4a8a      	ldr	r2, [pc, #552]	@ (800363c <menu+0x20b0>)
 8003414:	2101      	movs	r1, #1
 8003416:	2002      	movs	r0, #2
 8003418:	f005 fda8 	bl	8008f6c <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800341c:	4b88      	ldr	r3, [pc, #544]	@ (8003640 <menu+0x20b4>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	220a      	movs	r2, #10
 8003422:	4988      	ldr	r1, [pc, #544]	@ (8003644 <menu+0x20b8>)
 8003424:	4618      	mov	r0, r3
 8003426:	f00a f8f7 	bl	800d618 <itoa>
		lcd_print(2, 16, snum);
 800342a:	4a86      	ldr	r2, [pc, #536]	@ (8003644 <menu+0x20b8>)
 800342c:	2110      	movs	r1, #16
 800342e:	2002      	movs	r0, #2
 8003430:	f005 fd9c 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003434:	2102      	movs	r1, #2
 8003436:	4884      	ldr	r0, [pc, #528]	@ (8003648 <menu+0x20bc>)
 8003438:	f007 f8c2 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d115      	bne.n	800346e <menu+0x1ee2>
 8003442:	4b82      	ldr	r3, [pc, #520]	@ (800364c <menu+0x20c0>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003450:	4b7b      	ldr	r3, [pc, #492]	@ (8003640 <menu+0x20b4>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b79      	ldr	r3, [pc, #484]	@ (8003640 <menu+0x20b4>)
 800345a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800345c:	4b78      	ldr	r3, [pc, #480]	@ (8003640 <menu+0x20b4>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b05      	cmp	r3, #5
 8003462:	d902      	bls.n	800346a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003464:	4b76      	ldr	r3, [pc, #472]	@ (8003640 <menu+0x20b4>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800346a:	f000 fdd5 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800346e:	2104      	movs	r1, #4
 8003470:	4875      	ldr	r0, [pc, #468]	@ (8003648 <menu+0x20bc>)
 8003472:	f007 f8a5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d115      	bne.n	80034a8 <menu+0x1f1c>
 800347c:	4b73      	ldr	r3, [pc, #460]	@ (800364c <menu+0x20c0>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800348a:	4b6d      	ldr	r3, [pc, #436]	@ (8003640 <menu+0x20b4>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	3b01      	subs	r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b6b      	ldr	r3, [pc, #428]	@ (8003640 <menu+0x20b4>)
 8003494:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003496:	4b6a      	ldr	r3, [pc, #424]	@ (8003640 <menu+0x20b4>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 800349e:	4b68      	ldr	r3, [pc, #416]	@ (8003640 <menu+0x20b4>)
 80034a0:	2205      	movs	r2, #5
 80034a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034a4:	f000 fdb8 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034a8:	2108      	movs	r1, #8
 80034aa:	4867      	ldr	r0, [pc, #412]	@ (8003648 <menu+0x20bc>)
 80034ac:	f007 f888 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10d      	bne.n	80034d2 <menu+0x1f46>
 80034b6:	4b65      	ldr	r3, [pc, #404]	@ (800364c <menu+0x20c0>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	f083 0301 	eor.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80034c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003640 <menu+0x20b4>)
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <menu+0x20c4>)
 80034ca:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80034cc:	4b61      	ldr	r3, [pc, #388]	@ (8003654 <menu+0x20c8>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80034d2:	4b61      	ldr	r3, [pc, #388]	@ (8003658 <menu+0x20cc>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b19      	cmp	r3, #25
 80034d8:	d172      	bne.n	80035c0 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80034da:	4b56      	ldr	r3, [pc, #344]	@ (8003634 <menu+0x20a8>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d105      	bne.n	80034ee <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80034e2:	4a5e      	ldr	r2, [pc, #376]	@ (800365c <menu+0x20d0>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2001      	movs	r0, #1
 80034e8:	f005 fd40 	bl	8008f6c <lcd_print>
 80034ec:	e008      	b.n	8003500 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80034ee:	4b51      	ldr	r3, [pc, #324]	@ (8003634 <menu+0x20a8>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d104      	bne.n	8003500 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80034f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003660 <menu+0x20d4>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	2001      	movs	r0, #1
 80034fc:	f005 fd36 	bl	8008f6c <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003500:	4a4e      	ldr	r2, [pc, #312]	@ (800363c <menu+0x20b0>)
 8003502:	2101      	movs	r1, #1
 8003504:	2002      	movs	r0, #2
 8003506:	f005 fd31 	bl	8008f6c <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800350a:	4b56      	ldr	r3, [pc, #344]	@ (8003664 <menu+0x20d8>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	220a      	movs	r2, #10
 8003510:	494c      	ldr	r1, [pc, #304]	@ (8003644 <menu+0x20b8>)
 8003512:	4618      	mov	r0, r3
 8003514:	f00a f880 	bl	800d618 <itoa>
		lcd_print(2,16,snum);
 8003518:	4a4a      	ldr	r2, [pc, #296]	@ (8003644 <menu+0x20b8>)
 800351a:	2110      	movs	r1, #16
 800351c:	2002      	movs	r0, #2
 800351e:	f005 fd25 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003522:	2102      	movs	r1, #2
 8003524:	4848      	ldr	r0, [pc, #288]	@ (8003648 <menu+0x20bc>)
 8003526:	f007 f84b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800352a:	4603      	mov	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d115      	bne.n	800355c <menu+0x1fd0>
 8003530:	4b46      	ldr	r3, [pc, #280]	@ (800364c <menu+0x20c0>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f083 0301 	eor.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800353e:	4b49      	ldr	r3, [pc, #292]	@ (8003664 <menu+0x20d8>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <menu+0x20d8>)
 8003548:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800354a:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <menu+0x20d8>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d902      	bls.n	8003558 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003552:	4b44      	ldr	r3, [pc, #272]	@ (8003664 <menu+0x20d8>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003558:	f000 fd5e 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800355c:	2104      	movs	r1, #4
 800355e:	483a      	ldr	r0, [pc, #232]	@ (8003648 <menu+0x20bc>)
 8003560:	f007 f82e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d115      	bne.n	8003596 <menu+0x200a>
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <menu+0x20c0>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003578:	4b3a      	ldr	r3, [pc, #232]	@ (8003664 <menu+0x20d8>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b38      	ldr	r3, [pc, #224]	@ (8003664 <menu+0x20d8>)
 8003582:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <menu+0x20d8>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d902      	bls.n	8003592 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 800358c:	4b35      	ldr	r3, [pc, #212]	@ (8003664 <menu+0x20d8>)
 800358e:	2205      	movs	r2, #5
 8003590:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003592:	f000 fd41 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2108      	movs	r1, #8
 8003598:	482b      	ldr	r0, [pc, #172]	@ (8003648 <menu+0x20bc>)
 800359a:	f007 f811 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10d      	bne.n	80035c0 <menu+0x2034>
 80035a4:	4b29      	ldr	r3, [pc, #164]	@ (800364c <menu+0x20c0>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80035b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003664 <menu+0x20d8>)
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <menu+0x20c4>)
 80035b8:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <menu+0x20c8>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80035c0:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <menu+0x20cc>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b1a      	cmp	r3, #26
 80035c6:	f040 80b7 	bne.w	8003738 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80035ca:	4a27      	ldr	r2, [pc, #156]	@ (8003668 <menu+0x20dc>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	2001      	movs	r0, #1
 80035d0:	f005 fccc 	bl	8008f6c <lcd_print>

		if(makineCalismaTmr > 99) {
 80035d4:	4b25      	ldr	r3, [pc, #148]	@ (800366c <menu+0x20e0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b63      	cmp	r3, #99	@ 0x63
 80035da:	d911      	bls.n	8003600 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80035dc:	4a17      	ldr	r2, [pc, #92]	@ (800363c <menu+0x20b0>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2002      	movs	r0, #2
 80035e2:	f005 fcc3 	bl	8008f6c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80035e6:	4b21      	ldr	r3, [pc, #132]	@ (800366c <menu+0x20e0>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	220a      	movs	r2, #10
 80035ec:	4915      	ldr	r1, [pc, #84]	@ (8003644 <menu+0x20b8>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f00a f812 	bl	800d618 <itoa>
			lcd_print(2,14,snum);
 80035f4:	4a13      	ldr	r2, [pc, #76]	@ (8003644 <menu+0x20b8>)
 80035f6:	210e      	movs	r1, #14
 80035f8:	2002      	movs	r0, #2
 80035fa:	f005 fcb7 	bl	8008f6c <lcd_print>
 80035fe:	e04c      	b.n	800369a <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003600:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <menu+0x20e0>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b09      	cmp	r3, #9
 8003606:	d933      	bls.n	8003670 <menu+0x20e4>
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <menu+0x20e0>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b63      	cmp	r3, #99	@ 0x63
 800360e:	d82f      	bhi.n	8003670 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003610:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <menu+0x20b0>)
 8003612:	2101      	movs	r1, #1
 8003614:	2002      	movs	r0, #2
 8003616:	f005 fca9 	bl	8008f6c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800361a:	4b14      	ldr	r3, [pc, #80]	@ (800366c <menu+0x20e0>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	220a      	movs	r2, #10
 8003620:	4908      	ldr	r1, [pc, #32]	@ (8003644 <menu+0x20b8>)
 8003622:	4618      	mov	r0, r3
 8003624:	f009 fff8 	bl	800d618 <itoa>
			lcd_print(2, 15, snum);
 8003628:	4a06      	ldr	r2, [pc, #24]	@ (8003644 <menu+0x20b8>)
 800362a:	210f      	movs	r1, #15
 800362c:	2002      	movs	r0, #2
 800362e:	f005 fc9d 	bl	8008f6c <lcd_print>
 8003632:	e032      	b.n	800369a <menu+0x210e>
 8003634:	200010cb 	.word	0x200010cb
 8003638:	200016bc 	.word	0x200016bc
 800363c:	200014c8 	.word	0x200014c8
 8003640:	200010d2 	.word	0x200010d2
 8003644:	2000105c 	.word	0x2000105c
 8003648:	40010800 	.word	0x40010800
 800364c:	200010ec 	.word	0x200010ec
 8003650:	20000fec 	.word	0x20000fec
 8003654:	200010e9 	.word	0x200010e9
 8003658:	200010bc 	.word	0x200010bc
 800365c:	200016d0 	.word	0x200016d0
 8003660:	200016e4 	.word	0x200016e4
 8003664:	200010d3 	.word	0x200010d3
 8003668:	200016f8 	.word	0x200016f8
 800366c:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 8003670:	4b72      	ldr	r3, [pc, #456]	@ (800383c <menu+0x22b0>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b09      	cmp	r3, #9
 8003676:	d810      	bhi.n	800369a <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003678:	4a71      	ldr	r2, [pc, #452]	@ (8003840 <menu+0x22b4>)
 800367a:	2101      	movs	r1, #1
 800367c:	2002      	movs	r0, #2
 800367e:	f005 fc75 	bl	8008f6c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003682:	4b6e      	ldr	r3, [pc, #440]	@ (800383c <menu+0x22b0>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	220a      	movs	r2, #10
 8003688:	496e      	ldr	r1, [pc, #440]	@ (8003844 <menu+0x22b8>)
 800368a:	4618      	mov	r0, r3
 800368c:	f009 ffc4 	bl	800d618 <itoa>
			lcd_print(2, 16, snum);
 8003690:	4a6c      	ldr	r2, [pc, #432]	@ (8003844 <menu+0x22b8>)
 8003692:	2110      	movs	r1, #16
 8003694:	2002      	movs	r0, #2
 8003696:	f005 fc69 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800369a:	2102      	movs	r1, #2
 800369c:	486a      	ldr	r0, [pc, #424]	@ (8003848 <menu+0x22bc>)
 800369e:	f006 ff8f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d115      	bne.n	80036d4 <menu+0x2148>
 80036a8:	4b68      	ldr	r3, [pc, #416]	@ (800384c <menu+0x22c0>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f083 0301 	eor.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80036b6:	4b61      	ldr	r3, [pc, #388]	@ (800383c <menu+0x22b0>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b5f      	ldr	r3, [pc, #380]	@ (800383c <menu+0x22b0>)
 80036c0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80036c2:	4b5e      	ldr	r3, [pc, #376]	@ (800383c <menu+0x22b0>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2bb4      	cmp	r3, #180	@ 0xb4
 80036c8:	d902      	bls.n	80036d0 <menu+0x2144>
				makineCalismaTmr = 0;
 80036ca:	4b5c      	ldr	r3, [pc, #368]	@ (800383c <menu+0x22b0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036d0:	f000 fca2 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d4:	2104      	movs	r1, #4
 80036d6:	485c      	ldr	r0, [pc, #368]	@ (8003848 <menu+0x22bc>)
 80036d8:	f006 ff72 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d115      	bne.n	800370e <menu+0x2182>
 80036e2:	4b5a      	ldr	r3, [pc, #360]	@ (800384c <menu+0x22c0>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	f083 0301 	eor.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80036f0:	4b52      	ldr	r3, [pc, #328]	@ (800383c <menu+0x22b0>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b50      	ldr	r3, [pc, #320]	@ (800383c <menu+0x22b0>)
 80036fa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80036fc:	4b4f      	ldr	r3, [pc, #316]	@ (800383c <menu+0x22b0>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2bb5      	cmp	r3, #181	@ 0xb5
 8003702:	d902      	bls.n	800370a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003704:	4b4d      	ldr	r3, [pc, #308]	@ (800383c <menu+0x22b0>)
 8003706:	22b4      	movs	r2, #180	@ 0xb4
 8003708:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800370a:	f000 fc85 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800370e:	2108      	movs	r1, #8
 8003710:	484d      	ldr	r0, [pc, #308]	@ (8003848 <menu+0x22bc>)
 8003712:	f006 ff55 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10d      	bne.n	8003738 <menu+0x21ac>
 800371c:	4b4b      	ldr	r3, [pc, #300]	@ (800384c <menu+0x22c0>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800372a:	4b44      	ldr	r3, [pc, #272]	@ (800383c <menu+0x22b0>)
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	4b48      	ldr	r3, [pc, #288]	@ (8003850 <menu+0x22c4>)
 8003730:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003732:	4b48      	ldr	r3, [pc, #288]	@ (8003854 <menu+0x22c8>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003738:	4b47      	ldr	r3, [pc, #284]	@ (8003858 <menu+0x22cc>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b1b      	cmp	r3, #27
 800373e:	d166      	bne.n	800380e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003740:	4a46      	ldr	r2, [pc, #280]	@ (800385c <menu+0x22d0>)
 8003742:	2101      	movs	r1, #1
 8003744:	2001      	movs	r0, #1
 8003746:	f005 fc11 	bl	8008f6c <lcd_print>

		if(buzzer == 0) {
 800374a:	4b45      	ldr	r3, [pc, #276]	@ (8003860 <menu+0x22d4>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003752:	4a44      	ldr	r2, [pc, #272]	@ (8003864 <menu+0x22d8>)
 8003754:	2101      	movs	r1, #1
 8003756:	2002      	movs	r0, #2
 8003758:	f005 fc08 	bl	8008f6c <lcd_print>
 800375c:	e008      	b.n	8003770 <menu+0x21e4>
		} else if(buzzer == 1) {
 800375e:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <menu+0x22d4>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d104      	bne.n	8003770 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003766:	4a40      	ldr	r2, [pc, #256]	@ (8003868 <menu+0x22dc>)
 8003768:	2101      	movs	r1, #1
 800376a:	2002      	movs	r0, #2
 800376c:	f005 fbfe 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003770:	2102      	movs	r1, #2
 8003772:	4835      	ldr	r0, [pc, #212]	@ (8003848 <menu+0x22bc>)
 8003774:	f006 ff24 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d115      	bne.n	80037aa <menu+0x221e>
 800377e:	4b33      	ldr	r3, [pc, #204]	@ (800384c <menu+0x22c0>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	f083 0301 	eor.w	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <menu+0x221e>
			buzzer = buzzer + 1;
 800378c:	4b34      	ldr	r3, [pc, #208]	@ (8003860 <menu+0x22d4>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	4b32      	ldr	r3, [pc, #200]	@ (8003860 <menu+0x22d4>)
 8003796:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003798:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <menu+0x22d4>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d902      	bls.n	80037a6 <menu+0x221a>
				buzzer = 0;
 80037a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003860 <menu+0x22d4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037a6:	f000 fc37 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037aa:	2104      	movs	r1, #4
 80037ac:	4826      	ldr	r0, [pc, #152]	@ (8003848 <menu+0x22bc>)
 80037ae:	f006 ff07 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d115      	bne.n	80037e4 <menu+0x2258>
 80037b8:	4b24      	ldr	r3, [pc, #144]	@ (800384c <menu+0x22c0>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	f083 0301 	eor.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <menu+0x2258>
			buzzer = buzzer - 1;
 80037c6:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <menu+0x22d4>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <menu+0x22d4>)
 80037d0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80037d2:	4b23      	ldr	r3, [pc, #140]	@ (8003860 <menu+0x22d4>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <menu+0x2254>
		   		buzzer = 1;
 80037da:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <menu+0x22d4>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037e0:	f000 fc1a 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e4:	2108      	movs	r1, #8
 80037e6:	4818      	ldr	r0, [pc, #96]	@ (8003848 <menu+0x22bc>)
 80037e8:	f006 feea 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10d      	bne.n	800380e <menu+0x2282>
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <menu+0x22c0>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f083 0301 	eor.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <menu+0x2282>
			eepromData[25] = buzzer;
 8003800:	4b17      	ldr	r3, [pc, #92]	@ (8003860 <menu+0x22d4>)
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <menu+0x22c4>)
 8003806:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003808:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <menu+0x22c8>)
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <menu+0x22cc>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b1c      	cmp	r3, #28
 8003814:	f040 8088 	bne.w	8003928 <menu+0x239c>
		calismaSayModu = 0;
 8003818:	4b14      	ldr	r3, [pc, #80]	@ (800386c <menu+0x22e0>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800381e:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <menu+0x22e4>)
 8003820:	2101      	movs	r1, #1
 8003822:	2001      	movs	r0, #1
 8003824:	f005 fba2 	bl	8008f6c <lcd_print>

		if(demoMode == 0) {
 8003828:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <menu+0x22e8>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d123      	bne.n	8003878 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003830:	4a0c      	ldr	r2, [pc, #48]	@ (8003864 <menu+0x22d8>)
 8003832:	2101      	movs	r1, #1
 8003834:	2002      	movs	r0, #2
 8003836:	f005 fb99 	bl	8008f6c <lcd_print>
 800383a:	e026      	b.n	800388a <menu+0x22fe>
 800383c:	200010d4 	.word	0x200010d4
 8003840:	200014c8 	.word	0x200014c8
 8003844:	2000105c 	.word	0x2000105c
 8003848:	40010800 	.word	0x40010800
 800384c:	200010ec 	.word	0x200010ec
 8003850:	20000fec 	.word	0x20000fec
 8003854:	200010e9 	.word	0x200010e9
 8003858:	200010bc 	.word	0x200010bc
 800385c:	20000128 	.word	0x20000128
 8003860:	200010d8 	.word	0x200010d8
 8003864:	2000139c 	.word	0x2000139c
 8003868:	200013b0 	.word	0x200013b0
 800386c:	200010db 	.word	0x200010db
 8003870:	2000013c 	.word	0x2000013c
 8003874:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003878:	4b80      	ldr	r3, [pc, #512]	@ (8003a7c <menu+0x24f0>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d104      	bne.n	800388a <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003880:	4a7f      	ldr	r2, [pc, #508]	@ (8003a80 <menu+0x24f4>)
 8003882:	2101      	movs	r1, #1
 8003884:	2002      	movs	r0, #2
 8003886:	f005 fb71 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800388a:	2102      	movs	r1, #2
 800388c:	487d      	ldr	r0, [pc, #500]	@ (8003a84 <menu+0x24f8>)
 800388e:	f006 fe97 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d115      	bne.n	80038c4 <menu+0x2338>
 8003898:	4b7b      	ldr	r3, [pc, #492]	@ (8003a88 <menu+0x24fc>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00e      	beq.n	80038c4 <menu+0x2338>
			demoMode = demoMode + 1;
 80038a6:	4b75      	ldr	r3, [pc, #468]	@ (8003a7c <menu+0x24f0>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <menu+0x24f0>)
 80038b0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80038b2:	4b72      	ldr	r3, [pc, #456]	@ (8003a7c <menu+0x24f0>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d902      	bls.n	80038c0 <menu+0x2334>
				demoMode = 0;
 80038ba:	4b70      	ldr	r3, [pc, #448]	@ (8003a7c <menu+0x24f0>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c0:	f000 fbaa 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c4:	2104      	movs	r1, #4
 80038c6:	486f      	ldr	r0, [pc, #444]	@ (8003a84 <menu+0x24f8>)
 80038c8:	f006 fe7a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d115      	bne.n	80038fe <menu+0x2372>
 80038d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a88 <menu+0x24fc>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f083 0301 	eor.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <menu+0x2372>
			demoMode = demoMode - 1;
 80038e0:	4b66      	ldr	r3, [pc, #408]	@ (8003a7c <menu+0x24f0>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b64      	ldr	r3, [pc, #400]	@ (8003a7c <menu+0x24f0>)
 80038ea:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80038ec:	4b63      	ldr	r3, [pc, #396]	@ (8003a7c <menu+0x24f0>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <menu+0x236e>
		   		demoMode = 1;
 80038f4:	4b61      	ldr	r3, [pc, #388]	@ (8003a7c <menu+0x24f0>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038fa:	f000 fb8d 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fe:	2108      	movs	r1, #8
 8003900:	4860      	ldr	r0, [pc, #384]	@ (8003a84 <menu+0x24f8>)
 8003902:	f006 fe5d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10d      	bne.n	8003928 <menu+0x239c>
 800390c:	4b5e      	ldr	r3, [pc, #376]	@ (8003a88 <menu+0x24fc>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <menu+0x239c>
			eepromData[26] = demoMode;
 800391a:	4b58      	ldr	r3, [pc, #352]	@ (8003a7c <menu+0x24f0>)
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a8c <menu+0x2500>)
 8003920:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003922:	4b5b      	ldr	r3, [pc, #364]	@ (8003a90 <menu+0x2504>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003928:	4b5a      	ldr	r3, [pc, #360]	@ (8003a94 <menu+0x2508>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b1d      	cmp	r3, #29
 800392e:	f040 80d5 	bne.w	8003adc <menu+0x2550>
		finalCount=0;
 8003932:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <menu+0x250c>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003938:	4b58      	ldr	r3, [pc, #352]	@ (8003a9c <menu+0x2510>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d135      	bne.n	80039ac <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003940:	4a57      	ldr	r2, [pc, #348]	@ (8003aa0 <menu+0x2514>)
 8003942:	2101      	movs	r1, #1
 8003944:	2001      	movs	r0, #1
 8003946:	f005 fb11 	bl	8008f6c <lcd_print>

			if(demoMode == 1) {
 800394a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a7c <menu+0x24f0>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d113      	bne.n	800397a <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003952:	4b54      	ldr	r3, [pc, #336]	@ (8003aa4 <menu+0x2518>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	4613      	mov	r3, r2
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	1a9a      	subs	r2, r3, r2
 800395e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <menu+0x250c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a4c      	ldr	r2, [pc, #304]	@ (8003a98 <menu+0x250c>)
 8003966:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003968:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa8 <menu+0x251c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a98 <menu+0x250c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4413      	add	r3, r2
 8003974:	4a48      	ldr	r2, [pc, #288]	@ (8003a98 <menu+0x250c>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e012      	b.n	80039a0 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 800397a:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <menu+0x2520>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4613      	mov	r3, r2
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	1a9a      	subs	r2, r3, r2
 8003986:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <menu+0x250c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4413      	add	r3, r2
 800398c:	4a42      	ldr	r2, [pc, #264]	@ (8003a98 <menu+0x250c>)
 800398e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003990:	4b47      	ldr	r3, [pc, #284]	@ (8003ab0 <menu+0x2524>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <menu+0x250c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a98 <menu+0x250c>)
 800399e:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 80039a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <menu+0x250c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa89 	bl	8003ebc <displayCycleOnLCD>
 80039aa:	e00d      	b.n	80039c8 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 80039ac:	4b3b      	ldr	r3, [pc, #236]	@ (8003a9c <menu+0x2510>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d109      	bne.n	80039c8 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 80039b4:	4a3a      	ldr	r2, [pc, #232]	@ (8003aa0 <menu+0x2514>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	2001      	movs	r0, #1
 80039ba:	f005 fad7 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80039be:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab4 <menu+0x2528>)
 80039c0:	2101      	movs	r1, #1
 80039c2:	2002      	movs	r0, #2
 80039c4:	f005 fad2 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c8:	2102      	movs	r1, #2
 80039ca:	482e      	ldr	r0, [pc, #184]	@ (8003a84 <menu+0x24f8>)
 80039cc:	f006 fdf8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d115      	bne.n	8003a02 <menu+0x2476>
 80039d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a88 <menu+0x24fc>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <menu+0x2510>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <menu+0x2510>)
 80039ee:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80039f0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a9c <menu+0x2510>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d902      	bls.n	80039fe <menu+0x2472>
				calismaSayModu = 0;
 80039f8:	4b28      	ldr	r3, [pc, #160]	@ (8003a9c <menu+0x2510>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039fe:	f000 fb0b 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a02:	2104      	movs	r1, #4
 8003a04:	481f      	ldr	r0, [pc, #124]	@ (8003a84 <menu+0x24f8>)
 8003a06:	f006 fddb 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d115      	bne.n	8003a3c <menu+0x24b0>
 8003a10:	4b1d      	ldr	r3, [pc, #116]	@ (8003a88 <menu+0x24fc>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	f083 0301 	eor.w	r3, r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a9c <menu+0x2510>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <menu+0x2510>)
 8003a28:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a9c <menu+0x2510>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	@ (8003a9c <menu+0x2510>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a38:	f000 faee 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a3c:	2108      	movs	r1, #8
 8003a3e:	4811      	ldr	r0, [pc, #68]	@ (8003a84 <menu+0x24f8>)
 8003a40:	f006 fdbe 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d148      	bne.n	8003adc <menu+0x2550>
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <menu+0x24fc>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d041      	beq.n	8003adc <menu+0x2550>
			if(demoMode == 1) {
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <menu+0x24f0>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d12b      	bne.n	8003ab8 <menu+0x252c>
				eepromData[28] = 0;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <menu+0x2500>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003a66:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <menu+0x2500>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa8 <menu+0x251c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <menu+0x2518>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e02a      	b.n	8003ad0 <menu+0x2544>
 8003a7a:	bf00      	nop
 8003a7c:	200010da 	.word	0x200010da
 8003a80:	200013b0 	.word	0x200013b0
 8003a84:	40010800 	.word	0x40010800
 8003a88:	200010ec 	.word	0x200010ec
 8003a8c:	20000fec 	.word	0x20000fec
 8003a90:	200010e9 	.word	0x200010e9
 8003a94:	200010bc 	.word	0x200010bc
 8003a98:	200010b8 	.word	0x200010b8
 8003a9c:	200010db 	.word	0x200010db
 8003aa0:	2000170c 	.word	0x2000170c
 8003aa4:	200010b7 	.word	0x200010b7
 8003aa8:	200010b5 	.word	0x200010b5
 8003aac:	200010b6 	.word	0x200010b6
 8003ab0:	200010b4 	.word	0x200010b4
 8003ab4:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <menu+0x265c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003abe:	4b4a      	ldr	r3, [pc, #296]	@ (8003be8 <menu+0x265c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003ac4:	4b49      	ldr	r3, [pc, #292]	@ (8003bec <menu+0x2660>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003aca:	4b49      	ldr	r3, [pc, #292]	@ (8003bf0 <menu+0x2664>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003ad0:	4b48      	ldr	r3, [pc, #288]	@ (8003bf4 <menu+0x2668>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003ad6:	4b48      	ldr	r3, [pc, #288]	@ (8003bf8 <menu+0x266c>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003adc:	4b47      	ldr	r3, [pc, #284]	@ (8003bfc <menu+0x2670>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b1e      	cmp	r3, #30
 8003ae2:	d16a      	bne.n	8003bba <menu+0x262e>
		calismaSayModu = 0;
 8003ae4:	4b43      	ldr	r3, [pc, #268]	@ (8003bf4 <menu+0x2668>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003aea:	4a45      	ldr	r2, [pc, #276]	@ (8003c00 <menu+0x2674>)
 8003aec:	2101      	movs	r1, #1
 8003aee:	2001      	movs	r0, #1
 8003af0:	f005 fa3c 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003af4:	4a43      	ldr	r2, [pc, #268]	@ (8003c04 <menu+0x2678>)
 8003af6:	2101      	movs	r1, #1
 8003af8:	2002      	movs	r0, #2
 8003afa:	f005 fa37 	bl	8008f6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afe:	2102      	movs	r1, #2
 8003b00:	4841      	ldr	r0, [pc, #260]	@ (8003c08 <menu+0x267c>)
 8003b02:	f006 fd5d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d11c      	bne.n	8003b46 <menu+0x25ba>
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c0c <menu+0x2680>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f083 0301 	eor.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c10 <menu+0x2684>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <menu+0x2684>)
 8003b24:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003b26:	4b3a      	ldr	r3, [pc, #232]	@ (8003c10 <menu+0x2684>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d902      	bls.n	8003b34 <menu+0x25a8>
				dilSecim = 0;
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <menu+0x2684>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003b34:	f003 ff70 	bl	8007a18 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003b38:	4b35      	ldr	r3, [pc, #212]	@ (8003c10 <menu+0x2684>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 fae5 	bl	800610c <loadMenuTexts>

			bekle();
 8003b42:	f000 fa69 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b46:	2104      	movs	r1, #4
 8003b48:	482f      	ldr	r0, [pc, #188]	@ (8003c08 <menu+0x267c>)
 8003b4a:	f006 fd39 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d11c      	bne.n	8003b8e <menu+0x2602>
 8003b54:	4b2d      	ldr	r3, [pc, #180]	@ (8003c0c <menu+0x2680>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f083 0301 	eor.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d015      	beq.n	8003b8e <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003b62:	4b2b      	ldr	r3, [pc, #172]	@ (8003c10 <menu+0x2684>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b29      	ldr	r3, [pc, #164]	@ (8003c10 <menu+0x2684>)
 8003b6c:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003b6e:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <menu+0x2684>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <menu+0x25f0>
		   		dilSecim = 1;
 8003b76:	4b26      	ldr	r3, [pc, #152]	@ (8003c10 <menu+0x2684>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003b7c:	f003 ff4c 	bl	8007a18 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003b80:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <menu+0x2684>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fac1 	bl	800610c <loadMenuTexts>

			bekle();
 8003b8a:	f000 fa45 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b8e:	2108      	movs	r1, #8
 8003b90:	481d      	ldr	r0, [pc, #116]	@ (8003c08 <menu+0x267c>)
 8003b92:	f006 fd15 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10e      	bne.n	8003bba <menu+0x262e>
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <menu+0x2680>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <menu+0x262e>
			eepromData[33] = dilSecim;
 8003baa:	4b19      	ldr	r3, [pc, #100]	@ (8003c10 <menu+0x2684>)
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <menu+0x265c>)
 8003bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <menu+0x266c>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003bba:	4b10      	ldr	r3, [pc, #64]	@ (8003bfc <menu+0x2670>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b1f      	cmp	r3, #31
 8003bc0:	f040 8087 	bne.w	8003cd2 <menu+0x2746>
		calismaSayModu = 0;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <menu+0x2668>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003bca:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <menu+0x2688>)
 8003bcc:	2101      	movs	r1, #1
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f005 f9cc 	bl	8008f6c <lcd_print>

		if(iotMode == 0) {
 8003bd4:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <menu+0x268c>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d121      	bne.n	8003c20 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8003c1c <menu+0x2690>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	2002      	movs	r0, #2
 8003be2:	f005 f9c3 	bl	8008f6c <lcd_print>
 8003be6:	e024      	b.n	8003c32 <menu+0x26a6>
 8003be8:	20000fec 	.word	0x20000fec
 8003bec:	200010b4 	.word	0x200010b4
 8003bf0:	200010b6 	.word	0x200010b6
 8003bf4:	200010db 	.word	0x200010db
 8003bf8:	200010e9 	.word	0x200010e9
 8003bfc:	200010bc 	.word	0x200010bc
 8003c00:	20001734 	.word	0x20001734
 8003c04:	20001748 	.word	0x20001748
 8003c08:	40010800 	.word	0x40010800
 8003c0c:	200010ec 	.word	0x200010ec
 8003c10:	200010dc 	.word	0x200010dc
 8003c14:	20000150 	.word	0x20000150
 8003c18:	200010e7 	.word	0x200010e7
 8003c1c:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 8003c20:	4b99      	ldr	r3, [pc, #612]	@ (8003e88 <menu+0x28fc>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d104      	bne.n	8003c32 <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003c28:	4a98      	ldr	r2, [pc, #608]	@ (8003e8c <menu+0x2900>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f005 f99d 	bl	8008f6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c32:	2102      	movs	r1, #2
 8003c34:	4896      	ldr	r0, [pc, #600]	@ (8003e90 <menu+0x2904>)
 8003c36:	f006 fcc3 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d115      	bne.n	8003c6c <menu+0x26e0>
 8003c40:	4b94      	ldr	r3, [pc, #592]	@ (8003e94 <menu+0x2908>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <menu+0x26e0>
			iotMode = iotMode + 1;
 8003c4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003e88 <menu+0x28fc>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b8c      	ldr	r3, [pc, #560]	@ (8003e88 <menu+0x28fc>)
 8003c58:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e88 <menu+0x28fc>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d902      	bls.n	8003c68 <menu+0x26dc>
				iotMode = 0;
 8003c62:	4b89      	ldr	r3, [pc, #548]	@ (8003e88 <menu+0x28fc>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003c68:	f000 f9d6 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	4888      	ldr	r0, [pc, #544]	@ (8003e90 <menu+0x2904>)
 8003c70:	f006 fca6 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d115      	bne.n	8003ca6 <menu+0x271a>
 8003c7a:	4b86      	ldr	r3, [pc, #536]	@ (8003e94 <menu+0x2908>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	f083 0301 	eor.w	r3, r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <menu+0x271a>
			iotMode = iotMode - 1;
 8003c88:	4b7f      	ldr	r3, [pc, #508]	@ (8003e88 <menu+0x28fc>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	4b7d      	ldr	r3, [pc, #500]	@ (8003e88 <menu+0x28fc>)
 8003c92:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003c94:	4b7c      	ldr	r3, [pc, #496]	@ (8003e88 <menu+0x28fc>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <menu+0x2716>
		   		iotMode = 1;
 8003c9c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e88 <menu+0x28fc>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003ca2:	f000 f9b9 	bl	8004018 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	4879      	ldr	r0, [pc, #484]	@ (8003e90 <menu+0x2904>)
 8003caa:	f006 fc89 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10e      	bne.n	8003cd2 <menu+0x2746>
 8003cb4:	4b77      	ldr	r3, [pc, #476]	@ (8003e94 <menu+0x2908>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f083 0301 	eor.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <menu+0x2746>
			eepromData[48] = iotMode;
 8003cc2:	4b71      	ldr	r3, [pc, #452]	@ (8003e88 <menu+0x28fc>)
 8003cc4:	781a      	ldrb	r2, [r3, #0]
 8003cc6:	4b74      	ldr	r3, [pc, #464]	@ (8003e98 <menu+0x290c>)
 8003cc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003ccc:	4b73      	ldr	r3, [pc, #460]	@ (8003e9c <menu+0x2910>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003cd2:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <menu+0x2914>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d127      	bne.n	8003d2a <menu+0x279e>
		calismaSayModu = 0;
 8003cda:	4b72      	ldr	r3, [pc, #456]	@ (8003ea4 <menu+0x2918>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003ce0:	4a71      	ldr	r2, [pc, #452]	@ (8003ea8 <menu+0x291c>)
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f005 f941 	bl	8008f6c <lcd_print>

		convertArrays(1);
 8003cea:	2001      	movs	r0, #1
 8003cec:	f7fc fde4 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003cf0:	2032      	movs	r0, #50	@ 0x32
 8003cf2:	f005 fe95 	bl	8009a20 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fd fbec 	bl	80014d4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4864      	ldr	r0, [pc, #400]	@ (8003e90 <menu+0x2904>)
 8003d00:	f006 fc5e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d10f      	bne.n	8003d2a <menu+0x279e>
 8003d0a:	2104      	movs	r1, #4
 8003d0c:	4860      	ldr	r0, [pc, #384]	@ (8003e90 <menu+0x2904>)
 8003d0e:	f006 fc57 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d108      	bne.n	8003d2a <menu+0x279e>
 8003d18:	4b5e      	ldr	r3, [pc, #376]	@ (8003e94 <menu+0x2908>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003d26:	f004 f8eb 	bl	8007f00 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea0 <menu+0x2914>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b21      	cmp	r3, #33	@ 0x21
 8003d30:	d12b      	bne.n	8003d8a <menu+0x27fe>
		calismaSayModu = 0;
 8003d32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea4 <menu+0x2918>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003d38:	2002      	movs	r0, #2
 8003d3a:	f7fc fdbd 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003d3e:	2032      	movs	r0, #50	@ 0x32
 8003d40:	f005 fe6e 	bl	8009a20 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003d44:	2002      	movs	r0, #2
 8003d46:	f7fd fbc5 	bl	80014d4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	4850      	ldr	r0, [pc, #320]	@ (8003e90 <menu+0x2904>)
 8003d4e:	f006 fc37 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d118      	bne.n	8003d8a <menu+0x27fe>
 8003d58:	2104      	movs	r1, #4
 8003d5a:	484d      	ldr	r0, [pc, #308]	@ (8003e90 <menu+0x2904>)
 8003d5c:	f006 fc30 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d111      	bne.n	8003d8a <menu+0x27fe>
 8003d66:	4b4b      	ldr	r3, [pc, #300]	@ (8003e94 <menu+0x2908>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	f083 0301 	eor.w	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <menu+0x27fe>
			takeWifiSSID();
 8003d74:	f004 faba 	bl	80082ec <takeWifiSSID>

			convertArrays(2);
 8003d78:	2002      	movs	r0, #2
 8003d7a:	f7fc fd9d 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003d7e:	2032      	movs	r0, #50	@ 0x32
 8003d80:	f005 fe4e 	bl	8009a20 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003d84:	2002      	movs	r0, #2
 8003d86:	f7fd fba5 	bl	80014d4 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003d8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ea0 <menu+0x2914>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b22      	cmp	r3, #34	@ 0x22
 8003d90:	d12b      	bne.n	8003dea <menu+0x285e>
		calismaSayModu = 0;
 8003d92:	4b44      	ldr	r3, [pc, #272]	@ (8003ea4 <menu+0x2918>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f7fc fd8d 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003d9e:	2032      	movs	r0, #50	@ 0x32
 8003da0:	f005 fe3e 	bl	8009a20 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003da4:	2003      	movs	r0, #3
 8003da6:	f7fd fb95 	bl	80014d4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003daa:	2102      	movs	r1, #2
 8003dac:	4838      	ldr	r0, [pc, #224]	@ (8003e90 <menu+0x2904>)
 8003dae:	f006 fc07 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d118      	bne.n	8003dea <menu+0x285e>
 8003db8:	2104      	movs	r1, #4
 8003dba:	4835      	ldr	r0, [pc, #212]	@ (8003e90 <menu+0x2904>)
 8003dbc:	f006 fc00 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d111      	bne.n	8003dea <menu+0x285e>
 8003dc6:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <menu+0x2908>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <menu+0x285e>
			takeWifiPass();
 8003dd4:	f004 fc36 	bl	8008644 <takeWifiPass>

			convertArrays(3);
 8003dd8:	2003      	movs	r0, #3
 8003dda:	f7fc fd6d 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003dde:	2032      	movs	r0, #50	@ 0x32
 8003de0:	f005 fe1e 	bl	8009a20 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003de4:	2003      	movs	r0, #3
 8003de6:	f7fd fb75 	bl	80014d4 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003dea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea0 <menu+0x2914>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b23      	cmp	r3, #35	@ 0x23
 8003df0:	d146      	bne.n	8003e80 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003df2:	4a2e      	ldr	r2, [pc, #184]	@ (8003eac <menu+0x2920>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	2001      	movs	r0, #1
 8003df8:	f005 f8b8 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <menu+0x2924>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	2002      	movs	r0, #2
 8003e02:	f005 f8b3 	bl	8008f6c <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003e06:	2108      	movs	r1, #8
 8003e08:	4821      	ldr	r0, [pc, #132]	@ (8003e90 <menu+0x2904>)
 8003e0a:	f006 fbd9 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d135      	bne.n	8003e80 <menu+0x28f4>
			menuGiris = 0;
 8003e14:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <menu+0x2928>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003e1a:	f005 fdf7 	bl	8009a0c <HAL_GetTick>
 8003e1e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e20:	e007      	b.n	8003e32 <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e22:	f005 fdf3 	bl	8009a0c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e30:	d806      	bhi.n	8003e40 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e32:	4821      	ldr	r0, [pc, #132]	@ (8003eb8 <menu+0x292c>)
 8003e34:	f007 f9ed 	bl	800b212 <HAL_I2C_GetError>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d0f1      	beq.n	8003e22 <menu+0x2896>
 8003e3e:	e000      	b.n	8003e42 <menu+0x28b6>
			        break;
 8003e40:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003e42:	f005 fde3 	bl	8009a0c <HAL_GetTick>
 8003e46:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e48:	e007      	b.n	8003e5a <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e4a:	f005 fddf 	bl	8009a0c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e58:	d806      	bhi.n	8003e68 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e5a:	4817      	ldr	r0, [pc, #92]	@ (8003eb8 <menu+0x292c>)
 8003e5c:	f007 f9cc 	bl	800b1f8 <HAL_I2C_GetState>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d1f1      	bne.n	8003e4a <menu+0x28be>
 8003e66:	e000      	b.n	8003e6a <menu+0x28de>
			        break;
 8003e68:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7fc fc22 	bl	80006b4 <saveEEPROM>

			lcd_clear();
 8003e70:	f005 f8a8 	bl	8008fc4 <lcd_clear>
			HAL_Delay(500);
 8003e74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e78:	f005 fdd2 	bl	8009a20 <HAL_Delay>
			NVIC_SystemReset();
 8003e7c:	f7fd fb70 	bl	8001560 <__NVIC_SystemReset>
		}
	}
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200010e7 	.word	0x200010e7
 8003e8c:	200013b0 	.word	0x200013b0
 8003e90:	40010800 	.word	0x40010800
 8003e94:	200010ec 	.word	0x200010ec
 8003e98:	20000fec 	.word	0x20000fec
 8003e9c:	200010e9 	.word	0x200010e9
 8003ea0:	200010bc 	.word	0x200010bc
 8003ea4:	200010db 	.word	0x200010db
 8003ea8:	200018c4 	.word	0x200018c4
 8003eac:	2000175c 	.word	0x2000175c
 8003eb0:	20001770 	.word	0x20001770
 8003eb4:	200010d9 	.word	0x200010d9
 8003eb8:	2000193c 	.word	0x2000193c

08003ebc <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	@ 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003ec4:	220a      	movs	r2, #10
 8003ec6:	491c      	ldr	r1, [pc, #112]	@ (8003f38 <displayCycleOnLCD+0x7c>)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f009 fba5 	bl	800d618 <itoa>

    int length = strlen(snum);
 8003ece:	481a      	ldr	r0, [pc, #104]	@ (8003f38 <displayCycleOnLCD+0x7c>)
 8003ed0:	f7fc f9a8 	bl	8000224 <strlen>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	f1c3 0310 	rsb	r3, r3, #16
 8003ede:	0fda      	lsrs	r2, r3, #31
 8003ee0:	4413      	add	r3, r2
 8003ee2:	105b      	asrs	r3, r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	2210      	movs	r2, #16
 8003eec:	2120      	movs	r1, #32
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f009 fcef 	bl	800d8d2 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	e00d      	b.n	8003f1a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	4413      	add	r3, r2
 8003f04:	490c      	ldr	r1, [pc, #48]	@ (8003f38 <displayCycleOnLCD+0x7c>)
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	440a      	add	r2, r1
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	3328      	adds	r3, #40	@ 0x28
 8003f0e:	443b      	add	r3, r7
 8003f10:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	3301      	adds	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	dbed      	blt.n	8003efe <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	461a      	mov	r2, r3
 8003f28:	2101      	movs	r1, #1
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f005 f81e 	bl	8008f6c <lcd_print>
}
 8003f30:	bf00      	nop
 8003f32:	3728      	adds	r7, #40	@ 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000105c 	.word	0x2000105c

08003f3c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003f4c:	4a24      	ldr	r2, [pc, #144]	@ (8003fe0 <lcdUpdate+0xa4>)
 8003f4e:	2101      	movs	r1, #1
 8003f50:	2002      	movs	r0, #2
 8003f52:	f005 f80b 	bl	8008f6c <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003f56:	e03e      	b.n	8003fd6 <lcdUpdate+0x9a>
	} else if(y==2) {
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d105      	bne.n	8003f6a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003f5e:	4a20      	ldr	r2, [pc, #128]	@ (8003fe0 <lcdUpdate+0xa4>)
 8003f60:	2102      	movs	r1, #2
 8003f62:	2002      	movs	r0, #2
 8003f64:	f005 f802 	bl	8008f6c <lcd_print>
}
 8003f68:	e035      	b.n	8003fd6 <lcdUpdate+0x9a>
	} else if(y==3) {
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d105      	bne.n	8003f7c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003f70:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <lcdUpdate+0xa4>)
 8003f72:	2103      	movs	r1, #3
 8003f74:	2002      	movs	r0, #2
 8003f76:	f004 fff9 	bl	8008f6c <lcd_print>
}
 8003f7a:	e02c      	b.n	8003fd6 <lcdUpdate+0x9a>
	} else if(y==4) {
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d105      	bne.n	8003f8e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003f82:	4a17      	ldr	r2, [pc, #92]	@ (8003fe0 <lcdUpdate+0xa4>)
 8003f84:	2104      	movs	r1, #4
 8003f86:	2002      	movs	r0, #2
 8003f88:	f004 fff0 	bl	8008f6c <lcd_print>
}
 8003f8c:	e023      	b.n	8003fd6 <lcdUpdate+0x9a>
	} else if(y==5) {
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d105      	bne.n	8003fa0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003f94:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <lcdUpdate+0xa4>)
 8003f96:	2105      	movs	r1, #5
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f004 ffe7 	bl	8008f6c <lcd_print>
}
 8003f9e:	e01a      	b.n	8003fd6 <lcdUpdate+0x9a>
	} else if(y==6) {
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d105      	bne.n	8003fb2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe0 <lcdUpdate+0xa4>)
 8003fa8:	2106      	movs	r1, #6
 8003faa:	2002      	movs	r0, #2
 8003fac:	f004 ffde 	bl	8008f6c <lcd_print>
}
 8003fb0:	e011      	b.n	8003fd6 <lcdUpdate+0x9a>
	} else if (y==7) {
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	2b07      	cmp	r3, #7
 8003fb6:	d10e      	bne.n	8003fd6 <lcdUpdate+0x9a>
		lcd_clear();
 8003fb8:	f005 f804 	bl	8008fc4 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003fbc:	4a09      	ldr	r2, [pc, #36]	@ (8003fe4 <lcdUpdate+0xa8>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f004 ffd3 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003fc6:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <lcdUpdate+0xac>)
 8003fc8:	2101      	movs	r1, #1
 8003fca:	2002      	movs	r0, #2
 8003fcc:	f004 ffce 	bl	8008f6c <lcd_print>
		HAL_Delay(10);
 8003fd0:	200a      	movs	r0, #10
 8003fd2:	f005 fd25 	bl	8009a20 <HAL_Delay>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	0800e8b0 	.word	0x0800e8b0
 8003fe4:	200000c4 	.word	0x200000c4
 8003fe8:	200000d8 	.word	0x200000d8

08003fec <checkLCDBacklight>:

void checkLCDBacklight() {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003ff0:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <checkLCDBacklight+0x24>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <checkLCDBacklight+0x28>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ffc:	d903      	bls.n	8004006 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003ffe:	2000      	movs	r0, #0
 8004000:	f005 f800 	bl	8009004 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004004:	e002      	b.n	800400c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004006:	2001      	movs	r0, #1
 8004008:	f004 fffc 	bl	8009004 <lcd_backlight>
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20001094 	.word	0x20001094
 8004014:	200010b0 	.word	0x200010b0

08004018 <bekle>:

void bekle() {
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	timer1=millis;
 800401c:	4b47      	ldr	r3, [pc, #284]	@ (800413c <bekle+0x124>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a47      	ldr	r2, [pc, #284]	@ (8004140 <bekle+0x128>)
 8004022:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004024:	e002      	b.n	800402c <bekle+0x14>
    	butonKontrol = 1;
 8004026:	4b47      	ldr	r3, [pc, #284]	@ (8004144 <bekle+0x12c>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800402c:	2101      	movs	r1, #1
 800402e:	4846      	ldr	r0, [pc, #280]	@ (8004148 <bekle+0x130>)
 8004030:	f006 fac6 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004034:	4603      	mov	r3, r0
 8004036:	2b01      	cmp	r3, #1
 8004038:	d109      	bne.n	800404e <bekle+0x36>
 800403a:	4b40      	ldr	r3, [pc, #256]	@ (800413c <bekle+0x124>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b40      	ldr	r3, [pc, #256]	@ (8004140 <bekle+0x128>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d0ef      	beq.n	8004026 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004046:	e002      	b.n	800404e <bekle+0x36>
    	butonKontrol = 1;
 8004048:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <bekle+0x12c>)
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800404e:	2108      	movs	r1, #8
 8004050:	483e      	ldr	r0, [pc, #248]	@ (800414c <bekle+0x134>)
 8004052:	f006 fab5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d109      	bne.n	8004070 <bekle+0x58>
 800405c:	4b37      	ldr	r3, [pc, #220]	@ (800413c <bekle+0x124>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <bekle+0x128>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d0ef      	beq.n	8004048 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004068:	e002      	b.n	8004070 <bekle+0x58>
    	butonKontrol = 1;
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <bekle+0x12c>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004070:	2102      	movs	r1, #2
 8004072:	4835      	ldr	r0, [pc, #212]	@ (8004148 <bekle+0x130>)
 8004074:	f006 faa4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004078:	4603      	mov	r3, r0
 800407a:	2b01      	cmp	r3, #1
 800407c:	d109      	bne.n	8004092 <bekle+0x7a>
 800407e:	4b2f      	ldr	r3, [pc, #188]	@ (800413c <bekle+0x124>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b2f      	ldr	r3, [pc, #188]	@ (8004140 <bekle+0x128>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d0ef      	beq.n	800406a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800408a:	e002      	b.n	8004092 <bekle+0x7a>
    	butonKontrol = 1;
 800408c:	4b2d      	ldr	r3, [pc, #180]	@ (8004144 <bekle+0x12c>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004092:	2104      	movs	r1, #4
 8004094:	482c      	ldr	r0, [pc, #176]	@ (8004148 <bekle+0x130>)
 8004096:	f006 fa93 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d109      	bne.n	80040b4 <bekle+0x9c>
 80040a0:	4b26      	ldr	r3, [pc, #152]	@ (800413c <bekle+0x124>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <bekle+0x128>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d0ef      	beq.n	800408c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040ac:	e002      	b.n	80040b4 <bekle+0x9c>
    	butonKontrol = 1;
 80040ae:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <bekle+0x12c>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040b4:	2108      	movs	r1, #8
 80040b6:	4824      	ldr	r0, [pc, #144]	@ (8004148 <bekle+0x130>)
 80040b8:	f006 fa82 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d109      	bne.n	80040d6 <bekle+0xbe>
 80040c2:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <bekle+0x124>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <bekle+0x128>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d0ef      	beq.n	80040ae <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040ce:	e002      	b.n	80040d6 <bekle+0xbe>
    	butonKontrol = 1;
 80040d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004144 <bekle+0x12c>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040d6:	2180      	movs	r1, #128	@ 0x80
 80040d8:	481c      	ldr	r0, [pc, #112]	@ (800414c <bekle+0x134>)
 80040da:	f006 fa71 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <bekle+0xe0>
 80040e4:	4b15      	ldr	r3, [pc, #84]	@ (800413c <bekle+0x124>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <bekle+0x128>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d0ef      	beq.n	80040d0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040f0:	e002      	b.n	80040f8 <bekle+0xe0>
    	butonKontrol = 1;
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <bekle+0x12c>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040fc:	4813      	ldr	r0, [pc, #76]	@ (800414c <bekle+0x134>)
 80040fe:	f006 fa5f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <bekle+0x104>
 8004108:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <bekle+0x124>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <bekle+0x128>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d0ee      	beq.n	80040f2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004114:	e002      	b.n	800411c <bekle+0x104>
    	butonKontrol = 1;
 8004116:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <bekle+0x12c>)
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800411c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004120:	480a      	ldr	r0, [pc, #40]	@ (800414c <bekle+0x134>)
 8004122:	f006 fa4d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <bekle+0x120>
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <bekle+0x124>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <bekle+0x128>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d0ee      	beq.n	8004116 <bekle+0xfe>
    }

}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20001094 	.word	0x20001094
 8004140:	2000109c 	.word	0x2000109c
 8004144:	200010ec 	.word	0x200010ec
 8004148:	40010800 	.word	0x40010800
 800414c:	40011000 	.word	0x40011000

08004150 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004154:	2101      	movs	r1, #1
 8004156:	4815      	ldr	r0, [pc, #84]	@ (80041ac <buttonCheck+0x5c>)
 8004158:	f006 fa32 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d01b      	beq.n	800419a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004162:	2108      	movs	r1, #8
 8004164:	4812      	ldr	r0, [pc, #72]	@ (80041b0 <buttonCheck+0x60>)
 8004166:	f006 fa2b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800416a:	4603      	mov	r3, r0
 800416c:	2b01      	cmp	r3, #1
 800416e:	d014      	beq.n	800419a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004170:	2102      	movs	r1, #2
 8004172:	480e      	ldr	r0, [pc, #56]	@ (80041ac <buttonCheck+0x5c>)
 8004174:	f006 fa24 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d00d      	beq.n	800419a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800417e:	2104      	movs	r1, #4
 8004180:	480a      	ldr	r0, [pc, #40]	@ (80041ac <buttonCheck+0x5c>)
 8004182:	f006 fa1d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d006      	beq.n	800419a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 800418c:	2108      	movs	r1, #8
 800418e:	4807      	ldr	r0, [pc, #28]	@ (80041ac <buttonCheck+0x5c>)
 8004190:	f006 fa16 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d104      	bne.n	80041a4 <buttonCheck+0x54>
		backLightTimer = 0;
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <buttonCheck+0x64>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
		return 1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <buttonCheck+0x56>
	}
	return 0;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40010800 	.word	0x40010800
 80041b0:	40011000 	.word	0x40011000
 80041b4:	200010b0 	.word	0x200010b0

080041b8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <checkBasincSalteri+0x54>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <checkBasincSalteri+0x12>
		basincVar=1;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <checkBasincSalteri+0x58>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <checkBasincSalteri+0x54>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d119      	bne.n	8004206 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80041d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041d6:	480f      	ldr	r0, [pc, #60]	@ (8004214 <checkBasincSalteri+0x5c>)
 80041d8:	f006 f9f2 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <checkBasincSalteri+0x60>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <checkBasincSalteri+0x64>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d90a      	bls.n	8004206 <checkBasincSalteri+0x4e>
				basincVar=1;
 80041f0:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <checkBasincSalteri+0x58>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80041f6:	e006      	b.n	8004206 <checkBasincSalteri+0x4e>
			timer5=millis;
 80041f8:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <checkBasincSalteri+0x60>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a07      	ldr	r2, [pc, #28]	@ (800421c <checkBasincSalteri+0x64>)
 80041fe:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <checkBasincSalteri+0x58>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200010c3 	.word	0x200010c3
 8004210:	200010bf 	.word	0x200010bf
 8004214:	40011000 	.word	0x40011000
 8004218:	20001094 	.word	0x20001094
 800421c:	200010ac 	.word	0x200010ac

08004220 <checkBasGonder>:

void checkBasGonder() {
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004224:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <checkBasGonder+0x74>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10b      	bne.n	8004244 <checkBasGonder+0x24>
 800422c:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <checkBasGonder+0x78>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <checkBasGonder+0x24>
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <checkBasGonder+0x7c>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800423c:	4b18      	ldr	r3, [pc, #96]	@ (80042a0 <checkBasGonder+0x80>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	e009      	b.n	8004258 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004244:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <checkBasGonder+0x78>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f083 0301 	eor.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004252:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <checkBasGonder+0x80>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004258:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <checkBasGonder+0x74>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10b      	bne.n	8004278 <checkBasGonder+0x58>
 8004260:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <checkBasGonder+0x84>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <checkBasGonder+0x58>
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <checkBasGonder+0x7c>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004270:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <checkBasGonder+0x88>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004276:	e009      	b.n	800428c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <checkBasGonder+0x84>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004286:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <checkBasGonder+0x88>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	200010bd 	.word	0x200010bd
 8004298:	200010f2 	.word	0x200010f2
 800429c:	200010cb 	.word	0x200010cb
 80042a0:	200010f9 	.word	0x200010f9
 80042a4:	200010f5 	.word	0x200010f5
 80042a8:	200010fa 	.word	0x200010fa

080042ac <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80042b0:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <checkKapiSecimleri+0x98>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80042b8:	4b23      	ldr	r3, [pc, #140]	@ (8004348 <checkKapiSecimleri+0x9c>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80042be:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <checkKapiSecimleri+0x98>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d10e      	bne.n	80042e4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80042c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042ca:	4820      	ldr	r0, [pc, #128]	@ (800434c <checkKapiSecimleri+0xa0>)
 80042cc:	f006 f978 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80042d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004348 <checkKapiSecimleri+0x9c>)
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80042de:	4b1a      	ldr	r3, [pc, #104]	@ (8004348 <checkKapiSecimleri+0x9c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80042e4:	4b17      	ldr	r3, [pc, #92]	@ (8004344 <checkKapiSecimleri+0x98>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d10e      	bne.n	800430a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80042ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042f0:	4816      	ldr	r0, [pc, #88]	@ (800434c <checkKapiSecimleri+0xa0>)
 80042f2:	f006 f965 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <checkKapiSecimleri+0x9c>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e002      	b.n	800430a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004304:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <checkKapiSecimleri+0x9c>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800430a:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <checkKapiSecimleri+0x98>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d116      	bne.n	8004340 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004312:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004316:	480d      	ldr	r0, [pc, #52]	@ (800434c <checkKapiSecimleri+0xa0>)
 8004318:	f006 f952 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <checkKapiSecimleri+0x8e>
 8004322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004326:	4809      	ldr	r0, [pc, #36]	@ (800434c <checkKapiSecimleri+0xa0>)
 8004328:	f006 f94a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004332:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <checkKapiSecimleri+0x9c>)
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004338:	e002      	b.n	8004340 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800433a:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <checkKapiSecimleri+0x9c>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200010c4 	.word	0x200010c4
 8004348:	2000110f 	.word	0x2000110f
 800434c:	40010800 	.word	0x40010800

08004350 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004354:	4b66      	ldr	r3, [pc, #408]	@ (80044f0 <checkAktifCalisma+0x1a0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f041 8343 	bne.w	80059e4 <checkAktifCalisma+0x1694>
 800435e:	4b65      	ldr	r3, [pc, #404]	@ (80044f4 <checkAktifCalisma+0x1a4>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f041 833e 	bne.w	80059e4 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004368:	4b63      	ldr	r3, [pc, #396]	@ (80044f8 <checkAktifCalisma+0x1a8>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11a      	bne.n	80043a6 <checkAktifCalisma+0x56>
 8004370:	4b62      	ldr	r3, [pc, #392]	@ (80044fc <checkAktifCalisma+0x1ac>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d116      	bne.n	80043a6 <checkAktifCalisma+0x56>
 8004378:	4b61      	ldr	r3, [pc, #388]	@ (8004500 <checkAktifCalisma+0x1b0>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <checkAktifCalisma+0x46>
 8004380:	4b60      	ldr	r3, [pc, #384]	@ (8004504 <checkAktifCalisma+0x1b4>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f083 0301 	eor.w	r3, r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <checkAktifCalisma+0x46>
 800438e:	4b5e      	ldr	r3, [pc, #376]	@ (8004508 <checkAktifCalisma+0x1b8>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d007      	beq.n	80043a6 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8004396:	4b5d      	ldr	r3, [pc, #372]	@ (800450c <checkAktifCalisma+0x1bc>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01c      	beq.n	80043d8 <checkAktifCalisma+0x88>
 800439e:	4b5c      	ldr	r3, [pc, #368]	@ (8004510 <checkAktifCalisma+0x1c0>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d118      	bne.n	80043d8 <checkAktifCalisma+0x88>
 80043a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004514 <checkAktifCalisma+0x1c4>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <checkAktifCalisma+0x66>
 80043ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004518 <checkAktifCalisma+0x1c8>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <checkAktifCalisma+0x88>
 80043b6:	4b59      	ldr	r3, [pc, #356]	@ (800451c <checkAktifCalisma+0x1cc>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80043be:	2201      	movs	r2, #1
 80043c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043c4:	4856      	ldr	r0, [pc, #344]	@ (8004520 <checkAktifCalisma+0x1d0>)
 80043c6:	f006 f912 	bl	800a5ee <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80043ca:	4b56      	ldr	r3, [pc, #344]	@ (8004524 <checkAktifCalisma+0x1d4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80043d0:	4b55      	ldr	r3, [pc, #340]	@ (8004528 <checkAktifCalisma+0x1d8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e008      	b.n	80043ea <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043de:	4850      	ldr	r0, [pc, #320]	@ (8004520 <checkAktifCalisma+0x1d0>)
 80043e0:	f006 f905 	bl	800a5ee <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80043e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004524 <checkAktifCalisma+0x1d4>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80043ea:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <checkAktifCalisma+0x1a4>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d164      	bne.n	80044bc <checkAktifCalisma+0x16c>
 80043f2:	4b49      	ldr	r3, [pc, #292]	@ (8004518 <checkAktifCalisma+0x1c8>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <checkAktifCalisma+0xb2>
 80043fa:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <checkAktifCalisma+0x1c4>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d05c      	beq.n	80044bc <checkAktifCalisma+0x16c>
 8004402:	4b46      	ldr	r3, [pc, #280]	@ (800451c <checkAktifCalisma+0x1cc>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d058      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800440a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800440e:	4844      	ldr	r0, [pc, #272]	@ (8004520 <checkAktifCalisma+0x1d0>)
 8004410:	f006 f8d6 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <checkAktifCalisma+0xd2>
 800441a:	4b44      	ldr	r3, [pc, #272]	@ (800452c <checkAktifCalisma+0x1dc>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04c      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004422:	2102      	movs	r1, #2
 8004424:	4842      	ldr	r0, [pc, #264]	@ (8004530 <checkAktifCalisma+0x1e0>)
 8004426:	f006 f8cb 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d145      	bne.n	80044bc <checkAktifCalisma+0x16c>
							&& (basincVar)
 8004430:	4b40      	ldr	r3, [pc, #256]	@ (8004534 <checkAktifCalisma+0x1e4>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d041      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004438:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800443c:	4838      	ldr	r0, [pc, #224]	@ (8004520 <checkAktifCalisma+0x1d0>)
 800443e:	f006 f8bf 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10e      	bne.n	8004466 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004448:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800444c:	4834      	ldr	r0, [pc, #208]	@ (8004520 <checkAktifCalisma+0x1d0>)
 800444e:	f006 f8b7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d106      	bne.n	8004466 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004458:	2140      	movs	r1, #64	@ 0x40
 800445a:	4835      	ldr	r0, [pc, #212]	@ (8004530 <checkAktifCalisma+0x1e0>)
 800445c:	f006 f8b0 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d003      	beq.n	800446e <checkAktifCalisma+0x11e>
 8004466:	4b24      	ldr	r3, [pc, #144]	@ (80044f8 <checkAktifCalisma+0x1a8>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d026      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <checkAktifCalisma+0x1b0>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01f      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 800447c:	4b1f      	ldr	r3, [pc, #124]	@ (80044fc <checkAktifCalisma+0x1ac>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f083 0301 	eor.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d018      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 800448a:	4b20      	ldr	r3, [pc, #128]	@ (800450c <checkAktifCalisma+0x1bc>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004498:	4b27      	ldr	r3, [pc, #156]	@ (8004538 <checkAktifCalisma+0x1e8>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80044a6:	4b25      	ldr	r3, [pc, #148]	@ (800453c <checkAktifCalisma+0x1ec>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	f083 0301 	eor.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80044b4:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <checkAktifCalisma+0x1a8>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e002      	b.n	80044c2 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <checkAktifCalisma+0x1a8>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80044c2:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <checkAktifCalisma+0x1a8>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03c      	beq.n	8004544 <checkAktifCalisma+0x1f4>
 80044ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044ce:	4818      	ldr	r0, [pc, #96]	@ (8004530 <checkAktifCalisma+0x1e0>)
 80044d0:	f006 f876 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d134      	bne.n	8004544 <checkAktifCalisma+0x1f4>
 80044da:	4b19      	ldr	r3, [pc, #100]	@ (8004540 <checkAktifCalisma+0x1f0>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d030      	beq.n	8004544 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80044e2:	2201      	movs	r2, #1
 80044e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044e8:	480d      	ldr	r0, [pc, #52]	@ (8004520 <checkAktifCalisma+0x1d0>)
 80044ea:	f006 f880 	bl	800a5ee <HAL_GPIO_WritePin>
 80044ee:	e02f      	b.n	8004550 <checkAktifCalisma+0x200>
 80044f0:	200010da 	.word	0x200010da
 80044f4:	200010d9 	.word	0x200010d9
 80044f8:	200010f2 	.word	0x200010f2
 80044fc:	200010f3 	.word	0x200010f3
 8004500:	200010f5 	.word	0x200010f5
 8004504:	200010ed 	.word	0x200010ed
 8004508:	200010cf 	.word	0x200010cf
 800450c:	200010f4 	.word	0x200010f4
 8004510:	200010ce 	.word	0x200010ce
 8004514:	2000110e 	.word	0x2000110e
 8004518:	20001121 	.word	0x20001121
 800451c:	2000110f 	.word	0x2000110f
 8004520:	40010c00 	.word	0x40010c00
 8004524:	20001110 	.word	0x20001110
 8004528:	200010fc 	.word	0x200010fc
 800452c:	200010f9 	.word	0x200010f9
 8004530:	40011000 	.word	0x40011000
 8004534:	200010bf 	.word	0x200010bf
 8004538:	200010f7 	.word	0x200010f7
 800453c:	200010f8 	.word	0x200010f8
 8004540:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004544:	2200      	movs	r2, #0
 8004546:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800454a:	4865      	ldr	r0, [pc, #404]	@ (80046e0 <checkAktifCalisma+0x390>)
 800454c:	f006 f84f 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004550:	4b64      	ldr	r3, [pc, #400]	@ (80046e4 <checkAktifCalisma+0x394>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <checkAktifCalisma+0x230>
 8004558:	4b63      	ldr	r3, [pc, #396]	@ (80046e8 <checkAktifCalisma+0x398>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d007      	beq.n	8004570 <checkAktifCalisma+0x220>
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <checkAktifCalisma+0x398>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d003      	beq.n	8004570 <checkAktifCalisma+0x220>
 8004568:	4b60      	ldr	r3, [pc, #384]	@ (80046ec <checkAktifCalisma+0x39c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d107      	bne.n	8004580 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004570:	2201      	movs	r2, #1
 8004572:	2104      	movs	r1, #4
 8004574:	485a      	ldr	r0, [pc, #360]	@ (80046e0 <checkAktifCalisma+0x390>)
 8004576:	f006 f83a 	bl	800a5ee <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800457a:	4b5d      	ldr	r3, [pc, #372]	@ (80046f0 <checkAktifCalisma+0x3a0>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004580:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <checkAktifCalisma+0x3a0>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d033      	beq.n	80045f0 <checkAktifCalisma+0x2a0>
 8004588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800458c:	4854      	ldr	r0, [pc, #336]	@ (80046e0 <checkAktifCalisma+0x390>)
 800458e:	f006 f817 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004592:	4603      	mov	r3, r0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <checkAktifCalisma+0x256>
 8004598:	4b56      	ldr	r3, [pc, #344]	@ (80046f4 <checkAktifCalisma+0x3a4>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f083 0301 	eor.w	r3, r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <checkAktifCalisma+0x264>
 80045a6:	2102      	movs	r1, #2
 80045a8:	4853      	ldr	r0, [pc, #332]	@ (80046f8 <checkAktifCalisma+0x3a8>)
 80045aa:	f006 f809 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d11d      	bne.n	80045f0 <checkAktifCalisma+0x2a0>
 80045b4:	4b51      	ldr	r3, [pc, #324]	@ (80046fc <checkAktifCalisma+0x3ac>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <checkAktifCalisma+0x274>
 80045bc:	4b50      	ldr	r3, [pc, #320]	@ (8004700 <checkAktifCalisma+0x3b0>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <checkAktifCalisma+0x2a0>
 80045c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004704 <checkAktifCalisma+0x3b4>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <checkAktifCalisma+0x2a0>
 80045cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004708 <checkAktifCalisma+0x3b8>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <checkAktifCalisma+0x2a0>
 80045d4:	4b4d      	ldr	r3, [pc, #308]	@ (800470c <checkAktifCalisma+0x3bc>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f083 0301 	eor.w	r3, r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d006      	beq.n	80045f0 <checkAktifCalisma+0x2a0>
					timer2=millis;
 80045e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004710 <checkAktifCalisma+0x3c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004714 <checkAktifCalisma+0x3c4>)
 80045e8:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80045ea:	4b48      	ldr	r3, [pc, #288]	@ (800470c <checkAktifCalisma+0x3bc>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80045f0:	4b47      	ldr	r3, [pc, #284]	@ (8004710 <checkAktifCalisma+0x3c0>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <checkAktifCalisma+0x3c4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	4a47      	ldr	r2, [pc, #284]	@ (8004718 <checkAktifCalisma+0x3c8>)
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	4293      	cmp	r3, r2
 8004600:	d303      	bcc.n	800460a <checkAktifCalisma+0x2ba>
 8004602:	4b42      	ldr	r3, [pc, #264]	@ (800470c <checkAktifCalisma+0x3bc>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <checkAktifCalisma+0x2ec>
 800460a:	4b3c      	ldr	r3, [pc, #240]	@ (80046fc <checkAktifCalisma+0x3ac>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f083 0301 	eor.w	r3, r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d006      	beq.n	8004626 <checkAktifCalisma+0x2d6>
 8004618:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <checkAktifCalisma+0x3b0>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <checkAktifCalisma+0x2ec>
 8004626:	4b37      	ldr	r3, [pc, #220]	@ (8004704 <checkAktifCalisma+0x3b4>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d103      	bne.n	800463c <checkAktifCalisma+0x2ec>
 8004634:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <checkAktifCalisma+0x3b8>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800463c:	2200      	movs	r2, #0
 800463e:	2104      	movs	r1, #4
 8004640:	4827      	ldr	r0, [pc, #156]	@ (80046e0 <checkAktifCalisma+0x390>)
 8004642:	f005 ffd4 	bl	800a5ee <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004646:	4b2a      	ldr	r3, [pc, #168]	@ (80046f0 <checkAktifCalisma+0x3a0>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800464c:	4b2f      	ldr	r3, [pc, #188]	@ (800470c <checkAktifCalisma+0x3bc>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8004652:	4b32      	ldr	r3, [pc, #200]	@ (800471c <checkAktifCalisma+0x3cc>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <checkAktifCalisma+0x310>
					cerceveVar=1;
 800465a:	4b31      	ldr	r3, [pc, #196]	@ (8004720 <checkAktifCalisma+0x3d0>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004660:	4b2e      	ldr	r3, [pc, #184]	@ (800471c <checkAktifCalisma+0x3cc>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d116      	bne.n	8004696 <checkAktifCalisma+0x346>
 8004668:	4b2e      	ldr	r3, [pc, #184]	@ (8004724 <checkAktifCalisma+0x3d4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d112      	bne.n	8004696 <checkAktifCalisma+0x346>
 8004670:	2101      	movs	r1, #1
 8004672:	4821      	ldr	r0, [pc, #132]	@ (80046f8 <checkAktifCalisma+0x3a8>)
 8004674:	f005 ffa4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <checkAktifCalisma+0x346>
 800467e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004682:	4817      	ldr	r0, [pc, #92]	@ (80046e0 <checkAktifCalisma+0x390>)
 8004684:	f005 ff9c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800468e:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <checkAktifCalisma+0x3d0>)
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e011      	b.n	80046ba <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004696:	4b21      	ldr	r3, [pc, #132]	@ (800471c <checkAktifCalisma+0x3cc>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10d      	bne.n	80046ba <checkAktifCalisma+0x36a>
 800469e:	2101      	movs	r1, #1
 80046a0:	4815      	ldr	r0, [pc, #84]	@ (80046f8 <checkAktifCalisma+0x3a8>)
 80046a2:	f005 ff8d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d106      	bne.n	80046ba <checkAktifCalisma+0x36a>
 80046ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <checkAktifCalisma+0x3d4>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d102      	bne.n	80046ba <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80046b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <checkAktifCalisma+0x3d0>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80046ba:	4b18      	ldr	r3, [pc, #96]	@ (800471c <checkAktifCalisma+0x3cc>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d135      	bne.n	800472e <checkAktifCalisma+0x3de>
 80046c2:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <checkAktifCalisma+0x3d4>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d131      	bne.n	800472e <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80046ca:	2101      	movs	r1, #1
 80046cc:	480a      	ldr	r0, [pc, #40]	@ (80046f8 <checkAktifCalisma+0x3a8>)
 80046ce:	f005 ff77 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d127      	bne.n	8004728 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80046d8:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <checkAktifCalisma+0x3d0>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e026      	b.n	800472e <checkAktifCalisma+0x3de>
 80046e0:	40010c00 	.word	0x40010c00
 80046e4:	200010f2 	.word	0x200010f2
 80046e8:	200010cb 	.word	0x200010cb
 80046ec:	200010cf 	.word	0x200010cf
 80046f0:	200010f6 	.word	0x200010f6
 80046f4:	200010f9 	.word	0x200010f9
 80046f8:	40011000 	.word	0x40011000
 80046fc:	2000110e 	.word	0x2000110e
 8004700:	20001121 	.word	0x20001121
 8004704:	2000110f 	.word	0x2000110f
 8004708:	200010bf 	.word	0x200010bf
 800470c:	200010ee 	.word	0x200010ee
 8004710:	20001094 	.word	0x20001094
 8004714:	200010a0 	.word	0x200010a0
 8004718:	200010d0 	.word	0x200010d0
 800471c:	200010c0 	.word	0x200010c0
 8004720:	20001113 	.word	0x20001113
 8004724:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 8004728:	4b7f      	ldr	r3, [pc, #508]	@ (8004928 <checkAktifCalisma+0x5d8>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800472e:	4b7f      	ldr	r3, [pc, #508]	@ (800492c <checkAktifCalisma+0x5dc>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d17c      	bne.n	8004830 <checkAktifCalisma+0x4e0>
 8004736:	4b7e      	ldr	r3, [pc, #504]	@ (8004930 <checkAktifCalisma+0x5e0>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d078      	beq.n	8004830 <checkAktifCalisma+0x4e0>
 800473e:	4b7d      	ldr	r3, [pc, #500]	@ (8004934 <checkAktifCalisma+0x5e4>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d074      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004746:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800474a:	487b      	ldr	r0, [pc, #492]	@ (8004938 <checkAktifCalisma+0x5e8>)
 800474c:	f005 ff38 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <checkAktifCalisma+0x40e>
 8004756:	4b79      	ldr	r3, [pc, #484]	@ (800493c <checkAktifCalisma+0x5ec>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d068      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800475e:	4b72      	ldr	r3, [pc, #456]	@ (8004928 <checkAktifCalisma+0x5d8>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d064      	beq.n	8004830 <checkAktifCalisma+0x4e0>
 8004766:	4b76      	ldr	r3, [pc, #472]	@ (8004940 <checkAktifCalisma+0x5f0>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f083 0301 	eor.w	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05d      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004774:	2104      	movs	r1, #4
 8004776:	4873      	ldr	r0, [pc, #460]	@ (8004944 <checkAktifCalisma+0x5f4>)
 8004778:	f005 ff22 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <checkAktifCalisma+0x43a>
 8004782:	4b71      	ldr	r3, [pc, #452]	@ (8004948 <checkAktifCalisma+0x5f8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d152      	bne.n	8004830 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800478a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800478e:	486a      	ldr	r0, [pc, #424]	@ (8004938 <checkAktifCalisma+0x5e8>)
 8004790:	f005 ff16 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004794:	4603      	mov	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10e      	bne.n	80047b8 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800479a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800479e:	4866      	ldr	r0, [pc, #408]	@ (8004938 <checkAktifCalisma+0x5e8>)
 80047a0:	f005 ff0e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d106      	bne.n	80047b8 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80047aa:	2140      	movs	r1, #64	@ 0x40
 80047ac:	4865      	ldr	r0, [pc, #404]	@ (8004944 <checkAktifCalisma+0x5f4>)
 80047ae:	f005 ff07 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d003      	beq.n	80047c0 <checkAktifCalisma+0x470>
 80047b8:	4b64      	ldr	r3, [pc, #400]	@ (800494c <checkAktifCalisma+0x5fc>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d037      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80047c0:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <checkAktifCalisma+0x600>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f083 0301 	eor.w	r3, r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d030      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80047ce:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <checkAktifCalisma+0x604>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f083 0301 	eor.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d029      	beq.n	8004830 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80047dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004958 <checkAktifCalisma+0x608>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d022      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80047ea:	4b5c      	ldr	r3, [pc, #368]	@ (800495c <checkAktifCalisma+0x60c>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f083 0301 	eor.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80047f8:	4b59      	ldr	r3, [pc, #356]	@ (8004960 <checkAktifCalisma+0x610>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f083 0301 	eor.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d014      	beq.n	8004830 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004806:	4b57      	ldr	r3, [pc, #348]	@ (8004964 <checkAktifCalisma+0x614>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f083 0301 	eor.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00d      	beq.n	8004830 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004814:	2201      	movs	r2, #1
 8004816:	2102      	movs	r1, #2
 8004818:	4847      	ldr	r0, [pc, #284]	@ (8004938 <checkAktifCalisma+0x5e8>)
 800481a:	f005 fee8 	bl	800a5ee <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800481e:	4b4b      	ldr	r3, [pc, #300]	@ (800494c <checkAktifCalisma+0x5fc>)
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004824:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <checkAktifCalisma+0x618>)
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800482a:	4b50      	ldr	r3, [pc, #320]	@ (800496c <checkAktifCalisma+0x61c>)
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004830:	4b46      	ldr	r3, [pc, #280]	@ (800494c <checkAktifCalisma+0x5fc>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d033      	beq.n	80048a0 <checkAktifCalisma+0x550>
 8004838:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800483c:	483e      	ldr	r0, [pc, #248]	@ (8004938 <checkAktifCalisma+0x5e8>)
 800483e:	f005 febf 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <checkAktifCalisma+0x506>
 8004848:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <checkAktifCalisma+0x5ec>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f083 0301 	eor.w	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <checkAktifCalisma+0x51c>
 8004856:	2104      	movs	r1, #4
 8004858:	483a      	ldr	r0, [pc, #232]	@ (8004944 <checkAktifCalisma+0x5f4>)
 800485a:	f005 feb1 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800485e:	4603      	mov	r3, r0
 8004860:	2b01      	cmp	r3, #1
 8004862:	d11d      	bne.n	80048a0 <checkAktifCalisma+0x550>
 8004864:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <checkAktifCalisma+0x5f8>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d019      	beq.n	80048a0 <checkAktifCalisma+0x550>
 800486c:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <checkAktifCalisma+0x5e0>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d015      	beq.n	80048a0 <checkAktifCalisma+0x550>
 8004874:	4b2f      	ldr	r3, [pc, #188]	@ (8004934 <checkAktifCalisma+0x5e4>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <checkAktifCalisma+0x550>
 800487c:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <checkAktifCalisma+0x5d8>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <checkAktifCalisma+0x550>
 8004884:	4b3a      	ldr	r3, [pc, #232]	@ (8004970 <checkAktifCalisma+0x620>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f083 0301 	eor.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <checkAktifCalisma+0x550>
					timer2=millis;
 8004892:	4b38      	ldr	r3, [pc, #224]	@ (8004974 <checkAktifCalisma+0x624>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a38      	ldr	r2, [pc, #224]	@ (8004978 <checkAktifCalisma+0x628>)
 8004898:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800489a:	4b35      	ldr	r3, [pc, #212]	@ (8004970 <checkAktifCalisma+0x620>)
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80048a0:	4b34      	ldr	r3, [pc, #208]	@ (8004974 <checkAktifCalisma+0x624>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b34      	ldr	r3, [pc, #208]	@ (8004978 <checkAktifCalisma+0x628>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	4a34      	ldr	r2, [pc, #208]	@ (800497c <checkAktifCalisma+0x62c>)
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d303      	bcc.n	80048ba <checkAktifCalisma+0x56a>
 80048b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <checkAktifCalisma+0x620>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d114      	bne.n	80048e4 <checkAktifCalisma+0x594>
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <checkAktifCalisma+0x5e0>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f083 0301 	eor.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <checkAktifCalisma+0x594>
 80048c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004934 <checkAktifCalisma+0x5e4>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f083 0301 	eor.w	r3, r3, #1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <checkAktifCalisma+0x594>
 80048d6:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <checkAktifCalisma+0x5d8>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f083 0301 	eor.w	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80048e4:	2200      	movs	r2, #0
 80048e6:	2102      	movs	r1, #2
 80048e8:	4813      	ldr	r0, [pc, #76]	@ (8004938 <checkAktifCalisma+0x5e8>)
 80048ea:	f005 fe80 	bl	800a5ee <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80048ee:	4b17      	ldr	r3, [pc, #92]	@ (800494c <checkAktifCalisma+0x5fc>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80048f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004970 <checkAktifCalisma+0x620>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <checkAktifCalisma+0x5fc>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d040      	beq.n	8004984 <checkAktifCalisma+0x634>
 8004902:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004906:	480f      	ldr	r0, [pc, #60]	@ (8004944 <checkAktifCalisma+0x5f4>)
 8004908:	f005 fe5a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d138      	bne.n	8004984 <checkAktifCalisma+0x634>
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <checkAktifCalisma+0x630>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d034      	beq.n	8004984 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800491a:	2201      	movs	r2, #1
 800491c:	2101      	movs	r1, #1
 800491e:	4806      	ldr	r0, [pc, #24]	@ (8004938 <checkAktifCalisma+0x5e8>)
 8004920:	f005 fe65 	bl	800a5ee <HAL_GPIO_WritePin>
 8004924:	e033      	b.n	800498e <checkAktifCalisma+0x63e>
 8004926:	bf00      	nop
 8004928:	20001113 	.word	0x20001113
 800492c:	200010d9 	.word	0x200010d9
 8004930:	2000110e 	.word	0x2000110e
 8004934:	2000110f 	.word	0x2000110f
 8004938:	40010c00 	.word	0x40010c00
 800493c:	200010fa 	.word	0x200010fa
 8004940:	2000110d 	.word	0x2000110d
 8004944:	40011000 	.word	0x40011000
 8004948:	200010c2 	.word	0x200010c2
 800494c:	200010f5 	.word	0x200010f5
 8004950:	200010f2 	.word	0x200010f2
 8004954:	200010f6 	.word	0x200010f6
 8004958:	200010f3 	.word	0x200010f3
 800495c:	200010f4 	.word	0x200010f4
 8004960:	200010f7 	.word	0x200010f7
 8004964:	200010f8 	.word	0x200010f8
 8004968:	200010fd 	.word	0x200010fd
 800496c:	2000111d 	.word	0x2000111d
 8004970:	200010ed 	.word	0x200010ed
 8004974:	20001094 	.word	0x20001094
 8004978:	200010a0 	.word	0x200010a0
 800497c:	200010d1 	.word	0x200010d1
 8004980:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004984:	2200      	movs	r2, #0
 8004986:	2101      	movs	r1, #1
 8004988:	4836      	ldr	r0, [pc, #216]	@ (8004a64 <checkAktifCalisma+0x714>)
 800498a:	f005 fe30 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800498e:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <checkAktifCalisma+0x718>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 8080 	bne.w	8004a98 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004998:	4b34      	ldr	r3, [pc, #208]	@ (8004a6c <checkAktifCalisma+0x71c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d003      	beq.n	80049a8 <checkAktifCalisma+0x658>
 80049a0:	4b32      	ldr	r3, [pc, #200]	@ (8004a6c <checkAktifCalisma+0x71c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d177      	bne.n	8004a98 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 80049a8:	4b31      	ldr	r3, [pc, #196]	@ (8004a70 <checkAktifCalisma+0x720>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d073      	beq.n	8004a98 <checkAktifCalisma+0x748>
 80049b0:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <checkAktifCalisma+0x724>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d06f      	beq.n	8004a98 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80049b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049bc:	4829      	ldr	r0, [pc, #164]	@ (8004a64 <checkAktifCalisma+0x714>)
 80049be:	f005 fdff 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d167      	bne.n	8004a98 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80049c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049cc:	482a      	ldr	r0, [pc, #168]	@ (8004a78 <checkAktifCalisma+0x728>)
 80049ce:	f005 fdf7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <checkAktifCalisma+0x690>
 80049d8:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <checkAktifCalisma+0x72c>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d15b      	bne.n	8004a98 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80049e0:	2140      	movs	r1, #64	@ 0x40
 80049e2:	4825      	ldr	r0, [pc, #148]	@ (8004a78 <checkAktifCalisma+0x728>)
 80049e4:	f005 fdec 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10f      	bne.n	8004a0e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80049ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049f2:	481c      	ldr	r0, [pc, #112]	@ (8004a64 <checkAktifCalisma+0x714>)
 80049f4:	f005 fde4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80049fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a02:	4818      	ldr	r0, [pc, #96]	@ (8004a64 <checkAktifCalisma+0x714>)
 8004a04:	f005 fddc 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d003      	beq.n	8004a16 <checkAktifCalisma+0x6c6>
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <checkAktifCalisma+0x730>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d040      	beq.n	8004a98 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004a16:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <checkAktifCalisma+0x734>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f083 0301 	eor.w	r3, r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d039      	beq.n	8004a98 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004a24:	4b18      	ldr	r3, [pc, #96]	@ (8004a88 <checkAktifCalisma+0x738>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f083 0301 	eor.w	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d032      	beq.n	8004a98 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <checkAktifCalisma+0x73c>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02b      	beq.n	8004a98 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004a40:	4b13      	ldr	r3, [pc, #76]	@ (8004a90 <checkAktifCalisma+0x740>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d024      	beq.n	8004a98 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004a4e:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <checkAktifCalisma+0x744>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	f083 0301 	eor.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01d      	beq.n	8004a98 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004a5c:	4b08      	ldr	r3, [pc, #32]	@ (8004a80 <checkAktifCalisma+0x730>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e01c      	b.n	8004a9e <checkAktifCalisma+0x74e>
 8004a64:	40010c00 	.word	0x40010c00
 8004a68:	200010d9 	.word	0x200010d9
 8004a6c:	200010cb 	.word	0x200010cb
 8004a70:	2000110e 	.word	0x2000110e
 8004a74:	2000110f 	.word	0x2000110f
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	200010cc 	.word	0x200010cc
 8004a80:	200010f3 	.word	0x200010f3
 8004a84:	200010f2 	.word	0x200010f2
 8004a88:	200010f6 	.word	0x200010f6
 8004a8c:	200010f5 	.word	0x200010f5
 8004a90:	200010f4 	.word	0x200010f4
 8004a94:	200010f8 	.word	0x200010f8
				} else {
					devmotoryukaricalisiyor=0;
 8004a98:	4b64      	ldr	r3, [pc, #400]	@ (8004c2c <checkAktifCalisma+0x8dc>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004a9e:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <checkAktifCalisma+0x8dc>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	4861      	ldr	r0, [pc, #388]	@ (8004c30 <checkAktifCalisma+0x8e0>)
 8004aac:	f005 fd9f 	bl	800a5ee <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004ab0:	4b60      	ldr	r3, [pc, #384]	@ (8004c34 <checkAktifCalisma+0x8e4>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c34 <checkAktifCalisma+0x8e4>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d025      	beq.n	8004b0a <checkAktifCalisma+0x7ba>
 8004abe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ac2:	485d      	ldr	r0, [pc, #372]	@ (8004c38 <checkAktifCalisma+0x8e8>)
 8004ac4:	f005 fd7c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d007      	beq.n	8004ade <checkAktifCalisma+0x78e>
 8004ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ad2:	4857      	ldr	r0, [pc, #348]	@ (8004c30 <checkAktifCalisma+0x8e0>)
 8004ad4:	f005 fd74 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d115      	bne.n	8004b0a <checkAktifCalisma+0x7ba>
 8004ade:	4b57      	ldr	r3, [pc, #348]	@ (8004c3c <checkAktifCalisma+0x8ec>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d011      	beq.n	8004b0a <checkAktifCalisma+0x7ba>
 8004ae6:	4b56      	ldr	r3, [pc, #344]	@ (8004c40 <checkAktifCalisma+0x8f0>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <checkAktifCalisma+0x7ba>
 8004aee:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <checkAktifCalisma+0x8f4>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f083 0301 	eor.w	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004afc:	4b52      	ldr	r3, [pc, #328]	@ (8004c48 <checkAktifCalisma+0x8f8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a52      	ldr	r2, [pc, #328]	@ (8004c4c <checkAktifCalisma+0x8fc>)
 8004b02:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004b04:	4b4f      	ldr	r3, [pc, #316]	@ (8004c44 <checkAktifCalisma+0x8f4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c48 <checkAktifCalisma+0x8f8>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c4c <checkAktifCalisma+0x8fc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	4a4e      	ldr	r2, [pc, #312]	@ (8004c50 <checkAktifCalisma+0x900>)
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d303      	bcc.n	8004b24 <checkAktifCalisma+0x7d4>
 8004b1c:	4b49      	ldr	r3, [pc, #292]	@ (8004c44 <checkAktifCalisma+0x8f4>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <checkAktifCalisma+0x7f0>
 8004b24:	4b45      	ldr	r3, [pc, #276]	@ (8004c3c <checkAktifCalisma+0x8ec>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f083 0301 	eor.w	r3, r3, #1
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <checkAktifCalisma+0x7f0>
 8004b32:	4b43      	ldr	r3, [pc, #268]	@ (8004c40 <checkAktifCalisma+0x8f0>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	f083 0301 	eor.w	r3, r3, #1
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004b40:	2200      	movs	r2, #0
 8004b42:	2120      	movs	r1, #32
 8004b44:	483a      	ldr	r0, [pc, #232]	@ (8004c30 <checkAktifCalisma+0x8e0>)
 8004b46:	f005 fd52 	bl	800a5ee <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c34 <checkAktifCalisma+0x8e4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004b50:	4b3c      	ldr	r3, [pc, #240]	@ (8004c44 <checkAktifCalisma+0x8f4>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004b56:	4b3f      	ldr	r3, [pc, #252]	@ (8004c54 <checkAktifCalisma+0x904>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8088 	bne.w	8004c70 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b60:	4b3d      	ldr	r3, [pc, #244]	@ (8004c58 <checkAktifCalisma+0x908>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d003      	beq.n	8004b70 <checkAktifCalisma+0x820>
 8004b68:	4b3b      	ldr	r3, [pc, #236]	@ (8004c58 <checkAktifCalisma+0x908>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d17f      	bne.n	8004c70 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004b70:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <checkAktifCalisma+0x8ec>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d07b      	beq.n	8004c70 <checkAktifCalisma+0x920>
 8004b78:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <checkAktifCalisma+0x8f0>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d077      	beq.n	8004c70 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004b80:	2140      	movs	r1, #64	@ 0x40
 8004b82:	482b      	ldr	r0, [pc, #172]	@ (8004c30 <checkAktifCalisma+0x8e0>)
 8004b84:	f005 fd1c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d170      	bne.n	8004c70 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004b8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b92:	4827      	ldr	r0, [pc, #156]	@ (8004c30 <checkAktifCalisma+0x8e0>)
 8004b94:	f005 fd14 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <checkAktifCalisma+0x856>
 8004b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c5c <checkAktifCalisma+0x90c>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d164      	bne.n	8004c70 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004ba6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004baa:	4823      	ldr	r0, [pc, #140]	@ (8004c38 <checkAktifCalisma+0x8e8>)
 8004bac:	f005 fd08 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10f      	bne.n	8004bd6 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bba:	481f      	ldr	r0, [pc, #124]	@ (8004c38 <checkAktifCalisma+0x8e8>)
 8004bbc:	f005 fd00 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d107      	bne.n	8004bd6 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bca:	481b      	ldr	r0, [pc, #108]	@ (8004c38 <checkAktifCalisma+0x8e8>)
 8004bcc:	f005 fcf8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d003      	beq.n	8004bde <checkAktifCalisma+0x88e>
 8004bd6:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <checkAktifCalisma+0x910>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d048      	beq.n	8004c70 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004bde:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <checkAktifCalisma+0x914>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f083 0301 	eor.w	r3, r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d041      	beq.n	8004c70 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004bec:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <checkAktifCalisma+0x918>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f083 0301 	eor.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03a      	beq.n	8004c70 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <checkAktifCalisma+0x91c>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f083 0301 	eor.w	r3, r3, #1
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d033      	beq.n	8004c70 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <checkAktifCalisma+0x8e4>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02c      	beq.n	8004c70 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <checkAktifCalisma+0x8dc>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f083 0301 	eor.w	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d025      	beq.n	8004c70 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004c24:	4b0e      	ldr	r3, [pc, #56]	@ (8004c60 <checkAktifCalisma+0x910>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e024      	b.n	8004c76 <checkAktifCalisma+0x926>
 8004c2c:	200010f3 	.word	0x200010f3
 8004c30:	40011000 	.word	0x40011000
 8004c34:	200010f7 	.word	0x200010f7
 8004c38:	40010c00 	.word	0x40010c00
 8004c3c:	2000110e 	.word	0x2000110e
 8004c40:	2000110f 	.word	0x2000110f
 8004c44:	200010ef 	.word	0x200010ef
 8004c48:	20001094 	.word	0x20001094
 8004c4c:	200010a0 	.word	0x200010a0
 8004c50:	200010d2 	.word	0x200010d2
 8004c54:	200010d9 	.word	0x200010d9
 8004c58:	200010cb 	.word	0x200010cb
 8004c5c:	200010cd 	.word	0x200010cd
 8004c60:	200010f4 	.word	0x200010f4
 8004c64:	200010f2 	.word	0x200010f2
 8004c68:	200010f6 	.word	0x200010f6
 8004c6c:	200010f5 	.word	0x200010f5
				} else {
					devmotorasagicalisiyor=0;
 8004c70:	4b96      	ldr	r3, [pc, #600]	@ (8004ecc <checkAktifCalisma+0xb7c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004c76:	4b95      	ldr	r3, [pc, #596]	@ (8004ecc <checkAktifCalisma+0xb7c>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004c7e:	2201      	movs	r2, #1
 8004c80:	2110      	movs	r1, #16
 8004c82:	4893      	ldr	r0, [pc, #588]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004c84:	f005 fcb3 	bl	800a5ee <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004c88:	4b92      	ldr	r3, [pc, #584]	@ (8004ed4 <checkAktifCalisma+0xb84>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004c8e:	4b91      	ldr	r3, [pc, #580]	@ (8004ed4 <checkAktifCalisma+0xb84>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d024      	beq.n	8004ce0 <checkAktifCalisma+0x990>
 8004c96:	2140      	movs	r1, #64	@ 0x40
 8004c98:	488d      	ldr	r0, [pc, #564]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004c9a:	f005 fc91 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d007      	beq.n	8004cb4 <checkAktifCalisma+0x964>
 8004ca4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ca8:	4889      	ldr	r0, [pc, #548]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004caa:	f005 fc89 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d115      	bne.n	8004ce0 <checkAktifCalisma+0x990>
 8004cb4:	4b88      	ldr	r3, [pc, #544]	@ (8004ed8 <checkAktifCalisma+0xb88>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d011      	beq.n	8004ce0 <checkAktifCalisma+0x990>
 8004cbc:	4b87      	ldr	r3, [pc, #540]	@ (8004edc <checkAktifCalisma+0xb8c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <checkAktifCalisma+0x990>
 8004cc4:	4b86      	ldr	r3, [pc, #536]	@ (8004ee0 <checkAktifCalisma+0xb90>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f083 0301 	eor.w	r3, r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <checkAktifCalisma+0x990>
					timer2=millis;
 8004cd2:	4b84      	ldr	r3, [pc, #528]	@ (8004ee4 <checkAktifCalisma+0xb94>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a84      	ldr	r2, [pc, #528]	@ (8004ee8 <checkAktifCalisma+0xb98>)
 8004cd8:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004cda:	4b81      	ldr	r3, [pc, #516]	@ (8004ee0 <checkAktifCalisma+0xb90>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004ce0:	4b80      	ldr	r3, [pc, #512]	@ (8004ee4 <checkAktifCalisma+0xb94>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b80      	ldr	r3, [pc, #512]	@ (8004ee8 <checkAktifCalisma+0xb98>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	4a80      	ldr	r2, [pc, #512]	@ (8004eec <checkAktifCalisma+0xb9c>)
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d303      	bcc.n	8004cfa <checkAktifCalisma+0x9aa>
 8004cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee0 <checkAktifCalisma+0xb90>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <checkAktifCalisma+0x9c6>
 8004cfa:	4b77      	ldr	r3, [pc, #476]	@ (8004ed8 <checkAktifCalisma+0xb88>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f083 0301 	eor.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <checkAktifCalisma+0x9c6>
 8004d08:	4b74      	ldr	r3, [pc, #464]	@ (8004edc <checkAktifCalisma+0xb8c>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2110      	movs	r1, #16
 8004d1a:	486d      	ldr	r0, [pc, #436]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004d1c:	f005 fc67 	bl	800a5ee <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004d20:	4b6c      	ldr	r3, [pc, #432]	@ (8004ed4 <checkAktifCalisma+0xb84>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004d26:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee0 <checkAktifCalisma+0xb90>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004d2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d30:	486f      	ldr	r0, [pc, #444]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004d32:	f005 fc45 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d120      	bne.n	8004d7e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004d3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d40:	486b      	ldr	r0, [pc, #428]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004d42:	f005 fc3d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d118      	bne.n	8004d7e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4868      	ldr	r0, [pc, #416]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004d50:	f005 fc36 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d111      	bne.n	8004d7e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4864      	ldr	r0, [pc, #400]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004d5e:	f005 fc2f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4861      	ldr	r0, [pc, #388]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004d6c:	f005 fc28 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004d76:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef4 <checkAktifCalisma+0xba4>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e002      	b.n	8004d84 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ef4 <checkAktifCalisma+0xba4>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d84:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef8 <checkAktifCalisma+0xba8>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d144      	bne.n	8004e16 <checkAktifCalisma+0xac6>
 8004d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004efc <checkAktifCalisma+0xbac>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d003      	beq.n	8004d9c <checkAktifCalisma+0xa4c>
 8004d94:	4b59      	ldr	r3, [pc, #356]	@ (8004efc <checkAktifCalisma+0xbac>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d13c      	bne.n	8004e16 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d9c:	2180      	movs	r1, #128	@ 0x80
 8004d9e:	484c      	ldr	r0, [pc, #304]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004da0:	f005 fc0e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <checkAktifCalisma+0xa62>
 8004daa:	4b55      	ldr	r3, [pc, #340]	@ (8004f00 <checkAktifCalisma+0xbb0>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <checkAktifCalisma+0xa7a>
 8004db2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004db6:	484e      	ldr	r0, [pc, #312]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004db8:	f005 fc02 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d129      	bne.n	8004e16 <checkAktifCalisma+0xac6>
 8004dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f00 <checkAktifCalisma+0xbb0>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d125      	bne.n	8004e16 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004dca:	2104      	movs	r1, #4
 8004dcc:	4840      	ldr	r0, [pc, #256]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004dce:	f005 fbf7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d003      	beq.n	8004de0 <checkAktifCalisma+0xa90>
 8004dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8004f04 <checkAktifCalisma+0xbb4>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11a      	bne.n	8004e16 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004de0:	2102      	movs	r1, #2
 8004de2:	483b      	ldr	r0, [pc, #236]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004de4:	f005 fbec 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d113      	bne.n	8004e16 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004dee:	4b46      	ldr	r3, [pc, #280]	@ (8004f08 <checkAktifCalisma+0xbb8>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f083 0301 	eor.w	r3, r3, #1
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef4 <checkAktifCalisma+0xba4>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004e04:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <checkAktifCalisma+0xbbc>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004e0a:	4b36      	ldr	r3, [pc, #216]	@ (8004ee4 <checkAktifCalisma+0xb94>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	@ (8004f10 <checkAktifCalisma+0xbc0>)
 8004e10:	6013      	str	r3, [r2, #0]
					bekle();
 8004e12:	f7ff f901 	bl	8004018 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004e16:	4b33      	ldr	r3, [pc, #204]	@ (8004ee4 <checkAktifCalisma+0xb94>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <checkAktifCalisma+0xbc0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	4a3c      	ldr	r2, [pc, #240]	@ (8004f14 <checkAktifCalisma+0xbc4>)
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d211      	bcs.n	8004e4c <checkAktifCalisma+0xafc>
 8004e28:	2104      	movs	r1, #4
 8004e2a:	4829      	ldr	r0, [pc, #164]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004e2c:	f005 fbc8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <checkAktifCalisma+0xafc>
 8004e36:	4b33      	ldr	r3, [pc, #204]	@ (8004f04 <checkAktifCalisma+0xbb4>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <checkAktifCalisma+0xafc>
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef4 <checkAktifCalisma+0xba4>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	f083 0301 	eor.w	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f0c <checkAktifCalisma+0xbbc>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e52:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <checkAktifCalisma+0xba8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d160      	bne.n	8004f1c <checkAktifCalisma+0xbcc>
 8004e5a:	4b28      	ldr	r3, [pc, #160]	@ (8004efc <checkAktifCalisma+0xbac>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d003      	beq.n	8004e6a <checkAktifCalisma+0xb1a>
 8004e62:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <checkAktifCalisma+0xbac>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d158      	bne.n	8004f1c <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	4818      	ldr	r0, [pc, #96]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004e6e:	f005 fba7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d003      	beq.n	8004e80 <checkAktifCalisma+0xb30>
 8004e78:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <checkAktifCalisma+0xbb4>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d14d      	bne.n	8004f1c <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e80:	2102      	movs	r1, #2
 8004e82:	4813      	ldr	r0, [pc, #76]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004e84:	f005 fb9c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d146      	bne.n	8004f1c <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e8e:	2180      	movs	r1, #128	@ 0x80
 8004e90:	480f      	ldr	r0, [pc, #60]	@ (8004ed0 <checkAktifCalisma+0xb80>)
 8004e92:	f005 fb95 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <checkAktifCalisma+0xb54>
 8004e9c:	4b18      	ldr	r3, [pc, #96]	@ (8004f00 <checkAktifCalisma+0xbb0>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <checkAktifCalisma+0xb6c>
 8004ea4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ea8:	4811      	ldr	r0, [pc, #68]	@ (8004ef0 <checkAktifCalisma+0xba0>)
 8004eaa:	f005 fb89 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d133      	bne.n	8004f1c <checkAktifCalisma+0xbcc>
 8004eb4:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <checkAktifCalisma+0xbb0>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d12f      	bne.n	8004f1c <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <checkAktifCalisma+0xba4>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02b      	beq.n	8004f1c <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004ec4:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <checkAktifCalisma+0xbc8>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e02a      	b.n	8004f22 <checkAktifCalisma+0xbd2>
 8004ecc:	200010f4 	.word	0x200010f4
 8004ed0:	40011000 	.word	0x40011000
 8004ed4:	200010f8 	.word	0x200010f8
 8004ed8:	2000110e 	.word	0x2000110e
 8004edc:	2000110f 	.word	0x2000110f
 8004ee0:	200010f0 	.word	0x200010f0
 8004ee4:	20001094 	.word	0x20001094
 8004ee8:	200010a0 	.word	0x200010a0
 8004eec:	200010d2 	.word	0x200010d2
 8004ef0:	40010c00 	.word	0x40010c00
 8004ef4:	200010fe 	.word	0x200010fe
 8004ef8:	200010c5 	.word	0x200010c5
 8004efc:	200010c4 	.word	0x200010c4
 8004f00:	200010c8 	.word	0x200010c8
 8004f04:	200010c2 	.word	0x200010c2
 8004f08:	200010ec 	.word	0x200010ec
 8004f0c:	200010ff 	.word	0x200010ff
 8004f10:	20001098 	.word	0x20001098
 8004f14:	200010d5 	.word	0x200010d5
 8004f18:	20001100 	.word	0x20001100
				} else {
					kapi1butonkontrol=0;
 8004f1c:	4b8b      	ldr	r3, [pc, #556]	@ (800514c <checkAktifCalisma+0xdfc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f22:	4b8b      	ldr	r3, [pc, #556]	@ (8005150 <checkAktifCalisma+0xe00>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d121      	bne.n	8004f6e <checkAktifCalisma+0xc1e>
 8004f2a:	4b8a      	ldr	r3, [pc, #552]	@ (8005154 <checkAktifCalisma+0xe04>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d003      	beq.n	8004f3a <checkAktifCalisma+0xbea>
 8004f32:	4b88      	ldr	r3, [pc, #544]	@ (8005154 <checkAktifCalisma+0xe04>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d119      	bne.n	8004f6e <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4886      	ldr	r0, [pc, #536]	@ (8005158 <checkAktifCalisma+0xe08>)
 8004f3e:	f005 fb3f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d003      	beq.n	8004f50 <checkAktifCalisma+0xc00>
 8004f48:	4b84      	ldr	r3, [pc, #528]	@ (800515c <checkAktifCalisma+0xe0c>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10e      	bne.n	8004f6e <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f50:	2102      	movs	r1, #2
 8004f52:	4881      	ldr	r0, [pc, #516]	@ (8005158 <checkAktifCalisma+0xe08>)
 8004f54:	f005 fb34 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d107      	bne.n	8004f6e <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004f5e:	4b80      	ldr	r3, [pc, #512]	@ (8005160 <checkAktifCalisma+0xe10>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004f66:	4b7f      	ldr	r3, [pc, #508]	@ (8005164 <checkAktifCalisma+0xe14>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e002      	b.n	8004f74 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005164 <checkAktifCalisma+0xe14>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004f74:	4b75      	ldr	r3, [pc, #468]	@ (800514c <checkAktifCalisma+0xdfc>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <checkAktifCalisma+0xc3c>
 8004f7c:	4b79      	ldr	r3, [pc, #484]	@ (8005164 <checkAktifCalisma+0xe14>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <checkAktifCalisma+0xc3c>
 8004f84:	4b78      	ldr	r3, [pc, #480]	@ (8005168 <checkAktifCalisma+0xe18>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	2180      	movs	r1, #128	@ 0x80
 8004f90:	4876      	ldr	r0, [pc, #472]	@ (800516c <checkAktifCalisma+0xe1c>)
 8004f92:	f005 fb2c 	bl	800a5ee <HAL_GPIO_WritePin>
 8004f96:	e004      	b.n	8004fa2 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2180      	movs	r1, #128	@ 0x80
 8004f9c:	4873      	ldr	r0, [pc, #460]	@ (800516c <checkAktifCalisma+0xe1c>)
 8004f9e:	f005 fb26 	bl	800a5ee <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fa2:	4b73      	ldr	r3, [pc, #460]	@ (8005170 <checkAktifCalisma+0xe20>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d141      	bne.n	800502e <checkAktifCalisma+0xcde>
 8004faa:	4b6a      	ldr	r3, [pc, #424]	@ (8005154 <checkAktifCalisma+0xe04>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d003      	beq.n	8004fba <checkAktifCalisma+0xc6a>
 8004fb2:	4b68      	ldr	r3, [pc, #416]	@ (8005154 <checkAktifCalisma+0xe04>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d139      	bne.n	800502e <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fbe:	4866      	ldr	r0, [pc, #408]	@ (8005158 <checkAktifCalisma+0xe08>)
 8004fc0:	f005 fafe 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <checkAktifCalisma+0xc82>
 8004fca:	4b6a      	ldr	r3, [pc, #424]	@ (8005174 <checkAktifCalisma+0xe24>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <checkAktifCalisma+0xc9a>
 8004fd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fd6:	4868      	ldr	r0, [pc, #416]	@ (8005178 <checkAktifCalisma+0xe28>)
 8004fd8:	f005 faf2 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d125      	bne.n	800502e <checkAktifCalisma+0xcde>
 8004fe2:	4b64      	ldr	r3, [pc, #400]	@ (8005174 <checkAktifCalisma+0xe24>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d121      	bne.n	800502e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004fea:	2102      	movs	r1, #2
 8004fec:	485a      	ldr	r0, [pc, #360]	@ (8005158 <checkAktifCalisma+0xe08>)
 8004fee:	f005 fae7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11a      	bne.n	800502e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	4857      	ldr	r0, [pc, #348]	@ (8005158 <checkAktifCalisma+0xe08>)
 8004ffc:	f005 fae0 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d113      	bne.n	800502e <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8005006:	4b56      	ldr	r3, [pc, #344]	@ (8005160 <checkAktifCalisma+0xe10>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00f      	beq.n	800502e <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 800500e:	4b5b      	ldr	r3, [pc, #364]	@ (800517c <checkAktifCalisma+0xe2c>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f083 0301 	eor.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 800501c:	4b58      	ldr	r3, [pc, #352]	@ (8005180 <checkAktifCalisma+0xe30>)
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005022:	4b58      	ldr	r3, [pc, #352]	@ (8005184 <checkAktifCalisma+0xe34>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a58      	ldr	r2, [pc, #352]	@ (8005188 <checkAktifCalisma+0xe38>)
 8005028:	6013      	str	r3, [r2, #0]
					bekle();
 800502a:	f7fe fff5 	bl	8004018 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800502e:	4b55      	ldr	r3, [pc, #340]	@ (8005184 <checkAktifCalisma+0xe34>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b55      	ldr	r3, [pc, #340]	@ (8005188 <checkAktifCalisma+0xe38>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	4a54      	ldr	r2, [pc, #336]	@ (800518c <checkAktifCalisma+0xe3c>)
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	4293      	cmp	r3, r2
 800503e:	d20d      	bcs.n	800505c <checkAktifCalisma+0xd0c>
 8005040:	2102      	movs	r1, #2
 8005042:	4845      	ldr	r0, [pc, #276]	@ (8005158 <checkAktifCalisma+0xe08>)
 8005044:	f005 fabc 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <checkAktifCalisma+0xd0c>
 800504e:	4b44      	ldr	r3, [pc, #272]	@ (8005160 <checkAktifCalisma+0xe10>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f083 0301 	eor.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 800505c:	4b48      	ldr	r3, [pc, #288]	@ (8005180 <checkAktifCalisma+0xe30>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005062:	4b43      	ldr	r3, [pc, #268]	@ (8005170 <checkAktifCalisma+0xe20>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d135      	bne.n	80050d6 <checkAktifCalisma+0xd86>
 800506a:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <checkAktifCalisma+0xe04>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d003      	beq.n	800507a <checkAktifCalisma+0xd2a>
 8005072:	4b38      	ldr	r3, [pc, #224]	@ (8005154 <checkAktifCalisma+0xe04>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d12d      	bne.n	80050d6 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800507a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800507e:	4836      	ldr	r0, [pc, #216]	@ (8005158 <checkAktifCalisma+0xe08>)
 8005080:	f005 fa9e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <checkAktifCalisma+0xd42>
 800508a:	4b3a      	ldr	r3, [pc, #232]	@ (8005174 <checkAktifCalisma+0xe24>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <checkAktifCalisma+0xd5a>
 8005092:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005096:	4838      	ldr	r0, [pc, #224]	@ (8005178 <checkAktifCalisma+0xe28>)
 8005098:	f005 fa92 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d119      	bne.n	80050d6 <checkAktifCalisma+0xd86>
 80050a2:	4b34      	ldr	r3, [pc, #208]	@ (8005174 <checkAktifCalisma+0xe24>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d115      	bne.n	80050d6 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050aa:	2102      	movs	r1, #2
 80050ac:	482a      	ldr	r0, [pc, #168]	@ (8005158 <checkAktifCalisma+0xe08>)
 80050ae:	f005 fa87 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10e      	bne.n	80050d6 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80050b8:	2104      	movs	r1, #4
 80050ba:	4827      	ldr	r0, [pc, #156]	@ (8005158 <checkAktifCalisma+0xe08>)
 80050bc:	f005 fa80 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80050c6:	4b26      	ldr	r3, [pc, #152]	@ (8005160 <checkAktifCalisma+0xe10>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80050ce:	4b30      	ldr	r3, [pc, #192]	@ (8005190 <checkAktifCalisma+0xe40>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e002      	b.n	80050dc <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80050d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005190 <checkAktifCalisma+0xe40>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050dc:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <checkAktifCalisma+0xe20>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d11d      	bne.n	8005120 <checkAktifCalisma+0xdd0>
 80050e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <checkAktifCalisma+0xe04>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d003      	beq.n	80050f4 <checkAktifCalisma+0xda4>
 80050ec:	4b19      	ldr	r3, [pc, #100]	@ (8005154 <checkAktifCalisma+0xe04>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d115      	bne.n	8005120 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050f4:	2102      	movs	r1, #2
 80050f6:	4818      	ldr	r0, [pc, #96]	@ (8005158 <checkAktifCalisma+0xe08>)
 80050f8:	f005 fa62 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10e      	bne.n	8005120 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005102:	2104      	movs	r1, #4
 8005104:	4814      	ldr	r0, [pc, #80]	@ (8005158 <checkAktifCalisma+0xe08>)
 8005106:	f005 fa5b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8005110:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <checkAktifCalisma+0xe10>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005118:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <checkAktifCalisma+0xe44>)
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e002      	b.n	8005126 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005120:	4b1c      	ldr	r3, [pc, #112]	@ (8005194 <checkAktifCalisma+0xe44>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005126:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <checkAktifCalisma+0xe40>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <checkAktifCalisma+0xdee>
 800512e:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <checkAktifCalisma+0xe44>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <checkAktifCalisma+0xdee>
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <checkAktifCalisma+0xe30>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02c      	beq.n	8005198 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800513e:	2201      	movs	r2, #1
 8005140:	2140      	movs	r1, #64	@ 0x40
 8005142:	480a      	ldr	r0, [pc, #40]	@ (800516c <checkAktifCalisma+0xe1c>)
 8005144:	f005 fa53 	bl	800a5ee <HAL_GPIO_WritePin>
 8005148:	e02b      	b.n	80051a2 <checkAktifCalisma+0xe52>
 800514a:	bf00      	nop
 800514c:	20001100 	.word	0x20001100
 8005150:	200010c5 	.word	0x200010c5
 8005154:	200010c4 	.word	0x200010c4
 8005158:	40011000 	.word	0x40011000
 800515c:	200010c2 	.word	0x200010c2
 8005160:	200010fe 	.word	0x200010fe
 8005164:	20001101 	.word	0x20001101
 8005168:	200010ff 	.word	0x200010ff
 800516c:	40010800 	.word	0x40010800
 8005170:	200010c6 	.word	0x200010c6
 8005174:	200010c8 	.word	0x200010c8
 8005178:	40010c00 	.word	0x40010c00
 800517c:	200010ec 	.word	0x200010ec
 8005180:	20001102 	.word	0x20001102
 8005184:	20001094 	.word	0x20001094
 8005188:	20001098 	.word	0x20001098
 800518c:	200010d6 	.word	0x200010d6
 8005190:	20001103 	.word	0x20001103
 8005194:	20001104 	.word	0x20001104
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005198:	2200      	movs	r2, #0
 800519a:	2140      	movs	r1, #64	@ 0x40
 800519c:	4889      	ldr	r0, [pc, #548]	@ (80053c4 <checkAktifCalisma+0x1074>)
 800519e:	f005 fa26 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80051a2:	4b89      	ldr	r3, [pc, #548]	@ (80053c8 <checkAktifCalisma+0x1078>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <checkAktifCalisma+0xe62>
 80051aa:	4b87      	ldr	r3, [pc, #540]	@ (80053c8 <checkAktifCalisma+0x1078>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d115      	bne.n	80051de <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80051b2:	2104      	movs	r1, #4
 80051b4:	4885      	ldr	r0, [pc, #532]	@ (80053cc <checkAktifCalisma+0x107c>)
 80051b6:	f005 fa03 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d003      	beq.n	80051c8 <checkAktifCalisma+0xe78>
 80051c0:	4b83      	ldr	r3, [pc, #524]	@ (80053d0 <checkAktifCalisma+0x1080>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80051c8:	2102      	movs	r1, #2
 80051ca:	4880      	ldr	r0, [pc, #512]	@ (80053cc <checkAktifCalisma+0x107c>)
 80051cc:	f005 f9f8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80051d6:	4b7f      	ldr	r3, [pc, #508]	@ (80053d4 <checkAktifCalisma+0x1084>)
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80051de:	4b7d      	ldr	r3, [pc, #500]	@ (80053d4 <checkAktifCalisma+0x1084>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80051e4:	4b78      	ldr	r3, [pc, #480]	@ (80053c8 <checkAktifCalisma+0x1078>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d003      	beq.n	80051f4 <checkAktifCalisma+0xea4>
 80051ec:	4b76      	ldr	r3, [pc, #472]	@ (80053c8 <checkAktifCalisma+0x1078>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d111      	bne.n	8005218 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80051f4:	2102      	movs	r1, #2
 80051f6:	4875      	ldr	r0, [pc, #468]	@ (80053cc <checkAktifCalisma+0x107c>)
 80051f8:	f005 f9e2 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10a      	bne.n	8005218 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005202:	2104      	movs	r1, #4
 8005204:	4871      	ldr	r0, [pc, #452]	@ (80053cc <checkAktifCalisma+0x107c>)
 8005206:	f005 f9db 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005210:	4b71      	ldr	r3, [pc, #452]	@ (80053d8 <checkAktifCalisma+0x1088>)
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e002      	b.n	800521e <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005218:	4b6f      	ldr	r3, [pc, #444]	@ (80053d8 <checkAktifCalisma+0x1088>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800521e:	4b6d      	ldr	r3, [pc, #436]	@ (80053d4 <checkAktifCalisma+0x1084>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00f      	beq.n	8005246 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8005226:	4b6d      	ldr	r3, [pc, #436]	@ (80053dc <checkAktifCalisma+0x108c>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10b      	bne.n	8005246 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800522e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005232:	486b      	ldr	r0, [pc, #428]	@ (80053e0 <checkAktifCalisma+0x1090>)
 8005234:	f005 f9c4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800523e:	4b69      	ldr	r3, [pc, #420]	@ (80053e4 <checkAktifCalisma+0x1094>)
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	e002      	b.n	800524c <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005246:	4b67      	ldr	r3, [pc, #412]	@ (80053e4 <checkAktifCalisma+0x1094>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 800524c:	4b62      	ldr	r3, [pc, #392]	@ (80053d8 <checkAktifCalisma+0x1088>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00f      	beq.n	8005274 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005254:	4b61      	ldr	r3, [pc, #388]	@ (80053dc <checkAktifCalisma+0x108c>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d10b      	bne.n	8005274 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800525c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005260:	485f      	ldr	r0, [pc, #380]	@ (80053e0 <checkAktifCalisma+0x1090>)
 8005262:	f005 f9ad 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 800526c:	4b5e      	ldr	r3, [pc, #376]	@ (80053e8 <checkAktifCalisma+0x1098>)
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e002      	b.n	800527a <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8005274:	4b5c      	ldr	r3, [pc, #368]	@ (80053e8 <checkAktifCalisma+0x1098>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800527a:	4b5c      	ldr	r3, [pc, #368]	@ (80053ec <checkAktifCalisma+0x109c>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d11b      	bne.n	80052ba <checkAktifCalisma+0xf6a>
 8005282:	4b5b      	ldr	r3, [pc, #364]	@ (80053f0 <checkAktifCalisma+0x10a0>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d003      	beq.n	8005292 <checkAktifCalisma+0xf42>
 800528a:	4b59      	ldr	r3, [pc, #356]	@ (80053f0 <checkAktifCalisma+0x10a0>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d113      	bne.n	80052ba <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 8005292:	4b50      	ldr	r3, [pc, #320]	@ (80053d4 <checkAktifCalisma+0x1084>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <checkAktifCalisma+0xf52>
 800529a:	4b4f      	ldr	r3, [pc, #316]	@ (80053d8 <checkAktifCalisma+0x1088>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <checkAktifCalisma+0xf6a>
 80052a2:	4b54      	ldr	r3, [pc, #336]	@ (80053f4 <checkAktifCalisma+0x10a4>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <checkAktifCalisma+0xf62>
 80052aa:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <checkAktifCalisma+0x10a8>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 80052b2:	4b52      	ldr	r3, [pc, #328]	@ (80053fc <checkAktifCalisma+0x10ac>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e002      	b.n	80052c0 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 80052ba:	4b50      	ldr	r3, [pc, #320]	@ (80053fc <checkAktifCalisma+0x10ac>)
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80052c0:	4b4a      	ldr	r3, [pc, #296]	@ (80053ec <checkAktifCalisma+0x109c>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d148      	bne.n	800535a <checkAktifCalisma+0x100a>
 80052c8:	4b49      	ldr	r3, [pc, #292]	@ (80053f0 <checkAktifCalisma+0x10a0>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d003      	beq.n	80052d8 <checkAktifCalisma+0xf88>
 80052d0:	4b47      	ldr	r3, [pc, #284]	@ (80053f0 <checkAktifCalisma+0x10a0>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d140      	bne.n	800535a <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80052d8:	4b3e      	ldr	r3, [pc, #248]	@ (80053d4 <checkAktifCalisma+0x1084>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <checkAktifCalisma+0xf98>
 80052e0:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <checkAktifCalisma+0x1088>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d038      	beq.n	800535a <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80052e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052ec:	4837      	ldr	r0, [pc, #220]	@ (80053cc <checkAktifCalisma+0x107c>)
 80052ee:	f005 f967 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01c      	beq.n	8005332 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80052f8:	2180      	movs	r1, #128	@ 0x80
 80052fa:	4834      	ldr	r0, [pc, #208]	@ (80053cc <checkAktifCalisma+0x107c>)
 80052fc:	f005 f960 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005306:	2104      	movs	r1, #4
 8005308:	4830      	ldr	r0, [pc, #192]	@ (80053cc <checkAktifCalisma+0x107c>)
 800530a:	f005 f959 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800530e:	4603      	mov	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d00e      	beq.n	8005332 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005314:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005318:	482c      	ldr	r0, [pc, #176]	@ (80053cc <checkAktifCalisma+0x107c>)
 800531a:	f005 f951 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005324:	2102      	movs	r1, #2
 8005326:	4829      	ldr	r0, [pc, #164]	@ (80053cc <checkAktifCalisma+0x107c>)
 8005328:	f005 f94a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d103      	bne.n	800533a <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005332:	4b2a      	ldr	r3, [pc, #168]	@ (80053dc <checkAktifCalisma+0x108c>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <checkAktifCalisma+0xffa>
 800533a:	4b2a      	ldr	r3, [pc, #168]	@ (80053e4 <checkAktifCalisma+0x1094>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <checkAktifCalisma+0xffa>
 8005342:	4b29      	ldr	r3, [pc, #164]	@ (80053e8 <checkAktifCalisma+0x1098>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 800534a:	4b2d      	ldr	r3, [pc, #180]	@ (8005400 <checkAktifCalisma+0x10b0>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 8005352:	4b2c      	ldr	r3, [pc, #176]	@ (8005404 <checkAktifCalisma+0x10b4>)
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e002      	b.n	8005360 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 800535a:	4b2a      	ldr	r3, [pc, #168]	@ (8005404 <checkAktifCalisma+0x10b4>)
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005360:	4b22      	ldr	r3, [pc, #136]	@ (80053ec <checkAktifCalisma+0x109c>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d117      	bne.n	8005398 <checkAktifCalisma+0x1048>
 8005368:	4b21      	ldr	r3, [pc, #132]	@ (80053f0 <checkAktifCalisma+0x10a0>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d003      	beq.n	8005378 <checkAktifCalisma+0x1028>
 8005370:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <checkAktifCalisma+0x10a0>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d10f      	bne.n	8005398 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005378:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <checkAktifCalisma+0x1084>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <checkAktifCalisma+0x1038>
 8005380:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <checkAktifCalisma+0x1088>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <checkAktifCalisma+0x10b0>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <checkAktifCalisma+0x10b8>)
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e002      	b.n	800539e <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <checkAktifCalisma+0x10b8>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800539e:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <checkAktifCalisma+0x10b4>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <checkAktifCalisma+0x1066>
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <checkAktifCalisma+0x10ac>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <checkAktifCalisma+0x1066>
 80053ae:	4b16      	ldr	r3, [pc, #88]	@ (8005408 <checkAktifCalisma+0x10b8>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02a      	beq.n	800540c <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80053b6:	2201      	movs	r2, #1
 80053b8:	2120      	movs	r1, #32
 80053ba:	4802      	ldr	r0, [pc, #8]	@ (80053c4 <checkAktifCalisma+0x1074>)
 80053bc:	f005 f917 	bl	800a5ee <HAL_GPIO_WritePin>
 80053c0:	e029      	b.n	8005416 <checkAktifCalisma+0x10c6>
 80053c2:	bf00      	nop
 80053c4:	40010800 	.word	0x40010800
 80053c8:	200010c9 	.word	0x200010c9
 80053cc:	40011000 	.word	0x40011000
 80053d0:	200010c2 	.word	0x200010c2
 80053d4:	20001108 	.word	0x20001108
 80053d8:	20001109 	.word	0x20001109
 80053dc:	200010c8 	.word	0x200010c8
 80053e0:	40010c00 	.word	0x40010c00
 80053e4:	20001118 	.word	0x20001118
 80053e8:	20001119 	.word	0x20001119
 80053ec:	200010c7 	.word	0x200010c7
 80053f0:	200010c4 	.word	0x200010c4
 80053f4:	200010ff 	.word	0x200010ff
 80053f8:	20001102 	.word	0x20001102
 80053fc:	20001105 	.word	0x20001105
 8005400:	200010fe 	.word	0x200010fe
 8005404:	20001106 	.word	0x20001106
 8005408:	20001107 	.word	0x20001107
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800540c:	2200      	movs	r2, #0
 800540e:	2120      	movs	r1, #32
 8005410:	4887      	ldr	r0, [pc, #540]	@ (8005630 <checkAktifCalisma+0x12e0>)
 8005412:	f005 f8ec 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005416:	4b87      	ldr	r3, [pc, #540]	@ (8005634 <checkAktifCalisma+0x12e4>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00e      	beq.n	800543c <checkAktifCalisma+0x10ec>
 800541e:	2102      	movs	r1, #2
 8005420:	4885      	ldr	r0, [pc, #532]	@ (8005638 <checkAktifCalisma+0x12e8>)
 8005422:	f005 f8cd 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <checkAktifCalisma+0x10ec>
 800542c:	4b83      	ldr	r3, [pc, #524]	@ (800563c <checkAktifCalisma+0x12ec>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <checkAktifCalisma+0x10ec>
 8005434:	4b82      	ldr	r3, [pc, #520]	@ (8005640 <checkAktifCalisma+0x12f0>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d112      	bne.n	8005462 <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800543c:	4b81      	ldr	r3, [pc, #516]	@ (8005644 <checkAktifCalisma+0x12f4>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d032      	beq.n	80054aa <checkAktifCalisma+0x115a>
 8005444:	2104      	movs	r1, #4
 8005446:	487c      	ldr	r0, [pc, #496]	@ (8005638 <checkAktifCalisma+0x12e8>)
 8005448:	f005 f8ba 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d12b      	bne.n	80054aa <checkAktifCalisma+0x115a>
 8005452:	4b7a      	ldr	r3, [pc, #488]	@ (800563c <checkAktifCalisma+0x12ec>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d027      	beq.n	80054aa <checkAktifCalisma+0x115a>
 800545a:	4b79      	ldr	r3, [pc, #484]	@ (8005640 <checkAktifCalisma+0x12f0>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d023      	beq.n	80054aa <checkAktifCalisma+0x115a>



					calismaSayisi++;
 8005462:	4b79      	ldr	r3, [pc, #484]	@ (8005648 <checkAktifCalisma+0x12f8>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	3301      	adds	r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4b77      	ldr	r3, [pc, #476]	@ (8005648 <checkAktifCalisma+0x12f8>)
 800546c:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800546e:	4b76      	ldr	r3, [pc, #472]	@ (8005648 <checkAktifCalisma+0x12f8>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2bff      	cmp	r3, #255	@ 0xff
 8005474:	d108      	bne.n	8005488 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 8005476:	4b74      	ldr	r3, [pc, #464]	@ (8005648 <checkAktifCalisma+0x12f8>)
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 800547c:	4b73      	ldr	r3, [pc, #460]	@ (800564c <checkAktifCalisma+0x12fc>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b71      	ldr	r3, [pc, #452]	@ (800564c <checkAktifCalisma+0x12fc>)
 8005486:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005488:	4b6f      	ldr	r3, [pc, #444]	@ (8005648 <checkAktifCalisma+0x12f8>)
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	4b70      	ldr	r3, [pc, #448]	@ (8005650 <checkAktifCalisma+0x1300>)
 800548e:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005490:	4b6e      	ldr	r3, [pc, #440]	@ (800564c <checkAktifCalisma+0x12fc>)
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	4b6e      	ldr	r3, [pc, #440]	@ (8005650 <checkAktifCalisma+0x1300>)
 8005496:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005498:	4b6e      	ldr	r3, [pc, #440]	@ (8005654 <checkAktifCalisma+0x1304>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800549e:	4b65      	ldr	r3, [pc, #404]	@ (8005634 <checkAktifCalisma+0x12e4>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80054a4:	4b67      	ldr	r3, [pc, #412]	@ (8005644 <checkAktifCalisma+0x12f4>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80054aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054ae:	486a      	ldr	r0, [pc, #424]	@ (8005658 <checkAktifCalisma+0x1308>)
 80054b0:	f005 f886 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80054ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80054be:	4866      	ldr	r0, [pc, #408]	@ (8005658 <checkAktifCalisma+0x1308>)
 80054c0:	f005 f87e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80054ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054ce:	4862      	ldr	r0, [pc, #392]	@ (8005658 <checkAktifCalisma+0x1308>)
 80054d0:	f005 f876 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80054da:	2140      	movs	r1, #64	@ 0x40
 80054dc:	4856      	ldr	r0, [pc, #344]	@ (8005638 <checkAktifCalisma+0x12e8>)
 80054de:	f005 f86f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <checkAktifCalisma+0x11a0>

					startBasili=1;
 80054e8:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <checkAktifCalisma+0x130c>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e002      	b.n	80054f6 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80054f0:	4b5a      	ldr	r3, [pc, #360]	@ (800565c <checkAktifCalisma+0x130c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80054f6:	4b59      	ldr	r3, [pc, #356]	@ (800565c <checkAktifCalisma+0x130c>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d014      	beq.n	8005528 <checkAktifCalisma+0x11d8>
 80054fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005502:	4855      	ldr	r0, [pc, #340]	@ (8005658 <checkAktifCalisma+0x1308>)
 8005504:	f005 f85c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10c      	bne.n	8005528 <checkAktifCalisma+0x11d8>

					hataVar=1;
 800550e:	4b54      	ldr	r3, [pc, #336]	@ (8005660 <checkAktifCalisma+0x1310>)
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005514:	2001      	movs	r0, #1
 8005516:	f7fb fd13 	bl	8000f40 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800551a:	2001      	movs	r0, #1
 800551c:	f7fb fcb8 	bl	8000e90 <hata2EEPROM>
					acilstophatasi=1;
 8005520:	4b50      	ldr	r3, [pc, #320]	@ (8005664 <checkAktifCalisma+0x1314>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e018      	b.n	800555a <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005528:	4b4e      	ldr	r3, [pc, #312]	@ (8005664 <checkAktifCalisma+0x1314>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d014      	beq.n	800555a <checkAktifCalisma+0x120a>
 8005530:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005534:	4848      	ldr	r0, [pc, #288]	@ (8005658 <checkAktifCalisma+0x1308>)
 8005536:	f005 f843 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10c      	bne.n	800555a <checkAktifCalisma+0x120a>
 8005540:	4b46      	ldr	r3, [pc, #280]	@ (800565c <checkAktifCalisma+0x130c>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800554e:	4b45      	ldr	r3, [pc, #276]	@ (8005664 <checkAktifCalisma+0x1314>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005554:	2001      	movs	r0, #1
 8005556:	f7fe fcf1 	bl	8003f3c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800555a:	4b43      	ldr	r3, [pc, #268]	@ (8005668 <checkAktifCalisma+0x1318>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d023      	beq.n	80055b0 <checkAktifCalisma+0x1260>
 8005568:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800556c:	483a      	ldr	r0, [pc, #232]	@ (8005658 <checkAktifCalisma+0x1308>)
 800556e:	f005 f827 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <checkAktifCalisma+0x1230>
 8005578:	4b3c      	ldr	r3, [pc, #240]	@ (800566c <checkAktifCalisma+0x131c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <checkAktifCalisma+0x1260>
 8005580:	4b3b      	ldr	r3, [pc, #236]	@ (8005670 <checkAktifCalisma+0x1320>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d113      	bne.n	80055b0 <checkAktifCalisma+0x1260>
 8005588:	4b3a      	ldr	r3, [pc, #232]	@ (8005674 <checkAktifCalisma+0x1324>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f083 0301 	eor.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <checkAktifCalisma+0x1260>
					hataVar=1;
 8005596:	4b32      	ldr	r3, [pc, #200]	@ (8005660 <checkAktifCalisma+0x1310>)
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 800559c:	2002      	movs	r0, #2
 800559e:	f7fb fccf 	bl	8000f40 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80055a2:	2002      	movs	r0, #2
 80055a4:	f7fb fc74 	bl	8000e90 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80055a8:	4b32      	ldr	r3, [pc, #200]	@ (8005674 <checkAktifCalisma+0x1324>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e017      	b.n	80055e0 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80055b0:	4b30      	ldr	r3, [pc, #192]	@ (8005674 <checkAktifCalisma+0x1324>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d013      	beq.n	80055e0 <checkAktifCalisma+0x1290>
 80055b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005668 <checkAktifCalisma+0x1318>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <checkAktifCalisma+0x1290>
 80055c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005678 <checkAktifCalisma+0x1328>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f083 0301 	eor.w	r3, r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 80055ce:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <checkAktifCalisma+0x1324>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <checkAktifCalisma+0x131c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80055da:	2002      	movs	r0, #2
 80055dc:	f7fe fcae 	bl	8003f3c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80055e0:	4b26      	ldr	r3, [pc, #152]	@ (800567c <checkAktifCalisma+0x132c>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d151      	bne.n	800568c <checkAktifCalisma+0x133c>
 80055e8:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <checkAktifCalisma+0x1330>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d14d      	bne.n	800568c <checkAktifCalisma+0x133c>
 80055f0:	4b24      	ldr	r3, [pc, #144]	@ (8005684 <checkAktifCalisma+0x1334>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d049      	beq.n	800568c <checkAktifCalisma+0x133c>
 80055f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055fc:	480e      	ldr	r0, [pc, #56]	@ (8005638 <checkAktifCalisma+0x12e8>)
 80055fe:	f004 ffdf 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d141      	bne.n	800568c <checkAktifCalisma+0x133c>
 8005608:	4b1f      	ldr	r3, [pc, #124]	@ (8005688 <checkAktifCalisma+0x1338>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f083 0301 	eor.w	r3, r3, #1
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d03a      	beq.n	800568c <checkAktifCalisma+0x133c>
					hataVar=1;
 8005616:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <checkAktifCalisma+0x1310>)
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800561c:	2003      	movs	r0, #3
 800561e:	f7fb fc8f 	bl	8000f40 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8005622:	2003      	movs	r0, #3
 8005624:	f7fb fc34 	bl	8000e90 <hata2EEPROM>
					basinchatasi=1;
 8005628:	4b17      	ldr	r3, [pc, #92]	@ (8005688 <checkAktifCalisma+0x1338>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e043      	b.n	80056b8 <checkAktifCalisma+0x1368>
 8005630:	40010800 	.word	0x40010800
 8005634:	200010fc 	.word	0x200010fc
 8005638:	40011000 	.word	0x40011000
 800563c:	200010c2 	.word	0x200010c2
 8005640:	200010fe 	.word	0x200010fe
 8005644:	200010fd 	.word	0x200010fd
 8005648:	200010b4 	.word	0x200010b4
 800564c:	200010b6 	.word	0x200010b6
 8005650:	20000fec 	.word	0x20000fec
 8005654:	200010e9 	.word	0x200010e9
 8005658:	40010c00 	.word	0x40010c00
 800565c:	2000110a 	.word	0x2000110a
 8005660:	20001111 	.word	0x20001111
 8005664:	2000110c 	.word	0x2000110c
 8005668:	20001113 	.word	0x20001113
 800566c:	2000111d 	.word	0x2000111d
 8005670:	200010c0 	.word	0x200010c0
 8005674:	2000110d 	.word	0x2000110d
 8005678:	200010f5 	.word	0x200010f5
 800567c:	200010bf 	.word	0x200010bf
 8005680:	200010c3 	.word	0x200010c3
 8005684:	20001110 	.word	0x20001110
 8005688:	2000111a 	.word	0x2000111a
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800568c:	4b85      	ldr	r3, [pc, #532]	@ (80058a4 <checkAktifCalisma+0x1554>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d011      	beq.n	80056b8 <checkAktifCalisma+0x1368>
 8005694:	4b84      	ldr	r3, [pc, #528]	@ (80058a8 <checkAktifCalisma+0x1558>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10d      	bne.n	80056b8 <checkAktifCalisma+0x1368>
 800569c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056a0:	4882      	ldr	r0, [pc, #520]	@ (80058ac <checkAktifCalisma+0x155c>)
 80056a2:	f004 ff8d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d105      	bne.n	80056b8 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 80056ac:	4b7d      	ldr	r3, [pc, #500]	@ (80058a4 <checkAktifCalisma+0x1554>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80056b2:	2003      	movs	r0, #3
 80056b4:	f7fe fc42 	bl	8003f3c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80056b8:	4b7d      	ldr	r3, [pc, #500]	@ (80058b0 <checkAktifCalisma+0x1560>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <checkAktifCalisma+0x1378>
 80056c0:	4b7c      	ldr	r3, [pc, #496]	@ (80058b4 <checkAktifCalisma+0x1564>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d023      	beq.n	8005710 <checkAktifCalisma+0x13c0>
 80056c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056cc:	487a      	ldr	r0, [pc, #488]	@ (80058b8 <checkAktifCalisma+0x1568>)
 80056ce:	f004 ff77 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d11b      	bne.n	8005710 <checkAktifCalisma+0x13c0>
 80056d8:	4b78      	ldr	r3, [pc, #480]	@ (80058bc <checkAktifCalisma+0x156c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d003      	beq.n	80056e8 <checkAktifCalisma+0x1398>
 80056e0:	4b76      	ldr	r3, [pc, #472]	@ (80058bc <checkAktifCalisma+0x156c>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d113      	bne.n	8005710 <checkAktifCalisma+0x13c0>
 80056e8:	4b75      	ldr	r3, [pc, #468]	@ (80058c0 <checkAktifCalisma+0x1570>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f083 0301 	eor.w	r3, r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00c      	beq.n	8005710 <checkAktifCalisma+0x13c0>
					hataVar=1;
 80056f6:	4b73      	ldr	r3, [pc, #460]	@ (80058c4 <checkAktifCalisma+0x1574>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80056fc:	2004      	movs	r0, #4
 80056fe:	f7fb fc1f 	bl	8000f40 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005702:	2004      	movs	r0, #4
 8005704:	f7fb fbc4 	bl	8000e90 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005708:	4b6d      	ldr	r3, [pc, #436]	@ (80058c0 <checkAktifCalisma+0x1570>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e01f      	b.n	8005750 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005710:	4b6b      	ldr	r3, [pc, #428]	@ (80058c0 <checkAktifCalisma+0x1570>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01b      	beq.n	8005750 <checkAktifCalisma+0x1400>
 8005718:	4b6b      	ldr	r3, [pc, #428]	@ (80058c8 <checkAktifCalisma+0x1578>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <checkAktifCalisma+0x1400>
 8005720:	4b63      	ldr	r3, [pc, #396]	@ (80058b0 <checkAktifCalisma+0x1560>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f083 0301 	eor.w	r3, r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d010      	beq.n	8005750 <checkAktifCalisma+0x1400>
 800572e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005732:	4861      	ldr	r0, [pc, #388]	@ (80058b8 <checkAktifCalisma+0x1568>)
 8005734:	f004 ff44 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d108      	bne.n	8005750 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 800573e:	4b60      	ldr	r3, [pc, #384]	@ (80058c0 <checkAktifCalisma+0x1570>)
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005744:	4b5b      	ldr	r3, [pc, #364]	@ (80058b4 <checkAktifCalisma+0x1564>)
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800574a:	2004      	movs	r0, #4
 800574c:	f7fe fbf6 	bl	8003f3c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005750:	4b57      	ldr	r3, [pc, #348]	@ (80058b0 <checkAktifCalisma+0x1560>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <checkAktifCalisma+0x1410>
 8005758:	4b5c      	ldr	r3, [pc, #368]	@ (80058cc <checkAktifCalisma+0x157c>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d023      	beq.n	80057a8 <checkAktifCalisma+0x1458>
 8005760:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005764:	4854      	ldr	r0, [pc, #336]	@ (80058b8 <checkAktifCalisma+0x1568>)
 8005766:	f004 ff2b 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11b      	bne.n	80057a8 <checkAktifCalisma+0x1458>
 8005770:	4b52      	ldr	r3, [pc, #328]	@ (80058bc <checkAktifCalisma+0x156c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d003      	beq.n	8005780 <checkAktifCalisma+0x1430>
 8005778:	4b50      	ldr	r3, [pc, #320]	@ (80058bc <checkAktifCalisma+0x156c>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d113      	bne.n	80057a8 <checkAktifCalisma+0x1458>
 8005780:	4b53      	ldr	r3, [pc, #332]	@ (80058d0 <checkAktifCalisma+0x1580>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f083 0301 	eor.w	r3, r3, #1
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <checkAktifCalisma+0x1458>

					hataVar=1;
 800578e:	4b4d      	ldr	r3, [pc, #308]	@ (80058c4 <checkAktifCalisma+0x1574>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005794:	2005      	movs	r0, #5
 8005796:	f7fb fbd3 	bl	8000f40 <hataKoduLcdGoster>
					hata2EEPROM(5);
 800579a:	2005      	movs	r0, #5
 800579c:	f7fb fb78 	bl	8000e90 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80057a0:	4b4b      	ldr	r3, [pc, #300]	@ (80058d0 <checkAktifCalisma+0x1580>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e023      	b.n	80057f0 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80057a8:	4b49      	ldr	r3, [pc, #292]	@ (80058d0 <checkAktifCalisma+0x1580>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01f      	beq.n	80057f0 <checkAktifCalisma+0x14a0>
 80057b0:	4b45      	ldr	r3, [pc, #276]	@ (80058c8 <checkAktifCalisma+0x1578>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <checkAktifCalisma+0x14a0>
 80057b8:	4b3d      	ldr	r3, [pc, #244]	@ (80058b0 <checkAktifCalisma+0x1560>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d014      	beq.n	80057f0 <checkAktifCalisma+0x14a0>
 80057c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057ca:	483b      	ldr	r0, [pc, #236]	@ (80058b8 <checkAktifCalisma+0x1568>)
 80057cc:	f004 fef8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10c      	bne.n	80057f0 <checkAktifCalisma+0x14a0>
 80057d6:	4b3c      	ldr	r3, [pc, #240]	@ (80058c8 <checkAktifCalisma+0x1578>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 80057de:	4b3c      	ldr	r3, [pc, #240]	@ (80058d0 <checkAktifCalisma+0x1580>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80057e4:	4b39      	ldr	r3, [pc, #228]	@ (80058cc <checkAktifCalisma+0x157c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80057ea:	2005      	movs	r0, #5
 80057ec:	f7fe fba6 	bl	8003f3c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80057f0:	4b38      	ldr	r3, [pc, #224]	@ (80058d4 <checkAktifCalisma+0x1584>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d107      	bne.n	8005808 <checkAktifCalisma+0x14b8>
 80057f8:	4b37      	ldr	r3, [pc, #220]	@ (80058d8 <checkAktifCalisma+0x1588>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <checkAktifCalisma+0x14b8>
 8005800:	4b36      	ldr	r3, [pc, #216]	@ (80058dc <checkAktifCalisma+0x158c>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <checkAktifCalisma+0x14f0>
 8005808:	4b35      	ldr	r3, [pc, #212]	@ (80058e0 <checkAktifCalisma+0x1590>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d014      	beq.n	8005840 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005816:	4b33      	ldr	r3, [pc, #204]	@ (80058e4 <checkAktifCalisma+0x1594>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <checkAktifCalisma+0x1598>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	4a32      	ldr	r2, [pc, #200]	@ (80058ec <checkAktifCalisma+0x159c>)
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	4293      	cmp	r3, r2
 8005826:	d30b      	bcc.n	8005840 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005828:	4b26      	ldr	r3, [pc, #152]	@ (80058c4 <checkAktifCalisma+0x1574>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800582e:	2006      	movs	r0, #6
 8005830:	f7fb fb86 	bl	8000f40 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005834:	2006      	movs	r0, #6
 8005836:	f7fb fb2b 	bl	8000e90 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800583a:	4b29      	ldr	r3, [pc, #164]	@ (80058e0 <checkAktifCalisma+0x1590>)
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005840:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <checkAktifCalisma+0x1590>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <checkAktifCalisma+0x1520>
 8005848:	2108      	movs	r1, #8
 800584a:	481b      	ldr	r0, [pc, #108]	@ (80058b8 <checkAktifCalisma+0x1568>)
 800584c:	f004 feb8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <checkAktifCalisma+0x1520>
 8005856:	4b16      	ldr	r3, [pc, #88]	@ (80058b0 <checkAktifCalisma+0x1560>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f083 0301 	eor.w	r3, r3, #1
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005864:	4b1e      	ldr	r3, [pc, #120]	@ (80058e0 <checkAktifCalisma+0x1590>)
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800586a:	2006      	movs	r0, #6
 800586c:	f7fe fb66 	bl	8003f3c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005870:	4b1f      	ldr	r3, [pc, #124]	@ (80058f0 <checkAktifCalisma+0x15a0>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <checkAktifCalisma+0x1540>
 8005878:	4b17      	ldr	r3, [pc, #92]	@ (80058d8 <checkAktifCalisma+0x1588>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d107      	bne.n	8005890 <checkAktifCalisma+0x1540>
 8005880:	4b1c      	ldr	r3, [pc, #112]	@ (80058f4 <checkAktifCalisma+0x15a4>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <checkAktifCalisma+0x1540>
 8005888:	4b14      	ldr	r3, [pc, #80]	@ (80058dc <checkAktifCalisma+0x158c>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d035      	beq.n	80058fc <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005890:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <checkAktifCalisma+0x15a8>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005896:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <checkAktifCalisma+0x1564>)
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <checkAktifCalisma+0x157c>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	e032      	b.n	800590a <checkAktifCalisma+0x15ba>
 80058a4:	2000111a 	.word	0x2000111a
 80058a8:	200010bf 	.word	0x200010bf
 80058ac:	40010c00 	.word	0x40010c00
 80058b0:	2000110a 	.word	0x2000110a
 80058b4:	2000111e 	.word	0x2000111e
 80058b8:	40010800 	.word	0x40010800
 80058bc:	200010c4 	.word	0x200010c4
 80058c0:	2000111b 	.word	0x2000111b
 80058c4:	20001111 	.word	0x20001111
 80058c8:	200010fe 	.word	0x200010fe
 80058cc:	2000111f 	.word	0x2000111f
 80058d0:	2000111c 	.word	0x2000111c
 80058d4:	20001110 	.word	0x20001110
 80058d8:	200010f5 	.word	0x200010f5
 80058dc:	200010f4 	.word	0x200010f4
 80058e0:	2000110b 	.word	0x2000110b
 80058e4:	20001094 	.word	0x20001094
 80058e8:	200010a8 	.word	0x200010a8
 80058ec:	200010d4 	.word	0x200010d4
 80058f0:	200010f2 	.word	0x200010f2
 80058f4:	200010f3 	.word	0x200010f3
 80058f8:	20001112 	.word	0x20001112
				} else {
					makineCalisiyor=1;
 80058fc:	4b3a      	ldr	r3, [pc, #232]	@ (80059e8 <checkAktifCalisma+0x1698>)
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005902:	4b3a      	ldr	r3, [pc, #232]	@ (80059ec <checkAktifCalisma+0x169c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a3a      	ldr	r2, [pc, #232]	@ (80059f0 <checkAktifCalisma+0x16a0>)
 8005908:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800590a:	4b3a      	ldr	r3, [pc, #232]	@ (80059f4 <checkAktifCalisma+0x16a4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d02f      	beq.n	8005972 <checkAktifCalisma+0x1622>
 8005912:	4b39      	ldr	r3, [pc, #228]	@ (80059f8 <checkAktifCalisma+0x16a8>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f083 0301 	eor.w	r3, r3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d028      	beq.n	8005972 <checkAktifCalisma+0x1622>
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <checkAktifCalisma+0x16ac>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f083 0301 	eor.w	r3, r3, #1
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d021      	beq.n	8005972 <checkAktifCalisma+0x1622>
 800592e:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <checkAktifCalisma+0x16b0>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f083 0301 	eor.w	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01a      	beq.n	8005972 <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800593c:	4b31      	ldr	r3, [pc, #196]	@ (8005a04 <checkAktifCalisma+0x16b4>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f083 0301 	eor.w	r3, r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d013      	beq.n	8005972 <checkAktifCalisma+0x1622>
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <checkAktifCalisma+0x16b8>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f083 0301 	eor.w	r3, r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <checkAktifCalisma+0x1622>
 8005958:	4b2c      	ldr	r3, [pc, #176]	@ (8005a0c <checkAktifCalisma+0x16bc>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <checkAktifCalisma+0x1622>

					hataVar=0;
 8005966:	4b23      	ldr	r3, [pc, #140]	@ (80059f4 <checkAktifCalisma+0x16a4>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 800596c:	2007      	movs	r0, #7
 800596e:	f7fe fae5 	bl	8003f3c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005972:	4b20      	ldr	r3, [pc, #128]	@ (80059f4 <checkAktifCalisma+0x16a4>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d02a      	beq.n	80059d0 <checkAktifCalisma+0x1680>
 800597a:	4b1f      	ldr	r3, [pc, #124]	@ (80059f8 <checkAktifCalisma+0x16a8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f083 0301 	eor.w	r3, r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d023      	beq.n	80059d0 <checkAktifCalisma+0x1680>
 8005988:	4b1c      	ldr	r3, [pc, #112]	@ (80059fc <checkAktifCalisma+0x16ac>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01f      	beq.n	80059d0 <checkAktifCalisma+0x1680>
 8005990:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <checkAktifCalisma+0x16b0>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f083 0301 	eor.w	r3, r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d018      	beq.n	80059d0 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800599e:	4b19      	ldr	r3, [pc, #100]	@ (8005a04 <checkAktifCalisma+0x16b4>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f083 0301 	eor.w	r3, r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d011      	beq.n	80059d0 <checkAktifCalisma+0x1680>
 80059ac:	4b16      	ldr	r3, [pc, #88]	@ (8005a08 <checkAktifCalisma+0x16b8>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f083 0301 	eor.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <checkAktifCalisma+0x1680>
 80059ba:	4b14      	ldr	r3, [pc, #80]	@ (8005a0c <checkAktifCalisma+0x16bc>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f083 0301 	eor.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 80059c8:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <checkAktifCalisma+0x16c0>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80059ce:	e009      	b.n	80059e4 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 80059d0:	4b0a      	ldr	r3, [pc, #40]	@ (80059fc <checkAktifCalisma+0x16ac>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f083 0301 	eor.w	r3, r3, #1
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <checkAktifCalisma+0x16c0>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20001112 	.word	0x20001112
 80059ec:	20001094 	.word	0x20001094
 80059f0:	200010a8 	.word	0x200010a8
 80059f4:	20001111 	.word	0x20001111
 80059f8:	2000110c 	.word	0x2000110c
 80059fc:	2000110d 	.word	0x2000110d
 8005a00:	2000111a 	.word	0x2000111a
 8005a04:	2000111b 	.word	0x2000111b
 8005a08:	2000111c 	.word	0x2000111c
 8005a0c:	2000110b 	.word	0x2000110b
 8005a10:	20001120 	.word	0x20001120

08005a14 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005a18:	4b8b      	ldr	r3, [pc, #556]	@ (8005c48 <checkDemoModCalisma+0x234>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	f040 81c4 	bne.w	8005daa <checkDemoModCalisma+0x396>
 8005a22:	4b8a      	ldr	r3, [pc, #552]	@ (8005c4c <checkDemoModCalisma+0x238>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 81bf 	beq.w	8005daa <checkDemoModCalisma+0x396>
 8005a2c:	4b88      	ldr	r3, [pc, #544]	@ (8005c50 <checkDemoModCalisma+0x23c>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 81ba 	bne.w	8005daa <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a36:	2102      	movs	r1, #2
 8005a38:	4886      	ldr	r0, [pc, #536]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005a3a:	f004 fdc1 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11d      	bne.n	8005a80 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005a44:	4b84      	ldr	r3, [pc, #528]	@ (8005c58 <checkDemoModCalisma+0x244>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f083 0301 	eor.w	r3, r3, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005a52:	4b82      	ldr	r3, [pc, #520]	@ (8005c5c <checkDemoModCalisma+0x248>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f083 0301 	eor.w	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00f      	beq.n	8005a80 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005a60:	4b7f      	ldr	r3, [pc, #508]	@ (8005c60 <checkDemoModCalisma+0x24c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f083 0301 	eor.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2104      	movs	r1, #4
 8005a72:	487c      	ldr	r0, [pc, #496]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005a74:	f004 fdbb 	bl	800a5ee <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005a78:	4b7b      	ldr	r3, [pc, #492]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e00e      	b.n	8005a9e <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a80:	2102      	movs	r1, #2
 8005a82:	4874      	ldr	r0, [pc, #464]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005a84:	f004 fd9c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d107      	bne.n	8005a9e <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2104      	movs	r1, #4
 8005a92:	4874      	ldr	r0, [pc, #464]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005a94:	f004 fdab 	bl	800a5ee <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005a98:	4b73      	ldr	r3, [pc, #460]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005a9e:	4b72      	ldr	r3, [pc, #456]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <checkDemoModCalisma+0xaa>
 8005aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c5c <checkDemoModCalisma+0x248>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <checkDemoModCalisma+0xaa>
 8005aae:	4b6c      	ldr	r3, [pc, #432]	@ (8005c60 <checkDemoModCalisma+0x24c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <checkDemoModCalisma+0xaa>
 8005ab6:	4b68      	ldr	r3, [pc, #416]	@ (8005c58 <checkDemoModCalisma+0x244>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ac4:	4867      	ldr	r0, [pc, #412]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005ac6:	f004 fd92 	bl	800a5ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005aca:	2201      	movs	r2, #1
 8005acc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ad0:	4864      	ldr	r0, [pc, #400]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005ad2:	f004 fd8c 	bl	800a5ee <HAL_GPIO_WritePin>
 8005ad6:	e00b      	b.n	8005af0 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ade:	4861      	ldr	r0, [pc, #388]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005ae0:	f004 fd85 	bl	800a5ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005aea:	485e      	ldr	r0, [pc, #376]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005aec:	f004 fd7f 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005af0:	2102      	movs	r1, #2
 8005af2:	4858      	ldr	r0, [pc, #352]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005af4:	f004 fd64 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10d      	bne.n	8005b1a <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005afe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b02:	4854      	ldr	r0, [pc, #336]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b04:	f004 fd5c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d105      	bne.n	8005b1a <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005b0e:	4b56      	ldr	r3, [pc, #344]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	484d      	ldr	r0, [pc, #308]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b1e:	f004 fd4f 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d125      	bne.n	8005b74 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005b28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b2c:	4849      	ldr	r0, [pc, #292]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b2e:	f004 fd47 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11d      	bne.n	8005b74 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005b38:	4b4b      	ldr	r3, [pc, #300]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f083 0301 	eor.w	r3, r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005b46:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <checkDemoModCalisma+0x244>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f083 0301 	eor.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00f      	beq.n	8005b74 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005b54:	4b42      	ldr	r3, [pc, #264]	@ (8005c60 <checkDemoModCalisma+0x24c>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f083 0301 	eor.w	r3, r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	2120      	movs	r1, #32
 8005b66:	483b      	ldr	r0, [pc, #236]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b68:	f004 fd41 	bl	800a5ee <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c5c <checkDemoModCalisma+0x248>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e007      	b.n	8005b84 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b74:	2200      	movs	r2, #0
 8005b76:	2120      	movs	r1, #32
 8005b78:	4836      	ldr	r0, [pc, #216]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b7a:	f004 fd38 	bl	800a5ee <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005b7e:	4b37      	ldr	r3, [pc, #220]	@ (8005c5c <checkDemoModCalisma+0x248>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b84:	2102      	movs	r1, #2
 8005b86:	4833      	ldr	r0, [pc, #204]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b88:	f004 fd1a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d125      	bne.n	8005bde <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005b92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b96:	482f      	ldr	r0, [pc, #188]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005b98:	f004 fd12 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11d      	bne.n	8005bde <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005ba2:	4b31      	ldr	r3, [pc, #196]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f083 0301 	eor.w	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d016      	beq.n	8005bde <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c5c <checkDemoModCalisma+0x248>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f083 0301 	eor.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005bbe:	4b26      	ldr	r3, [pc, #152]	@ (8005c58 <checkDemoModCalisma+0x244>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f083 0301 	eor.w	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2110      	movs	r1, #16
 8005bd0:	4820      	ldr	r0, [pc, #128]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005bd2:	f004 fd0c 	bl	800a5ee <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005bd6:	4b22      	ldr	r3, [pc, #136]	@ (8005c60 <checkDemoModCalisma+0x24c>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e007      	b.n	8005bee <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005bde:	2200      	movs	r2, #0
 8005be0:	2110      	movs	r1, #16
 8005be2:	481c      	ldr	r0, [pc, #112]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005be4:	f004 fd03 	bl	800a5ee <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005be8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c60 <checkDemoModCalisma+0x24c>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bee:	2104      	movs	r1, #4
 8005bf0:	4818      	ldr	r0, [pc, #96]	@ (8005c54 <checkDemoModCalisma+0x240>)
 8005bf2:	f004 fce5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d139      	bne.n	8005c70 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c68 <checkDemoModCalisma+0x254>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f083 0301 	eor.w	r3, r3, #1
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d032      	beq.n	8005c70 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005c0a:	4b15      	ldr	r3, [pc, #84]	@ (8005c60 <checkDemoModCalisma+0x24c>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f083 0301 	eor.w	r3, r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02b      	beq.n	8005c70 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <checkDemoModCalisma+0x248>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f083 0301 	eor.w	r3, r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d024      	beq.n	8005c70 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005c26:	2201      	movs	r2, #1
 8005c28:	2102      	movs	r1, #2
 8005c2a:	480e      	ldr	r0, [pc, #56]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005c2c:	f004 fcdf 	bl	800a5ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005c30:	2201      	movs	r2, #1
 8005c32:	2101      	movs	r1, #1
 8005c34:	480b      	ldr	r0, [pc, #44]	@ (8005c64 <checkDemoModCalisma+0x250>)
 8005c36:	f004 fcda 	bl	800a5ee <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005c3a:	4b07      	ldr	r3, [pc, #28]	@ (8005c58 <checkDemoModCalisma+0x244>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <checkDemoModCalisma+0x258>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e027      	b.n	8005c98 <checkDemoModCalisma+0x284>
 8005c48:	200010da 	.word	0x200010da
 8005c4c:	2000110e 	.word	0x2000110e
 8005c50:	200010d9 	.word	0x200010d9
 8005c54:	40011000 	.word	0x40011000
 8005c58:	20001115 	.word	0x20001115
 8005c5c:	20001116 	.word	0x20001116
 8005c60:	20001117 	.word	0x20001117
 8005c64:	40010c00 	.word	0x40010c00
 8005c68:	20001114 	.word	0x20001114
 8005c6c:	200010fb 	.word	0x200010fb
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005c70:	2104      	movs	r1, #4
 8005c72:	486d      	ldr	r0, [pc, #436]	@ (8005e28 <checkDemoModCalisma+0x414>)
 8005c74:	f004 fca4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d10c      	bne.n	8005c98 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2102      	movs	r1, #2
 8005c82:	486a      	ldr	r0, [pc, #424]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005c84:	f004 fcb3 	bl	800a5ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4867      	ldr	r0, [pc, #412]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005c8e:	f004 fcae 	bl	800a5ee <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005c92:	4b67      	ldr	r3, [pc, #412]	@ (8005e30 <checkDemoModCalisma+0x41c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005c98:	2104      	movs	r1, #4
 8005c9a:	4863      	ldr	r0, [pc, #396]	@ (8005e28 <checkDemoModCalisma+0x414>)
 8005c9c:	f004 fc90 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10d      	bne.n	8005cc2 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2180      	movs	r1, #128	@ 0x80
 8005caa:	4862      	ldr	r0, [pc, #392]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005cac:	f004 fc9f 	bl	800a5ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	485f      	ldr	r0, [pc, #380]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005cb6:	f004 fc9a 	bl	800a5ee <HAL_GPIO_WritePin>
					timer3 = millis;
 8005cba:	4b5f      	ldr	r3, [pc, #380]	@ (8005e38 <checkDemoModCalisma+0x424>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8005e3c <checkDemoModCalisma+0x428>)
 8005cc0:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e38 <checkDemoModCalisma+0x424>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e3c <checkDemoModCalisma+0x428>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d909      	bls.n	8005ce4 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2180      	movs	r1, #128	@ 0x80
 8005cd4:	4857      	ldr	r0, [pc, #348]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005cd6:	f004 fc8a 	bl	800a5ee <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2120      	movs	r1, #32
 8005cde:	4855      	ldr	r0, [pc, #340]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005ce0:	f004 fc85 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005ce4:	2102      	movs	r1, #2
 8005ce6:	4850      	ldr	r0, [pc, #320]	@ (8005e28 <checkDemoModCalisma+0x414>)
 8005ce8:	f004 fc6a 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d108      	bne.n	8005d04 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	2140      	movs	r1, #64	@ 0x40
 8005cf6:	484f      	ldr	r0, [pc, #316]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005cf8:	f004 fc79 	bl	800a5ee <HAL_GPIO_WritePin>
					timer3 = millis;
 8005cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e38 <checkDemoModCalisma+0x424>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a4e      	ldr	r2, [pc, #312]	@ (8005e3c <checkDemoModCalisma+0x428>)
 8005d02:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005d04:	4b4c      	ldr	r3, [pc, #304]	@ (8005e38 <checkDemoModCalisma+0x424>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b4c      	ldr	r3, [pc, #304]	@ (8005e3c <checkDemoModCalisma+0x428>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d904      	bls.n	8005d1c <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d12:	2200      	movs	r2, #0
 8005d14:	2140      	movs	r1, #64	@ 0x40
 8005d16:	4847      	ldr	r0, [pc, #284]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005d18:	f004 fc69 	bl	800a5ee <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005d1c:	4b48      	ldr	r3, [pc, #288]	@ (8005e40 <checkDemoModCalisma+0x42c>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d024      	beq.n	8005d6e <checkDemoModCalisma+0x35a>
 8005d24:	4b47      	ldr	r3, [pc, #284]	@ (8005e44 <checkDemoModCalisma+0x430>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005d2c:	4b46      	ldr	r3, [pc, #280]	@ (8005e48 <checkDemoModCalisma+0x434>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	4b44      	ldr	r3, [pc, #272]	@ (8005e48 <checkDemoModCalisma+0x434>)
 8005d36:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005d38:	4b44      	ldr	r3, [pc, #272]	@ (8005e4c <checkDemoModCalisma+0x438>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2bff      	cmp	r3, #255	@ 0xff
 8005d3e:	d108      	bne.n	8005d52 <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005d40:	4b42      	ldr	r3, [pc, #264]	@ (8005e4c <checkDemoModCalisma+0x438>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005d46:	4b42      	ldr	r3, [pc, #264]	@ (8005e50 <checkDemoModCalisma+0x43c>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4b40      	ldr	r3, [pc, #256]	@ (8005e50 <checkDemoModCalisma+0x43c>)
 8005d50:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005d52:	4b3d      	ldr	r3, [pc, #244]	@ (8005e48 <checkDemoModCalisma+0x434>)
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	4b3f      	ldr	r3, [pc, #252]	@ (8005e54 <checkDemoModCalisma+0x440>)
 8005d58:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e58 <checkDemoModCalisma+0x444>)
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e54 <checkDemoModCalisma+0x440>)
 8005d60:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005d62:	4b3e      	ldr	r3, [pc, #248]	@ (8005e5c <checkDemoModCalisma+0x448>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005d68:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <checkDemoModCalisma+0x430>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e60 <checkDemoModCalisma+0x44c>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d156      	bne.n	8005e24 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005d76:	4a3b      	ldr	r2, [pc, #236]	@ (8005e64 <checkDemoModCalisma+0x450>)
 8005d78:	2101      	movs	r1, #1
 8005d7a:	2002      	movs	r0, #2
 8005d7c:	f003 f8f6 	bl	8008f6c <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005d80:	4a39      	ldr	r2, [pc, #228]	@ (8005e68 <checkDemoModCalisma+0x454>)
 8005d82:	2101      	movs	r1, #1
 8005d84:	2001      	movs	r0, #1
 8005d86:	f003 f8f1 	bl	8008f6c <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e48 <checkDemoModCalisma+0x434>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	220a      	movs	r2, #10
 8005d90:	4936      	ldr	r1, [pc, #216]	@ (8005e6c <checkDemoModCalisma+0x458>)
 8005d92:	4618      	mov	r0, r3
 8005d94:	f007 fc40 	bl	800d618 <itoa>
					lcd_print(2,11,snum);
 8005d98:	4a34      	ldr	r2, [pc, #208]	@ (8005e6c <checkDemoModCalisma+0x458>)
 8005d9a:	210b      	movs	r1, #11
 8005d9c:	2002      	movs	r0, #2
 8005d9e:	f003 f8e5 	bl	8008f6c <lcd_print>
					mesajYazildi=1;
 8005da2:	4b33      	ldr	r3, [pc, #204]	@ (8005e70 <checkDemoModCalisma+0x45c>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005da8:	e03c      	b.n	8005e24 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005daa:	4b32      	ldr	r3, [pc, #200]	@ (8005e74 <checkDemoModCalisma+0x460>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d003      	beq.n	8005dba <checkDemoModCalisma+0x3a6>
 8005db2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <checkDemoModCalisma+0x44c>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d134      	bne.n	8005e24 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dc0:	481a      	ldr	r0, [pc, #104]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005dc2:	f004 fc14 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005dcc:	4817      	ldr	r0, [pc, #92]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005dce:	f004 fc0e 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	4815      	ldr	r0, [pc, #84]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005dd8:	f004 fc09 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2102      	movs	r1, #2
 8005de0:	4812      	ldr	r0, [pc, #72]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005de2:	f004 fc04 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005de6:	2200      	movs	r2, #0
 8005de8:	2101      	movs	r1, #1
 8005dea:	4810      	ldr	r0, [pc, #64]	@ (8005e2c <checkDemoModCalisma+0x418>)
 8005dec:	f004 fbff 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2120      	movs	r1, #32
 8005df4:	480c      	ldr	r0, [pc, #48]	@ (8005e28 <checkDemoModCalisma+0x414>)
 8005df6:	f004 fbfa 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2110      	movs	r1, #16
 8005dfe:	480a      	ldr	r0, [pc, #40]	@ (8005e28 <checkDemoModCalisma+0x414>)
 8005e00:	f004 fbf5 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005e04:	2200      	movs	r2, #0
 8005e06:	2180      	movs	r1, #128	@ 0x80
 8005e08:	480a      	ldr	r0, [pc, #40]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005e0a:	f004 fbf0 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2140      	movs	r1, #64	@ 0x40
 8005e12:	4808      	ldr	r0, [pc, #32]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005e14:	f004 fbeb 	bl	800a5ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	4805      	ldr	r0, [pc, #20]	@ (8005e34 <checkDemoModCalisma+0x420>)
 8005e1e:	f004 fbe6 	bl	800a5ee <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005e22:	e7ff      	b.n	8005e24 <checkDemoModCalisma+0x410>
 8005e24:	bf00      	nop
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40011000 	.word	0x40011000
 8005e2c:	40010c00 	.word	0x40010c00
 8005e30:	20001115 	.word	0x20001115
 8005e34:	40010800 	.word	0x40010800
 8005e38:	20001094 	.word	0x20001094
 8005e3c:	200010a4 	.word	0x200010a4
 8005e40:	20001114 	.word	0x20001114
 8005e44:	200010fb 	.word	0x200010fb
 8005e48:	200010b5 	.word	0x200010b5
 8005e4c:	200010b4 	.word	0x200010b4
 8005e50:	200010b6 	.word	0x200010b6
 8005e54:	20000fec 	.word	0x20000fec
 8005e58:	200010b7 	.word	0x200010b7
 8005e5c:	200010e9 	.word	0x200010e9
 8005e60:	200010d9 	.word	0x200010d9
 8005e64:	0800e8b4 	.word	0x0800e8b4
 8005e68:	0800e8c0 	.word	0x0800e8c0
 8005e6c:	2000105c 	.word	0x2000105c
 8005e70:	200010f1 	.word	0x200010f1
 8005e74:	200010da 	.word	0x200010da

08005e78 <mainLoop>:

void mainLoop() {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005e7c:	f7fe f8b6 	bl	8003fec <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005e80:	2101      	movs	r1, #1
 8005e82:	488b      	ldr	r0, [pc, #556]	@ (80060b0 <mainLoop+0x238>)
 8005e84:	f004 fb9c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d136      	bne.n	8005efc <mainLoop+0x84>
 8005e8e:	2108      	movs	r1, #8
 8005e90:	4888      	ldr	r0, [pc, #544]	@ (80060b4 <mainLoop+0x23c>)
 8005e92:	f004 fb95 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d12f      	bne.n	8005efc <mainLoop+0x84>
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	4884      	ldr	r0, [pc, #528]	@ (80060b0 <mainLoop+0x238>)
 8005ea0:	f004 fb8e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d128      	bne.n	8005efc <mainLoop+0x84>
 8005eaa:	2104      	movs	r1, #4
 8005eac:	4880      	ldr	r0, [pc, #512]	@ (80060b0 <mainLoop+0x238>)
 8005eae:	f004 fb87 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d121      	bne.n	8005efc <mainLoop+0x84>
 8005eb8:	2108      	movs	r1, #8
 8005eba:	487d      	ldr	r0, [pc, #500]	@ (80060b0 <mainLoop+0x238>)
 8005ebc:	f004 fb80 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11a      	bne.n	8005efc <mainLoop+0x84>
 8005ec6:	2180      	movs	r1, #128	@ 0x80
 8005ec8:	487a      	ldr	r0, [pc, #488]	@ (80060b4 <mainLoop+0x23c>)
 8005eca:	f004 fb79 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d113      	bne.n	8005efc <mainLoop+0x84>
 8005ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ed8:	4876      	ldr	r0, [pc, #472]	@ (80060b4 <mainLoop+0x23c>)
 8005eda:	f004 fb71 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10b      	bne.n	8005efc <mainLoop+0x84>
 8005ee4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ee8:	4872      	ldr	r0, [pc, #456]	@ (80060b4 <mainLoop+0x23c>)
 8005eea:	f004 fb69 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d103      	bne.n	8005efc <mainLoop+0x84>
			butonKontrol=0;
 8005ef4:	4b70      	ldr	r3, [pc, #448]	@ (80060b8 <mainLoop+0x240>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e003      	b.n	8005f04 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005efc:	4b6f      	ldr	r3, [pc, #444]	@ (80060bc <mainLoop+0x244>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a6f      	ldr	r2, [pc, #444]	@ (80060c0 <mainLoop+0x248>)
 8005f02:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005f04:	f7fe f924 	bl	8004150 <buttonCheck>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d103      	bne.n	8005f16 <mainLoop+0x9e>
			backLightTimer = millis;
 8005f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80060bc <mainLoop+0x244>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6b      	ldr	r2, [pc, #428]	@ (80060c0 <mainLoop+0x248>)
 8005f14:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005f16:	4b6b      	ldr	r3, [pc, #428]	@ (80060c4 <mainLoop+0x24c>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <mainLoop+0xb2>
			hafizaYaz = 0;
 8005f1e:	4b69      	ldr	r3, [pc, #420]	@ (80060c4 <mainLoop+0x24c>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005f24:	2001      	movs	r0, #1
 8005f26:	f7fa fbc5 	bl	80006b4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005f2a:	4b67      	ldr	r3, [pc, #412]	@ (80060c8 <mainLoop+0x250>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f083 0301 	eor.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d043      	beq.n	8005fc0 <mainLoop+0x148>
 8005f38:	4864      	ldr	r0, [pc, #400]	@ (80060cc <mainLoop+0x254>)
 8005f3a:	f005 f95d 	bl	800b1f8 <HAL_I2C_GetState>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d13d      	bne.n	8005fc0 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005f44:	4b62      	ldr	r3, [pc, #392]	@ (80060d0 <mainLoop+0x258>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f083 0301 	eor.w	r3, r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d028      	beq.n	8005fa4 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005f52:	4a60      	ldr	r2, [pc, #384]	@ (80060d4 <mainLoop+0x25c>)
 8005f54:	2101      	movs	r1, #1
 8005f56:	2001      	movs	r0, #1
 8005f58:	f003 f808 	bl	8008f6c <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80060d8 <mainLoop+0x260>)
 8005f5e:	2101      	movs	r1, #1
 8005f60:	2002      	movs	r0, #2
 8005f62:	f003 f803 	bl	8008f6c <lcd_print>
			  HAL_Delay(1000);
 8005f66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f6a:	f003 fd59 	bl	8009a20 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005f6e:	bf00      	nop
 8005f70:	4856      	ldr	r0, [pc, #344]	@ (80060cc <mainLoop+0x254>)
 8005f72:	f005 f94e 	bl	800b212 <HAL_I2C_GetError>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d0f9      	beq.n	8005f70 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005f7c:	e003      	b.n	8005f86 <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005f7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f82:	f003 fd4d 	bl	8009a20 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005f86:	4851      	ldr	r0, [pc, #324]	@ (80060cc <mainLoop+0x254>)
 8005f88:	f005 f936 	bl	800b1f8 <HAL_I2C_GetState>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d1f5      	bne.n	8005f7e <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005f92:	4a52      	ldr	r2, [pc, #328]	@ (80060dc <mainLoop+0x264>)
 8005f94:	2101      	movs	r1, #1
 8005f96:	2002      	movs	r0, #2
 8005f98:	f002 ffe8 	bl	8008f6c <lcd_print>

			  ilkOkuma=1;
 8005f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80060d0 <mainLoop+0x258>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e006      	b.n	8005fb2 <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80060e0 <mainLoop+0x268>)
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	2002      	movs	r0, #2
 8005faa:	f002 ffdf 	bl	8008f6c <lcd_print>
			  lcd_clear();
 8005fae:	f003 f809 	bl	8008fc4 <lcd_clear>
		  }

		  lcd_clear();
 8005fb2:	f003 f807 	bl	8008fc4 <lcd_clear>

		  eepromKontrol();
 8005fb6:	f7fa f93d 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005fba:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <mainLoop+0x250>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005fc0:	4b48      	ldr	r3, [pc, #288]	@ (80060e4 <mainLoop+0x26c>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11c      	bne.n	8006002 <mainLoop+0x18a>
 8005fc8:	4b47      	ldr	r3, [pc, #284]	@ (80060e8 <mainLoop+0x270>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f083 0301 	eor.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d015      	beq.n	8006002 <mainLoop+0x18a>
 8005fd6:	4b45      	ldr	r3, [pc, #276]	@ (80060ec <mainLoop+0x274>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d111      	bne.n	8006002 <mainLoop+0x18a>
			lcd_clear();
 8005fde:	f002 fff1 	bl	8008fc4 <lcd_clear>
			HAL_Delay(10);
 8005fe2:	200a      	movs	r0, #10
 8005fe4:	f003 fd1c 	bl	8009a20 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005fe8:	4a41      	ldr	r2, [pc, #260]	@ (80060f0 <mainLoop+0x278>)
 8005fea:	2101      	movs	r1, #1
 8005fec:	2001      	movs	r0, #1
 8005fee:	f002 ffbd 	bl	8008f6c <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005ff2:	4a40      	ldr	r2, [pc, #256]	@ (80060f4 <mainLoop+0x27c>)
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	2002      	movs	r0, #2
 8005ff8:	f002 ffb8 	bl	8008f6c <lcd_print>
			mesajYazildi=1;
 8005ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80060e8 <mainLoop+0x270>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006002:	4b38      	ldr	r3, [pc, #224]	@ (80060e4 <mainLoop+0x26c>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d112      	bne.n	8006030 <mainLoop+0x1b8>
 800600a:	2102      	movs	r1, #2
 800600c:	4828      	ldr	r0, [pc, #160]	@ (80060b0 <mainLoop+0x238>)
 800600e:	f004 fad7 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d10b      	bne.n	8006030 <mainLoop+0x1b8>
 8006018:	2104      	movs	r1, #4
 800601a:	4825      	ldr	r0, [pc, #148]	@ (80060b0 <mainLoop+0x238>)
 800601c:	f004 fad0 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d104      	bne.n	8006030 <mainLoop+0x1b8>
			menuGiris=1;
 8006026:	4b2f      	ldr	r3, [pc, #188]	@ (80060e4 <mainLoop+0x26c>)
 8006028:	2201      	movs	r2, #1
 800602a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800602c:	f002 ffca 	bl	8008fc4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006030:	4b2c      	ldr	r3, [pc, #176]	@ (80060e4 <mainLoop+0x26c>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <mainLoop+0x1c4>
			menu();
 8006038:	f7fb faa8 	bl	800158c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800603c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006040:	481c      	ldr	r0, [pc, #112]	@ (80060b4 <mainLoop+0x23c>)
 8006042:	f004 faec 	bl	800a61e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800604a:	482b      	ldr	r0, [pc, #172]	@ (80060f8 <mainLoop+0x280>)
 800604c:	f004 fab8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <mainLoop+0x1f4>
 8006056:	4b29      	ldr	r3, [pc, #164]	@ (80060fc <mainLoop+0x284>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f083 0301 	eor.w	r3, r3, #1
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <mainLoop+0x1f4>
			stopVar=1;
 8006064:	4b26      	ldr	r3, [pc, #152]	@ (8006100 <mainLoop+0x288>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e002      	b.n	8006072 <mainLoop+0x1fa>
		} else {
			stopVar=0;
 800606c:	4b24      	ldr	r3, [pc, #144]	@ (8006100 <mainLoop+0x288>)
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8006072:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006076:	4820      	ldr	r0, [pc, #128]	@ (80060f8 <mainLoop+0x280>)
 8006078:	f004 faa2 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <mainLoop+0x21a>
 8006082:	4b20      	ldr	r3, [pc, #128]	@ (8006104 <mainLoop+0x28c>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <mainLoop+0x21a>
			EmnStopVar=1;
 800608a:	4b1f      	ldr	r3, [pc, #124]	@ (8006108 <mainLoop+0x290>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e002      	b.n	8006098 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8006092:	4b1d      	ldr	r3, [pc, #116]	@ (8006108 <mainLoop+0x290>)
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006098:	f7fe f88e 	bl	80041b8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800609c:	f7fe f8c0 	bl	8004220 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80060a0:	f7fe f904 	bl	80042ac <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80060a4:	f7fe f954 	bl	8004350 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80060a8:	f7ff fcb4 	bl	8005a14 <checkDemoModCalisma>
		checkLCDBacklight();
 80060ac:	e6e6      	b.n	8005e7c <mainLoop+0x4>
 80060ae:	bf00      	nop
 80060b0:	40010800 	.word	0x40010800
 80060b4:	40011000 	.word	0x40011000
 80060b8:	200010ec 	.word	0x200010ec
 80060bc:	20001094 	.word	0x20001094
 80060c0:	200010b0 	.word	0x200010b0
 80060c4:	200010e9 	.word	0x200010e9
 80060c8:	200010ea 	.word	0x200010ea
 80060cc:	2000193c 	.word	0x2000193c
 80060d0:	200010eb 	.word	0x200010eb
 80060d4:	20000178 	.word	0x20000178
 80060d8:	20001874 	.word	0x20001874
 80060dc:	20001888 	.word	0x20001888
 80060e0:	2000189c 	.word	0x2000189c
 80060e4:	200010d9 	.word	0x200010d9
 80060e8:	200010f1 	.word	0x200010f1
 80060ec:	200010da 	.word	0x200010da
 80060f0:	200000c4 	.word	0x200000c4
 80060f4:	200000d8 	.word	0x200000d8
 80060f8:	40010c00 	.word	0x40010c00
 80060fc:	20001111 	.word	0x20001111
 8006100:	2000110e 	.word	0x2000110e
 8006104:	20001120 	.word	0x20001120
 8006108:	20001121 	.word	0x20001121

0800610c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 853d 	bne.w	8006b98 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800611e:	4ac7      	ldr	r2, [pc, #796]	@ (800643c <loadMenuTexts+0x330>)
 8006120:	4bc7      	ldr	r3, [pc, #796]	@ (8006440 <loadMenuTexts+0x334>)
 8006122:	4614      	mov	r4, r2
 8006124:	461d      	mov	r5, r3
 8006126:	6828      	ldr	r0, [r5, #0]
 8006128:	6869      	ldr	r1, [r5, #4]
 800612a:	68aa      	ldr	r2, [r5, #8]
 800612c:	68eb      	ldr	r3, [r5, #12]
 800612e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006130:	7c2b      	ldrb	r3, [r5, #16]
 8006132:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006134:	4ac3      	ldr	r2, [pc, #780]	@ (8006444 <loadMenuTexts+0x338>)
 8006136:	4bc4      	ldr	r3, [pc, #784]	@ (8006448 <loadMenuTexts+0x33c>)
 8006138:	4614      	mov	r4, r2
 800613a:	461d      	mov	r5, r3
 800613c:	6828      	ldr	r0, [r5, #0]
 800613e:	6869      	ldr	r1, [r5, #4]
 8006140:	68aa      	ldr	r2, [r5, #8]
 8006142:	68eb      	ldr	r3, [r5, #12]
 8006144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006146:	7c2b      	ldrb	r3, [r5, #16]
 8006148:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 800614a:	4ac0      	ldr	r2, [pc, #768]	@ (800644c <loadMenuTexts+0x340>)
 800614c:	4bc0      	ldr	r3, [pc, #768]	@ (8006450 <loadMenuTexts+0x344>)
 800614e:	4614      	mov	r4, r2
 8006150:	461d      	mov	r5, r3
 8006152:	6828      	ldr	r0, [r5, #0]
 8006154:	6869      	ldr	r1, [r5, #4]
 8006156:	68aa      	ldr	r2, [r5, #8]
 8006158:	68eb      	ldr	r3, [r5, #12]
 800615a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615c:	7c2b      	ldrb	r3, [r5, #16]
 800615e:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006160:	4abc      	ldr	r2, [pc, #752]	@ (8006454 <loadMenuTexts+0x348>)
 8006162:	4bbd      	ldr	r3, [pc, #756]	@ (8006458 <loadMenuTexts+0x34c>)
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	6828      	ldr	r0, [r5, #0]
 800616a:	6869      	ldr	r1, [r5, #4]
 800616c:	68aa      	ldr	r2, [r5, #8]
 800616e:	68eb      	ldr	r3, [r5, #12]
 8006170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006172:	7c2b      	ldrb	r3, [r5, #16]
 8006174:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006176:	4ab9      	ldr	r2, [pc, #740]	@ (800645c <loadMenuTexts+0x350>)
 8006178:	4bb9      	ldr	r3, [pc, #740]	@ (8006460 <loadMenuTexts+0x354>)
 800617a:	4614      	mov	r4, r2
 800617c:	461d      	mov	r5, r3
 800617e:	6828      	ldr	r0, [r5, #0]
 8006180:	6869      	ldr	r1, [r5, #4]
 8006182:	68aa      	ldr	r2, [r5, #8]
 8006184:	68eb      	ldr	r3, [r5, #12]
 8006186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006188:	7c2b      	ldrb	r3, [r5, #16]
 800618a:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 800618c:	4ab5      	ldr	r2, [pc, #724]	@ (8006464 <loadMenuTexts+0x358>)
 800618e:	4bb6      	ldr	r3, [pc, #728]	@ (8006468 <loadMenuTexts+0x35c>)
 8006190:	4614      	mov	r4, r2
 8006192:	461d      	mov	r5, r3
 8006194:	6828      	ldr	r0, [r5, #0]
 8006196:	6869      	ldr	r1, [r5, #4]
 8006198:	68aa      	ldr	r2, [r5, #8]
 800619a:	68eb      	ldr	r3, [r5, #12]
 800619c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800619e:	7c2b      	ldrb	r3, [r5, #16]
 80061a0:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80061a2:	4ab2      	ldr	r2, [pc, #712]	@ (800646c <loadMenuTexts+0x360>)
 80061a4:	4bb2      	ldr	r3, [pc, #712]	@ (8006470 <loadMenuTexts+0x364>)
 80061a6:	4614      	mov	r4, r2
 80061a8:	461d      	mov	r5, r3
 80061aa:	6828      	ldr	r0, [r5, #0]
 80061ac:	6869      	ldr	r1, [r5, #4]
 80061ae:	68aa      	ldr	r2, [r5, #8]
 80061b0:	68eb      	ldr	r3, [r5, #12]
 80061b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b4:	7c2b      	ldrb	r3, [r5, #16]
 80061b6:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80061b8:	4aae      	ldr	r2, [pc, #696]	@ (8006474 <loadMenuTexts+0x368>)
 80061ba:	4baf      	ldr	r3, [pc, #700]	@ (8006478 <loadMenuTexts+0x36c>)
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	6828      	ldr	r0, [r5, #0]
 80061c2:	6869      	ldr	r1, [r5, #4]
 80061c4:	68aa      	ldr	r2, [r5, #8]
 80061c6:	68eb      	ldr	r3, [r5, #12]
 80061c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ca:	7c2b      	ldrb	r3, [r5, #16]
 80061cc:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80061ce:	4aab      	ldr	r2, [pc, #684]	@ (800647c <loadMenuTexts+0x370>)
 80061d0:	4bab      	ldr	r3, [pc, #684]	@ (8006480 <loadMenuTexts+0x374>)
 80061d2:	4614      	mov	r4, r2
 80061d4:	461d      	mov	r5, r3
 80061d6:	6828      	ldr	r0, [r5, #0]
 80061d8:	6869      	ldr	r1, [r5, #4]
 80061da:	68aa      	ldr	r2, [r5, #8]
 80061dc:	68eb      	ldr	r3, [r5, #12]
 80061de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e0:	7c2b      	ldrb	r3, [r5, #16]
 80061e2:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 80061e4:	4aa7      	ldr	r2, [pc, #668]	@ (8006484 <loadMenuTexts+0x378>)
 80061e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006488 <loadMenuTexts+0x37c>)
 80061e8:	4614      	mov	r4, r2
 80061ea:	461d      	mov	r5, r3
 80061ec:	6828      	ldr	r0, [r5, #0]
 80061ee:	6869      	ldr	r1, [r5, #4]
 80061f0:	68aa      	ldr	r2, [r5, #8]
 80061f2:	68eb      	ldr	r3, [r5, #12]
 80061f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f6:	7c2b      	ldrb	r3, [r5, #16]
 80061f8:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 80061fa:	4aa4      	ldr	r2, [pc, #656]	@ (800648c <loadMenuTexts+0x380>)
 80061fc:	4ba4      	ldr	r3, [pc, #656]	@ (8006490 <loadMenuTexts+0x384>)
 80061fe:	4614      	mov	r4, r2
 8006200:	461d      	mov	r5, r3
 8006202:	6828      	ldr	r0, [r5, #0]
 8006204:	6869      	ldr	r1, [r5, #4]
 8006206:	68aa      	ldr	r2, [r5, #8]
 8006208:	68eb      	ldr	r3, [r5, #12]
 800620a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800620c:	7c2b      	ldrb	r3, [r5, #16]
 800620e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006210:	4aa0      	ldr	r2, [pc, #640]	@ (8006494 <loadMenuTexts+0x388>)
 8006212:	4ba1      	ldr	r3, [pc, #644]	@ (8006498 <loadMenuTexts+0x38c>)
 8006214:	4614      	mov	r4, r2
 8006216:	461d      	mov	r5, r3
 8006218:	6828      	ldr	r0, [r5, #0]
 800621a:	6869      	ldr	r1, [r5, #4]
 800621c:	68aa      	ldr	r2, [r5, #8]
 800621e:	68eb      	ldr	r3, [r5, #12]
 8006220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006222:	7c2b      	ldrb	r3, [r5, #16]
 8006224:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006226:	4a9d      	ldr	r2, [pc, #628]	@ (800649c <loadMenuTexts+0x390>)
 8006228:	4b9d      	ldr	r3, [pc, #628]	@ (80064a0 <loadMenuTexts+0x394>)
 800622a:	4614      	mov	r4, r2
 800622c:	461d      	mov	r5, r3
 800622e:	6828      	ldr	r0, [r5, #0]
 8006230:	6869      	ldr	r1, [r5, #4]
 8006232:	68aa      	ldr	r2, [r5, #8]
 8006234:	68eb      	ldr	r3, [r5, #12]
 8006236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006238:	7c2b      	ldrb	r3, [r5, #16]
 800623a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 800623c:	4a99      	ldr	r2, [pc, #612]	@ (80064a4 <loadMenuTexts+0x398>)
 800623e:	4b9a      	ldr	r3, [pc, #616]	@ (80064a8 <loadMenuTexts+0x39c>)
 8006240:	4614      	mov	r4, r2
 8006242:	461d      	mov	r5, r3
 8006244:	6828      	ldr	r0, [r5, #0]
 8006246:	6869      	ldr	r1, [r5, #4]
 8006248:	68aa      	ldr	r2, [r5, #8]
 800624a:	68eb      	ldr	r3, [r5, #12]
 800624c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624e:	7c2b      	ldrb	r3, [r5, #16]
 8006250:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006252:	4a96      	ldr	r2, [pc, #600]	@ (80064ac <loadMenuTexts+0x3a0>)
 8006254:	4b96      	ldr	r3, [pc, #600]	@ (80064b0 <loadMenuTexts+0x3a4>)
 8006256:	4614      	mov	r4, r2
 8006258:	461d      	mov	r5, r3
 800625a:	6828      	ldr	r0, [r5, #0]
 800625c:	6869      	ldr	r1, [r5, #4]
 800625e:	68aa      	ldr	r2, [r5, #8]
 8006260:	68eb      	ldr	r3, [r5, #12]
 8006262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006264:	7c2b      	ldrb	r3, [r5, #16]
 8006266:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006268:	4a92      	ldr	r2, [pc, #584]	@ (80064b4 <loadMenuTexts+0x3a8>)
 800626a:	4b93      	ldr	r3, [pc, #588]	@ (80064b8 <loadMenuTexts+0x3ac>)
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	6828      	ldr	r0, [r5, #0]
 8006272:	6869      	ldr	r1, [r5, #4]
 8006274:	68aa      	ldr	r2, [r5, #8]
 8006276:	68eb      	ldr	r3, [r5, #12]
 8006278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627a:	7c2b      	ldrb	r3, [r5, #16]
 800627c:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800627e:	4a8f      	ldr	r2, [pc, #572]	@ (80064bc <loadMenuTexts+0x3b0>)
 8006280:	4b8f      	ldr	r3, [pc, #572]	@ (80064c0 <loadMenuTexts+0x3b4>)
 8006282:	4614      	mov	r4, r2
 8006284:	461d      	mov	r5, r3
 8006286:	6828      	ldr	r0, [r5, #0]
 8006288:	6869      	ldr	r1, [r5, #4]
 800628a:	68aa      	ldr	r2, [r5, #8]
 800628c:	68eb      	ldr	r3, [r5, #12]
 800628e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006290:	7c2b      	ldrb	r3, [r5, #16]
 8006292:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006294:	4a8b      	ldr	r2, [pc, #556]	@ (80064c4 <loadMenuTexts+0x3b8>)
 8006296:	4b8c      	ldr	r3, [pc, #560]	@ (80064c8 <loadMenuTexts+0x3bc>)
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	6828      	ldr	r0, [r5, #0]
 800629e:	6869      	ldr	r1, [r5, #4]
 80062a0:	68aa      	ldr	r2, [r5, #8]
 80062a2:	68eb      	ldr	r3, [r5, #12]
 80062a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a6:	7c2b      	ldrb	r3, [r5, #16]
 80062a8:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80062aa:	4a88      	ldr	r2, [pc, #544]	@ (80064cc <loadMenuTexts+0x3c0>)
 80062ac:	4b88      	ldr	r3, [pc, #544]	@ (80064d0 <loadMenuTexts+0x3c4>)
 80062ae:	4614      	mov	r4, r2
 80062b0:	461d      	mov	r5, r3
 80062b2:	6828      	ldr	r0, [r5, #0]
 80062b4:	6869      	ldr	r1, [r5, #4]
 80062b6:	68aa      	ldr	r2, [r5, #8]
 80062b8:	68eb      	ldr	r3, [r5, #12]
 80062ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062bc:	7c2b      	ldrb	r3, [r5, #16]
 80062be:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80062c0:	4a84      	ldr	r2, [pc, #528]	@ (80064d4 <loadMenuTexts+0x3c8>)
 80062c2:	4b85      	ldr	r3, [pc, #532]	@ (80064d8 <loadMenuTexts+0x3cc>)
 80062c4:	4614      	mov	r4, r2
 80062c6:	461d      	mov	r5, r3
 80062c8:	6828      	ldr	r0, [r5, #0]
 80062ca:	6869      	ldr	r1, [r5, #4]
 80062cc:	68aa      	ldr	r2, [r5, #8]
 80062ce:	68eb      	ldr	r3, [r5, #12]
 80062d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d2:	7c2b      	ldrb	r3, [r5, #16]
 80062d4:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80062d6:	4a81      	ldr	r2, [pc, #516]	@ (80064dc <loadMenuTexts+0x3d0>)
 80062d8:	4b81      	ldr	r3, [pc, #516]	@ (80064e0 <loadMenuTexts+0x3d4>)
 80062da:	4614      	mov	r4, r2
 80062dc:	461d      	mov	r5, r3
 80062de:	6828      	ldr	r0, [r5, #0]
 80062e0:	6869      	ldr	r1, [r5, #4]
 80062e2:	68aa      	ldr	r2, [r5, #8]
 80062e4:	68eb      	ldr	r3, [r5, #12]
 80062e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e8:	7c2b      	ldrb	r3, [r5, #16]
 80062ea:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80062ec:	4a7d      	ldr	r2, [pc, #500]	@ (80064e4 <loadMenuTexts+0x3d8>)
 80062ee:	4b7e      	ldr	r3, [pc, #504]	@ (80064e8 <loadMenuTexts+0x3dc>)
 80062f0:	4614      	mov	r4, r2
 80062f2:	461d      	mov	r5, r3
 80062f4:	6828      	ldr	r0, [r5, #0]
 80062f6:	6869      	ldr	r1, [r5, #4]
 80062f8:	68aa      	ldr	r2, [r5, #8]
 80062fa:	68eb      	ldr	r3, [r5, #12]
 80062fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062fe:	7c2b      	ldrb	r3, [r5, #16]
 8006300:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006302:	4a7a      	ldr	r2, [pc, #488]	@ (80064ec <loadMenuTexts+0x3e0>)
 8006304:	4b7a      	ldr	r3, [pc, #488]	@ (80064f0 <loadMenuTexts+0x3e4>)
 8006306:	4614      	mov	r4, r2
 8006308:	461d      	mov	r5, r3
 800630a:	6828      	ldr	r0, [r5, #0]
 800630c:	6869      	ldr	r1, [r5, #4]
 800630e:	68aa      	ldr	r2, [r5, #8]
 8006310:	68eb      	ldr	r3, [r5, #12]
 8006312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006314:	7c2b      	ldrb	r3, [r5, #16]
 8006316:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006318:	4a76      	ldr	r2, [pc, #472]	@ (80064f4 <loadMenuTexts+0x3e8>)
 800631a:	4b77      	ldr	r3, [pc, #476]	@ (80064f8 <loadMenuTexts+0x3ec>)
 800631c:	4614      	mov	r4, r2
 800631e:	461d      	mov	r5, r3
 8006320:	6828      	ldr	r0, [r5, #0]
 8006322:	6869      	ldr	r1, [r5, #4]
 8006324:	68aa      	ldr	r2, [r5, #8]
 8006326:	68eb      	ldr	r3, [r5, #12]
 8006328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632a:	7c2b      	ldrb	r3, [r5, #16]
 800632c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800632e:	4a73      	ldr	r2, [pc, #460]	@ (80064fc <loadMenuTexts+0x3f0>)
 8006330:	4b73      	ldr	r3, [pc, #460]	@ (8006500 <loadMenuTexts+0x3f4>)
 8006332:	4614      	mov	r4, r2
 8006334:	461d      	mov	r5, r3
 8006336:	6828      	ldr	r0, [r5, #0]
 8006338:	6869      	ldr	r1, [r5, #4]
 800633a:	68aa      	ldr	r2, [r5, #8]
 800633c:	68eb      	ldr	r3, [r5, #12]
 800633e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006340:	7c2b      	ldrb	r3, [r5, #16]
 8006342:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006344:	4a6f      	ldr	r2, [pc, #444]	@ (8006504 <loadMenuTexts+0x3f8>)
 8006346:	4b70      	ldr	r3, [pc, #448]	@ (8006508 <loadMenuTexts+0x3fc>)
 8006348:	4614      	mov	r4, r2
 800634a:	461d      	mov	r5, r3
 800634c:	6828      	ldr	r0, [r5, #0]
 800634e:	6869      	ldr	r1, [r5, #4]
 8006350:	68aa      	ldr	r2, [r5, #8]
 8006352:	68eb      	ldr	r3, [r5, #12]
 8006354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006356:	7c2b      	ldrb	r3, [r5, #16]
 8006358:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800635a:	4a6c      	ldr	r2, [pc, #432]	@ (800650c <loadMenuTexts+0x400>)
 800635c:	4b6c      	ldr	r3, [pc, #432]	@ (8006510 <loadMenuTexts+0x404>)
 800635e:	4614      	mov	r4, r2
 8006360:	461d      	mov	r5, r3
 8006362:	6828      	ldr	r0, [r5, #0]
 8006364:	6869      	ldr	r1, [r5, #4]
 8006366:	68aa      	ldr	r2, [r5, #8]
 8006368:	68eb      	ldr	r3, [r5, #12]
 800636a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636c:	7c2b      	ldrb	r3, [r5, #16]
 800636e:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006370:	4a68      	ldr	r2, [pc, #416]	@ (8006514 <loadMenuTexts+0x408>)
 8006372:	4b69      	ldr	r3, [pc, #420]	@ (8006518 <loadMenuTexts+0x40c>)
 8006374:	4614      	mov	r4, r2
 8006376:	461d      	mov	r5, r3
 8006378:	6828      	ldr	r0, [r5, #0]
 800637a:	6869      	ldr	r1, [r5, #4]
 800637c:	68aa      	ldr	r2, [r5, #8]
 800637e:	68eb      	ldr	r3, [r5, #12]
 8006380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006382:	7c2b      	ldrb	r3, [r5, #16]
 8006384:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006386:	4a65      	ldr	r2, [pc, #404]	@ (800651c <loadMenuTexts+0x410>)
 8006388:	4b65      	ldr	r3, [pc, #404]	@ (8006520 <loadMenuTexts+0x414>)
 800638a:	4614      	mov	r4, r2
 800638c:	461d      	mov	r5, r3
 800638e:	6828      	ldr	r0, [r5, #0]
 8006390:	6869      	ldr	r1, [r5, #4]
 8006392:	68aa      	ldr	r2, [r5, #8]
 8006394:	68eb      	ldr	r3, [r5, #12]
 8006396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006398:	7c2b      	ldrb	r3, [r5, #16]
 800639a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 800639c:	4a61      	ldr	r2, [pc, #388]	@ (8006524 <loadMenuTexts+0x418>)
 800639e:	4b62      	ldr	r3, [pc, #392]	@ (8006528 <loadMenuTexts+0x41c>)
 80063a0:	4614      	mov	r4, r2
 80063a2:	461d      	mov	r5, r3
 80063a4:	6828      	ldr	r0, [r5, #0]
 80063a6:	6869      	ldr	r1, [r5, #4]
 80063a8:	68aa      	ldr	r2, [r5, #8]
 80063aa:	68eb      	ldr	r3, [r5, #12]
 80063ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ae:	7c2b      	ldrb	r3, [r5, #16]
 80063b0:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80063b2:	4a5e      	ldr	r2, [pc, #376]	@ (800652c <loadMenuTexts+0x420>)
 80063b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006530 <loadMenuTexts+0x424>)
 80063b6:	4614      	mov	r4, r2
 80063b8:	461d      	mov	r5, r3
 80063ba:	6828      	ldr	r0, [r5, #0]
 80063bc:	6869      	ldr	r1, [r5, #4]
 80063be:	68aa      	ldr	r2, [r5, #8]
 80063c0:	68eb      	ldr	r3, [r5, #12]
 80063c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c4:	7c2b      	ldrb	r3, [r5, #16]
 80063c6:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80063c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006534 <loadMenuTexts+0x428>)
 80063ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006538 <loadMenuTexts+0x42c>)
 80063cc:	4614      	mov	r4, r2
 80063ce:	461d      	mov	r5, r3
 80063d0:	6828      	ldr	r0, [r5, #0]
 80063d2:	6869      	ldr	r1, [r5, #4]
 80063d4:	68aa      	ldr	r2, [r5, #8]
 80063d6:	68eb      	ldr	r3, [r5, #12]
 80063d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063da:	7c2b      	ldrb	r3, [r5, #16]
 80063dc:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80063de:	4a57      	ldr	r2, [pc, #348]	@ (800653c <loadMenuTexts+0x430>)
 80063e0:	4b57      	ldr	r3, [pc, #348]	@ (8006540 <loadMenuTexts+0x434>)
 80063e2:	4614      	mov	r4, r2
 80063e4:	461d      	mov	r5, r3
 80063e6:	6828      	ldr	r0, [r5, #0]
 80063e8:	6869      	ldr	r1, [r5, #4]
 80063ea:	68aa      	ldr	r2, [r5, #8]
 80063ec:	68eb      	ldr	r3, [r5, #12]
 80063ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f0:	7c2b      	ldrb	r3, [r5, #16]
 80063f2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80063f4:	4a53      	ldr	r2, [pc, #332]	@ (8006544 <loadMenuTexts+0x438>)
 80063f6:	4b54      	ldr	r3, [pc, #336]	@ (8006548 <loadMenuTexts+0x43c>)
 80063f8:	4614      	mov	r4, r2
 80063fa:	461d      	mov	r5, r3
 80063fc:	6828      	ldr	r0, [r5, #0]
 80063fe:	6869      	ldr	r1, [r5, #4]
 8006400:	68aa      	ldr	r2, [r5, #8]
 8006402:	68eb      	ldr	r3, [r5, #12]
 8006404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006406:	7c2b      	ldrb	r3, [r5, #16]
 8006408:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800640a:	4a50      	ldr	r2, [pc, #320]	@ (800654c <loadMenuTexts+0x440>)
 800640c:	4b50      	ldr	r3, [pc, #320]	@ (8006550 <loadMenuTexts+0x444>)
 800640e:	4614      	mov	r4, r2
 8006410:	461d      	mov	r5, r3
 8006412:	6828      	ldr	r0, [r5, #0]
 8006414:	6869      	ldr	r1, [r5, #4]
 8006416:	68aa      	ldr	r2, [r5, #8]
 8006418:	68eb      	ldr	r3, [r5, #12]
 800641a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641c:	7c2b      	ldrb	r3, [r5, #16]
 800641e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006420:	4a4c      	ldr	r2, [pc, #304]	@ (8006554 <loadMenuTexts+0x448>)
 8006422:	4b4d      	ldr	r3, [pc, #308]	@ (8006558 <loadMenuTexts+0x44c>)
 8006424:	4614      	mov	r4, r2
 8006426:	461d      	mov	r5, r3
 8006428:	6828      	ldr	r0, [r5, #0]
 800642a:	6869      	ldr	r1, [r5, #4]
 800642c:	68aa      	ldr	r2, [r5, #8]
 800642e:	68eb      	ldr	r3, [r5, #12]
 8006430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006432:	7c2b      	ldrb	r3, [r5, #16]
 8006434:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006436:	4a49      	ldr	r2, [pc, #292]	@ (800655c <loadMenuTexts+0x450>)
 8006438:	e092      	b.n	8006560 <loadMenuTexts+0x454>
 800643a:	bf00      	nop
 800643c:	20001220 	.word	0x20001220
 8006440:	2000018c 	.word	0x2000018c
 8006444:	20001234 	.word	0x20001234
 8006448:	200001a0 	.word	0x200001a0
 800644c:	20001248 	.word	0x20001248
 8006450:	200001b4 	.word	0x200001b4
 8006454:	2000125c 	.word	0x2000125c
 8006458:	200001c8 	.word	0x200001c8
 800645c:	20001270 	.word	0x20001270
 8006460:	200001dc 	.word	0x200001dc
 8006464:	20001284 	.word	0x20001284
 8006468:	200001f0 	.word	0x200001f0
 800646c:	20001298 	.word	0x20001298
 8006470:	20000204 	.word	0x20000204
 8006474:	200012ac 	.word	0x200012ac
 8006478:	20000218 	.word	0x20000218
 800647c:	200012c0 	.word	0x200012c0
 8006480:	2000022c 	.word	0x2000022c
 8006484:	200012d4 	.word	0x200012d4
 8006488:	20000240 	.word	0x20000240
 800648c:	200012e8 	.word	0x200012e8
 8006490:	20000254 	.word	0x20000254
 8006494:	200012fc 	.word	0x200012fc
 8006498:	20000268 	.word	0x20000268
 800649c:	20001310 	.word	0x20001310
 80064a0:	2000027c 	.word	0x2000027c
 80064a4:	20001324 	.word	0x20001324
 80064a8:	20000290 	.word	0x20000290
 80064ac:	20001338 	.word	0x20001338
 80064b0:	200002a4 	.word	0x200002a4
 80064b4:	2000134c 	.word	0x2000134c
 80064b8:	200002b8 	.word	0x200002b8
 80064bc:	20001360 	.word	0x20001360
 80064c0:	200002cc 	.word	0x200002cc
 80064c4:	20001374 	.word	0x20001374
 80064c8:	200002e0 	.word	0x200002e0
 80064cc:	20001388 	.word	0x20001388
 80064d0:	200002f4 	.word	0x200002f4
 80064d4:	2000139c 	.word	0x2000139c
 80064d8:	20000308 	.word	0x20000308
 80064dc:	200013b0 	.word	0x200013b0
 80064e0:	2000031c 	.word	0x2000031c
 80064e4:	200013c4 	.word	0x200013c4
 80064e8:	20000330 	.word	0x20000330
 80064ec:	200013d8 	.word	0x200013d8
 80064f0:	20000344 	.word	0x20000344
 80064f4:	200013ec 	.word	0x200013ec
 80064f8:	20000358 	.word	0x20000358
 80064fc:	20001400 	.word	0x20001400
 8006500:	2000036c 	.word	0x2000036c
 8006504:	20001414 	.word	0x20001414
 8006508:	20000380 	.word	0x20000380
 800650c:	20001428 	.word	0x20001428
 8006510:	20000394 	.word	0x20000394
 8006514:	2000143c 	.word	0x2000143c
 8006518:	200003a8 	.word	0x200003a8
 800651c:	20001450 	.word	0x20001450
 8006520:	200003bc 	.word	0x200003bc
 8006524:	20001464 	.word	0x20001464
 8006528:	200003d0 	.word	0x200003d0
 800652c:	20001478 	.word	0x20001478
 8006530:	200003e4 	.word	0x200003e4
 8006534:	2000148c 	.word	0x2000148c
 8006538:	200003f8 	.word	0x200003f8
 800653c:	200014a0 	.word	0x200014a0
 8006540:	2000040c 	.word	0x2000040c
 8006544:	200014b4 	.word	0x200014b4
 8006548:	20000420 	.word	0x20000420
 800654c:	200014c8 	.word	0x200014c8
 8006550:	20000434 	.word	0x20000434
 8006554:	200014dc 	.word	0x200014dc
 8006558:	20000448 	.word	0x20000448
 800655c:	200014f0 	.word	0x200014f0
 8006560:	4bc7      	ldr	r3, [pc, #796]	@ (8006880 <loadMenuTexts+0x774>)
 8006562:	4614      	mov	r4, r2
 8006564:	461d      	mov	r5, r3
 8006566:	6828      	ldr	r0, [r5, #0]
 8006568:	6869      	ldr	r1, [r5, #4]
 800656a:	68aa      	ldr	r2, [r5, #8]
 800656c:	68eb      	ldr	r3, [r5, #12]
 800656e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006570:	7c2b      	ldrb	r3, [r5, #16]
 8006572:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006574:	4ac3      	ldr	r2, [pc, #780]	@ (8006884 <loadMenuTexts+0x778>)
 8006576:	4bc4      	ldr	r3, [pc, #784]	@ (8006888 <loadMenuTexts+0x77c>)
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	6828      	ldr	r0, [r5, #0]
 800657e:	6869      	ldr	r1, [r5, #4]
 8006580:	68aa      	ldr	r2, [r5, #8]
 8006582:	68eb      	ldr	r3, [r5, #12]
 8006584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006586:	7c2b      	ldrb	r3, [r5, #16]
 8006588:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 800658a:	4ac0      	ldr	r2, [pc, #768]	@ (800688c <loadMenuTexts+0x780>)
 800658c:	4bc0      	ldr	r3, [pc, #768]	@ (8006890 <loadMenuTexts+0x784>)
 800658e:	4614      	mov	r4, r2
 8006590:	461d      	mov	r5, r3
 8006592:	6828      	ldr	r0, [r5, #0]
 8006594:	6869      	ldr	r1, [r5, #4]
 8006596:	68aa      	ldr	r2, [r5, #8]
 8006598:	68eb      	ldr	r3, [r5, #12]
 800659a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659c:	7c2b      	ldrb	r3, [r5, #16]
 800659e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80065a0:	4abc      	ldr	r2, [pc, #752]	@ (8006894 <loadMenuTexts+0x788>)
 80065a2:	4bbd      	ldr	r3, [pc, #756]	@ (8006898 <loadMenuTexts+0x78c>)
 80065a4:	4614      	mov	r4, r2
 80065a6:	461d      	mov	r5, r3
 80065a8:	6828      	ldr	r0, [r5, #0]
 80065aa:	6869      	ldr	r1, [r5, #4]
 80065ac:	68aa      	ldr	r2, [r5, #8]
 80065ae:	68eb      	ldr	r3, [r5, #12]
 80065b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b2:	7c2b      	ldrb	r3, [r5, #16]
 80065b4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80065b6:	4ab9      	ldr	r2, [pc, #740]	@ (800689c <loadMenuTexts+0x790>)
 80065b8:	4bb9      	ldr	r3, [pc, #740]	@ (80068a0 <loadMenuTexts+0x794>)
 80065ba:	4614      	mov	r4, r2
 80065bc:	461d      	mov	r5, r3
 80065be:	6828      	ldr	r0, [r5, #0]
 80065c0:	6869      	ldr	r1, [r5, #4]
 80065c2:	68aa      	ldr	r2, [r5, #8]
 80065c4:	68eb      	ldr	r3, [r5, #12]
 80065c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c8:	7c2b      	ldrb	r3, [r5, #16]
 80065ca:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80065cc:	4ab5      	ldr	r2, [pc, #724]	@ (80068a4 <loadMenuTexts+0x798>)
 80065ce:	4bb6      	ldr	r3, [pc, #728]	@ (80068a8 <loadMenuTexts+0x79c>)
 80065d0:	4614      	mov	r4, r2
 80065d2:	461d      	mov	r5, r3
 80065d4:	6828      	ldr	r0, [r5, #0]
 80065d6:	6869      	ldr	r1, [r5, #4]
 80065d8:	68aa      	ldr	r2, [r5, #8]
 80065da:	68eb      	ldr	r3, [r5, #12]
 80065dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065de:	7c2b      	ldrb	r3, [r5, #16]
 80065e0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80065e2:	4ab2      	ldr	r2, [pc, #712]	@ (80068ac <loadMenuTexts+0x7a0>)
 80065e4:	4bb2      	ldr	r3, [pc, #712]	@ (80068b0 <loadMenuTexts+0x7a4>)
 80065e6:	4614      	mov	r4, r2
 80065e8:	461d      	mov	r5, r3
 80065ea:	6828      	ldr	r0, [r5, #0]
 80065ec:	6869      	ldr	r1, [r5, #4]
 80065ee:	68aa      	ldr	r2, [r5, #8]
 80065f0:	68eb      	ldr	r3, [r5, #12]
 80065f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f4:	7c2b      	ldrb	r3, [r5, #16]
 80065f6:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80065f8:	4aae      	ldr	r2, [pc, #696]	@ (80068b4 <loadMenuTexts+0x7a8>)
 80065fa:	4baf      	ldr	r3, [pc, #700]	@ (80068b8 <loadMenuTexts+0x7ac>)
 80065fc:	4614      	mov	r4, r2
 80065fe:	461d      	mov	r5, r3
 8006600:	6828      	ldr	r0, [r5, #0]
 8006602:	6869      	ldr	r1, [r5, #4]
 8006604:	68aa      	ldr	r2, [r5, #8]
 8006606:	68eb      	ldr	r3, [r5, #12]
 8006608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660a:	7c2b      	ldrb	r3, [r5, #16]
 800660c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800660e:	4aab      	ldr	r2, [pc, #684]	@ (80068bc <loadMenuTexts+0x7b0>)
 8006610:	4bab      	ldr	r3, [pc, #684]	@ (80068c0 <loadMenuTexts+0x7b4>)
 8006612:	4614      	mov	r4, r2
 8006614:	461d      	mov	r5, r3
 8006616:	6828      	ldr	r0, [r5, #0]
 8006618:	6869      	ldr	r1, [r5, #4]
 800661a:	68aa      	ldr	r2, [r5, #8]
 800661c:	68eb      	ldr	r3, [r5, #12]
 800661e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006620:	7c2b      	ldrb	r3, [r5, #16]
 8006622:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006624:	4aa7      	ldr	r2, [pc, #668]	@ (80068c4 <loadMenuTexts+0x7b8>)
 8006626:	4ba8      	ldr	r3, [pc, #672]	@ (80068c8 <loadMenuTexts+0x7bc>)
 8006628:	4614      	mov	r4, r2
 800662a:	461d      	mov	r5, r3
 800662c:	6828      	ldr	r0, [r5, #0]
 800662e:	6869      	ldr	r1, [r5, #4]
 8006630:	68aa      	ldr	r2, [r5, #8]
 8006632:	68eb      	ldr	r3, [r5, #12]
 8006634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006636:	7c2b      	ldrb	r3, [r5, #16]
 8006638:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800663a:	4aa4      	ldr	r2, [pc, #656]	@ (80068cc <loadMenuTexts+0x7c0>)
 800663c:	4ba4      	ldr	r3, [pc, #656]	@ (80068d0 <loadMenuTexts+0x7c4>)
 800663e:	4614      	mov	r4, r2
 8006640:	461d      	mov	r5, r3
 8006642:	6828      	ldr	r0, [r5, #0]
 8006644:	6869      	ldr	r1, [r5, #4]
 8006646:	68aa      	ldr	r2, [r5, #8]
 8006648:	68eb      	ldr	r3, [r5, #12]
 800664a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664c:	7c2b      	ldrb	r3, [r5, #16]
 800664e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006650:	4aa0      	ldr	r2, [pc, #640]	@ (80068d4 <loadMenuTexts+0x7c8>)
 8006652:	4ba1      	ldr	r3, [pc, #644]	@ (80068d8 <loadMenuTexts+0x7cc>)
 8006654:	4614      	mov	r4, r2
 8006656:	461d      	mov	r5, r3
 8006658:	6828      	ldr	r0, [r5, #0]
 800665a:	6869      	ldr	r1, [r5, #4]
 800665c:	68aa      	ldr	r2, [r5, #8]
 800665e:	68eb      	ldr	r3, [r5, #12]
 8006660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006662:	7c2b      	ldrb	r3, [r5, #16]
 8006664:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006666:	4a9d      	ldr	r2, [pc, #628]	@ (80068dc <loadMenuTexts+0x7d0>)
 8006668:	4b9d      	ldr	r3, [pc, #628]	@ (80068e0 <loadMenuTexts+0x7d4>)
 800666a:	4614      	mov	r4, r2
 800666c:	461d      	mov	r5, r3
 800666e:	6828      	ldr	r0, [r5, #0]
 8006670:	6869      	ldr	r1, [r5, #4]
 8006672:	68aa      	ldr	r2, [r5, #8]
 8006674:	68eb      	ldr	r3, [r5, #12]
 8006676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006678:	7c2b      	ldrb	r3, [r5, #16]
 800667a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 800667c:	4a99      	ldr	r2, [pc, #612]	@ (80068e4 <loadMenuTexts+0x7d8>)
 800667e:	4b9a      	ldr	r3, [pc, #616]	@ (80068e8 <loadMenuTexts+0x7dc>)
 8006680:	4614      	mov	r4, r2
 8006682:	461d      	mov	r5, r3
 8006684:	6828      	ldr	r0, [r5, #0]
 8006686:	6869      	ldr	r1, [r5, #4]
 8006688:	68aa      	ldr	r2, [r5, #8]
 800668a:	68eb      	ldr	r3, [r5, #12]
 800668c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800668e:	7c2b      	ldrb	r3, [r5, #16]
 8006690:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8006692:	4a96      	ldr	r2, [pc, #600]	@ (80068ec <loadMenuTexts+0x7e0>)
 8006694:	4b96      	ldr	r3, [pc, #600]	@ (80068f0 <loadMenuTexts+0x7e4>)
 8006696:	4614      	mov	r4, r2
 8006698:	461d      	mov	r5, r3
 800669a:	6828      	ldr	r0, [r5, #0]
 800669c:	6869      	ldr	r1, [r5, #4]
 800669e:	68aa      	ldr	r2, [r5, #8]
 80066a0:	68eb      	ldr	r3, [r5, #12]
 80066a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a4:	7c2b      	ldrb	r3, [r5, #16]
 80066a6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80066a8:	4a92      	ldr	r2, [pc, #584]	@ (80068f4 <loadMenuTexts+0x7e8>)
 80066aa:	4b93      	ldr	r3, [pc, #588]	@ (80068f8 <loadMenuTexts+0x7ec>)
 80066ac:	4614      	mov	r4, r2
 80066ae:	461d      	mov	r5, r3
 80066b0:	6828      	ldr	r0, [r5, #0]
 80066b2:	6869      	ldr	r1, [r5, #4]
 80066b4:	68aa      	ldr	r2, [r5, #8]
 80066b6:	68eb      	ldr	r3, [r5, #12]
 80066b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ba:	7c2b      	ldrb	r3, [r5, #16]
 80066bc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80066be:	4a8f      	ldr	r2, [pc, #572]	@ (80068fc <loadMenuTexts+0x7f0>)
 80066c0:	4b8f      	ldr	r3, [pc, #572]	@ (8006900 <loadMenuTexts+0x7f4>)
 80066c2:	4614      	mov	r4, r2
 80066c4:	461d      	mov	r5, r3
 80066c6:	6828      	ldr	r0, [r5, #0]
 80066c8:	6869      	ldr	r1, [r5, #4]
 80066ca:	68aa      	ldr	r2, [r5, #8]
 80066cc:	68eb      	ldr	r3, [r5, #12]
 80066ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d0:	7c2b      	ldrb	r3, [r5, #16]
 80066d2:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80066d4:	4a8b      	ldr	r2, [pc, #556]	@ (8006904 <loadMenuTexts+0x7f8>)
 80066d6:	4b8c      	ldr	r3, [pc, #560]	@ (8006908 <loadMenuTexts+0x7fc>)
 80066d8:	4614      	mov	r4, r2
 80066da:	461d      	mov	r5, r3
 80066dc:	6828      	ldr	r0, [r5, #0]
 80066de:	6869      	ldr	r1, [r5, #4]
 80066e0:	68aa      	ldr	r2, [r5, #8]
 80066e2:	68eb      	ldr	r3, [r5, #12]
 80066e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e6:	7c2b      	ldrb	r3, [r5, #16]
 80066e8:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80066ea:	4a88      	ldr	r2, [pc, #544]	@ (800690c <loadMenuTexts+0x800>)
 80066ec:	4b88      	ldr	r3, [pc, #544]	@ (8006910 <loadMenuTexts+0x804>)
 80066ee:	4614      	mov	r4, r2
 80066f0:	461d      	mov	r5, r3
 80066f2:	6828      	ldr	r0, [r5, #0]
 80066f4:	6869      	ldr	r1, [r5, #4]
 80066f6:	68aa      	ldr	r2, [r5, #8]
 80066f8:	68eb      	ldr	r3, [r5, #12]
 80066fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066fc:	7c2b      	ldrb	r3, [r5, #16]
 80066fe:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006700:	4a84      	ldr	r2, [pc, #528]	@ (8006914 <loadMenuTexts+0x808>)
 8006702:	4b85      	ldr	r3, [pc, #532]	@ (8006918 <loadMenuTexts+0x80c>)
 8006704:	4614      	mov	r4, r2
 8006706:	461d      	mov	r5, r3
 8006708:	6828      	ldr	r0, [r5, #0]
 800670a:	6869      	ldr	r1, [r5, #4]
 800670c:	68aa      	ldr	r2, [r5, #8]
 800670e:	68eb      	ldr	r3, [r5, #12]
 8006710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006712:	7c2b      	ldrb	r3, [r5, #16]
 8006714:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006716:	4a81      	ldr	r2, [pc, #516]	@ (800691c <loadMenuTexts+0x810>)
 8006718:	4b81      	ldr	r3, [pc, #516]	@ (8006920 <loadMenuTexts+0x814>)
 800671a:	4614      	mov	r4, r2
 800671c:	461d      	mov	r5, r3
 800671e:	6828      	ldr	r0, [r5, #0]
 8006720:	6869      	ldr	r1, [r5, #4]
 8006722:	68aa      	ldr	r2, [r5, #8]
 8006724:	68eb      	ldr	r3, [r5, #12]
 8006726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006728:	7c2b      	ldrb	r3, [r5, #16]
 800672a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800672c:	4a7d      	ldr	r2, [pc, #500]	@ (8006924 <loadMenuTexts+0x818>)
 800672e:	4b7e      	ldr	r3, [pc, #504]	@ (8006928 <loadMenuTexts+0x81c>)
 8006730:	4614      	mov	r4, r2
 8006732:	461d      	mov	r5, r3
 8006734:	6828      	ldr	r0, [r5, #0]
 8006736:	6869      	ldr	r1, [r5, #4]
 8006738:	68aa      	ldr	r2, [r5, #8]
 800673a:	68eb      	ldr	r3, [r5, #12]
 800673c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800673e:	7c2b      	ldrb	r3, [r5, #16]
 8006740:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006742:	4a7a      	ldr	r2, [pc, #488]	@ (800692c <loadMenuTexts+0x820>)
 8006744:	4b7a      	ldr	r3, [pc, #488]	@ (8006930 <loadMenuTexts+0x824>)
 8006746:	4614      	mov	r4, r2
 8006748:	461d      	mov	r5, r3
 800674a:	6828      	ldr	r0, [r5, #0]
 800674c:	6869      	ldr	r1, [r5, #4]
 800674e:	68aa      	ldr	r2, [r5, #8]
 8006750:	68eb      	ldr	r3, [r5, #12]
 8006752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006754:	7c2b      	ldrb	r3, [r5, #16]
 8006756:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006758:	4a76      	ldr	r2, [pc, #472]	@ (8006934 <loadMenuTexts+0x828>)
 800675a:	4b77      	ldr	r3, [pc, #476]	@ (8006938 <loadMenuTexts+0x82c>)
 800675c:	4614      	mov	r4, r2
 800675e:	461d      	mov	r5, r3
 8006760:	6828      	ldr	r0, [r5, #0]
 8006762:	6869      	ldr	r1, [r5, #4]
 8006764:	68aa      	ldr	r2, [r5, #8]
 8006766:	68eb      	ldr	r3, [r5, #12]
 8006768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676a:	7c2b      	ldrb	r3, [r5, #16]
 800676c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800676e:	4a73      	ldr	r2, [pc, #460]	@ (800693c <loadMenuTexts+0x830>)
 8006770:	4b73      	ldr	r3, [pc, #460]	@ (8006940 <loadMenuTexts+0x834>)
 8006772:	4614      	mov	r4, r2
 8006774:	461d      	mov	r5, r3
 8006776:	6828      	ldr	r0, [r5, #0]
 8006778:	6869      	ldr	r1, [r5, #4]
 800677a:	68aa      	ldr	r2, [r5, #8]
 800677c:	68eb      	ldr	r3, [r5, #12]
 800677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006780:	7c2b      	ldrb	r3, [r5, #16]
 8006782:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006784:	4a6f      	ldr	r2, [pc, #444]	@ (8006944 <loadMenuTexts+0x838>)
 8006786:	4b70      	ldr	r3, [pc, #448]	@ (8006948 <loadMenuTexts+0x83c>)
 8006788:	4614      	mov	r4, r2
 800678a:	461d      	mov	r5, r3
 800678c:	6828      	ldr	r0, [r5, #0]
 800678e:	6869      	ldr	r1, [r5, #4]
 8006790:	68aa      	ldr	r2, [r5, #8]
 8006792:	68eb      	ldr	r3, [r5, #12]
 8006794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006796:	7c2b      	ldrb	r3, [r5, #16]
 8006798:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 800679a:	4a6c      	ldr	r2, [pc, #432]	@ (800694c <loadMenuTexts+0x840>)
 800679c:	4b6c      	ldr	r3, [pc, #432]	@ (8006950 <loadMenuTexts+0x844>)
 800679e:	4614      	mov	r4, r2
 80067a0:	461d      	mov	r5, r3
 80067a2:	6828      	ldr	r0, [r5, #0]
 80067a4:	6869      	ldr	r1, [r5, #4]
 80067a6:	68aa      	ldr	r2, [r5, #8]
 80067a8:	68eb      	ldr	r3, [r5, #12]
 80067aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ac:	7c2b      	ldrb	r3, [r5, #16]
 80067ae:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80067b0:	4a68      	ldr	r2, [pc, #416]	@ (8006954 <loadMenuTexts+0x848>)
 80067b2:	4b69      	ldr	r3, [pc, #420]	@ (8006958 <loadMenuTexts+0x84c>)
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	6828      	ldr	r0, [r5, #0]
 80067ba:	6869      	ldr	r1, [r5, #4]
 80067bc:	68aa      	ldr	r2, [r5, #8]
 80067be:	68eb      	ldr	r3, [r5, #12]
 80067c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c2:	7c2b      	ldrb	r3, [r5, #16]
 80067c4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80067c6:	4a65      	ldr	r2, [pc, #404]	@ (800695c <loadMenuTexts+0x850>)
 80067c8:	4b65      	ldr	r3, [pc, #404]	@ (8006960 <loadMenuTexts+0x854>)
 80067ca:	4614      	mov	r4, r2
 80067cc:	461d      	mov	r5, r3
 80067ce:	6828      	ldr	r0, [r5, #0]
 80067d0:	6869      	ldr	r1, [r5, #4]
 80067d2:	68aa      	ldr	r2, [r5, #8]
 80067d4:	68eb      	ldr	r3, [r5, #12]
 80067d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d8:	7c2b      	ldrb	r3, [r5, #16]
 80067da:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80067dc:	4a61      	ldr	r2, [pc, #388]	@ (8006964 <loadMenuTexts+0x858>)
 80067de:	4b62      	ldr	r3, [pc, #392]	@ (8006968 <loadMenuTexts+0x85c>)
 80067e0:	4614      	mov	r4, r2
 80067e2:	461d      	mov	r5, r3
 80067e4:	6828      	ldr	r0, [r5, #0]
 80067e6:	6869      	ldr	r1, [r5, #4]
 80067e8:	68aa      	ldr	r2, [r5, #8]
 80067ea:	68eb      	ldr	r3, [r5, #12]
 80067ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ee:	7c2b      	ldrb	r3, [r5, #16]
 80067f0:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80067f2:	4a5e      	ldr	r2, [pc, #376]	@ (800696c <loadMenuTexts+0x860>)
 80067f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006970 <loadMenuTexts+0x864>)
 80067f6:	4614      	mov	r4, r2
 80067f8:	461d      	mov	r5, r3
 80067fa:	6828      	ldr	r0, [r5, #0]
 80067fc:	6869      	ldr	r1, [r5, #4]
 80067fe:	68aa      	ldr	r2, [r5, #8]
 8006800:	68eb      	ldr	r3, [r5, #12]
 8006802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006804:	7c2b      	ldrb	r3, [r5, #16]
 8006806:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006808:	4a5a      	ldr	r2, [pc, #360]	@ (8006974 <loadMenuTexts+0x868>)
 800680a:	4b5b      	ldr	r3, [pc, #364]	@ (8006978 <loadMenuTexts+0x86c>)
 800680c:	4614      	mov	r4, r2
 800680e:	461d      	mov	r5, r3
 8006810:	6828      	ldr	r0, [r5, #0]
 8006812:	6869      	ldr	r1, [r5, #4]
 8006814:	68aa      	ldr	r2, [r5, #8]
 8006816:	68eb      	ldr	r3, [r5, #12]
 8006818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681a:	7c2b      	ldrb	r3, [r5, #16]
 800681c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800681e:	4a57      	ldr	r2, [pc, #348]	@ (800697c <loadMenuTexts+0x870>)
 8006820:	4b57      	ldr	r3, [pc, #348]	@ (8006980 <loadMenuTexts+0x874>)
 8006822:	4614      	mov	r4, r2
 8006824:	461d      	mov	r5, r3
 8006826:	6828      	ldr	r0, [r5, #0]
 8006828:	6869      	ldr	r1, [r5, #4]
 800682a:	68aa      	ldr	r2, [r5, #8]
 800682c:	68eb      	ldr	r3, [r5, #12]
 800682e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006830:	7c2b      	ldrb	r3, [r5, #16]
 8006832:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006834:	4a53      	ldr	r2, [pc, #332]	@ (8006984 <loadMenuTexts+0x878>)
 8006836:	4b54      	ldr	r3, [pc, #336]	@ (8006988 <loadMenuTexts+0x87c>)
 8006838:	4614      	mov	r4, r2
 800683a:	461d      	mov	r5, r3
 800683c:	6828      	ldr	r0, [r5, #0]
 800683e:	6869      	ldr	r1, [r5, #4]
 8006840:	68aa      	ldr	r2, [r5, #8]
 8006842:	68eb      	ldr	r3, [r5, #12]
 8006844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006846:	7c2b      	ldrb	r3, [r5, #16]
 8006848:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800684a:	4a50      	ldr	r2, [pc, #320]	@ (800698c <loadMenuTexts+0x880>)
 800684c:	4b50      	ldr	r3, [pc, #320]	@ (8006990 <loadMenuTexts+0x884>)
 800684e:	4614      	mov	r4, r2
 8006850:	461d      	mov	r5, r3
 8006852:	6828      	ldr	r0, [r5, #0]
 8006854:	6869      	ldr	r1, [r5, #4]
 8006856:	68aa      	ldr	r2, [r5, #8]
 8006858:	68eb      	ldr	r3, [r5, #12]
 800685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685c:	7c2b      	ldrb	r3, [r5, #16]
 800685e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006860:	4a4c      	ldr	r2, [pc, #304]	@ (8006994 <loadMenuTexts+0x888>)
 8006862:	4b4d      	ldr	r3, [pc, #308]	@ (8006998 <loadMenuTexts+0x88c>)
 8006864:	4614      	mov	r4, r2
 8006866:	461d      	mov	r5, r3
 8006868:	6828      	ldr	r0, [r5, #0]
 800686a:	6869      	ldr	r1, [r5, #4]
 800686c:	68aa      	ldr	r2, [r5, #8]
 800686e:	68eb      	ldr	r3, [r5, #12]
 8006870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006872:	7c2b      	ldrb	r3, [r5, #16]
 8006874:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006876:	4a49      	ldr	r2, [pc, #292]	@ (800699c <loadMenuTexts+0x890>)
 8006878:	4b49      	ldr	r3, [pc, #292]	@ (80069a0 <loadMenuTexts+0x894>)
 800687a:	4614      	mov	r4, r2
 800687c:	461d      	mov	r5, r3
 800687e:	e091      	b.n	80069a4 <loadMenuTexts+0x898>
 8006880:	2000045c 	.word	0x2000045c
 8006884:	20001504 	.word	0x20001504
 8006888:	20000470 	.word	0x20000470
 800688c:	20001518 	.word	0x20001518
 8006890:	20000484 	.word	0x20000484
 8006894:	2000152c 	.word	0x2000152c
 8006898:	20000498 	.word	0x20000498
 800689c:	20001540 	.word	0x20001540
 80068a0:	200004ac 	.word	0x200004ac
 80068a4:	20001554 	.word	0x20001554
 80068a8:	200004c0 	.word	0x200004c0
 80068ac:	20001568 	.word	0x20001568
 80068b0:	200004d4 	.word	0x200004d4
 80068b4:	2000157c 	.word	0x2000157c
 80068b8:	200004e8 	.word	0x200004e8
 80068bc:	20001590 	.word	0x20001590
 80068c0:	200004fc 	.word	0x200004fc
 80068c4:	200015a4 	.word	0x200015a4
 80068c8:	20000510 	.word	0x20000510
 80068cc:	200015b8 	.word	0x200015b8
 80068d0:	20000524 	.word	0x20000524
 80068d4:	200015cc 	.word	0x200015cc
 80068d8:	20000538 	.word	0x20000538
 80068dc:	200015e0 	.word	0x200015e0
 80068e0:	2000054c 	.word	0x2000054c
 80068e4:	200015f4 	.word	0x200015f4
 80068e8:	20000560 	.word	0x20000560
 80068ec:	20001608 	.word	0x20001608
 80068f0:	20000574 	.word	0x20000574
 80068f4:	2000161c 	.word	0x2000161c
 80068f8:	20000588 	.word	0x20000588
 80068fc:	20001630 	.word	0x20001630
 8006900:	2000059c 	.word	0x2000059c
 8006904:	20001644 	.word	0x20001644
 8006908:	200005b0 	.word	0x200005b0
 800690c:	20001658 	.word	0x20001658
 8006910:	200005c4 	.word	0x200005c4
 8006914:	2000166c 	.word	0x2000166c
 8006918:	200005d8 	.word	0x200005d8
 800691c:	20001680 	.word	0x20001680
 8006920:	200005ec 	.word	0x200005ec
 8006924:	20001694 	.word	0x20001694
 8006928:	20000600 	.word	0x20000600
 800692c:	200016a8 	.word	0x200016a8
 8006930:	20000614 	.word	0x20000614
 8006934:	200016bc 	.word	0x200016bc
 8006938:	20000628 	.word	0x20000628
 800693c:	200016d0 	.word	0x200016d0
 8006940:	2000063c 	.word	0x2000063c
 8006944:	200016e4 	.word	0x200016e4
 8006948:	20000650 	.word	0x20000650
 800694c:	200016f8 	.word	0x200016f8
 8006950:	20000664 	.word	0x20000664
 8006954:	2000170c 	.word	0x2000170c
 8006958:	20000678 	.word	0x20000678
 800695c:	20001720 	.word	0x20001720
 8006960:	2000068c 	.word	0x2000068c
 8006964:	20001734 	.word	0x20001734
 8006968:	200006a0 	.word	0x200006a0
 800696c:	20001748 	.word	0x20001748
 8006970:	200006b4 	.word	0x200006b4
 8006974:	2000175c 	.word	0x2000175c
 8006978:	200006c8 	.word	0x200006c8
 800697c:	20001770 	.word	0x20001770
 8006980:	200006dc 	.word	0x200006dc
 8006984:	20001784 	.word	0x20001784
 8006988:	200006f0 	.word	0x200006f0
 800698c:	20001798 	.word	0x20001798
 8006990:	20000c7c 	.word	0x20000c7c
 8006994:	200017ac 	.word	0x200017ac
 8006998:	20000c90 	.word	0x20000c90
 800699c:	200017c0 	.word	0x200017c0
 80069a0:	20000ca4 	.word	0x20000ca4
 80069a4:	6828      	ldr	r0, [r5, #0]
 80069a6:	6869      	ldr	r1, [r5, #4]
 80069a8:	68aa      	ldr	r2, [r5, #8]
 80069aa:	68eb      	ldr	r3, [r5, #12]
 80069ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ae:	7c2b      	ldrb	r3, [r5, #16]
 80069b0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80069b2:	4a59      	ldr	r2, [pc, #356]	@ (8006b18 <loadMenuTexts+0xa0c>)
 80069b4:	4b59      	ldr	r3, [pc, #356]	@ (8006b1c <loadMenuTexts+0xa10>)
 80069b6:	4614      	mov	r4, r2
 80069b8:	461d      	mov	r5, r3
 80069ba:	6828      	ldr	r0, [r5, #0]
 80069bc:	6869      	ldr	r1, [r5, #4]
 80069be:	68aa      	ldr	r2, [r5, #8]
 80069c0:	68eb      	ldr	r3, [r5, #12]
 80069c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c4:	7c2b      	ldrb	r3, [r5, #16]
 80069c6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80069c8:	4a55      	ldr	r2, [pc, #340]	@ (8006b20 <loadMenuTexts+0xa14>)
 80069ca:	4b56      	ldr	r3, [pc, #344]	@ (8006b24 <loadMenuTexts+0xa18>)
 80069cc:	4614      	mov	r4, r2
 80069ce:	461d      	mov	r5, r3
 80069d0:	6828      	ldr	r0, [r5, #0]
 80069d2:	6869      	ldr	r1, [r5, #4]
 80069d4:	68aa      	ldr	r2, [r5, #8]
 80069d6:	68eb      	ldr	r3, [r5, #12]
 80069d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069da:	7c2b      	ldrb	r3, [r5, #16]
 80069dc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80069de:	4a52      	ldr	r2, [pc, #328]	@ (8006b28 <loadMenuTexts+0xa1c>)
 80069e0:	4b52      	ldr	r3, [pc, #328]	@ (8006b2c <loadMenuTexts+0xa20>)
 80069e2:	4614      	mov	r4, r2
 80069e4:	461d      	mov	r5, r3
 80069e6:	6828      	ldr	r0, [r5, #0]
 80069e8:	6869      	ldr	r1, [r5, #4]
 80069ea:	68aa      	ldr	r2, [r5, #8]
 80069ec:	68eb      	ldr	r3, [r5, #12]
 80069ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f0:	7c2b      	ldrb	r3, [r5, #16]
 80069f2:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80069f4:	4a4e      	ldr	r2, [pc, #312]	@ (8006b30 <loadMenuTexts+0xa24>)
 80069f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006b34 <loadMenuTexts+0xa28>)
 80069f8:	4614      	mov	r4, r2
 80069fa:	461d      	mov	r5, r3
 80069fc:	6828      	ldr	r0, [r5, #0]
 80069fe:	6869      	ldr	r1, [r5, #4]
 8006a00:	68aa      	ldr	r2, [r5, #8]
 8006a02:	68eb      	ldr	r3, [r5, #12]
 8006a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a06:	7c2b      	ldrb	r3, [r5, #16]
 8006a08:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006a0a:	4a4b      	ldr	r2, [pc, #300]	@ (8006b38 <loadMenuTexts+0xa2c>)
 8006a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b3c <loadMenuTexts+0xa30>)
 8006a0e:	4614      	mov	r4, r2
 8006a10:	461d      	mov	r5, r3
 8006a12:	6828      	ldr	r0, [r5, #0]
 8006a14:	6869      	ldr	r1, [r5, #4]
 8006a16:	68aa      	ldr	r2, [r5, #8]
 8006a18:	68eb      	ldr	r3, [r5, #12]
 8006a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a1c:	7c2b      	ldrb	r3, [r5, #16]
 8006a1e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006a20:	4a47      	ldr	r2, [pc, #284]	@ (8006b40 <loadMenuTexts+0xa34>)
 8006a22:	4b48      	ldr	r3, [pc, #288]	@ (8006b44 <loadMenuTexts+0xa38>)
 8006a24:	4614      	mov	r4, r2
 8006a26:	461d      	mov	r5, r3
 8006a28:	6828      	ldr	r0, [r5, #0]
 8006a2a:	6869      	ldr	r1, [r5, #4]
 8006a2c:	68aa      	ldr	r2, [r5, #8]
 8006a2e:	68eb      	ldr	r3, [r5, #12]
 8006a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a32:	7c2b      	ldrb	r3, [r5, #16]
 8006a34:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006a36:	4a44      	ldr	r2, [pc, #272]	@ (8006b48 <loadMenuTexts+0xa3c>)
 8006a38:	4b44      	ldr	r3, [pc, #272]	@ (8006b4c <loadMenuTexts+0xa40>)
 8006a3a:	4614      	mov	r4, r2
 8006a3c:	461d      	mov	r5, r3
 8006a3e:	6828      	ldr	r0, [r5, #0]
 8006a40:	6869      	ldr	r1, [r5, #4]
 8006a42:	68aa      	ldr	r2, [r5, #8]
 8006a44:	68eb      	ldr	r3, [r5, #12]
 8006a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a48:	7c2b      	ldrb	r3, [r5, #16]
 8006a4a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006a4c:	4a40      	ldr	r2, [pc, #256]	@ (8006b50 <loadMenuTexts+0xa44>)
 8006a4e:	4b41      	ldr	r3, [pc, #260]	@ (8006b54 <loadMenuTexts+0xa48>)
 8006a50:	4614      	mov	r4, r2
 8006a52:	461d      	mov	r5, r3
 8006a54:	6828      	ldr	r0, [r5, #0]
 8006a56:	6869      	ldr	r1, [r5, #4]
 8006a58:	68aa      	ldr	r2, [r5, #8]
 8006a5a:	68eb      	ldr	r3, [r5, #12]
 8006a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5e:	7c2b      	ldrb	r3, [r5, #16]
 8006a60:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006a62:	4a3d      	ldr	r2, [pc, #244]	@ (8006b58 <loadMenuTexts+0xa4c>)
 8006a64:	4b3d      	ldr	r3, [pc, #244]	@ (8006b5c <loadMenuTexts+0xa50>)
 8006a66:	4614      	mov	r4, r2
 8006a68:	461d      	mov	r5, r3
 8006a6a:	6828      	ldr	r0, [r5, #0]
 8006a6c:	6869      	ldr	r1, [r5, #4]
 8006a6e:	68aa      	ldr	r2, [r5, #8]
 8006a70:	68eb      	ldr	r3, [r5, #12]
 8006a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a74:	7c2b      	ldrb	r3, [r5, #16]
 8006a76:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006a78:	4a39      	ldr	r2, [pc, #228]	@ (8006b60 <loadMenuTexts+0xa54>)
 8006a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b64 <loadMenuTexts+0xa58>)
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	461d      	mov	r5, r3
 8006a80:	6828      	ldr	r0, [r5, #0]
 8006a82:	6869      	ldr	r1, [r5, #4]
 8006a84:	68aa      	ldr	r2, [r5, #8]
 8006a86:	68eb      	ldr	r3, [r5, #12]
 8006a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a8a:	7c2b      	ldrb	r3, [r5, #16]
 8006a8c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006a8e:	4a36      	ldr	r2, [pc, #216]	@ (8006b68 <loadMenuTexts+0xa5c>)
 8006a90:	4b36      	ldr	r3, [pc, #216]	@ (8006b6c <loadMenuTexts+0xa60>)
 8006a92:	4614      	mov	r4, r2
 8006a94:	461d      	mov	r5, r3
 8006a96:	6828      	ldr	r0, [r5, #0]
 8006a98:	6869      	ldr	r1, [r5, #4]
 8006a9a:	68aa      	ldr	r2, [r5, #8]
 8006a9c:	68eb      	ldr	r3, [r5, #12]
 8006a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa0:	7c2b      	ldrb	r3, [r5, #16]
 8006aa2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006aa4:	4a32      	ldr	r2, [pc, #200]	@ (8006b70 <loadMenuTexts+0xa64>)
 8006aa6:	4b33      	ldr	r3, [pc, #204]	@ (8006b74 <loadMenuTexts+0xa68>)
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	6828      	ldr	r0, [r5, #0]
 8006aae:	6869      	ldr	r1, [r5, #4]
 8006ab0:	68aa      	ldr	r2, [r5, #8]
 8006ab2:	68eb      	ldr	r3, [r5, #12]
 8006ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab6:	7c2b      	ldrb	r3, [r5, #16]
 8006ab8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006aba:	4a2f      	ldr	r2, [pc, #188]	@ (8006b78 <loadMenuTexts+0xa6c>)
 8006abc:	4b2f      	ldr	r3, [pc, #188]	@ (8006b7c <loadMenuTexts+0xa70>)
 8006abe:	4614      	mov	r4, r2
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	6828      	ldr	r0, [r5, #0]
 8006ac4:	6869      	ldr	r1, [r5, #4]
 8006ac6:	68aa      	ldr	r2, [r5, #8]
 8006ac8:	68eb      	ldr	r3, [r5, #12]
 8006aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006acc:	7c2b      	ldrb	r3, [r5, #16]
 8006ace:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8006b80 <loadMenuTexts+0xa74>)
 8006ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8006b84 <loadMenuTexts+0xa78>)
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	6828      	ldr	r0, [r5, #0]
 8006ada:	6869      	ldr	r1, [r5, #4]
 8006adc:	68aa      	ldr	r2, [r5, #8]
 8006ade:	68eb      	ldr	r3, [r5, #12]
 8006ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae2:	7c2b      	ldrb	r3, [r5, #16]
 8006ae4:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006ae6:	4a28      	ldr	r2, [pc, #160]	@ (8006b88 <loadMenuTexts+0xa7c>)
 8006ae8:	4b28      	ldr	r3, [pc, #160]	@ (8006b8c <loadMenuTexts+0xa80>)
 8006aea:	4614      	mov	r4, r2
 8006aec:	461d      	mov	r5, r3
 8006aee:	6828      	ldr	r0, [r5, #0]
 8006af0:	6869      	ldr	r1, [r5, #4]
 8006af2:	68aa      	ldr	r2, [r5, #8]
 8006af4:	68eb      	ldr	r3, [r5, #12]
 8006af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af8:	7c2b      	ldrb	r3, [r5, #16]
 8006afa:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006afc:	4a24      	ldr	r2, [pc, #144]	@ (8006b90 <loadMenuTexts+0xa84>)
 8006afe:	4b25      	ldr	r3, [pc, #148]	@ (8006b94 <loadMenuTexts+0xa88>)
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	6828      	ldr	r0, [r5, #0]
 8006b06:	6869      	ldr	r1, [r5, #4]
 8006b08:	68aa      	ldr	r2, [r5, #8]
 8006b0a:	68eb      	ldr	r3, [r5, #12]
 8006b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0e:	7c2b      	ldrb	r3, [r5, #16]
 8006b10:	7023      	strb	r3, [r4, #0]
 8006b12:	f000 bd3a 	b.w	800758a <loadMenuTexts+0x147e>
 8006b16:	bf00      	nop
 8006b18:	200017d4 	.word	0x200017d4
 8006b1c:	20000cb8 	.word	0x20000cb8
 8006b20:	200017e8 	.word	0x200017e8
 8006b24:	20000d1c 	.word	0x20000d1c
 8006b28:	200017fc 	.word	0x200017fc
 8006b2c:	20000d30 	.word	0x20000d30
 8006b30:	20001810 	.word	0x20001810
 8006b34:	20000d6c 	.word	0x20000d6c
 8006b38:	20001824 	.word	0x20001824
 8006b3c:	20000d80 	.word	0x20000d80
 8006b40:	20001838 	.word	0x20001838
 8006b44:	20000dbc 	.word	0x20000dbc
 8006b48:	2000184c 	.word	0x2000184c
 8006b4c:	20000dd0 	.word	0x20000dd0
 8006b50:	20001860 	.word	0x20001860
 8006b54:	20000e0c 	.word	0x20000e0c
 8006b58:	20001874 	.word	0x20001874
 8006b5c:	20000e34 	.word	0x20000e34
 8006b60:	20001888 	.word	0x20001888
 8006b64:	20000e5c 	.word	0x20000e5c
 8006b68:	2000189c 	.word	0x2000189c
 8006b6c:	20000e84 	.word	0x20000e84
 8006b70:	200018b0 	.word	0x200018b0
 8006b74:	20000eac 	.word	0x20000eac
 8006b78:	200018c4 	.word	0x200018c4
 8006b7c:	20000ed4 	.word	0x20000ed4
 8006b80:	200018d8 	.word	0x200018d8
 8006b84:	20000efc 	.word	0x20000efc
 8006b88:	200018ec 	.word	0x200018ec
 8006b8c:	20000f24 	.word	0x20000f24
 8006b90:	20001900 	.word	0x20001900
 8006b94:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006b98:	4ac6      	ldr	r2, [pc, #792]	@ (8006eb4 <loadMenuTexts+0xda8>)
 8006b9a:	4bc7      	ldr	r3, [pc, #796]	@ (8006eb8 <loadMenuTexts+0xdac>)
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	6828      	ldr	r0, [r5, #0]
 8006ba2:	6869      	ldr	r1, [r5, #4]
 8006ba4:	68aa      	ldr	r2, [r5, #8]
 8006ba6:	68eb      	ldr	r3, [r5, #12]
 8006ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006baa:	7c2b      	ldrb	r3, [r5, #16]
 8006bac:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006bae:	4ac3      	ldr	r2, [pc, #780]	@ (8006ebc <loadMenuTexts+0xdb0>)
 8006bb0:	4bc3      	ldr	r3, [pc, #780]	@ (8006ec0 <loadMenuTexts+0xdb4>)
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	461d      	mov	r5, r3
 8006bb6:	6828      	ldr	r0, [r5, #0]
 8006bb8:	6869      	ldr	r1, [r5, #4]
 8006bba:	68aa      	ldr	r2, [r5, #8]
 8006bbc:	68eb      	ldr	r3, [r5, #12]
 8006bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc0:	7c2b      	ldrb	r3, [r5, #16]
 8006bc2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006bc4:	4abf      	ldr	r2, [pc, #764]	@ (8006ec4 <loadMenuTexts+0xdb8>)
 8006bc6:	4bc0      	ldr	r3, [pc, #768]	@ (8006ec8 <loadMenuTexts+0xdbc>)
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	6828      	ldr	r0, [r5, #0]
 8006bce:	6869      	ldr	r1, [r5, #4]
 8006bd0:	68aa      	ldr	r2, [r5, #8]
 8006bd2:	68eb      	ldr	r3, [r5, #12]
 8006bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd6:	7c2b      	ldrb	r3, [r5, #16]
 8006bd8:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006bda:	4abc      	ldr	r2, [pc, #752]	@ (8006ecc <loadMenuTexts+0xdc0>)
 8006bdc:	4bbc      	ldr	r3, [pc, #752]	@ (8006ed0 <loadMenuTexts+0xdc4>)
 8006bde:	4614      	mov	r4, r2
 8006be0:	461d      	mov	r5, r3
 8006be2:	6828      	ldr	r0, [r5, #0]
 8006be4:	6869      	ldr	r1, [r5, #4]
 8006be6:	68aa      	ldr	r2, [r5, #8]
 8006be8:	68eb      	ldr	r3, [r5, #12]
 8006bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bec:	7c2b      	ldrb	r3, [r5, #16]
 8006bee:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006bf0:	4ab8      	ldr	r2, [pc, #736]	@ (8006ed4 <loadMenuTexts+0xdc8>)
 8006bf2:	4bb9      	ldr	r3, [pc, #740]	@ (8006ed8 <loadMenuTexts+0xdcc>)
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	6828      	ldr	r0, [r5, #0]
 8006bfa:	6869      	ldr	r1, [r5, #4]
 8006bfc:	68aa      	ldr	r2, [r5, #8]
 8006bfe:	68eb      	ldr	r3, [r5, #12]
 8006c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c02:	7c2b      	ldrb	r3, [r5, #16]
 8006c04:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006c06:	4ab5      	ldr	r2, [pc, #724]	@ (8006edc <loadMenuTexts+0xdd0>)
 8006c08:	4bb5      	ldr	r3, [pc, #724]	@ (8006ee0 <loadMenuTexts+0xdd4>)
 8006c0a:	4614      	mov	r4, r2
 8006c0c:	461d      	mov	r5, r3
 8006c0e:	6828      	ldr	r0, [r5, #0]
 8006c10:	6869      	ldr	r1, [r5, #4]
 8006c12:	68aa      	ldr	r2, [r5, #8]
 8006c14:	68eb      	ldr	r3, [r5, #12]
 8006c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c18:	7c2b      	ldrb	r3, [r5, #16]
 8006c1a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006c1c:	4ab1      	ldr	r2, [pc, #708]	@ (8006ee4 <loadMenuTexts+0xdd8>)
 8006c1e:	4bb2      	ldr	r3, [pc, #712]	@ (8006ee8 <loadMenuTexts+0xddc>)
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	6828      	ldr	r0, [r5, #0]
 8006c26:	6869      	ldr	r1, [r5, #4]
 8006c28:	68aa      	ldr	r2, [r5, #8]
 8006c2a:	68eb      	ldr	r3, [r5, #12]
 8006c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2e:	7c2b      	ldrb	r3, [r5, #16]
 8006c30:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006c32:	4aae      	ldr	r2, [pc, #696]	@ (8006eec <loadMenuTexts+0xde0>)
 8006c34:	4bae      	ldr	r3, [pc, #696]	@ (8006ef0 <loadMenuTexts+0xde4>)
 8006c36:	4614      	mov	r4, r2
 8006c38:	461d      	mov	r5, r3
 8006c3a:	6828      	ldr	r0, [r5, #0]
 8006c3c:	6869      	ldr	r1, [r5, #4]
 8006c3e:	68aa      	ldr	r2, [r5, #8]
 8006c40:	68eb      	ldr	r3, [r5, #12]
 8006c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c44:	7c2b      	ldrb	r3, [r5, #16]
 8006c46:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006c48:	4aaa      	ldr	r2, [pc, #680]	@ (8006ef4 <loadMenuTexts+0xde8>)
 8006c4a:	4bab      	ldr	r3, [pc, #684]	@ (8006ef8 <loadMenuTexts+0xdec>)
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	6828      	ldr	r0, [r5, #0]
 8006c52:	6869      	ldr	r1, [r5, #4]
 8006c54:	68aa      	ldr	r2, [r5, #8]
 8006c56:	68eb      	ldr	r3, [r5, #12]
 8006c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5a:	7c2b      	ldrb	r3, [r5, #16]
 8006c5c:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006c5e:	4aa7      	ldr	r2, [pc, #668]	@ (8006efc <loadMenuTexts+0xdf0>)
 8006c60:	4ba7      	ldr	r3, [pc, #668]	@ (8006f00 <loadMenuTexts+0xdf4>)
 8006c62:	4614      	mov	r4, r2
 8006c64:	461d      	mov	r5, r3
 8006c66:	6828      	ldr	r0, [r5, #0]
 8006c68:	6869      	ldr	r1, [r5, #4]
 8006c6a:	68aa      	ldr	r2, [r5, #8]
 8006c6c:	68eb      	ldr	r3, [r5, #12]
 8006c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c70:	7c2b      	ldrb	r3, [r5, #16]
 8006c72:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006c74:	4aa3      	ldr	r2, [pc, #652]	@ (8006f04 <loadMenuTexts+0xdf8>)
 8006c76:	4ba4      	ldr	r3, [pc, #656]	@ (8006f08 <loadMenuTexts+0xdfc>)
 8006c78:	4614      	mov	r4, r2
 8006c7a:	461d      	mov	r5, r3
 8006c7c:	6828      	ldr	r0, [r5, #0]
 8006c7e:	6869      	ldr	r1, [r5, #4]
 8006c80:	68aa      	ldr	r2, [r5, #8]
 8006c82:	68eb      	ldr	r3, [r5, #12]
 8006c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c86:	7c2b      	ldrb	r3, [r5, #16]
 8006c88:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006c8a:	4aa0      	ldr	r2, [pc, #640]	@ (8006f0c <loadMenuTexts+0xe00>)
 8006c8c:	4ba0      	ldr	r3, [pc, #640]	@ (8006f10 <loadMenuTexts+0xe04>)
 8006c8e:	4614      	mov	r4, r2
 8006c90:	461d      	mov	r5, r3
 8006c92:	6828      	ldr	r0, [r5, #0]
 8006c94:	6869      	ldr	r1, [r5, #4]
 8006c96:	68aa      	ldr	r2, [r5, #8]
 8006c98:	68eb      	ldr	r3, [r5, #12]
 8006c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c9c:	7c2b      	ldrb	r3, [r5, #16]
 8006c9e:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8006f14 <loadMenuTexts+0xe08>)
 8006ca2:	4b9d      	ldr	r3, [pc, #628]	@ (8006f18 <loadMenuTexts+0xe0c>)
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	6828      	ldr	r0, [r5, #0]
 8006caa:	6869      	ldr	r1, [r5, #4]
 8006cac:	68aa      	ldr	r2, [r5, #8]
 8006cae:	68eb      	ldr	r3, [r5, #12]
 8006cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb2:	7c2b      	ldrb	r3, [r5, #16]
 8006cb4:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006cb6:	4a99      	ldr	r2, [pc, #612]	@ (8006f1c <loadMenuTexts+0xe10>)
 8006cb8:	4b99      	ldr	r3, [pc, #612]	@ (8006f20 <loadMenuTexts+0xe14>)
 8006cba:	4614      	mov	r4, r2
 8006cbc:	461d      	mov	r5, r3
 8006cbe:	6828      	ldr	r0, [r5, #0]
 8006cc0:	6869      	ldr	r1, [r5, #4]
 8006cc2:	68aa      	ldr	r2, [r5, #8]
 8006cc4:	68eb      	ldr	r3, [r5, #12]
 8006cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc8:	7c2b      	ldrb	r3, [r5, #16]
 8006cca:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006ccc:	4a95      	ldr	r2, [pc, #596]	@ (8006f24 <loadMenuTexts+0xe18>)
 8006cce:	4b96      	ldr	r3, [pc, #600]	@ (8006f28 <loadMenuTexts+0xe1c>)
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	461d      	mov	r5, r3
 8006cd4:	6828      	ldr	r0, [r5, #0]
 8006cd6:	6869      	ldr	r1, [r5, #4]
 8006cd8:	68aa      	ldr	r2, [r5, #8]
 8006cda:	68eb      	ldr	r3, [r5, #12]
 8006cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cde:	7c2b      	ldrb	r3, [r5, #16]
 8006ce0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006ce2:	4a92      	ldr	r2, [pc, #584]	@ (8006f2c <loadMenuTexts+0xe20>)
 8006ce4:	4b92      	ldr	r3, [pc, #584]	@ (8006f30 <loadMenuTexts+0xe24>)
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	461d      	mov	r5, r3
 8006cea:	6828      	ldr	r0, [r5, #0]
 8006cec:	6869      	ldr	r1, [r5, #4]
 8006cee:	68aa      	ldr	r2, [r5, #8]
 8006cf0:	68eb      	ldr	r3, [r5, #12]
 8006cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf4:	7c2b      	ldrb	r3, [r5, #16]
 8006cf6:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006cf8:	4a8e      	ldr	r2, [pc, #568]	@ (8006f34 <loadMenuTexts+0xe28>)
 8006cfa:	4b8f      	ldr	r3, [pc, #572]	@ (8006f38 <loadMenuTexts+0xe2c>)
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	461d      	mov	r5, r3
 8006d00:	6828      	ldr	r0, [r5, #0]
 8006d02:	6869      	ldr	r1, [r5, #4]
 8006d04:	68aa      	ldr	r2, [r5, #8]
 8006d06:	68eb      	ldr	r3, [r5, #12]
 8006d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0a:	7c2b      	ldrb	r3, [r5, #16]
 8006d0c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006d0e:	4a8b      	ldr	r2, [pc, #556]	@ (8006f3c <loadMenuTexts+0xe30>)
 8006d10:	4b8b      	ldr	r3, [pc, #556]	@ (8006f40 <loadMenuTexts+0xe34>)
 8006d12:	4614      	mov	r4, r2
 8006d14:	461d      	mov	r5, r3
 8006d16:	6828      	ldr	r0, [r5, #0]
 8006d18:	6869      	ldr	r1, [r5, #4]
 8006d1a:	68aa      	ldr	r2, [r5, #8]
 8006d1c:	68eb      	ldr	r3, [r5, #12]
 8006d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d20:	7c2b      	ldrb	r3, [r5, #16]
 8006d22:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006d24:	4a87      	ldr	r2, [pc, #540]	@ (8006f44 <loadMenuTexts+0xe38>)
 8006d26:	4b88      	ldr	r3, [pc, #544]	@ (8006f48 <loadMenuTexts+0xe3c>)
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	6828      	ldr	r0, [r5, #0]
 8006d2e:	6869      	ldr	r1, [r5, #4]
 8006d30:	68aa      	ldr	r2, [r5, #8]
 8006d32:	68eb      	ldr	r3, [r5, #12]
 8006d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d36:	7c2b      	ldrb	r3, [r5, #16]
 8006d38:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006d3a:	4a84      	ldr	r2, [pc, #528]	@ (8006f4c <loadMenuTexts+0xe40>)
 8006d3c:	4b84      	ldr	r3, [pc, #528]	@ (8006f50 <loadMenuTexts+0xe44>)
 8006d3e:	4614      	mov	r4, r2
 8006d40:	461d      	mov	r5, r3
 8006d42:	6828      	ldr	r0, [r5, #0]
 8006d44:	6869      	ldr	r1, [r5, #4]
 8006d46:	68aa      	ldr	r2, [r5, #8]
 8006d48:	68eb      	ldr	r3, [r5, #12]
 8006d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4c:	7c2b      	ldrb	r3, [r5, #16]
 8006d4e:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006d50:	4a80      	ldr	r2, [pc, #512]	@ (8006f54 <loadMenuTexts+0xe48>)
 8006d52:	4b81      	ldr	r3, [pc, #516]	@ (8006f58 <loadMenuTexts+0xe4c>)
 8006d54:	4614      	mov	r4, r2
 8006d56:	461d      	mov	r5, r3
 8006d58:	6828      	ldr	r0, [r5, #0]
 8006d5a:	6869      	ldr	r1, [r5, #4]
 8006d5c:	68aa      	ldr	r2, [r5, #8]
 8006d5e:	68eb      	ldr	r3, [r5, #12]
 8006d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d62:	7c2b      	ldrb	r3, [r5, #16]
 8006d64:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006d66:	4a7d      	ldr	r2, [pc, #500]	@ (8006f5c <loadMenuTexts+0xe50>)
 8006d68:	4b7d      	ldr	r3, [pc, #500]	@ (8006f60 <loadMenuTexts+0xe54>)
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	6828      	ldr	r0, [r5, #0]
 8006d70:	6869      	ldr	r1, [r5, #4]
 8006d72:	68aa      	ldr	r2, [r5, #8]
 8006d74:	68eb      	ldr	r3, [r5, #12]
 8006d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d78:	7c2b      	ldrb	r3, [r5, #16]
 8006d7a:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006d7c:	4a79      	ldr	r2, [pc, #484]	@ (8006f64 <loadMenuTexts+0xe58>)
 8006d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f68 <loadMenuTexts+0xe5c>)
 8006d80:	4614      	mov	r4, r2
 8006d82:	461d      	mov	r5, r3
 8006d84:	6828      	ldr	r0, [r5, #0]
 8006d86:	6869      	ldr	r1, [r5, #4]
 8006d88:	68aa      	ldr	r2, [r5, #8]
 8006d8a:	68eb      	ldr	r3, [r5, #12]
 8006d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d8e:	7c2b      	ldrb	r3, [r5, #16]
 8006d90:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006d92:	4a76      	ldr	r2, [pc, #472]	@ (8006f6c <loadMenuTexts+0xe60>)
 8006d94:	4b76      	ldr	r3, [pc, #472]	@ (8006f70 <loadMenuTexts+0xe64>)
 8006d96:	4614      	mov	r4, r2
 8006d98:	461d      	mov	r5, r3
 8006d9a:	6828      	ldr	r0, [r5, #0]
 8006d9c:	6869      	ldr	r1, [r5, #4]
 8006d9e:	68aa      	ldr	r2, [r5, #8]
 8006da0:	68eb      	ldr	r3, [r5, #12]
 8006da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da4:	7c2b      	ldrb	r3, [r5, #16]
 8006da6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006da8:	4a72      	ldr	r2, [pc, #456]	@ (8006f74 <loadMenuTexts+0xe68>)
 8006daa:	4b73      	ldr	r3, [pc, #460]	@ (8006f78 <loadMenuTexts+0xe6c>)
 8006dac:	4614      	mov	r4, r2
 8006dae:	461d      	mov	r5, r3
 8006db0:	6828      	ldr	r0, [r5, #0]
 8006db2:	6869      	ldr	r1, [r5, #4]
 8006db4:	68aa      	ldr	r2, [r5, #8]
 8006db6:	68eb      	ldr	r3, [r5, #12]
 8006db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dba:	7c2b      	ldrb	r3, [r5, #16]
 8006dbc:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8006f7c <loadMenuTexts+0xe70>)
 8006dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006f80 <loadMenuTexts+0xe74>)
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	6828      	ldr	r0, [r5, #0]
 8006dc8:	6869      	ldr	r1, [r5, #4]
 8006dca:	68aa      	ldr	r2, [r5, #8]
 8006dcc:	68eb      	ldr	r3, [r5, #12]
 8006dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd0:	7c2b      	ldrb	r3, [r5, #16]
 8006dd2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f84 <loadMenuTexts+0xe78>)
 8006dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8006f88 <loadMenuTexts+0xe7c>)
 8006dd8:	4614      	mov	r4, r2
 8006dda:	461d      	mov	r5, r3
 8006ddc:	6828      	ldr	r0, [r5, #0]
 8006dde:	6869      	ldr	r1, [r5, #4]
 8006de0:	68aa      	ldr	r2, [r5, #8]
 8006de2:	68eb      	ldr	r3, [r5, #12]
 8006de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de6:	7c2b      	ldrb	r3, [r5, #16]
 8006de8:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006dea:	4a68      	ldr	r2, [pc, #416]	@ (8006f8c <loadMenuTexts+0xe80>)
 8006dec:	4b68      	ldr	r3, [pc, #416]	@ (8006f90 <loadMenuTexts+0xe84>)
 8006dee:	4614      	mov	r4, r2
 8006df0:	461d      	mov	r5, r3
 8006df2:	6828      	ldr	r0, [r5, #0]
 8006df4:	6869      	ldr	r1, [r5, #4]
 8006df6:	68aa      	ldr	r2, [r5, #8]
 8006df8:	68eb      	ldr	r3, [r5, #12]
 8006dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfc:	7c2b      	ldrb	r3, [r5, #16]
 8006dfe:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006e00:	4a64      	ldr	r2, [pc, #400]	@ (8006f94 <loadMenuTexts+0xe88>)
 8006e02:	4b65      	ldr	r3, [pc, #404]	@ (8006f98 <loadMenuTexts+0xe8c>)
 8006e04:	4614      	mov	r4, r2
 8006e06:	461d      	mov	r5, r3
 8006e08:	6828      	ldr	r0, [r5, #0]
 8006e0a:	6869      	ldr	r1, [r5, #4]
 8006e0c:	68aa      	ldr	r2, [r5, #8]
 8006e0e:	68eb      	ldr	r3, [r5, #12]
 8006e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e12:	7c2b      	ldrb	r3, [r5, #16]
 8006e14:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006e16:	4a61      	ldr	r2, [pc, #388]	@ (8006f9c <loadMenuTexts+0xe90>)
 8006e18:	4b61      	ldr	r3, [pc, #388]	@ (8006fa0 <loadMenuTexts+0xe94>)
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	461d      	mov	r5, r3
 8006e1e:	6828      	ldr	r0, [r5, #0]
 8006e20:	6869      	ldr	r1, [r5, #4]
 8006e22:	68aa      	ldr	r2, [r5, #8]
 8006e24:	68eb      	ldr	r3, [r5, #12]
 8006e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e28:	7c2b      	ldrb	r3, [r5, #16]
 8006e2a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8006fa4 <loadMenuTexts+0xe98>)
 8006e2e:	4b5e      	ldr	r3, [pc, #376]	@ (8006fa8 <loadMenuTexts+0xe9c>)
 8006e30:	4614      	mov	r4, r2
 8006e32:	461d      	mov	r5, r3
 8006e34:	6828      	ldr	r0, [r5, #0]
 8006e36:	6869      	ldr	r1, [r5, #4]
 8006e38:	68aa      	ldr	r2, [r5, #8]
 8006e3a:	68eb      	ldr	r3, [r5, #12]
 8006e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e3e:	7c2b      	ldrb	r3, [r5, #16]
 8006e40:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006e42:	4a5a      	ldr	r2, [pc, #360]	@ (8006fac <loadMenuTexts+0xea0>)
 8006e44:	4b5a      	ldr	r3, [pc, #360]	@ (8006fb0 <loadMenuTexts+0xea4>)
 8006e46:	4614      	mov	r4, r2
 8006e48:	461d      	mov	r5, r3
 8006e4a:	6828      	ldr	r0, [r5, #0]
 8006e4c:	6869      	ldr	r1, [r5, #4]
 8006e4e:	68aa      	ldr	r2, [r5, #8]
 8006e50:	68eb      	ldr	r3, [r5, #12]
 8006e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e54:	7c2b      	ldrb	r3, [r5, #16]
 8006e56:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006e58:	4a56      	ldr	r2, [pc, #344]	@ (8006fb4 <loadMenuTexts+0xea8>)
 8006e5a:	4b57      	ldr	r3, [pc, #348]	@ (8006fb8 <loadMenuTexts+0xeac>)
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	461d      	mov	r5, r3
 8006e60:	6828      	ldr	r0, [r5, #0]
 8006e62:	6869      	ldr	r1, [r5, #4]
 8006e64:	68aa      	ldr	r2, [r5, #8]
 8006e66:	68eb      	ldr	r3, [r5, #12]
 8006e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6a:	7c2b      	ldrb	r3, [r5, #16]
 8006e6c:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006e6e:	4a53      	ldr	r2, [pc, #332]	@ (8006fbc <loadMenuTexts+0xeb0>)
 8006e70:	4b53      	ldr	r3, [pc, #332]	@ (8006fc0 <loadMenuTexts+0xeb4>)
 8006e72:	4614      	mov	r4, r2
 8006e74:	461d      	mov	r5, r3
 8006e76:	6828      	ldr	r0, [r5, #0]
 8006e78:	6869      	ldr	r1, [r5, #4]
 8006e7a:	68aa      	ldr	r2, [r5, #8]
 8006e7c:	68eb      	ldr	r3, [r5, #12]
 8006e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e80:	7c2b      	ldrb	r3, [r5, #16]
 8006e82:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006e84:	4a4f      	ldr	r2, [pc, #316]	@ (8006fc4 <loadMenuTexts+0xeb8>)
 8006e86:	4b50      	ldr	r3, [pc, #320]	@ (8006fc8 <loadMenuTexts+0xebc>)
 8006e88:	4614      	mov	r4, r2
 8006e8a:	461d      	mov	r5, r3
 8006e8c:	6828      	ldr	r0, [r5, #0]
 8006e8e:	6869      	ldr	r1, [r5, #4]
 8006e90:	68aa      	ldr	r2, [r5, #8]
 8006e92:	68eb      	ldr	r3, [r5, #12]
 8006e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e96:	7c2b      	ldrb	r3, [r5, #16]
 8006e98:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8006fcc <loadMenuTexts+0xec0>)
 8006e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8006fd0 <loadMenuTexts+0xec4>)
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461d      	mov	r5, r3
 8006ea2:	6828      	ldr	r0, [r5, #0]
 8006ea4:	6869      	ldr	r1, [r5, #4]
 8006ea6:	68aa      	ldr	r2, [r5, #8]
 8006ea8:	68eb      	ldr	r3, [r5, #12]
 8006eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eac:	7c2b      	ldrb	r3, [r5, #16]
 8006eae:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006eb0:	4a48      	ldr	r2, [pc, #288]	@ (8006fd4 <loadMenuTexts+0xec8>)
 8006eb2:	e091      	b.n	8006fd8 <loadMenuTexts+0xecc>
 8006eb4:	20001220 	.word	0x20001220
 8006eb8:	20000704 	.word	0x20000704
 8006ebc:	20001234 	.word	0x20001234
 8006ec0:	20000718 	.word	0x20000718
 8006ec4:	20001248 	.word	0x20001248
 8006ec8:	2000072c 	.word	0x2000072c
 8006ecc:	2000125c 	.word	0x2000125c
 8006ed0:	20000740 	.word	0x20000740
 8006ed4:	20001270 	.word	0x20001270
 8006ed8:	20000754 	.word	0x20000754
 8006edc:	20001284 	.word	0x20001284
 8006ee0:	20000768 	.word	0x20000768
 8006ee4:	20001298 	.word	0x20001298
 8006ee8:	2000077c 	.word	0x2000077c
 8006eec:	200012ac 	.word	0x200012ac
 8006ef0:	20000790 	.word	0x20000790
 8006ef4:	200012c0 	.word	0x200012c0
 8006ef8:	200007a4 	.word	0x200007a4
 8006efc:	200012d4 	.word	0x200012d4
 8006f00:	200007b8 	.word	0x200007b8
 8006f04:	200012e8 	.word	0x200012e8
 8006f08:	200007cc 	.word	0x200007cc
 8006f0c:	200012fc 	.word	0x200012fc
 8006f10:	200007e0 	.word	0x200007e0
 8006f14:	20001310 	.word	0x20001310
 8006f18:	200007f4 	.word	0x200007f4
 8006f1c:	20001324 	.word	0x20001324
 8006f20:	20000808 	.word	0x20000808
 8006f24:	20001338 	.word	0x20001338
 8006f28:	2000081c 	.word	0x2000081c
 8006f2c:	2000134c 	.word	0x2000134c
 8006f30:	20000830 	.word	0x20000830
 8006f34:	20001360 	.word	0x20001360
 8006f38:	20000844 	.word	0x20000844
 8006f3c:	20001374 	.word	0x20001374
 8006f40:	20000858 	.word	0x20000858
 8006f44:	20001388 	.word	0x20001388
 8006f48:	2000086c 	.word	0x2000086c
 8006f4c:	2000139c 	.word	0x2000139c
 8006f50:	20000880 	.word	0x20000880
 8006f54:	200013b0 	.word	0x200013b0
 8006f58:	20000894 	.word	0x20000894
 8006f5c:	200013c4 	.word	0x200013c4
 8006f60:	200008a8 	.word	0x200008a8
 8006f64:	200013d8 	.word	0x200013d8
 8006f68:	200008bc 	.word	0x200008bc
 8006f6c:	200013ec 	.word	0x200013ec
 8006f70:	200008d0 	.word	0x200008d0
 8006f74:	20001400 	.word	0x20001400
 8006f78:	200008e4 	.word	0x200008e4
 8006f7c:	20001414 	.word	0x20001414
 8006f80:	200008f8 	.word	0x200008f8
 8006f84:	20001428 	.word	0x20001428
 8006f88:	2000090c 	.word	0x2000090c
 8006f8c:	2000143c 	.word	0x2000143c
 8006f90:	20000920 	.word	0x20000920
 8006f94:	20001450 	.word	0x20001450
 8006f98:	20000934 	.word	0x20000934
 8006f9c:	20001464 	.word	0x20001464
 8006fa0:	20000948 	.word	0x20000948
 8006fa4:	20001478 	.word	0x20001478
 8006fa8:	2000095c 	.word	0x2000095c
 8006fac:	2000148c 	.word	0x2000148c
 8006fb0:	20000970 	.word	0x20000970
 8006fb4:	200014a0 	.word	0x200014a0
 8006fb8:	20000984 	.word	0x20000984
 8006fbc:	200014b4 	.word	0x200014b4
 8006fc0:	20000998 	.word	0x20000998
 8006fc4:	200014c8 	.word	0x200014c8
 8006fc8:	200009ac 	.word	0x200009ac
 8006fcc:	200014dc 	.word	0x200014dc
 8006fd0:	200009c0 	.word	0x200009c0
 8006fd4:	200014f0 	.word	0x200014f0
 8006fd8:	4bc7      	ldr	r3, [pc, #796]	@ (80072f8 <loadMenuTexts+0x11ec>)
 8006fda:	4614      	mov	r4, r2
 8006fdc:	461d      	mov	r5, r3
 8006fde:	6828      	ldr	r0, [r5, #0]
 8006fe0:	6869      	ldr	r1, [r5, #4]
 8006fe2:	68aa      	ldr	r2, [r5, #8]
 8006fe4:	68eb      	ldr	r3, [r5, #12]
 8006fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe8:	7c2b      	ldrb	r3, [r5, #16]
 8006fea:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006fec:	4ac3      	ldr	r2, [pc, #780]	@ (80072fc <loadMenuTexts+0x11f0>)
 8006fee:	4bc4      	ldr	r3, [pc, #784]	@ (8007300 <loadMenuTexts+0x11f4>)
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	461d      	mov	r5, r3
 8006ff4:	6828      	ldr	r0, [r5, #0]
 8006ff6:	6869      	ldr	r1, [r5, #4]
 8006ff8:	68aa      	ldr	r2, [r5, #8]
 8006ffa:	68eb      	ldr	r3, [r5, #12]
 8006ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ffe:	7c2b      	ldrb	r3, [r5, #16]
 8007000:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007002:	4ac0      	ldr	r2, [pc, #768]	@ (8007304 <loadMenuTexts+0x11f8>)
 8007004:	4bc0      	ldr	r3, [pc, #768]	@ (8007308 <loadMenuTexts+0x11fc>)
 8007006:	4614      	mov	r4, r2
 8007008:	461d      	mov	r5, r3
 800700a:	6828      	ldr	r0, [r5, #0]
 800700c:	6869      	ldr	r1, [r5, #4]
 800700e:	68aa      	ldr	r2, [r5, #8]
 8007010:	68eb      	ldr	r3, [r5, #12]
 8007012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007014:	7c2b      	ldrb	r3, [r5, #16]
 8007016:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007018:	4abc      	ldr	r2, [pc, #752]	@ (800730c <loadMenuTexts+0x1200>)
 800701a:	4bbd      	ldr	r3, [pc, #756]	@ (8007310 <loadMenuTexts+0x1204>)
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	6828      	ldr	r0, [r5, #0]
 8007022:	6869      	ldr	r1, [r5, #4]
 8007024:	68aa      	ldr	r2, [r5, #8]
 8007026:	68eb      	ldr	r3, [r5, #12]
 8007028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702a:	7c2b      	ldrb	r3, [r5, #16]
 800702c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800702e:	4ab9      	ldr	r2, [pc, #740]	@ (8007314 <loadMenuTexts+0x1208>)
 8007030:	4bb9      	ldr	r3, [pc, #740]	@ (8007318 <loadMenuTexts+0x120c>)
 8007032:	4614      	mov	r4, r2
 8007034:	461d      	mov	r5, r3
 8007036:	6828      	ldr	r0, [r5, #0]
 8007038:	6869      	ldr	r1, [r5, #4]
 800703a:	68aa      	ldr	r2, [r5, #8]
 800703c:	68eb      	ldr	r3, [r5, #12]
 800703e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007040:	7c2b      	ldrb	r3, [r5, #16]
 8007042:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007044:	4ab5      	ldr	r2, [pc, #724]	@ (800731c <loadMenuTexts+0x1210>)
 8007046:	4bb6      	ldr	r3, [pc, #728]	@ (8007320 <loadMenuTexts+0x1214>)
 8007048:	4614      	mov	r4, r2
 800704a:	461d      	mov	r5, r3
 800704c:	6828      	ldr	r0, [r5, #0]
 800704e:	6869      	ldr	r1, [r5, #4]
 8007050:	68aa      	ldr	r2, [r5, #8]
 8007052:	68eb      	ldr	r3, [r5, #12]
 8007054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007056:	7c2b      	ldrb	r3, [r5, #16]
 8007058:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 800705a:	4ab2      	ldr	r2, [pc, #712]	@ (8007324 <loadMenuTexts+0x1218>)
 800705c:	4bb2      	ldr	r3, [pc, #712]	@ (8007328 <loadMenuTexts+0x121c>)
 800705e:	4614      	mov	r4, r2
 8007060:	461d      	mov	r5, r3
 8007062:	6828      	ldr	r0, [r5, #0]
 8007064:	6869      	ldr	r1, [r5, #4]
 8007066:	68aa      	ldr	r2, [r5, #8]
 8007068:	68eb      	ldr	r3, [r5, #12]
 800706a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706c:	7c2b      	ldrb	r3, [r5, #16]
 800706e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8007070:	4aae      	ldr	r2, [pc, #696]	@ (800732c <loadMenuTexts+0x1220>)
 8007072:	4baf      	ldr	r3, [pc, #700]	@ (8007330 <loadMenuTexts+0x1224>)
 8007074:	4614      	mov	r4, r2
 8007076:	461d      	mov	r5, r3
 8007078:	6828      	ldr	r0, [r5, #0]
 800707a:	6869      	ldr	r1, [r5, #4]
 800707c:	68aa      	ldr	r2, [r5, #8]
 800707e:	68eb      	ldr	r3, [r5, #12]
 8007080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007082:	7c2b      	ldrb	r3, [r5, #16]
 8007084:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8007086:	4aab      	ldr	r2, [pc, #684]	@ (8007334 <loadMenuTexts+0x1228>)
 8007088:	4bab      	ldr	r3, [pc, #684]	@ (8007338 <loadMenuTexts+0x122c>)
 800708a:	4614      	mov	r4, r2
 800708c:	461d      	mov	r5, r3
 800708e:	6828      	ldr	r0, [r5, #0]
 8007090:	6869      	ldr	r1, [r5, #4]
 8007092:	68aa      	ldr	r2, [r5, #8]
 8007094:	68eb      	ldr	r3, [r5, #12]
 8007096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007098:	7c2b      	ldrb	r3, [r5, #16]
 800709a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 800709c:	4aa7      	ldr	r2, [pc, #668]	@ (800733c <loadMenuTexts+0x1230>)
 800709e:	4ba8      	ldr	r3, [pc, #672]	@ (8007340 <loadMenuTexts+0x1234>)
 80070a0:	4614      	mov	r4, r2
 80070a2:	461d      	mov	r5, r3
 80070a4:	6828      	ldr	r0, [r5, #0]
 80070a6:	6869      	ldr	r1, [r5, #4]
 80070a8:	68aa      	ldr	r2, [r5, #8]
 80070aa:	68eb      	ldr	r3, [r5, #12]
 80070ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ae:	7c2b      	ldrb	r3, [r5, #16]
 80070b0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80070b2:	4aa4      	ldr	r2, [pc, #656]	@ (8007344 <loadMenuTexts+0x1238>)
 80070b4:	4ba4      	ldr	r3, [pc, #656]	@ (8007348 <loadMenuTexts+0x123c>)
 80070b6:	4614      	mov	r4, r2
 80070b8:	461d      	mov	r5, r3
 80070ba:	6828      	ldr	r0, [r5, #0]
 80070bc:	6869      	ldr	r1, [r5, #4]
 80070be:	68aa      	ldr	r2, [r5, #8]
 80070c0:	68eb      	ldr	r3, [r5, #12]
 80070c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c4:	7c2b      	ldrb	r3, [r5, #16]
 80070c6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80070c8:	4aa0      	ldr	r2, [pc, #640]	@ (800734c <loadMenuTexts+0x1240>)
 80070ca:	4ba1      	ldr	r3, [pc, #644]	@ (8007350 <loadMenuTexts+0x1244>)
 80070cc:	4614      	mov	r4, r2
 80070ce:	461d      	mov	r5, r3
 80070d0:	6828      	ldr	r0, [r5, #0]
 80070d2:	6869      	ldr	r1, [r5, #4]
 80070d4:	68aa      	ldr	r2, [r5, #8]
 80070d6:	68eb      	ldr	r3, [r5, #12]
 80070d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070da:	7c2b      	ldrb	r3, [r5, #16]
 80070dc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 80070de:	4a9d      	ldr	r2, [pc, #628]	@ (8007354 <loadMenuTexts+0x1248>)
 80070e0:	4b9d      	ldr	r3, [pc, #628]	@ (8007358 <loadMenuTexts+0x124c>)
 80070e2:	4614      	mov	r4, r2
 80070e4:	461d      	mov	r5, r3
 80070e6:	6828      	ldr	r0, [r5, #0]
 80070e8:	6869      	ldr	r1, [r5, #4]
 80070ea:	68aa      	ldr	r2, [r5, #8]
 80070ec:	68eb      	ldr	r3, [r5, #12]
 80070ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f0:	7c2b      	ldrb	r3, [r5, #16]
 80070f2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 80070f4:	4a99      	ldr	r2, [pc, #612]	@ (800735c <loadMenuTexts+0x1250>)
 80070f6:	4b9a      	ldr	r3, [pc, #616]	@ (8007360 <loadMenuTexts+0x1254>)
 80070f8:	4614      	mov	r4, r2
 80070fa:	461d      	mov	r5, r3
 80070fc:	6828      	ldr	r0, [r5, #0]
 80070fe:	6869      	ldr	r1, [r5, #4]
 8007100:	68aa      	ldr	r2, [r5, #8]
 8007102:	68eb      	ldr	r3, [r5, #12]
 8007104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007106:	7c2b      	ldrb	r3, [r5, #16]
 8007108:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800710a:	4a96      	ldr	r2, [pc, #600]	@ (8007364 <loadMenuTexts+0x1258>)
 800710c:	4b96      	ldr	r3, [pc, #600]	@ (8007368 <loadMenuTexts+0x125c>)
 800710e:	4614      	mov	r4, r2
 8007110:	461d      	mov	r5, r3
 8007112:	6828      	ldr	r0, [r5, #0]
 8007114:	6869      	ldr	r1, [r5, #4]
 8007116:	68aa      	ldr	r2, [r5, #8]
 8007118:	68eb      	ldr	r3, [r5, #12]
 800711a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711c:	7c2b      	ldrb	r3, [r5, #16]
 800711e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007120:	4a92      	ldr	r2, [pc, #584]	@ (800736c <loadMenuTexts+0x1260>)
 8007122:	4b93      	ldr	r3, [pc, #588]	@ (8007370 <loadMenuTexts+0x1264>)
 8007124:	4614      	mov	r4, r2
 8007126:	461d      	mov	r5, r3
 8007128:	6828      	ldr	r0, [r5, #0]
 800712a:	6869      	ldr	r1, [r5, #4]
 800712c:	68aa      	ldr	r2, [r5, #8]
 800712e:	68eb      	ldr	r3, [r5, #12]
 8007130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007132:	7c2b      	ldrb	r3, [r5, #16]
 8007134:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007136:	4a8f      	ldr	r2, [pc, #572]	@ (8007374 <loadMenuTexts+0x1268>)
 8007138:	4b8f      	ldr	r3, [pc, #572]	@ (8007378 <loadMenuTexts+0x126c>)
 800713a:	4614      	mov	r4, r2
 800713c:	461d      	mov	r5, r3
 800713e:	6828      	ldr	r0, [r5, #0]
 8007140:	6869      	ldr	r1, [r5, #4]
 8007142:	68aa      	ldr	r2, [r5, #8]
 8007144:	68eb      	ldr	r3, [r5, #12]
 8007146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007148:	7c2b      	ldrb	r3, [r5, #16]
 800714a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 800714c:	4a8b      	ldr	r2, [pc, #556]	@ (800737c <loadMenuTexts+0x1270>)
 800714e:	4b8c      	ldr	r3, [pc, #560]	@ (8007380 <loadMenuTexts+0x1274>)
 8007150:	4614      	mov	r4, r2
 8007152:	461d      	mov	r5, r3
 8007154:	6828      	ldr	r0, [r5, #0]
 8007156:	6869      	ldr	r1, [r5, #4]
 8007158:	68aa      	ldr	r2, [r5, #8]
 800715a:	68eb      	ldr	r3, [r5, #12]
 800715c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800715e:	7c2b      	ldrb	r3, [r5, #16]
 8007160:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8007162:	4a88      	ldr	r2, [pc, #544]	@ (8007384 <loadMenuTexts+0x1278>)
 8007164:	4b88      	ldr	r3, [pc, #544]	@ (8007388 <loadMenuTexts+0x127c>)
 8007166:	4614      	mov	r4, r2
 8007168:	461d      	mov	r5, r3
 800716a:	6828      	ldr	r0, [r5, #0]
 800716c:	6869      	ldr	r1, [r5, #4]
 800716e:	68aa      	ldr	r2, [r5, #8]
 8007170:	68eb      	ldr	r3, [r5, #12]
 8007172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007174:	7c2b      	ldrb	r3, [r5, #16]
 8007176:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007178:	4a84      	ldr	r2, [pc, #528]	@ (800738c <loadMenuTexts+0x1280>)
 800717a:	4b85      	ldr	r3, [pc, #532]	@ (8007390 <loadMenuTexts+0x1284>)
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	6828      	ldr	r0, [r5, #0]
 8007182:	6869      	ldr	r1, [r5, #4]
 8007184:	68aa      	ldr	r2, [r5, #8]
 8007186:	68eb      	ldr	r3, [r5, #12]
 8007188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800718a:	7c2b      	ldrb	r3, [r5, #16]
 800718c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 800718e:	4a81      	ldr	r2, [pc, #516]	@ (8007394 <loadMenuTexts+0x1288>)
 8007190:	4b81      	ldr	r3, [pc, #516]	@ (8007398 <loadMenuTexts+0x128c>)
 8007192:	4614      	mov	r4, r2
 8007194:	461d      	mov	r5, r3
 8007196:	6828      	ldr	r0, [r5, #0]
 8007198:	6869      	ldr	r1, [r5, #4]
 800719a:	68aa      	ldr	r2, [r5, #8]
 800719c:	68eb      	ldr	r3, [r5, #12]
 800719e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a0:	7c2b      	ldrb	r3, [r5, #16]
 80071a2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80071a4:	4a7d      	ldr	r2, [pc, #500]	@ (800739c <loadMenuTexts+0x1290>)
 80071a6:	4b7e      	ldr	r3, [pc, #504]	@ (80073a0 <loadMenuTexts+0x1294>)
 80071a8:	4614      	mov	r4, r2
 80071aa:	461d      	mov	r5, r3
 80071ac:	6828      	ldr	r0, [r5, #0]
 80071ae:	6869      	ldr	r1, [r5, #4]
 80071b0:	68aa      	ldr	r2, [r5, #8]
 80071b2:	68eb      	ldr	r3, [r5, #12]
 80071b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b6:	7c2b      	ldrb	r3, [r5, #16]
 80071b8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80071ba:	4a7a      	ldr	r2, [pc, #488]	@ (80073a4 <loadMenuTexts+0x1298>)
 80071bc:	4b7a      	ldr	r3, [pc, #488]	@ (80073a8 <loadMenuTexts+0x129c>)
 80071be:	4614      	mov	r4, r2
 80071c0:	461d      	mov	r5, r3
 80071c2:	6828      	ldr	r0, [r5, #0]
 80071c4:	6869      	ldr	r1, [r5, #4]
 80071c6:	68aa      	ldr	r2, [r5, #8]
 80071c8:	68eb      	ldr	r3, [r5, #12]
 80071ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071cc:	7c2b      	ldrb	r3, [r5, #16]
 80071ce:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 80071d0:	4a76      	ldr	r2, [pc, #472]	@ (80073ac <loadMenuTexts+0x12a0>)
 80071d2:	4b77      	ldr	r3, [pc, #476]	@ (80073b0 <loadMenuTexts+0x12a4>)
 80071d4:	4614      	mov	r4, r2
 80071d6:	461d      	mov	r5, r3
 80071d8:	6828      	ldr	r0, [r5, #0]
 80071da:	6869      	ldr	r1, [r5, #4]
 80071dc:	68aa      	ldr	r2, [r5, #8]
 80071de:	68eb      	ldr	r3, [r5, #12]
 80071e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e2:	7c2b      	ldrb	r3, [r5, #16]
 80071e4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 80071e6:	4a73      	ldr	r2, [pc, #460]	@ (80073b4 <loadMenuTexts+0x12a8>)
 80071e8:	4b73      	ldr	r3, [pc, #460]	@ (80073b8 <loadMenuTexts+0x12ac>)
 80071ea:	4614      	mov	r4, r2
 80071ec:	461d      	mov	r5, r3
 80071ee:	6828      	ldr	r0, [r5, #0]
 80071f0:	6869      	ldr	r1, [r5, #4]
 80071f2:	68aa      	ldr	r2, [r5, #8]
 80071f4:	68eb      	ldr	r3, [r5, #12]
 80071f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071f8:	7c2b      	ldrb	r3, [r5, #16]
 80071fa:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 80071fc:	4a6f      	ldr	r2, [pc, #444]	@ (80073bc <loadMenuTexts+0x12b0>)
 80071fe:	4b70      	ldr	r3, [pc, #448]	@ (80073c0 <loadMenuTexts+0x12b4>)
 8007200:	4614      	mov	r4, r2
 8007202:	461d      	mov	r5, r3
 8007204:	6828      	ldr	r0, [r5, #0]
 8007206:	6869      	ldr	r1, [r5, #4]
 8007208:	68aa      	ldr	r2, [r5, #8]
 800720a:	68eb      	ldr	r3, [r5, #12]
 800720c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800720e:	7c2b      	ldrb	r3, [r5, #16]
 8007210:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007212:	4a6c      	ldr	r2, [pc, #432]	@ (80073c4 <loadMenuTexts+0x12b8>)
 8007214:	4b6c      	ldr	r3, [pc, #432]	@ (80073c8 <loadMenuTexts+0x12bc>)
 8007216:	4614      	mov	r4, r2
 8007218:	461d      	mov	r5, r3
 800721a:	6828      	ldr	r0, [r5, #0]
 800721c:	6869      	ldr	r1, [r5, #4]
 800721e:	68aa      	ldr	r2, [r5, #8]
 8007220:	68eb      	ldr	r3, [r5, #12]
 8007222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007224:	7c2b      	ldrb	r3, [r5, #16]
 8007226:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007228:	4a68      	ldr	r2, [pc, #416]	@ (80073cc <loadMenuTexts+0x12c0>)
 800722a:	4b69      	ldr	r3, [pc, #420]	@ (80073d0 <loadMenuTexts+0x12c4>)
 800722c:	4614      	mov	r4, r2
 800722e:	461d      	mov	r5, r3
 8007230:	6828      	ldr	r0, [r5, #0]
 8007232:	6869      	ldr	r1, [r5, #4]
 8007234:	68aa      	ldr	r2, [r5, #8]
 8007236:	68eb      	ldr	r3, [r5, #12]
 8007238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723a:	7c2b      	ldrb	r3, [r5, #16]
 800723c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800723e:	4a65      	ldr	r2, [pc, #404]	@ (80073d4 <loadMenuTexts+0x12c8>)
 8007240:	4b65      	ldr	r3, [pc, #404]	@ (80073d8 <loadMenuTexts+0x12cc>)
 8007242:	4614      	mov	r4, r2
 8007244:	461d      	mov	r5, r3
 8007246:	6828      	ldr	r0, [r5, #0]
 8007248:	6869      	ldr	r1, [r5, #4]
 800724a:	68aa      	ldr	r2, [r5, #8]
 800724c:	68eb      	ldr	r3, [r5, #12]
 800724e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007250:	7c2b      	ldrb	r3, [r5, #16]
 8007252:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007254:	4a61      	ldr	r2, [pc, #388]	@ (80073dc <loadMenuTexts+0x12d0>)
 8007256:	4b62      	ldr	r3, [pc, #392]	@ (80073e0 <loadMenuTexts+0x12d4>)
 8007258:	4614      	mov	r4, r2
 800725a:	461d      	mov	r5, r3
 800725c:	6828      	ldr	r0, [r5, #0]
 800725e:	6869      	ldr	r1, [r5, #4]
 8007260:	68aa      	ldr	r2, [r5, #8]
 8007262:	68eb      	ldr	r3, [r5, #12]
 8007264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007266:	7c2b      	ldrb	r3, [r5, #16]
 8007268:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800726a:	4a5e      	ldr	r2, [pc, #376]	@ (80073e4 <loadMenuTexts+0x12d8>)
 800726c:	4b5e      	ldr	r3, [pc, #376]	@ (80073e8 <loadMenuTexts+0x12dc>)
 800726e:	4614      	mov	r4, r2
 8007270:	461d      	mov	r5, r3
 8007272:	6828      	ldr	r0, [r5, #0]
 8007274:	6869      	ldr	r1, [r5, #4]
 8007276:	68aa      	ldr	r2, [r5, #8]
 8007278:	68eb      	ldr	r3, [r5, #12]
 800727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727c:	7c2b      	ldrb	r3, [r5, #16]
 800727e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007280:	4a5a      	ldr	r2, [pc, #360]	@ (80073ec <loadMenuTexts+0x12e0>)
 8007282:	4b5b      	ldr	r3, [pc, #364]	@ (80073f0 <loadMenuTexts+0x12e4>)
 8007284:	4614      	mov	r4, r2
 8007286:	461d      	mov	r5, r3
 8007288:	6828      	ldr	r0, [r5, #0]
 800728a:	6869      	ldr	r1, [r5, #4]
 800728c:	68aa      	ldr	r2, [r5, #8]
 800728e:	68eb      	ldr	r3, [r5, #12]
 8007290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007292:	7c2b      	ldrb	r3, [r5, #16]
 8007294:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007296:	4a57      	ldr	r2, [pc, #348]	@ (80073f4 <loadMenuTexts+0x12e8>)
 8007298:	4b57      	ldr	r3, [pc, #348]	@ (80073f8 <loadMenuTexts+0x12ec>)
 800729a:	4614      	mov	r4, r2
 800729c:	461d      	mov	r5, r3
 800729e:	6828      	ldr	r0, [r5, #0]
 80072a0:	6869      	ldr	r1, [r5, #4]
 80072a2:	68aa      	ldr	r2, [r5, #8]
 80072a4:	68eb      	ldr	r3, [r5, #12]
 80072a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a8:	7c2b      	ldrb	r3, [r5, #16]
 80072aa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80072ac:	4a53      	ldr	r2, [pc, #332]	@ (80073fc <loadMenuTexts+0x12f0>)
 80072ae:	4b54      	ldr	r3, [pc, #336]	@ (8007400 <loadMenuTexts+0x12f4>)
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	6828      	ldr	r0, [r5, #0]
 80072b6:	6869      	ldr	r1, [r5, #4]
 80072b8:	68aa      	ldr	r2, [r5, #8]
 80072ba:	68eb      	ldr	r3, [r5, #12]
 80072bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072be:	7c2b      	ldrb	r3, [r5, #16]
 80072c0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80072c2:	4a50      	ldr	r2, [pc, #320]	@ (8007404 <loadMenuTexts+0x12f8>)
 80072c4:	4b50      	ldr	r3, [pc, #320]	@ (8007408 <loadMenuTexts+0x12fc>)
 80072c6:	4614      	mov	r4, r2
 80072c8:	461d      	mov	r5, r3
 80072ca:	6828      	ldr	r0, [r5, #0]
 80072cc:	6869      	ldr	r1, [r5, #4]
 80072ce:	68aa      	ldr	r2, [r5, #8]
 80072d0:	68eb      	ldr	r3, [r5, #12]
 80072d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d4:	7c2b      	ldrb	r3, [r5, #16]
 80072d6:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80072d8:	4a4c      	ldr	r2, [pc, #304]	@ (800740c <loadMenuTexts+0x1300>)
 80072da:	4b4d      	ldr	r3, [pc, #308]	@ (8007410 <loadMenuTexts+0x1304>)
 80072dc:	4614      	mov	r4, r2
 80072de:	461d      	mov	r5, r3
 80072e0:	6828      	ldr	r0, [r5, #0]
 80072e2:	6869      	ldr	r1, [r5, #4]
 80072e4:	68aa      	ldr	r2, [r5, #8]
 80072e6:	68eb      	ldr	r3, [r5, #12]
 80072e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ea:	7c2b      	ldrb	r3, [r5, #16]
 80072ec:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80072ee:	4a49      	ldr	r2, [pc, #292]	@ (8007414 <loadMenuTexts+0x1308>)
 80072f0:	4b49      	ldr	r3, [pc, #292]	@ (8007418 <loadMenuTexts+0x130c>)
 80072f2:	4614      	mov	r4, r2
 80072f4:	461d      	mov	r5, r3
 80072f6:	e091      	b.n	800741c <loadMenuTexts+0x1310>
 80072f8:	200009d4 	.word	0x200009d4
 80072fc:	20001504 	.word	0x20001504
 8007300:	200009e8 	.word	0x200009e8
 8007304:	20001518 	.word	0x20001518
 8007308:	200009fc 	.word	0x200009fc
 800730c:	2000152c 	.word	0x2000152c
 8007310:	20000a10 	.word	0x20000a10
 8007314:	20001540 	.word	0x20001540
 8007318:	20000a24 	.word	0x20000a24
 800731c:	20001554 	.word	0x20001554
 8007320:	20000a38 	.word	0x20000a38
 8007324:	20001568 	.word	0x20001568
 8007328:	20000a4c 	.word	0x20000a4c
 800732c:	2000157c 	.word	0x2000157c
 8007330:	20000a60 	.word	0x20000a60
 8007334:	20001590 	.word	0x20001590
 8007338:	20000a74 	.word	0x20000a74
 800733c:	200015a4 	.word	0x200015a4
 8007340:	20000a88 	.word	0x20000a88
 8007344:	200015b8 	.word	0x200015b8
 8007348:	20000a9c 	.word	0x20000a9c
 800734c:	200015cc 	.word	0x200015cc
 8007350:	20000ab0 	.word	0x20000ab0
 8007354:	200015e0 	.word	0x200015e0
 8007358:	20000ac4 	.word	0x20000ac4
 800735c:	200015f4 	.word	0x200015f4
 8007360:	20000ad8 	.word	0x20000ad8
 8007364:	20001608 	.word	0x20001608
 8007368:	20000aec 	.word	0x20000aec
 800736c:	2000161c 	.word	0x2000161c
 8007370:	20000b00 	.word	0x20000b00
 8007374:	20001630 	.word	0x20001630
 8007378:	20000b14 	.word	0x20000b14
 800737c:	20001644 	.word	0x20001644
 8007380:	20000b28 	.word	0x20000b28
 8007384:	20001658 	.word	0x20001658
 8007388:	20000b3c 	.word	0x20000b3c
 800738c:	2000166c 	.word	0x2000166c
 8007390:	20000b50 	.word	0x20000b50
 8007394:	20001680 	.word	0x20001680
 8007398:	20000b64 	.word	0x20000b64
 800739c:	20001694 	.word	0x20001694
 80073a0:	20000b78 	.word	0x20000b78
 80073a4:	200016a8 	.word	0x200016a8
 80073a8:	20000b8c 	.word	0x20000b8c
 80073ac:	200016bc 	.word	0x200016bc
 80073b0:	20000ba0 	.word	0x20000ba0
 80073b4:	200016d0 	.word	0x200016d0
 80073b8:	20000bb4 	.word	0x20000bb4
 80073bc:	200016e4 	.word	0x200016e4
 80073c0:	20000bc8 	.word	0x20000bc8
 80073c4:	200016f8 	.word	0x200016f8
 80073c8:	20000bdc 	.word	0x20000bdc
 80073cc:	2000170c 	.word	0x2000170c
 80073d0:	20000bf0 	.word	0x20000bf0
 80073d4:	20001720 	.word	0x20001720
 80073d8:	20000c04 	.word	0x20000c04
 80073dc:	20001734 	.word	0x20001734
 80073e0:	20000c18 	.word	0x20000c18
 80073e4:	20001748 	.word	0x20001748
 80073e8:	20000c2c 	.word	0x20000c2c
 80073ec:	2000175c 	.word	0x2000175c
 80073f0:	20000c40 	.word	0x20000c40
 80073f4:	20001770 	.word	0x20001770
 80073f8:	20000c54 	.word	0x20000c54
 80073fc:	20001784 	.word	0x20001784
 8007400:	20000c68 	.word	0x20000c68
 8007404:	20001798 	.word	0x20001798
 8007408:	20000cf4 	.word	0x20000cf4
 800740c:	200017ac 	.word	0x200017ac
 8007410:	20000d08 	.word	0x20000d08
 8007414:	200017c0 	.word	0x200017c0
 8007418:	20000ccc 	.word	0x20000ccc
 800741c:	6828      	ldr	r0, [r5, #0]
 800741e:	6869      	ldr	r1, [r5, #4]
 8007420:	68aa      	ldr	r2, [r5, #8]
 8007422:	68eb      	ldr	r3, [r5, #12]
 8007424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007426:	7c2b      	ldrb	r3, [r5, #16]
 8007428:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800742a:	4a5b      	ldr	r2, [pc, #364]	@ (8007598 <loadMenuTexts+0x148c>)
 800742c:	4b5b      	ldr	r3, [pc, #364]	@ (800759c <loadMenuTexts+0x1490>)
 800742e:	4614      	mov	r4, r2
 8007430:	461d      	mov	r5, r3
 8007432:	6828      	ldr	r0, [r5, #0]
 8007434:	6869      	ldr	r1, [r5, #4]
 8007436:	68aa      	ldr	r2, [r5, #8]
 8007438:	68eb      	ldr	r3, [r5, #12]
 800743a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743c:	7c2b      	ldrb	r3, [r5, #16]
 800743e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007440:	4a57      	ldr	r2, [pc, #348]	@ (80075a0 <loadMenuTexts+0x1494>)
 8007442:	4b58      	ldr	r3, [pc, #352]	@ (80075a4 <loadMenuTexts+0x1498>)
 8007444:	4614      	mov	r4, r2
 8007446:	461d      	mov	r5, r3
 8007448:	6828      	ldr	r0, [r5, #0]
 800744a:	6869      	ldr	r1, [r5, #4]
 800744c:	68aa      	ldr	r2, [r5, #8]
 800744e:	68eb      	ldr	r3, [r5, #12]
 8007450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007452:	7c2b      	ldrb	r3, [r5, #16]
 8007454:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007456:	4a54      	ldr	r2, [pc, #336]	@ (80075a8 <loadMenuTexts+0x149c>)
 8007458:	4b54      	ldr	r3, [pc, #336]	@ (80075ac <loadMenuTexts+0x14a0>)
 800745a:	4614      	mov	r4, r2
 800745c:	461d      	mov	r5, r3
 800745e:	6828      	ldr	r0, [r5, #0]
 8007460:	6869      	ldr	r1, [r5, #4]
 8007462:	68aa      	ldr	r2, [r5, #8]
 8007464:	68eb      	ldr	r3, [r5, #12]
 8007466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007468:	7c2b      	ldrb	r3, [r5, #16]
 800746a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 800746c:	4a50      	ldr	r2, [pc, #320]	@ (80075b0 <loadMenuTexts+0x14a4>)
 800746e:	4b51      	ldr	r3, [pc, #324]	@ (80075b4 <loadMenuTexts+0x14a8>)
 8007470:	4614      	mov	r4, r2
 8007472:	461d      	mov	r5, r3
 8007474:	6828      	ldr	r0, [r5, #0]
 8007476:	6869      	ldr	r1, [r5, #4]
 8007478:	68aa      	ldr	r2, [r5, #8]
 800747a:	68eb      	ldr	r3, [r5, #12]
 800747c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800747e:	7c2b      	ldrb	r3, [r5, #16]
 8007480:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 8007482:	4a4d      	ldr	r2, [pc, #308]	@ (80075b8 <loadMenuTexts+0x14ac>)
 8007484:	4b4d      	ldr	r3, [pc, #308]	@ (80075bc <loadMenuTexts+0x14b0>)
 8007486:	4614      	mov	r4, r2
 8007488:	461d      	mov	r5, r3
 800748a:	6828      	ldr	r0, [r5, #0]
 800748c:	6869      	ldr	r1, [r5, #4]
 800748e:	68aa      	ldr	r2, [r5, #8]
 8007490:	68eb      	ldr	r3, [r5, #12]
 8007492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007494:	7c2b      	ldrb	r3, [r5, #16]
 8007496:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007498:	4a49      	ldr	r2, [pc, #292]	@ (80075c0 <loadMenuTexts+0x14b4>)
 800749a:	4b4a      	ldr	r3, [pc, #296]	@ (80075c4 <loadMenuTexts+0x14b8>)
 800749c:	4614      	mov	r4, r2
 800749e:	461d      	mov	r5, r3
 80074a0:	6828      	ldr	r0, [r5, #0]
 80074a2:	6869      	ldr	r1, [r5, #4]
 80074a4:	68aa      	ldr	r2, [r5, #8]
 80074a6:	68eb      	ldr	r3, [r5, #12]
 80074a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074aa:	7c2b      	ldrb	r3, [r5, #16]
 80074ac:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80074ae:	4a46      	ldr	r2, [pc, #280]	@ (80075c8 <loadMenuTexts+0x14bc>)
 80074b0:	4b46      	ldr	r3, [pc, #280]	@ (80075cc <loadMenuTexts+0x14c0>)
 80074b2:	4614      	mov	r4, r2
 80074b4:	461d      	mov	r5, r3
 80074b6:	6828      	ldr	r0, [r5, #0]
 80074b8:	6869      	ldr	r1, [r5, #4]
 80074ba:	68aa      	ldr	r2, [r5, #8]
 80074bc:	68eb      	ldr	r3, [r5, #12]
 80074be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c0:	7c2b      	ldrb	r3, [r5, #16]
 80074c2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80074c4:	4a42      	ldr	r2, [pc, #264]	@ (80075d0 <loadMenuTexts+0x14c4>)
 80074c6:	4b43      	ldr	r3, [pc, #268]	@ (80075d4 <loadMenuTexts+0x14c8>)
 80074c8:	4614      	mov	r4, r2
 80074ca:	461d      	mov	r5, r3
 80074cc:	6828      	ldr	r0, [r5, #0]
 80074ce:	6869      	ldr	r1, [r5, #4]
 80074d0:	68aa      	ldr	r2, [r5, #8]
 80074d2:	68eb      	ldr	r3, [r5, #12]
 80074d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074d6:	7c2b      	ldrb	r3, [r5, #16]
 80074d8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80074da:	4a3f      	ldr	r2, [pc, #252]	@ (80075d8 <loadMenuTexts+0x14cc>)
 80074dc:	4b3f      	ldr	r3, [pc, #252]	@ (80075dc <loadMenuTexts+0x14d0>)
 80074de:	4614      	mov	r4, r2
 80074e0:	461d      	mov	r5, r3
 80074e2:	6828      	ldr	r0, [r5, #0]
 80074e4:	6869      	ldr	r1, [r5, #4]
 80074e6:	68aa      	ldr	r2, [r5, #8]
 80074e8:	68eb      	ldr	r3, [r5, #12]
 80074ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ec:	7c2b      	ldrb	r3, [r5, #16]
 80074ee:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80074f0:	4a3b      	ldr	r2, [pc, #236]	@ (80075e0 <loadMenuTexts+0x14d4>)
 80074f2:	4b3c      	ldr	r3, [pc, #240]	@ (80075e4 <loadMenuTexts+0x14d8>)
 80074f4:	4614      	mov	r4, r2
 80074f6:	461d      	mov	r5, r3
 80074f8:	6828      	ldr	r0, [r5, #0]
 80074fa:	6869      	ldr	r1, [r5, #4]
 80074fc:	68aa      	ldr	r2, [r5, #8]
 80074fe:	68eb      	ldr	r3, [r5, #12]
 8007500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007502:	7c2b      	ldrb	r3, [r5, #16]
 8007504:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007506:	4a38      	ldr	r2, [pc, #224]	@ (80075e8 <loadMenuTexts+0x14dc>)
 8007508:	4b38      	ldr	r3, [pc, #224]	@ (80075ec <loadMenuTexts+0x14e0>)
 800750a:	4614      	mov	r4, r2
 800750c:	461d      	mov	r5, r3
 800750e:	6828      	ldr	r0, [r5, #0]
 8007510:	6869      	ldr	r1, [r5, #4]
 8007512:	68aa      	ldr	r2, [r5, #8]
 8007514:	68eb      	ldr	r3, [r5, #12]
 8007516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007518:	7c2b      	ldrb	r3, [r5, #16]
 800751a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800751c:	4a34      	ldr	r2, [pc, #208]	@ (80075f0 <loadMenuTexts+0x14e4>)
 800751e:	4b35      	ldr	r3, [pc, #212]	@ (80075f4 <loadMenuTexts+0x14e8>)
 8007520:	4614      	mov	r4, r2
 8007522:	461d      	mov	r5, r3
 8007524:	6828      	ldr	r0, [r5, #0]
 8007526:	6869      	ldr	r1, [r5, #4]
 8007528:	68aa      	ldr	r2, [r5, #8]
 800752a:	68eb      	ldr	r3, [r5, #12]
 800752c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800752e:	7c2b      	ldrb	r3, [r5, #16]
 8007530:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007532:	4a31      	ldr	r2, [pc, #196]	@ (80075f8 <loadMenuTexts+0x14ec>)
 8007534:	4b31      	ldr	r3, [pc, #196]	@ (80075fc <loadMenuTexts+0x14f0>)
 8007536:	4614      	mov	r4, r2
 8007538:	461d      	mov	r5, r3
 800753a:	6828      	ldr	r0, [r5, #0]
 800753c:	6869      	ldr	r1, [r5, #4]
 800753e:	68aa      	ldr	r2, [r5, #8]
 8007540:	68eb      	ldr	r3, [r5, #12]
 8007542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007544:	7c2b      	ldrb	r3, [r5, #16]
 8007546:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007548:	4a2d      	ldr	r2, [pc, #180]	@ (8007600 <loadMenuTexts+0x14f4>)
 800754a:	4b2e      	ldr	r3, [pc, #184]	@ (8007604 <loadMenuTexts+0x14f8>)
 800754c:	4614      	mov	r4, r2
 800754e:	461d      	mov	r5, r3
 8007550:	6828      	ldr	r0, [r5, #0]
 8007552:	6869      	ldr	r1, [r5, #4]
 8007554:	68aa      	ldr	r2, [r5, #8]
 8007556:	68eb      	ldr	r3, [r5, #12]
 8007558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755a:	7c2b      	ldrb	r3, [r5, #16]
 800755c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800755e:	4a2a      	ldr	r2, [pc, #168]	@ (8007608 <loadMenuTexts+0x14fc>)
 8007560:	4b2a      	ldr	r3, [pc, #168]	@ (800760c <loadMenuTexts+0x1500>)
 8007562:	4614      	mov	r4, r2
 8007564:	461d      	mov	r5, r3
 8007566:	6828      	ldr	r0, [r5, #0]
 8007568:	6869      	ldr	r1, [r5, #4]
 800756a:	68aa      	ldr	r2, [r5, #8]
 800756c:	68eb      	ldr	r3, [r5, #12]
 800756e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007570:	7c2b      	ldrb	r3, [r5, #16]
 8007572:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007574:	4a26      	ldr	r2, [pc, #152]	@ (8007610 <loadMenuTexts+0x1504>)
 8007576:	4b27      	ldr	r3, [pc, #156]	@ (8007614 <loadMenuTexts+0x1508>)
 8007578:	4614      	mov	r4, r2
 800757a:	461d      	mov	r5, r3
 800757c:	6828      	ldr	r0, [r5, #0]
 800757e:	6869      	ldr	r1, [r5, #4]
 8007580:	68aa      	ldr	r2, [r5, #8]
 8007582:	68eb      	ldr	r3, [r5, #12]
 8007584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007586:	7c2b      	ldrb	r3, [r5, #16]
 8007588:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 800758a:	f000 f845 	bl	8007618 <menuVariableFinisher>
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bdb0      	pop	{r4, r5, r7, pc}
 8007596:	bf00      	nop
 8007598:	200017d4 	.word	0x200017d4
 800759c:	20000ce0 	.word	0x20000ce0
 80075a0:	200017e8 	.word	0x200017e8
 80075a4:	20000d44 	.word	0x20000d44
 80075a8:	200017fc 	.word	0x200017fc
 80075ac:	20000d58 	.word	0x20000d58
 80075b0:	20001810 	.word	0x20001810
 80075b4:	20000d94 	.word	0x20000d94
 80075b8:	20001824 	.word	0x20001824
 80075bc:	20000da8 	.word	0x20000da8
 80075c0:	20001838 	.word	0x20001838
 80075c4:	20000de4 	.word	0x20000de4
 80075c8:	2000184c 	.word	0x2000184c
 80075cc:	20000df8 	.word	0x20000df8
 80075d0:	20001860 	.word	0x20001860
 80075d4:	20000e20 	.word	0x20000e20
 80075d8:	20001874 	.word	0x20001874
 80075dc:	20000e48 	.word	0x20000e48
 80075e0:	20001888 	.word	0x20001888
 80075e4:	20000e70 	.word	0x20000e70
 80075e8:	2000189c 	.word	0x2000189c
 80075ec:	20000e98 	.word	0x20000e98
 80075f0:	200018b0 	.word	0x200018b0
 80075f4:	20000ec0 	.word	0x20000ec0
 80075f8:	200018c4 	.word	0x200018c4
 80075fc:	20000ee8 	.word	0x20000ee8
 8007600:	200018d8 	.word	0x200018d8
 8007604:	20000f10 	.word	0x20000f10
 8007608:	200018ec 	.word	0x200018ec
 800760c:	20000f38 	.word	0x20000f38
 8007610:	20001900 	.word	0x20001900
 8007614:	20000f60 	.word	0x20000f60

08007618 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 800761c:	4b99      	ldr	r3, [pc, #612]	@ (8007884 <menuVariableFinisher+0x26c>)
 800761e:	2200      	movs	r2, #0
 8007620:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007622:	4b99      	ldr	r3, [pc, #612]	@ (8007888 <menuVariableFinisher+0x270>)
 8007624:	2200      	movs	r2, #0
 8007626:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007628:	4b98      	ldr	r3, [pc, #608]	@ (800788c <menuVariableFinisher+0x274>)
 800762a:	2200      	movs	r2, #0
 800762c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800762e:	4b98      	ldr	r3, [pc, #608]	@ (8007890 <menuVariableFinisher+0x278>)
 8007630:	2200      	movs	r2, #0
 8007632:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007634:	4b97      	ldr	r3, [pc, #604]	@ (8007894 <menuVariableFinisher+0x27c>)
 8007636:	2200      	movs	r2, #0
 8007638:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800763a:	4b97      	ldr	r3, [pc, #604]	@ (8007898 <menuVariableFinisher+0x280>)
 800763c:	2200      	movs	r2, #0
 800763e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007640:	4b96      	ldr	r3, [pc, #600]	@ (800789c <menuVariableFinisher+0x284>)
 8007642:	2200      	movs	r2, #0
 8007644:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007646:	4b96      	ldr	r3, [pc, #600]	@ (80078a0 <menuVariableFinisher+0x288>)
 8007648:	2200      	movs	r2, #0
 800764a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 800764c:	4b95      	ldr	r3, [pc, #596]	@ (80078a4 <menuVariableFinisher+0x28c>)
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007652:	4b95      	ldr	r3, [pc, #596]	@ (80078a8 <menuVariableFinisher+0x290>)
 8007654:	2200      	movs	r2, #0
 8007656:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007658:	4b94      	ldr	r3, [pc, #592]	@ (80078ac <menuVariableFinisher+0x294>)
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800765e:	4b94      	ldr	r3, [pc, #592]	@ (80078b0 <menuVariableFinisher+0x298>)
 8007660:	2200      	movs	r2, #0
 8007662:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007664:	4b93      	ldr	r3, [pc, #588]	@ (80078b4 <menuVariableFinisher+0x29c>)
 8007666:	2200      	movs	r2, #0
 8007668:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800766a:	4b93      	ldr	r3, [pc, #588]	@ (80078b8 <menuVariableFinisher+0x2a0>)
 800766c:	2200      	movs	r2, #0
 800766e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007670:	4b92      	ldr	r3, [pc, #584]	@ (80078bc <menuVariableFinisher+0x2a4>)
 8007672:	2200      	movs	r2, #0
 8007674:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007676:	4b92      	ldr	r3, [pc, #584]	@ (80078c0 <menuVariableFinisher+0x2a8>)
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 800767c:	4b91      	ldr	r3, [pc, #580]	@ (80078c4 <menuVariableFinisher+0x2ac>)
 800767e:	2200      	movs	r2, #0
 8007680:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007682:	4b91      	ldr	r3, [pc, #580]	@ (80078c8 <menuVariableFinisher+0x2b0>)
 8007684:	2200      	movs	r2, #0
 8007686:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007688:	4b90      	ldr	r3, [pc, #576]	@ (80078cc <menuVariableFinisher+0x2b4>)
 800768a:	2200      	movs	r2, #0
 800768c:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 800768e:	4b90      	ldr	r3, [pc, #576]	@ (80078d0 <menuVariableFinisher+0x2b8>)
 8007690:	2200      	movs	r2, #0
 8007692:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007694:	4b8f      	ldr	r3, [pc, #572]	@ (80078d4 <menuVariableFinisher+0x2bc>)
 8007696:	2200      	movs	r2, #0
 8007698:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 800769a:	4b8f      	ldr	r3, [pc, #572]	@ (80078d8 <menuVariableFinisher+0x2c0>)
 800769c:	2200      	movs	r2, #0
 800769e:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80076a0:	4b8e      	ldr	r3, [pc, #568]	@ (80078dc <menuVariableFinisher+0x2c4>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80076a6:	4b8e      	ldr	r3, [pc, #568]	@ (80078e0 <menuVariableFinisher+0x2c8>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80076ac:	4b8d      	ldr	r3, [pc, #564]	@ (80078e4 <menuVariableFinisher+0x2cc>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80076b2:	4b8d      	ldr	r3, [pc, #564]	@ (80078e8 <menuVariableFinisher+0x2d0>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80076b8:	4b8c      	ldr	r3, [pc, #560]	@ (80078ec <menuVariableFinisher+0x2d4>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80076be:	4b8c      	ldr	r3, [pc, #560]	@ (80078f0 <menuVariableFinisher+0x2d8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80076c4:	4b8b      	ldr	r3, [pc, #556]	@ (80078f4 <menuVariableFinisher+0x2dc>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80076ca:	4b8b      	ldr	r3, [pc, #556]	@ (80078f8 <menuVariableFinisher+0x2e0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80076d0:	4b8a      	ldr	r3, [pc, #552]	@ (80078fc <menuVariableFinisher+0x2e4>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80076d6:	4b8a      	ldr	r3, [pc, #552]	@ (8007900 <menuVariableFinisher+0x2e8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80076dc:	4b89      	ldr	r3, [pc, #548]	@ (8007904 <menuVariableFinisher+0x2ec>)
 80076de:	2200      	movs	r2, #0
 80076e0:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80076e2:	4b89      	ldr	r3, [pc, #548]	@ (8007908 <menuVariableFinisher+0x2f0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80076e8:	4b88      	ldr	r3, [pc, #544]	@ (800790c <menuVariableFinisher+0x2f4>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80076ee:	4b88      	ldr	r3, [pc, #544]	@ (8007910 <menuVariableFinisher+0x2f8>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80076f4:	4b87      	ldr	r3, [pc, #540]	@ (8007914 <menuVariableFinisher+0x2fc>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80076fa:	4b87      	ldr	r3, [pc, #540]	@ (8007918 <menuVariableFinisher+0x300>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007700:	4b86      	ldr	r3, [pc, #536]	@ (800791c <menuVariableFinisher+0x304>)
 8007702:	2200      	movs	r2, #0
 8007704:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007706:	4b86      	ldr	r3, [pc, #536]	@ (8007920 <menuVariableFinisher+0x308>)
 8007708:	2200      	movs	r2, #0
 800770a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800770c:	4b85      	ldr	r3, [pc, #532]	@ (8007924 <menuVariableFinisher+0x30c>)
 800770e:	2200      	movs	r2, #0
 8007710:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007712:	4b85      	ldr	r3, [pc, #532]	@ (8007928 <menuVariableFinisher+0x310>)
 8007714:	2200      	movs	r2, #0
 8007716:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007718:	4b84      	ldr	r3, [pc, #528]	@ (800792c <menuVariableFinisher+0x314>)
 800771a:	2200      	movs	r2, #0
 800771c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800771e:	4b84      	ldr	r3, [pc, #528]	@ (8007930 <menuVariableFinisher+0x318>)
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007724:	4b83      	ldr	r3, [pc, #524]	@ (8007934 <menuVariableFinisher+0x31c>)
 8007726:	2200      	movs	r2, #0
 8007728:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800772a:	4b83      	ldr	r3, [pc, #524]	@ (8007938 <menuVariableFinisher+0x320>)
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007730:	4b82      	ldr	r3, [pc, #520]	@ (800793c <menuVariableFinisher+0x324>)
 8007732:	2200      	movs	r2, #0
 8007734:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007736:	4b82      	ldr	r3, [pc, #520]	@ (8007940 <menuVariableFinisher+0x328>)
 8007738:	2200      	movs	r2, #0
 800773a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800773c:	4b81      	ldr	r3, [pc, #516]	@ (8007944 <menuVariableFinisher+0x32c>)
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007742:	4b81      	ldr	r3, [pc, #516]	@ (8007948 <menuVariableFinisher+0x330>)
 8007744:	2200      	movs	r2, #0
 8007746:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007748:	4b80      	ldr	r3, [pc, #512]	@ (800794c <menuVariableFinisher+0x334>)
 800774a:	2200      	movs	r2, #0
 800774c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800774e:	4b80      	ldr	r3, [pc, #512]	@ (8007950 <menuVariableFinisher+0x338>)
 8007750:	2200      	movs	r2, #0
 8007752:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007754:	4b7f      	ldr	r3, [pc, #508]	@ (8007954 <menuVariableFinisher+0x33c>)
 8007756:	2200      	movs	r2, #0
 8007758:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800775a:	4b7f      	ldr	r3, [pc, #508]	@ (8007958 <menuVariableFinisher+0x340>)
 800775c:	2200      	movs	r2, #0
 800775e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007760:	4b7e      	ldr	r3, [pc, #504]	@ (800795c <menuVariableFinisher+0x344>)
 8007762:	2200      	movs	r2, #0
 8007764:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007766:	4b7e      	ldr	r3, [pc, #504]	@ (8007960 <menuVariableFinisher+0x348>)
 8007768:	2200      	movs	r2, #0
 800776a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800776c:	4b7d      	ldr	r3, [pc, #500]	@ (8007964 <menuVariableFinisher+0x34c>)
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007772:	4b7d      	ldr	r3, [pc, #500]	@ (8007968 <menuVariableFinisher+0x350>)
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007778:	4b7c      	ldr	r3, [pc, #496]	@ (800796c <menuVariableFinisher+0x354>)
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800777e:	4b7c      	ldr	r3, [pc, #496]	@ (8007970 <menuVariableFinisher+0x358>)
 8007780:	2200      	movs	r2, #0
 8007782:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007784:	4b7b      	ldr	r3, [pc, #492]	@ (8007974 <menuVariableFinisher+0x35c>)
 8007786:	2200      	movs	r2, #0
 8007788:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 800778a:	4b7b      	ldr	r3, [pc, #492]	@ (8007978 <menuVariableFinisher+0x360>)
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007790:	4b7a      	ldr	r3, [pc, #488]	@ (800797c <menuVariableFinisher+0x364>)
 8007792:	2200      	movs	r2, #0
 8007794:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007796:	4b7a      	ldr	r3, [pc, #488]	@ (8007980 <menuVariableFinisher+0x368>)
 8007798:	2200      	movs	r2, #0
 800779a:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 800779c:	4b79      	ldr	r3, [pc, #484]	@ (8007984 <menuVariableFinisher+0x36c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80077a2:	4b79      	ldr	r3, [pc, #484]	@ (8007988 <menuVariableFinisher+0x370>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80077a8:	4b78      	ldr	r3, [pc, #480]	@ (800798c <menuVariableFinisher+0x374>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80077ae:	4b78      	ldr	r3, [pc, #480]	@ (8007990 <menuVariableFinisher+0x378>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80077b4:	4b77      	ldr	r3, [pc, #476]	@ (8007994 <menuVariableFinisher+0x37c>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80077ba:	4b77      	ldr	r3, [pc, #476]	@ (8007998 <menuVariableFinisher+0x380>)
 80077bc:	2200      	movs	r2, #0
 80077be:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80077c0:	4b76      	ldr	r3, [pc, #472]	@ (800799c <menuVariableFinisher+0x384>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80077c6:	4b76      	ldr	r3, [pc, #472]	@ (80079a0 <menuVariableFinisher+0x388>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80077cc:	4b75      	ldr	r3, [pc, #468]	@ (80079a4 <menuVariableFinisher+0x38c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80077d2:	4b75      	ldr	r3, [pc, #468]	@ (80079a8 <menuVariableFinisher+0x390>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80077d8:	4b74      	ldr	r3, [pc, #464]	@ (80079ac <menuVariableFinisher+0x394>)
 80077da:	2200      	movs	r2, #0
 80077dc:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80077de:	4b74      	ldr	r3, [pc, #464]	@ (80079b0 <menuVariableFinisher+0x398>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80077e4:	4b73      	ldr	r3, [pc, #460]	@ (80079b4 <menuVariableFinisher+0x39c>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80077ea:	4b73      	ldr	r3, [pc, #460]	@ (80079b8 <menuVariableFinisher+0x3a0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80077f0:	4b72      	ldr	r3, [pc, #456]	@ (80079bc <menuVariableFinisher+0x3a4>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80077f6:	4b72      	ldr	r3, [pc, #456]	@ (80079c0 <menuVariableFinisher+0x3a8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80077fc:	4b71      	ldr	r3, [pc, #452]	@ (80079c4 <menuVariableFinisher+0x3ac>)
 80077fe:	2200      	movs	r2, #0
 8007800:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007802:	4b71      	ldr	r3, [pc, #452]	@ (80079c8 <menuVariableFinisher+0x3b0>)
 8007804:	2200      	movs	r2, #0
 8007806:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007808:	4b70      	ldr	r3, [pc, #448]	@ (80079cc <menuVariableFinisher+0x3b4>)
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800780e:	4b70      	ldr	r3, [pc, #448]	@ (80079d0 <menuVariableFinisher+0x3b8>)
 8007810:	2200      	movs	r2, #0
 8007812:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007814:	4b6f      	ldr	r3, [pc, #444]	@ (80079d4 <menuVariableFinisher+0x3bc>)
 8007816:	2200      	movs	r2, #0
 8007818:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 800781a:	4b6f      	ldr	r3, [pc, #444]	@ (80079d8 <menuVariableFinisher+0x3c0>)
 800781c:	2200      	movs	r2, #0
 800781e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007820:	4b6e      	ldr	r3, [pc, #440]	@ (80079dc <menuVariableFinisher+0x3c4>)
 8007822:	2200      	movs	r2, #0
 8007824:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007826:	4b6e      	ldr	r3, [pc, #440]	@ (80079e0 <menuVariableFinisher+0x3c8>)
 8007828:	2200      	movs	r2, #0
 800782a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 800782c:	4b6d      	ldr	r3, [pc, #436]	@ (80079e4 <menuVariableFinisher+0x3cc>)
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007832:	4b6d      	ldr	r3, [pc, #436]	@ (80079e8 <menuVariableFinisher+0x3d0>)
 8007834:	2200      	movs	r2, #0
 8007836:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007838:	4b6c      	ldr	r3, [pc, #432]	@ (80079ec <menuVariableFinisher+0x3d4>)
 800783a:	2200      	movs	r2, #0
 800783c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800783e:	4b6c      	ldr	r3, [pc, #432]	@ (80079f0 <menuVariableFinisher+0x3d8>)
 8007840:	2200      	movs	r2, #0
 8007842:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007844:	4b6b      	ldr	r3, [pc, #428]	@ (80079f4 <menuVariableFinisher+0x3dc>)
 8007846:	2200      	movs	r2, #0
 8007848:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800784a:	4b6b      	ldr	r3, [pc, #428]	@ (80079f8 <menuVariableFinisher+0x3e0>)
 800784c:	2200      	movs	r2, #0
 800784e:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007850:	4b6a      	ldr	r3, [pc, #424]	@ (80079fc <menuVariableFinisher+0x3e4>)
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007856:	4b6a      	ldr	r3, [pc, #424]	@ (8007a00 <menuVariableFinisher+0x3e8>)
 8007858:	2200      	movs	r2, #0
 800785a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800785c:	4b69      	ldr	r3, [pc, #420]	@ (8007a04 <menuVariableFinisher+0x3ec>)
 800785e:	2200      	movs	r2, #0
 8007860:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007862:	4b69      	ldr	r3, [pc, #420]	@ (8007a08 <menuVariableFinisher+0x3f0>)
 8007864:	2200      	movs	r2, #0
 8007866:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007868:	4b68      	ldr	r3, [pc, #416]	@ (8007a0c <menuVariableFinisher+0x3f4>)
 800786a:	2200      	movs	r2, #0
 800786c:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800786e:	4b68      	ldr	r3, [pc, #416]	@ (8007a10 <menuVariableFinisher+0x3f8>)
 8007870:	2200      	movs	r2, #0
 8007872:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007874:	4b67      	ldr	r3, [pc, #412]	@ (8007a14 <menuVariableFinisher+0x3fc>)
 8007876:	2200      	movs	r2, #0
 8007878:	741a      	strb	r2, [r3, #16]
}
 800787a:	bf00      	nop
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000009c 	.word	0x2000009c
 8007888:	200000b0 	.word	0x200000b0
 800788c:	200000c4 	.word	0x200000c4
 8007890:	200000d8 	.word	0x200000d8
 8007894:	200000ec 	.word	0x200000ec
 8007898:	20000100 	.word	0x20000100
 800789c:	20000114 	.word	0x20000114
 80078a0:	20000128 	.word	0x20000128
 80078a4:	2000013c 	.word	0x2000013c
 80078a8:	20000150 	.word	0x20000150
 80078ac:	20000164 	.word	0x20000164
 80078b0:	20000178 	.word	0x20000178
 80078b4:	20001220 	.word	0x20001220
 80078b8:	20001234 	.word	0x20001234
 80078bc:	20001248 	.word	0x20001248
 80078c0:	2000125c 	.word	0x2000125c
 80078c4:	20001270 	.word	0x20001270
 80078c8:	20001284 	.word	0x20001284
 80078cc:	20001298 	.word	0x20001298
 80078d0:	200012ac 	.word	0x200012ac
 80078d4:	200012c0 	.word	0x200012c0
 80078d8:	200012d4 	.word	0x200012d4
 80078dc:	200012e8 	.word	0x200012e8
 80078e0:	200012fc 	.word	0x200012fc
 80078e4:	20001310 	.word	0x20001310
 80078e8:	20001324 	.word	0x20001324
 80078ec:	20001338 	.word	0x20001338
 80078f0:	2000134c 	.word	0x2000134c
 80078f4:	20001360 	.word	0x20001360
 80078f8:	20001374 	.word	0x20001374
 80078fc:	20001388 	.word	0x20001388
 8007900:	2000139c 	.word	0x2000139c
 8007904:	200013b0 	.word	0x200013b0
 8007908:	200013c4 	.word	0x200013c4
 800790c:	200013d8 	.word	0x200013d8
 8007910:	200013ec 	.word	0x200013ec
 8007914:	20001400 	.word	0x20001400
 8007918:	20001414 	.word	0x20001414
 800791c:	20001428 	.word	0x20001428
 8007920:	2000143c 	.word	0x2000143c
 8007924:	20001450 	.word	0x20001450
 8007928:	20001464 	.word	0x20001464
 800792c:	20001478 	.word	0x20001478
 8007930:	2000148c 	.word	0x2000148c
 8007934:	200014a0 	.word	0x200014a0
 8007938:	200014b4 	.word	0x200014b4
 800793c:	200014c8 	.word	0x200014c8
 8007940:	200014dc 	.word	0x200014dc
 8007944:	200014f0 	.word	0x200014f0
 8007948:	20001504 	.word	0x20001504
 800794c:	20001518 	.word	0x20001518
 8007950:	2000152c 	.word	0x2000152c
 8007954:	20001540 	.word	0x20001540
 8007958:	20001554 	.word	0x20001554
 800795c:	20001568 	.word	0x20001568
 8007960:	2000157c 	.word	0x2000157c
 8007964:	20001590 	.word	0x20001590
 8007968:	200015a4 	.word	0x200015a4
 800796c:	200015b8 	.word	0x200015b8
 8007970:	200015cc 	.word	0x200015cc
 8007974:	200015e0 	.word	0x200015e0
 8007978:	200015f4 	.word	0x200015f4
 800797c:	20001608 	.word	0x20001608
 8007980:	2000161c 	.word	0x2000161c
 8007984:	20001630 	.word	0x20001630
 8007988:	20001644 	.word	0x20001644
 800798c:	20001658 	.word	0x20001658
 8007990:	2000166c 	.word	0x2000166c
 8007994:	20001680 	.word	0x20001680
 8007998:	20001694 	.word	0x20001694
 800799c:	200016a8 	.word	0x200016a8
 80079a0:	200016bc 	.word	0x200016bc
 80079a4:	200016d0 	.word	0x200016d0
 80079a8:	200016e4 	.word	0x200016e4
 80079ac:	200016f8 	.word	0x200016f8
 80079b0:	2000170c 	.word	0x2000170c
 80079b4:	20001720 	.word	0x20001720
 80079b8:	20001734 	.word	0x20001734
 80079bc:	20001748 	.word	0x20001748
 80079c0:	2000175c 	.word	0x2000175c
 80079c4:	20001770 	.word	0x20001770
 80079c8:	20001784 	.word	0x20001784
 80079cc:	20001798 	.word	0x20001798
 80079d0:	200017ac 	.word	0x200017ac
 80079d4:	200017c0 	.word	0x200017c0
 80079d8:	200017d4 	.word	0x200017d4
 80079dc:	200017e8 	.word	0x200017e8
 80079e0:	200017fc 	.word	0x200017fc
 80079e4:	20001810 	.word	0x20001810
 80079e8:	20001824 	.word	0x20001824
 80079ec:	20001838 	.word	0x20001838
 80079f0:	2000184c 	.word	0x2000184c
 80079f4:	20001860 	.word	0x20001860
 80079f8:	20001874 	.word	0x20001874
 80079fc:	20001888 	.word	0x20001888
 8007a00:	2000189c 	.word	0x2000189c
 8007a04:	200018b0 	.word	0x200018b0
 8007a08:	200018c4 	.word	0x200018c4
 8007a0c:	200018d8 	.word	0x200018d8
 8007a10:	200018ec 	.word	0x200018ec
 8007a14:	20001900 	.word	0x20001900

08007a18 <resetMenuTexts>:

void resetMenuTexts() {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007a1c:	2211      	movs	r2, #17
 8007a1e:	2100      	movs	r1, #0
 8007a20:	48d3      	ldr	r0, [pc, #844]	@ (8007d70 <resetMenuTexts+0x358>)
 8007a22:	f005 ff56 	bl	800d8d2 <memset>
    memset(ayarlarText, 0, 17);
 8007a26:	2211      	movs	r2, #17
 8007a28:	2100      	movs	r1, #0
 8007a2a:	48d2      	ldr	r0, [pc, #840]	@ (8007d74 <resetMenuTexts+0x35c>)
 8007a2c:	f005 ff51 	bl	800d8d2 <memset>
    memset(hataKayitListText, 0, 17);
 8007a30:	2211      	movs	r2, #17
 8007a32:	2100      	movs	r1, #0
 8007a34:	48d0      	ldr	r0, [pc, #832]	@ (8007d78 <resetMenuTexts+0x360>)
 8007a36:	f005 ff4c 	bl	800d8d2 <memset>
    memset(birHataKoduText, 0, 17);
 8007a3a:	2211      	movs	r2, #17
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	48cf      	ldr	r0, [pc, #828]	@ (8007d7c <resetMenuTexts+0x364>)
 8007a40:	f005 ff47 	bl	800d8d2 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007a44:	2211      	movs	r2, #17
 8007a46:	2100      	movs	r1, #0
 8007a48:	48cd      	ldr	r0, [pc, #820]	@ (8007d80 <resetMenuTexts+0x368>)
 8007a4a:	f005 ff42 	bl	800d8d2 <memset>
    memset(ucHataKoduText, 0, 17);
 8007a4e:	2211      	movs	r2, #17
 8007a50:	2100      	movs	r1, #0
 8007a52:	48cc      	ldr	r0, [pc, #816]	@ (8007d84 <resetMenuTexts+0x36c>)
 8007a54:	f005 ff3d 	bl	800d8d2 <memset>
    memset(dortHataKoduText, 0, 17);
 8007a58:	2211      	movs	r2, #17
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	48ca      	ldr	r0, [pc, #808]	@ (8007d88 <resetMenuTexts+0x370>)
 8007a5e:	f005 ff38 	bl	800d8d2 <memset>
    memset(besHataKoduText, 0, 17);
 8007a62:	2211      	movs	r2, #17
 8007a64:	2100      	movs	r1, #0
 8007a66:	48c9      	ldr	r0, [pc, #804]	@ (8007d8c <resetMenuTexts+0x374>)
 8007a68:	f005 ff33 	bl	800d8d2 <memset>
    memset(altiHataKoduText, 0, 17);
 8007a6c:	2211      	movs	r2, #17
 8007a6e:	2100      	movs	r1, #0
 8007a70:	48c7      	ldr	r0, [pc, #796]	@ (8007d90 <resetMenuTexts+0x378>)
 8007a72:	f005 ff2e 	bl	800d8d2 <memset>
    memset(yediHataKoduText, 0, 17);
 8007a76:	2211      	movs	r2, #17
 8007a78:	2100      	movs	r1, #0
 8007a7a:	48c6      	ldr	r0, [pc, #792]	@ (8007d94 <resetMenuTexts+0x37c>)
 8007a7c:	f005 ff29 	bl	800d8d2 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007a80:	2211      	movs	r2, #17
 8007a82:	2100      	movs	r1, #0
 8007a84:	48c4      	ldr	r0, [pc, #784]	@ (8007d98 <resetMenuTexts+0x380>)
 8007a86:	f005 ff24 	bl	800d8d2 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007a8a:	2211      	movs	r2, #17
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	48c3      	ldr	r0, [pc, #780]	@ (8007d9c <resetMenuTexts+0x384>)
 8007a90:	f005 ff1f 	bl	800d8d2 <memset>
    memset(onHataKoduText, 0, 17);
 8007a94:	2211      	movs	r2, #17
 8007a96:	2100      	movs	r1, #0
 8007a98:	48c1      	ldr	r0, [pc, #772]	@ (8007da0 <resetMenuTexts+0x388>)
 8007a9a:	f005 ff1a 	bl	800d8d2 <memset>
    memset(silmekIcinText, 0, 17);
 8007a9e:	2211      	movs	r2, #17
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	48c0      	ldr	r0, [pc, #768]	@ (8007da4 <resetMenuTexts+0x38c>)
 8007aa4:	f005 ff15 	bl	800d8d2 <memset>
    memset(calismaSekliText, 0, 17);
 8007aa8:	2211      	movs	r2, #17
 8007aaa:	2100      	movs	r1, #0
 8007aac:	48be      	ldr	r0, [pc, #760]	@ (8007da8 <resetMenuTexts+0x390>)
 8007aae:	f005 ff10 	bl	800d8d2 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007ab2:	2211      	movs	r2, #17
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	48bd      	ldr	r0, [pc, #756]	@ (8007dac <resetMenuTexts+0x394>)
 8007ab8:	f005 ff0b 	bl	800d8d2 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007abc:	2211      	movs	r2, #17
 8007abe:	2100      	movs	r1, #0
 8007ac0:	48bb      	ldr	r0, [pc, #748]	@ (8007db0 <resetMenuTexts+0x398>)
 8007ac2:	f005 ff06 	bl	800d8d2 <memset>
    memset(basGonderText, 0, 17);
 8007ac6:	2211      	movs	r2, #17
 8007ac8:	2100      	movs	r1, #0
 8007aca:	48ba      	ldr	r0, [pc, #744]	@ (8007db4 <resetMenuTexts+0x39c>)
 8007acc:	f005 ff01 	bl	800d8d2 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007ad0:	2211      	movs	r2, #17
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	48b8      	ldr	r0, [pc, #736]	@ (8007db8 <resetMenuTexts+0x3a0>)
 8007ad6:	f005 fefc 	bl	800d8d2 <memset>
    memset(pasifText, 0, 17);
 8007ada:	2211      	movs	r2, #17
 8007adc:	2100      	movs	r1, #0
 8007ade:	48b7      	ldr	r0, [pc, #732]	@ (8007dbc <resetMenuTexts+0x3a4>)
 8007ae0:	f005 fef7 	bl	800d8d2 <memset>
    memset(aktifText, 0, 17);
 8007ae4:	2211      	movs	r2, #17
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	48b5      	ldr	r0, [pc, #724]	@ (8007dc0 <resetMenuTexts+0x3a8>)
 8007aea:	f005 fef2 	bl	800d8d2 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007aee:	2211      	movs	r2, #17
 8007af0:	2100      	movs	r1, #0
 8007af2:	48b4      	ldr	r0, [pc, #720]	@ (8007dc4 <resetMenuTexts+0x3ac>)
 8007af4:	f005 feed 	bl	800d8d2 <memset>
    memset(altLimitText, 0, 17);
 8007af8:	2211      	movs	r2, #17
 8007afa:	2100      	movs	r1, #0
 8007afc:	48b2      	ldr	r0, [pc, #712]	@ (8007dc8 <resetMenuTexts+0x3b0>)
 8007afe:	f005 fee8 	bl	800d8d2 <memset>
    memset(basincSalteriText, 0, 17);
 8007b02:	2211      	movs	r2, #17
 8007b04:	2100      	movs	r1, #0
 8007b06:	48b1      	ldr	r0, [pc, #708]	@ (8007dcc <resetMenuTexts+0x3b4>)
 8007b08:	f005 fee3 	bl	800d8d2 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007b0c:	2211      	movs	r2, #17
 8007b0e:	2100      	movs	r1, #0
 8007b10:	48af      	ldr	r0, [pc, #700]	@ (8007dd0 <resetMenuTexts+0x3b8>)
 8007b12:	f005 fede 	bl	800d8d2 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007b16:	2211      	movs	r2, #17
 8007b18:	2100      	movs	r1, #0
 8007b1a:	48ae      	ldr	r0, [pc, #696]	@ (8007dd4 <resetMenuTexts+0x3bc>)
 8007b1c:	f005 fed9 	bl	800d8d2 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007b20:	2211      	movs	r2, #17
 8007b22:	2100      	movs	r1, #0
 8007b24:	48ac      	ldr	r0, [pc, #688]	@ (8007dd8 <resetMenuTexts+0x3c0>)
 8007b26:	f005 fed4 	bl	800d8d2 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007b2a:	2211      	movs	r2, #17
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	48ab      	ldr	r0, [pc, #684]	@ (8007ddc <resetMenuTexts+0x3c4>)
 8007b30:	f005 fecf 	bl	800d8d2 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007b34:	2211      	movs	r2, #17
 8007b36:	2100      	movs	r1, #0
 8007b38:	48a9      	ldr	r0, [pc, #676]	@ (8007de0 <resetMenuTexts+0x3c8>)
 8007b3a:	f005 feca 	bl	800d8d2 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007b3e:	2211      	movs	r2, #17
 8007b40:	2100      	movs	r1, #0
 8007b42:	48a8      	ldr	r0, [pc, #672]	@ (8007de4 <resetMenuTexts+0x3cc>)
 8007b44:	f005 fec5 	bl	800d8d2 <memset>
    memset(katButonuEXTText, 0, 17);
 8007b48:	2211      	movs	r2, #17
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	48a6      	ldr	r0, [pc, #664]	@ (8007de8 <resetMenuTexts+0x3d0>)
 8007b4e:	f005 fec0 	bl	800d8d2 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007b52:	2211      	movs	r2, #17
 8007b54:	2100      	movs	r1, #0
 8007b56:	48a5      	ldr	r0, [pc, #660]	@ (8007dec <resetMenuTexts+0x3d4>)
 8007b58:	f005 febb 	bl	800d8d2 <memset>
    memset(butonKontrolluText, 0, 17);
 8007b5c:	2211      	movs	r2, #17
 8007b5e:	2100      	movs	r1, #0
 8007b60:	48a3      	ldr	r0, [pc, #652]	@ (8007df0 <resetMenuTexts+0x3d8>)
 8007b62:	f005 feb6 	bl	800d8d2 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007b66:	2211      	movs	r2, #17
 8007b68:	2100      	movs	r1, #0
 8007b6a:	48a2      	ldr	r0, [pc, #648]	@ (8007df4 <resetMenuTexts+0x3dc>)
 8007b6c:	f005 feb1 	bl	800d8d2 <memset>
    memset(kacSaniyeText, 0, 17);
 8007b70:	2211      	movs	r2, #17
 8007b72:	2100      	movs	r1, #0
 8007b74:	48a0      	ldr	r0, [pc, #640]	@ (8007df8 <resetMenuTexts+0x3e0>)
 8007b76:	f005 feac 	bl	800d8d2 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007b7a:	2211      	movs	r2, #17
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	489f      	ldr	r0, [pc, #636]	@ (8007dfc <resetMenuTexts+0x3e4>)
 8007b80:	f005 fea7 	bl	800d8d2 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007b84:	2211      	movs	r2, #17
 8007b86:	2100      	movs	r1, #0
 8007b88:	489d      	ldr	r0, [pc, #628]	@ (8007e00 <resetMenuTexts+0x3e8>)
 8007b8a:	f005 fea2 	bl	800d8d2 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007b8e:	2211      	movs	r2, #17
 8007b90:	2100      	movs	r1, #0
 8007b92:	489c      	ldr	r0, [pc, #624]	@ (8007e04 <resetMenuTexts+0x3ec>)
 8007b94:	f005 fe9d 	bl	800d8d2 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007b98:	2211      	movs	r2, #17
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	489a      	ldr	r0, [pc, #616]	@ (8007e08 <resetMenuTexts+0x3f0>)
 8007b9e:	f005 fe98 	bl	800d8d2 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007ba2:	2211      	movs	r2, #17
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4899      	ldr	r0, [pc, #612]	@ (8007e0c <resetMenuTexts+0x3f4>)
 8007ba8:	f005 fe93 	bl	800d8d2 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007bac:	2211      	movs	r2, #17
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4897      	ldr	r0, [pc, #604]	@ (8007e10 <resetMenuTexts+0x3f8>)
 8007bb2:	f005 fe8e 	bl	800d8d2 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007bb6:	2211      	movs	r2, #17
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4896      	ldr	r0, [pc, #600]	@ (8007e14 <resetMenuTexts+0x3fc>)
 8007bbc:	f005 fe89 	bl	800d8d2 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007bc0:	2211      	movs	r2, #17
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4894      	ldr	r0, [pc, #592]	@ (8007e18 <resetMenuTexts+0x400>)
 8007bc6:	f005 fe84 	bl	800d8d2 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007bca:	2211      	movs	r2, #17
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4893      	ldr	r0, [pc, #588]	@ (8007e1c <resetMenuTexts+0x404>)
 8007bd0:	f005 fe7f 	bl	800d8d2 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007bd4:	2211      	movs	r2, #17
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4891      	ldr	r0, [pc, #580]	@ (8007e20 <resetMenuTexts+0x408>)
 8007bda:	f005 fe7a 	bl	800d8d2 <memset>
    memset(devirmeAktifText, 0, 17);
 8007bde:	2211      	movs	r2, #17
 8007be0:	2100      	movs	r1, #0
 8007be2:	4890      	ldr	r0, [pc, #576]	@ (8007e24 <resetMenuTexts+0x40c>)
 8007be4:	f005 fe75 	bl	800d8d2 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007be8:	2211      	movs	r2, #17
 8007bea:	2100      	movs	r1, #0
 8007bec:	488e      	ldr	r0, [pc, #568]	@ (8007e28 <resetMenuTexts+0x410>)
 8007bee:	f005 fe70 	bl	800d8d2 <memset>
    memset(devirmeYukariText, 0, 17);
 8007bf2:	2211      	movs	r2, #17
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	488d      	ldr	r0, [pc, #564]	@ (8007e2c <resetMenuTexts+0x414>)
 8007bf8:	f005 fe6b 	bl	800d8d2 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007bfc:	2211      	movs	r2, #17
 8007bfe:	2100      	movs	r1, #0
 8007c00:	488b      	ldr	r0, [pc, #556]	@ (8007e30 <resetMenuTexts+0x418>)
 8007c02:	f005 fe66 	bl	800d8d2 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007c06:	2211      	movs	r2, #17
 8007c08:	2100      	movs	r1, #0
 8007c0a:	488a      	ldr	r0, [pc, #552]	@ (8007e34 <resetMenuTexts+0x41c>)
 8007c0c:	f005 fe61 	bl	800d8d2 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007c10:	2211      	movs	r2, #17
 8007c12:	2100      	movs	r1, #0
 8007c14:	4888      	ldr	r0, [pc, #544]	@ (8007e38 <resetMenuTexts+0x420>)
 8007c16:	f005 fe5c 	bl	800d8d2 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007c1a:	2211      	movs	r2, #17
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4887      	ldr	r0, [pc, #540]	@ (8007e3c <resetMenuTexts+0x424>)
 8007c20:	f005 fe57 	bl	800d8d2 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007c24:	2211      	movs	r2, #17
 8007c26:	2100      	movs	r1, #0
 8007c28:	4885      	ldr	r0, [pc, #532]	@ (8007e40 <resetMenuTexts+0x428>)
 8007c2a:	f005 fe52 	bl	800d8d2 <memset>
    memset(tekTesirText, 0, 17);
 8007c2e:	2211      	movs	r2, #17
 8007c30:	2100      	movs	r1, #0
 8007c32:	4884      	ldr	r0, [pc, #528]	@ (8007e44 <resetMenuTexts+0x42c>)
 8007c34:	f005 fe4d 	bl	800d8d2 <memset>
    memset(ciftTesirText, 0, 17);
 8007c38:	2211      	movs	r2, #17
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4882      	ldr	r0, [pc, #520]	@ (8007e48 <resetMenuTexts+0x430>)
 8007c3e:	f005 fe48 	bl	800d8d2 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007c42:	2211      	movs	r2, #17
 8007c44:	2100      	movs	r1, #0
 8007c46:	4881      	ldr	r0, [pc, #516]	@ (8007e4c <resetMenuTexts+0x434>)
 8007c48:	f005 fe43 	bl	800d8d2 <memset>
    memset(yukariValfSureText, 0, 17);
 8007c4c:	2211      	movs	r2, #17
 8007c4e:	2100      	movs	r1, #0
 8007c50:	487f      	ldr	r0, [pc, #508]	@ (8007e50 <resetMenuTexts+0x438>)
 8007c52:	f005 fe3e 	bl	800d8d2 <memset>
    memset(asagiValfSureText, 0, 17);
 8007c56:	2211      	movs	r2, #17
 8007c58:	2100      	movs	r1, #0
 8007c5a:	487e      	ldr	r0, [pc, #504]	@ (8007e54 <resetMenuTexts+0x43c>)
 8007c5c:	f005 fe39 	bl	800d8d2 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007c60:	2211      	movs	r2, #17
 8007c62:	2100      	movs	r1, #0
 8007c64:	487c      	ldr	r0, [pc, #496]	@ (8007e58 <resetMenuTexts+0x440>)
 8007c66:	f005 fe34 	bl	800d8d2 <memset>
    memset(ileriValfSureText, 0, 17);
 8007c6a:	2211      	movs	r2, #17
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	487b      	ldr	r0, [pc, #492]	@ (8007e5c <resetMenuTexts+0x444>)
 8007c70:	f005 fe2f 	bl	800d8d2 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007c74:	2211      	movs	r2, #17
 8007c76:	2100      	movs	r1, #0
 8007c78:	4879      	ldr	r0, [pc, #484]	@ (8007e60 <resetMenuTexts+0x448>)
 8007c7a:	f005 fe2a 	bl	800d8d2 <memset>
    memset(geriValfSureText, 0, 17);
 8007c7e:	2211      	movs	r2, #17
 8007c80:	2100      	movs	r1, #0
 8007c82:	4878      	ldr	r0, [pc, #480]	@ (8007e64 <resetMenuTexts+0x44c>)
 8007c84:	f005 fe25 	bl	800d8d2 <memset>
    memset(calismaSuresiText, 0, 17);
 8007c88:	2211      	movs	r2, #17
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4876      	ldr	r0, [pc, #472]	@ (8007e68 <resetMenuTexts+0x450>)
 8007c8e:	f005 fe20 	bl	800d8d2 <memset>
    memset(calismaSayisiText, 0, 17);
 8007c92:	2211      	movs	r2, #17
 8007c94:	2100      	movs	r1, #0
 8007c96:	4875      	ldr	r0, [pc, #468]	@ (8007e6c <resetMenuTexts+0x454>)
 8007c98:	f005 fe1b 	bl	800d8d2 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007c9c:	2211      	movs	r2, #17
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4873      	ldr	r0, [pc, #460]	@ (8007e70 <resetMenuTexts+0x458>)
 8007ca2:	f005 fe16 	bl	800d8d2 <memset>
    memset(dilSecimText, 0, 17);
 8007ca6:	2211      	movs	r2, #17
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4872      	ldr	r0, [pc, #456]	@ (8007e74 <resetMenuTexts+0x45c>)
 8007cac:	f005 fe11 	bl	800d8d2 <memset>
    memset(secilenDilText, 0, 17);
 8007cb0:	2211      	movs	r2, #17
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4870      	ldr	r0, [pc, #448]	@ (8007e78 <resetMenuTexts+0x460>)
 8007cb6:	f005 fe0c 	bl	800d8d2 <memset>
    memset(menudenCikisText, 0, 17);
 8007cba:	2211      	movs	r2, #17
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	486f      	ldr	r0, [pc, #444]	@ (8007e7c <resetMenuTexts+0x464>)
 8007cc0:	f005 fe07 	bl	800d8d2 <memset>
    memset(enteraBasinizText, 0, 17);
 8007cc4:	2211      	movs	r2, #17
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	486d      	ldr	r0, [pc, #436]	@ (8007e80 <resetMenuTexts+0x468>)
 8007cca:	f005 fe02 	bl	800d8d2 <memset>
    memset(hataKoduText, 0, 17);
 8007cce:	2211      	movs	r2, #17
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	486c      	ldr	r0, [pc, #432]	@ (8007e84 <resetMenuTexts+0x46c>)
 8007cd4:	f005 fdfd 	bl	800d8d2 <memset>
    memset(dataSynchText, 0, 17);
 8007cd8:	2211      	movs	r2, #17
 8007cda:	2100      	movs	r1, #0
 8007cdc:	486a      	ldr	r0, [pc, #424]	@ (8007e88 <resetMenuTexts+0x470>)
 8007cde:	f005 fdf8 	bl	800d8d2 <memset>
    memset(dataSynch2Text, 0, 17);
 8007ce2:	2211      	movs	r2, #17
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4869      	ldr	r0, [pc, #420]	@ (8007e8c <resetMenuTexts+0x474>)
 8007ce8:	f005 fdf3 	bl	800d8d2 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007cec:	2211      	movs	r2, #17
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4867      	ldr	r0, [pc, #412]	@ (8007e90 <resetMenuTexts+0x478>)
 8007cf2:	f005 fdee 	bl	800d8d2 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007cf6:	2211      	movs	r2, #17
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4866      	ldr	r0, [pc, #408]	@ (8007e94 <resetMenuTexts+0x47c>)
 8007cfc:	f005 fde9 	bl	800d8d2 <memset>
    memset(mustBe12Text, 0, 17);
 8007d00:	2211      	movs	r2, #17
 8007d02:	2100      	movs	r1, #0
 8007d04:	4864      	ldr	r0, [pc, #400]	@ (8007e98 <resetMenuTexts+0x480>)
 8007d06:	f005 fde4 	bl	800d8d2 <memset>
    memset(mustBe122Text, 0, 17);
 8007d0a:	2211      	movs	r2, #17
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4863      	ldr	r0, [pc, #396]	@ (8007e9c <resetMenuTexts+0x484>)
 8007d10:	f005 fddf 	bl	800d8d2 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007d14:	2211      	movs	r2, #17
 8007d16:	2100      	movs	r1, #0
 8007d18:	4861      	ldr	r0, [pc, #388]	@ (8007ea0 <resetMenuTexts+0x488>)
 8007d1a:	f005 fdda 	bl	800d8d2 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007d1e:	2211      	movs	r2, #17
 8007d20:	2100      	movs	r1, #0
 8007d22:	4860      	ldr	r0, [pc, #384]	@ (8007ea4 <resetMenuTexts+0x48c>)
 8007d24:	f005 fdd5 	bl	800d8d2 <memset>
    memset(passExceedErrorText, 0, 17);
 8007d28:	2211      	movs	r2, #17
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	485e      	ldr	r0, [pc, #376]	@ (8007ea8 <resetMenuTexts+0x490>)
 8007d2e:	f005 fdd0 	bl	800d8d2 <memset>
    memset(passExceedError2Text, 0, 17);
 8007d32:	2211      	movs	r2, #17
 8007d34:	2100      	movs	r1, #0
 8007d36:	485d      	ldr	r0, [pc, #372]	@ (8007eac <resetMenuTexts+0x494>)
 8007d38:	f005 fdcb 	bl	800d8d2 <memset>
    memset(dataYazildiText, 0, 17);
 8007d3c:	2211      	movs	r2, #17
 8007d3e:	2100      	movs	r1, #0
 8007d40:	485b      	ldr	r0, [pc, #364]	@ (8007eb0 <resetMenuTexts+0x498>)
 8007d42:	f005 fdc6 	bl	800d8d2 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007d46:	2211      	movs	r2, #17
 8007d48:	2100      	movs	r1, #0
 8007d4a:	485a      	ldr	r0, [pc, #360]	@ (8007eb4 <resetMenuTexts+0x49c>)
 8007d4c:	f005 fdc1 	bl	800d8d2 <memset>
    memset(dataOkunduText, 0, 17);
 8007d50:	2211      	movs	r2, #17
 8007d52:	2100      	movs	r1, #0
 8007d54:	4858      	ldr	r0, [pc, #352]	@ (8007eb8 <resetMenuTexts+0x4a0>)
 8007d56:	f005 fdbc 	bl	800d8d2 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007d5a:	2211      	movs	r2, #17
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4857      	ldr	r0, [pc, #348]	@ (8007ebc <resetMenuTexts+0x4a4>)
 8007d60:	f005 fdb7 	bl	800d8d2 <memset>
    memset(errorCodeText, 0, 17);
 8007d64:	2211      	movs	r2, #17
 8007d66:	2100      	movs	r1, #0
 8007d68:	4855      	ldr	r0, [pc, #340]	@ (8007ec0 <resetMenuTexts+0x4a8>)
 8007d6a:	f005 fdb2 	bl	800d8d2 <memset>
 8007d6e:	e0a9      	b.n	8007ec4 <resetMenuTexts+0x4ac>
 8007d70:	20001220 	.word	0x20001220
 8007d74:	20001234 	.word	0x20001234
 8007d78:	20001248 	.word	0x20001248
 8007d7c:	2000125c 	.word	0x2000125c
 8007d80:	20001270 	.word	0x20001270
 8007d84:	20001284 	.word	0x20001284
 8007d88:	20001298 	.word	0x20001298
 8007d8c:	200012ac 	.word	0x200012ac
 8007d90:	200012c0 	.word	0x200012c0
 8007d94:	200012d4 	.word	0x200012d4
 8007d98:	200012e8 	.word	0x200012e8
 8007d9c:	200012fc 	.word	0x200012fc
 8007da0:	20001310 	.word	0x20001310
 8007da4:	20001324 	.word	0x20001324
 8007da8:	20001338 	.word	0x20001338
 8007dac:	2000134c 	.word	0x2000134c
 8007db0:	20001360 	.word	0x20001360
 8007db4:	20001374 	.word	0x20001374
 8007db8:	20001388 	.word	0x20001388
 8007dbc:	2000139c 	.word	0x2000139c
 8007dc0:	200013b0 	.word	0x200013b0
 8007dc4:	200013c4 	.word	0x200013c4
 8007dc8:	200013d8 	.word	0x200013d8
 8007dcc:	200013ec 	.word	0x200013ec
 8007dd0:	20001400 	.word	0x20001400
 8007dd4:	20001414 	.word	0x20001414
 8007dd8:	20001428 	.word	0x20001428
 8007ddc:	2000143c 	.word	0x2000143c
 8007de0:	20001450 	.word	0x20001450
 8007de4:	20001464 	.word	0x20001464
 8007de8:	20001478 	.word	0x20001478
 8007dec:	2000148c 	.word	0x2000148c
 8007df0:	200014a0 	.word	0x200014a0
 8007df4:	200014b4 	.word	0x200014b4
 8007df8:	200014c8 	.word	0x200014c8
 8007dfc:	200014dc 	.word	0x200014dc
 8007e00:	200014f0 	.word	0x200014f0
 8007e04:	20001504 	.word	0x20001504
 8007e08:	20001518 	.word	0x20001518
 8007e0c:	2000152c 	.word	0x2000152c
 8007e10:	20001540 	.word	0x20001540
 8007e14:	20001554 	.word	0x20001554
 8007e18:	20001568 	.word	0x20001568
 8007e1c:	2000157c 	.word	0x2000157c
 8007e20:	20001590 	.word	0x20001590
 8007e24:	200015a4 	.word	0x200015a4
 8007e28:	200015b8 	.word	0x200015b8
 8007e2c:	200015cc 	.word	0x200015cc
 8007e30:	200015e0 	.word	0x200015e0
 8007e34:	200015f4 	.word	0x200015f4
 8007e38:	20001608 	.word	0x20001608
 8007e3c:	2000161c 	.word	0x2000161c
 8007e40:	20001630 	.word	0x20001630
 8007e44:	20001644 	.word	0x20001644
 8007e48:	20001658 	.word	0x20001658
 8007e4c:	2000166c 	.word	0x2000166c
 8007e50:	20001680 	.word	0x20001680
 8007e54:	20001694 	.word	0x20001694
 8007e58:	200016a8 	.word	0x200016a8
 8007e5c:	200016bc 	.word	0x200016bc
 8007e60:	200016d0 	.word	0x200016d0
 8007e64:	200016e4 	.word	0x200016e4
 8007e68:	200016f8 	.word	0x200016f8
 8007e6c:	2000170c 	.word	0x2000170c
 8007e70:	20001720 	.word	0x20001720
 8007e74:	20001734 	.word	0x20001734
 8007e78:	20001748 	.word	0x20001748
 8007e7c:	2000175c 	.word	0x2000175c
 8007e80:	20001770 	.word	0x20001770
 8007e84:	20001784 	.word	0x20001784
 8007e88:	20001798 	.word	0x20001798
 8007e8c:	200017ac 	.word	0x200017ac
 8007e90:	200017c0 	.word	0x200017c0
 8007e94:	200017d4 	.word	0x200017d4
 8007e98:	200017e8 	.word	0x200017e8
 8007e9c:	200017fc 	.word	0x200017fc
 8007ea0:	20001810 	.word	0x20001810
 8007ea4:	20001824 	.word	0x20001824
 8007ea8:	20001838 	.word	0x20001838
 8007eac:	2000184c 	.word	0x2000184c
 8007eb0:	20001860 	.word	0x20001860
 8007eb4:	20001874 	.word	0x20001874
 8007eb8:	20001888 	.word	0x20001888
 8007ebc:	2000189c 	.word	0x2000189c
 8007ec0:	200018b0 	.word	0x200018b0
    memset(machineIDText, 0, 17);
 8007ec4:	2211      	movs	r2, #17
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4809      	ldr	r0, [pc, #36]	@ (8007ef0 <resetMenuTexts+0x4d8>)
 8007eca:	f005 fd02 	bl	800d8d2 <memset>
    memset(idConfirmationText, 0, 17);
 8007ece:	2211      	movs	r2, #17
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4808      	ldr	r0, [pc, #32]	@ (8007ef4 <resetMenuTexts+0x4dc>)
 8007ed4:	f005 fcfd 	bl	800d8d2 <memset>
    memset(idConfirmationSubText, 0, 17);
 8007ed8:	2211      	movs	r2, #17
 8007eda:	2100      	movs	r1, #0
 8007edc:	4806      	ldr	r0, [pc, #24]	@ (8007ef8 <resetMenuTexts+0x4e0>)
 8007ede:	f005 fcf8 	bl	800d8d2 <memset>
    memset(wifiConfirmationText, 0, 17);
 8007ee2:	2211      	movs	r2, #17
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4805      	ldr	r0, [pc, #20]	@ (8007efc <resetMenuTexts+0x4e4>)
 8007ee8:	f005 fcf3 	bl	800d8d2 <memset>
}
 8007eec:	bf00      	nop
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	200018c4 	.word	0x200018c4
 8007ef4:	200018d8 	.word	0x200018d8
 8007ef8:	200018ec 	.word	0x200018ec
 8007efc:	20001900 	.word	0x20001900

08007f00 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007f06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007f0a:	f001 fd89 	bl	8009a20 <HAL_Delay>
	int confirmationVal = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f12:	e012      	b.n	8007f3a <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007f14:	4a12      	ldr	r2, [pc, #72]	@ (8007f60 <takeMachineIDWithConfirmation+0x60>)
 8007f16:	2101      	movs	r1, #1
 8007f18:	2001      	movs	r0, #1
 8007f1a:	f001 f827 	bl	8008f6c <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007f1e:	4a11      	ldr	r2, [pc, #68]	@ (8007f64 <takeMachineIDWithConfirmation+0x64>)
 8007f20:	2101      	movs	r1, #1
 8007f22:	2002      	movs	r0, #2
 8007f24:	f001 f822 	bl	8008f6c <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007f28:	2102      	movs	r1, #2
 8007f2a:	480f      	ldr	r0, [pc, #60]	@ (8007f68 <takeMachineIDWithConfirmation+0x68>)
 8007f2c:	f002 fb48 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007f36:	2301      	movs	r3, #1
 8007f38:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0e9      	beq.n	8007f14 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007f40:	f000 f814 	bl	8007f6c <takeMachineID>

	convertArrays(1);
 8007f44:	2001      	movs	r0, #1
 8007f46:	f7f8 fcb7 	bl	80008b8 <convertArrays>
	HAL_Delay(50);
 8007f4a:	2032      	movs	r0, #50	@ 0x32
 8007f4c:	f001 fd68 	bl	8009a20 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007f50:	2001      	movs	r0, #1
 8007f52:	f7f9 fabf 	bl	80014d4 <printCredentials>
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	200018d8 	.word	0x200018d8
 8007f64:	200018ec 	.word	0x200018ec
 8007f68:	40010800 	.word	0x40010800

08007f6c <takeMachineID>:

void takeMachineID() {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8007f72:	2001      	movs	r0, #1
 8007f74:	f001 f858 	bl	8009028 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007f78:	220c      	movs	r2, #12
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	489b      	ldr	r0, [pc, #620]	@ (80081ec <takeMachineID+0x280>)
 8007f7e:	f005 fca8 	bl	800d8d2 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007f82:	2305      	movs	r3, #5
 8007f84:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007f86:	2303      	movs	r3, #3
 8007f88:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007f8e:	4b98      	ldr	r3, [pc, #608]	@ (80081f0 <takeMachineID+0x284>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007f94:	2100      	movs	r1, #0
 8007f96:	2001      	movs	r0, #1
 8007f98:	f7f9 f92c 	bl	80011f4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f9c:	2108      	movs	r1, #8
 8007f9e:	4895      	ldr	r0, [pc, #596]	@ (80081f4 <takeMachineID+0x288>)
 8007fa0:	f002 fb0e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d11a      	bne.n	8007fe0 <takeMachineID+0x74>
        	lcd_cursor(0);
 8007faa:	2000      	movs	r0, #0
 8007fac:	f001 f83c 	bl	8009028 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007fb0:	f000 fe1e 	bl	8008bf0 <checkEEPROM4ID>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d00e      	beq.n	8007fd8 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007fba:	4a8f      	ldr	r2, [pc, #572]	@ (80081f8 <takeMachineID+0x28c>)
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	f000 ffd4 	bl	8008f6c <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007fc4:	4a8d      	ldr	r2, [pc, #564]	@ (80081fc <takeMachineID+0x290>)
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	2002      	movs	r0, #2
 8007fca:	f000 ffcf 	bl	8008f6c <lcd_print>
        		HAL_Delay(1250);
 8007fce:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007fd2:	f001 fd25 	bl	8009a20 <HAL_Delay>

        		goto mainSection;
 8007fd6:	e7cc      	b.n	8007f72 <takeMachineID+0x6>
        	} else {
        		saveEEPROM(1);
 8007fd8:	2001      	movs	r0, #1
 8007fda:	f7f8 fb6b 	bl	80006b4 <saveEEPROM>

            	break;
 8007fde:	e130      	b.n	8008242 <takeMachineID+0x2d6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	4884      	ldr	r0, [pc, #528]	@ (80081f4 <takeMachineID+0x288>)
 8007fe4:	f002 faec 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d111      	bne.n	8008012 <takeMachineID+0xa6>
        	if(cursorPosition == 7) {
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	d102      	bne.n	8007ffa <takeMachineID+0x8e>
        		cursorPosition = 10;
 8007ff4:	230a      	movs	r3, #10
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	e008      	b.n	800800c <takeMachineID+0xa0>
        	} else if (cursorPosition == 14) {
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b0e      	cmp	r3, #14
 8007ffe:	d102      	bne.n	8008006 <takeMachineID+0x9a>
                cursorPosition = 3;
 8008000:	2303      	movs	r3, #3
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	e002      	b.n	800800c <takeMachineID+0xa0>
            } else {
            	cursorPosition++;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3301      	adds	r3, #1
 800800a:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 800800c:	2096      	movs	r0, #150	@ 0x96
 800800e:	f001 fd07 	bl	8009a20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008012:	2108      	movs	r1, #8
 8008014:	487a      	ldr	r0, [pc, #488]	@ (8008200 <takeMachineID+0x294>)
 8008016:	f002 fad3 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800801a:	4603      	mov	r3, r0
 800801c:	2b01      	cmp	r3, #1
 800801e:	d111      	bne.n	8008044 <takeMachineID+0xd8>
            if (cursorPosition == 3) {
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b03      	cmp	r3, #3
 8008024:	d102      	bne.n	800802c <takeMachineID+0xc0>
                cursorPosition = 14;
 8008026:	230e      	movs	r3, #14
 8008028:	60bb      	str	r3, [r7, #8]
 800802a:	e008      	b.n	800803e <takeMachineID+0xd2>
            } else if(cursorPosition == 10) {
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b0a      	cmp	r3, #10
 8008030:	d102      	bne.n	8008038 <takeMachineID+0xcc>
            	cursorPosition = 7;
 8008032:	2307      	movs	r3, #7
 8008034:	60bb      	str	r3, [r7, #8]
 8008036:	e002      	b.n	800803e <takeMachineID+0xd2>
            } else {
            	cursorPosition--;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3b01      	subs	r3, #1
 800803c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 800803e:	20fa      	movs	r0, #250	@ 0xfa
 8008040:	f001 fcee 	bl	8009a20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008044:	2102      	movs	r1, #2
 8008046:	486b      	ldr	r0, [pc, #428]	@ (80081f4 <takeMachineID+0x288>)
 8008048:	f002 faba 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800804c:	4603      	mov	r3, r0
 800804e:	2b01      	cmp	r3, #1
 8008050:	f040 80a1 	bne.w	8008196 <takeMachineID+0x22a>
        	if(cursorPosition == 3) {
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d10a      	bne.n	8008070 <takeMachineID+0x104>
        		machineID[arrayPos] = '0';
 800805a:	4a64      	ldr	r2, [pc, #400]	@ (80081ec <takeMachineID+0x280>)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	2230      	movs	r2, #48	@ 0x30
 8008062:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008064:	4a67      	ldr	r2, [pc, #412]	@ (8008204 <takeMachineID+0x298>)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	4413      	add	r3, r2
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	e07c      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 4) {
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b04      	cmp	r3, #4
 8008074:	d10a      	bne.n	800808c <takeMachineID+0x120>
        		machineID[arrayPos] = '1';
 8008076:	4a5d      	ldr	r2, [pc, #372]	@ (80081ec <takeMachineID+0x280>)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4413      	add	r3, r2
 800807c:	2231      	movs	r2, #49	@ 0x31
 800807e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008080:	4a60      	ldr	r2, [pc, #384]	@ (8008204 <takeMachineID+0x298>)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	4413      	add	r3, r2
 8008086:	2201      	movs	r2, #1
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e06e      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 5) {
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b05      	cmp	r3, #5
 8008090:	d10a      	bne.n	80080a8 <takeMachineID+0x13c>
        		machineID[arrayPos] = '2';
 8008092:	4a56      	ldr	r2, [pc, #344]	@ (80081ec <takeMachineID+0x280>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	2232      	movs	r2, #50	@ 0x32
 800809a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800809c:	4a59      	ldr	r2, [pc, #356]	@ (8008204 <takeMachineID+0x298>)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	4413      	add	r3, r2
 80080a2:	2202      	movs	r2, #2
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	e060      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 6) {
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b06      	cmp	r3, #6
 80080ac:	d10a      	bne.n	80080c4 <takeMachineID+0x158>
        		machineID[arrayPos] = '3';
 80080ae:	4a4f      	ldr	r2, [pc, #316]	@ (80081ec <takeMachineID+0x280>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4413      	add	r3, r2
 80080b4:	2233      	movs	r2, #51	@ 0x33
 80080b6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 80080b8:	4a52      	ldr	r2, [pc, #328]	@ (8008204 <takeMachineID+0x298>)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	4413      	add	r3, r2
 80080be:	2203      	movs	r2, #3
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e052      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 7) {
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b07      	cmp	r3, #7
 80080c8:	d10a      	bne.n	80080e0 <takeMachineID+0x174>
        		machineID[arrayPos] = '4';
 80080ca:	4a48      	ldr	r2, [pc, #288]	@ (80081ec <takeMachineID+0x280>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	2234      	movs	r2, #52	@ 0x34
 80080d2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80080d4:	4a4b      	ldr	r2, [pc, #300]	@ (8008204 <takeMachineID+0x298>)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	4413      	add	r3, r2
 80080da:	2204      	movs	r2, #4
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e044      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 10) {
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b0a      	cmp	r3, #10
 80080e4:	d10a      	bne.n	80080fc <takeMachineID+0x190>
        		machineID[arrayPos] = '5';
 80080e6:	4a41      	ldr	r2, [pc, #260]	@ (80081ec <takeMachineID+0x280>)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	2235      	movs	r2, #53	@ 0x35
 80080ee:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80080f0:	4a44      	ldr	r2, [pc, #272]	@ (8008204 <takeMachineID+0x298>)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	2205      	movs	r2, #5
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e036      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 11) {
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b0b      	cmp	r3, #11
 8008100:	d10a      	bne.n	8008118 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '6';
 8008102:	4a3a      	ldr	r2, [pc, #232]	@ (80081ec <takeMachineID+0x280>)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4413      	add	r3, r2
 8008108:	2236      	movs	r2, #54	@ 0x36
 800810a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 800810c:	4a3d      	ldr	r2, [pc, #244]	@ (8008204 <takeMachineID+0x298>)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	4413      	add	r3, r2
 8008112:	2206      	movs	r2, #6
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e028      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 12) {
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b0c      	cmp	r3, #12
 800811c:	d10a      	bne.n	8008134 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '7';
 800811e:	4a33      	ldr	r2, [pc, #204]	@ (80081ec <takeMachineID+0x280>)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4413      	add	r3, r2
 8008124:	2237      	movs	r2, #55	@ 0x37
 8008126:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008128:	4a36      	ldr	r2, [pc, #216]	@ (8008204 <takeMachineID+0x298>)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	4413      	add	r3, r2
 800812e:	2207      	movs	r2, #7
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e01a      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 13) {
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b0d      	cmp	r3, #13
 8008138:	d10a      	bne.n	8008150 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '8';
 800813a:	4a2c      	ldr	r2, [pc, #176]	@ (80081ec <takeMachineID+0x280>)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	2238      	movs	r2, #56	@ 0x38
 8008142:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008144:	4a2f      	ldr	r2, [pc, #188]	@ (8008204 <takeMachineID+0x298>)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	4413      	add	r3, r2
 800814a:	2208      	movs	r2, #8
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e00c      	b.n	800816a <takeMachineID+0x1fe>
        	} else if(cursorPosition == 14) {
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b0e      	cmp	r3, #14
 8008154:	d109      	bne.n	800816a <takeMachineID+0x1fe>
        		machineID[arrayPos] = '9';
 8008156:	4a25      	ldr	r2, [pc, #148]	@ (80081ec <takeMachineID+0x280>)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	2239      	movs	r2, #57	@ 0x39
 800815e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008160:	4a28      	ldr	r2, [pc, #160]	@ (8008204 <takeMachineID+0x298>)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	4413      	add	r3, r2
 8008166:	2209      	movs	r2, #9
 8008168:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	b2d9      	uxtb	r1, r3
 800816e:	4a1f      	ldr	r2, [pc, #124]	@ (80081ec <takeMachineID+0x280>)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	2001      	movs	r0, #1
 800817a:	f000 ff0c 	bl	8008f96 <lcd_print_char>

        	writeLoc++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3301      	adds	r3, #1
 8008188:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8008190:	2096      	movs	r0, #150	@ 0x96
 8008192:	f001 fc45 	bl	8009a20 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008196:	2104      	movs	r1, #4
 8008198:	4816      	ldr	r0, [pc, #88]	@ (80081f4 <takeMachineID+0x288>)
 800819a:	f002 fa11 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d147      	bne.n	8008234 <takeMachineID+0x2c8>
            if(strlen(machineID) >= 1) {
 80081a4:	4b11      	ldr	r3, [pc, #68]	@ (80081ec <takeMachineID+0x280>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d040      	beq.n	800822e <takeMachineID+0x2c2>
                machineID[arrayPos] = '\0';
 80081ac:	4a0f      	ldr	r2, [pc, #60]	@ (80081ec <takeMachineID+0x280>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 80081b6:	4a13      	ldr	r2, [pc, #76]	@ (8008204 <takeMachineID+0x298>)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	4413      	add	r3, r2
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	dd03      	ble.n	80081ce <takeMachineID+0x262>
                	writeLoc--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e004      	b.n	80081d8 <takeMachineID+0x26c>
                } else if(writeLoc < 5) {
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	dc01      	bgt.n	80081d8 <takeMachineID+0x26c>
                	writeLoc = 5;
 80081d4:	2305      	movs	r3, #5
 80081d6:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	dd14      	ble.n	8008208 <takeMachineID+0x29c>
                	arrayPos--;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	e015      	b.n	8008218 <takeMachineID+0x2ac>
 80081ec:	20001064 	.word	0x20001064
 80081f0:	20000000 	.word	0x20000000
 80081f4:	40010800 	.word	0x40010800
 80081f8:	200017e8 	.word	0x200017e8
 80081fc:	200017fc 	.word	0x200017fc
 8008200:	40011000 	.word	0x40011000
 8008204:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	da04      	bge.n	8008218 <takeMachineID+0x2ac>
                	arrayPos = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8008212:	4b0e      	ldr	r3, [pc, #56]	@ (800824c <takeMachineID+0x2e0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	3305      	adds	r3, #5
 800821e:	b2db      	uxtb	r3, r3
 8008220:	4619      	mov	r1, r3
 8008222:	2001      	movs	r0, #1
 8008224:	f000 fed8 	bl	8008fd8 <lcd_delete_char>
                HAL_Delay(50);
 8008228:	2032      	movs	r0, #50	@ 0x32
 800822a:	f001 fbf9 	bl	8009a20 <HAL_Delay>
            }

            HAL_Delay(150);
 800822e:	2096      	movs	r0, #150	@ 0x96
 8008230:	f001 fbf6 	bl	8009a20 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	4619      	mov	r1, r3
 800823a:	2002      	movs	r0, #2
 800823c:	f000 fe77 	bl	8008f2e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008240:	e6ac      	b.n	8007f9c <takeMachineID+0x30>
    }
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000000 	.word	0x20000000

08008250 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008256:	2301      	movs	r3, #1
 8008258:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800825a:	4a1e      	ldr	r2, [pc, #120]	@ (80082d4 <ssidConfirmation+0x84>)
 800825c:	2101      	movs	r1, #1
 800825e:	2001      	movs	r0, #1
 8008260:	f000 fe84 	bl	8008f6c <lcd_print>

	while(loopVal == 1) {
 8008264:	e012      	b.n	800828c <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008266:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <ssidConfirmation+0x88>)
 8008268:	2101      	movs	r1, #1
 800826a:	2002      	movs	r0, #2
 800826c:	f000 fe7e 	bl	8008f6c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008270:	2102      	movs	r1, #2
 8008272:	481a      	ldr	r0, [pc, #104]	@ (80082dc <ssidConfirmation+0x8c>)
 8008274:	f002 f9a4 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008278:	4603      	mov	r3, r0
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <ssidConfirmation+0x32>
			loopVal = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8008282:	4a17      	ldr	r2, [pc, #92]	@ (80082e0 <ssidConfirmation+0x90>)
 8008284:	2101      	movs	r1, #1
 8008286:	2001      	movs	r0, #1
 8008288:	f000 fe70 	bl	8008f6c <lcd_print>
	while(loopVal == 1) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d0e9      	beq.n	8008266 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8008292:	2000      	movs	r0, #0
 8008294:	f000 fec8 	bl	8009028 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008298:	4811      	ldr	r0, [pc, #68]	@ (80082e0 <ssidConfirmation+0x90>)
 800829a:	f7f7 ffc3 	bl	8000224 <strlen>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b14      	cmp	r3, #20
 80082a2:	d90f      	bls.n	80082c4 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 80082a4:	4a0f      	ldr	r2, [pc, #60]	@ (80082e4 <ssidConfirmation+0x94>)
 80082a6:	2101      	movs	r1, #1
 80082a8:	2001      	movs	r0, #1
 80082aa:	f000 fe5f 	bl	8008f6c <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 80082ae:	4a0e      	ldr	r2, [pc, #56]	@ (80082e8 <ssidConfirmation+0x98>)
 80082b0:	2101      	movs	r1, #1
 80082b2:	2002      	movs	r0, #2
 80082b4:	f000 fe5a 	bl	8008f6c <lcd_print>
        HAL_Delay(1250);
 80082b8:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80082bc:	f001 fbb0 	bl	8009a20 <HAL_Delay>

        return 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e003      	b.n	80082cc <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80082c4:	2001      	movs	r0, #1
 80082c6:	f7f8 f9f5 	bl	80006b4 <saveEEPROM>

    	return 1;
 80082ca:	2301      	movs	r3, #1
    }
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	0800e8d4 	.word	0x0800e8d4
 80082d8:	20001900 	.word	0x20001900
 80082dc:	40010800 	.word	0x40010800
 80082e0:	20001070 	.word	0x20001070
 80082e4:	20001810 	.word	0x20001810
 80082e8:	20001824 	.word	0x20001824

080082ec <takeWifiSSID>:

void takeWifiSSID() {
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80082f2:	2001      	movs	r0, #1
 80082f4:	f000 fe98 	bl	8009028 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80082f8:	2210      	movs	r2, #16
 80082fa:	2100      	movs	r1, #0
 80082fc:	48a4      	ldr	r0, [pc, #656]	@ (8008590 <takeWifiSSID+0x2a4>)
 80082fe:	f005 fae8 	bl	800d8d2 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008302:	2301      	movs	r3, #1
 8008304:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008306:	2307      	movs	r3, #7
 8008308:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800830a:	2301      	movs	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800830e:	2300      	movs	r3, #0
 8008310:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008312:	4ba0      	ldr	r3, [pc, #640]	@ (8008594 <takeWifiSSID+0x2a8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8008318:	2101      	movs	r1, #1
 800831a:	2002      	movs	r0, #2
 800831c:	f7f8 ff6a 	bl	80011f4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008320:	2108      	movs	r1, #8
 8008322:	489d      	ldr	r0, [pc, #628]	@ (8008598 <takeWifiSSID+0x2ac>)
 8008324:	f002 f94c 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008328:	4603      	mov	r3, r0
 800832a:	2b01      	cmp	r3, #1
 800832c:	d106      	bne.n	800833c <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 800832e:	f7ff ff8f 	bl	8008250 <ssidConfirmation>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 8126 	bne.w	8008586 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 800833a:	e7da      	b.n	80082f2 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800833c:	2101      	movs	r1, #1
 800833e:	4896      	ldr	r0, [pc, #600]	@ (8008598 <takeWifiSSID+0x2ac>)
 8008340:	f002 f93e 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008344:	4603      	mov	r3, r0
 8008346:	2b01      	cmp	r3, #1
 8008348:	d14d      	bne.n	80083e6 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b50      	cmp	r3, #80	@ 0x50
 800834e:	dd01      	ble.n	8008354 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8008350:	2301      	movs	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b10      	cmp	r3, #16
 8008358:	d13f      	bne.n	80083da <takeWifiSSID+0xee>
            	if(page == 1) {
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d109      	bne.n	8008374 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8008360:	2301      	movs	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
            		page++;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	3301      	adds	r3, #1
 8008368:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800836a:	2102      	movs	r1, #2
 800836c:	2002      	movs	r0, #2
 800836e:	f7f8 ff41 	bl	80011f4 <printTemplate>
 8008372:	e035      	b.n	80083e0 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d109      	bne.n	800838e <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]
            		page++;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	3301      	adds	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008384:	2103      	movs	r1, #3
 8008386:	2002      	movs	r0, #2
 8008388:	f7f8 ff34 	bl	80011f4 <printTemplate>
 800838c:	e028      	b.n	80083e0 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d109      	bne.n	80083a8 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008394:	2301      	movs	r3, #1
 8008396:	60fb      	str	r3, [r7, #12]
            		page++;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	3301      	adds	r3, #1
 800839c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800839e:	2104      	movs	r1, #4
 80083a0:	2002      	movs	r0, #2
 80083a2:	f7f8 ff27 	bl	80011f4 <printTemplate>
 80083a6:	e01b      	b.n	80083e0 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d109      	bne.n	80083c2 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
            		page++;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	3301      	adds	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80083b8:	2105      	movs	r1, #5
 80083ba:	2002      	movs	r0, #2
 80083bc:	f7f8 ff1a 	bl	80011f4 <printTemplate>
 80083c0:	e00e      	b.n	80083e0 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	d10b      	bne.n	80083e0 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80083c8:	2301      	movs	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80083cc:	2301      	movs	r3, #1
 80083ce:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80083d0:	2101      	movs	r1, #1
 80083d2:	2002      	movs	r0, #2
 80083d4:	f7f8 ff0e 	bl	80011f4 <printTemplate>
 80083d8:	e002      	b.n	80083e0 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80083e0:	2096      	movs	r0, #150	@ 0x96
 80083e2:	f001 fb1d 	bl	8009a20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80083e6:	2108      	movs	r1, #8
 80083e8:	486c      	ldr	r0, [pc, #432]	@ (800859c <takeWifiSSID+0x2b0>)
 80083ea:	f002 f8e9 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d149      	bne.n	8008488 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dc01      	bgt.n	80083fe <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80083fa:	2350      	movs	r3, #80	@ 0x50
 80083fc:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d13b      	bne.n	800847c <takeWifiSSID+0x190>
            	if(page == 1) {
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d108      	bne.n	800841c <takeWifiSSID+0x130>
            		cursorPosition = 16;
 800840a:	2310      	movs	r3, #16
 800840c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800840e:	2305      	movs	r3, #5
 8008410:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008412:	2105      	movs	r1, #5
 8008414:	2002      	movs	r0, #2
 8008416:	f7f8 feed 	bl	80011f4 <printTemplate>
 800841a:	e032      	b.n	8008482 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d108      	bne.n	8008434 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8008422:	2310      	movs	r3, #16
 8008424:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800842a:	2101      	movs	r1, #1
 800842c:	2002      	movs	r0, #2
 800842e:	f7f8 fee1 	bl	80011f4 <printTemplate>
 8008432:	e026      	b.n	8008482 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d108      	bne.n	800844c <takeWifiSSID+0x160>
            		cursorPosition = 16;
 800843a:	2310      	movs	r3, #16
 800843c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800843e:	2302      	movs	r3, #2
 8008440:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008442:	2102      	movs	r1, #2
 8008444:	2002      	movs	r0, #2
 8008446:	f7f8 fed5 	bl	80011f4 <printTemplate>
 800844a:	e01a      	b.n	8008482 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d108      	bne.n	8008464 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8008452:	2310      	movs	r3, #16
 8008454:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008456:	2303      	movs	r3, #3
 8008458:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800845a:	2103      	movs	r1, #3
 800845c:	2002      	movs	r0, #2
 800845e:	f7f8 fec9 	bl	80011f4 <printTemplate>
 8008462:	e00e      	b.n	8008482 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b05      	cmp	r3, #5
 8008468:	d10b      	bne.n	8008482 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 800846a:	2310      	movs	r3, #16
 800846c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800846e:	2304      	movs	r3, #4
 8008470:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008472:	2104      	movs	r1, #4
 8008474:	2002      	movs	r0, #2
 8008476:	f7f8 febd 	bl	80011f4 <printTemplate>
 800847a:	e002      	b.n	8008482 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b01      	subs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008482:	2096      	movs	r0, #150	@ 0x96
 8008484:	f001 facc 	bl	8009a20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008488:	2102      	movs	r1, #2
 800848a:	4843      	ldr	r0, [pc, #268]	@ (8008598 <takeWifiSSID+0x2ac>)
 800848c:	f002 f898 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008490:	4603      	mov	r3, r0
 8008492:	2b01      	cmp	r3, #1
 8008494:	d12f      	bne.n	80084f6 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	b2d9      	uxtb	r1, r3
 800849a:	4a41      	ldr	r2, [pc, #260]	@ (80085a0 <takeWifiSSID+0x2b4>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4413      	add	r3, r2
 80084a0:	460a      	mov	r2, r1
 80084a2:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 80084a4:	4a3f      	ldr	r2, [pc, #252]	@ (80085a4 <takeWifiSSID+0x2b8>)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4413      	add	r3, r2
 80084aa:	7819      	ldrb	r1, [r3, #0]
 80084ac:	4a38      	ldr	r2, [pc, #224]	@ (8008590 <takeWifiSSID+0x2a4>)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4413      	add	r3, r2
 80084b2:	460a      	mov	r2, r1
 80084b4:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	b2d9      	uxtb	r1, r3
 80084ba:	4a3a      	ldr	r2, [pc, #232]	@ (80085a4 <takeWifiSSID+0x2b8>)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	2001      	movs	r0, #1
 80084c6:	f000 fd66 	bl	8008f96 <lcd_print_char>

            writeLoc++;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3301      	adds	r3, #1
 80084ce:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3301      	adds	r3, #1
 80084da:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80084dc:	4a30      	ldr	r2, [pc, #192]	@ (80085a0 <takeWifiSSID+0x2b4>)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80084e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008590 <takeWifiSSID+0x2a4>)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4413      	add	r3, r2
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80084f0:	2096      	movs	r0, #150	@ 0x96
 80084f2:	f001 fa95 	bl	8009a20 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80084f6:	2104      	movs	r1, #4
 80084f8:	4827      	ldr	r0, [pc, #156]	@ (8008598 <takeWifiSSID+0x2ac>)
 80084fa:	f002 f861 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b01      	cmp	r3, #1
 8008502:	d139      	bne.n	8008578 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008504:	4b22      	ldr	r3, [pc, #136]	@ (8008590 <takeWifiSSID+0x2a4>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d032      	beq.n	8008572 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 800850c:	4a24      	ldr	r2, [pc, #144]	@ (80085a0 <takeWifiSSID+0x2b4>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8008516:	4a1e      	ldr	r2, [pc, #120]	@ (8008590 <takeWifiSSID+0x2a4>)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4413      	add	r3, r2
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b07      	cmp	r3, #7
 8008524:	dd03      	ble.n	800852e <takeWifiSSID+0x242>
        			writeLoc--;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	3b01      	subs	r3, #1
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	e004      	b.n	8008538 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b06      	cmp	r3, #6
 8008532:	dc01      	bgt.n	8008538 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008534:	2307      	movs	r3, #7
 8008536:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd06      	ble.n	800854c <takeWifiSSID+0x260>
        			arrayPosition--;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3b01      	subs	r3, #1
 8008542:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3b01      	subs	r3, #1
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	e007      	b.n	800855c <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da04      	bge.n	800855c <takeWifiSSID+0x270>
        			arrayPosition = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008556:	4b0f      	ldr	r3, [pc, #60]	@ (8008594 <takeWifiSSID+0x2a8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	3307      	adds	r3, #7
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4619      	mov	r1, r3
 8008566:	2001      	movs	r0, #1
 8008568:	f000 fd36 	bl	8008fd8 <lcd_delete_char>
        		HAL_Delay(50);
 800856c:	2032      	movs	r0, #50	@ 0x32
 800856e:	f001 fa57 	bl	8009a20 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008572:	2096      	movs	r0, #150	@ 0x96
 8008574:	f001 fa54 	bl	8009a20 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	4619      	mov	r1, r3
 800857e:	2002      	movs	r0, #2
 8008580:	f000 fcd5 	bl	8008f2e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008584:	e6cc      	b.n	8008320 <takeWifiSSID+0x34>
        		break;
 8008586:	bf00      	nop
    }
}
 8008588:	bf00      	nop
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20001070 	.word	0x20001070
 8008594:	20000004 	.word	0x20000004
 8008598:	40010800 	.word	0x40010800
 800859c:	40011000 	.word	0x40011000
 80085a0:	20000fec 	.word	0x20000fec
 80085a4:	20000018 	.word	0x20000018

080085a8 <passConfirmation>:

uint8_t passConfirmation() {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80085b2:	4a1e      	ldr	r2, [pc, #120]	@ (800862c <passConfirmation+0x84>)
 80085b4:	2101      	movs	r1, #1
 80085b6:	2001      	movs	r0, #1
 80085b8:	f000 fcd8 	bl	8008f6c <lcd_print>

	while(loopVal == 1) {
 80085bc:	e012      	b.n	80085e4 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80085be:	4a1c      	ldr	r2, [pc, #112]	@ (8008630 <passConfirmation+0x88>)
 80085c0:	2101      	movs	r1, #1
 80085c2:	2002      	movs	r0, #2
 80085c4:	f000 fcd2 	bl	8008f6c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80085c8:	2102      	movs	r1, #2
 80085ca:	481a      	ldr	r0, [pc, #104]	@ (8008634 <passConfirmation+0x8c>)
 80085cc:	f001 fff8 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d101      	bne.n	80085da <passConfirmation+0x32>
			loopVal = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80085da:	4a17      	ldr	r2, [pc, #92]	@ (8008638 <passConfirmation+0x90>)
 80085dc:	2101      	movs	r1, #1
 80085de:	2001      	movs	r0, #1
 80085e0:	f000 fcc4 	bl	8008f6c <lcd_print>
	while(loopVal == 1) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d0e9      	beq.n	80085be <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80085ea:	2000      	movs	r0, #0
 80085ec:	f000 fd1c 	bl	8009028 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80085f0:	4811      	ldr	r0, [pc, #68]	@ (8008638 <passConfirmation+0x90>)
 80085f2:	f7f7 fe17 	bl	8000224 <strlen>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b14      	cmp	r3, #20
 80085fa:	d90f      	bls.n	800861c <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80085fc:	4a0f      	ldr	r2, [pc, #60]	@ (800863c <passConfirmation+0x94>)
 80085fe:	2101      	movs	r1, #1
 8008600:	2001      	movs	r0, #1
 8008602:	f000 fcb3 	bl	8008f6c <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008606:	4a0e      	ldr	r2, [pc, #56]	@ (8008640 <passConfirmation+0x98>)
 8008608:	2101      	movs	r1, #1
 800860a:	2002      	movs	r0, #2
 800860c:	f000 fcae 	bl	8008f6c <lcd_print>
        HAL_Delay(1250);
 8008610:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008614:	f001 fa04 	bl	8009a20 <HAL_Delay>

        return 0;
 8008618:	2300      	movs	r3, #0
 800861a:	e003      	b.n	8008624 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 800861c:	2001      	movs	r0, #1
 800861e:	f7f8 f849 	bl	80006b4 <saveEEPROM>

    	return 1;
 8008622:	2301      	movs	r3, #1
    }
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	0800e8d4 	.word	0x0800e8d4
 8008630:	20001900 	.word	0x20001900
 8008634:	40010800 	.word	0x40010800
 8008638:	20001080 	.word	0x20001080
 800863c:	20001838 	.word	0x20001838
 8008640:	2000184c 	.word	0x2000184c

08008644 <takeWifiPass>:

void takeWifiPass() {
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800864a:	2001      	movs	r0, #1
 800864c:	f000 fcec 	bl	8009028 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008650:	2210      	movs	r2, #16
 8008652:	2100      	movs	r1, #0
 8008654:	48a4      	ldr	r0, [pc, #656]	@ (80088e8 <takeWifiPass+0x2a4>)
 8008656:	f005 f93c 	bl	800d8d2 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800865a:	2301      	movs	r3, #1
 800865c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800865e:	2307      	movs	r3, #7
 8008660:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008662:	2301      	movs	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008666:	2300      	movs	r3, #0
 8008668:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800866a:	4ba0      	ldr	r3, [pc, #640]	@ (80088ec <takeWifiPass+0x2a8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008670:	2101      	movs	r1, #1
 8008672:	2003      	movs	r0, #3
 8008674:	f7f8 fdbe 	bl	80011f4 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008678:	2108      	movs	r1, #8
 800867a:	489d      	ldr	r0, [pc, #628]	@ (80088f0 <takeWifiPass+0x2ac>)
 800867c:	f001 ffa0 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008680:	4603      	mov	r3, r0
 8008682:	2b01      	cmp	r3, #1
 8008684:	d106      	bne.n	8008694 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008686:	f7ff ff8f 	bl	80085a8 <passConfirmation>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8126 	bne.w	80088de <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008692:	e7da      	b.n	800864a <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008694:	2101      	movs	r1, #1
 8008696:	4896      	ldr	r0, [pc, #600]	@ (80088f0 <takeWifiPass+0x2ac>)
 8008698:	f001 ff92 	bl	800a5c0 <HAL_GPIO_ReadPin>
 800869c:	4603      	mov	r3, r0
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d14d      	bne.n	800873e <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b50      	cmp	r3, #80	@ 0x50
 80086a6:	dd01      	ble.n	80086ac <takeWifiPass+0x68>
        		cursorPosition = 1;
 80086a8:	2301      	movs	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d13f      	bne.n	8008732 <takeWifiPass+0xee>
            	if(page == 1) {
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d109      	bne.n	80086cc <takeWifiPass+0x88>
            		cursorPosition = 1;
 80086b8:	2301      	movs	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
            		page++;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	3301      	adds	r3, #1
 80086c0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80086c2:	2102      	movs	r1, #2
 80086c4:	2003      	movs	r0, #3
 80086c6:	f7f8 fd95 	bl	80011f4 <printTemplate>
 80086ca:	e035      	b.n	8008738 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d109      	bne.n	80086e6 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80086d2:	2301      	movs	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
            		page++;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3301      	adds	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80086dc:	2103      	movs	r1, #3
 80086de:	2003      	movs	r0, #3
 80086e0:	f7f8 fd88 	bl	80011f4 <printTemplate>
 80086e4:	e028      	b.n	8008738 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d109      	bne.n	8008700 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80086ec:	2301      	movs	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
            		page++;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	3301      	adds	r3, #1
 80086f4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80086f6:	2104      	movs	r1, #4
 80086f8:	2003      	movs	r0, #3
 80086fa:	f7f8 fd7b 	bl	80011f4 <printTemplate>
 80086fe:	e01b      	b.n	8008738 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b04      	cmp	r3, #4
 8008704:	d109      	bne.n	800871a <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	60fb      	str	r3, [r7, #12]
            		page++;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	3301      	adds	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008710:	2105      	movs	r1, #5
 8008712:	2003      	movs	r0, #3
 8008714:	f7f8 fd6e 	bl	80011f4 <printTemplate>
 8008718:	e00e      	b.n	8008738 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b05      	cmp	r3, #5
 800871e:	d10b      	bne.n	8008738 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8008720:	2301      	movs	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008724:	2301      	movs	r3, #1
 8008726:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008728:	2101      	movs	r1, #1
 800872a:	2003      	movs	r0, #3
 800872c:	f7f8 fd62 	bl	80011f4 <printTemplate>
 8008730:	e002      	b.n	8008738 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008738:	2096      	movs	r0, #150	@ 0x96
 800873a:	f001 f971 	bl	8009a20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800873e:	2108      	movs	r1, #8
 8008740:	486c      	ldr	r0, [pc, #432]	@ (80088f4 <takeWifiPass+0x2b0>)
 8008742:	f001 ff3d 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008746:	4603      	mov	r3, r0
 8008748:	2b01      	cmp	r3, #1
 800874a:	d149      	bne.n	80087e0 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dc01      	bgt.n	8008756 <takeWifiPass+0x112>
        		cursorPosition = 80;
 8008752:	2350      	movs	r3, #80	@ 0x50
 8008754:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d13b      	bne.n	80087d4 <takeWifiPass+0x190>
            	if(page == 1) {
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d108      	bne.n	8008774 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8008762:	2310      	movs	r3, #16
 8008764:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008766:	2305      	movs	r3, #5
 8008768:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800876a:	2105      	movs	r1, #5
 800876c:	2003      	movs	r0, #3
 800876e:	f7f8 fd41 	bl	80011f4 <printTemplate>
 8008772:	e032      	b.n	80087da <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d108      	bne.n	800878c <takeWifiPass+0x148>
            		cursorPosition = 16;
 800877a:	2310      	movs	r3, #16
 800877c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800877e:	2301      	movs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008782:	2101      	movs	r1, #1
 8008784:	2003      	movs	r0, #3
 8008786:	f7f8 fd35 	bl	80011f4 <printTemplate>
 800878a:	e026      	b.n	80087da <takeWifiPass+0x196>
            	} else if(page == 3) {
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d108      	bne.n	80087a4 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008792:	2310      	movs	r3, #16
 8008794:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008796:	2302      	movs	r3, #2
 8008798:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800879a:	2102      	movs	r1, #2
 800879c:	2003      	movs	r0, #3
 800879e:	f7f8 fd29 	bl	80011f4 <printTemplate>
 80087a2:	e01a      	b.n	80087da <takeWifiPass+0x196>
            	} else if(page == 4) {
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d108      	bne.n	80087bc <takeWifiPass+0x178>
            		cursorPosition = 16;
 80087aa:	2310      	movs	r3, #16
 80087ac:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80087ae:	2303      	movs	r3, #3
 80087b0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80087b2:	2103      	movs	r1, #3
 80087b4:	2003      	movs	r0, #3
 80087b6:	f7f8 fd1d 	bl	80011f4 <printTemplate>
 80087ba:	e00e      	b.n	80087da <takeWifiPass+0x196>
            	} else if(page == 5) {
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2b05      	cmp	r3, #5
 80087c0:	d10b      	bne.n	80087da <takeWifiPass+0x196>
            		cursorPosition = 16;
 80087c2:	2310      	movs	r3, #16
 80087c4:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80087c6:	2304      	movs	r3, #4
 80087c8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80087ca:	2104      	movs	r1, #4
 80087cc:	2003      	movs	r0, #3
 80087ce:	f7f8 fd11 	bl	80011f4 <printTemplate>
 80087d2:	e002      	b.n	80087da <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80087da:	2096      	movs	r0, #150	@ 0x96
 80087dc:	f001 f920 	bl	8009a20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80087e0:	2102      	movs	r1, #2
 80087e2:	4843      	ldr	r0, [pc, #268]	@ (80088f0 <takeWifiPass+0x2ac>)
 80087e4:	f001 feec 	bl	800a5c0 <HAL_GPIO_ReadPin>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d12f      	bne.n	800884e <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	b2d9      	uxtb	r1, r3
 80087f2:	4a41      	ldr	r2, [pc, #260]	@ (80088f8 <takeWifiPass+0x2b4>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	460a      	mov	r2, r1
 80087fa:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80087fc:	4a3f      	ldr	r2, [pc, #252]	@ (80088fc <takeWifiPass+0x2b8>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4413      	add	r3, r2
 8008802:	7819      	ldrb	r1, [r3, #0]
 8008804:	4a38      	ldr	r2, [pc, #224]	@ (80088e8 <takeWifiPass+0x2a4>)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4413      	add	r3, r2
 800880a:	460a      	mov	r2, r1
 800880c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	b2d9      	uxtb	r1, r3
 8008812:	4a3a      	ldr	r2, [pc, #232]	@ (80088fc <takeWifiPass+0x2b8>)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	2001      	movs	r0, #1
 800881e:	f000 fbba 	bl	8008f96 <lcd_print_char>

            writeLoc++;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	3301      	adds	r3, #1
 8008826:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3301      	adds	r3, #1
 800882c:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3301      	adds	r3, #1
 8008832:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008834:	4a30      	ldr	r2, [pc, #192]	@ (80088f8 <takeWifiPass+0x2b4>)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800883e:	4a2a      	ldr	r2, [pc, #168]	@ (80088e8 <takeWifiPass+0x2a4>)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4413      	add	r3, r2
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008848:	2096      	movs	r0, #150	@ 0x96
 800884a:	f001 f8e9 	bl	8009a20 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800884e:	2104      	movs	r1, #4
 8008850:	4827      	ldr	r0, [pc, #156]	@ (80088f0 <takeWifiPass+0x2ac>)
 8008852:	f001 feb5 	bl	800a5c0 <HAL_GPIO_ReadPin>
 8008856:	4603      	mov	r3, r0
 8008858:	2b01      	cmp	r3, #1
 800885a:	d139      	bne.n	80088d0 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 800885c:	4b22      	ldr	r3, [pc, #136]	@ (80088e8 <takeWifiPass+0x2a4>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d032      	beq.n	80088ca <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008864:	4a24      	ldr	r2, [pc, #144]	@ (80088f8 <takeWifiPass+0x2b4>)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4413      	add	r3, r2
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800886e:	4a1e      	ldr	r2, [pc, #120]	@ (80088e8 <takeWifiPass+0x2a4>)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4413      	add	r3, r2
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	2b07      	cmp	r3, #7
 800887c:	dd03      	ble.n	8008886 <takeWifiPass+0x242>
        			writeLoc--;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3b01      	subs	r3, #1
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	e004      	b.n	8008890 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b06      	cmp	r3, #6
 800888a:	dc01      	bgt.n	8008890 <takeWifiPass+0x24c>
        			writeLoc = 7;
 800888c:	2307      	movs	r3, #7
 800888e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd06      	ble.n	80088a4 <takeWifiPass+0x260>
        			arrayPosition--;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	3b01      	subs	r3, #1
 800889a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	e007      	b.n	80088b4 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	da04      	bge.n	80088b4 <takeWifiPass+0x270>
        			arrayPosition = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80088ae:	4b0f      	ldr	r3, [pc, #60]	@ (80088ec <takeWifiPass+0x2a8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	3307      	adds	r3, #7
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	4619      	mov	r1, r3
 80088be:	2001      	movs	r0, #1
 80088c0:	f000 fb8a 	bl	8008fd8 <lcd_delete_char>
        		HAL_Delay(50);
 80088c4:	2032      	movs	r0, #50	@ 0x32
 80088c6:	f001 f8ab 	bl	8009a20 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80088ca:	2096      	movs	r0, #150	@ 0x96
 80088cc:	f001 f8a8 	bl	8009a20 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	4619      	mov	r1, r3
 80088d6:	2002      	movs	r0, #2
 80088d8:	f000 fb29 	bl	8008f2e <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80088dc:	e6cc      	b.n	8008678 <takeWifiPass+0x34>
    	        break;
 80088de:	bf00      	nop
    }
}
 80088e0:	bf00      	nop
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20001080 	.word	0x20001080
 80088ec:	20000008 	.word	0x20000008
 80088f0:	40010800 	.word	0x40010800
 80088f4:	40011000 	.word	0x40011000
 80088f8:	20000fec 	.word	0x20000fec
 80088fc:	20000018 	.word	0x20000018

08008900 <mergeData>:

char* mergeData() {
 8008900:	b580      	push	{r7, lr}
 8008902:	b09c      	sub	sp, #112	@ 0x70
 8008904:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008906:	2300      	movs	r3, #0
 8008908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800890a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800890e:	2229      	movs	r2, #41	@ 0x29
 8008910:	2100      	movs	r1, #0
 8008912:	4618      	mov	r0, r3
 8008914:	f004 ffdd 	bl	800d8d2 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008918:	4b5f      	ldr	r3, [pc, #380]	@ (8008a98 <mergeData+0x198>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	703b      	strb	r3, [r7, #0]
 800891e:	4b5f      	ldr	r3, [pc, #380]	@ (8008a9c <mergeData+0x19c>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	707b      	strb	r3, [r7, #1]
 8008924:	4b5e      	ldr	r3, [pc, #376]	@ (8008aa0 <mergeData+0x1a0>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	70bb      	strb	r3, [r7, #2]
 800892a:	4b5e      	ldr	r3, [pc, #376]	@ (8008aa4 <mergeData+0x1a4>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	70fb      	strb	r3, [r7, #3]
 8008930:	4b5d      	ldr	r3, [pc, #372]	@ (8008aa8 <mergeData+0x1a8>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	713b      	strb	r3, [r7, #4]
 8008936:	4b5d      	ldr	r3, [pc, #372]	@ (8008aac <mergeData+0x1ac>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	717b      	strb	r3, [r7, #5]
 800893c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ab0 <mergeData+0x1b0>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	71bb      	strb	r3, [r7, #6]
 8008942:	4b5c      	ldr	r3, [pc, #368]	@ (8008ab4 <mergeData+0x1b4>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
 8008948:	4b5b      	ldr	r3, [pc, #364]	@ (8008ab8 <mergeData+0x1b8>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	723b      	strb	r3, [r7, #8]
 800894e:	4b5b      	ldr	r3, [pc, #364]	@ (8008abc <mergeData+0x1bc>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	727b      	strb	r3, [r7, #9]
 8008954:	4b5a      	ldr	r3, [pc, #360]	@ (8008ac0 <mergeData+0x1c0>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	72bb      	strb	r3, [r7, #10]
 800895a:	4b5a      	ldr	r3, [pc, #360]	@ (8008ac4 <mergeData+0x1c4>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	72fb      	strb	r3, [r7, #11]
 8008960:	4b59      	ldr	r3, [pc, #356]	@ (8008ac8 <mergeData+0x1c8>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	733b      	strb	r3, [r7, #12]
 8008966:	4b59      	ldr	r3, [pc, #356]	@ (8008acc <mergeData+0x1cc>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	737b      	strb	r3, [r7, #13]
 800896c:	4b58      	ldr	r3, [pc, #352]	@ (8008ad0 <mergeData+0x1d0>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	73bb      	strb	r3, [r7, #14]
 8008972:	4b58      	ldr	r3, [pc, #352]	@ (8008ad4 <mergeData+0x1d4>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	73fb      	strb	r3, [r7, #15]
 8008978:	4b57      	ldr	r3, [pc, #348]	@ (8008ad8 <mergeData+0x1d8>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	743b      	strb	r3, [r7, #16]
 800897e:	4b57      	ldr	r3, [pc, #348]	@ (8008adc <mergeData+0x1dc>)
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	747b      	strb	r3, [r7, #17]
 8008984:	4b56      	ldr	r3, [pc, #344]	@ (8008ae0 <mergeData+0x1e0>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	74bb      	strb	r3, [r7, #18]
 800898a:	4b56      	ldr	r3, [pc, #344]	@ (8008ae4 <mergeData+0x1e4>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	74fb      	strb	r3, [r7, #19]
 8008990:	4b55      	ldr	r3, [pc, #340]	@ (8008ae8 <mergeData+0x1e8>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	753b      	strb	r3, [r7, #20]
 8008996:	4b55      	ldr	r3, [pc, #340]	@ (8008aec <mergeData+0x1ec>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	757b      	strb	r3, [r7, #21]
 800899c:	4b54      	ldr	r3, [pc, #336]	@ (8008af0 <mergeData+0x1f0>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	75bb      	strb	r3, [r7, #22]
 80089a2:	4b54      	ldr	r3, [pc, #336]	@ (8008af4 <mergeData+0x1f4>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	75fb      	strb	r3, [r7, #23]
 80089a8:	4b53      	ldr	r3, [pc, #332]	@ (8008af8 <mergeData+0x1f8>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	763b      	strb	r3, [r7, #24]
 80089ae:	4b53      	ldr	r3, [pc, #332]	@ (8008afc <mergeData+0x1fc>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	767b      	strb	r3, [r7, #25]
 80089b4:	4b52      	ldr	r3, [pc, #328]	@ (8008b00 <mergeData+0x200>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	76bb      	strb	r3, [r7, #26]
 80089ba:	4b52      	ldr	r3, [pc, #328]	@ (8008b04 <mergeData+0x204>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	76fb      	strb	r3, [r7, #27]
 80089c0:	4b51      	ldr	r3, [pc, #324]	@ (8008b08 <mergeData+0x208>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	773b      	strb	r3, [r7, #28]
 80089c6:	4b51      	ldr	r3, [pc, #324]	@ (8008b0c <mergeData+0x20c>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 80089cc:	4b50      	ldr	r3, [pc, #320]	@ (8008b10 <mergeData+0x210>)
 80089ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80089d2:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 80089d4:	4b4e      	ldr	r3, [pc, #312]	@ (8008b10 <mergeData+0x210>)
 80089d6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 80089da:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 80089dc:	4b4c      	ldr	r3, [pc, #304]	@ (8008b10 <mergeData+0x210>)
 80089de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 80089e2:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 80089e6:	4b4a      	ldr	r3, [pc, #296]	@ (8008b10 <mergeData+0x210>)
 80089e8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 80089ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 80089f0:	4b47      	ldr	r3, [pc, #284]	@ (8008b10 <mergeData+0x210>)
 80089f2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 80089f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 80089fa:	4b45      	ldr	r3, [pc, #276]	@ (8008b10 <mergeData+0x210>)
 80089fc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008a04:	4b42      	ldr	r3, [pc, #264]	@ (8008b10 <mergeData+0x210>)
 8008a06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008a0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008a0e:	4b40      	ldr	r3, [pc, #256]	@ (8008b10 <mergeData+0x210>)
 8008a10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008a14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008a18:	4b3d      	ldr	r3, [pc, #244]	@ (8008b10 <mergeData+0x210>)
 8008a1a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008a1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008a22:	4b3b      	ldr	r3, [pc, #236]	@ (8008b10 <mergeData+0x210>)
 8008a24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a2c:	2306      	movs	r3, #6
 8008a2e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a32:	2300      	movs	r3, #0
 8008a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a36:	e015      	b.n	8008a64 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008a38:	463a      	mov	r2, r7
 8008a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a3c:	4413      	add	r3, r2
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a46:	4933      	ldr	r1, [pc, #204]	@ (8008b14 <mergeData+0x214>)
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f004 fed1 	bl	800d7f0 <siprintf>
	    strcat(combinedString, temp);
 8008a4e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008a52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f004 ff2b 	bl	800d8b4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a60:	3301      	adds	r3, #1
 8008a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a66:	2b28      	cmp	r3, #40	@ 0x28
 8008a68:	d9e6      	bls.n	8008a38 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008a6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f7 fbd8 	bl	8000224 <strlen>
 8008a74:	4603      	mov	r3, r0
 8008a76:	3301      	adds	r3, #1
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f004 fdcf 	bl	800d61c <malloc>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008a82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a86:	4619      	mov	r1, r3
 8008a88:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008a8a:	f004 ff67 	bl	800d95c <strcpy>
	return result;
 8008a8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3770      	adds	r7, #112	@ 0x70
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	200010cb 	.word	0x200010cb
 8008a9c:	200010bd 	.word	0x200010bd
 8008aa0:	200010c0 	.word	0x200010c0
 8008aa4:	200010c1 	.word	0x200010c1
 8008aa8:	200010c2 	.word	0x200010c2
 8008aac:	200010c9 	.word	0x200010c9
 8008ab0:	200010c3 	.word	0x200010c3
 8008ab4:	200010c4 	.word	0x200010c4
 8008ab8:	200010c8 	.word	0x200010c8
 8008abc:	200010c5 	.word	0x200010c5
 8008ac0:	200010d5 	.word	0x200010d5
 8008ac4:	200010c6 	.word	0x200010c6
 8008ac8:	200010d6 	.word	0x200010d6
 8008acc:	200010c7 	.word	0x200010c7
 8008ad0:	200010d7 	.word	0x200010d7
 8008ad4:	200010ca 	.word	0x200010ca
 8008ad8:	200010cc 	.word	0x200010cc
 8008adc:	200010cd 	.word	0x200010cd
 8008ae0:	200010ce 	.word	0x200010ce
 8008ae4:	200010cf 	.word	0x200010cf
 8008ae8:	200010d0 	.word	0x200010d0
 8008aec:	200010d1 	.word	0x200010d1
 8008af0:	200010d2 	.word	0x200010d2
 8008af4:	200010d3 	.word	0x200010d3
 8008af8:	200010d4 	.word	0x200010d4
 8008afc:	200010d8 	.word	0x200010d8
 8008b00:	200010da 	.word	0x200010da
 8008b04:	200010b4 	.word	0x200010b4
 8008b08:	200010b5 	.word	0x200010b5
 8008b0c:	200010dc 	.word	0x200010dc
 8008b10:	20000fec 	.word	0x20000fec
 8008b14:	0800e8e8 	.word	0x0800e8e8

08008b18 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008b1e:	4a13      	ldr	r2, [pc, #76]	@ (8008b6c <convertAndSendData+0x54>)
 8008b20:	2101      	movs	r1, #1
 8008b22:	2001      	movs	r0, #1
 8008b24:	f000 fa22 	bl	8008f6c <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008b28:	4a11      	ldr	r2, [pc, #68]	@ (8008b70 <convertAndSendData+0x58>)
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	2002      	movs	r0, #2
 8008b2e:	f000 fa1d 	bl	8008f6c <lcd_print>

	for(int i=0; i<2; i++) {
 8008b32:	2300      	movs	r3, #0
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	e00c      	b.n	8008b52 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008b38:	f7ff fee2 	bl	8008900 <mergeData>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <convertAndSendData+0x5c>)
 8008b42:	4a0d      	ldr	r2, [pc, #52]	@ (8008b78 <convertAndSendData+0x60>)
 8008b44:	490d      	ldr	r1, [pc, #52]	@ (8008b7c <convertAndSendData+0x64>)
 8008b46:	480e      	ldr	r0, [pc, #56]	@ (8008b80 <convertAndSendData+0x68>)
 8008b48:	f7f7 ffe2 	bl	8000b10 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	ddef      	ble.n	8008b38 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008b58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008b5c:	f000 ff60 	bl	8009a20 <HAL_Delay>
	lcd_clear();
 8008b60:	f000 fa30 	bl	8008fc4 <lcd_clear>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20001798 	.word	0x20001798
 8008b70:	200017ac 	.word	0x200017ac
 8008b74:	20001080 	.word	0x20001080
 8008b78:	20001070 	.word	0x20001070
 8008b7c:	20001064 	.word	0x20001064
 8008b80:	200019d8 	.word	0x200019d8

08008b84 <iotSetup>:

void iotSetup() {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008b88:	4b13      	ldr	r3, [pc, #76]	@ (8008bd8 <iotSetup+0x54>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d021      	beq.n	8008bd4 <iotSetup+0x50>
				HAL_Delay(200);
				goto takeIDSection;
			}
		}*/

		if(checkEEPROM4ID() != 1) {
 8008b90:	f000 f82e 	bl	8008bf0 <checkEEPROM4ID>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d001      	beq.n	8008b9e <iotSetup+0x1a>
			takeMachineID();
 8008b9a:	f7ff f9e7 	bl	8007f6c <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008b9e:	480f      	ldr	r0, [pc, #60]	@ (8008bdc <iotSetup+0x58>)
 8008ba0:	f7f7 fb40 	bl	8000224 <strlen>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d801      	bhi.n	8008bae <iotSetup+0x2a>
			takeWifiSSID();
 8008baa:	f7ff fb9f 	bl	80082ec <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008bae:	480c      	ldr	r0, [pc, #48]	@ (8008be0 <iotSetup+0x5c>)
 8008bb0:	f7f7 fb38 	bl	8000224 <strlen>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d801      	bhi.n	8008bbe <iotSetup+0x3a>
			takeWifiPass();
 8008bba:	f7ff fd43 	bl	8008644 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008bbe:	4a09      	ldr	r2, [pc, #36]	@ (8008be4 <iotSetup+0x60>)
 8008bc0:	4909      	ldr	r1, [pc, #36]	@ (8008be8 <iotSetup+0x64>)
 8008bc2:	480a      	ldr	r0, [pc, #40]	@ (8008bec <iotSetup+0x68>)
 8008bc4:	f7f7 fefa 	bl	80009bc <ESP8266_Init>
		HAL_Delay(500);
 8008bc8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bcc:	f000 ff28 	bl	8009a20 <HAL_Delay>
		convertAndSendData();
 8008bd0:	f7ff ffa2 	bl	8008b18 <convertAndSendData>
	}
}
 8008bd4:	bf00      	nop
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200010e7 	.word	0x200010e7
 8008bdc:	20001070 	.word	0x20001070
 8008be0:	20001080 	.word	0x20001080
 8008be4:	0800e8ec 	.word	0x0800e8ec
 8008be8:	0800e904 	.word	0x0800e904
 8008bec:	200019d8 	.word	0x200019d8

08008bf0 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c34 <checkEEPROM4ID+0x44>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c00:	2300      	movs	r3, #0
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	e00d      	b.n	8008c22 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008c06:	4a0c      	ldr	r2, [pc, #48]	@ (8008c38 <checkEEPROM4ID+0x48>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	607b      	str	r3, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b0b      	cmp	r3, #11
 8008c26:	ddee      	ble.n	8008c06 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008c28:	68bb      	ldr	r3, [r7, #8]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr
 8008c34:	20000000 	.word	0x20000000
 8008c38:	20000fec 	.word	0x20000fec

08008c3c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	f023 030f 	bic.w	r3, r3, #15
 8008c4c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008c54:	7b7b      	ldrb	r3, [r7, #13]
 8008c56:	f043 030c 	orr.w	r3, r3, #12
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008c5e:	7b7b      	ldrb	r3, [r7, #13]
 8008c60:	f043 0308 	orr.w	r3, r3, #8
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008c68:	7b3b      	ldrb	r3, [r7, #12]
 8008c6a:	f043 030c 	orr.w	r3, r3, #12
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008c72:	7b3b      	ldrb	r3, [r7, #12]
 8008c74:	f043 0308 	orr.w	r3, r3, #8
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008c7c:	bf00      	nop
 8008c7e:	4825      	ldr	r0, [pc, #148]	@ (8008d14 <lcd_send_cmd+0xd8>)
 8008c80:	f002 fac7 	bl	800b212 <HAL_I2C_GetError>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d0f9      	beq.n	8008c7e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008c8a:	bf00      	nop
 8008c8c:	4821      	ldr	r0, [pc, #132]	@ (8008d14 <lcd_send_cmd+0xd8>)
 8008c8e:	f002 fab3 	bl	800b1f8 <HAL_I2C_GetState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d1f9      	bne.n	8008c8c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008c98:	4b1f      	ldr	r3, [pc, #124]	@ (8008d18 <lcd_send_cmd+0xdc>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d116      	bne.n	8008cce <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e00f      	b.n	8008cc6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	3310      	adds	r3, #16
 8008caa:	443b      	add	r3, r7
 8008cac:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	f022 0208 	bic.w	r2, r2, #8
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	3310      	adds	r3, #16
 8008cba:	443b      	add	r3, r7
 8008cbc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	73fb      	strb	r3, [r7, #15]
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d9ec      	bls.n	8008ca6 <lcd_send_cmd+0x6a>
 8008ccc:	e015      	b.n	8008cfa <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73bb      	strb	r3, [r7, #14]
 8008cd2:	e00f      	b.n	8008cf4 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	3310      	adds	r3, #16
 8008cd8:	443b      	add	r3, r7
 8008cda:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	f042 0208 	orr.w	r2, r2, #8
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	3310      	adds	r3, #16
 8008ce8:	443b      	add	r3, r7
 8008cea:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	73bb      	strb	r3, [r7, #14]
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d9ec      	bls.n	8008cd4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008cfa:	f107 0208 	add.w	r2, r7, #8
 8008cfe:	2364      	movs	r3, #100	@ 0x64
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2304      	movs	r3, #4
 8008d04:	214e      	movs	r1, #78	@ 0x4e
 8008d06:	4803      	ldr	r0, [pc, #12]	@ (8008d14 <lcd_send_cmd+0xd8>)
 8008d08:	f001 fe16 	bl	800a938 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008d0c:	bf00      	nop
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	2000193c 	.word	0x2000193c
 8008d18:	20001911 	.word	0x20001911

08008d1c <lcd_send_data>:

void lcd_send_data (char data) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	4603      	mov	r3, r0
 8008d24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	f023 030f 	bic.w	r3, r3, #15
 8008d2c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008d34:	7b7b      	ldrb	r3, [r7, #13]
 8008d36:	f043 030d 	orr.w	r3, r3, #13
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008d3e:	7b7b      	ldrb	r3, [r7, #13]
 8008d40:	f043 0309 	orr.w	r3, r3, #9
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008d48:	7b3b      	ldrb	r3, [r7, #12]
 8008d4a:	f043 030d 	orr.w	r3, r3, #13
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008d52:	7b3b      	ldrb	r3, [r7, #12]
 8008d54:	f043 0309 	orr.w	r3, r3, #9
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008d5c:	bf00      	nop
 8008d5e:	4825      	ldr	r0, [pc, #148]	@ (8008df4 <lcd_send_data+0xd8>)
 8008d60:	f002 fa57 	bl	800b212 <HAL_I2C_GetError>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d0f9      	beq.n	8008d5e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008d6a:	bf00      	nop
 8008d6c:	4821      	ldr	r0, [pc, #132]	@ (8008df4 <lcd_send_data+0xd8>)
 8008d6e:	f002 fa43 	bl	800b1f8 <HAL_I2C_GetState>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d1f9      	bne.n	8008d6c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008d78:	4b1f      	ldr	r3, [pc, #124]	@ (8008df8 <lcd_send_data+0xdc>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d116      	bne.n	8008dae <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
 8008d84:	e00f      	b.n	8008da6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	3310      	adds	r3, #16
 8008d8a:	443b      	add	r3, r7
 8008d8c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	f022 0208 	bic.w	r2, r2, #8
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	3310      	adds	r3, #16
 8008d9a:	443b      	add	r3, r7
 8008d9c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	3301      	adds	r3, #1
 8008da4:	73fb      	strb	r3, [r7, #15]
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d9ec      	bls.n	8008d86 <lcd_send_data+0x6a>
 8008dac:	e015      	b.n	8008dda <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008dae:	2300      	movs	r3, #0
 8008db0:	73bb      	strb	r3, [r7, #14]
 8008db2:	e00f      	b.n	8008dd4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	3310      	adds	r3, #16
 8008db8:	443b      	add	r3, r7
 8008dba:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	f042 0208 	orr.w	r2, r2, #8
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	443b      	add	r3, r7
 8008dca:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	73bb      	strb	r3, [r7, #14]
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d9ec      	bls.n	8008db4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008dda:	f107 0208 	add.w	r2, r7, #8
 8008dde:	2364      	movs	r3, #100	@ 0x64
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	2304      	movs	r3, #4
 8008de4:	214e      	movs	r1, #78	@ 0x4e
 8008de6:	4803      	ldr	r0, [pc, #12]	@ (8008df4 <lcd_send_data+0xd8>)
 8008de8:	f001 fda6 	bl	800a938 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	2000193c 	.word	0x2000193c
 8008df8:	20001911 	.word	0x20001911

08008dfc <lcd_send_string>:

void lcd_send_string (char *str) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008e04:	e006      	b.n	8008e14 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff ff84 	bl	8008d1c <lcd_send_data>
	while (*str) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1f4      	bne.n	8008e06 <lcd_send_string+0xa>
	}
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	4603      	mov	r3, r0
 8008e30:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	f023 030f 	bic.w	r3, r3, #15
 8008e38:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008e40:	7b7b      	ldrb	r3, [r7, #13]
 8008e42:	f043 030d 	orr.w	r3, r3, #13
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008e4a:	7b7b      	ldrb	r3, [r7, #13]
 8008e4c:	f043 0309 	orr.w	r3, r3, #9
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008e54:	7b3b      	ldrb	r3, [r7, #12]
 8008e56:	f043 030d 	orr.w	r3, r3, #13
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008e5e:	7b3b      	ldrb	r3, [r7, #12]
 8008e60:	f043 0309 	orr.w	r3, r3, #9
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e68:	bf00      	nop
 8008e6a:	4825      	ldr	r0, [pc, #148]	@ (8008f00 <lcd_send_char+0xd8>)
 8008e6c:	f002 f9d1 	bl	800b212 <HAL_I2C_GetError>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d0f9      	beq.n	8008e6a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e76:	bf00      	nop
 8008e78:	4821      	ldr	r0, [pc, #132]	@ (8008f00 <lcd_send_char+0xd8>)
 8008e7a:	f002 f9bd 	bl	800b1f8 <HAL_I2C_GetState>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d1f9      	bne.n	8008e78 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008e84:	4b1f      	ldr	r3, [pc, #124]	@ (8008f04 <lcd_send_char+0xdc>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d116      	bne.n	8008eba <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e00f      	b.n	8008eb2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	3310      	adds	r3, #16
 8008e96:	443b      	add	r3, r7
 8008e98:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	f022 0208 	bic.w	r2, r2, #8
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	443b      	add	r3, r7
 8008ea8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	73fb      	strb	r3, [r7, #15]
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d9ec      	bls.n	8008e92 <lcd_send_char+0x6a>
 8008eb8:	e015      	b.n	8008ee6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73bb      	strb	r3, [r7, #14]
 8008ebe:	e00f      	b.n	8008ee0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	443b      	add	r3, r7
 8008ec6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	f042 0208 	orr.w	r2, r2, #8
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	3310      	adds	r3, #16
 8008ed4:	443b      	add	r3, r7
 8008ed6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	3301      	adds	r3, #1
 8008ede:	73bb      	strb	r3, [r7, #14]
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d9ec      	bls.n	8008ec0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008ee6:	f107 0208 	add.w	r2, r7, #8
 8008eea:	2364      	movs	r3, #100	@ 0x64
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	2304      	movs	r3, #4
 8008ef0:	214e      	movs	r1, #78	@ 0x4e
 8008ef2:	4803      	ldr	r0, [pc, #12]	@ (8008f00 <lcd_send_char+0xd8>)
 8008ef4:	f001 fd20 	bl	800a938 <HAL_I2C_Master_Transmit>
}
 8008ef8:	bf00      	nop
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	2000193c 	.word	0x2000193c
 8008f04:	20001911 	.word	0x20001911

08008f08 <lcd_init>:

void lcd_init (void) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008f0c:	2002      	movs	r0, #2
 8008f0e:	f7ff fe95 	bl	8008c3c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008f12:	2028      	movs	r0, #40	@ 0x28
 8008f14:	f7ff fe92 	bl	8008c3c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008f18:	200c      	movs	r0, #12
 8008f1a:	f7ff fe8f 	bl	8008c3c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008f1e:	2080      	movs	r0, #128	@ 0x80
 8008f20:	f7ff fe8c 	bl	8008c3c <lcd_send_cmd>
	lcd_backlight(1);
 8008f24:	2001      	movs	r0, #1
 8008f26:	f000 f86d 	bl	8009004 <lcd_backlight>
}
 8008f2a:	bf00      	nop
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	4603      	mov	r3, r0
 8008f36:	460a      	mov	r2, r1
 8008f38:	71fb      	strb	r3, [r7, #7]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d106      	bne.n	8008f52 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008f44:	79bb      	ldrb	r3, [r7, #6]
 8008f46:	337f      	adds	r3, #127	@ 0x7f
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff fe76 	bl	8008c3c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008f50:	e008      	b.n	8008f64 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d105      	bne.n	8008f64 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008f58:	79bb      	ldrb	r3, [r7, #6]
 8008f5a:	3b41      	subs	r3, #65	@ 0x41
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fe6c 	bl	8008c3c <lcd_send_cmd>
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	603a      	str	r2, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008f7c:	79ba      	ldrb	r2, [r7, #6]
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	4611      	mov	r1, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff ffd3 	bl	8008f2e <lcd_gotoxy>
	lcd_send_string(str);
 8008f88:	6838      	ldr	r0, [r7, #0]
 8008f8a:	f7ff ff37 	bl	8008dfc <lcd_send_string>
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	71fb      	strb	r3, [r7, #7]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	71bb      	strb	r3, [r7, #6]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008fa8:	79ba      	ldrb	r2, [r7, #6]
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff ffbd 	bl	8008f2e <lcd_gotoxy>
    lcd_send_char(ch);
 8008fb4:	797b      	ldrb	r3, [r7, #5]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff ff36 	bl	8008e28 <lcd_send_char>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <lcd_clear>:

void lcd_clear(void) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008fc8:	2001      	movs	r0, #1
 8008fca:	f7ff fe37 	bl	8008c3c <lcd_send_cmd>
    HAL_Delay(2);
 8008fce:	2002      	movs	r0, #2
 8008fd0:	f000 fd26 	bl	8009a20 <HAL_Delay>
}
 8008fd4:	bf00      	nop
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	460a      	mov	r2, r1
 8008fe2:	71fb      	strb	r3, [r7, #7]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008fe8:	79ba      	ldrb	r2, [r7, #6]
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff ff9d 	bl	8008f2e <lcd_gotoxy>

    lcd_send_char(' ');
 8008ff4:	2020      	movs	r0, #32
 8008ff6:	f7ff ff17 	bl	8008e28 <lcd_send_char>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800900e:	4a05      	ldr	r2, [pc, #20]	@ (8009024 <lcd_backlight+0x20>)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009014:	2000      	movs	r0, #0
 8009016:	f7ff fe11 	bl	8008c3c <lcd_send_cmd>
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20001911 	.word	0x20001911

08009028 <lcd_cursor>:

void lcd_cursor(int state) {
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d106      	bne.n	8009044 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009036:	200e      	movs	r0, #14
 8009038:	f7ff fe00 	bl	8008c3c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 800903c:	200f      	movs	r0, #15
 800903e:	f7ff fdfd 	bl	8008c3c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009042:	e002      	b.n	800904a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009044:	200c      	movs	r0, #12
 8009046:	f7ff fdf9 	bl	8008c3c <lcd_send_cmd>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800905c:	4b04      	ldr	r3, [pc, #16]	@ (8009070 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	4a03      	ldr	r2, [pc, #12]	@ (8009070 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009064:	6013      	str	r3, [r2, #0]
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr
 8009070:	20001094 	.word	0x20001094

08009074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009078:	f000 fc70 	bl	800995c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800907c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009080:	f000 fcce 	bl	8009a20 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009084:	f000 f89c 	bl	80091c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009088:	f000 f9be 	bl	8009408 <MX_GPIO_Init>
  MX_CAN_Init();
 800908c:	f000 f8de 	bl	800924c <MX_CAN_Init>
  MX_I2C1_Init();
 8009090:	f000 f910 	bl	80092b4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009094:	f000 f93c 	bl	8009310 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009098:	f000 f98c 	bl	80093b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800909c:	2201      	movs	r2, #1
 800909e:	2140      	movs	r1, #64	@ 0x40
 80090a0:	483e      	ldr	r0, [pc, #248]	@ (800919c <main+0x128>)
 80090a2:	f001 faa4 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80090a6:	2201      	movs	r2, #1
 80090a8:	2180      	movs	r1, #128	@ 0x80
 80090aa:	483c      	ldr	r0, [pc, #240]	@ (800919c <main+0x128>)
 80090ac:	f001 fa9f 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80090b0:	200a      	movs	r0, #10
 80090b2:	f000 fcb5 	bl	8009a20 <HAL_Delay>
  lcd_init();
 80090b6:	f7ff ff27 	bl	8008f08 <lcd_init>
  HAL_Delay(10);
 80090ba:	200a      	movs	r0, #10
 80090bc:	f000 fcb0 	bl	8009a20 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80090c0:	4837      	ldr	r0, [pc, #220]	@ (80091a0 <main+0x12c>)
 80090c2:	f003 f947 	bl	800c354 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80090c6:	bf00      	nop
 80090c8:	4836      	ldr	r0, [pc, #216]	@ (80091a4 <main+0x130>)
 80090ca:	f002 f8a2 	bl	800b212 <HAL_I2C_GetError>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d0f9      	beq.n	80090c8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80090d4:	bf00      	nop
 80090d6:	4833      	ldr	r0, [pc, #204]	@ (80091a4 <main+0x130>)
 80090d8:	f002 f88e 	bl	800b1f8 <HAL_I2C_GetState>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d1f9      	bne.n	80090d6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80090e2:	2200      	movs	r2, #0
 80090e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80090e8:	482c      	ldr	r0, [pc, #176]	@ (800919c <main+0x128>)
 80090ea:	f001 fa80 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80090ee:	2200      	movs	r2, #0
 80090f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80090f4:	4829      	ldr	r0, [pc, #164]	@ (800919c <main+0x128>)
 80090f6:	f001 fa7a 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80090fa:	2200      	movs	r2, #0
 80090fc:	2104      	movs	r1, #4
 80090fe:	4827      	ldr	r0, [pc, #156]	@ (800919c <main+0x128>)
 8009100:	f001 fa75 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009104:	2200      	movs	r2, #0
 8009106:	2102      	movs	r1, #2
 8009108:	4824      	ldr	r0, [pc, #144]	@ (800919c <main+0x128>)
 800910a:	f001 fa70 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800910e:	2200      	movs	r2, #0
 8009110:	2101      	movs	r1, #1
 8009112:	4822      	ldr	r0, [pc, #136]	@ (800919c <main+0x128>)
 8009114:	f001 fa6b 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009118:	2200      	movs	r2, #0
 800911a:	2120      	movs	r1, #32
 800911c:	4822      	ldr	r0, [pc, #136]	@ (80091a8 <main+0x134>)
 800911e:	f001 fa66 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009122:	2200      	movs	r2, #0
 8009124:	2110      	movs	r1, #16
 8009126:	4820      	ldr	r0, [pc, #128]	@ (80091a8 <main+0x134>)
 8009128:	f001 fa61 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800912c:	2200      	movs	r2, #0
 800912e:	2180      	movs	r1, #128	@ 0x80
 8009130:	481e      	ldr	r0, [pc, #120]	@ (80091ac <main+0x138>)
 8009132:	f001 fa5c 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009136:	2200      	movs	r2, #0
 8009138:	2140      	movs	r1, #64	@ 0x40
 800913a:	481c      	ldr	r0, [pc, #112]	@ (80091ac <main+0x138>)
 800913c:	f001 fa57 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009140:	2200      	movs	r2, #0
 8009142:	2120      	movs	r1, #32
 8009144:	4819      	ldr	r0, [pc, #100]	@ (80091ac <main+0x138>)
 8009146:	f001 fa52 	bl	800a5ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800914a:	2200      	movs	r2, #0
 800914c:	2110      	movs	r1, #16
 800914e:	4817      	ldr	r0, [pc, #92]	@ (80091ac <main+0x138>)
 8009150:	f001 fa4d 	bl	800a5ee <HAL_GPIO_WritePin>

  i2cTest();
 8009154:	f7f7 ffa0 	bl	8001098 <i2cTest>
  HAL_Delay(100);
 8009158:	2064      	movs	r0, #100	@ 0x64
 800915a:	f000 fc61 	bl	8009a20 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800915e:	4a14      	ldr	r2, [pc, #80]	@ (80091b0 <main+0x13c>)
 8009160:	2101      	movs	r1, #1
 8009162:	2001      	movs	r0, #1
 8009164:	f7ff ff02 	bl	8008f6c <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009168:	4a12      	ldr	r2, [pc, #72]	@ (80091b4 <main+0x140>)
 800916a:	2101      	movs	r1, #1
 800916c:	2002      	movs	r0, #2
 800916e:	f7ff fefd 	bl	8008f6c <lcd_print>
  HAL_Delay(1000);
 8009172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009176:	f000 fc53 	bl	8009a20 <HAL_Delay>
  lcd_clear();
 800917a:	f7ff ff23 	bl	8008fc4 <lcd_clear>

  eepromKontrol();
 800917e:	f7f7 f859 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009182:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009186:	f000 fc4b 	bl	8009a20 <HAL_Delay>

  backLightTimer = millis;
 800918a:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <main+0x144>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a0b      	ldr	r2, [pc, #44]	@ (80091bc <main+0x148>)
 8009190:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 8009192:	f7ff fcf7 	bl	8008b84 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009196:	f7fc fe6f 	bl	8005e78 <mainLoop>
 800919a:	e7fc      	b.n	8009196 <main+0x122>
 800919c:	40010c00 	.word	0x40010c00
 80091a0:	20001990 	.word	0x20001990
 80091a4:	2000193c 	.word	0x2000193c
 80091a8:	40011000 	.word	0x40011000
 80091ac:	40010800 	.word	0x40010800
 80091b0:	2000009c 	.word	0x2000009c
 80091b4:	200000b0 	.word	0x200000b0
 80091b8:	20001094 	.word	0x20001094
 80091bc:	200010b0 	.word	0x200010b0

080091c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b090      	sub	sp, #64	@ 0x40
 80091c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091c6:	f107 0318 	add.w	r3, r7, #24
 80091ca:	2228      	movs	r2, #40	@ 0x28
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f004 fb7f 	bl	800d8d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091d4:	1d3b      	adds	r3, r7, #4
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	605a      	str	r2, [r3, #4]
 80091dc:	609a      	str	r2, [r3, #8]
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091e2:	2301      	movs	r3, #1
 80091e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80091e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80091ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80091ec:	2300      	movs	r3, #0
 80091ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80091f0:	2301      	movs	r3, #1
 80091f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091f4:	2302      	movs	r3, #2
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80091fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80091fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009204:	f107 0318 	add.w	r3, r7, #24
 8009208:	4618      	mov	r0, r3
 800920a:	f002 fc43 	bl	800ba94 <HAL_RCC_OscConfig>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009214:	f000 f9a2 	bl	800955c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009218:	230f      	movs	r3, #15
 800921a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800921c:	2302      	movs	r3, #2
 800921e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800922e:	1d3b      	adds	r3, r7, #4
 8009230:	2102      	movs	r1, #2
 8009232:	4618      	mov	r0, r3
 8009234:	f002 feb0 	bl	800bf98 <HAL_RCC_ClockConfig>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800923e:	f000 f98d 	bl	800955c <Error_Handler>
  }
}
 8009242:	bf00      	nop
 8009244:	3740      	adds	r7, #64	@ 0x40
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009250:	4b16      	ldr	r3, [pc, #88]	@ (80092ac <MX_CAN_Init+0x60>)
 8009252:	4a17      	ldr	r2, [pc, #92]	@ (80092b0 <MX_CAN_Init+0x64>)
 8009254:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009256:	4b15      	ldr	r3, [pc, #84]	@ (80092ac <MX_CAN_Init+0x60>)
 8009258:	2210      	movs	r2, #16
 800925a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800925c:	4b13      	ldr	r3, [pc, #76]	@ (80092ac <MX_CAN_Init+0x60>)
 800925e:	2200      	movs	r2, #0
 8009260:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009262:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <MX_CAN_Init+0x60>)
 8009264:	2200      	movs	r2, #0
 8009266:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009268:	4b10      	ldr	r3, [pc, #64]	@ (80092ac <MX_CAN_Init+0x60>)
 800926a:	2200      	movs	r2, #0
 800926c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800926e:	4b0f      	ldr	r3, [pc, #60]	@ (80092ac <MX_CAN_Init+0x60>)
 8009270:	2200      	movs	r2, #0
 8009272:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009274:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <MX_CAN_Init+0x60>)
 8009276:	2200      	movs	r2, #0
 8009278:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800927a:	4b0c      	ldr	r3, [pc, #48]	@ (80092ac <MX_CAN_Init+0x60>)
 800927c:	2200      	movs	r2, #0
 800927e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009280:	4b0a      	ldr	r3, [pc, #40]	@ (80092ac <MX_CAN_Init+0x60>)
 8009282:	2200      	movs	r2, #0
 8009284:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009286:	4b09      	ldr	r3, [pc, #36]	@ (80092ac <MX_CAN_Init+0x60>)
 8009288:	2200      	movs	r2, #0
 800928a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800928c:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <MX_CAN_Init+0x60>)
 800928e:	2200      	movs	r2, #0
 8009290:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009292:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <MX_CAN_Init+0x60>)
 8009294:	2200      	movs	r2, #0
 8009296:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009298:	4804      	ldr	r0, [pc, #16]	@ (80092ac <MX_CAN_Init+0x60>)
 800929a:	f000 fbe5 	bl	8009a68 <HAL_CAN_Init>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80092a4:	f000 f95a 	bl	800955c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80092a8:	bf00      	nop
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20001914 	.word	0x20001914
 80092b0:	40006400 	.word	0x40006400

080092b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80092b8:	4b12      	ldr	r3, [pc, #72]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092ba:	4a13      	ldr	r2, [pc, #76]	@ (8009308 <MX_I2C1_Init+0x54>)
 80092bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80092be:	4b11      	ldr	r3, [pc, #68]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092c0:	4a12      	ldr	r2, [pc, #72]	@ (800930c <MX_I2C1_Init+0x58>)
 80092c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80092c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80092ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80092d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80092d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092da:	2200      	movs	r2, #0
 80092dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80092de:	4b09      	ldr	r3, [pc, #36]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80092e4:	4b07      	ldr	r3, [pc, #28]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80092ea:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80092f0:	4804      	ldr	r0, [pc, #16]	@ (8009304 <MX_I2C1_Init+0x50>)
 80092f2:	f001 f9ad 	bl	800a650 <HAL_I2C_Init>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80092fc:	f000 f92e 	bl	800955c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009300:	bf00      	nop
 8009302:	bd80      	pop	{r7, pc}
 8009304:	2000193c 	.word	0x2000193c
 8009308:	40005400 	.word	0x40005400
 800930c:	00061a80 	.word	0x00061a80

08009310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009316:	f107 0308 	add.w	r3, r7, #8
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	605a      	str	r2, [r3, #4]
 8009320:	609a      	str	r2, [r3, #8]
 8009322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009324:	463b      	mov	r3, r7
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800932c:	4b1f      	ldr	r3, [pc, #124]	@ (80093ac <MX_TIM1_Init+0x9c>)
 800932e:	4a20      	ldr	r2, [pc, #128]	@ (80093b0 <MX_TIM1_Init+0xa0>)
 8009330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009332:	4b1e      	ldr	r3, [pc, #120]	@ (80093ac <MX_TIM1_Init+0x9c>)
 8009334:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009338:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800933a:	4b1c      	ldr	r3, [pc, #112]	@ (80093ac <MX_TIM1_Init+0x9c>)
 800933c:	2200      	movs	r2, #0
 800933e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009340:	4b1a      	ldr	r3, [pc, #104]	@ (80093ac <MX_TIM1_Init+0x9c>)
 8009342:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009346:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009348:	4b18      	ldr	r3, [pc, #96]	@ (80093ac <MX_TIM1_Init+0x9c>)
 800934a:	2200      	movs	r2, #0
 800934c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800934e:	4b17      	ldr	r3, [pc, #92]	@ (80093ac <MX_TIM1_Init+0x9c>)
 8009350:	2200      	movs	r2, #0
 8009352:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009354:	4b15      	ldr	r3, [pc, #84]	@ (80093ac <MX_TIM1_Init+0x9c>)
 8009356:	2200      	movs	r2, #0
 8009358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800935a:	4814      	ldr	r0, [pc, #80]	@ (80093ac <MX_TIM1_Init+0x9c>)
 800935c:	f002 ffaa 	bl	800c2b4 <HAL_TIM_Base_Init>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009366:	f000 f8f9 	bl	800955c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800936a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800936e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009370:	f107 0308 	add.w	r3, r7, #8
 8009374:	4619      	mov	r1, r3
 8009376:	480d      	ldr	r0, [pc, #52]	@ (80093ac <MX_TIM1_Init+0x9c>)
 8009378:	f003 f954 	bl	800c624 <HAL_TIM_ConfigClockSource>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009382:	f000 f8eb 	bl	800955c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009386:	2300      	movs	r3, #0
 8009388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800938a:	2300      	movs	r3, #0
 800938c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800938e:	463b      	mov	r3, r7
 8009390:	4619      	mov	r1, r3
 8009392:	4806      	ldr	r0, [pc, #24]	@ (80093ac <MX_TIM1_Init+0x9c>)
 8009394:	f003 fb42 	bl	800ca1c <HAL_TIMEx_MasterConfigSynchronization>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800939e:	f000 f8dd 	bl	800955c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80093a2:	bf00      	nop
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20001990 	.word	0x20001990
 80093b0:	40012c00 	.word	0x40012c00

080093b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80093b8:	4b11      	ldr	r3, [pc, #68]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093ba:	4a12      	ldr	r2, [pc, #72]	@ (8009404 <MX_USART1_UART_Init+0x50>)
 80093bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80093be:	4b10      	ldr	r3, [pc, #64]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80093c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80093c6:	4b0e      	ldr	r3, [pc, #56]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80093cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80093d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80093d8:	4b09      	ldr	r3, [pc, #36]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093da:	220c      	movs	r2, #12
 80093dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80093de:	4b08      	ldr	r3, [pc, #32]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80093e4:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80093ea:	4805      	ldr	r0, [pc, #20]	@ (8009400 <MX_USART1_UART_Init+0x4c>)
 80093ec:	f003 fb94 	bl	800cb18 <HAL_UART_Init>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80093f6:	f000 f8b1 	bl	800955c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80093fa:	bf00      	nop
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200019d8 	.word	0x200019d8
 8009404:	40013800 	.word	0x40013800

08009408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800940e:	f107 0310 	add.w	r3, r7, #16
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	605a      	str	r2, [r3, #4]
 8009418:	609a      	str	r2, [r3, #8]
 800941a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800941c:	4b4b      	ldr	r3, [pc, #300]	@ (800954c <MX_GPIO_Init+0x144>)
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	4a4a      	ldr	r2, [pc, #296]	@ (800954c <MX_GPIO_Init+0x144>)
 8009422:	f043 0310 	orr.w	r3, r3, #16
 8009426:	6193      	str	r3, [r2, #24]
 8009428:	4b48      	ldr	r3, [pc, #288]	@ (800954c <MX_GPIO_Init+0x144>)
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009434:	4b45      	ldr	r3, [pc, #276]	@ (800954c <MX_GPIO_Init+0x144>)
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	4a44      	ldr	r2, [pc, #272]	@ (800954c <MX_GPIO_Init+0x144>)
 800943a:	f043 0320 	orr.w	r3, r3, #32
 800943e:	6193      	str	r3, [r2, #24]
 8009440:	4b42      	ldr	r3, [pc, #264]	@ (800954c <MX_GPIO_Init+0x144>)
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	60bb      	str	r3, [r7, #8]
 800944a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800944c:	4b3f      	ldr	r3, [pc, #252]	@ (800954c <MX_GPIO_Init+0x144>)
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	4a3e      	ldr	r2, [pc, #248]	@ (800954c <MX_GPIO_Init+0x144>)
 8009452:	f043 0304 	orr.w	r3, r3, #4
 8009456:	6193      	str	r3, [r2, #24]
 8009458:	4b3c      	ldr	r3, [pc, #240]	@ (800954c <MX_GPIO_Init+0x144>)
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	607b      	str	r3, [r7, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009464:	4b39      	ldr	r3, [pc, #228]	@ (800954c <MX_GPIO_Init+0x144>)
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	4a38      	ldr	r2, [pc, #224]	@ (800954c <MX_GPIO_Init+0x144>)
 800946a:	f043 0308 	orr.w	r3, r3, #8
 800946e:	6193      	str	r3, [r2, #24]
 8009470:	4b36      	ldr	r3, [pc, #216]	@ (800954c <MX_GPIO_Init+0x144>)
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	603b      	str	r3, [r7, #0]
 800947a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800947c:	2200      	movs	r2, #0
 800947e:	21f0      	movs	r1, #240	@ 0xf0
 8009480:	4833      	ldr	r0, [pc, #204]	@ (8009550 <MX_GPIO_Init+0x148>)
 8009482:	f001 f8b4 	bl	800a5ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009486:	2200      	movs	r2, #0
 8009488:	f241 0130 	movw	r1, #4144	@ 0x1030
 800948c:	4831      	ldr	r0, [pc, #196]	@ (8009554 <MX_GPIO_Init+0x14c>)
 800948e:	f001 f8ae 	bl	800a5ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009492:	2200      	movs	r2, #0
 8009494:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009498:	482f      	ldr	r0, [pc, #188]	@ (8009558 <MX_GPIO_Init+0x150>)
 800949a:	f001 f8a8 	bl	800a5ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800949e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 80094a2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094a4:	2300      	movs	r3, #0
 80094a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094ac:	f107 0310 	add.w	r3, r7, #16
 80094b0:	4619      	mov	r1, r3
 80094b2:	4828      	ldr	r0, [pc, #160]	@ (8009554 <MX_GPIO_Init+0x14c>)
 80094b4:	f000 fe24 	bl	800a100 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80094b8:	f248 130f 	movw	r3, #33039	@ 0x810f
 80094bc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094c6:	f107 0310 	add.w	r3, r7, #16
 80094ca:	4619      	mov	r1, r3
 80094cc:	4820      	ldr	r0, [pc, #128]	@ (8009550 <MX_GPIO_Init+0x148>)
 80094ce:	f000 fe17 	bl	800a100 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80094d2:	23f0      	movs	r3, #240	@ 0xf0
 80094d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094d6:	2301      	movs	r3, #1
 80094d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094de:	2302      	movs	r3, #2
 80094e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e2:	f107 0310 	add.w	r3, r7, #16
 80094e6:	4619      	mov	r1, r3
 80094e8:	4819      	ldr	r0, [pc, #100]	@ (8009550 <MX_GPIO_Init+0x148>)
 80094ea:	f000 fe09 	bl	800a100 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80094ee:	f241 0330 	movw	r3, #4144	@ 0x1030
 80094f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094f4:	2301      	movs	r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094fc:	2302      	movs	r3, #2
 80094fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009500:	f107 0310 	add.w	r3, r7, #16
 8009504:	4619      	mov	r1, r3
 8009506:	4813      	ldr	r0, [pc, #76]	@ (8009554 <MX_GPIO_Init+0x14c>)
 8009508:	f000 fdfa 	bl	800a100 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800950c:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009510:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009512:	2301      	movs	r3, #1
 8009514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009516:	2300      	movs	r3, #0
 8009518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800951a:	2302      	movs	r3, #2
 800951c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800951e:	f107 0310 	add.w	r3, r7, #16
 8009522:	4619      	mov	r1, r3
 8009524:	480c      	ldr	r0, [pc, #48]	@ (8009558 <MX_GPIO_Init+0x150>)
 8009526:	f000 fdeb 	bl	800a100 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800952a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800952e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009538:	f107 0310 	add.w	r3, r7, #16
 800953c:	4619      	mov	r1, r3
 800953e:	4806      	ldr	r0, [pc, #24]	@ (8009558 <MX_GPIO_Init+0x150>)
 8009540:	f000 fdde 	bl	800a100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009544:	bf00      	nop
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40021000 	.word	0x40021000
 8009550:	40010800 	.word	0x40010800
 8009554:	40011000 	.word	0x40011000
 8009558:	40010c00 	.word	0x40010c00

0800955c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009560:	bf00      	nop
 8009562:	46bd      	mov	sp, r7
 8009564:	bc80      	pop	{r7}
 8009566:	4770      	bx	lr

08009568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800956e:	4b15      	ldr	r3, [pc, #84]	@ (80095c4 <HAL_MspInit+0x5c>)
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	4a14      	ldr	r2, [pc, #80]	@ (80095c4 <HAL_MspInit+0x5c>)
 8009574:	f043 0301 	orr.w	r3, r3, #1
 8009578:	6193      	str	r3, [r2, #24]
 800957a:	4b12      	ldr	r3, [pc, #72]	@ (80095c4 <HAL_MspInit+0x5c>)
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	60bb      	str	r3, [r7, #8]
 8009584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009586:	4b0f      	ldr	r3, [pc, #60]	@ (80095c4 <HAL_MspInit+0x5c>)
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	4a0e      	ldr	r2, [pc, #56]	@ (80095c4 <HAL_MspInit+0x5c>)
 800958c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009590:	61d3      	str	r3, [r2, #28]
 8009592:	4b0c      	ldr	r3, [pc, #48]	@ (80095c4 <HAL_MspInit+0x5c>)
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800959a:	607b      	str	r3, [r7, #4]
 800959c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800959e:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <HAL_MspInit+0x60>)
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	4a04      	ldr	r2, [pc, #16]	@ (80095c8 <HAL_MspInit+0x60>)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	bc80      	pop	{r7}
 80095c2:	4770      	bx	lr
 80095c4:	40021000 	.word	0x40021000
 80095c8:	40010000 	.word	0x40010000

080095cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095d4:	f107 0310 	add.w	r3, r7, #16
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	609a      	str	r2, [r3, #8]
 80095e0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009658 <HAL_CAN_MspInit+0x8c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d131      	bne.n	8009650 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80095ec:	4b1b      	ldr	r3, [pc, #108]	@ (800965c <HAL_CAN_MspInit+0x90>)
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	4a1a      	ldr	r2, [pc, #104]	@ (800965c <HAL_CAN_MspInit+0x90>)
 80095f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80095f6:	61d3      	str	r3, [r2, #28]
 80095f8:	4b18      	ldr	r3, [pc, #96]	@ (800965c <HAL_CAN_MspInit+0x90>)
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009604:	4b15      	ldr	r3, [pc, #84]	@ (800965c <HAL_CAN_MspInit+0x90>)
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	4a14      	ldr	r2, [pc, #80]	@ (800965c <HAL_CAN_MspInit+0x90>)
 800960a:	f043 0304 	orr.w	r3, r3, #4
 800960e:	6193      	str	r3, [r2, #24]
 8009610:	4b12      	ldr	r3, [pc, #72]	@ (800965c <HAL_CAN_MspInit+0x90>)
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	60bb      	str	r3, [r7, #8]
 800961a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800961c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009622:	2300      	movs	r3, #0
 8009624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009626:	2300      	movs	r3, #0
 8009628:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800962a:	f107 0310 	add.w	r3, r7, #16
 800962e:	4619      	mov	r1, r3
 8009630:	480b      	ldr	r0, [pc, #44]	@ (8009660 <HAL_CAN_MspInit+0x94>)
 8009632:	f000 fd65 	bl	800a100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800963a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800963c:	2302      	movs	r3, #2
 800963e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009640:	2303      	movs	r3, #3
 8009642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009644:	f107 0310 	add.w	r3, r7, #16
 8009648:	4619      	mov	r1, r3
 800964a:	4805      	ldr	r0, [pc, #20]	@ (8009660 <HAL_CAN_MspInit+0x94>)
 800964c:	f000 fd58 	bl	800a100 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009650:	bf00      	nop
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40006400 	.word	0x40006400
 800965c:	40021000 	.word	0x40021000
 8009660:	40010800 	.word	0x40010800

08009664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800966c:	f107 0310 	add.w	r3, r7, #16
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	605a      	str	r2, [r3, #4]
 8009676:	609a      	str	r2, [r3, #8]
 8009678:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a15      	ldr	r2, [pc, #84]	@ (80096d4 <HAL_I2C_MspInit+0x70>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d123      	bne.n	80096cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009684:	4b14      	ldr	r3, [pc, #80]	@ (80096d8 <HAL_I2C_MspInit+0x74>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	4a13      	ldr	r2, [pc, #76]	@ (80096d8 <HAL_I2C_MspInit+0x74>)
 800968a:	f043 0308 	orr.w	r3, r3, #8
 800968e:	6193      	str	r3, [r2, #24]
 8009690:	4b11      	ldr	r3, [pc, #68]	@ (80096d8 <HAL_I2C_MspInit+0x74>)
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f003 0308 	and.w	r3, r3, #8
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800969c:	23c0      	movs	r3, #192	@ 0xc0
 800969e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80096a0:	2312      	movs	r3, #18
 80096a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80096a4:	2303      	movs	r3, #3
 80096a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	4619      	mov	r1, r3
 80096ae:	480b      	ldr	r0, [pc, #44]	@ (80096dc <HAL_I2C_MspInit+0x78>)
 80096b0:	f000 fd26 	bl	800a100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80096b4:	4b08      	ldr	r3, [pc, #32]	@ (80096d8 <HAL_I2C_MspInit+0x74>)
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	4a07      	ldr	r2, [pc, #28]	@ (80096d8 <HAL_I2C_MspInit+0x74>)
 80096ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096be:	61d3      	str	r3, [r2, #28]
 80096c0:	4b05      	ldr	r3, [pc, #20]	@ (80096d8 <HAL_I2C_MspInit+0x74>)
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096c8:	60bb      	str	r3, [r7, #8]
 80096ca:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80096cc:	bf00      	nop
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	40005400 	.word	0x40005400
 80096d8:	40021000 	.word	0x40021000
 80096dc:	40010c00 	.word	0x40010c00

080096e0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009718 <HAL_I2C_MspDeInit+0x38>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d10d      	bne.n	800970e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80096f2:	4b0a      	ldr	r3, [pc, #40]	@ (800971c <HAL_I2C_MspDeInit+0x3c>)
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	4a09      	ldr	r2, [pc, #36]	@ (800971c <HAL_I2C_MspDeInit+0x3c>)
 80096f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096fc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80096fe:	2140      	movs	r1, #64	@ 0x40
 8009700:	4807      	ldr	r0, [pc, #28]	@ (8009720 <HAL_I2C_MspDeInit+0x40>)
 8009702:	f000 fe91 	bl	800a428 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009706:	2180      	movs	r1, #128	@ 0x80
 8009708:	4805      	ldr	r0, [pc, #20]	@ (8009720 <HAL_I2C_MspDeInit+0x40>)
 800970a:	f000 fe8d 	bl	800a428 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	40005400 	.word	0x40005400
 800971c:	40021000 	.word	0x40021000
 8009720:	40010c00 	.word	0x40010c00

08009724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a0d      	ldr	r2, [pc, #52]	@ (8009768 <HAL_TIM_Base_MspInit+0x44>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d113      	bne.n	800975e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009736:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <HAL_TIM_Base_MspInit+0x48>)
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	4a0c      	ldr	r2, [pc, #48]	@ (800976c <HAL_TIM_Base_MspInit+0x48>)
 800973c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009740:	6193      	str	r3, [r2, #24]
 8009742:	4b0a      	ldr	r3, [pc, #40]	@ (800976c <HAL_TIM_Base_MspInit+0x48>)
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	2019      	movs	r0, #25
 8009754:	f000 fb5b 	bl	8009e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009758:	2019      	movs	r0, #25
 800975a:	f000 fb74 	bl	8009e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40012c00 	.word	0x40012c00
 800976c:	40021000 	.word	0x40021000

08009770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009778:	f107 0310 	add.w	r3, r7, #16
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	605a      	str	r2, [r3, #4]
 8009782:	609a      	str	r2, [r3, #8]
 8009784:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a20      	ldr	r2, [pc, #128]	@ (800980c <HAL_UART_MspInit+0x9c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d139      	bne.n	8009804 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009790:	4b1f      	ldr	r3, [pc, #124]	@ (8009810 <HAL_UART_MspInit+0xa0>)
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	4a1e      	ldr	r2, [pc, #120]	@ (8009810 <HAL_UART_MspInit+0xa0>)
 8009796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800979a:	6193      	str	r3, [r2, #24]
 800979c:	4b1c      	ldr	r3, [pc, #112]	@ (8009810 <HAL_UART_MspInit+0xa0>)
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097a8:	4b19      	ldr	r3, [pc, #100]	@ (8009810 <HAL_UART_MspInit+0xa0>)
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	4a18      	ldr	r2, [pc, #96]	@ (8009810 <HAL_UART_MspInit+0xa0>)
 80097ae:	f043 0304 	orr.w	r3, r3, #4
 80097b2:	6193      	str	r3, [r2, #24]
 80097b4:	4b16      	ldr	r3, [pc, #88]	@ (8009810 <HAL_UART_MspInit+0xa0>)
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	60bb      	str	r3, [r7, #8]
 80097be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80097c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097c6:	2302      	movs	r3, #2
 80097c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097ca:	2303      	movs	r3, #3
 80097cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ce:	f107 0310 	add.w	r3, r7, #16
 80097d2:	4619      	mov	r1, r3
 80097d4:	480f      	ldr	r0, [pc, #60]	@ (8009814 <HAL_UART_MspInit+0xa4>)
 80097d6:	f000 fc93 	bl	800a100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80097da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097e8:	f107 0310 	add.w	r3, r7, #16
 80097ec:	4619      	mov	r1, r3
 80097ee:	4809      	ldr	r0, [pc, #36]	@ (8009814 <HAL_UART_MspInit+0xa4>)
 80097f0:	f000 fc86 	bl	800a100 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80097f4:	2200      	movs	r2, #0
 80097f6:	2100      	movs	r1, #0
 80097f8:	2025      	movs	r0, #37	@ 0x25
 80097fa:	f000 fb08 	bl	8009e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80097fe:	2025      	movs	r0, #37	@ 0x25
 8009800:	f000 fb21 	bl	8009e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009804:	bf00      	nop
 8009806:	3720      	adds	r7, #32
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	40013800 	.word	0x40013800
 8009810:	40021000 	.word	0x40021000
 8009814:	40010800 	.word	0x40010800

08009818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <NMI_Handler+0x4>

08009820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009820:	b480      	push	{r7}
 8009822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <HardFault_Handler+0x4>

08009828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <MemManage_Handler+0x4>

08009830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <BusFault_Handler+0x4>

08009838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800983c:	bf00      	nop
 800983e:	e7fd      	b.n	800983c <UsageFault_Handler+0x4>

08009840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	bc80      	pop	{r7}
 800984a:	4770      	bx	lr

0800984c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009850:	bf00      	nop
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800985c:	bf00      	nop
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009868:	f000 f8be 	bl	80099e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800986c:	bf00      	nop
 800986e:	bd80      	pop	{r7, pc}

08009870 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009874:	4802      	ldr	r0, [pc, #8]	@ (8009880 <TIM1_UP_IRQHandler+0x10>)
 8009876:	f002 fdcd 	bl	800c414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800987a:	bf00      	nop
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20001990 	.word	0x20001990

08009884 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009888:	4802      	ldr	r0, [pc, #8]	@ (8009894 <USART1_IRQHandler+0x10>)
 800988a:	f003 f9cb 	bl	800cc24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800988e:	bf00      	nop
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	200019d8 	.word	0x200019d8

08009898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80098a0:	4a14      	ldr	r2, [pc, #80]	@ (80098f4 <_sbrk+0x5c>)
 80098a2:	4b15      	ldr	r3, [pc, #84]	@ (80098f8 <_sbrk+0x60>)
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80098ac:	4b13      	ldr	r3, [pc, #76]	@ (80098fc <_sbrk+0x64>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80098b4:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <_sbrk+0x64>)
 80098b6:	4a12      	ldr	r2, [pc, #72]	@ (8009900 <_sbrk+0x68>)
 80098b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80098ba:	4b10      	ldr	r3, [pc, #64]	@ (80098fc <_sbrk+0x64>)
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d207      	bcs.n	80098d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80098c8:	f004 f81c 	bl	800d904 <__errno>
 80098cc:	4603      	mov	r3, r0
 80098ce:	220c      	movs	r2, #12
 80098d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098d6:	e009      	b.n	80098ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098d8:	4b08      	ldr	r3, [pc, #32]	@ (80098fc <_sbrk+0x64>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098de:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <_sbrk+0x64>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4413      	add	r3, r2
 80098e6:	4a05      	ldr	r2, [pc, #20]	@ (80098fc <_sbrk+0x64>)
 80098e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	2000c000 	.word	0x2000c000
 80098f8:	00000400 	.word	0x00000400
 80098fc:	20001a20 	.word	0x20001a20
 8009900:	20001b70 	.word	0x20001b70

08009904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009904:	b480      	push	{r7}
 8009906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009908:	bf00      	nop
 800990a:	46bd      	mov	sp, r7
 800990c:	bc80      	pop	{r7}
 800990e:	4770      	bx	lr

08009910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009910:	480c      	ldr	r0, [pc, #48]	@ (8009944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009912:	490d      	ldr	r1, [pc, #52]	@ (8009948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009914:	4a0d      	ldr	r2, [pc, #52]	@ (800994c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009918:	e002      	b.n	8009920 <LoopCopyDataInit>

0800991a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800991a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800991c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800991e:	3304      	adds	r3, #4

08009920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009924:	d3f9      	bcc.n	800991a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009926:	4a0a      	ldr	r2, [pc, #40]	@ (8009950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009928:	4c0a      	ldr	r4, [pc, #40]	@ (8009954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800992a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800992c:	e001      	b.n	8009932 <LoopFillZerobss>

0800992e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800992e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009930:	3204      	adds	r2, #4

08009932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009934:	d3fb      	bcc.n	800992e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009936:	f7ff ffe5 	bl	8009904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800993a:	f003 ffe9 	bl	800d910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800993e:	f7ff fb99 	bl	8009074 <main>
  bx lr
 8009942:	4770      	bx	lr
  ldr r0, =_sdata
 8009944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009948:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 800994c:	0800e9a0 	.word	0x0800e9a0
  ldr r2, =_sbss
 8009950:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009954:	20001b70 	.word	0x20001b70

08009958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009958:	e7fe      	b.n	8009958 <ADC1_2_IRQHandler>
	...

0800995c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009960:	4b08      	ldr	r3, [pc, #32]	@ (8009984 <HAL_Init+0x28>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a07      	ldr	r2, [pc, #28]	@ (8009984 <HAL_Init+0x28>)
 8009966:	f043 0310 	orr.w	r3, r3, #16
 800996a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800996c:	2003      	movs	r0, #3
 800996e:	f000 fa43 	bl	8009df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009972:	200f      	movs	r0, #15
 8009974:	f000 f808 	bl	8009988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009978:	f7ff fdf6 	bl	8009568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40022000 	.word	0x40022000

08009988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009990:	4b12      	ldr	r3, [pc, #72]	@ (80099dc <HAL_InitTick+0x54>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	4b12      	ldr	r3, [pc, #72]	@ (80099e0 <HAL_InitTick+0x58>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4619      	mov	r1, r3
 800999a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800999e:	fbb3 f3f1 	udiv	r3, r3, r1
 80099a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fa5b 	bl	8009e62 <HAL_SYSTICK_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e00e      	b.n	80099d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b0f      	cmp	r3, #15
 80099ba:	d80a      	bhi.n	80099d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80099bc:	2200      	movs	r2, #0
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099c4:	f000 fa23 	bl	8009e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80099c8:	4a06      	ldr	r2, [pc, #24]	@ (80099e4 <HAL_InitTick+0x5c>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e000      	b.n	80099d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000f74 	.word	0x20000f74
 80099e0:	20000f7c 	.word	0x20000f7c
 80099e4:	20000f78 	.word	0x20000f78

080099e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80099ec:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <HAL_IncTick+0x1c>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b05      	ldr	r3, [pc, #20]	@ (8009a08 <HAL_IncTick+0x20>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4413      	add	r3, r2
 80099f8:	4a03      	ldr	r2, [pc, #12]	@ (8009a08 <HAL_IncTick+0x20>)
 80099fa:	6013      	str	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bc80      	pop	{r7}
 8009a02:	4770      	bx	lr
 8009a04:	20000f7c 	.word	0x20000f7c
 8009a08:	20001a24 	.word	0x20001a24

08009a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8009a10:	4b02      	ldr	r3, [pc, #8]	@ (8009a1c <HAL_GetTick+0x10>)
 8009a12:	681b      	ldr	r3, [r3, #0]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bc80      	pop	{r7}
 8009a1a:	4770      	bx	lr
 8009a1c:	20001a24 	.word	0x20001a24

08009a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a28:	f7ff fff0 	bl	8009a0c <HAL_GetTick>
 8009a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a38:	d005      	beq.n	8009a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a64 <HAL_Delay+0x44>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009a46:	bf00      	nop
 8009a48:	f7ff ffe0 	bl	8009a0c <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d8f7      	bhi.n	8009a48 <HAL_Delay+0x28>
  {
  }
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000f7c 	.word	0x20000f7c

08009a68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e0ed      	b.n	8009c56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fda0 	bl	80095cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a9c:	f7ff ffb6 	bl	8009a0c <HAL_GetTick>
 8009aa0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009aa2:	e012      	b.n	8009aca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009aa4:	f7ff ffb2 	bl	8009a0c <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b0a      	cmp	r3, #10
 8009ab0:	d90b      	bls.n	8009aca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2205      	movs	r2, #5
 8009ac2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e0c5      	b.n	8009c56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0e5      	beq.n	8009aa4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0202 	bic.w	r2, r2, #2
 8009ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ae8:	f7ff ff90 	bl	8009a0c <HAL_GetTick>
 8009aec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009aee:	e012      	b.n	8009b16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009af0:	f7ff ff8c 	bl	8009a0c <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b0a      	cmp	r3, #10
 8009afc:	d90b      	bls.n	8009b16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e09f      	b.n	8009c56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e5      	bne.n	8009af0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7e1b      	ldrb	r3, [r3, #24]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d108      	bne.n	8009b3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e007      	b.n	8009b4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7e5b      	ldrb	r3, [r3, #25]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d108      	bne.n	8009b68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e007      	b.n	8009b78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7e9b      	ldrb	r3, [r3, #26]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d108      	bne.n	8009b92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0220 	orr.w	r2, r2, #32
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	e007      	b.n	8009ba2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0220 	bic.w	r2, r2, #32
 8009ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7edb      	ldrb	r3, [r3, #27]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d108      	bne.n	8009bbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0210 	bic.w	r2, r2, #16
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e007      	b.n	8009bcc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0210 	orr.w	r2, r2, #16
 8009bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	7f1b      	ldrb	r3, [r3, #28]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d108      	bne.n	8009be6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0208 	orr.w	r2, r2, #8
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e007      	b.n	8009bf6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0208 	bic.w	r2, r2, #8
 8009bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7f5b      	ldrb	r3, [r3, #29]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d108      	bne.n	8009c10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0204 	orr.w	r2, r2, #4
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	e007      	b.n	8009c20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0204 	bic.w	r2, r2, #4
 8009c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	ea42 0103 	orr.w	r1, r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	1e5a      	subs	r2, r3, #1
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <__NVIC_SetPriorityGrouping>:
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c70:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c92:	4a04      	ldr	r2, [pc, #16]	@ (8009ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	60d3      	str	r3, [r2, #12]
}
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	e000ed00 	.word	0xe000ed00

08009ca8 <__NVIC_GetPriorityGrouping>:
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009cac:	4b04      	ldr	r3, [pc, #16]	@ (8009cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	0a1b      	lsrs	r3, r3, #8
 8009cb2:	f003 0307 	and.w	r3, r3, #7
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	e000ed00 	.word	0xe000ed00

08009cc4 <__NVIC_EnableIRQ>:
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	db0b      	blt.n	8009cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	f003 021f 	and.w	r2, r3, #31
 8009cdc:	4906      	ldr	r1, [pc, #24]	@ (8009cf8 <__NVIC_EnableIRQ+0x34>)
 8009cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8009cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bc80      	pop	{r7}
 8009cf6:	4770      	bx	lr
 8009cf8:	e000e100 	.word	0xe000e100

08009cfc <__NVIC_SetPriority>:
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	db0a      	blt.n	8009d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	490c      	ldr	r1, [pc, #48]	@ (8009d48 <__NVIC_SetPriority+0x4c>)
 8009d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d1a:	0112      	lsls	r2, r2, #4
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	440b      	add	r3, r1
 8009d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d24:	e00a      	b.n	8009d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	4908      	ldr	r1, [pc, #32]	@ (8009d4c <__NVIC_SetPriority+0x50>)
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	3b04      	subs	r3, #4
 8009d34:	0112      	lsls	r2, r2, #4
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	440b      	add	r3, r1
 8009d3a:	761a      	strb	r2, [r3, #24]
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bc80      	pop	{r7}
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	e000e100 	.word	0xe000e100
 8009d4c:	e000ed00 	.word	0xe000ed00

08009d50 <NVIC_EncodePriority>:
{
 8009d50:	b480      	push	{r7}
 8009d52:	b089      	sub	sp, #36	@ 0x24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	f1c3 0307 	rsb	r3, r3, #7
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	bf28      	it	cs
 8009d6e:	2304      	movcs	r3, #4
 8009d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	3304      	adds	r3, #4
 8009d76:	2b06      	cmp	r3, #6
 8009d78:	d902      	bls.n	8009d80 <NVIC_EncodePriority+0x30>
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	3b03      	subs	r3, #3
 8009d7e:	e000      	b.n	8009d82 <NVIC_EncodePriority+0x32>
 8009d80:	2300      	movs	r3, #0
 8009d82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	401a      	ands	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009da2:	43d9      	mvns	r1, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009da8:	4313      	orrs	r3, r2
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3724      	adds	r7, #36	@ 0x24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bc80      	pop	{r7}
 8009db2:	4770      	bx	lr

08009db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dc4:	d301      	bcc.n	8009dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e00f      	b.n	8009dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009dca:	4a0a      	ldr	r2, [pc, #40]	@ (8009df4 <SysTick_Config+0x40>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009dd2:	210f      	movs	r1, #15
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dd8:	f7ff ff90 	bl	8009cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ddc:	4b05      	ldr	r3, [pc, #20]	@ (8009df4 <SysTick_Config+0x40>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009de2:	4b04      	ldr	r3, [pc, #16]	@ (8009df4 <SysTick_Config+0x40>)
 8009de4:	2207      	movs	r2, #7
 8009de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	e000e010 	.word	0xe000e010

08009df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff ff2d 	bl	8009c60 <__NVIC_SetPriorityGrouping>
}
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b086      	sub	sp, #24
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	4603      	mov	r3, r0
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	607a      	str	r2, [r7, #4]
 8009e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e20:	f7ff ff42 	bl	8009ca8 <__NVIC_GetPriorityGrouping>
 8009e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	6978      	ldr	r0, [r7, #20]
 8009e2c:	f7ff ff90 	bl	8009d50 <NVIC_EncodePriority>
 8009e30:	4602      	mov	r2, r0
 8009e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff ff5f 	bl	8009cfc <__NVIC_SetPriority>
}
 8009e3e:	bf00      	nop
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff ff35 	bl	8009cc4 <__NVIC_EnableIRQ>
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff ffa2 	bl	8009db4 <SysTick_Config>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d008      	beq.n	8009ea4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2204      	movs	r2, #4
 8009e96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e020      	b.n	8009ee6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 020e 	bic.w	r2, r2, #14
 8009eb2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ecc:	2101      	movs	r1, #1
 8009ece:	fa01 f202 	lsl.w	r2, r1, r2
 8009ed2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr

08009ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d005      	beq.n	8009f14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]
 8009f12:	e0d6      	b.n	800a0c2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 020e 	bic.w	r2, r2, #14
 8009f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0201 	bic.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4b64      	ldr	r3, [pc, #400]	@ (800a0cc <HAL_DMA_Abort_IT+0x1dc>)
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d958      	bls.n	8009ff2 <HAL_DMA_Abort_IT+0x102>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a62      	ldr	r2, [pc, #392]	@ (800a0d0 <HAL_DMA_Abort_IT+0x1e0>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d04f      	beq.n	8009fea <HAL_DMA_Abort_IT+0xfa>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a61      	ldr	r2, [pc, #388]	@ (800a0d4 <HAL_DMA_Abort_IT+0x1e4>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d048      	beq.n	8009fe6 <HAL_DMA_Abort_IT+0xf6>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a5f      	ldr	r2, [pc, #380]	@ (800a0d8 <HAL_DMA_Abort_IT+0x1e8>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d040      	beq.n	8009fe0 <HAL_DMA_Abort_IT+0xf0>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a5e      	ldr	r2, [pc, #376]	@ (800a0dc <HAL_DMA_Abort_IT+0x1ec>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d038      	beq.n	8009fda <HAL_DMA_Abort_IT+0xea>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a5c      	ldr	r2, [pc, #368]	@ (800a0e0 <HAL_DMA_Abort_IT+0x1f0>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d030      	beq.n	8009fd4 <HAL_DMA_Abort_IT+0xe4>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a5b      	ldr	r2, [pc, #364]	@ (800a0e4 <HAL_DMA_Abort_IT+0x1f4>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d028      	beq.n	8009fce <HAL_DMA_Abort_IT+0xde>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a52      	ldr	r2, [pc, #328]	@ (800a0cc <HAL_DMA_Abort_IT+0x1dc>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d020      	beq.n	8009fc8 <HAL_DMA_Abort_IT+0xd8>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a57      	ldr	r2, [pc, #348]	@ (800a0e8 <HAL_DMA_Abort_IT+0x1f8>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d019      	beq.n	8009fc4 <HAL_DMA_Abort_IT+0xd4>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a55      	ldr	r2, [pc, #340]	@ (800a0ec <HAL_DMA_Abort_IT+0x1fc>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d012      	beq.n	8009fc0 <HAL_DMA_Abort_IT+0xd0>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a54      	ldr	r2, [pc, #336]	@ (800a0f0 <HAL_DMA_Abort_IT+0x200>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00a      	beq.n	8009fba <HAL_DMA_Abort_IT+0xca>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a52      	ldr	r2, [pc, #328]	@ (800a0f4 <HAL_DMA_Abort_IT+0x204>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d102      	bne.n	8009fb4 <HAL_DMA_Abort_IT+0xc4>
 8009fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fb2:	e01b      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fb8:	e018      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fbe:	e015      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	e013      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e011      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fcc:	e00e      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fd2:	e00b      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fd8:	e008      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fde:	e005      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fe4:	e002      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fe6:	2310      	movs	r3, #16
 8009fe8:	e000      	b.n	8009fec <HAL_DMA_Abort_IT+0xfc>
 8009fea:	2301      	movs	r3, #1
 8009fec:	4a42      	ldr	r2, [pc, #264]	@ (800a0f8 <HAL_DMA_Abort_IT+0x208>)
 8009fee:	6053      	str	r3, [r2, #4]
 8009ff0:	e057      	b.n	800a0a2 <HAL_DMA_Abort_IT+0x1b2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a36      	ldr	r2, [pc, #216]	@ (800a0d0 <HAL_DMA_Abort_IT+0x1e0>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d04f      	beq.n	800a09c <HAL_DMA_Abort_IT+0x1ac>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a34      	ldr	r2, [pc, #208]	@ (800a0d4 <HAL_DMA_Abort_IT+0x1e4>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d048      	beq.n	800a098 <HAL_DMA_Abort_IT+0x1a8>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a33      	ldr	r2, [pc, #204]	@ (800a0d8 <HAL_DMA_Abort_IT+0x1e8>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d040      	beq.n	800a092 <HAL_DMA_Abort_IT+0x1a2>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a31      	ldr	r2, [pc, #196]	@ (800a0dc <HAL_DMA_Abort_IT+0x1ec>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d038      	beq.n	800a08c <HAL_DMA_Abort_IT+0x19c>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a30      	ldr	r2, [pc, #192]	@ (800a0e0 <HAL_DMA_Abort_IT+0x1f0>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d030      	beq.n	800a086 <HAL_DMA_Abort_IT+0x196>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a2e      	ldr	r2, [pc, #184]	@ (800a0e4 <HAL_DMA_Abort_IT+0x1f4>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d028      	beq.n	800a080 <HAL_DMA_Abort_IT+0x190>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a26      	ldr	r2, [pc, #152]	@ (800a0cc <HAL_DMA_Abort_IT+0x1dc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d020      	beq.n	800a07a <HAL_DMA_Abort_IT+0x18a>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e8 <HAL_DMA_Abort_IT+0x1f8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d019      	beq.n	800a076 <HAL_DMA_Abort_IT+0x186>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a29      	ldr	r2, [pc, #164]	@ (800a0ec <HAL_DMA_Abort_IT+0x1fc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d012      	beq.n	800a072 <HAL_DMA_Abort_IT+0x182>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a27      	ldr	r2, [pc, #156]	@ (800a0f0 <HAL_DMA_Abort_IT+0x200>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00a      	beq.n	800a06c <HAL_DMA_Abort_IT+0x17c>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a26      	ldr	r2, [pc, #152]	@ (800a0f4 <HAL_DMA_Abort_IT+0x204>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d102      	bne.n	800a066 <HAL_DMA_Abort_IT+0x176>
 800a060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a064:	e01b      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a066:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a06a:	e018      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a06c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a070:	e015      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a072:	2310      	movs	r3, #16
 800a074:	e013      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a076:	2301      	movs	r3, #1
 800a078:	e011      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a07a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a07e:	e00e      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a080:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a084:	e00b      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a086:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a08a:	e008      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a08c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a090:	e005      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a096:	e002      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a098:	2310      	movs	r3, #16
 800a09a:	e000      	b.n	800a09e <HAL_DMA_Abort_IT+0x1ae>
 800a09c:	2301      	movs	r3, #1
 800a09e:	4a17      	ldr	r2, [pc, #92]	@ (800a0fc <HAL_DMA_Abort_IT+0x20c>)
 800a0a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	4798      	blx	r3
    } 
  }
  return status;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	40020080 	.word	0x40020080
 800a0d0:	40020008 	.word	0x40020008
 800a0d4:	4002001c 	.word	0x4002001c
 800a0d8:	40020030 	.word	0x40020030
 800a0dc:	40020044 	.word	0x40020044
 800a0e0:	40020058 	.word	0x40020058
 800a0e4:	4002006c 	.word	0x4002006c
 800a0e8:	40020408 	.word	0x40020408
 800a0ec:	4002041c 	.word	0x4002041c
 800a0f0:	40020430 	.word	0x40020430
 800a0f4:	40020444 	.word	0x40020444
 800a0f8:	40020400 	.word	0x40020400
 800a0fc:	40020000 	.word	0x40020000

0800a100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a100:	b480      	push	{r7}
 800a102:	b08b      	sub	sp, #44	@ 0x2c
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a10e:	2300      	movs	r3, #0
 800a110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a112:	e179      	b.n	800a408 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a114:	2201      	movs	r2, #1
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	4013      	ands	r3, r2
 800a126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	f040 8168 	bne.w	800a402 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	4a96      	ldr	r2, [pc, #600]	@ (800a390 <HAL_GPIO_Init+0x290>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d05e      	beq.n	800a1fa <HAL_GPIO_Init+0xfa>
 800a13c:	4a94      	ldr	r2, [pc, #592]	@ (800a390 <HAL_GPIO_Init+0x290>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d875      	bhi.n	800a22e <HAL_GPIO_Init+0x12e>
 800a142:	4a94      	ldr	r2, [pc, #592]	@ (800a394 <HAL_GPIO_Init+0x294>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d058      	beq.n	800a1fa <HAL_GPIO_Init+0xfa>
 800a148:	4a92      	ldr	r2, [pc, #584]	@ (800a394 <HAL_GPIO_Init+0x294>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d86f      	bhi.n	800a22e <HAL_GPIO_Init+0x12e>
 800a14e:	4a92      	ldr	r2, [pc, #584]	@ (800a398 <HAL_GPIO_Init+0x298>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d052      	beq.n	800a1fa <HAL_GPIO_Init+0xfa>
 800a154:	4a90      	ldr	r2, [pc, #576]	@ (800a398 <HAL_GPIO_Init+0x298>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d869      	bhi.n	800a22e <HAL_GPIO_Init+0x12e>
 800a15a:	4a90      	ldr	r2, [pc, #576]	@ (800a39c <HAL_GPIO_Init+0x29c>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d04c      	beq.n	800a1fa <HAL_GPIO_Init+0xfa>
 800a160:	4a8e      	ldr	r2, [pc, #568]	@ (800a39c <HAL_GPIO_Init+0x29c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d863      	bhi.n	800a22e <HAL_GPIO_Init+0x12e>
 800a166:	4a8e      	ldr	r2, [pc, #568]	@ (800a3a0 <HAL_GPIO_Init+0x2a0>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d046      	beq.n	800a1fa <HAL_GPIO_Init+0xfa>
 800a16c:	4a8c      	ldr	r2, [pc, #560]	@ (800a3a0 <HAL_GPIO_Init+0x2a0>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d85d      	bhi.n	800a22e <HAL_GPIO_Init+0x12e>
 800a172:	2b12      	cmp	r3, #18
 800a174:	d82a      	bhi.n	800a1cc <HAL_GPIO_Init+0xcc>
 800a176:	2b12      	cmp	r3, #18
 800a178:	d859      	bhi.n	800a22e <HAL_GPIO_Init+0x12e>
 800a17a:	a201      	add	r2, pc, #4	@ (adr r2, 800a180 <HAL_GPIO_Init+0x80>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1fb 	.word	0x0800a1fb
 800a184:	0800a1d5 	.word	0x0800a1d5
 800a188:	0800a1e7 	.word	0x0800a1e7
 800a18c:	0800a229 	.word	0x0800a229
 800a190:	0800a22f 	.word	0x0800a22f
 800a194:	0800a22f 	.word	0x0800a22f
 800a198:	0800a22f 	.word	0x0800a22f
 800a19c:	0800a22f 	.word	0x0800a22f
 800a1a0:	0800a22f 	.word	0x0800a22f
 800a1a4:	0800a22f 	.word	0x0800a22f
 800a1a8:	0800a22f 	.word	0x0800a22f
 800a1ac:	0800a22f 	.word	0x0800a22f
 800a1b0:	0800a22f 	.word	0x0800a22f
 800a1b4:	0800a22f 	.word	0x0800a22f
 800a1b8:	0800a22f 	.word	0x0800a22f
 800a1bc:	0800a22f 	.word	0x0800a22f
 800a1c0:	0800a22f 	.word	0x0800a22f
 800a1c4:	0800a1dd 	.word	0x0800a1dd
 800a1c8:	0800a1f1 	.word	0x0800a1f1
 800a1cc:	4a75      	ldr	r2, [pc, #468]	@ (800a3a4 <HAL_GPIO_Init+0x2a4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d013      	beq.n	800a1fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a1d2:	e02c      	b.n	800a22e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	623b      	str	r3, [r7, #32]
          break;
 800a1da:	e029      	b.n	800a230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	623b      	str	r3, [r7, #32]
          break;
 800a1e4:	e024      	b.n	800a230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	623b      	str	r3, [r7, #32]
          break;
 800a1ee:	e01f      	b.n	800a230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	623b      	str	r3, [r7, #32]
          break;
 800a1f8:	e01a      	b.n	800a230 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a202:	2304      	movs	r3, #4
 800a204:	623b      	str	r3, [r7, #32]
          break;
 800a206:	e013      	b.n	800a230 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d105      	bne.n	800a21c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a210:	2308      	movs	r3, #8
 800a212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	69fa      	ldr	r2, [r7, #28]
 800a218:	611a      	str	r2, [r3, #16]
          break;
 800a21a:	e009      	b.n	800a230 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a21c:	2308      	movs	r3, #8
 800a21e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	615a      	str	r2, [r3, #20]
          break;
 800a226:	e003      	b.n	800a230 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a228:	2300      	movs	r3, #0
 800a22a:	623b      	str	r3, [r7, #32]
          break;
 800a22c:	e000      	b.n	800a230 <HAL_GPIO_Init+0x130>
          break;
 800a22e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2bff      	cmp	r3, #255	@ 0xff
 800a234:	d801      	bhi.n	800a23a <HAL_GPIO_Init+0x13a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	e001      	b.n	800a23e <HAL_GPIO_Init+0x13e>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3304      	adds	r3, #4
 800a23e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2bff      	cmp	r3, #255	@ 0xff
 800a244:	d802      	bhi.n	800a24c <HAL_GPIO_Init+0x14c>
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	e002      	b.n	800a252 <HAL_GPIO_Init+0x152>
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24e:	3b08      	subs	r3, #8
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	210f      	movs	r1, #15
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	fa01 f303 	lsl.w	r3, r1, r3
 800a260:	43db      	mvns	r3, r3
 800a262:	401a      	ands	r2, r3
 800a264:	6a39      	ldr	r1, [r7, #32]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	fa01 f303 	lsl.w	r3, r1, r3
 800a26c:	431a      	orrs	r2, r3
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80c1 	beq.w	800a402 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a280:	4b49      	ldr	r3, [pc, #292]	@ (800a3a8 <HAL_GPIO_Init+0x2a8>)
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	4a48      	ldr	r2, [pc, #288]	@ (800a3a8 <HAL_GPIO_Init+0x2a8>)
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	6193      	str	r3, [r2, #24]
 800a28c:	4b46      	ldr	r3, [pc, #280]	@ (800a3a8 <HAL_GPIO_Init+0x2a8>)
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	60bb      	str	r3, [r7, #8]
 800a296:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a298:	4a44      	ldr	r2, [pc, #272]	@ (800a3ac <HAL_GPIO_Init+0x2ac>)
 800a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29c:	089b      	lsrs	r3, r3, #2
 800a29e:	3302      	adds	r3, #2
 800a2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	220f      	movs	r2, #15
 800a2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b4:	43db      	mvns	r3, r3
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a3c      	ldr	r2, [pc, #240]	@ (800a3b0 <HAL_GPIO_Init+0x2b0>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d01f      	beq.n	800a304 <HAL_GPIO_Init+0x204>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a3b      	ldr	r2, [pc, #236]	@ (800a3b4 <HAL_GPIO_Init+0x2b4>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d019      	beq.n	800a300 <HAL_GPIO_Init+0x200>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a3a      	ldr	r2, [pc, #232]	@ (800a3b8 <HAL_GPIO_Init+0x2b8>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d013      	beq.n	800a2fc <HAL_GPIO_Init+0x1fc>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a39      	ldr	r2, [pc, #228]	@ (800a3bc <HAL_GPIO_Init+0x2bc>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00d      	beq.n	800a2f8 <HAL_GPIO_Init+0x1f8>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a38      	ldr	r2, [pc, #224]	@ (800a3c0 <HAL_GPIO_Init+0x2c0>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d007      	beq.n	800a2f4 <HAL_GPIO_Init+0x1f4>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a37      	ldr	r2, [pc, #220]	@ (800a3c4 <HAL_GPIO_Init+0x2c4>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d101      	bne.n	800a2f0 <HAL_GPIO_Init+0x1f0>
 800a2ec:	2305      	movs	r3, #5
 800a2ee:	e00a      	b.n	800a306 <HAL_GPIO_Init+0x206>
 800a2f0:	2306      	movs	r3, #6
 800a2f2:	e008      	b.n	800a306 <HAL_GPIO_Init+0x206>
 800a2f4:	2304      	movs	r3, #4
 800a2f6:	e006      	b.n	800a306 <HAL_GPIO_Init+0x206>
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e004      	b.n	800a306 <HAL_GPIO_Init+0x206>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e002      	b.n	800a306 <HAL_GPIO_Init+0x206>
 800a300:	2301      	movs	r3, #1
 800a302:	e000      	b.n	800a306 <HAL_GPIO_Init+0x206>
 800a304:	2300      	movs	r3, #0
 800a306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a308:	f002 0203 	and.w	r2, r2, #3
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	4093      	lsls	r3, r2
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a316:	4925      	ldr	r1, [pc, #148]	@ (800a3ac <HAL_GPIO_Init+0x2ac>)
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	089b      	lsrs	r3, r3, #2
 800a31c:	3302      	adds	r3, #2
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d006      	beq.n	800a33e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a330:	4b25      	ldr	r3, [pc, #148]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	4924      	ldr	r1, [pc, #144]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	4313      	orrs	r3, r2
 800a33a:	608b      	str	r3, [r1, #8]
 800a33c:	e006      	b.n	800a34c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a33e:	4b22      	ldr	r3, [pc, #136]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	43db      	mvns	r3, r3
 800a346:	4920      	ldr	r1, [pc, #128]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a348:	4013      	ands	r3, r2
 800a34a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d006      	beq.n	800a366 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a358:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	491a      	ldr	r1, [pc, #104]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	4313      	orrs	r3, r2
 800a362:	60cb      	str	r3, [r1, #12]
 800a364:	e006      	b.n	800a374 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a366:	4b18      	ldr	r3, [pc, #96]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	43db      	mvns	r3, r3
 800a36e:	4916      	ldr	r1, [pc, #88]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a370:	4013      	ands	r3, r2
 800a372:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d025      	beq.n	800a3cc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a380:	4b11      	ldr	r3, [pc, #68]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	4910      	ldr	r1, [pc, #64]	@ (800a3c8 <HAL_GPIO_Init+0x2c8>)
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	4313      	orrs	r3, r2
 800a38a:	604b      	str	r3, [r1, #4]
 800a38c:	e025      	b.n	800a3da <HAL_GPIO_Init+0x2da>
 800a38e:	bf00      	nop
 800a390:	10320000 	.word	0x10320000
 800a394:	10310000 	.word	0x10310000
 800a398:	10220000 	.word	0x10220000
 800a39c:	10210000 	.word	0x10210000
 800a3a0:	10120000 	.word	0x10120000
 800a3a4:	10110000 	.word	0x10110000
 800a3a8:	40021000 	.word	0x40021000
 800a3ac:	40010000 	.word	0x40010000
 800a3b0:	40010800 	.word	0x40010800
 800a3b4:	40010c00 	.word	0x40010c00
 800a3b8:	40011000 	.word	0x40011000
 800a3bc:	40011400 	.word	0x40011400
 800a3c0:	40011800 	.word	0x40011800
 800a3c4:	40011c00 	.word	0x40011c00
 800a3c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a3cc:	4b15      	ldr	r3, [pc, #84]	@ (800a424 <HAL_GPIO_Init+0x324>)
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	43db      	mvns	r3, r3
 800a3d4:	4913      	ldr	r1, [pc, #76]	@ (800a424 <HAL_GPIO_Init+0x324>)
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d006      	beq.n	800a3f4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a424 <HAL_GPIO_Init+0x324>)
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	490e      	ldr	r1, [pc, #56]	@ (800a424 <HAL_GPIO_Init+0x324>)
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	600b      	str	r3, [r1, #0]
 800a3f2:	e006      	b.n	800a402 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a3f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a424 <HAL_GPIO_Init+0x324>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	43db      	mvns	r3, r3
 800a3fc:	4909      	ldr	r1, [pc, #36]	@ (800a424 <HAL_GPIO_Init+0x324>)
 800a3fe:	4013      	ands	r3, r2
 800a400:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a404:	3301      	adds	r3, #1
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	fa22 f303 	lsr.w	r3, r2, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	f47f ae7e 	bne.w	800a114 <HAL_GPIO_Init+0x14>
  }
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	372c      	adds	r7, #44	@ 0x2c
 800a41e:	46bd      	mov	sp, r7
 800a420:	bc80      	pop	{r7}
 800a422:	4770      	bx	lr
 800a424:	40010400 	.word	0x40010400

0800a428 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a428:	b480      	push	{r7}
 800a42a:	b089      	sub	sp, #36	@ 0x24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a432:	2300      	movs	r3, #0
 800a434:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a436:	e0a6      	b.n	800a586 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a438:	2201      	movs	r2, #1
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	fa02 f303 	lsl.w	r3, r2, r3
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	4013      	ands	r3, r2
 800a444:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8099 	beq.w	800a580 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a44e:	4a54      	ldr	r2, [pc, #336]	@ (800a5a0 <HAL_GPIO_DeInit+0x178>)
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	089b      	lsrs	r3, r3, #2
 800a454:	3302      	adds	r3, #2
 800a456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a45a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	220f      	movs	r2, #15
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	4013      	ands	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a4c      	ldr	r2, [pc, #304]	@ (800a5a4 <HAL_GPIO_DeInit+0x17c>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d01f      	beq.n	800a4b8 <HAL_GPIO_DeInit+0x90>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a4b      	ldr	r2, [pc, #300]	@ (800a5a8 <HAL_GPIO_DeInit+0x180>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d019      	beq.n	800a4b4 <HAL_GPIO_DeInit+0x8c>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a4a      	ldr	r2, [pc, #296]	@ (800a5ac <HAL_GPIO_DeInit+0x184>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d013      	beq.n	800a4b0 <HAL_GPIO_DeInit+0x88>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a49      	ldr	r2, [pc, #292]	@ (800a5b0 <HAL_GPIO_DeInit+0x188>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00d      	beq.n	800a4ac <HAL_GPIO_DeInit+0x84>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a48      	ldr	r2, [pc, #288]	@ (800a5b4 <HAL_GPIO_DeInit+0x18c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d007      	beq.n	800a4a8 <HAL_GPIO_DeInit+0x80>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a47      	ldr	r2, [pc, #284]	@ (800a5b8 <HAL_GPIO_DeInit+0x190>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d101      	bne.n	800a4a4 <HAL_GPIO_DeInit+0x7c>
 800a4a0:	2305      	movs	r3, #5
 800a4a2:	e00a      	b.n	800a4ba <HAL_GPIO_DeInit+0x92>
 800a4a4:	2306      	movs	r3, #6
 800a4a6:	e008      	b.n	800a4ba <HAL_GPIO_DeInit+0x92>
 800a4a8:	2304      	movs	r3, #4
 800a4aa:	e006      	b.n	800a4ba <HAL_GPIO_DeInit+0x92>
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e004      	b.n	800a4ba <HAL_GPIO_DeInit+0x92>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e002      	b.n	800a4ba <HAL_GPIO_DeInit+0x92>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e000      	b.n	800a4ba <HAL_GPIO_DeInit+0x92>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	69fa      	ldr	r2, [r7, #28]
 800a4bc:	f002 0203 	and.w	r2, r2, #3
 800a4c0:	0092      	lsls	r2, r2, #2
 800a4c2:	4093      	lsls	r3, r2
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d132      	bne.n	800a530 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a4ca:	4b3c      	ldr	r3, [pc, #240]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	493a      	ldr	r1, [pc, #232]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a4d8:	4b38      	ldr	r3, [pc, #224]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	43db      	mvns	r3, r3
 800a4e0:	4936      	ldr	r1, [pc, #216]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a4e6:	4b35      	ldr	r3, [pc, #212]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4e8:	68da      	ldr	r2, [r3, #12]
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	43db      	mvns	r3, r3
 800a4ee:	4933      	ldr	r1, [pc, #204]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a4f4:	4b31      	ldr	r3, [pc, #196]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	43db      	mvns	r3, r3
 800a4fc:	492f      	ldr	r1, [pc, #188]	@ (800a5bc <HAL_GPIO_DeInit+0x194>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	f003 0303 	and.w	r3, r3, #3
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	220f      	movs	r2, #15
 800a50c:	fa02 f303 	lsl.w	r3, r2, r3
 800a510:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a512:	4a23      	ldr	r2, [pc, #140]	@ (800a5a0 <HAL_GPIO_DeInit+0x178>)
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	089b      	lsrs	r3, r3, #2
 800a518:	3302      	adds	r3, #2
 800a51a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	43da      	mvns	r2, r3
 800a522:	481f      	ldr	r0, [pc, #124]	@ (800a5a0 <HAL_GPIO_DeInit+0x178>)
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	089b      	lsrs	r3, r3, #2
 800a528:	400a      	ands	r2, r1
 800a52a:	3302      	adds	r3, #2
 800a52c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	2bff      	cmp	r3, #255	@ 0xff
 800a534:	d801      	bhi.n	800a53a <HAL_GPIO_DeInit+0x112>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	e001      	b.n	800a53e <HAL_GPIO_DeInit+0x116>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3304      	adds	r3, #4
 800a53e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	2bff      	cmp	r3, #255	@ 0xff
 800a544:	d802      	bhi.n	800a54c <HAL_GPIO_DeInit+0x124>
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	e002      	b.n	800a552 <HAL_GPIO_DeInit+0x12a>
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	3b08      	subs	r3, #8
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	210f      	movs	r1, #15
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	fa01 f303 	lsl.w	r3, r1, r3
 800a560:	43db      	mvns	r3, r3
 800a562:	401a      	ands	r2, r3
 800a564:	2104      	movs	r1, #4
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	fa01 f303 	lsl.w	r3, r1, r3
 800a56c:	431a      	orrs	r2, r3
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	43db      	mvns	r3, r3
 800a57a:	401a      	ands	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	3301      	adds	r3, #1
 800a584:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	fa22 f303 	lsr.w	r3, r2, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f47f af52 	bne.w	800a438 <HAL_GPIO_DeInit+0x10>
  }
}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	3724      	adds	r7, #36	@ 0x24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr
 800a5a0:	40010000 	.word	0x40010000
 800a5a4:	40010800 	.word	0x40010800
 800a5a8:	40010c00 	.word	0x40010c00
 800a5ac:	40011000 	.word	0x40011000
 800a5b0:	40011400 	.word	0x40011400
 800a5b4:	40011800 	.word	0x40011800
 800a5b8:	40011c00 	.word	0x40011c00
 800a5bc:	40010400 	.word	0x40010400

0800a5c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	887b      	ldrh	r3, [r7, #2]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]
 800a5dc:	e001      	b.n	800a5e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr

0800a5ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	807b      	strh	r3, [r7, #2]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5fe:	787b      	ldrb	r3, [r7, #1]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a604:	887a      	ldrh	r2, [r7, #2]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a60a:	e003      	b.n	800a614 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a60c:	887b      	ldrh	r3, [r7, #2]
 800a60e:	041a      	lsls	r2, r3, #16
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	611a      	str	r2, [r3, #16]
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a61e:	b480      	push	{r7}
 800a620:	b085      	sub	sp, #20
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a630:	887a      	ldrh	r2, [r7, #2]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	4013      	ands	r3, r2
 800a636:	041a      	lsls	r2, r3, #16
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	43d9      	mvns	r1, r3
 800a63c:	887b      	ldrh	r3, [r7, #2]
 800a63e:	400b      	ands	r3, r1
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	611a      	str	r2, [r3, #16]
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e12b      	b.n	800a8ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fe fff4 	bl	8009664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2224      	movs	r2, #36	@ 0x24
 800a680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0201 	bic.w	r2, r2, #1
 800a692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a6b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a6b4:	f001 fdb8 	bl	800c228 <HAL_RCC_GetPCLK1Freq>
 800a6b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4a81      	ldr	r2, [pc, #516]	@ (800a8c4 <HAL_I2C_Init+0x274>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d807      	bhi.n	800a6d4 <HAL_I2C_Init+0x84>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4a80      	ldr	r2, [pc, #512]	@ (800a8c8 <HAL_I2C_Init+0x278>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bf94      	ite	ls
 800a6cc:	2301      	movls	r3, #1
 800a6ce:	2300      	movhi	r3, #0
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	e006      	b.n	800a6e2 <HAL_I2C_Init+0x92>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4a7d      	ldr	r2, [pc, #500]	@ (800a8cc <HAL_I2C_Init+0x27c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	bf94      	ite	ls
 800a6dc:	2301      	movls	r3, #1
 800a6de:	2300      	movhi	r3, #0
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e0e7      	b.n	800a8ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4a78      	ldr	r2, [pc, #480]	@ (800a8d0 <HAL_I2C_Init+0x280>)
 800a6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f2:	0c9b      	lsrs	r3, r3, #18
 800a6f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	430a      	orrs	r2, r1
 800a708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	4a6a      	ldr	r2, [pc, #424]	@ (800a8c4 <HAL_I2C_Init+0x274>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d802      	bhi.n	800a724 <HAL_I2C_Init+0xd4>
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	3301      	adds	r3, #1
 800a722:	e009      	b.n	800a738 <HAL_I2C_Init+0xe8>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a72a:	fb02 f303 	mul.w	r3, r2, r3
 800a72e:	4a69      	ldr	r2, [pc, #420]	@ (800a8d4 <HAL_I2C_Init+0x284>)
 800a730:	fba2 2303 	umull	r2, r3, r2, r3
 800a734:	099b      	lsrs	r3, r3, #6
 800a736:	3301      	adds	r3, #1
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	430b      	orrs	r3, r1
 800a73e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a74a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	495c      	ldr	r1, [pc, #368]	@ (800a8c4 <HAL_I2C_Init+0x274>)
 800a754:	428b      	cmp	r3, r1
 800a756:	d819      	bhi.n	800a78c <HAL_I2C_Init+0x13c>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	1e59      	subs	r1, r3, #1
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	fbb1 f3f3 	udiv	r3, r1, r3
 800a766:	1c59      	adds	r1, r3, #1
 800a768:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a76c:	400b      	ands	r3, r1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <HAL_I2C_Init+0x138>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1e59      	subs	r1, r3, #1
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a780:	3301      	adds	r3, #1
 800a782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a786:	e051      	b.n	800a82c <HAL_I2C_Init+0x1dc>
 800a788:	2304      	movs	r3, #4
 800a78a:	e04f      	b.n	800a82c <HAL_I2C_Init+0x1dc>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d111      	bne.n	800a7b8 <HAL_I2C_Init+0x168>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	1e58      	subs	r0, r3, #1
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6859      	ldr	r1, [r3, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	440b      	add	r3, r1
 800a7a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2301      	moveq	r3, #1
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	e012      	b.n	800a7de <HAL_I2C_Init+0x18e>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	1e58      	subs	r0, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6859      	ldr	r1, [r3, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	440b      	add	r3, r1
 800a7c6:	0099      	lsls	r1, r3, #2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2301      	moveq	r3, #1
 800a7da:	2300      	movne	r3, #0
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <HAL_I2C_Init+0x196>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e022      	b.n	800a82c <HAL_I2C_Init+0x1dc>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10e      	bne.n	800a80c <HAL_I2C_Init+0x1bc>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	1e58      	subs	r0, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6859      	ldr	r1, [r3, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	440b      	add	r3, r1
 800a7fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800a800:	3301      	adds	r3, #1
 800a802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a80a:	e00f      	b.n	800a82c <HAL_I2C_Init+0x1dc>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	1e58      	subs	r0, r3, #1
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6859      	ldr	r1, [r3, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	0099      	lsls	r1, r3, #2
 800a81c:	440b      	add	r3, r1
 800a81e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a822:	3301      	adds	r3, #1
 800a824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	6809      	ldr	r1, [r1, #0]
 800a830:	4313      	orrs	r3, r2
 800a832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	69da      	ldr	r2, [r3, #28]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	431a      	orrs	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a85a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6911      	ldr	r1, [r2, #16]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	68d2      	ldr	r2, [r2, #12]
 800a866:	4311      	orrs	r1, r2
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6812      	ldr	r2, [r2, #0]
 800a86c:	430b      	orrs	r3, r1
 800a86e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695a      	ldr	r2, [r3, #20]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	431a      	orrs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	430a      	orrs	r2, r1
 800a88a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	000186a0 	.word	0x000186a0
 800a8c8:	001e847f 	.word	0x001e847f
 800a8cc:	003d08ff 	.word	0x003d08ff
 800a8d0:	431bde83 	.word	0x431bde83
 800a8d4:	10624dd3 	.word	0x10624dd3

0800a8d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e021      	b.n	800a92e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2224      	movs	r2, #36	@ 0x24
 800a8ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0201 	bic.w	r2, r2, #1
 800a900:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7fe feec 	bl	80096e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af02      	add	r7, sp, #8
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	607a      	str	r2, [r7, #4]
 800a942:	461a      	mov	r2, r3
 800a944:	460b      	mov	r3, r1
 800a946:	817b      	strh	r3, [r7, #10]
 800a948:	4613      	mov	r3, r2
 800a94a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a94c:	f7ff f85e 	bl	8009a0c <HAL_GetTick>
 800a950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	f040 80e0 	bne.w	800ab20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	2319      	movs	r3, #25
 800a966:	2201      	movs	r2, #1
 800a968:	4970      	ldr	r1, [pc, #448]	@ (800ab2c <HAL_I2C_Master_Transmit+0x1f4>)
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 fe5c 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a976:	2302      	movs	r3, #2
 800a978:	e0d3      	b.n	800ab22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a980:	2b01      	cmp	r3, #1
 800a982:	d101      	bne.n	800a988 <HAL_I2C_Master_Transmit+0x50>
 800a984:	2302      	movs	r3, #2
 800a986:	e0cc      	b.n	800ab22 <HAL_I2C_Master_Transmit+0x1ea>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d007      	beq.n	800a9ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f042 0201 	orr.w	r2, r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2221      	movs	r2, #33	@ 0x21
 800a9c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	893a      	ldrh	r2, [r7, #8]
 800a9de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	4a50      	ldr	r2, [pc, #320]	@ (800ab30 <HAL_I2C_Master_Transmit+0x1f8>)
 800a9ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a9f0:	8979      	ldrh	r1, [r7, #10]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	6a3a      	ldr	r2, [r7, #32]
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 fc16 	bl	800b228 <I2C_MasterRequestWrite>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e08d      	b.n	800ab22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa06:	2300      	movs	r3, #0
 800aa08:	613b      	str	r3, [r7, #16]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	613b      	str	r3, [r7, #16]
 800aa1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800aa1c:	e066      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	6a39      	ldr	r1, [r7, #32]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 ff1a 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d107      	bne.n	800aa46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e06b      	b.n	800ab22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4e:	781a      	ldrb	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa72:	3b01      	subs	r3, #1
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b04      	cmp	r3, #4
 800aa86:	d11b      	bne.n	800aac0 <HAL_I2C_Master_Transmit+0x188>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa94:	781a      	ldrb	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab8:	3b01      	subs	r3, #1
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	6a39      	ldr	r1, [r7, #32]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 ff11 	bl	800b8ec <I2C_WaitOnBTFFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00d      	beq.n	800aaec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d107      	bne.n	800aae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e01a      	b.n	800ab22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d194      	bne.n	800aa1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e000      	b.n	800ab22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ab20:	2302      	movs	r3, #2
  }
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	00100002 	.word	0x00100002
 800ab30:	ffff0000 	.word	0xffff0000

0800ab34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af02      	add	r7, sp, #8
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	4611      	mov	r1, r2
 800ab40:	461a      	mov	r2, r3
 800ab42:	4603      	mov	r3, r0
 800ab44:	817b      	strh	r3, [r7, #10]
 800ab46:	460b      	mov	r3, r1
 800ab48:	813b      	strh	r3, [r7, #8]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab4e:	f7fe ff5d 	bl	8009a0c <HAL_GetTick>
 800ab52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	f040 80d9 	bne.w	800ad14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	2319      	movs	r3, #25
 800ab68:	2201      	movs	r2, #1
 800ab6a:	496d      	ldr	r1, [pc, #436]	@ (800ad20 <HAL_I2C_Mem_Write+0x1ec>)
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 fd5b 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e0cc      	b.n	800ad16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_I2C_Mem_Write+0x56>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e0c5      	b.n	800ad16 <HAL_I2C_Mem_Write+0x1e2>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d007      	beq.n	800abb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f042 0201 	orr.w	r2, r2, #1
 800abae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2221      	movs	r2, #33	@ 0x21
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2240      	movs	r2, #64	@ 0x40
 800abcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a3a      	ldr	r2, [r7, #32]
 800abda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4a4d      	ldr	r2, [pc, #308]	@ (800ad24 <HAL_I2C_Mem_Write+0x1f0>)
 800abf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800abf2:	88f8      	ldrh	r0, [r7, #6]
 800abf4:	893a      	ldrh	r2, [r7, #8]
 800abf6:	8979      	ldrh	r1, [r7, #10]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	4603      	mov	r3, r0
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 fb92 	bl	800b32c <I2C_RequestMemoryWrite>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d052      	beq.n	800acb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e081      	b.n	800ad16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f000 fe20 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00d      	beq.n	800ac3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d107      	bne.n	800ac3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e06b      	b.n	800ad16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac42:	781a      	ldrb	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	3b01      	subs	r3, #1
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d11b      	bne.n	800acb4 <HAL_I2C_Mem_Write+0x180>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d017      	beq.n	800acb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b01      	subs	r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1aa      	bne.n	800ac12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f000 fe13 	bl	800b8ec <I2C_WaitOnBTFFlagUntilTimeout>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00d      	beq.n	800ace8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d107      	bne.n	800ace4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ace2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e016      	b.n	800ad16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	e000      	b.n	800ad16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ad14:	2302      	movs	r3, #2
  }
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	00100002 	.word	0x00100002
 800ad24:	ffff0000 	.word	0xffff0000

0800ad28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08c      	sub	sp, #48	@ 0x30
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	4608      	mov	r0, r1
 800ad32:	4611      	mov	r1, r2
 800ad34:	461a      	mov	r2, r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	817b      	strh	r3, [r7, #10]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	813b      	strh	r3, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad46:	f7fe fe61 	bl	8009a0c <HAL_GetTick>
 800ad4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	f040 8244 	bne.w	800b1e2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	2319      	movs	r3, #25
 800ad60:	2201      	movs	r2, #1
 800ad62:	4982      	ldr	r1, [pc, #520]	@ (800af6c <HAL_I2C_Mem_Read+0x244>)
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 fc5f 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800ad70:	2302      	movs	r3, #2
 800ad72:	e237      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_I2C_Mem_Read+0x5a>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e230      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d007      	beq.n	800ada8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800adb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2222      	movs	r2, #34	@ 0x22
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2240      	movs	r2, #64	@ 0x40
 800adc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800add2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800add8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adde:	b29a      	uxth	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4a62      	ldr	r2, [pc, #392]	@ (800af70 <HAL_I2C_Mem_Read+0x248>)
 800ade8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800adea:	88f8      	ldrh	r0, [r7, #6]
 800adec:	893a      	ldrh	r2, [r7, #8]
 800adee:	8979      	ldrh	r1, [r7, #10]
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	4603      	mov	r3, r0
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 fb2c 	bl	800b458 <I2C_RequestMemoryRead>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e1ec      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d113      	bne.n	800ae3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae12:	2300      	movs	r3, #0
 800ae14:	61fb      	str	r3, [r7, #28]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	61fb      	str	r3, [r7, #28]
 800ae26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	e1c0      	b.n	800b1bc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d11e      	bne.n	800ae80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae52:	b672      	cpsid	i
}
 800ae54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae56:	2300      	movs	r3, #0
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	61bb      	str	r3, [r7, #24]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	61bb      	str	r3, [r7, #24]
 800ae6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ae7c:	b662      	cpsie	i
}
 800ae7e:	e035      	b.n	800aeec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d11e      	bne.n	800aec6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae98:	b672      	cpsid	i
}
 800ae9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aec2:	b662      	cpsie	i
}
 800aec4:	e012      	b.n	800aeec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aed4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	613b      	str	r3, [r7, #16]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	613b      	str	r3, [r7, #16]
 800aeea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800aeec:	e166      	b.n	800b1bc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	f200 811f 	bhi.w	800b136 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d123      	bne.n	800af48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 fd39 	bl	800b97c <I2C_WaitOnRXNEFlagUntilTimeout>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e167      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af30:	3b01      	subs	r3, #1
 800af32:	b29a      	uxth	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800af46:	e139      	b.n	800b1bc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d152      	bne.n	800aff6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af56:	2200      	movs	r2, #0
 800af58:	4906      	ldr	r1, [pc, #24]	@ (800af74 <HAL_I2C_Mem_Read+0x24c>)
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 fb64 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d008      	beq.n	800af78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e13c      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
 800af6a:	bf00      	nop
 800af6c:	00100002 	.word	0x00100002
 800af70:	ffff0000 	.word	0xffff0000
 800af74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800af78:	b672      	cpsid	i
}
 800af7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	691a      	ldr	r2, [r3, #16]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	b2d2      	uxtb	r2, r2
 800af98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afa8:	3b01      	subs	r3, #1
 800afaa:	b29a      	uxth	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	3b01      	subs	r3, #1
 800afb8:	b29a      	uxth	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800afbe:	b662      	cpsie	i
}
 800afc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	691a      	ldr	r2, [r3, #16]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	b2d2      	uxtb	r2, r2
 800afce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afde:	3b01      	subs	r3, #1
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aff4:	e0e2      	b.n	800b1bc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affc:	2200      	movs	r2, #0
 800affe:	497b      	ldr	r1, [pc, #492]	@ (800b1ec <HAL_I2C_Mem_Read+0x4c4>)
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 fb11 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e0e9      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b01e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b020:	b672      	cpsid	i
}
 800b022:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	691a      	ldr	r2, [r3, #16]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	b2d2      	uxtb	r2, r2
 800b030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b040:	3b01      	subs	r3, #1
 800b042:	b29a      	uxth	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	3b01      	subs	r3, #1
 800b050:	b29a      	uxth	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b056:	4b66      	ldr	r3, [pc, #408]	@ (800b1f0 <HAL_I2C_Mem_Read+0x4c8>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	08db      	lsrs	r3, r3, #3
 800b05c:	4a65      	ldr	r2, [pc, #404]	@ (800b1f4 <HAL_I2C_Mem_Read+0x4cc>)
 800b05e:	fba2 2303 	umull	r2, r3, r2, r3
 800b062:	0a1a      	lsrs	r2, r3, #8
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	00da      	lsls	r2, r3, #3
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	3b01      	subs	r3, #1
 800b074:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d118      	bne.n	800b0ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2220      	movs	r2, #32
 800b086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b096:	f043 0220 	orr.w	r2, r3, #32
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b09e:	b662      	cpsie	i
}
 800b0a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e09a      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f003 0304 	and.w	r3, r3, #4
 800b0b8:	2b04      	cmp	r3, #4
 800b0ba:	d1d9      	bne.n	800b070 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691a      	ldr	r2, [r3, #16]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b0fe:	b662      	cpsie	i
}
 800b100:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691a      	ldr	r2, [r3, #16]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b11e:	3b01      	subs	r3, #1
 800b120:	b29a      	uxth	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	3b01      	subs	r3, #1
 800b12e:	b29a      	uxth	r2, r3
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b134:	e042      	b.n	800b1bc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b138:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 fc1e 	bl	800b97c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e04c      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b154:	b2d2      	uxtb	r2, r2
 800b156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b166:	3b01      	subs	r3, #1
 800b168:	b29a      	uxth	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b172:	b29b      	uxth	r3, r3
 800b174:	3b01      	subs	r3, #1
 800b176:	b29a      	uxth	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b04      	cmp	r3, #4
 800b188:	d118      	bne.n	800b1bc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f47f ae94 	bne.w	800aeee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e000      	b.n	800b1e4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b1e2:	2302      	movs	r3, #2
  }
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3728      	adds	r7, #40	@ 0x28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	00010004 	.word	0x00010004
 800b1f0:	20000f74 	.word	0x20000f74
 800b1f4:	14f8b589 	.word	0x14f8b589

0800b1f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b206:	b2db      	uxtb	r3, r3
}
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bc80      	pop	{r7}
 800b210:	4770      	bx	lr

0800b212 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b212:	b480      	push	{r7}
 800b214:	b083      	sub	sp, #12
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr

0800b228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af02      	add	r7, sp, #8
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	460b      	mov	r3, r1
 800b236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b08      	cmp	r3, #8
 800b242:	d006      	beq.n	800b252 <I2C_MasterRequestWrite+0x2a>
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d003      	beq.n	800b252 <I2C_MasterRequestWrite+0x2a>
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b250:	d108      	bne.n	800b264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e00b      	b.n	800b27c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b268:	2b12      	cmp	r3, #18
 800b26a:	d107      	bne.n	800b27c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b27a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 f9cd 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00d      	beq.n	800b2b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2a2:	d103      	bne.n	800b2ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e035      	b.n	800b31c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2b8:	d108      	bne.n	800b2cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b2ba:	897b      	ldrh	r3, [r7, #10]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	461a      	mov	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b2c8:	611a      	str	r2, [r3, #16]
 800b2ca:	e01b      	b.n	800b304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b2cc:	897b      	ldrh	r3, [r7, #10]
 800b2ce:	11db      	asrs	r3, r3, #7
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 0306 	and.w	r3, r3, #6
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f063 030f 	orn	r3, r3, #15
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	490e      	ldr	r1, [pc, #56]	@ (800b324 <I2C_MasterRequestWrite+0xfc>)
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f000 fa16 	bl	800b71c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e010      	b.n	800b31c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b2fa:	897b      	ldrh	r3, [r7, #10]
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	4907      	ldr	r1, [pc, #28]	@ (800b328 <I2C_MasterRequestWrite+0x100>)
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f000 fa06 	bl	800b71c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e000      	b.n	800b31c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	00010008 	.word	0x00010008
 800b328:	00010002 	.word	0x00010002

0800b32c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af02      	add	r7, sp, #8
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	4608      	mov	r0, r1
 800b336:	4611      	mov	r1, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	817b      	strh	r3, [r7, #10]
 800b33e:	460b      	mov	r3, r1
 800b340:	813b      	strh	r3, [r7, #8]
 800b342:	4613      	mov	r3, r2
 800b344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 f960 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00d      	beq.n	800b38a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b37c:	d103      	bne.n	800b386 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b384:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e05f      	b.n	800b44a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b38a:	897b      	ldrh	r3, [r7, #10]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	461a      	mov	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	6a3a      	ldr	r2, [r7, #32]
 800b39e:	492d      	ldr	r1, [pc, #180]	@ (800b454 <I2C_RequestMemoryWrite+0x128>)
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 f9bb 	bl	800b71c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e04c      	b.n	800b44a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3c8:	6a39      	ldr	r1, [r7, #32]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 fa46 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00d      	beq.n	800b3f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3da:	2b04      	cmp	r3, #4
 800b3dc:	d107      	bne.n	800b3ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e02b      	b.n	800b44a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3f2:	88fb      	ldrh	r3, [r7, #6]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d105      	bne.n	800b404 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3f8:	893b      	ldrh	r3, [r7, #8]
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	611a      	str	r2, [r3, #16]
 800b402:	e021      	b.n	800b448 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b404:	893b      	ldrh	r3, [r7, #8]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	b29b      	uxth	r3, r3
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b414:	6a39      	ldr	r1, [r7, #32]
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 fa20 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00d      	beq.n	800b43e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b426:	2b04      	cmp	r3, #4
 800b428:	d107      	bne.n	800b43a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e005      	b.n	800b44a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b43e:	893b      	ldrh	r3, [r7, #8]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	00010002 	.word	0x00010002

0800b458 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af02      	add	r7, sp, #8
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	4608      	mov	r0, r1
 800b462:	4611      	mov	r1, r2
 800b464:	461a      	mov	r2, r3
 800b466:	4603      	mov	r3, r0
 800b468:	817b      	strh	r3, [r7, #10]
 800b46a:	460b      	mov	r3, r1
 800b46c:	813b      	strh	r3, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b480:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	2200      	movs	r2, #0
 800b49a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 f8c2 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00d      	beq.n	800b4c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4b8:	d103      	bne.n	800b4c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e0aa      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b4c6:	897b      	ldrh	r3, [r7, #10]
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b4d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	6a3a      	ldr	r2, [r7, #32]
 800b4da:	4952      	ldr	r1, [pc, #328]	@ (800b624 <I2C_RequestMemoryRead+0x1cc>)
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 f91d 	bl	800b71c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e097      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	617b      	str	r3, [r7, #20]
 800b500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b504:	6a39      	ldr	r1, [r7, #32]
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 f9a8 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00d      	beq.n	800b52e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b516:	2b04      	cmp	r3, #4
 800b518:	d107      	bne.n	800b52a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e076      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b52e:	88fb      	ldrh	r3, [r7, #6]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d105      	bne.n	800b540 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b534:	893b      	ldrh	r3, [r7, #8]
 800b536:	b2da      	uxtb	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	611a      	str	r2, [r3, #16]
 800b53e:	e021      	b.n	800b584 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b540:	893b      	ldrh	r3, [r7, #8]
 800b542:	0a1b      	lsrs	r3, r3, #8
 800b544:	b29b      	uxth	r3, r3
 800b546:	b2da      	uxtb	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b550:	6a39      	ldr	r1, [r7, #32]
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 f982 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00d      	beq.n	800b57a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b562:	2b04      	cmp	r3, #4
 800b564:	d107      	bne.n	800b576 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e050      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b57a:	893b      	ldrh	r3, [r7, #8]
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b586:	6a39      	ldr	r1, [r7, #32]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f967 	bl	800b85c <I2C_WaitOnTXEFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00d      	beq.n	800b5b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d107      	bne.n	800b5ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e035      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 f82b 	bl	800b628 <I2C_WaitOnFlagUntilTimeout>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00d      	beq.n	800b5f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5e6:	d103      	bne.n	800b5f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e013      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b5f4:	897b      	ldrh	r3, [r7, #10]
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f043 0301 	orr.w	r3, r3, #1
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	4906      	ldr	r1, [pc, #24]	@ (800b624 <I2C_RequestMemoryRead+0x1cc>)
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 f886 	bl	800b71c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e000      	b.n	800b61c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	00010002 	.word	0x00010002

0800b628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	4613      	mov	r3, r2
 800b636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b638:	e048      	b.n	800b6cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b640:	d044      	beq.n	800b6cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b642:	f7fe f9e3 	bl	8009a0c <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d302      	bcc.n	800b658 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d139      	bne.n	800b6cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	0c1b      	lsrs	r3, r3, #16
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d10d      	bne.n	800b67e <I2C_WaitOnFlagUntilTimeout+0x56>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	43da      	mvns	r2, r3
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	4013      	ands	r3, r2
 800b66e:	b29b      	uxth	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	bf0c      	ite	eq
 800b674:	2301      	moveq	r3, #1
 800b676:	2300      	movne	r3, #0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	461a      	mov	r2, r3
 800b67c:	e00c      	b.n	800b698 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	43da      	mvns	r2, r3
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	4013      	ands	r3, r2
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bf0c      	ite	eq
 800b690:	2301      	moveq	r3, #1
 800b692:	2300      	movne	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	461a      	mov	r2, r3
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d116      	bne.n	800b6cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b8:	f043 0220 	orr.w	r2, r3, #32
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e023      	b.n	800b714 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	0c1b      	lsrs	r3, r3, #16
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d10d      	bne.n	800b6f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	43da      	mvns	r2, r3
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bf0c      	ite	eq
 800b6e8:	2301      	moveq	r3, #1
 800b6ea:	2300      	movne	r3, #0
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	e00c      	b.n	800b70c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	43da      	mvns	r2, r3
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	bf0c      	ite	eq
 800b704:	2301      	moveq	r3, #1
 800b706:	2300      	movne	r3, #0
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	79fb      	ldrb	r3, [r7, #7]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d093      	beq.n	800b63a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b72a:	e071      	b.n	800b810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b73a:	d123      	bne.n	800b784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b74a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2220      	movs	r2, #32
 800b760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b770:	f043 0204 	orr.w	r2, r3, #4
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e067      	b.n	800b854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b78a:	d041      	beq.n	800b810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78c:	f7fe f93e 	bl	8009a0c <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d302      	bcc.n	800b7a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d136      	bne.n	800b810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	0c1b      	lsrs	r3, r3, #16
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d10c      	bne.n	800b7c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	43da      	mvns	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	bf14      	ite	ne
 800b7be:	2301      	movne	r3, #1
 800b7c0:	2300      	moveq	r3, #0
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	e00b      	b.n	800b7de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	43da      	mvns	r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bf14      	ite	ne
 800b7d8:	2301      	movne	r3, #1
 800b7da:	2300      	moveq	r3, #0
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d016      	beq.n	800b810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fc:	f043 0220 	orr.w	r2, r3, #32
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e021      	b.n	800b854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	0c1b      	lsrs	r3, r3, #16
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b01      	cmp	r3, #1
 800b818:	d10c      	bne.n	800b834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	43da      	mvns	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	4013      	ands	r3, r2
 800b826:	b29b      	uxth	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	bf14      	ite	ne
 800b82c:	2301      	movne	r3, #1
 800b82e:	2300      	moveq	r3, #0
 800b830:	b2db      	uxtb	r3, r3
 800b832:	e00b      	b.n	800b84c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	43da      	mvns	r2, r3
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4013      	ands	r3, r2
 800b840:	b29b      	uxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	bf14      	ite	ne
 800b846:	2301      	movne	r3, #1
 800b848:	2300      	moveq	r3, #0
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f47f af6d 	bne.w	800b72c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b868:	e034      	b.n	800b8d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 f8e3 	bl	800ba36 <I2C_IsAcknowledgeFailed>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e034      	b.n	800b8e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b880:	d028      	beq.n	800b8d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b882:	f7fe f8c3 	bl	8009a0c <HAL_GetTick>
 800b886:	4602      	mov	r2, r0
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d302      	bcc.n	800b898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11d      	bne.n	800b8d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8a2:	2b80      	cmp	r3, #128	@ 0x80
 800b8a4:	d016      	beq.n	800b8d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c0:	f043 0220 	orr.w	r2, r3, #32
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e007      	b.n	800b8e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8de:	2b80      	cmp	r3, #128	@ 0x80
 800b8e0:	d1c3      	bne.n	800b86a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8f8:	e034      	b.n	800b964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 f89b 	bl	800ba36 <I2C_IsAcknowledgeFailed>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e034      	b.n	800b974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b910:	d028      	beq.n	800b964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b912:	f7fe f87b 	bl	8009a0c <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d302      	bcc.n	800b928 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d11d      	bne.n	800b964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	f003 0304 	and.w	r3, r3, #4
 800b932:	2b04      	cmp	r3, #4
 800b934:	d016      	beq.n	800b964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2220      	movs	r2, #32
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b950:	f043 0220 	orr.w	r2, r3, #32
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e007      	b.n	800b974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	f003 0304 	and.w	r3, r3, #4
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d1c3      	bne.n	800b8fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b988:	e049      	b.n	800ba1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	f003 0310 	and.w	r3, r3, #16
 800b994:	2b10      	cmp	r3, #16
 800b996:	d119      	bne.n	800b9cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0210 	mvn.w	r2, #16
 800b9a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e030      	b.n	800ba2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9cc:	f7fe f81e 	bl	8009a0c <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d302      	bcc.n	800b9e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d11d      	bne.n	800ba1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ec:	2b40      	cmp	r3, #64	@ 0x40
 800b9ee:	d016      	beq.n	800ba1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba0a:	f043 0220 	orr.w	r2, r3, #32
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e007      	b.n	800ba2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba28:	2b40      	cmp	r3, #64	@ 0x40
 800ba2a:	d1ae      	bne.n	800b98a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba4c:	d11b      	bne.n	800ba86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2220      	movs	r2, #32
 800ba62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba72:	f043 0204 	orr.w	r2, r3, #4
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bc80      	pop	{r7}
 800ba90:	4770      	bx	lr
	...

0800ba94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e272      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 8087 	beq.w	800bbc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bab4:	4b92      	ldr	r3, [pc, #584]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	f003 030c 	and.w	r3, r3, #12
 800babc:	2b04      	cmp	r3, #4
 800babe:	d00c      	beq.n	800bada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bac0:	4b8f      	ldr	r3, [pc, #572]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f003 030c 	and.w	r3, r3, #12
 800bac8:	2b08      	cmp	r3, #8
 800baca:	d112      	bne.n	800baf2 <HAL_RCC_OscConfig+0x5e>
 800bacc:	4b8c      	ldr	r3, [pc, #560]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bad8:	d10b      	bne.n	800baf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bada:	4b89      	ldr	r3, [pc, #548]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d06c      	beq.n	800bbc0 <HAL_RCC_OscConfig+0x12c>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d168      	bne.n	800bbc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e24c      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bafa:	d106      	bne.n	800bb0a <HAL_RCC_OscConfig+0x76>
 800bafc:	4b80      	ldr	r3, [pc, #512]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a7f      	ldr	r2, [pc, #508]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	e02e      	b.n	800bb68 <HAL_RCC_OscConfig+0xd4>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10c      	bne.n	800bb2c <HAL_RCC_OscConfig+0x98>
 800bb12:	4b7b      	ldr	r3, [pc, #492]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a7a      	ldr	r2, [pc, #488]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	4b78      	ldr	r3, [pc, #480]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a77      	ldr	r2, [pc, #476]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	e01d      	b.n	800bb68 <HAL_RCC_OscConfig+0xd4>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb34:	d10c      	bne.n	800bb50 <HAL_RCC_OscConfig+0xbc>
 800bb36:	4b72      	ldr	r3, [pc, #456]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a71      	ldr	r2, [pc, #452]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	4b6f      	ldr	r3, [pc, #444]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a6e      	ldr	r2, [pc, #440]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	e00b      	b.n	800bb68 <HAL_RCC_OscConfig+0xd4>
 800bb50:	4b6b      	ldr	r3, [pc, #428]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a6a      	ldr	r2, [pc, #424]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	4b68      	ldr	r3, [pc, #416]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a67      	ldr	r2, [pc, #412]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d013      	beq.n	800bb98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb70:	f7fd ff4c 	bl	8009a0c <HAL_GetTick>
 800bb74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb76:	e008      	b.n	800bb8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb78:	f7fd ff48 	bl	8009a0c <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	2b64      	cmp	r3, #100	@ 0x64
 800bb84:	d901      	bls.n	800bb8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e200      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb8a:	4b5d      	ldr	r3, [pc, #372]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0f0      	beq.n	800bb78 <HAL_RCC_OscConfig+0xe4>
 800bb96:	e014      	b.n	800bbc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb98:	f7fd ff38 	bl	8009a0c <HAL_GetTick>
 800bb9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb9e:	e008      	b.n	800bbb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bba0:	f7fd ff34 	bl	8009a0c <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	2b64      	cmp	r3, #100	@ 0x64
 800bbac:	d901      	bls.n	800bbb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e1ec      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbb2:	4b53      	ldr	r3, [pc, #332]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1f0      	bne.n	800bba0 <HAL_RCC_OscConfig+0x10c>
 800bbbe:	e000      	b.n	800bbc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 0302 	and.w	r3, r3, #2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d063      	beq.n	800bc96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bbce:	4b4c      	ldr	r3, [pc, #304]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f003 030c 	and.w	r3, r3, #12
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bbda:	4b49      	ldr	r3, [pc, #292]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f003 030c 	and.w	r3, r3, #12
 800bbe2:	2b08      	cmp	r3, #8
 800bbe4:	d11c      	bne.n	800bc20 <HAL_RCC_OscConfig+0x18c>
 800bbe6:	4b46      	ldr	r3, [pc, #280]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d116      	bne.n	800bc20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbf2:	4b43      	ldr	r3, [pc, #268]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d005      	beq.n	800bc0a <HAL_RCC_OscConfig+0x176>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d001      	beq.n	800bc0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e1c0      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc0a:	4b3d      	ldr	r3, [pc, #244]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	4939      	ldr	r1, [pc, #228]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc1e:	e03a      	b.n	800bc96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d020      	beq.n	800bc6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc28:	4b36      	ldr	r3, [pc, #216]	@ (800bd04 <HAL_RCC_OscConfig+0x270>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc2e:	f7fd feed 	bl	8009a0c <HAL_GetTick>
 800bc32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc34:	e008      	b.n	800bc48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc36:	f7fd fee9 	bl	8009a0c <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d901      	bls.n	800bc48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e1a1      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc48:	4b2d      	ldr	r3, [pc, #180]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 0302 	and.w	r3, r3, #2
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0f0      	beq.n	800bc36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc54:	4b2a      	ldr	r3, [pc, #168]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	00db      	lsls	r3, r3, #3
 800bc62:	4927      	ldr	r1, [pc, #156]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bc64:	4313      	orrs	r3, r2
 800bc66:	600b      	str	r3, [r1, #0]
 800bc68:	e015      	b.n	800bc96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc6a:	4b26      	ldr	r3, [pc, #152]	@ (800bd04 <HAL_RCC_OscConfig+0x270>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc70:	f7fd fecc 	bl	8009a0c <HAL_GetTick>
 800bc74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc76:	e008      	b.n	800bc8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc78:	f7fd fec8 	bl	8009a0c <HAL_GetTick>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d901      	bls.n	800bc8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e180      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc8a:	4b1d      	ldr	r3, [pc, #116]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1f0      	bne.n	800bc78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 0308 	and.w	r3, r3, #8
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d03a      	beq.n	800bd18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d019      	beq.n	800bcde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bcaa:	4b17      	ldr	r3, [pc, #92]	@ (800bd08 <HAL_RCC_OscConfig+0x274>)
 800bcac:	2201      	movs	r2, #1
 800bcae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcb0:	f7fd feac 	bl	8009a0c <HAL_GetTick>
 800bcb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcb6:	e008      	b.n	800bcca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcb8:	f7fd fea8 	bl	8009a0c <HAL_GetTick>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d901      	bls.n	800bcca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e160      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcca:	4b0d      	ldr	r3, [pc, #52]	@ (800bd00 <HAL_RCC_OscConfig+0x26c>)
 800bccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcce:	f003 0302 	and.w	r3, r3, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0f0      	beq.n	800bcb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	f000 face 	bl	800c278 <RCC_Delay>
 800bcdc:	e01c      	b.n	800bd18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcde:	4b0a      	ldr	r3, [pc, #40]	@ (800bd08 <HAL_RCC_OscConfig+0x274>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bce4:	f7fd fe92 	bl	8009a0c <HAL_GetTick>
 800bce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcea:	e00f      	b.n	800bd0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcec:	f7fd fe8e 	bl	8009a0c <HAL_GetTick>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d908      	bls.n	800bd0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e146      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
 800bcfe:	bf00      	nop
 800bd00:	40021000 	.word	0x40021000
 800bd04:	42420000 	.word	0x42420000
 800bd08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd0c:	4b92      	ldr	r3, [pc, #584]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1e9      	bne.n	800bcec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f000 80a6 	beq.w	800be72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd2a:	4b8b      	ldr	r3, [pc, #556]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10d      	bne.n	800bd52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd36:	4b88      	ldr	r3, [pc, #544]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	4a87      	ldr	r2, [pc, #540]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd40:	61d3      	str	r3, [r2, #28]
 800bd42:	4b85      	ldr	r3, [pc, #532]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd4a:	60bb      	str	r3, [r7, #8]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd52:	4b82      	ldr	r3, [pc, #520]	@ (800bf5c <HAL_RCC_OscConfig+0x4c8>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d118      	bne.n	800bd90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd5e:	4b7f      	ldr	r3, [pc, #508]	@ (800bf5c <HAL_RCC_OscConfig+0x4c8>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a7e      	ldr	r2, [pc, #504]	@ (800bf5c <HAL_RCC_OscConfig+0x4c8>)
 800bd64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd6a:	f7fd fe4f 	bl	8009a0c <HAL_GetTick>
 800bd6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd70:	e008      	b.n	800bd84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd72:	f7fd fe4b 	bl	8009a0c <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	2b64      	cmp	r3, #100	@ 0x64
 800bd7e:	d901      	bls.n	800bd84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e103      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd84:	4b75      	ldr	r3, [pc, #468]	@ (800bf5c <HAL_RCC_OscConfig+0x4c8>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0f0      	beq.n	800bd72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d106      	bne.n	800bda6 <HAL_RCC_OscConfig+0x312>
 800bd98:	4b6f      	ldr	r3, [pc, #444]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	4a6e      	ldr	r2, [pc, #440]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bd9e:	f043 0301 	orr.w	r3, r3, #1
 800bda2:	6213      	str	r3, [r2, #32]
 800bda4:	e02d      	b.n	800be02 <HAL_RCC_OscConfig+0x36e>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10c      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x334>
 800bdae:	4b6a      	ldr	r3, [pc, #424]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	4a69      	ldr	r2, [pc, #420]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdb4:	f023 0301 	bic.w	r3, r3, #1
 800bdb8:	6213      	str	r3, [r2, #32]
 800bdba:	4b67      	ldr	r3, [pc, #412]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	4a66      	ldr	r2, [pc, #408]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdc0:	f023 0304 	bic.w	r3, r3, #4
 800bdc4:	6213      	str	r3, [r2, #32]
 800bdc6:	e01c      	b.n	800be02 <HAL_RCC_OscConfig+0x36e>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	d10c      	bne.n	800bdea <HAL_RCC_OscConfig+0x356>
 800bdd0:	4b61      	ldr	r3, [pc, #388]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdd2:	6a1b      	ldr	r3, [r3, #32]
 800bdd4:	4a60      	ldr	r2, [pc, #384]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdd6:	f043 0304 	orr.w	r3, r3, #4
 800bdda:	6213      	str	r3, [r2, #32]
 800bddc:	4b5e      	ldr	r3, [pc, #376]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdde:	6a1b      	ldr	r3, [r3, #32]
 800bde0:	4a5d      	ldr	r2, [pc, #372]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bde2:	f043 0301 	orr.w	r3, r3, #1
 800bde6:	6213      	str	r3, [r2, #32]
 800bde8:	e00b      	b.n	800be02 <HAL_RCC_OscConfig+0x36e>
 800bdea:	4b5b      	ldr	r3, [pc, #364]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	4a5a      	ldr	r2, [pc, #360]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdf0:	f023 0301 	bic.w	r3, r3, #1
 800bdf4:	6213      	str	r3, [r2, #32]
 800bdf6:	4b58      	ldr	r3, [pc, #352]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	4a57      	ldr	r2, [pc, #348]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bdfc:	f023 0304 	bic.w	r3, r3, #4
 800be00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d015      	beq.n	800be36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be0a:	f7fd fdff 	bl	8009a0c <HAL_GetTick>
 800be0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be10:	e00a      	b.n	800be28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be12:	f7fd fdfb 	bl	8009a0c <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be20:	4293      	cmp	r3, r2
 800be22:	d901      	bls.n	800be28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e0b1      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be28:	4b4b      	ldr	r3, [pc, #300]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0ee      	beq.n	800be12 <HAL_RCC_OscConfig+0x37e>
 800be34:	e014      	b.n	800be60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be36:	f7fd fde9 	bl	8009a0c <HAL_GetTick>
 800be3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be3c:	e00a      	b.n	800be54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be3e:	f7fd fde5 	bl	8009a0c <HAL_GetTick>
 800be42:	4602      	mov	r2, r0
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d901      	bls.n	800be54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e09b      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be54:	4b40      	ldr	r3, [pc, #256]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1ee      	bne.n	800be3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d105      	bne.n	800be72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be66:	4b3c      	ldr	r3, [pc, #240]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	4a3b      	ldr	r2, [pc, #236]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800be6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 8087 	beq.w	800bf8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800be7c:	4b36      	ldr	r3, [pc, #216]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f003 030c 	and.w	r3, r3, #12
 800be84:	2b08      	cmp	r3, #8
 800be86:	d061      	beq.n	800bf4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d146      	bne.n	800bf1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be90:	4b33      	ldr	r3, [pc, #204]	@ (800bf60 <HAL_RCC_OscConfig+0x4cc>)
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be96:	f7fd fdb9 	bl	8009a0c <HAL_GetTick>
 800be9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be9c:	e008      	b.n	800beb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be9e:	f7fd fdb5 	bl	8009a0c <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d901      	bls.n	800beb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e06d      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800beb0:	4b29      	ldr	r3, [pc, #164]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f0      	bne.n	800be9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bec4:	d108      	bne.n	800bed8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bec6:	4b24      	ldr	r3, [pc, #144]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	4921      	ldr	r1, [pc, #132]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bed8:	4b1f      	ldr	r3, [pc, #124]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a19      	ldr	r1, [r3, #32]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee8:	430b      	orrs	r3, r1
 800beea:	491b      	ldr	r1, [pc, #108]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800beec:	4313      	orrs	r3, r2
 800beee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bef0:	4b1b      	ldr	r3, [pc, #108]	@ (800bf60 <HAL_RCC_OscConfig+0x4cc>)
 800bef2:	2201      	movs	r2, #1
 800bef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bef6:	f7fd fd89 	bl	8009a0c <HAL_GetTick>
 800befa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800befc:	e008      	b.n	800bf10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800befe:	f7fd fd85 	bl	8009a0c <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d901      	bls.n	800bf10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e03d      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bf10:	4b11      	ldr	r3, [pc, #68]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d0f0      	beq.n	800befe <HAL_RCC_OscConfig+0x46a>
 800bf1c:	e035      	b.n	800bf8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf1e:	4b10      	ldr	r3, [pc, #64]	@ (800bf60 <HAL_RCC_OscConfig+0x4cc>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf24:	f7fd fd72 	bl	8009a0c <HAL_GetTick>
 800bf28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf2a:	e008      	b.n	800bf3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf2c:	f7fd fd6e 	bl	8009a0c <HAL_GetTick>
 800bf30:	4602      	mov	r2, r0
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d901      	bls.n	800bf3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e026      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf3e:	4b06      	ldr	r3, [pc, #24]	@ (800bf58 <HAL_RCC_OscConfig+0x4c4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1f0      	bne.n	800bf2c <HAL_RCC_OscConfig+0x498>
 800bf4a:	e01e      	b.n	800bf8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d107      	bne.n	800bf64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e019      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
 800bf58:	40021000 	.word	0x40021000
 800bf5c:	40007000 	.word	0x40007000
 800bf60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bf64:	4b0b      	ldr	r3, [pc, #44]	@ (800bf94 <HAL_RCC_OscConfig+0x500>)
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d106      	bne.n	800bf86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d001      	beq.n	800bf8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e000      	b.n	800bf8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	40021000 	.word	0x40021000

0800bf98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e0d0      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bfac:	4b6a      	ldr	r3, [pc, #424]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0307 	and.w	r3, r3, #7
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d910      	bls.n	800bfdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfba:	4b67      	ldr	r3, [pc, #412]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f023 0207 	bic.w	r2, r3, #7
 800bfc2:	4965      	ldr	r1, [pc, #404]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfca:	4b63      	ldr	r3, [pc, #396]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0307 	and.w	r3, r3, #7
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d001      	beq.n	800bfdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e0b8      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d020      	beq.n	800c02a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0304 	and.w	r3, r3, #4
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bff4:	4b59      	ldr	r3, [pc, #356]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	4a58      	ldr	r2, [pc, #352]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800bffa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bffe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0308 	and.w	r3, r3, #8
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c00c:	4b53      	ldr	r3, [pc, #332]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	4a52      	ldr	r2, [pc, #328]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c012:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c016:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c018:	4b50      	ldr	r3, [pc, #320]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	494d      	ldr	r1, [pc, #308]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c026:	4313      	orrs	r3, r2
 800c028:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	d040      	beq.n	800c0b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d107      	bne.n	800c04e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c03e:	4b47      	ldr	r3, [pc, #284]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d115      	bne.n	800c076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e07f      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d107      	bne.n	800c066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c056:	4b41      	ldr	r3, [pc, #260]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d109      	bne.n	800c076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e073      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c066:	4b3d      	ldr	r3, [pc, #244]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e06b      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c076:	4b39      	ldr	r3, [pc, #228]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f023 0203 	bic.w	r2, r3, #3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	4936      	ldr	r1, [pc, #216]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c084:	4313      	orrs	r3, r2
 800c086:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c088:	f7fd fcc0 	bl	8009a0c <HAL_GetTick>
 800c08c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c08e:	e00a      	b.n	800c0a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c090:	f7fd fcbc 	bl	8009a0c <HAL_GetTick>
 800c094:	4602      	mov	r2, r0
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d901      	bls.n	800c0a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e053      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f003 020c 	and.w	r2, r3, #12
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d1eb      	bne.n	800c090 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c0b8:	4b27      	ldr	r3, [pc, #156]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0307 	and.w	r3, r3, #7
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d210      	bcs.n	800c0e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0c6:	4b24      	ldr	r3, [pc, #144]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f023 0207 	bic.w	r2, r3, #7
 800c0ce:	4922      	ldr	r1, [pc, #136]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0d6:	4b20      	ldr	r3, [pc, #128]	@ (800c158 <HAL_RCC_ClockConfig+0x1c0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 0307 	and.w	r3, r3, #7
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d001      	beq.n	800c0e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e032      	b.n	800c14e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0304 	and.w	r3, r3, #4
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d008      	beq.n	800c106 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0f4:	4b19      	ldr	r3, [pc, #100]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	4916      	ldr	r1, [pc, #88]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c102:	4313      	orrs	r3, r2
 800c104:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 0308 	and.w	r3, r3, #8
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d009      	beq.n	800c126 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c112:	4b12      	ldr	r3, [pc, #72]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	490e      	ldr	r1, [pc, #56]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c122:	4313      	orrs	r3, r2
 800c124:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c126:	f000 f821 	bl	800c16c <HAL_RCC_GetSysClockFreq>
 800c12a:	4602      	mov	r2, r0
 800c12c:	4b0b      	ldr	r3, [pc, #44]	@ (800c15c <HAL_RCC_ClockConfig+0x1c4>)
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	091b      	lsrs	r3, r3, #4
 800c132:	f003 030f 	and.w	r3, r3, #15
 800c136:	490a      	ldr	r1, [pc, #40]	@ (800c160 <HAL_RCC_ClockConfig+0x1c8>)
 800c138:	5ccb      	ldrb	r3, [r1, r3]
 800c13a:	fa22 f303 	lsr.w	r3, r2, r3
 800c13e:	4a09      	ldr	r2, [pc, #36]	@ (800c164 <HAL_RCC_ClockConfig+0x1cc>)
 800c140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c142:	4b09      	ldr	r3, [pc, #36]	@ (800c168 <HAL_RCC_ClockConfig+0x1d0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4618      	mov	r0, r3
 800c148:	f7fd fc1e 	bl	8009988 <HAL_InitTick>

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	40022000 	.word	0x40022000
 800c15c:	40021000 	.word	0x40021000
 800c160:	0800e90c 	.word	0x0800e90c
 800c164:	20000f74 	.word	0x20000f74
 800c168:	20000f78 	.word	0x20000f78

0800c16c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	2300      	movs	r3, #0
 800c178:	60bb      	str	r3, [r7, #8]
 800c17a:	2300      	movs	r3, #0
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	2300      	movs	r3, #0
 800c180:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c182:	2300      	movs	r3, #0
 800c184:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c186:	4b1e      	ldr	r3, [pc, #120]	@ (800c200 <HAL_RCC_GetSysClockFreq+0x94>)
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f003 030c 	and.w	r3, r3, #12
 800c192:	2b04      	cmp	r3, #4
 800c194:	d002      	beq.n	800c19c <HAL_RCC_GetSysClockFreq+0x30>
 800c196:	2b08      	cmp	r3, #8
 800c198:	d003      	beq.n	800c1a2 <HAL_RCC_GetSysClockFreq+0x36>
 800c19a:	e027      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c19c:	4b19      	ldr	r3, [pc, #100]	@ (800c204 <HAL_RCC_GetSysClockFreq+0x98>)
 800c19e:	613b      	str	r3, [r7, #16]
      break;
 800c1a0:	e027      	b.n	800c1f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	0c9b      	lsrs	r3, r3, #18
 800c1a6:	f003 030f 	and.w	r3, r3, #15
 800c1aa:	4a17      	ldr	r2, [pc, #92]	@ (800c208 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c1ac:	5cd3      	ldrb	r3, [r2, r3]
 800c1ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d010      	beq.n	800c1dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c1ba:	4b11      	ldr	r3, [pc, #68]	@ (800c200 <HAL_RCC_GetSysClockFreq+0x94>)
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	0c5b      	lsrs	r3, r3, #17
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	4a11      	ldr	r2, [pc, #68]	@ (800c20c <HAL_RCC_GetSysClockFreq+0xa0>)
 800c1c6:	5cd3      	ldrb	r3, [r2, r3]
 800c1c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a0d      	ldr	r2, [pc, #52]	@ (800c204 <HAL_RCC_GetSysClockFreq+0x98>)
 800c1ce:	fb03 f202 	mul.w	r2, r3, r2
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	e004      	b.n	800c1e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a0c      	ldr	r2, [pc, #48]	@ (800c210 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
 800c1e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	613b      	str	r3, [r7, #16]
      break;
 800c1ea:	e002      	b.n	800c1f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c1ec:	4b05      	ldr	r3, [pc, #20]	@ (800c204 <HAL_RCC_GetSysClockFreq+0x98>)
 800c1ee:	613b      	str	r3, [r7, #16]
      break;
 800c1f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c1f2:	693b      	ldr	r3, [r7, #16]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	371c      	adds	r7, #28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bc80      	pop	{r7}
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	40021000 	.word	0x40021000
 800c204:	007a1200 	.word	0x007a1200
 800c208:	0800e924 	.word	0x0800e924
 800c20c:	0800e934 	.word	0x0800e934
 800c210:	003d0900 	.word	0x003d0900

0800c214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c214:	b480      	push	{r7}
 800c216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c218:	4b02      	ldr	r3, [pc, #8]	@ (800c224 <HAL_RCC_GetHCLKFreq+0x10>)
 800c21a:	681b      	ldr	r3, [r3, #0]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	46bd      	mov	sp, r7
 800c220:	bc80      	pop	{r7}
 800c222:	4770      	bx	lr
 800c224:	20000f74 	.word	0x20000f74

0800c228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c22c:	f7ff fff2 	bl	800c214 <HAL_RCC_GetHCLKFreq>
 800c230:	4602      	mov	r2, r0
 800c232:	4b05      	ldr	r3, [pc, #20]	@ (800c248 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	0a1b      	lsrs	r3, r3, #8
 800c238:	f003 0307 	and.w	r3, r3, #7
 800c23c:	4903      	ldr	r1, [pc, #12]	@ (800c24c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c23e:	5ccb      	ldrb	r3, [r1, r3]
 800c240:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c244:	4618      	mov	r0, r3
 800c246:	bd80      	pop	{r7, pc}
 800c248:	40021000 	.word	0x40021000
 800c24c:	0800e91c 	.word	0x0800e91c

0800c250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c254:	f7ff ffde 	bl	800c214 <HAL_RCC_GetHCLKFreq>
 800c258:	4602      	mov	r2, r0
 800c25a:	4b05      	ldr	r3, [pc, #20]	@ (800c270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	0adb      	lsrs	r3, r3, #11
 800c260:	f003 0307 	and.w	r3, r3, #7
 800c264:	4903      	ldr	r1, [pc, #12]	@ (800c274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c266:	5ccb      	ldrb	r3, [r1, r3]
 800c268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	40021000 	.word	0x40021000
 800c274:	0800e91c 	.word	0x0800e91c

0800c278 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c280:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ac <RCC_Delay+0x34>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b0 <RCC_Delay+0x38>)
 800c286:	fba2 2303 	umull	r2, r3, r2, r3
 800c28a:	0a5b      	lsrs	r3, r3, #9
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	fb02 f303 	mul.w	r3, r2, r3
 800c292:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c294:	bf00      	nop
  }
  while (Delay --);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	1e5a      	subs	r2, r3, #1
 800c29a:	60fa      	str	r2, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1f9      	bne.n	800c294 <RCC_Delay+0x1c>
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bc80      	pop	{r7}
 800c2aa:	4770      	bx	lr
 800c2ac:	20000f74 	.word	0x20000f74
 800c2b0:	10624dd3 	.word	0x10624dd3

0800c2b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e041      	b.n	800c34a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7fd fa22 	bl	8009724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f000 fa82 	bl	800c7fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b01      	cmp	r3, #1
 800c366:	d001      	beq.n	800c36c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e044      	b.n	800c3f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f042 0201 	orr.w	r2, r2, #1
 800c382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a1d      	ldr	r2, [pc, #116]	@ (800c400 <HAL_TIM_Base_Start_IT+0xac>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d018      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a1c      	ldr	r2, [pc, #112]	@ (800c404 <HAL_TIM_Base_Start_IT+0xb0>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d013      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3a0:	d00e      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a18      	ldr	r2, [pc, #96]	@ (800c408 <HAL_TIM_Base_Start_IT+0xb4>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d009      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a16      	ldr	r2, [pc, #88]	@ (800c40c <HAL_TIM_Base_Start_IT+0xb8>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d004      	beq.n	800c3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a15      	ldr	r2, [pc, #84]	@ (800c410 <HAL_TIM_Base_Start_IT+0xbc>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d111      	bne.n	800c3e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	f003 0307 	and.w	r3, r3, #7
 800c3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2b06      	cmp	r3, #6
 800c3d0:	d010      	beq.n	800c3f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f042 0201 	orr.w	r2, r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3e2:	e007      	b.n	800c3f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bc80      	pop	{r7}
 800c3fe:	4770      	bx	lr
 800c400:	40012c00 	.word	0x40012c00
 800c404:	40013400 	.word	0x40013400
 800c408:	40000400 	.word	0x40000400
 800c40c:	40000800 	.word	0x40000800
 800c410:	40000c00 	.word	0x40000c00

0800c414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	f003 0302 	and.w	r3, r3, #2
 800c426:	2b02      	cmp	r3, #2
 800c428:	d122      	bne.n	800c470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f003 0302 	and.w	r3, r3, #2
 800c434:	2b02      	cmp	r3, #2
 800c436:	d11b      	bne.n	800c470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f06f 0202 	mvn.w	r2, #2
 800c440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	f003 0303 	and.w	r3, r3, #3
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f9b4 	bl	800c7c4 <HAL_TIM_IC_CaptureCallback>
 800c45c:	e005      	b.n	800c46a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f9a7 	bl	800c7b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f9b6 	bl	800c7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	f003 0304 	and.w	r3, r3, #4
 800c47a:	2b04      	cmp	r3, #4
 800c47c:	d122      	bne.n	800c4c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b04      	cmp	r3, #4
 800c48a:	d11b      	bne.n	800c4c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f06f 0204 	mvn.w	r2, #4
 800c494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2202      	movs	r2, #2
 800c49a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f98a 	bl	800c7c4 <HAL_TIM_IC_CaptureCallback>
 800c4b0:	e005      	b.n	800c4be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f97d 	bl	800c7b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f98c 	bl	800c7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	f003 0308 	and.w	r3, r3, #8
 800c4ce:	2b08      	cmp	r3, #8
 800c4d0:	d122      	bne.n	800c518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	f003 0308 	and.w	r3, r3, #8
 800c4dc:	2b08      	cmp	r3, #8
 800c4de:	d11b      	bne.n	800c518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f06f 0208 	mvn.w	r2, #8
 800c4e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2204      	movs	r2, #4
 800c4ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	f003 0303 	and.w	r3, r3, #3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f960 	bl	800c7c4 <HAL_TIM_IC_CaptureCallback>
 800c504:	e005      	b.n	800c512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f953 	bl	800c7b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f962 	bl	800c7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	f003 0310 	and.w	r3, r3, #16
 800c522:	2b10      	cmp	r3, #16
 800c524:	d122      	bne.n	800c56c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f003 0310 	and.w	r3, r3, #16
 800c530:	2b10      	cmp	r3, #16
 800c532:	d11b      	bne.n	800c56c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f06f 0210 	mvn.w	r2, #16
 800c53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2208      	movs	r2, #8
 800c542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f936 	bl	800c7c4 <HAL_TIM_IC_CaptureCallback>
 800c558:	e005      	b.n	800c566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f929 	bl	800c7b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f938 	bl	800c7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b01      	cmp	r3, #1
 800c578:	d10e      	bne.n	800c598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b01      	cmp	r3, #1
 800c586:	d107      	bne.n	800c598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f06f 0201 	mvn.w	r2, #1
 800c590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7fc fd5e 	bl	8009054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5a2:	2b80      	cmp	r3, #128	@ 0x80
 800c5a4:	d10e      	bne.n	800c5c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5b0:	2b80      	cmp	r3, #128	@ 0x80
 800c5b2:	d107      	bne.n	800c5c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c5bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 faa1 	bl	800cb06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ce:	2b40      	cmp	r3, #64	@ 0x40
 800c5d0:	d10e      	bne.n	800c5f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5dc:	2b40      	cmp	r3, #64	@ 0x40
 800c5de:	d107      	bne.n	800c5f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f8fc 	bl	800c7e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b20      	cmp	r3, #32
 800c5fc:	d10e      	bne.n	800c61c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	f003 0320 	and.w	r3, r3, #32
 800c608:	2b20      	cmp	r3, #32
 800c60a:	d107      	bne.n	800c61c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f06f 0220 	mvn.w	r2, #32
 800c614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa6c 	bl	800caf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d101      	bne.n	800c640 <HAL_TIM_ConfigClockSource+0x1c>
 800c63c:	2302      	movs	r3, #2
 800c63e:	e0b4      	b.n	800c7aa <HAL_TIM_ConfigClockSource+0x186>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2202      	movs	r2, #2
 800c64c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c65e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c678:	d03e      	beq.n	800c6f8 <HAL_TIM_ConfigClockSource+0xd4>
 800c67a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c67e:	f200 8087 	bhi.w	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c686:	f000 8086 	beq.w	800c796 <HAL_TIM_ConfigClockSource+0x172>
 800c68a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c68e:	d87f      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c690:	2b70      	cmp	r3, #112	@ 0x70
 800c692:	d01a      	beq.n	800c6ca <HAL_TIM_ConfigClockSource+0xa6>
 800c694:	2b70      	cmp	r3, #112	@ 0x70
 800c696:	d87b      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c698:	2b60      	cmp	r3, #96	@ 0x60
 800c69a:	d050      	beq.n	800c73e <HAL_TIM_ConfigClockSource+0x11a>
 800c69c:	2b60      	cmp	r3, #96	@ 0x60
 800c69e:	d877      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c6a0:	2b50      	cmp	r3, #80	@ 0x50
 800c6a2:	d03c      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0xfa>
 800c6a4:	2b50      	cmp	r3, #80	@ 0x50
 800c6a6:	d873      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c6a8:	2b40      	cmp	r3, #64	@ 0x40
 800c6aa:	d058      	beq.n	800c75e <HAL_TIM_ConfigClockSource+0x13a>
 800c6ac:	2b40      	cmp	r3, #64	@ 0x40
 800c6ae:	d86f      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c6b0:	2b30      	cmp	r3, #48	@ 0x30
 800c6b2:	d064      	beq.n	800c77e <HAL_TIM_ConfigClockSource+0x15a>
 800c6b4:	2b30      	cmp	r3, #48	@ 0x30
 800c6b6:	d86b      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c6b8:	2b20      	cmp	r3, #32
 800c6ba:	d060      	beq.n	800c77e <HAL_TIM_ConfigClockSource+0x15a>
 800c6bc:	2b20      	cmp	r3, #32
 800c6be:	d867      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d05c      	beq.n	800c77e <HAL_TIM_ConfigClockSource+0x15a>
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d05a      	beq.n	800c77e <HAL_TIM_ConfigClockSource+0x15a>
 800c6c8:	e062      	b.n	800c790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6da:	f000 f980 	bl	800c9de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c6ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	609a      	str	r2, [r3, #8]
      break;
 800c6f6:	e04f      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c708:	f000 f969 	bl	800c9de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689a      	ldr	r2, [r3, #8]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c71a:	609a      	str	r2, [r3, #8]
      break;
 800c71c:	e03c      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c72a:	461a      	mov	r2, r3
 800c72c:	f000 f8e0 	bl	800c8f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2150      	movs	r1, #80	@ 0x50
 800c736:	4618      	mov	r0, r3
 800c738:	f000 f937 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c73c:	e02c      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c74a:	461a      	mov	r2, r3
 800c74c:	f000 f8fe 	bl	800c94c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2160      	movs	r1, #96	@ 0x60
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f927 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c75c:	e01c      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c76a:	461a      	mov	r2, r3
 800c76c:	f000 f8c0 	bl	800c8f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2140      	movs	r1, #64	@ 0x40
 800c776:	4618      	mov	r0, r3
 800c778:	f000 f917 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c77c:	e00c      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f000 f90e 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c78e:	e003      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	73fb      	strb	r3, [r7, #15]
      break;
 800c794:	e000      	b.n	800c798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b083      	sub	sp, #12
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7ba:	bf00      	nop
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bc80      	pop	{r7}
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bc80      	pop	{r7}
 800c7d4:	4770      	bx	lr

0800c7d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bc80      	pop	{r7}
 800c7e6:	4770      	bx	lr

0800c7e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bc80      	pop	{r7}
 800c7f8:	4770      	bx	lr
	...

0800c7fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a33      	ldr	r2, [pc, #204]	@ (800c8dc <TIM_Base_SetConfig+0xe0>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d013      	beq.n	800c83c <TIM_Base_SetConfig+0x40>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a32      	ldr	r2, [pc, #200]	@ (800c8e0 <TIM_Base_SetConfig+0xe4>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d00f      	beq.n	800c83c <TIM_Base_SetConfig+0x40>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c822:	d00b      	beq.n	800c83c <TIM_Base_SetConfig+0x40>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a2f      	ldr	r2, [pc, #188]	@ (800c8e4 <TIM_Base_SetConfig+0xe8>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d007      	beq.n	800c83c <TIM_Base_SetConfig+0x40>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a2e      	ldr	r2, [pc, #184]	@ (800c8e8 <TIM_Base_SetConfig+0xec>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d003      	beq.n	800c83c <TIM_Base_SetConfig+0x40>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a2d      	ldr	r2, [pc, #180]	@ (800c8ec <TIM_Base_SetConfig+0xf0>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d108      	bne.n	800c84e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a22      	ldr	r2, [pc, #136]	@ (800c8dc <TIM_Base_SetConfig+0xe0>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d013      	beq.n	800c87e <TIM_Base_SetConfig+0x82>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a21      	ldr	r2, [pc, #132]	@ (800c8e0 <TIM_Base_SetConfig+0xe4>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d00f      	beq.n	800c87e <TIM_Base_SetConfig+0x82>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c864:	d00b      	beq.n	800c87e <TIM_Base_SetConfig+0x82>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a1e      	ldr	r2, [pc, #120]	@ (800c8e4 <TIM_Base_SetConfig+0xe8>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d007      	beq.n	800c87e <TIM_Base_SetConfig+0x82>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a1d      	ldr	r2, [pc, #116]	@ (800c8e8 <TIM_Base_SetConfig+0xec>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d003      	beq.n	800c87e <TIM_Base_SetConfig+0x82>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a1c      	ldr	r2, [pc, #112]	@ (800c8ec <TIM_Base_SetConfig+0xf0>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d108      	bne.n	800c890 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a09      	ldr	r2, [pc, #36]	@ (800c8dc <TIM_Base_SetConfig+0xe0>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d003      	beq.n	800c8c4 <TIM_Base_SetConfig+0xc8>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a08      	ldr	r2, [pc, #32]	@ (800c8e0 <TIM_Base_SetConfig+0xe4>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d103      	bne.n	800c8cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	615a      	str	r2, [r3, #20]
}
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bc80      	pop	{r7}
 800c8da:	4770      	bx	lr
 800c8dc:	40012c00 	.word	0x40012c00
 800c8e0:	40013400 	.word	0x40013400
 800c8e4:	40000400 	.word	0x40000400
 800c8e8:	40000800 	.word	0x40000800
 800c8ec:	40000c00 	.word	0x40000c00

0800c8f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	f023 0201 	bic.w	r2, r3, #1
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c91a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	011b      	lsls	r3, r3, #4
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	4313      	orrs	r3, r2
 800c924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f023 030a 	bic.w	r3, r3, #10
 800c92c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	4313      	orrs	r3, r2
 800c934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	621a      	str	r2, [r3, #32]
}
 800c942:	bf00      	nop
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	bc80      	pop	{r7}
 800c94a:	4770      	bx	lr

0800c94c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a1b      	ldr	r3, [r3, #32]
 800c95c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	f023 0210 	bic.w	r2, r3, #16
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	031b      	lsls	r3, r3, #12
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	4313      	orrs	r3, r2
 800c980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c988:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	011b      	lsls	r3, r3, #4
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	4313      	orrs	r3, r2
 800c992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	621a      	str	r2, [r3, #32]
}
 800c9a0:	bf00      	nop
 800c9a2:	371c      	adds	r7, #28
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bc80      	pop	{r7}
 800c9a8:	4770      	bx	lr

0800c9aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	f043 0307 	orr.w	r3, r3, #7
 800c9cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	609a      	str	r2, [r3, #8]
}
 800c9d4:	bf00      	nop
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr

0800c9de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b087      	sub	sp, #28
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	60f8      	str	r0, [r7, #12]
 800c9e6:	60b9      	str	r1, [r7, #8]
 800c9e8:	607a      	str	r2, [r7, #4]
 800c9ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	021a      	lsls	r2, r3, #8
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	431a      	orrs	r2, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	609a      	str	r2, [r3, #8]
}
 800ca12:	bf00      	nop
 800ca14:	371c      	adds	r7, #28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bc80      	pop	{r7}
 800ca1a:	4770      	bx	lr

0800ca1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d101      	bne.n	800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca30:	2302      	movs	r3, #2
 800ca32:	e050      	b.n	800cad6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a1b      	ldr	r2, [pc, #108]	@ (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d018      	beq.n	800caaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a19      	ldr	r2, [pc, #100]	@ (800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d013      	beq.n	800caaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca8a:	d00e      	beq.n	800caaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a15      	ldr	r2, [pc, #84]	@ (800cae8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d009      	beq.n	800caaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a14      	ldr	r2, [pc, #80]	@ (800caec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d004      	beq.n	800caaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a12      	ldr	r2, [pc, #72]	@ (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d10c      	bne.n	800cac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	4313      	orrs	r3, r2
 800caba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	bc80      	pop	{r7}
 800cade:	4770      	bx	lr
 800cae0:	40012c00 	.word	0x40012c00
 800cae4:	40013400 	.word	0x40013400
 800cae8:	40000400 	.word	0x40000400
 800caec:	40000800 	.word	0x40000800
 800caf0:	40000c00 	.word	0x40000c00

0800caf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bc80      	pop	{r7}
 800cb04:	4770      	bx	lr

0800cb06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb06:	b480      	push	{r7}
 800cb08:	b083      	sub	sp, #12
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb0e:	bf00      	nop
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bc80      	pop	{r7}
 800cb16:	4770      	bx	lr

0800cb18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e042      	b.n	800cbb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d106      	bne.n	800cb44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7fc fe16 	bl	8009770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2224      	movs	r2, #36	@ 0x24
 800cb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68da      	ldr	r2, [r3, #12]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fcb5 	bl	800d4cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	691a      	ldr	r2, [r3, #16]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	695a      	ldr	r2, [r3, #20]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	68da      	ldr	r2, [r3, #12]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cb90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	d121      	bne.n	800cc16 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <HAL_UART_Transmit_IT+0x26>
 800cbd8:	88fb      	ldrh	r3, [r7, #6]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d101      	bne.n	800cbe2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e01a      	b.n	800cc18 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	88fa      	ldrh	r2, [r7, #6]
 800cbec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	88fa      	ldrh	r2, [r7, #6]
 800cbf2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2221      	movs	r2, #33	@ 0x21
 800cbfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68da      	ldr	r2, [r3, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cc10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	e000      	b.n	800cc18 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800cc16:	2302      	movs	r3, #2
  }
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bc80      	pop	{r7}
 800cc20:	4770      	bx	lr
	...

0800cc24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b0ba      	sub	sp, #232	@ 0xe8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc5a:	f003 030f 	and.w	r3, r3, #15
 800cc5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cc62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10f      	bne.n	800cc8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc6e:	f003 0320 	and.w	r3, r3, #32
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d009      	beq.n	800cc8a <HAL_UART_IRQHandler+0x66>
 800cc76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fb63 	bl	800d34e <UART_Receive_IT>
      return;
 800cc88:	e25b      	b.n	800d142 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cc8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 80de 	beq.w	800ce50 <HAL_UART_IRQHandler+0x22c>
 800cc94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d106      	bne.n	800ccae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cca4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 80d1 	beq.w	800ce50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ccae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00b      	beq.n	800ccd2 <HAL_UART_IRQHandler+0xae>
 800ccba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d005      	beq.n	800ccd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccca:	f043 0201 	orr.w	r2, r3, #1
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccd6:	f003 0304 	and.w	r3, r3, #4
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00b      	beq.n	800ccf6 <HAL_UART_IRQHandler+0xd2>
 800ccde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccee:	f043 0202 	orr.w	r2, r3, #2
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccfa:	f003 0302 	and.w	r3, r3, #2
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00b      	beq.n	800cd1a <HAL_UART_IRQHandler+0xf6>
 800cd02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d005      	beq.n	800cd1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd12:	f043 0204 	orr.w	r2, r3, #4
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd1e:	f003 0308 	and.w	r3, r3, #8
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d011      	beq.n	800cd4a <HAL_UART_IRQHandler+0x126>
 800cd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd2a:	f003 0320 	and.w	r3, r3, #32
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d105      	bne.n	800cd3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d005      	beq.n	800cd4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd42:	f043 0208 	orr.w	r2, r3, #8
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f000 81f2 	beq.w	800d138 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd58:	f003 0320 	and.w	r3, r3, #32
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d008      	beq.n	800cd72 <HAL_UART_IRQHandler+0x14e>
 800cd60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd64:	f003 0320 	and.w	r3, r3, #32
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 faee 	bl	800d34e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	bf14      	ite	ne
 800cd80:	2301      	movne	r3, #1
 800cd82:	2300      	moveq	r3, #0
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd8e:	f003 0308 	and.w	r3, r3, #8
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d103      	bne.n	800cd9e <HAL_UART_IRQHandler+0x17a>
 800cd96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d04f      	beq.n	800ce3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f9f8 	bl	800d194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	695b      	ldr	r3, [r3, #20]
 800cdaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d041      	beq.n	800ce36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cdc0:	e853 3f00 	ldrex	r3, [r3]
 800cdc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cdc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	3314      	adds	r3, #20
 800cdda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cde2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cdea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cdee:	e841 2300 	strex	r3, r2, [r1]
 800cdf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cdf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1d9      	bne.n	800cdb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d013      	beq.n	800ce2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0a:	4a7e      	ldr	r2, [pc, #504]	@ (800d004 <HAL_UART_IRQHandler+0x3e0>)
 800ce0c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fd f86c 	bl	8009ef0 <HAL_DMA_Abort_IT>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d016      	beq.n	800ce4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce28:	4610      	mov	r0, r2
 800ce2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce2c:	e00e      	b.n	800ce4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f99c 	bl	800d16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce34:	e00a      	b.n	800ce4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f998 	bl	800d16c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce3c:	e006      	b.n	800ce4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f994 	bl	800d16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ce4a:	e175      	b.n	800d138 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce4c:	bf00      	nop
    return;
 800ce4e:	e173      	b.n	800d138 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	f040 814f 	bne.w	800d0f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ce5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce5e:	f003 0310 	and.w	r3, r3, #16
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 8148 	beq.w	800d0f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ce68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce6c:	f003 0310 	and.w	r3, r3, #16
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 8141 	beq.w	800d0f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce76:	2300      	movs	r3, #0
 800ce78:	60bb      	str	r3, [r7, #8]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	60bb      	str	r3, [r7, #8]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	60bb      	str	r3, [r7, #8]
 800ce8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	695b      	ldr	r3, [r3, #20]
 800ce92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 80b6 	beq.w	800d008 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cea8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 8145 	beq.w	800d13c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ceb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ceba:	429a      	cmp	r2, r3
 800cebc:	f080 813e 	bcs.w	800d13c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cec6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	2b20      	cmp	r3, #32
 800ced0:	f000 8088 	beq.w	800cfe4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	330c      	adds	r3, #12
 800ceda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cede:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ceea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ceee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cef2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	330c      	adds	r3, #12
 800cefc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cf00:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cf04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cf0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf10:	e841 2300 	strex	r3, r2, [r1]
 800cf14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1d9      	bne.n	800ced4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	3314      	adds	r3, #20
 800cf26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf2a:	e853 3f00 	ldrex	r3, [r3]
 800cf2e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf32:	f023 0301 	bic.w	r3, r3, #1
 800cf36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3314      	adds	r3, #20
 800cf40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf50:	e841 2300 	strex	r3, r2, [r1]
 800cf54:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1e1      	bne.n	800cf20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3314      	adds	r3, #20
 800cf62:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf66:	e853 3f00 	ldrex	r3, [r3]
 800cf6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3314      	adds	r3, #20
 800cf7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf88:	e841 2300 	strex	r3, r2, [r1]
 800cf8c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1e3      	bne.n	800cf5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2220      	movs	r2, #32
 800cf98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	330c      	adds	r3, #12
 800cfa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cfb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfb4:	f023 0310 	bic.w	r3, r3, #16
 800cfb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cfc6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cfc8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e3      	bne.n	800cfa2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fc ff4b 	bl	8009e7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f8bf 	bl	800d17e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d000:	e09c      	b.n	800d13c <HAL_UART_IRQHandler+0x518>
 800d002:	bf00      	nop
 800d004:	0800d259 	.word	0x0800d259
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d010:	b29b      	uxth	r3, r3
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 808e 	beq.w	800d140 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 8089 	beq.w	800d140 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	330c      	adds	r3, #12
 800d034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d038:	e853 3f00 	ldrex	r3, [r3]
 800d03c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	330c      	adds	r3, #12
 800d04e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d052:	647a      	str	r2, [r7, #68]	@ 0x44
 800d054:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e3      	bne.n	800d02e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3314      	adds	r3, #20
 800d06c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d070:	e853 3f00 	ldrex	r3, [r3]
 800d074:	623b      	str	r3, [r7, #32]
   return(result);
 800d076:	6a3b      	ldr	r3, [r7, #32]
 800d078:	f023 0301 	bic.w	r3, r3, #1
 800d07c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3314      	adds	r3, #20
 800d086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d08a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d08c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d092:	e841 2300 	strex	r3, r2, [r1]
 800d096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1e3      	bne.n	800d066 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	330c      	adds	r3, #12
 800d0b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f023 0310 	bic.w	r3, r3, #16
 800d0c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	330c      	adds	r3, #12
 800d0cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d0d0:	61fa      	str	r2, [r7, #28]
 800d0d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d4:	69b9      	ldr	r1, [r7, #24]
 800d0d6:	69fa      	ldr	r2, [r7, #28]
 800d0d8:	e841 2300 	strex	r3, r2, [r1]
 800d0dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1e3      	bne.n	800d0ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f844 	bl	800d17e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d0f6:	e023      	b.n	800d140 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d100:	2b00      	cmp	r3, #0
 800d102:	d009      	beq.n	800d118 <HAL_UART_IRQHandler+0x4f4>
 800d104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d003      	beq.n	800d118 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f8b5 	bl	800d280 <UART_Transmit_IT>
    return;
 800d116:	e014      	b.n	800d142 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00e      	beq.n	800d142 <HAL_UART_IRQHandler+0x51e>
 800d124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d008      	beq.n	800d142 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f8f4 	bl	800d31e <UART_EndTransmit_IT>
    return;
 800d136:	e004      	b.n	800d142 <HAL_UART_IRQHandler+0x51e>
    return;
 800d138:	bf00      	nop
 800d13a:	e002      	b.n	800d142 <HAL_UART_IRQHandler+0x51e>
      return;
 800d13c:	bf00      	nop
 800d13e:	e000      	b.n	800d142 <HAL_UART_IRQHandler+0x51e>
      return;
 800d140:	bf00      	nop
  }
}
 800d142:	37e8      	adds	r7, #232	@ 0xe8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	bc80      	pop	{r7}
 800d158:	4770      	bx	lr

0800d15a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b083      	sub	sp, #12
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d162:	bf00      	nop
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	bc80      	pop	{r7}
 800d16a:	4770      	bx	lr

0800d16c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d174:	bf00      	nop
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	bc80      	pop	{r7}
 800d17c:	4770      	bx	lr

0800d17e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	460b      	mov	r3, r1
 800d188:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d18a:	bf00      	nop
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	bc80      	pop	{r7}
 800d192:	4770      	bx	lr

0800d194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d194:	b480      	push	{r7}
 800d196:	b095      	sub	sp, #84	@ 0x54
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	330c      	adds	r3, #12
 800d1a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a6:	e853 3f00 	ldrex	r3, [r3]
 800d1aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	330c      	adds	r3, #12
 800d1ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1bc:	643a      	str	r2, [r7, #64]	@ 0x40
 800d1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1c4:	e841 2300 	strex	r3, r2, [r1]
 800d1c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1e5      	bne.n	800d19c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	e853 3f00 	ldrex	r3, [r3]
 800d1de:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	f023 0301 	bic.w	r3, r3, #1
 800d1e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3314      	adds	r3, #20
 800d1ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1f8:	e841 2300 	strex	r3, r2, [r1]
 800d1fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e5      	bne.n	800d1d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d119      	bne.n	800d240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	330c      	adds	r3, #12
 800d212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f023 0310 	bic.w	r3, r3, #16
 800d222:	647b      	str	r3, [r7, #68]	@ 0x44
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	330c      	adds	r3, #12
 800d22a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d22c:	61ba      	str	r2, [r7, #24]
 800d22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6979      	ldr	r1, [r7, #20]
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	613b      	str	r3, [r7, #16]
   return(result);
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e5      	bne.n	800d20c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2220      	movs	r2, #32
 800d244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d24e:	bf00      	nop
 800d250:	3754      	adds	r7, #84	@ 0x54
 800d252:	46bd      	mov	sp, r7
 800d254:	bc80      	pop	{r7}
 800d256:	4770      	bx	lr

0800d258 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2200      	movs	r2, #0
 800d26a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f7ff ff7a 	bl	800d16c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d278:	bf00      	nop
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b21      	cmp	r3, #33	@ 0x21
 800d292:	d13e      	bne.n	800d312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d29c:	d114      	bne.n	800d2c8 <UART_Transmit_IT+0x48>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d110      	bne.n	800d2c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a1b      	ldr	r3, [r3, #32]
 800d2c0:	1c9a      	adds	r2, r3, #2
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	621a      	str	r2, [r3, #32]
 800d2c6:	e008      	b.n	800d2da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	1c59      	adds	r1, r3, #1
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	6211      	str	r1, [r2, #32]
 800d2d2:	781a      	ldrb	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10f      	bne.n	800d30e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68da      	ldr	r2, [r3, #12]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d2fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d30c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	e000      	b.n	800d314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d312:	2302      	movs	r3, #2
  }
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	bc80      	pop	{r7}
 800d31c:	4770      	bx	lr

0800d31e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b082      	sub	sp, #8
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2220      	movs	r2, #32
 800d33a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff ff02 	bl	800d148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b08c      	sub	sp, #48	@ 0x30
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b22      	cmp	r3, #34	@ 0x22
 800d360:	f040 80ae 	bne.w	800d4c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d36c:	d117      	bne.n	800d39e <UART_Receive_IT+0x50>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d113      	bne.n	800d39e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d376:	2300      	movs	r3, #0
 800d378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	b29b      	uxth	r3, r3
 800d388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d396:	1c9a      	adds	r2, r3, #2
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d39c:	e026      	b.n	800d3ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3b0:	d007      	beq.n	800d3c2 <UART_Receive_IT+0x74>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10a      	bne.n	800d3d0 <UART_Receive_IT+0x82>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d106      	bne.n	800d3d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	e008      	b.n	800d3e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e6:	1c5a      	adds	r2, r3, #1
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d15d      	bne.n	800d4bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	68da      	ldr	r2, [r3, #12]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0220 	bic.w	r2, r2, #32
 800d40e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68da      	ldr	r2, [r3, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	695a      	ldr	r2, [r3, #20]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0201 	bic.w	r2, r2, #1
 800d42e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2220      	movs	r2, #32
 800d434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d442:	2b01      	cmp	r3, #1
 800d444:	d135      	bne.n	800d4b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	330c      	adds	r3, #12
 800d452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	e853 3f00 	ldrex	r3, [r3]
 800d45a:	613b      	str	r3, [r7, #16]
   return(result);
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f023 0310 	bic.w	r3, r3, #16
 800d462:	627b      	str	r3, [r7, #36]	@ 0x24
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	330c      	adds	r3, #12
 800d46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d46c:	623a      	str	r2, [r7, #32]
 800d46e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d470:	69f9      	ldr	r1, [r7, #28]
 800d472:	6a3a      	ldr	r2, [r7, #32]
 800d474:	e841 2300 	strex	r3, r2, [r1]
 800d478:	61bb      	str	r3, [r7, #24]
   return(result);
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e5      	bne.n	800d44c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f003 0310 	and.w	r3, r3, #16
 800d48a:	2b10      	cmp	r3, #16
 800d48c:	d10a      	bne.n	800d4a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d48e:	2300      	movs	r3, #0
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	60fb      	str	r3, [r7, #12]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff fe67 	bl	800d17e <HAL_UARTEx_RxEventCallback>
 800d4b0:	e002      	b.n	800d4b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fe51 	bl	800d15a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	e002      	b.n	800d4c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e000      	b.n	800d4c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d4c0:	2302      	movs	r3, #2
  }
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3730      	adds	r7, #48	@ 0x30
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	689a      	ldr	r2, [r3, #8]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d506:	f023 030c 	bic.w	r3, r3, #12
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	6812      	ldr	r2, [r2, #0]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	430b      	orrs	r3, r1
 800d512:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	699a      	ldr	r2, [r3, #24]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	430a      	orrs	r2, r1
 800d528:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a2c      	ldr	r2, [pc, #176]	@ (800d5e0 <UART_SetConfig+0x114>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d103      	bne.n	800d53c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d534:	f7fe fe8c 	bl	800c250 <HAL_RCC_GetPCLK2Freq>
 800d538:	60f8      	str	r0, [r7, #12]
 800d53a:	e002      	b.n	800d542 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d53c:	f7fe fe74 	bl	800c228 <HAL_RCC_GetPCLK1Freq>
 800d540:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	4613      	mov	r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	4413      	add	r3, r2
 800d54a:	009a      	lsls	r2, r3, #2
 800d54c:	441a      	add	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	fbb2 f3f3 	udiv	r3, r2, r3
 800d558:	4a22      	ldr	r2, [pc, #136]	@ (800d5e4 <UART_SetConfig+0x118>)
 800d55a:	fba2 2303 	umull	r2, r3, r2, r3
 800d55e:	095b      	lsrs	r3, r3, #5
 800d560:	0119      	lsls	r1, r3, #4
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009a      	lsls	r2, r3, #2
 800d56c:	441a      	add	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	fbb2 f2f3 	udiv	r2, r2, r3
 800d578:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e4 <UART_SetConfig+0x118>)
 800d57a:	fba3 0302 	umull	r0, r3, r3, r2
 800d57e:	095b      	lsrs	r3, r3, #5
 800d580:	2064      	movs	r0, #100	@ 0x64
 800d582:	fb00 f303 	mul.w	r3, r0, r3
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	011b      	lsls	r3, r3, #4
 800d58a:	3332      	adds	r3, #50	@ 0x32
 800d58c:	4a15      	ldr	r2, [pc, #84]	@ (800d5e4 <UART_SetConfig+0x118>)
 800d58e:	fba2 2303 	umull	r2, r3, r2, r3
 800d592:	095b      	lsrs	r3, r3, #5
 800d594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d598:	4419      	add	r1, r3
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	009a      	lsls	r2, r3, #2
 800d5a4:	441a      	add	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800d5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d5e4 <UART_SetConfig+0x118>)
 800d5b2:	fba3 0302 	umull	r0, r3, r3, r2
 800d5b6:	095b      	lsrs	r3, r3, #5
 800d5b8:	2064      	movs	r0, #100	@ 0x64
 800d5ba:	fb00 f303 	mul.w	r3, r0, r3
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	011b      	lsls	r3, r3, #4
 800d5c2:	3332      	adds	r3, #50	@ 0x32
 800d5c4:	4a07      	ldr	r2, [pc, #28]	@ (800d5e4 <UART_SetConfig+0x118>)
 800d5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ca:	095b      	lsrs	r3, r3, #5
 800d5cc:	f003 020f 	and.w	r2, r3, #15
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	440a      	add	r2, r1
 800d5d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d5d8:	bf00      	nop
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	40013800 	.word	0x40013800
 800d5e4:	51eb851f 	.word	0x51eb851f

0800d5e8 <__itoa>:
 800d5e8:	1e93      	subs	r3, r2, #2
 800d5ea:	2b22      	cmp	r3, #34	@ 0x22
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	d904      	bls.n	800d5fc <__itoa+0x14>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	461c      	mov	r4, r3
 800d5f6:	700b      	strb	r3, [r1, #0]
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	bd10      	pop	{r4, pc}
 800d5fc:	2a0a      	cmp	r2, #10
 800d5fe:	d109      	bne.n	800d614 <__itoa+0x2c>
 800d600:	2800      	cmp	r0, #0
 800d602:	da07      	bge.n	800d614 <__itoa+0x2c>
 800d604:	232d      	movs	r3, #45	@ 0x2d
 800d606:	700b      	strb	r3, [r1, #0]
 800d608:	2101      	movs	r1, #1
 800d60a:	4240      	negs	r0, r0
 800d60c:	4421      	add	r1, r4
 800d60e:	f000 f90f 	bl	800d830 <__utoa>
 800d612:	e7f1      	b.n	800d5f8 <__itoa+0x10>
 800d614:	2100      	movs	r1, #0
 800d616:	e7f9      	b.n	800d60c <__itoa+0x24>

0800d618 <itoa>:
 800d618:	f7ff bfe6 	b.w	800d5e8 <__itoa>

0800d61c <malloc>:
 800d61c:	4b02      	ldr	r3, [pc, #8]	@ (800d628 <malloc+0xc>)
 800d61e:	4601      	mov	r1, r0
 800d620:	6818      	ldr	r0, [r3, #0]
 800d622:	f000 b825 	b.w	800d670 <_malloc_r>
 800d626:	bf00      	nop
 800d628:	20000f80 	.word	0x20000f80

0800d62c <sbrk_aligned>:
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	4e0f      	ldr	r6, [pc, #60]	@ (800d66c <sbrk_aligned+0x40>)
 800d630:	460c      	mov	r4, r1
 800d632:	6831      	ldr	r1, [r6, #0]
 800d634:	4605      	mov	r5, r0
 800d636:	b911      	cbnz	r1, 800d63e <sbrk_aligned+0x12>
 800d638:	f000 f954 	bl	800d8e4 <_sbrk_r>
 800d63c:	6030      	str	r0, [r6, #0]
 800d63e:	4621      	mov	r1, r4
 800d640:	4628      	mov	r0, r5
 800d642:	f000 f94f 	bl	800d8e4 <_sbrk_r>
 800d646:	1c43      	adds	r3, r0, #1
 800d648:	d103      	bne.n	800d652 <sbrk_aligned+0x26>
 800d64a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d64e:	4620      	mov	r0, r4
 800d650:	bd70      	pop	{r4, r5, r6, pc}
 800d652:	1cc4      	adds	r4, r0, #3
 800d654:	f024 0403 	bic.w	r4, r4, #3
 800d658:	42a0      	cmp	r0, r4
 800d65a:	d0f8      	beq.n	800d64e <sbrk_aligned+0x22>
 800d65c:	1a21      	subs	r1, r4, r0
 800d65e:	4628      	mov	r0, r5
 800d660:	f000 f940 	bl	800d8e4 <_sbrk_r>
 800d664:	3001      	adds	r0, #1
 800d666:	d1f2      	bne.n	800d64e <sbrk_aligned+0x22>
 800d668:	e7ef      	b.n	800d64a <sbrk_aligned+0x1e>
 800d66a:	bf00      	nop
 800d66c:	20001a28 	.word	0x20001a28

0800d670 <_malloc_r>:
 800d670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d674:	1ccd      	adds	r5, r1, #3
 800d676:	f025 0503 	bic.w	r5, r5, #3
 800d67a:	3508      	adds	r5, #8
 800d67c:	2d0c      	cmp	r5, #12
 800d67e:	bf38      	it	cc
 800d680:	250c      	movcc	r5, #12
 800d682:	2d00      	cmp	r5, #0
 800d684:	4606      	mov	r6, r0
 800d686:	db01      	blt.n	800d68c <_malloc_r+0x1c>
 800d688:	42a9      	cmp	r1, r5
 800d68a:	d904      	bls.n	800d696 <_malloc_r+0x26>
 800d68c:	230c      	movs	r3, #12
 800d68e:	6033      	str	r3, [r6, #0]
 800d690:	2000      	movs	r0, #0
 800d692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d76c <_malloc_r+0xfc>
 800d69a:	f000 f89d 	bl	800d7d8 <__malloc_lock>
 800d69e:	f8d8 3000 	ldr.w	r3, [r8]
 800d6a2:	461c      	mov	r4, r3
 800d6a4:	bb44      	cbnz	r4, 800d6f8 <_malloc_r+0x88>
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f7ff ffbf 	bl	800d62c <sbrk_aligned>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	d158      	bne.n	800d766 <_malloc_r+0xf6>
 800d6b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d6b8:	4627      	mov	r7, r4
 800d6ba:	2f00      	cmp	r7, #0
 800d6bc:	d143      	bne.n	800d746 <_malloc_r+0xd6>
 800d6be:	2c00      	cmp	r4, #0
 800d6c0:	d04b      	beq.n	800d75a <_malloc_r+0xea>
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	eb04 0903 	add.w	r9, r4, r3
 800d6cc:	f000 f90a 	bl	800d8e4 <_sbrk_r>
 800d6d0:	4581      	cmp	r9, r0
 800d6d2:	d142      	bne.n	800d75a <_malloc_r+0xea>
 800d6d4:	6821      	ldr	r1, [r4, #0]
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	1a6d      	subs	r5, r5, r1
 800d6da:	4629      	mov	r1, r5
 800d6dc:	f7ff ffa6 	bl	800d62c <sbrk_aligned>
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	d03a      	beq.n	800d75a <_malloc_r+0xea>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	442b      	add	r3, r5
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ee:	685a      	ldr	r2, [r3, #4]
 800d6f0:	bb62      	cbnz	r2, 800d74c <_malloc_r+0xdc>
 800d6f2:	f8c8 7000 	str.w	r7, [r8]
 800d6f6:	e00f      	b.n	800d718 <_malloc_r+0xa8>
 800d6f8:	6822      	ldr	r2, [r4, #0]
 800d6fa:	1b52      	subs	r2, r2, r5
 800d6fc:	d420      	bmi.n	800d740 <_malloc_r+0xd0>
 800d6fe:	2a0b      	cmp	r2, #11
 800d700:	d917      	bls.n	800d732 <_malloc_r+0xc2>
 800d702:	1961      	adds	r1, r4, r5
 800d704:	42a3      	cmp	r3, r4
 800d706:	6025      	str	r5, [r4, #0]
 800d708:	bf18      	it	ne
 800d70a:	6059      	strne	r1, [r3, #4]
 800d70c:	6863      	ldr	r3, [r4, #4]
 800d70e:	bf08      	it	eq
 800d710:	f8c8 1000 	streq.w	r1, [r8]
 800d714:	5162      	str	r2, [r4, r5]
 800d716:	604b      	str	r3, [r1, #4]
 800d718:	4630      	mov	r0, r6
 800d71a:	f000 f863 	bl	800d7e4 <__malloc_unlock>
 800d71e:	f104 000b 	add.w	r0, r4, #11
 800d722:	1d23      	adds	r3, r4, #4
 800d724:	f020 0007 	bic.w	r0, r0, #7
 800d728:	1ac2      	subs	r2, r0, r3
 800d72a:	bf1c      	itt	ne
 800d72c:	1a1b      	subne	r3, r3, r0
 800d72e:	50a3      	strne	r3, [r4, r2]
 800d730:	e7af      	b.n	800d692 <_malloc_r+0x22>
 800d732:	6862      	ldr	r2, [r4, #4]
 800d734:	42a3      	cmp	r3, r4
 800d736:	bf0c      	ite	eq
 800d738:	f8c8 2000 	streq.w	r2, [r8]
 800d73c:	605a      	strne	r2, [r3, #4]
 800d73e:	e7eb      	b.n	800d718 <_malloc_r+0xa8>
 800d740:	4623      	mov	r3, r4
 800d742:	6864      	ldr	r4, [r4, #4]
 800d744:	e7ae      	b.n	800d6a4 <_malloc_r+0x34>
 800d746:	463c      	mov	r4, r7
 800d748:	687f      	ldr	r7, [r7, #4]
 800d74a:	e7b6      	b.n	800d6ba <_malloc_r+0x4a>
 800d74c:	461a      	mov	r2, r3
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	42a3      	cmp	r3, r4
 800d752:	d1fb      	bne.n	800d74c <_malloc_r+0xdc>
 800d754:	2300      	movs	r3, #0
 800d756:	6053      	str	r3, [r2, #4]
 800d758:	e7de      	b.n	800d718 <_malloc_r+0xa8>
 800d75a:	230c      	movs	r3, #12
 800d75c:	4630      	mov	r0, r6
 800d75e:	6033      	str	r3, [r6, #0]
 800d760:	f000 f840 	bl	800d7e4 <__malloc_unlock>
 800d764:	e794      	b.n	800d690 <_malloc_r+0x20>
 800d766:	6005      	str	r5, [r0, #0]
 800d768:	e7d6      	b.n	800d718 <_malloc_r+0xa8>
 800d76a:	bf00      	nop
 800d76c:	20001a2c 	.word	0x20001a2c

0800d770 <sniprintf>:
 800d770:	b40c      	push	{r2, r3}
 800d772:	b530      	push	{r4, r5, lr}
 800d774:	4b17      	ldr	r3, [pc, #92]	@ (800d7d4 <sniprintf+0x64>)
 800d776:	1e0c      	subs	r4, r1, #0
 800d778:	681d      	ldr	r5, [r3, #0]
 800d77a:	b09d      	sub	sp, #116	@ 0x74
 800d77c:	da08      	bge.n	800d790 <sniprintf+0x20>
 800d77e:	238b      	movs	r3, #139	@ 0x8b
 800d780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d784:	602b      	str	r3, [r5, #0]
 800d786:	b01d      	add	sp, #116	@ 0x74
 800d788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d78c:	b002      	add	sp, #8
 800d78e:	4770      	bx	lr
 800d790:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d794:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d798:	bf0c      	ite	eq
 800d79a:	4623      	moveq	r3, r4
 800d79c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d7a0:	9304      	str	r3, [sp, #16]
 800d7a2:	9307      	str	r3, [sp, #28]
 800d7a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7a8:	9002      	str	r0, [sp, #8]
 800d7aa:	9006      	str	r0, [sp, #24]
 800d7ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	ab21      	add	r3, sp, #132	@ 0x84
 800d7b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d7b6:	a902      	add	r1, sp, #8
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	f000 f97b 	bl	800dab4 <_svfiprintf_r>
 800d7be:	1c43      	adds	r3, r0, #1
 800d7c0:	bfbc      	itt	lt
 800d7c2:	238b      	movlt	r3, #139	@ 0x8b
 800d7c4:	602b      	strlt	r3, [r5, #0]
 800d7c6:	2c00      	cmp	r4, #0
 800d7c8:	d0dd      	beq.n	800d786 <sniprintf+0x16>
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	9b02      	ldr	r3, [sp, #8]
 800d7ce:	701a      	strb	r2, [r3, #0]
 800d7d0:	e7d9      	b.n	800d786 <sniprintf+0x16>
 800d7d2:	bf00      	nop
 800d7d4:	20000f80 	.word	0x20000f80

0800d7d8 <__malloc_lock>:
 800d7d8:	4801      	ldr	r0, [pc, #4]	@ (800d7e0 <__malloc_lock+0x8>)
 800d7da:	f000 b8bd 	b.w	800d958 <__retarget_lock_acquire_recursive>
 800d7de:	bf00      	nop
 800d7e0:	20001b68 	.word	0x20001b68

0800d7e4 <__malloc_unlock>:
 800d7e4:	4801      	ldr	r0, [pc, #4]	@ (800d7ec <__malloc_unlock+0x8>)
 800d7e6:	f000 b8b8 	b.w	800d95a <__retarget_lock_release_recursive>
 800d7ea:	bf00      	nop
 800d7ec:	20001b68 	.word	0x20001b68

0800d7f0 <siprintf>:
 800d7f0:	b40e      	push	{r1, r2, r3}
 800d7f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7f6:	b500      	push	{lr}
 800d7f8:	b09c      	sub	sp, #112	@ 0x70
 800d7fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800d7fc:	9002      	str	r0, [sp, #8]
 800d7fe:	9006      	str	r0, [sp, #24]
 800d800:	9107      	str	r1, [sp, #28]
 800d802:	9104      	str	r1, [sp, #16]
 800d804:	4808      	ldr	r0, [pc, #32]	@ (800d828 <siprintf+0x38>)
 800d806:	4909      	ldr	r1, [pc, #36]	@ (800d82c <siprintf+0x3c>)
 800d808:	f853 2b04 	ldr.w	r2, [r3], #4
 800d80c:	9105      	str	r1, [sp, #20]
 800d80e:	6800      	ldr	r0, [r0, #0]
 800d810:	a902      	add	r1, sp, #8
 800d812:	9301      	str	r3, [sp, #4]
 800d814:	f000 f94e 	bl	800dab4 <_svfiprintf_r>
 800d818:	2200      	movs	r2, #0
 800d81a:	9b02      	ldr	r3, [sp, #8]
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	b01c      	add	sp, #112	@ 0x70
 800d820:	f85d eb04 	ldr.w	lr, [sp], #4
 800d824:	b003      	add	sp, #12
 800d826:	4770      	bx	lr
 800d828:	20000f80 	.word	0x20000f80
 800d82c:	ffff0208 	.word	0xffff0208

0800d830 <__utoa>:
 800d830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d832:	b08b      	sub	sp, #44	@ 0x2c
 800d834:	4605      	mov	r5, r0
 800d836:	460b      	mov	r3, r1
 800d838:	466e      	mov	r6, sp
 800d83a:	4c1d      	ldr	r4, [pc, #116]	@ (800d8b0 <__utoa+0x80>)
 800d83c:	f104 0c20 	add.w	ip, r4, #32
 800d840:	4637      	mov	r7, r6
 800d842:	6820      	ldr	r0, [r4, #0]
 800d844:	6861      	ldr	r1, [r4, #4]
 800d846:	3408      	adds	r4, #8
 800d848:	c703      	stmia	r7!, {r0, r1}
 800d84a:	4564      	cmp	r4, ip
 800d84c:	463e      	mov	r6, r7
 800d84e:	d1f7      	bne.n	800d840 <__utoa+0x10>
 800d850:	7921      	ldrb	r1, [r4, #4]
 800d852:	6820      	ldr	r0, [r4, #0]
 800d854:	7139      	strb	r1, [r7, #4]
 800d856:	1e91      	subs	r1, r2, #2
 800d858:	2922      	cmp	r1, #34	@ 0x22
 800d85a:	6038      	str	r0, [r7, #0]
 800d85c:	f04f 0100 	mov.w	r1, #0
 800d860:	d904      	bls.n	800d86c <__utoa+0x3c>
 800d862:	7019      	strb	r1, [r3, #0]
 800d864:	460b      	mov	r3, r1
 800d866:	4618      	mov	r0, r3
 800d868:	b00b      	add	sp, #44	@ 0x2c
 800d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86c:	1e58      	subs	r0, r3, #1
 800d86e:	4684      	mov	ip, r0
 800d870:	fbb5 f7f2 	udiv	r7, r5, r2
 800d874:	fb02 5617 	mls	r6, r2, r7, r5
 800d878:	3628      	adds	r6, #40	@ 0x28
 800d87a:	446e      	add	r6, sp
 800d87c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d880:	460c      	mov	r4, r1
 800d882:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d886:	462e      	mov	r6, r5
 800d888:	42b2      	cmp	r2, r6
 800d88a:	463d      	mov	r5, r7
 800d88c:	f101 0101 	add.w	r1, r1, #1
 800d890:	d9ee      	bls.n	800d870 <__utoa+0x40>
 800d892:	2200      	movs	r2, #0
 800d894:	545a      	strb	r2, [r3, r1]
 800d896:	1919      	adds	r1, r3, r4
 800d898:	1aa5      	subs	r5, r4, r2
 800d89a:	42aa      	cmp	r2, r5
 800d89c:	dae3      	bge.n	800d866 <__utoa+0x36>
 800d89e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d8a2:	780e      	ldrb	r6, [r1, #0]
 800d8a4:	3201      	adds	r2, #1
 800d8a6:	7006      	strb	r6, [r0, #0]
 800d8a8:	f801 5901 	strb.w	r5, [r1], #-1
 800d8ac:	e7f4      	b.n	800d898 <__utoa+0x68>
 800d8ae:	bf00      	nop
 800d8b0:	0800e936 	.word	0x0800e936

0800d8b4 <strcat>:
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	7814      	ldrb	r4, [r2, #0]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	3201      	adds	r2, #1
 800d8be:	2c00      	cmp	r4, #0
 800d8c0:	d1fa      	bne.n	800d8b8 <strcat+0x4>
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8cc:	2a00      	cmp	r2, #0
 800d8ce:	d1f9      	bne.n	800d8c4 <strcat+0x10>
 800d8d0:	bd10      	pop	{r4, pc}

0800d8d2 <memset>:
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	4402      	add	r2, r0
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d100      	bne.n	800d8dc <memset+0xa>
 800d8da:	4770      	bx	lr
 800d8dc:	f803 1b01 	strb.w	r1, [r3], #1
 800d8e0:	e7f9      	b.n	800d8d6 <memset+0x4>
	...

0800d8e4 <_sbrk_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	4d05      	ldr	r5, [pc, #20]	@ (800d900 <_sbrk_r+0x1c>)
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	602b      	str	r3, [r5, #0]
 800d8f0:	f7fb ffd2 	bl	8009898 <_sbrk>
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	d102      	bne.n	800d8fe <_sbrk_r+0x1a>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	b103      	cbz	r3, 800d8fe <_sbrk_r+0x1a>
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	20001b6c 	.word	0x20001b6c

0800d904 <__errno>:
 800d904:	4b01      	ldr	r3, [pc, #4]	@ (800d90c <__errno+0x8>)
 800d906:	6818      	ldr	r0, [r3, #0]
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	20000f80 	.word	0x20000f80

0800d910 <__libc_init_array>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	2600      	movs	r6, #0
 800d914:	4d0c      	ldr	r5, [pc, #48]	@ (800d948 <__libc_init_array+0x38>)
 800d916:	4c0d      	ldr	r4, [pc, #52]	@ (800d94c <__libc_init_array+0x3c>)
 800d918:	1b64      	subs	r4, r4, r5
 800d91a:	10a4      	asrs	r4, r4, #2
 800d91c:	42a6      	cmp	r6, r4
 800d91e:	d109      	bne.n	800d934 <__libc_init_array+0x24>
 800d920:	f000 fbc2 	bl	800e0a8 <_init>
 800d924:	2600      	movs	r6, #0
 800d926:	4d0a      	ldr	r5, [pc, #40]	@ (800d950 <__libc_init_array+0x40>)
 800d928:	4c0a      	ldr	r4, [pc, #40]	@ (800d954 <__libc_init_array+0x44>)
 800d92a:	1b64      	subs	r4, r4, r5
 800d92c:	10a4      	asrs	r4, r4, #2
 800d92e:	42a6      	cmp	r6, r4
 800d930:	d105      	bne.n	800d93e <__libc_init_array+0x2e>
 800d932:	bd70      	pop	{r4, r5, r6, pc}
 800d934:	f855 3b04 	ldr.w	r3, [r5], #4
 800d938:	4798      	blx	r3
 800d93a:	3601      	adds	r6, #1
 800d93c:	e7ee      	b.n	800d91c <__libc_init_array+0xc>
 800d93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d942:	4798      	blx	r3
 800d944:	3601      	adds	r6, #1
 800d946:	e7f2      	b.n	800d92e <__libc_init_array+0x1e>
 800d948:	0800e998 	.word	0x0800e998
 800d94c:	0800e998 	.word	0x0800e998
 800d950:	0800e998 	.word	0x0800e998
 800d954:	0800e99c 	.word	0x0800e99c

0800d958 <__retarget_lock_acquire_recursive>:
 800d958:	4770      	bx	lr

0800d95a <__retarget_lock_release_recursive>:
 800d95a:	4770      	bx	lr

0800d95c <strcpy>:
 800d95c:	4603      	mov	r3, r0
 800d95e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d962:	f803 2b01 	strb.w	r2, [r3], #1
 800d966:	2a00      	cmp	r2, #0
 800d968:	d1f9      	bne.n	800d95e <strcpy+0x2>
 800d96a:	4770      	bx	lr

0800d96c <_free_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4605      	mov	r5, r0
 800d970:	2900      	cmp	r1, #0
 800d972:	d040      	beq.n	800d9f6 <_free_r+0x8a>
 800d974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d978:	1f0c      	subs	r4, r1, #4
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfb8      	it	lt
 800d97e:	18e4      	addlt	r4, r4, r3
 800d980:	f7ff ff2a 	bl	800d7d8 <__malloc_lock>
 800d984:	4a1c      	ldr	r2, [pc, #112]	@ (800d9f8 <_free_r+0x8c>)
 800d986:	6813      	ldr	r3, [r2, #0]
 800d988:	b933      	cbnz	r3, 800d998 <_free_r+0x2c>
 800d98a:	6063      	str	r3, [r4, #4]
 800d98c:	6014      	str	r4, [r2, #0]
 800d98e:	4628      	mov	r0, r5
 800d990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d994:	f7ff bf26 	b.w	800d7e4 <__malloc_unlock>
 800d998:	42a3      	cmp	r3, r4
 800d99a:	d908      	bls.n	800d9ae <_free_r+0x42>
 800d99c:	6820      	ldr	r0, [r4, #0]
 800d99e:	1821      	adds	r1, r4, r0
 800d9a0:	428b      	cmp	r3, r1
 800d9a2:	bf01      	itttt	eq
 800d9a4:	6819      	ldreq	r1, [r3, #0]
 800d9a6:	685b      	ldreq	r3, [r3, #4]
 800d9a8:	1809      	addeq	r1, r1, r0
 800d9aa:	6021      	streq	r1, [r4, #0]
 800d9ac:	e7ed      	b.n	800d98a <_free_r+0x1e>
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	b10b      	cbz	r3, 800d9b8 <_free_r+0x4c>
 800d9b4:	42a3      	cmp	r3, r4
 800d9b6:	d9fa      	bls.n	800d9ae <_free_r+0x42>
 800d9b8:	6811      	ldr	r1, [r2, #0]
 800d9ba:	1850      	adds	r0, r2, r1
 800d9bc:	42a0      	cmp	r0, r4
 800d9be:	d10b      	bne.n	800d9d8 <_free_r+0x6c>
 800d9c0:	6820      	ldr	r0, [r4, #0]
 800d9c2:	4401      	add	r1, r0
 800d9c4:	1850      	adds	r0, r2, r1
 800d9c6:	4283      	cmp	r3, r0
 800d9c8:	6011      	str	r1, [r2, #0]
 800d9ca:	d1e0      	bne.n	800d98e <_free_r+0x22>
 800d9cc:	6818      	ldr	r0, [r3, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4408      	add	r0, r1
 800d9d2:	6010      	str	r0, [r2, #0]
 800d9d4:	6053      	str	r3, [r2, #4]
 800d9d6:	e7da      	b.n	800d98e <_free_r+0x22>
 800d9d8:	d902      	bls.n	800d9e0 <_free_r+0x74>
 800d9da:	230c      	movs	r3, #12
 800d9dc:	602b      	str	r3, [r5, #0]
 800d9de:	e7d6      	b.n	800d98e <_free_r+0x22>
 800d9e0:	6820      	ldr	r0, [r4, #0]
 800d9e2:	1821      	adds	r1, r4, r0
 800d9e4:	428b      	cmp	r3, r1
 800d9e6:	bf01      	itttt	eq
 800d9e8:	6819      	ldreq	r1, [r3, #0]
 800d9ea:	685b      	ldreq	r3, [r3, #4]
 800d9ec:	1809      	addeq	r1, r1, r0
 800d9ee:	6021      	streq	r1, [r4, #0]
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	6054      	str	r4, [r2, #4]
 800d9f4:	e7cb      	b.n	800d98e <_free_r+0x22>
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	20001a2c 	.word	0x20001a2c

0800d9fc <__ssputs_r>:
 800d9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da00:	461f      	mov	r7, r3
 800da02:	688e      	ldr	r6, [r1, #8]
 800da04:	4682      	mov	sl, r0
 800da06:	42be      	cmp	r6, r7
 800da08:	460c      	mov	r4, r1
 800da0a:	4690      	mov	r8, r2
 800da0c:	680b      	ldr	r3, [r1, #0]
 800da0e:	d82d      	bhi.n	800da6c <__ssputs_r+0x70>
 800da10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da18:	d026      	beq.n	800da68 <__ssputs_r+0x6c>
 800da1a:	6965      	ldr	r5, [r4, #20]
 800da1c:	6909      	ldr	r1, [r1, #16]
 800da1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da22:	eba3 0901 	sub.w	r9, r3, r1
 800da26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da2a:	1c7b      	adds	r3, r7, #1
 800da2c:	444b      	add	r3, r9
 800da2e:	106d      	asrs	r5, r5, #1
 800da30:	429d      	cmp	r5, r3
 800da32:	bf38      	it	cc
 800da34:	461d      	movcc	r5, r3
 800da36:	0553      	lsls	r3, r2, #21
 800da38:	d527      	bpl.n	800da8a <__ssputs_r+0x8e>
 800da3a:	4629      	mov	r1, r5
 800da3c:	f7ff fe18 	bl	800d670 <_malloc_r>
 800da40:	4606      	mov	r6, r0
 800da42:	b360      	cbz	r0, 800da9e <__ssputs_r+0xa2>
 800da44:	464a      	mov	r2, r9
 800da46:	6921      	ldr	r1, [r4, #16]
 800da48:	f000 fb18 	bl	800e07c <memcpy>
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	6126      	str	r6, [r4, #16]
 800da5a:	444e      	add	r6, r9
 800da5c:	6026      	str	r6, [r4, #0]
 800da5e:	463e      	mov	r6, r7
 800da60:	6165      	str	r5, [r4, #20]
 800da62:	eba5 0509 	sub.w	r5, r5, r9
 800da66:	60a5      	str	r5, [r4, #8]
 800da68:	42be      	cmp	r6, r7
 800da6a:	d900      	bls.n	800da6e <__ssputs_r+0x72>
 800da6c:	463e      	mov	r6, r7
 800da6e:	4632      	mov	r2, r6
 800da70:	4641      	mov	r1, r8
 800da72:	6820      	ldr	r0, [r4, #0]
 800da74:	f000 fada 	bl	800e02c <memmove>
 800da78:	2000      	movs	r0, #0
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	1b9b      	subs	r3, r3, r6
 800da7e:	60a3      	str	r3, [r4, #8]
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	4433      	add	r3, r6
 800da84:	6023      	str	r3, [r4, #0]
 800da86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da8a:	462a      	mov	r2, r5
 800da8c:	f000 faa0 	bl	800dfd0 <_realloc_r>
 800da90:	4606      	mov	r6, r0
 800da92:	2800      	cmp	r0, #0
 800da94:	d1e0      	bne.n	800da58 <__ssputs_r+0x5c>
 800da96:	4650      	mov	r0, sl
 800da98:	6921      	ldr	r1, [r4, #16]
 800da9a:	f7ff ff67 	bl	800d96c <_free_r>
 800da9e:	230c      	movs	r3, #12
 800daa0:	f8ca 3000 	str.w	r3, [sl]
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	e7e9      	b.n	800da86 <__ssputs_r+0x8a>
	...

0800dab4 <_svfiprintf_r>:
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	4698      	mov	r8, r3
 800daba:	898b      	ldrh	r3, [r1, #12]
 800dabc:	4607      	mov	r7, r0
 800dabe:	061b      	lsls	r3, r3, #24
 800dac0:	460d      	mov	r5, r1
 800dac2:	4614      	mov	r4, r2
 800dac4:	b09d      	sub	sp, #116	@ 0x74
 800dac6:	d510      	bpl.n	800daea <_svfiprintf_r+0x36>
 800dac8:	690b      	ldr	r3, [r1, #16]
 800daca:	b973      	cbnz	r3, 800daea <_svfiprintf_r+0x36>
 800dacc:	2140      	movs	r1, #64	@ 0x40
 800dace:	f7ff fdcf 	bl	800d670 <_malloc_r>
 800dad2:	6028      	str	r0, [r5, #0]
 800dad4:	6128      	str	r0, [r5, #16]
 800dad6:	b930      	cbnz	r0, 800dae6 <_svfiprintf_r+0x32>
 800dad8:	230c      	movs	r3, #12
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dae0:	b01d      	add	sp, #116	@ 0x74
 800dae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae6:	2340      	movs	r3, #64	@ 0x40
 800dae8:	616b      	str	r3, [r5, #20]
 800daea:	2300      	movs	r3, #0
 800daec:	9309      	str	r3, [sp, #36]	@ 0x24
 800daee:	2320      	movs	r3, #32
 800daf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800daf4:	2330      	movs	r3, #48	@ 0x30
 800daf6:	f04f 0901 	mov.w	r9, #1
 800dafa:	f8cd 800c 	str.w	r8, [sp, #12]
 800dafe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dc98 <_svfiprintf_r+0x1e4>
 800db02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db06:	4623      	mov	r3, r4
 800db08:	469a      	mov	sl, r3
 800db0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db0e:	b10a      	cbz	r2, 800db14 <_svfiprintf_r+0x60>
 800db10:	2a25      	cmp	r2, #37	@ 0x25
 800db12:	d1f9      	bne.n	800db08 <_svfiprintf_r+0x54>
 800db14:	ebba 0b04 	subs.w	fp, sl, r4
 800db18:	d00b      	beq.n	800db32 <_svfiprintf_r+0x7e>
 800db1a:	465b      	mov	r3, fp
 800db1c:	4622      	mov	r2, r4
 800db1e:	4629      	mov	r1, r5
 800db20:	4638      	mov	r0, r7
 800db22:	f7ff ff6b 	bl	800d9fc <__ssputs_r>
 800db26:	3001      	adds	r0, #1
 800db28:	f000 80a7 	beq.w	800dc7a <_svfiprintf_r+0x1c6>
 800db2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db2e:	445a      	add	r2, fp
 800db30:	9209      	str	r2, [sp, #36]	@ 0x24
 800db32:	f89a 3000 	ldrb.w	r3, [sl]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f000 809f 	beq.w	800dc7a <_svfiprintf_r+0x1c6>
 800db3c:	2300      	movs	r3, #0
 800db3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db46:	f10a 0a01 	add.w	sl, sl, #1
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	9307      	str	r3, [sp, #28]
 800db4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db52:	931a      	str	r3, [sp, #104]	@ 0x68
 800db54:	4654      	mov	r4, sl
 800db56:	2205      	movs	r2, #5
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	484e      	ldr	r0, [pc, #312]	@ (800dc98 <_svfiprintf_r+0x1e4>)
 800db5e:	f000 fa7f 	bl	800e060 <memchr>
 800db62:	9a04      	ldr	r2, [sp, #16]
 800db64:	b9d8      	cbnz	r0, 800db9e <_svfiprintf_r+0xea>
 800db66:	06d0      	lsls	r0, r2, #27
 800db68:	bf44      	itt	mi
 800db6a:	2320      	movmi	r3, #32
 800db6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db70:	0711      	lsls	r1, r2, #28
 800db72:	bf44      	itt	mi
 800db74:	232b      	movmi	r3, #43	@ 0x2b
 800db76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db7a:	f89a 3000 	ldrb.w	r3, [sl]
 800db7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800db80:	d015      	beq.n	800dbae <_svfiprintf_r+0xfa>
 800db82:	4654      	mov	r4, sl
 800db84:	2000      	movs	r0, #0
 800db86:	f04f 0c0a 	mov.w	ip, #10
 800db8a:	9a07      	ldr	r2, [sp, #28]
 800db8c:	4621      	mov	r1, r4
 800db8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db92:	3b30      	subs	r3, #48	@ 0x30
 800db94:	2b09      	cmp	r3, #9
 800db96:	d94b      	bls.n	800dc30 <_svfiprintf_r+0x17c>
 800db98:	b1b0      	cbz	r0, 800dbc8 <_svfiprintf_r+0x114>
 800db9a:	9207      	str	r2, [sp, #28]
 800db9c:	e014      	b.n	800dbc8 <_svfiprintf_r+0x114>
 800db9e:	eba0 0308 	sub.w	r3, r0, r8
 800dba2:	fa09 f303 	lsl.w	r3, r9, r3
 800dba6:	4313      	orrs	r3, r2
 800dba8:	46a2      	mov	sl, r4
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	e7d2      	b.n	800db54 <_svfiprintf_r+0xa0>
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	1d19      	adds	r1, r3, #4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	9103      	str	r1, [sp, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	bfbb      	ittet	lt
 800dbba:	425b      	neglt	r3, r3
 800dbbc:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc0:	9307      	strge	r3, [sp, #28]
 800dbc2:	9307      	strlt	r3, [sp, #28]
 800dbc4:	bfb8      	it	lt
 800dbc6:	9204      	strlt	r2, [sp, #16]
 800dbc8:	7823      	ldrb	r3, [r4, #0]
 800dbca:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbcc:	d10a      	bne.n	800dbe4 <_svfiprintf_r+0x130>
 800dbce:	7863      	ldrb	r3, [r4, #1]
 800dbd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbd2:	d132      	bne.n	800dc3a <_svfiprintf_r+0x186>
 800dbd4:	9b03      	ldr	r3, [sp, #12]
 800dbd6:	3402      	adds	r4, #2
 800dbd8:	1d1a      	adds	r2, r3, #4
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	9203      	str	r2, [sp, #12]
 800dbde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbe2:	9305      	str	r3, [sp, #20]
 800dbe4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dc9c <_svfiprintf_r+0x1e8>
 800dbe8:	2203      	movs	r2, #3
 800dbea:	4650      	mov	r0, sl
 800dbec:	7821      	ldrb	r1, [r4, #0]
 800dbee:	f000 fa37 	bl	800e060 <memchr>
 800dbf2:	b138      	cbz	r0, 800dc04 <_svfiprintf_r+0x150>
 800dbf4:	2240      	movs	r2, #64	@ 0x40
 800dbf6:	9b04      	ldr	r3, [sp, #16]
 800dbf8:	eba0 000a 	sub.w	r0, r0, sl
 800dbfc:	4082      	lsls	r2, r0
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	3401      	adds	r4, #1
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc08:	2206      	movs	r2, #6
 800dc0a:	4825      	ldr	r0, [pc, #148]	@ (800dca0 <_svfiprintf_r+0x1ec>)
 800dc0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc10:	f000 fa26 	bl	800e060 <memchr>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d036      	beq.n	800dc86 <_svfiprintf_r+0x1d2>
 800dc18:	4b22      	ldr	r3, [pc, #136]	@ (800dca4 <_svfiprintf_r+0x1f0>)
 800dc1a:	bb1b      	cbnz	r3, 800dc64 <_svfiprintf_r+0x1b0>
 800dc1c:	9b03      	ldr	r3, [sp, #12]
 800dc1e:	3307      	adds	r3, #7
 800dc20:	f023 0307 	bic.w	r3, r3, #7
 800dc24:	3308      	adds	r3, #8
 800dc26:	9303      	str	r3, [sp, #12]
 800dc28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc2a:	4433      	add	r3, r6
 800dc2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc2e:	e76a      	b.n	800db06 <_svfiprintf_r+0x52>
 800dc30:	460c      	mov	r4, r1
 800dc32:	2001      	movs	r0, #1
 800dc34:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc38:	e7a8      	b.n	800db8c <_svfiprintf_r+0xd8>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f04f 0c0a 	mov.w	ip, #10
 800dc40:	4619      	mov	r1, r3
 800dc42:	3401      	adds	r4, #1
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	4620      	mov	r0, r4
 800dc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc4c:	3a30      	subs	r2, #48	@ 0x30
 800dc4e:	2a09      	cmp	r2, #9
 800dc50:	d903      	bls.n	800dc5a <_svfiprintf_r+0x1a6>
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0c6      	beq.n	800dbe4 <_svfiprintf_r+0x130>
 800dc56:	9105      	str	r1, [sp, #20]
 800dc58:	e7c4      	b.n	800dbe4 <_svfiprintf_r+0x130>
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc62:	e7f0      	b.n	800dc46 <_svfiprintf_r+0x192>
 800dc64:	ab03      	add	r3, sp, #12
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	462a      	mov	r2, r5
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dca8 <_svfiprintf_r+0x1f4>)
 800dc6e:	a904      	add	r1, sp, #16
 800dc70:	f3af 8000 	nop.w
 800dc74:	1c42      	adds	r2, r0, #1
 800dc76:	4606      	mov	r6, r0
 800dc78:	d1d6      	bne.n	800dc28 <_svfiprintf_r+0x174>
 800dc7a:	89ab      	ldrh	r3, [r5, #12]
 800dc7c:	065b      	lsls	r3, r3, #25
 800dc7e:	f53f af2d 	bmi.w	800dadc <_svfiprintf_r+0x28>
 800dc82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc84:	e72c      	b.n	800dae0 <_svfiprintf_r+0x2c>
 800dc86:	ab03      	add	r3, sp, #12
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	462a      	mov	r2, r5
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	4b06      	ldr	r3, [pc, #24]	@ (800dca8 <_svfiprintf_r+0x1f4>)
 800dc90:	a904      	add	r1, sp, #16
 800dc92:	f000 f87d 	bl	800dd90 <_printf_i>
 800dc96:	e7ed      	b.n	800dc74 <_svfiprintf_r+0x1c0>
 800dc98:	0800e95b 	.word	0x0800e95b
 800dc9c:	0800e961 	.word	0x0800e961
 800dca0:	0800e965 	.word	0x0800e965
 800dca4:	00000000 	.word	0x00000000
 800dca8:	0800d9fd 	.word	0x0800d9fd

0800dcac <_printf_common>:
 800dcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb0:	4616      	mov	r6, r2
 800dcb2:	4698      	mov	r8, r3
 800dcb4:	688a      	ldr	r2, [r1, #8]
 800dcb6:	690b      	ldr	r3, [r1, #16]
 800dcb8:	4607      	mov	r7, r0
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	bfb8      	it	lt
 800dcbe:	4613      	movlt	r3, r2
 800dcc0:	6033      	str	r3, [r6, #0]
 800dcc2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dccc:	b10a      	cbz	r2, 800dcd2 <_printf_common+0x26>
 800dcce:	3301      	adds	r3, #1
 800dcd0:	6033      	str	r3, [r6, #0]
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	0699      	lsls	r1, r3, #26
 800dcd6:	bf42      	ittt	mi
 800dcd8:	6833      	ldrmi	r3, [r6, #0]
 800dcda:	3302      	addmi	r3, #2
 800dcdc:	6033      	strmi	r3, [r6, #0]
 800dcde:	6825      	ldr	r5, [r4, #0]
 800dce0:	f015 0506 	ands.w	r5, r5, #6
 800dce4:	d106      	bne.n	800dcf4 <_printf_common+0x48>
 800dce6:	f104 0a19 	add.w	sl, r4, #25
 800dcea:	68e3      	ldr	r3, [r4, #12]
 800dcec:	6832      	ldr	r2, [r6, #0]
 800dcee:	1a9b      	subs	r3, r3, r2
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	dc2b      	bgt.n	800dd4c <_printf_common+0xa0>
 800dcf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dcf8:	6822      	ldr	r2, [r4, #0]
 800dcfa:	3b00      	subs	r3, #0
 800dcfc:	bf18      	it	ne
 800dcfe:	2301      	movne	r3, #1
 800dd00:	0692      	lsls	r2, r2, #26
 800dd02:	d430      	bmi.n	800dd66 <_printf_common+0xba>
 800dd04:	4641      	mov	r1, r8
 800dd06:	4638      	mov	r0, r7
 800dd08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd0c:	47c8      	blx	r9
 800dd0e:	3001      	adds	r0, #1
 800dd10:	d023      	beq.n	800dd5a <_printf_common+0xae>
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	6922      	ldr	r2, [r4, #16]
 800dd16:	f003 0306 	and.w	r3, r3, #6
 800dd1a:	2b04      	cmp	r3, #4
 800dd1c:	bf14      	ite	ne
 800dd1e:	2500      	movne	r5, #0
 800dd20:	6833      	ldreq	r3, [r6, #0]
 800dd22:	f04f 0600 	mov.w	r6, #0
 800dd26:	bf08      	it	eq
 800dd28:	68e5      	ldreq	r5, [r4, #12]
 800dd2a:	f104 041a 	add.w	r4, r4, #26
 800dd2e:	bf08      	it	eq
 800dd30:	1aed      	subeq	r5, r5, r3
 800dd32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dd36:	bf08      	it	eq
 800dd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bfc4      	itt	gt
 800dd40:	1a9b      	subgt	r3, r3, r2
 800dd42:	18ed      	addgt	r5, r5, r3
 800dd44:	42b5      	cmp	r5, r6
 800dd46:	d11a      	bne.n	800dd7e <_printf_common+0xd2>
 800dd48:	2000      	movs	r0, #0
 800dd4a:	e008      	b.n	800dd5e <_printf_common+0xb2>
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	4652      	mov	r2, sl
 800dd50:	4641      	mov	r1, r8
 800dd52:	4638      	mov	r0, r7
 800dd54:	47c8      	blx	r9
 800dd56:	3001      	adds	r0, #1
 800dd58:	d103      	bne.n	800dd62 <_printf_common+0xb6>
 800dd5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd62:	3501      	adds	r5, #1
 800dd64:	e7c1      	b.n	800dcea <_printf_common+0x3e>
 800dd66:	2030      	movs	r0, #48	@ 0x30
 800dd68:	18e1      	adds	r1, r4, r3
 800dd6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd6e:	1c5a      	adds	r2, r3, #1
 800dd70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd74:	4422      	add	r2, r4
 800dd76:	3302      	adds	r3, #2
 800dd78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd7c:	e7c2      	b.n	800dd04 <_printf_common+0x58>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4622      	mov	r2, r4
 800dd82:	4641      	mov	r1, r8
 800dd84:	4638      	mov	r0, r7
 800dd86:	47c8      	blx	r9
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d0e6      	beq.n	800dd5a <_printf_common+0xae>
 800dd8c:	3601      	adds	r6, #1
 800dd8e:	e7d9      	b.n	800dd44 <_printf_common+0x98>

0800dd90 <_printf_i>:
 800dd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd94:	7e0f      	ldrb	r7, [r1, #24]
 800dd96:	4691      	mov	r9, r2
 800dd98:	2f78      	cmp	r7, #120	@ 0x78
 800dd9a:	4680      	mov	r8, r0
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	469a      	mov	sl, r3
 800dda0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dda2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dda6:	d807      	bhi.n	800ddb8 <_printf_i+0x28>
 800dda8:	2f62      	cmp	r7, #98	@ 0x62
 800ddaa:	d80a      	bhi.n	800ddc2 <_printf_i+0x32>
 800ddac:	2f00      	cmp	r7, #0
 800ddae:	f000 80d3 	beq.w	800df58 <_printf_i+0x1c8>
 800ddb2:	2f58      	cmp	r7, #88	@ 0x58
 800ddb4:	f000 80ba 	beq.w	800df2c <_printf_i+0x19c>
 800ddb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ddbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ddc0:	e03a      	b.n	800de38 <_printf_i+0xa8>
 800ddc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ddc6:	2b15      	cmp	r3, #21
 800ddc8:	d8f6      	bhi.n	800ddb8 <_printf_i+0x28>
 800ddca:	a101      	add	r1, pc, #4	@ (adr r1, 800ddd0 <_printf_i+0x40>)
 800ddcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddd0:	0800de29 	.word	0x0800de29
 800ddd4:	0800de3d 	.word	0x0800de3d
 800ddd8:	0800ddb9 	.word	0x0800ddb9
 800dddc:	0800ddb9 	.word	0x0800ddb9
 800dde0:	0800ddb9 	.word	0x0800ddb9
 800dde4:	0800ddb9 	.word	0x0800ddb9
 800dde8:	0800de3d 	.word	0x0800de3d
 800ddec:	0800ddb9 	.word	0x0800ddb9
 800ddf0:	0800ddb9 	.word	0x0800ddb9
 800ddf4:	0800ddb9 	.word	0x0800ddb9
 800ddf8:	0800ddb9 	.word	0x0800ddb9
 800ddfc:	0800df3f 	.word	0x0800df3f
 800de00:	0800de67 	.word	0x0800de67
 800de04:	0800def9 	.word	0x0800def9
 800de08:	0800ddb9 	.word	0x0800ddb9
 800de0c:	0800ddb9 	.word	0x0800ddb9
 800de10:	0800df61 	.word	0x0800df61
 800de14:	0800ddb9 	.word	0x0800ddb9
 800de18:	0800de67 	.word	0x0800de67
 800de1c:	0800ddb9 	.word	0x0800ddb9
 800de20:	0800ddb9 	.word	0x0800ddb9
 800de24:	0800df01 	.word	0x0800df01
 800de28:	6833      	ldr	r3, [r6, #0]
 800de2a:	1d1a      	adds	r2, r3, #4
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	6032      	str	r2, [r6, #0]
 800de30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de38:	2301      	movs	r3, #1
 800de3a:	e09e      	b.n	800df7a <_printf_i+0x1ea>
 800de3c:	6833      	ldr	r3, [r6, #0]
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	1d19      	adds	r1, r3, #4
 800de42:	6031      	str	r1, [r6, #0]
 800de44:	0606      	lsls	r6, r0, #24
 800de46:	d501      	bpl.n	800de4c <_printf_i+0xbc>
 800de48:	681d      	ldr	r5, [r3, #0]
 800de4a:	e003      	b.n	800de54 <_printf_i+0xc4>
 800de4c:	0645      	lsls	r5, r0, #25
 800de4e:	d5fb      	bpl.n	800de48 <_printf_i+0xb8>
 800de50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de54:	2d00      	cmp	r5, #0
 800de56:	da03      	bge.n	800de60 <_printf_i+0xd0>
 800de58:	232d      	movs	r3, #45	@ 0x2d
 800de5a:	426d      	negs	r5, r5
 800de5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de60:	230a      	movs	r3, #10
 800de62:	4859      	ldr	r0, [pc, #356]	@ (800dfc8 <_printf_i+0x238>)
 800de64:	e011      	b.n	800de8a <_printf_i+0xfa>
 800de66:	6821      	ldr	r1, [r4, #0]
 800de68:	6833      	ldr	r3, [r6, #0]
 800de6a:	0608      	lsls	r0, r1, #24
 800de6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800de70:	d402      	bmi.n	800de78 <_printf_i+0xe8>
 800de72:	0649      	lsls	r1, r1, #25
 800de74:	bf48      	it	mi
 800de76:	b2ad      	uxthmi	r5, r5
 800de78:	2f6f      	cmp	r7, #111	@ 0x6f
 800de7a:	6033      	str	r3, [r6, #0]
 800de7c:	bf14      	ite	ne
 800de7e:	230a      	movne	r3, #10
 800de80:	2308      	moveq	r3, #8
 800de82:	4851      	ldr	r0, [pc, #324]	@ (800dfc8 <_printf_i+0x238>)
 800de84:	2100      	movs	r1, #0
 800de86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de8a:	6866      	ldr	r6, [r4, #4]
 800de8c:	2e00      	cmp	r6, #0
 800de8e:	bfa8      	it	ge
 800de90:	6821      	ldrge	r1, [r4, #0]
 800de92:	60a6      	str	r6, [r4, #8]
 800de94:	bfa4      	itt	ge
 800de96:	f021 0104 	bicge.w	r1, r1, #4
 800de9a:	6021      	strge	r1, [r4, #0]
 800de9c:	b90d      	cbnz	r5, 800dea2 <_printf_i+0x112>
 800de9e:	2e00      	cmp	r6, #0
 800dea0:	d04b      	beq.n	800df3a <_printf_i+0x1aa>
 800dea2:	4616      	mov	r6, r2
 800dea4:	fbb5 f1f3 	udiv	r1, r5, r3
 800dea8:	fb03 5711 	mls	r7, r3, r1, r5
 800deac:	5dc7      	ldrb	r7, [r0, r7]
 800deae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800deb2:	462f      	mov	r7, r5
 800deb4:	42bb      	cmp	r3, r7
 800deb6:	460d      	mov	r5, r1
 800deb8:	d9f4      	bls.n	800dea4 <_printf_i+0x114>
 800deba:	2b08      	cmp	r3, #8
 800debc:	d10b      	bne.n	800ded6 <_printf_i+0x146>
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	07df      	lsls	r7, r3, #31
 800dec2:	d508      	bpl.n	800ded6 <_printf_i+0x146>
 800dec4:	6923      	ldr	r3, [r4, #16]
 800dec6:	6861      	ldr	r1, [r4, #4]
 800dec8:	4299      	cmp	r1, r3
 800deca:	bfde      	ittt	le
 800decc:	2330      	movle	r3, #48	@ 0x30
 800dece:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ded2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ded6:	1b92      	subs	r2, r2, r6
 800ded8:	6122      	str	r2, [r4, #16]
 800deda:	464b      	mov	r3, r9
 800dedc:	4621      	mov	r1, r4
 800dede:	4640      	mov	r0, r8
 800dee0:	f8cd a000 	str.w	sl, [sp]
 800dee4:	aa03      	add	r2, sp, #12
 800dee6:	f7ff fee1 	bl	800dcac <_printf_common>
 800deea:	3001      	adds	r0, #1
 800deec:	d14a      	bne.n	800df84 <_printf_i+0x1f4>
 800deee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800def2:	b004      	add	sp, #16
 800def4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	f043 0320 	orr.w	r3, r3, #32
 800defe:	6023      	str	r3, [r4, #0]
 800df00:	2778      	movs	r7, #120	@ 0x78
 800df02:	4832      	ldr	r0, [pc, #200]	@ (800dfcc <_printf_i+0x23c>)
 800df04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	6831      	ldr	r1, [r6, #0]
 800df0c:	061f      	lsls	r7, r3, #24
 800df0e:	f851 5b04 	ldr.w	r5, [r1], #4
 800df12:	d402      	bmi.n	800df1a <_printf_i+0x18a>
 800df14:	065f      	lsls	r7, r3, #25
 800df16:	bf48      	it	mi
 800df18:	b2ad      	uxthmi	r5, r5
 800df1a:	6031      	str	r1, [r6, #0]
 800df1c:	07d9      	lsls	r1, r3, #31
 800df1e:	bf44      	itt	mi
 800df20:	f043 0320 	orrmi.w	r3, r3, #32
 800df24:	6023      	strmi	r3, [r4, #0]
 800df26:	b11d      	cbz	r5, 800df30 <_printf_i+0x1a0>
 800df28:	2310      	movs	r3, #16
 800df2a:	e7ab      	b.n	800de84 <_printf_i+0xf4>
 800df2c:	4826      	ldr	r0, [pc, #152]	@ (800dfc8 <_printf_i+0x238>)
 800df2e:	e7e9      	b.n	800df04 <_printf_i+0x174>
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	f023 0320 	bic.w	r3, r3, #32
 800df36:	6023      	str	r3, [r4, #0]
 800df38:	e7f6      	b.n	800df28 <_printf_i+0x198>
 800df3a:	4616      	mov	r6, r2
 800df3c:	e7bd      	b.n	800deba <_printf_i+0x12a>
 800df3e:	6833      	ldr	r3, [r6, #0]
 800df40:	6825      	ldr	r5, [r4, #0]
 800df42:	1d18      	adds	r0, r3, #4
 800df44:	6961      	ldr	r1, [r4, #20]
 800df46:	6030      	str	r0, [r6, #0]
 800df48:	062e      	lsls	r6, r5, #24
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	d501      	bpl.n	800df52 <_printf_i+0x1c2>
 800df4e:	6019      	str	r1, [r3, #0]
 800df50:	e002      	b.n	800df58 <_printf_i+0x1c8>
 800df52:	0668      	lsls	r0, r5, #25
 800df54:	d5fb      	bpl.n	800df4e <_printf_i+0x1be>
 800df56:	8019      	strh	r1, [r3, #0]
 800df58:	2300      	movs	r3, #0
 800df5a:	4616      	mov	r6, r2
 800df5c:	6123      	str	r3, [r4, #16]
 800df5e:	e7bc      	b.n	800deda <_printf_i+0x14a>
 800df60:	6833      	ldr	r3, [r6, #0]
 800df62:	2100      	movs	r1, #0
 800df64:	1d1a      	adds	r2, r3, #4
 800df66:	6032      	str	r2, [r6, #0]
 800df68:	681e      	ldr	r6, [r3, #0]
 800df6a:	6862      	ldr	r2, [r4, #4]
 800df6c:	4630      	mov	r0, r6
 800df6e:	f000 f877 	bl	800e060 <memchr>
 800df72:	b108      	cbz	r0, 800df78 <_printf_i+0x1e8>
 800df74:	1b80      	subs	r0, r0, r6
 800df76:	6060      	str	r0, [r4, #4]
 800df78:	6863      	ldr	r3, [r4, #4]
 800df7a:	6123      	str	r3, [r4, #16]
 800df7c:	2300      	movs	r3, #0
 800df7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df82:	e7aa      	b.n	800deda <_printf_i+0x14a>
 800df84:	4632      	mov	r2, r6
 800df86:	4649      	mov	r1, r9
 800df88:	4640      	mov	r0, r8
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	47d0      	blx	sl
 800df8e:	3001      	adds	r0, #1
 800df90:	d0ad      	beq.n	800deee <_printf_i+0x15e>
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	079b      	lsls	r3, r3, #30
 800df96:	d413      	bmi.n	800dfc0 <_printf_i+0x230>
 800df98:	68e0      	ldr	r0, [r4, #12]
 800df9a:	9b03      	ldr	r3, [sp, #12]
 800df9c:	4298      	cmp	r0, r3
 800df9e:	bfb8      	it	lt
 800dfa0:	4618      	movlt	r0, r3
 800dfa2:	e7a6      	b.n	800def2 <_printf_i+0x162>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	4632      	mov	r2, r6
 800dfa8:	4649      	mov	r1, r9
 800dfaa:	4640      	mov	r0, r8
 800dfac:	47d0      	blx	sl
 800dfae:	3001      	adds	r0, #1
 800dfb0:	d09d      	beq.n	800deee <_printf_i+0x15e>
 800dfb2:	3501      	adds	r5, #1
 800dfb4:	68e3      	ldr	r3, [r4, #12]
 800dfb6:	9903      	ldr	r1, [sp, #12]
 800dfb8:	1a5b      	subs	r3, r3, r1
 800dfba:	42ab      	cmp	r3, r5
 800dfbc:	dcf2      	bgt.n	800dfa4 <_printf_i+0x214>
 800dfbe:	e7eb      	b.n	800df98 <_printf_i+0x208>
 800dfc0:	2500      	movs	r5, #0
 800dfc2:	f104 0619 	add.w	r6, r4, #25
 800dfc6:	e7f5      	b.n	800dfb4 <_printf_i+0x224>
 800dfc8:	0800e96c 	.word	0x0800e96c
 800dfcc:	0800e97d 	.word	0x0800e97d

0800dfd0 <_realloc_r>:
 800dfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4615      	mov	r5, r2
 800dfd8:	460c      	mov	r4, r1
 800dfda:	b921      	cbnz	r1, 800dfe6 <_realloc_r+0x16>
 800dfdc:	4611      	mov	r1, r2
 800dfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe2:	f7ff bb45 	b.w	800d670 <_malloc_r>
 800dfe6:	b92a      	cbnz	r2, 800dff4 <_realloc_r+0x24>
 800dfe8:	f7ff fcc0 	bl	800d96c <_free_r>
 800dfec:	2400      	movs	r4, #0
 800dfee:	4620      	mov	r0, r4
 800dff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dff4:	f000 f850 	bl	800e098 <_malloc_usable_size_r>
 800dff8:	4285      	cmp	r5, r0
 800dffa:	4606      	mov	r6, r0
 800dffc:	d802      	bhi.n	800e004 <_realloc_r+0x34>
 800dffe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e002:	d8f4      	bhi.n	800dfee <_realloc_r+0x1e>
 800e004:	4629      	mov	r1, r5
 800e006:	4640      	mov	r0, r8
 800e008:	f7ff fb32 	bl	800d670 <_malloc_r>
 800e00c:	4607      	mov	r7, r0
 800e00e:	2800      	cmp	r0, #0
 800e010:	d0ec      	beq.n	800dfec <_realloc_r+0x1c>
 800e012:	42b5      	cmp	r5, r6
 800e014:	462a      	mov	r2, r5
 800e016:	4621      	mov	r1, r4
 800e018:	bf28      	it	cs
 800e01a:	4632      	movcs	r2, r6
 800e01c:	f000 f82e 	bl	800e07c <memcpy>
 800e020:	4621      	mov	r1, r4
 800e022:	4640      	mov	r0, r8
 800e024:	f7ff fca2 	bl	800d96c <_free_r>
 800e028:	463c      	mov	r4, r7
 800e02a:	e7e0      	b.n	800dfee <_realloc_r+0x1e>

0800e02c <memmove>:
 800e02c:	4288      	cmp	r0, r1
 800e02e:	b510      	push	{r4, lr}
 800e030:	eb01 0402 	add.w	r4, r1, r2
 800e034:	d902      	bls.n	800e03c <memmove+0x10>
 800e036:	4284      	cmp	r4, r0
 800e038:	4623      	mov	r3, r4
 800e03a:	d807      	bhi.n	800e04c <memmove+0x20>
 800e03c:	1e43      	subs	r3, r0, #1
 800e03e:	42a1      	cmp	r1, r4
 800e040:	d008      	beq.n	800e054 <memmove+0x28>
 800e042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e04a:	e7f8      	b.n	800e03e <memmove+0x12>
 800e04c:	4601      	mov	r1, r0
 800e04e:	4402      	add	r2, r0
 800e050:	428a      	cmp	r2, r1
 800e052:	d100      	bne.n	800e056 <memmove+0x2a>
 800e054:	bd10      	pop	{r4, pc}
 800e056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e05e:	e7f7      	b.n	800e050 <memmove+0x24>

0800e060 <memchr>:
 800e060:	4603      	mov	r3, r0
 800e062:	b510      	push	{r4, lr}
 800e064:	b2c9      	uxtb	r1, r1
 800e066:	4402      	add	r2, r0
 800e068:	4293      	cmp	r3, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	d101      	bne.n	800e072 <memchr+0x12>
 800e06e:	2000      	movs	r0, #0
 800e070:	e003      	b.n	800e07a <memchr+0x1a>
 800e072:	7804      	ldrb	r4, [r0, #0]
 800e074:	3301      	adds	r3, #1
 800e076:	428c      	cmp	r4, r1
 800e078:	d1f6      	bne.n	800e068 <memchr+0x8>
 800e07a:	bd10      	pop	{r4, pc}

0800e07c <memcpy>:
 800e07c:	440a      	add	r2, r1
 800e07e:	4291      	cmp	r1, r2
 800e080:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e084:	d100      	bne.n	800e088 <memcpy+0xc>
 800e086:	4770      	bx	lr
 800e088:	b510      	push	{r4, lr}
 800e08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e08e:	4291      	cmp	r1, r2
 800e090:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e094:	d1f9      	bne.n	800e08a <memcpy+0xe>
 800e096:	bd10      	pop	{r4, pc}

0800e098 <_malloc_usable_size_r>:
 800e098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e09c:	1f18      	subs	r0, r3, #4
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bfbc      	itt	lt
 800e0a2:	580b      	ldrlt	r3, [r1, r0]
 800e0a4:	18c0      	addlt	r0, r0, r3
 800e0a6:	4770      	bx	lr

0800e0a8 <_init>:
 800e0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0aa:	bf00      	nop
 800e0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ae:	bc08      	pop	{r3}
 800e0b0:	469e      	mov	lr, r3
 800e0b2:	4770      	bx	lr

0800e0b4 <_fini>:
 800e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b6:	bf00      	nop
 800e0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ba:	bc08      	pop	{r3}
 800e0bc:	469e      	mov	lr, r3
 800e0be:	4770      	bx	lr
