
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df68  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800e14c  0800e14c  0000f14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e330  0800e330  00010f80  2**0
                  CONTENTS
  4 .ARM          00000008  0800e330  0800e330  0000f330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e338  0800e338  00010f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e338  0800e338  0000f338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e33c  0800e33c  0000f33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f80  20000000  0800e340  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000f80  0800f2c0  00010f80  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  0800f2c0  000118d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018560  00000000  00000000  00010fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003438  00000000  00000000  00029509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0002c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e77  00000000  00000000  0002dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c232  00000000  00000000  0002ea77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d45e  00000000  00000000  0004aca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ffa2  00000000  00000000  00068107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001080a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d0c  00000000  00000000  001080ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000f80 	.word	0x20000f80
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e134 	.word	0x0800e134

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000f84 	.word	0x20000f84
 8000220:	0800e134 	.word	0x0800e134

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9b      	ldr	r3, [pc, #620]	@ (80004b4 <eepromKontrol+0x280>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489a      	ldr	r0, [pc, #616]	@ (80004b8 <eepromKontrol+0x284>)
 8000250:	f00b fabe 	bl	800b7d0 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f00a f936 	bl	800a4c8 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	firstSetup();
 800025c:	f000 fa34 	bl	80006c8 <firstSetup>

	setupCompleted = eepromData[0];
 8000260:	4b94      	ldr	r3, [pc, #592]	@ (80004b4 <eepromKontrol+0x280>)
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	4b95      	ldr	r3, [pc, #596]	@ (80004bc <eepromKontrol+0x288>)
 8000266:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000268:	4b92      	ldr	r3, [pc, #584]	@ (80004b4 <eepromKontrol+0x280>)
 800026a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800026e:	4b94      	ldr	r3, [pc, #592]	@ (80004c0 <eepromKontrol+0x28c>)
 8000270:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000272:	4b90      	ldr	r3, [pc, #576]	@ (80004b4 <eepromKontrol+0x280>)
 8000274:	78da      	ldrb	r2, [r3, #3]
 8000276:	4b93      	ldr	r3, [pc, #588]	@ (80004c4 <eepromKontrol+0x290>)
 8000278:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800027a:	4b8e      	ldr	r3, [pc, #568]	@ (80004b4 <eepromKontrol+0x280>)
 800027c:	785a      	ldrb	r2, [r3, #1]
 800027e:	4b92      	ldr	r3, [pc, #584]	@ (80004c8 <eepromKontrol+0x294>)
 8000280:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000282:	4b8c      	ldr	r3, [pc, #560]	@ (80004b4 <eepromKontrol+0x280>)
 8000284:	789a      	ldrb	r2, [r3, #2]
 8000286:	4b91      	ldr	r3, [pc, #580]	@ (80004cc <eepromKontrol+0x298>)
 8000288:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800028a:	4b8a      	ldr	r3, [pc, #552]	@ (80004b4 <eepromKontrol+0x280>)
 800028c:	791a      	ldrb	r2, [r3, #4]
 800028e:	4b90      	ldr	r3, [pc, #576]	@ (80004d0 <eepromKontrol+0x29c>)
 8000290:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000292:	4b88      	ldr	r3, [pc, #544]	@ (80004b4 <eepromKontrol+0x280>)
 8000294:	795a      	ldrb	r2, [r3, #5]
 8000296:	4b8f      	ldr	r3, [pc, #572]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000298:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800029a:	4b86      	ldr	r3, [pc, #536]	@ (80004b4 <eepromKontrol+0x280>)
 800029c:	799a      	ldrb	r2, [r3, #6]
 800029e:	4b8e      	ldr	r3, [pc, #568]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a0:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80002a2:	4b84      	ldr	r3, [pc, #528]	@ (80004b4 <eepromKontrol+0x280>)
 80002a4:	79da      	ldrb	r2, [r3, #7]
 80002a6:	4b8d      	ldr	r3, [pc, #564]	@ (80004dc <eepromKontrol+0x2a8>)
 80002a8:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80002aa:	4b82      	ldr	r3, [pc, #520]	@ (80004b4 <eepromKontrol+0x280>)
 80002ac:	7a1a      	ldrb	r2, [r3, #8]
 80002ae:	4b8c      	ldr	r3, [pc, #560]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b0:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002b2:	4b80      	ldr	r3, [pc, #512]	@ (80004b4 <eepromKontrol+0x280>)
 80002b4:	7a5a      	ldrb	r2, [r3, #9]
 80002b6:	4b8b      	ldr	r3, [pc, #556]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002b8:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002ba:	4b7e      	ldr	r3, [pc, #504]	@ (80004b4 <eepromKontrol+0x280>)
 80002bc:	7a9a      	ldrb	r2, [r3, #10]
 80002be:	4b8a      	ldr	r3, [pc, #552]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002c2:	4b7c      	ldr	r3, [pc, #496]	@ (80004b4 <eepromKontrol+0x280>)
 80002c4:	7ada      	ldrb	r2, [r3, #11]
 80002c6:	4b89      	ldr	r3, [pc, #548]	@ (80004ec <eepromKontrol+0x2b8>)
 80002c8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ca:	4b7a      	ldr	r3, [pc, #488]	@ (80004b4 <eepromKontrol+0x280>)
 80002cc:	7b1a      	ldrb	r2, [r3, #12]
 80002ce:	4b88      	ldr	r3, [pc, #544]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002d2:	4b78      	ldr	r3, [pc, #480]	@ (80004b4 <eepromKontrol+0x280>)
 80002d4:	7b5a      	ldrb	r2, [r3, #13]
 80002d6:	4b87      	ldr	r3, [pc, #540]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002d8:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002da:	4b76      	ldr	r3, [pc, #472]	@ (80004b4 <eepromKontrol+0x280>)
 80002dc:	7b9a      	ldrb	r2, [r3, #14]
 80002de:	4b86      	ldr	r3, [pc, #536]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e0:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002e2:	4b74      	ldr	r3, [pc, #464]	@ (80004b4 <eepromKontrol+0x280>)
 80002e4:	7bda      	ldrb	r2, [r3, #15]
 80002e6:	4b85      	ldr	r3, [pc, #532]	@ (80004fc <eepromKontrol+0x2c8>)
 80002e8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ea:	4b72      	ldr	r3, [pc, #456]	@ (80004b4 <eepromKontrol+0x280>)
 80002ec:	7c1a      	ldrb	r2, [r3, #16]
 80002ee:	4b84      	ldr	r3, [pc, #528]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002f2:	4b70      	ldr	r3, [pc, #448]	@ (80004b4 <eepromKontrol+0x280>)
 80002f4:	7c5a      	ldrb	r2, [r3, #17]
 80002f6:	4b83      	ldr	r3, [pc, #524]	@ (8000504 <eepromKontrol+0x2d0>)
 80002f8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002fa:	4b6e      	ldr	r3, [pc, #440]	@ (80004b4 <eepromKontrol+0x280>)
 80002fc:	7c9a      	ldrb	r2, [r3, #18]
 80002fe:	4b82      	ldr	r3, [pc, #520]	@ (8000508 <eepromKontrol+0x2d4>)
 8000300:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8000302:	4b6c      	ldr	r3, [pc, #432]	@ (80004b4 <eepromKontrol+0x280>)
 8000304:	7cda      	ldrb	r2, [r3, #19]
 8000306:	4b81      	ldr	r3, [pc, #516]	@ (800050c <eepromKontrol+0x2d8>)
 8000308:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 800030a:	4b6a      	ldr	r3, [pc, #424]	@ (80004b4 <eepromKontrol+0x280>)
 800030c:	7d1a      	ldrb	r2, [r3, #20]
 800030e:	4b80      	ldr	r3, [pc, #512]	@ (8000510 <eepromKontrol+0x2dc>)
 8000310:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000312:	4b68      	ldr	r3, [pc, #416]	@ (80004b4 <eepromKontrol+0x280>)
 8000314:	7d5a      	ldrb	r2, [r3, #21]
 8000316:	4b7f      	ldr	r3, [pc, #508]	@ (8000514 <eepromKontrol+0x2e0>)
 8000318:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 800031a:	4b66      	ldr	r3, [pc, #408]	@ (80004b4 <eepromKontrol+0x280>)
 800031c:	7d9a      	ldrb	r2, [r3, #22]
 800031e:	4b7e      	ldr	r3, [pc, #504]	@ (8000518 <eepromKontrol+0x2e4>)
 8000320:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000322:	4b64      	ldr	r3, [pc, #400]	@ (80004b4 <eepromKontrol+0x280>)
 8000324:	7dda      	ldrb	r2, [r3, #23]
 8000326:	4b7d      	ldr	r3, [pc, #500]	@ (800051c <eepromKontrol+0x2e8>)
 8000328:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800032a:	4b62      	ldr	r3, [pc, #392]	@ (80004b4 <eepromKontrol+0x280>)
 800032c:	7e1a      	ldrb	r2, [r3, #24]
 800032e:	4b7c      	ldr	r3, [pc, #496]	@ (8000520 <eepromKontrol+0x2ec>)
 8000330:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000332:	4b60      	ldr	r3, [pc, #384]	@ (80004b4 <eepromKontrol+0x280>)
 8000334:	7e5a      	ldrb	r2, [r3, #25]
 8000336:	4b7b      	ldr	r3, [pc, #492]	@ (8000524 <eepromKontrol+0x2f0>)
 8000338:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800033a:	4b5e      	ldr	r3, [pc, #376]	@ (80004b4 <eepromKontrol+0x280>)
 800033c:	7e9a      	ldrb	r2, [r3, #26]
 800033e:	4b7a      	ldr	r3, [pc, #488]	@ (8000528 <eepromKontrol+0x2f4>)
 8000340:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000342:	4b5c      	ldr	r3, [pc, #368]	@ (80004b4 <eepromKontrol+0x280>)
 8000344:	7eda      	ldrb	r2, [r3, #27]
 8000346:	4b79      	ldr	r3, [pc, #484]	@ (800052c <eepromKontrol+0x2f8>)
 8000348:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800034a:	4b5a      	ldr	r3, [pc, #360]	@ (80004b4 <eepromKontrol+0x280>)
 800034c:	7f1a      	ldrb	r2, [r3, #28]
 800034e:	4b78      	ldr	r3, [pc, #480]	@ (8000530 <eepromKontrol+0x2fc>)
 8000350:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000352:	4b58      	ldr	r3, [pc, #352]	@ (80004b4 <eepromKontrol+0x280>)
 8000354:	7f5a      	ldrb	r2, [r3, #29]
 8000356:	4b77      	ldr	r3, [pc, #476]	@ (8000534 <eepromKontrol+0x300>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800035a:	4b56      	ldr	r3, [pc, #344]	@ (80004b4 <eepromKontrol+0x280>)
 800035c:	7f9a      	ldrb	r2, [r3, #30]
 800035e:	4b76      	ldr	r3, [pc, #472]	@ (8000538 <eepromKontrol+0x304>)
 8000360:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000362:	4b54      	ldr	r3, [pc, #336]	@ (80004b4 <eepromKontrol+0x280>)
 8000364:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000368:	4b74      	ldr	r3, [pc, #464]	@ (800053c <eepromKontrol+0x308>)
 800036a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800036c:	4b51      	ldr	r3, [pc, #324]	@ (80004b4 <eepromKontrol+0x280>)
 800036e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000372:	4b73      	ldr	r3, [pc, #460]	@ (8000540 <eepromKontrol+0x30c>)
 8000374:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000376:	4b4f      	ldr	r3, [pc, #316]	@ (80004b4 <eepromKontrol+0x280>)
 8000378:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800037c:	4b71      	ldr	r3, [pc, #452]	@ (8000544 <eepromKontrol+0x310>)
 800037e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000380:	4b4c      	ldr	r3, [pc, #304]	@ (80004b4 <eepromKontrol+0x280>)
 8000382:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000386:	4b70      	ldr	r3, [pc, #448]	@ (8000548 <eepromKontrol+0x314>)
 8000388:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800038a:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <eepromKontrol+0x280>)
 800038c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000390:	4b6e      	ldr	r3, [pc, #440]	@ (800054c <eepromKontrol+0x318>)
 8000392:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000394:	4b47      	ldr	r3, [pc, #284]	@ (80004b4 <eepromKontrol+0x280>)
 8000396:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800039a:	4b6d      	ldr	r3, [pc, #436]	@ (8000550 <eepromKontrol+0x31c>)
 800039c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800039e:	4b45      	ldr	r3, [pc, #276]	@ (80004b4 <eepromKontrol+0x280>)
 80003a0:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000554 <eepromKontrol+0x320>)
 80003a6:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <eepromKontrol+0x280>)
 80003aa:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000558 <eepromKontrol+0x324>)
 80003b0:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b2:	4b40      	ldr	r3, [pc, #256]	@ (80004b4 <eepromKontrol+0x280>)
 80003b4:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003b8:	4b68      	ldr	r3, [pc, #416]	@ (800055c <eepromKontrol+0x328>)
 80003ba:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <eepromKontrol+0x280>)
 80003be:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c2:	4b67      	ldr	r3, [pc, #412]	@ (8000560 <eepromKontrol+0x32c>)
 80003c4:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003c6:	4b3b      	ldr	r3, [pc, #236]	@ (80004b4 <eepromKontrol+0x280>)
 80003c8:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003cc:	4b65      	ldr	r3, [pc, #404]	@ (8000564 <eepromKontrol+0x330>)
 80003ce:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d0:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <eepromKontrol+0x280>)
 80003d2:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003d6:	4b64      	ldr	r3, [pc, #400]	@ (8000568 <eepromKontrol+0x334>)
 80003d8:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003da:	4b36      	ldr	r3, [pc, #216]	@ (80004b4 <eepromKontrol+0x280>)
 80003dc:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e0:	4b62      	ldr	r3, [pc, #392]	@ (800056c <eepromKontrol+0x338>)
 80003e2:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003e4:	4b33      	ldr	r3, [pc, #204]	@ (80004b4 <eepromKontrol+0x280>)
 80003e6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ea:	4b61      	ldr	r3, [pc, #388]	@ (8000570 <eepromKontrol+0x33c>)
 80003ec:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003ee:	4b36      	ldr	r3, [pc, #216]	@ (80004c8 <eepromKontrol+0x294>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    calismaSekli=0;
 80003f6:	4b34      	ldr	r3, [pc, #208]	@ (80004c8 <eepromKontrol+0x294>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003fc:	4b33      	ldr	r3, [pc, #204]	@ (80004cc <eepromKontrol+0x298>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    emniyetCercevesi=1;
 8000404:	4b31      	ldr	r3, [pc, #196]	@ (80004cc <eepromKontrol+0x298>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 800040a:	4b31      	ldr	r3, [pc, #196]	@ (80004d0 <eepromKontrol+0x29c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    yavaslamaLimit=0;
 8000412:	4b2f      	ldr	r3, [pc, #188]	@ (80004d0 <eepromKontrol+0x29c>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000418:	4b2e      	ldr	r3, [pc, #184]	@ (80004d4 <eepromKontrol+0x2a0>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    altLimit=1;
 8000420:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000426:	4b2c      	ldr	r3, [pc, #176]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    basincSalteri=1;
 800042e:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000434:	4b29      	ldr	r3, [pc, #164]	@ (80004dc <eepromKontrol+0x2a8>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapiSecimleri=3;
 800043c:	4b27      	ldr	r3, [pc, #156]	@ (80004dc <eepromKontrol+0x2a8>)
 800043e:	2203      	movs	r2, #3
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000442:	4b41      	ldr	r3, [pc, #260]	@ (8000548 <eepromKontrol+0x314>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapiAcTipi=0;
 800044a:	4b3f      	ldr	r3, [pc, #252]	@ (8000548 <eepromKontrol+0x314>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000450:	4b23      	ldr	r3, [pc, #140]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi1Tip=1;
 8000458:	4b21      	ldr	r3, [pc, #132]	@ (80004e0 <eepromKontrol+0x2ac>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800045e:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi1AcSure=5;
 8000466:	4b1f      	ldr	r3, [pc, #124]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800046c:	4b1e      	ldr	r3, [pc, #120]	@ (80004e8 <eepromKontrol+0x2b4>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapi2Tip=1;
 8000474:	4b1c      	ldr	r3, [pc, #112]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <eepromKontrol+0x2b8>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b05      	cmp	r3, #5
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapi2AcSure=5;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <eepromKontrol+0x2b8>)
 8000484:	2205      	movs	r2, #5
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000488:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <eepromKontrol+0x2bc>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapitablaTip=1;
 8000490:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <eepromKontrol+0x2bc>)
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000496:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <eepromKontrol+0x30c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d902      	bls.n	80004a4 <eepromKontrol+0x270>
	    kapiTablaAcKonum=2;
 800049e:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <eepromKontrol+0x30c>)
 80004a0:	2202      	movs	r2, #2
 80004a2:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <eepromKontrol+0x2c0>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	d963      	bls.n	8000574 <eepromKontrol+0x340>
	    kapiTablaAcSure=5;
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <eepromKontrol+0x2c0>)
 80004ae:	2205      	movs	r2, #5
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e05f      	b.n	8000574 <eepromKontrol+0x340>
 80004b4:	20000f9c 	.word	0x20000f9c
 80004b8:	200017f0 	.word	0x200017f0
 80004bc:	20001040 	.word	0x20001040
 80004c0:	2000108b 	.word	0x2000108b
 80004c4:	20001041 	.word	0x20001041
 80004c8:	2000106d 	.word	0x2000106d
 80004cc:	20001070 	.word	0x20001070
 80004d0:	20001071 	.word	0x20001071
 80004d4:	20001072 	.word	0x20001072
 80004d8:	20001073 	.word	0x20001073
 80004dc:	20001074 	.word	0x20001074
 80004e0:	20001075 	.word	0x20001075
 80004e4:	20001085 	.word	0x20001085
 80004e8:	20001076 	.word	0x20001076
 80004ec:	20001086 	.word	0x20001086
 80004f0:	20001077 	.word	0x20001077
 80004f4:	20001087 	.word	0x20001087
 80004f8:	2000107a 	.word	0x2000107a
 80004fc:	2000107b 	.word	0x2000107b
 8000500:	2000107c 	.word	0x2000107c
 8000504:	2000107d 	.word	0x2000107d
 8000508:	2000107e 	.word	0x2000107e
 800050c:	2000107f 	.word	0x2000107f
 8000510:	20001080 	.word	0x20001080
 8000514:	20001081 	.word	0x20001081
 8000518:	20001082 	.word	0x20001082
 800051c:	20001083 	.word	0x20001083
 8000520:	20001084 	.word	0x20001084
 8000524:	20001088 	.word	0x20001088
 8000528:	2000108a 	.word	0x2000108a
 800052c:	20001064 	.word	0x20001064
 8000530:	20001065 	.word	0x20001065
 8000534:	20001066 	.word	0x20001066
 8000538:	20001067 	.word	0x20001067
 800053c:	2000108d 	.word	0x2000108d
 8000540:	20001079 	.word	0x20001079
 8000544:	2000108c 	.word	0x2000108c
 8000548:	20001078 	.word	0x20001078
 800054c:	2000108e 	.word	0x2000108e
 8000550:	2000108f 	.word	0x2000108f
 8000554:	20001090 	.word	0x20001090
 8000558:	20001091 	.word	0x20001091
 800055c:	20001092 	.word	0x20001092
 8000560:	20001093 	.word	0x20001093
 8000564:	20001094 	.word	0x20001094
 8000568:	20001095 	.word	0x20001095
 800056c:	20001096 	.word	0x20001096
 8000570:	20001097 	.word	0x20001097
	}

	if(yukariYavasLimit>1) {
 8000574:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <eepromKontrol+0x454>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d902      	bls.n	8000582 <eepromKontrol+0x34e>
	    yukariYavasLimit=0;
 800057c:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <eepromKontrol+0x454>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000582:	4b42      	ldr	r3, [pc, #264]	@ (800068c <eepromKontrol+0x458>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d902      	bls.n	8000590 <eepromKontrol+0x35c>
	    devirmeYuruyusSecim=0;
 800058a:	4b40      	ldr	r3, [pc, #256]	@ (800068c <eepromKontrol+0x458>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000590:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <eepromKontrol+0x45c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d902      	bls.n	800059e <eepromKontrol+0x36a>
	    devirmeYukariIleriLimit=1;
 8000598:	4b3d      	ldr	r3, [pc, #244]	@ (8000690 <eepromKontrol+0x45c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800059e:	4b3d      	ldr	r3, [pc, #244]	@ (8000694 <eepromKontrol+0x460>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d902      	bls.n	80005ac <eepromKontrol+0x378>
	    devirmeAsagiGeriLimit=1;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000694 <eepromKontrol+0x460>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80005ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000698 <eepromKontrol+0x464>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d902      	bls.n	80005ba <eepromKontrol+0x386>
	    devirmeSilindirTipi=0;
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <eepromKontrol+0x464>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005ba:	4b38      	ldr	r3, [pc, #224]	@ (800069c <eepromKontrol+0x468>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d902      	bls.n	80005c8 <eepromKontrol+0x394>
	    platformSilindirTipi=0;
 80005c2:	4b36      	ldr	r3, [pc, #216]	@ (800069c <eepromKontrol+0x468>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <eepromKontrol+0x46c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d902      	bls.n	80005d6 <eepromKontrol+0x3a2>
	    yukariValfTmr=0;
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <eepromKontrol+0x46c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <eepromKontrol+0x470>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d902      	bls.n	80005e4 <eepromKontrol+0x3b0>
	    asagiValfTmr=0;
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <eepromKontrol+0x470>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <eepromKontrol+0x474>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	d902      	bls.n	80005f2 <eepromKontrol+0x3be>
	    devirmeYukariIleriTmr=0;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <eepromKontrol+0x474>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <eepromKontrol+0x478>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d902      	bls.n	8000600 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriTmr=0;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <eepromKontrol+0x478>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <eepromKontrol+0x47c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2bb4      	cmp	r3, #180	@ 0xb4
 8000606:	d902      	bls.n	800060e <eepromKontrol+0x3da>
	    makineCalismaTmr=60;
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <eepromKontrol+0x47c>)
 800060a:	223c      	movs	r2, #60	@ 0x3c
 800060c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <eepromKontrol+0x480>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d902      	bls.n	800061c <eepromKontrol+0x3e8>
	    buzzer=0;
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <eepromKontrol+0x480>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <eepromKontrol+0x484>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d902      	bls.n	800062a <eepromKontrol+0x3f6>
	    demoMode=0;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <eepromKontrol+0x484>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <eepromKontrol+0x488>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d902      	bls.n	8000638 <eepromKontrol+0x404>
	    calismaSayModu=0;
 8000632:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <eepromKontrol+0x488>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <eepromKontrol+0x48c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d902      	bls.n	8000646 <eepromKontrol+0x412>
	    dilSecim=0;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <eepromKontrol+0x48c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000646:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <eepromKontrol+0x490>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d902      	bls.n	8000654 <eepromKontrol+0x420>
		iotMode=0;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <eepromKontrol+0x490>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f87b 	bl	8000750 <convertArrays>
	HAL_Delay(250);
 800065a:	20fa      	movs	r0, #250	@ 0xfa
 800065c:	f009 ff34 	bl	800a4c8 <HAL_Delay>

	convertArrays(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 f875 	bl	8000750 <convertArrays>
	HAL_Delay(250);
 8000666:	20fa      	movs	r0, #250	@ 0xfa
 8000668:	f009 ff2e 	bl	800a4c8 <HAL_Delay>

	convertArrays(3);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f86f 	bl	8000750 <convertArrays>
	HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	@ 0xfa
 8000674:	f009 ff28 	bl	800a4c8 <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <eepromKontrol+0x48c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f006 fe89 	bl	8007394 <loadMenuTexts>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000107a 	.word	0x2000107a
 800068c:	2000107b 	.word	0x2000107b
 8000690:	2000107c 	.word	0x2000107c
 8000694:	2000107d 	.word	0x2000107d
 8000698:	2000107e 	.word	0x2000107e
 800069c:	2000107f 	.word	0x2000107f
 80006a0:	20001080 	.word	0x20001080
 80006a4:	20001081 	.word	0x20001081
 80006a8:	20001082 	.word	0x20001082
 80006ac:	20001083 	.word	0x20001083
 80006b0:	20001084 	.word	0x20001084
 80006b4:	20001088 	.word	0x20001088
 80006b8:	2000108a 	.word	0x2000108a
 80006bc:	2000108c 	.word	0x2000108c
 80006c0:	2000108d 	.word	0x2000108d
 80006c4:	2000108b 	.word	0x2000108b

080006c8 <firstSetup>:

void firstSetup() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af04      	add	r7, sp, #16
    if (eepromData[0] == 0xFF) {
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <firstSetup+0x7c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2bff      	cmp	r3, #255	@ 0xff
 80006d4:	d132      	bne.n	800073c <firstSetup+0x74>
        memset(eepromData, 0, 48);
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <firstSetup+0x7c>)
 80006dc:	f00d fcfe 	bl	800e0dc <memset>

        memset(&eepromData[38], 0, 10);
 80006e0:	220a      	movs	r2, #10
 80006e2:	2100      	movs	r1, #0
 80006e4:	4818      	ldr	r0, [pc, #96]	@ (8000748 <firstSetup+0x80>)
 80006e6:	f00d fcf9 	bl	800e0dc <memset>

        eepromData[9] = 4;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <firstSetup+0x7c>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	725a      	strb	r2, [r3, #9]
        eepromData[11] = 4;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <firstSetup+0x7c>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	72da      	strb	r2, [r3, #11]
        eepromData[13] = 4;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <firstSetup+0x7c>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	735a      	strb	r2, [r3, #13]

        eepromData[20] = 60;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <firstSetup+0x7c>)
 80006fe:	223c      	movs	r2, #60	@ 0x3c
 8000700:	751a      	strb	r2, [r3, #20]
        eepromData[21] = 60;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <firstSetup+0x7c>)
 8000704:	223c      	movs	r2, #60	@ 0x3c
 8000706:	755a      	strb	r2, [r3, #21]
        eepromData[22] = 60;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <firstSetup+0x7c>)
 800070a:	223c      	movs	r2, #60	@ 0x3c
 800070c:	759a      	strb	r2, [r3, #22]
        eepromData[23] = 60;
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <firstSetup+0x7c>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	75da      	strb	r2, [r3, #23]
        eepromData[24] = 60;
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <firstSetup+0x7c>)
 8000716:	223c      	movs	r2, #60	@ 0x3c
 8000718:	761a      	strb	r2, [r3, #24]

        HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800071a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	236e      	movs	r3, #110	@ 0x6e
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <firstSetup+0x7c>)
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	236e      	movs	r3, #110	@ 0x6e
 800072a:	2200      	movs	r2, #0
 800072c:	21a0      	movs	r1, #160	@ 0xa0
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <firstSetup+0x84>)
 8000730:	f00a ff54 	bl	800b5dc <HAL_I2C_Mem_Write>
        HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f009 fec6 	bl	800a4c8 <HAL_Delay>
    }
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000f9c 	.word	0x20000f9c
 8000748:	20000fc2 	.word	0x20000fc2
 800074c:	200017f0 	.word	0x200017f0

08000750 <convertArrays>:
void saveEEPROM() {
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
	HAL_Delay(1500);
}

void convertArrays(int state) {
 8000750:	b480      	push	{r7}
 8000752:	b08b      	sub	sp, #44	@ 0x2c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d11d      	bne.n	800079a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800075e:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <convertArrays+0xe0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	e013      	b.n	8000792 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800076a:	4a32      	ldr	r2, [pc, #200]	@ (8000834 <convertArrays+0xe4>)
 800076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000774:	4a30      	ldr	r2, [pc, #192]	@ (8000838 <convertArrays+0xe8>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	7819      	ldrb	r1, [r3, #0]
 800077c:	4a2f      	ldr	r2, [pc, #188]	@ (800083c <convertArrays+0xec>)
 800077e:	6a3b      	ldr	r3, [r7, #32]
 8000780:	4413      	add	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	3301      	adds	r3, #1
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	3301      	adds	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	2b0b      	cmp	r3, #11
 8000796:	dde8      	ble.n	800076a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000798:	e045      	b.n	8000826 <convertArrays+0xd6>
	} else if(state == 2) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d121      	bne.n	80007e4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <convertArrays+0xf0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	e017      	b.n	80007dc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <convertArrays+0xe4>)
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00e      	beq.n	80007d6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <convertArrays+0xe4>)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <convertArrays+0xf4>)
 80007c4:	5c99      	ldrb	r1, [r3, r2]
 80007c6:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <convertArrays+0xf8>)
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3301      	adds	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	3301      	adds	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	dde4      	ble.n	80007ac <convertArrays+0x5c>
}
 80007e2:	e020      	b.n	8000826 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <convertArrays+0xfc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	e017      	b.n	8000820 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007f0:	4a10      	ldr	r2, [pc, #64]	@ (8000834 <convertArrays+0xe4>)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00e      	beq.n	800081a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <convertArrays+0xe4>)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <convertArrays+0xf4>)
 8000808:	5c99      	ldrb	r1, [r3, r2]
 800080a:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <convertArrays+0x100>)
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	4413      	add	r3, r2
 8000810:	460a      	mov	r2, r1
 8000812:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	3301      	adds	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	dde4      	ble.n	80007f0 <convertArrays+0xa0>
}
 8000826:	bf00      	nop
 8000828:	372c      	adds	r7, #44	@ 0x2c
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000000 	.word	0x20000000
 8000834:	20000f9c 	.word	0x20000f9c
 8000838:	2000000c 	.word	0x2000000c
 800083c:	20001014 	.word	0x20001014
 8000840:	20000004 	.word	0x20000004
 8000844:	20000018 	.word	0x20000018
 8000848:	20001020 	.word	0x20001020
 800084c:	20000008 	.word	0x20000008
 8000850:	20001030 	.word	0x20001030

08000854 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af04      	add	r7, sp, #16
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800085e:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <hata2EEPROM+0xa0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <hata2EEPROM+0xa4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a24      	ldr	r2, [pc, #144]	@ (80008fc <hata2EEPROM+0xa8>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000872:	f000 f8d1 	bl	8000a18 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000876:	e000      	b.n	800087a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000878:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e012      	b.n	80008a6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <hata2EEPROM+0xa4>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <hata2EEPROM+0xa8>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d107      	bne.n	80008a0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <hata2EEPROM+0xa4>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	4918      	ldr	r1, [pc, #96]	@ (80008fc <hata2EEPROM+0xa8>)
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	54ca      	strb	r2, [r1, r3]
					break;
 800089e:	e007      	b.n	80008b0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <hata2EEPROM+0xa0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbe7      	blt.n	8000880 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <hata2EEPROM+0xa4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b299      	uxth	r1, r3
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <hata2EEPROM+0xa0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	b298      	uxth	r0, r3
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <hata2EEPROM+0xa4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <hata2EEPROM+0xa8>)
 80008c2:	4413      	add	r3, r2
 80008c4:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <hata2EEPROM+0xa0>)
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	b292      	uxth	r2, r2
 80008ca:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80008ce:	9402      	str	r4, [sp, #8]
 80008d0:	9201      	str	r2, [sp, #4]
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4603      	mov	r3, r0
 80008d6:	460a      	mov	r2, r1
 80008d8:	21a0      	movs	r1, #160	@ 0xa0
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <hata2EEPROM+0xac>)
 80008dc:	f00a fe7e 	bl	800b5dc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80008e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e4:	f009 fdf0 	bl	800a4c8 <HAL_Delay>
	eepromKontrol();
 80008e8:	f7ff fca4 	bl	8000234 <eepromKontrol>
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000094 	.word	0x20000094
 80008f8:	20000098 	.word	0x20000098
 80008fc:	20000f9c 	.word	0x20000f9c
 8000900:	200017f0 	.word	0x200017f0

08000904 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d10f      	bne.n	8000934 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000914:	4a38      	ldr	r2, [pc, #224]	@ (80009f8 <hataKoduLcdGoster+0xf4>)
 8000916:	2101      	movs	r1, #1
 8000918:	2001      	movs	r0, #1
 800091a:	f009 f8b3 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, "1");
 800091e:	4a37      	ldr	r2, [pc, #220]	@ (80009fc <hataKoduLcdGoster+0xf8>)
 8000920:	2101      	movs	r1, #1
 8000922:	2002      	movs	r0, #2
 8000924:	f009 f8ae 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "          ");
 8000928:	4a35      	ldr	r2, [pc, #212]	@ (8000a00 <hataKoduLcdGoster+0xfc>)
 800092a:	2107      	movs	r1, #7
 800092c:	2002      	movs	r0, #2
 800092e:	f009 f8a9 	bl	8009a84 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000932:	e05d      	b.n	80009f0 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d10f      	bne.n	800095a <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 800093a:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <hataKoduLcdGoster+0xf4>)
 800093c:	2101      	movs	r1, #1
 800093e:	2001      	movs	r0, #1
 8000940:	f009 f8a0 	bl	8009a84 <lcd_print>
		lcd_print(2, 2, "2");
 8000944:	4a2f      	ldr	r2, [pc, #188]	@ (8000a04 <hataKoduLcdGoster+0x100>)
 8000946:	2102      	movs	r1, #2
 8000948:	2002      	movs	r0, #2
 800094a:	f009 f89b 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "          ");
 800094e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a00 <hataKoduLcdGoster+0xfc>)
 8000950:	2107      	movs	r1, #7
 8000952:	2002      	movs	r0, #2
 8000954:	f009 f896 	bl	8009a84 <lcd_print>
}
 8000958:	e04a      	b.n	80009f0 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d10f      	bne.n	8000980 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000960:	4a25      	ldr	r2, [pc, #148]	@ (80009f8 <hataKoduLcdGoster+0xf4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f009 f88d 	bl	8009a84 <lcd_print>
		lcd_print(2, 3, "3");
 800096a:	4a27      	ldr	r2, [pc, #156]	@ (8000a08 <hataKoduLcdGoster+0x104>)
 800096c:	2103      	movs	r1, #3
 800096e:	2002      	movs	r0, #2
 8000970:	f009 f888 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "          ");
 8000974:	4a22      	ldr	r2, [pc, #136]	@ (8000a00 <hataKoduLcdGoster+0xfc>)
 8000976:	2107      	movs	r1, #7
 8000978:	2002      	movs	r0, #2
 800097a:	f009 f883 	bl	8009a84 <lcd_print>
}
 800097e:	e037      	b.n	80009f0 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d10f      	bne.n	80009a6 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <hataKoduLcdGoster+0xf4>)
 8000988:	2101      	movs	r1, #1
 800098a:	2001      	movs	r0, #1
 800098c:	f009 f87a 	bl	8009a84 <lcd_print>
		lcd_print(2, 4, "4");
 8000990:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <hataKoduLcdGoster+0x108>)
 8000992:	2104      	movs	r1, #4
 8000994:	2002      	movs	r0, #2
 8000996:	f009 f875 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "          ");
 800099a:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <hataKoduLcdGoster+0xfc>)
 800099c:	2107      	movs	r1, #7
 800099e:	2002      	movs	r0, #2
 80009a0:	f009 f870 	bl	8009a84 <lcd_print>
}
 80009a4:	e024      	b.n	80009f0 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b05      	cmp	r3, #5
 80009aa:	d10f      	bne.n	80009cc <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <hataKoduLcdGoster+0xf4>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	2001      	movs	r0, #1
 80009b2:	f009 f867 	bl	8009a84 <lcd_print>
		lcd_print(2, 5, "5");
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <hataKoduLcdGoster+0x10c>)
 80009b8:	2105      	movs	r1, #5
 80009ba:	2002      	movs	r0, #2
 80009bc:	f009 f862 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "          ");
 80009c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a00 <hataKoduLcdGoster+0xfc>)
 80009c2:	2107      	movs	r1, #7
 80009c4:	2002      	movs	r0, #2
 80009c6:	f009 f85d 	bl	8009a84 <lcd_print>
}
 80009ca:	e011      	b.n	80009f0 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d10e      	bne.n	80009f0 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 80009d2:	4a09      	ldr	r2, [pc, #36]	@ (80009f8 <hataKoduLcdGoster+0xf4>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	2001      	movs	r0, #1
 80009d8:	f009 f854 	bl	8009a84 <lcd_print>
		lcd_print(2, 6, "6");
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <hataKoduLcdGoster+0x110>)
 80009de:	2106      	movs	r1, #6
 80009e0:	2002      	movs	r0, #2
 80009e2:	f009 f84f 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "          ");
 80009e6:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <hataKoduLcdGoster+0xfc>)
 80009e8:	2107      	movs	r1, #7
 80009ea:	2002      	movs	r0, #2
 80009ec:	f009 f84a 	bl	8009a84 <lcd_print>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20001764 	.word	0x20001764
 80009fc:	0800e14c 	.word	0x0800e14c
 8000a00:	0800e150 	.word	0x0800e150
 8000a04:	0800e15c 	.word	0x0800e15c
 8000a08:	0800e160 	.word	0x0800e160
 8000a0c:	0800e164 	.word	0x0800e164
 8000a10:	0800e168 	.word	0x0800e168
 8000a14:	0800e16c 	.word	0x0800e16c

08000a18 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	e009      	b.n	8000a38 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <eepromDataFillWithEmpty+0x38>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <eepromDataFillWithEmpty+0x3c>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <eepromDataFillWithEmpty+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dbf0      	blt.n	8000a24 <eepromDataFillWithEmpty+0xc>
	}
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000006c 	.word	0x2000006c
 8000a54:	20000f9c 	.word	0x20000f9c
 8000a58:	20000094 	.word	0x20000094

08000a5c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000a6e:	4b50      	ldr	r3, [pc, #320]	@ (8000bb0 <i2cTest+0x154>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb0 <i2cTest+0x154>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0201 	bic.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000a7e:	484c      	ldr	r0, [pc, #304]	@ (8000bb0 <i2cTest+0x154>)
 8000a80:	f00a fc7e 	bl	800b380 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a84:	23c0      	movs	r3, #192	@ 0xc0
 8000a86:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000a88:	2311      	movs	r3, #17
 8000a8a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4846      	ldr	r0, [pc, #280]	@ (8000bb4 <i2cTest+0x158>)
 8000a9a:	f00a f885 	bl	800aba8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	4844      	ldr	r0, [pc, #272]	@ (8000bb4 <i2cTest+0x158>)
 8000aa4:	f00a faf7 	bl	800b096 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	4841      	ldr	r0, [pc, #260]	@ (8000bb4 <i2cTest+0x158>)
 8000aae:	f00a faf2 	bl	800b096 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f009 fd08 	bl	800a4c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000ab8:	bf00      	nop
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	483d      	ldr	r0, [pc, #244]	@ (8000bb4 <i2cTest+0x158>)
 8000abe:	f00a fad3 	bl	800b068 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d006      	beq.n	8000ad6 <i2cTest+0x7a>
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	483a      	ldr	r0, [pc, #232]	@ (8000bb4 <i2cTest+0x158>)
 8000acc:	f00a facc 	bl	800b068 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d1f1      	bne.n	8000aba <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	4836      	ldr	r0, [pc, #216]	@ (8000bb4 <i2cTest+0x158>)
 8000adc:	f00a fadb 	bl	800b096 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f009 fcf1 	bl	800a4c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000ae6:	bf00      	nop
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	4832      	ldr	r0, [pc, #200]	@ (8000bb4 <i2cTest+0x158>)
 8000aec:	f00a fabc 	bl	800b068 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d0f8      	beq.n	8000ae8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	482e      	ldr	r0, [pc, #184]	@ (8000bb4 <i2cTest+0x158>)
 8000afc:	f00a facb 	bl	800b096 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b00:	200a      	movs	r0, #10
 8000b02:	f009 fce1 	bl	800a4c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000b06:	bf00      	nop
 8000b08:	2140      	movs	r1, #64	@ 0x40
 8000b0a:	482a      	ldr	r0, [pc, #168]	@ (8000bb4 <i2cTest+0x158>)
 8000b0c:	f00a faac 	bl	800b068 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d0f8      	beq.n	8000b08 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	4826      	ldr	r0, [pc, #152]	@ (8000bb4 <i2cTest+0x158>)
 8000b1c:	f00a fabb 	bl	800b096 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f009 fcd1 	bl	800a4c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000b26:	bf00      	nop
 8000b28:	2140      	movs	r1, #64	@ 0x40
 8000b2a:	4822      	ldr	r0, [pc, #136]	@ (8000bb4 <i2cTest+0x158>)
 8000b2c:	f00a fa9c 	bl	800b068 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d1f8      	bne.n	8000b28 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	481e      	ldr	r0, [pc, #120]	@ (8000bb4 <i2cTest+0x158>)
 8000b3c:	f00a faab 	bl	800b096 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f009 fcc1 	bl	800a4c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b46:	bf00      	nop
 8000b48:	2180      	movs	r1, #128	@ 0x80
 8000b4a:	481a      	ldr	r0, [pc, #104]	@ (8000bb4 <i2cTest+0x158>)
 8000b4c:	f00a fa8c 	bl	800b068 <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d1f8      	bne.n	8000b48 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b56:	23c0      	movs	r3, #192	@ 0xc0
 8000b58:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <i2cTest+0x158>)
 8000b6c:	f00a f81c 	bl	800aba8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <i2cTest+0x154>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <i2cTest+0x154>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b7e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <i2cTest+0x154>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <i2cTest+0x154>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b8e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <i2cTest+0x154>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <i2cTest+0x154>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <i2cTest+0x154>)
 8000ba2:	f00a faa9 	bl	800b0f8 <HAL_I2C_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200017f0 	.word	0x200017f0
 8000bb4:	40010c00 	.word	0x40010c00

08000bb8 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000bc2:	20c8      	movs	r0, #200	@ 0xc8
 8000bc4:	f009 fc80 	bl	800a4c8 <HAL_Delay>
	lcd_clear();
 8000bc8:	f008 ff88 	bl	8009adc <lcd_clear>
	if(type == 1 && page == 0) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d13e      	bne.n	8000c50 <printTemplate+0x98>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d13b      	bne.n	8000c50 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000bd8:	4a9a      	ldr	r2, [pc, #616]	@ (8000e44 <printTemplate+0x28c>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f008 ff51 	bl	8009a84 <lcd_print>
		lcd_print(2, 3, "0");
 8000be2:	4a99      	ldr	r2, [pc, #612]	@ (8000e48 <printTemplate+0x290>)
 8000be4:	2103      	movs	r1, #3
 8000be6:	2002      	movs	r0, #2
 8000be8:	f008 ff4c 	bl	8009a84 <lcd_print>
		lcd_print(2, 4, "1");
 8000bec:	4a97      	ldr	r2, [pc, #604]	@ (8000e4c <printTemplate+0x294>)
 8000bee:	2104      	movs	r1, #4
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f008 ff47 	bl	8009a84 <lcd_print>
		lcd_print(2, 5, "2");
 8000bf6:	4a96      	ldr	r2, [pc, #600]	@ (8000e50 <printTemplate+0x298>)
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f008 ff42 	bl	8009a84 <lcd_print>
		lcd_print(2, 6, "3");
 8000c00:	4a94      	ldr	r2, [pc, #592]	@ (8000e54 <printTemplate+0x29c>)
 8000c02:	2106      	movs	r1, #6
 8000c04:	2002      	movs	r0, #2
 8000c06:	f008 ff3d 	bl	8009a84 <lcd_print>
		lcd_print(2, 7, "4");
 8000c0a:	4a93      	ldr	r2, [pc, #588]	@ (8000e58 <printTemplate+0x2a0>)
 8000c0c:	2107      	movs	r1, #7
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f008 ff38 	bl	8009a84 <lcd_print>
		lcd_print(2, 10, "5");
 8000c14:	4a91      	ldr	r2, [pc, #580]	@ (8000e5c <printTemplate+0x2a4>)
 8000c16:	210a      	movs	r1, #10
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f008 ff33 	bl	8009a84 <lcd_print>
		lcd_print(2, 11, "6");
 8000c1e:	4a90      	ldr	r2, [pc, #576]	@ (8000e60 <printTemplate+0x2a8>)
 8000c20:	210b      	movs	r1, #11
 8000c22:	2002      	movs	r0, #2
 8000c24:	f008 ff2e 	bl	8009a84 <lcd_print>
		lcd_print(2, 12, "7");
 8000c28:	4a8e      	ldr	r2, [pc, #568]	@ (8000e64 <printTemplate+0x2ac>)
 8000c2a:	210c      	movs	r1, #12
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f008 ff29 	bl	8009a84 <lcd_print>
		lcd_print(2, 13, "8");
 8000c32:	4a8d      	ldr	r2, [pc, #564]	@ (8000e68 <printTemplate+0x2b0>)
 8000c34:	210d      	movs	r1, #13
 8000c36:	2002      	movs	r0, #2
 8000c38:	f008 ff24 	bl	8009a84 <lcd_print>
		lcd_print(2, 14, "9");
 8000c3c:	4a8b      	ldr	r2, [pc, #556]	@ (8000e6c <printTemplate+0x2b4>)
 8000c3e:	210e      	movs	r1, #14
 8000c40:	2002      	movs	r0, #2
 8000c42:	f008 ff1f 	bl	8009a84 <lcd_print>
		lcd_gotoxy(2, 3);
 8000c46:	2103      	movs	r1, #3
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f008 fefc 	bl	8009a46 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000c4e:	e0f5      	b.n	8000e3c <printTemplate+0x284>
	} else if(type == 2) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d178      	bne.n	8000d48 <printTemplate+0x190>
		if(page == 1) {
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d114      	bne.n	8000c86 <printTemplate+0xce>
			lcd_clear();
 8000c5c:	f008 ff3e 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000c60:	2064      	movs	r0, #100	@ 0x64
 8000c62:	f009 fc31 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000c66:	4a82      	ldr	r2, [pc, #520]	@ (8000e70 <printTemplate+0x2b8>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f008 ff0a 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000c70:	4a80      	ldr	r2, [pc, #512]	@ (8000e74 <printTemplate+0x2bc>)
 8000c72:	2107      	movs	r1, #7
 8000c74:	2001      	movs	r0, #1
 8000c76:	f008 ff05 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000c7a:	4a7f      	ldr	r2, [pc, #508]	@ (8000e78 <printTemplate+0x2c0>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f008 ff00 	bl	8009a84 <lcd_print>
}
 8000c84:	e0da      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 2) {
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d114      	bne.n	8000cb6 <printTemplate+0xfe>
			lcd_clear();
 8000c8c:	f008 ff26 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000c90:	2064      	movs	r0, #100	@ 0x64
 8000c92:	f009 fc19 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000c96:	4a79      	ldr	r2, [pc, #484]	@ (8000e7c <printTemplate+0x2c4>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f008 fef2 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ca0:	4a74      	ldr	r2, [pc, #464]	@ (8000e74 <printTemplate+0x2bc>)
 8000ca2:	2107      	movs	r1, #7
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f008 feed 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000caa:	4a75      	ldr	r2, [pc, #468]	@ (8000e80 <printTemplate+0x2c8>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f008 fee8 	bl	8009a84 <lcd_print>
}
 8000cb4:	e0c2      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 3) {
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d114      	bne.n	8000ce6 <printTemplate+0x12e>
			lcd_clear();
 8000cbc:	f008 ff0e 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f009 fc01 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000cc6:	4a6a      	ldr	r2, [pc, #424]	@ (8000e70 <printTemplate+0x2b8>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f008 feda 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000cd0:	4a68      	ldr	r2, [pc, #416]	@ (8000e74 <printTemplate+0x2bc>)
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f008 fed5 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000cda:	4a6a      	ldr	r2, [pc, #424]	@ (8000e84 <printTemplate+0x2cc>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f008 fed0 	bl	8009a84 <lcd_print>
}
 8000ce4:	e0aa      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 4) {
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d114      	bne.n	8000d16 <printTemplate+0x15e>
			lcd_clear();
 8000cec:	f008 fef6 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000cf0:	2064      	movs	r0, #100	@ 0x64
 8000cf2:	f009 fbe9 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8000e70 <printTemplate+0x2b8>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f008 fec2 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d00:	4a5c      	ldr	r2, [pc, #368]	@ (8000e74 <printTemplate+0x2bc>)
 8000d02:	2107      	movs	r1, #7
 8000d04:	2001      	movs	r0, #1
 8000d06:	f008 febd 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8000e88 <printTemplate+0x2d0>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f008 feb8 	bl	8009a84 <lcd_print>
}
 8000d14:	e092      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 5) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	f040 808f 	bne.w	8000e3c <printTemplate+0x284>
			lcd_clear();
 8000d1e:	f008 fedd 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000d22:	2064      	movs	r0, #100	@ 0x64
 8000d24:	f009 fbd0 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d28:	4a51      	ldr	r2, [pc, #324]	@ (8000e70 <printTemplate+0x2b8>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f008 fea9 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d32:	4a50      	ldr	r2, [pc, #320]	@ (8000e74 <printTemplate+0x2bc>)
 8000d34:	2107      	movs	r1, #7
 8000d36:	2001      	movs	r0, #1
 8000d38:	f008 fea4 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000d3c:	4a53      	ldr	r2, [pc, #332]	@ (8000e8c <printTemplate+0x2d4>)
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2002      	movs	r0, #2
 8000d42:	f008 fe9f 	bl	8009a84 <lcd_print>
}
 8000d46:	e079      	b.n	8000e3c <printTemplate+0x284>
	} else if(type == 3) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d176      	bne.n	8000e3c <printTemplate+0x284>
		if(page == 1) {
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d114      	bne.n	8000d7e <printTemplate+0x1c6>
			lcd_clear();
 8000d54:	f008 fec2 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f009 fbb5 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e90 <printTemplate+0x2d8>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	2001      	movs	r0, #1
 8000d64:	f008 fe8e 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000d68:	4a4a      	ldr	r2, [pc, #296]	@ (8000e94 <printTemplate+0x2dc>)
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f008 fe89 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000d72:	4a41      	ldr	r2, [pc, #260]	@ (8000e78 <printTemplate+0x2c0>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2002      	movs	r0, #2
 8000d78:	f008 fe84 	bl	8009a84 <lcd_print>
}
 8000d7c:	e05e      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 2) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d114      	bne.n	8000dae <printTemplate+0x1f6>
			lcd_clear();
 8000d84:	f008 feaa 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000d88:	2064      	movs	r0, #100	@ 0x64
 8000d8a:	f009 fb9d 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000d8e:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <printTemplate+0x2d8>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	2001      	movs	r0, #1
 8000d94:	f008 fe76 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000d98:	4a3e      	ldr	r2, [pc, #248]	@ (8000e94 <printTemplate+0x2dc>)
 8000d9a:	2107      	movs	r1, #7
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f008 fe71 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000da2:	4a37      	ldr	r2, [pc, #220]	@ (8000e80 <printTemplate+0x2c8>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	2002      	movs	r0, #2
 8000da8:	f008 fe6c 	bl	8009a84 <lcd_print>
}
 8000dac:	e046      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 3) {
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d114      	bne.n	8000dde <printTemplate+0x226>
			lcd_clear();
 8000db4:	f008 fe92 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000db8:	2064      	movs	r0, #100	@ 0x64
 8000dba:	f009 fb85 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000dbe:	4a34      	ldr	r2, [pc, #208]	@ (8000e90 <printTemplate+0x2d8>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f008 fe5e 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000dc8:	4a32      	ldr	r2, [pc, #200]	@ (8000e94 <printTemplate+0x2dc>)
 8000dca:	2107      	movs	r1, #7
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f008 fe59 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <printTemplate+0x2cc>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f008 fe54 	bl	8009a84 <lcd_print>
}
 8000ddc:	e02e      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 4) {
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d114      	bne.n	8000e0e <printTemplate+0x256>
			lcd_clear();
 8000de4:	f008 fe7a 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000de8:	2064      	movs	r0, #100	@ 0x64
 8000dea:	f009 fb6d 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000dee:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <printTemplate+0x2d8>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	2001      	movs	r0, #1
 8000df4:	f008 fe46 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000df8:	4a26      	ldr	r2, [pc, #152]	@ (8000e94 <printTemplate+0x2dc>)
 8000dfa:	2107      	movs	r1, #7
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f008 fe41 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e02:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <printTemplate+0x2d0>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	2002      	movs	r0, #2
 8000e08:	f008 fe3c 	bl	8009a84 <lcd_print>
}
 8000e0c:	e016      	b.n	8000e3c <printTemplate+0x284>
		} else if(page == 5) {
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	d113      	bne.n	8000e3c <printTemplate+0x284>
			lcd_clear();
 8000e14:	f008 fe62 	bl	8009adc <lcd_clear>
			HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	@ 0x64
 8000e1a:	f009 fb55 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <printTemplate+0x2d8>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	2001      	movs	r0, #1
 8000e24:	f008 fe2e 	bl	8009a84 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e28:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <printTemplate+0x2dc>)
 8000e2a:	2107      	movs	r1, #7
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f008 fe29 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <printTemplate+0x2d4>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	2002      	movs	r0, #2
 8000e38:	f008 fe24 	bl	8009a84 <lcd_print>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0800e170 	.word	0x0800e170
 8000e48:	0800e178 	.word	0x0800e178
 8000e4c:	0800e17c 	.word	0x0800e17c
 8000e50:	0800e180 	.word	0x0800e180
 8000e54:	0800e184 	.word	0x0800e184
 8000e58:	0800e188 	.word	0x0800e188
 8000e5c:	0800e18c 	.word	0x0800e18c
 8000e60:	0800e190 	.word	0x0800e190
 8000e64:	0800e194 	.word	0x0800e194
 8000e68:	0800e198 	.word	0x0800e198
 8000e6c:	0800e19c 	.word	0x0800e19c
 8000e70:	0800e1a0 	.word	0x0800e1a0
 8000e74:	20001020 	.word	0x20001020
 8000e78:	0800e1b4 	.word	0x0800e1b4
 8000e7c:	0800e1c8 	.word	0x0800e1c8
 8000e80:	0800e1d0 	.word	0x0800e1d0
 8000e84:	0800e1e4 	.word	0x0800e1e4
 8000e88:	0800e1f8 	.word	0x0800e1f8
 8000e8c:	0800e20c 	.word	0x0800e20c
 8000e90:	0800e220 	.word	0x0800e220
 8000e94:	20001030 	.word	0x20001030

08000e98 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10a      	bne.n	8000ebc <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8000ea6:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <printCredentials+0x70>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f008 fdea 	bl	8009a84 <lcd_print>
		lcd_print(2, 13, "    ");
 8000eb0:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <printCredentials+0x74>)
 8000eb2:	210d      	movs	r1, #13
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f008 fde5 	bl	8009a84 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8000eba:	e021      	b.n	8000f00 <printCredentials+0x68>
	} else if(type == 2) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d10f      	bne.n	8000ee2 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 8000ec2:	4a13      	ldr	r2, [pc, #76]	@ (8000f10 <printCredentials+0x78>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f008 fddc 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, "                ");
 8000ecc:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <printCredentials+0x7c>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f008 fdd7 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8000ed6:	4a10      	ldr	r2, [pc, #64]	@ (8000f18 <printCredentials+0x80>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2002      	movs	r0, #2
 8000edc:	f008 fdd2 	bl	8009a84 <lcd_print>
}
 8000ee0:	e00e      	b.n	8000f00 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f1c <printCredentials+0x84>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f008 fdcc 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, "                ");
 8000eec:	4a09      	ldr	r2, [pc, #36]	@ (8000f14 <printCredentials+0x7c>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f008 fdc7 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, wifiPass);
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <printCredentials+0x88>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	2002      	movs	r0, #2
 8000efc:	f008 fdc2 	bl	8009a84 <lcd_print>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20001014 	.word	0x20001014
 8000f0c:	0800e234 	.word	0x0800e234
 8000f10:	0800e23c 	.word	0x0800e23c
 8000f14:	0800e250 	.word	0x0800e250
 8000f18:	20001020 	.word	0x20001020
 8000f1c:	0800e264 	.word	0x0800e264
 8000f20:	20001030 	.word	0x20001030

08000f24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <__NVIC_SystemReset+0x24>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f36:	4904      	ldr	r1, [pc, #16]	@ (8000f48 <__NVIC_SystemReset+0x24>)
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_SystemReset+0x28>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3e:	f3bf 8f4f 	dsb	sy
}
 8000f42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <__NVIC_SystemReset+0x20>
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	05fa0004 	.word	0x05fa0004

08000f50 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f56:	2101      	movs	r1, #1
 8000f58:	488e      	ldr	r0, [pc, #568]	@ (8001194 <menu+0x244>)
 8000f5a:	f00a f885 	bl	800b068 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 8099 	bne.w	8001098 <menu+0x148>
 8000f66:	4b8c      	ldr	r3, [pc, #560]	@ (8001198 <menu+0x248>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 8091 	beq.w	8001098 <menu+0x148>
		menuSayac = menuSayac+1;
 8000f76:	4b89      	ldr	r3, [pc, #548]	@ (800119c <menu+0x24c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b87      	ldr	r3, [pc, #540]	@ (800119c <menu+0x24c>)
 8000f80:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000f82:	4b86      	ldr	r3, [pc, #536]	@ (800119c <menu+0x24c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b24      	cmp	r3, #36	@ 0x24
 8000f88:	d102      	bne.n	8000f90 <menu+0x40>
			menuSayac = 1;
 8000f8a:	4b84      	ldr	r3, [pc, #528]	@ (800119c <menu+0x24c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000f90:	4b82      	ldr	r3, [pc, #520]	@ (800119c <menu+0x24c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b12      	cmp	r3, #18
 8000f96:	d106      	bne.n	8000fa6 <menu+0x56>
 8000f98:	4b81      	ldr	r3, [pc, #516]	@ (80011a0 <menu+0x250>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <menu+0x56>
			menuSayac = 21;
 8000fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800119c <menu+0x24c>)
 8000fa2:	2215      	movs	r2, #21
 8000fa4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800119c <menu+0x24c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d106      	bne.n	8000fbc <menu+0x6c>
 8000fae:	4b7d      	ldr	r3, [pc, #500]	@ (80011a4 <menu+0x254>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <menu+0x6c>
			menuSayac = 16;
 8000fb6:	4b79      	ldr	r3, [pc, #484]	@ (800119c <menu+0x24c>)
 8000fb8:	2210      	movs	r2, #16
 8000fba:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000fbc:	4b77      	ldr	r3, [pc, #476]	@ (800119c <menu+0x24c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b0d      	cmp	r3, #13
 8000fc2:	d106      	bne.n	8000fd2 <menu+0x82>
 8000fc4:	4b77      	ldr	r3, [pc, #476]	@ (80011a4 <menu+0x254>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <menu+0x82>
			menuSayac = 16;
 8000fcc:	4b73      	ldr	r3, [pc, #460]	@ (800119c <menu+0x24c>)
 8000fce:	2210      	movs	r2, #16
 8000fd0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000fd2:	4b72      	ldr	r3, [pc, #456]	@ (800119c <menu+0x24c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b09      	cmp	r3, #9
 8000fd8:	d106      	bne.n	8000fe8 <menu+0x98>
 8000fda:	4b72      	ldr	r3, [pc, #456]	@ (80011a4 <menu+0x254>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d102      	bne.n	8000fe8 <menu+0x98>
			menuSayac = 13;
 8000fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800119c <menu+0x24c>)
 8000fe4:	220d      	movs	r2, #13
 8000fe6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800119c <menu+0x24c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b0a      	cmp	r3, #10
 8000fee:	d10a      	bne.n	8001006 <menu+0xb6>
 8000ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80011a8 <menu+0x258>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d003      	beq.n	8001000 <menu+0xb0>
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80011a8 <menu+0x258>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d102      	bne.n	8001006 <menu+0xb6>
			menuSayac = 11;
 8001000:	4b66      	ldr	r3, [pc, #408]	@ (800119c <menu+0x24c>)
 8001002:	220b      	movs	r2, #11
 8001004:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001006:	4b65      	ldr	r3, [pc, #404]	@ (800119c <menu+0x24c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d10e      	bne.n	800102c <menu+0xdc>
 800100e:	4b67      	ldr	r3, [pc, #412]	@ (80011ac <menu+0x25c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <menu+0xce>
 8001016:	4b65      	ldr	r3, [pc, #404]	@ (80011ac <menu+0x25c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d106      	bne.n	800102c <menu+0xdc>
 800101e:	4b61      	ldr	r3, [pc, #388]	@ (80011a4 <menu+0x254>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <menu+0xdc>
			menuSayac = 16;
 8001026:	4b5d      	ldr	r3, [pc, #372]	@ (800119c <menu+0x24c>)
 8001028:	2210      	movs	r2, #16
 800102a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800102c:	4b5b      	ldr	r3, [pc, #364]	@ (800119c <menu+0x24c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b0c      	cmp	r3, #12
 8001032:	d10e      	bne.n	8001052 <menu+0x102>
 8001034:	4b5d      	ldr	r3, [pc, #372]	@ (80011ac <menu+0x25c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d003      	beq.n	8001044 <menu+0xf4>
 800103c:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <menu+0x25c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d106      	bne.n	8001052 <menu+0x102>
 8001044:	4b57      	ldr	r3, [pc, #348]	@ (80011a4 <menu+0x254>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d102      	bne.n	8001052 <menu+0x102>
			menuSayac = 13;
 800104c:	4b53      	ldr	r3, [pc, #332]	@ (800119c <menu+0x24c>)
 800104e:	220d      	movs	r2, #13
 8001050:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001052:	4b52      	ldr	r3, [pc, #328]	@ (800119c <menu+0x24c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d106      	bne.n	8001068 <menu+0x118>
 800105a:	4b55      	ldr	r3, [pc, #340]	@ (80011b0 <menu+0x260>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <menu+0x118>
			menuSayac = 16;
 8001062:	4b4e      	ldr	r3, [pc, #312]	@ (800119c <menu+0x24c>)
 8001064:	2210      	movs	r2, #16
 8001066:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <menu+0x24c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b18      	cmp	r3, #24
 800106e:	d106      	bne.n	800107e <menu+0x12e>
 8001070:	4b4b      	ldr	r3, [pc, #300]	@ (80011a0 <menu+0x250>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <menu+0x12e>
			menuSayac = 26;
 8001078:	4b48      	ldr	r3, [pc, #288]	@ (800119c <menu+0x24c>)
 800107a:	221a      	movs	r2, #26
 800107c:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800107e:	4b47      	ldr	r3, [pc, #284]	@ (800119c <menu+0x24c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b21      	cmp	r3, #33	@ 0x21
 8001084:	d106      	bne.n	8001094 <menu+0x144>
 8001086:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <menu+0x264>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <menu+0x144>
			menuSayac = 35;
 800108e:	4b43      	ldr	r3, [pc, #268]	@ (800119c <menu+0x24c>)
 8001090:	2223      	movs	r2, #35	@ 0x23
 8001092:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001094:	f002 fca8 	bl	80039e8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001098:	2108      	movs	r1, #8
 800109a:	4847      	ldr	r0, [pc, #284]	@ (80011b8 <menu+0x268>)
 800109c:	f009 ffe4 	bl	800b068 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 8097 	bne.w	80011d6 <menu+0x286>
 80010a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <menu+0x248>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f083 0301 	eor.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 808f 	beq.w	80011d6 <menu+0x286>
		if (menuSayac <= 1) {
 80010b8:	4b38      	ldr	r3, [pc, #224]	@ (800119c <menu+0x24c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d802      	bhi.n	80010c6 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <menu+0x24c>)
 80010c2:	2224      	movs	r2, #36	@ 0x24
 80010c4:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80010c6:	4b35      	ldr	r3, [pc, #212]	@ (800119c <menu+0x24c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b33      	ldr	r3, [pc, #204]	@ (800119c <menu+0x24c>)
 80010d0:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80010d2:	4b32      	ldr	r3, [pc, #200]	@ (800119c <menu+0x24c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b14      	cmp	r3, #20
 80010d8:	d106      	bne.n	80010e8 <menu+0x198>
 80010da:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <menu+0x250>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <menu+0x198>
			menuSayac = 17;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <menu+0x24c>)
 80010e4:	2211      	movs	r2, #17
 80010e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <menu+0x24c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d106      	bne.n	80010fe <menu+0x1ae>
 80010f0:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <menu+0x254>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <menu+0x1ae>
			menuSayac = 7;
 80010f8:	4b28      	ldr	r3, [pc, #160]	@ (800119c <menu+0x24c>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80010fe:	4b27      	ldr	r3, [pc, #156]	@ (800119c <menu+0x24c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d106      	bne.n	8001114 <menu+0x1c4>
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <menu+0x254>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <menu+0x1c4>
			menuSayac = 12;
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <menu+0x24c>)
 8001110:	220c      	movs	r2, #12
 8001112:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <menu+0x24c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b0c      	cmp	r3, #12
 800111a:	d106      	bne.n	800112a <menu+0x1da>
 800111c:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <menu+0x254>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d102      	bne.n	800112a <menu+0x1da>
			menuSayac = 8;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <menu+0x24c>)
 8001126:	2208      	movs	r2, #8
 8001128:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <menu+0x24c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d10a      	bne.n	8001148 <menu+0x1f8>
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <menu+0x258>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d003      	beq.n	8001142 <menu+0x1f2>
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <menu+0x258>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d102      	bne.n	8001148 <menu+0x1f8>
			menuSayac = 9;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <menu+0x24c>)
 8001144:	2209      	movs	r2, #9
 8001146:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <menu+0x24c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d10a      	bne.n	8001166 <menu+0x216>
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <menu+0x25c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d003      	beq.n	8001160 <menu+0x210>
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <menu+0x25c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d102      	bne.n	8001166 <menu+0x216>
			menuSayac = 11;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <menu+0x24c>)
 8001162:	220b      	movs	r2, #11
 8001164:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <menu+0x24c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	d106      	bne.n	800117c <menu+0x22c>
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <menu+0x260>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <menu+0x22c>
			menuSayac = 14;
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <menu+0x24c>)
 8001178:	220e      	movs	r2, #14
 800117a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <menu+0x24c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b19      	cmp	r3, #25
 8001182:	d11b      	bne.n	80011bc <menu+0x26c>
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <menu+0x250>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d117      	bne.n	80011bc <menu+0x26c>
			menuSayac = 23;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <menu+0x24c>)
 800118e:	2217      	movs	r2, #23
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e013      	b.n	80011bc <menu+0x26c>
 8001194:	40010800 	.word	0x40010800
 8001198:	2000109b 	.word	0x2000109b
 800119c:	2000106c 	.word	0x2000106c
 80011a0:	2000107b 	.word	0x2000107b
 80011a4:	20001074 	.word	0x20001074
 80011a8:	20001075 	.word	0x20001075
 80011ac:	20001076 	.word	0x20001076
 80011b0:	20001077 	.word	0x20001077
 80011b4:	2000108b 	.word	0x2000108b
 80011b8:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80011bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001480 <menu+0x530>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b22      	cmp	r3, #34	@ 0x22
 80011c2:	d106      	bne.n	80011d2 <menu+0x282>
 80011c4:	4baf      	ldr	r3, [pc, #700]	@ (8001484 <menu+0x534>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <menu+0x282>
			menuSayac = 32;
 80011cc:	4bac      	ldr	r3, [pc, #688]	@ (8001480 <menu+0x530>)
 80011ce:	2220      	movs	r2, #32
 80011d0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80011d2:	f002 fc09 	bl	80039e8 <bekle>
	}

	if (menuSayac == 0) {
 80011d6:	4baa      	ldr	r3, [pc, #680]	@ (8001480 <menu+0x530>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80011de:	4aaa      	ldr	r2, [pc, #680]	@ (8001488 <menu+0x538>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	2001      	movs	r0, #1
 80011e4:	f008 fc4e 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80011e8:	4aa8      	ldr	r2, [pc, #672]	@ (800148c <menu+0x53c>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	2002      	movs	r0, #2
 80011ee:	f008 fc49 	bl	8009a84 <lcd_print>
	}

	if (menuSayac == 1) {
 80011f2:	4ba3      	ldr	r3, [pc, #652]	@ (8001480 <menu+0x530>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	f040 81f4 	bne.w	80015e4 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 80011fc:	4aa4      	ldr	r2, [pc, #656]	@ (8001490 <menu+0x540>)
 80011fe:	2101      	movs	r1, #1
 8001200:	2001      	movs	r0, #1
 8001202:	f008 fc3f 	bl	8009a84 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001206:	4ba3      	ldr	r3, [pc, #652]	@ (8001494 <menu+0x544>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d115      	bne.n	800123a <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800120e:	4aa2      	ldr	r2, [pc, #648]	@ (8001498 <menu+0x548>)
 8001210:	2101      	movs	r1, #1
 8001212:	2002      	movs	r0, #2
 8001214:	f008 fc36 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "   ");
 8001218:	4aa0      	ldr	r2, [pc, #640]	@ (800149c <menu+0x54c>)
 800121a:	210f      	movs	r1, #15
 800121c:	2002      	movs	r0, #2
 800121e:	f008 fc31 	bl	8009a84 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001222:	4b9f      	ldr	r3, [pc, #636]	@ (80014a0 <menu+0x550>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	220a      	movs	r2, #10
 8001228:	499e      	ldr	r1, [pc, #632]	@ (80014a4 <menu+0x554>)
 800122a:	4618      	mov	r0, r3
 800122c:	f00c ff12 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 8001230:	4a9c      	ldr	r2, [pc, #624]	@ (80014a4 <menu+0x554>)
 8001232:	210e      	movs	r1, #14
 8001234:	2002      	movs	r0, #2
 8001236:	f008 fc25 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800123a:	4b96      	ldr	r3, [pc, #600]	@ (8001494 <menu+0x544>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d115      	bne.n	800126e <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001242:	4a99      	ldr	r2, [pc, #612]	@ (80014a8 <menu+0x558>)
 8001244:	2101      	movs	r1, #1
 8001246:	2002      	movs	r0, #2
 8001248:	f008 fc1c 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 800124c:	4a97      	ldr	r2, [pc, #604]	@ (80014ac <menu+0x55c>)
 800124e:	210f      	movs	r1, #15
 8001250:	2002      	movs	r0, #2
 8001252:	f008 fc17 	bl	8009a84 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001256:	4b96      	ldr	r3, [pc, #600]	@ (80014b0 <menu+0x560>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	220a      	movs	r2, #10
 800125c:	4991      	ldr	r1, [pc, #580]	@ (80014a4 <menu+0x554>)
 800125e:	4618      	mov	r0, r3
 8001260:	f00c fef8 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 8001264:	4a8f      	ldr	r2, [pc, #572]	@ (80014a4 <menu+0x554>)
 8001266:	210e      	movs	r1, #14
 8001268:	2002      	movs	r0, #2
 800126a:	f008 fc0b 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800126e:	4b89      	ldr	r3, [pc, #548]	@ (8001494 <menu+0x544>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d115      	bne.n	80012a2 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001276:	4a8f      	ldr	r2, [pc, #572]	@ (80014b4 <menu+0x564>)
 8001278:	2101      	movs	r1, #1
 800127a:	2002      	movs	r0, #2
 800127c:	f008 fc02 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 8001280:	4a8a      	ldr	r2, [pc, #552]	@ (80014ac <menu+0x55c>)
 8001282:	210f      	movs	r1, #15
 8001284:	2002      	movs	r0, #2
 8001286:	f008 fbfd 	bl	8009a84 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800128a:	4b8b      	ldr	r3, [pc, #556]	@ (80014b8 <menu+0x568>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	220a      	movs	r2, #10
 8001290:	4984      	ldr	r1, [pc, #528]	@ (80014a4 <menu+0x554>)
 8001292:	4618      	mov	r0, r3
 8001294:	f00c fede 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 8001298:	4a82      	ldr	r2, [pc, #520]	@ (80014a4 <menu+0x554>)
 800129a:	210e      	movs	r1, #14
 800129c:	2002      	movs	r0, #2
 800129e:	f008 fbf1 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80012a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001494 <menu+0x544>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d115      	bne.n	80012d6 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80012aa:	4a84      	ldr	r2, [pc, #528]	@ (80014bc <menu+0x56c>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	2002      	movs	r0, #2
 80012b0:	f008 fbe8 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 80012b4:	4a7d      	ldr	r2, [pc, #500]	@ (80014ac <menu+0x55c>)
 80012b6:	210f      	movs	r1, #15
 80012b8:	2002      	movs	r0, #2
 80012ba:	f008 fbe3 	bl	8009a84 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80012be:	4b80      	ldr	r3, [pc, #512]	@ (80014c0 <menu+0x570>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	220a      	movs	r2, #10
 80012c4:	4977      	ldr	r1, [pc, #476]	@ (80014a4 <menu+0x554>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00c fec4 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 80012cc:	4a75      	ldr	r2, [pc, #468]	@ (80014a4 <menu+0x554>)
 80012ce:	210e      	movs	r1, #14
 80012d0:	2002      	movs	r0, #2
 80012d2:	f008 fbd7 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80012d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001494 <menu+0x544>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d115      	bne.n	800130a <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80012de:	4a79      	ldr	r2, [pc, #484]	@ (80014c4 <menu+0x574>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	2002      	movs	r0, #2
 80012e4:	f008 fbce 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 80012e8:	4a70      	ldr	r2, [pc, #448]	@ (80014ac <menu+0x55c>)
 80012ea:	210f      	movs	r1, #15
 80012ec:	2002      	movs	r0, #2
 80012ee:	f008 fbc9 	bl	8009a84 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80012f2:	4b75      	ldr	r3, [pc, #468]	@ (80014c8 <menu+0x578>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	220a      	movs	r2, #10
 80012f8:	496a      	ldr	r1, [pc, #424]	@ (80014a4 <menu+0x554>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00c feaa 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 8001300:	4a68      	ldr	r2, [pc, #416]	@ (80014a4 <menu+0x554>)
 8001302:	210e      	movs	r1, #14
 8001304:	2002      	movs	r0, #2
 8001306:	f008 fbbd 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800130a:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <menu+0x544>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d115      	bne.n	800133e <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001312:	4a6e      	ldr	r2, [pc, #440]	@ (80014cc <menu+0x57c>)
 8001314:	2101      	movs	r1, #1
 8001316:	2002      	movs	r0, #2
 8001318:	f008 fbb4 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 800131c:	4a63      	ldr	r2, [pc, #396]	@ (80014ac <menu+0x55c>)
 800131e:	210f      	movs	r1, #15
 8001320:	2002      	movs	r0, #2
 8001322:	f008 fbaf 	bl	8009a84 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001326:	4b6a      	ldr	r3, [pc, #424]	@ (80014d0 <menu+0x580>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	220a      	movs	r2, #10
 800132c:	495d      	ldr	r1, [pc, #372]	@ (80014a4 <menu+0x554>)
 800132e:	4618      	mov	r0, r3
 8001330:	f00c fe90 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 8001334:	4a5b      	ldr	r2, [pc, #364]	@ (80014a4 <menu+0x554>)
 8001336:	210e      	movs	r1, #14
 8001338:	2002      	movs	r0, #2
 800133a:	f008 fba3 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800133e:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <menu+0x544>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d115      	bne.n	8001372 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001346:	4a63      	ldr	r2, [pc, #396]	@ (80014d4 <menu+0x584>)
 8001348:	2101      	movs	r1, #1
 800134a:	2002      	movs	r0, #2
 800134c:	f008 fb9a 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 8001350:	4a56      	ldr	r2, [pc, #344]	@ (80014ac <menu+0x55c>)
 8001352:	210f      	movs	r1, #15
 8001354:	2002      	movs	r0, #2
 8001356:	f008 fb95 	bl	8009a84 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800135a:	4b5f      	ldr	r3, [pc, #380]	@ (80014d8 <menu+0x588>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	220a      	movs	r2, #10
 8001360:	4950      	ldr	r1, [pc, #320]	@ (80014a4 <menu+0x554>)
 8001362:	4618      	mov	r0, r3
 8001364:	f00c fe76 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 8001368:	4a4e      	ldr	r2, [pc, #312]	@ (80014a4 <menu+0x554>)
 800136a:	210e      	movs	r1, #14
 800136c:	2002      	movs	r0, #2
 800136e:	f008 fb89 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <menu+0x544>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d115      	bne.n	80013a6 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 800137a:	4a58      	ldr	r2, [pc, #352]	@ (80014dc <menu+0x58c>)
 800137c:	2101      	movs	r1, #1
 800137e:	2002      	movs	r0, #2
 8001380:	f008 fb80 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 8001384:	4a49      	ldr	r2, [pc, #292]	@ (80014ac <menu+0x55c>)
 8001386:	210f      	movs	r1, #15
 8001388:	2002      	movs	r0, #2
 800138a:	f008 fb7b 	bl	8009a84 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <menu+0x590>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	220a      	movs	r2, #10
 8001394:	4943      	ldr	r1, [pc, #268]	@ (80014a4 <menu+0x554>)
 8001396:	4618      	mov	r0, r3
 8001398:	f00c fe5c 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 800139c:	4a41      	ldr	r2, [pc, #260]	@ (80014a4 <menu+0x554>)
 800139e:	210e      	movs	r1, #14
 80013a0:	2002      	movs	r0, #2
 80013a2:	f008 fb6f 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80013a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001494 <menu+0x544>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d115      	bne.n	80013da <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80013ae:	4a4d      	ldr	r2, [pc, #308]	@ (80014e4 <menu+0x594>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	2002      	movs	r0, #2
 80013b4:	f008 fb66 	bl	8009a84 <lcd_print>
			lcd_print(2, 15, "  ");
 80013b8:	4a3c      	ldr	r2, [pc, #240]	@ (80014ac <menu+0x55c>)
 80013ba:	210f      	movs	r1, #15
 80013bc:	2002      	movs	r0, #2
 80013be:	f008 fb61 	bl	8009a84 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80013c2:	4b49      	ldr	r3, [pc, #292]	@ (80014e8 <menu+0x598>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	220a      	movs	r2, #10
 80013c8:	4936      	ldr	r1, [pc, #216]	@ (80014a4 <menu+0x554>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00c fe42 	bl	800e054 <itoa>
			lcd_print(2, 14, snum);
 80013d0:	4a34      	ldr	r2, [pc, #208]	@ (80014a4 <menu+0x554>)
 80013d2:	210e      	movs	r1, #14
 80013d4:	2002      	movs	r0, #2
 80013d6:	f008 fb55 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80013da:	4b2e      	ldr	r3, [pc, #184]	@ (8001494 <menu+0x544>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b09      	cmp	r3, #9
 80013e0:	d115      	bne.n	800140e <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80013e2:	4a42      	ldr	r2, [pc, #264]	@ (80014ec <menu+0x59c>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	2002      	movs	r0, #2
 80013e8:	f008 fb4c 	bl	8009a84 <lcd_print>
			lcd_print(2, 16, " ");
 80013ec:	4a40      	ldr	r2, [pc, #256]	@ (80014f0 <menu+0x5a0>)
 80013ee:	2110      	movs	r1, #16
 80013f0:	2002      	movs	r0, #2
 80013f2:	f008 fb47 	bl	8009a84 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <menu+0x5a4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	220a      	movs	r2, #10
 80013fc:	4929      	ldr	r1, [pc, #164]	@ (80014a4 <menu+0x554>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f00c fe28 	bl	800e054 <itoa>
			lcd_print(2, 15, snum);
 8001404:	4a27      	ldr	r2, [pc, #156]	@ (80014a4 <menu+0x554>)
 8001406:	210f      	movs	r1, #15
 8001408:	2002      	movs	r0, #2
 800140a:	f008 fb3b 	bl	8009a84 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <menu+0x544>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d104      	bne.n	8001420 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001416:	4a38      	ldr	r2, [pc, #224]	@ (80014f8 <menu+0x5a8>)
 8001418:	2101      	movs	r1, #1
 800141a:	2002      	movs	r0, #2
 800141c:	f008 fb32 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001420:	2102      	movs	r1, #2
 8001422:	4836      	ldr	r0, [pc, #216]	@ (80014fc <menu+0x5ac>)
 8001424:	f009 fe20 	bl	800b068 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d119      	bne.n	8001462 <menu+0x512>
 800142e:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <menu+0x5b0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d012      	beq.n	8001462 <menu+0x512>
 800143c:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <menu+0x5b4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10e      	bne.n	8001462 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <menu+0x544>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <menu+0x544>)
 800144e:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001450:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <menu+0x544>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b0a      	cmp	r3, #10
 8001456:	d902      	bls.n	800145e <menu+0x50e>
				hataGostermeSirasi = 0;
 8001458:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <menu+0x544>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800145e:	f002 fac3 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001462:	2104      	movs	r1, #4
 8001464:	4825      	ldr	r0, [pc, #148]	@ (80014fc <menu+0x5ac>)
 8001466:	f009 fdff 	bl	800b068 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d15e      	bne.n	800152e <menu+0x5de>
 8001470:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <menu+0x5b0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d057      	beq.n	800152e <menu+0x5de>
 800147e:	e043      	b.n	8001508 <menu+0x5b8>
 8001480:	2000106c 	.word	0x2000106c
 8001484:	2000108b 	.word	0x2000108b
 8001488:	200010d4 	.word	0x200010d4
 800148c:	200010e8 	.word	0x200010e8
 8001490:	200010fc 	.word	0x200010fc
 8001494:	2000106e 	.word	0x2000106e
 8001498:	20001110 	.word	0x20001110
 800149c:	0800e278 	.word	0x0800e278
 80014a0:	2000108e 	.word	0x2000108e
 80014a4:	2000100c 	.word	0x2000100c
 80014a8:	20001124 	.word	0x20001124
 80014ac:	0800e27c 	.word	0x0800e27c
 80014b0:	2000108f 	.word	0x2000108f
 80014b4:	20001138 	.word	0x20001138
 80014b8:	20001090 	.word	0x20001090
 80014bc:	2000114c 	.word	0x2000114c
 80014c0:	20001091 	.word	0x20001091
 80014c4:	20001160 	.word	0x20001160
 80014c8:	20001092 	.word	0x20001092
 80014cc:	20001174 	.word	0x20001174
 80014d0:	20001093 	.word	0x20001093
 80014d4:	20001188 	.word	0x20001188
 80014d8:	20001094 	.word	0x20001094
 80014dc:	2000119c 	.word	0x2000119c
 80014e0:	20001095 	.word	0x20001095
 80014e4:	200011b0 	.word	0x200011b0
 80014e8:	20001096 	.word	0x20001096
 80014ec:	200011c4 	.word	0x200011c4
 80014f0:	0800e280 	.word	0x0800e280
 80014f4:	20001097 	.word	0x20001097
 80014f8:	200011d8 	.word	0x200011d8
 80014fc:	40010800 	.word	0x40010800
 8001500:	2000109b 	.word	0x2000109b
 8001504:	2000107b 	.word	0x2000107b
 8001508:	4b8a      	ldr	r3, [pc, #552]	@ (8001734 <menu+0x7e4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10e      	bne.n	800152e <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001510:	4b89      	ldr	r3, [pc, #548]	@ (8001738 <menu+0x7e8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b87      	ldr	r3, [pc, #540]	@ (8001738 <menu+0x7e8>)
 800151a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 800151c:	4b86      	ldr	r3, [pc, #536]	@ (8001738 <menu+0x7e8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b0b      	cmp	r3, #11
 8001522:	d902      	bls.n	800152a <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001524:	4b84      	ldr	r3, [pc, #528]	@ (8001738 <menu+0x7e8>)
 8001526:	220a      	movs	r2, #10
 8001528:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800152a:	f002 fa5d 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800152e:	2108      	movs	r1, #8
 8001530:	4882      	ldr	r0, [pc, #520]	@ (800173c <menu+0x7ec>)
 8001532:	f009 fd99 	bl	800b068 <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	d153      	bne.n	80015e4 <menu+0x694>
 800153c:	4b80      	ldr	r3, [pc, #512]	@ (8001740 <menu+0x7f0>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d04c      	beq.n	80015e4 <menu+0x694>
 800154a:	4b7b      	ldr	r3, [pc, #492]	@ (8001738 <menu+0x7e8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b0a      	cmp	r3, #10
 8001550:	d148      	bne.n	80015e4 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001552:	4b7c      	ldr	r3, [pc, #496]	@ (8001744 <menu+0x7f4>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	4b7b      	ldr	r3, [pc, #492]	@ (8001748 <menu+0x7f8>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001560:	4b7a      	ldr	r3, [pc, #488]	@ (800174c <menu+0x7fc>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	4b78      	ldr	r3, [pc, #480]	@ (8001748 <menu+0x7f8>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800156e:	4b78      	ldr	r3, [pc, #480]	@ (8001750 <menu+0x800>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	4b74      	ldr	r3, [pc, #464]	@ (8001748 <menu+0x7f8>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 800157c:	4b75      	ldr	r3, [pc, #468]	@ (8001754 <menu+0x804>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	4b71      	ldr	r3, [pc, #452]	@ (8001748 <menu+0x7f8>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800158a:	4b73      	ldr	r3, [pc, #460]	@ (8001758 <menu+0x808>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	4b6d      	ldr	r3, [pc, #436]	@ (8001748 <menu+0x7f8>)
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001598:	4b70      	ldr	r3, [pc, #448]	@ (800175c <menu+0x80c>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	4b6a      	ldr	r3, [pc, #424]	@ (8001748 <menu+0x7f8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80015a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001760 <menu+0x810>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	4b66      	ldr	r3, [pc, #408]	@ (8001748 <menu+0x7f8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80015b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001764 <menu+0x814>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <menu+0x7f8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80015c2:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <menu+0x818>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <menu+0x7f8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80015d0:	4b66      	ldr	r3, [pc, #408]	@ (800176c <menu+0x81c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001748 <menu+0x7f8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80015de:	4b64      	ldr	r3, [pc, #400]	@ (8001770 <menu+0x820>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80015e4:	4b63      	ldr	r3, [pc, #396]	@ (8001774 <menu+0x824>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	f040 808e 	bne.w	800170a <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80015ee:	4a62      	ldr	r2, [pc, #392]	@ (8001778 <menu+0x828>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	2001      	movs	r0, #1
 80015f4:	f008 fa46 	bl	8009a84 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80015f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001734 <menu+0x7e4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d003      	beq.n	8001608 <menu+0x6b8>
 8001600:	4b4c      	ldr	r3, [pc, #304]	@ (8001734 <menu+0x7e4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d104      	bne.n	8001612 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001608:	4a5c      	ldr	r2, [pc, #368]	@ (800177c <menu+0x82c>)
 800160a:	2101      	movs	r1, #1
 800160c:	2002      	movs	r0, #2
 800160e:	f008 fa39 	bl	8009a84 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001612:	4b5b      	ldr	r3, [pc, #364]	@ (8001780 <menu+0x830>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <menu+0x6dc>
 800161a:	4b46      	ldr	r3, [pc, #280]	@ (8001734 <menu+0x7e4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d104      	bne.n	800162c <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001622:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <menu+0x834>)
 8001624:	2101      	movs	r1, #1
 8001626:	2002      	movs	r0, #2
 8001628:	f008 fa2c 	bl	8009a84 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 800162c:	4b54      	ldr	r3, [pc, #336]	@ (8001780 <menu+0x830>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <menu+0x6f6>
 8001634:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <menu+0x7e4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d104      	bne.n	8001646 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 800163c:	4a52      	ldr	r2, [pc, #328]	@ (8001788 <menu+0x838>)
 800163e:	2101      	movs	r1, #1
 8001640:	2002      	movs	r0, #2
 8001642:	f008 fa1f 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001646:	2102      	movs	r1, #2
 8001648:	483c      	ldr	r0, [pc, #240]	@ (800173c <menu+0x7ec>)
 800164a:	f009 fd0d 	bl	800b068 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d119      	bne.n	8001688 <menu+0x738>
 8001654:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <menu+0x7f0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <menu+0x738>
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <menu+0x7e4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10e      	bne.n	8001688 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 800166a:	4b45      	ldr	r3, [pc, #276]	@ (8001780 <menu+0x830>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b43      	ldr	r3, [pc, #268]	@ (8001780 <menu+0x830>)
 8001674:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001676:	4b42      	ldr	r3, [pc, #264]	@ (8001780 <menu+0x830>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d902      	bls.n	8001684 <menu+0x734>
				calismaSekli = 0;
 800167e:	4b40      	ldr	r3, [pc, #256]	@ (8001780 <menu+0x830>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001684:	f002 f9b0 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001688:	2104      	movs	r1, #4
 800168a:	482c      	ldr	r0, [pc, #176]	@ (800173c <menu+0x7ec>)
 800168c:	f009 fcec 	bl	800b068 <HAL_GPIO_ReadPin>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d119      	bne.n	80016ca <menu+0x77a>
 8001696:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <menu+0x7f0>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <menu+0x77a>
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <menu+0x7e4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10e      	bne.n	80016ca <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <menu+0x830>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <menu+0x830>)
 80016b6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <menu+0x830>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <menu+0x776>
	    		calismaSekli = 1;
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <menu+0x830>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80016c6:	f002 f98f 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80016ca:	2108      	movs	r1, #8
 80016cc:	481b      	ldr	r0, [pc, #108]	@ (800173c <menu+0x7ec>)
 80016ce:	f009 fccb 	bl	800b068 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d118      	bne.n	800170a <menu+0x7ba>
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <menu+0x7f0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	f083 0301 	eor.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d011      	beq.n	800170a <menu+0x7ba>
			eepromData[1] = calismaSekli;
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <menu+0x830>)
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <menu+0x7f8>)
 80016ec:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <menu+0x830>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d106      	bne.n	8001704 <menu+0x7b4>
				altLimit = 1;
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <menu+0x83c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <menu+0x83c>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <menu+0x7f8>)
 8001702:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <menu+0x820>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <menu+0x824>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b03      	cmp	r3, #3
 8001710:	f040 809c 	bne.w	800184c <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001714:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <menu+0x840>)
 8001716:	2101      	movs	r1, #1
 8001718:	2001      	movs	r0, #1
 800171a:	f008 f9b3 	bl	8009a84 <lcd_print>

		if(emniyetCercevesi == 0) {
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <menu+0x844>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d13a      	bne.n	800179c <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001726:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <menu+0x848>)
 8001728:	2101      	movs	r1, #1
 800172a:	2002      	movs	r0, #2
 800172c:	f008 f9aa 	bl	8009a84 <lcd_print>
 8001730:	e03d      	b.n	80017ae <menu+0x85e>
 8001732:	bf00      	nop
 8001734:	2000107b 	.word	0x2000107b
 8001738:	2000106e 	.word	0x2000106e
 800173c:	40010800 	.word	0x40010800
 8001740:	2000109b 	.word	0x2000109b
 8001744:	2000108e 	.word	0x2000108e
 8001748:	20000f9c 	.word	0x20000f9c
 800174c:	2000108f 	.word	0x2000108f
 8001750:	20001090 	.word	0x20001090
 8001754:	20001091 	.word	0x20001091
 8001758:	20001092 	.word	0x20001092
 800175c:	20001093 	.word	0x20001093
 8001760:	20001094 	.word	0x20001094
 8001764:	20001095 	.word	0x20001095
 8001768:	20001096 	.word	0x20001096
 800176c:	20001097 	.word	0x20001097
 8001770:	20001098 	.word	0x20001098
 8001774:	2000106c 	.word	0x2000106c
 8001778:	200011ec 	.word	0x200011ec
 800177c:	20001200 	.word	0x20001200
 8001780:	2000106d 	.word	0x2000106d
 8001784:	20001214 	.word	0x20001214
 8001788:	20001228 	.word	0x20001228
 800178c:	20001072 	.word	0x20001072
 8001790:	2000123c 	.word	0x2000123c
 8001794:	20001070 	.word	0x20001070
 8001798:	20001250 	.word	0x20001250
		} else if(emniyetCercevesi == 1) {
 800179c:	4b6b      	ldr	r3, [pc, #428]	@ (800194c <menu+0x9fc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d104      	bne.n	80017ae <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 80017a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001950 <menu+0xa00>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	2002      	movs	r0, #2
 80017aa:	f008 f96b 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017ae:	2102      	movs	r1, #2
 80017b0:	4868      	ldr	r0, [pc, #416]	@ (8001954 <menu+0xa04>)
 80017b2:	f009 fc59 	bl	800b068 <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d115      	bne.n	80017e8 <menu+0x898>
 80017bc:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <menu+0xa08>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00e      	beq.n	80017e8 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 80017ca:	4b60      	ldr	r3, [pc, #384]	@ (800194c <menu+0x9fc>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <menu+0x9fc>)
 80017d4:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80017d6:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <menu+0x9fc>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d902      	bls.n	80017e4 <menu+0x894>
				emniyetCercevesi = 0;
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <menu+0x9fc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017e4:	f002 f900 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80017e8:	2104      	movs	r1, #4
 80017ea:	485a      	ldr	r0, [pc, #360]	@ (8001954 <menu+0xa04>)
 80017ec:	f009 fc3c 	bl	800b068 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d115      	bne.n	8001822 <menu+0x8d2>
 80017f6:	4b58      	ldr	r3, [pc, #352]	@ (8001958 <menu+0xa08>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f083 0301 	eor.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001804:	4b51      	ldr	r3, [pc, #324]	@ (800194c <menu+0x9fc>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3b01      	subs	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b4f      	ldr	r3, [pc, #316]	@ (800194c <menu+0x9fc>)
 800180e:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001810:	4b4e      	ldr	r3, [pc, #312]	@ (800194c <menu+0x9fc>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001818:	4b4c      	ldr	r3, [pc, #304]	@ (800194c <menu+0x9fc>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800181e:	f002 f8e3 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001822:	2108      	movs	r1, #8
 8001824:	484b      	ldr	r0, [pc, #300]	@ (8001954 <menu+0xa04>)
 8001826:	f009 fc1f 	bl	800b068 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	d10d      	bne.n	800184c <menu+0x8fc>
 8001830:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <menu+0xa08>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 800183e:	4b43      	ldr	r3, [pc, #268]	@ (800194c <menu+0x9fc>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b46      	ldr	r3, [pc, #280]	@ (800195c <menu+0xa0c>)
 8001844:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001846:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <menu+0xa10>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800184c:	4b45      	ldr	r3, [pc, #276]	@ (8001964 <menu+0xa14>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d166      	bne.n	8001922 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001854:	4a44      	ldr	r2, [pc, #272]	@ (8001968 <menu+0xa18>)
 8001856:	2101      	movs	r1, #1
 8001858:	2001      	movs	r0, #1
 800185a:	f008 f913 	bl	8009a84 <lcd_print>

		if(yavaslamaLimit == 0) {
 800185e:	4b43      	ldr	r3, [pc, #268]	@ (800196c <menu+0xa1c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001866:	4a42      	ldr	r2, [pc, #264]	@ (8001970 <menu+0xa20>)
 8001868:	2101      	movs	r1, #1
 800186a:	2002      	movs	r0, #2
 800186c:	f008 f90a 	bl	8009a84 <lcd_print>
 8001870:	e008      	b.n	8001884 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <menu+0xa1c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d104      	bne.n	8001884 <menu+0x934>
			lcd_print(2, 1, aktifText);
 800187a:	4a3e      	ldr	r2, [pc, #248]	@ (8001974 <menu+0xa24>)
 800187c:	2101      	movs	r1, #1
 800187e:	2002      	movs	r0, #2
 8001880:	f008 f900 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001884:	2102      	movs	r1, #2
 8001886:	4833      	ldr	r0, [pc, #204]	@ (8001954 <menu+0xa04>)
 8001888:	f009 fbee 	bl	800b068 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d115      	bne.n	80018be <menu+0x96e>
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <menu+0xa08>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00e      	beq.n	80018be <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 80018a0:	4b32      	ldr	r3, [pc, #200]	@ (800196c <menu+0xa1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b30      	ldr	r3, [pc, #192]	@ (800196c <menu+0xa1c>)
 80018aa:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80018ac:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <menu+0xa1c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d902      	bls.n	80018ba <menu+0x96a>
				yavaslamaLimit = 0;
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <menu+0xa1c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018ba:	f002 f895 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018be:	2104      	movs	r1, #4
 80018c0:	4824      	ldr	r0, [pc, #144]	@ (8001954 <menu+0xa04>)
 80018c2:	f009 fbd1 	bl	800b068 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d115      	bne.n	80018f8 <menu+0x9a8>
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <menu+0xa08>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f083 0301 	eor.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00e      	beq.n	80018f8 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <menu+0xa1c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b22      	ldr	r3, [pc, #136]	@ (800196c <menu+0xa1c>)
 80018e4:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <menu+0xa1c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <menu+0xa1c>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018f4:	f002 f878 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018f8:	2108      	movs	r1, #8
 80018fa:	4816      	ldr	r0, [pc, #88]	@ (8001954 <menu+0xa04>)
 80018fc:	f009 fbb4 	bl	800b068 <HAL_GPIO_ReadPin>
 8001900:	4603      	mov	r3, r0
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10d      	bne.n	8001922 <menu+0x9d2>
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <menu+0xa08>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <menu+0xa1c>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <menu+0xa0c>)
 800191a:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <menu+0xa10>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <menu+0xa14>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b05      	cmp	r3, #5
 8001928:	f040 80aa 	bne.w	8001a80 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 800192c:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <menu+0xa28>)
 800192e:	2101      	movs	r1, #1
 8001930:	2001      	movs	r0, #1
 8001932:	f008 f8a7 	bl	8009a84 <lcd_print>

		if(altLimit == 0) {
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <menu+0xa2c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d120      	bne.n	8001980 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 800193e:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <menu+0xa20>)
 8001940:	2101      	movs	r1, #1
 8001942:	2002      	movs	r0, #2
 8001944:	f008 f89e 	bl	8009a84 <lcd_print>
 8001948:	e023      	b.n	8001992 <menu+0xa42>
 800194a:	bf00      	nop
 800194c:	20001070 	.word	0x20001070
 8001950:	200000ec 	.word	0x200000ec
 8001954:	40010800 	.word	0x40010800
 8001958:	2000109b 	.word	0x2000109b
 800195c:	20000f9c 	.word	0x20000f9c
 8001960:	20001098 	.word	0x20001098
 8001964:	2000106c 	.word	0x2000106c
 8001968:	20001278 	.word	0x20001278
 800196c:	20001071 	.word	0x20001071
 8001970:	20001250 	.word	0x20001250
 8001974:	20001264 	.word	0x20001264
 8001978:	2000128c 	.word	0x2000128c
 800197c:	20001072 	.word	0x20001072
		} else if(altLimit == 1) {
 8001980:	4b89      	ldr	r3, [pc, #548]	@ (8001ba8 <menu+0xc58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d104      	bne.n	8001992 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001988:	4a88      	ldr	r2, [pc, #544]	@ (8001bac <menu+0xc5c>)
 800198a:	2101      	movs	r1, #1
 800198c:	2002      	movs	r0, #2
 800198e:	f008 f879 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001992:	2102      	movs	r1, #2
 8001994:	4886      	ldr	r0, [pc, #536]	@ (8001bb0 <menu+0xc60>)
 8001996:	f009 fb67 	bl	800b068 <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	2b01      	cmp	r3, #1
 800199e:	d119      	bne.n	80019d4 <menu+0xa84>
 80019a0:	4b84      	ldr	r3, [pc, #528]	@ (8001bb4 <menu+0xc64>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d012      	beq.n	80019d4 <menu+0xa84>
 80019ae:	4b82      	ldr	r3, [pc, #520]	@ (8001bb8 <menu+0xc68>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10e      	bne.n	80019d4 <menu+0xa84>
			altLimit = altLimit + 1;
 80019b6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba8 <menu+0xc58>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b7a      	ldr	r3, [pc, #488]	@ (8001ba8 <menu+0xc58>)
 80019c0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80019c2:	4b79      	ldr	r3, [pc, #484]	@ (8001ba8 <menu+0xc58>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d902      	bls.n	80019d0 <menu+0xa80>
				altLimit = 0;
 80019ca:	4b77      	ldr	r3, [pc, #476]	@ (8001ba8 <menu+0xc58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019d0:	f002 f80a 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80019d4:	2104      	movs	r1, #4
 80019d6:	4876      	ldr	r0, [pc, #472]	@ (8001bb0 <menu+0xc60>)
 80019d8:	f009 fb46 	bl	800b068 <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d119      	bne.n	8001a16 <menu+0xac6>
 80019e2:	4b74      	ldr	r3, [pc, #464]	@ (8001bb4 <menu+0xc64>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d012      	beq.n	8001a16 <menu+0xac6>
 80019f0:	4b71      	ldr	r3, [pc, #452]	@ (8001bb8 <menu+0xc68>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10e      	bne.n	8001a16 <menu+0xac6>
			altLimit = altLimit - 1;
 80019f8:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba8 <menu+0xc58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <menu+0xc58>)
 8001a02:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <menu+0xc58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <menu+0xac2>
		   		altLimit = 1;
 8001a0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <menu+0xc58>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a12:	f001 ffe9 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a16:	2108      	movs	r1, #8
 8001a18:	4865      	ldr	r0, [pc, #404]	@ (8001bb0 <menu+0xc60>)
 8001a1a:	f009 fb25 	bl	800b068 <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d12d      	bne.n	8001a80 <menu+0xb30>
 8001a24:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <menu+0xc64>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f083 0301 	eor.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d026      	beq.n	8001a80 <menu+0xb30>
			eepromData[5] = altLimit;
 8001a32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba8 <menu+0xc58>)
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	4b61      	ldr	r3, [pc, #388]	@ (8001bbc <menu+0xc6c>)
 8001a38:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <menu+0xc58>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d110      	bne.n	8001a64 <menu+0xb14>
 8001a42:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc0 <menu+0xc70>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <menu+0xb02>
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bc0 <menu+0xc70>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d108      	bne.n	8001a64 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001a52:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <menu+0xc70>)
 8001a54:	2203      	movs	r2, #3
 8001a56:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001a58:	4b59      	ldr	r3, [pc, #356]	@ (8001bc0 <menu+0xc70>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <menu+0xc6c>)
 8001a5e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001a62:	e00a      	b.n	8001a7a <menu+0xb2a>
			} else if(altLimit == 0) {
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <menu+0xc58>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d106      	bne.n	8001a7a <menu+0xb2a>
				platformSilindirTipi = 0;
 8001a6c:	4b55      	ldr	r3, [pc, #340]	@ (8001bc4 <menu+0xc74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001a72:	4b54      	ldr	r3, [pc, #336]	@ (8001bc4 <menu+0xc74>)
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <menu+0xc6c>)
 8001a78:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001a7a:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <menu+0xc78>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001a80:	4b52      	ldr	r3, [pc, #328]	@ (8001bcc <menu+0xc7c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b06      	cmp	r3, #6
 8001a86:	d166      	bne.n	8001b56 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001a88:	4a51      	ldr	r2, [pc, #324]	@ (8001bd0 <menu+0xc80>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f007 fff9 	bl	8009a84 <lcd_print>

		if(basincSalteri == 0) {
 8001a92:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <menu+0xc84>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001a9a:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd8 <menu+0xc88>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f007 fff0 	bl	8009a84 <lcd_print>
 8001aa4:	e008      	b.n	8001ab8 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd4 <menu+0xc84>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d104      	bne.n	8001ab8 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001aae:	4a3f      	ldr	r2, [pc, #252]	@ (8001bac <menu+0xc5c>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f007 ffe6 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ab8:	2102      	movs	r1, #2
 8001aba:	483d      	ldr	r0, [pc, #244]	@ (8001bb0 <menu+0xc60>)
 8001abc:	f009 fad4 	bl	800b068 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d115      	bne.n	8001af2 <menu+0xba2>
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <menu+0xc64>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00e      	beq.n	8001af2 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <menu+0xc84>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <menu+0xc84>)
 8001ade:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <menu+0xc84>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d902      	bls.n	8001aee <menu+0xb9e>
				basincSalteri = 0;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <menu+0xc84>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001aee:	f001 ff7b 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001af2:	2104      	movs	r1, #4
 8001af4:	482e      	ldr	r0, [pc, #184]	@ (8001bb0 <menu+0xc60>)
 8001af6:	f009 fab7 	bl	800b068 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d115      	bne.n	8001b2c <menu+0xbdc>
 8001b00:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <menu+0xc64>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00e      	beq.n	8001b2c <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <menu+0xc84>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd4 <menu+0xc84>)
 8001b18:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <menu+0xc84>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <menu+0xbd8>
		   		basincSalteri = 1;
 8001b22:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <menu+0xc84>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b28:	f001 ff5e 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4820      	ldr	r0, [pc, #128]	@ (8001bb0 <menu+0xc60>)
 8001b30:	f009 fa9a 	bl	800b068 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10d      	bne.n	8001b56 <menu+0xc06>
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <menu+0xc64>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f083 0301 	eor.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001b48:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <menu+0xc84>)
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <menu+0xc6c>)
 8001b4e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <menu+0xc78>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <menu+0xc7c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	f040 80a9 	bne.w	8001cb2 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001b60:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <menu+0xc8c>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	2001      	movs	r0, #1
 8001b66:	f007 ff8d 	bl	8009a84 <lcd_print>

		if(kapiSecimleri == 0) {
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <menu+0xc90>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001b72:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <menu+0xc88>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	2002      	movs	r0, #2
 8001b78:	f007 ff84 	bl	8009a84 <lcd_print>
 8001b7c:	e03f      	b.n	8001bfe <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <menu+0xc90>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d105      	bne.n	8001b92 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <menu+0xc94>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f007 ff7a 	bl	8009a84 <lcd_print>
 8001b90:	e035      	b.n	8001bfe <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <menu+0xc90>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d128      	bne.n	8001bec <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001b9a:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <menu+0xc98>)
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f007 ff70 	bl	8009a84 <lcd_print>
 8001ba4:	e02b      	b.n	8001bfe <menu+0xcae>
 8001ba6:	bf00      	nop
 8001ba8:	20001072 	.word	0x20001072
 8001bac:	20001264 	.word	0x20001264
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	2000109b 	.word	0x2000109b
 8001bb8:	2000106d 	.word	0x2000106d
 8001bbc:	20000f9c 	.word	0x20000f9c
 8001bc0:	20001079 	.word	0x20001079
 8001bc4:	2000107f 	.word	0x2000107f
 8001bc8:	20001098 	.word	0x20001098
 8001bcc:	2000106c 	.word	0x2000106c
 8001bd0:	200012a0 	.word	0x200012a0
 8001bd4:	20001073 	.word	0x20001073
 8001bd8:	20001250 	.word	0x20001250
 8001bdc:	200012b4 	.word	0x200012b4
 8001be0:	20001074 	.word	0x20001074
 8001be4:	200012c8 	.word	0x200012c8
 8001be8:	200012dc 	.word	0x200012dc
		} else if(kapiSecimleri == 3) {
 8001bec:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <menu+0xe78>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d104      	bne.n	8001bfe <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001bf4:	4a75      	ldr	r2, [pc, #468]	@ (8001dcc <menu+0xe7c>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f007 ff43 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4873      	ldr	r0, [pc, #460]	@ (8001dd0 <menu+0xe80>)
 8001c02:	f009 fa31 	bl	800b068 <HAL_GPIO_ReadPin>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d115      	bne.n	8001c38 <menu+0xce8>
 8001c0c:	4b71      	ldr	r3, [pc, #452]	@ (8001dd4 <menu+0xe84>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00e      	beq.n	8001c38 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001c1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc8 <menu+0xe78>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b69      	ldr	r3, [pc, #420]	@ (8001dc8 <menu+0xe78>)
 8001c24:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001c26:	4b68      	ldr	r3, [pc, #416]	@ (8001dc8 <menu+0xe78>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d902      	bls.n	8001c34 <menu+0xce4>
				kapiSecimleri = 0;
 8001c2e:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <menu+0xe78>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c34:	f001 fed8 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4865      	ldr	r0, [pc, #404]	@ (8001dd0 <menu+0xe80>)
 8001c3c:	f009 fa14 	bl	800b068 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d115      	bne.n	8001c72 <menu+0xd22>
 8001c46:	4b63      	ldr	r3, [pc, #396]	@ (8001dd4 <menu+0xe84>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001c54:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc8 <menu+0xe78>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc8 <menu+0xe78>)
 8001c5e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <menu+0xe78>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d902      	bls.n	8001c6e <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001c68:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <menu+0xe78>)
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c6e:	f001 febb 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c72:	2108      	movs	r1, #8
 8001c74:	4856      	ldr	r0, [pc, #344]	@ (8001dd0 <menu+0xe80>)
 8001c76:	f009 f9f7 	bl	800b068 <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d118      	bne.n	8001cb2 <menu+0xd62>
 8001c80:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <menu+0xe84>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d011      	beq.n	8001cb2 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc8 <menu+0xe78>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b51      	ldr	r3, [pc, #324]	@ (8001dd8 <menu+0xe88>)
 8001c94:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001c96:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc8 <menu+0xe78>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <menu+0xd5c>
				altLimit = 1;
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <menu+0xe8c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <menu+0xe8c>)
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd8 <menu+0xe88>)
 8001caa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <menu+0xe90>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8001de4 <menu+0xe94>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d167      	bne.n	8001d8a <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001cba:	4a4b      	ldr	r2, [pc, #300]	@ (8001de8 <menu+0xe98>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f007 fee0 	bl	8009a84 <lcd_print>

		if(kapiAcTipi == 0) {
 8001cc4:	4b49      	ldr	r3, [pc, #292]	@ (8001dec <menu+0xe9c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8001ccc:	4a48      	ldr	r2, [pc, #288]	@ (8001df0 <menu+0xea0>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f007 fed7 	bl	8009a84 <lcd_print>
 8001cd6:	e008      	b.n	8001cea <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8001cd8:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <menu+0xe9c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d104      	bne.n	8001cea <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8001ce0:	4a44      	ldr	r2, [pc, #272]	@ (8001df4 <menu+0xea4>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f007 fecd 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cea:	2102      	movs	r1, #2
 8001cec:	4838      	ldr	r0, [pc, #224]	@ (8001dd0 <menu+0xe80>)
 8001cee:	f009 f9bb 	bl	800b068 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d115      	bne.n	8001d24 <menu+0xdd4>
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <menu+0xe84>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00e      	beq.n	8001d24 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8001d06:	4b39      	ldr	r3, [pc, #228]	@ (8001dec <menu+0xe9c>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <menu+0xe9c>)
 8001d10:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001d12:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <menu+0xe9c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d902      	bls.n	8001d20 <menu+0xdd0>
				kapiAcTipi = 0;
 8001d1a:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <menu+0xe9c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d20:	f001 fe62 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d24:	2104      	movs	r1, #4
 8001d26:	482a      	ldr	r0, [pc, #168]	@ (8001dd0 <menu+0xe80>)
 8001d28:	f009 f99e 	bl	800b068 <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d115      	bne.n	8001d5e <menu+0xe0e>
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <menu+0xe84>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	f083 0301 	eor.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8001d40:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <menu+0xe9c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <menu+0xe9c>)
 8001d4a:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001d4c:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <menu+0xe9c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <menu+0xe0a>
		   		kapiAcTipi = 1;
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <menu+0xe9c>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d5a:	f001 fe45 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d5e:	2108      	movs	r1, #8
 8001d60:	481b      	ldr	r0, [pc, #108]	@ (8001dd0 <menu+0xe80>)
 8001d62:	f009 f981 	bl	800b068 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10e      	bne.n	8001d8a <menu+0xe3a>
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <menu+0xe84>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <menu+0xe9c>)
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <menu+0xe88>)
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <menu+0xe90>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <menu+0xe94>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	f040 8092 	bne.w	8001eb8 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <menu+0xea8>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f007 fe73 	bl	8009a84 <lcd_print>

		if(kapi1Tip == 0) {
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <menu+0xeac>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8001da6:	4a16      	ldr	r2, [pc, #88]	@ (8001e00 <menu+0xeb0>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	2002      	movs	r0, #2
 8001dac:	f007 fe6a 	bl	8009a84 <lcd_print>
 8001db0:	e033      	b.n	8001e1a <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <menu+0xeac>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d126      	bne.n	8001e08 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <menu+0xeb4>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f007 fe60 	bl	8009a84 <lcd_print>
 8001dc4:	e029      	b.n	8001e1a <menu+0xeca>
 8001dc6:	bf00      	nop
 8001dc8:	20001074 	.word	0x20001074
 8001dcc:	200012f0 	.word	0x200012f0
 8001dd0:	40010800 	.word	0x40010800
 8001dd4:	2000109b 	.word	0x2000109b
 8001dd8:	20000f9c 	.word	0x20000f9c
 8001ddc:	20001072 	.word	0x20001072
 8001de0:	20001098 	.word	0x20001098
 8001de4:	2000106c 	.word	0x2000106c
 8001de8:	20001304 	.word	0x20001304
 8001dec:	20001078 	.word	0x20001078
 8001df0:	20001318 	.word	0x20001318
 8001df4:	2000132c 	.word	0x2000132c
 8001df8:	20001340 	.word	0x20001340
 8001dfc:	20001075 	.word	0x20001075
 8001e00:	20000100 	.word	0x20000100
 8001e04:	20001354 	.word	0x20001354
		} else if(kapi1Tip == 2) {
 8001e08:	4b73      	ldr	r3, [pc, #460]	@ (8001fd8 <menu+0x1088>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d104      	bne.n	8001e1a <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8001e10:	4a72      	ldr	r2, [pc, #456]	@ (8001fdc <menu+0x108c>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	2002      	movs	r0, #2
 8001e16:	f007 fe35 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4870      	ldr	r0, [pc, #448]	@ (8001fe0 <menu+0x1090>)
 8001e1e:	f009 f923 	bl	800b068 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d115      	bne.n	8001e54 <menu+0xf04>
 8001e28:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe4 <menu+0x1094>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8001e36:	4b68      	ldr	r3, [pc, #416]	@ (8001fd8 <menu+0x1088>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b66      	ldr	r3, [pc, #408]	@ (8001fd8 <menu+0x1088>)
 8001e40:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001e42:	4b65      	ldr	r3, [pc, #404]	@ (8001fd8 <menu+0x1088>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d902      	bls.n	8001e50 <menu+0xf00>
				kapi1Tip = 0;
 8001e4a:	4b63      	ldr	r3, [pc, #396]	@ (8001fd8 <menu+0x1088>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e50:	f001 fdca 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e54:	2104      	movs	r1, #4
 8001e56:	4862      	ldr	r0, [pc, #392]	@ (8001fe0 <menu+0x1090>)
 8001e58:	f009 f906 	bl	800b068 <HAL_GPIO_ReadPin>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d115      	bne.n	8001e8e <menu+0xf3e>
 8001e62:	4b60      	ldr	r3, [pc, #384]	@ (8001fe4 <menu+0x1094>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8001e70:	4b59      	ldr	r3, [pc, #356]	@ (8001fd8 <menu+0x1088>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <menu+0x1088>)
 8001e7a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001e7c:	4b56      	ldr	r3, [pc, #344]	@ (8001fd8 <menu+0x1088>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d902      	bls.n	8001e8a <menu+0xf3a>
		   		kapi1Tip = 2;
 8001e84:	4b54      	ldr	r3, [pc, #336]	@ (8001fd8 <menu+0x1088>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e8a:	f001 fdad 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e8e:	2108      	movs	r1, #8
 8001e90:	4853      	ldr	r0, [pc, #332]	@ (8001fe0 <menu+0x1090>)
 8001e92:	f009 f8e9 	bl	800b068 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10d      	bne.n	8001eb8 <menu+0xf68>
 8001e9c:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <menu+0x1094>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f083 0301 	eor.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd8 <menu+0x1088>)
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe8 <menu+0x1098>)
 8001eb0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001fec <menu+0x109c>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff0 <menu+0x10a0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b0a      	cmp	r3, #10
 8001ebe:	d16c      	bne.n	8001f9a <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff4 <menu+0x10a4>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f007 fddd 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001eca:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff8 <menu+0x10a8>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f007 fdd8 	bl	8009a84 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8001ed4:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <menu+0x10ac>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	220a      	movs	r2, #10
 8001eda:	4949      	ldr	r1, [pc, #292]	@ (8002000 <menu+0x10b0>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00c f8b9 	bl	800e054 <itoa>
		lcd_print(2,16,snum);
 8001ee2:	4a47      	ldr	r2, [pc, #284]	@ (8002000 <menu+0x10b0>)
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f007 fdcc 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001eec:	2102      	movs	r1, #2
 8001eee:	483c      	ldr	r0, [pc, #240]	@ (8001fe0 <menu+0x1090>)
 8001ef0:	f009 f8ba 	bl	800b068 <HAL_GPIO_ReadPin>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d119      	bne.n	8001f2e <menu+0xfde>
 8001efa:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <menu+0x1094>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f083 0301 	eor.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <menu+0xfde>
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <menu+0x1088>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10e      	bne.n	8001f2e <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8001f10:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <menu+0x10ac>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <menu+0x10ac>)
 8001f1a:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001f1c:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <menu+0x10ac>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d902      	bls.n	8001f2a <menu+0xfda>
				kapi1AcSure = 0;
 8001f24:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <menu+0x10ac>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f2a:	f001 fd5d 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001f2e:	2104      	movs	r1, #4
 8001f30:	482b      	ldr	r0, [pc, #172]	@ (8001fe0 <menu+0x1090>)
 8001f32:	f009 f899 	bl	800b068 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d119      	bne.n	8001f70 <menu+0x1020>
 8001f3c:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <menu+0x1094>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <menu+0x1020>
 8001f4a:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <menu+0x1088>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <menu+0x10ac>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <menu+0x10ac>)
 8001f5c:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001f5e:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <menu+0x10ac>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <menu+0x101c>
		   		kapi1AcSure = 5;
 8001f66:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <menu+0x10ac>)
 8001f68:	2205      	movs	r2, #5
 8001f6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f6c:	f001 fd3c 	bl	80039e8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f70:	2108      	movs	r1, #8
 8001f72:	481b      	ldr	r0, [pc, #108]	@ (8001fe0 <menu+0x1090>)
 8001f74:	f009 f878 	bl	800b068 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10d      	bne.n	8001f9a <menu+0x104a>
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <menu+0x1094>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <menu+0x10ac>)
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <menu+0x1098>)
 8001f92:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <menu+0x109c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <menu+0x10a0>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b0b      	cmp	r3, #11
 8001fa0:	f040 8090 	bne.w	80020c4 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8001fa4:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <menu+0x10b4>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f007 fd6b 	bl	8009a84 <lcd_print>

		if(kapi2Tip == 0) {
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <menu+0x10b8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8001fb6:	4a15      	ldr	r2, [pc, #84]	@ (800200c <menu+0x10bc>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2002      	movs	r0, #2
 8001fbc:	f007 fd62 	bl	8009a84 <lcd_print>
 8001fc0:	e031      	b.n	8002026 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <menu+0x10b8>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d124      	bne.n	8002014 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8001fca:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <menu+0x10c0>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f007 fd58 	bl	8009a84 <lcd_print>
 8001fd4:	e027      	b.n	8002026 <menu+0x10d6>
 8001fd6:	bf00      	nop
 8001fd8:	20001075 	.word	0x20001075
 8001fdc:	20000114 	.word	0x20000114
 8001fe0:	40010800 	.word	0x40010800
 8001fe4:	2000109b 	.word	0x2000109b
 8001fe8:	20000f9c 	.word	0x20000f9c
 8001fec:	20001098 	.word	0x20001098
 8001ff0:	2000106c 	.word	0x2000106c
 8001ff4:	20001368 	.word	0x20001368
 8001ff8:	2000137c 	.word	0x2000137c
 8001ffc:	20001085 	.word	0x20001085
 8002000:	2000100c 	.word	0x2000100c
 8002004:	20001390 	.word	0x20001390
 8002008:	20001076 	.word	0x20001076
 800200c:	20000100 	.word	0x20000100
 8002010:	20001354 	.word	0x20001354
		} else if(kapi2Tip == 2) {
 8002014:	4b73      	ldr	r3, [pc, #460]	@ (80021e4 <menu+0x1294>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d104      	bne.n	8002026 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 800201c:	4a72      	ldr	r2, [pc, #456]	@ (80021e8 <menu+0x1298>)
 800201e:	2101      	movs	r1, #1
 8002020:	2002      	movs	r0, #2
 8002022:	f007 fd2f 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2102      	movs	r1, #2
 8002028:	4870      	ldr	r0, [pc, #448]	@ (80021ec <menu+0x129c>)
 800202a:	f009 f81d 	bl	800b068 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d115      	bne.n	8002060 <menu+0x1110>
 8002034:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <menu+0x12a0>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 8002042:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <menu+0x1294>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <menu+0x1294>)
 800204c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <menu+0x1294>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <menu+0x110c>
				kapi2Tip = 0;
 8002056:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <menu+0x1294>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800205c:	f001 fcc4 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002060:	2104      	movs	r1, #4
 8002062:	4862      	ldr	r0, [pc, #392]	@ (80021ec <menu+0x129c>)
 8002064:	f009 f800 	bl	800b068 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d115      	bne.n	800209a <menu+0x114a>
 800206e:	4b60      	ldr	r3, [pc, #384]	@ (80021f0 <menu+0x12a0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f083 0301 	eor.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00e      	beq.n	800209a <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 800207c:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <menu+0x1294>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b57      	ldr	r3, [pc, #348]	@ (80021e4 <menu+0x1294>)
 8002086:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002088:	4b56      	ldr	r3, [pc, #344]	@ (80021e4 <menu+0x1294>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d902      	bls.n	8002096 <menu+0x1146>
		   		kapi2Tip = 2;
 8002090:	4b54      	ldr	r3, [pc, #336]	@ (80021e4 <menu+0x1294>)
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002096:	f001 fca7 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800209a:	2108      	movs	r1, #8
 800209c:	4853      	ldr	r0, [pc, #332]	@ (80021ec <menu+0x129c>)
 800209e:	f008 ffe3 	bl	800b068 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <menu+0x1174>
 80020a8:	4b51      	ldr	r3, [pc, #324]	@ (80021f0 <menu+0x12a0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80020b6:	4b4b      	ldr	r3, [pc, #300]	@ (80021e4 <menu+0x1294>)
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <menu+0x12a4>)
 80020bc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80020be:	4b4e      	ldr	r3, [pc, #312]	@ (80021f8 <menu+0x12a8>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80020c4:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <menu+0x12ac>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d16c      	bne.n	80021a6 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80020cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <menu+0x12b0>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f007 fcd7 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80020d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002204 <menu+0x12b4>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f007 fcd2 	bl	8009a84 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80020e0:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <menu+0x12b8>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	220a      	movs	r2, #10
 80020e6:	4949      	ldr	r1, [pc, #292]	@ (800220c <menu+0x12bc>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00b ffb3 	bl	800e054 <itoa>
		lcd_print(2,16,snum);
 80020ee:	4a47      	ldr	r2, [pc, #284]	@ (800220c <menu+0x12bc>)
 80020f0:	2110      	movs	r1, #16
 80020f2:	2002      	movs	r0, #2
 80020f4:	f007 fcc6 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80020f8:	2102      	movs	r1, #2
 80020fa:	483c      	ldr	r0, [pc, #240]	@ (80021ec <menu+0x129c>)
 80020fc:	f008 ffb4 	bl	800b068 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d119      	bne.n	800213a <menu+0x11ea>
 8002106:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <menu+0x12a0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <menu+0x11ea>
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <menu+0x1294>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10e      	bne.n	800213a <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 800211c:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <menu+0x12b8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <menu+0x12b8>)
 8002126:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002128:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <menu+0x12b8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d902      	bls.n	8002136 <menu+0x11e6>
				kapi2AcSure = 0;
 8002130:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <menu+0x12b8>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002136:	f001 fc57 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800213a:	2104      	movs	r1, #4
 800213c:	482b      	ldr	r0, [pc, #172]	@ (80021ec <menu+0x129c>)
 800213e:	f008 ff93 	bl	800b068 <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <menu+0x122c>
 8002148:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <menu+0x12a0>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <menu+0x122c>
 8002156:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <menu+0x1294>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 800215e:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <menu+0x12b8>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <menu+0x12b8>)
 8002168:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <menu+0x12b8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <menu+0x1228>
		   		kapi2AcSure = 5;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <menu+0x12b8>)
 8002174:	2205      	movs	r2, #5
 8002176:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002178:	f001 fc36 	bl	80039e8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800217c:	2108      	movs	r1, #8
 800217e:	481b      	ldr	r0, [pc, #108]	@ (80021ec <menu+0x129c>)
 8002180:	f008 ff72 	bl	800b068 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10d      	bne.n	80021a6 <menu+0x1256>
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <menu+0x12a0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <menu+0x12b8>)
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <menu+0x12a4>)
 800219e:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <menu+0x12a8>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <menu+0x12ac>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b0d      	cmp	r3, #13
 80021ac:	f040 8090 	bne.w	80022d0 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80021b0:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <menu+0x12c0>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2001      	movs	r0, #1
 80021b6:	f007 fc65 	bl	8009a84 <lcd_print>

		if(kapitablaTip == 0) {
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <menu+0x12c4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80021c2:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <menu+0x12c8>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f007 fc5c 	bl	8009a84 <lcd_print>
 80021cc:	e031      	b.n	8002232 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <menu+0x12c4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d124      	bne.n	8002220 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80021d6:	4a11      	ldr	r2, [pc, #68]	@ (800221c <menu+0x12cc>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f007 fc52 	bl	8009a84 <lcd_print>
 80021e0:	e027      	b.n	8002232 <menu+0x12e2>
 80021e2:	bf00      	nop
 80021e4:	20001076 	.word	0x20001076
 80021e8:	20000114 	.word	0x20000114
 80021ec:	40010800 	.word	0x40010800
 80021f0:	2000109b 	.word	0x2000109b
 80021f4:	20000f9c 	.word	0x20000f9c
 80021f8:	20001098 	.word	0x20001098
 80021fc:	2000106c 	.word	0x2000106c
 8002200:	200013a4 	.word	0x200013a4
 8002204:	2000137c 	.word	0x2000137c
 8002208:	20001086 	.word	0x20001086
 800220c:	2000100c 	.word	0x2000100c
 8002210:	200013b8 	.word	0x200013b8
 8002214:	20001077 	.word	0x20001077
 8002218:	20000100 	.word	0x20000100
 800221c:	20001354 	.word	0x20001354
		} else if(kapitablaTip == 2) {
 8002220:	4b3f      	ldr	r3, [pc, #252]	@ (8002320 <menu+0x13d0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d104      	bne.n	8002232 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002228:	4a3e      	ldr	r2, [pc, #248]	@ (8002324 <menu+0x13d4>)
 800222a:	2101      	movs	r1, #1
 800222c:	2002      	movs	r0, #2
 800222e:	f007 fc29 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002232:	2102      	movs	r1, #2
 8002234:	483c      	ldr	r0, [pc, #240]	@ (8002328 <menu+0x13d8>)
 8002236:	f008 ff17 	bl	800b068 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d115      	bne.n	800226c <menu+0x131c>
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <menu+0x13dc>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00e      	beq.n	800226c <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <menu+0x13d0>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <menu+0x13d0>)
 8002258:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800225a:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <menu+0x13d0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d902      	bls.n	8002268 <menu+0x1318>
				kapitablaTip = 0;
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <menu+0x13d0>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002268:	f001 fbbe 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800226c:	2104      	movs	r1, #4
 800226e:	482e      	ldr	r0, [pc, #184]	@ (8002328 <menu+0x13d8>)
 8002270:	f008 fefa 	bl	800b068 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <menu+0x1356>
 800227a:	4b2c      	ldr	r3, [pc, #176]	@ (800232c <menu+0x13dc>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <menu+0x13d0>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <menu+0x13d0>)
 8002292:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <menu+0x13d0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d902      	bls.n	80022a2 <menu+0x1352>
		   		kapitablaTip = 2;
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <menu+0x13d0>)
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022a2:	f001 fba1 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a6:	2108      	movs	r1, #8
 80022a8:	481f      	ldr	r0, [pc, #124]	@ (8002328 <menu+0x13d8>)
 80022aa:	f008 fedd 	bl	800b068 <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10d      	bne.n	80022d0 <menu+0x1380>
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <menu+0x13dc>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <menu+0x13d0>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <menu+0x13e0>)
 80022c8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <menu+0x13e4>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <menu+0x13e8>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b0e      	cmp	r3, #14
 80022d6:	f040 80a3 	bne.w	8002420 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80022da:	4a18      	ldr	r2, [pc, #96]	@ (800233c <menu+0x13ec>)
 80022dc:	2101      	movs	r1, #1
 80022de:	2001      	movs	r0, #1
 80022e0:	f007 fbd0 	bl	8009a84 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80022e4:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <menu+0x13f0>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80022ec:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <menu+0x13f4>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	2002      	movs	r0, #2
 80022f2:	f007 fbc7 	bl	8009a84 <lcd_print>
 80022f6:	e034      	b.n	8002362 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <menu+0x13f0>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <menu+0x13f8>)
 8002302:	2101      	movs	r1, #1
 8002304:	2002      	movs	r0, #2
 8002306:	f007 fbbd 	bl	8009a84 <lcd_print>
 800230a:	e02a      	b.n	8002362 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <menu+0x13f0>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d11d      	bne.n	8002350 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002314:	4a0d      	ldr	r2, [pc, #52]	@ (800234c <menu+0x13fc>)
 8002316:	2101      	movs	r1, #1
 8002318:	2002      	movs	r0, #2
 800231a:	f007 fbb3 	bl	8009a84 <lcd_print>
 800231e:	e020      	b.n	8002362 <menu+0x1412>
 8002320:	20001077 	.word	0x20001077
 8002324:	20000114 	.word	0x20000114
 8002328:	40010800 	.word	0x40010800
 800232c:	2000109b 	.word	0x2000109b
 8002330:	20000f9c 	.word	0x20000f9c
 8002334:	20001098 	.word	0x20001098
 8002338:	2000106c 	.word	0x2000106c
 800233c:	200013cc 	.word	0x200013cc
 8002340:	20001079 	.word	0x20001079
 8002344:	200013e0 	.word	0x200013e0
 8002348:	200013f4 	.word	0x200013f4
 800234c:	20001408 	.word	0x20001408
		} else if(kapiTablaAcKonum == 3) {
 8002350:	4b76      	ldr	r3, [pc, #472]	@ (800252c <menu+0x15dc>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d104      	bne.n	8002362 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002358:	4a75      	ldr	r2, [pc, #468]	@ (8002530 <menu+0x15e0>)
 800235a:	2101      	movs	r1, #1
 800235c:	2002      	movs	r0, #2
 800235e:	f007 fb91 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2102      	movs	r1, #2
 8002364:	4873      	ldr	r0, [pc, #460]	@ (8002534 <menu+0x15e4>)
 8002366:	f008 fe7f 	bl	800b068 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d115      	bne.n	800239c <menu+0x144c>
 8002370:	4b71      	ldr	r3, [pc, #452]	@ (8002538 <menu+0x15e8>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00e      	beq.n	800239c <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800237e:	4b6b      	ldr	r3, [pc, #428]	@ (800252c <menu+0x15dc>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	3301      	adds	r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b69      	ldr	r3, [pc, #420]	@ (800252c <menu+0x15dc>)
 8002388:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800238a:	4b68      	ldr	r3, [pc, #416]	@ (800252c <menu+0x15dc>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002392:	4b66      	ldr	r3, [pc, #408]	@ (800252c <menu+0x15dc>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002398:	f001 fb26 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800239c:	2104      	movs	r1, #4
 800239e:	4865      	ldr	r0, [pc, #404]	@ (8002534 <menu+0x15e4>)
 80023a0:	f008 fe62 	bl	800b068 <HAL_GPIO_ReadPin>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d115      	bne.n	80023d6 <menu+0x1486>
 80023aa:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <menu+0x15e8>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f083 0301 	eor.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80023b8:	4b5c      	ldr	r3, [pc, #368]	@ (800252c <menu+0x15dc>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	3b01      	subs	r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b5a      	ldr	r3, [pc, #360]	@ (800252c <menu+0x15dc>)
 80023c2:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <menu+0x15dc>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d902      	bls.n	80023d2 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80023cc:	4b57      	ldr	r3, [pc, #348]	@ (800252c <menu+0x15dc>)
 80023ce:	2202      	movs	r2, #2
 80023d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023d2:	f001 fb09 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023d6:	2108      	movs	r1, #8
 80023d8:	4856      	ldr	r0, [pc, #344]	@ (8002534 <menu+0x15e4>)
 80023da:	f008 fe45 	bl	800b068 <HAL_GPIO_ReadPin>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d11d      	bne.n	8002420 <menu+0x14d0>
 80023e4:	4b54      	ldr	r3, [pc, #336]	@ (8002538 <menu+0x15e8>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80023f2:	4b4e      	ldr	r3, [pc, #312]	@ (800252c <menu+0x15dc>)
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	4b51      	ldr	r3, [pc, #324]	@ (800253c <menu+0x15ec>)
 80023f8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80023fc:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <menu+0x15dc>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <menu+0x14bc>
 8002404:	4b49      	ldr	r3, [pc, #292]	@ (800252c <menu+0x15dc>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d106      	bne.n	800241a <menu+0x14ca>
				altLimit = 1;
 800240c:	4b4c      	ldr	r3, [pc, #304]	@ (8002540 <menu+0x15f0>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002412:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <menu+0x15f0>)
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	4b49      	ldr	r3, [pc, #292]	@ (800253c <menu+0x15ec>)
 8002418:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800241a:	4b4a      	ldr	r3, [pc, #296]	@ (8002544 <menu+0x15f4>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002420:	4b49      	ldr	r3, [pc, #292]	@ (8002548 <menu+0x15f8>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d16c      	bne.n	8002502 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002428:	4a48      	ldr	r2, [pc, #288]	@ (800254c <menu+0x15fc>)
 800242a:	2101      	movs	r1, #1
 800242c:	2001      	movs	r0, #1
 800242e:	f007 fb29 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002432:	4a47      	ldr	r2, [pc, #284]	@ (8002550 <menu+0x1600>)
 8002434:	2101      	movs	r1, #1
 8002436:	2002      	movs	r0, #2
 8002438:	f007 fb24 	bl	8009a84 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 800243c:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <menu+0x1604>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	220a      	movs	r2, #10
 8002442:	4945      	ldr	r1, [pc, #276]	@ (8002558 <menu+0x1608>)
 8002444:	4618      	mov	r0, r3
 8002446:	f00b fe05 	bl	800e054 <itoa>
		lcd_print(2,16,snum);
 800244a:	4a43      	ldr	r2, [pc, #268]	@ (8002558 <menu+0x1608>)
 800244c:	2110      	movs	r1, #16
 800244e:	2002      	movs	r0, #2
 8002450:	f007 fb18 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002454:	2102      	movs	r1, #2
 8002456:	4837      	ldr	r0, [pc, #220]	@ (8002534 <menu+0x15e4>)
 8002458:	f008 fe06 	bl	800b068 <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d119      	bne.n	8002496 <menu+0x1546>
 8002462:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <menu+0x15e8>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <menu+0x1546>
 8002470:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <menu+0x160c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10e      	bne.n	8002496 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002478:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <menu+0x1604>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <menu+0x1604>)
 8002482:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002484:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <menu+0x1604>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d902      	bls.n	8002492 <menu+0x1542>
				kapiTablaAcSure = 0;
 800248c:	4b31      	ldr	r3, [pc, #196]	@ (8002554 <menu+0x1604>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002492:	f001 faa9 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002496:	2104      	movs	r1, #4
 8002498:	4826      	ldr	r0, [pc, #152]	@ (8002534 <menu+0x15e4>)
 800249a:	f008 fde5 	bl	800b068 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d119      	bne.n	80024d8 <menu+0x1588>
 80024a4:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <menu+0x15e8>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	f083 0301 	eor.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <menu+0x1588>
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <menu+0x160c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <menu+0x1604>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3b01      	subs	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <menu+0x1604>)
 80024c4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80024c6:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <menu+0x1604>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80024ce:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <menu+0x1604>)
 80024d0:	2205      	movs	r2, #5
 80024d2:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80024d4:	f001 fa88 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d8:	2108      	movs	r1, #8
 80024da:	4816      	ldr	r0, [pc, #88]	@ (8002534 <menu+0x15e4>)
 80024dc:	f008 fdc4 	bl	800b068 <HAL_GPIO_ReadPin>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10d      	bne.n	8002502 <menu+0x15b2>
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <menu+0x15e8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <menu+0x1604>)
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <menu+0x15ec>)
 80024fa:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <menu+0x15f4>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <menu+0x15f8>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b10      	cmp	r3, #16
 8002508:	f040 8086 	bne.w	8002618 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <menu+0x1610>)
 800250e:	2101      	movs	r1, #1
 8002510:	2001      	movs	r0, #1
 8002512:	f007 fab7 	bl	8009a84 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002516:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <menu+0x1614>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d124      	bne.n	8002568 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 800251e:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <menu+0x15e0>)
 8002520:	2101      	movs	r1, #1
 8002522:	2002      	movs	r0, #2
 8002524:	f007 faae 	bl	8009a84 <lcd_print>
 8002528:	e027      	b.n	800257a <menu+0x162a>
 800252a:	bf00      	nop
 800252c:	20001079 	.word	0x20001079
 8002530:	20001250 	.word	0x20001250
 8002534:	40010800 	.word	0x40010800
 8002538:	2000109b 	.word	0x2000109b
 800253c:	20000f9c 	.word	0x20000f9c
 8002540:	20001072 	.word	0x20001072
 8002544:	20001098 	.word	0x20001098
 8002548:	2000106c 	.word	0x2000106c
 800254c:	2000141c 	.word	0x2000141c
 8002550:	2000137c 	.word	0x2000137c
 8002554:	20001087 	.word	0x20001087
 8002558:	2000100c 	.word	0x2000100c
 800255c:	20001077 	.word	0x20001077
 8002560:	20001430 	.word	0x20001430
 8002564:	2000107a 	.word	0x2000107a
		} else if(yukariYavasLimit == 1) {
 8002568:	4b84      	ldr	r3, [pc, #528]	@ (800277c <menu+0x182c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d104      	bne.n	800257a <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002570:	4a83      	ldr	r2, [pc, #524]	@ (8002780 <menu+0x1830>)
 8002572:	2101      	movs	r1, #1
 8002574:	2002      	movs	r0, #2
 8002576:	f007 fa85 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800257a:	2102      	movs	r1, #2
 800257c:	4881      	ldr	r0, [pc, #516]	@ (8002784 <menu+0x1834>)
 800257e:	f008 fd73 	bl	800b068 <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b01      	cmp	r3, #1
 8002586:	d115      	bne.n	80025b4 <menu+0x1664>
 8002588:	4b7f      	ldr	r3, [pc, #508]	@ (8002788 <menu+0x1838>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f083 0301 	eor.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00e      	beq.n	80025b4 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002596:	4b79      	ldr	r3, [pc, #484]	@ (800277c <menu+0x182c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b77      	ldr	r3, [pc, #476]	@ (800277c <menu+0x182c>)
 80025a0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80025a2:	4b76      	ldr	r3, [pc, #472]	@ (800277c <menu+0x182c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d902      	bls.n	80025b0 <menu+0x1660>
				yukariYavasLimit = 0;
 80025aa:	4b74      	ldr	r3, [pc, #464]	@ (800277c <menu+0x182c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025b0:	f001 fa1a 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b4:	2104      	movs	r1, #4
 80025b6:	4873      	ldr	r0, [pc, #460]	@ (8002784 <menu+0x1834>)
 80025b8:	f008 fd56 	bl	800b068 <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d115      	bne.n	80025ee <menu+0x169e>
 80025c2:	4b71      	ldr	r3, [pc, #452]	@ (8002788 <menu+0x1838>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 80025d0:	4b6a      	ldr	r3, [pc, #424]	@ (800277c <menu+0x182c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b68      	ldr	r3, [pc, #416]	@ (800277c <menu+0x182c>)
 80025da:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80025dc:	4b67      	ldr	r3, [pc, #412]	@ (800277c <menu+0x182c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <menu+0x169a>
		   		yukariYavasLimit = 1;
 80025e4:	4b65      	ldr	r3, [pc, #404]	@ (800277c <menu+0x182c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ea:	f001 f9fd 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ee:	2108      	movs	r1, #8
 80025f0:	4864      	ldr	r0, [pc, #400]	@ (8002784 <menu+0x1834>)
 80025f2:	f008 fd39 	bl	800b068 <HAL_GPIO_ReadPin>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10d      	bne.n	8002618 <menu+0x16c8>
 80025fc:	4b62      	ldr	r3, [pc, #392]	@ (8002788 <menu+0x1838>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f083 0301 	eor.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 800260a:	4b5c      	ldr	r3, [pc, #368]	@ (800277c <menu+0x182c>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b5f      	ldr	r3, [pc, #380]	@ (800278c <menu+0x183c>)
 8002610:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002612:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <menu+0x1840>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002618:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <menu+0x1844>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b11      	cmp	r3, #17
 800261e:	f040 808b 	bne.w	8002738 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002622:	4a5d      	ldr	r2, [pc, #372]	@ (8002798 <menu+0x1848>)
 8002624:	2101      	movs	r1, #1
 8002626:	2001      	movs	r0, #1
 8002628:	f007 fa2c 	bl	8009a84 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 800262c:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <menu+0x184c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d105      	bne.n	8002640 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002634:	4a5a      	ldr	r2, [pc, #360]	@ (80027a0 <menu+0x1850>)
 8002636:	2101      	movs	r1, #1
 8002638:	2002      	movs	r0, #2
 800263a:	f007 fa23 	bl	8009a84 <lcd_print>
 800263e:	e012      	b.n	8002666 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002640:	4b56      	ldr	r3, [pc, #344]	@ (800279c <menu+0x184c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002648:	4a56      	ldr	r2, [pc, #344]	@ (80027a4 <menu+0x1854>)
 800264a:	2101      	movs	r1, #1
 800264c:	2002      	movs	r0, #2
 800264e:	f007 fa19 	bl	8009a84 <lcd_print>
 8002652:	e008      	b.n	8002666 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002654:	4b51      	ldr	r3, [pc, #324]	@ (800279c <menu+0x184c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 800265c:	4a52      	ldr	r2, [pc, #328]	@ (80027a8 <menu+0x1858>)
 800265e:	2101      	movs	r1, #1
 8002660:	2002      	movs	r0, #2
 8002662:	f007 fa0f 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002666:	2102      	movs	r1, #2
 8002668:	4846      	ldr	r0, [pc, #280]	@ (8002784 <menu+0x1834>)
 800266a:	f008 fcfd 	bl	800b068 <HAL_GPIO_ReadPin>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d115      	bne.n	80026a0 <menu+0x1750>
 8002674:	4b44      	ldr	r3, [pc, #272]	@ (8002788 <menu+0x1838>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f083 0301 	eor.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00e      	beq.n	80026a0 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002682:	4b46      	ldr	r3, [pc, #280]	@ (800279c <menu+0x184c>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b44      	ldr	r3, [pc, #272]	@ (800279c <menu+0x184c>)
 800268c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800268e:	4b43      	ldr	r3, [pc, #268]	@ (800279c <menu+0x184c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <menu+0x184c>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800269c:	f001 f9a4 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a0:	2104      	movs	r1, #4
 80026a2:	4838      	ldr	r0, [pc, #224]	@ (8002784 <menu+0x1834>)
 80026a4:	f008 fce0 	bl	800b068 <HAL_GPIO_ReadPin>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d115      	bne.n	80026da <menu+0x178a>
 80026ae:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <menu+0x1838>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f083 0301 	eor.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80026bc:	4b37      	ldr	r3, [pc, #220]	@ (800279c <menu+0x184c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b35      	ldr	r3, [pc, #212]	@ (800279c <menu+0x184c>)
 80026c6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80026c8:	4b34      	ldr	r3, [pc, #208]	@ (800279c <menu+0x184c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d902      	bls.n	80026d6 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 80026d0:	4b32      	ldr	r3, [pc, #200]	@ (800279c <menu+0x184c>)
 80026d2:	2202      	movs	r2, #2
 80026d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d6:	f001 f987 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026da:	2108      	movs	r1, #8
 80026dc:	4829      	ldr	r0, [pc, #164]	@ (8002784 <menu+0x1834>)
 80026de:	f008 fcc3 	bl	800b068 <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d127      	bne.n	8002738 <menu+0x17e8>
 80026e8:	4b27      	ldr	r3, [pc, #156]	@ (8002788 <menu+0x1838>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 80026f6:	4b29      	ldr	r3, [pc, #164]	@ (800279c <menu+0x184c>)
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	4b24      	ldr	r3, [pc, #144]	@ (800278c <menu+0x183c>)
 80026fc:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80026fe:	4b27      	ldr	r3, [pc, #156]	@ (800279c <menu+0x184c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <menu+0x17be>
 8002706:	4b25      	ldr	r3, [pc, #148]	@ (800279c <menu+0x184c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d106      	bne.n	800271c <menu+0x17cc>
				calismaSekli = 0;
 800270e:	4b27      	ldr	r3, [pc, #156]	@ (80027ac <menu+0x185c>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002714:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <menu+0x185c>)
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <menu+0x183c>)
 800271a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <menu+0x184c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002724:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <menu+0x1860>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800272a:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <menu+0x1860>)
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <menu+0x183c>)
 8002730:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <menu+0x1840>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <menu+0x1844>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b12      	cmp	r3, #18
 800273e:	f040 8097 	bne.w	8002870 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <menu+0x184c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d105      	bne.n	8002756 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 800274a:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <menu+0x1864>)
 800274c:	2101      	movs	r1, #1
 800274e:	2001      	movs	r0, #1
 8002750:	f007 f998 	bl	8009a84 <lcd_print>
 8002754:	e008      	b.n	8002768 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <menu+0x184c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d104      	bne.n	8002768 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 800275e:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <menu+0x1868>)
 8002760:	2101      	movs	r1, #1
 8002762:	2001      	movs	r0, #1
 8002764:	f007 f98e 	bl	8009a84 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <menu+0x186c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d127      	bne.n	80027c0 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002770:	4a0d      	ldr	r2, [pc, #52]	@ (80027a8 <menu+0x1858>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f007 f985 	bl	8009a84 <lcd_print>
 800277a:	e02a      	b.n	80027d2 <menu+0x1882>
 800277c:	2000107a 	.word	0x2000107a
 8002780:	20001264 	.word	0x20001264
 8002784:	40010800 	.word	0x40010800
 8002788:	2000109b 	.word	0x2000109b
 800278c:	20000f9c 	.word	0x20000f9c
 8002790:	20001098 	.word	0x20001098
 8002794:	2000106c 	.word	0x2000106c
 8002798:	20001444 	.word	0x20001444
 800279c:	2000107b 	.word	0x2000107b
 80027a0:	20001458 	.word	0x20001458
 80027a4:	2000146c 	.word	0x2000146c
 80027a8:	20001250 	.word	0x20001250
 80027ac:	2000106d 	.word	0x2000106d
 80027b0:	2000107e 	.word	0x2000107e
 80027b4:	20001480 	.word	0x20001480
 80027b8:	20001494 	.word	0x20001494
 80027bc:	2000107c 	.word	0x2000107c
		} else if(devirmeYukariIleriLimit == 1){
 80027c0:	4b79      	ldr	r3, [pc, #484]	@ (80029a8 <menu+0x1a58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d104      	bne.n	80027d2 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 80027c8:	4a78      	ldr	r2, [pc, #480]	@ (80029ac <menu+0x1a5c>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	2002      	movs	r0, #2
 80027ce:	f007 f959 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d2:	2102      	movs	r1, #2
 80027d4:	4876      	ldr	r0, [pc, #472]	@ (80029b0 <menu+0x1a60>)
 80027d6:	f008 fc47 	bl	800b068 <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d115      	bne.n	800280c <menu+0x18bc>
 80027e0:	4b74      	ldr	r3, [pc, #464]	@ (80029b4 <menu+0x1a64>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	f083 0301 	eor.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80027ee:	4b6e      	ldr	r3, [pc, #440]	@ (80029a8 <menu+0x1a58>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <menu+0x1a58>)
 80027f8:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80027fa:	4b6b      	ldr	r3, [pc, #428]	@ (80029a8 <menu+0x1a58>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d902      	bls.n	8002808 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002802:	4b69      	ldr	r3, [pc, #420]	@ (80029a8 <menu+0x1a58>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002808:	f001 f8ee 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800280c:	2104      	movs	r1, #4
 800280e:	4868      	ldr	r0, [pc, #416]	@ (80029b0 <menu+0x1a60>)
 8002810:	f008 fc2a 	bl	800b068 <HAL_GPIO_ReadPin>
 8002814:	4603      	mov	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d115      	bne.n	8002846 <menu+0x18f6>
 800281a:	4b66      	ldr	r3, [pc, #408]	@ (80029b4 <menu+0x1a64>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	f083 0301 	eor.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00e      	beq.n	8002846 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002828:	4b5f      	ldr	r3, [pc, #380]	@ (80029a8 <menu+0x1a58>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	3b01      	subs	r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b5d      	ldr	r3, [pc, #372]	@ (80029a8 <menu+0x1a58>)
 8002832:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002834:	4b5c      	ldr	r3, [pc, #368]	@ (80029a8 <menu+0x1a58>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 800283c:	4b5a      	ldr	r3, [pc, #360]	@ (80029a8 <menu+0x1a58>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002842:	f001 f8d1 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002846:	2108      	movs	r1, #8
 8002848:	4859      	ldr	r0, [pc, #356]	@ (80029b0 <menu+0x1a60>)
 800284a:	f008 fc0d 	bl	800b068 <HAL_GPIO_ReadPin>
 800284e:	4603      	mov	r3, r0
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10d      	bne.n	8002870 <menu+0x1920>
 8002854:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <menu+0x1a64>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002862:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <menu+0x1a58>)
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	4b54      	ldr	r3, [pc, #336]	@ (80029b8 <menu+0x1a68>)
 8002868:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800286a:	4b54      	ldr	r3, [pc, #336]	@ (80029bc <menu+0x1a6c>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002870:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <menu+0x1a70>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b13      	cmp	r3, #19
 8002876:	d174      	bne.n	8002962 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002878:	4b52      	ldr	r3, [pc, #328]	@ (80029c4 <menu+0x1a74>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d105      	bne.n	800288c <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002880:	4a51      	ldr	r2, [pc, #324]	@ (80029c8 <menu+0x1a78>)
 8002882:	2101      	movs	r1, #1
 8002884:	2001      	movs	r0, #1
 8002886:	f007 f8fd 	bl	8009a84 <lcd_print>
 800288a:	e008      	b.n	800289e <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 800288c:	4b4d      	ldr	r3, [pc, #308]	@ (80029c4 <menu+0x1a74>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d104      	bne.n	800289e <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002894:	4a4d      	ldr	r2, [pc, #308]	@ (80029cc <menu+0x1a7c>)
 8002896:	2101      	movs	r1, #1
 8002898:	2001      	movs	r0, #1
 800289a:	f007 f8f3 	bl	8009a84 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 800289e:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <menu+0x1a80>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 80028a6:	4a4b      	ldr	r2, [pc, #300]	@ (80029d4 <menu+0x1a84>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	2002      	movs	r0, #2
 80028ac:	f007 f8ea 	bl	8009a84 <lcd_print>
 80028b0:	e008      	b.n	80028c4 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 80028b2:	4b47      	ldr	r3, [pc, #284]	@ (80029d0 <menu+0x1a80>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d104      	bne.n	80028c4 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 80028ba:	4a3c      	ldr	r2, [pc, #240]	@ (80029ac <menu+0x1a5c>)
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f007 f8e0 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c4:	2102      	movs	r1, #2
 80028c6:	483a      	ldr	r0, [pc, #232]	@ (80029b0 <menu+0x1a60>)
 80028c8:	f008 fbce 	bl	800b068 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d115      	bne.n	80028fe <menu+0x19ae>
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <menu+0x1a64>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80028e0:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <menu+0x1a80>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <menu+0x1a80>)
 80028ea:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80028ec:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <menu+0x1a80>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d902      	bls.n	80028fa <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 80028f4:	4b36      	ldr	r3, [pc, #216]	@ (80029d0 <menu+0x1a80>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028fa:	f001 f875 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028fe:	2104      	movs	r1, #4
 8002900:	482b      	ldr	r0, [pc, #172]	@ (80029b0 <menu+0x1a60>)
 8002902:	f008 fbb1 	bl	800b068 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d115      	bne.n	8002938 <menu+0x19e8>
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <menu+0x1a64>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f083 0301 	eor.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800291a:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <menu+0x1a80>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b2b      	ldr	r3, [pc, #172]	@ (80029d0 <menu+0x1a80>)
 8002924:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002926:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <menu+0x1a80>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <menu+0x1a80>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002934:	f001 f858 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002938:	2108      	movs	r1, #8
 800293a:	481d      	ldr	r0, [pc, #116]	@ (80029b0 <menu+0x1a60>)
 800293c:	f008 fb94 	bl	800b068 <HAL_GPIO_ReadPin>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10d      	bne.n	8002962 <menu+0x1a12>
 8002946:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <menu+0x1a64>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	f083 0301 	eor.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002954:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <menu+0x1a80>)
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <menu+0x1a68>)
 800295a:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800295c:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <menu+0x1a6c>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <menu+0x1a70>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b14      	cmp	r3, #20
 8002968:	f040 809e 	bne.w	8002aa8 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 800296c:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <menu+0x1a74>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002974:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <menu+0x1a88>)
 8002976:	2101      	movs	r1, #1
 8002978:	2001      	movs	r0, #1
 800297a:	f007 f883 	bl	8009a84 <lcd_print>
 800297e:	e008      	b.n	8002992 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002980:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <menu+0x1a74>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d104      	bne.n	8002992 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <menu+0x1a8c>)
 800298a:	2101      	movs	r1, #1
 800298c:	2001      	movs	r0, #1
 800298e:	f007 f879 	bl	8009a84 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002992:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <menu+0x1a90>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d126      	bne.n	80029e8 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 800299a:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <menu+0x1a94>)
 800299c:	2101      	movs	r1, #1
 800299e:	2002      	movs	r0, #2
 80029a0:	f007 f870 	bl	8009a84 <lcd_print>
 80029a4:	e029      	b.n	80029fa <menu+0x1aaa>
 80029a6:	bf00      	nop
 80029a8:	2000107c 	.word	0x2000107c
 80029ac:	20001264 	.word	0x20001264
 80029b0:	40010800 	.word	0x40010800
 80029b4:	2000109b 	.word	0x2000109b
 80029b8:	20000f9c 	.word	0x20000f9c
 80029bc:	20001098 	.word	0x20001098
 80029c0:	2000106c 	.word	0x2000106c
 80029c4:	2000107b 	.word	0x2000107b
 80029c8:	200014a8 	.word	0x200014a8
 80029cc:	200014bc 	.word	0x200014bc
 80029d0:	2000107d 	.word	0x2000107d
 80029d4:	20001250 	.word	0x20001250
 80029d8:	200014d0 	.word	0x200014d0
 80029dc:	200014e4 	.word	0x200014e4
 80029e0:	2000107e 	.word	0x2000107e
 80029e4:	200014f8 	.word	0x200014f8
		} else if(devirmeSilindirTipi == 1) {
 80029e8:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <menu+0x1b80>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d104      	bne.n	80029fa <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 80029f0:	4a38      	ldr	r2, [pc, #224]	@ (8002ad4 <menu+0x1b84>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f007 f845 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80029fa:	2102      	movs	r1, #2
 80029fc:	4836      	ldr	r0, [pc, #216]	@ (8002ad8 <menu+0x1b88>)
 80029fe:	f008 fb33 	bl	800b068 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d119      	bne.n	8002a3c <menu+0x1aec>
 8002a08:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <menu+0x1b8c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <menu+0x1aec>
 8002a16:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <menu+0x1b90>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d10e      	bne.n	8002a3c <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <menu+0x1b80>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <menu+0x1b80>)
 8002a28:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002a2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <menu+0x1b80>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d902      	bls.n	8002a38 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002a32:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <menu+0x1b80>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a38:	f000 ffd6 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	4826      	ldr	r0, [pc, #152]	@ (8002ad8 <menu+0x1b88>)
 8002a40:	f008 fb12 	bl	800b068 <HAL_GPIO_ReadPin>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d119      	bne.n	8002a7e <menu+0x1b2e>
 8002a4a:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <menu+0x1b8c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	f083 0301 	eor.w	r3, r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <menu+0x1b2e>
 8002a58:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <menu+0x1b90>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d10e      	bne.n	8002a7e <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <menu+0x1b80>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b19      	ldr	r3, [pc, #100]	@ (8002ad0 <menu+0x1b80>)
 8002a6a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002a6c:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <menu+0x1b80>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <menu+0x1b80>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a7a:	f000 ffb5 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7e:	2108      	movs	r1, #8
 8002a80:	4815      	ldr	r0, [pc, #84]	@ (8002ad8 <menu+0x1b88>)
 8002a82:	f008 faf1 	bl	800b068 <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d10d      	bne.n	8002aa8 <menu+0x1b58>
 8002a8c:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <menu+0x1b8c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <menu+0x1b80>)
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <menu+0x1b94>)
 8002aa0:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <menu+0x1b98>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002aa8:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <menu+0x1b9c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b15      	cmp	r3, #21
 8002aae:	f040 8088 	bne.w	8002bc2 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <menu+0x1ba0>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f006 ffe4 	bl	8009a84 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002abc:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <menu+0x1ba4>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d11b      	bne.n	8002afc <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <menu+0x1ba8>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f006 ffdb 	bl	8009a84 <lcd_print>
 8002ace:	e01e      	b.n	8002b0e <menu+0x1bbe>
 8002ad0:	2000107e 	.word	0x2000107e
 8002ad4:	2000150c 	.word	0x2000150c
 8002ad8:	40010800 	.word	0x40010800
 8002adc:	2000109b 	.word	0x2000109b
 8002ae0:	2000107b 	.word	0x2000107b
 8002ae4:	20000f9c 	.word	0x20000f9c
 8002ae8:	20001098 	.word	0x20001098
 8002aec:	2000106c 	.word	0x2000106c
 8002af0:	20001520 	.word	0x20001520
 8002af4:	2000107f 	.word	0x2000107f
 8002af8:	200014f8 	.word	0x200014f8
		} else if(platformSilindirTipi == 1) {
 8002afc:	4ba1      	ldr	r3, [pc, #644]	@ (8002d84 <menu+0x1e34>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d104      	bne.n	8002b0e <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002b04:	4aa0      	ldr	r2, [pc, #640]	@ (8002d88 <menu+0x1e38>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f006 ffbb 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0e:	2102      	movs	r1, #2
 8002b10:	489e      	ldr	r0, [pc, #632]	@ (8002d8c <menu+0x1e3c>)
 8002b12:	f008 faa9 	bl	800b068 <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d115      	bne.n	8002b48 <menu+0x1bf8>
 8002b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8002d90 <menu+0x1e40>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00e      	beq.n	8002b48 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002b2a:	4b96      	ldr	r3, [pc, #600]	@ (8002d84 <menu+0x1e34>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b94      	ldr	r3, [pc, #592]	@ (8002d84 <menu+0x1e34>)
 8002b34:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002b36:	4b93      	ldr	r3, [pc, #588]	@ (8002d84 <menu+0x1e34>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d902      	bls.n	8002b44 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002b3e:	4b91      	ldr	r3, [pc, #580]	@ (8002d84 <menu+0x1e34>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b44:	f000 ff50 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b48:	2104      	movs	r1, #4
 8002b4a:	4890      	ldr	r0, [pc, #576]	@ (8002d8c <menu+0x1e3c>)
 8002b4c:	f008 fa8c 	bl	800b068 <HAL_GPIO_ReadPin>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d115      	bne.n	8002b82 <menu+0x1c32>
 8002b56:	4b8e      	ldr	r3, [pc, #568]	@ (8002d90 <menu+0x1e40>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00e      	beq.n	8002b82 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002b64:	4b87      	ldr	r3, [pc, #540]	@ (8002d84 <menu+0x1e34>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b85      	ldr	r3, [pc, #532]	@ (8002d84 <menu+0x1e34>)
 8002b6e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002b70:	4b84      	ldr	r3, [pc, #528]	@ (8002d84 <menu+0x1e34>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002b78:	4b82      	ldr	r3, [pc, #520]	@ (8002d84 <menu+0x1e34>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b7e:	f000 ff33 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b82:	2108      	movs	r1, #8
 8002b84:	4881      	ldr	r0, [pc, #516]	@ (8002d8c <menu+0x1e3c>)
 8002b86:	f008 fa6f 	bl	800b068 <HAL_GPIO_ReadPin>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d118      	bne.n	8002bc2 <menu+0x1c72>
 8002b90:	4b7f      	ldr	r3, [pc, #508]	@ (8002d90 <menu+0x1e40>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	f083 0301 	eor.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d011      	beq.n	8002bc2 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002b9e:	4b79      	ldr	r3, [pc, #484]	@ (8002d84 <menu+0x1e34>)
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8002d94 <menu+0x1e44>)
 8002ba4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002ba6:	4b77      	ldr	r3, [pc, #476]	@ (8002d84 <menu+0x1e34>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d106      	bne.n	8002bbc <menu+0x1c6c>
				altLimit = 1;
 8002bae:	4b7a      	ldr	r3, [pc, #488]	@ (8002d98 <menu+0x1e48>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002bb4:	4b78      	ldr	r3, [pc, #480]	@ (8002d98 <menu+0x1e48>)
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	4b76      	ldr	r3, [pc, #472]	@ (8002d94 <menu+0x1e44>)
 8002bba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002bbc:	4b77      	ldr	r3, [pc, #476]	@ (8002d9c <menu+0x1e4c>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002bc2:	4b77      	ldr	r3, [pc, #476]	@ (8002da0 <menu+0x1e50>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b16      	cmp	r3, #22
 8002bc8:	d164      	bne.n	8002c94 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002bca:	4a76      	ldr	r2, [pc, #472]	@ (8002da4 <menu+0x1e54>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f006 ff58 	bl	8009a84 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002bd4:	4a74      	ldr	r2, [pc, #464]	@ (8002da8 <menu+0x1e58>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f006 ff53 	bl	8009a84 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002bde:	4b73      	ldr	r3, [pc, #460]	@ (8002dac <menu+0x1e5c>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	220a      	movs	r2, #10
 8002be4:	4972      	ldr	r1, [pc, #456]	@ (8002db0 <menu+0x1e60>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00b fa34 	bl	800e054 <itoa>
		lcd_print(2,16,snum);
 8002bec:	4a70      	ldr	r2, [pc, #448]	@ (8002db0 <menu+0x1e60>)
 8002bee:	2110      	movs	r1, #16
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f006 ff47 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4864      	ldr	r0, [pc, #400]	@ (8002d8c <menu+0x1e3c>)
 8002bfa:	f008 fa35 	bl	800b068 <HAL_GPIO_ReadPin>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d115      	bne.n	8002c30 <menu+0x1ce0>
 8002c04:	4b62      	ldr	r3, [pc, #392]	@ (8002d90 <menu+0x1e40>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002c12:	4b66      	ldr	r3, [pc, #408]	@ (8002dac <menu+0x1e5c>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b64      	ldr	r3, [pc, #400]	@ (8002dac <menu+0x1e5c>)
 8002c1c:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002c1e:	4b63      	ldr	r3, [pc, #396]	@ (8002dac <menu+0x1e5c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d902      	bls.n	8002c2c <menu+0x1cdc>
				yukariValfTmr = 0;
 8002c26:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <menu+0x1e5c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c2c:	f000 fedc 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c30:	2104      	movs	r1, #4
 8002c32:	4856      	ldr	r0, [pc, #344]	@ (8002d8c <menu+0x1e3c>)
 8002c34:	f008 fa18 	bl	800b068 <HAL_GPIO_ReadPin>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d115      	bne.n	8002c6a <menu+0x1d1a>
 8002c3e:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <menu+0x1e40>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	f083 0301 	eor.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002c4c:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <menu+0x1e5c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	4b55      	ldr	r3, [pc, #340]	@ (8002dac <menu+0x1e5c>)
 8002c56:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002c58:	4b54      	ldr	r3, [pc, #336]	@ (8002dac <menu+0x1e5c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d902      	bls.n	8002c66 <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002c60:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <menu+0x1e5c>)
 8002c62:	2205      	movs	r2, #5
 8002c64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c66:	f000 febf 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6a:	2108      	movs	r1, #8
 8002c6c:	4847      	ldr	r0, [pc, #284]	@ (8002d8c <menu+0x1e3c>)
 8002c6e:	f008 f9fb 	bl	800b068 <HAL_GPIO_ReadPin>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10d      	bne.n	8002c94 <menu+0x1d44>
 8002c78:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <menu+0x1e40>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f083 0301 	eor.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002c86:	4b49      	ldr	r3, [pc, #292]	@ (8002dac <menu+0x1e5c>)
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	4b42      	ldr	r3, [pc, #264]	@ (8002d94 <menu+0x1e44>)
 8002c8c:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002c8e:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <menu+0x1e4c>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002c94:	4b42      	ldr	r3, [pc, #264]	@ (8002da0 <menu+0x1e50>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b17      	cmp	r3, #23
 8002c9a:	d164      	bne.n	8002d66 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002c9c:	4a45      	ldr	r2, [pc, #276]	@ (8002db4 <menu+0x1e64>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f006 feef 	bl	8009a84 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002ca6:	4a40      	ldr	r2, [pc, #256]	@ (8002da8 <menu+0x1e58>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	2002      	movs	r0, #2
 8002cac:	f006 feea 	bl	8009a84 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002cb0:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <menu+0x1e68>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	220a      	movs	r2, #10
 8002cb6:	493e      	ldr	r1, [pc, #248]	@ (8002db0 <menu+0x1e60>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00b f9cb 	bl	800e054 <itoa>
		lcd_print(2,16,snum);
 8002cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002db0 <menu+0x1e60>)
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f006 fede 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4830      	ldr	r0, [pc, #192]	@ (8002d8c <menu+0x1e3c>)
 8002ccc:	f008 f9cc 	bl	800b068 <HAL_GPIO_ReadPin>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d115      	bne.n	8002d02 <menu+0x1db2>
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d90 <menu+0x1e40>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f083 0301 	eor.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8002ce4:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <menu+0x1e68>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <menu+0x1e68>)
 8002cee:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002cf0:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <menu+0x1e68>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d902      	bls.n	8002cfe <menu+0x1dae>
				asagiValfTmr = 0;
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <menu+0x1e68>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cfe:	f000 fe73 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d02:	2104      	movs	r1, #4
 8002d04:	4821      	ldr	r0, [pc, #132]	@ (8002d8c <menu+0x1e3c>)
 8002d06:	f008 f9af 	bl	800b068 <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d115      	bne.n	8002d3c <menu+0x1dec>
 8002d10:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <menu+0x1e40>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8002d1e:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <menu+0x1e68>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <menu+0x1e68>)
 8002d28:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002d2a:	4b23      	ldr	r3, [pc, #140]	@ (8002db8 <menu+0x1e68>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <menu+0x1de8>
		   		asagiValfTmr = 5;
 8002d32:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <menu+0x1e68>)
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d38:	f000 fe56 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3c:	2108      	movs	r1, #8
 8002d3e:	4813      	ldr	r0, [pc, #76]	@ (8002d8c <menu+0x1e3c>)
 8002d40:	f008 f992 	bl	800b068 <HAL_GPIO_ReadPin>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10d      	bne.n	8002d66 <menu+0x1e16>
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <menu+0x1e40>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8002d58:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <menu+0x1e68>)
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <menu+0x1e44>)
 8002d5e:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d60:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <menu+0x1e4c>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d66:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <menu+0x1e50>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b18      	cmp	r3, #24
 8002d6c:	f040 8093 	bne.w	8002e96 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <menu+0x1e6c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d125      	bne.n	8002dc4 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <menu+0x1e70>)
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f006 fe81 	bl	8009a84 <lcd_print>
 8002d82:	e028      	b.n	8002dd6 <menu+0x1e86>
 8002d84:	2000107f 	.word	0x2000107f
 8002d88:	2000150c 	.word	0x2000150c
 8002d8c:	40010800 	.word	0x40010800
 8002d90:	2000109b 	.word	0x2000109b
 8002d94:	20000f9c 	.word	0x20000f9c
 8002d98:	20001072 	.word	0x20001072
 8002d9c:	20001098 	.word	0x20001098
 8002da0:	2000106c 	.word	0x2000106c
 8002da4:	20001534 	.word	0x20001534
 8002da8:	2000137c 	.word	0x2000137c
 8002dac:	20001080 	.word	0x20001080
 8002db0:	2000100c 	.word	0x2000100c
 8002db4:	20001548 	.word	0x20001548
 8002db8:	20001081 	.word	0x20001081
 8002dbc:	2000107b 	.word	0x2000107b
 8002dc0:	2000155c 	.word	0x2000155c
		} else if(devirmeYuruyusSecim == 1) {
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff8 <menu+0x20a8>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d104      	bne.n	8002dd6 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8002dcc:	4a8b      	ldr	r2, [pc, #556]	@ (8002ffc <menu+0x20ac>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f006 fe57 	bl	8009a84 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002dd6:	4a8a      	ldr	r2, [pc, #552]	@ (8003000 <menu+0x20b0>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f006 fe52 	bl	8009a84 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002de0:	4b88      	ldr	r3, [pc, #544]	@ (8003004 <menu+0x20b4>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	220a      	movs	r2, #10
 8002de6:	4988      	ldr	r1, [pc, #544]	@ (8003008 <menu+0x20b8>)
 8002de8:	4618      	mov	r0, r3
 8002dea:	f00b f933 	bl	800e054 <itoa>
		lcd_print(2, 16, snum);
 8002dee:	4a86      	ldr	r2, [pc, #536]	@ (8003008 <menu+0x20b8>)
 8002df0:	2110      	movs	r1, #16
 8002df2:	2002      	movs	r0, #2
 8002df4:	f006 fe46 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4884      	ldr	r0, [pc, #528]	@ (800300c <menu+0x20bc>)
 8002dfc:	f008 f934 	bl	800b068 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d115      	bne.n	8002e32 <menu+0x1ee2>
 8002e06:	4b82      	ldr	r3, [pc, #520]	@ (8003010 <menu+0x20c0>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e14:	4b7b      	ldr	r3, [pc, #492]	@ (8003004 <menu+0x20b4>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b79      	ldr	r3, [pc, #484]	@ (8003004 <menu+0x20b4>)
 8002e1e:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e20:	4b78      	ldr	r3, [pc, #480]	@ (8003004 <menu+0x20b4>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d902      	bls.n	8002e2e <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8002e28:	4b76      	ldr	r3, [pc, #472]	@ (8003004 <menu+0x20b4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e2e:	f000 fddb 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e32:	2104      	movs	r1, #4
 8002e34:	4875      	ldr	r0, [pc, #468]	@ (800300c <menu+0x20bc>)
 8002e36:	f008 f917 	bl	800b068 <HAL_GPIO_ReadPin>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d115      	bne.n	8002e6c <menu+0x1f1c>
 8002e40:	4b73      	ldr	r3, [pc, #460]	@ (8003010 <menu+0x20c0>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f083 0301 	eor.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003004 <menu+0x20b4>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b6b      	ldr	r3, [pc, #428]	@ (8003004 <menu+0x20b4>)
 8002e58:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003004 <menu+0x20b4>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8002e62:	4b68      	ldr	r3, [pc, #416]	@ (8003004 <menu+0x20b4>)
 8002e64:	2205      	movs	r2, #5
 8002e66:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e68:	f000 fdbe 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6c:	2108      	movs	r1, #8
 8002e6e:	4867      	ldr	r0, [pc, #412]	@ (800300c <menu+0x20bc>)
 8002e70:	f008 f8fa 	bl	800b068 <HAL_GPIO_ReadPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10d      	bne.n	8002e96 <menu+0x1f46>
 8002e7a:	4b65      	ldr	r3, [pc, #404]	@ (8003010 <menu+0x20c0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8002e88:	4b5e      	ldr	r3, [pc, #376]	@ (8003004 <menu+0x20b4>)
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	4b61      	ldr	r3, [pc, #388]	@ (8003014 <menu+0x20c4>)
 8002e8e:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002e90:	4b61      	ldr	r3, [pc, #388]	@ (8003018 <menu+0x20c8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002e96:	4b61      	ldr	r3, [pc, #388]	@ (800301c <menu+0x20cc>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b19      	cmp	r3, #25
 8002e9c:	d172      	bne.n	8002f84 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8002e9e:	4b56      	ldr	r3, [pc, #344]	@ (8002ff8 <menu+0x20a8>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d105      	bne.n	8002eb2 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8003020 <menu+0x20d0>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f006 fdea 	bl	8009a84 <lcd_print>
 8002eb0:	e008      	b.n	8002ec4 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8002eb2:	4b51      	ldr	r3, [pc, #324]	@ (8002ff8 <menu+0x20a8>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d104      	bne.n	8002ec4 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8002eba:	4a5a      	ldr	r2, [pc, #360]	@ (8003024 <menu+0x20d4>)
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f006 fde0 	bl	8009a84 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8003000 <menu+0x20b0>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f006 fddb 	bl	8009a84 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002ece:	4b56      	ldr	r3, [pc, #344]	@ (8003028 <menu+0x20d8>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	220a      	movs	r2, #10
 8002ed4:	494c      	ldr	r1, [pc, #304]	@ (8003008 <menu+0x20b8>)
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f00b f8bc 	bl	800e054 <itoa>
		lcd_print(2,16,snum);
 8002edc:	4a4a      	ldr	r2, [pc, #296]	@ (8003008 <menu+0x20b8>)
 8002ede:	2110      	movs	r1, #16
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	f006 fdcf 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4848      	ldr	r0, [pc, #288]	@ (800300c <menu+0x20bc>)
 8002eea:	f008 f8bd 	bl	800b068 <HAL_GPIO_ReadPin>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d115      	bne.n	8002f20 <menu+0x1fd0>
 8002ef4:	4b46      	ldr	r3, [pc, #280]	@ (8003010 <menu+0x20c0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f083 0301 	eor.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002f02:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <menu+0x20d8>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <menu+0x20d8>)
 8002f0c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <menu+0x20d8>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d902      	bls.n	8002f1c <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8002f16:	4b44      	ldr	r3, [pc, #272]	@ (8003028 <menu+0x20d8>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f1c:	f000 fd64 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f20:	2104      	movs	r1, #4
 8002f22:	483a      	ldr	r0, [pc, #232]	@ (800300c <menu+0x20bc>)
 8002f24:	f008 f8a0 	bl	800b068 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d115      	bne.n	8002f5a <menu+0x200a>
 8002f2e:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <menu+0x20c0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <menu+0x20d8>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <menu+0x20d8>)
 8002f46:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002f48:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <menu+0x20d8>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d902      	bls.n	8002f56 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <menu+0x20d8>)
 8002f52:	2205      	movs	r2, #5
 8002f54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f56:	f000 fd47 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	482b      	ldr	r0, [pc, #172]	@ (800300c <menu+0x20bc>)
 8002f5e:	f008 f883 	bl	800b068 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10d      	bne.n	8002f84 <menu+0x2034>
 8002f68:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <menu+0x20c0>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002f76:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <menu+0x20d8>)
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	4b26      	ldr	r3, [pc, #152]	@ (8003014 <menu+0x20c4>)
 8002f7c:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002f7e:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <menu+0x20c8>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002f84:	4b25      	ldr	r3, [pc, #148]	@ (800301c <menu+0x20cc>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b1a      	cmp	r3, #26
 8002f8a:	f040 80b7 	bne.w	80030fc <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8002f8e:	4a27      	ldr	r2, [pc, #156]	@ (800302c <menu+0x20dc>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	2001      	movs	r0, #1
 8002f94:	f006 fd76 	bl	8009a84 <lcd_print>

		if(makineCalismaTmr > 99) {
 8002f98:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <menu+0x20e0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b63      	cmp	r3, #99	@ 0x63
 8002f9e:	d911      	bls.n	8002fc4 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8002fa0:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <menu+0x20b0>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f006 fd6d 	bl	8009a84 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002faa:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <menu+0x20e0>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	220a      	movs	r2, #10
 8002fb0:	4915      	ldr	r1, [pc, #84]	@ (8003008 <menu+0x20b8>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00b f84e 	bl	800e054 <itoa>
			lcd_print(2,14,snum);
 8002fb8:	4a13      	ldr	r2, [pc, #76]	@ (8003008 <menu+0x20b8>)
 8002fba:	210e      	movs	r1, #14
 8002fbc:	2002      	movs	r0, #2
 8002fbe:	f006 fd61 	bl	8009a84 <lcd_print>
 8002fc2:	e04c      	b.n	800305e <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <menu+0x20e0>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d933      	bls.n	8003034 <menu+0x20e4>
 8002fcc:	4b18      	ldr	r3, [pc, #96]	@ (8003030 <menu+0x20e0>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b63      	cmp	r3, #99	@ 0x63
 8002fd2:	d82f      	bhi.n	8003034 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <menu+0x20b0>)
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	2002      	movs	r0, #2
 8002fda:	f006 fd53 	bl	8009a84 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002fde:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <menu+0x20e0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	220a      	movs	r2, #10
 8002fe4:	4908      	ldr	r1, [pc, #32]	@ (8003008 <menu+0x20b8>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f00b f834 	bl	800e054 <itoa>
			lcd_print(2, 15, snum);
 8002fec:	4a06      	ldr	r2, [pc, #24]	@ (8003008 <menu+0x20b8>)
 8002fee:	210f      	movs	r1, #15
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f006 fd47 	bl	8009a84 <lcd_print>
 8002ff6:	e032      	b.n	800305e <menu+0x210e>
 8002ff8:	2000107b 	.word	0x2000107b
 8002ffc:	20001570 	.word	0x20001570
 8003000:	2000137c 	.word	0x2000137c
 8003004:	20001082 	.word	0x20001082
 8003008:	2000100c 	.word	0x2000100c
 800300c:	40010800 	.word	0x40010800
 8003010:	2000109b 	.word	0x2000109b
 8003014:	20000f9c 	.word	0x20000f9c
 8003018:	20001098 	.word	0x20001098
 800301c:	2000106c 	.word	0x2000106c
 8003020:	20001584 	.word	0x20001584
 8003024:	20001598 	.word	0x20001598
 8003028:	20001083 	.word	0x20001083
 800302c:	200015ac 	.word	0x200015ac
 8003030:	20001084 	.word	0x20001084
		} else if(makineCalismaTmr <=  9) {
 8003034:	4b72      	ldr	r3, [pc, #456]	@ (8003200 <menu+0x22b0>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d810      	bhi.n	800305e <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 800303c:	4a71      	ldr	r2, [pc, #452]	@ (8003204 <menu+0x22b4>)
 800303e:	2101      	movs	r1, #1
 8003040:	2002      	movs	r0, #2
 8003042:	f006 fd1f 	bl	8009a84 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003046:	4b6e      	ldr	r3, [pc, #440]	@ (8003200 <menu+0x22b0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	220a      	movs	r2, #10
 800304c:	496e      	ldr	r1, [pc, #440]	@ (8003208 <menu+0x22b8>)
 800304e:	4618      	mov	r0, r3
 8003050:	f00b f800 	bl	800e054 <itoa>
			lcd_print(2, 16, snum);
 8003054:	4a6c      	ldr	r2, [pc, #432]	@ (8003208 <menu+0x22b8>)
 8003056:	2110      	movs	r1, #16
 8003058:	2002      	movs	r0, #2
 800305a:	f006 fd13 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800305e:	2102      	movs	r1, #2
 8003060:	486a      	ldr	r0, [pc, #424]	@ (800320c <menu+0x22bc>)
 8003062:	f008 f801 	bl	800b068 <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d115      	bne.n	8003098 <menu+0x2148>
 800306c:	4b68      	ldr	r3, [pc, #416]	@ (8003210 <menu+0x22c0>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00e      	beq.n	8003098 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800307a:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <menu+0x22b0>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b5f      	ldr	r3, [pc, #380]	@ (8003200 <menu+0x22b0>)
 8003084:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003086:	4b5e      	ldr	r3, [pc, #376]	@ (8003200 <menu+0x22b0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2bb4      	cmp	r3, #180	@ 0xb4
 800308c:	d902      	bls.n	8003094 <menu+0x2144>
				makineCalismaTmr = 0;
 800308e:	4b5c      	ldr	r3, [pc, #368]	@ (8003200 <menu+0x22b0>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003094:	f000 fca8 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003098:	2104      	movs	r1, #4
 800309a:	485c      	ldr	r0, [pc, #368]	@ (800320c <menu+0x22bc>)
 800309c:	f007 ffe4 	bl	800b068 <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d115      	bne.n	80030d2 <menu+0x2182>
 80030a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003210 <menu+0x22c0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80030b4:	4b52      	ldr	r3, [pc, #328]	@ (8003200 <menu+0x22b0>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <menu+0x22b0>)
 80030be:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80030c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003200 <menu+0x22b0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2bb5      	cmp	r3, #181	@ 0xb5
 80030c6:	d902      	bls.n	80030ce <menu+0x217e>
		   		makineCalismaTmr = 180;
 80030c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <menu+0x22b0>)
 80030ca:	22b4      	movs	r2, #180	@ 0xb4
 80030cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ce:	f000 fc8b 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d2:	2108      	movs	r1, #8
 80030d4:	484d      	ldr	r0, [pc, #308]	@ (800320c <menu+0x22bc>)
 80030d6:	f007 ffc7 	bl	800b068 <HAL_GPIO_ReadPin>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10d      	bne.n	80030fc <menu+0x21ac>
 80030e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003210 <menu+0x22c0>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f083 0301 	eor.w	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80030ee:	4b44      	ldr	r3, [pc, #272]	@ (8003200 <menu+0x22b0>)
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	4b48      	ldr	r3, [pc, #288]	@ (8003214 <menu+0x22c4>)
 80030f4:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80030f6:	4b48      	ldr	r3, [pc, #288]	@ (8003218 <menu+0x22c8>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80030fc:	4b47      	ldr	r3, [pc, #284]	@ (800321c <menu+0x22cc>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b1b      	cmp	r3, #27
 8003102:	d166      	bne.n	80031d2 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003104:	4a46      	ldr	r2, [pc, #280]	@ (8003220 <menu+0x22d0>)
 8003106:	2101      	movs	r1, #1
 8003108:	2001      	movs	r0, #1
 800310a:	f006 fcbb 	bl	8009a84 <lcd_print>

		if(buzzer == 0) {
 800310e:	4b45      	ldr	r3, [pc, #276]	@ (8003224 <menu+0x22d4>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003116:	4a44      	ldr	r2, [pc, #272]	@ (8003228 <menu+0x22d8>)
 8003118:	2101      	movs	r1, #1
 800311a:	2002      	movs	r0, #2
 800311c:	f006 fcb2 	bl	8009a84 <lcd_print>
 8003120:	e008      	b.n	8003134 <menu+0x21e4>
		} else if(buzzer == 1) {
 8003122:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <menu+0x22d4>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d104      	bne.n	8003134 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 800312a:	4a40      	ldr	r2, [pc, #256]	@ (800322c <menu+0x22dc>)
 800312c:	2101      	movs	r1, #1
 800312e:	2002      	movs	r0, #2
 8003130:	f006 fca8 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2102      	movs	r1, #2
 8003136:	4835      	ldr	r0, [pc, #212]	@ (800320c <menu+0x22bc>)
 8003138:	f007 ff96 	bl	800b068 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d115      	bne.n	800316e <menu+0x221e>
 8003142:	4b33      	ldr	r3, [pc, #204]	@ (8003210 <menu+0x22c0>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <menu+0x221e>
			buzzer = buzzer + 1;
 8003150:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <menu+0x22d4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b32      	ldr	r3, [pc, #200]	@ (8003224 <menu+0x22d4>)
 800315a:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800315c:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <menu+0x22d4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d902      	bls.n	800316a <menu+0x221a>
				buzzer = 0;
 8003164:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <menu+0x22d4>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800316a:	f000 fc3d 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800316e:	2104      	movs	r1, #4
 8003170:	4826      	ldr	r0, [pc, #152]	@ (800320c <menu+0x22bc>)
 8003172:	f007 ff79 	bl	800b068 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d115      	bne.n	80031a8 <menu+0x2258>
 800317c:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <menu+0x22c0>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00e      	beq.n	80031a8 <menu+0x2258>
			buzzer = buzzer - 1;
 800318a:	4b26      	ldr	r3, [pc, #152]	@ (8003224 <menu+0x22d4>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <menu+0x22d4>)
 8003194:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <menu+0x22d4>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <menu+0x2254>
		   		buzzer = 1;
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <menu+0x22d4>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031a4:	f000 fc20 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a8:	2108      	movs	r1, #8
 80031aa:	4818      	ldr	r0, [pc, #96]	@ (800320c <menu+0x22bc>)
 80031ac:	f007 ff5c 	bl	800b068 <HAL_GPIO_ReadPin>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d10d      	bne.n	80031d2 <menu+0x2282>
 80031b6:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <menu+0x22c0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <menu+0x2282>
			eepromData[25] = buzzer;
 80031c4:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <menu+0x22d4>)
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <menu+0x22c4>)
 80031ca:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80031cc:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <menu+0x22c8>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80031d2:	4b12      	ldr	r3, [pc, #72]	@ (800321c <menu+0x22cc>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b1c      	cmp	r3, #28
 80031d8:	f040 8088 	bne.w	80032ec <menu+0x239c>
		calismaSayModu = 0;
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <menu+0x22e0>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80031e2:	4a14      	ldr	r2, [pc, #80]	@ (8003234 <menu+0x22e4>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	2001      	movs	r0, #1
 80031e8:	f006 fc4c 	bl	8009a84 <lcd_print>

		if(demoMode == 0) {
 80031ec:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <menu+0x22e8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d123      	bne.n	800323c <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80031f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <menu+0x22d8>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	2002      	movs	r0, #2
 80031fa:	f006 fc43 	bl	8009a84 <lcd_print>
 80031fe:	e026      	b.n	800324e <menu+0x22fe>
 8003200:	20001084 	.word	0x20001084
 8003204:	2000137c 	.word	0x2000137c
 8003208:	2000100c 	.word	0x2000100c
 800320c:	40010800 	.word	0x40010800
 8003210:	2000109b 	.word	0x2000109b
 8003214:	20000f9c 	.word	0x20000f9c
 8003218:	20001098 	.word	0x20001098
 800321c:	2000106c 	.word	0x2000106c
 8003220:	20000128 	.word	0x20000128
 8003224:	20001088 	.word	0x20001088
 8003228:	20001250 	.word	0x20001250
 800322c:	20001264 	.word	0x20001264
 8003230:	2000108c 	.word	0x2000108c
 8003234:	2000013c 	.word	0x2000013c
 8003238:	2000108a 	.word	0x2000108a
		} else if(demoMode == 1) {
 800323c:	4b80      	ldr	r3, [pc, #512]	@ (8003440 <menu+0x24f0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d104      	bne.n	800324e <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003244:	4a7f      	ldr	r2, [pc, #508]	@ (8003444 <menu+0x24f4>)
 8003246:	2101      	movs	r1, #1
 8003248:	2002      	movs	r0, #2
 800324a:	f006 fc1b 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800324e:	2102      	movs	r1, #2
 8003250:	487d      	ldr	r0, [pc, #500]	@ (8003448 <menu+0x24f8>)
 8003252:	f007 ff09 	bl	800b068 <HAL_GPIO_ReadPin>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d115      	bne.n	8003288 <menu+0x2338>
 800325c:	4b7b      	ldr	r3, [pc, #492]	@ (800344c <menu+0x24fc>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <menu+0x2338>
			demoMode = demoMode + 1;
 800326a:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <menu+0x24f0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4b73      	ldr	r3, [pc, #460]	@ (8003440 <menu+0x24f0>)
 8003274:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003276:	4b72      	ldr	r3, [pc, #456]	@ (8003440 <menu+0x24f0>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d902      	bls.n	8003284 <menu+0x2334>
				demoMode = 0;
 800327e:	4b70      	ldr	r3, [pc, #448]	@ (8003440 <menu+0x24f0>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003284:	f000 fbb0 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003288:	2104      	movs	r1, #4
 800328a:	486f      	ldr	r0, [pc, #444]	@ (8003448 <menu+0x24f8>)
 800328c:	f007 feec 	bl	800b068 <HAL_GPIO_ReadPin>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d115      	bne.n	80032c2 <menu+0x2372>
 8003296:	4b6d      	ldr	r3, [pc, #436]	@ (800344c <menu+0x24fc>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	f083 0301 	eor.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <menu+0x2372>
			demoMode = demoMode - 1;
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <menu+0x24f0>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b64      	ldr	r3, [pc, #400]	@ (8003440 <menu+0x24f0>)
 80032ae:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80032b0:	4b63      	ldr	r3, [pc, #396]	@ (8003440 <menu+0x24f0>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <menu+0x236e>
		   		demoMode = 1;
 80032b8:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <menu+0x24f0>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032be:	f000 fb93 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c2:	2108      	movs	r1, #8
 80032c4:	4860      	ldr	r0, [pc, #384]	@ (8003448 <menu+0x24f8>)
 80032c6:	f007 fecf 	bl	800b068 <HAL_GPIO_ReadPin>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10d      	bne.n	80032ec <menu+0x239c>
 80032d0:	4b5e      	ldr	r3, [pc, #376]	@ (800344c <menu+0x24fc>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f083 0301 	eor.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <menu+0x239c>
			eepromData[26] = demoMode;
 80032de:	4b58      	ldr	r3, [pc, #352]	@ (8003440 <menu+0x24f0>)
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003450 <menu+0x2500>)
 80032e4:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80032e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003454 <menu+0x2504>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80032ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003458 <menu+0x2508>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b1d      	cmp	r3, #29
 80032f2:	f040 80d5 	bne.w	80034a0 <menu+0x2550>
		finalCount=0;
 80032f6:	4b59      	ldr	r3, [pc, #356]	@ (800345c <menu+0x250c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 80032fc:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <menu+0x2510>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d135      	bne.n	8003370 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003304:	4a57      	ldr	r2, [pc, #348]	@ (8003464 <menu+0x2514>)
 8003306:	2101      	movs	r1, #1
 8003308:	2001      	movs	r0, #1
 800330a:	f006 fbbb 	bl	8009a84 <lcd_print>

			if(demoMode == 1) {
 800330e:	4b4c      	ldr	r3, [pc, #304]	@ (8003440 <menu+0x24f0>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d113      	bne.n	800333e <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003316:	4b54      	ldr	r3, [pc, #336]	@ (8003468 <menu+0x2518>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	4613      	mov	r3, r2
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	1a9a      	subs	r2, r3, r2
 8003322:	4b4e      	ldr	r3, [pc, #312]	@ (800345c <menu+0x250c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a4c      	ldr	r2, [pc, #304]	@ (800345c <menu+0x250c>)
 800332a:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 800332c:	4b4f      	ldr	r3, [pc, #316]	@ (800346c <menu+0x251c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b4a      	ldr	r3, [pc, #296]	@ (800345c <menu+0x250c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a48      	ldr	r2, [pc, #288]	@ (800345c <menu+0x250c>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e012      	b.n	8003364 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 800333e:	4b4c      	ldr	r3, [pc, #304]	@ (8003470 <menu+0x2520>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4613      	mov	r3, r2
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	1a9a      	subs	r2, r3, r2
 800334a:	4b44      	ldr	r3, [pc, #272]	@ (800345c <menu+0x250c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a42      	ldr	r2, [pc, #264]	@ (800345c <menu+0x250c>)
 8003352:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003354:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <menu+0x2524>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b40      	ldr	r3, [pc, #256]	@ (800345c <menu+0x250c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a3e      	ldr	r2, [pc, #248]	@ (800345c <menu+0x250c>)
 8003362:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003364:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <menu+0x250c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fa93 	bl	8003894 <displayCycleOnLCD>
 800336e:	e00d      	b.n	800338c <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003370:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <menu+0x2510>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d109      	bne.n	800338c <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003378:	4a3a      	ldr	r2, [pc, #232]	@ (8003464 <menu+0x2514>)
 800337a:	2101      	movs	r1, #1
 800337c:	2001      	movs	r0, #1
 800337e:	f006 fb81 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003382:	4a3d      	ldr	r2, [pc, #244]	@ (8003478 <menu+0x2528>)
 8003384:	2101      	movs	r1, #1
 8003386:	2002      	movs	r0, #2
 8003388:	f006 fb7c 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800338c:	2102      	movs	r1, #2
 800338e:	482e      	ldr	r0, [pc, #184]	@ (8003448 <menu+0x24f8>)
 8003390:	f007 fe6a 	bl	800b068 <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <menu+0x2476>
 800339a:	4b2c      	ldr	r3, [pc, #176]	@ (800344c <menu+0x24fc>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <menu+0x2510>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <menu+0x2510>)
 80033b2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80033b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003460 <menu+0x2510>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d902      	bls.n	80033c2 <menu+0x2472>
				calismaSayModu = 0;
 80033bc:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <menu+0x2510>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033c2:	f000 fb11 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c6:	2104      	movs	r1, #4
 80033c8:	481f      	ldr	r0, [pc, #124]	@ (8003448 <menu+0x24f8>)
 80033ca:	f007 fe4d 	bl	800b068 <HAL_GPIO_ReadPin>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d115      	bne.n	8003400 <menu+0x24b0>
 80033d4:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <menu+0x24fc>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f083 0301 	eor.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00e      	beq.n	8003400 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <menu+0x2510>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <menu+0x2510>)
 80033ec:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80033ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003460 <menu+0x2510>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <menu+0x24ac>
		   		calismaSayModu = 1;
 80033f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003460 <menu+0x2510>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033fc:	f000 faf4 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003400:	2108      	movs	r1, #8
 8003402:	4811      	ldr	r0, [pc, #68]	@ (8003448 <menu+0x24f8>)
 8003404:	f007 fe30 	bl	800b068 <HAL_GPIO_ReadPin>
 8003408:	4603      	mov	r3, r0
 800340a:	2b01      	cmp	r3, #1
 800340c:	d148      	bne.n	80034a0 <menu+0x2550>
 800340e:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <menu+0x24fc>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d041      	beq.n	80034a0 <menu+0x2550>
			if(demoMode == 1) {
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <menu+0x24f0>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d12b      	bne.n	800347c <menu+0x252c>
				eepromData[28] = 0;
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <menu+0x2500>)
 8003426:	2200      	movs	r2, #0
 8003428:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 800342a:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <menu+0x2500>)
 800342c:	2200      	movs	r2, #0
 800342e:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <menu+0x251c>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <menu+0x2518>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e02a      	b.n	8003494 <menu+0x2544>
 800343e:	bf00      	nop
 8003440:	2000108a 	.word	0x2000108a
 8003444:	20001264 	.word	0x20001264
 8003448:	40010800 	.word	0x40010800
 800344c:	2000109b 	.word	0x2000109b
 8003450:	20000f9c 	.word	0x20000f9c
 8003454:	20001098 	.word	0x20001098
 8003458:	2000106c 	.word	0x2000106c
 800345c:	20001068 	.word	0x20001068
 8003460:	2000108c 	.word	0x2000108c
 8003464:	200015c0 	.word	0x200015c0
 8003468:	20001067 	.word	0x20001067
 800346c:	20001065 	.word	0x20001065
 8003470:	20001066 	.word	0x20001066
 8003474:	20001064 	.word	0x20001064
 8003478:	200015d4 	.word	0x200015d4
			} else {
				eepromData[27] = 0;
 800347c:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <menu+0x2654>)
 800347e:	2200      	movs	r2, #0
 8003480:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003482:	4b48      	ldr	r3, [pc, #288]	@ (80035a4 <menu+0x2654>)
 8003484:	2200      	movs	r2, #0
 8003486:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003488:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <menu+0x2658>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 800348e:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <menu+0x265c>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003494:	4b46      	ldr	r3, [pc, #280]	@ (80035b0 <menu+0x2660>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800349a:	4b46      	ldr	r3, [pc, #280]	@ (80035b4 <menu+0x2664>)
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80034a0:	4b45      	ldr	r3, [pc, #276]	@ (80035b8 <menu+0x2668>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b1e      	cmp	r3, #30
 80034a6:	d166      	bne.n	8003576 <menu+0x2626>
		calismaSayModu = 0;
 80034a8:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <menu+0x2660>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80034ae:	4a43      	ldr	r2, [pc, #268]	@ (80035bc <menu+0x266c>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	2001      	movs	r0, #1
 80034b4:	f006 fae6 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80034b8:	4a41      	ldr	r2, [pc, #260]	@ (80035c0 <menu+0x2670>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	2002      	movs	r0, #2
 80034be:	f006 fae1 	bl	8009a84 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c2:	2102      	movs	r1, #2
 80034c4:	483f      	ldr	r0, [pc, #252]	@ (80035c4 <menu+0x2674>)
 80034c6:	f007 fdcf 	bl	800b068 <HAL_GPIO_ReadPin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d11a      	bne.n	8003506 <menu+0x25b6>
 80034d0:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <menu+0x2678>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d013      	beq.n	8003506 <menu+0x25b6>
			dilSecim = dilSecim + 1;
 80034de:	4b3b      	ldr	r3, [pc, #236]	@ (80035cc <menu+0x267c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <menu+0x267c>)
 80034e8:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80034ea:	4b38      	ldr	r3, [pc, #224]	@ (80035cc <menu+0x267c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d902      	bls.n	80034f8 <menu+0x25a8>
				dilSecim = 0;
 80034f2:	4b36      	ldr	r3, [pc, #216]	@ (80035cc <menu+0x267c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 80034f8:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <menu+0x267c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 ff49 	bl	8007394 <loadMenuTexts>

			bekle();
 8003502:	f000 fa71 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003506:	2104      	movs	r1, #4
 8003508:	482e      	ldr	r0, [pc, #184]	@ (80035c4 <menu+0x2674>)
 800350a:	f007 fdad 	bl	800b068 <HAL_GPIO_ReadPin>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d11a      	bne.n	800354a <menu+0x25fa>
 8003514:	4b2c      	ldr	r3, [pc, #176]	@ (80035c8 <menu+0x2678>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d013      	beq.n	800354a <menu+0x25fa>
			dilSecim = dilSecim - 1;
 8003522:	4b2a      	ldr	r3, [pc, #168]	@ (80035cc <menu+0x267c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3b01      	subs	r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <menu+0x267c>)
 800352c:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800352e:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <menu+0x267c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <menu+0x25ec>
		   		dilSecim = 1;
 8003536:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <menu+0x267c>)
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 800353c:	4b23      	ldr	r3, [pc, #140]	@ (80035cc <menu+0x267c>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 ff27 	bl	8007394 <loadMenuTexts>

			bekle();
 8003546:	f000 fa4f 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800354a:	2108      	movs	r1, #8
 800354c:	481d      	ldr	r0, [pc, #116]	@ (80035c4 <menu+0x2674>)
 800354e:	f007 fd8b 	bl	800b068 <HAL_GPIO_ReadPin>
 8003552:	4603      	mov	r3, r0
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10e      	bne.n	8003576 <menu+0x2626>
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <menu+0x2678>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	f083 0301 	eor.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <menu+0x2626>
			eepromData[33] = dilSecim;
 8003566:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <menu+0x267c>)
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <menu+0x2654>)
 800356c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003570:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <menu+0x2664>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <menu+0x2668>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b1f      	cmp	r3, #31
 800357c:	f040 8087 	bne.w	800368e <menu+0x273e>
		calismaSayModu = 0;
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <menu+0x2660>)
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003586:	4a12      	ldr	r2, [pc, #72]	@ (80035d0 <menu+0x2680>)
 8003588:	2101      	movs	r1, #1
 800358a:	2001      	movs	r0, #1
 800358c:	f006 fa7a 	bl	8009a84 <lcd_print>

		if(iotMode == 0) {
 8003590:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <menu+0x2684>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d121      	bne.n	80035dc <menu+0x268c>
			lcd_print(2, 1, pasifText);
 8003598:	4a0f      	ldr	r2, [pc, #60]	@ (80035d8 <menu+0x2688>)
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f006 fa71 	bl	8009a84 <lcd_print>
 80035a2:	e024      	b.n	80035ee <menu+0x269e>
 80035a4:	20000f9c 	.word	0x20000f9c
 80035a8:	20001064 	.word	0x20001064
 80035ac:	20001066 	.word	0x20001066
 80035b0:	2000108c 	.word	0x2000108c
 80035b4:	20001098 	.word	0x20001098
 80035b8:	2000106c 	.word	0x2000106c
 80035bc:	200015e8 	.word	0x200015e8
 80035c0:	200015fc 	.word	0x200015fc
 80035c4:	40010800 	.word	0x40010800
 80035c8:	2000109b 	.word	0x2000109b
 80035cc:	2000108d 	.word	0x2000108d
 80035d0:	20000150 	.word	0x20000150
 80035d4:	2000108b 	.word	0x2000108b
 80035d8:	20001250 	.word	0x20001250
		} else if(iotMode == 1) {
 80035dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003860 <menu+0x2910>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d104      	bne.n	80035ee <menu+0x269e>
			lcd_print(2, 1, aktifText);
 80035e4:	4a9f      	ldr	r2, [pc, #636]	@ (8003864 <menu+0x2914>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	2002      	movs	r0, #2
 80035ea:	f006 fa4b 	bl	8009a84 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ee:	2102      	movs	r1, #2
 80035f0:	489d      	ldr	r0, [pc, #628]	@ (8003868 <menu+0x2918>)
 80035f2:	f007 fd39 	bl	800b068 <HAL_GPIO_ReadPin>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d115      	bne.n	8003628 <menu+0x26d8>
 80035fc:	4b9b      	ldr	r3, [pc, #620]	@ (800386c <menu+0x291c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f083 0301 	eor.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <menu+0x26d8>
			iotMode = iotMode + 1;
 800360a:	4b95      	ldr	r3, [pc, #596]	@ (8003860 <menu+0x2910>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b93      	ldr	r3, [pc, #588]	@ (8003860 <menu+0x2910>)
 8003614:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003616:	4b92      	ldr	r3, [pc, #584]	@ (8003860 <menu+0x2910>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d902      	bls.n	8003624 <menu+0x26d4>
				iotMode = 0;
 800361e:	4b90      	ldr	r3, [pc, #576]	@ (8003860 <menu+0x2910>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003624:	f000 f9e0 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003628:	2104      	movs	r1, #4
 800362a:	488f      	ldr	r0, [pc, #572]	@ (8003868 <menu+0x2918>)
 800362c:	f007 fd1c 	bl	800b068 <HAL_GPIO_ReadPin>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d115      	bne.n	8003662 <menu+0x2712>
 8003636:	4b8d      	ldr	r3, [pc, #564]	@ (800386c <menu+0x291c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <menu+0x2712>
			iotMode = iotMode - 1;
 8003644:	4b86      	ldr	r3, [pc, #536]	@ (8003860 <menu+0x2910>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3b01      	subs	r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b84      	ldr	r3, [pc, #528]	@ (8003860 <menu+0x2910>)
 800364e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003650:	4b83      	ldr	r3, [pc, #524]	@ (8003860 <menu+0x2910>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <menu+0x270e>
		   		iotMode = 1;
 8003658:	4b81      	ldr	r3, [pc, #516]	@ (8003860 <menu+0x2910>)
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800365e:	f000 f9c3 	bl	80039e8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003662:	2108      	movs	r1, #8
 8003664:	4880      	ldr	r0, [pc, #512]	@ (8003868 <menu+0x2918>)
 8003666:	f007 fcff 	bl	800b068 <HAL_GPIO_ReadPin>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10e      	bne.n	800368e <menu+0x273e>
 8003670:	4b7e      	ldr	r3, [pc, #504]	@ (800386c <menu+0x291c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <menu+0x273e>
			eepromData[48] = iotMode;
 800367e:	4b78      	ldr	r3, [pc, #480]	@ (8003860 <menu+0x2910>)
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	4b7b      	ldr	r3, [pc, #492]	@ (8003870 <menu+0x2920>)
 8003684:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003688:	4b7a      	ldr	r3, [pc, #488]	@ (8003874 <menu+0x2924>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800368e:	4b7a      	ldr	r3, [pc, #488]	@ (8003878 <menu+0x2928>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b20      	cmp	r3, #32
 8003694:	d127      	bne.n	80036e6 <menu+0x2796>
		calismaSayModu = 0;
 8003696:	4b79      	ldr	r3, [pc, #484]	@ (800387c <menu+0x292c>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 800369c:	4a78      	ldr	r2, [pc, #480]	@ (8003880 <menu+0x2930>)
 800369e:	2101      	movs	r1, #1
 80036a0:	2001      	movs	r0, #1
 80036a2:	f006 f9ef 	bl	8009a84 <lcd_print>

		convertArrays(1);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fd f852 	bl	8000750 <convertArrays>
		HAL_Delay(50);
 80036ac:	2032      	movs	r0, #50	@ 0x32
 80036ae:	f006 ff0b 	bl	800a4c8 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80036b2:	2001      	movs	r0, #1
 80036b4:	f7fd fbf0 	bl	8000e98 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b8:	2102      	movs	r1, #2
 80036ba:	486b      	ldr	r0, [pc, #428]	@ (8003868 <menu+0x2918>)
 80036bc:	f007 fcd4 	bl	800b068 <HAL_GPIO_ReadPin>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10f      	bne.n	80036e6 <menu+0x2796>
 80036c6:	2104      	movs	r1, #4
 80036c8:	4867      	ldr	r0, [pc, #412]	@ (8003868 <menu+0x2918>)
 80036ca:	f007 fccd 	bl	800b068 <HAL_GPIO_ReadPin>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <menu+0x2796>
 80036d4:	4b65      	ldr	r3, [pc, #404]	@ (800386c <menu+0x291c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	f083 0301 	eor.w	r3, r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <menu+0x2796>
			takeMachineIDWithConfirmation();
 80036e2:	f005 fadd 	bl	8008ca0 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 80036e6:	4b64      	ldr	r3, [pc, #400]	@ (8003878 <menu+0x2928>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b21      	cmp	r3, #33	@ 0x21
 80036ec:	d12b      	bne.n	8003746 <menu+0x27f6>
		calismaSayModu = 0;
 80036ee:	4b63      	ldr	r3, [pc, #396]	@ (800387c <menu+0x292c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 80036f4:	2002      	movs	r0, #2
 80036f6:	f7fd f82b 	bl	8000750 <convertArrays>
		HAL_Delay(50);
 80036fa:	2032      	movs	r0, #50	@ 0x32
 80036fc:	f006 fee4 	bl	800a4c8 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003700:	2002      	movs	r0, #2
 8003702:	f7fd fbc9 	bl	8000e98 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003706:	2102      	movs	r1, #2
 8003708:	4857      	ldr	r0, [pc, #348]	@ (8003868 <menu+0x2918>)
 800370a:	f007 fcad 	bl	800b068 <HAL_GPIO_ReadPin>
 800370e:	4603      	mov	r3, r0
 8003710:	2b01      	cmp	r3, #1
 8003712:	d118      	bne.n	8003746 <menu+0x27f6>
 8003714:	2104      	movs	r1, #4
 8003716:	4854      	ldr	r0, [pc, #336]	@ (8003868 <menu+0x2918>)
 8003718:	f007 fca6 	bl	800b068 <HAL_GPIO_ReadPin>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d111      	bne.n	8003746 <menu+0x27f6>
 8003722:	4b52      	ldr	r3, [pc, #328]	@ (800386c <menu+0x291c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	f083 0301 	eor.w	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <menu+0x27f6>
			takeWifiSSID();
 8003730:	f005 fcce 	bl	80090d0 <takeWifiSSID>

			convertArrays(2);
 8003734:	2002      	movs	r0, #2
 8003736:	f7fd f80b 	bl	8000750 <convertArrays>
			HAL_Delay(50);
 800373a:	2032      	movs	r0, #50	@ 0x32
 800373c:	f006 fec4 	bl	800a4c8 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003740:	2002      	movs	r0, #2
 8003742:	f7fd fba9 	bl	8000e98 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003746:	4b4c      	ldr	r3, [pc, #304]	@ (8003878 <menu+0x2928>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b22      	cmp	r3, #34	@ 0x22
 800374c:	d12b      	bne.n	80037a6 <menu+0x2856>
		calismaSayModu = 0;
 800374e:	4b4b      	ldr	r3, [pc, #300]	@ (800387c <menu+0x292c>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003754:	2003      	movs	r0, #3
 8003756:	f7fc fffb 	bl	8000750 <convertArrays>
		HAL_Delay(50);
 800375a:	2032      	movs	r0, #50	@ 0x32
 800375c:	f006 feb4 	bl	800a4c8 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003760:	2003      	movs	r0, #3
 8003762:	f7fd fb99 	bl	8000e98 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003766:	2102      	movs	r1, #2
 8003768:	483f      	ldr	r0, [pc, #252]	@ (8003868 <menu+0x2918>)
 800376a:	f007 fc7d 	bl	800b068 <HAL_GPIO_ReadPin>
 800376e:	4603      	mov	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d118      	bne.n	80037a6 <menu+0x2856>
 8003774:	2104      	movs	r1, #4
 8003776:	483c      	ldr	r0, [pc, #240]	@ (8003868 <menu+0x2918>)
 8003778:	f007 fc76 	bl	800b068 <HAL_GPIO_ReadPin>
 800377c:	4603      	mov	r3, r0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d111      	bne.n	80037a6 <menu+0x2856>
 8003782:	4b3a      	ldr	r3, [pc, #232]	@ (800386c <menu+0x291c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <menu+0x2856>
			takeWifiPass();
 8003790:	f005 fe5c 	bl	800944c <takeWifiPass>

			convertArrays(3);
 8003794:	2003      	movs	r0, #3
 8003796:	f7fc ffdb 	bl	8000750 <convertArrays>
			HAL_Delay(50);
 800379a:	2032      	movs	r0, #50	@ 0x32
 800379c:	f006 fe94 	bl	800a4c8 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 80037a0:	2003      	movs	r0, #3
 80037a2:	f7fd fb79 	bl	8000e98 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 80037a6:	4b34      	ldr	r3, [pc, #208]	@ (8003878 <menu+0x2928>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b23      	cmp	r3, #35	@ 0x23
 80037ac:	d154      	bne.n	8003858 <menu+0x2908>
		lcd_print(1, 1, menudenCikisText);
 80037ae:	4a35      	ldr	r2, [pc, #212]	@ (8003884 <menu+0x2934>)
 80037b0:	2101      	movs	r1, #1
 80037b2:	2001      	movs	r0, #1
 80037b4:	f006 f966 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80037b8:	4a33      	ldr	r2, [pc, #204]	@ (8003888 <menu+0x2938>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	2002      	movs	r0, #2
 80037be:	f006 f961 	bl	8009a84 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80037c2:	2108      	movs	r1, #8
 80037c4:	4828      	ldr	r0, [pc, #160]	@ (8003868 <menu+0x2918>)
 80037c6:	f007 fc4f 	bl	800b068 <HAL_GPIO_ReadPin>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d143      	bne.n	8003858 <menu+0x2908>
			menuGiris = 0;
 80037d0:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <menu+0x293c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 80037d6:	f006 fe6d 	bl	800a4b4 <HAL_GetTick>
 80037da:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80037dc:	e007      	b.n	80037ee <menu+0x289e>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80037de:	f006 fe69 	bl	800a4b4 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037ec:	d806      	bhi.n	80037fc <menu+0x28ac>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80037ee:	4828      	ldr	r0, [pc, #160]	@ (8003890 <menu+0x2940>)
 80037f0:	f008 fa63 	bl	800bcba <HAL_I2C_GetError>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d0f1      	beq.n	80037de <menu+0x288e>
 80037fa:	e000      	b.n	80037fe <menu+0x28ae>
			        break;
 80037fc:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 80037fe:	f006 fe59 	bl	800a4b4 <HAL_GetTick>
 8003802:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003804:	e007      	b.n	8003816 <menu+0x28c6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003806:	f006 fe55 	bl	800a4b4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003814:	d806      	bhi.n	8003824 <menu+0x28d4>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003816:	481e      	ldr	r0, [pc, #120]	@ (8003890 <menu+0x2940>)
 8003818:	f008 fa42 	bl	800bca0 <HAL_I2C_GetState>
 800381c:	4603      	mov	r3, r0
 800381e:	2b20      	cmp	r3, #32
 8003820:	d1f1      	bne.n	8003806 <menu+0x28b6>
 8003822:	e000      	b.n	8003826 <menu+0x28d6>
			        break;
 8003824:	bf00      	nop
			    }
			}

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003826:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	236e      	movs	r3, #110	@ 0x6e
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <menu+0x2920>)
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	236e      	movs	r3, #110	@ 0x6e
 8003836:	2200      	movs	r2, #0
 8003838:	21a0      	movs	r1, #160	@ 0xa0
 800383a:	4815      	ldr	r0, [pc, #84]	@ (8003890 <menu+0x2940>)
 800383c:	f007 fece 	bl	800b5dc <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003840:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003844:	f006 fe40 	bl	800a4c8 <HAL_Delay>

			lcd_clear();
 8003848:	f006 f948 	bl	8009adc <lcd_clear>
			HAL_Delay(500);
 800384c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003850:	f006 fe3a 	bl	800a4c8 <HAL_Delay>
			NVIC_SystemReset();
 8003854:	f7fd fb66 	bl	8000f24 <__NVIC_SystemReset>
		}
	}
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	2000108b 	.word	0x2000108b
 8003864:	20001264 	.word	0x20001264
 8003868:	40010800 	.word	0x40010800
 800386c:	2000109b 	.word	0x2000109b
 8003870:	20000f9c 	.word	0x20000f9c
 8003874:	20001098 	.word	0x20001098
 8003878:	2000106c 	.word	0x2000106c
 800387c:	2000108c 	.word	0x2000108c
 8003880:	20001778 	.word	0x20001778
 8003884:	20001610 	.word	0x20001610
 8003888:	20001624 	.word	0x20001624
 800388c:	20001089 	.word	0x20001089
 8003890:	200017f0 	.word	0x200017f0

08003894 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 800389c:	220a      	movs	r2, #10
 800389e:	491c      	ldr	r1, [pc, #112]	@ (8003910 <displayCycleOnLCD+0x7c>)
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f00a fbd7 	bl	800e054 <itoa>

    int length = strlen(snum);
 80038a6:	481a      	ldr	r0, [pc, #104]	@ (8003910 <displayCycleOnLCD+0x7c>)
 80038a8:	f7fc fcbc 	bl	8000224 <strlen>
 80038ac:	4603      	mov	r3, r0
 80038ae:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	f1c3 0310 	rsb	r3, r3, #16
 80038b6:	0fda      	lsrs	r2, r3, #31
 80038b8:	4413      	add	r3, r2
 80038ba:	105b      	asrs	r3, r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 80038be:	f107 0308 	add.w	r3, r7, #8
 80038c2:	2210      	movs	r2, #16
 80038c4:	2120      	movs	r1, #32
 80038c6:	4618      	mov	r0, r3
 80038c8:	f00a fc08 	bl	800e0dc <memset>
    displayLine[16] = '\0'; // Null terminator
 80038cc:	2300      	movs	r3, #0
 80038ce:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d4:	e00d      	b.n	80038f2 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	4413      	add	r3, r2
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <displayCycleOnLCD+0x7c>)
 80038de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e0:	440a      	add	r2, r1
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	3328      	adds	r3, #40	@ 0x28
 80038e6:	443b      	add	r3, r7
 80038e8:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	3301      	adds	r3, #1
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dbed      	blt.n	80038d6 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	461a      	mov	r2, r3
 8003900:	2101      	movs	r1, #1
 8003902:	2002      	movs	r0, #2
 8003904:	f006 f8be 	bl	8009a84 <lcd_print>
}
 8003908:	bf00      	nop
 800390a:	3728      	adds	r7, #40	@ 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	2000100c 	.word	0x2000100c

08003914 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003924:	4a22      	ldr	r2, [pc, #136]	@ (80039b0 <lcdUpdate+0x9c>)
 8003926:	2101      	movs	r1, #1
 8003928:	2002      	movs	r0, #2
 800392a:	f006 f8ab 	bl	8009a84 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 800392e:	e03b      	b.n	80039a8 <lcdUpdate+0x94>
	} else if(y==2) {
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d105      	bne.n	8003942 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003936:	4a1e      	ldr	r2, [pc, #120]	@ (80039b0 <lcdUpdate+0x9c>)
 8003938:	2102      	movs	r1, #2
 800393a:	2002      	movs	r0, #2
 800393c:	f006 f8a2 	bl	8009a84 <lcd_print>
}
 8003940:	e032      	b.n	80039a8 <lcdUpdate+0x94>
	} else if(y==3) {
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d105      	bne.n	8003954 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003948:	4a19      	ldr	r2, [pc, #100]	@ (80039b0 <lcdUpdate+0x9c>)
 800394a:	2103      	movs	r1, #3
 800394c:	2002      	movs	r0, #2
 800394e:	f006 f899 	bl	8009a84 <lcd_print>
}
 8003952:	e029      	b.n	80039a8 <lcdUpdate+0x94>
	} else if(y==4) {
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d105      	bne.n	8003966 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800395a:	4a15      	ldr	r2, [pc, #84]	@ (80039b0 <lcdUpdate+0x9c>)
 800395c:	2104      	movs	r1, #4
 800395e:	2002      	movs	r0, #2
 8003960:	f006 f890 	bl	8009a84 <lcd_print>
}
 8003964:	e020      	b.n	80039a8 <lcdUpdate+0x94>
	} else if(y==5) {
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	2b05      	cmp	r3, #5
 800396a:	d105      	bne.n	8003978 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800396c:	4a10      	ldr	r2, [pc, #64]	@ (80039b0 <lcdUpdate+0x9c>)
 800396e:	2105      	movs	r1, #5
 8003970:	2002      	movs	r0, #2
 8003972:	f006 f887 	bl	8009a84 <lcd_print>
}
 8003976:	e017      	b.n	80039a8 <lcdUpdate+0x94>
	} else if(y==6) {
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d105      	bne.n	800398a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <lcdUpdate+0x9c>)
 8003980:	2106      	movs	r1, #6
 8003982:	2002      	movs	r0, #2
 8003984:	f006 f87e 	bl	8009a84 <lcd_print>
}
 8003988:	e00e      	b.n	80039a8 <lcdUpdate+0x94>
	} else if (y==7) {
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b07      	cmp	r3, #7
 800398e:	d10b      	bne.n	80039a8 <lcdUpdate+0x94>
		lcd_clear();
 8003990:	f006 f8a4 	bl	8009adc <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003994:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <lcdUpdate+0xa0>)
 8003996:	2101      	movs	r1, #1
 8003998:	2001      	movs	r0, #1
 800399a:	f006 f873 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 800399e:	4a06      	ldr	r2, [pc, #24]	@ (80039b8 <lcdUpdate+0xa4>)
 80039a0:	2101      	movs	r1, #1
 80039a2:	2002      	movs	r0, #2
 80039a4:	f006 f86e 	bl	8009a84 <lcd_print>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	0800e284 	.word	0x0800e284
 80039b4:	200000c4 	.word	0x200000c4
 80039b8:	200000d8 	.word	0x200000d8

080039bc <checkLCDBacklight>:

void checkLCDBacklight() {
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80039c0:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <checkLCDBacklight+0x24>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b07      	ldr	r3, [pc, #28]	@ (80039e4 <checkLCDBacklight+0x28>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b3b      	cmp	r3, #59	@ 0x3b
 80039cc:	d903      	bls.n	80039d6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f006 f8a4 	bl	8009b1c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80039d4:	e002      	b.n	80039dc <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f006 f8a0 	bl	8009b1c <lcd_backlight>
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20001044 	.word	0x20001044
 80039e4:	20001060 	.word	0x20001060

080039e8 <bekle>:

void bekle() {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	timer1=millis;
 80039ec:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <bekle+0x124>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a47      	ldr	r2, [pc, #284]	@ (8003b10 <bekle+0x128>)
 80039f2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80039f4:	e002      	b.n	80039fc <bekle+0x14>
    	butonKontrol = 1;
 80039f6:	4b47      	ldr	r3, [pc, #284]	@ (8003b14 <bekle+0x12c>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80039fc:	2101      	movs	r1, #1
 80039fe:	4846      	ldr	r0, [pc, #280]	@ (8003b18 <bekle+0x130>)
 8003a00:	f007 fb32 	bl	800b068 <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d109      	bne.n	8003a1e <bekle+0x36>
 8003a0a:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <bekle+0x124>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b40      	ldr	r3, [pc, #256]	@ (8003b10 <bekle+0x128>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d0ef      	beq.n	80039f6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a16:	e002      	b.n	8003a1e <bekle+0x36>
    	butonKontrol = 1;
 8003a18:	4b3e      	ldr	r3, [pc, #248]	@ (8003b14 <bekle+0x12c>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a1e:	2108      	movs	r1, #8
 8003a20:	483e      	ldr	r0, [pc, #248]	@ (8003b1c <bekle+0x134>)
 8003a22:	f007 fb21 	bl	800b068 <HAL_GPIO_ReadPin>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d109      	bne.n	8003a40 <bekle+0x58>
 8003a2c:	4b37      	ldr	r3, [pc, #220]	@ (8003b0c <bekle+0x124>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b37      	ldr	r3, [pc, #220]	@ (8003b10 <bekle+0x128>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d0ef      	beq.n	8003a18 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a38:	e002      	b.n	8003a40 <bekle+0x58>
    	butonKontrol = 1;
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <bekle+0x12c>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a40:	2102      	movs	r1, #2
 8003a42:	4835      	ldr	r0, [pc, #212]	@ (8003b18 <bekle+0x130>)
 8003a44:	f007 fb10 	bl	800b068 <HAL_GPIO_ReadPin>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d109      	bne.n	8003a62 <bekle+0x7a>
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <bekle+0x124>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b2f      	ldr	r3, [pc, #188]	@ (8003b10 <bekle+0x128>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d0ef      	beq.n	8003a3a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a5a:	e002      	b.n	8003a62 <bekle+0x7a>
    	butonKontrol = 1;
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b14 <bekle+0x12c>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a62:	2104      	movs	r1, #4
 8003a64:	482c      	ldr	r0, [pc, #176]	@ (8003b18 <bekle+0x130>)
 8003a66:	f007 faff 	bl	800b068 <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d109      	bne.n	8003a84 <bekle+0x9c>
 8003a70:	4b26      	ldr	r3, [pc, #152]	@ (8003b0c <bekle+0x124>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <bekle+0x128>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d0ef      	beq.n	8003a5c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a7c:	e002      	b.n	8003a84 <bekle+0x9c>
    	butonKontrol = 1;
 8003a7e:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <bekle+0x12c>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a84:	2108      	movs	r1, #8
 8003a86:	4824      	ldr	r0, [pc, #144]	@ (8003b18 <bekle+0x130>)
 8003a88:	f007 faee 	bl	800b068 <HAL_GPIO_ReadPin>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d109      	bne.n	8003aa6 <bekle+0xbe>
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <bekle+0x124>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <bekle+0x128>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d0ef      	beq.n	8003a7e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003a9e:	e002      	b.n	8003aa6 <bekle+0xbe>
    	butonKontrol = 1;
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <bekle+0x12c>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003aa6:	2180      	movs	r1, #128	@ 0x80
 8003aa8:	481c      	ldr	r0, [pc, #112]	@ (8003b1c <bekle+0x134>)
 8003aaa:	f007 fadd 	bl	800b068 <HAL_GPIO_ReadPin>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <bekle+0xe0>
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <bekle+0x124>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <bekle+0x128>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0ef      	beq.n	8003aa0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ac0:	e002      	b.n	8003ac8 <bekle+0xe0>
    	butonKontrol = 1;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <bekle+0x12c>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ac8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003acc:	4813      	ldr	r0, [pc, #76]	@ (8003b1c <bekle+0x134>)
 8003ace:	f007 facb 	bl	800b068 <HAL_GPIO_ReadPin>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <bekle+0x104>
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <bekle+0x124>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <bekle+0x128>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d0ee      	beq.n	8003ac2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ae4:	e002      	b.n	8003aec <bekle+0x104>
    	butonKontrol = 1;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <bekle+0x12c>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003af0:	480a      	ldr	r0, [pc, #40]	@ (8003b1c <bekle+0x134>)
 8003af2:	f007 fab9 	bl	800b068 <HAL_GPIO_ReadPin>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <bekle+0x120>
 8003afc:	4b03      	ldr	r3, [pc, #12]	@ (8003b0c <bekle+0x124>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b03      	ldr	r3, [pc, #12]	@ (8003b10 <bekle+0x128>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d0ee      	beq.n	8003ae6 <bekle+0xfe>
    }

}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20001044 	.word	0x20001044
 8003b10:	2000104c 	.word	0x2000104c
 8003b14:	2000109b 	.word	0x2000109b
 8003b18:	40010800 	.word	0x40010800
 8003b1c:	40011000 	.word	0x40011000

08003b20 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003b24:	2101      	movs	r1, #1
 8003b26:	4815      	ldr	r0, [pc, #84]	@ (8003b7c <buttonCheck+0x5c>)
 8003b28:	f007 fa9e 	bl	800b068 <HAL_GPIO_ReadPin>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d01b      	beq.n	8003b6a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003b32:	2108      	movs	r1, #8
 8003b34:	4812      	ldr	r0, [pc, #72]	@ (8003b80 <buttonCheck+0x60>)
 8003b36:	f007 fa97 	bl	800b068 <HAL_GPIO_ReadPin>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d014      	beq.n	8003b6a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003b40:	2102      	movs	r1, #2
 8003b42:	480e      	ldr	r0, [pc, #56]	@ (8003b7c <buttonCheck+0x5c>)
 8003b44:	f007 fa90 	bl	800b068 <HAL_GPIO_ReadPin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d00d      	beq.n	8003b6a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003b4e:	2104      	movs	r1, #4
 8003b50:	480a      	ldr	r0, [pc, #40]	@ (8003b7c <buttonCheck+0x5c>)
 8003b52:	f007 fa89 	bl	800b068 <HAL_GPIO_ReadPin>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d006      	beq.n	8003b6a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	4807      	ldr	r0, [pc, #28]	@ (8003b7c <buttonCheck+0x5c>)
 8003b60:	f007 fa82 	bl	800b068 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d104      	bne.n	8003b74 <buttonCheck+0x54>
		backLightTimer = 0;
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <buttonCheck+0x64>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
		return 1;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <buttonCheck+0x56>
	}
	return 0;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40010800 	.word	0x40010800
 8003b80:	40011000 	.word	0x40011000
 8003b84:	20001060 	.word	0x20001060

08003b88 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <checkBasincSalteri+0x54>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <checkBasincSalteri+0x12>
		basincVar=1;
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <checkBasincSalteri+0x58>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <checkBasincSalteri+0x54>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d119      	bne.n	8003bd6 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ba6:	480f      	ldr	r0, [pc, #60]	@ (8003be4 <checkBasincSalteri+0x5c>)
 8003ba8:	f007 fa5e 	bl	800b068 <HAL_GPIO_ReadPin>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <checkBasincSalteri+0x60>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <checkBasincSalteri+0x64>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d90a      	bls.n	8003bd6 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003bc0:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <checkBasincSalteri+0x58>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003bc6:	e006      	b.n	8003bd6 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003bc8:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <checkBasincSalteri+0x60>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a07      	ldr	r2, [pc, #28]	@ (8003bec <checkBasincSalteri+0x64>)
 8003bce:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <checkBasincSalteri+0x58>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20001073 	.word	0x20001073
 8003be0:	2000106f 	.word	0x2000106f
 8003be4:	40011000 	.word	0x40011000
 8003be8:	20001044 	.word	0x20001044
 8003bec:	2000105c 	.word	0x2000105c

08003bf0 <checkBasGonder>:

void checkBasGonder() {
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <checkBasGonder+0x74>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10b      	bne.n	8003c14 <checkBasGonder+0x24>
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <checkBasGonder+0x78>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <checkBasGonder+0x24>
 8003c04:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <checkBasGonder+0x7c>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <checkBasGonder+0x80>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e009      	b.n	8003c28 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003c14:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <checkBasGonder+0x78>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003c22:	4b13      	ldr	r3, [pc, #76]	@ (8003c70 <checkBasGonder+0x80>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003c28:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <checkBasGonder+0x74>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10b      	bne.n	8003c48 <checkBasGonder+0x58>
 8003c30:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <checkBasGonder+0x84>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <checkBasGonder+0x58>
 8003c38:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <checkBasGonder+0x7c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003c40:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <checkBasGonder+0x88>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003c46:	e009      	b.n	8003c5c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <checkBasGonder+0x84>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	f083 0301 	eor.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003c56:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <checkBasGonder+0x88>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	2000106d 	.word	0x2000106d
 8003c68:	200010a1 	.word	0x200010a1
 8003c6c:	2000107b 	.word	0x2000107b
 8003c70:	200010a8 	.word	0x200010a8
 8003c74:	200010a4 	.word	0x200010a4
 8003c78:	200010a9 	.word	0x200010a9

08003c7c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003c80:	4b24      	ldr	r3, [pc, #144]	@ (8003d14 <checkKapiSecimleri+0x98>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003c88:	4b23      	ldr	r3, [pc, #140]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003c8e:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <checkKapiSecimleri+0x98>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d10e      	bne.n	8003cb4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003c96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c9a:	4820      	ldr	r0, [pc, #128]	@ (8003d1c <checkKapiSecimleri+0xa0>)
 8003c9c:	f007 f9e4 	bl	800b068 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e002      	b.n	8003cb4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003cae:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003cb4:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <checkKapiSecimleri+0x98>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d10e      	bne.n	8003cda <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cc0:	4816      	ldr	r0, [pc, #88]	@ (8003d1c <checkKapiSecimleri+0xa0>)
 8003cc2:	f007 f9d1 	bl	800b068 <HAL_GPIO_ReadPin>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e002      	b.n	8003cda <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003cd4:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003cda:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <checkKapiSecimleri+0x98>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d116      	bne.n	8003d10 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ce6:	480d      	ldr	r0, [pc, #52]	@ (8003d1c <checkKapiSecimleri+0xa0>)
 8003ce8:	f007 f9be 	bl	800b068 <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <checkKapiSecimleri+0x8e>
 8003cf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cf6:	4809      	ldr	r0, [pc, #36]	@ (8003d1c <checkKapiSecimleri+0xa0>)
 8003cf8:	f007 f9b6 	bl	800b068 <HAL_GPIO_ReadPin>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8003d02:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003d08:	e002      	b.n	8003d10 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003d0a:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <checkKapiSecimleri+0x9c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20001074 	.word	0x20001074
 8003d18:	200010be 	.word	0x200010be
 8003d1c:	40010800 	.word	0x40010800

08003d20 <checkAktifCalisma>:

void checkAktifCalisma() {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003d24:	4b66      	ldr	r3, [pc, #408]	@ (8003ec0 <checkAktifCalisma+0x1a0>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f041 83ab 	bne.w	8005484 <checkAktifCalisma+0x1764>
 8003d2e:	4b65      	ldr	r3, [pc, #404]	@ (8003ec4 <checkAktifCalisma+0x1a4>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f041 83a6 	bne.w	8005484 <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003d38:	4b63      	ldr	r3, [pc, #396]	@ (8003ec8 <checkAktifCalisma+0x1a8>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11a      	bne.n	8003d76 <checkAktifCalisma+0x56>
 8003d40:	4b62      	ldr	r3, [pc, #392]	@ (8003ecc <checkAktifCalisma+0x1ac>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d116      	bne.n	8003d76 <checkAktifCalisma+0x56>
 8003d48:	4b61      	ldr	r3, [pc, #388]	@ (8003ed0 <checkAktifCalisma+0x1b0>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <checkAktifCalisma+0x46>
 8003d50:	4b60      	ldr	r3, [pc, #384]	@ (8003ed4 <checkAktifCalisma+0x1b4>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f083 0301 	eor.w	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <checkAktifCalisma+0x46>
 8003d5e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed8 <checkAktifCalisma+0x1b8>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d007      	beq.n	8003d76 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003d66:	4b5d      	ldr	r3, [pc, #372]	@ (8003edc <checkAktifCalisma+0x1bc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01c      	beq.n	8003da8 <checkAktifCalisma+0x88>
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee0 <checkAktifCalisma+0x1c0>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d118      	bne.n	8003da8 <checkAktifCalisma+0x88>
 8003d76:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee4 <checkAktifCalisma+0x1c4>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <checkAktifCalisma+0x66>
 8003d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee8 <checkAktifCalisma+0x1c8>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <checkAktifCalisma+0x88>
 8003d86:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <checkAktifCalisma+0x1cc>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d94:	4856      	ldr	r0, [pc, #344]	@ (8003ef0 <checkAktifCalisma+0x1d0>)
 8003d96:	f007 f97e 	bl	800b096 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003d9a:	4b56      	ldr	r3, [pc, #344]	@ (8003ef4 <checkAktifCalisma+0x1d4>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003da0:	4b55      	ldr	r3, [pc, #340]	@ (8003ef8 <checkAktifCalisma+0x1d8>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e008      	b.n	8003dba <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003da8:	2200      	movs	r2, #0
 8003daa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003dae:	4850      	ldr	r0, [pc, #320]	@ (8003ef0 <checkAktifCalisma+0x1d0>)
 8003db0:	f007 f971 	bl	800b096 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8003db4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef4 <checkAktifCalisma+0x1d4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003dba:	4b42      	ldr	r3, [pc, #264]	@ (8003ec4 <checkAktifCalisma+0x1a4>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d164      	bne.n	8003e8c <checkAktifCalisma+0x16c>
 8003dc2:	4b49      	ldr	r3, [pc, #292]	@ (8003ee8 <checkAktifCalisma+0x1c8>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <checkAktifCalisma+0xb2>
 8003dca:	4b46      	ldr	r3, [pc, #280]	@ (8003ee4 <checkAktifCalisma+0x1c4>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d05c      	beq.n	8003e8c <checkAktifCalisma+0x16c>
 8003dd2:	4b46      	ldr	r3, [pc, #280]	@ (8003eec <checkAktifCalisma+0x1cc>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d058      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003dda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dde:	4844      	ldr	r0, [pc, #272]	@ (8003ef0 <checkAktifCalisma+0x1d0>)
 8003de0:	f007 f942 	bl	800b068 <HAL_GPIO_ReadPin>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <checkAktifCalisma+0xd2>
 8003dea:	4b44      	ldr	r3, [pc, #272]	@ (8003efc <checkAktifCalisma+0x1dc>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04c      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8003df2:	2102      	movs	r1, #2
 8003df4:	4842      	ldr	r0, [pc, #264]	@ (8003f00 <checkAktifCalisma+0x1e0>)
 8003df6:	f007 f937 	bl	800b068 <HAL_GPIO_ReadPin>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d145      	bne.n	8003e8c <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003e00:	4b40      	ldr	r3, [pc, #256]	@ (8003f04 <checkAktifCalisma+0x1e4>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d041      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003e08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e0c:	4838      	ldr	r0, [pc, #224]	@ (8003ef0 <checkAktifCalisma+0x1d0>)
 8003e0e:	f007 f92b 	bl	800b068 <HAL_GPIO_ReadPin>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10e      	bne.n	8003e36 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003e18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e1c:	4834      	ldr	r0, [pc, #208]	@ (8003ef0 <checkAktifCalisma+0x1d0>)
 8003e1e:	f007 f923 	bl	800b068 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003e28:	2140      	movs	r1, #64	@ 0x40
 8003e2a:	4835      	ldr	r0, [pc, #212]	@ (8003f00 <checkAktifCalisma+0x1e0>)
 8003e2c:	f007 f91c 	bl	800b068 <HAL_GPIO_ReadPin>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d003      	beq.n	8003e3e <checkAktifCalisma+0x11e>
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <checkAktifCalisma+0x1a8>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d026      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8003e3e:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <checkAktifCalisma+0x1b0>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	f083 0301 	eor.w	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01f      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ecc <checkAktifCalisma+0x1ac>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	f083 0301 	eor.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <checkAktifCalisma+0x1bc>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	f083 0301 	eor.w	r3, r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d011      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8003e68:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <checkAktifCalisma+0x1e8>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8003e76:	4b25      	ldr	r3, [pc, #148]	@ (8003f0c <checkAktifCalisma+0x1ec>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8003e84:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <checkAktifCalisma+0x1a8>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <checkAktifCalisma+0x1a8>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <checkAktifCalisma+0x1a8>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d03c      	beq.n	8003f14 <checkAktifCalisma+0x1f4>
 8003e9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e9e:	4818      	ldr	r0, [pc, #96]	@ (8003f00 <checkAktifCalisma+0x1e0>)
 8003ea0:	f007 f8e2 	bl	800b068 <HAL_GPIO_ReadPin>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d134      	bne.n	8003f14 <checkAktifCalisma+0x1f4>
 8003eaa:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <checkAktifCalisma+0x1f0>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d030      	beq.n	8003f14 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003eb8:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <checkAktifCalisma+0x1d0>)
 8003eba:	f007 f8ec 	bl	800b096 <HAL_GPIO_WritePin>
 8003ebe:	e02f      	b.n	8003f20 <checkAktifCalisma+0x200>
 8003ec0:	2000108a 	.word	0x2000108a
 8003ec4:	20001089 	.word	0x20001089
 8003ec8:	200010a1 	.word	0x200010a1
 8003ecc:	200010a2 	.word	0x200010a2
 8003ed0:	200010a4 	.word	0x200010a4
 8003ed4:	2000109c 	.word	0x2000109c
 8003ed8:	2000107f 	.word	0x2000107f
 8003edc:	200010a3 	.word	0x200010a3
 8003ee0:	2000107e 	.word	0x2000107e
 8003ee4:	200010bd 	.word	0x200010bd
 8003ee8:	200010d0 	.word	0x200010d0
 8003eec:	200010be 	.word	0x200010be
 8003ef0:	40010c00 	.word	0x40010c00
 8003ef4:	200010bf 	.word	0x200010bf
 8003ef8:	200010ab 	.word	0x200010ab
 8003efc:	200010a8 	.word	0x200010a8
 8003f00:	40011000 	.word	0x40011000
 8003f04:	2000106f 	.word	0x2000106f
 8003f08:	200010a6 	.word	0x200010a6
 8003f0c:	200010a7 	.word	0x200010a7
 8003f10:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f1a:	4865      	ldr	r0, [pc, #404]	@ (80040b0 <checkAktifCalisma+0x390>)
 8003f1c:	f007 f8bb 	bl	800b096 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8003f20:	4b64      	ldr	r3, [pc, #400]	@ (80040b4 <checkAktifCalisma+0x394>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <checkAktifCalisma+0x230>
 8003f28:	4b63      	ldr	r3, [pc, #396]	@ (80040b8 <checkAktifCalisma+0x398>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d007      	beq.n	8003f40 <checkAktifCalisma+0x220>
 8003f30:	4b61      	ldr	r3, [pc, #388]	@ (80040b8 <checkAktifCalisma+0x398>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d003      	beq.n	8003f40 <checkAktifCalisma+0x220>
 8003f38:	4b60      	ldr	r3, [pc, #384]	@ (80040bc <checkAktifCalisma+0x39c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d107      	bne.n	8003f50 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8003f40:	2201      	movs	r2, #1
 8003f42:	2104      	movs	r1, #4
 8003f44:	485a      	ldr	r0, [pc, #360]	@ (80040b0 <checkAktifCalisma+0x390>)
 8003f46:	f007 f8a6 	bl	800b096 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80040c0 <checkAktifCalisma+0x3a0>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8003f50:	4b5b      	ldr	r3, [pc, #364]	@ (80040c0 <checkAktifCalisma+0x3a0>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d033      	beq.n	8003fc0 <checkAktifCalisma+0x2a0>
 8003f58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f5c:	4854      	ldr	r0, [pc, #336]	@ (80040b0 <checkAktifCalisma+0x390>)
 8003f5e:	f007 f883 	bl	800b068 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d106      	bne.n	8003f76 <checkAktifCalisma+0x256>
 8003f68:	4b56      	ldr	r3, [pc, #344]	@ (80040c4 <checkAktifCalisma+0x3a4>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <checkAktifCalisma+0x264>
 8003f76:	2102      	movs	r1, #2
 8003f78:	4853      	ldr	r0, [pc, #332]	@ (80040c8 <checkAktifCalisma+0x3a8>)
 8003f7a:	f007 f875 	bl	800b068 <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d11d      	bne.n	8003fc0 <checkAktifCalisma+0x2a0>
 8003f84:	4b51      	ldr	r3, [pc, #324]	@ (80040cc <checkAktifCalisma+0x3ac>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <checkAktifCalisma+0x274>
 8003f8c:	4b50      	ldr	r3, [pc, #320]	@ (80040d0 <checkAktifCalisma+0x3b0>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <checkAktifCalisma+0x2a0>
 8003f94:	4b4f      	ldr	r3, [pc, #316]	@ (80040d4 <checkAktifCalisma+0x3b4>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <checkAktifCalisma+0x2a0>
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80040d8 <checkAktifCalisma+0x3b8>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <checkAktifCalisma+0x2a0>
 8003fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80040dc <checkAktifCalisma+0x3bc>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f083 0301 	eor.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80040e0 <checkAktifCalisma+0x3c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a4b      	ldr	r2, [pc, #300]	@ (80040e4 <checkAktifCalisma+0x3c4>)
 8003fb8:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8003fba:	4b48      	ldr	r3, [pc, #288]	@ (80040dc <checkAktifCalisma+0x3bc>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8003fc0:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <checkAktifCalisma+0x3c0>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <checkAktifCalisma+0x3c4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <checkAktifCalisma+0x3c8>)
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d303      	bcc.n	8003fda <checkAktifCalisma+0x2ba>
 8003fd2:	4b42      	ldr	r3, [pc, #264]	@ (80040dc <checkAktifCalisma+0x3bc>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <checkAktifCalisma+0x2ec>
 8003fda:	4b3c      	ldr	r3, [pc, #240]	@ (80040cc <checkAktifCalisma+0x3ac>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	f083 0301 	eor.w	r3, r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <checkAktifCalisma+0x2d6>
 8003fe8:	4b39      	ldr	r3, [pc, #228]	@ (80040d0 <checkAktifCalisma+0x3b0>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f083 0301 	eor.w	r3, r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <checkAktifCalisma+0x2ec>
 8003ff6:	4b37      	ldr	r3, [pc, #220]	@ (80040d4 <checkAktifCalisma+0x3b4>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	f083 0301 	eor.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <checkAktifCalisma+0x2ec>
 8004004:	4b34      	ldr	r3, [pc, #208]	@ (80040d8 <checkAktifCalisma+0x3b8>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800400c:	2200      	movs	r2, #0
 800400e:	2104      	movs	r1, #4
 8004010:	4827      	ldr	r0, [pc, #156]	@ (80040b0 <checkAktifCalisma+0x390>)
 8004012:	f007 f840 	bl	800b096 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004016:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <checkAktifCalisma+0x3a0>)
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800401c:	4b2f      	ldr	r3, [pc, #188]	@ (80040dc <checkAktifCalisma+0x3bc>)
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8004022:	4b32      	ldr	r3, [pc, #200]	@ (80040ec <checkAktifCalisma+0x3cc>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <checkAktifCalisma+0x310>
					cerceveVar=1;
 800402a:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <checkAktifCalisma+0x3d0>)
 800402c:	2201      	movs	r2, #1
 800402e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004030:	4b2e      	ldr	r3, [pc, #184]	@ (80040ec <checkAktifCalisma+0x3cc>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d116      	bne.n	8004066 <checkAktifCalisma+0x346>
 8004038:	4b2e      	ldr	r3, [pc, #184]	@ (80040f4 <checkAktifCalisma+0x3d4>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d112      	bne.n	8004066 <checkAktifCalisma+0x346>
 8004040:	2101      	movs	r1, #1
 8004042:	4821      	ldr	r0, [pc, #132]	@ (80040c8 <checkAktifCalisma+0x3a8>)
 8004044:	f007 f810 	bl	800b068 <HAL_GPIO_ReadPin>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <checkAktifCalisma+0x346>
 800404e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004052:	4817      	ldr	r0, [pc, #92]	@ (80040b0 <checkAktifCalisma+0x390>)
 8004054:	f007 f808 	bl	800b068 <HAL_GPIO_ReadPin>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <checkAktifCalisma+0x346>
					cerceveVar=1;
 800405e:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <checkAktifCalisma+0x3d0>)
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e011      	b.n	800408a <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004066:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <checkAktifCalisma+0x3cc>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10d      	bne.n	800408a <checkAktifCalisma+0x36a>
 800406e:	2101      	movs	r1, #1
 8004070:	4815      	ldr	r0, [pc, #84]	@ (80040c8 <checkAktifCalisma+0x3a8>)
 8004072:	f006 fff9 	bl	800b068 <HAL_GPIO_ReadPin>
 8004076:	4603      	mov	r3, r0
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <checkAktifCalisma+0x36a>
 800407c:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <checkAktifCalisma+0x3d4>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004084:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <checkAktifCalisma+0x3d0>)
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800408a:	4b18      	ldr	r3, [pc, #96]	@ (80040ec <checkAktifCalisma+0x3cc>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d135      	bne.n	80040fe <checkAktifCalisma+0x3de>
 8004092:	4b18      	ldr	r3, [pc, #96]	@ (80040f4 <checkAktifCalisma+0x3d4>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d131      	bne.n	80040fe <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800409a:	2101      	movs	r1, #1
 800409c:	480a      	ldr	r0, [pc, #40]	@ (80040c8 <checkAktifCalisma+0x3a8>)
 800409e:	f006 ffe3 	bl	800b068 <HAL_GPIO_ReadPin>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d127      	bne.n	80040f8 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <checkAktifCalisma+0x3d0>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e026      	b.n	80040fe <checkAktifCalisma+0x3de>
 80040b0:	40010c00 	.word	0x40010c00
 80040b4:	200010a1 	.word	0x200010a1
 80040b8:	2000107b 	.word	0x2000107b
 80040bc:	2000107f 	.word	0x2000107f
 80040c0:	200010a5 	.word	0x200010a5
 80040c4:	200010a8 	.word	0x200010a8
 80040c8:	40011000 	.word	0x40011000
 80040cc:	200010bd 	.word	0x200010bd
 80040d0:	200010d0 	.word	0x200010d0
 80040d4:	200010be 	.word	0x200010be
 80040d8:	2000106f 	.word	0x2000106f
 80040dc:	2000109d 	.word	0x2000109d
 80040e0:	20001044 	.word	0x20001044
 80040e4:	20001050 	.word	0x20001050
 80040e8:	20001080 	.word	0x20001080
 80040ec:	20001070 	.word	0x20001070
 80040f0:	200010c2 	.word	0x200010c2
 80040f4:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 80040f8:	4b7f      	ldr	r3, [pc, #508]	@ (80042f8 <checkAktifCalisma+0x5d8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80040fe:	4b7f      	ldr	r3, [pc, #508]	@ (80042fc <checkAktifCalisma+0x5dc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d17c      	bne.n	8004200 <checkAktifCalisma+0x4e0>
 8004106:	4b7e      	ldr	r3, [pc, #504]	@ (8004300 <checkAktifCalisma+0x5e0>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d078      	beq.n	8004200 <checkAktifCalisma+0x4e0>
 800410e:	4b7d      	ldr	r3, [pc, #500]	@ (8004304 <checkAktifCalisma+0x5e4>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d074      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004116:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800411a:	487b      	ldr	r0, [pc, #492]	@ (8004308 <checkAktifCalisma+0x5e8>)
 800411c:	f006 ffa4 	bl	800b068 <HAL_GPIO_ReadPin>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <checkAktifCalisma+0x40e>
 8004126:	4b79      	ldr	r3, [pc, #484]	@ (800430c <checkAktifCalisma+0x5ec>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d068      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800412e:	4b72      	ldr	r3, [pc, #456]	@ (80042f8 <checkAktifCalisma+0x5d8>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d064      	beq.n	8004200 <checkAktifCalisma+0x4e0>
 8004136:	4b76      	ldr	r3, [pc, #472]	@ (8004310 <checkAktifCalisma+0x5f0>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	f083 0301 	eor.w	r3, r3, #1
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05d      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004144:	2104      	movs	r1, #4
 8004146:	4873      	ldr	r0, [pc, #460]	@ (8004314 <checkAktifCalisma+0x5f4>)
 8004148:	f006 ff8e 	bl	800b068 <HAL_GPIO_ReadPin>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <checkAktifCalisma+0x43a>
 8004152:	4b71      	ldr	r3, [pc, #452]	@ (8004318 <checkAktifCalisma+0x5f8>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d152      	bne.n	8004200 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800415a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800415e:	486a      	ldr	r0, [pc, #424]	@ (8004308 <checkAktifCalisma+0x5e8>)
 8004160:	f006 ff82 	bl	800b068 <HAL_GPIO_ReadPin>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10e      	bne.n	8004188 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800416a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800416e:	4866      	ldr	r0, [pc, #408]	@ (8004308 <checkAktifCalisma+0x5e8>)
 8004170:	f006 ff7a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d106      	bne.n	8004188 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800417a:	2140      	movs	r1, #64	@ 0x40
 800417c:	4865      	ldr	r0, [pc, #404]	@ (8004314 <checkAktifCalisma+0x5f4>)
 800417e:	f006 ff73 	bl	800b068 <HAL_GPIO_ReadPin>
 8004182:	4603      	mov	r3, r0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d003      	beq.n	8004190 <checkAktifCalisma+0x470>
 8004188:	4b64      	ldr	r3, [pc, #400]	@ (800431c <checkAktifCalisma+0x5fc>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d037      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004190:	4b63      	ldr	r3, [pc, #396]	@ (8004320 <checkAktifCalisma+0x600>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f083 0301 	eor.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d030      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800419e:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <checkAktifCalisma+0x604>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	f083 0301 	eor.w	r3, r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d029      	beq.n	8004200 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80041ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004328 <checkAktifCalisma+0x608>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f083 0301 	eor.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d022      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80041ba:	4b5c      	ldr	r3, [pc, #368]	@ (800432c <checkAktifCalisma+0x60c>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	f083 0301 	eor.w	r3, r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01b      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80041c8:	4b59      	ldr	r3, [pc, #356]	@ (8004330 <checkAktifCalisma+0x610>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d014      	beq.n	8004200 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80041d6:	4b57      	ldr	r3, [pc, #348]	@ (8004334 <checkAktifCalisma+0x614>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80041e4:	2201      	movs	r2, #1
 80041e6:	2102      	movs	r1, #2
 80041e8:	4847      	ldr	r0, [pc, #284]	@ (8004308 <checkAktifCalisma+0x5e8>)
 80041ea:	f006 ff54 	bl	800b096 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80041ee:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <checkAktifCalisma+0x5fc>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80041f4:	4b50      	ldr	r3, [pc, #320]	@ (8004338 <checkAktifCalisma+0x618>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80041fa:	4b50      	ldr	r3, [pc, #320]	@ (800433c <checkAktifCalisma+0x61c>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004200:	4b46      	ldr	r3, [pc, #280]	@ (800431c <checkAktifCalisma+0x5fc>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d033      	beq.n	8004270 <checkAktifCalisma+0x550>
 8004208:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800420c:	483e      	ldr	r0, [pc, #248]	@ (8004308 <checkAktifCalisma+0x5e8>)
 800420e:	f006 ff2b 	bl	800b068 <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d106      	bne.n	8004226 <checkAktifCalisma+0x506>
 8004218:	4b3c      	ldr	r3, [pc, #240]	@ (800430c <checkAktifCalisma+0x5ec>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <checkAktifCalisma+0x51c>
 8004226:	2104      	movs	r1, #4
 8004228:	483a      	ldr	r0, [pc, #232]	@ (8004314 <checkAktifCalisma+0x5f4>)
 800422a:	f006 ff1d 	bl	800b068 <HAL_GPIO_ReadPin>
 800422e:	4603      	mov	r3, r0
 8004230:	2b01      	cmp	r3, #1
 8004232:	d11d      	bne.n	8004270 <checkAktifCalisma+0x550>
 8004234:	4b38      	ldr	r3, [pc, #224]	@ (8004318 <checkAktifCalisma+0x5f8>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d019      	beq.n	8004270 <checkAktifCalisma+0x550>
 800423c:	4b30      	ldr	r3, [pc, #192]	@ (8004300 <checkAktifCalisma+0x5e0>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <checkAktifCalisma+0x550>
 8004244:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <checkAktifCalisma+0x5e4>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <checkAktifCalisma+0x550>
 800424c:	4b2a      	ldr	r3, [pc, #168]	@ (80042f8 <checkAktifCalisma+0x5d8>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <checkAktifCalisma+0x550>
 8004254:	4b3a      	ldr	r3, [pc, #232]	@ (8004340 <checkAktifCalisma+0x620>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <checkAktifCalisma+0x550>
					timer2=millis;
 8004262:	4b38      	ldr	r3, [pc, #224]	@ (8004344 <checkAktifCalisma+0x624>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a38      	ldr	r2, [pc, #224]	@ (8004348 <checkAktifCalisma+0x628>)
 8004268:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800426a:	4b35      	ldr	r3, [pc, #212]	@ (8004340 <checkAktifCalisma+0x620>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004270:	4b34      	ldr	r3, [pc, #208]	@ (8004344 <checkAktifCalisma+0x624>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <checkAktifCalisma+0x628>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	4a34      	ldr	r2, [pc, #208]	@ (800434c <checkAktifCalisma+0x62c>)
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	4293      	cmp	r3, r2
 8004280:	d303      	bcc.n	800428a <checkAktifCalisma+0x56a>
 8004282:	4b2f      	ldr	r3, [pc, #188]	@ (8004340 <checkAktifCalisma+0x620>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d114      	bne.n	80042b4 <checkAktifCalisma+0x594>
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <checkAktifCalisma+0x5e0>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <checkAktifCalisma+0x594>
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <checkAktifCalisma+0x5e4>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f083 0301 	eor.w	r3, r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <checkAktifCalisma+0x594>
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <checkAktifCalisma+0x5d8>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f083 0301 	eor.w	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2102      	movs	r1, #2
 80042b8:	4813      	ldr	r0, [pc, #76]	@ (8004308 <checkAktifCalisma+0x5e8>)
 80042ba:	f006 feec 	bl	800b096 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80042be:	4b17      	ldr	r3, [pc, #92]	@ (800431c <checkAktifCalisma+0x5fc>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80042c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <checkAktifCalisma+0x620>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80042ca:	4b14      	ldr	r3, [pc, #80]	@ (800431c <checkAktifCalisma+0x5fc>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d040      	beq.n	8004354 <checkAktifCalisma+0x634>
 80042d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042d6:	480f      	ldr	r0, [pc, #60]	@ (8004314 <checkAktifCalisma+0x5f4>)
 80042d8:	f006 fec6 	bl	800b068 <HAL_GPIO_ReadPin>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d138      	bne.n	8004354 <checkAktifCalisma+0x634>
 80042e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <checkAktifCalisma+0x630>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d034      	beq.n	8004354 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80042ea:	2201      	movs	r2, #1
 80042ec:	2101      	movs	r1, #1
 80042ee:	4806      	ldr	r0, [pc, #24]	@ (8004308 <checkAktifCalisma+0x5e8>)
 80042f0:	f006 fed1 	bl	800b096 <HAL_GPIO_WritePin>
 80042f4:	e033      	b.n	800435e <checkAktifCalisma+0x63e>
 80042f6:	bf00      	nop
 80042f8:	200010c2 	.word	0x200010c2
 80042fc:	20001089 	.word	0x20001089
 8004300:	200010bd 	.word	0x200010bd
 8004304:	200010be 	.word	0x200010be
 8004308:	40010c00 	.word	0x40010c00
 800430c:	200010a9 	.word	0x200010a9
 8004310:	200010bc 	.word	0x200010bc
 8004314:	40011000 	.word	0x40011000
 8004318:	20001072 	.word	0x20001072
 800431c:	200010a4 	.word	0x200010a4
 8004320:	200010a1 	.word	0x200010a1
 8004324:	200010a5 	.word	0x200010a5
 8004328:	200010a2 	.word	0x200010a2
 800432c:	200010a3 	.word	0x200010a3
 8004330:	200010a6 	.word	0x200010a6
 8004334:	200010a7 	.word	0x200010a7
 8004338:	200010ac 	.word	0x200010ac
 800433c:	200010cc 	.word	0x200010cc
 8004340:	2000109c 	.word	0x2000109c
 8004344:	20001044 	.word	0x20001044
 8004348:	20001050 	.word	0x20001050
 800434c:	20001081 	.word	0x20001081
 8004350:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004354:	2200      	movs	r2, #0
 8004356:	2101      	movs	r1, #1
 8004358:	4836      	ldr	r0, [pc, #216]	@ (8004434 <checkAktifCalisma+0x714>)
 800435a:	f006 fe9c 	bl	800b096 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800435e:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <checkAktifCalisma+0x718>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8080 	bne.w	8004468 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004368:	4b34      	ldr	r3, [pc, #208]	@ (800443c <checkAktifCalisma+0x71c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d003      	beq.n	8004378 <checkAktifCalisma+0x658>
 8004370:	4b32      	ldr	r3, [pc, #200]	@ (800443c <checkAktifCalisma+0x71c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d177      	bne.n	8004468 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004378:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <checkAktifCalisma+0x720>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d073      	beq.n	8004468 <checkAktifCalisma+0x748>
 8004380:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <checkAktifCalisma+0x724>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d06f      	beq.n	8004468 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004388:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800438c:	4829      	ldr	r0, [pc, #164]	@ (8004434 <checkAktifCalisma+0x714>)
 800438e:	f006 fe6b 	bl	800b068 <HAL_GPIO_ReadPin>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d167      	bne.n	8004468 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004398:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800439c:	482a      	ldr	r0, [pc, #168]	@ (8004448 <checkAktifCalisma+0x728>)
 800439e:	f006 fe63 	bl	800b068 <HAL_GPIO_ReadPin>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <checkAktifCalisma+0x690>
 80043a8:	4b28      	ldr	r3, [pc, #160]	@ (800444c <checkAktifCalisma+0x72c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d15b      	bne.n	8004468 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80043b0:	2140      	movs	r1, #64	@ 0x40
 80043b2:	4825      	ldr	r0, [pc, #148]	@ (8004448 <checkAktifCalisma+0x728>)
 80043b4:	f006 fe58 	bl	800b068 <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10f      	bne.n	80043de <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80043be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043c2:	481c      	ldr	r0, [pc, #112]	@ (8004434 <checkAktifCalisma+0x714>)
 80043c4:	f006 fe50 	bl	800b068 <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d107      	bne.n	80043de <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80043ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043d2:	4818      	ldr	r0, [pc, #96]	@ (8004434 <checkAktifCalisma+0x714>)
 80043d4:	f006 fe48 	bl	800b068 <HAL_GPIO_ReadPin>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d003      	beq.n	80043e6 <checkAktifCalisma+0x6c6>
 80043de:	4b1c      	ldr	r3, [pc, #112]	@ (8004450 <checkAktifCalisma+0x730>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d040      	beq.n	8004468 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80043e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004454 <checkAktifCalisma+0x734>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	f083 0301 	eor.w	r3, r3, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d039      	beq.n	8004468 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80043f4:	4b18      	ldr	r3, [pc, #96]	@ (8004458 <checkAktifCalisma+0x738>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d032      	beq.n	8004468 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004402:	4b16      	ldr	r3, [pc, #88]	@ (800445c <checkAktifCalisma+0x73c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	f083 0301 	eor.w	r3, r3, #1
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02b      	beq.n	8004468 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004410:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <checkAktifCalisma+0x740>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d024      	beq.n	8004468 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 800441e:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <checkAktifCalisma+0x744>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f083 0301 	eor.w	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01d      	beq.n	8004468 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <checkAktifCalisma+0x730>)
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e01c      	b.n	800446e <checkAktifCalisma+0x74e>
 8004434:	40010c00 	.word	0x40010c00
 8004438:	20001089 	.word	0x20001089
 800443c:	2000107b 	.word	0x2000107b
 8004440:	200010bd 	.word	0x200010bd
 8004444:	200010be 	.word	0x200010be
 8004448:	40011000 	.word	0x40011000
 800444c:	2000107c 	.word	0x2000107c
 8004450:	200010a2 	.word	0x200010a2
 8004454:	200010a1 	.word	0x200010a1
 8004458:	200010a5 	.word	0x200010a5
 800445c:	200010a4 	.word	0x200010a4
 8004460:	200010a3 	.word	0x200010a3
 8004464:	200010a7 	.word	0x200010a7
				} else {
					devmotoryukaricalisiyor=0;
 8004468:	4b64      	ldr	r3, [pc, #400]	@ (80045fc <checkAktifCalisma+0x8dc>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 800446e:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <checkAktifCalisma+0x8dc>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004476:	2201      	movs	r2, #1
 8004478:	2120      	movs	r1, #32
 800447a:	4861      	ldr	r0, [pc, #388]	@ (8004600 <checkAktifCalisma+0x8e0>)
 800447c:	f006 fe0b 	bl	800b096 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004480:	4b60      	ldr	r3, [pc, #384]	@ (8004604 <checkAktifCalisma+0x8e4>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <checkAktifCalisma+0x8e4>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d025      	beq.n	80044da <checkAktifCalisma+0x7ba>
 800448e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004492:	485d      	ldr	r0, [pc, #372]	@ (8004608 <checkAktifCalisma+0x8e8>)
 8004494:	f006 fde8 	bl	800b068 <HAL_GPIO_ReadPin>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d007      	beq.n	80044ae <checkAktifCalisma+0x78e>
 800449e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044a2:	4857      	ldr	r0, [pc, #348]	@ (8004600 <checkAktifCalisma+0x8e0>)
 80044a4:	f006 fde0 	bl	800b068 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d115      	bne.n	80044da <checkAktifCalisma+0x7ba>
 80044ae:	4b57      	ldr	r3, [pc, #348]	@ (800460c <checkAktifCalisma+0x8ec>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <checkAktifCalisma+0x7ba>
 80044b6:	4b56      	ldr	r3, [pc, #344]	@ (8004610 <checkAktifCalisma+0x8f0>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <checkAktifCalisma+0x7ba>
 80044be:	4b55      	ldr	r3, [pc, #340]	@ (8004614 <checkAktifCalisma+0x8f4>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f083 0301 	eor.w	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d006      	beq.n	80044da <checkAktifCalisma+0x7ba>
					timer2=millis;
 80044cc:	4b52      	ldr	r3, [pc, #328]	@ (8004618 <checkAktifCalisma+0x8f8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a52      	ldr	r2, [pc, #328]	@ (800461c <checkAktifCalisma+0x8fc>)
 80044d2:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 80044d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004614 <checkAktifCalisma+0x8f4>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80044da:	4b4f      	ldr	r3, [pc, #316]	@ (8004618 <checkAktifCalisma+0x8f8>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b4f      	ldr	r3, [pc, #316]	@ (800461c <checkAktifCalisma+0x8fc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004620 <checkAktifCalisma+0x900>)
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d303      	bcc.n	80044f4 <checkAktifCalisma+0x7d4>
 80044ec:	4b49      	ldr	r3, [pc, #292]	@ (8004614 <checkAktifCalisma+0x8f4>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <checkAktifCalisma+0x7f0>
 80044f4:	4b45      	ldr	r3, [pc, #276]	@ (800460c <checkAktifCalisma+0x8ec>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <checkAktifCalisma+0x7f0>
 8004502:	4b43      	ldr	r3, [pc, #268]	@ (8004610 <checkAktifCalisma+0x8f0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	f083 0301 	eor.w	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004510:	2200      	movs	r2, #0
 8004512:	2120      	movs	r1, #32
 8004514:	483a      	ldr	r0, [pc, #232]	@ (8004600 <checkAktifCalisma+0x8e0>)
 8004516:	f006 fdbe 	bl	800b096 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 800451a:	4b3a      	ldr	r3, [pc, #232]	@ (8004604 <checkAktifCalisma+0x8e4>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004520:	4b3c      	ldr	r3, [pc, #240]	@ (8004614 <checkAktifCalisma+0x8f4>)
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004526:	4b3f      	ldr	r3, [pc, #252]	@ (8004624 <checkAktifCalisma+0x904>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 8088 	bne.w	8004640 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004530:	4b3d      	ldr	r3, [pc, #244]	@ (8004628 <checkAktifCalisma+0x908>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d003      	beq.n	8004540 <checkAktifCalisma+0x820>
 8004538:	4b3b      	ldr	r3, [pc, #236]	@ (8004628 <checkAktifCalisma+0x908>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d17f      	bne.n	8004640 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004540:	4b32      	ldr	r3, [pc, #200]	@ (800460c <checkAktifCalisma+0x8ec>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d07b      	beq.n	8004640 <checkAktifCalisma+0x920>
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <checkAktifCalisma+0x8f0>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d077      	beq.n	8004640 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004550:	2140      	movs	r1, #64	@ 0x40
 8004552:	482b      	ldr	r0, [pc, #172]	@ (8004600 <checkAktifCalisma+0x8e0>)
 8004554:	f006 fd88 	bl	800b068 <HAL_GPIO_ReadPin>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d170      	bne.n	8004640 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800455e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004562:	4827      	ldr	r0, [pc, #156]	@ (8004600 <checkAktifCalisma+0x8e0>)
 8004564:	f006 fd80 	bl	800b068 <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <checkAktifCalisma+0x856>
 800456e:	4b2f      	ldr	r3, [pc, #188]	@ (800462c <checkAktifCalisma+0x90c>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d164      	bne.n	8004640 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004576:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800457a:	4823      	ldr	r0, [pc, #140]	@ (8004608 <checkAktifCalisma+0x8e8>)
 800457c:	f006 fd74 	bl	800b068 <HAL_GPIO_ReadPin>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10f      	bne.n	80045a6 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800458a:	481f      	ldr	r0, [pc, #124]	@ (8004608 <checkAktifCalisma+0x8e8>)
 800458c:	f006 fd6c 	bl	800b068 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800459a:	481b      	ldr	r0, [pc, #108]	@ (8004608 <checkAktifCalisma+0x8e8>)
 800459c:	f006 fd64 	bl	800b068 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d003      	beq.n	80045ae <checkAktifCalisma+0x88e>
 80045a6:	4b22      	ldr	r3, [pc, #136]	@ (8004630 <checkAktifCalisma+0x910>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d048      	beq.n	8004640 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 80045ae:	4b21      	ldr	r3, [pc, #132]	@ (8004634 <checkAktifCalisma+0x914>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f083 0301 	eor.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d041      	beq.n	8004640 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 80045bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <checkAktifCalisma+0x918>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f083 0301 	eor.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03a      	beq.n	8004640 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 80045ca:	4b1c      	ldr	r3, [pc, #112]	@ (800463c <checkAktifCalisma+0x91c>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d033      	beq.n	8004640 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <checkAktifCalisma+0x8e4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f083 0301 	eor.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02c      	beq.n	8004640 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 80045e6:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <checkAktifCalisma+0x8dc>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f083 0301 	eor.w	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d025      	beq.n	8004640 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 80045f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <checkAktifCalisma+0x910>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	e024      	b.n	8004646 <checkAktifCalisma+0x926>
 80045fc:	200010a2 	.word	0x200010a2
 8004600:	40011000 	.word	0x40011000
 8004604:	200010a6 	.word	0x200010a6
 8004608:	40010c00 	.word	0x40010c00
 800460c:	200010bd 	.word	0x200010bd
 8004610:	200010be 	.word	0x200010be
 8004614:	2000109e 	.word	0x2000109e
 8004618:	20001044 	.word	0x20001044
 800461c:	20001050 	.word	0x20001050
 8004620:	20001082 	.word	0x20001082
 8004624:	20001089 	.word	0x20001089
 8004628:	2000107b 	.word	0x2000107b
 800462c:	2000107d 	.word	0x2000107d
 8004630:	200010a3 	.word	0x200010a3
 8004634:	200010a1 	.word	0x200010a1
 8004638:	200010a5 	.word	0x200010a5
 800463c:	200010a4 	.word	0x200010a4
				} else {
					devmotorasagicalisiyor=0;
 8004640:	4b96      	ldr	r3, [pc, #600]	@ (800489c <checkAktifCalisma+0xb7c>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004646:	4b95      	ldr	r3, [pc, #596]	@ (800489c <checkAktifCalisma+0xb7c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800464e:	2201      	movs	r2, #1
 8004650:	2110      	movs	r1, #16
 8004652:	4893      	ldr	r0, [pc, #588]	@ (80048a0 <checkAktifCalisma+0xb80>)
 8004654:	f006 fd1f 	bl	800b096 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004658:	4b92      	ldr	r3, [pc, #584]	@ (80048a4 <checkAktifCalisma+0xb84>)
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800465e:	4b91      	ldr	r3, [pc, #580]	@ (80048a4 <checkAktifCalisma+0xb84>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d024      	beq.n	80046b0 <checkAktifCalisma+0x990>
 8004666:	2140      	movs	r1, #64	@ 0x40
 8004668:	488d      	ldr	r0, [pc, #564]	@ (80048a0 <checkAktifCalisma+0xb80>)
 800466a:	f006 fcfd 	bl	800b068 <HAL_GPIO_ReadPin>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <checkAktifCalisma+0x964>
 8004674:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004678:	4889      	ldr	r0, [pc, #548]	@ (80048a0 <checkAktifCalisma+0xb80>)
 800467a:	f006 fcf5 	bl	800b068 <HAL_GPIO_ReadPin>
 800467e:	4603      	mov	r3, r0
 8004680:	2b01      	cmp	r3, #1
 8004682:	d115      	bne.n	80046b0 <checkAktifCalisma+0x990>
 8004684:	4b88      	ldr	r3, [pc, #544]	@ (80048a8 <checkAktifCalisma+0xb88>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d011      	beq.n	80046b0 <checkAktifCalisma+0x990>
 800468c:	4b87      	ldr	r3, [pc, #540]	@ (80048ac <checkAktifCalisma+0xb8c>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <checkAktifCalisma+0x990>
 8004694:	4b86      	ldr	r3, [pc, #536]	@ (80048b0 <checkAktifCalisma+0xb90>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f083 0301 	eor.w	r3, r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d006      	beq.n	80046b0 <checkAktifCalisma+0x990>
					timer2=millis;
 80046a2:	4b84      	ldr	r3, [pc, #528]	@ (80048b4 <checkAktifCalisma+0xb94>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a84      	ldr	r2, [pc, #528]	@ (80048b8 <checkAktifCalisma+0xb98>)
 80046a8:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80046aa:	4b81      	ldr	r3, [pc, #516]	@ (80048b0 <checkAktifCalisma+0xb90>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80046b0:	4b80      	ldr	r3, [pc, #512]	@ (80048b4 <checkAktifCalisma+0xb94>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b80      	ldr	r3, [pc, #512]	@ (80048b8 <checkAktifCalisma+0xb98>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	4a80      	ldr	r2, [pc, #512]	@ (80048bc <checkAktifCalisma+0xb9c>)
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	4293      	cmp	r3, r2
 80046c0:	d303      	bcc.n	80046ca <checkAktifCalisma+0x9aa>
 80046c2:	4b7b      	ldr	r3, [pc, #492]	@ (80048b0 <checkAktifCalisma+0xb90>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <checkAktifCalisma+0x9c6>
 80046ca:	4b77      	ldr	r3, [pc, #476]	@ (80048a8 <checkAktifCalisma+0xb88>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f083 0301 	eor.w	r3, r3, #1
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <checkAktifCalisma+0x9c6>
 80046d8:	4b74      	ldr	r3, [pc, #464]	@ (80048ac <checkAktifCalisma+0xb8c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f083 0301 	eor.w	r3, r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2110      	movs	r1, #16
 80046ea:	486d      	ldr	r0, [pc, #436]	@ (80048a0 <checkAktifCalisma+0xb80>)
 80046ec:	f006 fcd3 	bl	800b096 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 80046f0:	4b6c      	ldr	r3, [pc, #432]	@ (80048a4 <checkAktifCalisma+0xb84>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 80046f6:	4b6e      	ldr	r3, [pc, #440]	@ (80048b0 <checkAktifCalisma+0xb90>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80046fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004700:	486f      	ldr	r0, [pc, #444]	@ (80048c0 <checkAktifCalisma+0xba0>)
 8004702:	f006 fcb1 	bl	800b068 <HAL_GPIO_ReadPin>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d120      	bne.n	800474e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800470c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004710:	486b      	ldr	r0, [pc, #428]	@ (80048c0 <checkAktifCalisma+0xba0>)
 8004712:	f006 fca9 	bl	800b068 <HAL_GPIO_ReadPin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d118      	bne.n	800474e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800471c:	2104      	movs	r1, #4
 800471e:	4868      	ldr	r0, [pc, #416]	@ (80048c0 <checkAktifCalisma+0xba0>)
 8004720:	f006 fca2 	bl	800b068 <HAL_GPIO_ReadPin>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d111      	bne.n	800474e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800472a:	2102      	movs	r1, #2
 800472c:	4864      	ldr	r0, [pc, #400]	@ (80048c0 <checkAktifCalisma+0xba0>)
 800472e:	f006 fc9b 	bl	800b068 <HAL_GPIO_ReadPin>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004738:	2101      	movs	r1, #1
 800473a:	4861      	ldr	r0, [pc, #388]	@ (80048c0 <checkAktifCalisma+0xba0>)
 800473c:	f006 fc94 	bl	800b068 <HAL_GPIO_ReadPin>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004746:	4b5f      	ldr	r3, [pc, #380]	@ (80048c4 <checkAktifCalisma+0xba4>)
 8004748:	2201      	movs	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e002      	b.n	8004754 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 800474e:	4b5d      	ldr	r3, [pc, #372]	@ (80048c4 <checkAktifCalisma+0xba4>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004754:	4b5c      	ldr	r3, [pc, #368]	@ (80048c8 <checkAktifCalisma+0xba8>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d144      	bne.n	80047e6 <checkAktifCalisma+0xac6>
 800475c:	4b5b      	ldr	r3, [pc, #364]	@ (80048cc <checkAktifCalisma+0xbac>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d003      	beq.n	800476c <checkAktifCalisma+0xa4c>
 8004764:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <checkAktifCalisma+0xbac>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d13c      	bne.n	80047e6 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	484c      	ldr	r0, [pc, #304]	@ (80048a0 <checkAktifCalisma+0xb80>)
 8004770:	f006 fc7a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <checkAktifCalisma+0xa62>
 800477a:	4b55      	ldr	r3, [pc, #340]	@ (80048d0 <checkAktifCalisma+0xbb0>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <checkAktifCalisma+0xa7a>
 8004782:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004786:	484e      	ldr	r0, [pc, #312]	@ (80048c0 <checkAktifCalisma+0xba0>)
 8004788:	f006 fc6e 	bl	800b068 <HAL_GPIO_ReadPin>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d129      	bne.n	80047e6 <checkAktifCalisma+0xac6>
 8004792:	4b4f      	ldr	r3, [pc, #316]	@ (80048d0 <checkAktifCalisma+0xbb0>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d125      	bne.n	80047e6 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800479a:	2104      	movs	r1, #4
 800479c:	4840      	ldr	r0, [pc, #256]	@ (80048a0 <checkAktifCalisma+0xb80>)
 800479e:	f006 fc63 	bl	800b068 <HAL_GPIO_ReadPin>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d003      	beq.n	80047b0 <checkAktifCalisma+0xa90>
 80047a8:	4b4a      	ldr	r3, [pc, #296]	@ (80048d4 <checkAktifCalisma+0xbb4>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11a      	bne.n	80047e6 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80047b0:	2102      	movs	r1, #2
 80047b2:	483b      	ldr	r0, [pc, #236]	@ (80048a0 <checkAktifCalisma+0xb80>)
 80047b4:	f006 fc58 	bl	800b068 <HAL_GPIO_ReadPin>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 80047be:	4b46      	ldr	r3, [pc, #280]	@ (80048d8 <checkAktifCalisma+0xbb8>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	f083 0301 	eor.w	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00c      	beq.n	80047e6 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 80047cc:	4b3d      	ldr	r3, [pc, #244]	@ (80048c4 <checkAktifCalisma+0xba4>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 80047d4:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <checkAktifCalisma+0xbbc>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80047da:	4b36      	ldr	r3, [pc, #216]	@ (80048b4 <checkAktifCalisma+0xb94>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a40      	ldr	r2, [pc, #256]	@ (80048e0 <checkAktifCalisma+0xbc0>)
 80047e0:	6013      	str	r3, [r2, #0]
					bekle();
 80047e2:	f7ff f901 	bl	80039e8 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80047e6:	4b33      	ldr	r3, [pc, #204]	@ (80048b4 <checkAktifCalisma+0xb94>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b3d      	ldr	r3, [pc, #244]	@ (80048e0 <checkAktifCalisma+0xbc0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	4a3c      	ldr	r2, [pc, #240]	@ (80048e4 <checkAktifCalisma+0xbc4>)
 80047f2:	7812      	ldrb	r2, [r2, #0]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d211      	bcs.n	800481c <checkAktifCalisma+0xafc>
 80047f8:	2104      	movs	r1, #4
 80047fa:	4829      	ldr	r0, [pc, #164]	@ (80048a0 <checkAktifCalisma+0xb80>)
 80047fc:	f006 fc34 	bl	800b068 <HAL_GPIO_ReadPin>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <checkAktifCalisma+0xafc>
 8004806:	4b33      	ldr	r3, [pc, #204]	@ (80048d4 <checkAktifCalisma+0xbb4>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d006      	beq.n	800481c <checkAktifCalisma+0xafc>
 800480e:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <checkAktifCalisma+0xba4>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f083 0301 	eor.w	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 800481c:	4b2f      	ldr	r3, [pc, #188]	@ (80048dc <checkAktifCalisma+0xbbc>)
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <checkAktifCalisma+0xba8>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d160      	bne.n	80048ec <checkAktifCalisma+0xbcc>
 800482a:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <checkAktifCalisma+0xbac>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d003      	beq.n	800483a <checkAktifCalisma+0xb1a>
 8004832:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <checkAktifCalisma+0xbac>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d158      	bne.n	80048ec <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800483a:	2104      	movs	r1, #4
 800483c:	4818      	ldr	r0, [pc, #96]	@ (80048a0 <checkAktifCalisma+0xb80>)
 800483e:	f006 fc13 	bl	800b068 <HAL_GPIO_ReadPin>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d003      	beq.n	8004850 <checkAktifCalisma+0xb30>
 8004848:	4b22      	ldr	r3, [pc, #136]	@ (80048d4 <checkAktifCalisma+0xbb4>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d14d      	bne.n	80048ec <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004850:	2102      	movs	r1, #2
 8004852:	4813      	ldr	r0, [pc, #76]	@ (80048a0 <checkAktifCalisma+0xb80>)
 8004854:	f006 fc08 	bl	800b068 <HAL_GPIO_ReadPin>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d146      	bne.n	80048ec <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	480f      	ldr	r0, [pc, #60]	@ (80048a0 <checkAktifCalisma+0xb80>)
 8004862:	f006 fc01 	bl	800b068 <HAL_GPIO_ReadPin>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <checkAktifCalisma+0xb54>
 800486c:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <checkAktifCalisma+0xbb0>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <checkAktifCalisma+0xb6c>
 8004874:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004878:	4811      	ldr	r0, [pc, #68]	@ (80048c0 <checkAktifCalisma+0xba0>)
 800487a:	f006 fbf5 	bl	800b068 <HAL_GPIO_ReadPin>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d133      	bne.n	80048ec <checkAktifCalisma+0xbcc>
 8004884:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <checkAktifCalisma+0xbb0>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d12f      	bne.n	80048ec <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 800488c:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <checkAktifCalisma+0xba4>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02b      	beq.n	80048ec <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <checkAktifCalisma+0xbc8>)
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e02a      	b.n	80048f2 <checkAktifCalisma+0xbd2>
 800489c:	200010a3 	.word	0x200010a3
 80048a0:	40011000 	.word	0x40011000
 80048a4:	200010a7 	.word	0x200010a7
 80048a8:	200010bd 	.word	0x200010bd
 80048ac:	200010be 	.word	0x200010be
 80048b0:	2000109f 	.word	0x2000109f
 80048b4:	20001044 	.word	0x20001044
 80048b8:	20001050 	.word	0x20001050
 80048bc:	20001082 	.word	0x20001082
 80048c0:	40010c00 	.word	0x40010c00
 80048c4:	200010ad 	.word	0x200010ad
 80048c8:	20001075 	.word	0x20001075
 80048cc:	20001074 	.word	0x20001074
 80048d0:	20001078 	.word	0x20001078
 80048d4:	20001072 	.word	0x20001072
 80048d8:	2000109b 	.word	0x2000109b
 80048dc:	200010ae 	.word	0x200010ae
 80048e0:	20001048 	.word	0x20001048
 80048e4:	20001085 	.word	0x20001085
 80048e8:	200010af 	.word	0x200010af
				} else {
					kapi1butonkontrol=0;
 80048ec:	4b8b      	ldr	r3, [pc, #556]	@ (8004b1c <checkAktifCalisma+0xdfc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80048f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004b20 <checkAktifCalisma+0xe00>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d121      	bne.n	800493e <checkAktifCalisma+0xc1e>
 80048fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004b24 <checkAktifCalisma+0xe04>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d003      	beq.n	800490a <checkAktifCalisma+0xbea>
 8004902:	4b88      	ldr	r3, [pc, #544]	@ (8004b24 <checkAktifCalisma+0xe04>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d119      	bne.n	800493e <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800490a:	2104      	movs	r1, #4
 800490c:	4886      	ldr	r0, [pc, #536]	@ (8004b28 <checkAktifCalisma+0xe08>)
 800490e:	f006 fbab 	bl	800b068 <HAL_GPIO_ReadPin>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d003      	beq.n	8004920 <checkAktifCalisma+0xc00>
 8004918:	4b84      	ldr	r3, [pc, #528]	@ (8004b2c <checkAktifCalisma+0xe0c>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004920:	2102      	movs	r1, #2
 8004922:	4881      	ldr	r0, [pc, #516]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004924:	f006 fba0 	bl	800b068 <HAL_GPIO_ReadPin>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 800492e:	4b80      	ldr	r3, [pc, #512]	@ (8004b30 <checkAktifCalisma+0xe10>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004936:	4b7f      	ldr	r3, [pc, #508]	@ (8004b34 <checkAktifCalisma+0xe14>)
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e002      	b.n	8004944 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 800493e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b34 <checkAktifCalisma+0xe14>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004944:	4b75      	ldr	r3, [pc, #468]	@ (8004b1c <checkAktifCalisma+0xdfc>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d107      	bne.n	800495c <checkAktifCalisma+0xc3c>
 800494c:	4b79      	ldr	r3, [pc, #484]	@ (8004b34 <checkAktifCalisma+0xe14>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <checkAktifCalisma+0xc3c>
 8004954:	4b78      	ldr	r3, [pc, #480]	@ (8004b38 <checkAktifCalisma+0xe18>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800495c:	2201      	movs	r2, #1
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	4876      	ldr	r0, [pc, #472]	@ (8004b3c <checkAktifCalisma+0xe1c>)
 8004962:	f006 fb98 	bl	800b096 <HAL_GPIO_WritePin>
 8004966:	e004      	b.n	8004972 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004968:	2200      	movs	r2, #0
 800496a:	2180      	movs	r1, #128	@ 0x80
 800496c:	4873      	ldr	r0, [pc, #460]	@ (8004b3c <checkAktifCalisma+0xe1c>)
 800496e:	f006 fb92 	bl	800b096 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004972:	4b73      	ldr	r3, [pc, #460]	@ (8004b40 <checkAktifCalisma+0xe20>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d141      	bne.n	80049fe <checkAktifCalisma+0xcde>
 800497a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b24 <checkAktifCalisma+0xe04>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d003      	beq.n	800498a <checkAktifCalisma+0xc6a>
 8004982:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <checkAktifCalisma+0xe04>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d139      	bne.n	80049fe <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800498a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800498e:	4866      	ldr	r0, [pc, #408]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004990:	f006 fb6a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <checkAktifCalisma+0xc82>
 800499a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b44 <checkAktifCalisma+0xe24>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <checkAktifCalisma+0xc9a>
 80049a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049a6:	4868      	ldr	r0, [pc, #416]	@ (8004b48 <checkAktifCalisma+0xe28>)
 80049a8:	f006 fb5e 	bl	800b068 <HAL_GPIO_ReadPin>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d125      	bne.n	80049fe <checkAktifCalisma+0xcde>
 80049b2:	4b64      	ldr	r3, [pc, #400]	@ (8004b44 <checkAktifCalisma+0xe24>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d121      	bne.n	80049fe <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80049ba:	2102      	movs	r1, #2
 80049bc:	485a      	ldr	r0, [pc, #360]	@ (8004b28 <checkAktifCalisma+0xe08>)
 80049be:	f006 fb53 	bl	800b068 <HAL_GPIO_ReadPin>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11a      	bne.n	80049fe <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80049c8:	2104      	movs	r1, #4
 80049ca:	4857      	ldr	r0, [pc, #348]	@ (8004b28 <checkAktifCalisma+0xe08>)
 80049cc:	f006 fb4c 	bl	800b068 <HAL_GPIO_ReadPin>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d113      	bne.n	80049fe <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 80049d6:	4b56      	ldr	r3, [pc, #344]	@ (8004b30 <checkAktifCalisma+0xe10>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00f      	beq.n	80049fe <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 80049de:	4b5b      	ldr	r3, [pc, #364]	@ (8004b4c <checkAktifCalisma+0xe2c>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f083 0301 	eor.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 80049ec:	4b58      	ldr	r3, [pc, #352]	@ (8004b50 <checkAktifCalisma+0xe30>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80049f2:	4b58      	ldr	r3, [pc, #352]	@ (8004b54 <checkAktifCalisma+0xe34>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a58      	ldr	r2, [pc, #352]	@ (8004b58 <checkAktifCalisma+0xe38>)
 80049f8:	6013      	str	r3, [r2, #0]
					bekle();
 80049fa:	f7fe fff5 	bl	80039e8 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80049fe:	4b55      	ldr	r3, [pc, #340]	@ (8004b54 <checkAktifCalisma+0xe34>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b55      	ldr	r3, [pc, #340]	@ (8004b58 <checkAktifCalisma+0xe38>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	4a54      	ldr	r2, [pc, #336]	@ (8004b5c <checkAktifCalisma+0xe3c>)
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d20d      	bcs.n	8004a2c <checkAktifCalisma+0xd0c>
 8004a10:	2102      	movs	r1, #2
 8004a12:	4845      	ldr	r0, [pc, #276]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004a14:	f006 fb28 	bl	800b068 <HAL_GPIO_ReadPin>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <checkAktifCalisma+0xd0c>
 8004a1e:	4b44      	ldr	r3, [pc, #272]	@ (8004b30 <checkAktifCalisma+0xe10>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f083 0301 	eor.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004a2c:	4b48      	ldr	r3, [pc, #288]	@ (8004b50 <checkAktifCalisma+0xe30>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a32:	4b43      	ldr	r3, [pc, #268]	@ (8004b40 <checkAktifCalisma+0xe20>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d135      	bne.n	8004aa6 <checkAktifCalisma+0xd86>
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <checkAktifCalisma+0xe04>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d003      	beq.n	8004a4a <checkAktifCalisma+0xd2a>
 8004a42:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <checkAktifCalisma+0xe04>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d12d      	bne.n	8004aa6 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a4e:	4836      	ldr	r0, [pc, #216]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004a50:	f006 fb0a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <checkAktifCalisma+0xd42>
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b44 <checkAktifCalisma+0xe24>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <checkAktifCalisma+0xd5a>
 8004a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a66:	4838      	ldr	r0, [pc, #224]	@ (8004b48 <checkAktifCalisma+0xe28>)
 8004a68:	f006 fafe 	bl	800b068 <HAL_GPIO_ReadPin>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <checkAktifCalisma+0xd86>
 8004a72:	4b34      	ldr	r3, [pc, #208]	@ (8004b44 <checkAktifCalisma+0xe24>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d115      	bne.n	8004aa6 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	482a      	ldr	r0, [pc, #168]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004a7e:	f006 faf3 	bl	800b068 <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10e      	bne.n	8004aa6 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004a88:	2104      	movs	r1, #4
 8004a8a:	4827      	ldr	r0, [pc, #156]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004a8c:	f006 faec 	bl	800b068 <HAL_GPIO_ReadPin>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004a96:	4b26      	ldr	r3, [pc, #152]	@ (8004b30 <checkAktifCalisma+0xe10>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004a9e:	4b30      	ldr	r3, [pc, #192]	@ (8004b60 <checkAktifCalisma+0xe40>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8004b60 <checkAktifCalisma+0xe40>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004aac:	4b24      	ldr	r3, [pc, #144]	@ (8004b40 <checkAktifCalisma+0xe20>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d11d      	bne.n	8004af0 <checkAktifCalisma+0xdd0>
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <checkAktifCalisma+0xe04>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d003      	beq.n	8004ac4 <checkAktifCalisma+0xda4>
 8004abc:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <checkAktifCalisma+0xe04>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d115      	bne.n	8004af0 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4818      	ldr	r0, [pc, #96]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004ac8:	f006 face 	bl	800b068 <HAL_GPIO_ReadPin>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10e      	bne.n	8004af0 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	4814      	ldr	r0, [pc, #80]	@ (8004b28 <checkAktifCalisma+0xe08>)
 8004ad6:	f006 fac7 	bl	800b068 <HAL_GPIO_ReadPin>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004ae0:	4b13      	ldr	r3, [pc, #76]	@ (8004b30 <checkAktifCalisma+0xe10>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <checkAktifCalisma+0xe44>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004af0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b64 <checkAktifCalisma+0xe44>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004af6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <checkAktifCalisma+0xe40>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d107      	bne.n	8004b0e <checkAktifCalisma+0xdee>
 8004afe:	4b19      	ldr	r3, [pc, #100]	@ (8004b64 <checkAktifCalisma+0xe44>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <checkAktifCalisma+0xdee>
 8004b06:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <checkAktifCalisma+0xe30>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d02c      	beq.n	8004b68 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2140      	movs	r1, #64	@ 0x40
 8004b12:	480a      	ldr	r0, [pc, #40]	@ (8004b3c <checkAktifCalisma+0xe1c>)
 8004b14:	f006 fabf 	bl	800b096 <HAL_GPIO_WritePin>
 8004b18:	e02b      	b.n	8004b72 <checkAktifCalisma+0xe52>
 8004b1a:	bf00      	nop
 8004b1c:	200010af 	.word	0x200010af
 8004b20:	20001075 	.word	0x20001075
 8004b24:	20001074 	.word	0x20001074
 8004b28:	40011000 	.word	0x40011000
 8004b2c:	20001072 	.word	0x20001072
 8004b30:	200010ad 	.word	0x200010ad
 8004b34:	200010b0 	.word	0x200010b0
 8004b38:	200010ae 	.word	0x200010ae
 8004b3c:	40010800 	.word	0x40010800
 8004b40:	20001076 	.word	0x20001076
 8004b44:	20001078 	.word	0x20001078
 8004b48:	40010c00 	.word	0x40010c00
 8004b4c:	2000109b 	.word	0x2000109b
 8004b50:	200010b1 	.word	0x200010b1
 8004b54:	20001044 	.word	0x20001044
 8004b58:	20001048 	.word	0x20001048
 8004b5c:	20001086 	.word	0x20001086
 8004b60:	200010b2 	.word	0x200010b2
 8004b64:	200010b3 	.word	0x200010b3
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2140      	movs	r1, #64	@ 0x40
 8004b6c:	4835      	ldr	r0, [pc, #212]	@ (8004c44 <checkAktifCalisma+0xf24>)
 8004b6e:	f006 fa92 	bl	800b096 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004b72:	4b35      	ldr	r3, [pc, #212]	@ (8004c48 <checkAktifCalisma+0xf28>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <checkAktifCalisma+0xe62>
 8004b7a:	4b33      	ldr	r3, [pc, #204]	@ (8004c48 <checkAktifCalisma+0xf28>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d115      	bne.n	8004bae <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b82:	2104      	movs	r1, #4
 8004b84:	4831      	ldr	r0, [pc, #196]	@ (8004c4c <checkAktifCalisma+0xf2c>)
 8004b86:	f006 fa6f 	bl	800b068 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d003      	beq.n	8004b98 <checkAktifCalisma+0xe78>
 8004b90:	4b2f      	ldr	r3, [pc, #188]	@ (8004c50 <checkAktifCalisma+0xf30>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004b98:	2102      	movs	r1, #2
 8004b9a:	482c      	ldr	r0, [pc, #176]	@ (8004c4c <checkAktifCalisma+0xf2c>)
 8004b9c:	f006 fa64 	bl	800b068 <HAL_GPIO_ReadPin>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <checkAktifCalisma+0xf34>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e002      	b.n	8004bb4 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004bae:	4b29      	ldr	r3, [pc, #164]	@ (8004c54 <checkAktifCalisma+0xf34>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004bb4:	4b24      	ldr	r3, [pc, #144]	@ (8004c48 <checkAktifCalisma+0xf28>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d003      	beq.n	8004bc4 <checkAktifCalisma+0xea4>
 8004bbc:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <checkAktifCalisma+0xf28>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d111      	bne.n	8004be8 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4821      	ldr	r0, [pc, #132]	@ (8004c4c <checkAktifCalisma+0xf2c>)
 8004bc8:	f006 fa4e 	bl	800b068 <HAL_GPIO_ReadPin>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d10a      	bne.n	8004be8 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	481d      	ldr	r0, [pc, #116]	@ (8004c4c <checkAktifCalisma+0xf2c>)
 8004bd6:	f006 fa47 	bl	800b068 <HAL_GPIO_ReadPin>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <checkAktifCalisma+0xf38>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	e002      	b.n	8004bee <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004be8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <checkAktifCalisma+0xf38>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004bee:	4b19      	ldr	r3, [pc, #100]	@ (8004c54 <checkAktifCalisma+0xf34>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00f      	beq.n	8004c16 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <checkAktifCalisma+0xf3c>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10b      	bne.n	8004c16 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004bfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c02:	4817      	ldr	r0, [pc, #92]	@ (8004c60 <checkAktifCalisma+0xf40>)
 8004c04:	f006 fa30 	bl	800b068 <HAL_GPIO_ReadPin>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <checkAktifCalisma+0xf44>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	e002      	b.n	8004c1c <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004c16:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <checkAktifCalisma+0xf44>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <checkAktifCalisma+0xf38>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d023      	beq.n	8004c6c <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 8004c24:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <checkAktifCalisma+0xf3c>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d11f      	bne.n	8004c6c <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c30:	480b      	ldr	r0, [pc, #44]	@ (8004c60 <checkAktifCalisma+0xf40>)
 8004c32:	f006 fa19 	bl	800b068 <HAL_GPIO_ReadPin>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d117      	bne.n	8004c6c <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <checkAktifCalisma+0xf48>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e016      	b.n	8004c72 <checkAktifCalisma+0xf52>
 8004c44:	40010800 	.word	0x40010800
 8004c48:	20001079 	.word	0x20001079
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	20001072 	.word	0x20001072
 8004c54:	200010b7 	.word	0x200010b7
 8004c58:	200010b8 	.word	0x200010b8
 8004c5c:	20001078 	.word	0x20001078
 8004c60:	40010c00 	.word	0x40010c00
 8004c64:	200010c7 	.word	0x200010c7
 8004c68:	200010c8 	.word	0x200010c8
				} else {
					kapiactablaesp2=0;
 8004c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e68 <checkAktifCalisma+0x1148>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004c72:	4b7e      	ldr	r3, [pc, #504]	@ (8004e6c <checkAktifCalisma+0x114c>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d154      	bne.n	8004d24 <checkAktifCalisma+0x1004>
 8004c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e70 <checkAktifCalisma+0x1150>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <checkAktifCalisma+0xf6a>
 8004c82:	4b7b      	ldr	r3, [pc, #492]	@ (8004e70 <checkAktifCalisma+0x1150>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d14c      	bne.n	8004d24 <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e74 <checkAktifCalisma+0x1154>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <checkAktifCalisma+0xf7a>
 8004c92:	4b79      	ldr	r3, [pc, #484]	@ (8004e78 <checkAktifCalisma+0x1158>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d044      	beq.n	8004d24 <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004c9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c9e:	4877      	ldr	r0, [pc, #476]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004ca0:	f006 f9e2 	bl	800b068 <HAL_GPIO_ReadPin>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01c      	beq.n	8004ce4 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004caa:	2180      	movs	r1, #128	@ 0x80
 8004cac:	4873      	ldr	r0, [pc, #460]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004cae:	f006 f9db 	bl	800b068 <HAL_GPIO_ReadPin>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004cb8:	2104      	movs	r1, #4
 8004cba:	4870      	ldr	r0, [pc, #448]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004cbc:	f006 f9d4 	bl	800b068 <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d00e      	beq.n	8004ce4 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004cc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cca:	486c      	ldr	r0, [pc, #432]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004ccc:	f006 f9cc 	bl	800b068 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	4868      	ldr	r0, [pc, #416]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004cda:	f006 f9c5 	bl	800b068 <HAL_GPIO_ReadPin>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d103      	bne.n	8004cec <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004ce4:	4b66      	ldr	r3, [pc, #408]	@ (8004e80 <checkAktifCalisma+0x1160>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <checkAktifCalisma+0xfdc>
 8004cec:	4b65      	ldr	r3, [pc, #404]	@ (8004e84 <checkAktifCalisma+0x1164>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d103      	bne.n	8004cfc <checkAktifCalisma+0xfdc>
 8004cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e68 <checkAktifCalisma+0x1148>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004cfc:	4b62      	ldr	r3, [pc, #392]	@ (8004e88 <checkAktifCalisma+0x1168>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00f      	beq.n	8004d24 <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 8004d04:	4b61      	ldr	r3, [pc, #388]	@ (8004e8c <checkAktifCalisma+0x116c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f083 0301 	eor.w	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 8004d12:	4b5f      	ldr	r3, [pc, #380]	@ (8004e90 <checkAktifCalisma+0x1170>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004d18:	4b5e      	ldr	r3, [pc, #376]	@ (8004e94 <checkAktifCalisma+0x1174>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004e98 <checkAktifCalisma+0x1178>)
 8004d1e:	6013      	str	r3, [r2, #0]
					bekle();
 8004d20:	f7fe fe62 	bl	80039e8 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004d24:	4b5b      	ldr	r3, [pc, #364]	@ (8004e94 <checkAktifCalisma+0x1174>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b5b      	ldr	r3, [pc, #364]	@ (8004e98 <checkAktifCalisma+0x1178>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004e9c <checkAktifCalisma+0x117c>)
 8004d30:	7812      	ldrb	r2, [r2, #0]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d214      	bcs.n	8004d60 <checkAktifCalisma+0x1040>
 8004d36:	4b4f      	ldr	r3, [pc, #316]	@ (8004e74 <checkAktifCalisma+0x1154>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f083 0301 	eor.w	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d006      	beq.n	8004d52 <checkAktifCalisma+0x1032>
 8004d44:	4b4c      	ldr	r3, [pc, #304]	@ (8004e78 <checkAktifCalisma+0x1158>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f083 0301 	eor.w	r3, r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <checkAktifCalisma+0x1040>
 8004d52:	4b4d      	ldr	r3, [pc, #308]	@ (8004e88 <checkAktifCalisma+0x1168>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8004d60:	4b4b      	ldr	r3, [pc, #300]	@ (8004e90 <checkAktifCalisma+0x1170>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004d66:	4b41      	ldr	r3, [pc, #260]	@ (8004e6c <checkAktifCalisma+0x114c>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d148      	bne.n	8004e00 <checkAktifCalisma+0x10e0>
 8004d6e:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <checkAktifCalisma+0x1150>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d003      	beq.n	8004d7e <checkAktifCalisma+0x105e>
 8004d76:	4b3e      	ldr	r3, [pc, #248]	@ (8004e70 <checkAktifCalisma+0x1150>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d140      	bne.n	8004e00 <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <checkAktifCalisma+0x1154>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <checkAktifCalisma+0x106e>
 8004d86:	4b3c      	ldr	r3, [pc, #240]	@ (8004e78 <checkAktifCalisma+0x1158>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d038      	beq.n	8004e00 <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004d8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d92:	483a      	ldr	r0, [pc, #232]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004d94:	f006 f968 	bl	800b068 <HAL_GPIO_ReadPin>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01c      	beq.n	8004dd8 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004d9e:	2180      	movs	r1, #128	@ 0x80
 8004da0:	4836      	ldr	r0, [pc, #216]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004da2:	f006 f961 	bl	800b068 <HAL_GPIO_ReadPin>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004dac:	2104      	movs	r1, #4
 8004dae:	4833      	ldr	r0, [pc, #204]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004db0:	f006 f95a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d00e      	beq.n	8004dd8 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004dba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004dbe:	482f      	ldr	r0, [pc, #188]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004dc0:	f006 f952 	bl	800b068 <HAL_GPIO_ReadPin>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004dca:	2102      	movs	r1, #2
 8004dcc:	482b      	ldr	r0, [pc, #172]	@ (8004e7c <checkAktifCalisma+0x115c>)
 8004dce:	f006 f94b 	bl	800b068 <HAL_GPIO_ReadPin>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d103      	bne.n	8004de0 <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004dd8:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <checkAktifCalisma+0x1160>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <checkAktifCalisma+0x10d0>
 8004de0:	4b28      	ldr	r3, [pc, #160]	@ (8004e84 <checkAktifCalisma+0x1164>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <checkAktifCalisma+0x10d0>
 8004de8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <checkAktifCalisma+0x1148>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004df0:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <checkAktifCalisma+0x1168>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004df8:	4b29      	ldr	r3, [pc, #164]	@ (8004ea0 <checkAktifCalisma+0x1180>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004e00:	4b27      	ldr	r3, [pc, #156]	@ (8004ea0 <checkAktifCalisma+0x1180>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004e06:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <checkAktifCalisma+0x114c>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d117      	bne.n	8004e3e <checkAktifCalisma+0x111e>
 8004e0e:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <checkAktifCalisma+0x1150>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d003      	beq.n	8004e1e <checkAktifCalisma+0x10fe>
 8004e16:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <checkAktifCalisma+0x1150>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d10f      	bne.n	8004e3e <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <checkAktifCalisma+0x1154>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <checkAktifCalisma+0x110e>
 8004e26:	4b14      	ldr	r3, [pc, #80]	@ (8004e78 <checkAktifCalisma+0x1158>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004e2e:	4b16      	ldr	r3, [pc, #88]	@ (8004e88 <checkAktifCalisma+0x1168>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 8004e36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea4 <checkAktifCalisma+0x1184>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e002      	b.n	8004e44 <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004e3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <checkAktifCalisma+0x1184>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004e44:	4b16      	ldr	r3, [pc, #88]	@ (8004ea0 <checkAktifCalisma+0x1180>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <checkAktifCalisma+0x113c>
 8004e4c:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <checkAktifCalisma+0x1170>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <checkAktifCalisma+0x113c>
 8004e54:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <checkAktifCalisma+0x1184>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d027      	beq.n	8004eac <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	2120      	movs	r1, #32
 8004e60:	4811      	ldr	r0, [pc, #68]	@ (8004ea8 <checkAktifCalisma+0x1188>)
 8004e62:	f006 f918 	bl	800b096 <HAL_GPIO_WritePin>
 8004e66:	e026      	b.n	8004eb6 <checkAktifCalisma+0x1196>
 8004e68:	200010c8 	.word	0x200010c8
 8004e6c:	20001077 	.word	0x20001077
 8004e70:	20001074 	.word	0x20001074
 8004e74:	200010b7 	.word	0x200010b7
 8004e78:	200010b8 	.word	0x200010b8
 8004e7c:	40011000 	.word	0x40011000
 8004e80:	20001078 	.word	0x20001078
 8004e84:	200010c7 	.word	0x200010c7
 8004e88:	200010ad 	.word	0x200010ad
 8004e8c:	2000109b 	.word	0x2000109b
 8004e90:	200010b4 	.word	0x200010b4
 8004e94:	20001044 	.word	0x20001044
 8004e98:	20001048 	.word	0x20001048
 8004e9c:	20001087 	.word	0x20001087
 8004ea0:	200010b5 	.word	0x200010b5
 8004ea4:	200010b6 	.word	0x200010b6
 8004ea8:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004eac:	2200      	movs	r2, #0
 8004eae:	2120      	movs	r1, #32
 8004eb0:	4887      	ldr	r0, [pc, #540]	@ (80050d0 <checkAktifCalisma+0x13b0>)
 8004eb2:	f006 f8f0 	bl	800b096 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8004eb6:	4b87      	ldr	r3, [pc, #540]	@ (80050d4 <checkAktifCalisma+0x13b4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00e      	beq.n	8004edc <checkAktifCalisma+0x11bc>
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4885      	ldr	r0, [pc, #532]	@ (80050d8 <checkAktifCalisma+0x13b8>)
 8004ec2:	f006 f8d1 	bl	800b068 <HAL_GPIO_ReadPin>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <checkAktifCalisma+0x11bc>
 8004ecc:	4b83      	ldr	r3, [pc, #524]	@ (80050dc <checkAktifCalisma+0x13bc>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <checkAktifCalisma+0x11bc>
 8004ed4:	4b82      	ldr	r3, [pc, #520]	@ (80050e0 <checkAktifCalisma+0x13c0>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d112      	bne.n	8004f02 <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8004edc:	4b81      	ldr	r3, [pc, #516]	@ (80050e4 <checkAktifCalisma+0x13c4>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d032      	beq.n	8004f4a <checkAktifCalisma+0x122a>
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	487c      	ldr	r0, [pc, #496]	@ (80050d8 <checkAktifCalisma+0x13b8>)
 8004ee8:	f006 f8be 	bl	800b068 <HAL_GPIO_ReadPin>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d12b      	bne.n	8004f4a <checkAktifCalisma+0x122a>
 8004ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80050dc <checkAktifCalisma+0x13bc>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d027      	beq.n	8004f4a <checkAktifCalisma+0x122a>
 8004efa:	4b79      	ldr	r3, [pc, #484]	@ (80050e0 <checkAktifCalisma+0x13c0>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d023      	beq.n	8004f4a <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 8004f02:	4b79      	ldr	r3, [pc, #484]	@ (80050e8 <checkAktifCalisma+0x13c8>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	3b02      	subs	r3, #2
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4b77      	ldr	r3, [pc, #476]	@ (80050e8 <checkAktifCalisma+0x13c8>)
 8004f0c:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8004f0e:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <checkAktifCalisma+0x13c8>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2bff      	cmp	r3, #255	@ 0xff
 8004f14:	d108      	bne.n	8004f28 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 8004f16:	4b74      	ldr	r3, [pc, #464]	@ (80050e8 <checkAktifCalisma+0x13c8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8004f1c:	4b73      	ldr	r3, [pc, #460]	@ (80050ec <checkAktifCalisma+0x13cc>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	4b71      	ldr	r3, [pc, #452]	@ (80050ec <checkAktifCalisma+0x13cc>)
 8004f26:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8004f28:	4b6f      	ldr	r3, [pc, #444]	@ (80050e8 <checkAktifCalisma+0x13c8>)
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	4b70      	ldr	r3, [pc, #448]	@ (80050f0 <checkAktifCalisma+0x13d0>)
 8004f2e:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8004f30:	4b6e      	ldr	r3, [pc, #440]	@ (80050ec <checkAktifCalisma+0x13cc>)
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	4b6e      	ldr	r3, [pc, #440]	@ (80050f0 <checkAktifCalisma+0x13d0>)
 8004f36:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8004f38:	4b6e      	ldr	r3, [pc, #440]	@ (80050f4 <checkAktifCalisma+0x13d4>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8004f3e:	4b65      	ldr	r3, [pc, #404]	@ (80050d4 <checkAktifCalisma+0x13b4>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8004f44:	4b67      	ldr	r3, [pc, #412]	@ (80050e4 <checkAktifCalisma+0x13c4>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8004f4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f4e:	486a      	ldr	r0, [pc, #424]	@ (80050f8 <checkAktifCalisma+0x13d8>)
 8004f50:	f006 f88a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8004f5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f5e:	4866      	ldr	r0, [pc, #408]	@ (80050f8 <checkAktifCalisma+0x13d8>)
 8004f60:	f006 f882 	bl	800b068 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00e      	beq.n	8004f88 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8004f6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f6e:	4862      	ldr	r0, [pc, #392]	@ (80050f8 <checkAktifCalisma+0x13d8>)
 8004f70:	f006 f87a 	bl	800b068 <HAL_GPIO_ReadPin>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8004f7a:	2140      	movs	r1, #64	@ 0x40
 8004f7c:	4856      	ldr	r0, [pc, #344]	@ (80050d8 <checkAktifCalisma+0x13b8>)
 8004f7e:	f006 f873 	bl	800b068 <HAL_GPIO_ReadPin>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <checkAktifCalisma+0x1270>

					startBasili=1;
 8004f88:	4b5c      	ldr	r3, [pc, #368]	@ (80050fc <checkAktifCalisma+0x13dc>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e002      	b.n	8004f96 <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 8004f90:	4b5a      	ldr	r3, [pc, #360]	@ (80050fc <checkAktifCalisma+0x13dc>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8004f96:	4b59      	ldr	r3, [pc, #356]	@ (80050fc <checkAktifCalisma+0x13dc>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <checkAktifCalisma+0x12a8>
 8004f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fa2:	4855      	ldr	r0, [pc, #340]	@ (80050f8 <checkAktifCalisma+0x13d8>)
 8004fa4:	f006 f860 	bl	800b068 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10c      	bne.n	8004fc8 <checkAktifCalisma+0x12a8>

					hataVar=1;
 8004fae:	4b54      	ldr	r3, [pc, #336]	@ (8005100 <checkAktifCalisma+0x13e0>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f7fb fca5 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f7fb fc4a 	bl	8000854 <hata2EEPROM>
					acilstophatasi=1;
 8004fc0:	4b50      	ldr	r3, [pc, #320]	@ (8005104 <checkAktifCalisma+0x13e4>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e018      	b.n	8004ffa <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8005104 <checkAktifCalisma+0x13e4>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d014      	beq.n	8004ffa <checkAktifCalisma+0x12da>
 8004fd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fd4:	4848      	ldr	r0, [pc, #288]	@ (80050f8 <checkAktifCalisma+0x13d8>)
 8004fd6:	f006 f847 	bl	800b068 <HAL_GPIO_ReadPin>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10c      	bne.n	8004ffa <checkAktifCalisma+0x12da>
 8004fe0:	4b46      	ldr	r3, [pc, #280]	@ (80050fc <checkAktifCalisma+0x13dc>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f083 0301 	eor.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 8004fee:	4b45      	ldr	r3, [pc, #276]	@ (8005104 <checkAktifCalisma+0x13e4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f7fe fc8d 	bl	8003914 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8004ffa:	4b43      	ldr	r3, [pc, #268]	@ (8005108 <checkAktifCalisma+0x13e8>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <checkAktifCalisma+0x1330>
 8005008:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800500c:	483a      	ldr	r0, [pc, #232]	@ (80050f8 <checkAktifCalisma+0x13d8>)
 800500e:	f006 f82b 	bl	800b068 <HAL_GPIO_ReadPin>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <checkAktifCalisma+0x1300>
 8005018:	4b3c      	ldr	r3, [pc, #240]	@ (800510c <checkAktifCalisma+0x13ec>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d017      	beq.n	8005050 <checkAktifCalisma+0x1330>
 8005020:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <checkAktifCalisma+0x13f0>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d113      	bne.n	8005050 <checkAktifCalisma+0x1330>
 8005028:	4b3a      	ldr	r3, [pc, #232]	@ (8005114 <checkAktifCalisma+0x13f4>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f083 0301 	eor.w	r3, r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <checkAktifCalisma+0x1330>
					hataVar=1;
 8005036:	4b32      	ldr	r3, [pc, #200]	@ (8005100 <checkAktifCalisma+0x13e0>)
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 800503c:	2002      	movs	r0, #2
 800503e:	f7fb fc61 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8005042:	2002      	movs	r0, #2
 8005044:	f7fb fc06 	bl	8000854 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005048:	4b32      	ldr	r3, [pc, #200]	@ (8005114 <checkAktifCalisma+0x13f4>)
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e017      	b.n	8005080 <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005050:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <checkAktifCalisma+0x13f4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d013      	beq.n	8005080 <checkAktifCalisma+0x1360>
 8005058:	4b2b      	ldr	r3, [pc, #172]	@ (8005108 <checkAktifCalisma+0x13e8>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00f      	beq.n	8005080 <checkAktifCalisma+0x1360>
 8005060:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <checkAktifCalisma+0x13f8>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f083 0301 	eor.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800506e:	4b29      	ldr	r3, [pc, #164]	@ (8005114 <checkAktifCalisma+0x13f4>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005074:	4b25      	ldr	r3, [pc, #148]	@ (800510c <checkAktifCalisma+0x13ec>)
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800507a:	2002      	movs	r0, #2
 800507c:	f7fe fc4a 	bl	8003914 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005080:	4b26      	ldr	r3, [pc, #152]	@ (800511c <checkAktifCalisma+0x13fc>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d151      	bne.n	800512c <checkAktifCalisma+0x140c>
 8005088:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <checkAktifCalisma+0x1400>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d14d      	bne.n	800512c <checkAktifCalisma+0x140c>
 8005090:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <checkAktifCalisma+0x1404>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d049      	beq.n	800512c <checkAktifCalisma+0x140c>
 8005098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800509c:	480e      	ldr	r0, [pc, #56]	@ (80050d8 <checkAktifCalisma+0x13b8>)
 800509e:	f005 ffe3 	bl	800b068 <HAL_GPIO_ReadPin>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d141      	bne.n	800512c <checkAktifCalisma+0x140c>
 80050a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005128 <checkAktifCalisma+0x1408>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f083 0301 	eor.w	r3, r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03a      	beq.n	800512c <checkAktifCalisma+0x140c>
					hataVar=1;
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <checkAktifCalisma+0x13e0>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80050bc:	2003      	movs	r0, #3
 80050be:	f7fb fc21 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80050c2:	2003      	movs	r0, #3
 80050c4:	f7fb fbc6 	bl	8000854 <hata2EEPROM>
					basinchatasi=1;
 80050c8:	4b17      	ldr	r3, [pc, #92]	@ (8005128 <checkAktifCalisma+0x1408>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e043      	b.n	8005158 <checkAktifCalisma+0x1438>
 80050d0:	40010800 	.word	0x40010800
 80050d4:	200010ab 	.word	0x200010ab
 80050d8:	40011000 	.word	0x40011000
 80050dc:	20001072 	.word	0x20001072
 80050e0:	200010ad 	.word	0x200010ad
 80050e4:	200010ac 	.word	0x200010ac
 80050e8:	20001064 	.word	0x20001064
 80050ec:	20001066 	.word	0x20001066
 80050f0:	20000f9c 	.word	0x20000f9c
 80050f4:	20001098 	.word	0x20001098
 80050f8:	40010c00 	.word	0x40010c00
 80050fc:	200010b9 	.word	0x200010b9
 8005100:	200010c0 	.word	0x200010c0
 8005104:	200010bb 	.word	0x200010bb
 8005108:	200010c2 	.word	0x200010c2
 800510c:	200010cc 	.word	0x200010cc
 8005110:	20001070 	.word	0x20001070
 8005114:	200010bc 	.word	0x200010bc
 8005118:	200010a4 	.word	0x200010a4
 800511c:	2000106f 	.word	0x2000106f
 8005120:	20001073 	.word	0x20001073
 8005124:	200010bf 	.word	0x200010bf
 8005128:	200010c9 	.word	0x200010c9
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800512c:	4b85      	ldr	r3, [pc, #532]	@ (8005344 <checkAktifCalisma+0x1624>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d011      	beq.n	8005158 <checkAktifCalisma+0x1438>
 8005134:	4b84      	ldr	r3, [pc, #528]	@ (8005348 <checkAktifCalisma+0x1628>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10d      	bne.n	8005158 <checkAktifCalisma+0x1438>
 800513c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005140:	4882      	ldr	r0, [pc, #520]	@ (800534c <checkAktifCalisma+0x162c>)
 8005142:	f005 ff91 	bl	800b068 <HAL_GPIO_ReadPin>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d105      	bne.n	8005158 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 800514c:	4b7d      	ldr	r3, [pc, #500]	@ (8005344 <checkAktifCalisma+0x1624>)
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8005152:	2003      	movs	r0, #3
 8005154:	f7fe fbde 	bl	8003914 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005158:	4b7d      	ldr	r3, [pc, #500]	@ (8005350 <checkAktifCalisma+0x1630>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <checkAktifCalisma+0x1448>
 8005160:	4b7c      	ldr	r3, [pc, #496]	@ (8005354 <checkAktifCalisma+0x1634>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d023      	beq.n	80051b0 <checkAktifCalisma+0x1490>
 8005168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800516c:	487a      	ldr	r0, [pc, #488]	@ (8005358 <checkAktifCalisma+0x1638>)
 800516e:	f005 ff7b 	bl	800b068 <HAL_GPIO_ReadPin>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d11b      	bne.n	80051b0 <checkAktifCalisma+0x1490>
 8005178:	4b78      	ldr	r3, [pc, #480]	@ (800535c <checkAktifCalisma+0x163c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d003      	beq.n	8005188 <checkAktifCalisma+0x1468>
 8005180:	4b76      	ldr	r3, [pc, #472]	@ (800535c <checkAktifCalisma+0x163c>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d113      	bne.n	80051b0 <checkAktifCalisma+0x1490>
 8005188:	4b75      	ldr	r3, [pc, #468]	@ (8005360 <checkAktifCalisma+0x1640>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f083 0301 	eor.w	r3, r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <checkAktifCalisma+0x1490>
					hataVar=1;
 8005196:	4b73      	ldr	r3, [pc, #460]	@ (8005364 <checkAktifCalisma+0x1644>)
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 800519c:	2004      	movs	r0, #4
 800519e:	f7fb fbb1 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80051a2:	2004      	movs	r0, #4
 80051a4:	f7fb fb56 	bl	8000854 <hata2EEPROM>
					katkapisivicihatasi=1;
 80051a8:	4b6d      	ldr	r3, [pc, #436]	@ (8005360 <checkAktifCalisma+0x1640>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e01f      	b.n	80051f0 <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80051b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005360 <checkAktifCalisma+0x1640>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <checkAktifCalisma+0x14d0>
 80051b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005368 <checkAktifCalisma+0x1648>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d017      	beq.n	80051f0 <checkAktifCalisma+0x14d0>
 80051c0:	4b63      	ldr	r3, [pc, #396]	@ (8005350 <checkAktifCalisma+0x1630>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f083 0301 	eor.w	r3, r3, #1
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <checkAktifCalisma+0x14d0>
 80051ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051d2:	4861      	ldr	r0, [pc, #388]	@ (8005358 <checkAktifCalisma+0x1638>)
 80051d4:	f005 ff48 	bl	800b068 <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 80051de:	4b60      	ldr	r3, [pc, #384]	@ (8005360 <checkAktifCalisma+0x1640>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80051e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005354 <checkAktifCalisma+0x1634>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80051ea:	2004      	movs	r0, #4
 80051ec:	f7fe fb92 	bl	8003914 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80051f0:	4b57      	ldr	r3, [pc, #348]	@ (8005350 <checkAktifCalisma+0x1630>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <checkAktifCalisma+0x14e0>
 80051f8:	4b5c      	ldr	r3, [pc, #368]	@ (800536c <checkAktifCalisma+0x164c>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d023      	beq.n	8005248 <checkAktifCalisma+0x1528>
 8005200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005204:	4854      	ldr	r0, [pc, #336]	@ (8005358 <checkAktifCalisma+0x1638>)
 8005206:	f005 ff2f 	bl	800b068 <HAL_GPIO_ReadPin>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d11b      	bne.n	8005248 <checkAktifCalisma+0x1528>
 8005210:	4b52      	ldr	r3, [pc, #328]	@ (800535c <checkAktifCalisma+0x163c>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d003      	beq.n	8005220 <checkAktifCalisma+0x1500>
 8005218:	4b50      	ldr	r3, [pc, #320]	@ (800535c <checkAktifCalisma+0x163c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d113      	bne.n	8005248 <checkAktifCalisma+0x1528>
 8005220:	4b53      	ldr	r3, [pc, #332]	@ (8005370 <checkAktifCalisma+0x1650>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f083 0301 	eor.w	r3, r3, #1
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <checkAktifCalisma+0x1528>

					hataVar=1;
 800522e:	4b4d      	ldr	r3, [pc, #308]	@ (8005364 <checkAktifCalisma+0x1644>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8005234:	2005      	movs	r0, #5
 8005236:	f7fb fb65 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(5);
 800523a:	2005      	movs	r0, #5
 800523c:	f7fb fb0a 	bl	8000854 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005240:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <checkAktifCalisma+0x1650>)
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e023      	b.n	8005290 <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005248:	4b49      	ldr	r3, [pc, #292]	@ (8005370 <checkAktifCalisma+0x1650>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01f      	beq.n	8005290 <checkAktifCalisma+0x1570>
 8005250:	4b45      	ldr	r3, [pc, #276]	@ (8005368 <checkAktifCalisma+0x1648>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <checkAktifCalisma+0x1570>
 8005258:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <checkAktifCalisma+0x1630>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f083 0301 	eor.w	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d014      	beq.n	8005290 <checkAktifCalisma+0x1570>
 8005266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800526a:	483b      	ldr	r0, [pc, #236]	@ (8005358 <checkAktifCalisma+0x1638>)
 800526c:	f005 fefc 	bl	800b068 <HAL_GPIO_ReadPin>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <checkAktifCalisma+0x1570>
 8005276:	4b3c      	ldr	r3, [pc, #240]	@ (8005368 <checkAktifCalisma+0x1648>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 800527e:	4b3c      	ldr	r3, [pc, #240]	@ (8005370 <checkAktifCalisma+0x1650>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005284:	4b39      	ldr	r3, [pc, #228]	@ (800536c <checkAktifCalisma+0x164c>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 800528a:	2005      	movs	r0, #5
 800528c:	f7fe fb42 	bl	8003914 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005290:	4b38      	ldr	r3, [pc, #224]	@ (8005374 <checkAktifCalisma+0x1654>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <checkAktifCalisma+0x1588>
 8005298:	4b37      	ldr	r3, [pc, #220]	@ (8005378 <checkAktifCalisma+0x1658>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <checkAktifCalisma+0x1588>
 80052a0:	4b36      	ldr	r3, [pc, #216]	@ (800537c <checkAktifCalisma+0x165c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01b      	beq.n	80052e0 <checkAktifCalisma+0x15c0>
 80052a8:	4b35      	ldr	r3, [pc, #212]	@ (8005380 <checkAktifCalisma+0x1660>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f083 0301 	eor.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d014      	beq.n	80052e0 <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 80052b6:	4b33      	ldr	r3, [pc, #204]	@ (8005384 <checkAktifCalisma+0x1664>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b33      	ldr	r3, [pc, #204]	@ (8005388 <checkAktifCalisma+0x1668>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	4a32      	ldr	r2, [pc, #200]	@ (800538c <checkAktifCalisma+0x166c>)
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d30b      	bcc.n	80052e0 <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 80052c8:	4b26      	ldr	r3, [pc, #152]	@ (8005364 <checkAktifCalisma+0x1644>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80052ce:	2006      	movs	r0, #6
 80052d0:	f7fb fb18 	bl	8000904 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80052d4:	2006      	movs	r0, #6
 80052d6:	f7fb fabd 	bl	8000854 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80052da:	4b29      	ldr	r3, [pc, #164]	@ (8005380 <checkAktifCalisma+0x1660>)
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80052e0:	4b27      	ldr	r3, [pc, #156]	@ (8005380 <checkAktifCalisma+0x1660>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <checkAktifCalisma+0x15f0>
 80052e8:	2108      	movs	r1, #8
 80052ea:	481b      	ldr	r0, [pc, #108]	@ (8005358 <checkAktifCalisma+0x1638>)
 80052ec:	f005 febc 	bl	800b068 <HAL_GPIO_ReadPin>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <checkAktifCalisma+0x15f0>
 80052f6:	4b16      	ldr	r3, [pc, #88]	@ (8005350 <checkAktifCalisma+0x1630>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8005304:	4b1e      	ldr	r3, [pc, #120]	@ (8005380 <checkAktifCalisma+0x1660>)
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800530a:	2006      	movs	r0, #6
 800530c:	f7fe fb02 	bl	8003914 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005310:	4b1f      	ldr	r3, [pc, #124]	@ (8005390 <checkAktifCalisma+0x1670>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <checkAktifCalisma+0x1610>
 8005318:	4b17      	ldr	r3, [pc, #92]	@ (8005378 <checkAktifCalisma+0x1658>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <checkAktifCalisma+0x1610>
 8005320:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <checkAktifCalisma+0x1674>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <checkAktifCalisma+0x1610>
 8005328:	4b14      	ldr	r3, [pc, #80]	@ (800537c <checkAktifCalisma+0x165c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d035      	beq.n	800539c <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 8005330:	4b19      	ldr	r3, [pc, #100]	@ (8005398 <checkAktifCalisma+0x1678>)
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8005336:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <checkAktifCalisma+0x1634>)
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 800533c:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <checkAktifCalisma+0x164c>)
 800533e:	2201      	movs	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e032      	b.n	80053aa <checkAktifCalisma+0x168a>
 8005344:	200010c9 	.word	0x200010c9
 8005348:	2000106f 	.word	0x2000106f
 800534c:	40010c00 	.word	0x40010c00
 8005350:	200010b9 	.word	0x200010b9
 8005354:	200010cd 	.word	0x200010cd
 8005358:	40010800 	.word	0x40010800
 800535c:	20001074 	.word	0x20001074
 8005360:	200010ca 	.word	0x200010ca
 8005364:	200010c0 	.word	0x200010c0
 8005368:	200010ad 	.word	0x200010ad
 800536c:	200010ce 	.word	0x200010ce
 8005370:	200010cb 	.word	0x200010cb
 8005374:	200010bf 	.word	0x200010bf
 8005378:	200010a4 	.word	0x200010a4
 800537c:	200010a3 	.word	0x200010a3
 8005380:	200010ba 	.word	0x200010ba
 8005384:	20001044 	.word	0x20001044
 8005388:	20001058 	.word	0x20001058
 800538c:	20001084 	.word	0x20001084
 8005390:	200010a1 	.word	0x200010a1
 8005394:	200010a2 	.word	0x200010a2
 8005398:	200010c1 	.word	0x200010c1
				} else {
					makineCalisiyor=1;
 800539c:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <checkAktifCalisma+0x1768>)
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80053a2:	4b3a      	ldr	r3, [pc, #232]	@ (800548c <checkAktifCalisma+0x176c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a3a      	ldr	r2, [pc, #232]	@ (8005490 <checkAktifCalisma+0x1770>)
 80053a8:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80053aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005494 <checkAktifCalisma+0x1774>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02f      	beq.n	8005412 <checkAktifCalisma+0x16f2>
 80053b2:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <checkAktifCalisma+0x1778>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f083 0301 	eor.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d028      	beq.n	8005412 <checkAktifCalisma+0x16f2>
 80053c0:	4b36      	ldr	r3, [pc, #216]	@ (800549c <checkAktifCalisma+0x177c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f083 0301 	eor.w	r3, r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d021      	beq.n	8005412 <checkAktifCalisma+0x16f2>
 80053ce:	4b34      	ldr	r3, [pc, #208]	@ (80054a0 <checkAktifCalisma+0x1780>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	f083 0301 	eor.w	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01a      	beq.n	8005412 <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80053dc:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <checkAktifCalisma+0x1784>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d013      	beq.n	8005412 <checkAktifCalisma+0x16f2>
 80053ea:	4b2f      	ldr	r3, [pc, #188]	@ (80054a8 <checkAktifCalisma+0x1788>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f083 0301 	eor.w	r3, r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <checkAktifCalisma+0x16f2>
 80053f8:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <checkAktifCalisma+0x178c>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f083 0301 	eor.w	r3, r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <checkAktifCalisma+0x16f2>

					hataVar=0;
 8005406:	4b23      	ldr	r3, [pc, #140]	@ (8005494 <checkAktifCalisma+0x1774>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 800540c:	2007      	movs	r0, #7
 800540e:	f7fe fa81 	bl	8003914 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <checkAktifCalisma+0x1774>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02a      	beq.n	8005470 <checkAktifCalisma+0x1750>
 800541a:	4b1f      	ldr	r3, [pc, #124]	@ (8005498 <checkAktifCalisma+0x1778>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f083 0301 	eor.w	r3, r3, #1
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d023      	beq.n	8005470 <checkAktifCalisma+0x1750>
 8005428:	4b1c      	ldr	r3, [pc, #112]	@ (800549c <checkAktifCalisma+0x177c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01f      	beq.n	8005470 <checkAktifCalisma+0x1750>
 8005430:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <checkAktifCalisma+0x1780>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f083 0301 	eor.w	r3, r3, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 800543e:	4b19      	ldr	r3, [pc, #100]	@ (80054a4 <checkAktifCalisma+0x1784>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f083 0301 	eor.w	r3, r3, #1
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d011      	beq.n	8005470 <checkAktifCalisma+0x1750>
 800544c:	4b16      	ldr	r3, [pc, #88]	@ (80054a8 <checkAktifCalisma+0x1788>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <checkAktifCalisma+0x1750>
 800545a:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <checkAktifCalisma+0x178c>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f083 0301 	eor.w	r3, r3, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <checkAktifCalisma+0x1790>)
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 800546e:	e009      	b.n	8005484 <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <checkAktifCalisma+0x177c>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f083 0301 	eor.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 800547e:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <checkAktifCalisma+0x1790>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200010c1 	.word	0x200010c1
 800548c:	20001044 	.word	0x20001044
 8005490:	20001058 	.word	0x20001058
 8005494:	200010c0 	.word	0x200010c0
 8005498:	200010bb 	.word	0x200010bb
 800549c:	200010bc 	.word	0x200010bc
 80054a0:	200010c9 	.word	0x200010c9
 80054a4:	200010ca 	.word	0x200010ca
 80054a8:	200010cb 	.word	0x200010cb
 80054ac:	200010ba 	.word	0x200010ba
 80054b0:	200010cf 	.word	0x200010cf

080054b4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80054b8:	4b66      	ldr	r3, [pc, #408]	@ (8005654 <checkDemoModCalisma+0x1a0>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f041 83ab 	bne.w	8006c18 <checkDemoModCalisma+0x1764>
 80054c2:	4b65      	ldr	r3, [pc, #404]	@ (8005658 <checkDemoModCalisma+0x1a4>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f041 83a6 	bne.w	8006c18 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80054cc:	4b63      	ldr	r3, [pc, #396]	@ (800565c <checkDemoModCalisma+0x1a8>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d11a      	bne.n	800550a <checkDemoModCalisma+0x56>
 80054d4:	4b62      	ldr	r3, [pc, #392]	@ (8005660 <checkDemoModCalisma+0x1ac>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <checkDemoModCalisma+0x56>
 80054dc:	4b61      	ldr	r3, [pc, #388]	@ (8005664 <checkDemoModCalisma+0x1b0>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <checkDemoModCalisma+0x46>
 80054e4:	4b60      	ldr	r3, [pc, #384]	@ (8005668 <checkDemoModCalisma+0x1b4>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f083 0301 	eor.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <checkDemoModCalisma+0x46>
 80054f2:	4b5e      	ldr	r3, [pc, #376]	@ (800566c <checkDemoModCalisma+0x1b8>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d007      	beq.n	800550a <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80054fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005670 <checkDemoModCalisma+0x1bc>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01c      	beq.n	800553c <checkDemoModCalisma+0x88>
 8005502:	4b5c      	ldr	r3, [pc, #368]	@ (8005674 <checkDemoModCalisma+0x1c0>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d118      	bne.n	800553c <checkDemoModCalisma+0x88>
 800550a:	4b5b      	ldr	r3, [pc, #364]	@ (8005678 <checkDemoModCalisma+0x1c4>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <checkDemoModCalisma+0x66>
 8005512:	4b5a      	ldr	r3, [pc, #360]	@ (800567c <checkDemoModCalisma+0x1c8>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d010      	beq.n	800553c <checkDemoModCalisma+0x88>
 800551a:	4b59      	ldr	r3, [pc, #356]	@ (8005680 <checkDemoModCalisma+0x1cc>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00c      	beq.n	800553c <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005522:	2201      	movs	r2, #1
 8005524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005528:	4856      	ldr	r0, [pc, #344]	@ (8005684 <checkDemoModCalisma+0x1d0>)
 800552a:	f005 fdb4 	bl	800b096 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800552e:	4b56      	ldr	r3, [pc, #344]	@ (8005688 <checkDemoModCalisma+0x1d4>)
 8005530:	2201      	movs	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005534:	4b55      	ldr	r3, [pc, #340]	@ (800568c <checkDemoModCalisma+0x1d8>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e008      	b.n	800554e <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005542:	4850      	ldr	r0, [pc, #320]	@ (8005684 <checkDemoModCalisma+0x1d0>)
 8005544:	f005 fda7 	bl	800b096 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005548:	4b4f      	ldr	r3, [pc, #316]	@ (8005688 <checkDemoModCalisma+0x1d4>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800554e:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <checkDemoModCalisma+0x1a4>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d164      	bne.n	8005620 <checkDemoModCalisma+0x16c>
 8005556:	4b49      	ldr	r3, [pc, #292]	@ (800567c <checkDemoModCalisma+0x1c8>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <checkDemoModCalisma+0xb2>
 800555e:	4b46      	ldr	r3, [pc, #280]	@ (8005678 <checkDemoModCalisma+0x1c4>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d05c      	beq.n	8005620 <checkDemoModCalisma+0x16c>
 8005566:	4b46      	ldr	r3, [pc, #280]	@ (8005680 <checkDemoModCalisma+0x1cc>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d058      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800556e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005572:	4844      	ldr	r0, [pc, #272]	@ (8005684 <checkDemoModCalisma+0x1d0>)
 8005574:	f005 fd78 	bl	800b068 <HAL_GPIO_ReadPin>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <checkDemoModCalisma+0xd2>
 800557e:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <checkDemoModCalisma+0x1dc>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04c      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005586:	2102      	movs	r1, #2
 8005588:	4842      	ldr	r0, [pc, #264]	@ (8005694 <checkDemoModCalisma+0x1e0>)
 800558a:	f005 fd6d 	bl	800b068 <HAL_GPIO_ReadPin>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d145      	bne.n	8005620 <checkDemoModCalisma+0x16c>
							&& (basincVar)
 8005594:	4b40      	ldr	r3, [pc, #256]	@ (8005698 <checkDemoModCalisma+0x1e4>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d041      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800559c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80055a0:	4838      	ldr	r0, [pc, #224]	@ (8005684 <checkDemoModCalisma+0x1d0>)
 80055a2:	f005 fd61 	bl	800b068 <HAL_GPIO_ReadPin>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d10e      	bne.n	80055ca <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055b0:	4834      	ldr	r0, [pc, #208]	@ (8005684 <checkDemoModCalisma+0x1d0>)
 80055b2:	f005 fd59 	bl	800b068 <HAL_GPIO_ReadPin>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80055bc:	2140      	movs	r1, #64	@ 0x40
 80055be:	4835      	ldr	r0, [pc, #212]	@ (8005694 <checkDemoModCalisma+0x1e0>)
 80055c0:	f005 fd52 	bl	800b068 <HAL_GPIO_ReadPin>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d003      	beq.n	80055d2 <checkDemoModCalisma+0x11e>
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <checkDemoModCalisma+0x1a8>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d026      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 80055d2:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <checkDemoModCalisma+0x1b0>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f083 0301 	eor.w	r3, r3, #1
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01f      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 80055e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005660 <checkDemoModCalisma+0x1ac>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f083 0301 	eor.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80055ee:	4b20      	ldr	r3, [pc, #128]	@ (8005670 <checkDemoModCalisma+0x1bc>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f083 0301 	eor.w	r3, r3, #1
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d011      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80055fc:	4b27      	ldr	r3, [pc, #156]	@ (800569c <checkDemoModCalisma+0x1e8>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f083 0301 	eor.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800560a:	4b25      	ldr	r3, [pc, #148]	@ (80056a0 <checkDemoModCalisma+0x1ec>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f083 0301 	eor.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8005618:	4b10      	ldr	r3, [pc, #64]	@ (800565c <checkDemoModCalisma+0x1a8>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e002      	b.n	8005626 <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8005620:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <checkDemoModCalisma+0x1a8>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <checkDemoModCalisma+0x1a8>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03c      	beq.n	80056a8 <checkDemoModCalisma+0x1f4>
 800562e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005632:	4818      	ldr	r0, [pc, #96]	@ (8005694 <checkDemoModCalisma+0x1e0>)
 8005634:	f005 fd18 	bl	800b068 <HAL_GPIO_ReadPin>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d134      	bne.n	80056a8 <checkDemoModCalisma+0x1f4>
 800563e:	4b19      	ldr	r3, [pc, #100]	@ (80056a4 <checkDemoModCalisma+0x1f0>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d030      	beq.n	80056a8 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005646:	2201      	movs	r2, #1
 8005648:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800564c:	480d      	ldr	r0, [pc, #52]	@ (8005684 <checkDemoModCalisma+0x1d0>)
 800564e:	f005 fd22 	bl	800b096 <HAL_GPIO_WritePin>
 8005652:	e02f      	b.n	80056b4 <checkDemoModCalisma+0x200>
 8005654:	2000108a 	.word	0x2000108a
 8005658:	20001089 	.word	0x20001089
 800565c:	200010a1 	.word	0x200010a1
 8005660:	200010a2 	.word	0x200010a2
 8005664:	200010a4 	.word	0x200010a4
 8005668:	2000109c 	.word	0x2000109c
 800566c:	2000107f 	.word	0x2000107f
 8005670:	200010a3 	.word	0x200010a3
 8005674:	2000107e 	.word	0x2000107e
 8005678:	200010bd 	.word	0x200010bd
 800567c:	200010d0 	.word	0x200010d0
 8005680:	200010be 	.word	0x200010be
 8005684:	40010c00 	.word	0x40010c00
 8005688:	200010bf 	.word	0x200010bf
 800568c:	200010ab 	.word	0x200010ab
 8005690:	200010a8 	.word	0x200010a8
 8005694:	40011000 	.word	0x40011000
 8005698:	2000106f 	.word	0x2000106f
 800569c:	200010a6 	.word	0x200010a6
 80056a0:	200010a7 	.word	0x200010a7
 80056a4:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056ae:	4865      	ldr	r0, [pc, #404]	@ (8005844 <checkDemoModCalisma+0x390>)
 80056b0:	f005 fcf1 	bl	800b096 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80056b4:	4b64      	ldr	r3, [pc, #400]	@ (8005848 <checkDemoModCalisma+0x394>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d013      	beq.n	80056e4 <checkDemoModCalisma+0x230>
 80056bc:	4b63      	ldr	r3, [pc, #396]	@ (800584c <checkDemoModCalisma+0x398>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d007      	beq.n	80056d4 <checkDemoModCalisma+0x220>
 80056c4:	4b61      	ldr	r3, [pc, #388]	@ (800584c <checkDemoModCalisma+0x398>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d003      	beq.n	80056d4 <checkDemoModCalisma+0x220>
 80056cc:	4b60      	ldr	r3, [pc, #384]	@ (8005850 <checkDemoModCalisma+0x39c>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80056d4:	2201      	movs	r2, #1
 80056d6:	2104      	movs	r1, #4
 80056d8:	485a      	ldr	r0, [pc, #360]	@ (8005844 <checkDemoModCalisma+0x390>)
 80056da:	f005 fcdc 	bl	800b096 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80056de:	4b5d      	ldr	r3, [pc, #372]	@ (8005854 <checkDemoModCalisma+0x3a0>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80056e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005854 <checkDemoModCalisma+0x3a0>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d033      	beq.n	8005754 <checkDemoModCalisma+0x2a0>
 80056ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056f0:	4854      	ldr	r0, [pc, #336]	@ (8005844 <checkDemoModCalisma+0x390>)
 80056f2:	f005 fcb9 	bl	800b068 <HAL_GPIO_ReadPin>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d106      	bne.n	800570a <checkDemoModCalisma+0x256>
 80056fc:	4b56      	ldr	r3, [pc, #344]	@ (8005858 <checkDemoModCalisma+0x3a4>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f083 0301 	eor.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <checkDemoModCalisma+0x264>
 800570a:	2102      	movs	r1, #2
 800570c:	4853      	ldr	r0, [pc, #332]	@ (800585c <checkDemoModCalisma+0x3a8>)
 800570e:	f005 fcab 	bl	800b068 <HAL_GPIO_ReadPin>
 8005712:	4603      	mov	r3, r0
 8005714:	2b01      	cmp	r3, #1
 8005716:	d11d      	bne.n	8005754 <checkDemoModCalisma+0x2a0>
 8005718:	4b51      	ldr	r3, [pc, #324]	@ (8005860 <checkDemoModCalisma+0x3ac>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d103      	bne.n	8005728 <checkDemoModCalisma+0x274>
 8005720:	4b50      	ldr	r3, [pc, #320]	@ (8005864 <checkDemoModCalisma+0x3b0>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <checkDemoModCalisma+0x2a0>
 8005728:	4b4f      	ldr	r3, [pc, #316]	@ (8005868 <checkDemoModCalisma+0x3b4>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d011      	beq.n	8005754 <checkDemoModCalisma+0x2a0>
 8005730:	4b4e      	ldr	r3, [pc, #312]	@ (800586c <checkDemoModCalisma+0x3b8>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <checkDemoModCalisma+0x2a0>
 8005738:	4b4d      	ldr	r3, [pc, #308]	@ (8005870 <checkDemoModCalisma+0x3bc>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f083 0301 	eor.w	r3, r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <checkDemoModCalisma+0x2a0>
					timer2=millis;
 8005746:	4b4b      	ldr	r3, [pc, #300]	@ (8005874 <checkDemoModCalisma+0x3c0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4b      	ldr	r2, [pc, #300]	@ (8005878 <checkDemoModCalisma+0x3c4>)
 800574c:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800574e:	4b48      	ldr	r3, [pc, #288]	@ (8005870 <checkDemoModCalisma+0x3bc>)
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8005754:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <checkDemoModCalisma+0x3c0>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b47      	ldr	r3, [pc, #284]	@ (8005878 <checkDemoModCalisma+0x3c4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	4a47      	ldr	r2, [pc, #284]	@ (800587c <checkDemoModCalisma+0x3c8>)
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	4293      	cmp	r3, r2
 8005764:	d303      	bcc.n	800576e <checkDemoModCalisma+0x2ba>
 8005766:	4b42      	ldr	r3, [pc, #264]	@ (8005870 <checkDemoModCalisma+0x3bc>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d118      	bne.n	80057a0 <checkDemoModCalisma+0x2ec>
 800576e:	4b3c      	ldr	r3, [pc, #240]	@ (8005860 <checkDemoModCalisma+0x3ac>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f083 0301 	eor.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <checkDemoModCalisma+0x2d6>
 800577c:	4b39      	ldr	r3, [pc, #228]	@ (8005864 <checkDemoModCalisma+0x3b0>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <checkDemoModCalisma+0x2ec>
 800578a:	4b37      	ldr	r3, [pc, #220]	@ (8005868 <checkDemoModCalisma+0x3b4>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <checkDemoModCalisma+0x2ec>
 8005798:	4b34      	ldr	r3, [pc, #208]	@ (800586c <checkDemoModCalisma+0x3b8>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2104      	movs	r1, #4
 80057a4:	4827      	ldr	r0, [pc, #156]	@ (8005844 <checkDemoModCalisma+0x390>)
 80057a6:	f005 fc76 	bl	800b096 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80057aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005854 <checkDemoModCalisma+0x3a0>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80057b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005870 <checkDemoModCalisma+0x3bc>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80057b6:	4b32      	ldr	r3, [pc, #200]	@ (8005880 <checkDemoModCalisma+0x3cc>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <checkDemoModCalisma+0x310>
					cerceveVar=1;
 80057be:	4b31      	ldr	r3, [pc, #196]	@ (8005884 <checkDemoModCalisma+0x3d0>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80057c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005880 <checkDemoModCalisma+0x3cc>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d116      	bne.n	80057fa <checkDemoModCalisma+0x346>
 80057cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005888 <checkDemoModCalisma+0x3d4>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d112      	bne.n	80057fa <checkDemoModCalisma+0x346>
 80057d4:	2101      	movs	r1, #1
 80057d6:	4821      	ldr	r0, [pc, #132]	@ (800585c <checkDemoModCalisma+0x3a8>)
 80057d8:	f005 fc46 	bl	800b068 <HAL_GPIO_ReadPin>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <checkDemoModCalisma+0x346>
 80057e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057e6:	4817      	ldr	r0, [pc, #92]	@ (8005844 <checkDemoModCalisma+0x390>)
 80057e8:	f005 fc3e 	bl	800b068 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <checkDemoModCalisma+0x346>
					cerceveVar=1;
 80057f2:	4b24      	ldr	r3, [pc, #144]	@ (8005884 <checkDemoModCalisma+0x3d0>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e011      	b.n	800581e <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80057fa:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <checkDemoModCalisma+0x3cc>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10d      	bne.n	800581e <checkDemoModCalisma+0x36a>
 8005802:	2101      	movs	r1, #1
 8005804:	4815      	ldr	r0, [pc, #84]	@ (800585c <checkDemoModCalisma+0x3a8>)
 8005806:	f005 fc2f 	bl	800b068 <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d106      	bne.n	800581e <checkDemoModCalisma+0x36a>
 8005810:	4b1d      	ldr	r3, [pc, #116]	@ (8005888 <checkDemoModCalisma+0x3d4>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 8005818:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <checkDemoModCalisma+0x3d0>)
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800581e:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <checkDemoModCalisma+0x3cc>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d135      	bne.n	8005892 <checkDemoModCalisma+0x3de>
 8005826:	4b18      	ldr	r3, [pc, #96]	@ (8005888 <checkDemoModCalisma+0x3d4>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d131      	bne.n	8005892 <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800582e:	2101      	movs	r1, #1
 8005830:	480a      	ldr	r0, [pc, #40]	@ (800585c <checkDemoModCalisma+0x3a8>)
 8005832:	f005 fc19 	bl	800b068 <HAL_GPIO_ReadPin>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d127      	bne.n	800588c <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 800583c:	4b11      	ldr	r3, [pc, #68]	@ (8005884 <checkDemoModCalisma+0x3d0>)
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e026      	b.n	8005892 <checkDemoModCalisma+0x3de>
 8005844:	40010c00 	.word	0x40010c00
 8005848:	200010a1 	.word	0x200010a1
 800584c:	2000107b 	.word	0x2000107b
 8005850:	2000107f 	.word	0x2000107f
 8005854:	200010a5 	.word	0x200010a5
 8005858:	200010a8 	.word	0x200010a8
 800585c:	40011000 	.word	0x40011000
 8005860:	200010bd 	.word	0x200010bd
 8005864:	200010d0 	.word	0x200010d0
 8005868:	200010be 	.word	0x200010be
 800586c:	2000106f 	.word	0x2000106f
 8005870:	2000109d 	.word	0x2000109d
 8005874:	20001044 	.word	0x20001044
 8005878:	20001050 	.word	0x20001050
 800587c:	20001080 	.word	0x20001080
 8005880:	20001070 	.word	0x20001070
 8005884:	200010c2 	.word	0x200010c2
 8005888:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 800588c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a8c <checkDemoModCalisma+0x5d8>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005892:	4b7f      	ldr	r3, [pc, #508]	@ (8005a90 <checkDemoModCalisma+0x5dc>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d17c      	bne.n	8005994 <checkDemoModCalisma+0x4e0>
 800589a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a94 <checkDemoModCalisma+0x5e0>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d078      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
 80058a2:	4b7d      	ldr	r3, [pc, #500]	@ (8005a98 <checkDemoModCalisma+0x5e4>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d074      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80058aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80058ae:	487b      	ldr	r0, [pc, #492]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 80058b0:	f005 fbda 	bl	800b068 <HAL_GPIO_ReadPin>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <checkDemoModCalisma+0x40e>
 80058ba:	4b79      	ldr	r3, [pc, #484]	@ (8005aa0 <checkDemoModCalisma+0x5ec>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d068      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80058c2:	4b72      	ldr	r3, [pc, #456]	@ (8005a8c <checkDemoModCalisma+0x5d8>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d064      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
 80058ca:	4b76      	ldr	r3, [pc, #472]	@ (8005aa4 <checkDemoModCalisma+0x5f0>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f083 0301 	eor.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d05d      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80058d8:	2104      	movs	r1, #4
 80058da:	4873      	ldr	r0, [pc, #460]	@ (8005aa8 <checkDemoModCalisma+0x5f4>)
 80058dc:	f005 fbc4 	bl	800b068 <HAL_GPIO_ReadPin>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <checkDemoModCalisma+0x43a>
 80058e6:	4b71      	ldr	r3, [pc, #452]	@ (8005aac <checkDemoModCalisma+0x5f8>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d152      	bne.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80058ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80058f2:	486a      	ldr	r0, [pc, #424]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 80058f4:	f005 fbb8 	bl	800b068 <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10e      	bne.n	800591c <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80058fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005902:	4866      	ldr	r0, [pc, #408]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 8005904:	f005 fbb0 	bl	800b068 <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d106      	bne.n	800591c <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800590e:	2140      	movs	r1, #64	@ 0x40
 8005910:	4865      	ldr	r0, [pc, #404]	@ (8005aa8 <checkDemoModCalisma+0x5f4>)
 8005912:	f005 fba9 	bl	800b068 <HAL_GPIO_ReadPin>
 8005916:	4603      	mov	r3, r0
 8005918:	2b01      	cmp	r3, #1
 800591a:	d003      	beq.n	8005924 <checkDemoModCalisma+0x470>
 800591c:	4b64      	ldr	r3, [pc, #400]	@ (8005ab0 <checkDemoModCalisma+0x5fc>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d037      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8005924:	4b63      	ldr	r3, [pc, #396]	@ (8005ab4 <checkDemoModCalisma+0x600>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f083 0301 	eor.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d030      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8005932:	4b61      	ldr	r3, [pc, #388]	@ (8005ab8 <checkDemoModCalisma+0x604>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f083 0301 	eor.w	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d029      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005940:	4b5e      	ldr	r3, [pc, #376]	@ (8005abc <checkDemoModCalisma+0x608>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f083 0301 	eor.w	r3, r3, #1
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d022      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800594e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac0 <checkDemoModCalisma+0x60c>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	f083 0301 	eor.w	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 800595c:	4b59      	ldr	r3, [pc, #356]	@ (8005ac4 <checkDemoModCalisma+0x610>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f083 0301 	eor.w	r3, r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d014      	beq.n	8005994 <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 800596a:	4b57      	ldr	r3, [pc, #348]	@ (8005ac8 <checkDemoModCalisma+0x614>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005978:	2201      	movs	r2, #1
 800597a:	2102      	movs	r1, #2
 800597c:	4847      	ldr	r0, [pc, #284]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 800597e:	f005 fb8a 	bl	800b096 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8005982:	4b4b      	ldr	r3, [pc, #300]	@ (8005ab0 <checkDemoModCalisma+0x5fc>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005988:	4b50      	ldr	r3, [pc, #320]	@ (8005acc <checkDemoModCalisma+0x618>)
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800598e:	4b50      	ldr	r3, [pc, #320]	@ (8005ad0 <checkDemoModCalisma+0x61c>)
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005994:	4b46      	ldr	r3, [pc, #280]	@ (8005ab0 <checkDemoModCalisma+0x5fc>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d033      	beq.n	8005a04 <checkDemoModCalisma+0x550>
 800599c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059a0:	483e      	ldr	r0, [pc, #248]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 80059a2:	f005 fb61 	bl	800b068 <HAL_GPIO_ReadPin>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d106      	bne.n	80059ba <checkDemoModCalisma+0x506>
 80059ac:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa0 <checkDemoModCalisma+0x5ec>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f083 0301 	eor.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <checkDemoModCalisma+0x51c>
 80059ba:	2104      	movs	r1, #4
 80059bc:	483a      	ldr	r0, [pc, #232]	@ (8005aa8 <checkDemoModCalisma+0x5f4>)
 80059be:	f005 fb53 	bl	800b068 <HAL_GPIO_ReadPin>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d11d      	bne.n	8005a04 <checkDemoModCalisma+0x550>
 80059c8:	4b38      	ldr	r3, [pc, #224]	@ (8005aac <checkDemoModCalisma+0x5f8>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <checkDemoModCalisma+0x550>
 80059d0:	4b30      	ldr	r3, [pc, #192]	@ (8005a94 <checkDemoModCalisma+0x5e0>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d015      	beq.n	8005a04 <checkDemoModCalisma+0x550>
 80059d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a98 <checkDemoModCalisma+0x5e4>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d011      	beq.n	8005a04 <checkDemoModCalisma+0x550>
 80059e0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a8c <checkDemoModCalisma+0x5d8>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00d      	beq.n	8005a04 <checkDemoModCalisma+0x550>
 80059e8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad4 <checkDemoModCalisma+0x620>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f083 0301 	eor.w	r3, r3, #1
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <checkDemoModCalisma+0x550>
					timer2=millis;
 80059f6:	4b38      	ldr	r3, [pc, #224]	@ (8005ad8 <checkDemoModCalisma+0x624>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a38      	ldr	r2, [pc, #224]	@ (8005adc <checkDemoModCalisma+0x628>)
 80059fc:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80059fe:	4b35      	ldr	r3, [pc, #212]	@ (8005ad4 <checkDemoModCalisma+0x620>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005a04:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <checkDemoModCalisma+0x624>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4b34      	ldr	r3, [pc, #208]	@ (8005adc <checkDemoModCalisma+0x628>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	4a34      	ldr	r2, [pc, #208]	@ (8005ae0 <checkDemoModCalisma+0x62c>)
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d303      	bcc.n	8005a1e <checkDemoModCalisma+0x56a>
 8005a16:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad4 <checkDemoModCalisma+0x620>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d114      	bne.n	8005a48 <checkDemoModCalisma+0x594>
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a94 <checkDemoModCalisma+0x5e0>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f083 0301 	eor.w	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <checkDemoModCalisma+0x594>
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a98 <checkDemoModCalisma+0x5e4>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f083 0301 	eor.w	r3, r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <checkDemoModCalisma+0x594>
 8005a3a:	4b14      	ldr	r3, [pc, #80]	@ (8005a8c <checkDemoModCalisma+0x5d8>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f083 0301 	eor.w	r3, r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4813      	ldr	r0, [pc, #76]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 8005a4e:	f005 fb22 	bl	800b096 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005a52:	4b17      	ldr	r3, [pc, #92]	@ (8005ab0 <checkDemoModCalisma+0x5fc>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005a58:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad4 <checkDemoModCalisma+0x620>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005a5e:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <checkDemoModCalisma+0x5fc>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d040      	beq.n	8005ae8 <checkDemoModCalisma+0x634>
 8005a66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005a6a:	480f      	ldr	r0, [pc, #60]	@ (8005aa8 <checkDemoModCalisma+0x5f4>)
 8005a6c:	f005 fafc 	bl	800b068 <HAL_GPIO_ReadPin>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d138      	bne.n	8005ae8 <checkDemoModCalisma+0x634>
 8005a76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae4 <checkDemoModCalisma+0x630>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d034      	beq.n	8005ae8 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005a7e:	2201      	movs	r2, #1
 8005a80:	2101      	movs	r1, #1
 8005a82:	4806      	ldr	r0, [pc, #24]	@ (8005a9c <checkDemoModCalisma+0x5e8>)
 8005a84:	f005 fb07 	bl	800b096 <HAL_GPIO_WritePin>
 8005a88:	e033      	b.n	8005af2 <checkDemoModCalisma+0x63e>
 8005a8a:	bf00      	nop
 8005a8c:	200010c2 	.word	0x200010c2
 8005a90:	20001089 	.word	0x20001089
 8005a94:	200010bd 	.word	0x200010bd
 8005a98:	200010be 	.word	0x200010be
 8005a9c:	40010c00 	.word	0x40010c00
 8005aa0:	200010a9 	.word	0x200010a9
 8005aa4:	200010bc 	.word	0x200010bc
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	20001072 	.word	0x20001072
 8005ab0:	200010a4 	.word	0x200010a4
 8005ab4:	200010a1 	.word	0x200010a1
 8005ab8:	200010a5 	.word	0x200010a5
 8005abc:	200010a2 	.word	0x200010a2
 8005ac0:	200010a3 	.word	0x200010a3
 8005ac4:	200010a6 	.word	0x200010a6
 8005ac8:	200010a7 	.word	0x200010a7
 8005acc:	200010ac 	.word	0x200010ac
 8005ad0:	200010cc 	.word	0x200010cc
 8005ad4:	2000109c 	.word	0x2000109c
 8005ad8:	20001044 	.word	0x20001044
 8005adc:	20001050 	.word	0x20001050
 8005ae0:	20001081 	.word	0x20001081
 8005ae4:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2101      	movs	r1, #1
 8005aec:	4836      	ldr	r0, [pc, #216]	@ (8005bc8 <checkDemoModCalisma+0x714>)
 8005aee:	f005 fad2 	bl	800b096 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005af2:	4b36      	ldr	r3, [pc, #216]	@ (8005bcc <checkDemoModCalisma+0x718>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8080 	bne.w	8005bfc <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005afc:	4b34      	ldr	r3, [pc, #208]	@ (8005bd0 <checkDemoModCalisma+0x71c>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d003      	beq.n	8005b0c <checkDemoModCalisma+0x658>
 8005b04:	4b32      	ldr	r3, [pc, #200]	@ (8005bd0 <checkDemoModCalisma+0x71c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d177      	bne.n	8005bfc <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005b0c:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <checkDemoModCalisma+0x720>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d073      	beq.n	8005bfc <checkDemoModCalisma+0x748>
 8005b14:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <checkDemoModCalisma+0x724>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d06f      	beq.n	8005bfc <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b20:	4829      	ldr	r0, [pc, #164]	@ (8005bc8 <checkDemoModCalisma+0x714>)
 8005b22:	f005 faa1 	bl	800b068 <HAL_GPIO_ReadPin>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d167      	bne.n	8005bfc <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005b2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b30:	482a      	ldr	r0, [pc, #168]	@ (8005bdc <checkDemoModCalisma+0x728>)
 8005b32:	f005 fa99 	bl	800b068 <HAL_GPIO_ReadPin>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <checkDemoModCalisma+0x690>
 8005b3c:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <checkDemoModCalisma+0x72c>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d15b      	bne.n	8005bfc <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005b44:	2140      	movs	r1, #64	@ 0x40
 8005b46:	4825      	ldr	r0, [pc, #148]	@ (8005bdc <checkDemoModCalisma+0x728>)
 8005b48:	f005 fa8e 	bl	800b068 <HAL_GPIO_ReadPin>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10f      	bne.n	8005b72 <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005b52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b56:	481c      	ldr	r0, [pc, #112]	@ (8005bc8 <checkDemoModCalisma+0x714>)
 8005b58:	f005 fa86 	bl	800b068 <HAL_GPIO_ReadPin>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d107      	bne.n	8005b72 <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005b62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005b66:	4818      	ldr	r0, [pc, #96]	@ (8005bc8 <checkDemoModCalisma+0x714>)
 8005b68:	f005 fa7e 	bl	800b068 <HAL_GPIO_ReadPin>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d003      	beq.n	8005b7a <checkDemoModCalisma+0x6c6>
 8005b72:	4b1c      	ldr	r3, [pc, #112]	@ (8005be4 <checkDemoModCalisma+0x730>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d040      	beq.n	8005bfc <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005be8 <checkDemoModCalisma+0x734>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f083 0301 	eor.w	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d039      	beq.n	8005bfc <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8005b88:	4b18      	ldr	r3, [pc, #96]	@ (8005bec <checkDemoModCalisma+0x738>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f083 0301 	eor.w	r3, r3, #1
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d032      	beq.n	8005bfc <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8005b96:	4b16      	ldr	r3, [pc, #88]	@ (8005bf0 <checkDemoModCalisma+0x73c>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f083 0301 	eor.w	r3, r3, #1
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02b      	beq.n	8005bfc <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <checkDemoModCalisma+0x740>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	f083 0301 	eor.w	r3, r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d024      	beq.n	8005bfc <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8005bb2:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <checkDemoModCalisma+0x744>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	f083 0301 	eor.w	r3, r3, #1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01d      	beq.n	8005bfc <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8005bc0:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <checkDemoModCalisma+0x730>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e01c      	b.n	8005c02 <checkDemoModCalisma+0x74e>
 8005bc8:	40010c00 	.word	0x40010c00
 8005bcc:	20001089 	.word	0x20001089
 8005bd0:	2000107b 	.word	0x2000107b
 8005bd4:	200010bd 	.word	0x200010bd
 8005bd8:	200010be 	.word	0x200010be
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	2000107c 	.word	0x2000107c
 8005be4:	200010a2 	.word	0x200010a2
 8005be8:	200010a1 	.word	0x200010a1
 8005bec:	200010a5 	.word	0x200010a5
 8005bf0:	200010a4 	.word	0x200010a4
 8005bf4:	200010a3 	.word	0x200010a3
 8005bf8:	200010a7 	.word	0x200010a7
				} else {
					devmotoryukaricalisiyor=0;
 8005bfc:	4b64      	ldr	r3, [pc, #400]	@ (8005d90 <checkDemoModCalisma+0x8dc>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005c02:	4b63      	ldr	r3, [pc, #396]	@ (8005d90 <checkDemoModCalisma+0x8dc>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2120      	movs	r1, #32
 8005c0e:	4861      	ldr	r0, [pc, #388]	@ (8005d94 <checkDemoModCalisma+0x8e0>)
 8005c10:	f005 fa41 	bl	800b096 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005c14:	4b60      	ldr	r3, [pc, #384]	@ (8005d98 <checkDemoModCalisma+0x8e4>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005d98 <checkDemoModCalisma+0x8e4>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d025      	beq.n	8005c6e <checkDemoModCalisma+0x7ba>
 8005c22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c26:	485d      	ldr	r0, [pc, #372]	@ (8005d9c <checkDemoModCalisma+0x8e8>)
 8005c28:	f005 fa1e 	bl	800b068 <HAL_GPIO_ReadPin>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d007      	beq.n	8005c42 <checkDemoModCalisma+0x78e>
 8005c32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c36:	4857      	ldr	r0, [pc, #348]	@ (8005d94 <checkDemoModCalisma+0x8e0>)
 8005c38:	f005 fa16 	bl	800b068 <HAL_GPIO_ReadPin>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d115      	bne.n	8005c6e <checkDemoModCalisma+0x7ba>
 8005c42:	4b57      	ldr	r3, [pc, #348]	@ (8005da0 <checkDemoModCalisma+0x8ec>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d011      	beq.n	8005c6e <checkDemoModCalisma+0x7ba>
 8005c4a:	4b56      	ldr	r3, [pc, #344]	@ (8005da4 <checkDemoModCalisma+0x8f0>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <checkDemoModCalisma+0x7ba>
 8005c52:	4b55      	ldr	r3, [pc, #340]	@ (8005da8 <checkDemoModCalisma+0x8f4>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f083 0301 	eor.w	r3, r3, #1
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <checkDemoModCalisma+0x7ba>
					timer2=millis;
 8005c60:	4b52      	ldr	r3, [pc, #328]	@ (8005dac <checkDemoModCalisma+0x8f8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a52      	ldr	r2, [pc, #328]	@ (8005db0 <checkDemoModCalisma+0x8fc>)
 8005c66:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005c68:	4b4f      	ldr	r3, [pc, #316]	@ (8005da8 <checkDemoModCalisma+0x8f4>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dac <checkDemoModCalisma+0x8f8>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b4f      	ldr	r3, [pc, #316]	@ (8005db0 <checkDemoModCalisma+0x8fc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	4a4e      	ldr	r2, [pc, #312]	@ (8005db4 <checkDemoModCalisma+0x900>)
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d303      	bcc.n	8005c88 <checkDemoModCalisma+0x7d4>
 8005c80:	4b49      	ldr	r3, [pc, #292]	@ (8005da8 <checkDemoModCalisma+0x8f4>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10d      	bne.n	8005ca4 <checkDemoModCalisma+0x7f0>
 8005c88:	4b45      	ldr	r3, [pc, #276]	@ (8005da0 <checkDemoModCalisma+0x8ec>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f083 0301 	eor.w	r3, r3, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <checkDemoModCalisma+0x7f0>
 8005c96:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <checkDemoModCalisma+0x8f0>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2120      	movs	r1, #32
 8005ca8:	483a      	ldr	r0, [pc, #232]	@ (8005d94 <checkDemoModCalisma+0x8e0>)
 8005caa:	f005 f9f4 	bl	800b096 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005cae:	4b3a      	ldr	r3, [pc, #232]	@ (8005d98 <checkDemoModCalisma+0x8e4>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8005da8 <checkDemoModCalisma+0x8f4>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005cba:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <checkDemoModCalisma+0x904>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 8088 	bne.w	8005dd4 <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8005dbc <checkDemoModCalisma+0x908>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d003      	beq.n	8005cd4 <checkDemoModCalisma+0x820>
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <checkDemoModCalisma+0x908>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d17f      	bne.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8005cd4:	4b32      	ldr	r3, [pc, #200]	@ (8005da0 <checkDemoModCalisma+0x8ec>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d07b      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
 8005cdc:	4b31      	ldr	r3, [pc, #196]	@ (8005da4 <checkDemoModCalisma+0x8f0>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d077      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005ce4:	2140      	movs	r1, #64	@ 0x40
 8005ce6:	482b      	ldr	r0, [pc, #172]	@ (8005d94 <checkDemoModCalisma+0x8e0>)
 8005ce8:	f005 f9be 	bl	800b068 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d170      	bne.n	8005dd4 <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005cf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cf6:	4827      	ldr	r0, [pc, #156]	@ (8005d94 <checkDemoModCalisma+0x8e0>)
 8005cf8:	f005 f9b6 	bl	800b068 <HAL_GPIO_ReadPin>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <checkDemoModCalisma+0x856>
 8005d02:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <checkDemoModCalisma+0x90c>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d164      	bne.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d0e:	4823      	ldr	r0, [pc, #140]	@ (8005d9c <checkDemoModCalisma+0x8e8>)
 8005d10:	f005 f9aa 	bl	800b068 <HAL_GPIO_ReadPin>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10f      	bne.n	8005d3a <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005d1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d1e:	481f      	ldr	r0, [pc, #124]	@ (8005d9c <checkDemoModCalisma+0x8e8>)
 8005d20:	f005 f9a2 	bl	800b068 <HAL_GPIO_ReadPin>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d107      	bne.n	8005d3a <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005d2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d2e:	481b      	ldr	r0, [pc, #108]	@ (8005d9c <checkDemoModCalisma+0x8e8>)
 8005d30:	f005 f99a 	bl	800b068 <HAL_GPIO_ReadPin>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d003      	beq.n	8005d42 <checkDemoModCalisma+0x88e>
 8005d3a:	4b22      	ldr	r3, [pc, #136]	@ (8005dc4 <checkDemoModCalisma+0x910>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d048      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8005d42:	4b21      	ldr	r3, [pc, #132]	@ (8005dc8 <checkDemoModCalisma+0x914>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f083 0301 	eor.w	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d041      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8005d50:	4b1e      	ldr	r3, [pc, #120]	@ (8005dcc <checkDemoModCalisma+0x918>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f083 0301 	eor.w	r3, r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d03a      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd0 <checkDemoModCalisma+0x91c>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f083 0301 	eor.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d033      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <checkDemoModCalisma+0x8e4>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f083 0301 	eor.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02c      	beq.n	8005dd4 <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <checkDemoModCalisma+0x8dc>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f083 0301 	eor.w	r3, r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d025      	beq.n	8005dd4 <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 8005d88:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc4 <checkDemoModCalisma+0x910>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e024      	b.n	8005dda <checkDemoModCalisma+0x926>
 8005d90:	200010a2 	.word	0x200010a2
 8005d94:	40011000 	.word	0x40011000
 8005d98:	200010a6 	.word	0x200010a6
 8005d9c:	40010c00 	.word	0x40010c00
 8005da0:	200010bd 	.word	0x200010bd
 8005da4:	200010be 	.word	0x200010be
 8005da8:	2000109e 	.word	0x2000109e
 8005dac:	20001044 	.word	0x20001044
 8005db0:	20001050 	.word	0x20001050
 8005db4:	20001082 	.word	0x20001082
 8005db8:	20001089 	.word	0x20001089
 8005dbc:	2000107b 	.word	0x2000107b
 8005dc0:	2000107d 	.word	0x2000107d
 8005dc4:	200010a3 	.word	0x200010a3
 8005dc8:	200010a1 	.word	0x200010a1
 8005dcc:	200010a5 	.word	0x200010a5
 8005dd0:	200010a4 	.word	0x200010a4
				} else {
					devmotorasagicalisiyor=0;
 8005dd4:	4b96      	ldr	r3, [pc, #600]	@ (8006030 <checkDemoModCalisma+0xb7c>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005dda:	4b95      	ldr	r3, [pc, #596]	@ (8006030 <checkDemoModCalisma+0xb7c>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005de2:	2201      	movs	r2, #1
 8005de4:	2110      	movs	r1, #16
 8005de6:	4893      	ldr	r0, [pc, #588]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005de8:	f005 f955 	bl	800b096 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005dec:	4b92      	ldr	r3, [pc, #584]	@ (8006038 <checkDemoModCalisma+0xb84>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005df2:	4b91      	ldr	r3, [pc, #580]	@ (8006038 <checkDemoModCalisma+0xb84>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d024      	beq.n	8005e44 <checkDemoModCalisma+0x990>
 8005dfa:	2140      	movs	r1, #64	@ 0x40
 8005dfc:	488d      	ldr	r0, [pc, #564]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005dfe:	f005 f933 	bl	800b068 <HAL_GPIO_ReadPin>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d007      	beq.n	8005e18 <checkDemoModCalisma+0x964>
 8005e08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e0c:	4889      	ldr	r0, [pc, #548]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005e0e:	f005 f92b 	bl	800b068 <HAL_GPIO_ReadPin>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d115      	bne.n	8005e44 <checkDemoModCalisma+0x990>
 8005e18:	4b88      	ldr	r3, [pc, #544]	@ (800603c <checkDemoModCalisma+0xb88>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d011      	beq.n	8005e44 <checkDemoModCalisma+0x990>
 8005e20:	4b87      	ldr	r3, [pc, #540]	@ (8006040 <checkDemoModCalisma+0xb8c>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <checkDemoModCalisma+0x990>
 8005e28:	4b86      	ldr	r3, [pc, #536]	@ (8006044 <checkDemoModCalisma+0xb90>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f083 0301 	eor.w	r3, r3, #1
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d006      	beq.n	8005e44 <checkDemoModCalisma+0x990>
					timer2=millis;
 8005e36:	4b84      	ldr	r3, [pc, #528]	@ (8006048 <checkDemoModCalisma+0xb94>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a84      	ldr	r2, [pc, #528]	@ (800604c <checkDemoModCalisma+0xb98>)
 8005e3c:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005e3e:	4b81      	ldr	r3, [pc, #516]	@ (8006044 <checkDemoModCalisma+0xb90>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005e44:	4b80      	ldr	r3, [pc, #512]	@ (8006048 <checkDemoModCalisma+0xb94>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b80      	ldr	r3, [pc, #512]	@ (800604c <checkDemoModCalisma+0xb98>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	4a80      	ldr	r2, [pc, #512]	@ (8006050 <checkDemoModCalisma+0xb9c>)
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d303      	bcc.n	8005e5e <checkDemoModCalisma+0x9aa>
 8005e56:	4b7b      	ldr	r3, [pc, #492]	@ (8006044 <checkDemoModCalisma+0xb90>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <checkDemoModCalisma+0x9c6>
 8005e5e:	4b77      	ldr	r3, [pc, #476]	@ (800603c <checkDemoModCalisma+0xb88>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f083 0301 	eor.w	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <checkDemoModCalisma+0x9c6>
 8005e6c:	4b74      	ldr	r3, [pc, #464]	@ (8006040 <checkDemoModCalisma+0xb8c>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f083 0301 	eor.w	r3, r3, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2110      	movs	r1, #16
 8005e7e:	486d      	ldr	r0, [pc, #436]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005e80:	f005 f909 	bl	800b096 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005e84:	4b6c      	ldr	r3, [pc, #432]	@ (8006038 <checkDemoModCalisma+0xb84>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005e8a:	4b6e      	ldr	r3, [pc, #440]	@ (8006044 <checkDemoModCalisma+0xb90>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005e90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e94:	486f      	ldr	r0, [pc, #444]	@ (8006054 <checkDemoModCalisma+0xba0>)
 8005e96:	f005 f8e7 	bl	800b068 <HAL_GPIO_ReadPin>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d120      	bne.n	8005ee2 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005ea0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ea4:	486b      	ldr	r0, [pc, #428]	@ (8006054 <checkDemoModCalisma+0xba0>)
 8005ea6:	f005 f8df 	bl	800b068 <HAL_GPIO_ReadPin>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d118      	bne.n	8005ee2 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005eb0:	2104      	movs	r1, #4
 8005eb2:	4868      	ldr	r0, [pc, #416]	@ (8006054 <checkDemoModCalisma+0xba0>)
 8005eb4:	f005 f8d8 	bl	800b068 <HAL_GPIO_ReadPin>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d111      	bne.n	8005ee2 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	4864      	ldr	r0, [pc, #400]	@ (8006054 <checkDemoModCalisma+0xba0>)
 8005ec2:	f005 f8d1 	bl	800b068 <HAL_GPIO_ReadPin>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4861      	ldr	r0, [pc, #388]	@ (8006054 <checkDemoModCalisma+0xba0>)
 8005ed0:	f005 f8ca 	bl	800b068 <HAL_GPIO_ReadPin>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <checkDemoModCalisma+0xa2e>
					makineStop=1;
 8005eda:	4b5f      	ldr	r3, [pc, #380]	@ (8006058 <checkDemoModCalisma+0xba4>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e002      	b.n	8005ee8 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 8005ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8006058 <checkDemoModCalisma+0xba4>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ee8:	4b5c      	ldr	r3, [pc, #368]	@ (800605c <checkDemoModCalisma+0xba8>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d144      	bne.n	8005f7a <checkDemoModCalisma+0xac6>
 8005ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8006060 <checkDemoModCalisma+0xbac>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d003      	beq.n	8005f00 <checkDemoModCalisma+0xa4c>
 8005ef8:	4b59      	ldr	r3, [pc, #356]	@ (8006060 <checkDemoModCalisma+0xbac>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d13c      	bne.n	8005f7a <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f00:	2180      	movs	r1, #128	@ 0x80
 8005f02:	484c      	ldr	r0, [pc, #304]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005f04:	f005 f8b0 	bl	800b068 <HAL_GPIO_ReadPin>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <checkDemoModCalisma+0xa62>
 8005f0e:	4b55      	ldr	r3, [pc, #340]	@ (8006064 <checkDemoModCalisma+0xbb0>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <checkDemoModCalisma+0xa7a>
 8005f16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f1a:	484e      	ldr	r0, [pc, #312]	@ (8006054 <checkDemoModCalisma+0xba0>)
 8005f1c:	f005 f8a4 	bl	800b068 <HAL_GPIO_ReadPin>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d129      	bne.n	8005f7a <checkDemoModCalisma+0xac6>
 8005f26:	4b4f      	ldr	r3, [pc, #316]	@ (8006064 <checkDemoModCalisma+0xbb0>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d125      	bne.n	8005f7a <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f2e:	2104      	movs	r1, #4
 8005f30:	4840      	ldr	r0, [pc, #256]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005f32:	f005 f899 	bl	800b068 <HAL_GPIO_ReadPin>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d003      	beq.n	8005f44 <checkDemoModCalisma+0xa90>
 8005f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8006068 <checkDemoModCalisma+0xbb4>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d11a      	bne.n	8005f7a <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f44:	2102      	movs	r1, #2
 8005f46:	483b      	ldr	r0, [pc, #236]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005f48:	f005 f88e 	bl	800b068 <HAL_GPIO_ReadPin>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 8005f52:	4b46      	ldr	r3, [pc, #280]	@ (800606c <checkDemoModCalisma+0xbb8>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	f083 0301 	eor.w	r3, r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00c      	beq.n	8005f7a <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 8005f60:	4b3d      	ldr	r3, [pc, #244]	@ (8006058 <checkDemoModCalisma+0xba4>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 8005f68:	4b41      	ldr	r3, [pc, #260]	@ (8006070 <checkDemoModCalisma+0xbbc>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005f6e:	4b36      	ldr	r3, [pc, #216]	@ (8006048 <checkDemoModCalisma+0xb94>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a40      	ldr	r2, [pc, #256]	@ (8006074 <checkDemoModCalisma+0xbc0>)
 8005f74:	6013      	str	r3, [r2, #0]
					bekle();
 8005f76:	f7fd fd37 	bl	80039e8 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005f7a:	4b33      	ldr	r3, [pc, #204]	@ (8006048 <checkDemoModCalisma+0xb94>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006074 <checkDemoModCalisma+0xbc0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	4a3c      	ldr	r2, [pc, #240]	@ (8006078 <checkDemoModCalisma+0xbc4>)
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d211      	bcs.n	8005fb0 <checkDemoModCalisma+0xafc>
 8005f8c:	2104      	movs	r1, #4
 8005f8e:	4829      	ldr	r0, [pc, #164]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005f90:	f005 f86a 	bl	800b068 <HAL_GPIO_ReadPin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <checkDemoModCalisma+0xafc>
 8005f9a:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <checkDemoModCalisma+0xbb4>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d006      	beq.n	8005fb0 <checkDemoModCalisma+0xafc>
 8005fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8006058 <checkDemoModCalisma+0xba4>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f083 0301 	eor.w	r3, r3, #1
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 8005fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8006070 <checkDemoModCalisma+0xbbc>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fb6:	4b29      	ldr	r3, [pc, #164]	@ (800605c <checkDemoModCalisma+0xba8>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d160      	bne.n	8006080 <checkDemoModCalisma+0xbcc>
 8005fbe:	4b28      	ldr	r3, [pc, #160]	@ (8006060 <checkDemoModCalisma+0xbac>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <checkDemoModCalisma+0xb1a>
 8005fc6:	4b26      	ldr	r3, [pc, #152]	@ (8006060 <checkDemoModCalisma+0xbac>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d158      	bne.n	8006080 <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005fce:	2104      	movs	r1, #4
 8005fd0:	4818      	ldr	r0, [pc, #96]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005fd2:	f005 f849 	bl	800b068 <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <checkDemoModCalisma+0xb30>
 8005fdc:	4b22      	ldr	r3, [pc, #136]	@ (8006068 <checkDemoModCalisma+0xbb4>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d14d      	bne.n	8006080 <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4813      	ldr	r0, [pc, #76]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005fe8:	f005 f83e 	bl	800b068 <HAL_GPIO_ReadPin>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d146      	bne.n	8006080 <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	480f      	ldr	r0, [pc, #60]	@ (8006034 <checkDemoModCalisma+0xb80>)
 8005ff6:	f005 f837 	bl	800b068 <HAL_GPIO_ReadPin>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <checkDemoModCalisma+0xb54>
 8006000:	4b18      	ldr	r3, [pc, #96]	@ (8006064 <checkDemoModCalisma+0xbb0>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <checkDemoModCalisma+0xb6c>
 8006008:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800600c:	4811      	ldr	r0, [pc, #68]	@ (8006054 <checkDemoModCalisma+0xba0>)
 800600e:	f005 f82b 	bl	800b068 <HAL_GPIO_ReadPin>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d133      	bne.n	8006080 <checkDemoModCalisma+0xbcc>
 8006018:	4b12      	ldr	r3, [pc, #72]	@ (8006064 <checkDemoModCalisma+0xbb0>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d12f      	bne.n	8006080 <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 8006020:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <checkDemoModCalisma+0xba4>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d02b      	beq.n	8006080 <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <checkDemoModCalisma+0xbc8>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e02a      	b.n	8006086 <checkDemoModCalisma+0xbd2>
 8006030:	200010a3 	.word	0x200010a3
 8006034:	40011000 	.word	0x40011000
 8006038:	200010a7 	.word	0x200010a7
 800603c:	200010bd 	.word	0x200010bd
 8006040:	200010be 	.word	0x200010be
 8006044:	2000109f 	.word	0x2000109f
 8006048:	20001044 	.word	0x20001044
 800604c:	20001050 	.word	0x20001050
 8006050:	20001082 	.word	0x20001082
 8006054:	40010c00 	.word	0x40010c00
 8006058:	200010ad 	.word	0x200010ad
 800605c:	20001075 	.word	0x20001075
 8006060:	20001074 	.word	0x20001074
 8006064:	20001078 	.word	0x20001078
 8006068:	20001072 	.word	0x20001072
 800606c:	2000109b 	.word	0x2000109b
 8006070:	200010ae 	.word	0x200010ae
 8006074:	20001048 	.word	0x20001048
 8006078:	20001085 	.word	0x20001085
 800607c:	200010af 	.word	0x200010af
				} else {
					kapi1butonkontrol=0;
 8006080:	4b8b      	ldr	r3, [pc, #556]	@ (80062b0 <checkDemoModCalisma+0xdfc>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006086:	4b8b      	ldr	r3, [pc, #556]	@ (80062b4 <checkDemoModCalisma+0xe00>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d121      	bne.n	80060d2 <checkDemoModCalisma+0xc1e>
 800608e:	4b8a      	ldr	r3, [pc, #552]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d003      	beq.n	800609e <checkDemoModCalisma+0xbea>
 8006096:	4b88      	ldr	r3, [pc, #544]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d119      	bne.n	80060d2 <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800609e:	2104      	movs	r1, #4
 80060a0:	4886      	ldr	r0, [pc, #536]	@ (80062bc <checkDemoModCalisma+0xe08>)
 80060a2:	f004 ffe1 	bl	800b068 <HAL_GPIO_ReadPin>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d003      	beq.n	80060b4 <checkDemoModCalisma+0xc00>
 80060ac:	4b84      	ldr	r3, [pc, #528]	@ (80062c0 <checkDemoModCalisma+0xe0c>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10e      	bne.n	80060d2 <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060b4:	2102      	movs	r1, #2
 80060b6:	4881      	ldr	r0, [pc, #516]	@ (80062bc <checkDemoModCalisma+0xe08>)
 80060b8:	f004 ffd6 	bl	800b068 <HAL_GPIO_ReadPin>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d107      	bne.n	80060d2 <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 80060c2:	4b80      	ldr	r3, [pc, #512]	@ (80062c4 <checkDemoModCalisma+0xe10>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 80060ca:	4b7f      	ldr	r3, [pc, #508]	@ (80062c8 <checkDemoModCalisma+0xe14>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e002      	b.n	80060d8 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 80060d2:	4b7d      	ldr	r3, [pc, #500]	@ (80062c8 <checkDemoModCalisma+0xe14>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80060d8:	4b75      	ldr	r3, [pc, #468]	@ (80062b0 <checkDemoModCalisma+0xdfc>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <checkDemoModCalisma+0xc3c>
 80060e0:	4b79      	ldr	r3, [pc, #484]	@ (80062c8 <checkDemoModCalisma+0xe14>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <checkDemoModCalisma+0xc3c>
 80060e8:	4b78      	ldr	r3, [pc, #480]	@ (80062cc <checkDemoModCalisma+0xe18>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80060f0:	2201      	movs	r2, #1
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	4876      	ldr	r0, [pc, #472]	@ (80062d0 <checkDemoModCalisma+0xe1c>)
 80060f6:	f004 ffce 	bl	800b096 <HAL_GPIO_WritePin>
 80060fa:	e004      	b.n	8006106 <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80060fc:	2200      	movs	r2, #0
 80060fe:	2180      	movs	r1, #128	@ 0x80
 8006100:	4873      	ldr	r0, [pc, #460]	@ (80062d0 <checkDemoModCalisma+0xe1c>)
 8006102:	f004 ffc8 	bl	800b096 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006106:	4b73      	ldr	r3, [pc, #460]	@ (80062d4 <checkDemoModCalisma+0xe20>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d141      	bne.n	8006192 <checkDemoModCalisma+0xcde>
 800610e:	4b6a      	ldr	r3, [pc, #424]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d003      	beq.n	800611e <checkDemoModCalisma+0xc6a>
 8006116:	4b68      	ldr	r3, [pc, #416]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b03      	cmp	r3, #3
 800611c:	d139      	bne.n	8006192 <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800611e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006122:	4866      	ldr	r0, [pc, #408]	@ (80062bc <checkDemoModCalisma+0xe08>)
 8006124:	f004 ffa0 	bl	800b068 <HAL_GPIO_ReadPin>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <checkDemoModCalisma+0xc82>
 800612e:	4b6a      	ldr	r3, [pc, #424]	@ (80062d8 <checkDemoModCalisma+0xe24>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <checkDemoModCalisma+0xc9a>
 8006136:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800613a:	4868      	ldr	r0, [pc, #416]	@ (80062dc <checkDemoModCalisma+0xe28>)
 800613c:	f004 ff94 	bl	800b068 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d125      	bne.n	8006192 <checkDemoModCalisma+0xcde>
 8006146:	4b64      	ldr	r3, [pc, #400]	@ (80062d8 <checkDemoModCalisma+0xe24>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d121      	bne.n	8006192 <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800614e:	2102      	movs	r1, #2
 8006150:	485a      	ldr	r0, [pc, #360]	@ (80062bc <checkDemoModCalisma+0xe08>)
 8006152:	f004 ff89 	bl	800b068 <HAL_GPIO_ReadPin>
 8006156:	4603      	mov	r3, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	d11a      	bne.n	8006192 <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800615c:	2104      	movs	r1, #4
 800615e:	4857      	ldr	r0, [pc, #348]	@ (80062bc <checkDemoModCalisma+0xe08>)
 8006160:	f004 ff82 	bl	800b068 <HAL_GPIO_ReadPin>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d113      	bne.n	8006192 <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 800616a:	4b56      	ldr	r3, [pc, #344]	@ (80062c4 <checkDemoModCalisma+0xe10>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00f      	beq.n	8006192 <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 8006172:	4b5b      	ldr	r3, [pc, #364]	@ (80062e0 <checkDemoModCalisma+0xe2c>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f083 0301 	eor.w	r3, r3, #1
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 8006180:	4b58      	ldr	r3, [pc, #352]	@ (80062e4 <checkDemoModCalisma+0xe30>)
 8006182:	2201      	movs	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006186:	4b58      	ldr	r3, [pc, #352]	@ (80062e8 <checkDemoModCalisma+0xe34>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a58      	ldr	r2, [pc, #352]	@ (80062ec <checkDemoModCalisma+0xe38>)
 800618c:	6013      	str	r3, [r2, #0]
					bekle();
 800618e:	f7fd fc2b 	bl	80039e8 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006192:	4b55      	ldr	r3, [pc, #340]	@ (80062e8 <checkDemoModCalisma+0xe34>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b55      	ldr	r3, [pc, #340]	@ (80062ec <checkDemoModCalisma+0xe38>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	4a54      	ldr	r2, [pc, #336]	@ (80062f0 <checkDemoModCalisma+0xe3c>)
 800619e:	7812      	ldrb	r2, [r2, #0]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d20d      	bcs.n	80061c0 <checkDemoModCalisma+0xd0c>
 80061a4:	2102      	movs	r1, #2
 80061a6:	4845      	ldr	r0, [pc, #276]	@ (80062bc <checkDemoModCalisma+0xe08>)
 80061a8:	f004 ff5e 	bl	800b068 <HAL_GPIO_ReadPin>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d006      	beq.n	80061c0 <checkDemoModCalisma+0xd0c>
 80061b2:	4b44      	ldr	r3, [pc, #272]	@ (80062c4 <checkDemoModCalisma+0xe10>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f083 0301 	eor.w	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 80061c0:	4b48      	ldr	r3, [pc, #288]	@ (80062e4 <checkDemoModCalisma+0xe30>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061c6:	4b43      	ldr	r3, [pc, #268]	@ (80062d4 <checkDemoModCalisma+0xe20>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d135      	bne.n	800623a <checkDemoModCalisma+0xd86>
 80061ce:	4b3a      	ldr	r3, [pc, #232]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d003      	beq.n	80061de <checkDemoModCalisma+0xd2a>
 80061d6:	4b38      	ldr	r3, [pc, #224]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d12d      	bne.n	800623a <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80061de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80061e2:	4836      	ldr	r0, [pc, #216]	@ (80062bc <checkDemoModCalisma+0xe08>)
 80061e4:	f004 ff40 	bl	800b068 <HAL_GPIO_ReadPin>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <checkDemoModCalisma+0xd42>
 80061ee:	4b3a      	ldr	r3, [pc, #232]	@ (80062d8 <checkDemoModCalisma+0xe24>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <checkDemoModCalisma+0xd5a>
 80061f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80061fa:	4838      	ldr	r0, [pc, #224]	@ (80062dc <checkDemoModCalisma+0xe28>)
 80061fc:	f004 ff34 	bl	800b068 <HAL_GPIO_ReadPin>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d119      	bne.n	800623a <checkDemoModCalisma+0xd86>
 8006206:	4b34      	ldr	r3, [pc, #208]	@ (80062d8 <checkDemoModCalisma+0xe24>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d115      	bne.n	800623a <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800620e:	2102      	movs	r1, #2
 8006210:	482a      	ldr	r0, [pc, #168]	@ (80062bc <checkDemoModCalisma+0xe08>)
 8006212:	f004 ff29 	bl	800b068 <HAL_GPIO_ReadPin>
 8006216:	4603      	mov	r3, r0
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10e      	bne.n	800623a <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800621c:	2104      	movs	r1, #4
 800621e:	4827      	ldr	r0, [pc, #156]	@ (80062bc <checkDemoModCalisma+0xe08>)
 8006220:	f004 ff22 	bl	800b068 <HAL_GPIO_ReadPin>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d107      	bne.n	800623a <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 800622a:	4b26      	ldr	r3, [pc, #152]	@ (80062c4 <checkDemoModCalisma+0xe10>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 8006232:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <checkDemoModCalisma+0xe40>)
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e002      	b.n	8006240 <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800623a:	4b2e      	ldr	r3, [pc, #184]	@ (80062f4 <checkDemoModCalisma+0xe40>)
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006240:	4b24      	ldr	r3, [pc, #144]	@ (80062d4 <checkDemoModCalisma+0xe20>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d11d      	bne.n	8006284 <checkDemoModCalisma+0xdd0>
 8006248:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d003      	beq.n	8006258 <checkDemoModCalisma+0xda4>
 8006250:	4b19      	ldr	r3, [pc, #100]	@ (80062b8 <checkDemoModCalisma+0xe04>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d115      	bne.n	8006284 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006258:	2102      	movs	r1, #2
 800625a:	4818      	ldr	r0, [pc, #96]	@ (80062bc <checkDemoModCalisma+0xe08>)
 800625c:	f004 ff04 	bl	800b068 <HAL_GPIO_ReadPin>
 8006260:	4603      	mov	r3, r0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10e      	bne.n	8006284 <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006266:	2104      	movs	r1, #4
 8006268:	4814      	ldr	r0, [pc, #80]	@ (80062bc <checkDemoModCalisma+0xe08>)
 800626a:	f004 fefd 	bl	800b068 <HAL_GPIO_ReadPin>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d107      	bne.n	8006284 <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 8006274:	4b13      	ldr	r3, [pc, #76]	@ (80062c4 <checkDemoModCalisma+0xe10>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 800627c:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <checkDemoModCalisma+0xe44>)
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e002      	b.n	800628a <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8006284:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <checkDemoModCalisma+0xe44>)
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800628a:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <checkDemoModCalisma+0xe40>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d107      	bne.n	80062a2 <checkDemoModCalisma+0xdee>
 8006292:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <checkDemoModCalisma+0xe44>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <checkDemoModCalisma+0xdee>
 800629a:	4b12      	ldr	r3, [pc, #72]	@ (80062e4 <checkDemoModCalisma+0xe30>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d02c      	beq.n	80062fc <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80062a2:	2201      	movs	r2, #1
 80062a4:	2140      	movs	r1, #64	@ 0x40
 80062a6:	480a      	ldr	r0, [pc, #40]	@ (80062d0 <checkDemoModCalisma+0xe1c>)
 80062a8:	f004 fef5 	bl	800b096 <HAL_GPIO_WritePin>
 80062ac:	e02b      	b.n	8006306 <checkDemoModCalisma+0xe52>
 80062ae:	bf00      	nop
 80062b0:	200010af 	.word	0x200010af
 80062b4:	20001075 	.word	0x20001075
 80062b8:	20001074 	.word	0x20001074
 80062bc:	40011000 	.word	0x40011000
 80062c0:	20001072 	.word	0x20001072
 80062c4:	200010ad 	.word	0x200010ad
 80062c8:	200010b0 	.word	0x200010b0
 80062cc:	200010ae 	.word	0x200010ae
 80062d0:	40010800 	.word	0x40010800
 80062d4:	20001076 	.word	0x20001076
 80062d8:	20001078 	.word	0x20001078
 80062dc:	40010c00 	.word	0x40010c00
 80062e0:	2000109b 	.word	0x2000109b
 80062e4:	200010b1 	.word	0x200010b1
 80062e8:	20001044 	.word	0x20001044
 80062ec:	20001048 	.word	0x20001048
 80062f0:	20001086 	.word	0x20001086
 80062f4:	200010b2 	.word	0x200010b2
 80062f8:	200010b3 	.word	0x200010b3
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80062fc:	2200      	movs	r2, #0
 80062fe:	2140      	movs	r1, #64	@ 0x40
 8006300:	4835      	ldr	r0, [pc, #212]	@ (80063d8 <checkDemoModCalisma+0xf24>)
 8006302:	f004 fec8 	bl	800b096 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8006306:	4b35      	ldr	r3, [pc, #212]	@ (80063dc <checkDemoModCalisma+0xf28>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <checkDemoModCalisma+0xe62>
 800630e:	4b33      	ldr	r3, [pc, #204]	@ (80063dc <checkDemoModCalisma+0xf28>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d115      	bne.n	8006342 <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006316:	2104      	movs	r1, #4
 8006318:	4831      	ldr	r0, [pc, #196]	@ (80063e0 <checkDemoModCalisma+0xf2c>)
 800631a:	f004 fea5 	bl	800b068 <HAL_GPIO_ReadPin>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d003      	beq.n	800632c <checkDemoModCalisma+0xe78>
 8006324:	4b2f      	ldr	r3, [pc, #188]	@ (80063e4 <checkDemoModCalisma+0xf30>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800632c:	2102      	movs	r1, #2
 800632e:	482c      	ldr	r0, [pc, #176]	@ (80063e0 <checkDemoModCalisma+0xf2c>)
 8006330:	f004 fe9a 	bl	800b068 <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800633a:	4b2b      	ldr	r3, [pc, #172]	@ (80063e8 <checkDemoModCalisma+0xf34>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e002      	b.n	8006348 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8006342:	4b29      	ldr	r3, [pc, #164]	@ (80063e8 <checkDemoModCalisma+0xf34>)
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006348:	4b24      	ldr	r3, [pc, #144]	@ (80063dc <checkDemoModCalisma+0xf28>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d003      	beq.n	8006358 <checkDemoModCalisma+0xea4>
 8006350:	4b22      	ldr	r3, [pc, #136]	@ (80063dc <checkDemoModCalisma+0xf28>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d111      	bne.n	800637c <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006358:	2102      	movs	r1, #2
 800635a:	4821      	ldr	r0, [pc, #132]	@ (80063e0 <checkDemoModCalisma+0xf2c>)
 800635c:	f004 fe84 	bl	800b068 <HAL_GPIO_ReadPin>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10a      	bne.n	800637c <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006366:	2104      	movs	r1, #4
 8006368:	481d      	ldr	r0, [pc, #116]	@ (80063e0 <checkDemoModCalisma+0xf2c>)
 800636a:	f004 fe7d 	bl	800b068 <HAL_GPIO_ReadPin>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8006374:	4b1d      	ldr	r3, [pc, #116]	@ (80063ec <checkDemoModCalisma+0xf38>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e002      	b.n	8006382 <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 800637c:	4b1b      	ldr	r3, [pc, #108]	@ (80063ec <checkDemoModCalisma+0xf38>)
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8006382:	4b19      	ldr	r3, [pc, #100]	@ (80063e8 <checkDemoModCalisma+0xf34>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 800638a:	4b19      	ldr	r3, [pc, #100]	@ (80063f0 <checkDemoModCalisma+0xf3c>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10b      	bne.n	80063aa <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006392:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006396:	4817      	ldr	r0, [pc, #92]	@ (80063f4 <checkDemoModCalisma+0xf40>)
 8006398:	f004 fe66 	bl	800b068 <HAL_GPIO_ReadPin>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 80063a2:	4b15      	ldr	r3, [pc, #84]	@ (80063f8 <checkDemoModCalisma+0xf44>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e002      	b.n	80063b0 <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <checkDemoModCalisma+0xf44>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80063b0:	4b0e      	ldr	r3, [pc, #56]	@ (80063ec <checkDemoModCalisma+0xf38>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d023      	beq.n	8006400 <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 80063b8:	4b0d      	ldr	r3, [pc, #52]	@ (80063f0 <checkDemoModCalisma+0xf3c>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d11f      	bne.n	8006400 <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80063c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80063c4:	480b      	ldr	r0, [pc, #44]	@ (80063f4 <checkDemoModCalisma+0xf40>)
 80063c6:	f004 fe4f 	bl	800b068 <HAL_GPIO_ReadPin>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d117      	bne.n	8006400 <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 80063d0:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <checkDemoModCalisma+0xf48>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e016      	b.n	8006406 <checkDemoModCalisma+0xf52>
 80063d8:	40010800 	.word	0x40010800
 80063dc:	20001079 	.word	0x20001079
 80063e0:	40011000 	.word	0x40011000
 80063e4:	20001072 	.word	0x20001072
 80063e8:	200010b7 	.word	0x200010b7
 80063ec:	200010b8 	.word	0x200010b8
 80063f0:	20001078 	.word	0x20001078
 80063f4:	40010c00 	.word	0x40010c00
 80063f8:	200010c7 	.word	0x200010c7
 80063fc:	200010c8 	.word	0x200010c8
				} else {
					kapiactablaesp2=0;
 8006400:	4b7e      	ldr	r3, [pc, #504]	@ (80065fc <checkDemoModCalisma+0x1148>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006406:	4b7e      	ldr	r3, [pc, #504]	@ (8006600 <checkDemoModCalisma+0x114c>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d154      	bne.n	80064b8 <checkDemoModCalisma+0x1004>
 800640e:	4b7d      	ldr	r3, [pc, #500]	@ (8006604 <checkDemoModCalisma+0x1150>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d003      	beq.n	800641e <checkDemoModCalisma+0xf6a>
 8006416:	4b7b      	ldr	r3, [pc, #492]	@ (8006604 <checkDemoModCalisma+0x1150>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d14c      	bne.n	80064b8 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800641e:	4b7a      	ldr	r3, [pc, #488]	@ (8006608 <checkDemoModCalisma+0x1154>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <checkDemoModCalisma+0xf7a>
 8006426:	4b79      	ldr	r3, [pc, #484]	@ (800660c <checkDemoModCalisma+0x1158>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d044      	beq.n	80064b8 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800642e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006432:	4877      	ldr	r0, [pc, #476]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006434:	f004 fe18 	bl	800b068 <HAL_GPIO_ReadPin>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01c      	beq.n	8006478 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800643e:	2180      	movs	r1, #128	@ 0x80
 8006440:	4873      	ldr	r0, [pc, #460]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006442:	f004 fe11 	bl	800b068 <HAL_GPIO_ReadPin>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d106      	bne.n	800645a <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800644c:	2104      	movs	r1, #4
 800644e:	4870      	ldr	r0, [pc, #448]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006450:	f004 fe0a 	bl	800b068 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d00e      	beq.n	8006478 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800645a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800645e:	486c      	ldr	r0, [pc, #432]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006460:	f004 fe02 	bl	800b068 <HAL_GPIO_ReadPin>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800646a:	2102      	movs	r1, #2
 800646c:	4868      	ldr	r0, [pc, #416]	@ (8006610 <checkDemoModCalisma+0x115c>)
 800646e:	f004 fdfb 	bl	800b068 <HAL_GPIO_ReadPin>
 8006472:	4603      	mov	r3, r0
 8006474:	2b01      	cmp	r3, #1
 8006476:	d103      	bne.n	8006480 <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006478:	4b66      	ldr	r3, [pc, #408]	@ (8006614 <checkDemoModCalisma+0x1160>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <checkDemoModCalisma+0xfdc>
 8006480:	4b65      	ldr	r3, [pc, #404]	@ (8006618 <checkDemoModCalisma+0x1164>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d103      	bne.n	8006490 <checkDemoModCalisma+0xfdc>
 8006488:	4b5c      	ldr	r3, [pc, #368]	@ (80065fc <checkDemoModCalisma+0x1148>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 8006490:	4b62      	ldr	r3, [pc, #392]	@ (800661c <checkDemoModCalisma+0x1168>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00f      	beq.n	80064b8 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 8006498:	4b61      	ldr	r3, [pc, #388]	@ (8006620 <checkDemoModCalisma+0x116c>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f083 0301 	eor.w	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 80064a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006624 <checkDemoModCalisma+0x1170>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80064ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006628 <checkDemoModCalisma+0x1174>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a5e      	ldr	r2, [pc, #376]	@ (800662c <checkDemoModCalisma+0x1178>)
 80064b2:	6013      	str	r3, [r2, #0]
					bekle();
 80064b4:	f7fd fa98 	bl	80039e8 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80064b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006628 <checkDemoModCalisma+0x1174>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b5b      	ldr	r3, [pc, #364]	@ (800662c <checkDemoModCalisma+0x1178>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006630 <checkDemoModCalisma+0x117c>)
 80064c4:	7812      	ldrb	r2, [r2, #0]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d214      	bcs.n	80064f4 <checkDemoModCalisma+0x1040>
 80064ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006608 <checkDemoModCalisma+0x1154>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f083 0301 	eor.w	r3, r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <checkDemoModCalisma+0x1032>
 80064d8:	4b4c      	ldr	r3, [pc, #304]	@ (800660c <checkDemoModCalisma+0x1158>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f083 0301 	eor.w	r3, r3, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <checkDemoModCalisma+0x1040>
 80064e6:	4b4d      	ldr	r3, [pc, #308]	@ (800661c <checkDemoModCalisma+0x1168>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f083 0301 	eor.w	r3, r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 80064f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006624 <checkDemoModCalisma+0x1170>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80064fa:	4b41      	ldr	r3, [pc, #260]	@ (8006600 <checkDemoModCalisma+0x114c>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d148      	bne.n	8006594 <checkDemoModCalisma+0x10e0>
 8006502:	4b40      	ldr	r3, [pc, #256]	@ (8006604 <checkDemoModCalisma+0x1150>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d003      	beq.n	8006512 <checkDemoModCalisma+0x105e>
 800650a:	4b3e      	ldr	r3, [pc, #248]	@ (8006604 <checkDemoModCalisma+0x1150>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d140      	bne.n	8006594 <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006512:	4b3d      	ldr	r3, [pc, #244]	@ (8006608 <checkDemoModCalisma+0x1154>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <checkDemoModCalisma+0x106e>
 800651a:	4b3c      	ldr	r3, [pc, #240]	@ (800660c <checkDemoModCalisma+0x1158>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d038      	beq.n	8006594 <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006526:	483a      	ldr	r0, [pc, #232]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006528:	f004 fd9e 	bl	800b068 <HAL_GPIO_ReadPin>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01c      	beq.n	800656c <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006532:	2180      	movs	r1, #128	@ 0x80
 8006534:	4836      	ldr	r0, [pc, #216]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006536:	f004 fd97 	bl	800b068 <HAL_GPIO_ReadPin>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006540:	2104      	movs	r1, #4
 8006542:	4833      	ldr	r0, [pc, #204]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006544:	f004 fd90 	bl	800b068 <HAL_GPIO_ReadPin>
 8006548:	4603      	mov	r3, r0
 800654a:	2b01      	cmp	r3, #1
 800654c:	d00e      	beq.n	800656c <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800654e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006552:	482f      	ldr	r0, [pc, #188]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006554:	f004 fd88 	bl	800b068 <HAL_GPIO_ReadPin>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800655e:	2102      	movs	r1, #2
 8006560:	482b      	ldr	r0, [pc, #172]	@ (8006610 <checkDemoModCalisma+0x115c>)
 8006562:	f004 fd81 	bl	800b068 <HAL_GPIO_ReadPin>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	d103      	bne.n	8006574 <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800656c:	4b29      	ldr	r3, [pc, #164]	@ (8006614 <checkDemoModCalisma+0x1160>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <checkDemoModCalisma+0x10d0>
 8006574:	4b28      	ldr	r3, [pc, #160]	@ (8006618 <checkDemoModCalisma+0x1164>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <checkDemoModCalisma+0x10d0>
 800657c:	4b1f      	ldr	r3, [pc, #124]	@ (80065fc <checkDemoModCalisma+0x1148>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 8006584:	4b25      	ldr	r3, [pc, #148]	@ (800661c <checkDemoModCalisma+0x1168>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 800658c:	4b29      	ldr	r3, [pc, #164]	@ (8006634 <checkDemoModCalisma+0x1180>)
 800658e:	2201      	movs	r2, #1
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	e002      	b.n	800659a <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8006594:	4b27      	ldr	r3, [pc, #156]	@ (8006634 <checkDemoModCalisma+0x1180>)
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800659a:	4b19      	ldr	r3, [pc, #100]	@ (8006600 <checkDemoModCalisma+0x114c>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d117      	bne.n	80065d2 <checkDemoModCalisma+0x111e>
 80065a2:	4b18      	ldr	r3, [pc, #96]	@ (8006604 <checkDemoModCalisma+0x1150>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d003      	beq.n	80065b2 <checkDemoModCalisma+0x10fe>
 80065aa:	4b16      	ldr	r3, [pc, #88]	@ (8006604 <checkDemoModCalisma+0x1150>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d10f      	bne.n	80065d2 <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80065b2:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <checkDemoModCalisma+0x1154>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <checkDemoModCalisma+0x110e>
 80065ba:	4b14      	ldr	r3, [pc, #80]	@ (800660c <checkDemoModCalisma+0x1158>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 80065c2:	4b16      	ldr	r3, [pc, #88]	@ (800661c <checkDemoModCalisma+0x1168>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 80065ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006638 <checkDemoModCalisma+0x1184>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	e002      	b.n	80065d8 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80065d2:	4b19      	ldr	r3, [pc, #100]	@ (8006638 <checkDemoModCalisma+0x1184>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80065d8:	4b16      	ldr	r3, [pc, #88]	@ (8006634 <checkDemoModCalisma+0x1180>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <checkDemoModCalisma+0x113c>
 80065e0:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <checkDemoModCalisma+0x1170>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <checkDemoModCalisma+0x113c>
 80065e8:	4b13      	ldr	r3, [pc, #76]	@ (8006638 <checkDemoModCalisma+0x1184>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d027      	beq.n	8006640 <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80065f0:	2201      	movs	r2, #1
 80065f2:	2120      	movs	r1, #32
 80065f4:	4811      	ldr	r0, [pc, #68]	@ (800663c <checkDemoModCalisma+0x1188>)
 80065f6:	f004 fd4e 	bl	800b096 <HAL_GPIO_WritePin>
 80065fa:	e026      	b.n	800664a <checkDemoModCalisma+0x1196>
 80065fc:	200010c8 	.word	0x200010c8
 8006600:	20001077 	.word	0x20001077
 8006604:	20001074 	.word	0x20001074
 8006608:	200010b7 	.word	0x200010b7
 800660c:	200010b8 	.word	0x200010b8
 8006610:	40011000 	.word	0x40011000
 8006614:	20001078 	.word	0x20001078
 8006618:	200010c7 	.word	0x200010c7
 800661c:	200010ad 	.word	0x200010ad
 8006620:	2000109b 	.word	0x2000109b
 8006624:	200010b4 	.word	0x200010b4
 8006628:	20001044 	.word	0x20001044
 800662c:	20001048 	.word	0x20001048
 8006630:	20001087 	.word	0x20001087
 8006634:	200010b5 	.word	0x200010b5
 8006638:	200010b6 	.word	0x200010b6
 800663c:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006640:	2200      	movs	r2, #0
 8006642:	2120      	movs	r1, #32
 8006644:	4887      	ldr	r0, [pc, #540]	@ (8006864 <checkDemoModCalisma+0x13b0>)
 8006646:	f004 fd26 	bl	800b096 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800664a:	4b87      	ldr	r3, [pc, #540]	@ (8006868 <checkDemoModCalisma+0x13b4>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <checkDemoModCalisma+0x11bc>
 8006652:	2102      	movs	r1, #2
 8006654:	4885      	ldr	r0, [pc, #532]	@ (800686c <checkDemoModCalisma+0x13b8>)
 8006656:	f004 fd07 	bl	800b068 <HAL_GPIO_ReadPin>
 800665a:	4603      	mov	r3, r0
 800665c:	2b01      	cmp	r3, #1
 800665e:	d107      	bne.n	8006670 <checkDemoModCalisma+0x11bc>
 8006660:	4b83      	ldr	r3, [pc, #524]	@ (8006870 <checkDemoModCalisma+0x13bc>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <checkDemoModCalisma+0x11bc>
 8006668:	4b82      	ldr	r3, [pc, #520]	@ (8006874 <checkDemoModCalisma+0x13c0>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d112      	bne.n	8006696 <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006670:	4b81      	ldr	r3, [pc, #516]	@ (8006878 <checkDemoModCalisma+0x13c4>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d032      	beq.n	80066de <checkDemoModCalisma+0x122a>
 8006678:	2104      	movs	r1, #4
 800667a:	487c      	ldr	r0, [pc, #496]	@ (800686c <checkDemoModCalisma+0x13b8>)
 800667c:	f004 fcf4 	bl	800b068 <HAL_GPIO_ReadPin>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d12b      	bne.n	80066de <checkDemoModCalisma+0x122a>
 8006686:	4b7a      	ldr	r3, [pc, #488]	@ (8006870 <checkDemoModCalisma+0x13bc>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d027      	beq.n	80066de <checkDemoModCalisma+0x122a>
 800668e:	4b79      	ldr	r3, [pc, #484]	@ (8006874 <checkDemoModCalisma+0x13c0>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d023      	beq.n	80066de <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 8006696:	4b79      	ldr	r3, [pc, #484]	@ (800687c <checkDemoModCalisma+0x13c8>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	3301      	adds	r3, #1
 800669c:	b2da      	uxtb	r2, r3
 800669e:	4b77      	ldr	r3, [pc, #476]	@ (800687c <checkDemoModCalisma+0x13c8>)
 80066a0:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80066a2:	4b76      	ldr	r3, [pc, #472]	@ (800687c <checkDemoModCalisma+0x13c8>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2bff      	cmp	r3, #255	@ 0xff
 80066a8:	d108      	bne.n	80066bc <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 80066aa:	4b74      	ldr	r3, [pc, #464]	@ (800687c <checkDemoModCalisma+0x13c8>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80066b0:	4b73      	ldr	r3, [pc, #460]	@ (8006880 <checkDemoModCalisma+0x13cc>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	4b71      	ldr	r3, [pc, #452]	@ (8006880 <checkDemoModCalisma+0x13cc>)
 80066ba:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80066bc:	4b6f      	ldr	r3, [pc, #444]	@ (800687c <checkDemoModCalisma+0x13c8>)
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	4b70      	ldr	r3, [pc, #448]	@ (8006884 <checkDemoModCalisma+0x13d0>)
 80066c2:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80066c4:	4b6e      	ldr	r3, [pc, #440]	@ (8006880 <checkDemoModCalisma+0x13cc>)
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006884 <checkDemoModCalisma+0x13d0>)
 80066ca:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80066cc:	4b6e      	ldr	r3, [pc, #440]	@ (8006888 <checkDemoModCalisma+0x13d4>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80066d2:	4b65      	ldr	r3, [pc, #404]	@ (8006868 <checkDemoModCalisma+0x13b4>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80066d8:	4b67      	ldr	r3, [pc, #412]	@ (8006878 <checkDemoModCalisma+0x13c4>)
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80066de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80066e2:	486a      	ldr	r0, [pc, #424]	@ (800688c <checkDemoModCalisma+0x13d8>)
 80066e4:	f004 fcc0 	bl	800b068 <HAL_GPIO_ReadPin>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80066ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80066f2:	4866      	ldr	r0, [pc, #408]	@ (800688c <checkDemoModCalisma+0x13d8>)
 80066f4:	f004 fcb8 	bl	800b068 <HAL_GPIO_ReadPin>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80066fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006702:	4862      	ldr	r0, [pc, #392]	@ (800688c <checkDemoModCalisma+0x13d8>)
 8006704:	f004 fcb0 	bl	800b068 <HAL_GPIO_ReadPin>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800670e:	2140      	movs	r1, #64	@ 0x40
 8006710:	4856      	ldr	r0, [pc, #344]	@ (800686c <checkDemoModCalisma+0x13b8>)
 8006712:	f004 fca9 	bl	800b068 <HAL_GPIO_ReadPin>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <checkDemoModCalisma+0x1270>

					startBasili=1;
 800671c:	4b5c      	ldr	r3, [pc, #368]	@ (8006890 <checkDemoModCalisma+0x13dc>)
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	e002      	b.n	800672a <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 8006724:	4b5a      	ldr	r3, [pc, #360]	@ (8006890 <checkDemoModCalisma+0x13dc>)
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800672a:	4b59      	ldr	r3, [pc, #356]	@ (8006890 <checkDemoModCalisma+0x13dc>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d014      	beq.n	800675c <checkDemoModCalisma+0x12a8>
 8006732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006736:	4855      	ldr	r0, [pc, #340]	@ (800688c <checkDemoModCalisma+0x13d8>)
 8006738:	f004 fc96 	bl	800b068 <HAL_GPIO_ReadPin>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10c      	bne.n	800675c <checkDemoModCalisma+0x12a8>

					hataVar=1;
 8006742:	4b54      	ldr	r3, [pc, #336]	@ (8006894 <checkDemoModCalisma+0x13e0>)
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006748:	2001      	movs	r0, #1
 800674a:	f7fa f8db 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800674e:	2001      	movs	r0, #1
 8006750:	f7fa f880 	bl	8000854 <hata2EEPROM>
					acilstophatasi=1;
 8006754:	4b50      	ldr	r3, [pc, #320]	@ (8006898 <checkDemoModCalisma+0x13e4>)
 8006756:	2201      	movs	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e018      	b.n	800678e <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800675c:	4b4e      	ldr	r3, [pc, #312]	@ (8006898 <checkDemoModCalisma+0x13e4>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d014      	beq.n	800678e <checkDemoModCalisma+0x12da>
 8006764:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006768:	4848      	ldr	r0, [pc, #288]	@ (800688c <checkDemoModCalisma+0x13d8>)
 800676a:	f004 fc7d 	bl	800b068 <HAL_GPIO_ReadPin>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10c      	bne.n	800678e <checkDemoModCalisma+0x12da>
 8006774:	4b46      	ldr	r3, [pc, #280]	@ (8006890 <checkDemoModCalisma+0x13dc>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f083 0301 	eor.w	r3, r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 8006782:	4b45      	ldr	r3, [pc, #276]	@ (8006898 <checkDemoModCalisma+0x13e4>)
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8006788:	2001      	movs	r0, #1
 800678a:	f7fd f8c3 	bl	8003914 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800678e:	4b43      	ldr	r3, [pc, #268]	@ (800689c <checkDemoModCalisma+0x13e8>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f083 0301 	eor.w	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d023      	beq.n	80067e4 <checkDemoModCalisma+0x1330>
 800679c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067a0:	483a      	ldr	r0, [pc, #232]	@ (800688c <checkDemoModCalisma+0x13d8>)
 80067a2:	f004 fc61 	bl	800b068 <HAL_GPIO_ReadPin>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <checkDemoModCalisma+0x1300>
 80067ac:	4b3c      	ldr	r3, [pc, #240]	@ (80068a0 <checkDemoModCalisma+0x13ec>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <checkDemoModCalisma+0x1330>
 80067b4:	4b3b      	ldr	r3, [pc, #236]	@ (80068a4 <checkDemoModCalisma+0x13f0>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d113      	bne.n	80067e4 <checkDemoModCalisma+0x1330>
 80067bc:	4b3a      	ldr	r3, [pc, #232]	@ (80068a8 <checkDemoModCalisma+0x13f4>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f083 0301 	eor.w	r3, r3, #1
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00c      	beq.n	80067e4 <checkDemoModCalisma+0x1330>
					hataVar=1;
 80067ca:	4b32      	ldr	r3, [pc, #200]	@ (8006894 <checkDemoModCalisma+0x13e0>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80067d0:	2002      	movs	r0, #2
 80067d2:	f7fa f897 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80067d6:	2002      	movs	r0, #2
 80067d8:	f7fa f83c 	bl	8000854 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80067dc:	4b32      	ldr	r3, [pc, #200]	@ (80068a8 <checkDemoModCalisma+0x13f4>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e017      	b.n	8006814 <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80067e4:	4b30      	ldr	r3, [pc, #192]	@ (80068a8 <checkDemoModCalisma+0x13f4>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d013      	beq.n	8006814 <checkDemoModCalisma+0x1360>
 80067ec:	4b2b      	ldr	r3, [pc, #172]	@ (800689c <checkDemoModCalisma+0x13e8>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00f      	beq.n	8006814 <checkDemoModCalisma+0x1360>
 80067f4:	4b2d      	ldr	r3, [pc, #180]	@ (80068ac <checkDemoModCalisma+0x13f8>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f083 0301 	eor.w	r3, r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 8006802:	4b29      	ldr	r3, [pc, #164]	@ (80068a8 <checkDemoModCalisma+0x13f4>)
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006808:	4b25      	ldr	r3, [pc, #148]	@ (80068a0 <checkDemoModCalisma+0x13ec>)
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800680e:	2002      	movs	r0, #2
 8006810:	f7fd f880 	bl	8003914 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8006814:	4b26      	ldr	r3, [pc, #152]	@ (80068b0 <checkDemoModCalisma+0x13fc>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d151      	bne.n	80068c0 <checkDemoModCalisma+0x140c>
 800681c:	4b25      	ldr	r3, [pc, #148]	@ (80068b4 <checkDemoModCalisma+0x1400>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d14d      	bne.n	80068c0 <checkDemoModCalisma+0x140c>
 8006824:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <checkDemoModCalisma+0x1404>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d049      	beq.n	80068c0 <checkDemoModCalisma+0x140c>
 800682c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006830:	480e      	ldr	r0, [pc, #56]	@ (800686c <checkDemoModCalisma+0x13b8>)
 8006832:	f004 fc19 	bl	800b068 <HAL_GPIO_ReadPin>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d141      	bne.n	80068c0 <checkDemoModCalisma+0x140c>
 800683c:	4b1f      	ldr	r3, [pc, #124]	@ (80068bc <checkDemoModCalisma+0x1408>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f083 0301 	eor.w	r3, r3, #1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d03a      	beq.n	80068c0 <checkDemoModCalisma+0x140c>
					hataVar=1;
 800684a:	4b12      	ldr	r3, [pc, #72]	@ (8006894 <checkDemoModCalisma+0x13e0>)
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006850:	2003      	movs	r0, #3
 8006852:	f7fa f857 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006856:	2003      	movs	r0, #3
 8006858:	f7f9 fffc 	bl	8000854 <hata2EEPROM>
					basinchatasi=1;
 800685c:	4b17      	ldr	r3, [pc, #92]	@ (80068bc <checkDemoModCalisma+0x1408>)
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e043      	b.n	80068ec <checkDemoModCalisma+0x1438>
 8006864:	40010800 	.word	0x40010800
 8006868:	200010ab 	.word	0x200010ab
 800686c:	40011000 	.word	0x40011000
 8006870:	20001072 	.word	0x20001072
 8006874:	200010ad 	.word	0x200010ad
 8006878:	200010ac 	.word	0x200010ac
 800687c:	20001064 	.word	0x20001064
 8006880:	20001066 	.word	0x20001066
 8006884:	20000f9c 	.word	0x20000f9c
 8006888:	20001098 	.word	0x20001098
 800688c:	40010c00 	.word	0x40010c00
 8006890:	200010b9 	.word	0x200010b9
 8006894:	200010c0 	.word	0x200010c0
 8006898:	200010bb 	.word	0x200010bb
 800689c:	200010c2 	.word	0x200010c2
 80068a0:	200010cc 	.word	0x200010cc
 80068a4:	20001070 	.word	0x20001070
 80068a8:	200010bc 	.word	0x200010bc
 80068ac:	200010a4 	.word	0x200010a4
 80068b0:	2000106f 	.word	0x2000106f
 80068b4:	20001073 	.word	0x20001073
 80068b8:	200010bf 	.word	0x200010bf
 80068bc:	200010c9 	.word	0x200010c9
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80068c0:	4b85      	ldr	r3, [pc, #532]	@ (8006ad8 <checkDemoModCalisma+0x1624>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d011      	beq.n	80068ec <checkDemoModCalisma+0x1438>
 80068c8:	4b84      	ldr	r3, [pc, #528]	@ (8006adc <checkDemoModCalisma+0x1628>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10d      	bne.n	80068ec <checkDemoModCalisma+0x1438>
 80068d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80068d4:	4882      	ldr	r0, [pc, #520]	@ (8006ae0 <checkDemoModCalisma+0x162c>)
 80068d6:	f004 fbc7 	bl	800b068 <HAL_GPIO_ReadPin>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d105      	bne.n	80068ec <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 80068e0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ad8 <checkDemoModCalisma+0x1624>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80068e6:	2003      	movs	r0, #3
 80068e8:	f7fd f814 	bl	8003914 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80068ec:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae4 <checkDemoModCalisma+0x1630>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d103      	bne.n	80068fc <checkDemoModCalisma+0x1448>
 80068f4:	4b7c      	ldr	r3, [pc, #496]	@ (8006ae8 <checkDemoModCalisma+0x1634>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d023      	beq.n	8006944 <checkDemoModCalisma+0x1490>
 80068fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006900:	487a      	ldr	r0, [pc, #488]	@ (8006aec <checkDemoModCalisma+0x1638>)
 8006902:	f004 fbb1 	bl	800b068 <HAL_GPIO_ReadPin>
 8006906:	4603      	mov	r3, r0
 8006908:	2b01      	cmp	r3, #1
 800690a:	d11b      	bne.n	8006944 <checkDemoModCalisma+0x1490>
 800690c:	4b78      	ldr	r3, [pc, #480]	@ (8006af0 <checkDemoModCalisma+0x163c>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d003      	beq.n	800691c <checkDemoModCalisma+0x1468>
 8006914:	4b76      	ldr	r3, [pc, #472]	@ (8006af0 <checkDemoModCalisma+0x163c>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d113      	bne.n	8006944 <checkDemoModCalisma+0x1490>
 800691c:	4b75      	ldr	r3, [pc, #468]	@ (8006af4 <checkDemoModCalisma+0x1640>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f083 0301 	eor.w	r3, r3, #1
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <checkDemoModCalisma+0x1490>
					hataVar=1;
 800692a:	4b73      	ldr	r3, [pc, #460]	@ (8006af8 <checkDemoModCalisma+0x1644>)
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006930:	2004      	movs	r0, #4
 8006932:	f7f9 ffe7 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006936:	2004      	movs	r0, #4
 8006938:	f7f9 ff8c 	bl	8000854 <hata2EEPROM>
					katkapisivicihatasi=1;
 800693c:	4b6d      	ldr	r3, [pc, #436]	@ (8006af4 <checkDemoModCalisma+0x1640>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	e01f      	b.n	8006984 <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006944:	4b6b      	ldr	r3, [pc, #428]	@ (8006af4 <checkDemoModCalisma+0x1640>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <checkDemoModCalisma+0x14d0>
 800694c:	4b6b      	ldr	r3, [pc, #428]	@ (8006afc <checkDemoModCalisma+0x1648>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <checkDemoModCalisma+0x14d0>
 8006954:	4b63      	ldr	r3, [pc, #396]	@ (8006ae4 <checkDemoModCalisma+0x1630>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f083 0301 	eor.w	r3, r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <checkDemoModCalisma+0x14d0>
 8006962:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006966:	4861      	ldr	r0, [pc, #388]	@ (8006aec <checkDemoModCalisma+0x1638>)
 8006968:	f004 fb7e 	bl	800b068 <HAL_GPIO_ReadPin>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 8006972:	4b60      	ldr	r3, [pc, #384]	@ (8006af4 <checkDemoModCalisma+0x1640>)
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006978:	4b5b      	ldr	r3, [pc, #364]	@ (8006ae8 <checkDemoModCalisma+0x1634>)
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800697e:	2004      	movs	r0, #4
 8006980:	f7fc ffc8 	bl	8003914 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8006984:	4b57      	ldr	r3, [pc, #348]	@ (8006ae4 <checkDemoModCalisma+0x1630>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <checkDemoModCalisma+0x14e0>
 800698c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b00 <checkDemoModCalisma+0x164c>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d023      	beq.n	80069dc <checkDemoModCalisma+0x1528>
 8006994:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006998:	4854      	ldr	r0, [pc, #336]	@ (8006aec <checkDemoModCalisma+0x1638>)
 800699a:	f004 fb65 	bl	800b068 <HAL_GPIO_ReadPin>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d11b      	bne.n	80069dc <checkDemoModCalisma+0x1528>
 80069a4:	4b52      	ldr	r3, [pc, #328]	@ (8006af0 <checkDemoModCalisma+0x163c>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d003      	beq.n	80069b4 <checkDemoModCalisma+0x1500>
 80069ac:	4b50      	ldr	r3, [pc, #320]	@ (8006af0 <checkDemoModCalisma+0x163c>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d113      	bne.n	80069dc <checkDemoModCalisma+0x1528>
 80069b4:	4b53      	ldr	r3, [pc, #332]	@ (8006b04 <checkDemoModCalisma+0x1650>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f083 0301 	eor.w	r3, r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <checkDemoModCalisma+0x1528>

					hataVar=1;
 80069c2:	4b4d      	ldr	r3, [pc, #308]	@ (8006af8 <checkDemoModCalisma+0x1644>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80069c8:	2005      	movs	r0, #5
 80069ca:	f7f9 ff9b 	bl	8000904 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80069ce:	2005      	movs	r0, #5
 80069d0:	f7f9 ff40 	bl	8000854 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80069d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006b04 <checkDemoModCalisma+0x1650>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e023      	b.n	8006a24 <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80069dc:	4b49      	ldr	r3, [pc, #292]	@ (8006b04 <checkDemoModCalisma+0x1650>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01f      	beq.n	8006a24 <checkDemoModCalisma+0x1570>
 80069e4:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <checkDemoModCalisma+0x1648>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <checkDemoModCalisma+0x1570>
 80069ec:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae4 <checkDemoModCalisma+0x1630>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f083 0301 	eor.w	r3, r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d014      	beq.n	8006a24 <checkDemoModCalisma+0x1570>
 80069fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80069fe:	483b      	ldr	r0, [pc, #236]	@ (8006aec <checkDemoModCalisma+0x1638>)
 8006a00:	f004 fb32 	bl	800b068 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10c      	bne.n	8006a24 <checkDemoModCalisma+0x1570>
 8006a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006afc <checkDemoModCalisma+0x1648>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 8006a12:	4b3c      	ldr	r3, [pc, #240]	@ (8006b04 <checkDemoModCalisma+0x1650>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006a18:	4b39      	ldr	r3, [pc, #228]	@ (8006b00 <checkDemoModCalisma+0x164c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006a1e:	2005      	movs	r0, #5
 8006a20:	f7fc ff78 	bl	8003914 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006a24:	4b38      	ldr	r3, [pc, #224]	@ (8006b08 <checkDemoModCalisma+0x1654>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <checkDemoModCalisma+0x1588>
 8006a2c:	4b37      	ldr	r3, [pc, #220]	@ (8006b0c <checkDemoModCalisma+0x1658>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <checkDemoModCalisma+0x1588>
 8006a34:	4b36      	ldr	r3, [pc, #216]	@ (8006b10 <checkDemoModCalisma+0x165c>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01b      	beq.n	8006a74 <checkDemoModCalisma+0x15c0>
 8006a3c:	4b35      	ldr	r3, [pc, #212]	@ (8006b14 <checkDemoModCalisma+0x1660>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f083 0301 	eor.w	r3, r3, #1
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d014      	beq.n	8006a74 <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8006a4a:	4b33      	ldr	r3, [pc, #204]	@ (8006b18 <checkDemoModCalisma+0x1664>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b33      	ldr	r3, [pc, #204]	@ (8006b1c <checkDemoModCalisma+0x1668>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	4a32      	ldr	r2, [pc, #200]	@ (8006b20 <checkDemoModCalisma+0x166c>)
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d30b      	bcc.n	8006a74 <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 8006a5c:	4b26      	ldr	r3, [pc, #152]	@ (8006af8 <checkDemoModCalisma+0x1644>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8006a62:	2006      	movs	r0, #6
 8006a64:	f7f9 ff4e 	bl	8000904 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006a68:	2006      	movs	r0, #6
 8006a6a:	f7f9 fef3 	bl	8000854 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006a6e:	4b29      	ldr	r3, [pc, #164]	@ (8006b14 <checkDemoModCalisma+0x1660>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006a74:	4b27      	ldr	r3, [pc, #156]	@ (8006b14 <checkDemoModCalisma+0x1660>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d013      	beq.n	8006aa4 <checkDemoModCalisma+0x15f0>
 8006a7c:	2108      	movs	r1, #8
 8006a7e:	481b      	ldr	r0, [pc, #108]	@ (8006aec <checkDemoModCalisma+0x1638>)
 8006a80:	f004 faf2 	bl	800b068 <HAL_GPIO_ReadPin>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <checkDemoModCalisma+0x15f0>
 8006a8a:	4b16      	ldr	r3, [pc, #88]	@ (8006ae4 <checkDemoModCalisma+0x1630>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f083 0301 	eor.w	r3, r3, #1
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8006a98:	4b1e      	ldr	r3, [pc, #120]	@ (8006b14 <checkDemoModCalisma+0x1660>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006a9e:	2006      	movs	r0, #6
 8006aa0:	f7fc ff38 	bl	8003914 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8006b24 <checkDemoModCalisma+0x1670>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <checkDemoModCalisma+0x1610>
 8006aac:	4b17      	ldr	r3, [pc, #92]	@ (8006b0c <checkDemoModCalisma+0x1658>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <checkDemoModCalisma+0x1610>
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b28 <checkDemoModCalisma+0x1674>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <checkDemoModCalisma+0x1610>
 8006abc:	4b14      	ldr	r3, [pc, #80]	@ (8006b10 <checkDemoModCalisma+0x165c>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d035      	beq.n	8006b30 <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 8006ac4:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <checkDemoModCalisma+0x1678>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006aca:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <checkDemoModCalisma+0x1634>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <checkDemoModCalisma+0x164c>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e032      	b.n	8006b3e <checkDemoModCalisma+0x168a>
 8006ad8:	200010c9 	.word	0x200010c9
 8006adc:	2000106f 	.word	0x2000106f
 8006ae0:	40010c00 	.word	0x40010c00
 8006ae4:	200010b9 	.word	0x200010b9
 8006ae8:	200010cd 	.word	0x200010cd
 8006aec:	40010800 	.word	0x40010800
 8006af0:	20001074 	.word	0x20001074
 8006af4:	200010ca 	.word	0x200010ca
 8006af8:	200010c0 	.word	0x200010c0
 8006afc:	200010ad 	.word	0x200010ad
 8006b00:	200010ce 	.word	0x200010ce
 8006b04:	200010cb 	.word	0x200010cb
 8006b08:	200010bf 	.word	0x200010bf
 8006b0c:	200010a4 	.word	0x200010a4
 8006b10:	200010a3 	.word	0x200010a3
 8006b14:	200010ba 	.word	0x200010ba
 8006b18:	20001044 	.word	0x20001044
 8006b1c:	20001058 	.word	0x20001058
 8006b20:	20001084 	.word	0x20001084
 8006b24:	200010a1 	.word	0x200010a1
 8006b28:	200010a2 	.word	0x200010a2
 8006b2c:	200010c1 	.word	0x200010c1
				} else {
					makineCalisiyor=1;
 8006b30:	4b90      	ldr	r3, [pc, #576]	@ (8006d74 <checkDemoModCalisma+0x18c0>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006b36:	4b90      	ldr	r3, [pc, #576]	@ (8006d78 <checkDemoModCalisma+0x18c4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a90      	ldr	r2, [pc, #576]	@ (8006d7c <checkDemoModCalisma+0x18c8>)
 8006b3c:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006b3e:	4b90      	ldr	r3, [pc, #576]	@ (8006d80 <checkDemoModCalisma+0x18cc>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d02f      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>
 8006b46:	4b8f      	ldr	r3, [pc, #572]	@ (8006d84 <checkDemoModCalisma+0x18d0>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f083 0301 	eor.w	r3, r3, #1
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d028      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>
 8006b54:	4b8c      	ldr	r3, [pc, #560]	@ (8006d88 <checkDemoModCalisma+0x18d4>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f083 0301 	eor.w	r3, r3, #1
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d021      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>
 8006b62:	4b8a      	ldr	r3, [pc, #552]	@ (8006d8c <checkDemoModCalisma+0x18d8>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f083 0301 	eor.w	r3, r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006b70:	4b87      	ldr	r3, [pc, #540]	@ (8006d90 <checkDemoModCalisma+0x18dc>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f083 0301 	eor.w	r3, r3, #1
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>
 8006b7e:	4b85      	ldr	r3, [pc, #532]	@ (8006d94 <checkDemoModCalisma+0x18e0>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f083 0301 	eor.w	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00c      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>
 8006b8c:	4b82      	ldr	r3, [pc, #520]	@ (8006d98 <checkDemoModCalisma+0x18e4>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f083 0301 	eor.w	r3, r3, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <checkDemoModCalisma+0x16f2>

					hataVar=0;
 8006b9a:	4b79      	ldr	r3, [pc, #484]	@ (8006d80 <checkDemoModCalisma+0x18cc>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006ba0:	2007      	movs	r0, #7
 8006ba2:	f7fc feb7 	bl	8003914 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8006ba6:	4b76      	ldr	r3, [pc, #472]	@ (8006d80 <checkDemoModCalisma+0x18cc>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d02a      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
 8006bae:	4b75      	ldr	r3, [pc, #468]	@ (8006d84 <checkDemoModCalisma+0x18d0>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f083 0301 	eor.w	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d023      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
 8006bbc:	4b72      	ldr	r3, [pc, #456]	@ (8006d88 <checkDemoModCalisma+0x18d4>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
 8006bc4:	4b71      	ldr	r3, [pc, #452]	@ (8006d8c <checkDemoModCalisma+0x18d8>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f083 0301 	eor.w	r3, r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d018      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8006bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8006d90 <checkDemoModCalisma+0x18dc>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f083 0301 	eor.w	r3, r3, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d011      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
 8006be0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d94 <checkDemoModCalisma+0x18e0>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f083 0301 	eor.w	r3, r3, #1
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
 8006bee:	4b6a      	ldr	r3, [pc, #424]	@ (8006d98 <checkDemoModCalisma+0x18e4>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f083 0301 	eor.w	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006bfc:	4b67      	ldr	r3, [pc, #412]	@ (8006d9c <checkDemoModCalisma+0x18e8>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	e009      	b.n	8006c18 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 8006c04:	4b60      	ldr	r3, [pc, #384]	@ (8006d88 <checkDemoModCalisma+0x18d4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f083 0301 	eor.w	r3, r3, #1
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 8006c12:	4b62      	ldr	r3, [pc, #392]	@ (8006d9c <checkDemoModCalisma+0x18e8>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006c18:	4b61      	ldr	r3, [pc, #388]	@ (8006da0 <checkDemoModCalisma+0x18ec>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	f040 81d8 	bne.w	8006fd2 <checkDemoModCalisma+0x1b1e>
 8006c22:	4b60      	ldr	r3, [pc, #384]	@ (8006da4 <checkDemoModCalisma+0x18f0>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 81d3 	beq.w	8006fd2 <checkDemoModCalisma+0x1b1e>
 8006c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8006da8 <checkDemoModCalisma+0x18f4>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 81ce 	bne.w	8006fd2 <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006c36:	2102      	movs	r1, #2
 8006c38:	485c      	ldr	r0, [pc, #368]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006c3a:	f004 fa15 	bl	800b068 <HAL_GPIO_ReadPin>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11d      	bne.n	8006c80 <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 8006c44:	4b5a      	ldr	r3, [pc, #360]	@ (8006db0 <checkDemoModCalisma+0x18fc>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	f083 0301 	eor.w	r3, r3, #1
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 8006c52:	4b58      	ldr	r3, [pc, #352]	@ (8006db4 <checkDemoModCalisma+0x1900>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f083 0301 	eor.w	r3, r3, #1
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 8006c60:	4b55      	ldr	r3, [pc, #340]	@ (8006db8 <checkDemoModCalisma+0x1904>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f083 0301 	eor.w	r3, r3, #1
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d008      	beq.n	8006c80 <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006c6e:	2201      	movs	r2, #1
 8006c70:	2104      	movs	r1, #4
 8006c72:	4852      	ldr	r0, [pc, #328]	@ (8006dbc <checkDemoModCalisma+0x1908>)
 8006c74:	f004 fa0f 	bl	800b096 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006c78:	4b51      	ldr	r3, [pc, #324]	@ (8006dc0 <checkDemoModCalisma+0x190c>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e00e      	b.n	8006c9e <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006c80:	2102      	movs	r1, #2
 8006c82:	484a      	ldr	r0, [pc, #296]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006c84:	f004 f9f0 	bl	800b068 <HAL_GPIO_ReadPin>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2104      	movs	r1, #4
 8006c92:	484a      	ldr	r0, [pc, #296]	@ (8006dbc <checkDemoModCalisma+0x1908>)
 8006c94:	f004 f9ff 	bl	800b096 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006c98:	4b49      	ldr	r3, [pc, #292]	@ (8006dc0 <checkDemoModCalisma+0x190c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006c9e:	4b48      	ldr	r3, [pc, #288]	@ (8006dc0 <checkDemoModCalisma+0x190c>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10b      	bne.n	8006cbe <checkDemoModCalisma+0x180a>
 8006ca6:	4b43      	ldr	r3, [pc, #268]	@ (8006db4 <checkDemoModCalisma+0x1900>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d107      	bne.n	8006cbe <checkDemoModCalisma+0x180a>
 8006cae:	4b42      	ldr	r3, [pc, #264]	@ (8006db8 <checkDemoModCalisma+0x1904>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <checkDemoModCalisma+0x180a>
 8006cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8006db0 <checkDemoModCalisma+0x18fc>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006cc4:	483d      	ldr	r0, [pc, #244]	@ (8006dbc <checkDemoModCalisma+0x1908>)
 8006cc6:	f004 f9e6 	bl	800b096 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cd0:	483a      	ldr	r0, [pc, #232]	@ (8006dbc <checkDemoModCalisma+0x1908>)
 8006cd2:	f004 f9e0 	bl	800b096 <HAL_GPIO_WritePin>
 8006cd6:	e00b      	b.n	8006cf0 <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006cde:	4837      	ldr	r0, [pc, #220]	@ (8006dbc <checkDemoModCalisma+0x1908>)
 8006ce0:	f004 f9d9 	bl	800b096 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cea:	4834      	ldr	r0, [pc, #208]	@ (8006dbc <checkDemoModCalisma+0x1908>)
 8006cec:	f004 f9d3 	bl	800b096 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	482e      	ldr	r0, [pc, #184]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006cf4:	f004 f9b8 	bl	800b068 <HAL_GPIO_ReadPin>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d10d      	bne.n	8006d1a <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006cfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d02:	482a      	ldr	r0, [pc, #168]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006d04:	f004 f9b0 	bl	800b068 <HAL_GPIO_ReadPin>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006dc0 <checkDemoModCalisma+0x190c>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f083 0301 	eor.w	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	4823      	ldr	r0, [pc, #140]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006d1e:	f004 f9a3 	bl	800b068 <HAL_GPIO_ReadPin>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d14d      	bne.n	8006dc4 <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006d28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d2c:	481f      	ldr	r0, [pc, #124]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006d2e:	f004 f99b 	bl	800b068 <HAL_GPIO_ReadPin>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d145      	bne.n	8006dc4 <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 8006d38:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <checkDemoModCalisma+0x190c>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f083 0301 	eor.w	r3, r3, #1
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d03e      	beq.n	8006dc4 <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 8006d46:	4b1a      	ldr	r3, [pc, #104]	@ (8006db0 <checkDemoModCalisma+0x18fc>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f083 0301 	eor.w	r3, r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d037      	beq.n	8006dc4 <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 8006d54:	4b18      	ldr	r3, [pc, #96]	@ (8006db8 <checkDemoModCalisma+0x1904>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f083 0301 	eor.w	r3, r3, #1
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d030      	beq.n	8006dc4 <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006d62:	2201      	movs	r2, #1
 8006d64:	2120      	movs	r1, #32
 8006d66:	4811      	ldr	r0, [pc, #68]	@ (8006dac <checkDemoModCalisma+0x18f8>)
 8006d68:	f004 f995 	bl	800b096 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006d6c:	4b11      	ldr	r3, [pc, #68]	@ (8006db4 <checkDemoModCalisma+0x1900>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	e02f      	b.n	8006dd4 <checkDemoModCalisma+0x1920>
 8006d74:	200010c1 	.word	0x200010c1
 8006d78:	20001044 	.word	0x20001044
 8006d7c:	20001058 	.word	0x20001058
 8006d80:	200010c0 	.word	0x200010c0
 8006d84:	200010bb 	.word	0x200010bb
 8006d88:	200010bc 	.word	0x200010bc
 8006d8c:	200010c9 	.word	0x200010c9
 8006d90:	200010ca 	.word	0x200010ca
 8006d94:	200010cb 	.word	0x200010cb
 8006d98:	200010ba 	.word	0x200010ba
 8006d9c:	200010cf 	.word	0x200010cf
 8006da0:	2000108a 	.word	0x2000108a
 8006da4:	200010bd 	.word	0x200010bd
 8006da8:	20001089 	.word	0x20001089
 8006dac:	40011000 	.word	0x40011000
 8006db0:	200010c4 	.word	0x200010c4
 8006db4:	200010c5 	.word	0x200010c5
 8006db8:	200010c6 	.word	0x200010c6
 8006dbc:	40010c00 	.word	0x40010c00
 8006dc0:	200010c3 	.word	0x200010c3
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2120      	movs	r1, #32
 8006dc8:	48a1      	ldr	r0, [pc, #644]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006dca:	f004 f964 	bl	800b096 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006dce:	4ba1      	ldr	r3, [pc, #644]	@ (8007054 <checkDemoModCalisma+0x1ba0>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	489e      	ldr	r0, [pc, #632]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006dd8:	f004 f946 	bl	800b068 <HAL_GPIO_ReadPin>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d125      	bne.n	8006e2e <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006de2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006de6:	489a      	ldr	r0, [pc, #616]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006de8:	f004 f93e 	bl	800b068 <HAL_GPIO_ReadPin>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d11d      	bne.n	8006e2e <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 8006df2:	4b99      	ldr	r3, [pc, #612]	@ (8007058 <checkDemoModCalisma+0x1ba4>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	f083 0301 	eor.w	r3, r3, #1
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d016      	beq.n	8006e2e <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 8006e00:	4b94      	ldr	r3, [pc, #592]	@ (8007054 <checkDemoModCalisma+0x1ba0>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f083 0301 	eor.w	r3, r3, #1
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00f      	beq.n	8006e2e <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 8006e0e:	4b93      	ldr	r3, [pc, #588]	@ (800705c <checkDemoModCalisma+0x1ba8>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f083 0301 	eor.w	r3, r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2110      	movs	r1, #16
 8006e20:	488b      	ldr	r0, [pc, #556]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006e22:	f004 f938 	bl	800b096 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006e26:	4b8e      	ldr	r3, [pc, #568]	@ (8007060 <checkDemoModCalisma+0x1bac>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e007      	b.n	8006e3e <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2110      	movs	r1, #16
 8006e32:	4887      	ldr	r0, [pc, #540]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006e34:	f004 f92f 	bl	800b096 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006e38:	4b89      	ldr	r3, [pc, #548]	@ (8007060 <checkDemoModCalisma+0x1bac>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006e3e:	2104      	movs	r1, #4
 8006e40:	4883      	ldr	r0, [pc, #524]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006e42:	f004 f911 	bl	800b068 <HAL_GPIO_ReadPin>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d125      	bne.n	8006e98 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 8006e4c:	4b82      	ldr	r3, [pc, #520]	@ (8007058 <checkDemoModCalisma+0x1ba4>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f083 0301 	eor.w	r3, r3, #1
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01e      	beq.n	8006e98 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 8006e5a:	4b81      	ldr	r3, [pc, #516]	@ (8007060 <checkDemoModCalisma+0x1bac>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f083 0301 	eor.w	r3, r3, #1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d017      	beq.n	8006e98 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 8006e68:	4b7a      	ldr	r3, [pc, #488]	@ (8007054 <checkDemoModCalisma+0x1ba0>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f083 0301 	eor.w	r3, r3, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d010      	beq.n	8006e98 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006e76:	2201      	movs	r2, #1
 8006e78:	2102      	movs	r1, #2
 8006e7a:	487a      	ldr	r0, [pc, #488]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8006e7c:	f004 f90b 	bl	800b096 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006e80:	2201      	movs	r2, #1
 8006e82:	2101      	movs	r1, #1
 8006e84:	4877      	ldr	r0, [pc, #476]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8006e86:	f004 f906 	bl	800b096 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006e8a:	4b74      	ldr	r3, [pc, #464]	@ (800705c <checkDemoModCalisma+0x1ba8>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006e90:	4b75      	ldr	r3, [pc, #468]	@ (8007068 <checkDemoModCalisma+0x1bb4>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e013      	b.n	8006ec0 <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006e98:	2104      	movs	r1, #4
 8006e9a:	486d      	ldr	r0, [pc, #436]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006e9c:	f004 f8e4 	bl	800b068 <HAL_GPIO_ReadPin>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d10c      	bne.n	8006ec0 <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	486e      	ldr	r0, [pc, #440]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8006eac:	f004 f8f3 	bl	800b096 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	486b      	ldr	r0, [pc, #428]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8006eb6:	f004 f8ee 	bl	800b096 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006eba:	4b68      	ldr	r3, [pc, #416]	@ (800705c <checkDemoModCalisma+0x1ba8>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	4863      	ldr	r0, [pc, #396]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006ec4:	f004 f8d0 	bl	800b068 <HAL_GPIO_ReadPin>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10d      	bne.n	8006eea <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006ece:	2201      	movs	r2, #1
 8006ed0:	2180      	movs	r1, #128	@ 0x80
 8006ed2:	4866      	ldr	r0, [pc, #408]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8006ed4:	f004 f8df 	bl	800b096 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2120      	movs	r1, #32
 8006edc:	4863      	ldr	r0, [pc, #396]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8006ede:	f004 f8da 	bl	800b096 <HAL_GPIO_WritePin>
					timer3 = millis;
 8006ee2:	4b63      	ldr	r3, [pc, #396]	@ (8007070 <checkDemoModCalisma+0x1bbc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a63      	ldr	r2, [pc, #396]	@ (8007074 <checkDemoModCalisma+0x1bc0>)
 8006ee8:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006eea:	4b61      	ldr	r3, [pc, #388]	@ (8007070 <checkDemoModCalisma+0x1bbc>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b61      	ldr	r3, [pc, #388]	@ (8007074 <checkDemoModCalisma+0x1bc0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d909      	bls.n	8006f0c <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2180      	movs	r1, #128	@ 0x80
 8006efc:	485b      	ldr	r0, [pc, #364]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8006efe:	f004 f8ca 	bl	800b096 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006f02:	2200      	movs	r2, #0
 8006f04:	2120      	movs	r1, #32
 8006f06:	4859      	ldr	r0, [pc, #356]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8006f08:	f004 f8c5 	bl	800b096 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4850      	ldr	r0, [pc, #320]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8006f10:	f004 f8aa 	bl	800b068 <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d108      	bne.n	8006f2c <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	2140      	movs	r1, #64	@ 0x40
 8006f1e:	4853      	ldr	r0, [pc, #332]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8006f20:	f004 f8b9 	bl	800b096 <HAL_GPIO_WritePin>
					timer3 = millis;
 8006f24:	4b52      	ldr	r3, [pc, #328]	@ (8007070 <checkDemoModCalisma+0x1bbc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a52      	ldr	r2, [pc, #328]	@ (8007074 <checkDemoModCalisma+0x1bc0>)
 8006f2a:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006f2c:	4b50      	ldr	r3, [pc, #320]	@ (8007070 <checkDemoModCalisma+0x1bbc>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	4b50      	ldr	r3, [pc, #320]	@ (8007074 <checkDemoModCalisma+0x1bc0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d904      	bls.n	8006f44 <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2140      	movs	r1, #64	@ 0x40
 8006f3e:	484b      	ldr	r0, [pc, #300]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8006f40:	f004 f8a9 	bl	800b096 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006f44:	4b44      	ldr	r3, [pc, #272]	@ (8007058 <checkDemoModCalisma+0x1ba4>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d024      	beq.n	8006f96 <checkDemoModCalisma+0x1ae2>
 8006f4c:	4b46      	ldr	r3, [pc, #280]	@ (8007068 <checkDemoModCalisma+0x1bb4>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d020      	beq.n	8006f96 <checkDemoModCalisma+0x1ae2>

					calismaSayisiDemo++;
 8006f54:	4b48      	ldr	r3, [pc, #288]	@ (8007078 <checkDemoModCalisma+0x1bc4>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	4b46      	ldr	r3, [pc, #280]	@ (8007078 <checkDemoModCalisma+0x1bc4>)
 8006f5e:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8006f60:	4b46      	ldr	r3, [pc, #280]	@ (800707c <checkDemoModCalisma+0x1bc8>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2bff      	cmp	r3, #255	@ 0xff
 8006f66:	d108      	bne.n	8006f7a <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 8006f68:	4b44      	ldr	r3, [pc, #272]	@ (800707c <checkDemoModCalisma+0x1bc8>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8006f6e:	4b44      	ldr	r3, [pc, #272]	@ (8007080 <checkDemoModCalisma+0x1bcc>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4b42      	ldr	r3, [pc, #264]	@ (8007080 <checkDemoModCalisma+0x1bcc>)
 8006f78:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8006f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8007078 <checkDemoModCalisma+0x1bc4>)
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	4b41      	ldr	r3, [pc, #260]	@ (8007084 <checkDemoModCalisma+0x1bd0>)
 8006f80:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8006f82:	4b41      	ldr	r3, [pc, #260]	@ (8007088 <checkDemoModCalisma+0x1bd4>)
 8006f84:	781a      	ldrb	r2, [r3, #0]
 8006f86:	4b3f      	ldr	r3, [pc, #252]	@ (8007084 <checkDemoModCalisma+0x1bd0>)
 8006f88:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8006f8a:	4b40      	ldr	r3, [pc, #256]	@ (800708c <checkDemoModCalisma+0x1bd8>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8006f90:	4b35      	ldr	r3, [pc, #212]	@ (8007068 <checkDemoModCalisma+0x1bb4>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006f96:	4b3e      	ldr	r3, [pc, #248]	@ (8007090 <checkDemoModCalisma+0x1bdc>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d156      	bne.n	800704c <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 8006f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8007094 <checkDemoModCalisma+0x1be0>)
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	2002      	movs	r0, #2
 8006fa4:	f002 fd6e 	bl	8009a84 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8007098 <checkDemoModCalisma+0x1be4>)
 8006faa:	2101      	movs	r1, #1
 8006fac:	2001      	movs	r0, #1
 8006fae:	f002 fd69 	bl	8009a84 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8006fb2:	4b31      	ldr	r3, [pc, #196]	@ (8007078 <checkDemoModCalisma+0x1bc4>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	220a      	movs	r2, #10
 8006fb8:	4938      	ldr	r1, [pc, #224]	@ (800709c <checkDemoModCalisma+0x1be8>)
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f007 f84a 	bl	800e054 <itoa>
					lcd_print(2,11,snum);
 8006fc0:	4a36      	ldr	r2, [pc, #216]	@ (800709c <checkDemoModCalisma+0x1be8>)
 8006fc2:	210b      	movs	r1, #11
 8006fc4:	2002      	movs	r0, #2
 8006fc6:	f002 fd5d 	bl	8009a84 <lcd_print>
					mesajYazildi=1;
 8006fca:	4b35      	ldr	r3, [pc, #212]	@ (80070a0 <checkDemoModCalisma+0x1bec>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006fd0:	e03c      	b.n	800704c <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8006fd2:	4b34      	ldr	r3, [pc, #208]	@ (80070a4 <checkDemoModCalisma+0x1bf0>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d003      	beq.n	8006fe2 <checkDemoModCalisma+0x1b2e>
 8006fda:	4b2d      	ldr	r3, [pc, #180]	@ (8007090 <checkDemoModCalisma+0x1bdc>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d134      	bne.n	800704c <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006fe8:	481e      	ldr	r0, [pc, #120]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8006fea:	f004 f854 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ff4:	481b      	ldr	r0, [pc, #108]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8006ff6:	f004 f84e 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	4819      	ldr	r0, [pc, #100]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8007000:	f004 f849 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007004:	2200      	movs	r2, #0
 8007006:	2102      	movs	r1, #2
 8007008:	4816      	ldr	r0, [pc, #88]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 800700a:	f004 f844 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800700e:	2200      	movs	r2, #0
 8007010:	2101      	movs	r1, #1
 8007012:	4814      	ldr	r0, [pc, #80]	@ (8007064 <checkDemoModCalisma+0x1bb0>)
 8007014:	f004 f83f 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007018:	2200      	movs	r2, #0
 800701a:	2120      	movs	r1, #32
 800701c:	480c      	ldr	r0, [pc, #48]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 800701e:	f004 f83a 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007022:	2200      	movs	r2, #0
 8007024:	2110      	movs	r1, #16
 8007026:	480a      	ldr	r0, [pc, #40]	@ (8007050 <checkDemoModCalisma+0x1b9c>)
 8007028:	f004 f835 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800702c:	2200      	movs	r2, #0
 800702e:	2180      	movs	r1, #128	@ 0x80
 8007030:	480e      	ldr	r0, [pc, #56]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8007032:	f004 f830 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007036:	2200      	movs	r2, #0
 8007038:	2140      	movs	r1, #64	@ 0x40
 800703a:	480c      	ldr	r0, [pc, #48]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 800703c:	f004 f82b 	bl	800b096 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007040:	2200      	movs	r2, #0
 8007042:	2120      	movs	r1, #32
 8007044:	4809      	ldr	r0, [pc, #36]	@ (800706c <checkDemoModCalisma+0x1bb8>)
 8007046:	f004 f826 	bl	800b096 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 800704a:	e7ff      	b.n	800704c <checkDemoModCalisma+0x1b98>
 800704c:	bf00      	nop
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40011000 	.word	0x40011000
 8007054:	200010c5 	.word	0x200010c5
 8007058:	200010c3 	.word	0x200010c3
 800705c:	200010c4 	.word	0x200010c4
 8007060:	200010c6 	.word	0x200010c6
 8007064:	40010c00 	.word	0x40010c00
 8007068:	200010aa 	.word	0x200010aa
 800706c:	40010800 	.word	0x40010800
 8007070:	20001044 	.word	0x20001044
 8007074:	20001054 	.word	0x20001054
 8007078:	20001065 	.word	0x20001065
 800707c:	20001064 	.word	0x20001064
 8007080:	20001066 	.word	0x20001066
 8007084:	20000f9c 	.word	0x20000f9c
 8007088:	20001067 	.word	0x20001067
 800708c:	20001098 	.word	0x20001098
 8007090:	20001089 	.word	0x20001089
 8007094:	0800e288 	.word	0x0800e288
 8007098:	0800e294 	.word	0x0800e294
 800709c:	2000100c 	.word	0x2000100c
 80070a0:	200010a0 	.word	0x200010a0
 80070a4:	2000108a 	.word	0x2000108a

080070a8 <mainLoop>:

void mainLoop() {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80070ae:	f7fc fc85 	bl	80039bc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80070b2:	2101      	movs	r1, #1
 80070b4:	489e      	ldr	r0, [pc, #632]	@ (8007330 <mainLoop+0x288>)
 80070b6:	f003 ffd7 	bl	800b068 <HAL_GPIO_ReadPin>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d136      	bne.n	800712e <mainLoop+0x86>
 80070c0:	2108      	movs	r1, #8
 80070c2:	489c      	ldr	r0, [pc, #624]	@ (8007334 <mainLoop+0x28c>)
 80070c4:	f003 ffd0 	bl	800b068 <HAL_GPIO_ReadPin>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d12f      	bne.n	800712e <mainLoop+0x86>
 80070ce:	2102      	movs	r1, #2
 80070d0:	4897      	ldr	r0, [pc, #604]	@ (8007330 <mainLoop+0x288>)
 80070d2:	f003 ffc9 	bl	800b068 <HAL_GPIO_ReadPin>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d128      	bne.n	800712e <mainLoop+0x86>
 80070dc:	2104      	movs	r1, #4
 80070de:	4894      	ldr	r0, [pc, #592]	@ (8007330 <mainLoop+0x288>)
 80070e0:	f003 ffc2 	bl	800b068 <HAL_GPIO_ReadPin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d121      	bne.n	800712e <mainLoop+0x86>
 80070ea:	2108      	movs	r1, #8
 80070ec:	4890      	ldr	r0, [pc, #576]	@ (8007330 <mainLoop+0x288>)
 80070ee:	f003 ffbb 	bl	800b068 <HAL_GPIO_ReadPin>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11a      	bne.n	800712e <mainLoop+0x86>
 80070f8:	2180      	movs	r1, #128	@ 0x80
 80070fa:	488e      	ldr	r0, [pc, #568]	@ (8007334 <mainLoop+0x28c>)
 80070fc:	f003 ffb4 	bl	800b068 <HAL_GPIO_ReadPin>
 8007100:	4603      	mov	r3, r0
 8007102:	2b01      	cmp	r3, #1
 8007104:	d113      	bne.n	800712e <mainLoop+0x86>
 8007106:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800710a:	488a      	ldr	r0, [pc, #552]	@ (8007334 <mainLoop+0x28c>)
 800710c:	f003 ffac 	bl	800b068 <HAL_GPIO_ReadPin>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10b      	bne.n	800712e <mainLoop+0x86>
 8007116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800711a:	4886      	ldr	r0, [pc, #536]	@ (8007334 <mainLoop+0x28c>)
 800711c:	f003 ffa4 	bl	800b068 <HAL_GPIO_ReadPin>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d103      	bne.n	800712e <mainLoop+0x86>
			butonKontrol=0;
 8007126:	4b84      	ldr	r3, [pc, #528]	@ (8007338 <mainLoop+0x290>)
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e003      	b.n	8007136 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800712e:	4b83      	ldr	r3, [pc, #524]	@ (800733c <mainLoop+0x294>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a83      	ldr	r2, [pc, #524]	@ (8007340 <mainLoop+0x298>)
 8007134:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8007136:	f7fc fcf3 	bl	8003b20 <buttonCheck>
 800713a:	4603      	mov	r3, r0
 800713c:	2b01      	cmp	r3, #1
 800713e:	d103      	bne.n	8007148 <mainLoop+0xa0>
			backLightTimer = millis;
 8007140:	4b7e      	ldr	r3, [pc, #504]	@ (800733c <mainLoop+0x294>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a7e      	ldr	r2, [pc, #504]	@ (8007340 <mainLoop+0x298>)
 8007146:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007148:	4b7e      	ldr	r3, [pc, #504]	@ (8007344 <mainLoop+0x29c>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02c      	beq.n	80071aa <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007150:	bf00      	nop
 8007152:	487d      	ldr	r0, [pc, #500]	@ (8007348 <mainLoop+0x2a0>)
 8007154:	f004 fdb1 	bl	800bcba <HAL_I2C_GetError>
 8007158:	4603      	mov	r3, r0
 800715a:	2b04      	cmp	r3, #4
 800715c:	d0f9      	beq.n	8007152 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800715e:	bf00      	nop
 8007160:	4879      	ldr	r0, [pc, #484]	@ (8007348 <mainLoop+0x2a0>)
 8007162:	f004 fd9d 	bl	800bca0 <HAL_I2C_GetState>
 8007166:	4603      	mov	r3, r0
 8007168:	2b20      	cmp	r3, #32
 800716a:	d1f9      	bne.n	8007160 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800716c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007170:	9302      	str	r3, [sp, #8]
 8007172:	236e      	movs	r3, #110	@ 0x6e
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	4b75      	ldr	r3, [pc, #468]	@ (800734c <mainLoop+0x2a4>)
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	236e      	movs	r3, #110	@ 0x6e
 800717c:	2200      	movs	r2, #0
 800717e:	21a0      	movs	r1, #160	@ 0xa0
 8007180:	4871      	ldr	r0, [pc, #452]	@ (8007348 <mainLoop+0x2a0>)
 8007182:	f004 fa2b 	bl	800b5dc <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007186:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800718a:	f003 f99d 	bl	800a4c8 <HAL_Delay>

		  hafizaYaz=0;
 800718e:	4b6d      	ldr	r3, [pc, #436]	@ (8007344 <mainLoop+0x29c>)
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8007194:	4a6e      	ldr	r2, [pc, #440]	@ (8007350 <mainLoop+0x2a8>)
 8007196:	2101      	movs	r1, #1
 8007198:	2002      	movs	r0, #2
 800719a:	f002 fc73 	bl	8009a84 <lcd_print>

		  HAL_Delay(1000);
 800719e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80071a2:	f003 f991 	bl	800a4c8 <HAL_Delay>
		  lcd_clear();
 80071a6:	f002 fc99 	bl	8009adc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80071aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007354 <mainLoop+0x2ac>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f083 0301 	eor.w	r3, r3, #1
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d043      	beq.n	8007240 <mainLoop+0x198>
 80071b8:	4863      	ldr	r0, [pc, #396]	@ (8007348 <mainLoop+0x2a0>)
 80071ba:	f004 fd71 	bl	800bca0 <HAL_I2C_GetState>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d13d      	bne.n	8007240 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 80071c4:	4b64      	ldr	r3, [pc, #400]	@ (8007358 <mainLoop+0x2b0>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f083 0301 	eor.w	r3, r3, #1
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d028      	beq.n	8007224 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 80071d2:	4a62      	ldr	r2, [pc, #392]	@ (800735c <mainLoop+0x2b4>)
 80071d4:	2101      	movs	r1, #1
 80071d6:	2001      	movs	r0, #1
 80071d8:	f002 fc54 	bl	8009a84 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 80071dc:	4a60      	ldr	r2, [pc, #384]	@ (8007360 <mainLoop+0x2b8>)
 80071de:	2101      	movs	r1, #1
 80071e0:	2002      	movs	r0, #2
 80071e2:	f002 fc4f 	bl	8009a84 <lcd_print>
			  HAL_Delay(1000);
 80071e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80071ea:	f003 f96d 	bl	800a4c8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80071ee:	bf00      	nop
 80071f0:	4855      	ldr	r0, [pc, #340]	@ (8007348 <mainLoop+0x2a0>)
 80071f2:	f004 fd62 	bl	800bcba <HAL_I2C_GetError>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d0f9      	beq.n	80071f0 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80071fc:	e003      	b.n	8007206 <mainLoop+0x15e>
				  HAL_Delay(1000);
 80071fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007202:	f003 f961 	bl	800a4c8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007206:	4850      	ldr	r0, [pc, #320]	@ (8007348 <mainLoop+0x2a0>)
 8007208:	f004 fd4a 	bl	800bca0 <HAL_I2C_GetState>
 800720c:	4603      	mov	r3, r0
 800720e:	2b20      	cmp	r3, #32
 8007210:	d1f5      	bne.n	80071fe <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8007212:	4a54      	ldr	r2, [pc, #336]	@ (8007364 <mainLoop+0x2bc>)
 8007214:	2101      	movs	r1, #1
 8007216:	2002      	movs	r0, #2
 8007218:	f002 fc34 	bl	8009a84 <lcd_print>

			  ilkOkuma=1;
 800721c:	4b4e      	ldr	r3, [pc, #312]	@ (8007358 <mainLoop+0x2b0>)
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e006      	b.n	8007232 <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8007224:	4a50      	ldr	r2, [pc, #320]	@ (8007368 <mainLoop+0x2c0>)
 8007226:	2101      	movs	r1, #1
 8007228:	2002      	movs	r0, #2
 800722a:	f002 fc2b 	bl	8009a84 <lcd_print>
			  lcd_clear();
 800722e:	f002 fc55 	bl	8009adc <lcd_clear>
		  }

		  lcd_clear();
 8007232:	f002 fc53 	bl	8009adc <lcd_clear>

		  eepromKontrol();
 8007236:	f7f8 fffd 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800723a:	4b46      	ldr	r3, [pc, #280]	@ (8007354 <mainLoop+0x2ac>)
 800723c:	2201      	movs	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007240:	4b4a      	ldr	r3, [pc, #296]	@ (800736c <mainLoop+0x2c4>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11c      	bne.n	8007282 <mainLoop+0x1da>
 8007248:	4b49      	ldr	r3, [pc, #292]	@ (8007370 <mainLoop+0x2c8>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	f083 0301 	eor.w	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d015      	beq.n	8007282 <mainLoop+0x1da>
 8007256:	4b47      	ldr	r3, [pc, #284]	@ (8007374 <mainLoop+0x2cc>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d111      	bne.n	8007282 <mainLoop+0x1da>
			lcd_clear();
 800725e:	f002 fc3d 	bl	8009adc <lcd_clear>
			HAL_Delay(10);
 8007262:	200a      	movs	r0, #10
 8007264:	f003 f930 	bl	800a4c8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8007268:	4a43      	ldr	r2, [pc, #268]	@ (8007378 <mainLoop+0x2d0>)
 800726a:	2101      	movs	r1, #1
 800726c:	2001      	movs	r0, #1
 800726e:	f002 fc09 	bl	8009a84 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8007272:	4a42      	ldr	r2, [pc, #264]	@ (800737c <mainLoop+0x2d4>)
 8007274:	2101      	movs	r1, #1
 8007276:	2002      	movs	r0, #2
 8007278:	f002 fc04 	bl	8009a84 <lcd_print>
			mesajYazildi=1;
 800727c:	4b3c      	ldr	r3, [pc, #240]	@ (8007370 <mainLoop+0x2c8>)
 800727e:	2201      	movs	r2, #1
 8007280:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007282:	4b3a      	ldr	r3, [pc, #232]	@ (800736c <mainLoop+0x2c4>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d112      	bne.n	80072b0 <mainLoop+0x208>
 800728a:	2102      	movs	r1, #2
 800728c:	4828      	ldr	r0, [pc, #160]	@ (8007330 <mainLoop+0x288>)
 800728e:	f003 feeb 	bl	800b068 <HAL_GPIO_ReadPin>
 8007292:	4603      	mov	r3, r0
 8007294:	2b01      	cmp	r3, #1
 8007296:	d10b      	bne.n	80072b0 <mainLoop+0x208>
 8007298:	2104      	movs	r1, #4
 800729a:	4825      	ldr	r0, [pc, #148]	@ (8007330 <mainLoop+0x288>)
 800729c:	f003 fee4 	bl	800b068 <HAL_GPIO_ReadPin>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d104      	bne.n	80072b0 <mainLoop+0x208>
			menuGiris=1;
 80072a6:	4b31      	ldr	r3, [pc, #196]	@ (800736c <mainLoop+0x2c4>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80072ac:	f002 fc16 	bl	8009adc <lcd_clear>
		}

		if(menuGiris==1) {
 80072b0:	4b2e      	ldr	r3, [pc, #184]	@ (800736c <mainLoop+0x2c4>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <mainLoop+0x214>
			menu();
 80072b8:	f7f9 fe4a 	bl	8000f50 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80072bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80072c0:	481c      	ldr	r0, [pc, #112]	@ (8007334 <mainLoop+0x28c>)
 80072c2:	f003 ff00 	bl	800b0c6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80072c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80072ca:	482d      	ldr	r0, [pc, #180]	@ (8007380 <mainLoop+0x2d8>)
 80072cc:	f003 fecc 	bl	800b068 <HAL_GPIO_ReadPin>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <mainLoop+0x244>
 80072d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007384 <mainLoop+0x2dc>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f083 0301 	eor.w	r3, r3, #1
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <mainLoop+0x244>
			stopVar=1;
 80072e4:	4b28      	ldr	r3, [pc, #160]	@ (8007388 <mainLoop+0x2e0>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <mainLoop+0x24a>
		} else {
			stopVar=0;
 80072ec:	4b26      	ldr	r3, [pc, #152]	@ (8007388 <mainLoop+0x2e0>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80072f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80072f6:	4822      	ldr	r0, [pc, #136]	@ (8007380 <mainLoop+0x2d8>)
 80072f8:	f003 feb6 	bl	800b068 <HAL_GPIO_ReadPin>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <mainLoop+0x26a>
 8007302:	4b22      	ldr	r3, [pc, #136]	@ (800738c <mainLoop+0x2e4>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <mainLoop+0x26a>
			EmnStopVar=1;
 800730a:	4b21      	ldr	r3, [pc, #132]	@ (8007390 <mainLoop+0x2e8>)
 800730c:	2201      	movs	r2, #1
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e002      	b.n	8007318 <mainLoop+0x270>
		} else {
			EmnStopVar=0;
 8007312:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <mainLoop+0x2e8>)
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007318:	f7fc fc36 	bl	8003b88 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800731c:	f7fc fc68 	bl	8003bf0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007320:	f7fc fcac 	bl	8003c7c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007324:	f7fc fcfc 	bl	8003d20 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007328:	f7fe f8c4 	bl	80054b4 <checkDemoModCalisma>
		checkLCDBacklight();
 800732c:	e6bf      	b.n	80070ae <mainLoop+0x6>
 800732e:	bf00      	nop
 8007330:	40010800 	.word	0x40010800
 8007334:	40011000 	.word	0x40011000
 8007338:	2000109b 	.word	0x2000109b
 800733c:	20001044 	.word	0x20001044
 8007340:	20001060 	.word	0x20001060
 8007344:	20001098 	.word	0x20001098
 8007348:	200017f0 	.word	0x200017f0
 800734c:	20000f9c 	.word	0x20000f9c
 8007350:	20001714 	.word	0x20001714
 8007354:	20001099 	.word	0x20001099
 8007358:	2000109a 	.word	0x2000109a
 800735c:	20000178 	.word	0x20000178
 8007360:	20001728 	.word	0x20001728
 8007364:	2000173c 	.word	0x2000173c
 8007368:	20001750 	.word	0x20001750
 800736c:	20001089 	.word	0x20001089
 8007370:	200010a0 	.word	0x200010a0
 8007374:	2000108a 	.word	0x2000108a
 8007378:	200000c4 	.word	0x200000c4
 800737c:	200000d8 	.word	0x200000d8
 8007380:	40010c00 	.word	0x40010c00
 8007384:	200010c0 	.word	0x200010c0
 8007388:	200010bd 	.word	0x200010bd
 800738c:	200010cf 	.word	0x200010cf
 8007390:	200010d0 	.word	0x200010d0

08007394 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8007394:	b5b0      	push	{r4, r5, r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 853d 	bne.w	8007e20 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 80073a6:	4ac7      	ldr	r2, [pc, #796]	@ (80076c4 <loadMenuTexts+0x330>)
 80073a8:	4bc7      	ldr	r3, [pc, #796]	@ (80076c8 <loadMenuTexts+0x334>)
 80073aa:	4614      	mov	r4, r2
 80073ac:	461d      	mov	r5, r3
 80073ae:	6828      	ldr	r0, [r5, #0]
 80073b0:	6869      	ldr	r1, [r5, #4]
 80073b2:	68aa      	ldr	r2, [r5, #8]
 80073b4:	68eb      	ldr	r3, [r5, #12]
 80073b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b8:	7c2b      	ldrb	r3, [r5, #16]
 80073ba:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 80073bc:	4ac3      	ldr	r2, [pc, #780]	@ (80076cc <loadMenuTexts+0x338>)
 80073be:	4bc4      	ldr	r3, [pc, #784]	@ (80076d0 <loadMenuTexts+0x33c>)
 80073c0:	4614      	mov	r4, r2
 80073c2:	461d      	mov	r5, r3
 80073c4:	6828      	ldr	r0, [r5, #0]
 80073c6:	6869      	ldr	r1, [r5, #4]
 80073c8:	68aa      	ldr	r2, [r5, #8]
 80073ca:	68eb      	ldr	r3, [r5, #12]
 80073cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ce:	7c2b      	ldrb	r3, [r5, #16]
 80073d0:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 80073d2:	4ac0      	ldr	r2, [pc, #768]	@ (80076d4 <loadMenuTexts+0x340>)
 80073d4:	4bc0      	ldr	r3, [pc, #768]	@ (80076d8 <loadMenuTexts+0x344>)
 80073d6:	4614      	mov	r4, r2
 80073d8:	461d      	mov	r5, r3
 80073da:	6828      	ldr	r0, [r5, #0]
 80073dc:	6869      	ldr	r1, [r5, #4]
 80073de:	68aa      	ldr	r2, [r5, #8]
 80073e0:	68eb      	ldr	r3, [r5, #12]
 80073e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e4:	7c2b      	ldrb	r3, [r5, #16]
 80073e6:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 80073e8:	4abc      	ldr	r2, [pc, #752]	@ (80076dc <loadMenuTexts+0x348>)
 80073ea:	4bbd      	ldr	r3, [pc, #756]	@ (80076e0 <loadMenuTexts+0x34c>)
 80073ec:	4614      	mov	r4, r2
 80073ee:	461d      	mov	r5, r3
 80073f0:	6828      	ldr	r0, [r5, #0]
 80073f2:	6869      	ldr	r1, [r5, #4]
 80073f4:	68aa      	ldr	r2, [r5, #8]
 80073f6:	68eb      	ldr	r3, [r5, #12]
 80073f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073fa:	7c2b      	ldrb	r3, [r5, #16]
 80073fc:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80073fe:	4ab9      	ldr	r2, [pc, #740]	@ (80076e4 <loadMenuTexts+0x350>)
 8007400:	4bb9      	ldr	r3, [pc, #740]	@ (80076e8 <loadMenuTexts+0x354>)
 8007402:	4614      	mov	r4, r2
 8007404:	461d      	mov	r5, r3
 8007406:	6828      	ldr	r0, [r5, #0]
 8007408:	6869      	ldr	r1, [r5, #4]
 800740a:	68aa      	ldr	r2, [r5, #8]
 800740c:	68eb      	ldr	r3, [r5, #12]
 800740e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007410:	7c2b      	ldrb	r3, [r5, #16]
 8007412:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8007414:	4ab5      	ldr	r2, [pc, #724]	@ (80076ec <loadMenuTexts+0x358>)
 8007416:	4bb6      	ldr	r3, [pc, #728]	@ (80076f0 <loadMenuTexts+0x35c>)
 8007418:	4614      	mov	r4, r2
 800741a:	461d      	mov	r5, r3
 800741c:	6828      	ldr	r0, [r5, #0]
 800741e:	6869      	ldr	r1, [r5, #4]
 8007420:	68aa      	ldr	r2, [r5, #8]
 8007422:	68eb      	ldr	r3, [r5, #12]
 8007424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007426:	7c2b      	ldrb	r3, [r5, #16]
 8007428:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800742a:	4ab2      	ldr	r2, [pc, #712]	@ (80076f4 <loadMenuTexts+0x360>)
 800742c:	4bb2      	ldr	r3, [pc, #712]	@ (80076f8 <loadMenuTexts+0x364>)
 800742e:	4614      	mov	r4, r2
 8007430:	461d      	mov	r5, r3
 8007432:	6828      	ldr	r0, [r5, #0]
 8007434:	6869      	ldr	r1, [r5, #4]
 8007436:	68aa      	ldr	r2, [r5, #8]
 8007438:	68eb      	ldr	r3, [r5, #12]
 800743a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743c:	7c2b      	ldrb	r3, [r5, #16]
 800743e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007440:	4aae      	ldr	r2, [pc, #696]	@ (80076fc <loadMenuTexts+0x368>)
 8007442:	4baf      	ldr	r3, [pc, #700]	@ (8007700 <loadMenuTexts+0x36c>)
 8007444:	4614      	mov	r4, r2
 8007446:	461d      	mov	r5, r3
 8007448:	6828      	ldr	r0, [r5, #0]
 800744a:	6869      	ldr	r1, [r5, #4]
 800744c:	68aa      	ldr	r2, [r5, #8]
 800744e:	68eb      	ldr	r3, [r5, #12]
 8007450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007452:	7c2b      	ldrb	r3, [r5, #16]
 8007454:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8007456:	4aab      	ldr	r2, [pc, #684]	@ (8007704 <loadMenuTexts+0x370>)
 8007458:	4bab      	ldr	r3, [pc, #684]	@ (8007708 <loadMenuTexts+0x374>)
 800745a:	4614      	mov	r4, r2
 800745c:	461d      	mov	r5, r3
 800745e:	6828      	ldr	r0, [r5, #0]
 8007460:	6869      	ldr	r1, [r5, #4]
 8007462:	68aa      	ldr	r2, [r5, #8]
 8007464:	68eb      	ldr	r3, [r5, #12]
 8007466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007468:	7c2b      	ldrb	r3, [r5, #16]
 800746a:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 800746c:	4aa7      	ldr	r2, [pc, #668]	@ (800770c <loadMenuTexts+0x378>)
 800746e:	4ba8      	ldr	r3, [pc, #672]	@ (8007710 <loadMenuTexts+0x37c>)
 8007470:	4614      	mov	r4, r2
 8007472:	461d      	mov	r5, r3
 8007474:	6828      	ldr	r0, [r5, #0]
 8007476:	6869      	ldr	r1, [r5, #4]
 8007478:	68aa      	ldr	r2, [r5, #8]
 800747a:	68eb      	ldr	r3, [r5, #12]
 800747c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800747e:	7c2b      	ldrb	r3, [r5, #16]
 8007480:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8007482:	4aa4      	ldr	r2, [pc, #656]	@ (8007714 <loadMenuTexts+0x380>)
 8007484:	4ba4      	ldr	r3, [pc, #656]	@ (8007718 <loadMenuTexts+0x384>)
 8007486:	4614      	mov	r4, r2
 8007488:	461d      	mov	r5, r3
 800748a:	6828      	ldr	r0, [r5, #0]
 800748c:	6869      	ldr	r1, [r5, #4]
 800748e:	68aa      	ldr	r2, [r5, #8]
 8007490:	68eb      	ldr	r3, [r5, #12]
 8007492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007494:	7c2b      	ldrb	r3, [r5, #16]
 8007496:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8007498:	4aa0      	ldr	r2, [pc, #640]	@ (800771c <loadMenuTexts+0x388>)
 800749a:	4ba1      	ldr	r3, [pc, #644]	@ (8007720 <loadMenuTexts+0x38c>)
 800749c:	4614      	mov	r4, r2
 800749e:	461d      	mov	r5, r3
 80074a0:	6828      	ldr	r0, [r5, #0]
 80074a2:	6869      	ldr	r1, [r5, #4]
 80074a4:	68aa      	ldr	r2, [r5, #8]
 80074a6:	68eb      	ldr	r3, [r5, #12]
 80074a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074aa:	7c2b      	ldrb	r3, [r5, #16]
 80074ac:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 80074ae:	4a9d      	ldr	r2, [pc, #628]	@ (8007724 <loadMenuTexts+0x390>)
 80074b0:	4b9d      	ldr	r3, [pc, #628]	@ (8007728 <loadMenuTexts+0x394>)
 80074b2:	4614      	mov	r4, r2
 80074b4:	461d      	mov	r5, r3
 80074b6:	6828      	ldr	r0, [r5, #0]
 80074b8:	6869      	ldr	r1, [r5, #4]
 80074ba:	68aa      	ldr	r2, [r5, #8]
 80074bc:	68eb      	ldr	r3, [r5, #12]
 80074be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c0:	7c2b      	ldrb	r3, [r5, #16]
 80074c2:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 80074c4:	4a99      	ldr	r2, [pc, #612]	@ (800772c <loadMenuTexts+0x398>)
 80074c6:	4b9a      	ldr	r3, [pc, #616]	@ (8007730 <loadMenuTexts+0x39c>)
 80074c8:	4614      	mov	r4, r2
 80074ca:	461d      	mov	r5, r3
 80074cc:	6828      	ldr	r0, [r5, #0]
 80074ce:	6869      	ldr	r1, [r5, #4]
 80074d0:	68aa      	ldr	r2, [r5, #8]
 80074d2:	68eb      	ldr	r3, [r5, #12]
 80074d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074d6:	7c2b      	ldrb	r3, [r5, #16]
 80074d8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80074da:	4a96      	ldr	r2, [pc, #600]	@ (8007734 <loadMenuTexts+0x3a0>)
 80074dc:	4b96      	ldr	r3, [pc, #600]	@ (8007738 <loadMenuTexts+0x3a4>)
 80074de:	4614      	mov	r4, r2
 80074e0:	461d      	mov	r5, r3
 80074e2:	6828      	ldr	r0, [r5, #0]
 80074e4:	6869      	ldr	r1, [r5, #4]
 80074e6:	68aa      	ldr	r2, [r5, #8]
 80074e8:	68eb      	ldr	r3, [r5, #12]
 80074ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ec:	7c2b      	ldrb	r3, [r5, #16]
 80074ee:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80074f0:	4a92      	ldr	r2, [pc, #584]	@ (800773c <loadMenuTexts+0x3a8>)
 80074f2:	4b93      	ldr	r3, [pc, #588]	@ (8007740 <loadMenuTexts+0x3ac>)
 80074f4:	4614      	mov	r4, r2
 80074f6:	461d      	mov	r5, r3
 80074f8:	6828      	ldr	r0, [r5, #0]
 80074fa:	6869      	ldr	r1, [r5, #4]
 80074fc:	68aa      	ldr	r2, [r5, #8]
 80074fe:	68eb      	ldr	r3, [r5, #12]
 8007500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007502:	7c2b      	ldrb	r3, [r5, #16]
 8007504:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8007506:	4a8f      	ldr	r2, [pc, #572]	@ (8007744 <loadMenuTexts+0x3b0>)
 8007508:	4b8f      	ldr	r3, [pc, #572]	@ (8007748 <loadMenuTexts+0x3b4>)
 800750a:	4614      	mov	r4, r2
 800750c:	461d      	mov	r5, r3
 800750e:	6828      	ldr	r0, [r5, #0]
 8007510:	6869      	ldr	r1, [r5, #4]
 8007512:	68aa      	ldr	r2, [r5, #8]
 8007514:	68eb      	ldr	r3, [r5, #12]
 8007516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007518:	7c2b      	ldrb	r3, [r5, #16]
 800751a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 800751c:	4a8b      	ldr	r2, [pc, #556]	@ (800774c <loadMenuTexts+0x3b8>)
 800751e:	4b8c      	ldr	r3, [pc, #560]	@ (8007750 <loadMenuTexts+0x3bc>)
 8007520:	4614      	mov	r4, r2
 8007522:	461d      	mov	r5, r3
 8007524:	6828      	ldr	r0, [r5, #0]
 8007526:	6869      	ldr	r1, [r5, #4]
 8007528:	68aa      	ldr	r2, [r5, #8]
 800752a:	68eb      	ldr	r3, [r5, #12]
 800752c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800752e:	7c2b      	ldrb	r3, [r5, #16]
 8007530:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8007532:	4a88      	ldr	r2, [pc, #544]	@ (8007754 <loadMenuTexts+0x3c0>)
 8007534:	4b88      	ldr	r3, [pc, #544]	@ (8007758 <loadMenuTexts+0x3c4>)
 8007536:	4614      	mov	r4, r2
 8007538:	461d      	mov	r5, r3
 800753a:	6828      	ldr	r0, [r5, #0]
 800753c:	6869      	ldr	r1, [r5, #4]
 800753e:	68aa      	ldr	r2, [r5, #8]
 8007540:	68eb      	ldr	r3, [r5, #12]
 8007542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007544:	7c2b      	ldrb	r3, [r5, #16]
 8007546:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8007548:	4a84      	ldr	r2, [pc, #528]	@ (800775c <loadMenuTexts+0x3c8>)
 800754a:	4b85      	ldr	r3, [pc, #532]	@ (8007760 <loadMenuTexts+0x3cc>)
 800754c:	4614      	mov	r4, r2
 800754e:	461d      	mov	r5, r3
 8007550:	6828      	ldr	r0, [r5, #0]
 8007552:	6869      	ldr	r1, [r5, #4]
 8007554:	68aa      	ldr	r2, [r5, #8]
 8007556:	68eb      	ldr	r3, [r5, #12]
 8007558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755a:	7c2b      	ldrb	r3, [r5, #16]
 800755c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800755e:	4a81      	ldr	r2, [pc, #516]	@ (8007764 <loadMenuTexts+0x3d0>)
 8007560:	4b81      	ldr	r3, [pc, #516]	@ (8007768 <loadMenuTexts+0x3d4>)
 8007562:	4614      	mov	r4, r2
 8007564:	461d      	mov	r5, r3
 8007566:	6828      	ldr	r0, [r5, #0]
 8007568:	6869      	ldr	r1, [r5, #4]
 800756a:	68aa      	ldr	r2, [r5, #8]
 800756c:	68eb      	ldr	r3, [r5, #12]
 800756e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007570:	7c2b      	ldrb	r3, [r5, #16]
 8007572:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8007574:	4a7d      	ldr	r2, [pc, #500]	@ (800776c <loadMenuTexts+0x3d8>)
 8007576:	4b7e      	ldr	r3, [pc, #504]	@ (8007770 <loadMenuTexts+0x3dc>)
 8007578:	4614      	mov	r4, r2
 800757a:	461d      	mov	r5, r3
 800757c:	6828      	ldr	r0, [r5, #0]
 800757e:	6869      	ldr	r1, [r5, #4]
 8007580:	68aa      	ldr	r2, [r5, #8]
 8007582:	68eb      	ldr	r3, [r5, #12]
 8007584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007586:	7c2b      	ldrb	r3, [r5, #16]
 8007588:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800758a:	4a7a      	ldr	r2, [pc, #488]	@ (8007774 <loadMenuTexts+0x3e0>)
 800758c:	4b7a      	ldr	r3, [pc, #488]	@ (8007778 <loadMenuTexts+0x3e4>)
 800758e:	4614      	mov	r4, r2
 8007590:	461d      	mov	r5, r3
 8007592:	6828      	ldr	r0, [r5, #0]
 8007594:	6869      	ldr	r1, [r5, #4]
 8007596:	68aa      	ldr	r2, [r5, #8]
 8007598:	68eb      	ldr	r3, [r5, #12]
 800759a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800759c:	7c2b      	ldrb	r3, [r5, #16]
 800759e:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80075a0:	4a76      	ldr	r2, [pc, #472]	@ (800777c <loadMenuTexts+0x3e8>)
 80075a2:	4b77      	ldr	r3, [pc, #476]	@ (8007780 <loadMenuTexts+0x3ec>)
 80075a4:	4614      	mov	r4, r2
 80075a6:	461d      	mov	r5, r3
 80075a8:	6828      	ldr	r0, [r5, #0]
 80075aa:	6869      	ldr	r1, [r5, #4]
 80075ac:	68aa      	ldr	r2, [r5, #8]
 80075ae:	68eb      	ldr	r3, [r5, #12]
 80075b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b2:	7c2b      	ldrb	r3, [r5, #16]
 80075b4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80075b6:	4a73      	ldr	r2, [pc, #460]	@ (8007784 <loadMenuTexts+0x3f0>)
 80075b8:	4b73      	ldr	r3, [pc, #460]	@ (8007788 <loadMenuTexts+0x3f4>)
 80075ba:	4614      	mov	r4, r2
 80075bc:	461d      	mov	r5, r3
 80075be:	6828      	ldr	r0, [r5, #0]
 80075c0:	6869      	ldr	r1, [r5, #4]
 80075c2:	68aa      	ldr	r2, [r5, #8]
 80075c4:	68eb      	ldr	r3, [r5, #12]
 80075c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075c8:	7c2b      	ldrb	r3, [r5, #16]
 80075ca:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80075cc:	4a6f      	ldr	r2, [pc, #444]	@ (800778c <loadMenuTexts+0x3f8>)
 80075ce:	4b70      	ldr	r3, [pc, #448]	@ (8007790 <loadMenuTexts+0x3fc>)
 80075d0:	4614      	mov	r4, r2
 80075d2:	461d      	mov	r5, r3
 80075d4:	6828      	ldr	r0, [r5, #0]
 80075d6:	6869      	ldr	r1, [r5, #4]
 80075d8:	68aa      	ldr	r2, [r5, #8]
 80075da:	68eb      	ldr	r3, [r5, #12]
 80075dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075de:	7c2b      	ldrb	r3, [r5, #16]
 80075e0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80075e2:	4a6c      	ldr	r2, [pc, #432]	@ (8007794 <loadMenuTexts+0x400>)
 80075e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007798 <loadMenuTexts+0x404>)
 80075e6:	4614      	mov	r4, r2
 80075e8:	461d      	mov	r5, r3
 80075ea:	6828      	ldr	r0, [r5, #0]
 80075ec:	6869      	ldr	r1, [r5, #4]
 80075ee:	68aa      	ldr	r2, [r5, #8]
 80075f0:	68eb      	ldr	r3, [r5, #12]
 80075f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f4:	7c2b      	ldrb	r3, [r5, #16]
 80075f6:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80075f8:	4a68      	ldr	r2, [pc, #416]	@ (800779c <loadMenuTexts+0x408>)
 80075fa:	4b69      	ldr	r3, [pc, #420]	@ (80077a0 <loadMenuTexts+0x40c>)
 80075fc:	4614      	mov	r4, r2
 80075fe:	461d      	mov	r5, r3
 8007600:	6828      	ldr	r0, [r5, #0]
 8007602:	6869      	ldr	r1, [r5, #4]
 8007604:	68aa      	ldr	r2, [r5, #8]
 8007606:	68eb      	ldr	r3, [r5, #12]
 8007608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760a:	7c2b      	ldrb	r3, [r5, #16]
 800760c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800760e:	4a65      	ldr	r2, [pc, #404]	@ (80077a4 <loadMenuTexts+0x410>)
 8007610:	4b65      	ldr	r3, [pc, #404]	@ (80077a8 <loadMenuTexts+0x414>)
 8007612:	4614      	mov	r4, r2
 8007614:	461d      	mov	r5, r3
 8007616:	6828      	ldr	r0, [r5, #0]
 8007618:	6869      	ldr	r1, [r5, #4]
 800761a:	68aa      	ldr	r2, [r5, #8]
 800761c:	68eb      	ldr	r3, [r5, #12]
 800761e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007620:	7c2b      	ldrb	r3, [r5, #16]
 8007622:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8007624:	4a61      	ldr	r2, [pc, #388]	@ (80077ac <loadMenuTexts+0x418>)
 8007626:	4b62      	ldr	r3, [pc, #392]	@ (80077b0 <loadMenuTexts+0x41c>)
 8007628:	4614      	mov	r4, r2
 800762a:	461d      	mov	r5, r3
 800762c:	6828      	ldr	r0, [r5, #0]
 800762e:	6869      	ldr	r1, [r5, #4]
 8007630:	68aa      	ldr	r2, [r5, #8]
 8007632:	68eb      	ldr	r3, [r5, #12]
 8007634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007636:	7c2b      	ldrb	r3, [r5, #16]
 8007638:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800763a:	4a5e      	ldr	r2, [pc, #376]	@ (80077b4 <loadMenuTexts+0x420>)
 800763c:	4b5e      	ldr	r3, [pc, #376]	@ (80077b8 <loadMenuTexts+0x424>)
 800763e:	4614      	mov	r4, r2
 8007640:	461d      	mov	r5, r3
 8007642:	6828      	ldr	r0, [r5, #0]
 8007644:	6869      	ldr	r1, [r5, #4]
 8007646:	68aa      	ldr	r2, [r5, #8]
 8007648:	68eb      	ldr	r3, [r5, #12]
 800764a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800764c:	7c2b      	ldrb	r3, [r5, #16]
 800764e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8007650:	4a5a      	ldr	r2, [pc, #360]	@ (80077bc <loadMenuTexts+0x428>)
 8007652:	4b5b      	ldr	r3, [pc, #364]	@ (80077c0 <loadMenuTexts+0x42c>)
 8007654:	4614      	mov	r4, r2
 8007656:	461d      	mov	r5, r3
 8007658:	6828      	ldr	r0, [r5, #0]
 800765a:	6869      	ldr	r1, [r5, #4]
 800765c:	68aa      	ldr	r2, [r5, #8]
 800765e:	68eb      	ldr	r3, [r5, #12]
 8007660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007662:	7c2b      	ldrb	r3, [r5, #16]
 8007664:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8007666:	4a57      	ldr	r2, [pc, #348]	@ (80077c4 <loadMenuTexts+0x430>)
 8007668:	4b57      	ldr	r3, [pc, #348]	@ (80077c8 <loadMenuTexts+0x434>)
 800766a:	4614      	mov	r4, r2
 800766c:	461d      	mov	r5, r3
 800766e:	6828      	ldr	r0, [r5, #0]
 8007670:	6869      	ldr	r1, [r5, #4]
 8007672:	68aa      	ldr	r2, [r5, #8]
 8007674:	68eb      	ldr	r3, [r5, #12]
 8007676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007678:	7c2b      	ldrb	r3, [r5, #16]
 800767a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 800767c:	4a53      	ldr	r2, [pc, #332]	@ (80077cc <loadMenuTexts+0x438>)
 800767e:	4b54      	ldr	r3, [pc, #336]	@ (80077d0 <loadMenuTexts+0x43c>)
 8007680:	4614      	mov	r4, r2
 8007682:	461d      	mov	r5, r3
 8007684:	6828      	ldr	r0, [r5, #0]
 8007686:	6869      	ldr	r1, [r5, #4]
 8007688:	68aa      	ldr	r2, [r5, #8]
 800768a:	68eb      	ldr	r3, [r5, #12]
 800768c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768e:	7c2b      	ldrb	r3, [r5, #16]
 8007690:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8007692:	4a50      	ldr	r2, [pc, #320]	@ (80077d4 <loadMenuTexts+0x440>)
 8007694:	4b50      	ldr	r3, [pc, #320]	@ (80077d8 <loadMenuTexts+0x444>)
 8007696:	4614      	mov	r4, r2
 8007698:	461d      	mov	r5, r3
 800769a:	6828      	ldr	r0, [r5, #0]
 800769c:	6869      	ldr	r1, [r5, #4]
 800769e:	68aa      	ldr	r2, [r5, #8]
 80076a0:	68eb      	ldr	r3, [r5, #12]
 80076a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a4:	7c2b      	ldrb	r3, [r5, #16]
 80076a6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80076a8:	4a4c      	ldr	r2, [pc, #304]	@ (80077dc <loadMenuTexts+0x448>)
 80076aa:	4b4d      	ldr	r3, [pc, #308]	@ (80077e0 <loadMenuTexts+0x44c>)
 80076ac:	4614      	mov	r4, r2
 80076ae:	461d      	mov	r5, r3
 80076b0:	6828      	ldr	r0, [r5, #0]
 80076b2:	6869      	ldr	r1, [r5, #4]
 80076b4:	68aa      	ldr	r2, [r5, #8]
 80076b6:	68eb      	ldr	r3, [r5, #12]
 80076b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ba:	7c2b      	ldrb	r3, [r5, #16]
 80076bc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80076be:	4a49      	ldr	r2, [pc, #292]	@ (80077e4 <loadMenuTexts+0x450>)
 80076c0:	e092      	b.n	80077e8 <loadMenuTexts+0x454>
 80076c2:	bf00      	nop
 80076c4:	200010d4 	.word	0x200010d4
 80076c8:	2000018c 	.word	0x2000018c
 80076cc:	200010e8 	.word	0x200010e8
 80076d0:	200001a0 	.word	0x200001a0
 80076d4:	200010fc 	.word	0x200010fc
 80076d8:	200001b4 	.word	0x200001b4
 80076dc:	20001110 	.word	0x20001110
 80076e0:	200001c8 	.word	0x200001c8
 80076e4:	20001124 	.word	0x20001124
 80076e8:	200001dc 	.word	0x200001dc
 80076ec:	20001138 	.word	0x20001138
 80076f0:	200001f0 	.word	0x200001f0
 80076f4:	2000114c 	.word	0x2000114c
 80076f8:	20000204 	.word	0x20000204
 80076fc:	20001160 	.word	0x20001160
 8007700:	20000218 	.word	0x20000218
 8007704:	20001174 	.word	0x20001174
 8007708:	2000022c 	.word	0x2000022c
 800770c:	20001188 	.word	0x20001188
 8007710:	20000240 	.word	0x20000240
 8007714:	2000119c 	.word	0x2000119c
 8007718:	20000254 	.word	0x20000254
 800771c:	200011b0 	.word	0x200011b0
 8007720:	20000268 	.word	0x20000268
 8007724:	200011c4 	.word	0x200011c4
 8007728:	2000027c 	.word	0x2000027c
 800772c:	200011d8 	.word	0x200011d8
 8007730:	20000290 	.word	0x20000290
 8007734:	200011ec 	.word	0x200011ec
 8007738:	200002a4 	.word	0x200002a4
 800773c:	20001200 	.word	0x20001200
 8007740:	200002b8 	.word	0x200002b8
 8007744:	20001214 	.word	0x20001214
 8007748:	200002cc 	.word	0x200002cc
 800774c:	20001228 	.word	0x20001228
 8007750:	200002e0 	.word	0x200002e0
 8007754:	2000123c 	.word	0x2000123c
 8007758:	200002f4 	.word	0x200002f4
 800775c:	20001250 	.word	0x20001250
 8007760:	20000308 	.word	0x20000308
 8007764:	20001264 	.word	0x20001264
 8007768:	2000031c 	.word	0x2000031c
 800776c:	20001278 	.word	0x20001278
 8007770:	20000330 	.word	0x20000330
 8007774:	2000128c 	.word	0x2000128c
 8007778:	20000344 	.word	0x20000344
 800777c:	200012a0 	.word	0x200012a0
 8007780:	20000358 	.word	0x20000358
 8007784:	200012b4 	.word	0x200012b4
 8007788:	2000036c 	.word	0x2000036c
 800778c:	200012c8 	.word	0x200012c8
 8007790:	20000380 	.word	0x20000380
 8007794:	200012dc 	.word	0x200012dc
 8007798:	20000394 	.word	0x20000394
 800779c:	200012f0 	.word	0x200012f0
 80077a0:	200003a8 	.word	0x200003a8
 80077a4:	20001304 	.word	0x20001304
 80077a8:	200003bc 	.word	0x200003bc
 80077ac:	20001318 	.word	0x20001318
 80077b0:	200003d0 	.word	0x200003d0
 80077b4:	2000132c 	.word	0x2000132c
 80077b8:	200003e4 	.word	0x200003e4
 80077bc:	20001340 	.word	0x20001340
 80077c0:	200003f8 	.word	0x200003f8
 80077c4:	20001354 	.word	0x20001354
 80077c8:	2000040c 	.word	0x2000040c
 80077cc:	20001368 	.word	0x20001368
 80077d0:	20000420 	.word	0x20000420
 80077d4:	2000137c 	.word	0x2000137c
 80077d8:	20000434 	.word	0x20000434
 80077dc:	20001390 	.word	0x20001390
 80077e0:	20000448 	.word	0x20000448
 80077e4:	200013a4 	.word	0x200013a4
 80077e8:	4bc7      	ldr	r3, [pc, #796]	@ (8007b08 <loadMenuTexts+0x774>)
 80077ea:	4614      	mov	r4, r2
 80077ec:	461d      	mov	r5, r3
 80077ee:	6828      	ldr	r0, [r5, #0]
 80077f0:	6869      	ldr	r1, [r5, #4]
 80077f2:	68aa      	ldr	r2, [r5, #8]
 80077f4:	68eb      	ldr	r3, [r5, #12]
 80077f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077f8:	7c2b      	ldrb	r3, [r5, #16]
 80077fa:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80077fc:	4ac3      	ldr	r2, [pc, #780]	@ (8007b0c <loadMenuTexts+0x778>)
 80077fe:	4bc4      	ldr	r3, [pc, #784]	@ (8007b10 <loadMenuTexts+0x77c>)
 8007800:	4614      	mov	r4, r2
 8007802:	461d      	mov	r5, r3
 8007804:	6828      	ldr	r0, [r5, #0]
 8007806:	6869      	ldr	r1, [r5, #4]
 8007808:	68aa      	ldr	r2, [r5, #8]
 800780a:	68eb      	ldr	r3, [r5, #12]
 800780c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800780e:	7c2b      	ldrb	r3, [r5, #16]
 8007810:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8007812:	4ac0      	ldr	r2, [pc, #768]	@ (8007b14 <loadMenuTexts+0x780>)
 8007814:	4bc0      	ldr	r3, [pc, #768]	@ (8007b18 <loadMenuTexts+0x784>)
 8007816:	4614      	mov	r4, r2
 8007818:	461d      	mov	r5, r3
 800781a:	6828      	ldr	r0, [r5, #0]
 800781c:	6869      	ldr	r1, [r5, #4]
 800781e:	68aa      	ldr	r2, [r5, #8]
 8007820:	68eb      	ldr	r3, [r5, #12]
 8007822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007824:	7c2b      	ldrb	r3, [r5, #16]
 8007826:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8007828:	4abc      	ldr	r2, [pc, #752]	@ (8007b1c <loadMenuTexts+0x788>)
 800782a:	4bbd      	ldr	r3, [pc, #756]	@ (8007b20 <loadMenuTexts+0x78c>)
 800782c:	4614      	mov	r4, r2
 800782e:	461d      	mov	r5, r3
 8007830:	6828      	ldr	r0, [r5, #0]
 8007832:	6869      	ldr	r1, [r5, #4]
 8007834:	68aa      	ldr	r2, [r5, #8]
 8007836:	68eb      	ldr	r3, [r5, #12]
 8007838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783a:	7c2b      	ldrb	r3, [r5, #16]
 800783c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800783e:	4ab9      	ldr	r2, [pc, #740]	@ (8007b24 <loadMenuTexts+0x790>)
 8007840:	4bb9      	ldr	r3, [pc, #740]	@ (8007b28 <loadMenuTexts+0x794>)
 8007842:	4614      	mov	r4, r2
 8007844:	461d      	mov	r5, r3
 8007846:	6828      	ldr	r0, [r5, #0]
 8007848:	6869      	ldr	r1, [r5, #4]
 800784a:	68aa      	ldr	r2, [r5, #8]
 800784c:	68eb      	ldr	r3, [r5, #12]
 800784e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007850:	7c2b      	ldrb	r3, [r5, #16]
 8007852:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007854:	4ab5      	ldr	r2, [pc, #724]	@ (8007b2c <loadMenuTexts+0x798>)
 8007856:	4bb6      	ldr	r3, [pc, #728]	@ (8007b30 <loadMenuTexts+0x79c>)
 8007858:	4614      	mov	r4, r2
 800785a:	461d      	mov	r5, r3
 800785c:	6828      	ldr	r0, [r5, #0]
 800785e:	6869      	ldr	r1, [r5, #4]
 8007860:	68aa      	ldr	r2, [r5, #8]
 8007862:	68eb      	ldr	r3, [r5, #12]
 8007864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007866:	7c2b      	ldrb	r3, [r5, #16]
 8007868:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800786a:	4ab2      	ldr	r2, [pc, #712]	@ (8007b34 <loadMenuTexts+0x7a0>)
 800786c:	4bb2      	ldr	r3, [pc, #712]	@ (8007b38 <loadMenuTexts+0x7a4>)
 800786e:	4614      	mov	r4, r2
 8007870:	461d      	mov	r5, r3
 8007872:	6828      	ldr	r0, [r5, #0]
 8007874:	6869      	ldr	r1, [r5, #4]
 8007876:	68aa      	ldr	r2, [r5, #8]
 8007878:	68eb      	ldr	r3, [r5, #12]
 800787a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800787c:	7c2b      	ldrb	r3, [r5, #16]
 800787e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007880:	4aae      	ldr	r2, [pc, #696]	@ (8007b3c <loadMenuTexts+0x7a8>)
 8007882:	4baf      	ldr	r3, [pc, #700]	@ (8007b40 <loadMenuTexts+0x7ac>)
 8007884:	4614      	mov	r4, r2
 8007886:	461d      	mov	r5, r3
 8007888:	6828      	ldr	r0, [r5, #0]
 800788a:	6869      	ldr	r1, [r5, #4]
 800788c:	68aa      	ldr	r2, [r5, #8]
 800788e:	68eb      	ldr	r3, [r5, #12]
 8007890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007892:	7c2b      	ldrb	r3, [r5, #16]
 8007894:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8007896:	4aab      	ldr	r2, [pc, #684]	@ (8007b44 <loadMenuTexts+0x7b0>)
 8007898:	4bab      	ldr	r3, [pc, #684]	@ (8007b48 <loadMenuTexts+0x7b4>)
 800789a:	4614      	mov	r4, r2
 800789c:	461d      	mov	r5, r3
 800789e:	6828      	ldr	r0, [r5, #0]
 80078a0:	6869      	ldr	r1, [r5, #4]
 80078a2:	68aa      	ldr	r2, [r5, #8]
 80078a4:	68eb      	ldr	r3, [r5, #12]
 80078a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078a8:	7c2b      	ldrb	r3, [r5, #16]
 80078aa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80078ac:	4aa7      	ldr	r2, [pc, #668]	@ (8007b4c <loadMenuTexts+0x7b8>)
 80078ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007b50 <loadMenuTexts+0x7bc>)
 80078b0:	4614      	mov	r4, r2
 80078b2:	461d      	mov	r5, r3
 80078b4:	6828      	ldr	r0, [r5, #0]
 80078b6:	6869      	ldr	r1, [r5, #4]
 80078b8:	68aa      	ldr	r2, [r5, #8]
 80078ba:	68eb      	ldr	r3, [r5, #12]
 80078bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078be:	7c2b      	ldrb	r3, [r5, #16]
 80078c0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80078c2:	4aa4      	ldr	r2, [pc, #656]	@ (8007b54 <loadMenuTexts+0x7c0>)
 80078c4:	4ba4      	ldr	r3, [pc, #656]	@ (8007b58 <loadMenuTexts+0x7c4>)
 80078c6:	4614      	mov	r4, r2
 80078c8:	461d      	mov	r5, r3
 80078ca:	6828      	ldr	r0, [r5, #0]
 80078cc:	6869      	ldr	r1, [r5, #4]
 80078ce:	68aa      	ldr	r2, [r5, #8]
 80078d0:	68eb      	ldr	r3, [r5, #12]
 80078d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078d4:	7c2b      	ldrb	r3, [r5, #16]
 80078d6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80078d8:	4aa0      	ldr	r2, [pc, #640]	@ (8007b5c <loadMenuTexts+0x7c8>)
 80078da:	4ba1      	ldr	r3, [pc, #644]	@ (8007b60 <loadMenuTexts+0x7cc>)
 80078dc:	4614      	mov	r4, r2
 80078de:	461d      	mov	r5, r3
 80078e0:	6828      	ldr	r0, [r5, #0]
 80078e2:	6869      	ldr	r1, [r5, #4]
 80078e4:	68aa      	ldr	r2, [r5, #8]
 80078e6:	68eb      	ldr	r3, [r5, #12]
 80078e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ea:	7c2b      	ldrb	r3, [r5, #16]
 80078ec:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80078ee:	4a9d      	ldr	r2, [pc, #628]	@ (8007b64 <loadMenuTexts+0x7d0>)
 80078f0:	4b9d      	ldr	r3, [pc, #628]	@ (8007b68 <loadMenuTexts+0x7d4>)
 80078f2:	4614      	mov	r4, r2
 80078f4:	461d      	mov	r5, r3
 80078f6:	6828      	ldr	r0, [r5, #0]
 80078f8:	6869      	ldr	r1, [r5, #4]
 80078fa:	68aa      	ldr	r2, [r5, #8]
 80078fc:	68eb      	ldr	r3, [r5, #12]
 80078fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007900:	7c2b      	ldrb	r3, [r5, #16]
 8007902:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8007904:	4a99      	ldr	r2, [pc, #612]	@ (8007b6c <loadMenuTexts+0x7d8>)
 8007906:	4b9a      	ldr	r3, [pc, #616]	@ (8007b70 <loadMenuTexts+0x7dc>)
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	6828      	ldr	r0, [r5, #0]
 800790e:	6869      	ldr	r1, [r5, #4]
 8007910:	68aa      	ldr	r2, [r5, #8]
 8007912:	68eb      	ldr	r3, [r5, #12]
 8007914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007916:	7c2b      	ldrb	r3, [r5, #16]
 8007918:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800791a:	4a96      	ldr	r2, [pc, #600]	@ (8007b74 <loadMenuTexts+0x7e0>)
 800791c:	4b96      	ldr	r3, [pc, #600]	@ (8007b78 <loadMenuTexts+0x7e4>)
 800791e:	4614      	mov	r4, r2
 8007920:	461d      	mov	r5, r3
 8007922:	6828      	ldr	r0, [r5, #0]
 8007924:	6869      	ldr	r1, [r5, #4]
 8007926:	68aa      	ldr	r2, [r5, #8]
 8007928:	68eb      	ldr	r3, [r5, #12]
 800792a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800792c:	7c2b      	ldrb	r3, [r5, #16]
 800792e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007930:	4a92      	ldr	r2, [pc, #584]	@ (8007b7c <loadMenuTexts+0x7e8>)
 8007932:	4b93      	ldr	r3, [pc, #588]	@ (8007b80 <loadMenuTexts+0x7ec>)
 8007934:	4614      	mov	r4, r2
 8007936:	461d      	mov	r5, r3
 8007938:	6828      	ldr	r0, [r5, #0]
 800793a:	6869      	ldr	r1, [r5, #4]
 800793c:	68aa      	ldr	r2, [r5, #8]
 800793e:	68eb      	ldr	r3, [r5, #12]
 8007940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007942:	7c2b      	ldrb	r3, [r5, #16]
 8007944:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007946:	4a8f      	ldr	r2, [pc, #572]	@ (8007b84 <loadMenuTexts+0x7f0>)
 8007948:	4b8f      	ldr	r3, [pc, #572]	@ (8007b88 <loadMenuTexts+0x7f4>)
 800794a:	4614      	mov	r4, r2
 800794c:	461d      	mov	r5, r3
 800794e:	6828      	ldr	r0, [r5, #0]
 8007950:	6869      	ldr	r1, [r5, #4]
 8007952:	68aa      	ldr	r2, [r5, #8]
 8007954:	68eb      	ldr	r3, [r5, #12]
 8007956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007958:	7c2b      	ldrb	r3, [r5, #16]
 800795a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800795c:	4a8b      	ldr	r2, [pc, #556]	@ (8007b8c <loadMenuTexts+0x7f8>)
 800795e:	4b8c      	ldr	r3, [pc, #560]	@ (8007b90 <loadMenuTexts+0x7fc>)
 8007960:	4614      	mov	r4, r2
 8007962:	461d      	mov	r5, r3
 8007964:	6828      	ldr	r0, [r5, #0]
 8007966:	6869      	ldr	r1, [r5, #4]
 8007968:	68aa      	ldr	r2, [r5, #8]
 800796a:	68eb      	ldr	r3, [r5, #12]
 800796c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800796e:	7c2b      	ldrb	r3, [r5, #16]
 8007970:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007972:	4a88      	ldr	r2, [pc, #544]	@ (8007b94 <loadMenuTexts+0x800>)
 8007974:	4b88      	ldr	r3, [pc, #544]	@ (8007b98 <loadMenuTexts+0x804>)
 8007976:	4614      	mov	r4, r2
 8007978:	461d      	mov	r5, r3
 800797a:	6828      	ldr	r0, [r5, #0]
 800797c:	6869      	ldr	r1, [r5, #4]
 800797e:	68aa      	ldr	r2, [r5, #8]
 8007980:	68eb      	ldr	r3, [r5, #12]
 8007982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007984:	7c2b      	ldrb	r3, [r5, #16]
 8007986:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007988:	4a84      	ldr	r2, [pc, #528]	@ (8007b9c <loadMenuTexts+0x808>)
 800798a:	4b85      	ldr	r3, [pc, #532]	@ (8007ba0 <loadMenuTexts+0x80c>)
 800798c:	4614      	mov	r4, r2
 800798e:	461d      	mov	r5, r3
 8007990:	6828      	ldr	r0, [r5, #0]
 8007992:	6869      	ldr	r1, [r5, #4]
 8007994:	68aa      	ldr	r2, [r5, #8]
 8007996:	68eb      	ldr	r3, [r5, #12]
 8007998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800799a:	7c2b      	ldrb	r3, [r5, #16]
 800799c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800799e:	4a81      	ldr	r2, [pc, #516]	@ (8007ba4 <loadMenuTexts+0x810>)
 80079a0:	4b81      	ldr	r3, [pc, #516]	@ (8007ba8 <loadMenuTexts+0x814>)
 80079a2:	4614      	mov	r4, r2
 80079a4:	461d      	mov	r5, r3
 80079a6:	6828      	ldr	r0, [r5, #0]
 80079a8:	6869      	ldr	r1, [r5, #4]
 80079aa:	68aa      	ldr	r2, [r5, #8]
 80079ac:	68eb      	ldr	r3, [r5, #12]
 80079ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079b0:	7c2b      	ldrb	r3, [r5, #16]
 80079b2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80079b4:	4a7d      	ldr	r2, [pc, #500]	@ (8007bac <loadMenuTexts+0x818>)
 80079b6:	4b7e      	ldr	r3, [pc, #504]	@ (8007bb0 <loadMenuTexts+0x81c>)
 80079b8:	4614      	mov	r4, r2
 80079ba:	461d      	mov	r5, r3
 80079bc:	6828      	ldr	r0, [r5, #0]
 80079be:	6869      	ldr	r1, [r5, #4]
 80079c0:	68aa      	ldr	r2, [r5, #8]
 80079c2:	68eb      	ldr	r3, [r5, #12]
 80079c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c6:	7c2b      	ldrb	r3, [r5, #16]
 80079c8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80079ca:	4a7a      	ldr	r2, [pc, #488]	@ (8007bb4 <loadMenuTexts+0x820>)
 80079cc:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb8 <loadMenuTexts+0x824>)
 80079ce:	4614      	mov	r4, r2
 80079d0:	461d      	mov	r5, r3
 80079d2:	6828      	ldr	r0, [r5, #0]
 80079d4:	6869      	ldr	r1, [r5, #4]
 80079d6:	68aa      	ldr	r2, [r5, #8]
 80079d8:	68eb      	ldr	r3, [r5, #12]
 80079da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079dc:	7c2b      	ldrb	r3, [r5, #16]
 80079de:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80079e0:	4a76      	ldr	r2, [pc, #472]	@ (8007bbc <loadMenuTexts+0x828>)
 80079e2:	4b77      	ldr	r3, [pc, #476]	@ (8007bc0 <loadMenuTexts+0x82c>)
 80079e4:	4614      	mov	r4, r2
 80079e6:	461d      	mov	r5, r3
 80079e8:	6828      	ldr	r0, [r5, #0]
 80079ea:	6869      	ldr	r1, [r5, #4]
 80079ec:	68aa      	ldr	r2, [r5, #8]
 80079ee:	68eb      	ldr	r3, [r5, #12]
 80079f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079f2:	7c2b      	ldrb	r3, [r5, #16]
 80079f4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80079f6:	4a73      	ldr	r2, [pc, #460]	@ (8007bc4 <loadMenuTexts+0x830>)
 80079f8:	4b73      	ldr	r3, [pc, #460]	@ (8007bc8 <loadMenuTexts+0x834>)
 80079fa:	4614      	mov	r4, r2
 80079fc:	461d      	mov	r5, r3
 80079fe:	6828      	ldr	r0, [r5, #0]
 8007a00:	6869      	ldr	r1, [r5, #4]
 8007a02:	68aa      	ldr	r2, [r5, #8]
 8007a04:	68eb      	ldr	r3, [r5, #12]
 8007a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a08:	7c2b      	ldrb	r3, [r5, #16]
 8007a0a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8007a0c:	4a6f      	ldr	r2, [pc, #444]	@ (8007bcc <loadMenuTexts+0x838>)
 8007a0e:	4b70      	ldr	r3, [pc, #448]	@ (8007bd0 <loadMenuTexts+0x83c>)
 8007a10:	4614      	mov	r4, r2
 8007a12:	461d      	mov	r5, r3
 8007a14:	6828      	ldr	r0, [r5, #0]
 8007a16:	6869      	ldr	r1, [r5, #4]
 8007a18:	68aa      	ldr	r2, [r5, #8]
 8007a1a:	68eb      	ldr	r3, [r5, #12]
 8007a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a1e:	7c2b      	ldrb	r3, [r5, #16]
 8007a20:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8007a22:	4a6c      	ldr	r2, [pc, #432]	@ (8007bd4 <loadMenuTexts+0x840>)
 8007a24:	4b6c      	ldr	r3, [pc, #432]	@ (8007bd8 <loadMenuTexts+0x844>)
 8007a26:	4614      	mov	r4, r2
 8007a28:	461d      	mov	r5, r3
 8007a2a:	6828      	ldr	r0, [r5, #0]
 8007a2c:	6869      	ldr	r1, [r5, #4]
 8007a2e:	68aa      	ldr	r2, [r5, #8]
 8007a30:	68eb      	ldr	r3, [r5, #12]
 8007a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a34:	7c2b      	ldrb	r3, [r5, #16]
 8007a36:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007a38:	4a68      	ldr	r2, [pc, #416]	@ (8007bdc <loadMenuTexts+0x848>)
 8007a3a:	4b69      	ldr	r3, [pc, #420]	@ (8007be0 <loadMenuTexts+0x84c>)
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	461d      	mov	r5, r3
 8007a40:	6828      	ldr	r0, [r5, #0]
 8007a42:	6869      	ldr	r1, [r5, #4]
 8007a44:	68aa      	ldr	r2, [r5, #8]
 8007a46:	68eb      	ldr	r3, [r5, #12]
 8007a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a4a:	7c2b      	ldrb	r3, [r5, #16]
 8007a4c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8007a4e:	4a65      	ldr	r2, [pc, #404]	@ (8007be4 <loadMenuTexts+0x850>)
 8007a50:	4b65      	ldr	r3, [pc, #404]	@ (8007be8 <loadMenuTexts+0x854>)
 8007a52:	4614      	mov	r4, r2
 8007a54:	461d      	mov	r5, r3
 8007a56:	6828      	ldr	r0, [r5, #0]
 8007a58:	6869      	ldr	r1, [r5, #4]
 8007a5a:	68aa      	ldr	r2, [r5, #8]
 8007a5c:	68eb      	ldr	r3, [r5, #12]
 8007a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a60:	7c2b      	ldrb	r3, [r5, #16]
 8007a62:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007a64:	4a61      	ldr	r2, [pc, #388]	@ (8007bec <loadMenuTexts+0x858>)
 8007a66:	4b62      	ldr	r3, [pc, #392]	@ (8007bf0 <loadMenuTexts+0x85c>)
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	6828      	ldr	r0, [r5, #0]
 8007a6e:	6869      	ldr	r1, [r5, #4]
 8007a70:	68aa      	ldr	r2, [r5, #8]
 8007a72:	68eb      	ldr	r3, [r5, #12]
 8007a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a76:	7c2b      	ldrb	r3, [r5, #16]
 8007a78:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8007a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8007bf4 <loadMenuTexts+0x860>)
 8007a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8007bf8 <loadMenuTexts+0x864>)
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461d      	mov	r5, r3
 8007a82:	6828      	ldr	r0, [r5, #0]
 8007a84:	6869      	ldr	r1, [r5, #4]
 8007a86:	68aa      	ldr	r2, [r5, #8]
 8007a88:	68eb      	ldr	r3, [r5, #12]
 8007a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a8c:	7c2b      	ldrb	r3, [r5, #16]
 8007a8e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8007a90:	4a5a      	ldr	r2, [pc, #360]	@ (8007bfc <loadMenuTexts+0x868>)
 8007a92:	4b5b      	ldr	r3, [pc, #364]	@ (8007c00 <loadMenuTexts+0x86c>)
 8007a94:	4614      	mov	r4, r2
 8007a96:	461d      	mov	r5, r3
 8007a98:	6828      	ldr	r0, [r5, #0]
 8007a9a:	6869      	ldr	r1, [r5, #4]
 8007a9c:	68aa      	ldr	r2, [r5, #8]
 8007a9e:	68eb      	ldr	r3, [r5, #12]
 8007aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aa2:	7c2b      	ldrb	r3, [r5, #16]
 8007aa4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007aa6:	4a57      	ldr	r2, [pc, #348]	@ (8007c04 <loadMenuTexts+0x870>)
 8007aa8:	4b57      	ldr	r3, [pc, #348]	@ (8007c08 <loadMenuTexts+0x874>)
 8007aaa:	4614      	mov	r4, r2
 8007aac:	461d      	mov	r5, r3
 8007aae:	6828      	ldr	r0, [r5, #0]
 8007ab0:	6869      	ldr	r1, [r5, #4]
 8007ab2:	68aa      	ldr	r2, [r5, #8]
 8007ab4:	68eb      	ldr	r3, [r5, #12]
 8007ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ab8:	7c2b      	ldrb	r3, [r5, #16]
 8007aba:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8007abc:	4a53      	ldr	r2, [pc, #332]	@ (8007c0c <loadMenuTexts+0x878>)
 8007abe:	4b54      	ldr	r3, [pc, #336]	@ (8007c10 <loadMenuTexts+0x87c>)
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	6828      	ldr	r0, [r5, #0]
 8007ac6:	6869      	ldr	r1, [r5, #4]
 8007ac8:	68aa      	ldr	r2, [r5, #8]
 8007aca:	68eb      	ldr	r3, [r5, #12]
 8007acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ace:	7c2b      	ldrb	r3, [r5, #16]
 8007ad0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8007ad2:	4a50      	ldr	r2, [pc, #320]	@ (8007c14 <loadMenuTexts+0x880>)
 8007ad4:	4b50      	ldr	r3, [pc, #320]	@ (8007c18 <loadMenuTexts+0x884>)
 8007ad6:	4614      	mov	r4, r2
 8007ad8:	461d      	mov	r5, r3
 8007ada:	6828      	ldr	r0, [r5, #0]
 8007adc:	6869      	ldr	r1, [r5, #4]
 8007ade:	68aa      	ldr	r2, [r5, #8]
 8007ae0:	68eb      	ldr	r3, [r5, #12]
 8007ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ae4:	7c2b      	ldrb	r3, [r5, #16]
 8007ae6:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8007ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8007c1c <loadMenuTexts+0x888>)
 8007aea:	4b4d      	ldr	r3, [pc, #308]	@ (8007c20 <loadMenuTexts+0x88c>)
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	6828      	ldr	r0, [r5, #0]
 8007af2:	6869      	ldr	r1, [r5, #4]
 8007af4:	68aa      	ldr	r2, [r5, #8]
 8007af6:	68eb      	ldr	r3, [r5, #12]
 8007af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007afa:	7c2b      	ldrb	r3, [r5, #16]
 8007afc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8007afe:	4a49      	ldr	r2, [pc, #292]	@ (8007c24 <loadMenuTexts+0x890>)
 8007b00:	4b49      	ldr	r3, [pc, #292]	@ (8007c28 <loadMenuTexts+0x894>)
 8007b02:	4614      	mov	r4, r2
 8007b04:	461d      	mov	r5, r3
 8007b06:	e091      	b.n	8007c2c <loadMenuTexts+0x898>
 8007b08:	2000045c 	.word	0x2000045c
 8007b0c:	200013b8 	.word	0x200013b8
 8007b10:	20000470 	.word	0x20000470
 8007b14:	200013cc 	.word	0x200013cc
 8007b18:	20000484 	.word	0x20000484
 8007b1c:	200013e0 	.word	0x200013e0
 8007b20:	20000498 	.word	0x20000498
 8007b24:	200013f4 	.word	0x200013f4
 8007b28:	200004ac 	.word	0x200004ac
 8007b2c:	20001408 	.word	0x20001408
 8007b30:	200004c0 	.word	0x200004c0
 8007b34:	2000141c 	.word	0x2000141c
 8007b38:	200004d4 	.word	0x200004d4
 8007b3c:	20001430 	.word	0x20001430
 8007b40:	200004e8 	.word	0x200004e8
 8007b44:	20001444 	.word	0x20001444
 8007b48:	200004fc 	.word	0x200004fc
 8007b4c:	20001458 	.word	0x20001458
 8007b50:	20000510 	.word	0x20000510
 8007b54:	2000146c 	.word	0x2000146c
 8007b58:	20000524 	.word	0x20000524
 8007b5c:	20001480 	.word	0x20001480
 8007b60:	20000538 	.word	0x20000538
 8007b64:	20001494 	.word	0x20001494
 8007b68:	2000054c 	.word	0x2000054c
 8007b6c:	200014a8 	.word	0x200014a8
 8007b70:	20000560 	.word	0x20000560
 8007b74:	200014bc 	.word	0x200014bc
 8007b78:	20000574 	.word	0x20000574
 8007b7c:	200014d0 	.word	0x200014d0
 8007b80:	20000588 	.word	0x20000588
 8007b84:	200014e4 	.word	0x200014e4
 8007b88:	2000059c 	.word	0x2000059c
 8007b8c:	200014f8 	.word	0x200014f8
 8007b90:	200005b0 	.word	0x200005b0
 8007b94:	2000150c 	.word	0x2000150c
 8007b98:	200005c4 	.word	0x200005c4
 8007b9c:	20001520 	.word	0x20001520
 8007ba0:	200005d8 	.word	0x200005d8
 8007ba4:	20001534 	.word	0x20001534
 8007ba8:	200005ec 	.word	0x200005ec
 8007bac:	20001548 	.word	0x20001548
 8007bb0:	20000600 	.word	0x20000600
 8007bb4:	2000155c 	.word	0x2000155c
 8007bb8:	20000614 	.word	0x20000614
 8007bbc:	20001570 	.word	0x20001570
 8007bc0:	20000628 	.word	0x20000628
 8007bc4:	20001584 	.word	0x20001584
 8007bc8:	2000063c 	.word	0x2000063c
 8007bcc:	20001598 	.word	0x20001598
 8007bd0:	20000650 	.word	0x20000650
 8007bd4:	200015ac 	.word	0x200015ac
 8007bd8:	20000664 	.word	0x20000664
 8007bdc:	200015c0 	.word	0x200015c0
 8007be0:	20000678 	.word	0x20000678
 8007be4:	200015d4 	.word	0x200015d4
 8007be8:	2000068c 	.word	0x2000068c
 8007bec:	200015e8 	.word	0x200015e8
 8007bf0:	200006a0 	.word	0x200006a0
 8007bf4:	200015fc 	.word	0x200015fc
 8007bf8:	200006b4 	.word	0x200006b4
 8007bfc:	20001610 	.word	0x20001610
 8007c00:	200006c8 	.word	0x200006c8
 8007c04:	20001624 	.word	0x20001624
 8007c08:	200006dc 	.word	0x200006dc
 8007c0c:	20001638 	.word	0x20001638
 8007c10:	200006f0 	.word	0x200006f0
 8007c14:	2000164c 	.word	0x2000164c
 8007c18:	20000c7c 	.word	0x20000c7c
 8007c1c:	20001660 	.word	0x20001660
 8007c20:	20000c90 	.word	0x20000c90
 8007c24:	20001674 	.word	0x20001674
 8007c28:	20000ca4 	.word	0x20000ca4
 8007c2c:	6828      	ldr	r0, [r5, #0]
 8007c2e:	6869      	ldr	r1, [r5, #4]
 8007c30:	68aa      	ldr	r2, [r5, #8]
 8007c32:	68eb      	ldr	r3, [r5, #12]
 8007c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c36:	7c2b      	ldrb	r3, [r5, #16]
 8007c38:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8007c3a:	4a59      	ldr	r2, [pc, #356]	@ (8007da0 <loadMenuTexts+0xa0c>)
 8007c3c:	4b59      	ldr	r3, [pc, #356]	@ (8007da4 <loadMenuTexts+0xa10>)
 8007c3e:	4614      	mov	r4, r2
 8007c40:	461d      	mov	r5, r3
 8007c42:	6828      	ldr	r0, [r5, #0]
 8007c44:	6869      	ldr	r1, [r5, #4]
 8007c46:	68aa      	ldr	r2, [r5, #8]
 8007c48:	68eb      	ldr	r3, [r5, #12]
 8007c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c4c:	7c2b      	ldrb	r3, [r5, #16]
 8007c4e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8007c50:	4a55      	ldr	r2, [pc, #340]	@ (8007da8 <loadMenuTexts+0xa14>)
 8007c52:	4b56      	ldr	r3, [pc, #344]	@ (8007dac <loadMenuTexts+0xa18>)
 8007c54:	4614      	mov	r4, r2
 8007c56:	461d      	mov	r5, r3
 8007c58:	6828      	ldr	r0, [r5, #0]
 8007c5a:	6869      	ldr	r1, [r5, #4]
 8007c5c:	68aa      	ldr	r2, [r5, #8]
 8007c5e:	68eb      	ldr	r3, [r5, #12]
 8007c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c62:	7c2b      	ldrb	r3, [r5, #16]
 8007c64:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8007c66:	4a52      	ldr	r2, [pc, #328]	@ (8007db0 <loadMenuTexts+0xa1c>)
 8007c68:	4b52      	ldr	r3, [pc, #328]	@ (8007db4 <loadMenuTexts+0xa20>)
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	461d      	mov	r5, r3
 8007c6e:	6828      	ldr	r0, [r5, #0]
 8007c70:	6869      	ldr	r1, [r5, #4]
 8007c72:	68aa      	ldr	r2, [r5, #8]
 8007c74:	68eb      	ldr	r3, [r5, #12]
 8007c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c78:	7c2b      	ldrb	r3, [r5, #16]
 8007c7a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8007c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8007db8 <loadMenuTexts+0xa24>)
 8007c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007dbc <loadMenuTexts+0xa28>)
 8007c80:	4614      	mov	r4, r2
 8007c82:	461d      	mov	r5, r3
 8007c84:	6828      	ldr	r0, [r5, #0]
 8007c86:	6869      	ldr	r1, [r5, #4]
 8007c88:	68aa      	ldr	r2, [r5, #8]
 8007c8a:	68eb      	ldr	r3, [r5, #12]
 8007c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c8e:	7c2b      	ldrb	r3, [r5, #16]
 8007c90:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8007c92:	4a4b      	ldr	r2, [pc, #300]	@ (8007dc0 <loadMenuTexts+0xa2c>)
 8007c94:	4b4b      	ldr	r3, [pc, #300]	@ (8007dc4 <loadMenuTexts+0xa30>)
 8007c96:	4614      	mov	r4, r2
 8007c98:	461d      	mov	r5, r3
 8007c9a:	6828      	ldr	r0, [r5, #0]
 8007c9c:	6869      	ldr	r1, [r5, #4]
 8007c9e:	68aa      	ldr	r2, [r5, #8]
 8007ca0:	68eb      	ldr	r3, [r5, #12]
 8007ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca4:	7c2b      	ldrb	r3, [r5, #16]
 8007ca6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8007ca8:	4a47      	ldr	r2, [pc, #284]	@ (8007dc8 <loadMenuTexts+0xa34>)
 8007caa:	4b48      	ldr	r3, [pc, #288]	@ (8007dcc <loadMenuTexts+0xa38>)
 8007cac:	4614      	mov	r4, r2
 8007cae:	461d      	mov	r5, r3
 8007cb0:	6828      	ldr	r0, [r5, #0]
 8007cb2:	6869      	ldr	r1, [r5, #4]
 8007cb4:	68aa      	ldr	r2, [r5, #8]
 8007cb6:	68eb      	ldr	r3, [r5, #12]
 8007cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cba:	7c2b      	ldrb	r3, [r5, #16]
 8007cbc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8007cbe:	4a44      	ldr	r2, [pc, #272]	@ (8007dd0 <loadMenuTexts+0xa3c>)
 8007cc0:	4b44      	ldr	r3, [pc, #272]	@ (8007dd4 <loadMenuTexts+0xa40>)
 8007cc2:	4614      	mov	r4, r2
 8007cc4:	461d      	mov	r5, r3
 8007cc6:	6828      	ldr	r0, [r5, #0]
 8007cc8:	6869      	ldr	r1, [r5, #4]
 8007cca:	68aa      	ldr	r2, [r5, #8]
 8007ccc:	68eb      	ldr	r3, [r5, #12]
 8007cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cd0:	7c2b      	ldrb	r3, [r5, #16]
 8007cd2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8007cd4:	4a40      	ldr	r2, [pc, #256]	@ (8007dd8 <loadMenuTexts+0xa44>)
 8007cd6:	4b41      	ldr	r3, [pc, #260]	@ (8007ddc <loadMenuTexts+0xa48>)
 8007cd8:	4614      	mov	r4, r2
 8007cda:	461d      	mov	r5, r3
 8007cdc:	6828      	ldr	r0, [r5, #0]
 8007cde:	6869      	ldr	r1, [r5, #4]
 8007ce0:	68aa      	ldr	r2, [r5, #8]
 8007ce2:	68eb      	ldr	r3, [r5, #12]
 8007ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ce6:	7c2b      	ldrb	r3, [r5, #16]
 8007ce8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8007cea:	4a3d      	ldr	r2, [pc, #244]	@ (8007de0 <loadMenuTexts+0xa4c>)
 8007cec:	4b3d      	ldr	r3, [pc, #244]	@ (8007de4 <loadMenuTexts+0xa50>)
 8007cee:	4614      	mov	r4, r2
 8007cf0:	461d      	mov	r5, r3
 8007cf2:	6828      	ldr	r0, [r5, #0]
 8007cf4:	6869      	ldr	r1, [r5, #4]
 8007cf6:	68aa      	ldr	r2, [r5, #8]
 8007cf8:	68eb      	ldr	r3, [r5, #12]
 8007cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cfc:	7c2b      	ldrb	r3, [r5, #16]
 8007cfe:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8007d00:	4a39      	ldr	r2, [pc, #228]	@ (8007de8 <loadMenuTexts+0xa54>)
 8007d02:	4b3a      	ldr	r3, [pc, #232]	@ (8007dec <loadMenuTexts+0xa58>)
 8007d04:	4614      	mov	r4, r2
 8007d06:	461d      	mov	r5, r3
 8007d08:	6828      	ldr	r0, [r5, #0]
 8007d0a:	6869      	ldr	r1, [r5, #4]
 8007d0c:	68aa      	ldr	r2, [r5, #8]
 8007d0e:	68eb      	ldr	r3, [r5, #12]
 8007d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d12:	7c2b      	ldrb	r3, [r5, #16]
 8007d14:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8007d16:	4a36      	ldr	r2, [pc, #216]	@ (8007df0 <loadMenuTexts+0xa5c>)
 8007d18:	4b36      	ldr	r3, [pc, #216]	@ (8007df4 <loadMenuTexts+0xa60>)
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	461d      	mov	r5, r3
 8007d1e:	6828      	ldr	r0, [r5, #0]
 8007d20:	6869      	ldr	r1, [r5, #4]
 8007d22:	68aa      	ldr	r2, [r5, #8]
 8007d24:	68eb      	ldr	r3, [r5, #12]
 8007d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d28:	7c2b      	ldrb	r3, [r5, #16]
 8007d2a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007d2c:	4a32      	ldr	r2, [pc, #200]	@ (8007df8 <loadMenuTexts+0xa64>)
 8007d2e:	4b33      	ldr	r3, [pc, #204]	@ (8007dfc <loadMenuTexts+0xa68>)
 8007d30:	4614      	mov	r4, r2
 8007d32:	461d      	mov	r5, r3
 8007d34:	6828      	ldr	r0, [r5, #0]
 8007d36:	6869      	ldr	r1, [r5, #4]
 8007d38:	68aa      	ldr	r2, [r5, #8]
 8007d3a:	68eb      	ldr	r3, [r5, #12]
 8007d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d3e:	7c2b      	ldrb	r3, [r5, #16]
 8007d40:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8007d42:	4a2f      	ldr	r2, [pc, #188]	@ (8007e00 <loadMenuTexts+0xa6c>)
 8007d44:	4b2f      	ldr	r3, [pc, #188]	@ (8007e04 <loadMenuTexts+0xa70>)
 8007d46:	4614      	mov	r4, r2
 8007d48:	461d      	mov	r5, r3
 8007d4a:	6828      	ldr	r0, [r5, #0]
 8007d4c:	6869      	ldr	r1, [r5, #4]
 8007d4e:	68aa      	ldr	r2, [r5, #8]
 8007d50:	68eb      	ldr	r3, [r5, #12]
 8007d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d54:	7c2b      	ldrb	r3, [r5, #16]
 8007d56:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8007d58:	4a2b      	ldr	r2, [pc, #172]	@ (8007e08 <loadMenuTexts+0xa74>)
 8007d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8007e0c <loadMenuTexts+0xa78>)
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	461d      	mov	r5, r3
 8007d60:	6828      	ldr	r0, [r5, #0]
 8007d62:	6869      	ldr	r1, [r5, #4]
 8007d64:	68aa      	ldr	r2, [r5, #8]
 8007d66:	68eb      	ldr	r3, [r5, #12]
 8007d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d6a:	7c2b      	ldrb	r3, [r5, #16]
 8007d6c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8007d6e:	4a28      	ldr	r2, [pc, #160]	@ (8007e10 <loadMenuTexts+0xa7c>)
 8007d70:	4b28      	ldr	r3, [pc, #160]	@ (8007e14 <loadMenuTexts+0xa80>)
 8007d72:	4614      	mov	r4, r2
 8007d74:	461d      	mov	r5, r3
 8007d76:	6828      	ldr	r0, [r5, #0]
 8007d78:	6869      	ldr	r1, [r5, #4]
 8007d7a:	68aa      	ldr	r2, [r5, #8]
 8007d7c:	68eb      	ldr	r3, [r5, #12]
 8007d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d80:	7c2b      	ldrb	r3, [r5, #16]
 8007d82:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8007d84:	4a24      	ldr	r2, [pc, #144]	@ (8007e18 <loadMenuTexts+0xa84>)
 8007d86:	4b25      	ldr	r3, [pc, #148]	@ (8007e1c <loadMenuTexts+0xa88>)
 8007d88:	4614      	mov	r4, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	6828      	ldr	r0, [r5, #0]
 8007d8e:	6869      	ldr	r1, [r5, #4]
 8007d90:	68aa      	ldr	r2, [r5, #8]
 8007d92:	68eb      	ldr	r3, [r5, #12]
 8007d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d96:	7c2b      	ldrb	r3, [r5, #16]
 8007d98:	7023      	strb	r3, [r4, #0]
 8007d9a:	f000 bd3a 	b.w	8008812 <loadMenuTexts+0x147e>
 8007d9e:	bf00      	nop
 8007da0:	20001688 	.word	0x20001688
 8007da4:	20000cb8 	.word	0x20000cb8
 8007da8:	2000169c 	.word	0x2000169c
 8007dac:	20000d1c 	.word	0x20000d1c
 8007db0:	200016b0 	.word	0x200016b0
 8007db4:	20000d30 	.word	0x20000d30
 8007db8:	200016c4 	.word	0x200016c4
 8007dbc:	20000d6c 	.word	0x20000d6c
 8007dc0:	200016d8 	.word	0x200016d8
 8007dc4:	20000d80 	.word	0x20000d80
 8007dc8:	200016ec 	.word	0x200016ec
 8007dcc:	20000dbc 	.word	0x20000dbc
 8007dd0:	20001700 	.word	0x20001700
 8007dd4:	20000dd0 	.word	0x20000dd0
 8007dd8:	20001714 	.word	0x20001714
 8007ddc:	20000e0c 	.word	0x20000e0c
 8007de0:	20001728 	.word	0x20001728
 8007de4:	20000e34 	.word	0x20000e34
 8007de8:	2000173c 	.word	0x2000173c
 8007dec:	20000e5c 	.word	0x20000e5c
 8007df0:	20001750 	.word	0x20001750
 8007df4:	20000e84 	.word	0x20000e84
 8007df8:	20001764 	.word	0x20001764
 8007dfc:	20000eac 	.word	0x20000eac
 8007e00:	20001778 	.word	0x20001778
 8007e04:	20000ed4 	.word	0x20000ed4
 8007e08:	2000178c 	.word	0x2000178c
 8007e0c:	20000efc 	.word	0x20000efc
 8007e10:	200017a0 	.word	0x200017a0
 8007e14:	20000f24 	.word	0x20000f24
 8007e18:	200017b4 	.word	0x200017b4
 8007e1c:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8007e20:	4ac6      	ldr	r2, [pc, #792]	@ (800813c <loadMenuTexts+0xda8>)
 8007e22:	4bc7      	ldr	r3, [pc, #796]	@ (8008140 <loadMenuTexts+0xdac>)
 8007e24:	4614      	mov	r4, r2
 8007e26:	461d      	mov	r5, r3
 8007e28:	6828      	ldr	r0, [r5, #0]
 8007e2a:	6869      	ldr	r1, [r5, #4]
 8007e2c:	68aa      	ldr	r2, [r5, #8]
 8007e2e:	68eb      	ldr	r3, [r5, #12]
 8007e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e32:	7c2b      	ldrb	r3, [r5, #16]
 8007e34:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8007e36:	4ac3      	ldr	r2, [pc, #780]	@ (8008144 <loadMenuTexts+0xdb0>)
 8007e38:	4bc3      	ldr	r3, [pc, #780]	@ (8008148 <loadMenuTexts+0xdb4>)
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	461d      	mov	r5, r3
 8007e3e:	6828      	ldr	r0, [r5, #0]
 8007e40:	6869      	ldr	r1, [r5, #4]
 8007e42:	68aa      	ldr	r2, [r5, #8]
 8007e44:	68eb      	ldr	r3, [r5, #12]
 8007e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e48:	7c2b      	ldrb	r3, [r5, #16]
 8007e4a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007e4c:	4abf      	ldr	r2, [pc, #764]	@ (800814c <loadMenuTexts+0xdb8>)
 8007e4e:	4bc0      	ldr	r3, [pc, #768]	@ (8008150 <loadMenuTexts+0xdbc>)
 8007e50:	4614      	mov	r4, r2
 8007e52:	461d      	mov	r5, r3
 8007e54:	6828      	ldr	r0, [r5, #0]
 8007e56:	6869      	ldr	r1, [r5, #4]
 8007e58:	68aa      	ldr	r2, [r5, #8]
 8007e5a:	68eb      	ldr	r3, [r5, #12]
 8007e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e5e:	7c2b      	ldrb	r3, [r5, #16]
 8007e60:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8007e62:	4abc      	ldr	r2, [pc, #752]	@ (8008154 <loadMenuTexts+0xdc0>)
 8007e64:	4bbc      	ldr	r3, [pc, #752]	@ (8008158 <loadMenuTexts+0xdc4>)
 8007e66:	4614      	mov	r4, r2
 8007e68:	461d      	mov	r5, r3
 8007e6a:	6828      	ldr	r0, [r5, #0]
 8007e6c:	6869      	ldr	r1, [r5, #4]
 8007e6e:	68aa      	ldr	r2, [r5, #8]
 8007e70:	68eb      	ldr	r3, [r5, #12]
 8007e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e74:	7c2b      	ldrb	r3, [r5, #16]
 8007e76:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8007e78:	4ab8      	ldr	r2, [pc, #736]	@ (800815c <loadMenuTexts+0xdc8>)
 8007e7a:	4bb9      	ldr	r3, [pc, #740]	@ (8008160 <loadMenuTexts+0xdcc>)
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	461d      	mov	r5, r3
 8007e80:	6828      	ldr	r0, [r5, #0]
 8007e82:	6869      	ldr	r1, [r5, #4]
 8007e84:	68aa      	ldr	r2, [r5, #8]
 8007e86:	68eb      	ldr	r3, [r5, #12]
 8007e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e8a:	7c2b      	ldrb	r3, [r5, #16]
 8007e8c:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8007e8e:	4ab5      	ldr	r2, [pc, #724]	@ (8008164 <loadMenuTexts+0xdd0>)
 8007e90:	4bb5      	ldr	r3, [pc, #724]	@ (8008168 <loadMenuTexts+0xdd4>)
 8007e92:	4614      	mov	r4, r2
 8007e94:	461d      	mov	r5, r3
 8007e96:	6828      	ldr	r0, [r5, #0]
 8007e98:	6869      	ldr	r1, [r5, #4]
 8007e9a:	68aa      	ldr	r2, [r5, #8]
 8007e9c:	68eb      	ldr	r3, [r5, #12]
 8007e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea0:	7c2b      	ldrb	r3, [r5, #16]
 8007ea2:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8007ea4:	4ab1      	ldr	r2, [pc, #708]	@ (800816c <loadMenuTexts+0xdd8>)
 8007ea6:	4bb2      	ldr	r3, [pc, #712]	@ (8008170 <loadMenuTexts+0xddc>)
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	461d      	mov	r5, r3
 8007eac:	6828      	ldr	r0, [r5, #0]
 8007eae:	6869      	ldr	r1, [r5, #4]
 8007eb0:	68aa      	ldr	r2, [r5, #8]
 8007eb2:	68eb      	ldr	r3, [r5, #12]
 8007eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb6:	7c2b      	ldrb	r3, [r5, #16]
 8007eb8:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8007eba:	4aae      	ldr	r2, [pc, #696]	@ (8008174 <loadMenuTexts+0xde0>)
 8007ebc:	4bae      	ldr	r3, [pc, #696]	@ (8008178 <loadMenuTexts+0xde4>)
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	6828      	ldr	r0, [r5, #0]
 8007ec4:	6869      	ldr	r1, [r5, #4]
 8007ec6:	68aa      	ldr	r2, [r5, #8]
 8007ec8:	68eb      	ldr	r3, [r5, #12]
 8007eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ecc:	7c2b      	ldrb	r3, [r5, #16]
 8007ece:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8007ed0:	4aaa      	ldr	r2, [pc, #680]	@ (800817c <loadMenuTexts+0xde8>)
 8007ed2:	4bab      	ldr	r3, [pc, #684]	@ (8008180 <loadMenuTexts+0xdec>)
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	6828      	ldr	r0, [r5, #0]
 8007eda:	6869      	ldr	r1, [r5, #4]
 8007edc:	68aa      	ldr	r2, [r5, #8]
 8007ede:	68eb      	ldr	r3, [r5, #12]
 8007ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee2:	7c2b      	ldrb	r3, [r5, #16]
 8007ee4:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8007ee6:	4aa7      	ldr	r2, [pc, #668]	@ (8008184 <loadMenuTexts+0xdf0>)
 8007ee8:	4ba7      	ldr	r3, [pc, #668]	@ (8008188 <loadMenuTexts+0xdf4>)
 8007eea:	4614      	mov	r4, r2
 8007eec:	461d      	mov	r5, r3
 8007eee:	6828      	ldr	r0, [r5, #0]
 8007ef0:	6869      	ldr	r1, [r5, #4]
 8007ef2:	68aa      	ldr	r2, [r5, #8]
 8007ef4:	68eb      	ldr	r3, [r5, #12]
 8007ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef8:	7c2b      	ldrb	r3, [r5, #16]
 8007efa:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8007efc:	4aa3      	ldr	r2, [pc, #652]	@ (800818c <loadMenuTexts+0xdf8>)
 8007efe:	4ba4      	ldr	r3, [pc, #656]	@ (8008190 <loadMenuTexts+0xdfc>)
 8007f00:	4614      	mov	r4, r2
 8007f02:	461d      	mov	r5, r3
 8007f04:	6828      	ldr	r0, [r5, #0]
 8007f06:	6869      	ldr	r1, [r5, #4]
 8007f08:	68aa      	ldr	r2, [r5, #8]
 8007f0a:	68eb      	ldr	r3, [r5, #12]
 8007f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f0e:	7c2b      	ldrb	r3, [r5, #16]
 8007f10:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8007f12:	4aa0      	ldr	r2, [pc, #640]	@ (8008194 <loadMenuTexts+0xe00>)
 8007f14:	4ba0      	ldr	r3, [pc, #640]	@ (8008198 <loadMenuTexts+0xe04>)
 8007f16:	4614      	mov	r4, r2
 8007f18:	461d      	mov	r5, r3
 8007f1a:	6828      	ldr	r0, [r5, #0]
 8007f1c:	6869      	ldr	r1, [r5, #4]
 8007f1e:	68aa      	ldr	r2, [r5, #8]
 8007f20:	68eb      	ldr	r3, [r5, #12]
 8007f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f24:	7c2b      	ldrb	r3, [r5, #16]
 8007f26:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8007f28:	4a9c      	ldr	r2, [pc, #624]	@ (800819c <loadMenuTexts+0xe08>)
 8007f2a:	4b9d      	ldr	r3, [pc, #628]	@ (80081a0 <loadMenuTexts+0xe0c>)
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	461d      	mov	r5, r3
 8007f30:	6828      	ldr	r0, [r5, #0]
 8007f32:	6869      	ldr	r1, [r5, #4]
 8007f34:	68aa      	ldr	r2, [r5, #8]
 8007f36:	68eb      	ldr	r3, [r5, #12]
 8007f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f3a:	7c2b      	ldrb	r3, [r5, #16]
 8007f3c:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8007f3e:	4a99      	ldr	r2, [pc, #612]	@ (80081a4 <loadMenuTexts+0xe10>)
 8007f40:	4b99      	ldr	r3, [pc, #612]	@ (80081a8 <loadMenuTexts+0xe14>)
 8007f42:	4614      	mov	r4, r2
 8007f44:	461d      	mov	r5, r3
 8007f46:	6828      	ldr	r0, [r5, #0]
 8007f48:	6869      	ldr	r1, [r5, #4]
 8007f4a:	68aa      	ldr	r2, [r5, #8]
 8007f4c:	68eb      	ldr	r3, [r5, #12]
 8007f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f50:	7c2b      	ldrb	r3, [r5, #16]
 8007f52:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8007f54:	4a95      	ldr	r2, [pc, #596]	@ (80081ac <loadMenuTexts+0xe18>)
 8007f56:	4b96      	ldr	r3, [pc, #600]	@ (80081b0 <loadMenuTexts+0xe1c>)
 8007f58:	4614      	mov	r4, r2
 8007f5a:	461d      	mov	r5, r3
 8007f5c:	6828      	ldr	r0, [r5, #0]
 8007f5e:	6869      	ldr	r1, [r5, #4]
 8007f60:	68aa      	ldr	r2, [r5, #8]
 8007f62:	68eb      	ldr	r3, [r5, #12]
 8007f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f66:	7c2b      	ldrb	r3, [r5, #16]
 8007f68:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8007f6a:	4a92      	ldr	r2, [pc, #584]	@ (80081b4 <loadMenuTexts+0xe20>)
 8007f6c:	4b92      	ldr	r3, [pc, #584]	@ (80081b8 <loadMenuTexts+0xe24>)
 8007f6e:	4614      	mov	r4, r2
 8007f70:	461d      	mov	r5, r3
 8007f72:	6828      	ldr	r0, [r5, #0]
 8007f74:	6869      	ldr	r1, [r5, #4]
 8007f76:	68aa      	ldr	r2, [r5, #8]
 8007f78:	68eb      	ldr	r3, [r5, #12]
 8007f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f7c:	7c2b      	ldrb	r3, [r5, #16]
 8007f7e:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8007f80:	4a8e      	ldr	r2, [pc, #568]	@ (80081bc <loadMenuTexts+0xe28>)
 8007f82:	4b8f      	ldr	r3, [pc, #572]	@ (80081c0 <loadMenuTexts+0xe2c>)
 8007f84:	4614      	mov	r4, r2
 8007f86:	461d      	mov	r5, r3
 8007f88:	6828      	ldr	r0, [r5, #0]
 8007f8a:	6869      	ldr	r1, [r5, #4]
 8007f8c:	68aa      	ldr	r2, [r5, #8]
 8007f8e:	68eb      	ldr	r3, [r5, #12]
 8007f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f92:	7c2b      	ldrb	r3, [r5, #16]
 8007f94:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8007f96:	4a8b      	ldr	r2, [pc, #556]	@ (80081c4 <loadMenuTexts+0xe30>)
 8007f98:	4b8b      	ldr	r3, [pc, #556]	@ (80081c8 <loadMenuTexts+0xe34>)
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	6828      	ldr	r0, [r5, #0]
 8007fa0:	6869      	ldr	r1, [r5, #4]
 8007fa2:	68aa      	ldr	r2, [r5, #8]
 8007fa4:	68eb      	ldr	r3, [r5, #12]
 8007fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fa8:	7c2b      	ldrb	r3, [r5, #16]
 8007faa:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8007fac:	4a87      	ldr	r2, [pc, #540]	@ (80081cc <loadMenuTexts+0xe38>)
 8007fae:	4b88      	ldr	r3, [pc, #544]	@ (80081d0 <loadMenuTexts+0xe3c>)
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	6828      	ldr	r0, [r5, #0]
 8007fb6:	6869      	ldr	r1, [r5, #4]
 8007fb8:	68aa      	ldr	r2, [r5, #8]
 8007fba:	68eb      	ldr	r3, [r5, #12]
 8007fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fbe:	7c2b      	ldrb	r3, [r5, #16]
 8007fc0:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8007fc2:	4a84      	ldr	r2, [pc, #528]	@ (80081d4 <loadMenuTexts+0xe40>)
 8007fc4:	4b84      	ldr	r3, [pc, #528]	@ (80081d8 <loadMenuTexts+0xe44>)
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	461d      	mov	r5, r3
 8007fca:	6828      	ldr	r0, [r5, #0]
 8007fcc:	6869      	ldr	r1, [r5, #4]
 8007fce:	68aa      	ldr	r2, [r5, #8]
 8007fd0:	68eb      	ldr	r3, [r5, #12]
 8007fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd4:	7c2b      	ldrb	r3, [r5, #16]
 8007fd6:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8007fd8:	4a80      	ldr	r2, [pc, #512]	@ (80081dc <loadMenuTexts+0xe48>)
 8007fda:	4b81      	ldr	r3, [pc, #516]	@ (80081e0 <loadMenuTexts+0xe4c>)
 8007fdc:	4614      	mov	r4, r2
 8007fde:	461d      	mov	r5, r3
 8007fe0:	6828      	ldr	r0, [r5, #0]
 8007fe2:	6869      	ldr	r1, [r5, #4]
 8007fe4:	68aa      	ldr	r2, [r5, #8]
 8007fe6:	68eb      	ldr	r3, [r5, #12]
 8007fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fea:	7c2b      	ldrb	r3, [r5, #16]
 8007fec:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8007fee:	4a7d      	ldr	r2, [pc, #500]	@ (80081e4 <loadMenuTexts+0xe50>)
 8007ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80081e8 <loadMenuTexts+0xe54>)
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	6828      	ldr	r0, [r5, #0]
 8007ff8:	6869      	ldr	r1, [r5, #4]
 8007ffa:	68aa      	ldr	r2, [r5, #8]
 8007ffc:	68eb      	ldr	r3, [r5, #12]
 8007ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008000:	7c2b      	ldrb	r3, [r5, #16]
 8008002:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8008004:	4a79      	ldr	r2, [pc, #484]	@ (80081ec <loadMenuTexts+0xe58>)
 8008006:	4b7a      	ldr	r3, [pc, #488]	@ (80081f0 <loadMenuTexts+0xe5c>)
 8008008:	4614      	mov	r4, r2
 800800a:	461d      	mov	r5, r3
 800800c:	6828      	ldr	r0, [r5, #0]
 800800e:	6869      	ldr	r1, [r5, #4]
 8008010:	68aa      	ldr	r2, [r5, #8]
 8008012:	68eb      	ldr	r3, [r5, #12]
 8008014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008016:	7c2b      	ldrb	r3, [r5, #16]
 8008018:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 800801a:	4a76      	ldr	r2, [pc, #472]	@ (80081f4 <loadMenuTexts+0xe60>)
 800801c:	4b76      	ldr	r3, [pc, #472]	@ (80081f8 <loadMenuTexts+0xe64>)
 800801e:	4614      	mov	r4, r2
 8008020:	461d      	mov	r5, r3
 8008022:	6828      	ldr	r0, [r5, #0]
 8008024:	6869      	ldr	r1, [r5, #4]
 8008026:	68aa      	ldr	r2, [r5, #8]
 8008028:	68eb      	ldr	r3, [r5, #12]
 800802a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800802c:	7c2b      	ldrb	r3, [r5, #16]
 800802e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8008030:	4a72      	ldr	r2, [pc, #456]	@ (80081fc <loadMenuTexts+0xe68>)
 8008032:	4b73      	ldr	r3, [pc, #460]	@ (8008200 <loadMenuTexts+0xe6c>)
 8008034:	4614      	mov	r4, r2
 8008036:	461d      	mov	r5, r3
 8008038:	6828      	ldr	r0, [r5, #0]
 800803a:	6869      	ldr	r1, [r5, #4]
 800803c:	68aa      	ldr	r2, [r5, #8]
 800803e:	68eb      	ldr	r3, [r5, #12]
 8008040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008042:	7c2b      	ldrb	r3, [r5, #16]
 8008044:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8008046:	4a6f      	ldr	r2, [pc, #444]	@ (8008204 <loadMenuTexts+0xe70>)
 8008048:	4b6f      	ldr	r3, [pc, #444]	@ (8008208 <loadMenuTexts+0xe74>)
 800804a:	4614      	mov	r4, r2
 800804c:	461d      	mov	r5, r3
 800804e:	6828      	ldr	r0, [r5, #0]
 8008050:	6869      	ldr	r1, [r5, #4]
 8008052:	68aa      	ldr	r2, [r5, #8]
 8008054:	68eb      	ldr	r3, [r5, #12]
 8008056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008058:	7c2b      	ldrb	r3, [r5, #16]
 800805a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 800805c:	4a6b      	ldr	r2, [pc, #428]	@ (800820c <loadMenuTexts+0xe78>)
 800805e:	4b6c      	ldr	r3, [pc, #432]	@ (8008210 <loadMenuTexts+0xe7c>)
 8008060:	4614      	mov	r4, r2
 8008062:	461d      	mov	r5, r3
 8008064:	6828      	ldr	r0, [r5, #0]
 8008066:	6869      	ldr	r1, [r5, #4]
 8008068:	68aa      	ldr	r2, [r5, #8]
 800806a:	68eb      	ldr	r3, [r5, #12]
 800806c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800806e:	7c2b      	ldrb	r3, [r5, #16]
 8008070:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8008072:	4a68      	ldr	r2, [pc, #416]	@ (8008214 <loadMenuTexts+0xe80>)
 8008074:	4b68      	ldr	r3, [pc, #416]	@ (8008218 <loadMenuTexts+0xe84>)
 8008076:	4614      	mov	r4, r2
 8008078:	461d      	mov	r5, r3
 800807a:	6828      	ldr	r0, [r5, #0]
 800807c:	6869      	ldr	r1, [r5, #4]
 800807e:	68aa      	ldr	r2, [r5, #8]
 8008080:	68eb      	ldr	r3, [r5, #12]
 8008082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008084:	7c2b      	ldrb	r3, [r5, #16]
 8008086:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8008088:	4a64      	ldr	r2, [pc, #400]	@ (800821c <loadMenuTexts+0xe88>)
 800808a:	4b65      	ldr	r3, [pc, #404]	@ (8008220 <loadMenuTexts+0xe8c>)
 800808c:	4614      	mov	r4, r2
 800808e:	461d      	mov	r5, r3
 8008090:	6828      	ldr	r0, [r5, #0]
 8008092:	6869      	ldr	r1, [r5, #4]
 8008094:	68aa      	ldr	r2, [r5, #8]
 8008096:	68eb      	ldr	r3, [r5, #12]
 8008098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800809a:	7c2b      	ldrb	r3, [r5, #16]
 800809c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 800809e:	4a61      	ldr	r2, [pc, #388]	@ (8008224 <loadMenuTexts+0xe90>)
 80080a0:	4b61      	ldr	r3, [pc, #388]	@ (8008228 <loadMenuTexts+0xe94>)
 80080a2:	4614      	mov	r4, r2
 80080a4:	461d      	mov	r5, r3
 80080a6:	6828      	ldr	r0, [r5, #0]
 80080a8:	6869      	ldr	r1, [r5, #4]
 80080aa:	68aa      	ldr	r2, [r5, #8]
 80080ac:	68eb      	ldr	r3, [r5, #12]
 80080ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b0:	7c2b      	ldrb	r3, [r5, #16]
 80080b2:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80080b4:	4a5d      	ldr	r2, [pc, #372]	@ (800822c <loadMenuTexts+0xe98>)
 80080b6:	4b5e      	ldr	r3, [pc, #376]	@ (8008230 <loadMenuTexts+0xe9c>)
 80080b8:	4614      	mov	r4, r2
 80080ba:	461d      	mov	r5, r3
 80080bc:	6828      	ldr	r0, [r5, #0]
 80080be:	6869      	ldr	r1, [r5, #4]
 80080c0:	68aa      	ldr	r2, [r5, #8]
 80080c2:	68eb      	ldr	r3, [r5, #12]
 80080c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080c6:	7c2b      	ldrb	r3, [r5, #16]
 80080c8:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80080ca:	4a5a      	ldr	r2, [pc, #360]	@ (8008234 <loadMenuTexts+0xea0>)
 80080cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008238 <loadMenuTexts+0xea4>)
 80080ce:	4614      	mov	r4, r2
 80080d0:	461d      	mov	r5, r3
 80080d2:	6828      	ldr	r0, [r5, #0]
 80080d4:	6869      	ldr	r1, [r5, #4]
 80080d6:	68aa      	ldr	r2, [r5, #8]
 80080d8:	68eb      	ldr	r3, [r5, #12]
 80080da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080dc:	7c2b      	ldrb	r3, [r5, #16]
 80080de:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80080e0:	4a56      	ldr	r2, [pc, #344]	@ (800823c <loadMenuTexts+0xea8>)
 80080e2:	4b57      	ldr	r3, [pc, #348]	@ (8008240 <loadMenuTexts+0xeac>)
 80080e4:	4614      	mov	r4, r2
 80080e6:	461d      	mov	r5, r3
 80080e8:	6828      	ldr	r0, [r5, #0]
 80080ea:	6869      	ldr	r1, [r5, #4]
 80080ec:	68aa      	ldr	r2, [r5, #8]
 80080ee:	68eb      	ldr	r3, [r5, #12]
 80080f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f2:	7c2b      	ldrb	r3, [r5, #16]
 80080f4:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80080f6:	4a53      	ldr	r2, [pc, #332]	@ (8008244 <loadMenuTexts+0xeb0>)
 80080f8:	4b53      	ldr	r3, [pc, #332]	@ (8008248 <loadMenuTexts+0xeb4>)
 80080fa:	4614      	mov	r4, r2
 80080fc:	461d      	mov	r5, r3
 80080fe:	6828      	ldr	r0, [r5, #0]
 8008100:	6869      	ldr	r1, [r5, #4]
 8008102:	68aa      	ldr	r2, [r5, #8]
 8008104:	68eb      	ldr	r3, [r5, #12]
 8008106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008108:	7c2b      	ldrb	r3, [r5, #16]
 800810a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 800810c:	4a4f      	ldr	r2, [pc, #316]	@ (800824c <loadMenuTexts+0xeb8>)
 800810e:	4b50      	ldr	r3, [pc, #320]	@ (8008250 <loadMenuTexts+0xebc>)
 8008110:	4614      	mov	r4, r2
 8008112:	461d      	mov	r5, r3
 8008114:	6828      	ldr	r0, [r5, #0]
 8008116:	6869      	ldr	r1, [r5, #4]
 8008118:	68aa      	ldr	r2, [r5, #8]
 800811a:	68eb      	ldr	r3, [r5, #12]
 800811c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800811e:	7c2b      	ldrb	r3, [r5, #16]
 8008120:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8008122:	4a4c      	ldr	r2, [pc, #304]	@ (8008254 <loadMenuTexts+0xec0>)
 8008124:	4b4c      	ldr	r3, [pc, #304]	@ (8008258 <loadMenuTexts+0xec4>)
 8008126:	4614      	mov	r4, r2
 8008128:	461d      	mov	r5, r3
 800812a:	6828      	ldr	r0, [r5, #0]
 800812c:	6869      	ldr	r1, [r5, #4]
 800812e:	68aa      	ldr	r2, [r5, #8]
 8008130:	68eb      	ldr	r3, [r5, #12]
 8008132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008134:	7c2b      	ldrb	r3, [r5, #16]
 8008136:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8008138:	4a48      	ldr	r2, [pc, #288]	@ (800825c <loadMenuTexts+0xec8>)
 800813a:	e091      	b.n	8008260 <loadMenuTexts+0xecc>
 800813c:	200010d4 	.word	0x200010d4
 8008140:	20000704 	.word	0x20000704
 8008144:	200010e8 	.word	0x200010e8
 8008148:	20000718 	.word	0x20000718
 800814c:	200010fc 	.word	0x200010fc
 8008150:	2000072c 	.word	0x2000072c
 8008154:	20001110 	.word	0x20001110
 8008158:	20000740 	.word	0x20000740
 800815c:	20001124 	.word	0x20001124
 8008160:	20000754 	.word	0x20000754
 8008164:	20001138 	.word	0x20001138
 8008168:	20000768 	.word	0x20000768
 800816c:	2000114c 	.word	0x2000114c
 8008170:	2000077c 	.word	0x2000077c
 8008174:	20001160 	.word	0x20001160
 8008178:	20000790 	.word	0x20000790
 800817c:	20001174 	.word	0x20001174
 8008180:	200007a4 	.word	0x200007a4
 8008184:	20001188 	.word	0x20001188
 8008188:	200007b8 	.word	0x200007b8
 800818c:	2000119c 	.word	0x2000119c
 8008190:	200007cc 	.word	0x200007cc
 8008194:	200011b0 	.word	0x200011b0
 8008198:	200007e0 	.word	0x200007e0
 800819c:	200011c4 	.word	0x200011c4
 80081a0:	200007f4 	.word	0x200007f4
 80081a4:	200011d8 	.word	0x200011d8
 80081a8:	20000808 	.word	0x20000808
 80081ac:	200011ec 	.word	0x200011ec
 80081b0:	2000081c 	.word	0x2000081c
 80081b4:	20001200 	.word	0x20001200
 80081b8:	20000830 	.word	0x20000830
 80081bc:	20001214 	.word	0x20001214
 80081c0:	20000844 	.word	0x20000844
 80081c4:	20001228 	.word	0x20001228
 80081c8:	20000858 	.word	0x20000858
 80081cc:	2000123c 	.word	0x2000123c
 80081d0:	2000086c 	.word	0x2000086c
 80081d4:	20001250 	.word	0x20001250
 80081d8:	20000880 	.word	0x20000880
 80081dc:	20001264 	.word	0x20001264
 80081e0:	20000894 	.word	0x20000894
 80081e4:	20001278 	.word	0x20001278
 80081e8:	200008a8 	.word	0x200008a8
 80081ec:	2000128c 	.word	0x2000128c
 80081f0:	200008bc 	.word	0x200008bc
 80081f4:	200012a0 	.word	0x200012a0
 80081f8:	200008d0 	.word	0x200008d0
 80081fc:	200012b4 	.word	0x200012b4
 8008200:	200008e4 	.word	0x200008e4
 8008204:	200012c8 	.word	0x200012c8
 8008208:	200008f8 	.word	0x200008f8
 800820c:	200012dc 	.word	0x200012dc
 8008210:	2000090c 	.word	0x2000090c
 8008214:	200012f0 	.word	0x200012f0
 8008218:	20000920 	.word	0x20000920
 800821c:	20001304 	.word	0x20001304
 8008220:	20000934 	.word	0x20000934
 8008224:	20001318 	.word	0x20001318
 8008228:	20000948 	.word	0x20000948
 800822c:	2000132c 	.word	0x2000132c
 8008230:	2000095c 	.word	0x2000095c
 8008234:	20001340 	.word	0x20001340
 8008238:	20000970 	.word	0x20000970
 800823c:	20001354 	.word	0x20001354
 8008240:	20000984 	.word	0x20000984
 8008244:	20001368 	.word	0x20001368
 8008248:	20000998 	.word	0x20000998
 800824c:	2000137c 	.word	0x2000137c
 8008250:	200009ac 	.word	0x200009ac
 8008254:	20001390 	.word	0x20001390
 8008258:	200009c0 	.word	0x200009c0
 800825c:	200013a4 	.word	0x200013a4
 8008260:	4bc7      	ldr	r3, [pc, #796]	@ (8008580 <loadMenuTexts+0x11ec>)
 8008262:	4614      	mov	r4, r2
 8008264:	461d      	mov	r5, r3
 8008266:	6828      	ldr	r0, [r5, #0]
 8008268:	6869      	ldr	r1, [r5, #4]
 800826a:	68aa      	ldr	r2, [r5, #8]
 800826c:	68eb      	ldr	r3, [r5, #12]
 800826e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008270:	7c2b      	ldrb	r3, [r5, #16]
 8008272:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8008274:	4ac3      	ldr	r2, [pc, #780]	@ (8008584 <loadMenuTexts+0x11f0>)
 8008276:	4bc4      	ldr	r3, [pc, #784]	@ (8008588 <loadMenuTexts+0x11f4>)
 8008278:	4614      	mov	r4, r2
 800827a:	461d      	mov	r5, r3
 800827c:	6828      	ldr	r0, [r5, #0]
 800827e:	6869      	ldr	r1, [r5, #4]
 8008280:	68aa      	ldr	r2, [r5, #8]
 8008282:	68eb      	ldr	r3, [r5, #12]
 8008284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008286:	7c2b      	ldrb	r3, [r5, #16]
 8008288:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 800828a:	4ac0      	ldr	r2, [pc, #768]	@ (800858c <loadMenuTexts+0x11f8>)
 800828c:	4bc0      	ldr	r3, [pc, #768]	@ (8008590 <loadMenuTexts+0x11fc>)
 800828e:	4614      	mov	r4, r2
 8008290:	461d      	mov	r5, r3
 8008292:	6828      	ldr	r0, [r5, #0]
 8008294:	6869      	ldr	r1, [r5, #4]
 8008296:	68aa      	ldr	r2, [r5, #8]
 8008298:	68eb      	ldr	r3, [r5, #12]
 800829a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800829c:	7c2b      	ldrb	r3, [r5, #16]
 800829e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 80082a0:	4abc      	ldr	r2, [pc, #752]	@ (8008594 <loadMenuTexts+0x1200>)
 80082a2:	4bbd      	ldr	r3, [pc, #756]	@ (8008598 <loadMenuTexts+0x1204>)
 80082a4:	4614      	mov	r4, r2
 80082a6:	461d      	mov	r5, r3
 80082a8:	6828      	ldr	r0, [r5, #0]
 80082aa:	6869      	ldr	r1, [r5, #4]
 80082ac:	68aa      	ldr	r2, [r5, #8]
 80082ae:	68eb      	ldr	r3, [r5, #12]
 80082b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b2:	7c2b      	ldrb	r3, [r5, #16]
 80082b4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 80082b6:	4ab9      	ldr	r2, [pc, #740]	@ (800859c <loadMenuTexts+0x1208>)
 80082b8:	4bb9      	ldr	r3, [pc, #740]	@ (80085a0 <loadMenuTexts+0x120c>)
 80082ba:	4614      	mov	r4, r2
 80082bc:	461d      	mov	r5, r3
 80082be:	6828      	ldr	r0, [r5, #0]
 80082c0:	6869      	ldr	r1, [r5, #4]
 80082c2:	68aa      	ldr	r2, [r5, #8]
 80082c4:	68eb      	ldr	r3, [r5, #12]
 80082c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082c8:	7c2b      	ldrb	r3, [r5, #16]
 80082ca:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80082cc:	4ab5      	ldr	r2, [pc, #724]	@ (80085a4 <loadMenuTexts+0x1210>)
 80082ce:	4bb6      	ldr	r3, [pc, #728]	@ (80085a8 <loadMenuTexts+0x1214>)
 80082d0:	4614      	mov	r4, r2
 80082d2:	461d      	mov	r5, r3
 80082d4:	6828      	ldr	r0, [r5, #0]
 80082d6:	6869      	ldr	r1, [r5, #4]
 80082d8:	68aa      	ldr	r2, [r5, #8]
 80082da:	68eb      	ldr	r3, [r5, #12]
 80082dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082de:	7c2b      	ldrb	r3, [r5, #16]
 80082e0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80082e2:	4ab2      	ldr	r2, [pc, #712]	@ (80085ac <loadMenuTexts+0x1218>)
 80082e4:	4bb2      	ldr	r3, [pc, #712]	@ (80085b0 <loadMenuTexts+0x121c>)
 80082e6:	4614      	mov	r4, r2
 80082e8:	461d      	mov	r5, r3
 80082ea:	6828      	ldr	r0, [r5, #0]
 80082ec:	6869      	ldr	r1, [r5, #4]
 80082ee:	68aa      	ldr	r2, [r5, #8]
 80082f0:	68eb      	ldr	r3, [r5, #12]
 80082f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082f4:	7c2b      	ldrb	r3, [r5, #16]
 80082f6:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80082f8:	4aae      	ldr	r2, [pc, #696]	@ (80085b4 <loadMenuTexts+0x1220>)
 80082fa:	4baf      	ldr	r3, [pc, #700]	@ (80085b8 <loadMenuTexts+0x1224>)
 80082fc:	4614      	mov	r4, r2
 80082fe:	461d      	mov	r5, r3
 8008300:	6828      	ldr	r0, [r5, #0]
 8008302:	6869      	ldr	r1, [r5, #4]
 8008304:	68aa      	ldr	r2, [r5, #8]
 8008306:	68eb      	ldr	r3, [r5, #12]
 8008308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800830a:	7c2b      	ldrb	r3, [r5, #16]
 800830c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 800830e:	4aab      	ldr	r2, [pc, #684]	@ (80085bc <loadMenuTexts+0x1228>)
 8008310:	4bab      	ldr	r3, [pc, #684]	@ (80085c0 <loadMenuTexts+0x122c>)
 8008312:	4614      	mov	r4, r2
 8008314:	461d      	mov	r5, r3
 8008316:	6828      	ldr	r0, [r5, #0]
 8008318:	6869      	ldr	r1, [r5, #4]
 800831a:	68aa      	ldr	r2, [r5, #8]
 800831c:	68eb      	ldr	r3, [r5, #12]
 800831e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008320:	7c2b      	ldrb	r3, [r5, #16]
 8008322:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8008324:	4aa7      	ldr	r2, [pc, #668]	@ (80085c4 <loadMenuTexts+0x1230>)
 8008326:	4ba8      	ldr	r3, [pc, #672]	@ (80085c8 <loadMenuTexts+0x1234>)
 8008328:	4614      	mov	r4, r2
 800832a:	461d      	mov	r5, r3
 800832c:	6828      	ldr	r0, [r5, #0]
 800832e:	6869      	ldr	r1, [r5, #4]
 8008330:	68aa      	ldr	r2, [r5, #8]
 8008332:	68eb      	ldr	r3, [r5, #12]
 8008334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008336:	7c2b      	ldrb	r3, [r5, #16]
 8008338:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 800833a:	4aa4      	ldr	r2, [pc, #656]	@ (80085cc <loadMenuTexts+0x1238>)
 800833c:	4ba4      	ldr	r3, [pc, #656]	@ (80085d0 <loadMenuTexts+0x123c>)
 800833e:	4614      	mov	r4, r2
 8008340:	461d      	mov	r5, r3
 8008342:	6828      	ldr	r0, [r5, #0]
 8008344:	6869      	ldr	r1, [r5, #4]
 8008346:	68aa      	ldr	r2, [r5, #8]
 8008348:	68eb      	ldr	r3, [r5, #12]
 800834a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800834c:	7c2b      	ldrb	r3, [r5, #16]
 800834e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8008350:	4aa0      	ldr	r2, [pc, #640]	@ (80085d4 <loadMenuTexts+0x1240>)
 8008352:	4ba1      	ldr	r3, [pc, #644]	@ (80085d8 <loadMenuTexts+0x1244>)
 8008354:	4614      	mov	r4, r2
 8008356:	461d      	mov	r5, r3
 8008358:	6828      	ldr	r0, [r5, #0]
 800835a:	6869      	ldr	r1, [r5, #4]
 800835c:	68aa      	ldr	r2, [r5, #8]
 800835e:	68eb      	ldr	r3, [r5, #12]
 8008360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008362:	7c2b      	ldrb	r3, [r5, #16]
 8008364:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8008366:	4a9d      	ldr	r2, [pc, #628]	@ (80085dc <loadMenuTexts+0x1248>)
 8008368:	4b9d      	ldr	r3, [pc, #628]	@ (80085e0 <loadMenuTexts+0x124c>)
 800836a:	4614      	mov	r4, r2
 800836c:	461d      	mov	r5, r3
 800836e:	6828      	ldr	r0, [r5, #0]
 8008370:	6869      	ldr	r1, [r5, #4]
 8008372:	68aa      	ldr	r2, [r5, #8]
 8008374:	68eb      	ldr	r3, [r5, #12]
 8008376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008378:	7c2b      	ldrb	r3, [r5, #16]
 800837a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 800837c:	4a99      	ldr	r2, [pc, #612]	@ (80085e4 <loadMenuTexts+0x1250>)
 800837e:	4b9a      	ldr	r3, [pc, #616]	@ (80085e8 <loadMenuTexts+0x1254>)
 8008380:	4614      	mov	r4, r2
 8008382:	461d      	mov	r5, r3
 8008384:	6828      	ldr	r0, [r5, #0]
 8008386:	6869      	ldr	r1, [r5, #4]
 8008388:	68aa      	ldr	r2, [r5, #8]
 800838a:	68eb      	ldr	r3, [r5, #12]
 800838c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800838e:	7c2b      	ldrb	r3, [r5, #16]
 8008390:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8008392:	4a96      	ldr	r2, [pc, #600]	@ (80085ec <loadMenuTexts+0x1258>)
 8008394:	4b96      	ldr	r3, [pc, #600]	@ (80085f0 <loadMenuTexts+0x125c>)
 8008396:	4614      	mov	r4, r2
 8008398:	461d      	mov	r5, r3
 800839a:	6828      	ldr	r0, [r5, #0]
 800839c:	6869      	ldr	r1, [r5, #4]
 800839e:	68aa      	ldr	r2, [r5, #8]
 80083a0:	68eb      	ldr	r3, [r5, #12]
 80083a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083a4:	7c2b      	ldrb	r3, [r5, #16]
 80083a6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 80083a8:	4a92      	ldr	r2, [pc, #584]	@ (80085f4 <loadMenuTexts+0x1260>)
 80083aa:	4b93      	ldr	r3, [pc, #588]	@ (80085f8 <loadMenuTexts+0x1264>)
 80083ac:	4614      	mov	r4, r2
 80083ae:	461d      	mov	r5, r3
 80083b0:	6828      	ldr	r0, [r5, #0]
 80083b2:	6869      	ldr	r1, [r5, #4]
 80083b4:	68aa      	ldr	r2, [r5, #8]
 80083b6:	68eb      	ldr	r3, [r5, #12]
 80083b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ba:	7c2b      	ldrb	r3, [r5, #16]
 80083bc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 80083be:	4a8f      	ldr	r2, [pc, #572]	@ (80085fc <loadMenuTexts+0x1268>)
 80083c0:	4b8f      	ldr	r3, [pc, #572]	@ (8008600 <loadMenuTexts+0x126c>)
 80083c2:	4614      	mov	r4, r2
 80083c4:	461d      	mov	r5, r3
 80083c6:	6828      	ldr	r0, [r5, #0]
 80083c8:	6869      	ldr	r1, [r5, #4]
 80083ca:	68aa      	ldr	r2, [r5, #8]
 80083cc:	68eb      	ldr	r3, [r5, #12]
 80083ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d0:	7c2b      	ldrb	r3, [r5, #16]
 80083d2:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 80083d4:	4a8b      	ldr	r2, [pc, #556]	@ (8008604 <loadMenuTexts+0x1270>)
 80083d6:	4b8c      	ldr	r3, [pc, #560]	@ (8008608 <loadMenuTexts+0x1274>)
 80083d8:	4614      	mov	r4, r2
 80083da:	461d      	mov	r5, r3
 80083dc:	6828      	ldr	r0, [r5, #0]
 80083de:	6869      	ldr	r1, [r5, #4]
 80083e0:	68aa      	ldr	r2, [r5, #8]
 80083e2:	68eb      	ldr	r3, [r5, #12]
 80083e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083e6:	7c2b      	ldrb	r3, [r5, #16]
 80083e8:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 80083ea:	4a88      	ldr	r2, [pc, #544]	@ (800860c <loadMenuTexts+0x1278>)
 80083ec:	4b88      	ldr	r3, [pc, #544]	@ (8008610 <loadMenuTexts+0x127c>)
 80083ee:	4614      	mov	r4, r2
 80083f0:	461d      	mov	r5, r3
 80083f2:	6828      	ldr	r0, [r5, #0]
 80083f4:	6869      	ldr	r1, [r5, #4]
 80083f6:	68aa      	ldr	r2, [r5, #8]
 80083f8:	68eb      	ldr	r3, [r5, #12]
 80083fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083fc:	7c2b      	ldrb	r3, [r5, #16]
 80083fe:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8008400:	4a84      	ldr	r2, [pc, #528]	@ (8008614 <loadMenuTexts+0x1280>)
 8008402:	4b85      	ldr	r3, [pc, #532]	@ (8008618 <loadMenuTexts+0x1284>)
 8008404:	4614      	mov	r4, r2
 8008406:	461d      	mov	r5, r3
 8008408:	6828      	ldr	r0, [r5, #0]
 800840a:	6869      	ldr	r1, [r5, #4]
 800840c:	68aa      	ldr	r2, [r5, #8]
 800840e:	68eb      	ldr	r3, [r5, #12]
 8008410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008412:	7c2b      	ldrb	r3, [r5, #16]
 8008414:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8008416:	4a81      	ldr	r2, [pc, #516]	@ (800861c <loadMenuTexts+0x1288>)
 8008418:	4b81      	ldr	r3, [pc, #516]	@ (8008620 <loadMenuTexts+0x128c>)
 800841a:	4614      	mov	r4, r2
 800841c:	461d      	mov	r5, r3
 800841e:	6828      	ldr	r0, [r5, #0]
 8008420:	6869      	ldr	r1, [r5, #4]
 8008422:	68aa      	ldr	r2, [r5, #8]
 8008424:	68eb      	ldr	r3, [r5, #12]
 8008426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008428:	7c2b      	ldrb	r3, [r5, #16]
 800842a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 800842c:	4a7d      	ldr	r2, [pc, #500]	@ (8008624 <loadMenuTexts+0x1290>)
 800842e:	4b7e      	ldr	r3, [pc, #504]	@ (8008628 <loadMenuTexts+0x1294>)
 8008430:	4614      	mov	r4, r2
 8008432:	461d      	mov	r5, r3
 8008434:	6828      	ldr	r0, [r5, #0]
 8008436:	6869      	ldr	r1, [r5, #4]
 8008438:	68aa      	ldr	r2, [r5, #8]
 800843a:	68eb      	ldr	r3, [r5, #12]
 800843c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800843e:	7c2b      	ldrb	r3, [r5, #16]
 8008440:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8008442:	4a7a      	ldr	r2, [pc, #488]	@ (800862c <loadMenuTexts+0x1298>)
 8008444:	4b7a      	ldr	r3, [pc, #488]	@ (8008630 <loadMenuTexts+0x129c>)
 8008446:	4614      	mov	r4, r2
 8008448:	461d      	mov	r5, r3
 800844a:	6828      	ldr	r0, [r5, #0]
 800844c:	6869      	ldr	r1, [r5, #4]
 800844e:	68aa      	ldr	r2, [r5, #8]
 8008450:	68eb      	ldr	r3, [r5, #12]
 8008452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008454:	7c2b      	ldrb	r3, [r5, #16]
 8008456:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8008458:	4a76      	ldr	r2, [pc, #472]	@ (8008634 <loadMenuTexts+0x12a0>)
 800845a:	4b77      	ldr	r3, [pc, #476]	@ (8008638 <loadMenuTexts+0x12a4>)
 800845c:	4614      	mov	r4, r2
 800845e:	461d      	mov	r5, r3
 8008460:	6828      	ldr	r0, [r5, #0]
 8008462:	6869      	ldr	r1, [r5, #4]
 8008464:	68aa      	ldr	r2, [r5, #8]
 8008466:	68eb      	ldr	r3, [r5, #12]
 8008468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800846a:	7c2b      	ldrb	r3, [r5, #16]
 800846c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 800846e:	4a73      	ldr	r2, [pc, #460]	@ (800863c <loadMenuTexts+0x12a8>)
 8008470:	4b73      	ldr	r3, [pc, #460]	@ (8008640 <loadMenuTexts+0x12ac>)
 8008472:	4614      	mov	r4, r2
 8008474:	461d      	mov	r5, r3
 8008476:	6828      	ldr	r0, [r5, #0]
 8008478:	6869      	ldr	r1, [r5, #4]
 800847a:	68aa      	ldr	r2, [r5, #8]
 800847c:	68eb      	ldr	r3, [r5, #12]
 800847e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008480:	7c2b      	ldrb	r3, [r5, #16]
 8008482:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008484:	4a6f      	ldr	r2, [pc, #444]	@ (8008644 <loadMenuTexts+0x12b0>)
 8008486:	4b70      	ldr	r3, [pc, #448]	@ (8008648 <loadMenuTexts+0x12b4>)
 8008488:	4614      	mov	r4, r2
 800848a:	461d      	mov	r5, r3
 800848c:	6828      	ldr	r0, [r5, #0]
 800848e:	6869      	ldr	r1, [r5, #4]
 8008490:	68aa      	ldr	r2, [r5, #8]
 8008492:	68eb      	ldr	r3, [r5, #12]
 8008494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008496:	7c2b      	ldrb	r3, [r5, #16]
 8008498:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800849a:	4a6c      	ldr	r2, [pc, #432]	@ (800864c <loadMenuTexts+0x12b8>)
 800849c:	4b6c      	ldr	r3, [pc, #432]	@ (8008650 <loadMenuTexts+0x12bc>)
 800849e:	4614      	mov	r4, r2
 80084a0:	461d      	mov	r5, r3
 80084a2:	6828      	ldr	r0, [r5, #0]
 80084a4:	6869      	ldr	r1, [r5, #4]
 80084a6:	68aa      	ldr	r2, [r5, #8]
 80084a8:	68eb      	ldr	r3, [r5, #12]
 80084aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ac:	7c2b      	ldrb	r3, [r5, #16]
 80084ae:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 80084b0:	4a68      	ldr	r2, [pc, #416]	@ (8008654 <loadMenuTexts+0x12c0>)
 80084b2:	4b69      	ldr	r3, [pc, #420]	@ (8008658 <loadMenuTexts+0x12c4>)
 80084b4:	4614      	mov	r4, r2
 80084b6:	461d      	mov	r5, r3
 80084b8:	6828      	ldr	r0, [r5, #0]
 80084ba:	6869      	ldr	r1, [r5, #4]
 80084bc:	68aa      	ldr	r2, [r5, #8]
 80084be:	68eb      	ldr	r3, [r5, #12]
 80084c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084c2:	7c2b      	ldrb	r3, [r5, #16]
 80084c4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 80084c6:	4a65      	ldr	r2, [pc, #404]	@ (800865c <loadMenuTexts+0x12c8>)
 80084c8:	4b65      	ldr	r3, [pc, #404]	@ (8008660 <loadMenuTexts+0x12cc>)
 80084ca:	4614      	mov	r4, r2
 80084cc:	461d      	mov	r5, r3
 80084ce:	6828      	ldr	r0, [r5, #0]
 80084d0:	6869      	ldr	r1, [r5, #4]
 80084d2:	68aa      	ldr	r2, [r5, #8]
 80084d4:	68eb      	ldr	r3, [r5, #12]
 80084d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084d8:	7c2b      	ldrb	r3, [r5, #16]
 80084da:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80084dc:	4a61      	ldr	r2, [pc, #388]	@ (8008664 <loadMenuTexts+0x12d0>)
 80084de:	4b62      	ldr	r3, [pc, #392]	@ (8008668 <loadMenuTexts+0x12d4>)
 80084e0:	4614      	mov	r4, r2
 80084e2:	461d      	mov	r5, r3
 80084e4:	6828      	ldr	r0, [r5, #0]
 80084e6:	6869      	ldr	r1, [r5, #4]
 80084e8:	68aa      	ldr	r2, [r5, #8]
 80084ea:	68eb      	ldr	r3, [r5, #12]
 80084ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ee:	7c2b      	ldrb	r3, [r5, #16]
 80084f0:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80084f2:	4a5e      	ldr	r2, [pc, #376]	@ (800866c <loadMenuTexts+0x12d8>)
 80084f4:	4b5e      	ldr	r3, [pc, #376]	@ (8008670 <loadMenuTexts+0x12dc>)
 80084f6:	4614      	mov	r4, r2
 80084f8:	461d      	mov	r5, r3
 80084fa:	6828      	ldr	r0, [r5, #0]
 80084fc:	6869      	ldr	r1, [r5, #4]
 80084fe:	68aa      	ldr	r2, [r5, #8]
 8008500:	68eb      	ldr	r3, [r5, #12]
 8008502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008504:	7c2b      	ldrb	r3, [r5, #16]
 8008506:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8008508:	4a5a      	ldr	r2, [pc, #360]	@ (8008674 <loadMenuTexts+0x12e0>)
 800850a:	4b5b      	ldr	r3, [pc, #364]	@ (8008678 <loadMenuTexts+0x12e4>)
 800850c:	4614      	mov	r4, r2
 800850e:	461d      	mov	r5, r3
 8008510:	6828      	ldr	r0, [r5, #0]
 8008512:	6869      	ldr	r1, [r5, #4]
 8008514:	68aa      	ldr	r2, [r5, #8]
 8008516:	68eb      	ldr	r3, [r5, #12]
 8008518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800851a:	7c2b      	ldrb	r3, [r5, #16]
 800851c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800851e:	4a57      	ldr	r2, [pc, #348]	@ (800867c <loadMenuTexts+0x12e8>)
 8008520:	4b57      	ldr	r3, [pc, #348]	@ (8008680 <loadMenuTexts+0x12ec>)
 8008522:	4614      	mov	r4, r2
 8008524:	461d      	mov	r5, r3
 8008526:	6828      	ldr	r0, [r5, #0]
 8008528:	6869      	ldr	r1, [r5, #4]
 800852a:	68aa      	ldr	r2, [r5, #8]
 800852c:	68eb      	ldr	r3, [r5, #12]
 800852e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008530:	7c2b      	ldrb	r3, [r5, #16]
 8008532:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8008534:	4a53      	ldr	r2, [pc, #332]	@ (8008684 <loadMenuTexts+0x12f0>)
 8008536:	4b54      	ldr	r3, [pc, #336]	@ (8008688 <loadMenuTexts+0x12f4>)
 8008538:	4614      	mov	r4, r2
 800853a:	461d      	mov	r5, r3
 800853c:	6828      	ldr	r0, [r5, #0]
 800853e:	6869      	ldr	r1, [r5, #4]
 8008540:	68aa      	ldr	r2, [r5, #8]
 8008542:	68eb      	ldr	r3, [r5, #12]
 8008544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008546:	7c2b      	ldrb	r3, [r5, #16]
 8008548:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800854a:	4a50      	ldr	r2, [pc, #320]	@ (800868c <loadMenuTexts+0x12f8>)
 800854c:	4b50      	ldr	r3, [pc, #320]	@ (8008690 <loadMenuTexts+0x12fc>)
 800854e:	4614      	mov	r4, r2
 8008550:	461d      	mov	r5, r3
 8008552:	6828      	ldr	r0, [r5, #0]
 8008554:	6869      	ldr	r1, [r5, #4]
 8008556:	68aa      	ldr	r2, [r5, #8]
 8008558:	68eb      	ldr	r3, [r5, #12]
 800855a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800855c:	7c2b      	ldrb	r3, [r5, #16]
 800855e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8008560:	4a4c      	ldr	r2, [pc, #304]	@ (8008694 <loadMenuTexts+0x1300>)
 8008562:	4b4d      	ldr	r3, [pc, #308]	@ (8008698 <loadMenuTexts+0x1304>)
 8008564:	4614      	mov	r4, r2
 8008566:	461d      	mov	r5, r3
 8008568:	6828      	ldr	r0, [r5, #0]
 800856a:	6869      	ldr	r1, [r5, #4]
 800856c:	68aa      	ldr	r2, [r5, #8]
 800856e:	68eb      	ldr	r3, [r5, #12]
 8008570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008572:	7c2b      	ldrb	r3, [r5, #16]
 8008574:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8008576:	4a49      	ldr	r2, [pc, #292]	@ (800869c <loadMenuTexts+0x1308>)
 8008578:	4b49      	ldr	r3, [pc, #292]	@ (80086a0 <loadMenuTexts+0x130c>)
 800857a:	4614      	mov	r4, r2
 800857c:	461d      	mov	r5, r3
 800857e:	e091      	b.n	80086a4 <loadMenuTexts+0x1310>
 8008580:	200009d4 	.word	0x200009d4
 8008584:	200013b8 	.word	0x200013b8
 8008588:	200009e8 	.word	0x200009e8
 800858c:	200013cc 	.word	0x200013cc
 8008590:	200009fc 	.word	0x200009fc
 8008594:	200013e0 	.word	0x200013e0
 8008598:	20000a10 	.word	0x20000a10
 800859c:	200013f4 	.word	0x200013f4
 80085a0:	20000a24 	.word	0x20000a24
 80085a4:	20001408 	.word	0x20001408
 80085a8:	20000a38 	.word	0x20000a38
 80085ac:	2000141c 	.word	0x2000141c
 80085b0:	20000a4c 	.word	0x20000a4c
 80085b4:	20001430 	.word	0x20001430
 80085b8:	20000a60 	.word	0x20000a60
 80085bc:	20001444 	.word	0x20001444
 80085c0:	20000a74 	.word	0x20000a74
 80085c4:	20001458 	.word	0x20001458
 80085c8:	20000a88 	.word	0x20000a88
 80085cc:	2000146c 	.word	0x2000146c
 80085d0:	20000a9c 	.word	0x20000a9c
 80085d4:	20001480 	.word	0x20001480
 80085d8:	20000ab0 	.word	0x20000ab0
 80085dc:	20001494 	.word	0x20001494
 80085e0:	20000ac4 	.word	0x20000ac4
 80085e4:	200014a8 	.word	0x200014a8
 80085e8:	20000ad8 	.word	0x20000ad8
 80085ec:	200014bc 	.word	0x200014bc
 80085f0:	20000aec 	.word	0x20000aec
 80085f4:	200014d0 	.word	0x200014d0
 80085f8:	20000b00 	.word	0x20000b00
 80085fc:	200014e4 	.word	0x200014e4
 8008600:	20000b14 	.word	0x20000b14
 8008604:	200014f8 	.word	0x200014f8
 8008608:	20000b28 	.word	0x20000b28
 800860c:	2000150c 	.word	0x2000150c
 8008610:	20000b3c 	.word	0x20000b3c
 8008614:	20001520 	.word	0x20001520
 8008618:	20000b50 	.word	0x20000b50
 800861c:	20001534 	.word	0x20001534
 8008620:	20000b64 	.word	0x20000b64
 8008624:	20001548 	.word	0x20001548
 8008628:	20000b78 	.word	0x20000b78
 800862c:	2000155c 	.word	0x2000155c
 8008630:	20000b8c 	.word	0x20000b8c
 8008634:	20001570 	.word	0x20001570
 8008638:	20000ba0 	.word	0x20000ba0
 800863c:	20001584 	.word	0x20001584
 8008640:	20000bb4 	.word	0x20000bb4
 8008644:	20001598 	.word	0x20001598
 8008648:	20000bc8 	.word	0x20000bc8
 800864c:	200015ac 	.word	0x200015ac
 8008650:	20000bdc 	.word	0x20000bdc
 8008654:	200015c0 	.word	0x200015c0
 8008658:	20000bf0 	.word	0x20000bf0
 800865c:	200015d4 	.word	0x200015d4
 8008660:	20000c04 	.word	0x20000c04
 8008664:	200015e8 	.word	0x200015e8
 8008668:	20000c18 	.word	0x20000c18
 800866c:	200015fc 	.word	0x200015fc
 8008670:	20000c2c 	.word	0x20000c2c
 8008674:	20001610 	.word	0x20001610
 8008678:	20000c40 	.word	0x20000c40
 800867c:	20001624 	.word	0x20001624
 8008680:	20000c54 	.word	0x20000c54
 8008684:	20001638 	.word	0x20001638
 8008688:	20000c68 	.word	0x20000c68
 800868c:	2000164c 	.word	0x2000164c
 8008690:	20000cf4 	.word	0x20000cf4
 8008694:	20001660 	.word	0x20001660
 8008698:	20000d08 	.word	0x20000d08
 800869c:	20001674 	.word	0x20001674
 80086a0:	20000ccc 	.word	0x20000ccc
 80086a4:	6828      	ldr	r0, [r5, #0]
 80086a6:	6869      	ldr	r1, [r5, #4]
 80086a8:	68aa      	ldr	r2, [r5, #8]
 80086aa:	68eb      	ldr	r3, [r5, #12]
 80086ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086ae:	7c2b      	ldrb	r3, [r5, #16]
 80086b0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80086b2:	4a5b      	ldr	r2, [pc, #364]	@ (8008820 <loadMenuTexts+0x148c>)
 80086b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008824 <loadMenuTexts+0x1490>)
 80086b6:	4614      	mov	r4, r2
 80086b8:	461d      	mov	r5, r3
 80086ba:	6828      	ldr	r0, [r5, #0]
 80086bc:	6869      	ldr	r1, [r5, #4]
 80086be:	68aa      	ldr	r2, [r5, #8]
 80086c0:	68eb      	ldr	r3, [r5, #12]
 80086c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086c4:	7c2b      	ldrb	r3, [r5, #16]
 80086c6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80086c8:	4a57      	ldr	r2, [pc, #348]	@ (8008828 <loadMenuTexts+0x1494>)
 80086ca:	4b58      	ldr	r3, [pc, #352]	@ (800882c <loadMenuTexts+0x1498>)
 80086cc:	4614      	mov	r4, r2
 80086ce:	461d      	mov	r5, r3
 80086d0:	6828      	ldr	r0, [r5, #0]
 80086d2:	6869      	ldr	r1, [r5, #4]
 80086d4:	68aa      	ldr	r2, [r5, #8]
 80086d6:	68eb      	ldr	r3, [r5, #12]
 80086d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086da:	7c2b      	ldrb	r3, [r5, #16]
 80086dc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80086de:	4a54      	ldr	r2, [pc, #336]	@ (8008830 <loadMenuTexts+0x149c>)
 80086e0:	4b54      	ldr	r3, [pc, #336]	@ (8008834 <loadMenuTexts+0x14a0>)
 80086e2:	4614      	mov	r4, r2
 80086e4:	461d      	mov	r5, r3
 80086e6:	6828      	ldr	r0, [r5, #0]
 80086e8:	6869      	ldr	r1, [r5, #4]
 80086ea:	68aa      	ldr	r2, [r5, #8]
 80086ec:	68eb      	ldr	r3, [r5, #12]
 80086ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086f0:	7c2b      	ldrb	r3, [r5, #16]
 80086f2:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80086f4:	4a50      	ldr	r2, [pc, #320]	@ (8008838 <loadMenuTexts+0x14a4>)
 80086f6:	4b51      	ldr	r3, [pc, #324]	@ (800883c <loadMenuTexts+0x14a8>)
 80086f8:	4614      	mov	r4, r2
 80086fa:	461d      	mov	r5, r3
 80086fc:	6828      	ldr	r0, [r5, #0]
 80086fe:	6869      	ldr	r1, [r5, #4]
 8008700:	68aa      	ldr	r2, [r5, #8]
 8008702:	68eb      	ldr	r3, [r5, #12]
 8008704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008706:	7c2b      	ldrb	r3, [r5, #16]
 8008708:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800870a:	4a4d      	ldr	r2, [pc, #308]	@ (8008840 <loadMenuTexts+0x14ac>)
 800870c:	4b4d      	ldr	r3, [pc, #308]	@ (8008844 <loadMenuTexts+0x14b0>)
 800870e:	4614      	mov	r4, r2
 8008710:	461d      	mov	r5, r3
 8008712:	6828      	ldr	r0, [r5, #0]
 8008714:	6869      	ldr	r1, [r5, #4]
 8008716:	68aa      	ldr	r2, [r5, #8]
 8008718:	68eb      	ldr	r3, [r5, #12]
 800871a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800871c:	7c2b      	ldrb	r3, [r5, #16]
 800871e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8008720:	4a49      	ldr	r2, [pc, #292]	@ (8008848 <loadMenuTexts+0x14b4>)
 8008722:	4b4a      	ldr	r3, [pc, #296]	@ (800884c <loadMenuTexts+0x14b8>)
 8008724:	4614      	mov	r4, r2
 8008726:	461d      	mov	r5, r3
 8008728:	6828      	ldr	r0, [r5, #0]
 800872a:	6869      	ldr	r1, [r5, #4]
 800872c:	68aa      	ldr	r2, [r5, #8]
 800872e:	68eb      	ldr	r3, [r5, #12]
 8008730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008732:	7c2b      	ldrb	r3, [r5, #16]
 8008734:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8008736:	4a46      	ldr	r2, [pc, #280]	@ (8008850 <loadMenuTexts+0x14bc>)
 8008738:	4b46      	ldr	r3, [pc, #280]	@ (8008854 <loadMenuTexts+0x14c0>)
 800873a:	4614      	mov	r4, r2
 800873c:	461d      	mov	r5, r3
 800873e:	6828      	ldr	r0, [r5, #0]
 8008740:	6869      	ldr	r1, [r5, #4]
 8008742:	68aa      	ldr	r2, [r5, #8]
 8008744:	68eb      	ldr	r3, [r5, #12]
 8008746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008748:	7c2b      	ldrb	r3, [r5, #16]
 800874a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 800874c:	4a42      	ldr	r2, [pc, #264]	@ (8008858 <loadMenuTexts+0x14c4>)
 800874e:	4b43      	ldr	r3, [pc, #268]	@ (800885c <loadMenuTexts+0x14c8>)
 8008750:	4614      	mov	r4, r2
 8008752:	461d      	mov	r5, r3
 8008754:	6828      	ldr	r0, [r5, #0]
 8008756:	6869      	ldr	r1, [r5, #4]
 8008758:	68aa      	ldr	r2, [r5, #8]
 800875a:	68eb      	ldr	r3, [r5, #12]
 800875c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800875e:	7c2b      	ldrb	r3, [r5, #16]
 8008760:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8008762:	4a3f      	ldr	r2, [pc, #252]	@ (8008860 <loadMenuTexts+0x14cc>)
 8008764:	4b3f      	ldr	r3, [pc, #252]	@ (8008864 <loadMenuTexts+0x14d0>)
 8008766:	4614      	mov	r4, r2
 8008768:	461d      	mov	r5, r3
 800876a:	6828      	ldr	r0, [r5, #0]
 800876c:	6869      	ldr	r1, [r5, #4]
 800876e:	68aa      	ldr	r2, [r5, #8]
 8008770:	68eb      	ldr	r3, [r5, #12]
 8008772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008774:	7c2b      	ldrb	r3, [r5, #16]
 8008776:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8008778:	4a3b      	ldr	r2, [pc, #236]	@ (8008868 <loadMenuTexts+0x14d4>)
 800877a:	4b3c      	ldr	r3, [pc, #240]	@ (800886c <loadMenuTexts+0x14d8>)
 800877c:	4614      	mov	r4, r2
 800877e:	461d      	mov	r5, r3
 8008780:	6828      	ldr	r0, [r5, #0]
 8008782:	6869      	ldr	r1, [r5, #4]
 8008784:	68aa      	ldr	r2, [r5, #8]
 8008786:	68eb      	ldr	r3, [r5, #12]
 8008788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800878a:	7c2b      	ldrb	r3, [r5, #16]
 800878c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 800878e:	4a38      	ldr	r2, [pc, #224]	@ (8008870 <loadMenuTexts+0x14dc>)
 8008790:	4b38      	ldr	r3, [pc, #224]	@ (8008874 <loadMenuTexts+0x14e0>)
 8008792:	4614      	mov	r4, r2
 8008794:	461d      	mov	r5, r3
 8008796:	6828      	ldr	r0, [r5, #0]
 8008798:	6869      	ldr	r1, [r5, #4]
 800879a:	68aa      	ldr	r2, [r5, #8]
 800879c:	68eb      	ldr	r3, [r5, #12]
 800879e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a0:	7c2b      	ldrb	r3, [r5, #16]
 80087a2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80087a4:	4a34      	ldr	r2, [pc, #208]	@ (8008878 <loadMenuTexts+0x14e4>)
 80087a6:	4b35      	ldr	r3, [pc, #212]	@ (800887c <loadMenuTexts+0x14e8>)
 80087a8:	4614      	mov	r4, r2
 80087aa:	461d      	mov	r5, r3
 80087ac:	6828      	ldr	r0, [r5, #0]
 80087ae:	6869      	ldr	r1, [r5, #4]
 80087b0:	68aa      	ldr	r2, [r5, #8]
 80087b2:	68eb      	ldr	r3, [r5, #12]
 80087b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b6:	7c2b      	ldrb	r3, [r5, #16]
 80087b8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80087ba:	4a31      	ldr	r2, [pc, #196]	@ (8008880 <loadMenuTexts+0x14ec>)
 80087bc:	4b31      	ldr	r3, [pc, #196]	@ (8008884 <loadMenuTexts+0x14f0>)
 80087be:	4614      	mov	r4, r2
 80087c0:	461d      	mov	r5, r3
 80087c2:	6828      	ldr	r0, [r5, #0]
 80087c4:	6869      	ldr	r1, [r5, #4]
 80087c6:	68aa      	ldr	r2, [r5, #8]
 80087c8:	68eb      	ldr	r3, [r5, #12]
 80087ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087cc:	7c2b      	ldrb	r3, [r5, #16]
 80087ce:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80087d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008888 <loadMenuTexts+0x14f4>)
 80087d2:	4b2e      	ldr	r3, [pc, #184]	@ (800888c <loadMenuTexts+0x14f8>)
 80087d4:	4614      	mov	r4, r2
 80087d6:	461d      	mov	r5, r3
 80087d8:	6828      	ldr	r0, [r5, #0]
 80087da:	6869      	ldr	r1, [r5, #4]
 80087dc:	68aa      	ldr	r2, [r5, #8]
 80087de:	68eb      	ldr	r3, [r5, #12]
 80087e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e2:	7c2b      	ldrb	r3, [r5, #16]
 80087e4:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80087e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008890 <loadMenuTexts+0x14fc>)
 80087e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008894 <loadMenuTexts+0x1500>)
 80087ea:	4614      	mov	r4, r2
 80087ec:	461d      	mov	r5, r3
 80087ee:	6828      	ldr	r0, [r5, #0]
 80087f0:	6869      	ldr	r1, [r5, #4]
 80087f2:	68aa      	ldr	r2, [r5, #8]
 80087f4:	68eb      	ldr	r3, [r5, #12]
 80087f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087f8:	7c2b      	ldrb	r3, [r5, #16]
 80087fa:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80087fc:	4a26      	ldr	r2, [pc, #152]	@ (8008898 <loadMenuTexts+0x1504>)
 80087fe:	4b27      	ldr	r3, [pc, #156]	@ (800889c <loadMenuTexts+0x1508>)
 8008800:	4614      	mov	r4, r2
 8008802:	461d      	mov	r5, r3
 8008804:	6828      	ldr	r0, [r5, #0]
 8008806:	6869      	ldr	r1, [r5, #4]
 8008808:	68aa      	ldr	r2, [r5, #8]
 800880a:	68eb      	ldr	r3, [r5, #12]
 800880c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800880e:	7c2b      	ldrb	r3, [r5, #16]
 8008810:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8008812:	f000 f845 	bl	80088a0 <menuVariableFinisher>
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bdb0      	pop	{r4, r5, r7, pc}
 800881e:	bf00      	nop
 8008820:	20001688 	.word	0x20001688
 8008824:	20000ce0 	.word	0x20000ce0
 8008828:	2000169c 	.word	0x2000169c
 800882c:	20000d44 	.word	0x20000d44
 8008830:	200016b0 	.word	0x200016b0
 8008834:	20000d58 	.word	0x20000d58
 8008838:	200016c4 	.word	0x200016c4
 800883c:	20000d94 	.word	0x20000d94
 8008840:	200016d8 	.word	0x200016d8
 8008844:	20000da8 	.word	0x20000da8
 8008848:	200016ec 	.word	0x200016ec
 800884c:	20000de4 	.word	0x20000de4
 8008850:	20001700 	.word	0x20001700
 8008854:	20000df8 	.word	0x20000df8
 8008858:	20001714 	.word	0x20001714
 800885c:	20000e20 	.word	0x20000e20
 8008860:	20001728 	.word	0x20001728
 8008864:	20000e48 	.word	0x20000e48
 8008868:	2000173c 	.word	0x2000173c
 800886c:	20000e70 	.word	0x20000e70
 8008870:	20001750 	.word	0x20001750
 8008874:	20000e98 	.word	0x20000e98
 8008878:	20001764 	.word	0x20001764
 800887c:	20000ec0 	.word	0x20000ec0
 8008880:	20001778 	.word	0x20001778
 8008884:	20000ee8 	.word	0x20000ee8
 8008888:	2000178c 	.word	0x2000178c
 800888c:	20000f10 	.word	0x20000f10
 8008890:	200017a0 	.word	0x200017a0
 8008894:	20000f38 	.word	0x20000f38
 8008898:	200017b4 	.word	0x200017b4
 800889c:	20000f60 	.word	0x20000f60

080088a0 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80088a4:	4b99      	ldr	r3, [pc, #612]	@ (8008b0c <menuVariableFinisher+0x26c>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80088aa:	4b99      	ldr	r3, [pc, #612]	@ (8008b10 <menuVariableFinisher+0x270>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80088b0:	4b98      	ldr	r3, [pc, #608]	@ (8008b14 <menuVariableFinisher+0x274>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80088b6:	4b98      	ldr	r3, [pc, #608]	@ (8008b18 <menuVariableFinisher+0x278>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80088bc:	4b97      	ldr	r3, [pc, #604]	@ (8008b1c <menuVariableFinisher+0x27c>)
 80088be:	2200      	movs	r2, #0
 80088c0:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80088c2:	4b97      	ldr	r3, [pc, #604]	@ (8008b20 <menuVariableFinisher+0x280>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80088c8:	4b96      	ldr	r3, [pc, #600]	@ (8008b24 <menuVariableFinisher+0x284>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80088ce:	4b96      	ldr	r3, [pc, #600]	@ (8008b28 <menuVariableFinisher+0x288>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80088d4:	4b95      	ldr	r3, [pc, #596]	@ (8008b2c <menuVariableFinisher+0x28c>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80088da:	4b95      	ldr	r3, [pc, #596]	@ (8008b30 <menuVariableFinisher+0x290>)
 80088dc:	2200      	movs	r2, #0
 80088de:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80088e0:	4b94      	ldr	r3, [pc, #592]	@ (8008b34 <menuVariableFinisher+0x294>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80088e6:	4b94      	ldr	r3, [pc, #592]	@ (8008b38 <menuVariableFinisher+0x298>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80088ec:	4b93      	ldr	r3, [pc, #588]	@ (8008b3c <menuVariableFinisher+0x29c>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80088f2:	4b93      	ldr	r3, [pc, #588]	@ (8008b40 <menuVariableFinisher+0x2a0>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80088f8:	4b92      	ldr	r3, [pc, #584]	@ (8008b44 <menuVariableFinisher+0x2a4>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80088fe:	4b92      	ldr	r3, [pc, #584]	@ (8008b48 <menuVariableFinisher+0x2a8>)
 8008900:	2200      	movs	r2, #0
 8008902:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8008904:	4b91      	ldr	r3, [pc, #580]	@ (8008b4c <menuVariableFinisher+0x2ac>)
 8008906:	2200      	movs	r2, #0
 8008908:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800890a:	4b91      	ldr	r3, [pc, #580]	@ (8008b50 <menuVariableFinisher+0x2b0>)
 800890c:	2200      	movs	r2, #0
 800890e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8008910:	4b90      	ldr	r3, [pc, #576]	@ (8008b54 <menuVariableFinisher+0x2b4>)
 8008912:	2200      	movs	r2, #0
 8008914:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8008916:	4b90      	ldr	r3, [pc, #576]	@ (8008b58 <menuVariableFinisher+0x2b8>)
 8008918:	2200      	movs	r2, #0
 800891a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800891c:	4b8f      	ldr	r3, [pc, #572]	@ (8008b5c <menuVariableFinisher+0x2bc>)
 800891e:	2200      	movs	r2, #0
 8008920:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8008922:	4b8f      	ldr	r3, [pc, #572]	@ (8008b60 <menuVariableFinisher+0x2c0>)
 8008924:	2200      	movs	r2, #0
 8008926:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8008928:	4b8e      	ldr	r3, [pc, #568]	@ (8008b64 <menuVariableFinisher+0x2c4>)
 800892a:	2200      	movs	r2, #0
 800892c:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800892e:	4b8e      	ldr	r3, [pc, #568]	@ (8008b68 <menuVariableFinisher+0x2c8>)
 8008930:	2200      	movs	r2, #0
 8008932:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8008934:	4b8d      	ldr	r3, [pc, #564]	@ (8008b6c <menuVariableFinisher+0x2cc>)
 8008936:	2200      	movs	r2, #0
 8008938:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800893a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b70 <menuVariableFinisher+0x2d0>)
 800893c:	2200      	movs	r2, #0
 800893e:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8008940:	4b8c      	ldr	r3, [pc, #560]	@ (8008b74 <menuVariableFinisher+0x2d4>)
 8008942:	2200      	movs	r2, #0
 8008944:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8008946:	4b8c      	ldr	r3, [pc, #560]	@ (8008b78 <menuVariableFinisher+0x2d8>)
 8008948:	2200      	movs	r2, #0
 800894a:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 800894c:	4b8b      	ldr	r3, [pc, #556]	@ (8008b7c <menuVariableFinisher+0x2dc>)
 800894e:	2200      	movs	r2, #0
 8008950:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8008952:	4b8b      	ldr	r3, [pc, #556]	@ (8008b80 <menuVariableFinisher+0x2e0>)
 8008954:	2200      	movs	r2, #0
 8008956:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8008958:	4b8a      	ldr	r3, [pc, #552]	@ (8008b84 <menuVariableFinisher+0x2e4>)
 800895a:	2200      	movs	r2, #0
 800895c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800895e:	4b8a      	ldr	r3, [pc, #552]	@ (8008b88 <menuVariableFinisher+0x2e8>)
 8008960:	2200      	movs	r2, #0
 8008962:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8008964:	4b89      	ldr	r3, [pc, #548]	@ (8008b8c <menuVariableFinisher+0x2ec>)
 8008966:	2200      	movs	r2, #0
 8008968:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800896a:	4b89      	ldr	r3, [pc, #548]	@ (8008b90 <menuVariableFinisher+0x2f0>)
 800896c:	2200      	movs	r2, #0
 800896e:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8008970:	4b88      	ldr	r3, [pc, #544]	@ (8008b94 <menuVariableFinisher+0x2f4>)
 8008972:	2200      	movs	r2, #0
 8008974:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8008976:	4b88      	ldr	r3, [pc, #544]	@ (8008b98 <menuVariableFinisher+0x2f8>)
 8008978:	2200      	movs	r2, #0
 800897a:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 800897c:	4b87      	ldr	r3, [pc, #540]	@ (8008b9c <menuVariableFinisher+0x2fc>)
 800897e:	2200      	movs	r2, #0
 8008980:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8008982:	4b87      	ldr	r3, [pc, #540]	@ (8008ba0 <menuVariableFinisher+0x300>)
 8008984:	2200      	movs	r2, #0
 8008986:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8008988:	4b86      	ldr	r3, [pc, #536]	@ (8008ba4 <menuVariableFinisher+0x304>)
 800898a:	2200      	movs	r2, #0
 800898c:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800898e:	4b86      	ldr	r3, [pc, #536]	@ (8008ba8 <menuVariableFinisher+0x308>)
 8008990:	2200      	movs	r2, #0
 8008992:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8008994:	4b85      	ldr	r3, [pc, #532]	@ (8008bac <menuVariableFinisher+0x30c>)
 8008996:	2200      	movs	r2, #0
 8008998:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800899a:	4b85      	ldr	r3, [pc, #532]	@ (8008bb0 <menuVariableFinisher+0x310>)
 800899c:	2200      	movs	r2, #0
 800899e:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80089a0:	4b84      	ldr	r3, [pc, #528]	@ (8008bb4 <menuVariableFinisher+0x314>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80089a6:	4b84      	ldr	r3, [pc, #528]	@ (8008bb8 <menuVariableFinisher+0x318>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80089ac:	4b83      	ldr	r3, [pc, #524]	@ (8008bbc <menuVariableFinisher+0x31c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80089b2:	4b83      	ldr	r3, [pc, #524]	@ (8008bc0 <menuVariableFinisher+0x320>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80089b8:	4b82      	ldr	r3, [pc, #520]	@ (8008bc4 <menuVariableFinisher+0x324>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80089be:	4b82      	ldr	r3, [pc, #520]	@ (8008bc8 <menuVariableFinisher+0x328>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80089c4:	4b81      	ldr	r3, [pc, #516]	@ (8008bcc <menuVariableFinisher+0x32c>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80089ca:	4b81      	ldr	r3, [pc, #516]	@ (8008bd0 <menuVariableFinisher+0x330>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80089d0:	4b80      	ldr	r3, [pc, #512]	@ (8008bd4 <menuVariableFinisher+0x334>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80089d6:	4b80      	ldr	r3, [pc, #512]	@ (8008bd8 <menuVariableFinisher+0x338>)
 80089d8:	2200      	movs	r2, #0
 80089da:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80089dc:	4b7f      	ldr	r3, [pc, #508]	@ (8008bdc <menuVariableFinisher+0x33c>)
 80089de:	2200      	movs	r2, #0
 80089e0:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80089e2:	4b7f      	ldr	r3, [pc, #508]	@ (8008be0 <menuVariableFinisher+0x340>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80089e8:	4b7e      	ldr	r3, [pc, #504]	@ (8008be4 <menuVariableFinisher+0x344>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80089ee:	4b7e      	ldr	r3, [pc, #504]	@ (8008be8 <menuVariableFinisher+0x348>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80089f4:	4b7d      	ldr	r3, [pc, #500]	@ (8008bec <menuVariableFinisher+0x34c>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80089fa:	4b7d      	ldr	r3, [pc, #500]	@ (8008bf0 <menuVariableFinisher+0x350>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8008a00:	4b7c      	ldr	r3, [pc, #496]	@ (8008bf4 <menuVariableFinisher+0x354>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8008a06:	4b7c      	ldr	r3, [pc, #496]	@ (8008bf8 <menuVariableFinisher+0x358>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8008a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8008bfc <menuVariableFinisher+0x35c>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8008a12:	4b7b      	ldr	r3, [pc, #492]	@ (8008c00 <menuVariableFinisher+0x360>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8008a18:	4b7a      	ldr	r3, [pc, #488]	@ (8008c04 <menuVariableFinisher+0x364>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8008a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8008c08 <menuVariableFinisher+0x368>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8008a24:	4b79      	ldr	r3, [pc, #484]	@ (8008c0c <menuVariableFinisher+0x36c>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8008a2a:	4b79      	ldr	r3, [pc, #484]	@ (8008c10 <menuVariableFinisher+0x370>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8008a30:	4b78      	ldr	r3, [pc, #480]	@ (8008c14 <menuVariableFinisher+0x374>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8008a36:	4b78      	ldr	r3, [pc, #480]	@ (8008c18 <menuVariableFinisher+0x378>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8008a3c:	4b77      	ldr	r3, [pc, #476]	@ (8008c1c <menuVariableFinisher+0x37c>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8008a42:	4b77      	ldr	r3, [pc, #476]	@ (8008c20 <menuVariableFinisher+0x380>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8008a48:	4b76      	ldr	r3, [pc, #472]	@ (8008c24 <menuVariableFinisher+0x384>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8008a4e:	4b76      	ldr	r3, [pc, #472]	@ (8008c28 <menuVariableFinisher+0x388>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8008a54:	4b75      	ldr	r3, [pc, #468]	@ (8008c2c <menuVariableFinisher+0x38c>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8008a5a:	4b75      	ldr	r3, [pc, #468]	@ (8008c30 <menuVariableFinisher+0x390>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8008a60:	4b74      	ldr	r3, [pc, #464]	@ (8008c34 <menuVariableFinisher+0x394>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8008a66:	4b74      	ldr	r3, [pc, #464]	@ (8008c38 <menuVariableFinisher+0x398>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8008a6c:	4b73      	ldr	r3, [pc, #460]	@ (8008c3c <menuVariableFinisher+0x39c>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8008a72:	4b73      	ldr	r3, [pc, #460]	@ (8008c40 <menuVariableFinisher+0x3a0>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008a78:	4b72      	ldr	r3, [pc, #456]	@ (8008c44 <menuVariableFinisher+0x3a4>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008a7e:	4b72      	ldr	r3, [pc, #456]	@ (8008c48 <menuVariableFinisher+0x3a8>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8008a84:	4b71      	ldr	r3, [pc, #452]	@ (8008c4c <menuVariableFinisher+0x3ac>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008a8a:	4b71      	ldr	r3, [pc, #452]	@ (8008c50 <menuVariableFinisher+0x3b0>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8008a90:	4b70      	ldr	r3, [pc, #448]	@ (8008c54 <menuVariableFinisher+0x3b4>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8008a96:	4b70      	ldr	r3, [pc, #448]	@ (8008c58 <menuVariableFinisher+0x3b8>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8008a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8008c5c <menuVariableFinisher+0x3bc>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8008aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8008c60 <menuVariableFinisher+0x3c0>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8008aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8008c64 <menuVariableFinisher+0x3c4>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8008aae:	4b6e      	ldr	r3, [pc, #440]	@ (8008c68 <menuVariableFinisher+0x3c8>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8008ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8008c6c <menuVariableFinisher+0x3cc>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8008aba:	4b6d      	ldr	r3, [pc, #436]	@ (8008c70 <menuVariableFinisher+0x3d0>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8008ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8008c74 <menuVariableFinisher+0x3d4>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8008ac6:	4b6c      	ldr	r3, [pc, #432]	@ (8008c78 <menuVariableFinisher+0x3d8>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008acc:	4b6b      	ldr	r3, [pc, #428]	@ (8008c7c <menuVariableFinisher+0x3dc>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8008ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8008c80 <menuVariableFinisher+0x3e0>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c84 <menuVariableFinisher+0x3e4>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8008ade:	4b6a      	ldr	r3, [pc, #424]	@ (8008c88 <menuVariableFinisher+0x3e8>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008ae4:	4b69      	ldr	r3, [pc, #420]	@ (8008c8c <menuVariableFinisher+0x3ec>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8008aea:	4b69      	ldr	r3, [pc, #420]	@ (8008c90 <menuVariableFinisher+0x3f0>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8008af0:	4b68      	ldr	r3, [pc, #416]	@ (8008c94 <menuVariableFinisher+0x3f4>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8008af6:	4b68      	ldr	r3, [pc, #416]	@ (8008c98 <menuVariableFinisher+0x3f8>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8008afc:	4b67      	ldr	r3, [pc, #412]	@ (8008c9c <menuVariableFinisher+0x3fc>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	741a      	strb	r2, [r3, #16]
}
 8008b02:	bf00      	nop
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	2000009c 	.word	0x2000009c
 8008b10:	200000b0 	.word	0x200000b0
 8008b14:	200000c4 	.word	0x200000c4
 8008b18:	200000d8 	.word	0x200000d8
 8008b1c:	200000ec 	.word	0x200000ec
 8008b20:	20000100 	.word	0x20000100
 8008b24:	20000114 	.word	0x20000114
 8008b28:	20000128 	.word	0x20000128
 8008b2c:	2000013c 	.word	0x2000013c
 8008b30:	20000150 	.word	0x20000150
 8008b34:	20000164 	.word	0x20000164
 8008b38:	20000178 	.word	0x20000178
 8008b3c:	200010d4 	.word	0x200010d4
 8008b40:	200010e8 	.word	0x200010e8
 8008b44:	200010fc 	.word	0x200010fc
 8008b48:	20001110 	.word	0x20001110
 8008b4c:	20001124 	.word	0x20001124
 8008b50:	20001138 	.word	0x20001138
 8008b54:	2000114c 	.word	0x2000114c
 8008b58:	20001160 	.word	0x20001160
 8008b5c:	20001174 	.word	0x20001174
 8008b60:	20001188 	.word	0x20001188
 8008b64:	2000119c 	.word	0x2000119c
 8008b68:	200011b0 	.word	0x200011b0
 8008b6c:	200011c4 	.word	0x200011c4
 8008b70:	200011d8 	.word	0x200011d8
 8008b74:	200011ec 	.word	0x200011ec
 8008b78:	20001200 	.word	0x20001200
 8008b7c:	20001214 	.word	0x20001214
 8008b80:	20001228 	.word	0x20001228
 8008b84:	2000123c 	.word	0x2000123c
 8008b88:	20001250 	.word	0x20001250
 8008b8c:	20001264 	.word	0x20001264
 8008b90:	20001278 	.word	0x20001278
 8008b94:	2000128c 	.word	0x2000128c
 8008b98:	200012a0 	.word	0x200012a0
 8008b9c:	200012b4 	.word	0x200012b4
 8008ba0:	200012c8 	.word	0x200012c8
 8008ba4:	200012dc 	.word	0x200012dc
 8008ba8:	200012f0 	.word	0x200012f0
 8008bac:	20001304 	.word	0x20001304
 8008bb0:	20001318 	.word	0x20001318
 8008bb4:	2000132c 	.word	0x2000132c
 8008bb8:	20001340 	.word	0x20001340
 8008bbc:	20001354 	.word	0x20001354
 8008bc0:	20001368 	.word	0x20001368
 8008bc4:	2000137c 	.word	0x2000137c
 8008bc8:	20001390 	.word	0x20001390
 8008bcc:	200013a4 	.word	0x200013a4
 8008bd0:	200013b8 	.word	0x200013b8
 8008bd4:	200013cc 	.word	0x200013cc
 8008bd8:	200013e0 	.word	0x200013e0
 8008bdc:	200013f4 	.word	0x200013f4
 8008be0:	20001408 	.word	0x20001408
 8008be4:	2000141c 	.word	0x2000141c
 8008be8:	20001430 	.word	0x20001430
 8008bec:	20001444 	.word	0x20001444
 8008bf0:	20001458 	.word	0x20001458
 8008bf4:	2000146c 	.word	0x2000146c
 8008bf8:	20001480 	.word	0x20001480
 8008bfc:	20001494 	.word	0x20001494
 8008c00:	200014a8 	.word	0x200014a8
 8008c04:	200014bc 	.word	0x200014bc
 8008c08:	200014d0 	.word	0x200014d0
 8008c0c:	200014e4 	.word	0x200014e4
 8008c10:	200014f8 	.word	0x200014f8
 8008c14:	2000150c 	.word	0x2000150c
 8008c18:	20001520 	.word	0x20001520
 8008c1c:	20001534 	.word	0x20001534
 8008c20:	20001548 	.word	0x20001548
 8008c24:	2000155c 	.word	0x2000155c
 8008c28:	20001570 	.word	0x20001570
 8008c2c:	20001584 	.word	0x20001584
 8008c30:	20001598 	.word	0x20001598
 8008c34:	200015ac 	.word	0x200015ac
 8008c38:	200015c0 	.word	0x200015c0
 8008c3c:	200015d4 	.word	0x200015d4
 8008c40:	200015e8 	.word	0x200015e8
 8008c44:	200015fc 	.word	0x200015fc
 8008c48:	20001610 	.word	0x20001610
 8008c4c:	20001624 	.word	0x20001624
 8008c50:	20001638 	.word	0x20001638
 8008c54:	2000164c 	.word	0x2000164c
 8008c58:	20001660 	.word	0x20001660
 8008c5c:	20001674 	.word	0x20001674
 8008c60:	20001688 	.word	0x20001688
 8008c64:	2000169c 	.word	0x2000169c
 8008c68:	200016b0 	.word	0x200016b0
 8008c6c:	200016c4 	.word	0x200016c4
 8008c70:	200016d8 	.word	0x200016d8
 8008c74:	200016ec 	.word	0x200016ec
 8008c78:	20001700 	.word	0x20001700
 8008c7c:	20001714 	.word	0x20001714
 8008c80:	20001728 	.word	0x20001728
 8008c84:	2000173c 	.word	0x2000173c
 8008c88:	20001750 	.word	0x20001750
 8008c8c:	20001764 	.word	0x20001764
 8008c90:	20001778 	.word	0x20001778
 8008c94:	2000178c 	.word	0x2000178c
 8008c98:	200017a0 	.word	0x200017a0
 8008c9c:	200017b4 	.word	0x200017b4

08008ca0 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008ca6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008caa:	f001 fc0d 	bl	800a4c8 <HAL_Delay>
	int confirmationVal = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008cb2:	e012      	b.n	8008cda <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008cb4:	4a12      	ldr	r2, [pc, #72]	@ (8008d00 <takeMachineIDWithConfirmation+0x60>)
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f000 fee3 	bl	8009a84 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008cbe:	4a11      	ldr	r2, [pc, #68]	@ (8008d04 <takeMachineIDWithConfirmation+0x64>)
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	2002      	movs	r0, #2
 8008cc4:	f000 fede 	bl	8009a84 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008cc8:	2102      	movs	r1, #2
 8008cca:	480f      	ldr	r0, [pc, #60]	@ (8008d08 <takeMachineIDWithConfirmation+0x68>)
 8008ccc:	f002 f9cc 	bl	800b068 <HAL_GPIO_ReadPin>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0e9      	beq.n	8008cb4 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008ce0:	f000 f814 	bl	8008d0c <takeMachineID>

	convertArrays(1);
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	f7f7 fd33 	bl	8000750 <convertArrays>
	HAL_Delay(50);
 8008cea:	2032      	movs	r0, #50	@ 0x32
 8008cec:	f001 fbec 	bl	800a4c8 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	f7f8 f8d1 	bl	8000e98 <printCredentials>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	2000178c 	.word	0x2000178c
 8008d04:	200017a0 	.word	0x200017a0
 8008d08:	40010800 	.word	0x40010800

08008d0c <takeMachineID>:

void takeMachineID() {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8008d12:	2001      	movs	r0, #1
 8008d14:	f000 ff14 	bl	8009b40 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008d18:	220c      	movs	r2, #12
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	48a2      	ldr	r0, [pc, #648]	@ (8008fa8 <takeMachineID+0x29c>)
 8008d1e:	f005 f9dd 	bl	800e0dc <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8008d22:	2305      	movs	r3, #5
 8008d24:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8008d26:	2303      	movs	r3, #3
 8008d28:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008d2e:	4b9f      	ldr	r3, [pc, #636]	@ (8008fac <takeMachineID+0x2a0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8008d34:	2100      	movs	r1, #0
 8008d36:	2001      	movs	r0, #1
 8008d38:	f7f7 ff3e 	bl	8000bb8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008d3c:	2108      	movs	r1, #8
 8008d3e:	489c      	ldr	r0, [pc, #624]	@ (8008fb0 <takeMachineID+0x2a4>)
 8008d40:	f002 f992 	bl	800b068 <HAL_GPIO_ReadPin>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d128      	bne.n	8008d9c <takeMachineID+0x90>
        	lcd_cursor(0);
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f000 fef8 	bl	8009b40 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008d50:	f000 fcda 	bl	8009708 <checkEEPROM4ID>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d00e      	beq.n	8008d78 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008d5a:	4a96      	ldr	r2, [pc, #600]	@ (8008fb4 <takeMachineID+0x2a8>)
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f000 fe90 	bl	8009a84 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008d64:	4a94      	ldr	r2, [pc, #592]	@ (8008fb8 <takeMachineID+0x2ac>)
 8008d66:	2101      	movs	r1, #1
 8008d68:	2002      	movs	r0, #2
 8008d6a:	f000 fe8b 	bl	8009a84 <lcd_print>
        		HAL_Delay(1250);
 8008d6e:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008d72:	f001 fba9 	bl	800a4c8 <HAL_Delay>

        		goto mainSection;
 8008d76:	e7cc      	b.n	8008d12 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008d78:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	236e      	movs	r3, #110	@ 0x6e
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	4b8e      	ldr	r3, [pc, #568]	@ (8008fbc <takeMachineID+0x2b0>)
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	236e      	movs	r3, #110	@ 0x6e
 8008d88:	2200      	movs	r2, #0
 8008d8a:	21a0      	movs	r1, #160	@ 0xa0
 8008d8c:	488c      	ldr	r0, [pc, #560]	@ (8008fc0 <takeMachineID+0x2b4>)
 8008d8e:	f002 fc25 	bl	800b5dc <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8008d92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d96:	f001 fb97 	bl	800a4c8 <HAL_Delay>

            	break;
 8008d9a:	e132      	b.n	8009002 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	4884      	ldr	r0, [pc, #528]	@ (8008fb0 <takeMachineID+0x2a4>)
 8008da0:	f002 f962 	bl	800b068 <HAL_GPIO_ReadPin>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d111      	bne.n	8008dce <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b07      	cmp	r3, #7
 8008dae:	d102      	bne.n	8008db6 <takeMachineID+0xaa>
        		cursorPosition = 10;
 8008db0:	230a      	movs	r3, #10
 8008db2:	60bb      	str	r3, [r7, #8]
 8008db4:	e008      	b.n	8008dc8 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b0e      	cmp	r3, #14
 8008dba:	d102      	bne.n	8008dc2 <takeMachineID+0xb6>
                cursorPosition = 3;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	60bb      	str	r3, [r7, #8]
 8008dc0:	e002      	b.n	8008dc8 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8008dc8:	2096      	movs	r0, #150	@ 0x96
 8008dca:	f001 fb7d 	bl	800a4c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008dce:	2108      	movs	r1, #8
 8008dd0:	487c      	ldr	r0, [pc, #496]	@ (8008fc4 <takeMachineID+0x2b8>)
 8008dd2:	f002 f949 	bl	800b068 <HAL_GPIO_ReadPin>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d111      	bne.n	8008e00 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d102      	bne.n	8008de8 <takeMachineID+0xdc>
                cursorPosition = 14;
 8008de2:	230e      	movs	r3, #14
 8008de4:	60bb      	str	r3, [r7, #8]
 8008de6:	e008      	b.n	8008dfa <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b0a      	cmp	r3, #10
 8008dec:	d102      	bne.n	8008df4 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8008dee:	2307      	movs	r3, #7
 8008df0:	60bb      	str	r3, [r7, #8]
 8008df2:	e002      	b.n	8008dfa <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8008dfa:	20fa      	movs	r0, #250	@ 0xfa
 8008dfc:	f001 fb64 	bl	800a4c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008e00:	2102      	movs	r1, #2
 8008e02:	486b      	ldr	r0, [pc, #428]	@ (8008fb0 <takeMachineID+0x2a4>)
 8008e04:	f002 f930 	bl	800b068 <HAL_GPIO_ReadPin>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	f040 80a1 	bne.w	8008f52 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d10a      	bne.n	8008e2c <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8008e16:	4a64      	ldr	r2, [pc, #400]	@ (8008fa8 <takeMachineID+0x29c>)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	2230      	movs	r2, #48	@ 0x30
 8008e1e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008e20:	4a66      	ldr	r2, [pc, #408]	@ (8008fbc <takeMachineID+0x2b0>)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	e07c      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d10a      	bne.n	8008e48 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8008e32:	4a5d      	ldr	r2, [pc, #372]	@ (8008fa8 <takeMachineID+0x29c>)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	2231      	movs	r2, #49	@ 0x31
 8008e3a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008e3c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fbc <takeMachineID+0x2b0>)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	4413      	add	r3, r2
 8008e42:	2201      	movs	r2, #1
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	e06e      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	d10a      	bne.n	8008e64 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8008e4e:	4a56      	ldr	r2, [pc, #344]	@ (8008fa8 <takeMachineID+0x29c>)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4413      	add	r3, r2
 8008e54:	2232      	movs	r2, #50	@ 0x32
 8008e56:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008e58:	4a58      	ldr	r2, [pc, #352]	@ (8008fbc <takeMachineID+0x2b0>)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	2202      	movs	r2, #2
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	e060      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b06      	cmp	r3, #6
 8008e68:	d10a      	bne.n	8008e80 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8008e6a:	4a4f      	ldr	r2, [pc, #316]	@ (8008fa8 <takeMachineID+0x29c>)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4413      	add	r3, r2
 8008e70:	2233      	movs	r2, #51	@ 0x33
 8008e72:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008e74:	4a51      	ldr	r2, [pc, #324]	@ (8008fbc <takeMachineID+0x2b0>)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	4413      	add	r3, r2
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	e052      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b07      	cmp	r3, #7
 8008e84:	d10a      	bne.n	8008e9c <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8008e86:	4a48      	ldr	r2, [pc, #288]	@ (8008fa8 <takeMachineID+0x29c>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	2234      	movs	r2, #52	@ 0x34
 8008e8e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008e90:	4a4a      	ldr	r2, [pc, #296]	@ (8008fbc <takeMachineID+0x2b0>)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	2204      	movs	r2, #4
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	e044      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b0a      	cmp	r3, #10
 8008ea0:	d10a      	bne.n	8008eb8 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8008ea2:	4a41      	ldr	r2, [pc, #260]	@ (8008fa8 <takeMachineID+0x29c>)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2235      	movs	r2, #53	@ 0x35
 8008eaa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008eac:	4a43      	ldr	r2, [pc, #268]	@ (8008fbc <takeMachineID+0x2b0>)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	e036      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b0b      	cmp	r3, #11
 8008ebc:	d10a      	bne.n	8008ed4 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8008ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8008fa8 <takeMachineID+0x29c>)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	2236      	movs	r2, #54	@ 0x36
 8008ec6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8008fbc <takeMachineID+0x2b0>)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	4413      	add	r3, r2
 8008ece:	2206      	movs	r2, #6
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	e028      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b0c      	cmp	r3, #12
 8008ed8:	d10a      	bne.n	8008ef0 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8008eda:	4a33      	ldr	r2, [pc, #204]	@ (8008fa8 <takeMachineID+0x29c>)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4413      	add	r3, r2
 8008ee0:	2237      	movs	r2, #55	@ 0x37
 8008ee2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008ee4:	4a35      	ldr	r2, [pc, #212]	@ (8008fbc <takeMachineID+0x2b0>)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	4413      	add	r3, r2
 8008eea:	2207      	movs	r2, #7
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e01a      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b0d      	cmp	r3, #13
 8008ef4:	d10a      	bne.n	8008f0c <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8008ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8008fa8 <takeMachineID+0x29c>)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4413      	add	r3, r2
 8008efc:	2238      	movs	r2, #56	@ 0x38
 8008efe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008f00:	4a2e      	ldr	r2, [pc, #184]	@ (8008fbc <takeMachineID+0x2b0>)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	2208      	movs	r2, #8
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e00c      	b.n	8008f26 <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b0e      	cmp	r3, #14
 8008f10:	d109      	bne.n	8008f26 <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8008f12:	4a25      	ldr	r2, [pc, #148]	@ (8008fa8 <takeMachineID+0x29c>)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4413      	add	r3, r2
 8008f18:	2239      	movs	r2, #57	@ 0x39
 8008f1a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008f1c:	4a27      	ldr	r2, [pc, #156]	@ (8008fbc <takeMachineID+0x2b0>)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	4413      	add	r3, r2
 8008f22:	2209      	movs	r2, #9
 8008f24:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	b2d9      	uxtb	r1, r3
 8008f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <takeMachineID+0x29c>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	2001      	movs	r0, #1
 8008f36:	f000 fdba 	bl	8009aae <lcd_print_char>

        	writeLoc++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3301      	adds	r3, #1
 8008f44:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8008f4c:	2096      	movs	r0, #150	@ 0x96
 8008f4e:	f001 fabb 	bl	800a4c8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008f52:	2104      	movs	r1, #4
 8008f54:	4816      	ldr	r0, [pc, #88]	@ (8008fb0 <takeMachineID+0x2a4>)
 8008f56:	f002 f887 	bl	800b068 <HAL_GPIO_ReadPin>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d149      	bne.n	8008ff4 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <takeMachineID+0x29c>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d042      	beq.n	8008fee <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8008f68:	4a0f      	ldr	r2, [pc, #60]	@ (8008fa8 <takeMachineID+0x29c>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008f72:	4a12      	ldr	r2, [pc, #72]	@ (8008fbc <takeMachineID+0x2b0>)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	4413      	add	r3, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	dd03      	ble.n	8008f8a <takeMachineID+0x27e>
                	writeLoc--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e004      	b.n	8008f94 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	dc01      	bgt.n	8008f94 <takeMachineID+0x288>
                	writeLoc = 5;
 8008f90:	2305      	movs	r3, #5
 8008f92:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd16      	ble.n	8008fc8 <takeMachineID+0x2bc>
                	arrayPos--;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	603b      	str	r3, [r7, #0]
 8008fa6:	e017      	b.n	8008fd8 <takeMachineID+0x2cc>
 8008fa8:	20001014 	.word	0x20001014
 8008fac:	20000000 	.word	0x20000000
 8008fb0:	40010800 	.word	0x40010800
 8008fb4:	2000169c 	.word	0x2000169c
 8008fb8:	200016b0 	.word	0x200016b0
 8008fbc:	20000f9c 	.word	0x20000f9c
 8008fc0:	200017f0 	.word	0x200017f0
 8008fc4:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da04      	bge.n	8008fd8 <takeMachineID+0x2cc>
                	arrayPos = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8008fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800900c <takeMachineID+0x300>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	3305      	adds	r3, #5
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	f000 fd84 	bl	8009af0 <lcd_delete_char>
                HAL_Delay(50);
 8008fe8:	2032      	movs	r0, #50	@ 0x32
 8008fea:	f001 fa6d 	bl	800a4c8 <HAL_Delay>
            }

            HAL_Delay(150);
 8008fee:	2096      	movs	r0, #150	@ 0x96
 8008ff0:	f001 fa6a 	bl	800a4c8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	2002      	movs	r0, #2
 8008ffc:	f000 fd23 	bl	8009a46 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009000:	e69c      	b.n	8008d3c <takeMachineID+0x30>
    }
}
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000000 	.word	0x20000000

08009010 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8009016:	2301      	movs	r3, #1
 8009018:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800901a:	4a25      	ldr	r2, [pc, #148]	@ (80090b0 <ssidConfirmation+0xa0>)
 800901c:	2101      	movs	r1, #1
 800901e:	2001      	movs	r0, #1
 8009020:	f000 fd30 	bl	8009a84 <lcd_print>

	while(loopVal == 1) {
 8009024:	e012      	b.n	800904c <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8009026:	4a23      	ldr	r2, [pc, #140]	@ (80090b4 <ssidConfirmation+0xa4>)
 8009028:	2101      	movs	r1, #1
 800902a:	2002      	movs	r0, #2
 800902c:	f000 fd2a 	bl	8009a84 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009030:	2102      	movs	r1, #2
 8009032:	4821      	ldr	r0, [pc, #132]	@ (80090b8 <ssidConfirmation+0xa8>)
 8009034:	f002 f818 	bl	800b068 <HAL_GPIO_ReadPin>
 8009038:	4603      	mov	r3, r0
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <ssidConfirmation+0x32>
			loopVal = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8009042:	4a1e      	ldr	r2, [pc, #120]	@ (80090bc <ssidConfirmation+0xac>)
 8009044:	2101      	movs	r1, #1
 8009046:	2001      	movs	r0, #1
 8009048:	f000 fd1c 	bl	8009a84 <lcd_print>
	while(loopVal == 1) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d0e9      	beq.n	8009026 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8009052:	2000      	movs	r0, #0
 8009054:	f000 fd74 	bl	8009b40 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8009058:	4818      	ldr	r0, [pc, #96]	@ (80090bc <ssidConfirmation+0xac>)
 800905a:	f7f7 f8e3 	bl	8000224 <strlen>
 800905e:	4603      	mov	r3, r0
 8009060:	2b14      	cmp	r3, #20
 8009062:	d90f      	bls.n	8009084 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8009064:	4a16      	ldr	r2, [pc, #88]	@ (80090c0 <ssidConfirmation+0xb0>)
 8009066:	2101      	movs	r1, #1
 8009068:	2001      	movs	r0, #1
 800906a:	f000 fd0b 	bl	8009a84 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800906e:	4a15      	ldr	r2, [pc, #84]	@ (80090c4 <ssidConfirmation+0xb4>)
 8009070:	2101      	movs	r1, #1
 8009072:	2002      	movs	r0, #2
 8009074:	f000 fd06 	bl	8009a84 <lcd_print>
        HAL_Delay(1250);
 8009078:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800907c:	f001 fa24 	bl	800a4c8 <HAL_Delay>

        return 0;
 8009080:	2300      	movs	r3, #0
 8009082:	e011      	b.n	80090a8 <ssidConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009084:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	236e      	movs	r3, #110	@ 0x6e
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	4b0e      	ldr	r3, [pc, #56]	@ (80090c8 <ssidConfirmation+0xb8>)
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	236e      	movs	r3, #110	@ 0x6e
 8009094:	2200      	movs	r2, #0
 8009096:	21a0      	movs	r1, #160	@ 0xa0
 8009098:	480c      	ldr	r0, [pc, #48]	@ (80090cc <ssidConfirmation+0xbc>)
 800909a:	f002 fa9f 	bl	800b5dc <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 800909e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80090a2:	f001 fa11 	bl	800a4c8 <HAL_Delay>

    	return 1;
 80090a6:	2301      	movs	r3, #1
    }
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	0800e2a8 	.word	0x0800e2a8
 80090b4:	200017b4 	.word	0x200017b4
 80090b8:	40010800 	.word	0x40010800
 80090bc:	20001020 	.word	0x20001020
 80090c0:	200016c4 	.word	0x200016c4
 80090c4:	200016d8 	.word	0x200016d8
 80090c8:	20000f9c 	.word	0x20000f9c
 80090cc:	200017f0 	.word	0x200017f0

080090d0 <takeWifiSSID>:

void takeWifiSSID() {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80090d6:	2001      	movs	r0, #1
 80090d8:	f000 fd32 	bl	8009b40 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80090dc:	2210      	movs	r2, #16
 80090de:	2100      	movs	r1, #0
 80090e0:	48a4      	ldr	r0, [pc, #656]	@ (8009374 <takeWifiSSID+0x2a4>)
 80090e2:	f004 fffb 	bl	800e0dc <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80090e6:	2301      	movs	r3, #1
 80090e8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80090ea:	2307      	movs	r3, #7
 80090ec:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80090ee:	2301      	movs	r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80090f6:	4ba0      	ldr	r3, [pc, #640]	@ (8009378 <takeWifiSSID+0x2a8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80090fc:	2101      	movs	r1, #1
 80090fe:	2002      	movs	r0, #2
 8009100:	f7f7 fd5a 	bl	8000bb8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009104:	2108      	movs	r1, #8
 8009106:	489d      	ldr	r0, [pc, #628]	@ (800937c <takeWifiSSID+0x2ac>)
 8009108:	f001 ffae 	bl	800b068 <HAL_GPIO_ReadPin>
 800910c:	4603      	mov	r3, r0
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8009112:	f7ff ff7d 	bl	8009010 <ssidConfirmation>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	f040 8126 	bne.w	800936a <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 800911e:	e7da      	b.n	80090d6 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009120:	2101      	movs	r1, #1
 8009122:	4896      	ldr	r0, [pc, #600]	@ (800937c <takeWifiSSID+0x2ac>)
 8009124:	f001 ffa0 	bl	800b068 <HAL_GPIO_ReadPin>
 8009128:	4603      	mov	r3, r0
 800912a:	2b01      	cmp	r3, #1
 800912c:	d14d      	bne.n	80091ca <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b50      	cmp	r3, #80	@ 0x50
 8009132:	dd01      	ble.n	8009138 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8009134:	2301      	movs	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b10      	cmp	r3, #16
 800913c:	d13f      	bne.n	80091be <takeWifiSSID+0xee>
            	if(page == 1) {
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d109      	bne.n	8009158 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8009144:	2301      	movs	r3, #1
 8009146:	60fb      	str	r3, [r7, #12]
            		page++;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3301      	adds	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800914e:	2102      	movs	r1, #2
 8009150:	2002      	movs	r0, #2
 8009152:	f7f7 fd31 	bl	8000bb8 <printTemplate>
 8009156:	e035      	b.n	80091c4 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d109      	bne.n	8009172 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800915e:	2301      	movs	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
            		page++;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3301      	adds	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009168:	2103      	movs	r1, #3
 800916a:	2002      	movs	r0, #2
 800916c:	f7f7 fd24 	bl	8000bb8 <printTemplate>
 8009170:	e028      	b.n	80091c4 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b03      	cmp	r3, #3
 8009176:	d109      	bne.n	800918c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8009178:	2301      	movs	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
            		page++;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	3301      	adds	r3, #1
 8009180:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009182:	2104      	movs	r1, #4
 8009184:	2002      	movs	r0, #2
 8009186:	f7f7 fd17 	bl	8000bb8 <printTemplate>
 800918a:	e01b      	b.n	80091c4 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2b04      	cmp	r3, #4
 8009190:	d109      	bne.n	80091a6 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8009192:	2301      	movs	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
            		page++;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	3301      	adds	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800919c:	2105      	movs	r1, #5
 800919e:	2002      	movs	r0, #2
 80091a0:	f7f7 fd0a 	bl	8000bb8 <printTemplate>
 80091a4:	e00e      	b.n	80091c4 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b05      	cmp	r3, #5
 80091aa:	d10b      	bne.n	80091c4 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80091ac:	2301      	movs	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80091b0:	2301      	movs	r3, #1
 80091b2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80091b4:	2101      	movs	r1, #1
 80091b6:	2002      	movs	r0, #2
 80091b8:	f7f7 fcfe 	bl	8000bb8 <printTemplate>
 80091bc:	e002      	b.n	80091c4 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80091c4:	2096      	movs	r0, #150	@ 0x96
 80091c6:	f001 f97f 	bl	800a4c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80091ca:	2108      	movs	r1, #8
 80091cc:	486c      	ldr	r0, [pc, #432]	@ (8009380 <takeWifiSSID+0x2b0>)
 80091ce:	f001 ff4b 	bl	800b068 <HAL_GPIO_ReadPin>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d149      	bne.n	800926c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	dc01      	bgt.n	80091e2 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80091de:	2350      	movs	r3, #80	@ 0x50
 80091e0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d13b      	bne.n	8009260 <takeWifiSSID+0x190>
            	if(page == 1) {
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d108      	bne.n	8009200 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80091ee:	2310      	movs	r3, #16
 80091f0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80091f2:	2305      	movs	r3, #5
 80091f4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80091f6:	2105      	movs	r1, #5
 80091f8:	2002      	movs	r0, #2
 80091fa:	f7f7 fcdd 	bl	8000bb8 <printTemplate>
 80091fe:	e032      	b.n	8009266 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d108      	bne.n	8009218 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8009206:	2310      	movs	r3, #16
 8009208:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800920a:	2301      	movs	r3, #1
 800920c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800920e:	2101      	movs	r1, #1
 8009210:	2002      	movs	r0, #2
 8009212:	f7f7 fcd1 	bl	8000bb8 <printTemplate>
 8009216:	e026      	b.n	8009266 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b03      	cmp	r3, #3
 800921c:	d108      	bne.n	8009230 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 800921e:	2310      	movs	r3, #16
 8009220:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009222:	2302      	movs	r3, #2
 8009224:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8009226:	2102      	movs	r1, #2
 8009228:	2002      	movs	r0, #2
 800922a:	f7f7 fcc5 	bl	8000bb8 <printTemplate>
 800922e:	e01a      	b.n	8009266 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2b04      	cmp	r3, #4
 8009234:	d108      	bne.n	8009248 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8009236:	2310      	movs	r3, #16
 8009238:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800923a:	2303      	movs	r3, #3
 800923c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800923e:	2103      	movs	r1, #3
 8009240:	2002      	movs	r0, #2
 8009242:	f7f7 fcb9 	bl	8000bb8 <printTemplate>
 8009246:	e00e      	b.n	8009266 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2b05      	cmp	r3, #5
 800924c:	d10b      	bne.n	8009266 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 800924e:	2310      	movs	r3, #16
 8009250:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8009252:	2304      	movs	r3, #4
 8009254:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009256:	2104      	movs	r1, #4
 8009258:	2002      	movs	r0, #2
 800925a:	f7f7 fcad 	bl	8000bb8 <printTemplate>
 800925e:	e002      	b.n	8009266 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3b01      	subs	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009266:	2096      	movs	r0, #150	@ 0x96
 8009268:	f001 f92e 	bl	800a4c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800926c:	2102      	movs	r1, #2
 800926e:	4843      	ldr	r0, [pc, #268]	@ (800937c <takeWifiSSID+0x2ac>)
 8009270:	f001 fefa 	bl	800b068 <HAL_GPIO_ReadPin>
 8009274:	4603      	mov	r3, r0
 8009276:	2b01      	cmp	r3, #1
 8009278:	d12f      	bne.n	80092da <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	b2d9      	uxtb	r1, r3
 800927e:	4a41      	ldr	r2, [pc, #260]	@ (8009384 <takeWifiSSID+0x2b4>)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4413      	add	r3, r2
 8009284:	460a      	mov	r2, r1
 8009286:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8009288:	4a3f      	ldr	r2, [pc, #252]	@ (8009388 <takeWifiSSID+0x2b8>)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	4413      	add	r3, r2
 800928e:	7819      	ldrb	r1, [r3, #0]
 8009290:	4a38      	ldr	r2, [pc, #224]	@ (8009374 <takeWifiSSID+0x2a4>)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	4413      	add	r3, r2
 8009296:	460a      	mov	r2, r1
 8009298:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	b2d9      	uxtb	r1, r3
 800929e:	4a3a      	ldr	r2, [pc, #232]	@ (8009388 <takeWifiSSID+0x2b8>)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	2001      	movs	r0, #1
 80092aa:	f000 fc00 	bl	8009aae <lcd_print_char>

            writeLoc++;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	3301      	adds	r3, #1
 80092b8:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3301      	adds	r3, #1
 80092be:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80092c0:	4a30      	ldr	r2, [pc, #192]	@ (8009384 <takeWifiSSID+0x2b4>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4413      	add	r3, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80092ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009374 <takeWifiSSID+0x2a4>)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4413      	add	r3, r2
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80092d4:	2096      	movs	r0, #150	@ 0x96
 80092d6:	f001 f8f7 	bl	800a4c8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80092da:	2104      	movs	r1, #4
 80092dc:	4827      	ldr	r0, [pc, #156]	@ (800937c <takeWifiSSID+0x2ac>)
 80092de:	f001 fec3 	bl	800b068 <HAL_GPIO_ReadPin>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d139      	bne.n	800935c <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80092e8:	4b22      	ldr	r3, [pc, #136]	@ (8009374 <takeWifiSSID+0x2a4>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d032      	beq.n	8009356 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80092f0:	4a24      	ldr	r2, [pc, #144]	@ (8009384 <takeWifiSSID+0x2b4>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4413      	add	r3, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80092fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009374 <takeWifiSSID+0x2a4>)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4413      	add	r3, r2
 8009300:	2200      	movs	r2, #0
 8009302:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	2b07      	cmp	r3, #7
 8009308:	dd03      	ble.n	8009312 <takeWifiSSID+0x242>
        			writeLoc--;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	3b01      	subs	r3, #1
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	e004      	b.n	800931c <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b06      	cmp	r3, #6
 8009316:	dc01      	bgt.n	800931c <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8009318:	2307      	movs	r3, #7
 800931a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dd06      	ble.n	8009330 <takeWifiSSID+0x260>
        			arrayPosition--;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3b01      	subs	r3, #1
 8009326:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3b01      	subs	r3, #1
 800932c:	607b      	str	r3, [r7, #4]
 800932e:	e007      	b.n	8009340 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	da04      	bge.n	8009340 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800933a:	4b0f      	ldr	r3, [pc, #60]	@ (8009378 <takeWifiSSID+0x2a8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	3307      	adds	r3, #7
 8009346:	b2db      	uxtb	r3, r3
 8009348:	4619      	mov	r1, r3
 800934a:	2001      	movs	r0, #1
 800934c:	f000 fbd0 	bl	8009af0 <lcd_delete_char>
        		HAL_Delay(50);
 8009350:	2032      	movs	r0, #50	@ 0x32
 8009352:	f001 f8b9 	bl	800a4c8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8009356:	2096      	movs	r0, #150	@ 0x96
 8009358:	f001 f8b6 	bl	800a4c8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	2002      	movs	r0, #2
 8009364:	f000 fb6f 	bl	8009a46 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009368:	e6cc      	b.n	8009104 <takeWifiSSID+0x34>
        		break;
 800936a:	bf00      	nop
    }
}
 800936c:	bf00      	nop
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20001020 	.word	0x20001020
 8009378:	20000004 	.word	0x20000004
 800937c:	40010800 	.word	0x40010800
 8009380:	40011000 	.word	0x40011000
 8009384:	20000f9c 	.word	0x20000f9c
 8009388:	20000018 	.word	0x20000018

0800938c <passConfirmation>:

uint8_t passConfirmation() {
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8009392:	2301      	movs	r3, #1
 8009394:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8009396:	4a25      	ldr	r2, [pc, #148]	@ (800942c <passConfirmation+0xa0>)
 8009398:	2101      	movs	r1, #1
 800939a:	2001      	movs	r0, #1
 800939c:	f000 fb72 	bl	8009a84 <lcd_print>

	while(loopVal == 1) {
 80093a0:	e012      	b.n	80093c8 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80093a2:	4a23      	ldr	r2, [pc, #140]	@ (8009430 <passConfirmation+0xa4>)
 80093a4:	2101      	movs	r1, #1
 80093a6:	2002      	movs	r0, #2
 80093a8:	f000 fb6c 	bl	8009a84 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80093ac:	2102      	movs	r1, #2
 80093ae:	4821      	ldr	r0, [pc, #132]	@ (8009434 <passConfirmation+0xa8>)
 80093b0:	f001 fe5a 	bl	800b068 <HAL_GPIO_ReadPin>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <passConfirmation+0x32>
			loopVal = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80093be:	4a1e      	ldr	r2, [pc, #120]	@ (8009438 <passConfirmation+0xac>)
 80093c0:	2101      	movs	r1, #1
 80093c2:	2001      	movs	r0, #1
 80093c4:	f000 fb5e 	bl	8009a84 <lcd_print>
	while(loopVal == 1) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d0e9      	beq.n	80093a2 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80093ce:	2000      	movs	r0, #0
 80093d0:	f000 fbb6 	bl	8009b40 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80093d4:	4818      	ldr	r0, [pc, #96]	@ (8009438 <passConfirmation+0xac>)
 80093d6:	f7f6 ff25 	bl	8000224 <strlen>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b14      	cmp	r3, #20
 80093de:	d90f      	bls.n	8009400 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80093e0:	4a16      	ldr	r2, [pc, #88]	@ (800943c <passConfirmation+0xb0>)
 80093e2:	2101      	movs	r1, #1
 80093e4:	2001      	movs	r0, #1
 80093e6:	f000 fb4d 	bl	8009a84 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80093ea:	4a15      	ldr	r2, [pc, #84]	@ (8009440 <passConfirmation+0xb4>)
 80093ec:	2101      	movs	r1, #1
 80093ee:	2002      	movs	r0, #2
 80093f0:	f000 fb48 	bl	8009a84 <lcd_print>
        HAL_Delay(1250);
 80093f4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80093f8:	f001 f866 	bl	800a4c8 <HAL_Delay>

        return 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	e011      	b.n	8009424 <passConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009400:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009404:	9302      	str	r3, [sp, #8]
 8009406:	236e      	movs	r3, #110	@ 0x6e
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	4b0e      	ldr	r3, [pc, #56]	@ (8009444 <passConfirmation+0xb8>)
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	236e      	movs	r3, #110	@ 0x6e
 8009410:	2200      	movs	r2, #0
 8009412:	21a0      	movs	r1, #160	@ 0xa0
 8009414:	480c      	ldr	r0, [pc, #48]	@ (8009448 <passConfirmation+0xbc>)
 8009416:	f002 f8e1 	bl	800b5dc <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 800941a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800941e:	f001 f853 	bl	800a4c8 <HAL_Delay>

    	return 1;
 8009422:	2301      	movs	r3, #1
    }
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0800e2a8 	.word	0x0800e2a8
 8009430:	200017b4 	.word	0x200017b4
 8009434:	40010800 	.word	0x40010800
 8009438:	20001030 	.word	0x20001030
 800943c:	200016ec 	.word	0x200016ec
 8009440:	20001700 	.word	0x20001700
 8009444:	20000f9c 	.word	0x20000f9c
 8009448:	200017f0 	.word	0x200017f0

0800944c <takeWifiPass>:

void takeWifiPass() {
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8009452:	2001      	movs	r0, #1
 8009454:	f000 fb74 	bl	8009b40 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8009458:	2210      	movs	r2, #16
 800945a:	2100      	movs	r1, #0
 800945c:	48a4      	ldr	r0, [pc, #656]	@ (80096f0 <takeWifiPass+0x2a4>)
 800945e:	f004 fe3d 	bl	800e0dc <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8009462:	2301      	movs	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8009466:	2307      	movs	r3, #7
 8009468:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800946a:	2301      	movs	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800946e:	2300      	movs	r3, #0
 8009470:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8009472:	4ba0      	ldr	r3, [pc, #640]	@ (80096f4 <takeWifiPass+0x2a8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8009478:	2101      	movs	r1, #1
 800947a:	2003      	movs	r0, #3
 800947c:	f7f7 fb9c 	bl	8000bb8 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009480:	2108      	movs	r1, #8
 8009482:	489d      	ldr	r0, [pc, #628]	@ (80096f8 <takeWifiPass+0x2ac>)
 8009484:	f001 fdf0 	bl	800b068 <HAL_GPIO_ReadPin>
 8009488:	4603      	mov	r3, r0
 800948a:	2b01      	cmp	r3, #1
 800948c:	d106      	bne.n	800949c <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800948e:	f7ff ff7d 	bl	800938c <passConfirmation>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	f040 8126 	bne.w	80096e6 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800949a:	e7da      	b.n	8009452 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800949c:	2101      	movs	r1, #1
 800949e:	4896      	ldr	r0, [pc, #600]	@ (80096f8 <takeWifiPass+0x2ac>)
 80094a0:	f001 fde2 	bl	800b068 <HAL_GPIO_ReadPin>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d14d      	bne.n	8009546 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b50      	cmp	r3, #80	@ 0x50
 80094ae:	dd01      	ble.n	80094b4 <takeWifiPass+0x68>
        		cursorPosition = 1;
 80094b0:	2301      	movs	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d13f      	bne.n	800953a <takeWifiPass+0xee>
            	if(page == 1) {
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d109      	bne.n	80094d4 <takeWifiPass+0x88>
            		cursorPosition = 1;
 80094c0:	2301      	movs	r3, #1
 80094c2:	60fb      	str	r3, [r7, #12]
            		page++;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	3301      	adds	r3, #1
 80094c8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80094ca:	2102      	movs	r1, #2
 80094cc:	2003      	movs	r0, #3
 80094ce:	f7f7 fb73 	bl	8000bb8 <printTemplate>
 80094d2:	e035      	b.n	8009540 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d109      	bne.n	80094ee <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80094da:	2301      	movs	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
            		page++;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	3301      	adds	r3, #1
 80094e2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80094e4:	2103      	movs	r1, #3
 80094e6:	2003      	movs	r0, #3
 80094e8:	f7f7 fb66 	bl	8000bb8 <printTemplate>
 80094ec:	e028      	b.n	8009540 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d109      	bne.n	8009508 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80094f4:	2301      	movs	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
            		page++;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	3301      	adds	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80094fe:	2104      	movs	r1, #4
 8009500:	2003      	movs	r0, #3
 8009502:	f7f7 fb59 	bl	8000bb8 <printTemplate>
 8009506:	e01b      	b.n	8009540 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2b04      	cmp	r3, #4
 800950c:	d109      	bne.n	8009522 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 800950e:	2301      	movs	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
            		page++;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	3301      	adds	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8009518:	2105      	movs	r1, #5
 800951a:	2003      	movs	r0, #3
 800951c:	f7f7 fb4c 	bl	8000bb8 <printTemplate>
 8009520:	e00e      	b.n	8009540 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b05      	cmp	r3, #5
 8009526:	d10b      	bne.n	8009540 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8009528:	2301      	movs	r3, #1
 800952a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800952c:	2301      	movs	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009530:	2101      	movs	r1, #1
 8009532:	2003      	movs	r0, #3
 8009534:	f7f7 fb40 	bl	8000bb8 <printTemplate>
 8009538:	e002      	b.n	8009540 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3301      	adds	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009540:	2096      	movs	r0, #150	@ 0x96
 8009542:	f000 ffc1 	bl	800a4c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8009546:	2108      	movs	r1, #8
 8009548:	486c      	ldr	r0, [pc, #432]	@ (80096fc <takeWifiPass+0x2b0>)
 800954a:	f001 fd8d 	bl	800b068 <HAL_GPIO_ReadPin>
 800954e:	4603      	mov	r3, r0
 8009550:	2b01      	cmp	r3, #1
 8009552:	d149      	bne.n	80095e8 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc01      	bgt.n	800955e <takeWifiPass+0x112>
        		cursorPosition = 80;
 800955a:	2350      	movs	r3, #80	@ 0x50
 800955c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d13b      	bne.n	80095dc <takeWifiPass+0x190>
            	if(page == 1) {
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d108      	bne.n	800957c <takeWifiPass+0x130>
            		cursorPosition = 16;
 800956a:	2310      	movs	r3, #16
 800956c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800956e:	2305      	movs	r3, #5
 8009570:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8009572:	2105      	movs	r1, #5
 8009574:	2003      	movs	r0, #3
 8009576:	f7f7 fb1f 	bl	8000bb8 <printTemplate>
 800957a:	e032      	b.n	80095e2 <takeWifiPass+0x196>
            	} else if(page == 2) {
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d108      	bne.n	8009594 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8009582:	2310      	movs	r3, #16
 8009584:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009586:	2301      	movs	r3, #1
 8009588:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800958a:	2101      	movs	r1, #1
 800958c:	2003      	movs	r0, #3
 800958e:	f7f7 fb13 	bl	8000bb8 <printTemplate>
 8009592:	e026      	b.n	80095e2 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b03      	cmp	r3, #3
 8009598:	d108      	bne.n	80095ac <takeWifiPass+0x160>
            		cursorPosition = 16;
 800959a:	2310      	movs	r3, #16
 800959c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800959e:	2302      	movs	r3, #2
 80095a0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80095a2:	2102      	movs	r1, #2
 80095a4:	2003      	movs	r0, #3
 80095a6:	f7f7 fb07 	bl	8000bb8 <printTemplate>
 80095aa:	e01a      	b.n	80095e2 <takeWifiPass+0x196>
            	} else if(page == 4) {
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d108      	bne.n	80095c4 <takeWifiPass+0x178>
            		cursorPosition = 16;
 80095b2:	2310      	movs	r3, #16
 80095b4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80095b6:	2303      	movs	r3, #3
 80095b8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80095ba:	2103      	movs	r1, #3
 80095bc:	2003      	movs	r0, #3
 80095be:	f7f7 fafb 	bl	8000bb8 <printTemplate>
 80095c2:	e00e      	b.n	80095e2 <takeWifiPass+0x196>
            	} else if(page == 5) {
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	d10b      	bne.n	80095e2 <takeWifiPass+0x196>
            		cursorPosition = 16;
 80095ca:	2310      	movs	r3, #16
 80095cc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80095ce:	2304      	movs	r3, #4
 80095d0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80095d2:	2104      	movs	r1, #4
 80095d4:	2003      	movs	r0, #3
 80095d6:	f7f7 faef 	bl	8000bb8 <printTemplate>
 80095da:	e002      	b.n	80095e2 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3b01      	subs	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80095e2:	2096      	movs	r0, #150	@ 0x96
 80095e4:	f000 ff70 	bl	800a4c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80095e8:	2102      	movs	r1, #2
 80095ea:	4843      	ldr	r0, [pc, #268]	@ (80096f8 <takeWifiPass+0x2ac>)
 80095ec:	f001 fd3c 	bl	800b068 <HAL_GPIO_ReadPin>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d12f      	bne.n	8009656 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	b2d9      	uxtb	r1, r3
 80095fa:	4a41      	ldr	r2, [pc, #260]	@ (8009700 <takeWifiPass+0x2b4>)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4413      	add	r3, r2
 8009600:	460a      	mov	r2, r1
 8009602:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8009604:	4a3f      	ldr	r2, [pc, #252]	@ (8009704 <takeWifiPass+0x2b8>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4413      	add	r3, r2
 800960a:	7819      	ldrb	r1, [r3, #0]
 800960c:	4a38      	ldr	r2, [pc, #224]	@ (80096f0 <takeWifiPass+0x2a4>)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4413      	add	r3, r2
 8009612:	460a      	mov	r2, r1
 8009614:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	b2d9      	uxtb	r1, r3
 800961a:	4a3a      	ldr	r2, [pc, #232]	@ (8009704 <takeWifiPass+0x2b8>)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	2001      	movs	r0, #1
 8009626:	f000 fa42 	bl	8009aae <lcd_print_char>

            writeLoc++;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3301      	adds	r3, #1
 800962e:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3301      	adds	r3, #1
 8009634:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3301      	adds	r3, #1
 800963a:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800963c:	4a30      	ldr	r2, [pc, #192]	@ (8009700 <takeWifiPass+0x2b4>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8009646:	4a2a      	ldr	r2, [pc, #168]	@ (80096f0 <takeWifiPass+0x2a4>)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4413      	add	r3, r2
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8009650:	2096      	movs	r0, #150	@ 0x96
 8009652:	f000 ff39 	bl	800a4c8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009656:	2104      	movs	r1, #4
 8009658:	4827      	ldr	r0, [pc, #156]	@ (80096f8 <takeWifiPass+0x2ac>)
 800965a:	f001 fd05 	bl	800b068 <HAL_GPIO_ReadPin>
 800965e:	4603      	mov	r3, r0
 8009660:	2b01      	cmp	r3, #1
 8009662:	d139      	bne.n	80096d8 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8009664:	4b22      	ldr	r3, [pc, #136]	@ (80096f0 <takeWifiPass+0x2a4>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d032      	beq.n	80096d2 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 800966c:	4a24      	ldr	r2, [pc, #144]	@ (8009700 <takeWifiPass+0x2b4>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4413      	add	r3, r2
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8009676:	4a1e      	ldr	r2, [pc, #120]	@ (80096f0 <takeWifiPass+0x2a4>)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4413      	add	r3, r2
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b07      	cmp	r3, #7
 8009684:	dd03      	ble.n	800968e <takeWifiPass+0x242>
        			writeLoc--;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	3b01      	subs	r3, #1
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	e004      	b.n	8009698 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b06      	cmp	r3, #6
 8009692:	dc01      	bgt.n	8009698 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8009694:	2307      	movs	r3, #7
 8009696:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	dd06      	ble.n	80096ac <takeWifiPass+0x260>
        			arrayPosition--;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	607b      	str	r3, [r7, #4]
 80096aa:	e007      	b.n	80096bc <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	da04      	bge.n	80096bc <takeWifiPass+0x270>
        			arrayPosition = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80096b6:	4b0f      	ldr	r3, [pc, #60]	@ (80096f4 <takeWifiPass+0x2a8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	3307      	adds	r3, #7
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	4619      	mov	r1, r3
 80096c6:	2001      	movs	r0, #1
 80096c8:	f000 fa12 	bl	8009af0 <lcd_delete_char>
        		HAL_Delay(50);
 80096cc:	2032      	movs	r0, #50	@ 0x32
 80096ce:	f000 fefb 	bl	800a4c8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80096d2:	2096      	movs	r0, #150	@ 0x96
 80096d4:	f000 fef8 	bl	800a4c8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	4619      	mov	r1, r3
 80096de:	2002      	movs	r0, #2
 80096e0:	f000 f9b1 	bl	8009a46 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80096e4:	e6cc      	b.n	8009480 <takeWifiPass+0x34>
    	        break;
 80096e6:	bf00      	nop
    }
}
 80096e8:	bf00      	nop
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20001030 	.word	0x20001030
 80096f4:	20000008 	.word	0x20000008
 80096f8:	40010800 	.word	0x40010800
 80096fc:	40011000 	.word	0x40011000
 8009700:	20000f9c 	.word	0x20000f9c
 8009704:	20000018 	.word	0x20000018

08009708 <checkEEPROM4ID>:
			convertAndSendData();
		}
	}
}

int checkEEPROM4ID() {
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800970e:	4b0f      	ldr	r3, [pc, #60]	@ (800974c <checkEEPROM4ID+0x44>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8009714:	2301      	movs	r3, #1
 8009716:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009718:	2300      	movs	r3, #0
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	e00d      	b.n	800973a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 800971e:	4a0c      	ldr	r2, [pc, #48]	@ (8009750 <checkEEPROM4ID+0x48>)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <checkEEPROM4ID+0x26>
			returnVal = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3301      	adds	r3, #1
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b0b      	cmp	r3, #11
 800973e:	ddee      	ble.n	800971e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8009740:	68bb      	ldr	r3, [r7, #8]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr
 800974c:	20000000 	.word	0x20000000
 8009750:	20000f9c 	.word	0x20000f9c

08009754 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af02      	add	r7, sp, #8
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	f023 030f 	bic.w	r3, r3, #15
 8009764:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800976c:	7b7b      	ldrb	r3, [r7, #13]
 800976e:	f043 030c 	orr.w	r3, r3, #12
 8009772:	b2db      	uxtb	r3, r3
 8009774:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8009776:	7b7b      	ldrb	r3, [r7, #13]
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	b2db      	uxtb	r3, r3
 800977e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8009780:	7b3b      	ldrb	r3, [r7, #12]
 8009782:	f043 030c 	orr.w	r3, r3, #12
 8009786:	b2db      	uxtb	r3, r3
 8009788:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800978a:	7b3b      	ldrb	r3, [r7, #12]
 800978c:	f043 0308 	orr.w	r3, r3, #8
 8009790:	b2db      	uxtb	r3, r3
 8009792:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009794:	bf00      	nop
 8009796:	4825      	ldr	r0, [pc, #148]	@ (800982c <lcd_send_cmd+0xd8>)
 8009798:	f002 fa8f 	bl	800bcba <HAL_I2C_GetError>
 800979c:	4603      	mov	r3, r0
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d0f9      	beq.n	8009796 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80097a2:	bf00      	nop
 80097a4:	4821      	ldr	r0, [pc, #132]	@ (800982c <lcd_send_cmd+0xd8>)
 80097a6:	f002 fa7b 	bl	800bca0 <HAL_I2C_GetState>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	d1f9      	bne.n	80097a4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80097b0:	4b1f      	ldr	r3, [pc, #124]	@ (8009830 <lcd_send_cmd+0xdc>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d116      	bne.n	80097e6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
 80097bc:	e00f      	b.n	80097de <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	3310      	adds	r3, #16
 80097c2:	443b      	add	r3, r7
 80097c4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	f022 0208 	bic.w	r2, r2, #8
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	3310      	adds	r3, #16
 80097d2:	443b      	add	r3, r7
 80097d4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	3301      	adds	r3, #1
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d9ec      	bls.n	80097be <lcd_send_cmd+0x6a>
 80097e4:	e015      	b.n	8009812 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80097e6:	2300      	movs	r3, #0
 80097e8:	73bb      	strb	r3, [r7, #14]
 80097ea:	e00f      	b.n	800980c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	3310      	adds	r3, #16
 80097f0:	443b      	add	r3, r7
 80097f2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	f042 0208 	orr.w	r2, r2, #8
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	3310      	adds	r3, #16
 8009800:	443b      	add	r3, r7
 8009802:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	3301      	adds	r3, #1
 800980a:	73bb      	strb	r3, [r7, #14]
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d9ec      	bls.n	80097ec <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8009812:	f107 0208 	add.w	r2, r7, #8
 8009816:	2364      	movs	r3, #100	@ 0x64
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2304      	movs	r3, #4
 800981c:	214e      	movs	r1, #78	@ 0x4e
 800981e:	4803      	ldr	r0, [pc, #12]	@ (800982c <lcd_send_cmd+0xd8>)
 8009820:	f001 fdde 	bl	800b3e0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	200017f0 	.word	0x200017f0
 8009830:	200017c5 	.word	0x200017c5

08009834 <lcd_send_data>:

void lcd_send_data (char data) {
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af02      	add	r7, sp, #8
 800983a:	4603      	mov	r3, r0
 800983c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	f023 030f 	bic.w	r3, r3, #15
 8009844:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800984c:	7b7b      	ldrb	r3, [r7, #13]
 800984e:	f043 030d 	orr.w	r3, r3, #13
 8009852:	b2db      	uxtb	r3, r3
 8009854:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8009856:	7b7b      	ldrb	r3, [r7, #13]
 8009858:	f043 0309 	orr.w	r3, r3, #9
 800985c:	b2db      	uxtb	r3, r3
 800985e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8009860:	7b3b      	ldrb	r3, [r7, #12]
 8009862:	f043 030d 	orr.w	r3, r3, #13
 8009866:	b2db      	uxtb	r3, r3
 8009868:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800986a:	7b3b      	ldrb	r3, [r7, #12]
 800986c:	f043 0309 	orr.w	r3, r3, #9
 8009870:	b2db      	uxtb	r3, r3
 8009872:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009874:	bf00      	nop
 8009876:	4825      	ldr	r0, [pc, #148]	@ (800990c <lcd_send_data+0xd8>)
 8009878:	f002 fa1f 	bl	800bcba <HAL_I2C_GetError>
 800987c:	4603      	mov	r3, r0
 800987e:	2b04      	cmp	r3, #4
 8009880:	d0f9      	beq.n	8009876 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009882:	bf00      	nop
 8009884:	4821      	ldr	r0, [pc, #132]	@ (800990c <lcd_send_data+0xd8>)
 8009886:	f002 fa0b 	bl	800bca0 <HAL_I2C_GetState>
 800988a:	4603      	mov	r3, r0
 800988c:	2b20      	cmp	r3, #32
 800988e:	d1f9      	bne.n	8009884 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009890:	4b1f      	ldr	r3, [pc, #124]	@ (8009910 <lcd_send_data+0xdc>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d116      	bne.n	80098c6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
 800989c:	e00f      	b.n	80098be <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	3310      	adds	r3, #16
 80098a2:	443b      	add	r3, r7
 80098a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	f022 0208 	bic.w	r2, r2, #8
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	3310      	adds	r3, #16
 80098b2:	443b      	add	r3, r7
 80098b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	3301      	adds	r3, #1
 80098bc:	73fb      	strb	r3, [r7, #15]
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d9ec      	bls.n	800989e <lcd_send_data+0x6a>
 80098c4:	e015      	b.n	80098f2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80098c6:	2300      	movs	r3, #0
 80098c8:	73bb      	strb	r3, [r7, #14]
 80098ca:	e00f      	b.n	80098ec <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	3310      	adds	r3, #16
 80098d0:	443b      	add	r3, r7
 80098d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	f042 0208 	orr.w	r2, r2, #8
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	3310      	adds	r3, #16
 80098e0:	443b      	add	r3, r7
 80098e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	3301      	adds	r3, #1
 80098ea:	73bb      	strb	r3, [r7, #14]
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d9ec      	bls.n	80098cc <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80098f2:	f107 0208 	add.w	r2, r7, #8
 80098f6:	2364      	movs	r3, #100	@ 0x64
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	2304      	movs	r3, #4
 80098fc:	214e      	movs	r1, #78	@ 0x4e
 80098fe:	4803      	ldr	r0, [pc, #12]	@ (800990c <lcd_send_data+0xd8>)
 8009900:	f001 fd6e 	bl	800b3e0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200017f0 	.word	0x200017f0
 8009910:	200017c5 	.word	0x200017c5

08009914 <lcd_send_string>:

void lcd_send_string (char *str) {
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800991c:	e006      	b.n	800992c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff ff84 	bl	8009834 <lcd_send_data>
	while (*str) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1f4      	bne.n	800991e <lcd_send_string+0xa>
	}
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <lcd_send_char>:

void lcd_send_char(char ch) {
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af02      	add	r7, sp, #8
 8009946:	4603      	mov	r3, r0
 8009948:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	f023 030f 	bic.w	r3, r3, #15
 8009950:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	011b      	lsls	r3, r3, #4
 8009956:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009958:	7b7b      	ldrb	r3, [r7, #13]
 800995a:	f043 030d 	orr.w	r3, r3, #13
 800995e:	b2db      	uxtb	r3, r3
 8009960:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8009962:	7b7b      	ldrb	r3, [r7, #13]
 8009964:	f043 0309 	orr.w	r3, r3, #9
 8009968:	b2db      	uxtb	r3, r3
 800996a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800996c:	7b3b      	ldrb	r3, [r7, #12]
 800996e:	f043 030d 	orr.w	r3, r3, #13
 8009972:	b2db      	uxtb	r3, r3
 8009974:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009976:	7b3b      	ldrb	r3, [r7, #12]
 8009978:	f043 0309 	orr.w	r3, r3, #9
 800997c:	b2db      	uxtb	r3, r3
 800997e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009980:	bf00      	nop
 8009982:	4825      	ldr	r0, [pc, #148]	@ (8009a18 <lcd_send_char+0xd8>)
 8009984:	f002 f999 	bl	800bcba <HAL_I2C_GetError>
 8009988:	4603      	mov	r3, r0
 800998a:	2b04      	cmp	r3, #4
 800998c:	d0f9      	beq.n	8009982 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800998e:	bf00      	nop
 8009990:	4821      	ldr	r0, [pc, #132]	@ (8009a18 <lcd_send_char+0xd8>)
 8009992:	f002 f985 	bl	800bca0 <HAL_I2C_GetState>
 8009996:	4603      	mov	r3, r0
 8009998:	2b20      	cmp	r3, #32
 800999a:	d1f9      	bne.n	8009990 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800999c:	4b1f      	ldr	r3, [pc, #124]	@ (8009a1c <lcd_send_char+0xdc>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d116      	bne.n	80099d2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
 80099a8:	e00f      	b.n	80099ca <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	3310      	adds	r3, #16
 80099ae:	443b      	add	r3, r7
 80099b0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	f022 0208 	bic.w	r2, r2, #8
 80099ba:	b2d2      	uxtb	r2, r2
 80099bc:	3310      	adds	r3, #16
 80099be:	443b      	add	r3, r7
 80099c0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	3301      	adds	r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d9ec      	bls.n	80099aa <lcd_send_char+0x6a>
 80099d0:	e015      	b.n	80099fe <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80099d2:	2300      	movs	r3, #0
 80099d4:	73bb      	strb	r3, [r7, #14]
 80099d6:	e00f      	b.n	80099f8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	3310      	adds	r3, #16
 80099dc:	443b      	add	r3, r7
 80099de:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	f042 0208 	orr.w	r2, r2, #8
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	3310      	adds	r3, #16
 80099ec:	443b      	add	r3, r7
 80099ee:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	3301      	adds	r3, #1
 80099f6:	73bb      	strb	r3, [r7, #14]
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d9ec      	bls.n	80099d8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80099fe:	f107 0208 	add.w	r2, r7, #8
 8009a02:	2364      	movs	r3, #100	@ 0x64
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	2304      	movs	r3, #4
 8009a08:	214e      	movs	r1, #78	@ 0x4e
 8009a0a:	4803      	ldr	r0, [pc, #12]	@ (8009a18 <lcd_send_char+0xd8>)
 8009a0c:	f001 fce8 	bl	800b3e0 <HAL_I2C_Master_Transmit>
}
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	200017f0 	.word	0x200017f0
 8009a1c:	200017c5 	.word	0x200017c5

08009a20 <lcd_init>:

void lcd_init (void) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8009a24:	2002      	movs	r0, #2
 8009a26:	f7ff fe95 	bl	8009754 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8009a2a:	2028      	movs	r0, #40	@ 0x28
 8009a2c:	f7ff fe92 	bl	8009754 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8009a30:	200c      	movs	r0, #12
 8009a32:	f7ff fe8f 	bl	8009754 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009a36:	2080      	movs	r0, #128	@ 0x80
 8009a38:	f7ff fe8c 	bl	8009754 <lcd_send_cmd>
	lcd_backlight(1);
 8009a3c:	2001      	movs	r0, #1
 8009a3e:	f000 f86d 	bl	8009b1c <lcd_backlight>
}
 8009a42:	bf00      	nop
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	460a      	mov	r2, r1
 8009a50:	71fb      	strb	r3, [r7, #7]
 8009a52:	4613      	mov	r3, r2
 8009a54:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d106      	bne.n	8009a6a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009a5c:	79bb      	ldrb	r3, [r7, #6]
 8009a5e:	337f      	adds	r3, #127	@ 0x7f
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fe76 	bl	8009754 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009a68:	e008      	b.n	8009a7c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d105      	bne.n	8009a7c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8009a70:	79bb      	ldrb	r3, [r7, #6]
 8009a72:	3b41      	subs	r3, #65	@ 0x41
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff fe6c 	bl	8009754 <lcd_send_cmd>
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	603a      	str	r2, [r7, #0]
 8009a8e:	71fb      	strb	r3, [r7, #7]
 8009a90:	460b      	mov	r3, r1
 8009a92:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009a94:	79ba      	ldrb	r2, [r7, #6]
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff ffd3 	bl	8009a46 <lcd_gotoxy>
	lcd_send_string(str);
 8009aa0:	6838      	ldr	r0, [r7, #0]
 8009aa2:	f7ff ff37 	bl	8009914 <lcd_send_string>
}
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	71fb      	strb	r3, [r7, #7]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	71bb      	strb	r3, [r7, #6]
 8009abc:	4613      	mov	r3, r2
 8009abe:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009ac0:	79ba      	ldrb	r2, [r7, #6]
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff ffbd 	bl	8009a46 <lcd_gotoxy>
    lcd_send_char(ch);
 8009acc:	797b      	ldrb	r3, [r7, #5]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff ff36 	bl	8009940 <lcd_send_char>
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <lcd_clear>:

void lcd_clear(void) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	f7ff fe37 	bl	8009754 <lcd_send_cmd>
    HAL_Delay(2);
 8009ae6:	2002      	movs	r0, #2
 8009ae8:	f000 fcee 	bl	800a4c8 <HAL_Delay>
}
 8009aec:	bf00      	nop
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	460a      	mov	r2, r1
 8009afa:	71fb      	strb	r3, [r7, #7]
 8009afc:	4613      	mov	r3, r2
 8009afe:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009b00:	79ba      	ldrb	r2, [r7, #6]
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff ff9d 	bl	8009a46 <lcd_gotoxy>

    lcd_send_char(' ');
 8009b0c:	2020      	movs	r0, #32
 8009b0e:	f7ff ff17 	bl	8009940 <lcd_send_char>
}
 8009b12:	bf00      	nop
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009b26:	4a05      	ldr	r2, [pc, #20]	@ (8009b3c <lcd_backlight+0x20>)
 8009b28:	79fb      	ldrb	r3, [r7, #7]
 8009b2a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f7ff fe11 	bl	8009754 <lcd_send_cmd>
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	200017c5 	.word	0x200017c5

08009b40 <lcd_cursor>:

void lcd_cursor(int state) {
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d106      	bne.n	8009b5c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009b4e:	200e      	movs	r0, #14
 8009b50:	f7ff fe00 	bl	8009754 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009b54:	200f      	movs	r0, #15
 8009b56:	f7ff fdfd 	bl	8009754 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009b5a:	e002      	b.n	8009b62 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009b5c:	200c      	movs	r0, #12
 8009b5e:	f7ff fdf9 	bl	8009754 <lcd_send_cmd>
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009b74:	4b04      	ldr	r3, [pc, #16]	@ (8009b88 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	4a03      	ldr	r2, [pc, #12]	@ (8009b88 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009b7c:	6013      	str	r3, [r2, #0]
}
 8009b7e:	bf00      	nop
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr
 8009b88:	20001044 	.word	0x20001044

08009b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b90:	f000 fc38 	bl	800a404 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009b94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b98:	f000 fc96 	bl	800a4c8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b9c:	f000 f89a 	bl	8009cd4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009ba0:	f000 f9bc 	bl	8009f1c <MX_GPIO_Init>
  MX_CAN_Init();
 8009ba4:	f000 f8dc 	bl	8009d60 <MX_CAN_Init>
  MX_I2C1_Init();
 8009ba8:	f000 f90e 	bl	8009dc8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009bac:	f000 f93a 	bl	8009e24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009bb0:	f000 f98a 	bl	8009ec8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	2140      	movs	r1, #64	@ 0x40
 8009bb8:	483d      	ldr	r0, [pc, #244]	@ (8009cb0 <main+0x124>)
 8009bba:	f001 fa6c 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	2180      	movs	r1, #128	@ 0x80
 8009bc2:	483b      	ldr	r0, [pc, #236]	@ (8009cb0 <main+0x124>)
 8009bc4:	f001 fa67 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009bc8:	200a      	movs	r0, #10
 8009bca:	f000 fc7d 	bl	800a4c8 <HAL_Delay>
  lcd_init();
 8009bce:	f7ff ff27 	bl	8009a20 <lcd_init>
  HAL_Delay(10);
 8009bd2:	200a      	movs	r0, #10
 8009bd4:	f000 fc78 	bl	800a4c8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009bd8:	4836      	ldr	r0, [pc, #216]	@ (8009cb4 <main+0x128>)
 8009bda:	f003 f90f 	bl	800cdfc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009bde:	bf00      	nop
 8009be0:	4835      	ldr	r0, [pc, #212]	@ (8009cb8 <main+0x12c>)
 8009be2:	f002 f86a 	bl	800bcba <HAL_I2C_GetError>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d0f9      	beq.n	8009be0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009bec:	bf00      	nop
 8009bee:	4832      	ldr	r0, [pc, #200]	@ (8009cb8 <main+0x12c>)
 8009bf0:	f002 f856 	bl	800bca0 <HAL_I2C_GetState>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d1f9      	bne.n	8009bee <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009c00:	482b      	ldr	r0, [pc, #172]	@ (8009cb0 <main+0x124>)
 8009c02:	f001 fa48 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8009c06:	2200      	movs	r2, #0
 8009c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009c0c:	4828      	ldr	r0, [pc, #160]	@ (8009cb0 <main+0x124>)
 8009c0e:	f001 fa42 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8009c12:	2200      	movs	r2, #0
 8009c14:	2104      	movs	r1, #4
 8009c16:	4826      	ldr	r0, [pc, #152]	@ (8009cb0 <main+0x124>)
 8009c18:	f001 fa3d 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2102      	movs	r1, #2
 8009c20:	4823      	ldr	r0, [pc, #140]	@ (8009cb0 <main+0x124>)
 8009c22:	f001 fa38 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2101      	movs	r1, #1
 8009c2a:	4821      	ldr	r0, [pc, #132]	@ (8009cb0 <main+0x124>)
 8009c2c:	f001 fa33 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009c30:	2200      	movs	r2, #0
 8009c32:	2120      	movs	r1, #32
 8009c34:	4821      	ldr	r0, [pc, #132]	@ (8009cbc <main+0x130>)
 8009c36:	f001 fa2e 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2110      	movs	r1, #16
 8009c3e:	481f      	ldr	r0, [pc, #124]	@ (8009cbc <main+0x130>)
 8009c40:	f001 fa29 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009c44:	2200      	movs	r2, #0
 8009c46:	2180      	movs	r1, #128	@ 0x80
 8009c48:	481d      	ldr	r0, [pc, #116]	@ (8009cc0 <main+0x134>)
 8009c4a:	f001 fa24 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2140      	movs	r1, #64	@ 0x40
 8009c52:	481b      	ldr	r0, [pc, #108]	@ (8009cc0 <main+0x134>)
 8009c54:	f001 fa1f 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2120      	movs	r1, #32
 8009c5c:	4818      	ldr	r0, [pc, #96]	@ (8009cc0 <main+0x134>)
 8009c5e:	f001 fa1a 	bl	800b096 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009c62:	2200      	movs	r2, #0
 8009c64:	2110      	movs	r1, #16
 8009c66:	4816      	ldr	r0, [pc, #88]	@ (8009cc0 <main+0x134>)
 8009c68:	f001 fa15 	bl	800b096 <HAL_GPIO_WritePin>

  i2cTest();
 8009c6c:	f7f6 fef6 	bl	8000a5c <i2cTest>
  HAL_Delay(100);
 8009c70:	2064      	movs	r0, #100	@ 0x64
 8009c72:	f000 fc29 	bl	800a4c8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8009c76:	4a13      	ldr	r2, [pc, #76]	@ (8009cc4 <main+0x138>)
 8009c78:	2101      	movs	r1, #1
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	f7ff ff02 	bl	8009a84 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009c80:	4a11      	ldr	r2, [pc, #68]	@ (8009cc8 <main+0x13c>)
 8009c82:	2101      	movs	r1, #1
 8009c84:	2002      	movs	r0, #2
 8009c86:	f7ff fefd 	bl	8009a84 <lcd_print>
  HAL_Delay(1000);
 8009c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009c8e:	f000 fc1b 	bl	800a4c8 <HAL_Delay>
  lcd_clear();
 8009c92:	f7ff ff23 	bl	8009adc <lcd_clear>

  eepromKontrol();
 8009c96:	f7f6 facd 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009c9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c9e:	f000 fc13 	bl	800a4c8 <HAL_Delay>

  backLightTimer = millis;
 8009ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ccc <main+0x140>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd0 <main+0x144>)
 8009ca8:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009caa:	f7fd f9fd 	bl	80070a8 <mainLoop>
 8009cae:	e7fc      	b.n	8009caa <main+0x11e>
 8009cb0:	40010c00 	.word	0x40010c00
 8009cb4:	20001844 	.word	0x20001844
 8009cb8:	200017f0 	.word	0x200017f0
 8009cbc:	40011000 	.word	0x40011000
 8009cc0:	40010800 	.word	0x40010800
 8009cc4:	2000009c 	.word	0x2000009c
 8009cc8:	200000b0 	.word	0x200000b0
 8009ccc:	20001044 	.word	0x20001044
 8009cd0:	20001060 	.word	0x20001060

08009cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b090      	sub	sp, #64	@ 0x40
 8009cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cda:	f107 0318 	add.w	r3, r7, #24
 8009cde:	2228      	movs	r2, #40	@ 0x28
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f004 f9fa 	bl	800e0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ce8:	1d3b      	adds	r3, r7, #4
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	605a      	str	r2, [r3, #4]
 8009cf0:	609a      	str	r2, [r3, #8]
 8009cf2:	60da      	str	r2, [r3, #12]
 8009cf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009cfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009cfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009d00:	2300      	movs	r3, #0
 8009d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009d04:	2301      	movs	r3, #1
 8009d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d08:	2302      	movs	r3, #2
 8009d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009d10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009d12:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d18:	f107 0318 	add.w	r3, r7, #24
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f002 fc0d 	bl	800c53c <HAL_RCC_OscConfig>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009d28:	f000 f9a2 	bl	800a070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d2c:	230f      	movs	r3, #15
 8009d2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d30:	2302      	movs	r3, #2
 8009d32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009d38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009d42:	1d3b      	adds	r3, r7, #4
 8009d44:	2102      	movs	r1, #2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f002 fe7a 	bl	800ca40 <HAL_RCC_ClockConfig>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8009d52:	f000 f98d 	bl	800a070 <Error_Handler>
  }
}
 8009d56:	bf00      	nop
 8009d58:	3740      	adds	r7, #64	@ 0x40
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009d64:	4b16      	ldr	r3, [pc, #88]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d66:	4a17      	ldr	r2, [pc, #92]	@ (8009dc4 <MX_CAN_Init+0x64>)
 8009d68:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009d6a:	4b15      	ldr	r3, [pc, #84]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d6c:	2210      	movs	r2, #16
 8009d6e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009d70:	4b13      	ldr	r3, [pc, #76]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009d76:	4b12      	ldr	r3, [pc, #72]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009d7c:	4b10      	ldr	r3, [pc, #64]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009d82:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009d88:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009d94:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009d9a:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009da0:	4b07      	ldr	r3, [pc, #28]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009da6:	4b06      	ldr	r3, [pc, #24]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009dac:	4804      	ldr	r0, [pc, #16]	@ (8009dc0 <MX_CAN_Init+0x60>)
 8009dae:	f000 fbaf 	bl	800a510 <HAL_CAN_Init>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009db8:	f000 f95a 	bl	800a070 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009dbc:	bf00      	nop
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200017c8 	.word	0x200017c8
 8009dc4:	40006400 	.word	0x40006400

08009dc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009dcc:	4b12      	ldr	r3, [pc, #72]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009dce:	4a13      	ldr	r2, [pc, #76]	@ (8009e1c <MX_I2C1_Init+0x54>)
 8009dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009dd2:	4b11      	ldr	r3, [pc, #68]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009dd4:	4a12      	ldr	r2, [pc, #72]	@ (8009e20 <MX_I2C1_Init+0x58>)
 8009dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009dde:	4b0e      	ldr	r3, [pc, #56]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009de4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009de6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009dec:	4b0a      	ldr	r3, [pc, #40]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009df2:	4b09      	ldr	r3, [pc, #36]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009df8:	4b07      	ldr	r3, [pc, #28]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009dfe:	4b06      	ldr	r3, [pc, #24]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009e04:	4804      	ldr	r0, [pc, #16]	@ (8009e18 <MX_I2C1_Init+0x50>)
 8009e06:	f001 f977 	bl	800b0f8 <HAL_I2C_Init>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009e10:	f000 f92e 	bl	800a070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009e14:	bf00      	nop
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	200017f0 	.word	0x200017f0
 8009e1c:	40005400 	.word	0x40005400
 8009e20:	00061a80 	.word	0x00061a80

08009e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e2a:	f107 0308 	add.w	r3, r7, #8
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	605a      	str	r2, [r3, #4]
 8009e34:	609a      	str	r2, [r3, #8]
 8009e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e38:	463b      	mov	r3, r7
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009e40:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e42:	4a20      	ldr	r2, [pc, #128]	@ (8009ec4 <MX_TIM1_Init+0xa0>)
 8009e44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009e46:	4b1e      	ldr	r3, [pc, #120]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e48:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009e4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009e54:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e56:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e5c:	4b18      	ldr	r3, [pc, #96]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009e62:	4b17      	ldr	r3, [pc, #92]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e68:	4b15      	ldr	r3, [pc, #84]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009e6e:	4814      	ldr	r0, [pc, #80]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e70:	f002 ff74 	bl	800cd5c <HAL_TIM_Base_Init>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009e7a:	f000 f8f9 	bl	800a070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009e84:	f107 0308 	add.w	r3, r7, #8
 8009e88:	4619      	mov	r1, r3
 8009e8a:	480d      	ldr	r0, [pc, #52]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009e8c:	f003 f91e 	bl	800d0cc <HAL_TIM_ConfigClockSource>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009e96:	f000 f8eb 	bl	800a070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4806      	ldr	r0, [pc, #24]	@ (8009ec0 <MX_TIM1_Init+0x9c>)
 8009ea8:	f003 fb0c 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009eb2:	f000 f8dd 	bl	800a070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009eb6:	bf00      	nop
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001844 	.word	0x20001844
 8009ec4:	40012c00 	.word	0x40012c00

08009ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009ecc:	4b11      	ldr	r3, [pc, #68]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009ece:	4a12      	ldr	r2, [pc, #72]	@ (8009f18 <MX_USART1_UART_Init+0x50>)
 8009ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009ed2:	4b10      	ldr	r3, [pc, #64]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009eda:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009eec:	4b09      	ldr	r3, [pc, #36]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009eee:	220c      	movs	r2, #12
 8009ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ef2:	4b08      	ldr	r3, [pc, #32]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ef8:	4b06      	ldr	r3, [pc, #24]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009efe:	4805      	ldr	r0, [pc, #20]	@ (8009f14 <MX_USART1_UART_Init+0x4c>)
 8009f00:	f003 fb5e 	bl	800d5c0 <HAL_UART_Init>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009f0a:	f000 f8b1 	bl	800a070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009f0e:	bf00      	nop
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	2000188c 	.word	0x2000188c
 8009f18:	40013800 	.word	0x40013800

08009f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f22:	f107 0310 	add.w	r3, r7, #16
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	605a      	str	r2, [r3, #4]
 8009f2c:	609a      	str	r2, [r3, #8]
 8009f2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f30:	4b4b      	ldr	r3, [pc, #300]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	4a4a      	ldr	r2, [pc, #296]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f36:	f043 0310 	orr.w	r3, r3, #16
 8009f3a:	6193      	str	r3, [r2, #24]
 8009f3c:	4b48      	ldr	r3, [pc, #288]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f48:	4b45      	ldr	r3, [pc, #276]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	4a44      	ldr	r2, [pc, #272]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f4e:	f043 0320 	orr.w	r3, r3, #32
 8009f52:	6193      	str	r3, [r2, #24]
 8009f54:	4b42      	ldr	r3, [pc, #264]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	60bb      	str	r3, [r7, #8]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f60:	4b3f      	ldr	r3, [pc, #252]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	4a3e      	ldr	r2, [pc, #248]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f66:	f043 0304 	orr.w	r3, r3, #4
 8009f6a:	6193      	str	r3, [r2, #24]
 8009f6c:	4b3c      	ldr	r3, [pc, #240]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	607b      	str	r3, [r7, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f78:	4b39      	ldr	r3, [pc, #228]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	4a38      	ldr	r2, [pc, #224]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f7e:	f043 0308 	orr.w	r3, r3, #8
 8009f82:	6193      	str	r3, [r2, #24]
 8009f84:	4b36      	ldr	r3, [pc, #216]	@ (800a060 <MX_GPIO_Init+0x144>)
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	f003 0308 	and.w	r3, r3, #8
 8009f8c:	603b      	str	r3, [r7, #0]
 8009f8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009f90:	2200      	movs	r2, #0
 8009f92:	21f0      	movs	r1, #240	@ 0xf0
 8009f94:	4833      	ldr	r0, [pc, #204]	@ (800a064 <MX_GPIO_Init+0x148>)
 8009f96:	f001 f87e 	bl	800b096 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009fa0:	4831      	ldr	r0, [pc, #196]	@ (800a068 <MX_GPIO_Init+0x14c>)
 8009fa2:	f001 f878 	bl	800b096 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009fac:	482f      	ldr	r0, [pc, #188]	@ (800a06c <MX_GPIO_Init+0x150>)
 8009fae:	f001 f872 	bl	800b096 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009fb2:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8009fb6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fc0:	f107 0310 	add.w	r3, r7, #16
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4828      	ldr	r0, [pc, #160]	@ (800a068 <MX_GPIO_Init+0x14c>)
 8009fc8:	f000 fdee 	bl	800aba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009fcc:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009fd0:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fda:	f107 0310 	add.w	r3, r7, #16
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4820      	ldr	r0, [pc, #128]	@ (800a064 <MX_GPIO_Init+0x148>)
 8009fe2:	f000 fde1 	bl	800aba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009fe6:	23f0      	movs	r3, #240	@ 0xf0
 8009fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ff6:	f107 0310 	add.w	r3, r7, #16
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4819      	ldr	r0, [pc, #100]	@ (800a064 <MX_GPIO_Init+0x148>)
 8009ffe:	f000 fdd3 	bl	800aba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800a002:	f241 0330 	movw	r3, #4144	@ 0x1030
 800a006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a008:	2301      	movs	r3, #1
 800a00a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a00c:	2300      	movs	r3, #0
 800a00e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a010:	2302      	movs	r3, #2
 800a012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a014:	f107 0310 	add.w	r3, r7, #16
 800a018:	4619      	mov	r1, r3
 800a01a:	4813      	ldr	r0, [pc, #76]	@ (800a068 <MX_GPIO_Init+0x14c>)
 800a01c:	f000 fdc4 	bl	800aba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800a020:	f640 4307 	movw	r3, #3079	@ 0xc07
 800a024:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a026:	2301      	movs	r3, #1
 800a028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a02e:	2302      	movs	r3, #2
 800a030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a032:	f107 0310 	add.w	r3, r7, #16
 800a036:	4619      	mov	r1, r3
 800a038:	480c      	ldr	r0, [pc, #48]	@ (800a06c <MX_GPIO_Init+0x150>)
 800a03a:	f000 fdb5 	bl	800aba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800a03e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a048:	2300      	movs	r3, #0
 800a04a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a04c:	f107 0310 	add.w	r3, r7, #16
 800a050:	4619      	mov	r1, r3
 800a052:	4806      	ldr	r0, [pc, #24]	@ (800a06c <MX_GPIO_Init+0x150>)
 800a054:	f000 fda8 	bl	800aba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a058:	bf00      	nop
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40021000 	.word	0x40021000
 800a064:	40010800 	.word	0x40010800
 800a068:	40011000 	.word	0x40011000
 800a06c:	40010c00 	.word	0x40010c00

0800a070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800a074:	bf00      	nop
 800a076:	46bd      	mov	sp, r7
 800a078:	bc80      	pop	{r7}
 800a07a:	4770      	bx	lr

0800a07c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a082:	4b15      	ldr	r3, [pc, #84]	@ (800a0d8 <HAL_MspInit+0x5c>)
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	4a14      	ldr	r2, [pc, #80]	@ (800a0d8 <HAL_MspInit+0x5c>)
 800a088:	f043 0301 	orr.w	r3, r3, #1
 800a08c:	6193      	str	r3, [r2, #24]
 800a08e:	4b12      	ldr	r3, [pc, #72]	@ (800a0d8 <HAL_MspInit+0x5c>)
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	60bb      	str	r3, [r7, #8]
 800a098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a09a:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d8 <HAL_MspInit+0x5c>)
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	4a0e      	ldr	r2, [pc, #56]	@ (800a0d8 <HAL_MspInit+0x5c>)
 800a0a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0a4:	61d3      	str	r3, [r2, #28]
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <HAL_MspInit+0x5c>)
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0ae:	607b      	str	r3, [r7, #4]
 800a0b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <HAL_MspInit+0x60>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	4a04      	ldr	r2, [pc, #16]	@ (800a0dc <HAL_MspInit+0x60>)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a0ce:	bf00      	nop
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bc80      	pop	{r7}
 800a0d6:	4770      	bx	lr
 800a0d8:	40021000 	.word	0x40021000
 800a0dc:	40010000 	.word	0x40010000

0800a0e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	605a      	str	r2, [r3, #4]
 800a0f2:	609a      	str	r2, [r3, #8]
 800a0f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a16c <HAL_CAN_MspInit+0x8c>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d131      	bne.n	800a164 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a100:	4b1b      	ldr	r3, [pc, #108]	@ (800a170 <HAL_CAN_MspInit+0x90>)
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	4a1a      	ldr	r2, [pc, #104]	@ (800a170 <HAL_CAN_MspInit+0x90>)
 800a106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a10a:	61d3      	str	r3, [r2, #28]
 800a10c:	4b18      	ldr	r3, [pc, #96]	@ (800a170 <HAL_CAN_MspInit+0x90>)
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a118:	4b15      	ldr	r3, [pc, #84]	@ (800a170 <HAL_CAN_MspInit+0x90>)
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	4a14      	ldr	r2, [pc, #80]	@ (800a170 <HAL_CAN_MspInit+0x90>)
 800a11e:	f043 0304 	orr.w	r3, r3, #4
 800a122:	6193      	str	r3, [r2, #24]
 800a124:	4b12      	ldr	r3, [pc, #72]	@ (800a170 <HAL_CAN_MspInit+0x90>)
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	60bb      	str	r3, [r7, #8]
 800a12e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a130:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a134:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a13e:	f107 0310 	add.w	r3, r7, #16
 800a142:	4619      	mov	r1, r3
 800a144:	480b      	ldr	r0, [pc, #44]	@ (800a174 <HAL_CAN_MspInit+0x94>)
 800a146:	f000 fd2f 	bl	800aba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a14a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a14e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a150:	2302      	movs	r3, #2
 800a152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a154:	2303      	movs	r3, #3
 800a156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a158:	f107 0310 	add.w	r3, r7, #16
 800a15c:	4619      	mov	r1, r3
 800a15e:	4805      	ldr	r0, [pc, #20]	@ (800a174 <HAL_CAN_MspInit+0x94>)
 800a160:	f000 fd22 	bl	800aba8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800a164:	bf00      	nop
 800a166:	3720      	adds	r7, #32
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	40006400 	.word	0x40006400
 800a170:	40021000 	.word	0x40021000
 800a174:	40010800 	.word	0x40010800

0800a178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a180:	f107 0310 	add.w	r3, r7, #16
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	605a      	str	r2, [r3, #4]
 800a18a:	609a      	str	r2, [r3, #8]
 800a18c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a15      	ldr	r2, [pc, #84]	@ (800a1e8 <HAL_I2C_MspInit+0x70>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d123      	bne.n	800a1e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a198:	4b14      	ldr	r3, [pc, #80]	@ (800a1ec <HAL_I2C_MspInit+0x74>)
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	4a13      	ldr	r2, [pc, #76]	@ (800a1ec <HAL_I2C_MspInit+0x74>)
 800a19e:	f043 0308 	orr.w	r3, r3, #8
 800a1a2:	6193      	str	r3, [r2, #24]
 800a1a4:	4b11      	ldr	r3, [pc, #68]	@ (800a1ec <HAL_I2C_MspInit+0x74>)
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a1b0:	23c0      	movs	r3, #192	@ 0xc0
 800a1b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a1b4:	2312      	movs	r3, #18
 800a1b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1bc:	f107 0310 	add.w	r3, r7, #16
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	480b      	ldr	r0, [pc, #44]	@ (800a1f0 <HAL_I2C_MspInit+0x78>)
 800a1c4:	f000 fcf0 	bl	800aba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a1c8:	4b08      	ldr	r3, [pc, #32]	@ (800a1ec <HAL_I2C_MspInit+0x74>)
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	4a07      	ldr	r2, [pc, #28]	@ (800a1ec <HAL_I2C_MspInit+0x74>)
 800a1ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1d2:	61d3      	str	r3, [r2, #28]
 800a1d4:	4b05      	ldr	r3, [pc, #20]	@ (800a1ec <HAL_I2C_MspInit+0x74>)
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800a1e0:	bf00      	nop
 800a1e2:	3720      	adds	r7, #32
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	40005400 	.word	0x40005400
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	40010c00 	.word	0x40010c00

0800a1f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0a      	ldr	r2, [pc, #40]	@ (800a22c <HAL_I2C_MspDeInit+0x38>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d10d      	bne.n	800a222 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a206:	4b0a      	ldr	r3, [pc, #40]	@ (800a230 <HAL_I2C_MspDeInit+0x3c>)
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	4a09      	ldr	r2, [pc, #36]	@ (800a230 <HAL_I2C_MspDeInit+0x3c>)
 800a20c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a210:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800a212:	2140      	movs	r1, #64	@ 0x40
 800a214:	4807      	ldr	r0, [pc, #28]	@ (800a234 <HAL_I2C_MspDeInit+0x40>)
 800a216:	f000 fe5b 	bl	800aed0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800a21a:	2180      	movs	r1, #128	@ 0x80
 800a21c:	4805      	ldr	r0, [pc, #20]	@ (800a234 <HAL_I2C_MspDeInit+0x40>)
 800a21e:	f000 fe57 	bl	800aed0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	40005400 	.word	0x40005400
 800a230:	40021000 	.word	0x40021000
 800a234:	40010c00 	.word	0x40010c00

0800a238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a0d      	ldr	r2, [pc, #52]	@ (800a27c <HAL_TIM_Base_MspInit+0x44>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d113      	bne.n	800a272 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a24a:	4b0d      	ldr	r3, [pc, #52]	@ (800a280 <HAL_TIM_Base_MspInit+0x48>)
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	4a0c      	ldr	r2, [pc, #48]	@ (800a280 <HAL_TIM_Base_MspInit+0x48>)
 800a250:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a254:	6193      	str	r3, [r2, #24]
 800a256:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <HAL_TIM_Base_MspInit+0x48>)
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	2019      	movs	r0, #25
 800a268:	f000 fb25 	bl	800a8b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a26c:	2019      	movs	r0, #25
 800a26e:	f000 fb3e 	bl	800a8ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	40012c00 	.word	0x40012c00
 800a280:	40021000 	.word	0x40021000

0800a284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a28c:	f107 0310 	add.w	r3, r7, #16
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	609a      	str	r2, [r3, #8]
 800a298:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a20      	ldr	r2, [pc, #128]	@ (800a320 <HAL_UART_MspInit+0x9c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d139      	bne.n	800a318 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a2a4:	4b1f      	ldr	r3, [pc, #124]	@ (800a324 <HAL_UART_MspInit+0xa0>)
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	4a1e      	ldr	r2, [pc, #120]	@ (800a324 <HAL_UART_MspInit+0xa0>)
 800a2aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2ae:	6193      	str	r3, [r2, #24]
 800a2b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a324 <HAL_UART_MspInit+0xa0>)
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2bc:	4b19      	ldr	r3, [pc, #100]	@ (800a324 <HAL_UART_MspInit+0xa0>)
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	4a18      	ldr	r2, [pc, #96]	@ (800a324 <HAL_UART_MspInit+0xa0>)
 800a2c2:	f043 0304 	orr.w	r3, r3, #4
 800a2c6:	6193      	str	r3, [r2, #24]
 800a2c8:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <HAL_UART_MspInit+0xa0>)
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f003 0304 	and.w	r3, r3, #4
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a2d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2da:	2302      	movs	r3, #2
 800a2dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2e2:	f107 0310 	add.w	r3, r7, #16
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	480f      	ldr	r0, [pc, #60]	@ (800a328 <HAL_UART_MspInit+0xa4>)
 800a2ea:	f000 fc5d 	bl	800aba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a2ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2fc:	f107 0310 	add.w	r3, r7, #16
 800a300:	4619      	mov	r1, r3
 800a302:	4809      	ldr	r0, [pc, #36]	@ (800a328 <HAL_UART_MspInit+0xa4>)
 800a304:	f000 fc50 	bl	800aba8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a308:	2200      	movs	r2, #0
 800a30a:	2100      	movs	r1, #0
 800a30c:	2025      	movs	r0, #37	@ 0x25
 800a30e:	f000 fad2 	bl	800a8b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a312:	2025      	movs	r0, #37	@ 0x25
 800a314:	f000 faeb 	bl	800a8ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800a318:	bf00      	nop
 800a31a:	3720      	adds	r7, #32
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40013800 	.word	0x40013800
 800a324:	40021000 	.word	0x40021000
 800a328:	40010800 	.word	0x40010800

0800a32c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a330:	bf00      	nop
 800a332:	e7fd      	b.n	800a330 <NMI_Handler+0x4>

0800a334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a338:	bf00      	nop
 800a33a:	e7fd      	b.n	800a338 <HardFault_Handler+0x4>

0800a33c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <MemManage_Handler+0x4>

0800a344 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a348:	bf00      	nop
 800a34a:	e7fd      	b.n	800a348 <BusFault_Handler+0x4>

0800a34c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a350:	bf00      	nop
 800a352:	e7fd      	b.n	800a350 <UsageFault_Handler+0x4>

0800a354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a358:	bf00      	nop
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bc80      	pop	{r7}
 800a35e:	4770      	bx	lr

0800a360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a364:	bf00      	nop
 800a366:	46bd      	mov	sp, r7
 800a368:	bc80      	pop	{r7}
 800a36a:	4770      	bx	lr

0800a36c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a370:	bf00      	nop
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr

0800a378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a37c:	f000 f888 	bl	800a490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a380:	bf00      	nop
 800a382:	bd80      	pop	{r7, pc}

0800a384 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a388:	4802      	ldr	r0, [pc, #8]	@ (800a394 <TIM1_UP_IRQHandler+0x10>)
 800a38a:	f002 fd97 	bl	800cebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a38e:	bf00      	nop
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20001844 	.word	0x20001844

0800a398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a39c:	4802      	ldr	r0, [pc, #8]	@ (800a3a8 <USART1_IRQHandler+0x10>)
 800a39e:	f003 f95f 	bl	800d660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a3a2:	bf00      	nop
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	2000188c 	.word	0x2000188c

0800a3ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a3b0:	bf00      	nop
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr

0800a3b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a3b8:	480c      	ldr	r0, [pc, #48]	@ (800a3ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a3ba:	490d      	ldr	r1, [pc, #52]	@ (800a3f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a3bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a3be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a3c0:	e002      	b.n	800a3c8 <LoopCopyDataInit>

0800a3c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a3c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a3c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a3c6:	3304      	adds	r3, #4

0800a3c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a3c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a3ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3cc:	d3f9      	bcc.n	800a3c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a3f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a3d0:	4c0a      	ldr	r4, [pc, #40]	@ (800a3fc <LoopFillZerobss+0x22>)
  movs r3, #0
 800a3d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3d4:	e001      	b.n	800a3da <LoopFillZerobss>

0800a3d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3d8:	3204      	adds	r2, #4

0800a3da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3dc:	d3fb      	bcc.n	800a3d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a3de:	f7ff ffe5 	bl	800a3ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a3e2:	f003 fe83 	bl	800e0ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a3e6:	f7ff fbd1 	bl	8009b8c <main>
  bx lr
 800a3ea:	4770      	bx	lr
  ldr r0, =_sdata
 800a3ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3f0:	20000f80 	.word	0x20000f80
  ldr r2, =_sidata
 800a3f4:	0800e340 	.word	0x0800e340
  ldr r2, =_sbss
 800a3f8:	20000f80 	.word	0x20000f80
  ldr r4, =_ebss
 800a3fc:	200018d8 	.word	0x200018d8

0800a400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a400:	e7fe      	b.n	800a400 <ADC1_2_IRQHandler>
	...

0800a404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a408:	4b08      	ldr	r3, [pc, #32]	@ (800a42c <HAL_Init+0x28>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a07      	ldr	r2, [pc, #28]	@ (800a42c <HAL_Init+0x28>)
 800a40e:	f043 0310 	orr.w	r3, r3, #16
 800a412:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a414:	2003      	movs	r0, #3
 800a416:	f000 fa43 	bl	800a8a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a41a:	200f      	movs	r0, #15
 800a41c:	f000 f808 	bl	800a430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a420:	f7ff fe2c 	bl	800a07c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40022000 	.word	0x40022000

0800a430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a438:	4b12      	ldr	r3, [pc, #72]	@ (800a484 <HAL_InitTick+0x54>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	4b12      	ldr	r3, [pc, #72]	@ (800a488 <HAL_InitTick+0x58>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	4619      	mov	r1, r3
 800a442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a446:	fbb3 f3f1 	udiv	r3, r3, r1
 800a44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 fa5b 	bl	800a90a <HAL_SYSTICK_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e00e      	b.n	800a47c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b0f      	cmp	r3, #15
 800a462:	d80a      	bhi.n	800a47a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a464:	2200      	movs	r2, #0
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	f000 fa23 	bl	800a8b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a470:	4a06      	ldr	r2, [pc, #24]	@ (800a48c <HAL_InitTick+0x5c>)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	e000      	b.n	800a47c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20000f74 	.word	0x20000f74
 800a488:	20000f7c 	.word	0x20000f7c
 800a48c:	20000f78 	.word	0x20000f78

0800a490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a494:	4b05      	ldr	r3, [pc, #20]	@ (800a4ac <HAL_IncTick+0x1c>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	4b05      	ldr	r3, [pc, #20]	@ (800a4b0 <HAL_IncTick+0x20>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4413      	add	r3, r2
 800a4a0:	4a03      	ldr	r2, [pc, #12]	@ (800a4b0 <HAL_IncTick+0x20>)
 800a4a2:	6013      	str	r3, [r2, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr
 800a4ac:	20000f7c 	.word	0x20000f7c
 800a4b0:	200018d4 	.word	0x200018d4

0800a4b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
  return uwTick;
 800a4b8:	4b02      	ldr	r3, [pc, #8]	@ (800a4c4 <HAL_GetTick+0x10>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr
 800a4c4:	200018d4 	.word	0x200018d4

0800a4c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4d0:	f7ff fff0 	bl	800a4b4 <HAL_GetTick>
 800a4d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d005      	beq.n	800a4ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <HAL_Delay+0x44>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a4ee:	bf00      	nop
 800a4f0:	f7ff ffe0 	bl	800a4b4 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d8f7      	bhi.n	800a4f0 <HAL_Delay+0x28>
  {
  }
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000f7c 	.word	0x20000f7c

0800a510 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e0ed      	b.n	800a6fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fdd6 	bl	800a0e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f042 0201 	orr.w	r2, r2, #1
 800a542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a544:	f7ff ffb6 	bl	800a4b4 <HAL_GetTick>
 800a548:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a54a:	e012      	b.n	800a572 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a54c:	f7ff ffb2 	bl	800a4b4 <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	2b0a      	cmp	r3, #10
 800a558:	d90b      	bls.n	800a572 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2205      	movs	r2, #5
 800a56a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e0c5      	b.n	800a6fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0e5      	beq.n	800a54c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0202 	bic.w	r2, r2, #2
 800a58e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a590:	f7ff ff90 	bl	800a4b4 <HAL_GetTick>
 800a594:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a596:	e012      	b.n	800a5be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a598:	f7ff ff8c 	bl	800a4b4 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b0a      	cmp	r3, #10
 800a5a4:	d90b      	bls.n	800a5be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2205      	movs	r2, #5
 800a5b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e09f      	b.n	800a6fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e5      	bne.n	800a598 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7e1b      	ldrb	r3, [r3, #24]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d108      	bne.n	800a5e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e007      	b.n	800a5f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	7e5b      	ldrb	r3, [r3, #25]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d108      	bne.n	800a610 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e007      	b.n	800a620 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a61e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7e9b      	ldrb	r3, [r3, #26]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d108      	bne.n	800a63a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0220 	orr.w	r2, r2, #32
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	e007      	b.n	800a64a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f022 0220 	bic.w	r2, r2, #32
 800a648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7edb      	ldrb	r3, [r3, #27]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d108      	bne.n	800a664 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0210 	bic.w	r2, r2, #16
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	e007      	b.n	800a674 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0210 	orr.w	r2, r2, #16
 800a672:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7f1b      	ldrb	r3, [r3, #28]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d108      	bne.n	800a68e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0208 	orr.w	r2, r2, #8
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e007      	b.n	800a69e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f022 0208 	bic.w	r2, r2, #8
 800a69c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	7f5b      	ldrb	r3, [r3, #29]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d108      	bne.n	800a6b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f042 0204 	orr.w	r2, r2, #4
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e007      	b.n	800a6c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0204 	bic.w	r2, r2, #4
 800a6c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	ea42 0103 	orr.w	r1, r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <__NVIC_SetPriorityGrouping>:
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a718:	4b0c      	ldr	r3, [pc, #48]	@ (800a74c <__NVIC_SetPriorityGrouping+0x44>)
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a724:	4013      	ands	r3, r2
 800a726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a73a:	4a04      	ldr	r2, [pc, #16]	@ (800a74c <__NVIC_SetPriorityGrouping+0x44>)
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	60d3      	str	r3, [r2, #12]
}
 800a740:	bf00      	nop
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	bc80      	pop	{r7}
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	e000ed00 	.word	0xe000ed00

0800a750 <__NVIC_GetPriorityGrouping>:
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a754:	4b04      	ldr	r3, [pc, #16]	@ (800a768 <__NVIC_GetPriorityGrouping+0x18>)
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	0a1b      	lsrs	r3, r3, #8
 800a75a:	f003 0307 	and.w	r3, r3, #7
}
 800a75e:	4618      	mov	r0, r3
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	e000ed00 	.word	0xe000ed00

0800a76c <__NVIC_EnableIRQ>:
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	db0b      	blt.n	800a796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	f003 021f 	and.w	r2, r3, #31
 800a784:	4906      	ldr	r1, [pc, #24]	@ (800a7a0 <__NVIC_EnableIRQ+0x34>)
 800a786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	2001      	movs	r0, #1
 800a78e:	fa00 f202 	lsl.w	r2, r0, r2
 800a792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bc80      	pop	{r7}
 800a79e:	4770      	bx	lr
 800a7a0:	e000e100 	.word	0xe000e100

0800a7a4 <__NVIC_SetPriority>:
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	db0a      	blt.n	800a7ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	490c      	ldr	r1, [pc, #48]	@ (800a7f0 <__NVIC_SetPriority+0x4c>)
 800a7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c2:	0112      	lsls	r2, r2, #4
 800a7c4:	b2d2      	uxtb	r2, r2
 800a7c6:	440b      	add	r3, r1
 800a7c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7cc:	e00a      	b.n	800a7e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	4908      	ldr	r1, [pc, #32]	@ (800a7f4 <__NVIC_SetPriority+0x50>)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	f003 030f 	and.w	r3, r3, #15
 800a7da:	3b04      	subs	r3, #4
 800a7dc:	0112      	lsls	r2, r2, #4
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	440b      	add	r3, r1
 800a7e2:	761a      	strb	r2, [r3, #24]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	e000e100 	.word	0xe000e100
 800a7f4:	e000ed00 	.word	0xe000ed00

0800a7f8 <NVIC_EncodePriority>:
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b089      	sub	sp, #36	@ 0x24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f1c3 0307 	rsb	r3, r3, #7
 800a812:	2b04      	cmp	r3, #4
 800a814:	bf28      	it	cs
 800a816:	2304      	movcs	r3, #4
 800a818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	3304      	adds	r3, #4
 800a81e:	2b06      	cmp	r3, #6
 800a820:	d902      	bls.n	800a828 <NVIC_EncodePriority+0x30>
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	3b03      	subs	r3, #3
 800a826:	e000      	b.n	800a82a <NVIC_EncodePriority+0x32>
 800a828:	2300      	movs	r3, #0
 800a82a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	fa02 f303 	lsl.w	r3, r2, r3
 800a836:	43da      	mvns	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	401a      	ands	r2, r3
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a840:	f04f 31ff 	mov.w	r1, #4294967295
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	fa01 f303 	lsl.w	r3, r1, r3
 800a84a:	43d9      	mvns	r1, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a850:	4313      	orrs	r3, r2
}
 800a852:	4618      	mov	r0, r3
 800a854:	3724      	adds	r7, #36	@ 0x24
 800a856:	46bd      	mov	sp, r7
 800a858:	bc80      	pop	{r7}
 800a85a:	4770      	bx	lr

0800a85c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3b01      	subs	r3, #1
 800a868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a86c:	d301      	bcc.n	800a872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a86e:	2301      	movs	r3, #1
 800a870:	e00f      	b.n	800a892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a872:	4a0a      	ldr	r2, [pc, #40]	@ (800a89c <SysTick_Config+0x40>)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3b01      	subs	r3, #1
 800a878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a87a:	210f      	movs	r1, #15
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295
 800a880:	f7ff ff90 	bl	800a7a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a884:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <SysTick_Config+0x40>)
 800a886:	2200      	movs	r2, #0
 800a888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a88a:	4b04      	ldr	r3, [pc, #16]	@ (800a89c <SysTick_Config+0x40>)
 800a88c:	2207      	movs	r2, #7
 800a88e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	e000e010 	.word	0xe000e010

0800a8a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff ff2d 	bl	800a708 <__NVIC_SetPriorityGrouping>
}
 800a8ae:	bf00      	nop
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b086      	sub	sp, #24
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	4603      	mov	r3, r0
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a8c8:	f7ff ff42 	bl	800a750 <__NVIC_GetPriorityGrouping>
 800a8cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	68b9      	ldr	r1, [r7, #8]
 800a8d2:	6978      	ldr	r0, [r7, #20]
 800a8d4:	f7ff ff90 	bl	800a7f8 <NVIC_EncodePriority>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8de:	4611      	mov	r1, r2
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff ff5f 	bl	800a7a4 <__NVIC_SetPriority>
}
 800a8e6:	bf00      	nop
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff ff35 	bl	800a76c <__NVIC_EnableIRQ>
}
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b082      	sub	sp, #8
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff ffa2 	bl	800a85c <SysTick_Config>
 800a918:	4603      	mov	r3, r0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a922:	b480      	push	{r7}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b02      	cmp	r3, #2
 800a938:	d008      	beq.n	800a94c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2204      	movs	r2, #4
 800a93e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e020      	b.n	800a98e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 020e 	bic.w	r2, r2, #14
 800a95a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a974:	2101      	movs	r1, #1
 800a976:	fa01 f202 	lsl.w	r2, r1, r2
 800a97a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d005      	beq.n	800a9bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2204      	movs	r2, #4
 800a9b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	73fb      	strb	r3, [r7, #15]
 800a9ba:	e0d6      	b.n	800ab6a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f022 020e 	bic.w	r2, r2, #14
 800a9ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b64      	ldr	r3, [pc, #400]	@ (800ab74 <HAL_DMA_Abort_IT+0x1dc>)
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d958      	bls.n	800aa9a <HAL_DMA_Abort_IT+0x102>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a62      	ldr	r2, [pc, #392]	@ (800ab78 <HAL_DMA_Abort_IT+0x1e0>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d04f      	beq.n	800aa92 <HAL_DMA_Abort_IT+0xfa>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a61      	ldr	r2, [pc, #388]	@ (800ab7c <HAL_DMA_Abort_IT+0x1e4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d048      	beq.n	800aa8e <HAL_DMA_Abort_IT+0xf6>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a5f      	ldr	r2, [pc, #380]	@ (800ab80 <HAL_DMA_Abort_IT+0x1e8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d040      	beq.n	800aa88 <HAL_DMA_Abort_IT+0xf0>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a5e      	ldr	r2, [pc, #376]	@ (800ab84 <HAL_DMA_Abort_IT+0x1ec>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d038      	beq.n	800aa82 <HAL_DMA_Abort_IT+0xea>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a5c      	ldr	r2, [pc, #368]	@ (800ab88 <HAL_DMA_Abort_IT+0x1f0>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d030      	beq.n	800aa7c <HAL_DMA_Abort_IT+0xe4>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a5b      	ldr	r2, [pc, #364]	@ (800ab8c <HAL_DMA_Abort_IT+0x1f4>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d028      	beq.n	800aa76 <HAL_DMA_Abort_IT+0xde>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a52      	ldr	r2, [pc, #328]	@ (800ab74 <HAL_DMA_Abort_IT+0x1dc>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d020      	beq.n	800aa70 <HAL_DMA_Abort_IT+0xd8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a57      	ldr	r2, [pc, #348]	@ (800ab90 <HAL_DMA_Abort_IT+0x1f8>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d019      	beq.n	800aa6c <HAL_DMA_Abort_IT+0xd4>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a55      	ldr	r2, [pc, #340]	@ (800ab94 <HAL_DMA_Abort_IT+0x1fc>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d012      	beq.n	800aa68 <HAL_DMA_Abort_IT+0xd0>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a54      	ldr	r2, [pc, #336]	@ (800ab98 <HAL_DMA_Abort_IT+0x200>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00a      	beq.n	800aa62 <HAL_DMA_Abort_IT+0xca>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a52      	ldr	r2, [pc, #328]	@ (800ab9c <HAL_DMA_Abort_IT+0x204>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d102      	bne.n	800aa5c <HAL_DMA_Abort_IT+0xc4>
 800aa56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa5a:	e01b      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aa60:	e018      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa66:	e015      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa68:	2310      	movs	r3, #16
 800aa6a:	e013      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e011      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa74:	e00e      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aa7a:	e00b      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aa80:	e008      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa86:	e005      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa8c:	e002      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa8e:	2310      	movs	r3, #16
 800aa90:	e000      	b.n	800aa94 <HAL_DMA_Abort_IT+0xfc>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4a42      	ldr	r2, [pc, #264]	@ (800aba0 <HAL_DMA_Abort_IT+0x208>)
 800aa96:	6053      	str	r3, [r2, #4]
 800aa98:	e057      	b.n	800ab4a <HAL_DMA_Abort_IT+0x1b2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a36      	ldr	r2, [pc, #216]	@ (800ab78 <HAL_DMA_Abort_IT+0x1e0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d04f      	beq.n	800ab44 <HAL_DMA_Abort_IT+0x1ac>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a34      	ldr	r2, [pc, #208]	@ (800ab7c <HAL_DMA_Abort_IT+0x1e4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d048      	beq.n	800ab40 <HAL_DMA_Abort_IT+0x1a8>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a33      	ldr	r2, [pc, #204]	@ (800ab80 <HAL_DMA_Abort_IT+0x1e8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d040      	beq.n	800ab3a <HAL_DMA_Abort_IT+0x1a2>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a31      	ldr	r2, [pc, #196]	@ (800ab84 <HAL_DMA_Abort_IT+0x1ec>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d038      	beq.n	800ab34 <HAL_DMA_Abort_IT+0x19c>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a30      	ldr	r2, [pc, #192]	@ (800ab88 <HAL_DMA_Abort_IT+0x1f0>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d030      	beq.n	800ab2e <HAL_DMA_Abort_IT+0x196>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a2e      	ldr	r2, [pc, #184]	@ (800ab8c <HAL_DMA_Abort_IT+0x1f4>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d028      	beq.n	800ab28 <HAL_DMA_Abort_IT+0x190>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a26      	ldr	r2, [pc, #152]	@ (800ab74 <HAL_DMA_Abort_IT+0x1dc>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d020      	beq.n	800ab22 <HAL_DMA_Abort_IT+0x18a>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a2a      	ldr	r2, [pc, #168]	@ (800ab90 <HAL_DMA_Abort_IT+0x1f8>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d019      	beq.n	800ab1e <HAL_DMA_Abort_IT+0x186>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a29      	ldr	r2, [pc, #164]	@ (800ab94 <HAL_DMA_Abort_IT+0x1fc>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d012      	beq.n	800ab1a <HAL_DMA_Abort_IT+0x182>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a27      	ldr	r2, [pc, #156]	@ (800ab98 <HAL_DMA_Abort_IT+0x200>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00a      	beq.n	800ab14 <HAL_DMA_Abort_IT+0x17c>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a26      	ldr	r2, [pc, #152]	@ (800ab9c <HAL_DMA_Abort_IT+0x204>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d102      	bne.n	800ab0e <HAL_DMA_Abort_IT+0x176>
 800ab08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab0c:	e01b      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab12:	e018      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab18:	e015      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab1a:	2310      	movs	r3, #16
 800ab1c:	e013      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e011      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab26:	e00e      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab2c:	e00b      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab32:	e008      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab38:	e005      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab3e:	e002      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab40:	2310      	movs	r3, #16
 800ab42:	e000      	b.n	800ab46 <HAL_DMA_Abort_IT+0x1ae>
 800ab44:	2301      	movs	r3, #1
 800ab46:	4a17      	ldr	r2, [pc, #92]	@ (800aba4 <HAL_DMA_Abort_IT+0x20c>)
 800ab48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
    } 
  }
  return status;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	40020080 	.word	0x40020080
 800ab78:	40020008 	.word	0x40020008
 800ab7c:	4002001c 	.word	0x4002001c
 800ab80:	40020030 	.word	0x40020030
 800ab84:	40020044 	.word	0x40020044
 800ab88:	40020058 	.word	0x40020058
 800ab8c:	4002006c 	.word	0x4002006c
 800ab90:	40020408 	.word	0x40020408
 800ab94:	4002041c 	.word	0x4002041c
 800ab98:	40020430 	.word	0x40020430
 800ab9c:	40020444 	.word	0x40020444
 800aba0:	40020400 	.word	0x40020400
 800aba4:	40020000 	.word	0x40020000

0800aba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b08b      	sub	sp, #44	@ 0x2c
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800abb2:	2300      	movs	r3, #0
 800abb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800abb6:	2300      	movs	r3, #0
 800abb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800abba:	e179      	b.n	800aeb0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800abbc:	2201      	movs	r2, #1
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	fa02 f303 	lsl.w	r3, r2, r3
 800abc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	4013      	ands	r3, r2
 800abce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	f040 8168 	bne.w	800aeaa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	4a96      	ldr	r2, [pc, #600]	@ (800ae38 <HAL_GPIO_Init+0x290>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d05e      	beq.n	800aca2 <HAL_GPIO_Init+0xfa>
 800abe4:	4a94      	ldr	r2, [pc, #592]	@ (800ae38 <HAL_GPIO_Init+0x290>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d875      	bhi.n	800acd6 <HAL_GPIO_Init+0x12e>
 800abea:	4a94      	ldr	r2, [pc, #592]	@ (800ae3c <HAL_GPIO_Init+0x294>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d058      	beq.n	800aca2 <HAL_GPIO_Init+0xfa>
 800abf0:	4a92      	ldr	r2, [pc, #584]	@ (800ae3c <HAL_GPIO_Init+0x294>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d86f      	bhi.n	800acd6 <HAL_GPIO_Init+0x12e>
 800abf6:	4a92      	ldr	r2, [pc, #584]	@ (800ae40 <HAL_GPIO_Init+0x298>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d052      	beq.n	800aca2 <HAL_GPIO_Init+0xfa>
 800abfc:	4a90      	ldr	r2, [pc, #576]	@ (800ae40 <HAL_GPIO_Init+0x298>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d869      	bhi.n	800acd6 <HAL_GPIO_Init+0x12e>
 800ac02:	4a90      	ldr	r2, [pc, #576]	@ (800ae44 <HAL_GPIO_Init+0x29c>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d04c      	beq.n	800aca2 <HAL_GPIO_Init+0xfa>
 800ac08:	4a8e      	ldr	r2, [pc, #568]	@ (800ae44 <HAL_GPIO_Init+0x29c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d863      	bhi.n	800acd6 <HAL_GPIO_Init+0x12e>
 800ac0e:	4a8e      	ldr	r2, [pc, #568]	@ (800ae48 <HAL_GPIO_Init+0x2a0>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d046      	beq.n	800aca2 <HAL_GPIO_Init+0xfa>
 800ac14:	4a8c      	ldr	r2, [pc, #560]	@ (800ae48 <HAL_GPIO_Init+0x2a0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d85d      	bhi.n	800acd6 <HAL_GPIO_Init+0x12e>
 800ac1a:	2b12      	cmp	r3, #18
 800ac1c:	d82a      	bhi.n	800ac74 <HAL_GPIO_Init+0xcc>
 800ac1e:	2b12      	cmp	r3, #18
 800ac20:	d859      	bhi.n	800acd6 <HAL_GPIO_Init+0x12e>
 800ac22:	a201      	add	r2, pc, #4	@ (adr r2, 800ac28 <HAL_GPIO_Init+0x80>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800aca3 	.word	0x0800aca3
 800ac2c:	0800ac7d 	.word	0x0800ac7d
 800ac30:	0800ac8f 	.word	0x0800ac8f
 800ac34:	0800acd1 	.word	0x0800acd1
 800ac38:	0800acd7 	.word	0x0800acd7
 800ac3c:	0800acd7 	.word	0x0800acd7
 800ac40:	0800acd7 	.word	0x0800acd7
 800ac44:	0800acd7 	.word	0x0800acd7
 800ac48:	0800acd7 	.word	0x0800acd7
 800ac4c:	0800acd7 	.word	0x0800acd7
 800ac50:	0800acd7 	.word	0x0800acd7
 800ac54:	0800acd7 	.word	0x0800acd7
 800ac58:	0800acd7 	.word	0x0800acd7
 800ac5c:	0800acd7 	.word	0x0800acd7
 800ac60:	0800acd7 	.word	0x0800acd7
 800ac64:	0800acd7 	.word	0x0800acd7
 800ac68:	0800acd7 	.word	0x0800acd7
 800ac6c:	0800ac85 	.word	0x0800ac85
 800ac70:	0800ac99 	.word	0x0800ac99
 800ac74:	4a75      	ldr	r2, [pc, #468]	@ (800ae4c <HAL_GPIO_Init+0x2a4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d013      	beq.n	800aca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ac7a:	e02c      	b.n	800acd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	623b      	str	r3, [r7, #32]
          break;
 800ac82:	e029      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	3304      	adds	r3, #4
 800ac8a:	623b      	str	r3, [r7, #32]
          break;
 800ac8c:	e024      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	3308      	adds	r3, #8
 800ac94:	623b      	str	r3, [r7, #32]
          break;
 800ac96:	e01f      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	623b      	str	r3, [r7, #32]
          break;
 800aca0:	e01a      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800acaa:	2304      	movs	r3, #4
 800acac:	623b      	str	r3, [r7, #32]
          break;
 800acae:	e013      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d105      	bne.n	800acc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800acb8:	2308      	movs	r3, #8
 800acba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	611a      	str	r2, [r3, #16]
          break;
 800acc2:	e009      	b.n	800acd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800acc4:	2308      	movs	r3, #8
 800acc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	615a      	str	r2, [r3, #20]
          break;
 800acce:	e003      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800acd0:	2300      	movs	r3, #0
 800acd2:	623b      	str	r3, [r7, #32]
          break;
 800acd4:	e000      	b.n	800acd8 <HAL_GPIO_Init+0x130>
          break;
 800acd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2bff      	cmp	r3, #255	@ 0xff
 800acdc:	d801      	bhi.n	800ace2 <HAL_GPIO_Init+0x13a>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	e001      	b.n	800ace6 <HAL_GPIO_Init+0x13e>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3304      	adds	r3, #4
 800ace6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2bff      	cmp	r3, #255	@ 0xff
 800acec:	d802      	bhi.n	800acf4 <HAL_GPIO_Init+0x14c>
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	e002      	b.n	800acfa <HAL_GPIO_Init+0x152>
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	3b08      	subs	r3, #8
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	210f      	movs	r1, #15
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	fa01 f303 	lsl.w	r3, r1, r3
 800ad08:	43db      	mvns	r3, r3
 800ad0a:	401a      	ands	r2, r3
 800ad0c:	6a39      	ldr	r1, [r7, #32]
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	fa01 f303 	lsl.w	r3, r1, r3
 800ad14:	431a      	orrs	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 80c1 	beq.w	800aeaa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800ad28:	4b49      	ldr	r3, [pc, #292]	@ (800ae50 <HAL_GPIO_Init+0x2a8>)
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	4a48      	ldr	r2, [pc, #288]	@ (800ae50 <HAL_GPIO_Init+0x2a8>)
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	6193      	str	r3, [r2, #24]
 800ad34:	4b46      	ldr	r3, [pc, #280]	@ (800ae50 <HAL_GPIO_Init+0x2a8>)
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	60bb      	str	r3, [r7, #8]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800ad40:	4a44      	ldr	r2, [pc, #272]	@ (800ae54 <HAL_GPIO_Init+0x2ac>)
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	089b      	lsrs	r3, r3, #2
 800ad46:	3302      	adds	r3, #2
 800ad48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	220f      	movs	r2, #15
 800ad58:	fa02 f303 	lsl.w	r3, r2, r3
 800ad5c:	43db      	mvns	r3, r3
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4013      	ands	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a3c      	ldr	r2, [pc, #240]	@ (800ae58 <HAL_GPIO_Init+0x2b0>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d01f      	beq.n	800adac <HAL_GPIO_Init+0x204>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a3b      	ldr	r2, [pc, #236]	@ (800ae5c <HAL_GPIO_Init+0x2b4>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d019      	beq.n	800ada8 <HAL_GPIO_Init+0x200>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a3a      	ldr	r2, [pc, #232]	@ (800ae60 <HAL_GPIO_Init+0x2b8>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d013      	beq.n	800ada4 <HAL_GPIO_Init+0x1fc>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a39      	ldr	r2, [pc, #228]	@ (800ae64 <HAL_GPIO_Init+0x2bc>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d00d      	beq.n	800ada0 <HAL_GPIO_Init+0x1f8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a38      	ldr	r2, [pc, #224]	@ (800ae68 <HAL_GPIO_Init+0x2c0>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d007      	beq.n	800ad9c <HAL_GPIO_Init+0x1f4>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a37      	ldr	r2, [pc, #220]	@ (800ae6c <HAL_GPIO_Init+0x2c4>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d101      	bne.n	800ad98 <HAL_GPIO_Init+0x1f0>
 800ad94:	2305      	movs	r3, #5
 800ad96:	e00a      	b.n	800adae <HAL_GPIO_Init+0x206>
 800ad98:	2306      	movs	r3, #6
 800ad9a:	e008      	b.n	800adae <HAL_GPIO_Init+0x206>
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	e006      	b.n	800adae <HAL_GPIO_Init+0x206>
 800ada0:	2303      	movs	r3, #3
 800ada2:	e004      	b.n	800adae <HAL_GPIO_Init+0x206>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e002      	b.n	800adae <HAL_GPIO_Init+0x206>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <HAL_GPIO_Init+0x206>
 800adac:	2300      	movs	r3, #0
 800adae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb0:	f002 0203 	and.w	r2, r2, #3
 800adb4:	0092      	lsls	r2, r2, #2
 800adb6:	4093      	lsls	r3, r2
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800adbe:	4925      	ldr	r1, [pc, #148]	@ (800ae54 <HAL_GPIO_Init+0x2ac>)
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	089b      	lsrs	r3, r3, #2
 800adc4:	3302      	adds	r3, #2
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800add8:	4b25      	ldr	r3, [pc, #148]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800adda:	689a      	ldr	r2, [r3, #8]
 800addc:	4924      	ldr	r1, [pc, #144]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	608b      	str	r3, [r1, #8]
 800ade4:	e006      	b.n	800adf4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800ade6:	4b22      	ldr	r3, [pc, #136]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	43db      	mvns	r3, r3
 800adee:	4920      	ldr	r1, [pc, #128]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800ae00:	4b1b      	ldr	r3, [pc, #108]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ae02:	68da      	ldr	r2, [r3, #12]
 800ae04:	491a      	ldr	r1, [pc, #104]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60cb      	str	r3, [r1, #12]
 800ae0c:	e006      	b.n	800ae1c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ae0e:	4b18      	ldr	r3, [pc, #96]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	43db      	mvns	r3, r3
 800ae16:	4916      	ldr	r1, [pc, #88]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d025      	beq.n	800ae74 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ae28:	4b11      	ldr	r3, [pc, #68]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	4910      	ldr	r1, [pc, #64]	@ (800ae70 <HAL_GPIO_Init+0x2c8>)
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	604b      	str	r3, [r1, #4]
 800ae34:	e025      	b.n	800ae82 <HAL_GPIO_Init+0x2da>
 800ae36:	bf00      	nop
 800ae38:	10320000 	.word	0x10320000
 800ae3c:	10310000 	.word	0x10310000
 800ae40:	10220000 	.word	0x10220000
 800ae44:	10210000 	.word	0x10210000
 800ae48:	10120000 	.word	0x10120000
 800ae4c:	10110000 	.word	0x10110000
 800ae50:	40021000 	.word	0x40021000
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40010800 	.word	0x40010800
 800ae5c:	40010c00 	.word	0x40010c00
 800ae60:	40011000 	.word	0x40011000
 800ae64:	40011400 	.word	0x40011400
 800ae68:	40011800 	.word	0x40011800
 800ae6c:	40011c00 	.word	0x40011c00
 800ae70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ae74:	4b15      	ldr	r3, [pc, #84]	@ (800aecc <HAL_GPIO_Init+0x324>)
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	43db      	mvns	r3, r3
 800ae7c:	4913      	ldr	r1, [pc, #76]	@ (800aecc <HAL_GPIO_Init+0x324>)
 800ae7e:	4013      	ands	r3, r2
 800ae80:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d006      	beq.n	800ae9c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ae8e:	4b0f      	ldr	r3, [pc, #60]	@ (800aecc <HAL_GPIO_Init+0x324>)
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	490e      	ldr	r1, [pc, #56]	@ (800aecc <HAL_GPIO_Init+0x324>)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	600b      	str	r3, [r1, #0]
 800ae9a:	e006      	b.n	800aeaa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ae9c:	4b0b      	ldr	r3, [pc, #44]	@ (800aecc <HAL_GPIO_Init+0x324>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	43db      	mvns	r3, r3
 800aea4:	4909      	ldr	r1, [pc, #36]	@ (800aecc <HAL_GPIO_Init+0x324>)
 800aea6:	4013      	ands	r3, r2
 800aea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	3301      	adds	r3, #1
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f47f ae7e 	bne.w	800abbc <HAL_GPIO_Init+0x14>
  }
}
 800aec0:	bf00      	nop
 800aec2:	bf00      	nop
 800aec4:	372c      	adds	r7, #44	@ 0x2c
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bc80      	pop	{r7}
 800aeca:	4770      	bx	lr
 800aecc:	40010400 	.word	0x40010400

0800aed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b089      	sub	sp, #36	@ 0x24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800aede:	e0a6      	b.n	800b02e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800aee0:	2201      	movs	r2, #1
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	fa02 f303 	lsl.w	r3, r2, r3
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	4013      	ands	r3, r2
 800aeec:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 8099 	beq.w	800b028 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800aef6:	4a54      	ldr	r2, [pc, #336]	@ (800b048 <HAL_GPIO_DeInit+0x178>)
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	089b      	lsrs	r3, r3, #2
 800aefc:	3302      	adds	r3, #2
 800aefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af02:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f003 0303 	and.w	r3, r3, #3
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	220f      	movs	r2, #15
 800af0e:	fa02 f303 	lsl.w	r3, r2, r3
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	4013      	ands	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a4c      	ldr	r2, [pc, #304]	@ (800b04c <HAL_GPIO_DeInit+0x17c>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d01f      	beq.n	800af60 <HAL_GPIO_DeInit+0x90>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a4b      	ldr	r2, [pc, #300]	@ (800b050 <HAL_GPIO_DeInit+0x180>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d019      	beq.n	800af5c <HAL_GPIO_DeInit+0x8c>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a4a      	ldr	r2, [pc, #296]	@ (800b054 <HAL_GPIO_DeInit+0x184>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d013      	beq.n	800af58 <HAL_GPIO_DeInit+0x88>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a49      	ldr	r2, [pc, #292]	@ (800b058 <HAL_GPIO_DeInit+0x188>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00d      	beq.n	800af54 <HAL_GPIO_DeInit+0x84>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a48      	ldr	r2, [pc, #288]	@ (800b05c <HAL_GPIO_DeInit+0x18c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d007      	beq.n	800af50 <HAL_GPIO_DeInit+0x80>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a47      	ldr	r2, [pc, #284]	@ (800b060 <HAL_GPIO_DeInit+0x190>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d101      	bne.n	800af4c <HAL_GPIO_DeInit+0x7c>
 800af48:	2305      	movs	r3, #5
 800af4a:	e00a      	b.n	800af62 <HAL_GPIO_DeInit+0x92>
 800af4c:	2306      	movs	r3, #6
 800af4e:	e008      	b.n	800af62 <HAL_GPIO_DeInit+0x92>
 800af50:	2304      	movs	r3, #4
 800af52:	e006      	b.n	800af62 <HAL_GPIO_DeInit+0x92>
 800af54:	2303      	movs	r3, #3
 800af56:	e004      	b.n	800af62 <HAL_GPIO_DeInit+0x92>
 800af58:	2302      	movs	r3, #2
 800af5a:	e002      	b.n	800af62 <HAL_GPIO_DeInit+0x92>
 800af5c:	2301      	movs	r3, #1
 800af5e:	e000      	b.n	800af62 <HAL_GPIO_DeInit+0x92>
 800af60:	2300      	movs	r3, #0
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	f002 0203 	and.w	r2, r2, #3
 800af68:	0092      	lsls	r2, r2, #2
 800af6a:	4093      	lsls	r3, r2
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d132      	bne.n	800afd8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800af72:	4b3c      	ldr	r3, [pc, #240]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	43db      	mvns	r3, r3
 800af7a:	493a      	ldr	r1, [pc, #232]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af7c:	4013      	ands	r3, r2
 800af7e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800af80:	4b38      	ldr	r3, [pc, #224]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	43db      	mvns	r3, r3
 800af88:	4936      	ldr	r1, [pc, #216]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800af8e:	4b35      	ldr	r3, [pc, #212]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	43db      	mvns	r3, r3
 800af96:	4933      	ldr	r1, [pc, #204]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af98:	4013      	ands	r3, r2
 800af9a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800af9c:	4b31      	ldr	r3, [pc, #196]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	43db      	mvns	r3, r3
 800afa4:	492f      	ldr	r1, [pc, #188]	@ (800b064 <HAL_GPIO_DeInit+0x194>)
 800afa6:	4013      	ands	r3, r2
 800afa8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	f003 0303 	and.w	r3, r3, #3
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	220f      	movs	r2, #15
 800afb4:	fa02 f303 	lsl.w	r3, r2, r3
 800afb8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800afba:	4a23      	ldr	r2, [pc, #140]	@ (800b048 <HAL_GPIO_DeInit+0x178>)
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	089b      	lsrs	r3, r3, #2
 800afc0:	3302      	adds	r3, #2
 800afc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	43da      	mvns	r2, r3
 800afca:	481f      	ldr	r0, [pc, #124]	@ (800b048 <HAL_GPIO_DeInit+0x178>)
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	089b      	lsrs	r3, r3, #2
 800afd0:	400a      	ands	r2, r1
 800afd2:	3302      	adds	r3, #2
 800afd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	2bff      	cmp	r3, #255	@ 0xff
 800afdc:	d801      	bhi.n	800afe2 <HAL_GPIO_DeInit+0x112>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	e001      	b.n	800afe6 <HAL_GPIO_DeInit+0x116>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3304      	adds	r3, #4
 800afe6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	2bff      	cmp	r3, #255	@ 0xff
 800afec:	d802      	bhi.n	800aff4 <HAL_GPIO_DeInit+0x124>
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	e002      	b.n	800affa <HAL_GPIO_DeInit+0x12a>
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	3b08      	subs	r3, #8
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	210f      	movs	r1, #15
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	fa01 f303 	lsl.w	r3, r1, r3
 800b008:	43db      	mvns	r3, r3
 800b00a:	401a      	ands	r2, r3
 800b00c:	2104      	movs	r1, #4
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	fa01 f303 	lsl.w	r3, r1, r3
 800b014:	431a      	orrs	r2, r3
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	60da      	str	r2, [r3, #12]
    }

    position++;
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	3301      	adds	r3, #1
 800b02c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	fa22 f303 	lsr.w	r3, r2, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	f47f af52 	bne.w	800aee0 <HAL_GPIO_DeInit+0x10>
  }
}
 800b03c:	bf00      	nop
 800b03e:	bf00      	nop
 800b040:	3724      	adds	r7, #36	@ 0x24
 800b042:	46bd      	mov	sp, r7
 800b044:	bc80      	pop	{r7}
 800b046:	4770      	bx	lr
 800b048:	40010000 	.word	0x40010000
 800b04c:	40010800 	.word	0x40010800
 800b050:	40010c00 	.word	0x40010c00
 800b054:	40011000 	.word	0x40011000
 800b058:	40011400 	.word	0x40011400
 800b05c:	40011800 	.word	0x40011800
 800b060:	40011c00 	.word	0x40011c00
 800b064:	40010400 	.word	0x40010400

0800b068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	887b      	ldrh	r3, [r7, #2]
 800b07a:	4013      	ands	r3, r2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b080:	2301      	movs	r3, #1
 800b082:	73fb      	strb	r3, [r7, #15]
 800b084:	e001      	b.n	800b08a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr

0800b096 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	807b      	strh	r3, [r7, #2]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b0a6:	787b      	ldrb	r3, [r7, #1]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b0ac:	887a      	ldrh	r2, [r7, #2]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b0b2:	e003      	b.n	800b0bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b0b4:	887b      	ldrh	r3, [r7, #2]
 800b0b6:	041a      	lsls	r2, r3, #16
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	611a      	str	r2, [r3, #16]
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bc80      	pop	{r7}
 800b0c4:	4770      	bx	lr

0800b0c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0d8:	887a      	ldrh	r2, [r7, #2]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	041a      	lsls	r2, r3, #16
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	43d9      	mvns	r1, r3
 800b0e4:	887b      	ldrh	r3, [r7, #2]
 800b0e6:	400b      	ands	r3, r1
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	611a      	str	r2, [r3, #16]
}
 800b0ee:	bf00      	nop
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e12b      	b.n	800b362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff f82a 	bl	800a178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2224      	movs	r2, #36	@ 0x24
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0201 	bic.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b14a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b15a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b15c:	f001 fdb8 	bl	800ccd0 <HAL_RCC_GetPCLK1Freq>
 800b160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	4a81      	ldr	r2, [pc, #516]	@ (800b36c <HAL_I2C_Init+0x274>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d807      	bhi.n	800b17c <HAL_I2C_Init+0x84>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4a80      	ldr	r2, [pc, #512]	@ (800b370 <HAL_I2C_Init+0x278>)
 800b170:	4293      	cmp	r3, r2
 800b172:	bf94      	ite	ls
 800b174:	2301      	movls	r3, #1
 800b176:	2300      	movhi	r3, #0
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	e006      	b.n	800b18a <HAL_I2C_Init+0x92>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4a7d      	ldr	r2, [pc, #500]	@ (800b374 <HAL_I2C_Init+0x27c>)
 800b180:	4293      	cmp	r3, r2
 800b182:	bf94      	ite	ls
 800b184:	2301      	movls	r3, #1
 800b186:	2300      	movhi	r3, #0
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e0e7      	b.n	800b362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	4a78      	ldr	r2, [pc, #480]	@ (800b378 <HAL_I2C_Init+0x280>)
 800b196:	fba2 2303 	umull	r2, r3, r2, r3
 800b19a:	0c9b      	lsrs	r3, r3, #18
 800b19c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	4a6a      	ldr	r2, [pc, #424]	@ (800b36c <HAL_I2C_Init+0x274>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d802      	bhi.n	800b1cc <HAL_I2C_Init+0xd4>
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	e009      	b.n	800b1e0 <HAL_I2C_Init+0xe8>
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b1d2:	fb02 f303 	mul.w	r3, r2, r3
 800b1d6:	4a69      	ldr	r2, [pc, #420]	@ (800b37c <HAL_I2C_Init+0x284>)
 800b1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1dc:	099b      	lsrs	r3, r3, #6
 800b1de:	3301      	adds	r3, #1
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b1f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	495c      	ldr	r1, [pc, #368]	@ (800b36c <HAL_I2C_Init+0x274>)
 800b1fc:	428b      	cmp	r3, r1
 800b1fe:	d819      	bhi.n	800b234 <HAL_I2C_Init+0x13c>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	1e59      	subs	r1, r3, #1
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b20e:	1c59      	adds	r1, r3, #1
 800b210:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b214:	400b      	ands	r3, r1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <HAL_I2C_Init+0x138>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	1e59      	subs	r1, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	fbb1 f3f3 	udiv	r3, r1, r3
 800b228:	3301      	adds	r3, #1
 800b22a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b22e:	e051      	b.n	800b2d4 <HAL_I2C_Init+0x1dc>
 800b230:	2304      	movs	r3, #4
 800b232:	e04f      	b.n	800b2d4 <HAL_I2C_Init+0x1dc>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d111      	bne.n	800b260 <HAL_I2C_Init+0x168>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	1e58      	subs	r0, r3, #1
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6859      	ldr	r1, [r3, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	440b      	add	r3, r1
 800b24a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b24e:	3301      	adds	r3, #1
 800b250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf0c      	ite	eq
 800b258:	2301      	moveq	r3, #1
 800b25a:	2300      	movne	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	e012      	b.n	800b286 <HAL_I2C_Init+0x18e>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	1e58      	subs	r0, r3, #1
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6859      	ldr	r1, [r3, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	440b      	add	r3, r1
 800b26e:	0099      	lsls	r1, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	fbb0 f3f3 	udiv	r3, r0, r3
 800b276:	3301      	adds	r3, #1
 800b278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bf0c      	ite	eq
 800b280:	2301      	moveq	r3, #1
 800b282:	2300      	movne	r3, #0
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <HAL_I2C_Init+0x196>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e022      	b.n	800b2d4 <HAL_I2C_Init+0x1dc>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10e      	bne.n	800b2b4 <HAL_I2C_Init+0x1bc>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1e58      	subs	r0, r3, #1
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6859      	ldr	r1, [r3, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	005b      	lsls	r3, r3, #1
 800b2a2:	440b      	add	r3, r1
 800b2a4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2b2:	e00f      	b.n	800b2d4 <HAL_I2C_Init+0x1dc>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	1e58      	subs	r0, r3, #1
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6859      	ldr	r1, [r3, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	440b      	add	r3, r1
 800b2c2:	0099      	lsls	r1, r3, #2
 800b2c4:	440b      	add	r3, r1
 800b2c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b2d4:	6879      	ldr	r1, [r7, #4]
 800b2d6:	6809      	ldr	r1, [r1, #0]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	69da      	ldr	r2, [r3, #28]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6911      	ldr	r1, [r2, #16]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	68d2      	ldr	r2, [r2, #12]
 800b30e:	4311      	orrs	r1, r2
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	6812      	ldr	r2, [r2, #0]
 800b314:	430b      	orrs	r3, r1
 800b316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	695a      	ldr	r2, [r3, #20]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	431a      	orrs	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f042 0201 	orr.w	r2, r2, #1
 800b342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	000186a0 	.word	0x000186a0
 800b370:	001e847f 	.word	0x001e847f
 800b374:	003d08ff 	.word	0x003d08ff
 800b378:	431bde83 	.word	0x431bde83
 800b37c:	10624dd3 	.word	0x10624dd3

0800b380 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e021      	b.n	800b3d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2224      	movs	r2, #36	@ 0x24
 800b396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0201 	bic.w	r2, r2, #1
 800b3a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7fe ff22 	bl	800a1f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	607a      	str	r2, [r7, #4]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	817b      	strh	r3, [r7, #10]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b3f4:	f7ff f85e 	bl	800a4b4 <HAL_GetTick>
 800b3f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b20      	cmp	r3, #32
 800b404:	f040 80e0 	bne.w	800b5c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2319      	movs	r3, #25
 800b40e:	2201      	movs	r2, #1
 800b410:	4970      	ldr	r1, [pc, #448]	@ (800b5d4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 fe5c 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b41e:	2302      	movs	r3, #2
 800b420:	e0d3      	b.n	800b5ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d101      	bne.n	800b430 <HAL_I2C_Master_Transmit+0x50>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e0cc      	b.n	800b5ca <HAL_I2C_Master_Transmit+0x1ea>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b01      	cmp	r3, #1
 800b444:	d007      	beq.n	800b456 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f042 0201 	orr.w	r2, r2, #1
 800b454:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b464:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2221      	movs	r2, #33	@ 0x21
 800b46a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2210      	movs	r2, #16
 800b472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	893a      	ldrh	r2, [r7, #8]
 800b486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	4a50      	ldr	r2, [pc, #320]	@ (800b5d8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b496:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b498:	8979      	ldrh	r1, [r7, #10]
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	6a3a      	ldr	r2, [r7, #32]
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 fc16 	bl	800bcd0 <I2C_MasterRequestWrite>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e08d      	b.n	800b5ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	613b      	str	r3, [r7, #16]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b4c4:	e066      	b.n	800b594 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	6a39      	ldr	r1, [r7, #32]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 ff1a 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00d      	beq.n	800b4f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d107      	bne.n	800b4ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e06b      	b.n	800b5ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f6:	781a      	ldrb	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	3b01      	subs	r3, #1
 800b510:	b29a      	uxth	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b51a:	3b01      	subs	r3, #1
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d11b      	bne.n	800b568 <HAL_I2C_Master_Transmit+0x188>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b534:	2b00      	cmp	r3, #0
 800b536:	d017      	beq.n	800b568 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b01      	subs	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b560:	3b01      	subs	r3, #1
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	6a39      	ldr	r1, [r7, #32]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 ff11 	bl	800c394 <I2C_WaitOnBTFFlagUntilTimeout>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00d      	beq.n	800b594 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d107      	bne.n	800b590 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b58e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e01a      	b.n	800b5ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d194      	bne.n	800b4c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e000      	b.n	800b5ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b5c8:	2302      	movs	r3, #2
  }
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	00100002 	.word	0x00100002
 800b5d8:	ffff0000 	.word	0xffff0000

0800b5dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af02      	add	r7, sp, #8
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	817b      	strh	r3, [r7, #10]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	813b      	strh	r3, [r7, #8]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b5f6:	f7fe ff5d 	bl	800a4b4 <HAL_GetTick>
 800b5fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b602:	b2db      	uxtb	r3, r3
 800b604:	2b20      	cmp	r3, #32
 800b606:	f040 80d9 	bne.w	800b7bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	2319      	movs	r3, #25
 800b610:	2201      	movs	r2, #1
 800b612:	496d      	ldr	r1, [pc, #436]	@ (800b7c8 <HAL_I2C_Mem_Write+0x1ec>)
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fd5b 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b620:	2302      	movs	r3, #2
 800b622:	e0cc      	b.n	800b7be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d101      	bne.n	800b632 <HAL_I2C_Mem_Write+0x56>
 800b62e:	2302      	movs	r3, #2
 800b630:	e0c5      	b.n	800b7be <HAL_I2C_Mem_Write+0x1e2>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	2b01      	cmp	r3, #1
 800b646:	d007      	beq.n	800b658 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f042 0201 	orr.w	r2, r2, #1
 800b656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2221      	movs	r2, #33	@ 0x21
 800b66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2240      	movs	r2, #64	@ 0x40
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a3a      	ldr	r2, [r7, #32]
 800b682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b68e:	b29a      	uxth	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4a4d      	ldr	r2, [pc, #308]	@ (800b7cc <HAL_I2C_Mem_Write+0x1f0>)
 800b698:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b69a:	88f8      	ldrh	r0, [r7, #6]
 800b69c:	893a      	ldrh	r2, [r7, #8]
 800b69e:	8979      	ldrh	r1, [r7, #10]
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 fb92 	bl	800bdd4 <I2C_RequestMemoryWrite>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d052      	beq.n	800b75c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e081      	b.n	800b7be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 fe20 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00d      	beq.n	800b6e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d107      	bne.n	800b6e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e06b      	b.n	800b7be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b700:	3b01      	subs	r3, #1
 800b702:	b29a      	uxth	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	b29a      	uxth	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b04      	cmp	r3, #4
 800b722:	d11b      	bne.n	800b75c <HAL_I2C_Mem_Write+0x180>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d017      	beq.n	800b75c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b746:	3b01      	subs	r3, #1
 800b748:	b29a      	uxth	r2, r3
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b752:	b29b      	uxth	r3, r3
 800b754:	3b01      	subs	r3, #1
 800b756:	b29a      	uxth	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1aa      	bne.n	800b6ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 fe13 	bl	800c394 <I2C_WaitOnBTFFlagUntilTimeout>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00d      	beq.n	800b790 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b778:	2b04      	cmp	r3, #4
 800b77a:	d107      	bne.n	800b78c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b78a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	e016      	b.n	800b7be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b79e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e000      	b.n	800b7be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b7bc:	2302      	movs	r3, #2
  }
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	00100002 	.word	0x00100002
 800b7cc:	ffff0000 	.word	0xffff0000

0800b7d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08c      	sub	sp, #48	@ 0x30
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	4608      	mov	r0, r1
 800b7da:	4611      	mov	r1, r2
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4603      	mov	r3, r0
 800b7e0:	817b      	strh	r3, [r7, #10]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	813b      	strh	r3, [r7, #8]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7ee:	f7fe fe61 	bl	800a4b4 <HAL_GetTick>
 800b7f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	f040 8244 	bne.w	800bc8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	2319      	movs	r3, #25
 800b808:	2201      	movs	r2, #1
 800b80a:	4982      	ldr	r1, [pc, #520]	@ (800ba14 <HAL_I2C_Mem_Read+0x244>)
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fc5f 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b818:	2302      	movs	r3, #2
 800b81a:	e237      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b822:	2b01      	cmp	r3, #1
 800b824:	d101      	bne.n	800b82a <HAL_I2C_Mem_Read+0x5a>
 800b826:	2302      	movs	r3, #2
 800b828:	e230      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d007      	beq.n	800b850 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f042 0201 	orr.w	r2, r2, #1
 800b84e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b85e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2222      	movs	r2, #34	@ 0x22
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2240      	movs	r2, #64	@ 0x40
 800b86c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b87a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4a62      	ldr	r2, [pc, #392]	@ (800ba18 <HAL_I2C_Mem_Read+0x248>)
 800b890:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b892:	88f8      	ldrh	r0, [r7, #6]
 800b894:	893a      	ldrh	r2, [r7, #8]
 800b896:	8979      	ldrh	r1, [r7, #10]
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 fb2c 	bl	800bf00 <I2C_RequestMemoryRead>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e1ec      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d113      	bne.n	800b8e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61fb      	str	r3, [r7, #28]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	61fb      	str	r3, [r7, #28]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	61fb      	str	r3, [r7, #28]
 800b8ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	e1c0      	b.n	800bc64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d11e      	bne.n	800b928 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8fa:	b672      	cpsid	i
}
 800b8fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8fe:	2300      	movs	r3, #0
 800b900:	61bb      	str	r3, [r7, #24]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	61bb      	str	r3, [r7, #24]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	61bb      	str	r3, [r7, #24]
 800b912:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b922:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b924:	b662      	cpsie	i
}
 800b926:	e035      	b.n	800b994 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d11e      	bne.n	800b96e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b93e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b940:	b672      	cpsid	i
}
 800b942:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b944:	2300      	movs	r3, #0
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b96a:	b662      	cpsie	i
}
 800b96c:	e012      	b.n	800b994 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b97c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b97e:	2300      	movs	r3, #0
 800b980:	613b      	str	r3, [r7, #16]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	613b      	str	r3, [r7, #16]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b994:	e166      	b.n	800bc64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	f200 811f 	bhi.w	800bbde <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d123      	bne.n	800b9f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fd39 	bl	800c424 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e167      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	691a      	ldr	r2, [r3, #16]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b9ee:	e139      	b.n	800bc64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d152      	bne.n	800ba9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4906      	ldr	r1, [pc, #24]	@ (800ba1c <HAL_I2C_Mem_Read+0x24c>)
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 fb64 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d008      	beq.n	800ba20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e13c      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
 800ba12:	bf00      	nop
 800ba14:	00100002 	.word	0x00100002
 800ba18:	ffff0000 	.word	0xffff0000
 800ba1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800ba20:	b672      	cpsid	i
}
 800ba22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	691a      	ldr	r2, [r3, #16]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba50:	3b01      	subs	r3, #1
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ba66:	b662      	cpsie	i
}
 800ba68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	691a      	ldr	r2, [r3, #16]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba74:	b2d2      	uxtb	r2, r2
 800ba76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba86:	3b01      	subs	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	3b01      	subs	r3, #1
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ba9c:	e0e2      	b.n	800bc64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa4:	2200      	movs	r2, #0
 800baa6:	497b      	ldr	r1, [pc, #492]	@ (800bc94 <HAL_I2C_Mem_Read+0x4c4>)
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 fb11 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e0e9      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800bac8:	b672      	cpsid	i
}
 800baca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691a      	ldr	r2, [r3, #16]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad6:	b2d2      	uxtb	r2, r2
 800bad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bade:	1c5a      	adds	r2, r3, #1
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bae8:	3b01      	subs	r3, #1
 800baea:	b29a      	uxth	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bafe:	4b66      	ldr	r3, [pc, #408]	@ (800bc98 <HAL_I2C_Mem_Read+0x4c8>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	08db      	lsrs	r3, r3, #3
 800bb04:	4a65      	ldr	r2, [pc, #404]	@ (800bc9c <HAL_I2C_Mem_Read+0x4cc>)
 800bb06:	fba2 2303 	umull	r2, r3, r2, r3
 800bb0a:	0a1a      	lsrs	r2, r3, #8
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	00da      	lsls	r2, r3, #3
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d118      	bne.n	800bb56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2220      	movs	r2, #32
 800bb2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb3e:	f043 0220 	orr.w	r2, r3, #32
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800bb46:	b662      	cpsie	i
}
 800bb48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e09a      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b04      	cmp	r3, #4
 800bb62:	d1d9      	bne.n	800bb18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	691a      	ldr	r2, [r3, #16]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb90:	3b01      	subs	r3, #1
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bba6:	b662      	cpsie	i
}
 800bba8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bbdc:	e042      	b.n	800bc64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 fc1e 	bl	800c424 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e04c      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	691a      	ldr	r2, [r3, #16]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfc:	b2d2      	uxtb	r2, r2
 800bbfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	f003 0304 	and.w	r3, r3, #4
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d118      	bne.n	800bc64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	b2d2      	uxtb	r2, r2
 800bc3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f47f ae94 	bne.w	800b996 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	e000      	b.n	800bc8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800bc8a:	2302      	movs	r3, #2
  }
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	@ 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	00010004 	.word	0x00010004
 800bc98:	20000f74 	.word	0x20000f74
 800bc9c:	14f8b589 	.word	0x14f8b589

0800bca0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcae:	b2db      	uxtb	r3, r3
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bc80      	pop	{r7}
 800bcb8:	4770      	bx	lr

0800bcba <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b083      	sub	sp, #12
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bc80      	pop	{r7}
 800bcce:	4770      	bx	lr

0800bcd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	607a      	str	r2, [r7, #4]
 800bcda:	603b      	str	r3, [r7, #0]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d006      	beq.n	800bcfa <I2C_MasterRequestWrite+0x2a>
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d003      	beq.n	800bcfa <I2C_MasterRequestWrite+0x2a>
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bcf8:	d108      	bne.n	800bd0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e00b      	b.n	800bd24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd10:	2b12      	cmp	r3, #18
 800bd12:	d107      	bne.n	800bd24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f9cd 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00d      	beq.n	800bd58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd4a:	d103      	bne.n	800bd54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e035      	b.n	800bdc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd60:	d108      	bne.n	800bd74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bd62:	897b      	ldrh	r3, [r7, #10]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	461a      	mov	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bd70:	611a      	str	r2, [r3, #16]
 800bd72:	e01b      	b.n	800bdac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd74:	897b      	ldrh	r3, [r7, #10]
 800bd76:	11db      	asrs	r3, r3, #7
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	f003 0306 	and.w	r3, r3, #6
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	f063 030f 	orn	r3, r3, #15
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	490e      	ldr	r1, [pc, #56]	@ (800bdcc <I2C_MasterRequestWrite+0xfc>)
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f000 fa16 	bl	800c1c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e010      	b.n	800bdc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bda2:	897b      	ldrh	r3, [r7, #10]
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	4907      	ldr	r1, [pc, #28]	@ (800bdd0 <I2C_MasterRequestWrite+0x100>)
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fa06 	bl	800c1c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	00010008 	.word	0x00010008
 800bdd0:	00010002 	.word	0x00010002

0800bdd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	4608      	mov	r0, r1
 800bdde:	4611      	mov	r1, r2
 800bde0:	461a      	mov	r2, r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	817b      	strh	r3, [r7, #10]
 800bde6:	460b      	mov	r3, r1
 800bde8:	813b      	strh	r3, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	2200      	movs	r2, #0
 800be06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 f960 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00d      	beq.n	800be32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be24:	d103      	bne.n	800be2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e05f      	b.n	800bef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be32:	897b      	ldrh	r3, [r7, #10]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	461a      	mov	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be44:	6a3a      	ldr	r2, [r7, #32]
 800be46:	492d      	ldr	r1, [pc, #180]	@ (800befc <I2C_RequestMemoryWrite+0x128>)
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f000 f9bb 	bl	800c1c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e04c      	b.n	800bef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be58:	2300      	movs	r3, #0
 800be5a:	617b      	str	r3, [r7, #20]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	617b      	str	r3, [r7, #20]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be70:	6a39      	ldr	r1, [r7, #32]
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f000 fa46 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00d      	beq.n	800be9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be82:	2b04      	cmp	r3, #4
 800be84:	d107      	bne.n	800be96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	e02b      	b.n	800bef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d105      	bne.n	800beac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bea0:	893b      	ldrh	r3, [r7, #8]
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	611a      	str	r2, [r3, #16]
 800beaa:	e021      	b.n	800bef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800beac:	893b      	ldrh	r3, [r7, #8]
 800beae:	0a1b      	lsrs	r3, r3, #8
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800beba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bebc:	6a39      	ldr	r1, [r7, #32]
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f000 fa20 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00d      	beq.n	800bee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d107      	bne.n	800bee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e005      	b.n	800bef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bee6:	893b      	ldrh	r3, [r7, #8]
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	00010002 	.word	0x00010002

0800bf00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	4608      	mov	r0, r1
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	817b      	strh	r3, [r7, #10]
 800bf12:	460b      	mov	r3, r1
 800bf14:	813b      	strh	r3, [r7, #8]
 800bf16:	4613      	mov	r3, r2
 800bf18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 f8c2 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00d      	beq.n	800bf6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf60:	d103      	bne.n	800bf6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e0aa      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf6e:	897b      	ldrh	r3, [r7, #10]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	461a      	mov	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bf7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf80:	6a3a      	ldr	r2, [r7, #32]
 800bf82:	4952      	ldr	r1, [pc, #328]	@ (800c0cc <I2C_RequestMemoryRead+0x1cc>)
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 f91d 	bl	800c1c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e097      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf94:	2300      	movs	r3, #0
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	617b      	str	r3, [r7, #20]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	617b      	str	r3, [r7, #20]
 800bfa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfac:	6a39      	ldr	r1, [r7, #32]
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f000 f9a8 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00d      	beq.n	800bfd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbe:	2b04      	cmp	r3, #4
 800bfc0:	d107      	bne.n	800bfd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e076      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfd6:	88fb      	ldrh	r3, [r7, #6]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d105      	bne.n	800bfe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bfdc:	893b      	ldrh	r3, [r7, #8]
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	611a      	str	r2, [r3, #16]
 800bfe6:	e021      	b.n	800c02c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bfe8:	893b      	ldrh	r3, [r7, #8]
 800bfea:	0a1b      	lsrs	r3, r3, #8
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bff8:	6a39      	ldr	r1, [r7, #32]
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 f982 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00d      	beq.n	800c022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d107      	bne.n	800c01e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c01c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e050      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c022:	893b      	ldrh	r3, [r7, #8]
 800c024:	b2da      	uxtb	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c02c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c02e:	6a39      	ldr	r1, [r7, #32]
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f000 f967 	bl	800c304 <I2C_WaitOnTXEFlagUntilTimeout>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00d      	beq.n	800c058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c040:	2b04      	cmp	r3, #4
 800c042:	d107      	bne.n	800c054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e035      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	2200      	movs	r2, #0
 800c070:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f82b 	bl	800c0d0 <I2C_WaitOnFlagUntilTimeout>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00d      	beq.n	800c09c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c08a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c08e:	d103      	bne.n	800c098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c096:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c098:	2303      	movs	r3, #3
 800c09a:	e013      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c09c:	897b      	ldrh	r3, [r7, #10]
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	f043 0301 	orr.w	r3, r3, #1
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ae:	6a3a      	ldr	r2, [r7, #32]
 800c0b0:	4906      	ldr	r1, [pc, #24]	@ (800c0cc <I2C_RequestMemoryRead+0x1cc>)
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 f886 	bl	800c1c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e000      	b.n	800c0c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	00010002 	.word	0x00010002

0800c0d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0e0:	e048      	b.n	800c174 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d044      	beq.n	800c174 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ea:	f7fe f9e3 	bl	800a4b4 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d302      	bcc.n	800c100 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d139      	bne.n	800c174 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	0c1b      	lsrs	r3, r3, #16
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b01      	cmp	r3, #1
 800c108:	d10d      	bne.n	800c126 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	43da      	mvns	r2, r3
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	4013      	ands	r3, r2
 800c116:	b29b      	uxth	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	bf0c      	ite	eq
 800c11c:	2301      	moveq	r3, #1
 800c11e:	2300      	movne	r3, #0
 800c120:	b2db      	uxtb	r3, r3
 800c122:	461a      	mov	r2, r3
 800c124:	e00c      	b.n	800c140 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	43da      	mvns	r2, r3
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	4013      	ands	r3, r2
 800c132:	b29b      	uxth	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	bf0c      	ite	eq
 800c138:	2301      	moveq	r3, #1
 800c13a:	2300      	movne	r3, #0
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	461a      	mov	r2, r3
 800c140:	79fb      	ldrb	r3, [r7, #7]
 800c142:	429a      	cmp	r2, r3
 800c144:	d116      	bne.n	800c174 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2220      	movs	r2, #32
 800c150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c160:	f043 0220 	orr.w	r2, r3, #32
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e023      	b.n	800c1bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	0c1b      	lsrs	r3, r3, #16
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d10d      	bne.n	800c19a <I2C_WaitOnFlagUntilTimeout+0xca>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	43da      	mvns	r2, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	4013      	ands	r3, r2
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	bf0c      	ite	eq
 800c190:	2301      	moveq	r3, #1
 800c192:	2300      	movne	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	461a      	mov	r2, r3
 800c198:	e00c      	b.n	800c1b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	43da      	mvns	r2, r3
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bf0c      	ite	eq
 800c1ac:	2301      	moveq	r3, #1
 800c1ae:	2300      	movne	r3, #0
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d093      	beq.n	800c0e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1d2:	e071      	b.n	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1e2:	d123      	bne.n	800c22c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2220      	movs	r2, #32
 800c208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c218:	f043 0204 	orr.w	r2, r3, #4
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e067      	b.n	800c2fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d041      	beq.n	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c234:	f7fe f93e 	bl	800a4b4 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	429a      	cmp	r2, r3
 800c242:	d302      	bcc.n	800c24a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d136      	bne.n	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	0c1b      	lsrs	r3, r3, #16
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b01      	cmp	r3, #1
 800c252:	d10c      	bne.n	800c26e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	43da      	mvns	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4013      	ands	r3, r2
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	bf14      	ite	ne
 800c266:	2301      	movne	r3, #1
 800c268:	2300      	moveq	r3, #0
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	e00b      	b.n	800c286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	43da      	mvns	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	4013      	ands	r3, r2
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bf14      	ite	ne
 800c280:	2301      	movne	r3, #1
 800c282:	2300      	moveq	r3, #0
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d016      	beq.n	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2220      	movs	r2, #32
 800c294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2a4:	f043 0220 	orr.w	r2, r3, #32
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e021      	b.n	800c2fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	0c1b      	lsrs	r3, r3, #16
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d10c      	bne.n	800c2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	43da      	mvns	r2, r3
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bf14      	ite	ne
 800c2d4:	2301      	movne	r3, #1
 800c2d6:	2300      	moveq	r3, #0
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	e00b      	b.n	800c2f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	43da      	mvns	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bf14      	ite	ne
 800c2ee:	2301      	movne	r3, #1
 800c2f0:	2300      	moveq	r3, #0
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f47f af6d 	bne.w	800c1d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c310:	e034      	b.n	800c37c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f000 f8e3 	bl	800c4de <I2C_IsAcknowledgeFailed>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e034      	b.n	800c38c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c328:	d028      	beq.n	800c37c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c32a:	f7fe f8c3 	bl	800a4b4 <HAL_GetTick>
 800c32e:	4602      	mov	r2, r0
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	429a      	cmp	r2, r3
 800c338:	d302      	bcc.n	800c340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d11d      	bne.n	800c37c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c34a:	2b80      	cmp	r3, #128	@ 0x80
 800c34c:	d016      	beq.n	800c37c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2220      	movs	r2, #32
 800c358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c368:	f043 0220 	orr.w	r2, r3, #32
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e007      	b.n	800c38c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c386:	2b80      	cmp	r3, #128	@ 0x80
 800c388:	d1c3      	bne.n	800c312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c3a0:	e034      	b.n	800c40c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f000 f89b 	bl	800c4de <I2C_IsAcknowledgeFailed>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e034      	b.n	800c41c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b8:	d028      	beq.n	800c40c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3ba:	f7fe f87b 	bl	800a4b4 <HAL_GetTick>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d302      	bcc.n	800c3d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11d      	bne.n	800c40c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	695b      	ldr	r3, [r3, #20]
 800c3d6:	f003 0304 	and.w	r3, r3, #4
 800c3da:	2b04      	cmp	r3, #4
 800c3dc:	d016      	beq.n	800c40c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2220      	movs	r2, #32
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3f8:	f043 0220 	orr.w	r2, r3, #32
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	e007      	b.n	800c41c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	f003 0304 	and.w	r3, r3, #4
 800c416:	2b04      	cmp	r3, #4
 800c418:	d1c3      	bne.n	800c3a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c430:	e049      	b.n	800c4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	f003 0310 	and.w	r3, r3, #16
 800c43c:	2b10      	cmp	r3, #16
 800c43e:	d119      	bne.n	800c474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f06f 0210 	mvn.w	r2, #16
 800c448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2220      	movs	r2, #32
 800c454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e030      	b.n	800c4d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c474:	f7fe f81e 	bl	800a4b4 <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	429a      	cmp	r2, r3
 800c482:	d302      	bcc.n	800c48a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d11d      	bne.n	800c4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c494:	2b40      	cmp	r3, #64	@ 0x40
 800c496:	d016      	beq.n	800c4c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2220      	movs	r2, #32
 800c4a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4b2:	f043 0220 	orr.w	r2, r3, #32
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e007      	b.n	800c4d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d0:	2b40      	cmp	r3, #64	@ 0x40
 800c4d2:	d1ae      	bne.n	800c432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4f4:	d11b      	bne.n	800c52e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c4fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2220      	movs	r2, #32
 800c50a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c51a:	f043 0204 	orr.w	r2, r3, #4
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	e000      	b.n	800c530 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	bc80      	pop	{r7}
 800c538:	4770      	bx	lr
	...

0800c53c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e272      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 8087 	beq.w	800c66a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c55c:	4b92      	ldr	r3, [pc, #584]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	f003 030c 	and.w	r3, r3, #12
 800c564:	2b04      	cmp	r3, #4
 800c566:	d00c      	beq.n	800c582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c568:	4b8f      	ldr	r3, [pc, #572]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f003 030c 	and.w	r3, r3, #12
 800c570:	2b08      	cmp	r3, #8
 800c572:	d112      	bne.n	800c59a <HAL_RCC_OscConfig+0x5e>
 800c574:	4b8c      	ldr	r3, [pc, #560]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c57c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c580:	d10b      	bne.n	800c59a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c582:	4b89      	ldr	r3, [pc, #548]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d06c      	beq.n	800c668 <HAL_RCC_OscConfig+0x12c>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d168      	bne.n	800c668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e24c      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5a2:	d106      	bne.n	800c5b2 <HAL_RCC_OscConfig+0x76>
 800c5a4:	4b80      	ldr	r3, [pc, #512]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a7f      	ldr	r2, [pc, #508]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5ae:	6013      	str	r3, [r2, #0]
 800c5b0:	e02e      	b.n	800c610 <HAL_RCC_OscConfig+0xd4>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10c      	bne.n	800c5d4 <HAL_RCC_OscConfig+0x98>
 800c5ba:	4b7b      	ldr	r3, [pc, #492]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a7a      	ldr	r2, [pc, #488]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	4b78      	ldr	r3, [pc, #480]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a77      	ldr	r2, [pc, #476]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5d0:	6013      	str	r3, [r2, #0]
 800c5d2:	e01d      	b.n	800c610 <HAL_RCC_OscConfig+0xd4>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5dc:	d10c      	bne.n	800c5f8 <HAL_RCC_OscConfig+0xbc>
 800c5de:	4b72      	ldr	r3, [pc, #456]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a71      	ldr	r2, [pc, #452]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	4b6f      	ldr	r3, [pc, #444]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a6e      	ldr	r2, [pc, #440]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	e00b      	b.n	800c610 <HAL_RCC_OscConfig+0xd4>
 800c5f8:	4b6b      	ldr	r3, [pc, #428]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a6a      	ldr	r2, [pc, #424]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c5fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c602:	6013      	str	r3, [r2, #0]
 800c604:	4b68      	ldr	r3, [pc, #416]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a67      	ldr	r2, [pc, #412]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c60a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c60e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d013      	beq.n	800c640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c618:	f7fd ff4c 	bl	800a4b4 <HAL_GetTick>
 800c61c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c61e:	e008      	b.n	800c632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c620:	f7fd ff48 	bl	800a4b4 <HAL_GetTick>
 800c624:	4602      	mov	r2, r0
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	2b64      	cmp	r3, #100	@ 0x64
 800c62c:	d901      	bls.n	800c632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e200      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c632:	4b5d      	ldr	r3, [pc, #372]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0f0      	beq.n	800c620 <HAL_RCC_OscConfig+0xe4>
 800c63e:	e014      	b.n	800c66a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c640:	f7fd ff38 	bl	800a4b4 <HAL_GetTick>
 800c644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c646:	e008      	b.n	800c65a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c648:	f7fd ff34 	bl	800a4b4 <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	2b64      	cmp	r3, #100	@ 0x64
 800c654:	d901      	bls.n	800c65a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e1ec      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c65a:	4b53      	ldr	r3, [pc, #332]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1f0      	bne.n	800c648 <HAL_RCC_OscConfig+0x10c>
 800c666:	e000      	b.n	800c66a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 0302 	and.w	r3, r3, #2
 800c672:	2b00      	cmp	r3, #0
 800c674:	d063      	beq.n	800c73e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c676:	4b4c      	ldr	r3, [pc, #304]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	f003 030c 	and.w	r3, r3, #12
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00b      	beq.n	800c69a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c682:	4b49      	ldr	r3, [pc, #292]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f003 030c 	and.w	r3, r3, #12
 800c68a:	2b08      	cmp	r3, #8
 800c68c:	d11c      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x18c>
 800c68e:	4b46      	ldr	r3, [pc, #280]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c696:	2b00      	cmp	r3, #0
 800c698:	d116      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c69a:	4b43      	ldr	r3, [pc, #268]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d005      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x176>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d001      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e1c0      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6b2:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	00db      	lsls	r3, r3, #3
 800c6c0:	4939      	ldr	r1, [pc, #228]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6c6:	e03a      	b.n	800c73e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d020      	beq.n	800c712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6d0:	4b36      	ldr	r3, [pc, #216]	@ (800c7ac <HAL_RCC_OscConfig+0x270>)
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6d6:	f7fd feed 	bl	800a4b4 <HAL_GetTick>
 800c6da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6dc:	e008      	b.n	800c6f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6de:	f7fd fee9 	bl	800a4b4 <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d901      	bls.n	800c6f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	e1a1      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6f0:	4b2d      	ldr	r3, [pc, #180]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0302 	and.w	r3, r3, #2
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0f0      	beq.n	800c6de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6fc:	4b2a      	ldr	r3, [pc, #168]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	695b      	ldr	r3, [r3, #20]
 800c708:	00db      	lsls	r3, r3, #3
 800c70a:	4927      	ldr	r1, [pc, #156]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c70c:	4313      	orrs	r3, r2
 800c70e:	600b      	str	r3, [r1, #0]
 800c710:	e015      	b.n	800c73e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c712:	4b26      	ldr	r3, [pc, #152]	@ (800c7ac <HAL_RCC_OscConfig+0x270>)
 800c714:	2200      	movs	r2, #0
 800c716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c718:	f7fd fecc 	bl	800a4b4 <HAL_GetTick>
 800c71c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c71e:	e008      	b.n	800c732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c720:	f7fd fec8 	bl	800a4b4 <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d901      	bls.n	800c732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e180      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c732:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f003 0302 	and.w	r3, r3, #2
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1f0      	bne.n	800c720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 0308 	and.w	r3, r3, #8
 800c746:	2b00      	cmp	r3, #0
 800c748:	d03a      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d019      	beq.n	800c786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c752:	4b17      	ldr	r3, [pc, #92]	@ (800c7b0 <HAL_RCC_OscConfig+0x274>)
 800c754:	2201      	movs	r2, #1
 800c756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c758:	f7fd feac 	bl	800a4b4 <HAL_GetTick>
 800c75c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c75e:	e008      	b.n	800c772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c760:	f7fd fea8 	bl	800a4b4 <HAL_GetTick>
 800c764:	4602      	mov	r2, r0
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d901      	bls.n	800c772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	e160      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c772:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a8 <HAL_RCC_OscConfig+0x26c>)
 800c774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0f0      	beq.n	800c760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c77e:	2001      	movs	r0, #1
 800c780:	f000 face 	bl	800cd20 <RCC_Delay>
 800c784:	e01c      	b.n	800c7c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c786:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b0 <HAL_RCC_OscConfig+0x274>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c78c:	f7fd fe92 	bl	800a4b4 <HAL_GetTick>
 800c790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c792:	e00f      	b.n	800c7b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c794:	f7fd fe8e 	bl	800a4b4 <HAL_GetTick>
 800c798:	4602      	mov	r2, r0
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d908      	bls.n	800c7b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e146      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
 800c7a6:	bf00      	nop
 800c7a8:	40021000 	.word	0x40021000
 800c7ac:	42420000 	.word	0x42420000
 800c7b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7b4:	4b92      	ldr	r3, [pc, #584]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e9      	bne.n	800c794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 0304 	and.w	r3, r3, #4
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 80a6 	beq.w	800c91a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7d2:	4b8b      	ldr	r3, [pc, #556]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10d      	bne.n	800c7fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7de:	4b88      	ldr	r3, [pc, #544]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c7e0:	69db      	ldr	r3, [r3, #28]
 800c7e2:	4a87      	ldr	r2, [pc, #540]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c7e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7e8:	61d3      	str	r3, [r2, #28]
 800c7ea:	4b85      	ldr	r3, [pc, #532]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7f2:	60bb      	str	r3, [r7, #8]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7fa:	4b82      	ldr	r3, [pc, #520]	@ (800ca04 <HAL_RCC_OscConfig+0x4c8>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c802:	2b00      	cmp	r3, #0
 800c804:	d118      	bne.n	800c838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c806:	4b7f      	ldr	r3, [pc, #508]	@ (800ca04 <HAL_RCC_OscConfig+0x4c8>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a7e      	ldr	r2, [pc, #504]	@ (800ca04 <HAL_RCC_OscConfig+0x4c8>)
 800c80c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c812:	f7fd fe4f 	bl	800a4b4 <HAL_GetTick>
 800c816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c818:	e008      	b.n	800c82c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c81a:	f7fd fe4b 	bl	800a4b4 <HAL_GetTick>
 800c81e:	4602      	mov	r2, r0
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	2b64      	cmp	r3, #100	@ 0x64
 800c826:	d901      	bls.n	800c82c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c828:	2303      	movs	r3, #3
 800c82a:	e103      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c82c:	4b75      	ldr	r3, [pc, #468]	@ (800ca04 <HAL_RCC_OscConfig+0x4c8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c834:	2b00      	cmp	r3, #0
 800c836:	d0f0      	beq.n	800c81a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d106      	bne.n	800c84e <HAL_RCC_OscConfig+0x312>
 800c840:	4b6f      	ldr	r3, [pc, #444]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c842:	6a1b      	ldr	r3, [r3, #32]
 800c844:	4a6e      	ldr	r2, [pc, #440]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	6213      	str	r3, [r2, #32]
 800c84c:	e02d      	b.n	800c8aa <HAL_RCC_OscConfig+0x36e>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <HAL_RCC_OscConfig+0x334>
 800c856:	4b6a      	ldr	r3, [pc, #424]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	4a69      	ldr	r2, [pc, #420]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c85c:	f023 0301 	bic.w	r3, r3, #1
 800c860:	6213      	str	r3, [r2, #32]
 800c862:	4b67      	ldr	r3, [pc, #412]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	4a66      	ldr	r2, [pc, #408]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c868:	f023 0304 	bic.w	r3, r3, #4
 800c86c:	6213      	str	r3, [r2, #32]
 800c86e:	e01c      	b.n	800c8aa <HAL_RCC_OscConfig+0x36e>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	2b05      	cmp	r3, #5
 800c876:	d10c      	bne.n	800c892 <HAL_RCC_OscConfig+0x356>
 800c878:	4b61      	ldr	r3, [pc, #388]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c87a:	6a1b      	ldr	r3, [r3, #32]
 800c87c:	4a60      	ldr	r2, [pc, #384]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c87e:	f043 0304 	orr.w	r3, r3, #4
 800c882:	6213      	str	r3, [r2, #32]
 800c884:	4b5e      	ldr	r3, [pc, #376]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	4a5d      	ldr	r2, [pc, #372]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	6213      	str	r3, [r2, #32]
 800c890:	e00b      	b.n	800c8aa <HAL_RCC_OscConfig+0x36e>
 800c892:	4b5b      	ldr	r3, [pc, #364]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	4a5a      	ldr	r2, [pc, #360]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c898:	f023 0301 	bic.w	r3, r3, #1
 800c89c:	6213      	str	r3, [r2, #32]
 800c89e:	4b58      	ldr	r3, [pc, #352]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c8a0:	6a1b      	ldr	r3, [r3, #32]
 800c8a2:	4a57      	ldr	r2, [pc, #348]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c8a4:	f023 0304 	bic.w	r3, r3, #4
 800c8a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d015      	beq.n	800c8de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c8b2:	f7fd fdff 	bl	800a4b4 <HAL_GetTick>
 800c8b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8b8:	e00a      	b.n	800c8d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8ba:	f7fd fdfb 	bl	800a4b4 <HAL_GetTick>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d901      	bls.n	800c8d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	e0b1      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8d0:	4b4b      	ldr	r3, [pc, #300]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	f003 0302 	and.w	r3, r3, #2
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0ee      	beq.n	800c8ba <HAL_RCC_OscConfig+0x37e>
 800c8dc:	e014      	b.n	800c908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c8de:	f7fd fde9 	bl	800a4b4 <HAL_GetTick>
 800c8e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8e4:	e00a      	b.n	800c8fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8e6:	f7fd fde5 	bl	800a4b4 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d901      	bls.n	800c8fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e09b      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8fc:	4b40      	ldr	r3, [pc, #256]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	f003 0302 	and.w	r3, r3, #2
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1ee      	bne.n	800c8e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d105      	bne.n	800c91a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c90e:	4b3c      	ldr	r3, [pc, #240]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c910:	69db      	ldr	r3, [r3, #28]
 800c912:	4a3b      	ldr	r2, [pc, #236]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	69db      	ldr	r3, [r3, #28]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 8087 	beq.w	800ca32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c924:	4b36      	ldr	r3, [pc, #216]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f003 030c 	and.w	r3, r3, #12
 800c92c:	2b08      	cmp	r3, #8
 800c92e:	d061      	beq.n	800c9f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d146      	bne.n	800c9c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c938:	4b33      	ldr	r3, [pc, #204]	@ (800ca08 <HAL_RCC_OscConfig+0x4cc>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c93e:	f7fd fdb9 	bl	800a4b4 <HAL_GetTick>
 800c942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c944:	e008      	b.n	800c958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c946:	f7fd fdb5 	bl	800a4b4 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	2b02      	cmp	r3, #2
 800c952:	d901      	bls.n	800c958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e06d      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c958:	4b29      	ldr	r3, [pc, #164]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1f0      	bne.n	800c946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c96c:	d108      	bne.n	800c980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c96e:	4b24      	ldr	r3, [pc, #144]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	4921      	ldr	r1, [pc, #132]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c97c:	4313      	orrs	r3, r2
 800c97e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c980:	4b1f      	ldr	r3, [pc, #124]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a19      	ldr	r1, [r3, #32]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c990:	430b      	orrs	r3, r1
 800c992:	491b      	ldr	r1, [pc, #108]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c994:	4313      	orrs	r3, r2
 800c996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c998:	4b1b      	ldr	r3, [pc, #108]	@ (800ca08 <HAL_RCC_OscConfig+0x4cc>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c99e:	f7fd fd89 	bl	800a4b4 <HAL_GetTick>
 800c9a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c9a4:	e008      	b.n	800c9b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9a6:	f7fd fd85 	bl	800a4b4 <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d901      	bls.n	800c9b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e03d      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c9b8:	4b11      	ldr	r3, [pc, #68]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0f0      	beq.n	800c9a6 <HAL_RCC_OscConfig+0x46a>
 800c9c4:	e035      	b.n	800ca32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ca08 <HAL_RCC_OscConfig+0x4cc>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9cc:	f7fd fd72 	bl	800a4b4 <HAL_GetTick>
 800c9d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c9d2:	e008      	b.n	800c9e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9d4:	f7fd fd6e 	bl	800a4b4 <HAL_GetTick>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d901      	bls.n	800c9e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	e026      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c9e6:	4b06      	ldr	r3, [pc, #24]	@ (800ca00 <HAL_RCC_OscConfig+0x4c4>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1f0      	bne.n	800c9d4 <HAL_RCC_OscConfig+0x498>
 800c9f2:	e01e      	b.n	800ca32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	69db      	ldr	r3, [r3, #28]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d107      	bne.n	800ca0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e019      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
 800ca00:	40021000 	.word	0x40021000
 800ca04:	40007000 	.word	0x40007000
 800ca08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ca0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca3c <HAL_RCC_OscConfig+0x500>)
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a1b      	ldr	r3, [r3, #32]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d106      	bne.n	800ca2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d001      	beq.n	800ca32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3718      	adds	r7, #24
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	40021000 	.word	0x40021000

0800ca40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e0d0      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca54:	4b6a      	ldr	r3, [pc, #424]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d910      	bls.n	800ca84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca62:	4b67      	ldr	r3, [pc, #412]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f023 0207 	bic.w	r2, r3, #7
 800ca6a:	4965      	ldr	r1, [pc, #404]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca72:	4b63      	ldr	r3, [pc, #396]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d001      	beq.n	800ca84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e0b8      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 0302 	and.w	r3, r3, #2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d020      	beq.n	800cad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca9c:	4b59      	ldr	r3, [pc, #356]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4a58      	ldr	r2, [pc, #352]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800caa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800caa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0308 	and.w	r3, r3, #8
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cab4:	4b53      	ldr	r3, [pc, #332]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	4a52      	ldr	r2, [pc, #328]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800caba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800cabe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cac0:	4b50      	ldr	r3, [pc, #320]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	494d      	ldr	r1, [pc, #308]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cace:	4313      	orrs	r3, r2
 800cad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d040      	beq.n	800cb60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d107      	bne.n	800caf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cae6:	4b47      	ldr	r3, [pc, #284]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d115      	bne.n	800cb1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e07f      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d107      	bne.n	800cb0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cafe:	4b41      	ldr	r3, [pc, #260]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e073      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb0e:	4b3d      	ldr	r3, [pc, #244]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0302 	and.w	r3, r3, #2
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e06b      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb1e:	4b39      	ldr	r3, [pc, #228]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f023 0203 	bic.w	r2, r3, #3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	4936      	ldr	r1, [pc, #216]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cb30:	f7fd fcc0 	bl	800a4b4 <HAL_GetTick>
 800cb34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb36:	e00a      	b.n	800cb4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb38:	f7fd fcbc 	bl	800a4b4 <HAL_GetTick>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d901      	bls.n	800cb4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cb4a:	2303      	movs	r3, #3
 800cb4c:	e053      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb4e:	4b2d      	ldr	r3, [pc, #180]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f003 020c 	and.w	r2, r3, #12
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d1eb      	bne.n	800cb38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb60:	4b27      	ldr	r3, [pc, #156]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	683a      	ldr	r2, [r7, #0]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d210      	bcs.n	800cb90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb6e:	4b24      	ldr	r3, [pc, #144]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f023 0207 	bic.w	r2, r3, #7
 800cb76:	4922      	ldr	r1, [pc, #136]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb7e:	4b20      	ldr	r3, [pc, #128]	@ (800cc00 <HAL_RCC_ClockConfig+0x1c0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d001      	beq.n	800cb90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e032      	b.n	800cbf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d008      	beq.n	800cbae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb9c:	4b19      	ldr	r3, [pc, #100]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	4916      	ldr	r1, [pc, #88]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 0308 	and.w	r3, r3, #8
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d009      	beq.n	800cbce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cbba:	4b12      	ldr	r3, [pc, #72]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	490e      	ldr	r1, [pc, #56]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbce:	f000 f821 	bl	800cc14 <HAL_RCC_GetSysClockFreq>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4b0b      	ldr	r3, [pc, #44]	@ (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	091b      	lsrs	r3, r3, #4
 800cbda:	f003 030f 	and.w	r3, r3, #15
 800cbde:	490a      	ldr	r1, [pc, #40]	@ (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cbe0:	5ccb      	ldrb	r3, [r1, r3]
 800cbe2:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe6:	4a09      	ldr	r2, [pc, #36]	@ (800cc0c <HAL_RCC_ClockConfig+0x1cc>)
 800cbe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cbea:	4b09      	ldr	r3, [pc, #36]	@ (800cc10 <HAL_RCC_ClockConfig+0x1d0>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fd fc1e 	bl	800a430 <HAL_InitTick>

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	40022000 	.word	0x40022000
 800cc04:	40021000 	.word	0x40021000
 800cc08:	0800e2e0 	.word	0x0800e2e0
 800cc0c:	20000f74 	.word	0x20000f74
 800cc10:	20000f78 	.word	0x20000f78

0800cc14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	60fb      	str	r3, [r7, #12]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60bb      	str	r3, [r7, #8]
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
 800cc26:	2300      	movs	r3, #0
 800cc28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800cc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800cca8 <HAL_RCC_GetSysClockFreq+0x94>)
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f003 030c 	and.w	r3, r3, #12
 800cc3a:	2b04      	cmp	r3, #4
 800cc3c:	d002      	beq.n	800cc44 <HAL_RCC_GetSysClockFreq+0x30>
 800cc3e:	2b08      	cmp	r3, #8
 800cc40:	d003      	beq.n	800cc4a <HAL_RCC_GetSysClockFreq+0x36>
 800cc42:	e027      	b.n	800cc94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800cc44:	4b19      	ldr	r3, [pc, #100]	@ (800ccac <HAL_RCC_GetSysClockFreq+0x98>)
 800cc46:	613b      	str	r3, [r7, #16]
      break;
 800cc48:	e027      	b.n	800cc9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	0c9b      	lsrs	r3, r3, #18
 800cc4e:	f003 030f 	and.w	r3, r3, #15
 800cc52:	4a17      	ldr	r2, [pc, #92]	@ (800ccb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800cc54:	5cd3      	ldrb	r3, [r2, r3]
 800cc56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d010      	beq.n	800cc84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800cc62:	4b11      	ldr	r3, [pc, #68]	@ (800cca8 <HAL_RCC_GetSysClockFreq+0x94>)
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	0c5b      	lsrs	r3, r3, #17
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	4a11      	ldr	r2, [pc, #68]	@ (800ccb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800cc6e:	5cd3      	ldrb	r3, [r2, r3]
 800cc70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a0d      	ldr	r2, [pc, #52]	@ (800ccac <HAL_RCC_GetSysClockFreq+0x98>)
 800cc76:	fb03 f202 	mul.w	r2, r3, r2
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	e004      	b.n	800cc8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a0c      	ldr	r2, [pc, #48]	@ (800ccb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800cc88:	fb02 f303 	mul.w	r3, r2, r3
 800cc8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	613b      	str	r3, [r7, #16]
      break;
 800cc92:	e002      	b.n	800cc9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800cc94:	4b05      	ldr	r3, [pc, #20]	@ (800ccac <HAL_RCC_GetSysClockFreq+0x98>)
 800cc96:	613b      	str	r3, [r7, #16]
      break;
 800cc98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc9a:	693b      	ldr	r3, [r7, #16]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	371c      	adds	r7, #28
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bc80      	pop	{r7}
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	40021000 	.word	0x40021000
 800ccac:	007a1200 	.word	0x007a1200
 800ccb0:	0800e2f8 	.word	0x0800e2f8
 800ccb4:	0800e308 	.word	0x0800e308
 800ccb8:	003d0900 	.word	0x003d0900

0800ccbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ccc0:	4b02      	ldr	r3, [pc, #8]	@ (800cccc <HAL_RCC_GetHCLKFreq+0x10>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bc80      	pop	{r7}
 800ccca:	4770      	bx	lr
 800cccc:	20000f74 	.word	0x20000f74

0800ccd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ccd4:	f7ff fff2 	bl	800ccbc <HAL_RCC_GetHCLKFreq>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	0a1b      	lsrs	r3, r3, #8
 800cce0:	f003 0307 	and.w	r3, r3, #7
 800cce4:	4903      	ldr	r1, [pc, #12]	@ (800ccf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cce6:	5ccb      	ldrb	r3, [r1, r3]
 800cce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	40021000 	.word	0x40021000
 800ccf4:	0800e2f0 	.word	0x0800e2f0

0800ccf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccfc:	f7ff ffde 	bl	800ccbc <HAL_RCC_GetHCLKFreq>
 800cd00:	4602      	mov	r2, r0
 800cd02:	4b05      	ldr	r3, [pc, #20]	@ (800cd18 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	0adb      	lsrs	r3, r3, #11
 800cd08:	f003 0307 	and.w	r3, r3, #7
 800cd0c:	4903      	ldr	r1, [pc, #12]	@ (800cd1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd0e:	5ccb      	ldrb	r3, [r1, r3]
 800cd10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	40021000 	.word	0x40021000
 800cd1c:	0800e2f0 	.word	0x0800e2f0

0800cd20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800cd28:	4b0a      	ldr	r3, [pc, #40]	@ (800cd54 <RCC_Delay+0x34>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd58 <RCC_Delay+0x38>)
 800cd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd32:	0a5b      	lsrs	r3, r3, #9
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	fb02 f303 	mul.w	r3, r2, r3
 800cd3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800cd3c:	bf00      	nop
  }
  while (Delay --);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	1e5a      	subs	r2, r3, #1
 800cd42:	60fa      	str	r2, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1f9      	bne.n	800cd3c <RCC_Delay+0x1c>
}
 800cd48:	bf00      	nop
 800cd4a:	bf00      	nop
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bc80      	pop	{r7}
 800cd52:	4770      	bx	lr
 800cd54:	20000f74 	.word	0x20000f74
 800cd58:	10624dd3 	.word	0x10624dd3

0800cd5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e041      	b.n	800cdf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d106      	bne.n	800cd88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7fd fa58 	bl	800a238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3304      	adds	r3, #4
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	f000 fa82 	bl	800d2a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d001      	beq.n	800ce14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e044      	b.n	800ce9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2202      	movs	r2, #2
 800ce18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f042 0201 	orr.w	r2, r2, #1
 800ce2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a1d      	ldr	r2, [pc, #116]	@ (800cea8 <HAL_TIM_Base_Start_IT+0xac>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d018      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0x6c>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a1c      	ldr	r2, [pc, #112]	@ (800ceac <HAL_TIM_Base_Start_IT+0xb0>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d013      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0x6c>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce48:	d00e      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0x6c>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a18      	ldr	r2, [pc, #96]	@ (800ceb0 <HAL_TIM_Base_Start_IT+0xb4>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d009      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0x6c>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a16      	ldr	r2, [pc, #88]	@ (800ceb4 <HAL_TIM_Base_Start_IT+0xb8>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d004      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0x6c>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a15      	ldr	r2, [pc, #84]	@ (800ceb8 <HAL_TIM_Base_Start_IT+0xbc>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d111      	bne.n	800ce8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f003 0307 	and.w	r3, r3, #7
 800ce72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b06      	cmp	r3, #6
 800ce78:	d010      	beq.n	800ce9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f042 0201 	orr.w	r2, r2, #1
 800ce88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce8a:	e007      	b.n	800ce9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f042 0201 	orr.w	r2, r2, #1
 800ce9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bc80      	pop	{r7}
 800cea6:	4770      	bx	lr
 800cea8:	40012c00 	.word	0x40012c00
 800ceac:	40013400 	.word	0x40013400
 800ceb0:	40000400 	.word	0x40000400
 800ceb4:	40000800 	.word	0x40000800
 800ceb8:	40000c00 	.word	0x40000c00

0800cebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	f003 0302 	and.w	r3, r3, #2
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d122      	bne.n	800cf18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d11b      	bne.n	800cf18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f06f 0202 	mvn.w	r2, #2
 800cee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	f003 0303 	and.w	r3, r3, #3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f9b4 	bl	800d26c <HAL_TIM_IC_CaptureCallback>
 800cf04:	e005      	b.n	800cf12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f9a7 	bl	800d25a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 f9b6 	bl	800d27e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	d122      	bne.n	800cf6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	d11b      	bne.n	800cf6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f06f 0204 	mvn.w	r2, #4
 800cf3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2202      	movs	r2, #2
 800cf42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	699b      	ldr	r3, [r3, #24]
 800cf4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f98a 	bl	800d26c <HAL_TIM_IC_CaptureCallback>
 800cf58:	e005      	b.n	800cf66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f97d 	bl	800d25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 f98c 	bl	800d27e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	f003 0308 	and.w	r3, r3, #8
 800cf76:	2b08      	cmp	r3, #8
 800cf78:	d122      	bne.n	800cfc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	f003 0308 	and.w	r3, r3, #8
 800cf84:	2b08      	cmp	r3, #8
 800cf86:	d11b      	bne.n	800cfc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f06f 0208 	mvn.w	r2, #8
 800cf90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2204      	movs	r2, #4
 800cf96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	69db      	ldr	r3, [r3, #28]
 800cf9e:	f003 0303 	and.w	r3, r3, #3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f960 	bl	800d26c <HAL_TIM_IC_CaptureCallback>
 800cfac:	e005      	b.n	800cfba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f953 	bl	800d25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f962 	bl	800d27e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	f003 0310 	and.w	r3, r3, #16
 800cfca:	2b10      	cmp	r3, #16
 800cfcc:	d122      	bne.n	800d014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	f003 0310 	and.w	r3, r3, #16
 800cfd8:	2b10      	cmp	r3, #16
 800cfda:	d11b      	bne.n	800d014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f06f 0210 	mvn.w	r2, #16
 800cfe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2208      	movs	r2, #8
 800cfea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	69db      	ldr	r3, [r3, #28]
 800cff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f936 	bl	800d26c <HAL_TIM_IC_CaptureCallback>
 800d000:	e005      	b.n	800d00e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f929 	bl	800d25a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f938 	bl	800d27e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	f003 0301 	and.w	r3, r3, #1
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d10e      	bne.n	800d040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d107      	bne.n	800d040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f06f 0201 	mvn.w	r2, #1
 800d038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7fc fd96 	bl	8009b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d04a:	2b80      	cmp	r3, #128	@ 0x80
 800d04c:	d10e      	bne.n	800d06c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d058:	2b80      	cmp	r3, #128	@ 0x80
 800d05a:	d107      	bne.n	800d06c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 faa1 	bl	800d5ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d076:	2b40      	cmp	r3, #64	@ 0x40
 800d078:	d10e      	bne.n	800d098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d084:	2b40      	cmp	r3, #64	@ 0x40
 800d086:	d107      	bne.n	800d098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f8fc 	bl	800d290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	f003 0320 	and.w	r3, r3, #32
 800d0a2:	2b20      	cmp	r3, #32
 800d0a4:	d10e      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f003 0320 	and.w	r3, r3, #32
 800d0b0:	2b20      	cmp	r3, #32
 800d0b2:	d107      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f06f 0220 	mvn.w	r2, #32
 800d0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fa6c 	bl	800d59c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d101      	bne.n	800d0e8 <HAL_TIM_ConfigClockSource+0x1c>
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	e0b4      	b.n	800d252 <HAL_TIM_ConfigClockSource+0x186>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d10e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d120:	d03e      	beq.n	800d1a0 <HAL_TIM_ConfigClockSource+0xd4>
 800d122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d126:	f200 8087 	bhi.w	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d12a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d12e:	f000 8086 	beq.w	800d23e <HAL_TIM_ConfigClockSource+0x172>
 800d132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d136:	d87f      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d138:	2b70      	cmp	r3, #112	@ 0x70
 800d13a:	d01a      	beq.n	800d172 <HAL_TIM_ConfigClockSource+0xa6>
 800d13c:	2b70      	cmp	r3, #112	@ 0x70
 800d13e:	d87b      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d140:	2b60      	cmp	r3, #96	@ 0x60
 800d142:	d050      	beq.n	800d1e6 <HAL_TIM_ConfigClockSource+0x11a>
 800d144:	2b60      	cmp	r3, #96	@ 0x60
 800d146:	d877      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d148:	2b50      	cmp	r3, #80	@ 0x50
 800d14a:	d03c      	beq.n	800d1c6 <HAL_TIM_ConfigClockSource+0xfa>
 800d14c:	2b50      	cmp	r3, #80	@ 0x50
 800d14e:	d873      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d150:	2b40      	cmp	r3, #64	@ 0x40
 800d152:	d058      	beq.n	800d206 <HAL_TIM_ConfigClockSource+0x13a>
 800d154:	2b40      	cmp	r3, #64	@ 0x40
 800d156:	d86f      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d158:	2b30      	cmp	r3, #48	@ 0x30
 800d15a:	d064      	beq.n	800d226 <HAL_TIM_ConfigClockSource+0x15a>
 800d15c:	2b30      	cmp	r3, #48	@ 0x30
 800d15e:	d86b      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d160:	2b20      	cmp	r3, #32
 800d162:	d060      	beq.n	800d226 <HAL_TIM_ConfigClockSource+0x15a>
 800d164:	2b20      	cmp	r3, #32
 800d166:	d867      	bhi.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d05c      	beq.n	800d226 <HAL_TIM_ConfigClockSource+0x15a>
 800d16c:	2b10      	cmp	r3, #16
 800d16e:	d05a      	beq.n	800d226 <HAL_TIM_ConfigClockSource+0x15a>
 800d170:	e062      	b.n	800d238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d182:	f000 f980 	bl	800d486 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	609a      	str	r2, [r3, #8]
      break;
 800d19e:	e04f      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d1b0:	f000 f969 	bl	800d486 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	689a      	ldr	r2, [r3, #8]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1c2:	609a      	str	r2, [r3, #8]
      break;
 800d1c4:	e03c      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f000 f8e0 	bl	800d398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2150      	movs	r1, #80	@ 0x50
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 f937 	bl	800d452 <TIM_ITRx_SetConfig>
      break;
 800d1e4:	e02c      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	f000 f8fe 	bl	800d3f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2160      	movs	r1, #96	@ 0x60
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 f927 	bl	800d452 <TIM_ITRx_SetConfig>
      break;
 800d204:	e01c      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d212:	461a      	mov	r2, r3
 800d214:	f000 f8c0 	bl	800d398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2140      	movs	r1, #64	@ 0x40
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 f917 	bl	800d452 <TIM_ITRx_SetConfig>
      break;
 800d224:	e00c      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4619      	mov	r1, r3
 800d230:	4610      	mov	r0, r2
 800d232:	f000 f90e 	bl	800d452 <TIM_ITRx_SetConfig>
      break;
 800d236:	e003      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	73fb      	strb	r3, [r7, #15]
      break;
 800d23c:	e000      	b.n	800d240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d23e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d250:	7bfb      	ldrb	r3, [r7, #15]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d262:	bf00      	nop
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	bc80      	pop	{r7}
 800d26a:	4770      	bx	lr

0800d26c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	bc80      	pop	{r7}
 800d27c:	4770      	bx	lr

0800d27e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d286:	bf00      	nop
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bc80      	pop	{r7}
 800d28e:	4770      	bx	lr

0800d290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d298:	bf00      	nop
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bc80      	pop	{r7}
 800d2a0:	4770      	bx	lr
	...

0800d2a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a33      	ldr	r2, [pc, #204]	@ (800d384 <TIM_Base_SetConfig+0xe0>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d013      	beq.n	800d2e4 <TIM_Base_SetConfig+0x40>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a32      	ldr	r2, [pc, #200]	@ (800d388 <TIM_Base_SetConfig+0xe4>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d00f      	beq.n	800d2e4 <TIM_Base_SetConfig+0x40>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2ca:	d00b      	beq.n	800d2e4 <TIM_Base_SetConfig+0x40>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a2f      	ldr	r2, [pc, #188]	@ (800d38c <TIM_Base_SetConfig+0xe8>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d007      	beq.n	800d2e4 <TIM_Base_SetConfig+0x40>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a2e      	ldr	r2, [pc, #184]	@ (800d390 <TIM_Base_SetConfig+0xec>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d003      	beq.n	800d2e4 <TIM_Base_SetConfig+0x40>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a2d      	ldr	r2, [pc, #180]	@ (800d394 <TIM_Base_SetConfig+0xf0>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d108      	bne.n	800d2f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a22      	ldr	r2, [pc, #136]	@ (800d384 <TIM_Base_SetConfig+0xe0>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d013      	beq.n	800d326 <TIM_Base_SetConfig+0x82>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a21      	ldr	r2, [pc, #132]	@ (800d388 <TIM_Base_SetConfig+0xe4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d00f      	beq.n	800d326 <TIM_Base_SetConfig+0x82>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d30c:	d00b      	beq.n	800d326 <TIM_Base_SetConfig+0x82>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a1e      	ldr	r2, [pc, #120]	@ (800d38c <TIM_Base_SetConfig+0xe8>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d007      	beq.n	800d326 <TIM_Base_SetConfig+0x82>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a1d      	ldr	r2, [pc, #116]	@ (800d390 <TIM_Base_SetConfig+0xec>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d003      	beq.n	800d326 <TIM_Base_SetConfig+0x82>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a1c      	ldr	r2, [pc, #112]	@ (800d394 <TIM_Base_SetConfig+0xf0>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d108      	bne.n	800d338 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d32c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	4313      	orrs	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	695b      	ldr	r3, [r3, #20]
 800d342:	4313      	orrs	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a09      	ldr	r2, [pc, #36]	@ (800d384 <TIM_Base_SetConfig+0xe0>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d003      	beq.n	800d36c <TIM_Base_SetConfig+0xc8>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a08      	ldr	r2, [pc, #32]	@ (800d388 <TIM_Base_SetConfig+0xe4>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d103      	bne.n	800d374 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	691a      	ldr	r2, [r3, #16]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	615a      	str	r2, [r3, #20]
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	bc80      	pop	{r7}
 800d382:	4770      	bx	lr
 800d384:	40012c00 	.word	0x40012c00
 800d388:	40013400 	.word	0x40013400
 800d38c:	40000400 	.word	0x40000400
 800d390:	40000800 	.word	0x40000800
 800d394:	40000c00 	.word	0x40000c00

0800d398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d398:	b480      	push	{r7}
 800d39a:	b087      	sub	sp, #28
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6a1b      	ldr	r3, [r3, #32]
 800d3a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
 800d3ae:	f023 0201 	bic.w	r2, r3, #1
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d3c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f023 030a 	bic.w	r3, r3, #10
 800d3d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	621a      	str	r2, [r3, #32]
}
 800d3ea:	bf00      	nop
 800d3ec:	371c      	adds	r7, #28
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bc80      	pop	{r7}
 800d3f2:	4770      	bx	lr

0800d3f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	f023 0210 	bic.w	r2, r3, #16
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d41e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	031b      	lsls	r3, r3, #12
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4313      	orrs	r3, r2
 800d428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d430:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	4313      	orrs	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	621a      	str	r2, [r3, #32]
}
 800d448:	bf00      	nop
 800d44a:	371c      	adds	r7, #28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bc80      	pop	{r7}
 800d450:	4770      	bx	lr

0800d452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d452:	b480      	push	{r7}
 800d454:	b085      	sub	sp, #20
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4313      	orrs	r3, r2
 800d470:	f043 0307 	orr.w	r3, r3, #7
 800d474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	609a      	str	r2, [r3, #8]
}
 800d47c:	bf00      	nop
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	bc80      	pop	{r7}
 800d484:	4770      	bx	lr

0800d486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d486:	b480      	push	{r7}
 800d488:	b087      	sub	sp, #28
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]
 800d492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	021a      	lsls	r2, r3, #8
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	609a      	str	r2, [r3, #8]
}
 800d4ba:	bf00      	nop
 800d4bc:	371c      	adds	r7, #28
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bc80      	pop	{r7}
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d101      	bne.n	800d4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e050      	b.n	800d57e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a1b      	ldr	r2, [pc, #108]	@ (800d588 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d018      	beq.n	800d552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a19      	ldr	r2, [pc, #100]	@ (800d58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d013      	beq.n	800d552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d532:	d00e      	beq.n	800d552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a15      	ldr	r2, [pc, #84]	@ (800d590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d009      	beq.n	800d552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a14      	ldr	r2, [pc, #80]	@ (800d594 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d004      	beq.n	800d552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a12      	ldr	r2, [pc, #72]	@ (800d598 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d10c      	bne.n	800d56c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	4313      	orrs	r3, r2
 800d562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	bc80      	pop	{r7}
 800d586:	4770      	bx	lr
 800d588:	40012c00 	.word	0x40012c00
 800d58c:	40013400 	.word	0x40013400
 800d590:	40000400 	.word	0x40000400
 800d594:	40000800 	.word	0x40000800
 800d598:	40000c00 	.word	0x40000c00

0800d59c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bc80      	pop	{r7}
 800d5ac:	4770      	bx	lr

0800d5ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5b6:	bf00      	nop
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bc80      	pop	{r7}
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e042      	b.n	800d658 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7fc fe4c 	bl	800a284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2224      	movs	r2, #36	@ 0x24
 800d5f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68da      	ldr	r2, [r3, #12]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fc7f 	bl	800df08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	691a      	ldr	r2, [r3, #16]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	695a      	ldr	r2, [r3, #20]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68da      	ldr	r2, [r3, #12]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2220      	movs	r2, #32
 800d644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2220      	movs	r2, #32
 800d64c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b0ba      	sub	sp, #232	@ 0xe8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	695b      	ldr	r3, [r3, #20]
 800d682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d686:	2300      	movs	r3, #0
 800d688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d696:	f003 030f 	and.w	r3, r3, #15
 800d69a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d69e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10f      	bne.n	800d6c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6aa:	f003 0320 	and.w	r3, r3, #32
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d009      	beq.n	800d6c6 <HAL_UART_IRQHandler+0x66>
 800d6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6b6:	f003 0320 	and.w	r3, r3, #32
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fb63 	bl	800dd8a <UART_Receive_IT>
      return;
 800d6c4:	e25b      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d6c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 80de 	beq.w	800d88c <HAL_UART_IRQHandler+0x22c>
 800d6d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80d1 	beq.w	800d88c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6ee:	f003 0301 	and.w	r3, r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00b      	beq.n	800d70e <HAL_UART_IRQHandler+0xae>
 800d6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d005      	beq.n	800d70e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d706:	f043 0201 	orr.w	r2, r3, #1
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d712:	f003 0304 	and.w	r3, r3, #4
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00b      	beq.n	800d732 <HAL_UART_IRQHandler+0xd2>
 800d71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d005      	beq.n	800d732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d72a:	f043 0202 	orr.w	r2, r3, #2
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d736:	f003 0302 	and.w	r3, r3, #2
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <HAL_UART_IRQHandler+0xf6>
 800d73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d005      	beq.n	800d756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d74e:	f043 0204 	orr.w	r2, r3, #4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d75a:	f003 0308 	and.w	r3, r3, #8
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d011      	beq.n	800d786 <HAL_UART_IRQHandler+0x126>
 800d762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d766:	f003 0320 	and.w	r3, r3, #32
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d105      	bne.n	800d77a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d76e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d772:	f003 0301 	and.w	r3, r3, #1
 800d776:	2b00      	cmp	r3, #0
 800d778:	d005      	beq.n	800d786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d77e:	f043 0208 	orr.w	r2, r3, #8
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 81f2 	beq.w	800db74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d008      	beq.n	800d7ae <HAL_UART_IRQHandler+0x14e>
 800d79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7a0:	f003 0320 	and.w	r3, r3, #32
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 faee 	bl	800dd8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	bf14      	ite	ne
 800d7bc:	2301      	movne	r3, #1
 800d7be:	2300      	moveq	r3, #0
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ca:	f003 0308 	and.w	r3, r3, #8
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d103      	bne.n	800d7da <HAL_UART_IRQHandler+0x17a>
 800d7d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d04f      	beq.n	800d87a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f9f8 	bl	800dbd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d041      	beq.n	800d872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3314      	adds	r3, #20
 800d7f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d7fc:	e853 3f00 	ldrex	r3, [r3]
 800d800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d80c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3314      	adds	r3, #20
 800d816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d81a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d81e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d82a:	e841 2300 	strex	r3, r2, [r1]
 800d82e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1d9      	bne.n	800d7ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d013      	beq.n	800d86a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d846:	4a7e      	ldr	r2, [pc, #504]	@ (800da40 <HAL_UART_IRQHandler+0x3e0>)
 800d848:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fd f8a2 	bl	800a998 <HAL_DMA_Abort_IT>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d016      	beq.n	800d888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d85e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d864:	4610      	mov	r0, r2
 800d866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d868:	e00e      	b.n	800d888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f99c 	bl	800dba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d870:	e00a      	b.n	800d888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f998 	bl	800dba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d878:	e006      	b.n	800d888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f994 	bl	800dba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d886:	e175      	b.n	800db74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d888:	bf00      	nop
    return;
 800d88a:	e173      	b.n	800db74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d890:	2b01      	cmp	r3, #1
 800d892:	f040 814f 	bne.w	800db34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d89a:	f003 0310 	and.w	r3, r3, #16
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 8148 	beq.w	800db34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d8a8:	f003 0310 	and.w	r3, r3, #16
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 8141 	beq.w	800db34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60bb      	str	r3, [r7, #8]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60bb      	str	r3, [r7, #8]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	60bb      	str	r3, [r7, #8]
 800d8c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 80b6 	beq.w	800da44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d8e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 8145 	beq.w	800db78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d8f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	f080 813e 	bcs.w	800db78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	f000 8088 	beq.w	800da20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	330c      	adds	r3, #12
 800d916:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d92a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d92e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	330c      	adds	r3, #12
 800d938:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d93c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d944:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d948:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d94c:	e841 2300 	strex	r3, r2, [r1]
 800d950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1d9      	bne.n	800d910 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	3314      	adds	r3, #20
 800d962:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d966:	e853 3f00 	ldrex	r3, [r3]
 800d96a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d96c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d96e:	f023 0301 	bic.w	r3, r3, #1
 800d972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3314      	adds	r3, #20
 800d97c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d980:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d984:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d986:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d988:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d98c:	e841 2300 	strex	r3, r2, [r1]
 800d990:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e1      	bne.n	800d95c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3314      	adds	r3, #20
 800d99e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9a2:	e853 3f00 	ldrex	r3, [r3]
 800d9a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d9a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3314      	adds	r3, #20
 800d9b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d9bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d9be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d9c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d9ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e3      	bne.n	800d998 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2220      	movs	r2, #32
 800d9d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	330c      	adds	r3, #12
 800d9e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9e8:	e853 3f00 	ldrex	r3, [r3]
 800d9ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9f0:	f023 0310 	bic.w	r3, r3, #16
 800d9f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	330c      	adds	r3, #12
 800d9fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800da02:	65ba      	str	r2, [r7, #88]	@ 0x58
 800da04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da0a:	e841 2300 	strex	r3, r2, [r1]
 800da0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800da10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1e3      	bne.n	800d9de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fc ff81 	bl	800a922 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da2e:	b29b      	uxth	r3, r3
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	b29b      	uxth	r3, r3
 800da34:	4619      	mov	r1, r3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f8bf 	bl	800dbba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da3c:	e09c      	b.n	800db78 <HAL_UART_IRQHandler+0x518>
 800da3e:	bf00      	nop
 800da40:	0800dc95 	.word	0x0800dc95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da58:	b29b      	uxth	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	f000 808e 	beq.w	800db7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800da60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 8089 	beq.w	800db7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	330c      	adds	r3, #12
 800da70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	330c      	adds	r3, #12
 800da8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800da8e:	647a      	str	r2, [r7, #68]	@ 0x44
 800da90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da96:	e841 2300 	strex	r3, r2, [r1]
 800da9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1e3      	bne.n	800da6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	3314      	adds	r3, #20
 800daa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	e853 3f00 	ldrex	r3, [r3]
 800dab0:	623b      	str	r3, [r7, #32]
   return(result);
 800dab2:	6a3b      	ldr	r3, [r7, #32]
 800dab4:	f023 0301 	bic.w	r3, r3, #1
 800dab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3314      	adds	r3, #20
 800dac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dac6:	633a      	str	r2, [r7, #48]	@ 0x30
 800dac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dacc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dace:	e841 2300 	strex	r3, r2, [r1]
 800dad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1e3      	bne.n	800daa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2220      	movs	r2, #32
 800dade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	330c      	adds	r3, #12
 800daee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f023 0310 	bic.w	r3, r3, #16
 800dafe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	330c      	adds	r3, #12
 800db08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800db0c:	61fa      	str	r2, [r7, #28]
 800db0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db10:	69b9      	ldr	r1, [r7, #24]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	e841 2300 	strex	r3, r2, [r1]
 800db18:	617b      	str	r3, [r7, #20]
   return(result);
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e3      	bne.n	800dae8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f844 	bl	800dbba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800db32:	e023      	b.n	800db7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800db34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <HAL_UART_IRQHandler+0x4f4>
 800db40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d003      	beq.n	800db54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f8b5 	bl	800dcbc <UART_Transmit_IT>
    return;
 800db52:	e014      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800db54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00e      	beq.n	800db7e <HAL_UART_IRQHandler+0x51e>
 800db60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f8f4 	bl	800dd5a <UART_EndTransmit_IT>
    return;
 800db72:	e004      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
    return;
 800db74:	bf00      	nop
 800db76:	e002      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
      return;
 800db78:	bf00      	nop
 800db7a:	e000      	b.n	800db7e <HAL_UART_IRQHandler+0x51e>
      return;
 800db7c:	bf00      	nop
  }
}
 800db7e:	37e8      	adds	r7, #232	@ 0xe8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800db8c:	bf00      	nop
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	bc80      	pop	{r7}
 800db94:	4770      	bx	lr

0800db96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bc80      	pop	{r7}
 800dba6:	4770      	bx	lr

0800dba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bc80      	pop	{r7}
 800dbb8:	4770      	bx	lr

0800dbba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dbc6:	bf00      	nop
 800dbc8:	370c      	adds	r7, #12
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bc80      	pop	{r7}
 800dbce:	4770      	bx	lr

0800dbd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b095      	sub	sp, #84	@ 0x54
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	330c      	adds	r3, #12
 800dbde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe2:	e853 3f00 	ldrex	r3, [r3]
 800dbe6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	330c      	adds	r3, #12
 800dbf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbf8:	643a      	str	r2, [r7, #64]	@ 0x40
 800dbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc00:	e841 2300 	strex	r3, r2, [r1]
 800dc04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1e5      	bne.n	800dbd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3314      	adds	r3, #20
 800dc12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	e853 3f00 	ldrex	r3, [r3]
 800dc1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	f023 0301 	bic.w	r3, r3, #1
 800dc22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3314      	adds	r3, #20
 800dc2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc34:	e841 2300 	strex	r3, r2, [r1]
 800dc38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1e5      	bne.n	800dc0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d119      	bne.n	800dc7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	330c      	adds	r3, #12
 800dc4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	e853 3f00 	ldrex	r3, [r3]
 800dc56:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f023 0310 	bic.w	r3, r3, #16
 800dc5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	330c      	adds	r3, #12
 800dc66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc68:	61ba      	str	r2, [r7, #24]
 800dc6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	6979      	ldr	r1, [r7, #20]
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	613b      	str	r3, [r7, #16]
   return(result);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e5      	bne.n	800dc48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2220      	movs	r2, #32
 800dc80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dc8a:	bf00      	nop
 800dc8c:	3754      	adds	r7, #84	@ 0x54
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bc80      	pop	{r7}
 800dc92:	4770      	bx	lr

0800dc94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f7ff ff7a 	bl	800dba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcb4:	bf00      	nop
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b21      	cmp	r3, #33	@ 0x21
 800dcce:	d13e      	bne.n	800dd4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcd8:	d114      	bne.n	800dd04 <UART_Transmit_IT+0x48>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d110      	bne.n	800dd04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dcf6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a1b      	ldr	r3, [r3, #32]
 800dcfc:	1c9a      	adds	r2, r3, #2
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	621a      	str	r2, [r3, #32]
 800dd02:	e008      	b.n	800dd16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a1b      	ldr	r3, [r3, #32]
 800dd08:	1c59      	adds	r1, r3, #1
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	6211      	str	r1, [r2, #32]
 800dd0e:	781a      	ldrb	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	4619      	mov	r1, r3
 800dd24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10f      	bne.n	800dd4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68da      	ldr	r2, [r3, #12]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	e000      	b.n	800dd50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dd4e:	2302      	movs	r3, #2
  }
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bc80      	pop	{r7}
 800dd58:	4770      	bx	lr

0800dd5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ff02 	bl	800db84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b08c      	sub	sp, #48	@ 0x30
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b22      	cmp	r3, #34	@ 0x22
 800dd9c:	f040 80ae 	bne.w	800defc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dda8:	d117      	bne.n	800ddda <UART_Receive_IT+0x50>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d113      	bne.n	800ddda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd2:	1c9a      	adds	r2, r3, #2
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	629a      	str	r2, [r3, #40]	@ 0x28
 800ddd8:	e026      	b.n	800de28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddec:	d007      	beq.n	800ddfe <UART_Receive_IT+0x74>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10a      	bne.n	800de0c <UART_Receive_IT+0x82>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d106      	bne.n	800de0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	b2da      	uxtb	r2, r3
 800de06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	e008      	b.n	800de1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de22:	1c5a      	adds	r2, r3, #1
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b01      	subs	r3, #1
 800de30:	b29b      	uxth	r3, r3
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	4619      	mov	r1, r3
 800de36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d15d      	bne.n	800def8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 0220 	bic.w	r2, r2, #32
 800de4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68da      	ldr	r2, [r3, #12]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800de5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	695a      	ldr	r2, [r3, #20]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f022 0201 	bic.w	r2, r2, #1
 800de6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2220      	movs	r2, #32
 800de70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d135      	bne.n	800deee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	330c      	adds	r3, #12
 800de8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	613b      	str	r3, [r7, #16]
   return(result);
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	f023 0310 	bic.w	r3, r3, #16
 800de9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	330c      	adds	r3, #12
 800dea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dea8:	623a      	str	r2, [r7, #32]
 800deaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	69f9      	ldr	r1, [r7, #28]
 800deae:	6a3a      	ldr	r2, [r7, #32]
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e5      	bne.n	800de88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0310 	and.w	r3, r3, #16
 800dec6:	2b10      	cmp	r3, #16
 800dec8:	d10a      	bne.n	800dee0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800deca:	2300      	movs	r3, #0
 800decc:	60fb      	str	r3, [r7, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7ff fe67 	bl	800dbba <HAL_UARTEx_RxEventCallback>
 800deec:	e002      	b.n	800def4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fe51 	bl	800db96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	e002      	b.n	800defe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	e000      	b.n	800defe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800defc:	2302      	movs	r3, #2
  }
}
 800defe:	4618      	mov	r0, r3
 800df00:	3730      	adds	r7, #48	@ 0x30
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68da      	ldr	r2, [r3, #12]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	430a      	orrs	r2, r1
 800df24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	689a      	ldr	r2, [r3, #8]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	431a      	orrs	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	695b      	ldr	r3, [r3, #20]
 800df34:	4313      	orrs	r3, r2
 800df36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800df42:	f023 030c 	bic.w	r3, r3, #12
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	6812      	ldr	r2, [r2, #0]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	430b      	orrs	r3, r1
 800df4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	699a      	ldr	r2, [r3, #24]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	430a      	orrs	r2, r1
 800df64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a2c      	ldr	r2, [pc, #176]	@ (800e01c <UART_SetConfig+0x114>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d103      	bne.n	800df78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800df70:	f7fe fec2 	bl	800ccf8 <HAL_RCC_GetPCLK2Freq>
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	e002      	b.n	800df7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800df78:	f7fe feaa 	bl	800ccd0 <HAL_RCC_GetPCLK1Freq>
 800df7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	4613      	mov	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	4413      	add	r3, r2
 800df86:	009a      	lsls	r2, r3, #2
 800df88:	441a      	add	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	fbb2 f3f3 	udiv	r3, r2, r3
 800df94:	4a22      	ldr	r2, [pc, #136]	@ (800e020 <UART_SetConfig+0x118>)
 800df96:	fba2 2303 	umull	r2, r3, r2, r3
 800df9a:	095b      	lsrs	r3, r3, #5
 800df9c:	0119      	lsls	r1, r3, #4
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009a      	lsls	r2, r3, #2
 800dfa8:	441a      	add	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfb4:	4b1a      	ldr	r3, [pc, #104]	@ (800e020 <UART_SetConfig+0x118>)
 800dfb6:	fba3 0302 	umull	r0, r3, r3, r2
 800dfba:	095b      	lsrs	r3, r3, #5
 800dfbc:	2064      	movs	r0, #100	@ 0x64
 800dfbe:	fb00 f303 	mul.w	r3, r0, r3
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	011b      	lsls	r3, r3, #4
 800dfc6:	3332      	adds	r3, #50	@ 0x32
 800dfc8:	4a15      	ldr	r2, [pc, #84]	@ (800e020 <UART_SetConfig+0x118>)
 800dfca:	fba2 2303 	umull	r2, r3, r2, r3
 800dfce:	095b      	lsrs	r3, r3, #5
 800dfd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dfd4:	4419      	add	r1, r3
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	009a      	lsls	r2, r3, #2
 800dfe0:	441a      	add	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfec:	4b0c      	ldr	r3, [pc, #48]	@ (800e020 <UART_SetConfig+0x118>)
 800dfee:	fba3 0302 	umull	r0, r3, r3, r2
 800dff2:	095b      	lsrs	r3, r3, #5
 800dff4:	2064      	movs	r0, #100	@ 0x64
 800dff6:	fb00 f303 	mul.w	r3, r0, r3
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	011b      	lsls	r3, r3, #4
 800dffe:	3332      	adds	r3, #50	@ 0x32
 800e000:	4a07      	ldr	r2, [pc, #28]	@ (800e020 <UART_SetConfig+0x118>)
 800e002:	fba2 2303 	umull	r2, r3, r2, r3
 800e006:	095b      	lsrs	r3, r3, #5
 800e008:	f003 020f 	and.w	r2, r3, #15
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	440a      	add	r2, r1
 800e012:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e014:	bf00      	nop
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	40013800 	.word	0x40013800
 800e020:	51eb851f 	.word	0x51eb851f

0800e024 <__itoa>:
 800e024:	1e93      	subs	r3, r2, #2
 800e026:	2b22      	cmp	r3, #34	@ 0x22
 800e028:	b510      	push	{r4, lr}
 800e02a:	460c      	mov	r4, r1
 800e02c:	d904      	bls.n	800e038 <__itoa+0x14>
 800e02e:	2300      	movs	r3, #0
 800e030:	461c      	mov	r4, r3
 800e032:	700b      	strb	r3, [r1, #0]
 800e034:	4620      	mov	r0, r4
 800e036:	bd10      	pop	{r4, pc}
 800e038:	2a0a      	cmp	r2, #10
 800e03a:	d109      	bne.n	800e050 <__itoa+0x2c>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	da07      	bge.n	800e050 <__itoa+0x2c>
 800e040:	232d      	movs	r3, #45	@ 0x2d
 800e042:	700b      	strb	r3, [r1, #0]
 800e044:	2101      	movs	r1, #1
 800e046:	4240      	negs	r0, r0
 800e048:	4421      	add	r1, r4
 800e04a:	f000 f805 	bl	800e058 <__utoa>
 800e04e:	e7f1      	b.n	800e034 <__itoa+0x10>
 800e050:	2100      	movs	r1, #0
 800e052:	e7f9      	b.n	800e048 <__itoa+0x24>

0800e054 <itoa>:
 800e054:	f7ff bfe6 	b.w	800e024 <__itoa>

0800e058 <__utoa>:
 800e058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e05a:	b08b      	sub	sp, #44	@ 0x2c
 800e05c:	4605      	mov	r5, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	466e      	mov	r6, sp
 800e062:	4c1d      	ldr	r4, [pc, #116]	@ (800e0d8 <__utoa+0x80>)
 800e064:	f104 0c20 	add.w	ip, r4, #32
 800e068:	4637      	mov	r7, r6
 800e06a:	6820      	ldr	r0, [r4, #0]
 800e06c:	6861      	ldr	r1, [r4, #4]
 800e06e:	3408      	adds	r4, #8
 800e070:	c703      	stmia	r7!, {r0, r1}
 800e072:	4564      	cmp	r4, ip
 800e074:	463e      	mov	r6, r7
 800e076:	d1f7      	bne.n	800e068 <__utoa+0x10>
 800e078:	7921      	ldrb	r1, [r4, #4]
 800e07a:	6820      	ldr	r0, [r4, #0]
 800e07c:	7139      	strb	r1, [r7, #4]
 800e07e:	1e91      	subs	r1, r2, #2
 800e080:	2922      	cmp	r1, #34	@ 0x22
 800e082:	6038      	str	r0, [r7, #0]
 800e084:	f04f 0100 	mov.w	r1, #0
 800e088:	d904      	bls.n	800e094 <__utoa+0x3c>
 800e08a:	7019      	strb	r1, [r3, #0]
 800e08c:	460b      	mov	r3, r1
 800e08e:	4618      	mov	r0, r3
 800e090:	b00b      	add	sp, #44	@ 0x2c
 800e092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e094:	1e58      	subs	r0, r3, #1
 800e096:	4684      	mov	ip, r0
 800e098:	fbb5 f7f2 	udiv	r7, r5, r2
 800e09c:	fb02 5617 	mls	r6, r2, r7, r5
 800e0a0:	3628      	adds	r6, #40	@ 0x28
 800e0a2:	446e      	add	r6, sp
 800e0a4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e0ae:	462e      	mov	r6, r5
 800e0b0:	42b2      	cmp	r2, r6
 800e0b2:	463d      	mov	r5, r7
 800e0b4:	f101 0101 	add.w	r1, r1, #1
 800e0b8:	d9ee      	bls.n	800e098 <__utoa+0x40>
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	545a      	strb	r2, [r3, r1]
 800e0be:	1919      	adds	r1, r3, r4
 800e0c0:	1aa5      	subs	r5, r4, r2
 800e0c2:	42aa      	cmp	r2, r5
 800e0c4:	dae3      	bge.n	800e08e <__utoa+0x36>
 800e0c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e0ca:	780e      	ldrb	r6, [r1, #0]
 800e0cc:	3201      	adds	r2, #1
 800e0ce:	7006      	strb	r6, [r0, #0]
 800e0d0:	f801 5901 	strb.w	r5, [r1], #-1
 800e0d4:	e7f4      	b.n	800e0c0 <__utoa+0x68>
 800e0d6:	bf00      	nop
 800e0d8:	0800e30a 	.word	0x0800e30a

0800e0dc <memset>:
 800e0dc:	4603      	mov	r3, r0
 800e0de:	4402      	add	r2, r0
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d100      	bne.n	800e0e6 <memset+0xa>
 800e0e4:	4770      	bx	lr
 800e0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ea:	e7f9      	b.n	800e0e0 <memset+0x4>

0800e0ec <__libc_init_array>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	2600      	movs	r6, #0
 800e0f0:	4d0c      	ldr	r5, [pc, #48]	@ (800e124 <__libc_init_array+0x38>)
 800e0f2:	4c0d      	ldr	r4, [pc, #52]	@ (800e128 <__libc_init_array+0x3c>)
 800e0f4:	1b64      	subs	r4, r4, r5
 800e0f6:	10a4      	asrs	r4, r4, #2
 800e0f8:	42a6      	cmp	r6, r4
 800e0fa:	d109      	bne.n	800e110 <__libc_init_array+0x24>
 800e0fc:	f000 f81a 	bl	800e134 <_init>
 800e100:	2600      	movs	r6, #0
 800e102:	4d0a      	ldr	r5, [pc, #40]	@ (800e12c <__libc_init_array+0x40>)
 800e104:	4c0a      	ldr	r4, [pc, #40]	@ (800e130 <__libc_init_array+0x44>)
 800e106:	1b64      	subs	r4, r4, r5
 800e108:	10a4      	asrs	r4, r4, #2
 800e10a:	42a6      	cmp	r6, r4
 800e10c:	d105      	bne.n	800e11a <__libc_init_array+0x2e>
 800e10e:	bd70      	pop	{r4, r5, r6, pc}
 800e110:	f855 3b04 	ldr.w	r3, [r5], #4
 800e114:	4798      	blx	r3
 800e116:	3601      	adds	r6, #1
 800e118:	e7ee      	b.n	800e0f8 <__libc_init_array+0xc>
 800e11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e11e:	4798      	blx	r3
 800e120:	3601      	adds	r6, #1
 800e122:	e7f2      	b.n	800e10a <__libc_init_array+0x1e>
 800e124:	0800e338 	.word	0x0800e338
 800e128:	0800e338 	.word	0x0800e338
 800e12c:	0800e338 	.word	0x0800e338
 800e130:	0800e33c 	.word	0x0800e33c

0800e134 <_init>:
 800e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e136:	bf00      	nop
 800e138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13a:	bc08      	pop	{r3}
 800e13c:	469e      	mov	lr, r3
 800e13e:	4770      	bx	lr

0800e140 <_fini>:
 800e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e142:	bf00      	nop
 800e144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e146:	bc08      	pop	{r3}
 800e148:	469e      	mov	lr, r3
 800e14a:	4770      	bx	lr
