
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f42c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800f610  0800f610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9ac  0800f9ac  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9ac  0800f9ac  000109ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9b4  0800f9b4  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9b4  0800f9b4  000109b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9b8  0800f9b8  000109b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f9bc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000fd0  0801098c  00011fd0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001e84  0801098c  00012e84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d7a  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003640  00000000  00000000  0002ad73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb0  00000000  00000000  0002f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  00030558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d873  00000000  00000000  0004cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0469  00000000  00000000  0006a66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005384  00000000  00000000  0010ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800f5f8 	.word	0x0800f5f8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800f5f8 	.word	0x0800f5f8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b8b      	ldr	r3, [pc, #556]	@ (8000474 <eepromKontrol+0x240>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	488a      	ldr	r0, [pc, #552]	@ (8000478 <eepromKontrol+0x244>)
 8000250:	f00c f834 	bl	800c2bc <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f00a feac 	bl	800afb4 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800025c:	4b85      	ldr	r3, [pc, #532]	@ (8000474 <eepromKontrol+0x240>)
 800025e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	4b85      	ldr	r3, [pc, #532]	@ (800047c <eepromKontrol+0x248>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b82      	ldr	r3, [pc, #520]	@ (8000474 <eepromKontrol+0x240>)
 800026a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	4b83      	ldr	r3, [pc, #524]	@ (8000480 <eepromKontrol+0x24c>)
 8000272:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000274:	4b7f      	ldr	r3, [pc, #508]	@ (8000474 <eepromKontrol+0x240>)
 8000276:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	4b81      	ldr	r3, [pc, #516]	@ (8000484 <eepromKontrol+0x250>)
 800027e:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000280:	4b7c      	ldr	r3, [pc, #496]	@ (8000474 <eepromKontrol+0x240>)
 8000282:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	4b7f      	ldr	r3, [pc, #508]	@ (8000488 <eepromKontrol+0x254>)
 800028a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800028c:	4b79      	ldr	r3, [pc, #484]	@ (8000474 <eepromKontrol+0x240>)
 800028e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	4b7d      	ldr	r3, [pc, #500]	@ (800048c <eepromKontrol+0x258>)
 8000296:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000298:	4b76      	ldr	r3, [pc, #472]	@ (8000474 <eepromKontrol+0x240>)
 800029a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	4b7b      	ldr	r3, [pc, #492]	@ (8000490 <eepromKontrol+0x25c>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80002a4:	4b73      	ldr	r3, [pc, #460]	@ (8000474 <eepromKontrol+0x240>)
 80002a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80002aa:	b2d2      	uxtb	r2, r2
 80002ac:	4b79      	ldr	r3, [pc, #484]	@ (8000494 <eepromKontrol+0x260>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80002b0:	4b70      	ldr	r3, [pc, #448]	@ (8000474 <eepromKontrol+0x240>)
 80002b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	4b77      	ldr	r3, [pc, #476]	@ (8000498 <eepromKontrol+0x264>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000474 <eepromKontrol+0x240>)
 80002be:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4b75      	ldr	r3, [pc, #468]	@ (800049c <eepromKontrol+0x268>)
 80002c6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002c8:	4b6a      	ldr	r3, [pc, #424]	@ (8000474 <eepromKontrol+0x240>)
 80002ca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	4b73      	ldr	r3, [pc, #460]	@ (80004a0 <eepromKontrol+0x26c>)
 80002d2:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002d4:	4b67      	ldr	r3, [pc, #412]	@ (8000474 <eepromKontrol+0x240>)
 80002d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	4b71      	ldr	r3, [pc, #452]	@ (80004a4 <eepromKontrol+0x270>)
 80002de:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002e0:	4b64      	ldr	r3, [pc, #400]	@ (8000474 <eepromKontrol+0x240>)
 80002e2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	4b6f      	ldr	r3, [pc, #444]	@ (80004a8 <eepromKontrol+0x274>)
 80002ea:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002ec:	4b61      	ldr	r3, [pc, #388]	@ (8000474 <eepromKontrol+0x240>)
 80002ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	4b6d      	ldr	r3, [pc, #436]	@ (80004ac <eepromKontrol+0x278>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000474 <eepromKontrol+0x240>)
 80002fa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	4b6b      	ldr	r3, [pc, #428]	@ (80004b0 <eepromKontrol+0x27c>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8000304:	4b5b      	ldr	r3, [pc, #364]	@ (8000474 <eepromKontrol+0x240>)
 8000306:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	4b69      	ldr	r3, [pc, #420]	@ (80004b4 <eepromKontrol+0x280>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8000310:	4b58      	ldr	r3, [pc, #352]	@ (8000474 <eepromKontrol+0x240>)
 8000312:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	4b67      	ldr	r3, [pc, #412]	@ (80004b8 <eepromKontrol+0x284>)
 800031a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800031c:	4b55      	ldr	r3, [pc, #340]	@ (8000474 <eepromKontrol+0x240>)
 800031e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8000322:	b2d2      	uxtb	r2, r2
 8000324:	4b65      	ldr	r3, [pc, #404]	@ (80004bc <eepromKontrol+0x288>)
 8000326:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8000328:	4b52      	ldr	r3, [pc, #328]	@ (8000474 <eepromKontrol+0x240>)
 800032a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	4b63      	ldr	r3, [pc, #396]	@ (80004c0 <eepromKontrol+0x28c>)
 8000332:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8000334:	4b4f      	ldr	r3, [pc, #316]	@ (8000474 <eepromKontrol+0x240>)
 8000336:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	4b61      	ldr	r3, [pc, #388]	@ (80004c4 <eepromKontrol+0x290>)
 800033e:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8000340:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <eepromKontrol+0x240>)
 8000342:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	4b5f      	ldr	r3, [pc, #380]	@ (80004c8 <eepromKontrol+0x294>)
 800034a:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800034c:	4b49      	ldr	r3, [pc, #292]	@ (8000474 <eepromKontrol+0x240>)
 800034e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8000352:	b2d2      	uxtb	r2, r2
 8000354:	4b5d      	ldr	r3, [pc, #372]	@ (80004cc <eepromKontrol+0x298>)
 8000356:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000358:	4b46      	ldr	r3, [pc, #280]	@ (8000474 <eepromKontrol+0x240>)
 800035a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800035e:	b2d2      	uxtb	r2, r2
 8000360:	4b5b      	ldr	r3, [pc, #364]	@ (80004d0 <eepromKontrol+0x29c>)
 8000362:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000364:	4b43      	ldr	r3, [pc, #268]	@ (8000474 <eepromKontrol+0x240>)
 8000366:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	4b59      	ldr	r3, [pc, #356]	@ (80004d4 <eepromKontrol+0x2a0>)
 800036e:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000370:	4b40      	ldr	r3, [pc, #256]	@ (8000474 <eepromKontrol+0x240>)
 8000372:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	4b57      	ldr	r3, [pc, #348]	@ (80004d8 <eepromKontrol+0x2a4>)
 800037a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800037c:	4b3d      	ldr	r3, [pc, #244]	@ (8000474 <eepromKontrol+0x240>)
 800037e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4b55      	ldr	r3, [pc, #340]	@ (80004dc <eepromKontrol+0x2a8>)
 8000386:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000388:	4b3a      	ldr	r3, [pc, #232]	@ (8000474 <eepromKontrol+0x240>)
 800038a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	4b53      	ldr	r3, [pc, #332]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000392:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000394:	4b37      	ldr	r3, [pc, #220]	@ (8000474 <eepromKontrol+0x240>)
 8000396:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 800039a:	4952      	ldr	r1, [pc, #328]	@ (80004e4 <eepromKontrol+0x2b0>)
 800039c:	e9c1 2300 	strd	r2, r3, [r1]
	calismaSayisiDemo = eepromData[28];
 80003a0:	4b34      	ldr	r3, [pc, #208]	@ (8000474 <eepromKontrol+0x240>)
 80003a2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80003a6:	4950      	ldr	r1, [pc, #320]	@ (80004e8 <eepromKontrol+0x2b4>)
 80003a8:	e9c1 2300 	strd	r2, r3, [r1]
	dilSecim = eepromData[33];
 80003ac:	4b31      	ldr	r3, [pc, #196]	@ (8000474 <eepromKontrol+0x240>)
 80003ae:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	4b4d      	ldr	r3, [pc, #308]	@ (80004ec <eepromKontrol+0x2b8>)
 80003b6:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 80003b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000474 <eepromKontrol+0x240>)
 80003ba:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	@ 0x180
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	4b4b      	ldr	r3, [pc, #300]	@ (80004f0 <eepromKontrol+0x2bc>)
 80003c2:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80003c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000474 <eepromKontrol+0x240>)
 80003c6:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	@ 0x110
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	4b49      	ldr	r3, [pc, #292]	@ (80004f4 <eepromKontrol+0x2c0>)
 80003ce:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 80003d0:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <eepromKontrol+0x240>)
 80003d2:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 80003d6:	b2d2      	uxtb	r2, r2
 80003d8:	4b47      	ldr	r3, [pc, #284]	@ (80004f8 <eepromKontrol+0x2c4>)
 80003da:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 80003dc:	4b25      	ldr	r3, [pc, #148]	@ (8000474 <eepromKontrol+0x240>)
 80003de:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	4b45      	ldr	r3, [pc, #276]	@ (80004fc <eepromKontrol+0x2c8>)
 80003e6:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 80003e8:	4b22      	ldr	r3, [pc, #136]	@ (8000474 <eepromKontrol+0x240>)
 80003ea:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	@ 0x130
 80003ee:	b2d2      	uxtb	r2, r2
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <eepromKontrol+0x2cc>)
 80003f2:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 80003f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000474 <eepromKontrol+0x240>)
 80003f6:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	@ 0x138
 80003fa:	b2d2      	uxtb	r2, r2
 80003fc:	4b41      	ldr	r3, [pc, #260]	@ (8000504 <eepromKontrol+0x2d0>)
 80003fe:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000400:	4b1c      	ldr	r3, [pc, #112]	@ (8000474 <eepromKontrol+0x240>)
 8000402:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	4b3f      	ldr	r3, [pc, #252]	@ (8000508 <eepromKontrol+0x2d4>)
 800040a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800040c:	4b19      	ldr	r3, [pc, #100]	@ (8000474 <eepromKontrol+0x240>)
 800040e:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	@ 0x148
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	4b3d      	ldr	r3, [pc, #244]	@ (800050c <eepromKontrol+0x2d8>)
 8000416:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000418:	4b16      	ldr	r3, [pc, #88]	@ (8000474 <eepromKontrol+0x240>)
 800041a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	@ 0x150
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	4b3b      	ldr	r3, [pc, #236]	@ (8000510 <eepromKontrol+0x2dc>)
 8000422:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <eepromKontrol+0x240>)
 8000426:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	@ 0x158
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <eepromKontrol+0x2e0>)
 800042e:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <eepromKontrol+0x240>)
 8000432:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	4b37      	ldr	r3, [pc, #220]	@ (8000518 <eepromKontrol+0x2e4>)
 800043a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 800043c:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <eepromKontrol+0x240>)
 800043e:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	@ 0x168
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	4b35      	ldr	r3, [pc, #212]	@ (800051c <eepromKontrol+0x2e8>)
 8000446:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <eepromKontrol+0x240>)
 800044a:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	@ 0x170
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <eepromKontrol+0x2ec>)
 8000452:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <eepromKontrol+0x240>)
 8000456:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	@ 0x178
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	4b31      	ldr	r3, [pc, #196]	@ (8000524 <eepromKontrol+0x2f0>)
 800045e:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 8000460:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <eepromKontrol+0x240>)
 8000462:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	@ 0x340
 8000466:	b2d2      	uxtb	r2, r2
 8000468:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <eepromKontrol+0x2f4>)
 800046a:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <eepromKontrol+0x24c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	e05b      	b.n	800052c <eepromKontrol+0x2f8>
 8000474:	20000ff0 	.word	0x20000ff0
 8000478:	20001c50 	.word	0x20001c50
 800047c:	2000139d 	.word	0x2000139d
 8000480:	200013d1 	.word	0x200013d1
 8000484:	200013d4 	.word	0x200013d4
 8000488:	200013d5 	.word	0x200013d5
 800048c:	200013d6 	.word	0x200013d6
 8000490:	200013d7 	.word	0x200013d7
 8000494:	200013d8 	.word	0x200013d8
 8000498:	200013d9 	.word	0x200013d9
 800049c:	200013e9 	.word	0x200013e9
 80004a0:	200013da 	.word	0x200013da
 80004a4:	200013ea 	.word	0x200013ea
 80004a8:	200013db 	.word	0x200013db
 80004ac:	200013eb 	.word	0x200013eb
 80004b0:	200013de 	.word	0x200013de
 80004b4:	200013df 	.word	0x200013df
 80004b8:	200013e0 	.word	0x200013e0
 80004bc:	200013e1 	.word	0x200013e1
 80004c0:	200013e2 	.word	0x200013e2
 80004c4:	200013e3 	.word	0x200013e3
 80004c8:	200013e4 	.word	0x200013e4
 80004cc:	200013e5 	.word	0x200013e5
 80004d0:	200013e6 	.word	0x200013e6
 80004d4:	200013e7 	.word	0x200013e7
 80004d8:	200013e8 	.word	0x200013e8
 80004dc:	200013ec 	.word	0x200013ec
 80004e0:	200013ee 	.word	0x200013ee
 80004e4:	200013c0 	.word	0x200013c0
 80004e8:	200013c8 	.word	0x200013c8
 80004ec:	200013f1 	.word	0x200013f1
 80004f0:	200013ef 	.word	0x200013ef
 80004f4:	200013dd 	.word	0x200013dd
 80004f8:	200013f0 	.word	0x200013f0
 80004fc:	200013dc 	.word	0x200013dc
 8000500:	200013f2 	.word	0x200013f2
 8000504:	200013f3 	.word	0x200013f3
 8000508:	200013f4 	.word	0x200013f4
 800050c:	200013f5 	.word	0x200013f5
 8000510:	200013f6 	.word	0x200013f6
 8000514:	200013f7 	.word	0x200013f7
 8000518:	200013f8 	.word	0x200013f8
 800051c:	200013f9 	.word	0x200013f9
 8000520:	200013fa 	.word	0x200013fa
 8000524:	200013fb 	.word	0x200013fb
 8000528:	2000139c 	.word	0x2000139c
 800052c:	d902      	bls.n	8000534 <eepromKontrol+0x300>
	    calismaSekli=0;
 800052e:	4b74      	ldr	r3, [pc, #464]	@ (8000700 <eepromKontrol+0x4cc>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000534:	4b73      	ldr	r3, [pc, #460]	@ (8000704 <eepromKontrol+0x4d0>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d902      	bls.n	8000542 <eepromKontrol+0x30e>
	    emniyetCercevesi=1;
 800053c:	4b71      	ldr	r3, [pc, #452]	@ (8000704 <eepromKontrol+0x4d0>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000542:	4b71      	ldr	r3, [pc, #452]	@ (8000708 <eepromKontrol+0x4d4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d902      	bls.n	8000550 <eepromKontrol+0x31c>
	    yavaslamaLimit=0;
 800054a:	4b6f      	ldr	r3, [pc, #444]	@ (8000708 <eepromKontrol+0x4d4>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000550:	4b6e      	ldr	r3, [pc, #440]	@ (800070c <eepromKontrol+0x4d8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d902      	bls.n	800055e <eepromKontrol+0x32a>
	    altLimit=1;
 8000558:	4b6c      	ldr	r3, [pc, #432]	@ (800070c <eepromKontrol+0x4d8>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800055e:	4b6c      	ldr	r3, [pc, #432]	@ (8000710 <eepromKontrol+0x4dc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d902      	bls.n	800056c <eepromKontrol+0x338>
	    basincSalteri=1;
 8000566:	4b6a      	ldr	r3, [pc, #424]	@ (8000710 <eepromKontrol+0x4dc>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800056c:	4b69      	ldr	r3, [pc, #420]	@ (8000714 <eepromKontrol+0x4e0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d902      	bls.n	800057a <eepromKontrol+0x346>
	    kapiSecimleri=3;
 8000574:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <eepromKontrol+0x4e0>)
 8000576:	2203      	movs	r2, #3
 8000578:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800057a:	4b67      	ldr	r3, [pc, #412]	@ (8000718 <eepromKontrol+0x4e4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d902      	bls.n	8000588 <eepromKontrol+0x354>
	    kapiAcTipi=0;
 8000582:	4b65      	ldr	r3, [pc, #404]	@ (8000718 <eepromKontrol+0x4e4>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000588:	4b64      	ldr	r3, [pc, #400]	@ (800071c <eepromKontrol+0x4e8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d902      	bls.n	8000596 <eepromKontrol+0x362>
	    kapi1Tip=1;
 8000590:	4b62      	ldr	r3, [pc, #392]	@ (800071c <eepromKontrol+0x4e8>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000596:	4b62      	ldr	r3, [pc, #392]	@ (8000720 <eepromKontrol+0x4ec>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b05      	cmp	r3, #5
 800059c:	d902      	bls.n	80005a4 <eepromKontrol+0x370>
	    kapi1AcSure=5;
 800059e:	4b60      	ldr	r3, [pc, #384]	@ (8000720 <eepromKontrol+0x4ec>)
 80005a0:	2205      	movs	r2, #5
 80005a2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80005a4:	4b5f      	ldr	r3, [pc, #380]	@ (8000724 <eepromKontrol+0x4f0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d902      	bls.n	80005b2 <eepromKontrol+0x37e>
	    kapi2Tip=1;
 80005ac:	4b5d      	ldr	r3, [pc, #372]	@ (8000724 <eepromKontrol+0x4f0>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 80005b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000728 <eepromKontrol+0x4f4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d902      	bls.n	80005c0 <eepromKontrol+0x38c>
	    kapi2AcSure=5;
 80005ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000728 <eepromKontrol+0x4f4>)
 80005bc:	2205      	movs	r2, #5
 80005be:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005c0:	4b5a      	ldr	r3, [pc, #360]	@ (800072c <eepromKontrol+0x4f8>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d902      	bls.n	80005ce <eepromKontrol+0x39a>
	    kapitablaTip=1;
 80005c8:	4b58      	ldr	r3, [pc, #352]	@ (800072c <eepromKontrol+0x4f8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005ce:	4b58      	ldr	r3, [pc, #352]	@ (8000730 <eepromKontrol+0x4fc>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d902      	bls.n	80005dc <eepromKontrol+0x3a8>
	    kapiTablaAcKonum=2;
 80005d6:	4b56      	ldr	r3, [pc, #344]	@ (8000730 <eepromKontrol+0x4fc>)
 80005d8:	2202      	movs	r2, #2
 80005da:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005dc:	4b55      	ldr	r3, [pc, #340]	@ (8000734 <eepromKontrol+0x500>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d902      	bls.n	80005ea <eepromKontrol+0x3b6>
	    kapiTablaAcSure=5;
 80005e4:	4b53      	ldr	r3, [pc, #332]	@ (8000734 <eepromKontrol+0x500>)
 80005e6:	2205      	movs	r2, #5
 80005e8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005ea:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <eepromKontrol+0x504>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d902      	bls.n	80005f8 <eepromKontrol+0x3c4>
	    yukariYavasLimit=0;
 80005f2:	4b51      	ldr	r3, [pc, #324]	@ (8000738 <eepromKontrol+0x504>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005f8:	4b50      	ldr	r3, [pc, #320]	@ (800073c <eepromKontrol+0x508>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d902      	bls.n	8000606 <eepromKontrol+0x3d2>
	    devirmeYuruyusSecim=0;
 8000600:	4b4e      	ldr	r3, [pc, #312]	@ (800073c <eepromKontrol+0x508>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000606:	4b4e      	ldr	r3, [pc, #312]	@ (8000740 <eepromKontrol+0x50c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d902      	bls.n	8000614 <eepromKontrol+0x3e0>
	    devirmeYukariIleriLimit=1;
 800060e:	4b4c      	ldr	r3, [pc, #304]	@ (8000740 <eepromKontrol+0x50c>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000614:	4b4b      	ldr	r3, [pc, #300]	@ (8000744 <eepromKontrol+0x510>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d902      	bls.n	8000622 <eepromKontrol+0x3ee>
	    devirmeAsagiGeriLimit=1;
 800061c:	4b49      	ldr	r3, [pc, #292]	@ (8000744 <eepromKontrol+0x510>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8000622:	4b49      	ldr	r3, [pc, #292]	@ (8000748 <eepromKontrol+0x514>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d902      	bls.n	8000630 <eepromKontrol+0x3fc>
	    devirmeSilindirTipi=0;
 800062a:	4b47      	ldr	r3, [pc, #284]	@ (8000748 <eepromKontrol+0x514>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8000630:	4b46      	ldr	r3, [pc, #280]	@ (800074c <eepromKontrol+0x518>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d902      	bls.n	800063e <eepromKontrol+0x40a>
	    platformSilindirTipi=0;
 8000638:	4b44      	ldr	r3, [pc, #272]	@ (800074c <eepromKontrol+0x518>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 800063e:	4b44      	ldr	r3, [pc, #272]	@ (8000750 <eepromKontrol+0x51c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d902      	bls.n	800064c <eepromKontrol+0x418>
	    yukariValfTmr=0;
 8000646:	4b42      	ldr	r3, [pc, #264]	@ (8000750 <eepromKontrol+0x51c>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 800064c:	4b41      	ldr	r3, [pc, #260]	@ (8000754 <eepromKontrol+0x520>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b05      	cmp	r3, #5
 8000652:	d902      	bls.n	800065a <eepromKontrol+0x426>
	    asagiValfTmr=0;
 8000654:	4b3f      	ldr	r3, [pc, #252]	@ (8000754 <eepromKontrol+0x520>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800065a:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <eepromKontrol+0x524>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b05      	cmp	r3, #5
 8000660:	d902      	bls.n	8000668 <eepromKontrol+0x434>
	    devirmeYukariIleriTmr=0;
 8000662:	4b3d      	ldr	r3, [pc, #244]	@ (8000758 <eepromKontrol+0x524>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000668:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <eepromKontrol+0x528>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b05      	cmp	r3, #5
 800066e:	d902      	bls.n	8000676 <eepromKontrol+0x442>
	    devirmeAsagiGeriTmr=0;
 8000670:	4b3a      	ldr	r3, [pc, #232]	@ (800075c <eepromKontrol+0x528>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000676:	4b3a      	ldr	r3, [pc, #232]	@ (8000760 <eepromKontrol+0x52c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2bb4      	cmp	r3, #180	@ 0xb4
 800067c:	d902      	bls.n	8000684 <eepromKontrol+0x450>
	    makineCalismaTmr=60;
 800067e:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <eepromKontrol+0x52c>)
 8000680:	223c      	movs	r2, #60	@ 0x3c
 8000682:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8000684:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <eepromKontrol+0x530>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d902      	bls.n	8000692 <eepromKontrol+0x45e>
	    buzzer=0;
 800068c:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <eepromKontrol+0x530>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <eepromKontrol+0x534>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d902      	bls.n	80006a0 <eepromKontrol+0x46c>
	    demoMode=0;
 800069a:	4b33      	ldr	r3, [pc, #204]	@ (8000768 <eepromKontrol+0x534>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80006a0:	4b32      	ldr	r3, [pc, #200]	@ (800076c <eepromKontrol+0x538>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d902      	bls.n	80006ae <eepromKontrol+0x47a>
	    calismaSayModu=0;
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <eepromKontrol+0x538>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 80006ae:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <eepromKontrol+0x53c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d902      	bls.n	80006bc <eepromKontrol+0x488>
	    dilSecim=0;
 80006b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000770 <eepromKontrol+0x53c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <eepromKontrol+0x540>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d902      	bls.n	80006ca <eepromKontrol+0x496>
		iotMode=0;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <eepromKontrol+0x540>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f854 	bl	8000778 <convertArrays>
	HAL_Delay(250);
 80006d0:	20fa      	movs	r0, #250	@ 0xfa
 80006d2:	f00a fc6f 	bl	800afb4 <HAL_Delay>

	convertArrays(2);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f84e 	bl	8000778 <convertArrays>
	HAL_Delay(250);
 80006dc:	20fa      	movs	r0, #250	@ 0xfa
 80006de:	f00a fc69 	bl	800afb4 <HAL_Delay>

	convertArrays(3);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f848 	bl	8000778 <convertArrays>
	HAL_Delay(250);
 80006e8:	20fa      	movs	r0, #250	@ 0xfa
 80006ea:	f00a fc63 	bl	800afb4 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <eepromKontrol+0x53c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f007 f98a 	bl	8007a0c <loadMenuTexts>
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200013d1 	.word	0x200013d1
 8000704:	200013d4 	.word	0x200013d4
 8000708:	200013d5 	.word	0x200013d5
 800070c:	200013d6 	.word	0x200013d6
 8000710:	200013d7 	.word	0x200013d7
 8000714:	200013d8 	.word	0x200013d8
 8000718:	200013dc 	.word	0x200013dc
 800071c:	200013d9 	.word	0x200013d9
 8000720:	200013e9 	.word	0x200013e9
 8000724:	200013da 	.word	0x200013da
 8000728:	200013ea 	.word	0x200013ea
 800072c:	200013db 	.word	0x200013db
 8000730:	200013dd 	.word	0x200013dd
 8000734:	200013eb 	.word	0x200013eb
 8000738:	200013de 	.word	0x200013de
 800073c:	200013df 	.word	0x200013df
 8000740:	200013e0 	.word	0x200013e0
 8000744:	200013e1 	.word	0x200013e1
 8000748:	200013e2 	.word	0x200013e2
 800074c:	200013e3 	.word	0x200013e3
 8000750:	200013e4 	.word	0x200013e4
 8000754:	200013e5 	.word	0x200013e5
 8000758:	200013e6 	.word	0x200013e6
 800075c:	200013e7 	.word	0x200013e7
 8000760:	200013e8 	.word	0x200013e8
 8000764:	200013ec 	.word	0x200013ec
 8000768:	200013ee 	.word	0x200013ee
 800076c:	200013f0 	.word	0x200013f0
 8000770:	200013f1 	.word	0x200013f1
 8000774:	200013ef 	.word	0x200013ef

08000778 <convertArrays>:
		HAL_Delay(500);
		lcd_clear();
	}
}

void convertArrays(int state) {
 8000778:	b480      	push	{r7}
 800077a:	b08b      	sub	sp, #44	@ 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d120      	bne.n	80007c8 <convertArrays+0x50>
		int eepromVal = idStartPos;
 8000786:	4b3a      	ldr	r3, [pc, #232]	@ (8000870 <convertArrays+0xf8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	e016      	b.n	80007c0 <convertArrays+0x48>
			characterPos = eepromData[eepromVal];
 8000792:	4a38      	ldr	r2, [pc, #224]	@ (8000874 <convertArrays+0xfc>)
 8000794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	4413      	add	r3, r2
 800079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800079e:	4613      	mov	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80007a2:	4a35      	ldr	r2, [pc, #212]	@ (8000878 <convertArrays+0x100>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	7819      	ldrb	r1, [r3, #0]
 80007aa:	4a34      	ldr	r2, [pc, #208]	@ (800087c <convertArrays+0x104>)
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	4413      	add	r3, r2
 80007b0:	460a      	mov	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	3301      	adds	r3, #1
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	3301      	adds	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dde5      	ble.n	8000792 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80007c6:	e04d      	b.n	8000864 <convertArrays+0xec>
	} else if(state == 2) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d125      	bne.n	800081a <convertArrays+0xa2>
		int eepromVal = ssidStartPos;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <convertArrays+0x108>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	e01b      	b.n	8000812 <convertArrays+0x9a>
			if(eepromData[eepromVal] != 0) {
 80007da:	4a26      	ldr	r2, [pc, #152]	@ (8000874 <convertArrays+0xfc>)
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4413      	add	r3, r2
 80007e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	d010      	beq.n	800080c <convertArrays+0x94>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <convertArrays+0xfc>)
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f6:	4923      	ldr	r1, [pc, #140]	@ (8000884 <convertArrays+0x10c>)
 80007f8:	188b      	adds	r3, r1, r2
 80007fa:	7819      	ldrb	r1, [r3, #0]
 80007fc:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <convertArrays+0x110>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3301      	adds	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3301      	adds	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde0      	ble.n	80007da <convertArrays+0x62>
}
 8000818:	e024      	b.n	8000864 <convertArrays+0xec>
		int eepromVal = passStartPos;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <convertArrays+0x114>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	e01b      	b.n	800085e <convertArrays+0xe6>
			if(eepromData[eepromVal] != 0) {
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <convertArrays+0xfc>)
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000832:	4313      	orrs	r3, r2
 8000834:	d010      	beq.n	8000858 <convertArrays+0xe0>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <convertArrays+0xfc>)
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000842:	4910      	ldr	r1, [pc, #64]	@ (8000884 <convertArrays+0x10c>)
 8000844:	188b      	adds	r3, r1, r2
 8000846:	7819      	ldrb	r1, [r3, #0]
 8000848:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <convertArrays+0x118>)
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	3301      	adds	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b13      	cmp	r3, #19
 8000862:	dde0      	ble.n	8000826 <convertArrays+0xae>
}
 8000864:	bf00      	nop
 8000866:	372c      	adds	r7, #44	@ 0x2c
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	20000ff0 	.word	0x20000ff0
 8000878:	2000000c 	.word	0x2000000c
 800087c:	20001368 	.word	0x20001368
 8000880:	20000004 	.word	0x20000004
 8000884:	20000018 	.word	0x20000018
 8000888:	20001374 	.word	0x20001374
 800088c:	20000008 	.word	0x20000008
 8000890:	20001388 	.word	0x20001388

08000894 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b09e      	sub	sp, #120	@ 0x78
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80008a0:	4947      	ldr	r1, [pc, #284]	@ (80009c0 <ESP8266_Init+0x12c>)
 80008a2:	4848      	ldr	r0, [pc, #288]	@ (80009c4 <ESP8266_Init+0x130>)
 80008a4:	f00e fa3a 	bl	800ed1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a8:	4846      	ldr	r0, [pc, #280]	@ (80009c4 <ESP8266_Init+0x130>)
 80008aa:	f7ff fcbb 	bl	8000224 <strlen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4943      	ldr	r1, [pc, #268]	@ (80009c4 <ESP8266_Init+0x130>)
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f00d fc48 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c0:	f00a fb78 	bl	800afb4 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80008c4:	4940      	ldr	r1, [pc, #256]	@ (80009c8 <ESP8266_Init+0x134>)
 80008c6:	483f      	ldr	r0, [pc, #252]	@ (80009c4 <ESP8266_Init+0x130>)
 80008c8:	f00e fa28 	bl	800ed1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008cc:	483d      	ldr	r0, [pc, #244]	@ (80009c4 <ESP8266_Init+0x130>)
 80008ce:	f7ff fca9 	bl	8000224 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	493a      	ldr	r1, [pc, #232]	@ (80009c4 <ESP8266_Init+0x130>)
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f00d fc36 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e4:	f00a fb66 	bl	800afb4 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80008e8:	4938      	ldr	r1, [pc, #224]	@ (80009cc <ESP8266_Init+0x138>)
 80008ea:	4836      	ldr	r0, [pc, #216]	@ (80009c4 <ESP8266_Init+0x130>)
 80008ec:	f00e fa16 	bl	800ed1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008f0:	4834      	ldr	r0, [pc, #208]	@ (80009c4 <ESP8266_Init+0x130>)
 80008f2:	f7ff fc97 	bl	8000224 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4931      	ldr	r1, [pc, #196]	@ (80009c4 <ESP8266_Init+0x130>)
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f00d fc24 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000904:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000908:	f00a fb54 	bl	800afb4 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 800090c:	4930      	ldr	r1, [pc, #192]	@ (80009d0 <ESP8266_Init+0x13c>)
 800090e:	482d      	ldr	r0, [pc, #180]	@ (80009c4 <ESP8266_Init+0x130>)
 8000910:	f00e fa04 	bl	800ed1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000914:	482b      	ldr	r0, [pc, #172]	@ (80009c4 <ESP8266_Init+0x130>)
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29b      	uxth	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	4928      	ldr	r1, [pc, #160]	@ (80009c4 <ESP8266_Init+0x130>)
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f00d fc12 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000928:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800092c:	f00a fb42 	bl	800afb4 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <ESP8266_Init+0x140>)
 8000936:	ca07      	ldmia	r2, {r0, r1, r2}
 8000938:	c303      	stmia	r3!, {r0, r1}
 800093a:	801a      	strh	r2, [r3, #0]
 800093c:	3302      	adds	r3, #2
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	4618      	mov	r0, r3
 800094a:	f00e fa49 	bl	800ede0 <strcat>
	strcat(str, "\",\"");
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc66 	bl	8000224 <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4413      	add	r3, r2
 8000962:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <ESP8266_Init+0x144>)
 8000964:	6810      	ldr	r0, [r2, #0]
 8000966:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	f00e fa36 	bl	800ede0 <strcat>
	strcat(str, "\"\r\n");
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc53 	bl	8000224 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4413      	add	r3, r2
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <ESP8266_Init+0x148>)
 800098a:	6810      	ldr	r0, [r2, #0]
 800098c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	461a      	mov	r2, r3
 8000994:	4912      	ldr	r1, [pc, #72]	@ (80009e0 <ESP8266_Init+0x14c>)
 8000996:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <ESP8266_Init+0x130>)
 8000998:	f00e f9c0 	bl	800ed1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <ESP8266_Init+0x130>)
 800099e:	f7ff fc41 	bl	8000224 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	4906      	ldr	r1, [pc, #24]	@ (80009c4 <ESP8266_Init+0x130>)
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f00d fbce 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009b4:	f00a fafe 	bl	800afb4 <HAL_Delay>
}
 80009b8:	bf00      	nop
 80009ba:	3778      	adds	r7, #120	@ 0x78
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	0800f610 	.word	0x0800f610
 80009c4:	20001438 	.word	0x20001438
 80009c8:	0800f620 	.word	0x0800f620
 80009cc:	0800f62c 	.word	0x0800f62c
 80009d0:	0800f634 	.word	0x0800f634
 80009d4:	0800f644 	.word	0x0800f644
 80009d8:	0800f650 	.word	0x0800f650
 80009dc:	0800f654 	.word	0x0800f654
 80009e0:	0800f658 	.word	0x0800f658

080009e4 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80009ea:	af04      	add	r7, sp, #16
 80009ec:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 80009f0:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 80009f4:	6020      	str	r0, [r4, #0]
 80009f6:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80009fa:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 80009fe:	6001      	str	r1, [r0, #0]
 8000a00:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000a04:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000a08:	600a      	str	r2, [r1, #0]
 8000a0a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000a0e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000a12:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000a14:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a18:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000a1c:	f107 0014 	add.w	r0, r7, #20
 8000a20:	220c      	movs	r2, #12
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	f00e f9eb 	bl	800edfe <strncpy>
	subMachineID[12] = '\0';
 8000a28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000a30:	2200      	movs	r2, #0
 8000a32:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000a34:	4a35      	ldr	r2, [pc, #212]	@ (8000b0c <sendMachineData+0x128>)
 8000a36:	4936      	ldr	r1, [pc, #216]	@ (8000b10 <sendMachineData+0x12c>)
 8000a38:	4836      	ldr	r0, [pc, #216]	@ (8000b14 <sendMachineData+0x130>)
 8000a3a:	f00e f96f 	bl	800ed1c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a3e:	4835      	ldr	r0, [pc, #212]	@ (8000b14 <sendMachineData+0x130>)
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a4c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a50:	4930      	ldr	r1, [pc, #192]	@ (8000b14 <sendMachineData+0x130>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	f00d fb7a 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a58:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a5c:	f00a faaa 	bl	800afb4 <HAL_Delay>

	sprintf(local_txA,
 8000a60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a64:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000a68:	f107 0114 	add.w	r1, r7, #20
 8000a6c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000a70:	4a29      	ldr	r2, [pc, #164]	@ (8000b18 <sendMachineData+0x134>)
 8000a72:	9202      	str	r2, [sp, #8]
 8000a74:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8000a78:	9201      	str	r2, [sp, #4]
 8000a7a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000a7e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	460a      	mov	r2, r1
 8000a8a:	4924      	ldr	r1, [pc, #144]	@ (8000b1c <sendMachineData+0x138>)
 8000a8c:	f00e f946 	bl	800ed1c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbc5 	bl	8000224 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000aa8:	491d      	ldr	r1, [pc, #116]	@ (8000b20 <sendMachineData+0x13c>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f00e f936 	bl	800ed1c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fbb5 	bl	8000224 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000ac2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000ac6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	f00d fb3e 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000ad0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000ad4:	f00a fa6e 	bl	800afb4 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000ad8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fba1 	bl	8000224 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000aea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000aee:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	f00d fb2a 	bl	800e14c <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000af8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000afc:	f00a fa5a 	bl	800afb4 <HAL_Delay>
}
 8000b00:	bf00      	nop
 8000b02:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	0800f65c 	.word	0x0800f65c
 8000b10:	0800f66c 	.word	0x0800f66c
 8000b14:	20001438 	.word	0x20001438
 8000b18:	0800f700 	.word	0x0800f700
 8000b1c:	0800f68c 	.word	0x0800f68c
 8000b20:	0800f714 	.word	0x0800f714

08000b24 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000be0 <hata2EEPROM+0xbc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1e5a      	subs	r2, r3, #1
 8000b34:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <hata2EEPROM+0xc0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <hata2EEPROM+0xc4>)
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	4413      	add	r3, r2
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	d002      	beq.n	8000b4e <hata2EEPROM+0x2a>
		eepromDataFillWithEmpty();
 8000b48:	f000 f8dc 	bl	8000d04 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000b4c:	e000      	b.n	8000b50 <hata2EEPROM+0x2c>
	} else {
		veriEkleme:
 8000b4e:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e01b      	b.n	8000b8e <hata2EEPROM+0x6a>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000b56:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <hata2EEPROM+0xc0>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a22      	ldr	r2, [pc, #136]	@ (8000be8 <hata2EEPROM+0xc4>)
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	d10d      	bne.n	8000b88 <hata2EEPROM+0x64>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <hata2EEPROM+0xc0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	2100      	movs	r1, #0
 8000b78:	4614      	mov	r4, r2
 8000b7a:	460d      	mov	r5, r1
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000be8 <hata2EEPROM+0xc4>)
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	4413      	add	r3, r2
 8000b82:	e9c3 4500 	strd	r4, r5, [r3]
					break;
 8000b86:	e007      	b.n	8000b98 <hata2EEPROM+0x74>
			for(int i=0; i<indeksSayisi; i++) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <hata2EEPROM+0xbc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbde      	blt.n	8000b56 <hata2EEPROM+0x32>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <hata2EEPROM+0xc0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <hata2EEPROM+0xbc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <hata2EEPROM+0xc0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <hata2EEPROM+0xc4>)
 8000bac:	4413      	add	r3, r2
 8000bae:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <hata2EEPROM+0xbc>)
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000bb8:	9402      	str	r4, [sp, #8]
 8000bba:	9201      	str	r2, [sp, #4]
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	21a0      	movs	r1, #160	@ 0xa0
 8000bc4:	4809      	ldr	r0, [pc, #36]	@ (8000bec <hata2EEPROM+0xc8>)
 8000bc6:	f00b fa7f 	bl	800c0c8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000bca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bce:	f00a f9f1 	bl	800afb4 <HAL_Delay>
	eepromKontrol();
 8000bd2:	f7ff fb2f 	bl	8000234 <eepromKontrol>
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000094 	.word	0x20000094
 8000be4:	20000098 	.word	0x20000098
 8000be8:	20000ff0 	.word	0x20000ff0
 8000bec:	20001c50 	.word	0x20001c50

08000bf0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10f      	bne.n	8000c20 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000c00:	4a38      	ldr	r2, [pc, #224]	@ (8000ce4 <hataKoduLcdGoster+0xf4>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	2001      	movs	r0, #1
 8000c06:	f009 fc7b 	bl	800a500 <lcd_print>
		lcd_print(2, 1, "1");
 8000c0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ce8 <hataKoduLcdGoster+0xf8>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f009 fc76 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c14:	4a35      	ldr	r2, [pc, #212]	@ (8000cec <hataKoduLcdGoster+0xfc>)
 8000c16:	2107      	movs	r1, #7
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f009 fc71 	bl	800a500 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000c1e:	e05d      	b.n	8000cdc <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d10f      	bne.n	8000c46 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000c26:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce4 <hataKoduLcdGoster+0xf4>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f009 fc68 	bl	800a500 <lcd_print>
		lcd_print(2, 2, "2");
 8000c30:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf0 <hataKoduLcdGoster+0x100>)
 8000c32:	2102      	movs	r1, #2
 8000c34:	2002      	movs	r0, #2
 8000c36:	f009 fc63 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000cec <hataKoduLcdGoster+0xfc>)
 8000c3c:	2107      	movs	r1, #7
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f009 fc5e 	bl	800a500 <lcd_print>
}
 8000c44:	e04a      	b.n	8000cdc <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d10f      	bne.n	8000c6c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000c4c:	4a25      	ldr	r2, [pc, #148]	@ (8000ce4 <hataKoduLcdGoster+0xf4>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2001      	movs	r0, #1
 8000c52:	f009 fc55 	bl	800a500 <lcd_print>
		lcd_print(2, 3, "3");
 8000c56:	4a27      	ldr	r2, [pc, #156]	@ (8000cf4 <hataKoduLcdGoster+0x104>)
 8000c58:	2103      	movs	r1, #3
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f009 fc50 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c60:	4a22      	ldr	r2, [pc, #136]	@ (8000cec <hataKoduLcdGoster+0xfc>)
 8000c62:	2107      	movs	r1, #7
 8000c64:	2002      	movs	r0, #2
 8000c66:	f009 fc4b 	bl	800a500 <lcd_print>
}
 8000c6a:	e037      	b.n	8000cdc <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d10f      	bne.n	8000c92 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000c72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <hataKoduLcdGoster+0xf4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f009 fc42 	bl	800a500 <lcd_print>
		lcd_print(2, 4, "4");
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf8 <hataKoduLcdGoster+0x108>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	2002      	movs	r0, #2
 8000c82:	f009 fc3d 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c86:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <hataKoduLcdGoster+0xfc>)
 8000c88:	2107      	movs	r1, #7
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f009 fc38 	bl	800a500 <lcd_print>
}
 8000c90:	e024      	b.n	8000cdc <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d10f      	bne.n	8000cb8 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <hataKoduLcdGoster+0xf4>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f009 fc2f 	bl	800a500 <lcd_print>
		lcd_print(2, 5, "5");
 8000ca2:	4a16      	ldr	r2, [pc, #88]	@ (8000cfc <hataKoduLcdGoster+0x10c>)
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f009 fc2a 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cac:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <hataKoduLcdGoster+0xfc>)
 8000cae:	2107      	movs	r1, #7
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f009 fc25 	bl	800a500 <lcd_print>
}
 8000cb6:	e011      	b.n	8000cdc <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d10e      	bne.n	8000cdc <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000cbe:	4a09      	ldr	r2, [pc, #36]	@ (8000ce4 <hataKoduLcdGoster+0xf4>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f009 fc1c 	bl	800a500 <lcd_print>
		lcd_print(2, 6, "6");
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <hataKoduLcdGoster+0x110>)
 8000cca:	2106      	movs	r1, #6
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f009 fc17 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cd2:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <hataKoduLcdGoster+0xfc>)
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f009 fc12 	bl	800a500 <lcd_print>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20001bc4 	.word	0x20001bc4
 8000ce8:	0800f788 	.word	0x0800f788
 8000cec:	0800f78c 	.word	0x0800f78c
 8000cf0:	0800f798 	.word	0x0800f798
 8000cf4:	0800f79c 	.word	0x0800f79c
 8000cf8:	0800f7a0 	.word	0x0800f7a0
 8000cfc:	0800f7a4 	.word	0x0800f7a4
 8000d00:	0800f7a8 	.word	0x0800f7a8

08000d04 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	e00f      	b.n	8000d30 <eepromDataFillWithEmpty+0x2c>
		eepromData[eepromVal[i]] = 0;
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <eepromDataFillWithEmpty+0x44>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <eepromDataFillWithEmpty+0x48>)
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	18d1      	adds	r1, r2, r3
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i=0; i<indeksSayisi; i++) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <eepromDataFillWithEmpty+0x4c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbea      	blt.n	8000d10 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000006c 	.word	0x2000006c
 8000d4c:	20000ff0 	.word	0x20000ff0
 8000d50:	20000094 	.word	0x20000094

08000d54 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d66:	4b50      	ldr	r3, [pc, #320]	@ (8000ea8 <i2cTest+0x154>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea8 <i2cTest+0x154>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0201 	bic.w	r2, r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d76:	484c      	ldr	r0, [pc, #304]	@ (8000ea8 <i2cTest+0x154>)
 8000d78:	f00b f878 	bl	800be6c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	23c0      	movs	r3, #192	@ 0xc0
 8000d7e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d80:	2311      	movs	r3, #17
 8000d82:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4846      	ldr	r0, [pc, #280]	@ (8000eac <i2cTest+0x158>)
 8000d92:	f00a fc7f 	bl	800b694 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2140      	movs	r1, #64	@ 0x40
 8000d9a:	4844      	ldr	r0, [pc, #272]	@ (8000eac <i2cTest+0x158>)
 8000d9c:	f00a fef1 	bl	800bb82 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2180      	movs	r1, #128	@ 0x80
 8000da4:	4841      	ldr	r0, [pc, #260]	@ (8000eac <i2cTest+0x158>)
 8000da6:	f00a feec 	bl	800bb82 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000daa:	200a      	movs	r0, #10
 8000dac:	f00a f902 	bl	800afb4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000db0:	bf00      	nop
 8000db2:	2140      	movs	r1, #64	@ 0x40
 8000db4:	483d      	ldr	r0, [pc, #244]	@ (8000eac <i2cTest+0x158>)
 8000db6:	f00a fecd 	bl	800bb54 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d006      	beq.n	8000dce <i2cTest+0x7a>
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	483a      	ldr	r0, [pc, #232]	@ (8000eac <i2cTest+0x158>)
 8000dc4:	f00a fec6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d1f1      	bne.n	8000db2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2180      	movs	r1, #128	@ 0x80
 8000dd2:	4836      	ldr	r0, [pc, #216]	@ (8000eac <i2cTest+0x158>)
 8000dd4:	f00a fed5 	bl	800bb82 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f00a f8eb 	bl	800afb4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dde:	bf00      	nop
 8000de0:	2180      	movs	r1, #128	@ 0x80
 8000de2:	4832      	ldr	r0, [pc, #200]	@ (8000eac <i2cTest+0x158>)
 8000de4:	f00a feb6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d0f8      	beq.n	8000de0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2140      	movs	r1, #64	@ 0x40
 8000df2:	482e      	ldr	r0, [pc, #184]	@ (8000eac <i2cTest+0x158>)
 8000df4:	f00a fec5 	bl	800bb82 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f00a f8db 	bl	800afb4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dfe:	bf00      	nop
 8000e00:	2140      	movs	r1, #64	@ 0x40
 8000e02:	482a      	ldr	r0, [pc, #168]	@ (8000eac <i2cTest+0x158>)
 8000e04:	f00a fea6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d0f8      	beq.n	8000e00 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2140      	movs	r1, #64	@ 0x40
 8000e12:	4826      	ldr	r0, [pc, #152]	@ (8000eac <i2cTest+0x158>)
 8000e14:	f00a feb5 	bl	800bb82 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f00a f8cb 	bl	800afb4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e1e:	bf00      	nop
 8000e20:	2140      	movs	r1, #64	@ 0x40
 8000e22:	4822      	ldr	r0, [pc, #136]	@ (8000eac <i2cTest+0x158>)
 8000e24:	f00a fe96 	bl	800bb54 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d1f8      	bne.n	8000e20 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2180      	movs	r1, #128	@ 0x80
 8000e32:	481e      	ldr	r0, [pc, #120]	@ (8000eac <i2cTest+0x158>)
 8000e34:	f00a fea5 	bl	800bb82 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f00a f8bb 	bl	800afb4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e3e:	bf00      	nop
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	481a      	ldr	r0, [pc, #104]	@ (8000eac <i2cTest+0x158>)
 8000e44:	f00a fe86 	bl	800bb54 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d1f8      	bne.n	8000e40 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4e:	23c0      	movs	r3, #192	@ 0xc0
 8000e50:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e52:	2312      	movs	r3, #18
 8000e54:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4812      	ldr	r0, [pc, #72]	@ (8000eac <i2cTest+0x158>)
 8000e64:	f00a fc16 	bl	800b694 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <i2cTest+0x154>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <i2cTest+0x154>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e76:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <i2cTest+0x154>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <i2cTest+0x154>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e86:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <i2cTest+0x154>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <i2cTest+0x154>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0201 	orr.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <i2cTest+0x154>)
 8000e9a:	f00a fea3 	bl	800bbe4 <HAL_I2C_Init>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001c50 	.word	0x20001c50
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000eba:	20c8      	movs	r0, #200	@ 0xc8
 8000ebc:	f00a f87a 	bl	800afb4 <HAL_Delay>
	lcd_clear();
 8000ec0:	f009 fb4a 	bl	800a558 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d13e      	bne.n	8000f48 <printTemplate+0x98>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d13b      	bne.n	8000f48 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000ed0:	4a9a      	ldr	r2, [pc, #616]	@ (800113c <printTemplate+0x28c>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f009 fb13 	bl	800a500 <lcd_print>
		lcd_print(2, 3, "0");
 8000eda:	4a99      	ldr	r2, [pc, #612]	@ (8001140 <printTemplate+0x290>)
 8000edc:	2103      	movs	r1, #3
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f009 fb0e 	bl	800a500 <lcd_print>
		lcd_print(2, 4, "1");
 8000ee4:	4a97      	ldr	r2, [pc, #604]	@ (8001144 <printTemplate+0x294>)
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f009 fb09 	bl	800a500 <lcd_print>
		lcd_print(2, 5, "2");
 8000eee:	4a96      	ldr	r2, [pc, #600]	@ (8001148 <printTemplate+0x298>)
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f009 fb04 	bl	800a500 <lcd_print>
		lcd_print(2, 6, "3");
 8000ef8:	4a94      	ldr	r2, [pc, #592]	@ (800114c <printTemplate+0x29c>)
 8000efa:	2106      	movs	r1, #6
 8000efc:	2002      	movs	r0, #2
 8000efe:	f009 faff 	bl	800a500 <lcd_print>
		lcd_print(2, 7, "4");
 8000f02:	4a93      	ldr	r2, [pc, #588]	@ (8001150 <printTemplate+0x2a0>)
 8000f04:	2107      	movs	r1, #7
 8000f06:	2002      	movs	r0, #2
 8000f08:	f009 fafa 	bl	800a500 <lcd_print>
		lcd_print(2, 10, "5");
 8000f0c:	4a91      	ldr	r2, [pc, #580]	@ (8001154 <printTemplate+0x2a4>)
 8000f0e:	210a      	movs	r1, #10
 8000f10:	2002      	movs	r0, #2
 8000f12:	f009 faf5 	bl	800a500 <lcd_print>
		lcd_print(2, 11, "6");
 8000f16:	4a90      	ldr	r2, [pc, #576]	@ (8001158 <printTemplate+0x2a8>)
 8000f18:	210b      	movs	r1, #11
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f009 faf0 	bl	800a500 <lcd_print>
		lcd_print(2, 12, "7");
 8000f20:	4a8e      	ldr	r2, [pc, #568]	@ (800115c <printTemplate+0x2ac>)
 8000f22:	210c      	movs	r1, #12
 8000f24:	2002      	movs	r0, #2
 8000f26:	f009 faeb 	bl	800a500 <lcd_print>
		lcd_print(2, 13, "8");
 8000f2a:	4a8d      	ldr	r2, [pc, #564]	@ (8001160 <printTemplate+0x2b0>)
 8000f2c:	210d      	movs	r1, #13
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f009 fae6 	bl	800a500 <lcd_print>
		lcd_print(2, 14, "9");
 8000f34:	4a8b      	ldr	r2, [pc, #556]	@ (8001164 <printTemplate+0x2b4>)
 8000f36:	210e      	movs	r1, #14
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f009 fae1 	bl	800a500 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f3e:	2103      	movs	r1, #3
 8000f40:	2002      	movs	r0, #2
 8000f42:	f009 fabe 	bl	800a4c2 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000f46:	e0f5      	b.n	8001134 <printTemplate+0x284>
	} else if(type == 2) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d178      	bne.n	8001040 <printTemplate+0x190>
		if(page == 1) {
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d114      	bne.n	8000f7e <printTemplate+0xce>
			lcd_clear();
 8000f54:	f009 fb00 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	@ 0x64
 8000f5a:	f00a f82b 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f5e:	4a82      	ldr	r2, [pc, #520]	@ (8001168 <printTemplate+0x2b8>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	2001      	movs	r0, #1
 8000f64:	f009 facc 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f68:	4a80      	ldr	r2, [pc, #512]	@ (800116c <printTemplate+0x2bc>)
 8000f6a:	2107      	movs	r1, #7
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f009 fac7 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f72:	4a7f      	ldr	r2, [pc, #508]	@ (8001170 <printTemplate+0x2c0>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	2002      	movs	r0, #2
 8000f78:	f009 fac2 	bl	800a500 <lcd_print>
}
 8000f7c:	e0da      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 2) {
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d114      	bne.n	8000fae <printTemplate+0xfe>
			lcd_clear();
 8000f84:	f009 fae8 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	@ 0x64
 8000f8a:	f00a f813 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f8e:	4a79      	ldr	r2, [pc, #484]	@ (8001174 <printTemplate+0x2c4>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	2001      	movs	r0, #1
 8000f94:	f009 fab4 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f98:	4a74      	ldr	r2, [pc, #464]	@ (800116c <printTemplate+0x2bc>)
 8000f9a:	2107      	movs	r1, #7
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f009 faaf 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fa2:	4a75      	ldr	r2, [pc, #468]	@ (8001178 <printTemplate+0x2c8>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f009 faaa 	bl	800a500 <lcd_print>
}
 8000fac:	e0c2      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 3) {
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d114      	bne.n	8000fde <printTemplate+0x12e>
			lcd_clear();
 8000fb4:	f009 fad0 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8000fb8:	2064      	movs	r0, #100	@ 0x64
 8000fba:	f009 fffb 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000fbe:	4a6a      	ldr	r2, [pc, #424]	@ (8001168 <printTemplate+0x2b8>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f009 fa9c 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fc8:	4a68      	ldr	r2, [pc, #416]	@ (800116c <printTemplate+0x2bc>)
 8000fca:	2107      	movs	r1, #7
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f009 fa97 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000fd2:	4a6a      	ldr	r2, [pc, #424]	@ (800117c <printTemplate+0x2cc>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f009 fa92 	bl	800a500 <lcd_print>
}
 8000fdc:	e0aa      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 4) {
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d114      	bne.n	800100e <printTemplate+0x15e>
			lcd_clear();
 8000fe4:	f009 fab8 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8000fe8:	2064      	movs	r0, #100	@ 0x64
 8000fea:	f009 ffe3 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000fee:	4a5e      	ldr	r2, [pc, #376]	@ (8001168 <printTemplate+0x2b8>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f009 fa84 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800116c <printTemplate+0x2bc>)
 8000ffa:	2107      	movs	r1, #7
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f009 fa7f 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001002:	4a5f      	ldr	r2, [pc, #380]	@ (8001180 <printTemplate+0x2d0>)
 8001004:	2101      	movs	r1, #1
 8001006:	2002      	movs	r0, #2
 8001008:	f009 fa7a 	bl	800a500 <lcd_print>
}
 800100c:	e092      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 5) {
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b05      	cmp	r3, #5
 8001012:	f040 808f 	bne.w	8001134 <printTemplate+0x284>
			lcd_clear();
 8001016:	f009 fa9f 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	@ 0x64
 800101c:	f009 ffca 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001020:	4a51      	ldr	r2, [pc, #324]	@ (8001168 <printTemplate+0x2b8>)
 8001022:	2101      	movs	r1, #1
 8001024:	2001      	movs	r0, #1
 8001026:	f009 fa6b 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800102a:	4a50      	ldr	r2, [pc, #320]	@ (800116c <printTemplate+0x2bc>)
 800102c:	2107      	movs	r1, #7
 800102e:	2001      	movs	r0, #1
 8001030:	f009 fa66 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001034:	4a53      	ldr	r2, [pc, #332]	@ (8001184 <printTemplate+0x2d4>)
 8001036:	2101      	movs	r1, #1
 8001038:	2002      	movs	r0, #2
 800103a:	f009 fa61 	bl	800a500 <lcd_print>
}
 800103e:	e079      	b.n	8001134 <printTemplate+0x284>
	} else if(type == 3) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d176      	bne.n	8001134 <printTemplate+0x284>
		if(page == 1) {
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d114      	bne.n	8001076 <printTemplate+0x1c6>
			lcd_clear();
 800104c:	f009 fa84 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8001050:	2064      	movs	r0, #100	@ 0x64
 8001052:	f009 ffaf 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001056:	4a4c      	ldr	r2, [pc, #304]	@ (8001188 <printTemplate+0x2d8>)
 8001058:	2101      	movs	r1, #1
 800105a:	2001      	movs	r0, #1
 800105c:	f009 fa50 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001060:	4a4a      	ldr	r2, [pc, #296]	@ (800118c <printTemplate+0x2dc>)
 8001062:	2107      	movs	r1, #7
 8001064:	2001      	movs	r0, #1
 8001066:	f009 fa4b 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800106a:	4a41      	ldr	r2, [pc, #260]	@ (8001170 <printTemplate+0x2c0>)
 800106c:	2101      	movs	r1, #1
 800106e:	2002      	movs	r0, #2
 8001070:	f009 fa46 	bl	800a500 <lcd_print>
}
 8001074:	e05e      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 2) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d114      	bne.n	80010a6 <printTemplate+0x1f6>
			lcd_clear();
 800107c:	f009 fa6c 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	@ 0x64
 8001082:	f009 ff97 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001086:	4a40      	ldr	r2, [pc, #256]	@ (8001188 <printTemplate+0x2d8>)
 8001088:	2101      	movs	r1, #1
 800108a:	2001      	movs	r0, #1
 800108c:	f009 fa38 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001090:	4a3e      	ldr	r2, [pc, #248]	@ (800118c <printTemplate+0x2dc>)
 8001092:	2107      	movs	r1, #7
 8001094:	2001      	movs	r0, #1
 8001096:	f009 fa33 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800109a:	4a37      	ldr	r2, [pc, #220]	@ (8001178 <printTemplate+0x2c8>)
 800109c:	2101      	movs	r1, #1
 800109e:	2002      	movs	r0, #2
 80010a0:	f009 fa2e 	bl	800a500 <lcd_print>
}
 80010a4:	e046      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 3) {
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d114      	bne.n	80010d6 <printTemplate+0x226>
			lcd_clear();
 80010ac:	f009 fa54 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	@ 0x64
 80010b2:	f009 ff7f 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80010b6:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <printTemplate+0x2d8>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	2001      	movs	r0, #1
 80010bc:	f009 fa20 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010c0:	4a32      	ldr	r2, [pc, #200]	@ (800118c <printTemplate+0x2dc>)
 80010c2:	2107      	movs	r1, #7
 80010c4:	2001      	movs	r0, #1
 80010c6:	f009 fa1b 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80010ca:	4a2c      	ldr	r2, [pc, #176]	@ (800117c <printTemplate+0x2cc>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	2002      	movs	r0, #2
 80010d0:	f009 fa16 	bl	800a500 <lcd_print>
}
 80010d4:	e02e      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 4) {
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d114      	bne.n	8001106 <printTemplate+0x256>
			lcd_clear();
 80010dc:	f009 fa3c 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f009 ff67 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <printTemplate+0x2d8>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	2001      	movs	r0, #1
 80010ec:	f009 fa08 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010f0:	4a26      	ldr	r2, [pc, #152]	@ (800118c <printTemplate+0x2dc>)
 80010f2:	2107      	movs	r1, #7
 80010f4:	2001      	movs	r0, #1
 80010f6:	f009 fa03 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 80010fa:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <printTemplate+0x2d0>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	2002      	movs	r0, #2
 8001100:	f009 f9fe 	bl	800a500 <lcd_print>
}
 8001104:	e016      	b.n	8001134 <printTemplate+0x284>
		} else if(page == 5) {
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d113      	bne.n	8001134 <printTemplate+0x284>
			lcd_clear();
 800110c:	f009 fa24 	bl	800a558 <lcd_clear>
			HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f009 ff4f 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <printTemplate+0x2d8>)
 8001118:	2101      	movs	r1, #1
 800111a:	2001      	movs	r0, #1
 800111c:	f009 f9f0 	bl	800a500 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001120:	4a1a      	ldr	r2, [pc, #104]	@ (800118c <printTemplate+0x2dc>)
 8001122:	2107      	movs	r1, #7
 8001124:	2001      	movs	r0, #1
 8001126:	f009 f9eb 	bl	800a500 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <printTemplate+0x2d4>)
 800112c:	2101      	movs	r1, #1
 800112e:	2002      	movs	r0, #2
 8001130:	f009 f9e6 	bl	800a500 <lcd_print>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800f7ac 	.word	0x0800f7ac
 8001140:	0800f7b4 	.word	0x0800f7b4
 8001144:	0800f7b8 	.word	0x0800f7b8
 8001148:	0800f7bc 	.word	0x0800f7bc
 800114c:	0800f7c0 	.word	0x0800f7c0
 8001150:	0800f7c4 	.word	0x0800f7c4
 8001154:	0800f7c8 	.word	0x0800f7c8
 8001158:	0800f7cc 	.word	0x0800f7cc
 800115c:	0800f7d0 	.word	0x0800f7d0
 8001160:	0800f7d4 	.word	0x0800f7d4
 8001164:	0800f7d8 	.word	0x0800f7d8
 8001168:	0800f7dc 	.word	0x0800f7dc
 800116c:	20001374 	.word	0x20001374
 8001170:	0800f7f0 	.word	0x0800f7f0
 8001174:	0800f804 	.word	0x0800f804
 8001178:	0800f80c 	.word	0x0800f80c
 800117c:	0800f820 	.word	0x0800f820
 8001180:	0800f834 	.word	0x0800f834
 8001184:	0800f848 	.word	0x0800f848
 8001188:	0800f85c 	.word	0x0800f85c
 800118c:	20001388 	.word	0x20001388

08001190 <checkSlideVal>:

int checkSlideVal(int state) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800119e:	2101      	movs	r1, #1
 80011a0:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <checkSlideVal+0x60>)
 80011a2:	f00a fcd7 	bl	800bb54 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <checkSlideVal+0x20>
			return 34;
 80011ac:	2322      	movs	r3, #34	@ 0x22
 80011ae:	e01b      	b.n	80011e8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011b0:	2108      	movs	r1, #8
 80011b2:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <checkSlideVal+0x64>)
 80011b4:	f00a fcce 	bl	800bb54 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d113      	bne.n	80011e6 <checkSlideVal+0x56>
			return 32;
 80011be:	2320      	movs	r3, #32
 80011c0:	e012      	b.n	80011e8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011c2:	2101      	movs	r1, #1
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <checkSlideVal+0x60>)
 80011c6:	f00a fcc5 	bl	800bb54 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <checkSlideVal+0x44>
			return 35;
 80011d0:	2323      	movs	r3, #35	@ 0x23
 80011d2:	e009      	b.n	80011e8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011d4:	2108      	movs	r1, #8
 80011d6:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <checkSlideVal+0x64>)
 80011d8:	f00a fcbc 	bl	800bb54 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <checkSlideVal+0x56>
			return 33;
 80011e2:	2321      	movs	r3, #33	@ 0x21
 80011e4:	e000      	b.n	80011e8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40011000 	.word	0x40011000

080011f8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff f80c 	bl	8000224 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 8001214:	e08a      	b.n	800132c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff ffba 	bl	8001190 <checkSlideVal>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	dd07      	ble.n	8001232 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f7ff ffb4 	bl	8001190 <checkSlideVal>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <slideText+0x148>)
 800122e:	701a      	strb	r2, [r3, #0]
			break;
 8001230:	e081      	b.n	8001336 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	e075      	b.n	8001324 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001238:	6838      	ldr	r0, [r7, #0]
 800123a:	f7ff ffa9 	bl	8001190 <checkSlideVal>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	dd09      	ble.n	8001258 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f7ff ffa3 	bl	8001190 <checkSlideVal>
 800124a:	4603      	mov	r3, r0
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <slideText+0x148>)
 8001250:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 8001256:	e069      	b.n	800132c <slideText+0x134>
			}

			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	4413      	add	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	e029      	b.n	80012b6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7ff ff94 	bl	8001190 <checkSlideVal>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	dd0b      	ble.n	8001286 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f7ff ff8e 	bl	8001190 <checkSlideVal>
 8001274:	4603      	mov	r3, r0
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <slideText+0x148>)
 800127a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001284:	e01d      	b.n	80012c2 <slideText+0xca>
				}

				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b2d9      	uxtb	r1, r3
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	461a      	mov	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f009 f940 	bl	800a52a <lcd_print_char>
				HAL_Delay(30);
 80012aa:	201e      	movs	r0, #30
 80012ac:	f009 fe82 	bl	800afb4 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3301      	adds	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	7dfa      	ldrb	r2, [r7, #23]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbcf      	blt.n	8001262 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	e023      	b.n	8001312 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff ff60 	bl	8001190 <checkSlideVal>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dd0b      	ble.n	80012ee <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80012d6:	6838      	ldr	r0, [r7, #0]
 80012d8:	f7ff ff5a 	bl	8001190 <checkSlideVal>
 80012dc:	4603      	mov	r3, r0
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <slideText+0x148>)
 80012e2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80012ec:	e017      	b.n	800131e <slideText+0x126>
				}

			    if(j >= startPos) {
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	db0a      	blt.n	800130c <slideText+0x114>
			    	lcd_print_char(startLine, j, ' ');
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	b2d1      	uxtb	r1, r2
 80012fe:	2220      	movs	r2, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f009 f912 	bl	800a52a <lcd_print_char>
			    	HAL_Delay(30);
 8001306:	201e      	movs	r0, #30
 8001308:	f009 fe54 	bl	800afb4 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3b01      	subs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	7dfa      	ldrb	r2, [r7, #23]
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	429a      	cmp	r2, r3
 800131c:	dad5      	bge.n	80012ca <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	3301      	adds	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	6a3a      	ldr	r2, [r7, #32]
 8001328:	429a      	cmp	r2, r3
 800132a:	db85      	blt.n	8001238 <slideText+0x40>
	while(mainLoopVal == 1) {
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	2b01      	cmp	r3, #1
 8001330:	f43f af71 	beq.w	8001216 <slideText+0x1e>
			    }
			}
		}
	}
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200013d0 	.word	0x200013d0

08001344 <printCredentials>:

void printCredentials(int type) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10f      	bne.n	8001372 <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 8001352:	4a31      	ldr	r2, [pc, #196]	@ (8001418 <printCredentials+0xd4>)
 8001354:	2101      	movs	r1, #1
 8001356:	2001      	movs	r0, #1
 8001358:	f009 f8d2 	bl	800a500 <lcd_print>
		lcd_print(2, 1, machineID);
 800135c:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <printCredentials+0xd8>)
 800135e:	2101      	movs	r1, #1
 8001360:	2002      	movs	r0, #2
 8001362:	f009 f8cd 	bl	800a500 <lcd_print>
		lcd_print(2, 13, "    ");
 8001366:	4a2e      	ldr	r2, [pc, #184]	@ (8001420 <printCredentials+0xdc>)
 8001368:	210d      	movs	r1, #13
 800136a:	2002      	movs	r0, #2
 800136c:	f009 f8c8 	bl	800a500 <lcd_print>
			slideText(wifiPass, 1, 2, 1);
		} else {
			lcd_print(2, 1, "                ");
		}
	}
}
 8001370:	e04e      	b.n	8001410 <printCredentials+0xcc>
	} else if(type == 2) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d125      	bne.n	80013c4 <printCredentials+0x80>
		int ssidLength = strlen(wifiSSID);
 8001378:	482a      	ldr	r0, [pc, #168]	@ (8001424 <printCredentials+0xe0>)
 800137a:	f7fe ff53 	bl	8000224 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 8001382:	4a29      	ldr	r2, [pc, #164]	@ (8001428 <printCredentials+0xe4>)
 8001384:	2101      	movs	r1, #1
 8001386:	2001      	movs	r0, #1
 8001388:	f009 f8ba 	bl	800a500 <lcd_print>
		if(ssidLength == 16 || ssidLength < 16) {
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d002      	beq.n	8001398 <printCredentials+0x54>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	dc05      	bgt.n	80013a4 <printCredentials+0x60>
			lcd_print(2, 1, wifiSSID);
 8001398:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <printCredentials+0xe0>)
 800139a:	2101      	movs	r1, #1
 800139c:	2002      	movs	r0, #2
 800139e:	f009 f8af 	bl	800a500 <lcd_print>
 80013a2:	e035      	b.n	8001410 <printCredentials+0xcc>
		} else if(ssidLength > 16) {
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	dd06      	ble.n	80013b8 <printCredentials+0x74>
			slideText(wifiSSID, 1, 2, 0);
 80013aa:	2300      	movs	r3, #0
 80013ac:	2202      	movs	r2, #2
 80013ae:	2101      	movs	r1, #1
 80013b0:	481c      	ldr	r0, [pc, #112]	@ (8001424 <printCredentials+0xe0>)
 80013b2:	f7ff ff21 	bl	80011f8 <slideText>
}
 80013b6:	e02b      	b.n	8001410 <printCredentials+0xcc>
			lcd_print(2, 1, "                ");
 80013b8:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <printCredentials+0xe8>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	2002      	movs	r0, #2
 80013be:	f009 f89f 	bl	800a500 <lcd_print>
}
 80013c2:	e025      	b.n	8001410 <printCredentials+0xcc>
		int passLength = strlen(wifiPass);
 80013c4:	481a      	ldr	r0, [pc, #104]	@ (8001430 <printCredentials+0xec>)
 80013c6:	f7fe ff2d 	bl	8000224 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 80013ce:	4a19      	ldr	r2, [pc, #100]	@ (8001434 <printCredentials+0xf0>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	2001      	movs	r0, #1
 80013d4:	f009 f894 	bl	800a500 <lcd_print>
		if(passLength == 16 || passLength < 16) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d002      	beq.n	80013e4 <printCredentials+0xa0>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	dc05      	bgt.n	80013f0 <printCredentials+0xac>
			lcd_print(2, 1, wifiPass);
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <printCredentials+0xec>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	2002      	movs	r0, #2
 80013ea:	f009 f889 	bl	800a500 <lcd_print>
 80013ee:	e00f      	b.n	8001410 <printCredentials+0xcc>
		} else if(passLength > 16) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	dd06      	ble.n	8001404 <printCredentials+0xc0>
			slideText(wifiPass, 1, 2, 1);
 80013f6:	2301      	movs	r3, #1
 80013f8:	2202      	movs	r2, #2
 80013fa:	2101      	movs	r1, #1
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <printCredentials+0xec>)
 80013fe:	f7ff fefb 	bl	80011f8 <slideText>
}
 8001402:	e005      	b.n	8001410 <printCredentials+0xcc>
			lcd_print(2, 1, "                ");
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <printCredentials+0xe8>)
 8001406:	2101      	movs	r1, #1
 8001408:	2002      	movs	r0, #2
 800140a:	f009 f879 	bl	800a500 <lcd_print>
}
 800140e:	e7ff      	b.n	8001410 <printCredentials+0xcc>
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20001bd8 	.word	0x20001bd8
 800141c:	20001368 	.word	0x20001368
 8001420:	0800f870 	.word	0x0800f870
 8001424:	20001374 	.word	0x20001374
 8001428:	0800f878 	.word	0x0800f878
 800142c:	0800f88c 	.word	0x0800f88c
 8001430:	20001388 	.word	0x20001388
 8001434:	0800f8a0 	.word	0x0800f8a0

08001438 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800143c:	f3bf 8f4f 	dsb	sy
}
 8001440:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <__NVIC_SystemReset+0x24>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800144a:	4904      	ldr	r1, [pc, #16]	@ (800145c <__NVIC_SystemReset+0x24>)
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_SystemReset+0x28>)
 800144e:	4313      	orrs	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001452:	f3bf 8f4f 	dsb	sy
}
 8001456:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <__NVIC_SystemReset+0x20>
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	05fa0004 	.word	0x05fa0004

08001464 <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001468:	b0c8      	sub	sp, #288	@ 0x120
 800146a:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800146c:	2101      	movs	r1, #1
 800146e:	488f      	ldr	r0, [pc, #572]	@ (80016ac <menu+0x248>)
 8001470:	f00a fb70 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	f040 8099 	bne.w	80015ae <menu+0x14a>
 800147c:	4b8c      	ldr	r3, [pc, #560]	@ (80016b0 <menu+0x24c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8091 	beq.w	80015ae <menu+0x14a>
		menuSayac = menuSayac+1;
 800148c:	4b89      	ldr	r3, [pc, #548]	@ (80016b4 <menu+0x250>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4a87      	ldr	r2, [pc, #540]	@ (80016b4 <menu+0x250>)
 8001496:	7013      	strb	r3, [r2, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001498:	4b86      	ldr	r3, [pc, #536]	@ (80016b4 <menu+0x250>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b24      	cmp	r3, #36	@ 0x24
 800149e:	d102      	bne.n	80014a6 <menu+0x42>
			menuSayac = 1;
 80014a0:	4a84      	ldr	r2, [pc, #528]	@ (80016b4 <menu+0x250>)
 80014a2:	2301      	movs	r3, #1
 80014a4:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80014a6:	4b83      	ldr	r3, [pc, #524]	@ (80016b4 <menu+0x250>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d106      	bne.n	80014bc <menu+0x58>
 80014ae:	4b82      	ldr	r3, [pc, #520]	@ (80016b8 <menu+0x254>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <menu+0x58>
			menuSayac = 21;
 80014b6:	4a7f      	ldr	r2, [pc, #508]	@ (80016b4 <menu+0x250>)
 80014b8:	2315      	movs	r3, #21
 80014ba:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014bc:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <menu+0x250>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d106      	bne.n	80014d2 <menu+0x6e>
 80014c4:	4b7d      	ldr	r3, [pc, #500]	@ (80016bc <menu+0x258>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <menu+0x6e>
			menuSayac = 16;
 80014cc:	4a79      	ldr	r2, [pc, #484]	@ (80016b4 <menu+0x250>)
 80014ce:	2310      	movs	r3, #16
 80014d0:	7013      	strb	r3, [r2, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014d2:	4b78      	ldr	r3, [pc, #480]	@ (80016b4 <menu+0x250>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b0d      	cmp	r3, #13
 80014d8:	d106      	bne.n	80014e8 <menu+0x84>
 80014da:	4b78      	ldr	r3, [pc, #480]	@ (80016bc <menu+0x258>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d102      	bne.n	80014e8 <menu+0x84>
			menuSayac = 16;
 80014e2:	4a74      	ldr	r2, [pc, #464]	@ (80016b4 <menu+0x250>)
 80014e4:	2310      	movs	r3, #16
 80014e6:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014e8:	4b72      	ldr	r3, [pc, #456]	@ (80016b4 <menu+0x250>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d106      	bne.n	80014fe <menu+0x9a>
 80014f0:	4b72      	ldr	r3, [pc, #456]	@ (80016bc <menu+0x258>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d102      	bne.n	80014fe <menu+0x9a>
			menuSayac = 13;
 80014f8:	4a6e      	ldr	r2, [pc, #440]	@ (80016b4 <menu+0x250>)
 80014fa:	230d      	movs	r3, #13
 80014fc:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014fe:	4b6d      	ldr	r3, [pc, #436]	@ (80016b4 <menu+0x250>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0a      	cmp	r3, #10
 8001504:	d10a      	bne.n	800151c <menu+0xb8>
 8001506:	4b6e      	ldr	r3, [pc, #440]	@ (80016c0 <menu+0x25c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d003      	beq.n	8001516 <menu+0xb2>
 800150e:	4b6c      	ldr	r3, [pc, #432]	@ (80016c0 <menu+0x25c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d102      	bne.n	800151c <menu+0xb8>
			menuSayac = 11;
 8001516:	4a67      	ldr	r2, [pc, #412]	@ (80016b4 <menu+0x250>)
 8001518:	230b      	movs	r3, #11
 800151a:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800151c:	4b65      	ldr	r3, [pc, #404]	@ (80016b4 <menu+0x250>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d10e      	bne.n	8001542 <menu+0xde>
 8001524:	4b67      	ldr	r3, [pc, #412]	@ (80016c4 <menu+0x260>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d003      	beq.n	8001534 <menu+0xd0>
 800152c:	4b65      	ldr	r3, [pc, #404]	@ (80016c4 <menu+0x260>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d106      	bne.n	8001542 <menu+0xde>
 8001534:	4b61      	ldr	r3, [pc, #388]	@ (80016bc <menu+0x258>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d102      	bne.n	8001542 <menu+0xde>
			menuSayac = 16;
 800153c:	4a5d      	ldr	r2, [pc, #372]	@ (80016b4 <menu+0x250>)
 800153e:	2310      	movs	r3, #16
 8001540:	7013      	strb	r3, [r2, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <menu+0x250>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d10e      	bne.n	8001568 <menu+0x104>
 800154a:	4b5e      	ldr	r3, [pc, #376]	@ (80016c4 <menu+0x260>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d003      	beq.n	800155a <menu+0xf6>
 8001552:	4b5c      	ldr	r3, [pc, #368]	@ (80016c4 <menu+0x260>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d106      	bne.n	8001568 <menu+0x104>
 800155a:	4b58      	ldr	r3, [pc, #352]	@ (80016bc <menu+0x258>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d102      	bne.n	8001568 <menu+0x104>
			menuSayac = 13;
 8001562:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <menu+0x250>)
 8001564:	230d      	movs	r3, #13
 8001566:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001568:	4b52      	ldr	r3, [pc, #328]	@ (80016b4 <menu+0x250>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d106      	bne.n	800157e <menu+0x11a>
 8001570:	4b55      	ldr	r3, [pc, #340]	@ (80016c8 <menu+0x264>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d102      	bne.n	800157e <menu+0x11a>
			menuSayac = 16;
 8001578:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <menu+0x250>)
 800157a:	2310      	movs	r3, #16
 800157c:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800157e:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <menu+0x250>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b18      	cmp	r3, #24
 8001584:	d106      	bne.n	8001594 <menu+0x130>
 8001586:	4b4c      	ldr	r3, [pc, #304]	@ (80016b8 <menu+0x254>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <menu+0x130>
			menuSayac = 26;
 800158e:	4a49      	ldr	r2, [pc, #292]	@ (80016b4 <menu+0x250>)
 8001590:	231a      	movs	r3, #26
 8001592:	7013      	strb	r3, [r2, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 8001594:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <menu+0x250>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b21      	cmp	r3, #33	@ 0x21
 800159a:	d106      	bne.n	80015aa <menu+0x146>
 800159c:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <menu+0x268>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <menu+0x146>
			menuSayac = 35;
 80015a4:	4a43      	ldr	r2, [pc, #268]	@ (80016b4 <menu+0x250>)
 80015a6:	2323      	movs	r3, #35	@ 0x23
 80015a8:	7013      	strb	r3, [r2, #0]
		}

		bekle();
 80015aa:	f002 fd7f 	bl	80040ac <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015ae:	2108      	movs	r1, #8
 80015b0:	4847      	ldr	r0, [pc, #284]	@ (80016d0 <menu+0x26c>)
 80015b2:	f00a facf 	bl	800bb54 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 8098 	bne.w	80016ee <menu+0x28a>
 80015be:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <menu+0x24c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f083 0301 	eor.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8090 	beq.w	80016ee <menu+0x28a>
		if (menuSayac <= 1) {
 80015ce:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <menu+0x250>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d802      	bhi.n	80015dc <menu+0x178>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015d6:	4a37      	ldr	r2, [pc, #220]	@ (80016b4 <menu+0x250>)
 80015d8:	2324      	movs	r3, #36	@ 0x24
 80015da:	7013      	strb	r3, [r2, #0]
		}

		menuSayac = menuSayac - 1;
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <menu+0x250>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4a33      	ldr	r2, [pc, #204]	@ (80016b4 <menu+0x250>)
 80015e6:	7013      	strb	r3, [r2, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015e8:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <menu+0x250>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b14      	cmp	r3, #20
 80015ee:	d106      	bne.n	80015fe <menu+0x19a>
 80015f0:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <menu+0x254>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <menu+0x19a>
			menuSayac = 17;
 80015f8:	4a2e      	ldr	r2, [pc, #184]	@ (80016b4 <menu+0x250>)
 80015fa:	2311      	movs	r3, #17
 80015fc:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <menu+0x250>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	d106      	bne.n	8001614 <menu+0x1b0>
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <menu+0x258>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <menu+0x1b0>
			menuSayac = 7;
 800160e:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <menu+0x250>)
 8001610:	2307      	movs	r3, #7
 8001612:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <menu+0x250>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d106      	bne.n	800162a <menu+0x1c6>
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <menu+0x258>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <menu+0x1c6>
			menuSayac = 12;
 8001624:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <menu+0x250>)
 8001626:	230c      	movs	r3, #12
 8001628:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <menu+0x250>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d106      	bne.n	8001640 <menu+0x1dc>
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <menu+0x258>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d102      	bne.n	8001640 <menu+0x1dc>
			menuSayac = 8;
 800163a:	4a1e      	ldr	r2, [pc, #120]	@ (80016b4 <menu+0x250>)
 800163c:	2308      	movs	r3, #8
 800163e:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <menu+0x250>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d10a      	bne.n	800165e <menu+0x1fa>
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <menu+0x25c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d003      	beq.n	8001658 <menu+0x1f4>
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <menu+0x25c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d102      	bne.n	800165e <menu+0x1fa>
			menuSayac = 9;
 8001658:	4a16      	ldr	r2, [pc, #88]	@ (80016b4 <menu+0x250>)
 800165a:	2309      	movs	r3, #9
 800165c:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <menu+0x250>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d10a      	bne.n	800167c <menu+0x218>
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <menu+0x260>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <menu+0x212>
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <menu+0x260>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d102      	bne.n	800167c <menu+0x218>
			menuSayac = 11;
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <menu+0x250>)
 8001678:	230b      	movs	r3, #11
 800167a:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <menu+0x250>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d106      	bne.n	8001692 <menu+0x22e>
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <menu+0x264>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <menu+0x22e>
			menuSayac = 14;
 800168c:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <menu+0x250>)
 800168e:	230e      	movs	r3, #14
 8001690:	7013      	strb	r3, [r2, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <menu+0x250>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b19      	cmp	r3, #25
 8001698:	d11c      	bne.n	80016d4 <menu+0x270>
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <menu+0x254>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <menu+0x270>
			menuSayac = 23;
 80016a2:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <menu+0x250>)
 80016a4:	2317      	movs	r3, #23
 80016a6:	7013      	strb	r3, [r2, #0]
 80016a8:	e014      	b.n	80016d4 <menu+0x270>
 80016aa:	bf00      	nop
 80016ac:	40010800 	.word	0x40010800
 80016b0:	200013ff 	.word	0x200013ff
 80016b4:	200013d0 	.word	0x200013d0
 80016b8:	200013df 	.word	0x200013df
 80016bc:	200013d8 	.word	0x200013d8
 80016c0:	200013d9 	.word	0x200013d9
 80016c4:	200013da 	.word	0x200013da
 80016c8:	200013db 	.word	0x200013db
 80016cc:	200013ef 	.word	0x200013ef
 80016d0:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80016d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001998 <menu+0x534>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b22      	cmp	r3, #34	@ 0x22
 80016da:	d106      	bne.n	80016ea <menu+0x286>
 80016dc:	4baf      	ldr	r3, [pc, #700]	@ (800199c <menu+0x538>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <menu+0x286>
			menuSayac = 32;
 80016e4:	4aac      	ldr	r2, [pc, #688]	@ (8001998 <menu+0x534>)
 80016e6:	2320      	movs	r3, #32
 80016e8:	7013      	strb	r3, [r2, #0]
		}

		bekle();
 80016ea:	f002 fcdf 	bl	80040ac <bekle>
	}

	if (menuSayac == 0) {
 80016ee:	4baa      	ldr	r3, [pc, #680]	@ (8001998 <menu+0x534>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <menu+0x2a6>
		lcd_print(1, 1, menuyeGirildiText);
 80016f6:	4aaa      	ldr	r2, [pc, #680]	@ (80019a0 <menu+0x53c>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	2001      	movs	r0, #1
 80016fc:	f008 ff00 	bl	800a500 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001700:	4aa8      	ldr	r2, [pc, #672]	@ (80019a4 <menu+0x540>)
 8001702:	2101      	movs	r1, #1
 8001704:	2002      	movs	r0, #2
 8001706:	f008 fefb 	bl	800a500 <lcd_print>
	}

	if (menuSayac == 1) {
 800170a:	4ba3      	ldr	r3, [pc, #652]	@ (8001998 <menu+0x534>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	f040 8212 	bne.w	8001b38 <menu+0x6d4>
		lcd_print(1, 1, hataKayitListText);
 8001714:	4aa4      	ldr	r2, [pc, #656]	@ (80019a8 <menu+0x544>)
 8001716:	2101      	movs	r1, #1
 8001718:	2001      	movs	r0, #1
 800171a:	f008 fef1 	bl	800a500 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800171e:	4ba3      	ldr	r3, [pc, #652]	@ (80019ac <menu+0x548>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <menu+0x2ee>
			lcd_print(2, 1, birHataKoduText);
 8001726:	4aa2      	ldr	r2, [pc, #648]	@ (80019b0 <menu+0x54c>)
 8001728:	2101      	movs	r1, #1
 800172a:	2002      	movs	r0, #2
 800172c:	f008 fee8 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "   ");
 8001730:	4aa0      	ldr	r2, [pc, #640]	@ (80019b4 <menu+0x550>)
 8001732:	210f      	movs	r1, #15
 8001734:	2002      	movs	r0, #2
 8001736:	f008 fee3 	bl	800a500 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800173a:	4b9f      	ldr	r3, [pc, #636]	@ (80019b8 <menu+0x554>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	220a      	movs	r2, #10
 8001740:	499e      	ldr	r1, [pc, #632]	@ (80019bc <menu+0x558>)
 8001742:	4618      	mov	r0, r3
 8001744:	f00d fa32 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 8001748:	4a9c      	ldr	r2, [pc, #624]	@ (80019bc <menu+0x558>)
 800174a:	210e      	movs	r1, #14
 800174c:	2002      	movs	r0, #2
 800174e:	f008 fed7 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001752:	4b96      	ldr	r3, [pc, #600]	@ (80019ac <menu+0x548>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d115      	bne.n	8001786 <menu+0x322>
			lcd_print(2, 1, ikiHataKoduText);
 800175a:	4a99      	ldr	r2, [pc, #612]	@ (80019c0 <menu+0x55c>)
 800175c:	2101      	movs	r1, #1
 800175e:	2002      	movs	r0, #2
 8001760:	f008 fece 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 8001764:	4a97      	ldr	r2, [pc, #604]	@ (80019c4 <menu+0x560>)
 8001766:	210f      	movs	r1, #15
 8001768:	2002      	movs	r0, #2
 800176a:	f008 fec9 	bl	800a500 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800176e:	4b96      	ldr	r3, [pc, #600]	@ (80019c8 <menu+0x564>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	220a      	movs	r2, #10
 8001774:	4991      	ldr	r1, [pc, #580]	@ (80019bc <menu+0x558>)
 8001776:	4618      	mov	r0, r3
 8001778:	f00d fa18 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 800177c:	4a8f      	ldr	r2, [pc, #572]	@ (80019bc <menu+0x558>)
 800177e:	210e      	movs	r1, #14
 8001780:	2002      	movs	r0, #2
 8001782:	f008 febd 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001786:	4b89      	ldr	r3, [pc, #548]	@ (80019ac <menu+0x548>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d115      	bne.n	80017ba <menu+0x356>
			lcd_print(2, 1, ucHataKoduText);
 800178e:	4a8f      	ldr	r2, [pc, #572]	@ (80019cc <menu+0x568>)
 8001790:	2101      	movs	r1, #1
 8001792:	2002      	movs	r0, #2
 8001794:	f008 feb4 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 8001798:	4a8a      	ldr	r2, [pc, #552]	@ (80019c4 <menu+0x560>)
 800179a:	210f      	movs	r1, #15
 800179c:	2002      	movs	r0, #2
 800179e:	f008 feaf 	bl	800a500 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80017a2:	4b8b      	ldr	r3, [pc, #556]	@ (80019d0 <menu+0x56c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	220a      	movs	r2, #10
 80017a8:	4984      	ldr	r1, [pc, #528]	@ (80019bc <menu+0x558>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00d f9fe 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 80017b0:	4a82      	ldr	r2, [pc, #520]	@ (80019bc <menu+0x558>)
 80017b2:	210e      	movs	r1, #14
 80017b4:	2002      	movs	r0, #2
 80017b6:	f008 fea3 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80017ba:	4b7c      	ldr	r3, [pc, #496]	@ (80019ac <menu+0x548>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d115      	bne.n	80017ee <menu+0x38a>
			lcd_print(2, 1, dortHataKoduText);
 80017c2:	4a84      	ldr	r2, [pc, #528]	@ (80019d4 <menu+0x570>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	2002      	movs	r0, #2
 80017c8:	f008 fe9a 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 80017cc:	4a7d      	ldr	r2, [pc, #500]	@ (80019c4 <menu+0x560>)
 80017ce:	210f      	movs	r1, #15
 80017d0:	2002      	movs	r0, #2
 80017d2:	f008 fe95 	bl	800a500 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017d6:	4b80      	ldr	r3, [pc, #512]	@ (80019d8 <menu+0x574>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	220a      	movs	r2, #10
 80017dc:	4977      	ldr	r1, [pc, #476]	@ (80019bc <menu+0x558>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f00d f9e4 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 80017e4:	4a75      	ldr	r2, [pc, #468]	@ (80019bc <menu+0x558>)
 80017e6:	210e      	movs	r1, #14
 80017e8:	2002      	movs	r0, #2
 80017ea:	f008 fe89 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017ee:	4b6f      	ldr	r3, [pc, #444]	@ (80019ac <menu+0x548>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d115      	bne.n	8001822 <menu+0x3be>
			lcd_print(2, 1, besHataKoduText);
 80017f6:	4a79      	ldr	r2, [pc, #484]	@ (80019dc <menu+0x578>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	2002      	movs	r0, #2
 80017fc:	f008 fe80 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 8001800:	4a70      	ldr	r2, [pc, #448]	@ (80019c4 <menu+0x560>)
 8001802:	210f      	movs	r1, #15
 8001804:	2002      	movs	r0, #2
 8001806:	f008 fe7b 	bl	800a500 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800180a:	4b75      	ldr	r3, [pc, #468]	@ (80019e0 <menu+0x57c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	220a      	movs	r2, #10
 8001810:	496a      	ldr	r1, [pc, #424]	@ (80019bc <menu+0x558>)
 8001812:	4618      	mov	r0, r3
 8001814:	f00d f9ca 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 8001818:	4a68      	ldr	r2, [pc, #416]	@ (80019bc <menu+0x558>)
 800181a:	210e      	movs	r1, #14
 800181c:	2002      	movs	r0, #2
 800181e:	f008 fe6f 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001822:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <menu+0x548>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d115      	bne.n	8001856 <menu+0x3f2>
			lcd_print(2, 1, altiHataKoduText);
 800182a:	4a6e      	ldr	r2, [pc, #440]	@ (80019e4 <menu+0x580>)
 800182c:	2101      	movs	r1, #1
 800182e:	2002      	movs	r0, #2
 8001830:	f008 fe66 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 8001834:	4a63      	ldr	r2, [pc, #396]	@ (80019c4 <menu+0x560>)
 8001836:	210f      	movs	r1, #15
 8001838:	2002      	movs	r0, #2
 800183a:	f008 fe61 	bl	800a500 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800183e:	4b6a      	ldr	r3, [pc, #424]	@ (80019e8 <menu+0x584>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	220a      	movs	r2, #10
 8001844:	495d      	ldr	r1, [pc, #372]	@ (80019bc <menu+0x558>)
 8001846:	4618      	mov	r0, r3
 8001848:	f00d f9b0 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 800184c:	4a5b      	ldr	r2, [pc, #364]	@ (80019bc <menu+0x558>)
 800184e:	210e      	movs	r1, #14
 8001850:	2002      	movs	r0, #2
 8001852:	f008 fe55 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001856:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <menu+0x548>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d115      	bne.n	800188a <menu+0x426>
			lcd_print(2, 1, yediHataKoduText);
 800185e:	4a63      	ldr	r2, [pc, #396]	@ (80019ec <menu+0x588>)
 8001860:	2101      	movs	r1, #1
 8001862:	2002      	movs	r0, #2
 8001864:	f008 fe4c 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 8001868:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <menu+0x560>)
 800186a:	210f      	movs	r1, #15
 800186c:	2002      	movs	r0, #2
 800186e:	f008 fe47 	bl	800a500 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001872:	4b5f      	ldr	r3, [pc, #380]	@ (80019f0 <menu+0x58c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	220a      	movs	r2, #10
 8001878:	4950      	ldr	r1, [pc, #320]	@ (80019bc <menu+0x558>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00d f996 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 8001880:	4a4e      	ldr	r2, [pc, #312]	@ (80019bc <menu+0x558>)
 8001882:	210e      	movs	r1, #14
 8001884:	2002      	movs	r0, #2
 8001886:	f008 fe3b 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800188a:	4b48      	ldr	r3, [pc, #288]	@ (80019ac <menu+0x548>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b07      	cmp	r3, #7
 8001890:	d115      	bne.n	80018be <menu+0x45a>
			lcd_print(2, 1, sekizHataKoduText);
 8001892:	4a58      	ldr	r2, [pc, #352]	@ (80019f4 <menu+0x590>)
 8001894:	2101      	movs	r1, #1
 8001896:	2002      	movs	r0, #2
 8001898:	f008 fe32 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 800189c:	4a49      	ldr	r2, [pc, #292]	@ (80019c4 <menu+0x560>)
 800189e:	210f      	movs	r1, #15
 80018a0:	2002      	movs	r0, #2
 80018a2:	f008 fe2d 	bl	800a500 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018a6:	4b54      	ldr	r3, [pc, #336]	@ (80019f8 <menu+0x594>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	220a      	movs	r2, #10
 80018ac:	4943      	ldr	r1, [pc, #268]	@ (80019bc <menu+0x558>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00d f97c 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <menu+0x558>)
 80018b6:	210e      	movs	r1, #14
 80018b8:	2002      	movs	r0, #2
 80018ba:	f008 fe21 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018be:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <menu+0x548>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d115      	bne.n	80018f2 <menu+0x48e>
			lcd_print(2, 1, dokuzHataKoduText);
 80018c6:	4a4d      	ldr	r2, [pc, #308]	@ (80019fc <menu+0x598>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	2002      	movs	r0, #2
 80018cc:	f008 fe18 	bl	800a500 <lcd_print>
			lcd_print(2, 15, "  ");
 80018d0:	4a3c      	ldr	r2, [pc, #240]	@ (80019c4 <menu+0x560>)
 80018d2:	210f      	movs	r1, #15
 80018d4:	2002      	movs	r0, #2
 80018d6:	f008 fe13 	bl	800a500 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80018da:	4b49      	ldr	r3, [pc, #292]	@ (8001a00 <menu+0x59c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	220a      	movs	r2, #10
 80018e0:	4936      	ldr	r1, [pc, #216]	@ (80019bc <menu+0x558>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00d f962 	bl	800ebac <itoa>
			lcd_print(2, 14, snum);
 80018e8:	4a34      	ldr	r2, [pc, #208]	@ (80019bc <menu+0x558>)
 80018ea:	210e      	movs	r1, #14
 80018ec:	2002      	movs	r0, #2
 80018ee:	f008 fe07 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80018f2:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <menu+0x548>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b09      	cmp	r3, #9
 80018f8:	d115      	bne.n	8001926 <menu+0x4c2>
			lcd_print(2, 1, onHataKoduText);
 80018fa:	4a42      	ldr	r2, [pc, #264]	@ (8001a04 <menu+0x5a0>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f008 fdfe 	bl	800a500 <lcd_print>
			lcd_print(2, 16, " ");
 8001904:	4a40      	ldr	r2, [pc, #256]	@ (8001a08 <menu+0x5a4>)
 8001906:	2110      	movs	r1, #16
 8001908:	2002      	movs	r0, #2
 800190a:	f008 fdf9 	bl	800a500 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800190e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <menu+0x5a8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	220a      	movs	r2, #10
 8001914:	4929      	ldr	r1, [pc, #164]	@ (80019bc <menu+0x558>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00d f948 	bl	800ebac <itoa>
			lcd_print(2, 15, snum);
 800191c:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <menu+0x558>)
 800191e:	210f      	movs	r1, #15
 8001920:	2002      	movs	r0, #2
 8001922:	f008 fded 	bl	800a500 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <menu+0x548>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d104      	bne.n	8001938 <menu+0x4d4>
			lcd_print(2, 1, silmekIcinText);
 800192e:	4a38      	ldr	r2, [pc, #224]	@ (8001a10 <menu+0x5ac>)
 8001930:	2101      	movs	r1, #1
 8001932:	2002      	movs	r0, #2
 8001934:	f008 fde4 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001938:	2102      	movs	r1, #2
 800193a:	4836      	ldr	r0, [pc, #216]	@ (8001a14 <menu+0x5b0>)
 800193c:	f00a f90a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	2b01      	cmp	r3, #1
 8001944:	d119      	bne.n	800197a <menu+0x516>
 8001946:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <menu+0x5b4>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <menu+0x516>
 8001954:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <menu+0x5b8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10e      	bne.n	800197a <menu+0x516>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <menu+0x548>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <menu+0x548>)
 8001966:	7013      	strb	r3, [r2, #0]

			if(hataGostermeSirasi > 10) {
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <menu+0x548>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b0a      	cmp	r3, #10
 800196e:	d902      	bls.n	8001976 <menu+0x512>
				hataGostermeSirasi = 0;
 8001970:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <menu+0x548>)
 8001972:	2300      	movs	r3, #0
 8001974:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8001976:	f002 fb99 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800197a:	2104      	movs	r1, #4
 800197c:	4825      	ldr	r0, [pc, #148]	@ (8001a14 <menu+0x5b0>)
 800197e:	f00a f8e9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d15e      	bne.n	8001a46 <menu+0x5e2>
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <menu+0x5b4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	f083 0301 	eor.w	r3, r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d057      	beq.n	8001a46 <menu+0x5e2>
 8001996:	e043      	b.n	8001a20 <menu+0x5bc>
 8001998:	200013d0 	.word	0x200013d0
 800199c:	200013ef 	.word	0x200013ef
 80019a0:	20001534 	.word	0x20001534
 80019a4:	20001548 	.word	0x20001548
 80019a8:	2000155c 	.word	0x2000155c
 80019ac:	200013d2 	.word	0x200013d2
 80019b0:	20001570 	.word	0x20001570
 80019b4:	0800f8b4 	.word	0x0800f8b4
 80019b8:	200013f2 	.word	0x200013f2
 80019bc:	20001360 	.word	0x20001360
 80019c0:	20001584 	.word	0x20001584
 80019c4:	0800f8b8 	.word	0x0800f8b8
 80019c8:	200013f3 	.word	0x200013f3
 80019cc:	20001598 	.word	0x20001598
 80019d0:	200013f4 	.word	0x200013f4
 80019d4:	200015ac 	.word	0x200015ac
 80019d8:	200013f5 	.word	0x200013f5
 80019dc:	200015c0 	.word	0x200015c0
 80019e0:	200013f6 	.word	0x200013f6
 80019e4:	200015d4 	.word	0x200015d4
 80019e8:	200013f7 	.word	0x200013f7
 80019ec:	200015e8 	.word	0x200015e8
 80019f0:	200013f8 	.word	0x200013f8
 80019f4:	200015fc 	.word	0x200015fc
 80019f8:	200013f9 	.word	0x200013f9
 80019fc:	20001610 	.word	0x20001610
 8001a00:	200013fa 	.word	0x200013fa
 8001a04:	20001624 	.word	0x20001624
 8001a08:	0800f8bc 	.word	0x0800f8bc
 8001a0c:	200013fb 	.word	0x200013fb
 8001a10:	20001638 	.word	0x20001638
 8001a14:	40010800 	.word	0x40010800
 8001a18:	200013ff 	.word	0x200013ff
 8001a1c:	200013df 	.word	0x200013df
 8001a20:	4b9e      	ldr	r3, [pc, #632]	@ (8001c9c <menu+0x838>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10e      	bne.n	8001a46 <menu+0x5e2>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a28:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca0 <menu+0x83c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4a9b      	ldr	r2, [pc, #620]	@ (8001ca0 <menu+0x83c>)
 8001a32:	7013      	strb	r3, [r2, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a34:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca0 <menu+0x83c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b0b      	cmp	r3, #11
 8001a3a:	d902      	bls.n	8001a42 <menu+0x5de>
	    		hataGostermeSirasi = 10;
 8001a3c:	4a98      	ldr	r2, [pc, #608]	@ (8001ca0 <menu+0x83c>)
 8001a3e:	230a      	movs	r3, #10
 8001a40:	7013      	strb	r3, [r2, #0]
	    	}
			bekle();
 8001a42:	f002 fb33 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a46:	2108      	movs	r1, #8
 8001a48:	4896      	ldr	r0, [pc, #600]	@ (8001ca4 <menu+0x840>)
 8001a4a:	f00a f883 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d171      	bne.n	8001b38 <menu+0x6d4>
 8001a54:	4b94      	ldr	r3, [pc, #592]	@ (8001ca8 <menu+0x844>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d06a      	beq.n	8001b38 <menu+0x6d4>
 8001a62:	4b8f      	ldr	r3, [pc, #572]	@ (8001ca0 <menu+0x83c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d166      	bne.n	8001b38 <menu+0x6d4>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a6a:	4a90      	ldr	r2, [pc, #576]	@ (8001cac <menu+0x848>)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	7013      	strb	r3, [r2, #0]
 8001a70:	498f      	ldr	r1, [pc, #572]	@ (8001cb0 <menu+0x84c>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
			hataKayit2 = 0; eepromData[38] = 0;
 8001a7e:	4a8d      	ldr	r2, [pc, #564]	@ (8001cb4 <menu+0x850>)
 8001a80:	2300      	movs	r3, #0
 8001a82:	7013      	strb	r3, [r2, #0]
 8001a84:	498a      	ldr	r1, [pc, #552]	@ (8001cb0 <menu+0x84c>)
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9c1 234c 	strd	r2, r3, [r1, #304]	@ 0x130
			hataKayit3 = 0; eepromData[39] = 0;
 8001a92:	4a89      	ldr	r2, [pc, #548]	@ (8001cb8 <menu+0x854>)
 8001a94:	2300      	movs	r3, #0
 8001a96:	7013      	strb	r3, [r2, #0]
 8001a98:	4985      	ldr	r1, [pc, #532]	@ (8001cb0 <menu+0x84c>)
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9c1 234e 	strd	r2, r3, [r1, #312]	@ 0x138
			hataKayit4 = 0; eepromData[40] = 0;
 8001aa6:	4a85      	ldr	r2, [pc, #532]	@ (8001cbc <menu+0x858>)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	7013      	strb	r3, [r2, #0]
 8001aac:	4980      	ldr	r1, [pc, #512]	@ (8001cb0 <menu+0x84c>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
			hataKayit5 = 0; eepromData[41] = 0;
 8001aba:	4a81      	ldr	r2, [pc, #516]	@ (8001cc0 <menu+0x85c>)
 8001abc:	2300      	movs	r3, #0
 8001abe:	7013      	strb	r3, [r2, #0]
 8001ac0:	497b      	ldr	r1, [pc, #492]	@ (8001cb0 <menu+0x84c>)
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148
			hataKayit6 = 0; eepromData[42] = 0;
 8001ace:	4a7d      	ldr	r2, [pc, #500]	@ (8001cc4 <menu+0x860>)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	7013      	strb	r3, [r2, #0]
 8001ad4:	4976      	ldr	r1, [pc, #472]	@ (8001cb0 <menu+0x84c>)
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
			hataKayit7 = 0; eepromData[43] = 0;
 8001ae2:	4a79      	ldr	r2, [pc, #484]	@ (8001cc8 <menu+0x864>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	7013      	strb	r3, [r2, #0]
 8001ae8:	4971      	ldr	r1, [pc, #452]	@ (8001cb0 <menu+0x84c>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
			hataKayit8 = 0; eepromData[44] = 0;
 8001af6:	4a75      	ldr	r2, [pc, #468]	@ (8001ccc <menu+0x868>)
 8001af8:	2300      	movs	r3, #0
 8001afa:	7013      	strb	r3, [r2, #0]
 8001afc:	496c      	ldr	r1, [pc, #432]	@ (8001cb0 <menu+0x84c>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9c1 2358 	strd	r2, r3, [r1, #352]	@ 0x160
			hataKayit9 = 0; eepromData[45] = 0;
 8001b0a:	4a71      	ldr	r2, [pc, #452]	@ (8001cd0 <menu+0x86c>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	7013      	strb	r3, [r2, #0]
 8001b10:	4967      	ldr	r1, [pc, #412]	@ (8001cb0 <menu+0x84c>)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
			hataKayit10 = 0; eepromData[46] = 0;
 8001b1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd4 <menu+0x870>)
 8001b20:	2300      	movs	r3, #0
 8001b22:	7013      	strb	r3, [r2, #0]
 8001b24:	4962      	ldr	r1, [pc, #392]	@ (8001cb0 <menu+0x84c>)
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
			hafizaYaz = 1;
 8001b32:	4a69      	ldr	r2, [pc, #420]	@ (8001cd8 <menu+0x874>)
 8001b34:	2301      	movs	r3, #1
 8001b36:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 2) {
 8001b38:	4b68      	ldr	r3, [pc, #416]	@ (8001cdc <menu+0x878>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	f040 8098 	bne.w	8001c72 <menu+0x80e>
		lcd_print(1, 1, calismaSekliText);
 8001b42:	4a67      	ldr	r2, [pc, #412]	@ (8001ce0 <menu+0x87c>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f008 fcda 	bl	800a500 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <menu+0x838>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d003      	beq.n	8001b5c <menu+0x6f8>
 8001b54:	4b51      	ldr	r3, [pc, #324]	@ (8001c9c <menu+0x838>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d104      	bne.n	8001b66 <menu+0x702>
			lcd_print(2, 1, devirmeYuruyusText);
 8001b5c:	4a61      	ldr	r2, [pc, #388]	@ (8001ce4 <menu+0x880>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2002      	movs	r0, #2
 8001b62:	f008 fccd 	bl	800a500 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b66:	4b60      	ldr	r3, [pc, #384]	@ (8001ce8 <menu+0x884>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <menu+0x71c>
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <menu+0x838>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <menu+0x71c>
			lcd_print(2, 1, bastikcaCalisanText);
 8001b76:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <menu+0x888>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f008 fcc0 	bl	800a500 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b80:	4b59      	ldr	r3, [pc, #356]	@ (8001ce8 <menu+0x884>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <menu+0x736>
 8001b88:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <menu+0x838>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <menu+0x736>
			lcd_print(2, 1, basGonderText);
 8001b90:	4a57      	ldr	r2, [pc, #348]	@ (8001cf0 <menu+0x88c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	2002      	movs	r0, #2
 8001b96:	f008 fcb3 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4841      	ldr	r0, [pc, #260]	@ (8001ca4 <menu+0x840>)
 8001b9e:	f009 ffd9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d119      	bne.n	8001bdc <menu+0x778>
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <menu+0x844>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d012      	beq.n	8001bdc <menu+0x778>
 8001bb6:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <menu+0x838>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <menu+0x778>
			calismaSekli = calismaSekli + 1;
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <menu+0x884>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4a48      	ldr	r2, [pc, #288]	@ (8001ce8 <menu+0x884>)
 8001bc8:	7013      	strb	r3, [r2, #0]

			if(calismaSekli > 1) {
 8001bca:	4b47      	ldr	r3, [pc, #284]	@ (8001ce8 <menu+0x884>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d902      	bls.n	8001bd8 <menu+0x774>
				calismaSekli = 0;
 8001bd2:	4a45      	ldr	r2, [pc, #276]	@ (8001ce8 <menu+0x884>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8001bd8:	f002 fa68 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4831      	ldr	r0, [pc, #196]	@ (8001ca4 <menu+0x840>)
 8001be0:	f009 ffb8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d119      	bne.n	8001c1e <menu+0x7ba>
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <menu+0x844>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d012      	beq.n	8001c1e <menu+0x7ba>
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <menu+0x838>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10e      	bne.n	8001c1e <menu+0x7ba>
			calismaSekli = calismaSekli - 1;
 8001c00:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <menu+0x884>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4a37      	ldr	r2, [pc, #220]	@ (8001ce8 <menu+0x884>)
 8001c0a:	7013      	strb	r3, [r2, #0]

	    	if(calismaSekli > 0) {
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <menu+0x884>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <menu+0x7b6>
	    		calismaSekli = 1;
 8001c14:	4a34      	ldr	r2, [pc, #208]	@ (8001ce8 <menu+0x884>)
 8001c16:	2301      	movs	r3, #1
 8001c18:	7013      	strb	r3, [r2, #0]
	    	}
			bekle();
 8001c1a:	f002 fa47 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c1e:	2108      	movs	r1, #8
 8001c20:	4820      	ldr	r0, [pc, #128]	@ (8001ca4 <menu+0x840>)
 8001c22:	f009 ff97 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d122      	bne.n	8001c72 <menu+0x80e>
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <menu+0x844>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d01b      	beq.n	8001c72 <menu+0x80e>
			eepromData[1] = calismaSekli;
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <menu+0x884>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	461c      	mov	r4, r3
 8001c44:	4615      	mov	r5, r2
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <menu+0x84c>)
 8001c48:	e9c3 4502 	strd	r4, r5, [r3, #8]

			if(calismaSekli == 1) {
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <menu+0x884>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10b      	bne.n	8001c6c <menu+0x808>
				altLimit = 1;
 8001c54:	4a27      	ldr	r2, [pc, #156]	@ (8001cf4 <menu+0x890>)
 8001c56:	2301      	movs	r3, #1
 8001c58:	7013      	strb	r3, [r2, #0]
				eepromData[5] = altLimit;
 8001c5a:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <menu+0x890>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	4698      	mov	r8, r3
 8001c64:	4691      	mov	r9, r2
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <menu+0x84c>)
 8001c68:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28
			}
			hafizaYaz = 1;
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd8 <menu+0x874>)
 8001c6e:	2301      	movs	r3, #1
 8001c70:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 3) {
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <menu+0x878>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	f040 80a1 	bne.w	8001dbe <menu+0x95a>
		lcd_print(1, 1, emniyetCercevesiText);
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <menu+0x894>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2001      	movs	r0, #1
 8001c82:	f008 fc3d 	bl	800a500 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <menu+0x898>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d13a      	bne.n	8001d04 <menu+0x8a0>
			lcd_print(2, 1, pasifText);
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <menu+0x89c>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	2002      	movs	r0, #2
 8001c94:	f008 fc34 	bl	800a500 <lcd_print>
 8001c98:	e03d      	b.n	8001d16 <menu+0x8b2>
 8001c9a:	bf00      	nop
 8001c9c:	200013df 	.word	0x200013df
 8001ca0:	200013d2 	.word	0x200013d2
 8001ca4:	40010800 	.word	0x40010800
 8001ca8:	200013ff 	.word	0x200013ff
 8001cac:	200013f2 	.word	0x200013f2
 8001cb0:	20000ff0 	.word	0x20000ff0
 8001cb4:	200013f3 	.word	0x200013f3
 8001cb8:	200013f4 	.word	0x200013f4
 8001cbc:	200013f5 	.word	0x200013f5
 8001cc0:	200013f6 	.word	0x200013f6
 8001cc4:	200013f7 	.word	0x200013f7
 8001cc8:	200013f8 	.word	0x200013f8
 8001ccc:	200013f9 	.word	0x200013f9
 8001cd0:	200013fa 	.word	0x200013fa
 8001cd4:	200013fb 	.word	0x200013fb
 8001cd8:	200013fc 	.word	0x200013fc
 8001cdc:	200013d0 	.word	0x200013d0
 8001ce0:	2000164c 	.word	0x2000164c
 8001ce4:	20001660 	.word	0x20001660
 8001ce8:	200013d1 	.word	0x200013d1
 8001cec:	20001674 	.word	0x20001674
 8001cf0:	20001688 	.word	0x20001688
 8001cf4:	200013d6 	.word	0x200013d6
 8001cf8:	2000169c 	.word	0x2000169c
 8001cfc:	200013d4 	.word	0x200013d4
 8001d00:	200016b0 	.word	0x200016b0
		} else if(emniyetCercevesi == 1) {
 8001d04:	4b72      	ldr	r3, [pc, #456]	@ (8001ed0 <menu+0xa6c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d104      	bne.n	8001d16 <menu+0x8b2>
			lcd_print(2, 1, ondSafetyTextGN);
 8001d0c:	4a71      	ldr	r2, [pc, #452]	@ (8001ed4 <menu+0xa70>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2002      	movs	r0, #2
 8001d12:	f008 fbf5 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d16:	2102      	movs	r1, #2
 8001d18:	486f      	ldr	r0, [pc, #444]	@ (8001ed8 <menu+0xa74>)
 8001d1a:	f009 ff1b 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d115      	bne.n	8001d50 <menu+0x8ec>
 8001d24:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <menu+0xa78>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <menu+0x8ec>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d32:	4b67      	ldr	r3, [pc, #412]	@ (8001ed0 <menu+0xa6c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4a65      	ldr	r2, [pc, #404]	@ (8001ed0 <menu+0xa6c>)
 8001d3c:	7013      	strb	r3, [r2, #0]

			if(emniyetCercevesi > 1) {
 8001d3e:	4b64      	ldr	r3, [pc, #400]	@ (8001ed0 <menu+0xa6c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d902      	bls.n	8001d4c <menu+0x8e8>
				emniyetCercevesi = 0;
 8001d46:	4a62      	ldr	r2, [pc, #392]	@ (8001ed0 <menu+0xa6c>)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8001d4c:	f002 f9ae 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d50:	2104      	movs	r1, #4
 8001d52:	4861      	ldr	r0, [pc, #388]	@ (8001ed8 <menu+0xa74>)
 8001d54:	f009 fefe 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d115      	bne.n	8001d8a <menu+0x926>
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001edc <menu+0xa78>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00e      	beq.n	8001d8a <menu+0x926>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d6c:	4b58      	ldr	r3, [pc, #352]	@ (8001ed0 <menu+0xa6c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4a56      	ldr	r2, [pc, #344]	@ (8001ed0 <menu+0xa6c>)
 8001d76:	7013      	strb	r3, [r2, #0]
		   	if(emniyetCercevesi > 0) {
 8001d78:	4b55      	ldr	r3, [pc, #340]	@ (8001ed0 <menu+0xa6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <menu+0x922>
		   		emniyetCercevesi = 1;
 8001d80:	4a53      	ldr	r2, [pc, #332]	@ (8001ed0 <menu+0xa6c>)
 8001d82:	2301      	movs	r3, #1
 8001d84:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8001d86:	f002 f991 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	4852      	ldr	r0, [pc, #328]	@ (8001ed8 <menu+0xa74>)
 8001d8e:	f009 fee1 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d112      	bne.n	8001dbe <menu+0x95a>
 8001d98:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <menu+0xa78>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <menu+0x95a>
			eepromData[2] = emniyetCercevesi;
 8001da6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed0 <menu+0xa6c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2200      	movs	r2, #0
 8001dae:	469a      	mov	sl, r3
 8001db0:	4693      	mov	fp, r2
 8001db2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <menu+0xa7c>)
 8001db4:	e9c3 ab04 	strd	sl, fp, [r3, #16]
			hafizaYaz = 1;
 8001db8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee4 <menu+0xa80>)
 8001dba:	2301      	movs	r3, #1
 8001dbc:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 4) {
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee8 <menu+0xa84>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d16f      	bne.n	8001ea6 <menu+0xa42>
		lcd_print(1, 1, yavaslamaLimitText);
 8001dc6:	4a49      	ldr	r2, [pc, #292]	@ (8001eec <menu+0xa88>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f008 fb98 	bl	800a500 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001dd0:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <menu+0xa8c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <menu+0x980>
			lcd_print(2, 1, pasifText);
 8001dd8:	4a46      	ldr	r2, [pc, #280]	@ (8001ef4 <menu+0xa90>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f008 fb8f 	bl	800a500 <lcd_print>
 8001de2:	e008      	b.n	8001df6 <menu+0x992>
		} else if(yavaslamaLimit == 1) {
 8001de4:	4b42      	ldr	r3, [pc, #264]	@ (8001ef0 <menu+0xa8c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <menu+0x992>
			lcd_print(2, 1, aktifText);
 8001dec:	4a42      	ldr	r2, [pc, #264]	@ (8001ef8 <menu+0xa94>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	2002      	movs	r0, #2
 8001df2:	f008 fb85 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001df6:	2102      	movs	r1, #2
 8001df8:	4837      	ldr	r0, [pc, #220]	@ (8001ed8 <menu+0xa74>)
 8001dfa:	f009 feab 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d115      	bne.n	8001e30 <menu+0x9cc>
 8001e04:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <menu+0xa78>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00e      	beq.n	8001e30 <menu+0x9cc>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <menu+0xa8c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4a35      	ldr	r2, [pc, #212]	@ (8001ef0 <menu+0xa8c>)
 8001e1c:	7013      	strb	r3, [r2, #0]

			if(yavaslamaLimit > 1){
 8001e1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <menu+0xa8c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d902      	bls.n	8001e2c <menu+0x9c8>
				yavaslamaLimit = 0;
 8001e26:	4a32      	ldr	r2, [pc, #200]	@ (8001ef0 <menu+0xa8c>)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8001e2c:	f002 f93e 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e30:	2104      	movs	r1, #4
 8001e32:	4829      	ldr	r0, [pc, #164]	@ (8001ed8 <menu+0xa74>)
 8001e34:	f009 fe8e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d115      	bne.n	8001e6a <menu+0xa06>
 8001e3e:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <menu+0xa78>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <menu+0xa06>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <menu+0xa8c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4a26      	ldr	r2, [pc, #152]	@ (8001ef0 <menu+0xa8c>)
 8001e56:	7013      	strb	r3, [r2, #0]

		   	if(yavaslamaLimit > 0){
 8001e58:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <menu+0xa8c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <menu+0xa02>
		   		yavaslamaLimit = 1;
 8001e60:	4a23      	ldr	r2, [pc, #140]	@ (8001ef0 <menu+0xa8c>)
 8001e62:	2301      	movs	r3, #1
 8001e64:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8001e66:	f002 f921 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	481a      	ldr	r0, [pc, #104]	@ (8001ed8 <menu+0xa74>)
 8001e6e:	f009 fe71 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d116      	bne.n	8001ea6 <menu+0xa42>
 8001e78:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <menu+0xa78>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00f      	beq.n	8001ea6 <menu+0xa42>
			eepromData[4] = yavaslamaLimit;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <menu+0xa8c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001e92:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001e96:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <menu+0xa7c>)
 8001e98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8001e9c:	e9c3 1208 	strd	r1, r2, [r3, #32]
			hafizaYaz = 1;
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <menu+0xa80>)
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 5) {
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <menu+0xa84>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	f040 80c4 	bne.w	8002038 <menu+0xbd4>
		lcd_print(1, 1, altLimitText);
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <menu+0xa98>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f008 fb23 	bl	800a500 <lcd_print>

		if(altLimit == 0) {
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <menu+0xa9c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d120      	bne.n	8001f04 <menu+0xaa0>
			lcd_print(2, 1, pasifText);
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <menu+0xa90>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f008 fb1a 	bl	800a500 <lcd_print>
 8001ecc:	e023      	b.n	8001f16 <menu+0xab2>
 8001ece:	bf00      	nop
 8001ed0:	200013d4 	.word	0x200013d4
 8001ed4:	200000ec 	.word	0x200000ec
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	200013ff 	.word	0x200013ff
 8001ee0:	20000ff0 	.word	0x20000ff0
 8001ee4:	200013fc 	.word	0x200013fc
 8001ee8:	200013d0 	.word	0x200013d0
 8001eec:	200016d8 	.word	0x200016d8
 8001ef0:	200013d5 	.word	0x200013d5
 8001ef4:	200016b0 	.word	0x200016b0
 8001ef8:	200016c4 	.word	0x200016c4
 8001efc:	200016ec 	.word	0x200016ec
 8001f00:	200013d6 	.word	0x200013d6
		} else if(altLimit == 1) {
 8001f04:	4b9a      	ldr	r3, [pc, #616]	@ (8002170 <menu+0xd0c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d104      	bne.n	8001f16 <menu+0xab2>
			lcd_print(2, 1, aktifText);
 8001f0c:	4a99      	ldr	r2, [pc, #612]	@ (8002174 <menu+0xd10>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2002      	movs	r0, #2
 8001f12:	f008 faf5 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001f16:	2102      	movs	r1, #2
 8001f18:	4897      	ldr	r0, [pc, #604]	@ (8002178 <menu+0xd14>)
 8001f1a:	f009 fe1b 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d119      	bne.n	8001f58 <menu+0xaf4>
 8001f24:	4b95      	ldr	r3, [pc, #596]	@ (800217c <menu+0xd18>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <menu+0xaf4>
 8001f32:	4b93      	ldr	r3, [pc, #588]	@ (8002180 <menu+0xd1c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <menu+0xaf4>
			altLimit = altLimit + 1;
 8001f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002170 <menu+0xd0c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4a8b      	ldr	r2, [pc, #556]	@ (8002170 <menu+0xd0c>)
 8001f44:	7013      	strb	r3, [r2, #0]

			if(altLimit > 1) {
 8001f46:	4b8a      	ldr	r3, [pc, #552]	@ (8002170 <menu+0xd0c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d902      	bls.n	8001f54 <menu+0xaf0>
				altLimit = 0;
 8001f4e:	4a88      	ldr	r2, [pc, #544]	@ (8002170 <menu+0xd0c>)
 8001f50:	2300      	movs	r3, #0
 8001f52:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8001f54:	f002 f8aa 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f58:	2104      	movs	r1, #4
 8001f5a:	4887      	ldr	r0, [pc, #540]	@ (8002178 <menu+0xd14>)
 8001f5c:	f009 fdfa 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d119      	bne.n	8001f9a <menu+0xb36>
 8001f66:	4b85      	ldr	r3, [pc, #532]	@ (800217c <menu+0xd18>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <menu+0xb36>
 8001f74:	4b82      	ldr	r3, [pc, #520]	@ (8002180 <menu+0xd1c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <menu+0xb36>
			altLimit = altLimit - 1;
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002170 <menu+0xd0c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4a7a      	ldr	r2, [pc, #488]	@ (8002170 <menu+0xd0c>)
 8001f86:	7013      	strb	r3, [r2, #0]

		   	if(altLimit > 0){
 8001f88:	4b79      	ldr	r3, [pc, #484]	@ (8002170 <menu+0xd0c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <menu+0xb32>
		   		altLimit = 1;
 8001f90:	4a77      	ldr	r2, [pc, #476]	@ (8002170 <menu+0xd0c>)
 8001f92:	2301      	movs	r3, #1
 8001f94:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8001f96:	f002 f889 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4876      	ldr	r0, [pc, #472]	@ (8002178 <menu+0xd14>)
 8001f9e:	f009 fdd9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d147      	bne.n	8002038 <menu+0xbd4>
 8001fa8:	4b74      	ldr	r3, [pc, #464]	@ (800217c <menu+0xd18>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d040      	beq.n	8002038 <menu+0xbd4>
			eepromData[5] = altLimit;
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002170 <menu+0xd0c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001fc2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002184 <menu+0xd20>)
 8001fc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8001fcc:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001fd0:	4b67      	ldr	r3, [pc, #412]	@ (8002170 <menu+0xd0c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d118      	bne.n	800200a <menu+0xba6>
 8001fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002188 <menu+0xd24>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <menu+0xb84>
 8001fe0:	4b69      	ldr	r3, [pc, #420]	@ (8002188 <menu+0xd24>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d110      	bne.n	800200a <menu+0xba6>
				kapiTablaAcKonum = 3;
 8001fe8:	4a67      	ldr	r2, [pc, #412]	@ (8002188 <menu+0xd24>)
 8001fea:	2303      	movs	r3, #3
 8001fec:	7013      	strb	r3, [r2, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001fee:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <menu+0xd24>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ffa:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001ffe:	4b61      	ldr	r3, [pc, #388]	@ (8002184 <menu+0xd20>)
 8002000:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002004:	e9c3 1244 	strd	r1, r2, [r3, #272]	@ 0x110
 8002008:	e013      	b.n	8002032 <menu+0xbce>
			} else if(altLimit == 0) {
 800200a:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <menu+0xd0c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <menu+0xbce>
				platformSilindirTipi = 0;
 8002012:	4a5e      	ldr	r2, [pc, #376]	@ (800218c <menu+0xd28>)
 8002014:	2300      	movs	r3, #0
 8002016:	7013      	strb	r3, [r2, #0]
				eepromData[19] = platformSilindirTipi;
 8002018:	4b5c      	ldr	r3, [pc, #368]	@ (800218c <menu+0xd28>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2200      	movs	r2, #0
 8002020:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002024:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002028:	4b56      	ldr	r3, [pc, #344]	@ (8002184 <menu+0xd20>)
 800202a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800202e:	e9c3 1226 	strd	r1, r2, [r3, #152]	@ 0x98
			}

			hafizaYaz = 1;
 8002032:	4a57      	ldr	r2, [pc, #348]	@ (8002190 <menu+0xd2c>)
 8002034:	2301      	movs	r3, #1
 8002036:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 6) {
 8002038:	4b56      	ldr	r3, [pc, #344]	@ (8002194 <menu+0xd30>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b06      	cmp	r3, #6
 800203e:	d16f      	bne.n	8002120 <menu+0xcbc>
		lcd_print(1, 1, basincSalteriText);
 8002040:	4a55      	ldr	r2, [pc, #340]	@ (8002198 <menu+0xd34>)
 8002042:	2101      	movs	r1, #1
 8002044:	2001      	movs	r0, #1
 8002046:	f008 fa5b 	bl	800a500 <lcd_print>

		if(basincSalteri == 0) {
 800204a:	4b54      	ldr	r3, [pc, #336]	@ (800219c <menu+0xd38>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <menu+0xbfa>
			lcd_print(2, 1, pasifText);
 8002052:	4a53      	ldr	r2, [pc, #332]	@ (80021a0 <menu+0xd3c>)
 8002054:	2101      	movs	r1, #1
 8002056:	2002      	movs	r0, #2
 8002058:	f008 fa52 	bl	800a500 <lcd_print>
 800205c:	e008      	b.n	8002070 <menu+0xc0c>
		} else if(basincSalteri == 1) {
 800205e:	4b4f      	ldr	r3, [pc, #316]	@ (800219c <menu+0xd38>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d104      	bne.n	8002070 <menu+0xc0c>
			lcd_print(2, 1, aktifText);
 8002066:	4a43      	ldr	r2, [pc, #268]	@ (8002174 <menu+0xd10>)
 8002068:	2101      	movs	r1, #1
 800206a:	2002      	movs	r0, #2
 800206c:	f008 fa48 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002070:	2102      	movs	r1, #2
 8002072:	4841      	ldr	r0, [pc, #260]	@ (8002178 <menu+0xd14>)
 8002074:	f009 fd6e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d115      	bne.n	80020aa <menu+0xc46>
 800207e:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <menu+0xd18>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f083 0301 	eor.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <menu+0xc46>
			basincSalteri = basincSalteri + 1;
 800208c:	4b43      	ldr	r3, [pc, #268]	@ (800219c <menu+0xd38>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4a41      	ldr	r2, [pc, #260]	@ (800219c <menu+0xd38>)
 8002096:	7013      	strb	r3, [r2, #0]

			if(basincSalteri > 1){
 8002098:	4b40      	ldr	r3, [pc, #256]	@ (800219c <menu+0xd38>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d902      	bls.n	80020a6 <menu+0xc42>
				basincSalteri = 0;
 80020a0:	4a3e      	ldr	r2, [pc, #248]	@ (800219c <menu+0xd38>)
 80020a2:	2300      	movs	r3, #0
 80020a4:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 80020a6:	f002 f801 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020aa:	2104      	movs	r1, #4
 80020ac:	4832      	ldr	r0, [pc, #200]	@ (8002178 <menu+0xd14>)
 80020ae:	f009 fd51 	bl	800bb54 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d115      	bne.n	80020e4 <menu+0xc80>
 80020b8:	4b30      	ldr	r3, [pc, #192]	@ (800217c <menu+0xd18>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00e      	beq.n	80020e4 <menu+0xc80>
			basincSalteri = basincSalteri - 1;
 80020c6:	4b35      	ldr	r3, [pc, #212]	@ (800219c <menu+0xd38>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4a33      	ldr	r2, [pc, #204]	@ (800219c <menu+0xd38>)
 80020d0:	7013      	strb	r3, [r2, #0]

		   	if(basincSalteri > 0){
 80020d2:	4b32      	ldr	r3, [pc, #200]	@ (800219c <menu+0xd38>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <menu+0xc7c>
		   		basincSalteri = 1;
 80020da:	4a30      	ldr	r2, [pc, #192]	@ (800219c <menu+0xd38>)
 80020dc:	2301      	movs	r3, #1
 80020de:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 80020e0:	f001 ffe4 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e4:	2108      	movs	r1, #8
 80020e6:	4824      	ldr	r0, [pc, #144]	@ (8002178 <menu+0xd14>)
 80020e8:	f009 fd34 	bl	800bb54 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d116      	bne.n	8002120 <menu+0xcbc>
 80020f2:	4b22      	ldr	r3, [pc, #136]	@ (800217c <menu+0xd18>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00f      	beq.n	8002120 <menu+0xcbc>
			eepromData[6] = basincSalteri;
 8002100:	4b26      	ldr	r3, [pc, #152]	@ (800219c <menu+0xd38>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800210c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <menu+0xd20>)
 8002112:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002116:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 800211a:	4a1d      	ldr	r2, [pc, #116]	@ (8002190 <menu+0xd2c>)
 800211c:	2301      	movs	r3, #1
 800211e:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 7) {
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <menu+0xd30>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b07      	cmp	r3, #7
 8002126:	f040 80ba 	bne.w	800229e <menu+0xe3a>
		lcd_print(1, 1, kapiSecimleriText);
 800212a:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <menu+0xd40>)
 800212c:	2101      	movs	r1, #1
 800212e:	2001      	movs	r0, #1
 8002130:	f008 f9e6 	bl	800a500 <lcd_print>

		if(kapiSecimleri == 0) {
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <menu+0xd44>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <menu+0xce4>
			lcd_print(2, 1, pasifText);
 800213c:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <menu+0xd3c>)
 800213e:	2101      	movs	r1, #1
 8002140:	2002      	movs	r0, #2
 8002142:	f008 f9dd 	bl	800a500 <lcd_print>
 8002146:	e03e      	b.n	80021c6 <menu+0xd62>
		} else if(kapiSecimleri == 1) {
 8002148:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <menu+0xd44>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <menu+0xcf8>
			lcd_print(2, 1, katKapisiAktifText);
 8002150:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <menu+0xd48>)
 8002152:	2101      	movs	r1, #1
 8002154:	2002      	movs	r0, #2
 8002156:	f008 f9d3 	bl	800a500 <lcd_print>
 800215a:	e034      	b.n	80021c6 <menu+0xd62>
		} else if(kapiSecimleri == 2) {
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <menu+0xd44>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d127      	bne.n	80021b4 <menu+0xd50>
			lcd_print(2, 1, tablaKapiAktifText);
 8002164:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <menu+0xd4c>)
 8002166:	2101      	movs	r1, #1
 8002168:	2002      	movs	r0, #2
 800216a:	f008 f9c9 	bl	800a500 <lcd_print>
 800216e:	e02a      	b.n	80021c6 <menu+0xd62>
 8002170:	200013d6 	.word	0x200013d6
 8002174:	200016c4 	.word	0x200016c4
 8002178:	40010800 	.word	0x40010800
 800217c:	200013ff 	.word	0x200013ff
 8002180:	200013d1 	.word	0x200013d1
 8002184:	20000ff0 	.word	0x20000ff0
 8002188:	200013dd 	.word	0x200013dd
 800218c:	200013e3 	.word	0x200013e3
 8002190:	200013fc 	.word	0x200013fc
 8002194:	200013d0 	.word	0x200013d0
 8002198:	20001700 	.word	0x20001700
 800219c:	200013d7 	.word	0x200013d7
 80021a0:	200016b0 	.word	0x200016b0
 80021a4:	20001714 	.word	0x20001714
 80021a8:	200013d8 	.word	0x200013d8
 80021ac:	20001728 	.word	0x20001728
 80021b0:	2000173c 	.word	0x2000173c
		} else if(kapiSecimleri == 3) {
 80021b4:	4b83      	ldr	r3, [pc, #524]	@ (80023c4 <menu+0xf60>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d104      	bne.n	80021c6 <menu+0xd62>
			lcd_print(2, 1, katArtiTablaAktifText);
 80021bc:	4a82      	ldr	r2, [pc, #520]	@ (80023c8 <menu+0xf64>)
 80021be:	2101      	movs	r1, #1
 80021c0:	2002      	movs	r0, #2
 80021c2:	f008 f99d 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c6:	2102      	movs	r1, #2
 80021c8:	4880      	ldr	r0, [pc, #512]	@ (80023cc <menu+0xf68>)
 80021ca:	f009 fcc3 	bl	800bb54 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d115      	bne.n	8002200 <menu+0xd9c>
 80021d4:	4b7e      	ldr	r3, [pc, #504]	@ (80023d0 <menu+0xf6c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00e      	beq.n	8002200 <menu+0xd9c>
			kapiSecimleri = kapiSecimleri + 1;
 80021e2:	4b78      	ldr	r3, [pc, #480]	@ (80023c4 <menu+0xf60>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4a76      	ldr	r2, [pc, #472]	@ (80023c4 <menu+0xf60>)
 80021ec:	7013      	strb	r3, [r2, #0]

			if(kapiSecimleri > 3){
 80021ee:	4b75      	ldr	r3, [pc, #468]	@ (80023c4 <menu+0xf60>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d902      	bls.n	80021fc <menu+0xd98>
				kapiSecimleri = 0;
 80021f6:	4a73      	ldr	r2, [pc, #460]	@ (80023c4 <menu+0xf60>)
 80021f8:	2300      	movs	r3, #0
 80021fa:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 80021fc:	f001 ff56 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002200:	2104      	movs	r1, #4
 8002202:	4872      	ldr	r0, [pc, #456]	@ (80023cc <menu+0xf68>)
 8002204:	f009 fca6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	2b01      	cmp	r3, #1
 800220c:	d115      	bne.n	800223a <menu+0xdd6>
 800220e:	4b70      	ldr	r3, [pc, #448]	@ (80023d0 <menu+0xf6c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <menu+0xdd6>
			kapiSecimleri = kapiSecimleri - 1;
 800221c:	4b69      	ldr	r3, [pc, #420]	@ (80023c4 <menu+0xf60>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3b01      	subs	r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4a67      	ldr	r2, [pc, #412]	@ (80023c4 <menu+0xf60>)
 8002226:	7013      	strb	r3, [r2, #0]

		   	if(kapiSecimleri > 4){
 8002228:	4b66      	ldr	r3, [pc, #408]	@ (80023c4 <menu+0xf60>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d902      	bls.n	8002236 <menu+0xdd2>
		   		kapiSecimleri = 3;
 8002230:	4a64      	ldr	r2, [pc, #400]	@ (80023c4 <menu+0xf60>)
 8002232:	2303      	movs	r3, #3
 8002234:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002236:	f001 ff39 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800223a:	2108      	movs	r1, #8
 800223c:	4863      	ldr	r0, [pc, #396]	@ (80023cc <menu+0xf68>)
 800223e:	f009 fc89 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d12a      	bne.n	800229e <menu+0xe3a>
 8002248:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <menu+0xf6c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d023      	beq.n	800229e <menu+0xe3a>
			eepromData[7] = kapiSecimleri;
 8002256:	4b5b      	ldr	r3, [pc, #364]	@ (80023c4 <menu+0xf60>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2200      	movs	r2, #0
 800225e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002262:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002266:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <menu+0xf70>)
 8002268:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800226c:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38

			if(kapiSecimleri >= 1) {
 8002270:	4b54      	ldr	r3, [pc, #336]	@ (80023c4 <menu+0xf60>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00f      	beq.n	8002298 <menu+0xe34>
				altLimit = 1;
 8002278:	4a57      	ldr	r2, [pc, #348]	@ (80023d8 <menu+0xf74>)
 800227a:	2301      	movs	r3, #1
 800227c:	7013      	strb	r3, [r2, #0]
				eepromData[5] = altLimit;
 800227e:	4b56      	ldr	r3, [pc, #344]	@ (80023d8 <menu+0xf74>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2200      	movs	r2, #0
 8002286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800228a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800228e:	4b51      	ldr	r3, [pc, #324]	@ (80023d4 <menu+0xf70>)
 8002290:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002294:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			}
			hafizaYaz = 1;
 8002298:	4a50      	ldr	r2, [pc, #320]	@ (80023dc <menu+0xf78>)
 800229a:	2301      	movs	r3, #1
 800229c:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 8) {
 800229e:	4b50      	ldr	r3, [pc, #320]	@ (80023e0 <menu+0xf7c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d16f      	bne.n	8002386 <menu+0xf22>
		lcd_print(1, 1, kapiAcmaTipiText);
 80022a6:	4a4f      	ldr	r2, [pc, #316]	@ (80023e4 <menu+0xf80>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	2001      	movs	r0, #1
 80022ac:	f008 f928 	bl	800a500 <lcd_print>

		if(kapiAcTipi == 0) {
 80022b0:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <menu+0xf84>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <menu+0xe60>
			lcd_print(2, 1, kapiButonuESPText);
 80022b8:	4a4c      	ldr	r2, [pc, #304]	@ (80023ec <menu+0xf88>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	2002      	movs	r0, #2
 80022be:	f008 f91f 	bl	800a500 <lcd_print>
 80022c2:	e008      	b.n	80022d6 <menu+0xe72>
		} else if(kapiAcTipi == 1){
 80022c4:	4b48      	ldr	r3, [pc, #288]	@ (80023e8 <menu+0xf84>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d104      	bne.n	80022d6 <menu+0xe72>
			lcd_print(2, 1, katButonuEXTText);
 80022cc:	4a48      	ldr	r2, [pc, #288]	@ (80023f0 <menu+0xf8c>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	2002      	movs	r0, #2
 80022d2:	f008 f915 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d6:	2102      	movs	r1, #2
 80022d8:	483c      	ldr	r0, [pc, #240]	@ (80023cc <menu+0xf68>)
 80022da:	f009 fc3b 	bl	800bb54 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d115      	bne.n	8002310 <menu+0xeac>
 80022e4:	4b3a      	ldr	r3, [pc, #232]	@ (80023d0 <menu+0xf6c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <menu+0xeac>
			kapiAcTipi = kapiAcTipi + 1;
 80022f2:	4b3d      	ldr	r3, [pc, #244]	@ (80023e8 <menu+0xf84>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4a3b      	ldr	r2, [pc, #236]	@ (80023e8 <menu+0xf84>)
 80022fc:	7013      	strb	r3, [r2, #0]

			if(kapiAcTipi > 1){
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <menu+0xf84>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d902      	bls.n	800230c <menu+0xea8>
				kapiAcTipi = 0;
 8002306:	4a38      	ldr	r2, [pc, #224]	@ (80023e8 <menu+0xf84>)
 8002308:	2300      	movs	r3, #0
 800230a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 800230c:	f001 fece 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002310:	2104      	movs	r1, #4
 8002312:	482e      	ldr	r0, [pc, #184]	@ (80023cc <menu+0xf68>)
 8002314:	f009 fc1e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d115      	bne.n	800234a <menu+0xee6>
 800231e:	4b2c      	ldr	r3, [pc, #176]	@ (80023d0 <menu+0xf6c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <menu+0xee6>
			kapiAcTipi = kapiAcTipi - 1;
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <menu+0xf84>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	3b01      	subs	r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4a2c      	ldr	r2, [pc, #176]	@ (80023e8 <menu+0xf84>)
 8002336:	7013      	strb	r3, [r2, #0]

		   	if(kapiAcTipi > 0){
 8002338:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <menu+0xf84>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <menu+0xee2>
		   		kapiAcTipi = 1;
 8002340:	4a29      	ldr	r2, [pc, #164]	@ (80023e8 <menu+0xf84>)
 8002342:	2301      	movs	r3, #1
 8002344:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002346:	f001 feb1 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800234a:	2108      	movs	r1, #8
 800234c:	481f      	ldr	r0, [pc, #124]	@ (80023cc <menu+0xf68>)
 800234e:	f009 fc01 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d116      	bne.n	8002386 <menu+0xf22>
 8002358:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <menu+0xf6c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00f      	beq.n	8002386 <menu+0xf22>
			eepromData[36] = kapiAcTipi;
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <menu+0xf84>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2200      	movs	r2, #0
 800236e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002372:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002376:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <menu+0xf70>)
 8002378:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800237c:	e9c3 1248 	strd	r1, r2, [r3, #288]	@ 0x120
			hafizaYaz = 1;
 8002380:	4a16      	ldr	r2, [pc, #88]	@ (80023dc <menu+0xf78>)
 8002382:	2301      	movs	r3, #1
 8002384:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 9) {
 8002386:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <menu+0xf7c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b09      	cmp	r3, #9
 800238c:	f040 809b 	bne.w	80024c6 <menu+0x1062>
		lcd_print(1, 1, birKatKapiTipiText);
 8002390:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <menu+0xf90>)
 8002392:	2101      	movs	r1, #1
 8002394:	2001      	movs	r0, #1
 8002396:	f008 f8b3 	bl	800a500 <lcd_print>

		if(kapi1Tip == 0) {
 800239a:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <menu+0xf94>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <menu+0xf4a>
			lcd_print(2, 1, prudhomeTextGN);
 80023a2:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <menu+0xf98>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f008 f8aa 	bl	800a500 <lcd_print>
 80023ac:	e033      	b.n	8002416 <menu+0xfb2>
		} else if(kapi1Tip == 1) {
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <menu+0xf94>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d126      	bne.n	8002404 <menu+0xfa0>
			lcd_print(2, 1, butonKontrolluText);
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <menu+0xf9c>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f008 f8a0 	bl	800a500 <lcd_print>
 80023c0:	e029      	b.n	8002416 <menu+0xfb2>
 80023c2:	bf00      	nop
 80023c4:	200013d8 	.word	0x200013d8
 80023c8:	20001750 	.word	0x20001750
 80023cc:	40010800 	.word	0x40010800
 80023d0:	200013ff 	.word	0x200013ff
 80023d4:	20000ff0 	.word	0x20000ff0
 80023d8:	200013d6 	.word	0x200013d6
 80023dc:	200013fc 	.word	0x200013fc
 80023e0:	200013d0 	.word	0x200013d0
 80023e4:	20001764 	.word	0x20001764
 80023e8:	200013dc 	.word	0x200013dc
 80023ec:	20001778 	.word	0x20001778
 80023f0:	2000178c 	.word	0x2000178c
 80023f4:	200017a0 	.word	0x200017a0
 80023f8:	200013d9 	.word	0x200013d9
 80023fc:	20000100 	.word	0x20000100
 8002400:	200017b4 	.word	0x200017b4
		} else if(kapi1Tip == 2) {
 8002404:	4b7c      	ldr	r3, [pc, #496]	@ (80025f8 <menu+0x1194>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d104      	bne.n	8002416 <menu+0xfb2>
			lcd_print(2, 1, pizzattoTextGN);
 800240c:	4a7b      	ldr	r2, [pc, #492]	@ (80025fc <menu+0x1198>)
 800240e:	2101      	movs	r1, #1
 8002410:	2002      	movs	r0, #2
 8002412:	f008 f875 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002416:	2102      	movs	r1, #2
 8002418:	4879      	ldr	r0, [pc, #484]	@ (8002600 <menu+0x119c>)
 800241a:	f009 fb9b 	bl	800bb54 <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d115      	bne.n	8002450 <menu+0xfec>
 8002424:	4b77      	ldr	r3, [pc, #476]	@ (8002604 <menu+0x11a0>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <menu+0xfec>
			kapi1Tip = kapi1Tip + 1;
 8002432:	4b71      	ldr	r3, [pc, #452]	@ (80025f8 <menu+0x1194>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4a6f      	ldr	r2, [pc, #444]	@ (80025f8 <menu+0x1194>)
 800243c:	7013      	strb	r3, [r2, #0]

			if(kapi1Tip > 2){
 800243e:	4b6e      	ldr	r3, [pc, #440]	@ (80025f8 <menu+0x1194>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d902      	bls.n	800244c <menu+0xfe8>
				kapi1Tip = 0;
 8002446:	4a6c      	ldr	r2, [pc, #432]	@ (80025f8 <menu+0x1194>)
 8002448:	2300      	movs	r3, #0
 800244a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 800244c:	f001 fe2e 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002450:	2104      	movs	r1, #4
 8002452:	486b      	ldr	r0, [pc, #428]	@ (8002600 <menu+0x119c>)
 8002454:	f009 fb7e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d115      	bne.n	800248a <menu+0x1026>
 800245e:	4b69      	ldr	r3, [pc, #420]	@ (8002604 <menu+0x11a0>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	f083 0301 	eor.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <menu+0x1026>
			kapi1Tip = kapi1Tip - 1;
 800246c:	4b62      	ldr	r3, [pc, #392]	@ (80025f8 <menu+0x1194>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4a60      	ldr	r2, [pc, #384]	@ (80025f8 <menu+0x1194>)
 8002476:	7013      	strb	r3, [r2, #0]

		   	if(kapi1Tip > 3){
 8002478:	4b5f      	ldr	r3, [pc, #380]	@ (80025f8 <menu+0x1194>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d902      	bls.n	8002486 <menu+0x1022>
		   		kapi1Tip = 2;
 8002480:	4a5d      	ldr	r2, [pc, #372]	@ (80025f8 <menu+0x1194>)
 8002482:	2302      	movs	r3, #2
 8002484:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002486:	f001 fe11 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800248a:	2108      	movs	r1, #8
 800248c:	485c      	ldr	r0, [pc, #368]	@ (8002600 <menu+0x119c>)
 800248e:	f009 fb61 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	2b01      	cmp	r3, #1
 8002496:	d116      	bne.n	80024c6 <menu+0x1062>
 8002498:	4b5a      	ldr	r3, [pc, #360]	@ (8002604 <menu+0x11a0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00f      	beq.n	80024c6 <menu+0x1062>
			eepromData[8] = kapi1Tip;
 80024a6:	4b54      	ldr	r3, [pc, #336]	@ (80025f8 <menu+0x1194>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024b2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80024b6:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <menu+0x11a4>)
 80024b8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80024bc:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			hafizaYaz = 1;
 80024c0:	4a52      	ldr	r2, [pc, #328]	@ (800260c <menu+0x11a8>)
 80024c2:	2301      	movs	r3, #1
 80024c4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 10) {
 80024c6:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <menu+0x11ac>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d175      	bne.n	80025ba <menu+0x1156>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80024ce:	4a51      	ldr	r2, [pc, #324]	@ (8002614 <menu+0x11b0>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	2001      	movs	r0, #1
 80024d4:	f008 f814 	bl	800a500 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002618 <menu+0x11b4>)
 80024da:	2101      	movs	r1, #1
 80024dc:	2002      	movs	r0, #2
 80024de:	f008 f80f 	bl	800a500 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80024e2:	4b4e      	ldr	r3, [pc, #312]	@ (800261c <menu+0x11b8>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	220a      	movs	r2, #10
 80024e8:	494d      	ldr	r1, [pc, #308]	@ (8002620 <menu+0x11bc>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00c fb5e 	bl	800ebac <itoa>
		lcd_print(2,16,snum);
 80024f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <menu+0x11bc>)
 80024f2:	2110      	movs	r1, #16
 80024f4:	2002      	movs	r0, #2
 80024f6:	f008 f803 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80024fa:	2102      	movs	r1, #2
 80024fc:	4840      	ldr	r0, [pc, #256]	@ (8002600 <menu+0x119c>)
 80024fe:	f009 fb29 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d119      	bne.n	800253c <menu+0x10d8>
 8002508:	4b3e      	ldr	r3, [pc, #248]	@ (8002604 <menu+0x11a0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <menu+0x10d8>
 8002516:	4b38      	ldr	r3, [pc, #224]	@ (80025f8 <menu+0x1194>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10e      	bne.n	800253c <menu+0x10d8>
			kapi1AcSure = kapi1AcSure + 1;
 800251e:	4b3f      	ldr	r3, [pc, #252]	@ (800261c <menu+0x11b8>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4a3d      	ldr	r2, [pc, #244]	@ (800261c <menu+0x11b8>)
 8002528:	7013      	strb	r3, [r2, #0]

			if(kapi1AcSure > 5){
 800252a:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <menu+0x11b8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b05      	cmp	r3, #5
 8002530:	d902      	bls.n	8002538 <menu+0x10d4>
				kapi1AcSure = 0;
 8002532:	4a3a      	ldr	r2, [pc, #232]	@ (800261c <menu+0x11b8>)
 8002534:	2300      	movs	r3, #0
 8002536:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002538:	f001 fdb8 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800253c:	2104      	movs	r1, #4
 800253e:	4830      	ldr	r0, [pc, #192]	@ (8002600 <menu+0x119c>)
 8002540:	f009 fb08 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d119      	bne.n	800257e <menu+0x111a>
 800254a:	4b2e      	ldr	r3, [pc, #184]	@ (8002604 <menu+0x11a0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	f083 0301 	eor.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d012      	beq.n	800257e <menu+0x111a>
 8002558:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <menu+0x1194>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10e      	bne.n	800257e <menu+0x111a>
			kapi1AcSure = kapi1AcSure - 1;
 8002560:	4b2e      	ldr	r3, [pc, #184]	@ (800261c <menu+0x11b8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4a2c      	ldr	r2, [pc, #176]	@ (800261c <menu+0x11b8>)
 800256a:	7013      	strb	r3, [r2, #0]

		   	if(kapi1AcSure > 6){
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <menu+0x11b8>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b06      	cmp	r3, #6
 8002572:	d902      	bls.n	800257a <menu+0x1116>
		   		kapi1AcSure = 5;
 8002574:	4a29      	ldr	r2, [pc, #164]	@ (800261c <menu+0x11b8>)
 8002576:	2305      	movs	r3, #5
 8002578:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 800257a:	f001 fd97 	bl	80040ac <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800257e:	2108      	movs	r1, #8
 8002580:	481f      	ldr	r0, [pc, #124]	@ (8002600 <menu+0x119c>)
 8002582:	f009 fae7 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d116      	bne.n	80025ba <menu+0x1156>
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <menu+0x11a0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00f      	beq.n	80025ba <menu+0x1156>
			eepromData[9] = kapi1AcSure;
 800259a:	4b20      	ldr	r3, [pc, #128]	@ (800261c <menu+0x11b8>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025a6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <menu+0x11a4>)
 80025ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025b0:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
			hafizaYaz = 1;
 80025b4:	4a15      	ldr	r2, [pc, #84]	@ (800260c <menu+0x11a8>)
 80025b6:	2301      	movs	r3, #1
 80025b8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 11) {
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <menu+0x11ac>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b0b      	cmp	r3, #11
 80025c0:	f040 8099 	bne.w	80026f6 <menu+0x1292>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80025c4:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <menu+0x11c0>)
 80025c6:	2101      	movs	r1, #1
 80025c8:	2001      	movs	r0, #1
 80025ca:	f007 ff99 	bl	800a500 <lcd_print>

		if(kapi2Tip == 0) {
 80025ce:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <menu+0x11c4>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <menu+0x117e>
			lcd_print(2, 1, prudhomeTextGN);
 80025d6:	4a15      	ldr	r2, [pc, #84]	@ (800262c <menu+0x11c8>)
 80025d8:	2101      	movs	r1, #1
 80025da:	2002      	movs	r0, #2
 80025dc:	f007 ff90 	bl	800a500 <lcd_print>
 80025e0:	e031      	b.n	8002646 <menu+0x11e2>
		} else if(kapi2Tip == 1) {
 80025e2:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <menu+0x11c4>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d124      	bne.n	8002634 <menu+0x11d0>
			lcd_print(2, 1, butonKontrolluText);
 80025ea:	4a11      	ldr	r2, [pc, #68]	@ (8002630 <menu+0x11cc>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	2002      	movs	r0, #2
 80025f0:	f007 ff86 	bl	800a500 <lcd_print>
 80025f4:	e027      	b.n	8002646 <menu+0x11e2>
 80025f6:	bf00      	nop
 80025f8:	200013d9 	.word	0x200013d9
 80025fc:	20000114 	.word	0x20000114
 8002600:	40010800 	.word	0x40010800
 8002604:	200013ff 	.word	0x200013ff
 8002608:	20000ff0 	.word	0x20000ff0
 800260c:	200013fc 	.word	0x200013fc
 8002610:	200013d0 	.word	0x200013d0
 8002614:	200017c8 	.word	0x200017c8
 8002618:	200017dc 	.word	0x200017dc
 800261c:	200013e9 	.word	0x200013e9
 8002620:	20001360 	.word	0x20001360
 8002624:	200017f0 	.word	0x200017f0
 8002628:	200013da 	.word	0x200013da
 800262c:	20000100 	.word	0x20000100
 8002630:	200017b4 	.word	0x200017b4
		} else if(kapi2Tip == 2) {
 8002634:	4b7c      	ldr	r3, [pc, #496]	@ (8002828 <menu+0x13c4>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d104      	bne.n	8002646 <menu+0x11e2>
			lcd_print(2, 1, pizzattoTextGN);
 800263c:	4a7b      	ldr	r2, [pc, #492]	@ (800282c <menu+0x13c8>)
 800263e:	2101      	movs	r1, #1
 8002640:	2002      	movs	r0, #2
 8002642:	f007 ff5d 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002646:	2102      	movs	r1, #2
 8002648:	4879      	ldr	r0, [pc, #484]	@ (8002830 <menu+0x13cc>)
 800264a:	f009 fa83 	bl	800bb54 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d115      	bne.n	8002680 <menu+0x121c>
 8002654:	4b77      	ldr	r3, [pc, #476]	@ (8002834 <menu+0x13d0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f083 0301 	eor.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <menu+0x121c>
			kapi2Tip = kapi2Tip + 1;
 8002662:	4b71      	ldr	r3, [pc, #452]	@ (8002828 <menu+0x13c4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4a6f      	ldr	r2, [pc, #444]	@ (8002828 <menu+0x13c4>)
 800266c:	7013      	strb	r3, [r2, #0]

			if(kapi2Tip > 2){
 800266e:	4b6e      	ldr	r3, [pc, #440]	@ (8002828 <menu+0x13c4>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <menu+0x1218>
				kapi2Tip = 0;
 8002676:	4a6c      	ldr	r2, [pc, #432]	@ (8002828 <menu+0x13c4>)
 8002678:	2300      	movs	r3, #0
 800267a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 800267c:	f001 fd16 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002680:	2104      	movs	r1, #4
 8002682:	486b      	ldr	r0, [pc, #428]	@ (8002830 <menu+0x13cc>)
 8002684:	f009 fa66 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d115      	bne.n	80026ba <menu+0x1256>
 800268e:	4b69      	ldr	r3, [pc, #420]	@ (8002834 <menu+0x13d0>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <menu+0x1256>
			kapi2Tip = kapi2Tip - 1;
 800269c:	4b62      	ldr	r3, [pc, #392]	@ (8002828 <menu+0x13c4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4a60      	ldr	r2, [pc, #384]	@ (8002828 <menu+0x13c4>)
 80026a6:	7013      	strb	r3, [r2, #0]

		   	if(kapi2Tip > 3){
 80026a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002828 <menu+0x13c4>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d902      	bls.n	80026b6 <menu+0x1252>
		   		kapi2Tip = 2;
 80026b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002828 <menu+0x13c4>)
 80026b2:	2302      	movs	r3, #2
 80026b4:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 80026b6:	f001 fcf9 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ba:	2108      	movs	r1, #8
 80026bc:	485c      	ldr	r0, [pc, #368]	@ (8002830 <menu+0x13cc>)
 80026be:	f009 fa49 	bl	800bb54 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d116      	bne.n	80026f6 <menu+0x1292>
 80026c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002834 <menu+0x13d0>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00f      	beq.n	80026f6 <menu+0x1292>
			eepromData[10] = kapi2Tip;
 80026d6:	4b54      	ldr	r3, [pc, #336]	@ (8002828 <menu+0x13c4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2200      	movs	r2, #0
 80026de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026e2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026e6:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <menu+0x13d4>)
 80026e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80026ec:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
			hafizaYaz = 1;
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <menu+0x13d8>)
 80026f2:	2301      	movs	r3, #1
 80026f4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 12) {
 80026f6:	4b52      	ldr	r3, [pc, #328]	@ (8002840 <menu+0x13dc>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d175      	bne.n	80027ea <menu+0x1386>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80026fe:	4a51      	ldr	r2, [pc, #324]	@ (8002844 <menu+0x13e0>)
 8002700:	2101      	movs	r1, #1
 8002702:	2001      	movs	r0, #1
 8002704:	f007 fefc 	bl	800a500 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002708:	4a4f      	ldr	r2, [pc, #316]	@ (8002848 <menu+0x13e4>)
 800270a:	2101      	movs	r1, #1
 800270c:	2002      	movs	r0, #2
 800270e:	f007 fef7 	bl	800a500 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002712:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <menu+0x13e8>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	220a      	movs	r2, #10
 8002718:	494d      	ldr	r1, [pc, #308]	@ (8002850 <menu+0x13ec>)
 800271a:	4618      	mov	r0, r3
 800271c:	f00c fa46 	bl	800ebac <itoa>
		lcd_print(2,16,snum);
 8002720:	4a4b      	ldr	r2, [pc, #300]	@ (8002850 <menu+0x13ec>)
 8002722:	2110      	movs	r1, #16
 8002724:	2002      	movs	r0, #2
 8002726:	f007 feeb 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800272a:	2102      	movs	r1, #2
 800272c:	4840      	ldr	r0, [pc, #256]	@ (8002830 <menu+0x13cc>)
 800272e:	f009 fa11 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002732:	4603      	mov	r3, r0
 8002734:	2b01      	cmp	r3, #1
 8002736:	d119      	bne.n	800276c <menu+0x1308>
 8002738:	4b3e      	ldr	r3, [pc, #248]	@ (8002834 <menu+0x13d0>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f083 0301 	eor.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <menu+0x1308>
 8002746:	4b38      	ldr	r3, [pc, #224]	@ (8002828 <menu+0x13c4>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <menu+0x1308>
			kapi2AcSure = kapi2AcSure + 1;
 800274e:	4b3f      	ldr	r3, [pc, #252]	@ (800284c <menu+0x13e8>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4a3d      	ldr	r2, [pc, #244]	@ (800284c <menu+0x13e8>)
 8002758:	7013      	strb	r3, [r2, #0]

			if(kapi2AcSure > 5) {
 800275a:	4b3c      	ldr	r3, [pc, #240]	@ (800284c <menu+0x13e8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d902      	bls.n	8002768 <menu+0x1304>
				kapi2AcSure = 0;
 8002762:	4a3a      	ldr	r2, [pc, #232]	@ (800284c <menu+0x13e8>)
 8002764:	2300      	movs	r3, #0
 8002766:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002768:	f001 fca0 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800276c:	2104      	movs	r1, #4
 800276e:	4830      	ldr	r0, [pc, #192]	@ (8002830 <menu+0x13cc>)
 8002770:	f009 f9f0 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d119      	bne.n	80027ae <menu+0x134a>
 800277a:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <menu+0x13d0>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	f083 0301 	eor.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <menu+0x134a>
 8002788:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <menu+0x13c4>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10e      	bne.n	80027ae <menu+0x134a>
			kapi2AcSure = kapi2AcSure - 1;
 8002790:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <menu+0x13e8>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b01      	subs	r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <menu+0x13e8>)
 800279a:	7013      	strb	r3, [r2, #0]

		   	if(kapi2AcSure > 6) {
 800279c:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <menu+0x13e8>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b06      	cmp	r3, #6
 80027a2:	d902      	bls.n	80027aa <menu+0x1346>
		   		kapi2AcSure = 5;
 80027a4:	4a29      	ldr	r2, [pc, #164]	@ (800284c <menu+0x13e8>)
 80027a6:	2305      	movs	r3, #5
 80027a8:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 80027aa:	f001 fc7f 	bl	80040ac <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ae:	2108      	movs	r1, #8
 80027b0:	481f      	ldr	r0, [pc, #124]	@ (8002830 <menu+0x13cc>)
 80027b2:	f009 f9cf 	bl	800bb54 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d116      	bne.n	80027ea <menu+0x1386>
 80027bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <menu+0x13d0>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00f      	beq.n	80027ea <menu+0x1386>
			eepromData[11] = kapi2AcSure;
 80027ca:	4b20      	ldr	r3, [pc, #128]	@ (800284c <menu+0x13e8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027d6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80027da:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <menu+0x13d4>)
 80027dc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80027e0:	e9c3 1216 	strd	r1, r2, [r3, #88]	@ 0x58
			hafizaYaz = 1;
 80027e4:	4a15      	ldr	r2, [pc, #84]	@ (800283c <menu+0x13d8>)
 80027e6:	2301      	movs	r3, #1
 80027e8:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 13) {
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <menu+0x13dc>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b0d      	cmp	r3, #13
 80027f0:	f040 8099 	bne.w	8002926 <menu+0x14c2>
		lcd_print(1, 1, tablaKapiTipiText);
 80027f4:	4a17      	ldr	r2, [pc, #92]	@ (8002854 <menu+0x13f0>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2001      	movs	r0, #1
 80027fa:	f007 fe81 	bl	800a500 <lcd_print>

		if(kapitablaTip == 0) {
 80027fe:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <menu+0x13f4>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <menu+0x13ae>
			lcd_print(2, 1, prudhomeTextGN);
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <menu+0x13f8>)
 8002808:	2101      	movs	r1, #1
 800280a:	2002      	movs	r0, #2
 800280c:	f007 fe78 	bl	800a500 <lcd_print>
 8002810:	e031      	b.n	8002876 <menu+0x1412>
		} else if(kapitablaTip == 1) {
 8002812:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <menu+0x13f4>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d124      	bne.n	8002864 <menu+0x1400>
			lcd_print(2, 1, butonKontrolluText);
 800281a:	4a11      	ldr	r2, [pc, #68]	@ (8002860 <menu+0x13fc>)
 800281c:	2101      	movs	r1, #1
 800281e:	2002      	movs	r0, #2
 8002820:	f007 fe6e 	bl	800a500 <lcd_print>
 8002824:	e027      	b.n	8002876 <menu+0x1412>
 8002826:	bf00      	nop
 8002828:	200013da 	.word	0x200013da
 800282c:	20000114 	.word	0x20000114
 8002830:	40010800 	.word	0x40010800
 8002834:	200013ff 	.word	0x200013ff
 8002838:	20000ff0 	.word	0x20000ff0
 800283c:	200013fc 	.word	0x200013fc
 8002840:	200013d0 	.word	0x200013d0
 8002844:	20001804 	.word	0x20001804
 8002848:	200017dc 	.word	0x200017dc
 800284c:	200013ea 	.word	0x200013ea
 8002850:	20001360 	.word	0x20001360
 8002854:	20001818 	.word	0x20001818
 8002858:	200013db 	.word	0x200013db
 800285c:	20000100 	.word	0x20000100
 8002860:	200017b4 	.word	0x200017b4
		} else if(kapitablaTip == 2) {
 8002864:	4b44      	ldr	r3, [pc, #272]	@ (8002978 <menu+0x1514>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d104      	bne.n	8002876 <menu+0x1412>
			lcd_print(2, 1, pizzattoTextGN);
 800286c:	4a43      	ldr	r2, [pc, #268]	@ (800297c <menu+0x1518>)
 800286e:	2101      	movs	r1, #1
 8002870:	2002      	movs	r0, #2
 8002872:	f007 fe45 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002876:	2102      	movs	r1, #2
 8002878:	4841      	ldr	r0, [pc, #260]	@ (8002980 <menu+0x151c>)
 800287a:	f009 f96b 	bl	800bb54 <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	2b01      	cmp	r3, #1
 8002882:	d115      	bne.n	80028b0 <menu+0x144c>
 8002884:	4b3f      	ldr	r3, [pc, #252]	@ (8002984 <menu+0x1520>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	f083 0301 	eor.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00e      	beq.n	80028b0 <menu+0x144c>
			kapitablaTip = kapitablaTip + 1;
 8002892:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <menu+0x1514>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4a37      	ldr	r2, [pc, #220]	@ (8002978 <menu+0x1514>)
 800289c:	7013      	strb	r3, [r2, #0]

			if(kapitablaTip > 2) {
 800289e:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <menu+0x1514>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <menu+0x1448>
				kapitablaTip = 0;
 80028a6:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <menu+0x1514>)
 80028a8:	2300      	movs	r3, #0
 80028aa:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 80028ac:	f001 fbfe 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028b0:	2104      	movs	r1, #4
 80028b2:	4833      	ldr	r0, [pc, #204]	@ (8002980 <menu+0x151c>)
 80028b4:	f009 f94e 	bl	800bb54 <HAL_GPIO_ReadPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d115      	bne.n	80028ea <menu+0x1486>
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <menu+0x1520>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <menu+0x1486>
			kapitablaTip = kapitablaTip - 1;
 80028cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002978 <menu+0x1514>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <menu+0x1514>)
 80028d6:	7013      	strb	r3, [r2, #0]

		   	if(kapitablaTip > 3) {
 80028d8:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <menu+0x1514>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d902      	bls.n	80028e6 <menu+0x1482>
		   		kapitablaTip = 2;
 80028e0:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <menu+0x1514>)
 80028e2:	2302      	movs	r3, #2
 80028e4:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 80028e6:	f001 fbe1 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ea:	2108      	movs	r1, #8
 80028ec:	4824      	ldr	r0, [pc, #144]	@ (8002980 <menu+0x151c>)
 80028ee:	f009 f931 	bl	800bb54 <HAL_GPIO_ReadPin>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d116      	bne.n	8002926 <menu+0x14c2>
 80028f8:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <menu+0x1520>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00f      	beq.n	8002926 <menu+0x14c2>
			eepromData[12] = kapitablaTip;
 8002906:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <menu+0x1514>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002912:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002916:	4b1c      	ldr	r3, [pc, #112]	@ (8002988 <menu+0x1524>)
 8002918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800291c:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
			hafizaYaz = 1;
 8002920:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <menu+0x1528>)
 8002922:	2301      	movs	r3, #1
 8002924:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 14) {
 8002926:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <menu+0x152c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b0e      	cmp	r3, #14
 800292c:	f040 80b5 	bne.w	8002a9a <menu+0x1636>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002930:	4a18      	ldr	r2, [pc, #96]	@ (8002994 <menu+0x1530>)
 8002932:	2101      	movs	r1, #1
 8002934:	2001      	movs	r0, #1
 8002936:	f007 fde3 	bl	800a500 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <menu+0x1534>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <menu+0x14ea>
			lcd_print(2, 1, birinciKattaAcText);
 8002942:	4a16      	ldr	r2, [pc, #88]	@ (800299c <menu+0x1538>)
 8002944:	2101      	movs	r1, #1
 8002946:	2002      	movs	r0, #2
 8002948:	f007 fdda 	bl	800a500 <lcd_print>
 800294c:	e035      	b.n	80029ba <menu+0x1556>
		} else if(kapiTablaAcKonum == 1) {
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <menu+0x1534>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <menu+0x14fe>
			lcd_print(2, 1, ikinciKattaAcText);
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <menu+0x153c>)
 8002958:	2101      	movs	r1, #1
 800295a:	2002      	movs	r0, #2
 800295c:	f007 fdd0 	bl	800a500 <lcd_print>
 8002960:	e02b      	b.n	80029ba <menu+0x1556>
		} else if(kapiTablaAcKonum == 2) {
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <menu+0x1534>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d11e      	bne.n	80029a8 <menu+0x1544>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800296a:	4a0e      	ldr	r2, [pc, #56]	@ (80029a4 <menu+0x1540>)
 800296c:	2101      	movs	r1, #1
 800296e:	2002      	movs	r0, #2
 8002970:	f007 fdc6 	bl	800a500 <lcd_print>
 8002974:	e021      	b.n	80029ba <menu+0x1556>
 8002976:	bf00      	nop
 8002978:	200013db 	.word	0x200013db
 800297c:	20000114 	.word	0x20000114
 8002980:	40010800 	.word	0x40010800
 8002984:	200013ff 	.word	0x200013ff
 8002988:	20000ff0 	.word	0x20000ff0
 800298c:	200013fc 	.word	0x200013fc
 8002990:	200013d0 	.word	0x200013d0
 8002994:	2000182c 	.word	0x2000182c
 8002998:	200013dd 	.word	0x200013dd
 800299c:	20001840 	.word	0x20001840
 80029a0:	20001854 	.word	0x20001854
 80029a4:	20001868 	.word	0x20001868
		} else if(kapiTablaAcKonum == 3) {
 80029a8:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <menu+0x1754>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d104      	bne.n	80029ba <menu+0x1556>
			lcd_print(2, 1, pasifText);
 80029b0:	4a82      	ldr	r2, [pc, #520]	@ (8002bbc <menu+0x1758>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	2002      	movs	r0, #2
 80029b6:	f007 fda3 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ba:	2102      	movs	r1, #2
 80029bc:	4880      	ldr	r0, [pc, #512]	@ (8002bc0 <menu+0x175c>)
 80029be:	f009 f8c9 	bl	800bb54 <HAL_GPIO_ReadPin>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d115      	bne.n	80029f4 <menu+0x1590>
 80029c8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc4 <menu+0x1760>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <menu+0x1590>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80029d6:	4b78      	ldr	r3, [pc, #480]	@ (8002bb8 <menu+0x1754>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4a76      	ldr	r2, [pc, #472]	@ (8002bb8 <menu+0x1754>)
 80029e0:	7013      	strb	r3, [r2, #0]

			if(kapiTablaAcKonum > 2){
 80029e2:	4b75      	ldr	r3, [pc, #468]	@ (8002bb8 <menu+0x1754>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <menu+0x158c>
				kapiTablaAcKonum = 0;
 80029ea:	4a73      	ldr	r2, [pc, #460]	@ (8002bb8 <menu+0x1754>)
 80029ec:	2300      	movs	r3, #0
 80029ee:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 80029f0:	f001 fb5c 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f4:	2104      	movs	r1, #4
 80029f6:	4872      	ldr	r0, [pc, #456]	@ (8002bc0 <menu+0x175c>)
 80029f8:	f009 f8ac 	bl	800bb54 <HAL_GPIO_ReadPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d115      	bne.n	8002a2e <menu+0x15ca>
 8002a02:	4b70      	ldr	r3, [pc, #448]	@ (8002bc4 <menu+0x1760>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <menu+0x15ca>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002a10:	4b69      	ldr	r3, [pc, #420]	@ (8002bb8 <menu+0x1754>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4a67      	ldr	r2, [pc, #412]	@ (8002bb8 <menu+0x1754>)
 8002a1a:	7013      	strb	r3, [r2, #0]

		   	if(kapiTablaAcKonum > 3){
 8002a1c:	4b66      	ldr	r3, [pc, #408]	@ (8002bb8 <menu+0x1754>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d902      	bls.n	8002a2a <menu+0x15c6>
		   		kapiTablaAcKonum = 2;
 8002a24:	4a64      	ldr	r2, [pc, #400]	@ (8002bb8 <menu+0x1754>)
 8002a26:	2302      	movs	r3, #2
 8002a28:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002a2a:	f001 fb3f 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2e:	2108      	movs	r1, #8
 8002a30:	4863      	ldr	r0, [pc, #396]	@ (8002bc0 <menu+0x175c>)
 8002a32:	f009 f88f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d12e      	bne.n	8002a9a <menu+0x1636>
 8002a3c:	4b61      	ldr	r3, [pc, #388]	@ (8002bc4 <menu+0x1760>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d027      	beq.n	8002a9a <menu+0x1636>
			eepromData[34] = kapiTablaAcKonum;
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <menu+0x1754>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc8 <menu+0x1764>)
 8002a5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002a60:	e9c3 1244 	strd	r1, r2, [r3, #272]	@ 0x110

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002a64:	4b54      	ldr	r3, [pc, #336]	@ (8002bb8 <menu+0x1754>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <menu+0x1610>
 8002a6c:	4b52      	ldr	r3, [pc, #328]	@ (8002bb8 <menu+0x1754>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d10f      	bne.n	8002a94 <menu+0x1630>
				altLimit = 1;
 8002a74:	4a55      	ldr	r2, [pc, #340]	@ (8002bcc <menu+0x1768>)
 8002a76:	2301      	movs	r3, #1
 8002a78:	7013      	strb	r3, [r2, #0]
				eepromData[5] = altLimit;
 8002a7a:	4b54      	ldr	r3, [pc, #336]	@ (8002bcc <menu+0x1768>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a86:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc8 <menu+0x1764>)
 8002a8c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002a90:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			}

			hafizaYaz = 1;
 8002a94:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd0 <menu+0x176c>)
 8002a96:	2301      	movs	r3, #1
 8002a98:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 15) {
 8002a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd4 <menu+0x1770>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	d175      	bne.n	8002b8e <menu+0x172a>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd8 <menu+0x1774>)
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f007 fd2a 	bl	800a500 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002aac:	4a4b      	ldr	r2, [pc, #300]	@ (8002bdc <menu+0x1778>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	2002      	movs	r0, #2
 8002ab2:	f007 fd25 	bl	800a500 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8002be0 <menu+0x177c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	220a      	movs	r2, #10
 8002abc:	4949      	ldr	r1, [pc, #292]	@ (8002be4 <menu+0x1780>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f00c f874 	bl	800ebac <itoa>
		lcd_print(2,16,snum);
 8002ac4:	4a47      	ldr	r2, [pc, #284]	@ (8002be4 <menu+0x1780>)
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f007 fd19 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ace:	2102      	movs	r1, #2
 8002ad0:	483b      	ldr	r0, [pc, #236]	@ (8002bc0 <menu+0x175c>)
 8002ad2:	f009 f83f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d119      	bne.n	8002b10 <menu+0x16ac>
 8002adc:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <menu+0x1760>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <menu+0x16ac>
 8002aea:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <menu+0x1784>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10e      	bne.n	8002b10 <menu+0x16ac>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <menu+0x177c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4a39      	ldr	r2, [pc, #228]	@ (8002be0 <menu+0x177c>)
 8002afc:	7013      	strb	r3, [r2, #0]

			if(kapiTablaAcSure > 5){
 8002afe:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <menu+0x177c>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d902      	bls.n	8002b0c <menu+0x16a8>
				kapiTablaAcSure = 0;
 8002b06:	4a36      	ldr	r2, [pc, #216]	@ (8002be0 <menu+0x177c>)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002b0c:	f001 face 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002b10:	2104      	movs	r1, #4
 8002b12:	482b      	ldr	r0, [pc, #172]	@ (8002bc0 <menu+0x175c>)
 8002b14:	f009 f81e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d119      	bne.n	8002b52 <menu+0x16ee>
 8002b1e:	4b29      	ldr	r3, [pc, #164]	@ (8002bc4 <menu+0x1760>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <menu+0x16ee>
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002be8 <menu+0x1784>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10e      	bne.n	8002b52 <menu+0x16ee>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002b34:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <menu+0x177c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4a28      	ldr	r2, [pc, #160]	@ (8002be0 <menu+0x177c>)
 8002b3e:	7013      	strb	r3, [r2, #0]

		   	if(kapiTablaAcSure > 6){
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <menu+0x177c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d902      	bls.n	8002b4e <menu+0x16ea>
		   		kapiTablaAcSure = 5;
 8002b48:	4a25      	ldr	r2, [pc, #148]	@ (8002be0 <menu+0x177c>)
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	7013      	strb	r3, [r2, #0]
		   	}

			bekle();
 8002b4e:	f001 faad 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b52:	2108      	movs	r1, #8
 8002b54:	481a      	ldr	r0, [pc, #104]	@ (8002bc0 <menu+0x175c>)
 8002b56:	f008 fffd 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d116      	bne.n	8002b8e <menu+0x172a>
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <menu+0x1760>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f083 0301 	eor.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00f      	beq.n	8002b8e <menu+0x172a>
			eepromData[13] = kapiTablaAcSure;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <menu+0x177c>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <menu+0x1764>)
 8002b80:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002b84:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
			hafizaYaz = 1;
 8002b88:	4a11      	ldr	r2, [pc, #68]	@ (8002bd0 <menu+0x176c>)
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 16) {
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <menu+0x1770>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	f040 808f 	bne.w	8002cb6 <menu+0x1852>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002b98:	4a14      	ldr	r2, [pc, #80]	@ (8002bec <menu+0x1788>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f007 fcaf 	bl	800a500 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <menu+0x178c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d124      	bne.n	8002bf4 <menu+0x1790>
			lcd_print(2, 1, pasifText);
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <menu+0x1758>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	2002      	movs	r0, #2
 8002bb0:	f007 fca6 	bl	800a500 <lcd_print>
 8002bb4:	e027      	b.n	8002c06 <menu+0x17a2>
 8002bb6:	bf00      	nop
 8002bb8:	200013dd 	.word	0x200013dd
 8002bbc:	200016b0 	.word	0x200016b0
 8002bc0:	40010800 	.word	0x40010800
 8002bc4:	200013ff 	.word	0x200013ff
 8002bc8:	20000ff0 	.word	0x20000ff0
 8002bcc:	200013d6 	.word	0x200013d6
 8002bd0:	200013fc 	.word	0x200013fc
 8002bd4:	200013d0 	.word	0x200013d0
 8002bd8:	2000187c 	.word	0x2000187c
 8002bdc:	200017dc 	.word	0x200017dc
 8002be0:	200013eb 	.word	0x200013eb
 8002be4:	20001360 	.word	0x20001360
 8002be8:	200013db 	.word	0x200013db
 8002bec:	20001890 	.word	0x20001890
 8002bf0:	200013de 	.word	0x200013de
		} else if(yukariYavasLimit == 1) {
 8002bf4:	4b94      	ldr	r3, [pc, #592]	@ (8002e48 <menu+0x19e4>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d104      	bne.n	8002c06 <menu+0x17a2>
			lcd_print(2, 1, aktifText);
 8002bfc:	4a93      	ldr	r2, [pc, #588]	@ (8002e4c <menu+0x19e8>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2002      	movs	r0, #2
 8002c02:	f007 fc7d 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c06:	2102      	movs	r1, #2
 8002c08:	4891      	ldr	r0, [pc, #580]	@ (8002e50 <menu+0x19ec>)
 8002c0a:	f008 ffa3 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d115      	bne.n	8002c40 <menu+0x17dc>
 8002c14:	4b8f      	ldr	r3, [pc, #572]	@ (8002e54 <menu+0x19f0>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <menu+0x17dc>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002c22:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <menu+0x19e4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4a87      	ldr	r2, [pc, #540]	@ (8002e48 <menu+0x19e4>)
 8002c2c:	7013      	strb	r3, [r2, #0]

			if(yukariYavasLimit > 1){
 8002c2e:	4b86      	ldr	r3, [pc, #536]	@ (8002e48 <menu+0x19e4>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d902      	bls.n	8002c3c <menu+0x17d8>
				yukariYavasLimit = 0;
 8002c36:	4a84      	ldr	r2, [pc, #528]	@ (8002e48 <menu+0x19e4>)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002c3c:	f001 fa36 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c40:	2104      	movs	r1, #4
 8002c42:	4883      	ldr	r0, [pc, #524]	@ (8002e50 <menu+0x19ec>)
 8002c44:	f008 ff86 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d115      	bne.n	8002c7a <menu+0x1816>
 8002c4e:	4b81      	ldr	r3, [pc, #516]	@ (8002e54 <menu+0x19f0>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <menu+0x1816>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002c5c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e48 <menu+0x19e4>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4a78      	ldr	r2, [pc, #480]	@ (8002e48 <menu+0x19e4>)
 8002c66:	7013      	strb	r3, [r2, #0]

		   	if(yukariYavasLimit > 0){
 8002c68:	4b77      	ldr	r3, [pc, #476]	@ (8002e48 <menu+0x19e4>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <menu+0x1812>
		   		yukariYavasLimit = 1;
 8002c70:	4a75      	ldr	r2, [pc, #468]	@ (8002e48 <menu+0x19e4>)
 8002c72:	2301      	movs	r3, #1
 8002c74:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002c76:	f001 fa19 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c7a:	2108      	movs	r1, #8
 8002c7c:	4874      	ldr	r0, [pc, #464]	@ (8002e50 <menu+0x19ec>)
 8002c7e:	f008 ff69 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d116      	bne.n	8002cb6 <menu+0x1852>
 8002c88:	4b72      	ldr	r3, [pc, #456]	@ (8002e54 <menu+0x19f0>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	f083 0301 	eor.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00f      	beq.n	8002cb6 <menu+0x1852>
			eepromData[14] = yukariYavasLimit;
 8002c96:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <menu+0x19e4>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ca2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e58 <menu+0x19f4>)
 8002ca8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002cac:	e9c3 121c 	strd	r1, r2, [r3, #112]	@ 0x70
			hafizaYaz = 1;
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e5c <menu+0x19f8>)
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 17) {
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e60 <menu+0x19fc>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b11      	cmp	r3, #17
 8002cbc:	f040 80a2 	bne.w	8002e04 <menu+0x19a0>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002cc0:	4a68      	ldr	r2, [pc, #416]	@ (8002e64 <menu+0x1a00>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f007 fc1b 	bl	800a500 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002cca:	4b67      	ldr	r3, [pc, #412]	@ (8002e68 <menu+0x1a04>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d105      	bne.n	8002cde <menu+0x187a>
			lcd_print(2, 1, devirmeAktifText);
 8002cd2:	4a66      	ldr	r2, [pc, #408]	@ (8002e6c <menu+0x1a08>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	f007 fc12 	bl	800a500 <lcd_print>
 8002cdc:	e012      	b.n	8002d04 <menu+0x18a0>
		} else if(devirmeYuruyusSecim == 1) {
 8002cde:	4b62      	ldr	r3, [pc, #392]	@ (8002e68 <menu+0x1a04>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <menu+0x188e>
			lcd_print(2, 1, yuruyusAktifText);
 8002ce6:	4a62      	ldr	r2, [pc, #392]	@ (8002e70 <menu+0x1a0c>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f007 fc08 	bl	800a500 <lcd_print>
 8002cf0:	e008      	b.n	8002d04 <menu+0x18a0>
		} else if(devirmeYuruyusSecim == 0) {
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <menu+0x1a04>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <menu+0x18a0>
			lcd_print(2, 1, pasifText);
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8002e74 <menu+0x1a10>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f007 fbfe 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d04:	2102      	movs	r1, #2
 8002d06:	4852      	ldr	r0, [pc, #328]	@ (8002e50 <menu+0x19ec>)
 8002d08:	f008 ff24 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d115      	bne.n	8002d3e <menu+0x18da>
 8002d12:	4b50      	ldr	r3, [pc, #320]	@ (8002e54 <menu+0x19f0>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <menu+0x18da>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002d20:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <menu+0x1a04>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4a4f      	ldr	r2, [pc, #316]	@ (8002e68 <menu+0x1a04>)
 8002d2a:	7013      	strb	r3, [r2, #0]

			if(devirmeYuruyusSecim > 2){
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e68 <menu+0x1a04>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d902      	bls.n	8002d3a <menu+0x18d6>
				devirmeYuruyusSecim = 0;
 8002d34:	4a4c      	ldr	r2, [pc, #304]	@ (8002e68 <menu+0x1a04>)
 8002d36:	2300      	movs	r3, #0
 8002d38:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002d3a:	f001 f9b7 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3e:	2104      	movs	r1, #4
 8002d40:	4843      	ldr	r0, [pc, #268]	@ (8002e50 <menu+0x19ec>)
 8002d42:	f008 ff07 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d115      	bne.n	8002d78 <menu+0x1914>
 8002d4c:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <menu+0x19f0>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <menu+0x1914>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002d5a:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <menu+0x1a04>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4a41      	ldr	r2, [pc, #260]	@ (8002e68 <menu+0x1a04>)
 8002d64:	7013      	strb	r3, [r2, #0]

		   	if(devirmeYuruyusSecim>3){
 8002d66:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <menu+0x1a04>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d902      	bls.n	8002d74 <menu+0x1910>
		   		devirmeYuruyusSecim = 2;
 8002d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e68 <menu+0x1a04>)
 8002d70:	2302      	movs	r3, #2
 8002d72:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002d74:	f001 f99a 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d78:	2108      	movs	r1, #8
 8002d7a:	4835      	ldr	r0, [pc, #212]	@ (8002e50 <menu+0x19ec>)
 8002d7c:	f008 feea 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d13e      	bne.n	8002e04 <menu+0x19a0>
 8002d86:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <menu+0x19f0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d037      	beq.n	8002e04 <menu+0x19a0>
			eepromData[15] = devirmeYuruyusSecim;
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <menu+0x1a04>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002da0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002da4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e58 <menu+0x19f4>)
 8002da6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002daa:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002dae:	4b2e      	ldr	r3, [pc, #184]	@ (8002e68 <menu+0x1a04>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d003      	beq.n	8002dbe <menu+0x195a>
 8002db6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <menu+0x1a04>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10d      	bne.n	8002dda <menu+0x1976>
				calismaSekli = 0;
 8002dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002e78 <menu+0x1a14>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	7013      	strb	r3, [r2, #0]
				eepromData[1] = calismaSekli;
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e78 <menu+0x1a14>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2200      	movs	r2, #0
 8002dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002dd0:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <menu+0x19f4>)
 8002dd2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002dd6:	e9c3 1202 	strd	r1, r2, [r3, #8]
			}

			if(devirmeYuruyusSecim == 1) {
 8002dda:	4b23      	ldr	r3, [pc, #140]	@ (8002e68 <menu+0x1a04>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10d      	bne.n	8002dfe <menu+0x199a>
				devirmeSilindirTipi = 1;
 8002de2:	4a26      	ldr	r2, [pc, #152]	@ (8002e7c <menu+0x1a18>)
 8002de4:	2301      	movs	r3, #1
 8002de6:	7013      	strb	r3, [r2, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002de8:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <menu+0x1a18>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2200      	movs	r2, #0
 8002df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002df2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002df4:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <menu+0x19f4>)
 8002df6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002dfa:	e9c3 1224 	strd	r1, r2, [r3, #144]	@ 0x90
			}
			hafizaYaz = 1;
 8002dfe:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <menu+0x19f8>)
 8002e00:	2301      	movs	r3, #1
 8002e02:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 18) {
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <menu+0x19fc>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	f040 809e 	bne.w	8002f4a <menu+0x1ae6>
		if(devirmeYuruyusSecim == 2) {
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <menu+0x1a04>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d105      	bne.n	8002e22 <menu+0x19be>
			lcd_print(1, 1, devirmeYukariText);
 8002e16:	4a1a      	ldr	r2, [pc, #104]	@ (8002e80 <menu+0x1a1c>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f007 fb70 	bl	800a500 <lcd_print>
 8002e20:	e008      	b.n	8002e34 <menu+0x19d0>
		} else if(devirmeYuruyusSecim == 1) {
 8002e22:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <menu+0x1a04>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d104      	bne.n	8002e34 <menu+0x19d0>
			lcd_print(1, 1, yuruyusIleriText);
 8002e2a:	4a16      	ldr	r2, [pc, #88]	@ (8002e84 <menu+0x1a20>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f007 fb66 	bl	800a500 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <menu+0x1a24>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d127      	bne.n	8002e8c <menu+0x1a28>
			lcd_print(2, 1, pasifText);
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <menu+0x1a10>)
 8002e3e:	2101      	movs	r1, #1
 8002e40:	2002      	movs	r0, #2
 8002e42:	f007 fb5d 	bl	800a500 <lcd_print>
 8002e46:	e02a      	b.n	8002e9e <menu+0x1a3a>
 8002e48:	200013de 	.word	0x200013de
 8002e4c:	200016c4 	.word	0x200016c4
 8002e50:	40010800 	.word	0x40010800
 8002e54:	200013ff 	.word	0x200013ff
 8002e58:	20000ff0 	.word	0x20000ff0
 8002e5c:	200013fc 	.word	0x200013fc
 8002e60:	200013d0 	.word	0x200013d0
 8002e64:	200018a4 	.word	0x200018a4
 8002e68:	200013df 	.word	0x200013df
 8002e6c:	200018b8 	.word	0x200018b8
 8002e70:	200018cc 	.word	0x200018cc
 8002e74:	200016b0 	.word	0x200016b0
 8002e78:	200013d1 	.word	0x200013d1
 8002e7c:	200013e2 	.word	0x200013e2
 8002e80:	200018e0 	.word	0x200018e0
 8002e84:	200018f4 	.word	0x200018f4
 8002e88:	200013e0 	.word	0x200013e0
		} else if(devirmeYukariIleriLimit == 1){
 8002e8c:	4b80      	ldr	r3, [pc, #512]	@ (8003090 <menu+0x1c2c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d104      	bne.n	8002e9e <menu+0x1a3a>
			lcd_print(2, 1, aktifText);
 8002e94:	4a7f      	ldr	r2, [pc, #508]	@ (8003094 <menu+0x1c30>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	2002      	movs	r0, #2
 8002e9a:	f007 fb31 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	487d      	ldr	r0, [pc, #500]	@ (8003098 <menu+0x1c34>)
 8002ea2:	f008 fe57 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d115      	bne.n	8002ed8 <menu+0x1a74>
 8002eac:	4b7b      	ldr	r3, [pc, #492]	@ (800309c <menu+0x1c38>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	f083 0301 	eor.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <menu+0x1a74>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002eba:	4b75      	ldr	r3, [pc, #468]	@ (8003090 <menu+0x1c2c>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4a73      	ldr	r2, [pc, #460]	@ (8003090 <menu+0x1c2c>)
 8002ec4:	7013      	strb	r3, [r2, #0]

			if(devirmeYukariIleriLimit > 1){
 8002ec6:	4b72      	ldr	r3, [pc, #456]	@ (8003090 <menu+0x1c2c>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d902      	bls.n	8002ed4 <menu+0x1a70>
				devirmeYukariIleriLimit = 0;
 8002ece:	4a70      	ldr	r2, [pc, #448]	@ (8003090 <menu+0x1c2c>)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002ed4:	f001 f8ea 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed8:	2104      	movs	r1, #4
 8002eda:	486f      	ldr	r0, [pc, #444]	@ (8003098 <menu+0x1c34>)
 8002edc:	f008 fe3a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d115      	bne.n	8002f12 <menu+0x1aae>
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800309c <menu+0x1c38>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <menu+0x1aae>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002ef4:	4b66      	ldr	r3, [pc, #408]	@ (8003090 <menu+0x1c2c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4a64      	ldr	r2, [pc, #400]	@ (8003090 <menu+0x1c2c>)
 8002efe:	7013      	strb	r3, [r2, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002f00:	4b63      	ldr	r3, [pc, #396]	@ (8003090 <menu+0x1c2c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <menu+0x1aaa>
		   		devirmeYukariIleriLimit = 1;
 8002f08:	4a61      	ldr	r2, [pc, #388]	@ (8003090 <menu+0x1c2c>)
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8002f0e:	f001 f8cd 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f12:	2108      	movs	r1, #8
 8002f14:	4860      	ldr	r0, [pc, #384]	@ (8003098 <menu+0x1c34>)
 8002f16:	f008 fe1d 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d114      	bne.n	8002f4a <menu+0x1ae6>
 8002f20:	4b5e      	ldr	r3, [pc, #376]	@ (800309c <menu+0x1c38>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <menu+0x1ae6>
			eepromData[16] = devirmeYukariIleriLimit;
 8002f2e:	4b58      	ldr	r3, [pc, #352]	@ (8003090 <menu+0x1c2c>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f3a:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <menu+0x1c3c>)
 8002f3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002f40:	e9c3 1220 	strd	r1, r2, [r3, #128]	@ 0x80
			hafizaYaz = 1;
 8002f44:	4a57      	ldr	r2, [pc, #348]	@ (80030a4 <menu+0x1c40>)
 8002f46:	2301      	movs	r3, #1
 8002f48:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 19) {
 8002f4a:	4b57      	ldr	r3, [pc, #348]	@ (80030a8 <menu+0x1c44>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b13      	cmp	r3, #19
 8002f50:	d17b      	bne.n	800304a <menu+0x1be6>
		if(devirmeYuruyusSecim == 2) {
 8002f52:	4b56      	ldr	r3, [pc, #344]	@ (80030ac <menu+0x1c48>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d105      	bne.n	8002f66 <menu+0x1b02>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002f5a:	4a55      	ldr	r2, [pc, #340]	@ (80030b0 <menu+0x1c4c>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f007 face 	bl	800a500 <lcd_print>
 8002f64:	e008      	b.n	8002f78 <menu+0x1b14>
		} else if(devirmeYuruyusSecim == 1) {
 8002f66:	4b51      	ldr	r3, [pc, #324]	@ (80030ac <menu+0x1c48>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d104      	bne.n	8002f78 <menu+0x1b14>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002f6e:	4a51      	ldr	r2, [pc, #324]	@ (80030b4 <menu+0x1c50>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	2001      	movs	r0, #1
 8002f74:	f007 fac4 	bl	800a500 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002f78:	4b4f      	ldr	r3, [pc, #316]	@ (80030b8 <menu+0x1c54>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <menu+0x1b28>
			lcd_print(2, 1, pasifText);
 8002f80:	4a4e      	ldr	r2, [pc, #312]	@ (80030bc <menu+0x1c58>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2002      	movs	r0, #2
 8002f86:	f007 fabb 	bl	800a500 <lcd_print>
 8002f8a:	e008      	b.n	8002f9e <menu+0x1b3a>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80030b8 <menu+0x1c54>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d104      	bne.n	8002f9e <menu+0x1b3a>
			lcd_print(2, 1, aktifText);
 8002f94:	4a3f      	ldr	r2, [pc, #252]	@ (8003094 <menu+0x1c30>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f007 fab1 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	483d      	ldr	r0, [pc, #244]	@ (8003098 <menu+0x1c34>)
 8002fa2:	f008 fdd7 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d115      	bne.n	8002fd8 <menu+0x1b74>
 8002fac:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <menu+0x1c38>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	f083 0301 	eor.w	r3, r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <menu+0x1b74>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002fba:	4b3f      	ldr	r3, [pc, #252]	@ (80030b8 <menu+0x1c54>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80030b8 <menu+0x1c54>)
 8002fc4:	7013      	strb	r3, [r2, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80030b8 <menu+0x1c54>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d902      	bls.n	8002fd4 <menu+0x1b70>
				devirmeAsagiGeriLimit = 0;
 8002fce:	4a3a      	ldr	r2, [pc, #232]	@ (80030b8 <menu+0x1c54>)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8002fd4:	f001 f86a 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd8:	2104      	movs	r1, #4
 8002fda:	482f      	ldr	r0, [pc, #188]	@ (8003098 <menu+0x1c34>)
 8002fdc:	f008 fdba 	bl	800bb54 <HAL_GPIO_ReadPin>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d115      	bne.n	8003012 <menu+0x1bae>
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <menu+0x1c38>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <menu+0x1bae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002ff4:	4b30      	ldr	r3, [pc, #192]	@ (80030b8 <menu+0x1c54>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80030b8 <menu+0x1c54>)
 8002ffe:	7013      	strb	r3, [r2, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003000:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <menu+0x1c54>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <menu+0x1baa>
		   		devirmeAsagiGeriLimit = 1;
 8003008:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <menu+0x1c54>)
 800300a:	2301      	movs	r3, #1
 800300c:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 800300e:	f001 f84d 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003012:	2108      	movs	r1, #8
 8003014:	4820      	ldr	r0, [pc, #128]	@ (8003098 <menu+0x1c34>)
 8003016:	f008 fd9d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d114      	bne.n	800304a <menu+0x1be6>
 8003020:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <menu+0x1c38>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00d      	beq.n	800304a <menu+0x1be6>
			eepromData[17] = devirmeAsagiGeriLimit;
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <menu+0x1c54>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2200      	movs	r2, #0
 8003036:	663b      	str	r3, [r7, #96]	@ 0x60
 8003038:	667a      	str	r2, [r7, #100]	@ 0x64
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <menu+0x1c3c>)
 800303c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003040:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88
			hafizaYaz = 1;
 8003044:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <menu+0x1c40>)
 8003046:	2301      	movs	r3, #1
 8003048:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 20){
 800304a:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <menu+0x1c44>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b14      	cmp	r3, #20
 8003050:	f040 80a5 	bne.w	800319e <menu+0x1d3a>
		if(devirmeYuruyusSecim == 1) {
 8003054:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <menu+0x1c48>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <menu+0x1c04>
			lcd_print(1, 1, yuruyusSecildiText);
 800305c:	4a18      	ldr	r2, [pc, #96]	@ (80030c0 <menu+0x1c5c>)
 800305e:	2101      	movs	r1, #1
 8003060:	2001      	movs	r0, #1
 8003062:	f007 fa4d 	bl	800a500 <lcd_print>
 8003066:	e008      	b.n	800307a <menu+0x1c16>
		} else if(devirmeYuruyusSecim == 2) {
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <menu+0x1c48>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d104      	bne.n	800307a <menu+0x1c16>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8003070:	4a14      	ldr	r2, [pc, #80]	@ (80030c4 <menu+0x1c60>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f007 fa43 	bl	800a500 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 800307a:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <menu+0x1c64>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d126      	bne.n	80030d0 <menu+0x1c6c>
			lcd_print(2, 1, tekTesirText);
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <menu+0x1c68>)
 8003084:	2101      	movs	r1, #1
 8003086:	2002      	movs	r0, #2
 8003088:	f007 fa3a 	bl	800a500 <lcd_print>
 800308c:	e029      	b.n	80030e2 <menu+0x1c7e>
 800308e:	bf00      	nop
 8003090:	200013e0 	.word	0x200013e0
 8003094:	200016c4 	.word	0x200016c4
 8003098:	40010800 	.word	0x40010800
 800309c:	200013ff 	.word	0x200013ff
 80030a0:	20000ff0 	.word	0x20000ff0
 80030a4:	200013fc 	.word	0x200013fc
 80030a8:	200013d0 	.word	0x200013d0
 80030ac:	200013df 	.word	0x200013df
 80030b0:	20001908 	.word	0x20001908
 80030b4:	2000191c 	.word	0x2000191c
 80030b8:	200013e1 	.word	0x200013e1
 80030bc:	200016b0 	.word	0x200016b0
 80030c0:	20001930 	.word	0x20001930
 80030c4:	20001944 	.word	0x20001944
 80030c8:	200013e2 	.word	0x200013e2
 80030cc:	20001958 	.word	0x20001958
		} else if(devirmeSilindirTipi == 1) {
 80030d0:	4b3d      	ldr	r3, [pc, #244]	@ (80031c8 <menu+0x1d64>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d104      	bne.n	80030e2 <menu+0x1c7e>
			lcd_print(2, 1, ciftTesirText);
 80030d8:	4a3c      	ldr	r2, [pc, #240]	@ (80031cc <menu+0x1d68>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f007 fa0f 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80030e2:	2102      	movs	r1, #2
 80030e4:	483a      	ldr	r0, [pc, #232]	@ (80031d0 <menu+0x1d6c>)
 80030e6:	f008 fd35 	bl	800bb54 <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d119      	bne.n	8003124 <menu+0x1cc0>
 80030f0:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <menu+0x1d70>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <menu+0x1cc0>
 80030fe:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <menu+0x1d74>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d10e      	bne.n	8003124 <menu+0x1cc0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003106:	4b30      	ldr	r3, [pc, #192]	@ (80031c8 <menu+0x1d64>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4a2e      	ldr	r2, [pc, #184]	@ (80031c8 <menu+0x1d64>)
 8003110:	7013      	strb	r3, [r2, #0]

			if(devirmeSilindirTipi > 1) {
 8003112:	4b2d      	ldr	r3, [pc, #180]	@ (80031c8 <menu+0x1d64>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d902      	bls.n	8003120 <menu+0x1cbc>
				devirmeSilindirTipi = 0;
 800311a:	4a2b      	ldr	r2, [pc, #172]	@ (80031c8 <menu+0x1d64>)
 800311c:	2300      	movs	r3, #0
 800311e:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8003120:	f000 ffc4 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003124:	2104      	movs	r1, #4
 8003126:	482a      	ldr	r0, [pc, #168]	@ (80031d0 <menu+0x1d6c>)
 8003128:	f008 fd14 	bl	800bb54 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d119      	bne.n	8003166 <menu+0x1d02>
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <menu+0x1d70>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <menu+0x1d02>
 8003140:	4b25      	ldr	r3, [pc, #148]	@ (80031d8 <menu+0x1d74>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d10e      	bne.n	8003166 <menu+0x1d02>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003148:	4b1f      	ldr	r3, [pc, #124]	@ (80031c8 <menu+0x1d64>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4a1d      	ldr	r2, [pc, #116]	@ (80031c8 <menu+0x1d64>)
 8003152:	7013      	strb	r3, [r2, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003154:	4b1c      	ldr	r3, [pc, #112]	@ (80031c8 <menu+0x1d64>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <menu+0x1cfe>
		   		devirmeSilindirTipi = 1;
 800315c:	4a1a      	ldr	r2, [pc, #104]	@ (80031c8 <menu+0x1d64>)
 800315e:	2301      	movs	r3, #1
 8003160:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8003162:	f000 ffa3 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003166:	2108      	movs	r1, #8
 8003168:	4819      	ldr	r0, [pc, #100]	@ (80031d0 <menu+0x1d6c>)
 800316a:	f008 fcf3 	bl	800bb54 <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d114      	bne.n	800319e <menu+0x1d3a>
 8003174:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <menu+0x1d70>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <menu+0x1d3a>
			eepromData[18] = devirmeSilindirTipi;
 8003182:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <menu+0x1d64>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2200      	movs	r2, #0
 800318a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800318c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800318e:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <menu+0x1d78>)
 8003190:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003194:	e9c3 1224 	strd	r1, r2, [r3, #144]	@ 0x90
			hafizaYaz = 1;
 8003198:	4a11      	ldr	r2, [pc, #68]	@ (80031e0 <menu+0x1d7c>)
 800319a:	2301      	movs	r3, #1
 800319c:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 21) {
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <menu+0x1d80>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b15      	cmp	r3, #21
 80031a4:	f040 8097 	bne.w	80032d6 <menu+0x1e72>
		lcd_print(1, 1, platformSilindirTipiText);
 80031a8:	4a0f      	ldr	r2, [pc, #60]	@ (80031e8 <menu+0x1d84>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2001      	movs	r0, #1
 80031ae:	f007 f9a7 	bl	800a500 <lcd_print>

		if(platformSilindirTipi == 0) {
 80031b2:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <menu+0x1d88>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11c      	bne.n	80031f4 <menu+0x1d90>
			lcd_print(2, 1, tekTesirText);
 80031ba:	4a0d      	ldr	r2, [pc, #52]	@ (80031f0 <menu+0x1d8c>)
 80031bc:	2101      	movs	r1, #1
 80031be:	2002      	movs	r0, #2
 80031c0:	f007 f99e 	bl	800a500 <lcd_print>
 80031c4:	e01f      	b.n	8003206 <menu+0x1da2>
 80031c6:	bf00      	nop
 80031c8:	200013e2 	.word	0x200013e2
 80031cc:	2000196c 	.word	0x2000196c
 80031d0:	40010800 	.word	0x40010800
 80031d4:	200013ff 	.word	0x200013ff
 80031d8:	200013df 	.word	0x200013df
 80031dc:	20000ff0 	.word	0x20000ff0
 80031e0:	200013fc 	.word	0x200013fc
 80031e4:	200013d0 	.word	0x200013d0
 80031e8:	20001980 	.word	0x20001980
 80031ec:	200013e3 	.word	0x200013e3
 80031f0:	20001958 	.word	0x20001958
		} else if(platformSilindirTipi == 1) {
 80031f4:	4ba1      	ldr	r3, [pc, #644]	@ (800347c <menu+0x2018>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d104      	bne.n	8003206 <menu+0x1da2>
			lcd_print(2, 1, ciftTesirText);
 80031fc:	4aa0      	ldr	r2, [pc, #640]	@ (8003480 <menu+0x201c>)
 80031fe:	2101      	movs	r1, #1
 8003200:	2002      	movs	r0, #2
 8003202:	f007 f97d 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003206:	2102      	movs	r1, #2
 8003208:	489e      	ldr	r0, [pc, #632]	@ (8003484 <menu+0x2020>)
 800320a:	f008 fca3 	bl	800bb54 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d115      	bne.n	8003240 <menu+0x1ddc>
 8003214:	4b9c      	ldr	r3, [pc, #624]	@ (8003488 <menu+0x2024>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <menu+0x1ddc>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003222:	4b96      	ldr	r3, [pc, #600]	@ (800347c <menu+0x2018>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4a94      	ldr	r2, [pc, #592]	@ (800347c <menu+0x2018>)
 800322c:	7013      	strb	r3, [r2, #0]

			if(platformSilindirTipi > 1) {
 800322e:	4b93      	ldr	r3, [pc, #588]	@ (800347c <menu+0x2018>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d902      	bls.n	800323c <menu+0x1dd8>
				platformSilindirTipi = 0;
 8003236:	4a91      	ldr	r2, [pc, #580]	@ (800347c <menu+0x2018>)
 8003238:	2300      	movs	r3, #0
 800323a:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 800323c:	f000 ff36 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003240:	2104      	movs	r1, #4
 8003242:	4890      	ldr	r0, [pc, #576]	@ (8003484 <menu+0x2020>)
 8003244:	f008 fc86 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d115      	bne.n	800327a <menu+0x1e16>
 800324e:	4b8e      	ldr	r3, [pc, #568]	@ (8003488 <menu+0x2024>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	f083 0301 	eor.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <menu+0x1e16>
			platformSilindirTipi = platformSilindirTipi - 1;
 800325c:	4b87      	ldr	r3, [pc, #540]	@ (800347c <menu+0x2018>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	3b01      	subs	r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4a85      	ldr	r2, [pc, #532]	@ (800347c <menu+0x2018>)
 8003266:	7013      	strb	r3, [r2, #0]

		   	if(platformSilindirTipi > 0) {
 8003268:	4b84      	ldr	r3, [pc, #528]	@ (800347c <menu+0x2018>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <menu+0x1e12>
		   		platformSilindirTipi = 1;
 8003270:	4a82      	ldr	r2, [pc, #520]	@ (800347c <menu+0x2018>)
 8003272:	2301      	movs	r3, #1
 8003274:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8003276:	f000 ff19 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800327a:	2108      	movs	r1, #8
 800327c:	4881      	ldr	r0, [pc, #516]	@ (8003484 <menu+0x2020>)
 800327e:	f008 fc69 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b01      	cmp	r3, #1
 8003286:	d126      	bne.n	80032d6 <menu+0x1e72>
 8003288:	4b7f      	ldr	r3, [pc, #508]	@ (8003488 <menu+0x2024>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f083 0301 	eor.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01f      	beq.n	80032d6 <menu+0x1e72>
			eepromData[19] = platformSilindirTipi;
 8003296:	4b79      	ldr	r3, [pc, #484]	@ (800347c <menu+0x2018>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2200      	movs	r2, #0
 800329e:	653b      	str	r3, [r7, #80]	@ 0x50
 80032a0:	657a      	str	r2, [r7, #84]	@ 0x54
 80032a2:	4b7a      	ldr	r3, [pc, #488]	@ (800348c <menu+0x2028>)
 80032a4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80032a8:	e9c3 1226 	strd	r1, r2, [r3, #152]	@ 0x98

			if(platformSilindirTipi == 1) {
 80032ac:	4b73      	ldr	r3, [pc, #460]	@ (800347c <menu+0x2018>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10d      	bne.n	80032d0 <menu+0x1e6c>
				altLimit = 1;
 80032b4:	4a76      	ldr	r2, [pc, #472]	@ (8003490 <menu+0x202c>)
 80032b6:	2301      	movs	r3, #1
 80032b8:	7013      	strb	r3, [r2, #0]
				eepromData[5] = altLimit;
 80032ba:	4b75      	ldr	r3, [pc, #468]	@ (8003490 <menu+0x202c>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2200      	movs	r2, #0
 80032c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032c6:	4b71      	ldr	r3, [pc, #452]	@ (800348c <menu+0x2028>)
 80032c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80032cc:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			}
			hafizaYaz = 1;
 80032d0:	4a70      	ldr	r2, [pc, #448]	@ (8003494 <menu+0x2030>)
 80032d2:	2301      	movs	r3, #1
 80032d4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 22) {
 80032d6:	4b70      	ldr	r3, [pc, #448]	@ (8003498 <menu+0x2034>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b16      	cmp	r3, #22
 80032dc:	d16b      	bne.n	80033b6 <menu+0x1f52>
		lcd_print(1, 1, yukariValfSureText);
 80032de:	4a6f      	ldr	r2, [pc, #444]	@ (800349c <menu+0x2038>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	2001      	movs	r0, #1
 80032e4:	f007 f90c 	bl	800a500 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032e8:	4a6d      	ldr	r2, [pc, #436]	@ (80034a0 <menu+0x203c>)
 80032ea:	2101      	movs	r1, #1
 80032ec:	2002      	movs	r0, #2
 80032ee:	f007 f907 	bl	800a500 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80032f2:	4b6c      	ldr	r3, [pc, #432]	@ (80034a4 <menu+0x2040>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	220a      	movs	r2, #10
 80032f8:	496b      	ldr	r1, [pc, #428]	@ (80034a8 <menu+0x2044>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f00b fc56 	bl	800ebac <itoa>
		lcd_print(2,16,snum);
 8003300:	4a69      	ldr	r2, [pc, #420]	@ (80034a8 <menu+0x2044>)
 8003302:	2110      	movs	r1, #16
 8003304:	2002      	movs	r0, #2
 8003306:	f007 f8fb 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800330a:	2102      	movs	r1, #2
 800330c:	485d      	ldr	r0, [pc, #372]	@ (8003484 <menu+0x2020>)
 800330e:	f008 fc21 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d115      	bne.n	8003344 <menu+0x1ee0>
 8003318:	4b5b      	ldr	r3, [pc, #364]	@ (8003488 <menu+0x2024>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	f083 0301 	eor.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00e      	beq.n	8003344 <menu+0x1ee0>
			yukariValfTmr = yukariValfTmr + 1;
 8003326:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <menu+0x2040>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4a5d      	ldr	r2, [pc, #372]	@ (80034a4 <menu+0x2040>)
 8003330:	7013      	strb	r3, [r2, #0]

			if(yukariValfTmr > 5) {
 8003332:	4b5c      	ldr	r3, [pc, #368]	@ (80034a4 <menu+0x2040>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d902      	bls.n	8003340 <menu+0x1edc>
				yukariValfTmr = 0;
 800333a:	4a5a      	ldr	r2, [pc, #360]	@ (80034a4 <menu+0x2040>)
 800333c:	2300      	movs	r3, #0
 800333e:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8003340:	f000 feb4 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003344:	2104      	movs	r1, #4
 8003346:	484f      	ldr	r0, [pc, #316]	@ (8003484 <menu+0x2020>)
 8003348:	f008 fc04 	bl	800bb54 <HAL_GPIO_ReadPin>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d115      	bne.n	800337e <menu+0x1f1a>
 8003352:	4b4d      	ldr	r3, [pc, #308]	@ (8003488 <menu+0x2024>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	f083 0301 	eor.w	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <menu+0x1f1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003360:	4b50      	ldr	r3, [pc, #320]	@ (80034a4 <menu+0x2040>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	3b01      	subs	r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4a4e      	ldr	r2, [pc, #312]	@ (80034a4 <menu+0x2040>)
 800336a:	7013      	strb	r3, [r2, #0]

		   	if(yukariValfTmr > 6) {
 800336c:	4b4d      	ldr	r3, [pc, #308]	@ (80034a4 <menu+0x2040>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d902      	bls.n	800337a <menu+0x1f16>
		   		yukariValfTmr = 5;
 8003374:	4a4b      	ldr	r2, [pc, #300]	@ (80034a4 <menu+0x2040>)
 8003376:	2305      	movs	r3, #5
 8003378:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 800337a:	f000 fe97 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800337e:	2108      	movs	r1, #8
 8003380:	4840      	ldr	r0, [pc, #256]	@ (8003484 <menu+0x2020>)
 8003382:	f008 fbe7 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d114      	bne.n	80033b6 <menu+0x1f52>
 800338c:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <menu+0x2024>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	f083 0301 	eor.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <menu+0x1f52>
			eepromData[20] = yukariValfTmr;
 800339a:	4b42      	ldr	r3, [pc, #264]	@ (80034a4 <menu+0x2040>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2200      	movs	r2, #0
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80033a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <menu+0x2028>)
 80033a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80033ac:	e9c3 1228 	strd	r1, r2, [r3, #160]	@ 0xa0
			hafizaYaz = 1;
 80033b0:	4a38      	ldr	r2, [pc, #224]	@ (8003494 <menu+0x2030>)
 80033b2:	2301      	movs	r3, #1
 80033b4:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 23) {
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <menu+0x2034>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b17      	cmp	r3, #23
 80033bc:	f040 8089 	bne.w	80034d2 <menu+0x206e>
		lcd_print(1, 1, asagiValfSureText);
 80033c0:	4a3a      	ldr	r2, [pc, #232]	@ (80034ac <menu+0x2048>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	2001      	movs	r0, #1
 80033c6:	f007 f89b 	bl	800a500 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80033ca:	4a35      	ldr	r2, [pc, #212]	@ (80034a0 <menu+0x203c>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	2002      	movs	r0, #2
 80033d0:	f007 f896 	bl	800a500 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80033d4:	4b36      	ldr	r3, [pc, #216]	@ (80034b0 <menu+0x204c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	220a      	movs	r2, #10
 80033da:	4933      	ldr	r1, [pc, #204]	@ (80034a8 <menu+0x2044>)
 80033dc:	4618      	mov	r0, r3
 80033de:	f00b fbe5 	bl	800ebac <itoa>
		lcd_print(2,16,snum);
 80033e2:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <menu+0x2044>)
 80033e4:	2110      	movs	r1, #16
 80033e6:	2002      	movs	r0, #2
 80033e8:	f007 f88a 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ec:	2102      	movs	r1, #2
 80033ee:	4825      	ldr	r0, [pc, #148]	@ (8003484 <menu+0x2020>)
 80033f0:	f008 fbb0 	bl	800bb54 <HAL_GPIO_ReadPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d115      	bne.n	8003426 <menu+0x1fc2>
 80033fa:	4b23      	ldr	r3, [pc, #140]	@ (8003488 <menu+0x2024>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	f083 0301 	eor.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <menu+0x1fc2>
			asagiValfTmr = asagiValfTmr + 1;
 8003408:	4b29      	ldr	r3, [pc, #164]	@ (80034b0 <menu+0x204c>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	4a27      	ldr	r2, [pc, #156]	@ (80034b0 <menu+0x204c>)
 8003412:	7013      	strb	r3, [r2, #0]

			if(asagiValfTmr > 5) {
 8003414:	4b26      	ldr	r3, [pc, #152]	@ (80034b0 <menu+0x204c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d902      	bls.n	8003422 <menu+0x1fbe>
				asagiValfTmr = 0;
 800341c:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <menu+0x204c>)
 800341e:	2300      	movs	r3, #0
 8003420:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8003422:	f000 fe43 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003426:	2104      	movs	r1, #4
 8003428:	4816      	ldr	r0, [pc, #88]	@ (8003484 <menu+0x2020>)
 800342a:	f008 fb93 	bl	800bb54 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d115      	bne.n	8003460 <menu+0x1ffc>
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <menu+0x2024>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <menu+0x1ffc>
			asagiValfTmr = asagiValfTmr - 1;
 8003442:	4b1b      	ldr	r3, [pc, #108]	@ (80034b0 <menu+0x204c>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <menu+0x204c>)
 800344c:	7013      	strb	r3, [r2, #0]

		   	if(asagiValfTmr > 6) {
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <menu+0x204c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <menu+0x1ff8>
		   		asagiValfTmr = 5;
 8003456:	4a16      	ldr	r2, [pc, #88]	@ (80034b0 <menu+0x204c>)
 8003458:	2305      	movs	r3, #5
 800345a:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 800345c:	f000 fe26 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003460:	2108      	movs	r1, #8
 8003462:	4808      	ldr	r0, [pc, #32]	@ (8003484 <menu+0x2020>)
 8003464:	f008 fb76 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d131      	bne.n	80034d2 <menu+0x206e>
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <menu+0x2024>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	e01b      	b.n	80034b4 <menu+0x2050>
 800347c:	200013e3 	.word	0x200013e3
 8003480:	2000196c 	.word	0x2000196c
 8003484:	40010800 	.word	0x40010800
 8003488:	200013ff 	.word	0x200013ff
 800348c:	20000ff0 	.word	0x20000ff0
 8003490:	200013d6 	.word	0x200013d6
 8003494:	200013fc 	.word	0x200013fc
 8003498:	200013d0 	.word	0x200013d0
 800349c:	20001994 	.word	0x20001994
 80034a0:	200017dc 	.word	0x200017dc
 80034a4:	200013e4 	.word	0x200013e4
 80034a8:	20001360 	.word	0x20001360
 80034ac:	200019a8 	.word	0x200019a8
 80034b0:	200013e5 	.word	0x200013e5
 80034b4:	d00d      	beq.n	80034d2 <menu+0x206e>
			eepromData[21] = asagiValfTmr;
 80034b6:	4b95      	ldr	r3, [pc, #596]	@ (800370c <menu+0x22a8>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034c2:	4b93      	ldr	r3, [pc, #588]	@ (8003710 <menu+0x22ac>)
 80034c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80034c8:	e9c3 122a 	strd	r1, r2, [r3, #168]	@ 0xa8
			hafizaYaz = 1;
 80034cc:	4a91      	ldr	r2, [pc, #580]	@ (8003714 <menu+0x22b0>)
 80034ce:	2301      	movs	r3, #1
 80034d0:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 24) {
 80034d2:	4b91      	ldr	r3, [pc, #580]	@ (8003718 <menu+0x22b4>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b18      	cmp	r3, #24
 80034d8:	d179      	bne.n	80035ce <menu+0x216a>
		if(devirmeYuruyusSecim == 2) {
 80034da:	4b90      	ldr	r3, [pc, #576]	@ (800371c <menu+0x22b8>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d105      	bne.n	80034ee <menu+0x208a>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80034e2:	4a8f      	ldr	r2, [pc, #572]	@ (8003720 <menu+0x22bc>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2001      	movs	r0, #1
 80034e8:	f007 f80a 	bl	800a500 <lcd_print>
 80034ec:	e008      	b.n	8003500 <menu+0x209c>
		} else if(devirmeYuruyusSecim == 1) {
 80034ee:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <menu+0x22b8>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d104      	bne.n	8003500 <menu+0x209c>
			lcd_print(1, 1, ileriValfSureText);
 80034f6:	4a8b      	ldr	r2, [pc, #556]	@ (8003724 <menu+0x22c0>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	2001      	movs	r0, #1
 80034fc:	f007 f800 	bl	800a500 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003500:	4a89      	ldr	r2, [pc, #548]	@ (8003728 <menu+0x22c4>)
 8003502:	2101      	movs	r1, #1
 8003504:	2002      	movs	r0, #2
 8003506:	f006 fffb 	bl	800a500 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <menu+0x22c8>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	220a      	movs	r2, #10
 8003510:	4987      	ldr	r1, [pc, #540]	@ (8003730 <menu+0x22cc>)
 8003512:	4618      	mov	r0, r3
 8003514:	f00b fb4a 	bl	800ebac <itoa>
		lcd_print(2, 16, snum);
 8003518:	4a85      	ldr	r2, [pc, #532]	@ (8003730 <menu+0x22cc>)
 800351a:	2110      	movs	r1, #16
 800351c:	2002      	movs	r0, #2
 800351e:	f006 ffef 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003522:	2102      	movs	r1, #2
 8003524:	4883      	ldr	r0, [pc, #524]	@ (8003734 <menu+0x22d0>)
 8003526:	f008 fb15 	bl	800bb54 <HAL_GPIO_ReadPin>
 800352a:	4603      	mov	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d115      	bne.n	800355c <menu+0x20f8>
 8003530:	4b81      	ldr	r3, [pc, #516]	@ (8003738 <menu+0x22d4>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f083 0301 	eor.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <menu+0x20f8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800353e:	4b7b      	ldr	r3, [pc, #492]	@ (800372c <menu+0x22c8>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4a79      	ldr	r2, [pc, #484]	@ (800372c <menu+0x22c8>)
 8003548:	7013      	strb	r3, [r2, #0]

			if(devirmeYukariIleriTmr > 5) {
 800354a:	4b78      	ldr	r3, [pc, #480]	@ (800372c <menu+0x22c8>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d902      	bls.n	8003558 <menu+0x20f4>
				devirmeYukariIleriTmr = 0;
 8003552:	4a76      	ldr	r2, [pc, #472]	@ (800372c <menu+0x22c8>)
 8003554:	2300      	movs	r3, #0
 8003556:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8003558:	f000 fda8 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800355c:	2104      	movs	r1, #4
 800355e:	4875      	ldr	r0, [pc, #468]	@ (8003734 <menu+0x22d0>)
 8003560:	f008 faf8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d115      	bne.n	8003596 <menu+0x2132>
 800356a:	4b73      	ldr	r3, [pc, #460]	@ (8003738 <menu+0x22d4>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <menu+0x2132>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003578:	4b6c      	ldr	r3, [pc, #432]	@ (800372c <menu+0x22c8>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4a6a      	ldr	r2, [pc, #424]	@ (800372c <menu+0x22c8>)
 8003582:	7013      	strb	r3, [r2, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003584:	4b69      	ldr	r3, [pc, #420]	@ (800372c <menu+0x22c8>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d902      	bls.n	8003592 <menu+0x212e>
		   		devirmeYukariIleriTmr = 5;
 800358c:	4a67      	ldr	r2, [pc, #412]	@ (800372c <menu+0x22c8>)
 800358e:	2305      	movs	r3, #5
 8003590:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 8003592:	f000 fd8b 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2108      	movs	r1, #8
 8003598:	4866      	ldr	r0, [pc, #408]	@ (8003734 <menu+0x22d0>)
 800359a:	f008 fadb 	bl	800bb54 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d114      	bne.n	80035ce <menu+0x216a>
 80035a4:	4b64      	ldr	r3, [pc, #400]	@ (8003738 <menu+0x22d4>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <menu+0x216a>
			eepromData[22] = devirmeYukariIleriTmr;
 80035b2:	4b5e      	ldr	r3, [pc, #376]	@ (800372c <menu+0x22c8>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80035bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80035be:	4b54      	ldr	r3, [pc, #336]	@ (8003710 <menu+0x22ac>)
 80035c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80035c4:	e9c3 122c 	strd	r1, r2, [r3, #176]	@ 0xb0
			hafizaYaz = 1;
 80035c8:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <menu+0x22b0>)
 80035ca:	2301      	movs	r3, #1
 80035cc:	7013      	strb	r3, [r2, #0]
		}
	}

	if (menuSayac == 25) {
 80035ce:	4b52      	ldr	r3, [pc, #328]	@ (8003718 <menu+0x22b4>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b19      	cmp	r3, #25
 80035d4:	d179      	bne.n	80036ca <menu+0x2266>
		if(devirmeYuruyusSecim == 2) {
 80035d6:	4b51      	ldr	r3, [pc, #324]	@ (800371c <menu+0x22b8>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d105      	bne.n	80035ea <menu+0x2186>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80035de:	4a57      	ldr	r2, [pc, #348]	@ (800373c <menu+0x22d8>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2001      	movs	r0, #1
 80035e4:	f006 ff8c 	bl	800a500 <lcd_print>
 80035e8:	e008      	b.n	80035fc <menu+0x2198>
		} else if(devirmeYuruyusSecim == 1) {
 80035ea:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <menu+0x22b8>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d104      	bne.n	80035fc <menu+0x2198>
			lcd_print(1, 1, geriValfSureText);
 80035f2:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <menu+0x22dc>)
 80035f4:	2101      	movs	r1, #1
 80035f6:	2001      	movs	r0, #1
 80035f8:	f006 ff82 	bl	800a500 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80035fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003728 <menu+0x22c4>)
 80035fe:	2101      	movs	r1, #1
 8003600:	2002      	movs	r0, #2
 8003602:	f006 ff7d 	bl	800a500 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003606:	4b4f      	ldr	r3, [pc, #316]	@ (8003744 <menu+0x22e0>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	220a      	movs	r2, #10
 800360c:	4948      	ldr	r1, [pc, #288]	@ (8003730 <menu+0x22cc>)
 800360e:	4618      	mov	r0, r3
 8003610:	f00b facc 	bl	800ebac <itoa>
		lcd_print(2,16,snum);
 8003614:	4a46      	ldr	r2, [pc, #280]	@ (8003730 <menu+0x22cc>)
 8003616:	2110      	movs	r1, #16
 8003618:	2002      	movs	r0, #2
 800361a:	f006 ff71 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2102      	movs	r1, #2
 8003620:	4844      	ldr	r0, [pc, #272]	@ (8003734 <menu+0x22d0>)
 8003622:	f008 fa97 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d115      	bne.n	8003658 <menu+0x21f4>
 800362c:	4b42      	ldr	r3, [pc, #264]	@ (8003738 <menu+0x22d4>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <menu+0x21f4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800363a:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <menu+0x22e0>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4a40      	ldr	r2, [pc, #256]	@ (8003744 <menu+0x22e0>)
 8003644:	7013      	strb	r3, [r2, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003646:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <menu+0x22e0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b05      	cmp	r3, #5
 800364c:	d902      	bls.n	8003654 <menu+0x21f0>
				devirmeAsagiGeriTmr = 0;
 800364e:	4a3d      	ldr	r2, [pc, #244]	@ (8003744 <menu+0x22e0>)
 8003650:	2300      	movs	r3, #0
 8003652:	7013      	strb	r3, [r2, #0]
			}
			bekle();
 8003654:	f000 fd2a 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003658:	2104      	movs	r1, #4
 800365a:	4836      	ldr	r0, [pc, #216]	@ (8003734 <menu+0x22d0>)
 800365c:	f008 fa7a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d115      	bne.n	8003692 <menu+0x222e>
 8003666:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <menu+0x22d4>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <menu+0x222e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003674:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <menu+0x22e0>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	3b01      	subs	r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	4a31      	ldr	r2, [pc, #196]	@ (8003744 <menu+0x22e0>)
 800367e:	7013      	strb	r3, [r2, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003680:	4b30      	ldr	r3, [pc, #192]	@ (8003744 <menu+0x22e0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b06      	cmp	r3, #6
 8003686:	d902      	bls.n	800368e <menu+0x222a>
		   		devirmeAsagiGeriTmr = 5;
 8003688:	4a2e      	ldr	r2, [pc, #184]	@ (8003744 <menu+0x22e0>)
 800368a:	2305      	movs	r3, #5
 800368c:	7013      	strb	r3, [r2, #0]
		   	}
			bekle();
 800368e:	f000 fd0d 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003692:	2108      	movs	r1, #8
 8003694:	4827      	ldr	r0, [pc, #156]	@ (8003734 <menu+0x22d0>)
 8003696:	f008 fa5d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d114      	bne.n	80036ca <menu+0x2266>
 80036a0:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <menu+0x22d4>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <menu+0x2266>
			eepromData[23] = devirmeAsagiGeriTmr;
 80036ae:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <menu+0x22e0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <menu+0x22ac>)
 80036bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80036c0:	e9c3 122e 	strd	r1, r2, [r3, #184]	@ 0xb8
			hafizaYaz = 1;
 80036c4:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <menu+0x22b0>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80036ca:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <menu+0x22b4>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b1a      	cmp	r3, #26
 80036d0:	f040 80c3 	bne.w	800385a <menu+0x23f6>
		lcd_print(1, 1, calismaSuresiText);
 80036d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003748 <menu+0x22e4>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	2001      	movs	r0, #1
 80036da:	f006 ff11 	bl	800a500 <lcd_print>

		if(makineCalismaTmr > 99) {
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <menu+0x22e8>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b63      	cmp	r3, #99	@ 0x63
 80036e4:	d934      	bls.n	8003750 <menu+0x22ec>
			lcd_print(2, 1, kacSaniyeText);
 80036e6:	4a10      	ldr	r2, [pc, #64]	@ (8003728 <menu+0x22c4>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2002      	movs	r0, #2
 80036ec:	f006 ff08 	bl	800a500 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80036f0:	4b16      	ldr	r3, [pc, #88]	@ (800374c <menu+0x22e8>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	220a      	movs	r2, #10
 80036f6:	490e      	ldr	r1, [pc, #56]	@ (8003730 <menu+0x22cc>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f00b fa57 	bl	800ebac <itoa>
			lcd_print(2,14,snum);
 80036fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003730 <menu+0x22cc>)
 8003700:	210e      	movs	r1, #14
 8003702:	2002      	movs	r0, #2
 8003704:	f006 fefc 	bl	800a500 <lcd_print>
 8003708:	e051      	b.n	80037ae <menu+0x234a>
 800370a:	bf00      	nop
 800370c:	200013e5 	.word	0x200013e5
 8003710:	20000ff0 	.word	0x20000ff0
 8003714:	200013fc 	.word	0x200013fc
 8003718:	200013d0 	.word	0x200013d0
 800371c:	200013df 	.word	0x200013df
 8003720:	200019bc 	.word	0x200019bc
 8003724:	200019d0 	.word	0x200019d0
 8003728:	200017dc 	.word	0x200017dc
 800372c:	200013e6 	.word	0x200013e6
 8003730:	20001360 	.word	0x20001360
 8003734:	40010800 	.word	0x40010800
 8003738:	200013ff 	.word	0x200013ff
 800373c:	200019e4 	.word	0x200019e4
 8003740:	200019f8 	.word	0x200019f8
 8003744:	200013e7 	.word	0x200013e7
 8003748:	20001a0c 	.word	0x20001a0c
 800374c:	200013e8 	.word	0x200013e8

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003750:	4b86      	ldr	r3, [pc, #536]	@ (800396c <menu+0x2508>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b09      	cmp	r3, #9
 8003756:	d915      	bls.n	8003784 <menu+0x2320>
 8003758:	4b84      	ldr	r3, [pc, #528]	@ (800396c <menu+0x2508>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b63      	cmp	r3, #99	@ 0x63
 800375e:	d811      	bhi.n	8003784 <menu+0x2320>
			lcd_print(2, 1, kacSaniyeText);
 8003760:	4a83      	ldr	r2, [pc, #524]	@ (8003970 <menu+0x250c>)
 8003762:	2101      	movs	r1, #1
 8003764:	2002      	movs	r0, #2
 8003766:	f006 fecb 	bl	800a500 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800376a:	4b80      	ldr	r3, [pc, #512]	@ (800396c <menu+0x2508>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	220a      	movs	r2, #10
 8003770:	4980      	ldr	r1, [pc, #512]	@ (8003974 <menu+0x2510>)
 8003772:	4618      	mov	r0, r3
 8003774:	f00b fa1a 	bl	800ebac <itoa>
			lcd_print(2, 15, snum);
 8003778:	4a7e      	ldr	r2, [pc, #504]	@ (8003974 <menu+0x2510>)
 800377a:	210f      	movs	r1, #15
 800377c:	2002      	movs	r0, #2
 800377e:	f006 febf 	bl	800a500 <lcd_print>
 8003782:	e014      	b.n	80037ae <menu+0x234a>
		} else if(makineCalismaTmr <=  9) {
 8003784:	4b79      	ldr	r3, [pc, #484]	@ (800396c <menu+0x2508>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d810      	bhi.n	80037ae <menu+0x234a>
			lcd_print(2, 1, kacSaniyeText);
 800378c:	4a78      	ldr	r2, [pc, #480]	@ (8003970 <menu+0x250c>)
 800378e:	2101      	movs	r1, #1
 8003790:	2002      	movs	r0, #2
 8003792:	f006 feb5 	bl	800a500 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003796:	4b75      	ldr	r3, [pc, #468]	@ (800396c <menu+0x2508>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	220a      	movs	r2, #10
 800379c:	4975      	ldr	r1, [pc, #468]	@ (8003974 <menu+0x2510>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f00b fa04 	bl	800ebac <itoa>
			lcd_print(2, 16, snum);
 80037a4:	4a73      	ldr	r2, [pc, #460]	@ (8003974 <menu+0x2510>)
 80037a6:	2110      	movs	r1, #16
 80037a8:	2002      	movs	r0, #2
 80037aa:	f006 fea9 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ae:	2102      	movs	r1, #2
 80037b0:	4871      	ldr	r0, [pc, #452]	@ (8003978 <menu+0x2514>)
 80037b2:	f008 f9cf 	bl	800bb54 <HAL_GPIO_ReadPin>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d115      	bne.n	80037e8 <menu+0x2384>
 80037bc:	4b6f      	ldr	r3, [pc, #444]	@ (800397c <menu+0x2518>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <menu+0x2384>
			makineCalismaTmr = makineCalismaTmr + 1;
 80037ca:	4b68      	ldr	r3, [pc, #416]	@ (800396c <menu+0x2508>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b66      	ldr	r3, [pc, #408]	@ (800396c <menu+0x2508>)
 80037d4:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80037d6:	4b65      	ldr	r3, [pc, #404]	@ (800396c <menu+0x2508>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2bb4      	cmp	r3, #180	@ 0xb4
 80037dc:	d902      	bls.n	80037e4 <menu+0x2380>
				makineCalismaTmr = 0;
 80037de:	4b63      	ldr	r3, [pc, #396]	@ (800396c <menu+0x2508>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037e4:	f000 fc62 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e8:	2104      	movs	r1, #4
 80037ea:	4863      	ldr	r0, [pc, #396]	@ (8003978 <menu+0x2514>)
 80037ec:	f008 f9b2 	bl	800bb54 <HAL_GPIO_ReadPin>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d115      	bne.n	8003822 <menu+0x23be>
 80037f6:	4b61      	ldr	r3, [pc, #388]	@ (800397c <menu+0x2518>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f083 0301 	eor.w	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <menu+0x23be>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003804:	4b59      	ldr	r3, [pc, #356]	@ (800396c <menu+0x2508>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	3b01      	subs	r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b57      	ldr	r3, [pc, #348]	@ (800396c <menu+0x2508>)
 800380e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003810:	4b56      	ldr	r3, [pc, #344]	@ (800396c <menu+0x2508>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2bb5      	cmp	r3, #181	@ 0xb5
 8003816:	d902      	bls.n	800381e <menu+0x23ba>
		   		makineCalismaTmr = 180;
 8003818:	4b54      	ldr	r3, [pc, #336]	@ (800396c <menu+0x2508>)
 800381a:	22b4      	movs	r2, #180	@ 0xb4
 800381c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800381e:	f000 fc45 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003822:	2108      	movs	r1, #8
 8003824:	4854      	ldr	r0, [pc, #336]	@ (8003978 <menu+0x2514>)
 8003826:	f008 f995 	bl	800bb54 <HAL_GPIO_ReadPin>
 800382a:	4603      	mov	r3, r0
 800382c:	2b01      	cmp	r3, #1
 800382e:	d114      	bne.n	800385a <menu+0x23f6>
 8003830:	4b52      	ldr	r3, [pc, #328]	@ (800397c <menu+0x2518>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	f083 0301 	eor.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <menu+0x23f6>
			eepromData[24] = makineCalismaTmr;
 800383e:	4b4b      	ldr	r3, [pc, #300]	@ (800396c <menu+0x2508>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2200      	movs	r2, #0
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	627a      	str	r2, [r7, #36]	@ 0x24
 800384a:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <menu+0x251c>)
 800384c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003850:	e9c3 1230 	strd	r1, r2, [r3, #192]	@ 0xc0
			hafizaYaz = 1;
 8003854:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <menu+0x2520>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800385a:	4b4b      	ldr	r3, [pc, #300]	@ (8003988 <menu+0x2524>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b1b      	cmp	r3, #27
 8003860:	d16d      	bne.n	800393e <menu+0x24da>
		lcd_print(1, 1, buzzerTextGN);
 8003862:	4a4a      	ldr	r2, [pc, #296]	@ (800398c <menu+0x2528>)
 8003864:	2101      	movs	r1, #1
 8003866:	2001      	movs	r0, #1
 8003868:	f006 fe4a 	bl	800a500 <lcd_print>

		if(buzzer == 0) {
 800386c:	4b48      	ldr	r3, [pc, #288]	@ (8003990 <menu+0x252c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <menu+0x241c>
			lcd_print(2, 1, pasifText);
 8003874:	4a47      	ldr	r2, [pc, #284]	@ (8003994 <menu+0x2530>)
 8003876:	2101      	movs	r1, #1
 8003878:	2002      	movs	r0, #2
 800387a:	f006 fe41 	bl	800a500 <lcd_print>
 800387e:	e008      	b.n	8003892 <menu+0x242e>
		} else if(buzzer == 1) {
 8003880:	4b43      	ldr	r3, [pc, #268]	@ (8003990 <menu+0x252c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d104      	bne.n	8003892 <menu+0x242e>
			lcd_print(2, 1, aktifText);
 8003888:	4a43      	ldr	r2, [pc, #268]	@ (8003998 <menu+0x2534>)
 800388a:	2101      	movs	r1, #1
 800388c:	2002      	movs	r0, #2
 800388e:	f006 fe37 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003892:	2102      	movs	r1, #2
 8003894:	4838      	ldr	r0, [pc, #224]	@ (8003978 <menu+0x2514>)
 8003896:	f008 f95d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800389a:	4603      	mov	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d115      	bne.n	80038cc <menu+0x2468>
 80038a0:	4b36      	ldr	r3, [pc, #216]	@ (800397c <menu+0x2518>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	f083 0301 	eor.w	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00e      	beq.n	80038cc <menu+0x2468>
			buzzer = buzzer + 1;
 80038ae:	4b38      	ldr	r3, [pc, #224]	@ (8003990 <menu+0x252c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <menu+0x252c>)
 80038b8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80038ba:	4b35      	ldr	r3, [pc, #212]	@ (8003990 <menu+0x252c>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d902      	bls.n	80038c8 <menu+0x2464>
				buzzer = 0;
 80038c2:	4b33      	ldr	r3, [pc, #204]	@ (8003990 <menu+0x252c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c8:	f000 fbf0 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038cc:	2104      	movs	r1, #4
 80038ce:	482a      	ldr	r0, [pc, #168]	@ (8003978 <menu+0x2514>)
 80038d0:	f008 f940 	bl	800bb54 <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d115      	bne.n	8003906 <menu+0x24a2>
 80038da:	4b28      	ldr	r3, [pc, #160]	@ (800397c <menu+0x2518>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00e      	beq.n	8003906 <menu+0x24a2>
			buzzer = buzzer - 1;
 80038e8:	4b29      	ldr	r3, [pc, #164]	@ (8003990 <menu+0x252c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <menu+0x252c>)
 80038f2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80038f4:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <menu+0x252c>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <menu+0x249e>
		   		buzzer = 1;
 80038fc:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <menu+0x252c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003902:	f000 fbd3 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003906:	2108      	movs	r1, #8
 8003908:	481b      	ldr	r0, [pc, #108]	@ (8003978 <menu+0x2514>)
 800390a:	f008 f923 	bl	800bb54 <HAL_GPIO_ReadPin>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d114      	bne.n	800393e <menu+0x24da>
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <menu+0x2518>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	f083 0301 	eor.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <menu+0x24da>
			eepromData[25] = buzzer;
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <menu+0x252c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2200      	movs	r2, #0
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	61fa      	str	r2, [r7, #28]
 800392e:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <menu+0x251c>)
 8003930:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003934:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
			hafizaYaz = 1;
 8003938:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <menu+0x2520>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800393e:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <menu+0x2524>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b1c      	cmp	r3, #28
 8003944:	f040 808f 	bne.w	8003a66 <menu+0x2602>
		calismaSayModu = 0;
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <menu+0x2538>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800394e:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <menu+0x253c>)
 8003950:	2101      	movs	r1, #1
 8003952:	2001      	movs	r0, #1
 8003954:	f006 fdd4 	bl	800a500 <lcd_print>

		if(demoMode == 0) {
 8003958:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <menu+0x2540>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d123      	bne.n	80039a8 <menu+0x2544>
			lcd_print(2, 1, pasifText);
 8003960:	4a0c      	ldr	r2, [pc, #48]	@ (8003994 <menu+0x2530>)
 8003962:	2101      	movs	r1, #1
 8003964:	2002      	movs	r0, #2
 8003966:	f006 fdcb 	bl	800a500 <lcd_print>
 800396a:	e026      	b.n	80039ba <menu+0x2556>
 800396c:	200013e8 	.word	0x200013e8
 8003970:	200017dc 	.word	0x200017dc
 8003974:	20001360 	.word	0x20001360
 8003978:	40010800 	.word	0x40010800
 800397c:	200013ff 	.word	0x200013ff
 8003980:	20000ff0 	.word	0x20000ff0
 8003984:	200013fc 	.word	0x200013fc
 8003988:	200013d0 	.word	0x200013d0
 800398c:	20000128 	.word	0x20000128
 8003990:	200013ec 	.word	0x200013ec
 8003994:	200016b0 	.word	0x200016b0
 8003998:	200016c4 	.word	0x200016c4
 800399c:	200013f0 	.word	0x200013f0
 80039a0:	2000013c 	.word	0x2000013c
 80039a4:	200013ee 	.word	0x200013ee
		} else if(demoMode == 1) {
 80039a8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba8 <menu+0x2744>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d104      	bne.n	80039ba <menu+0x2556>
			lcd_print(2, 1, aktifText);
 80039b0:	4a7e      	ldr	r2, [pc, #504]	@ (8003bac <menu+0x2748>)
 80039b2:	2101      	movs	r1, #1
 80039b4:	2002      	movs	r0, #2
 80039b6:	f006 fda3 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ba:	2102      	movs	r1, #2
 80039bc:	487c      	ldr	r0, [pc, #496]	@ (8003bb0 <menu+0x274c>)
 80039be:	f008 f8c9 	bl	800bb54 <HAL_GPIO_ReadPin>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d115      	bne.n	80039f4 <menu+0x2590>
 80039c8:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb4 <menu+0x2750>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	f083 0301 	eor.w	r3, r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <menu+0x2590>
			demoMode = demoMode + 1;
 80039d6:	4b74      	ldr	r3, [pc, #464]	@ (8003ba8 <menu+0x2744>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b72      	ldr	r3, [pc, #456]	@ (8003ba8 <menu+0x2744>)
 80039e0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80039e2:	4b71      	ldr	r3, [pc, #452]	@ (8003ba8 <menu+0x2744>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d902      	bls.n	80039f0 <menu+0x258c>
				demoMode = 0;
 80039ea:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba8 <menu+0x2744>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f0:	f000 fb5c 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f4:	2104      	movs	r1, #4
 80039f6:	486e      	ldr	r0, [pc, #440]	@ (8003bb0 <menu+0x274c>)
 80039f8:	f008 f8ac 	bl	800bb54 <HAL_GPIO_ReadPin>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d115      	bne.n	8003a2e <menu+0x25ca>
 8003a02:	4b6c      	ldr	r3, [pc, #432]	@ (8003bb4 <menu+0x2750>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	f083 0301 	eor.w	r3, r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <menu+0x25ca>
			demoMode = demoMode - 1;
 8003a10:	4b65      	ldr	r3, [pc, #404]	@ (8003ba8 <menu+0x2744>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	4b63      	ldr	r3, [pc, #396]	@ (8003ba8 <menu+0x2744>)
 8003a1a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003a1c:	4b62      	ldr	r3, [pc, #392]	@ (8003ba8 <menu+0x2744>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <menu+0x25c6>
		   		demoMode = 1;
 8003a24:	4b60      	ldr	r3, [pc, #384]	@ (8003ba8 <menu+0x2744>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a2a:	f000 fb3f 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2e:	2108      	movs	r1, #8
 8003a30:	485f      	ldr	r0, [pc, #380]	@ (8003bb0 <menu+0x274c>)
 8003a32:	f008 f88f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d114      	bne.n	8003a66 <menu+0x2602>
 8003a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb4 <menu+0x2750>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	f083 0301 	eor.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <menu+0x2602>
			eepromData[26] = demoMode;
 8003a4a:	4b57      	ldr	r3, [pc, #348]	@ (8003ba8 <menu+0x2744>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2200      	movs	r2, #0
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	617a      	str	r2, [r7, #20]
 8003a56:	4b58      	ldr	r3, [pc, #352]	@ (8003bb8 <menu+0x2754>)
 8003a58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a5c:	e9c3 1234 	strd	r1, r2, [r3, #208]	@ 0xd0
			hafizaYaz = 1;
 8003a60:	4b56      	ldr	r3, [pc, #344]	@ (8003bbc <menu+0x2758>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003a66:	4b56      	ldr	r3, [pc, #344]	@ (8003bc0 <menu+0x275c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b1d      	cmp	r3, #29
 8003a6c:	f040 80ce 	bne.w	8003c0c <menu+0x27a8>
		if(calismaSayModu == 0) {
 8003a70:	4b54      	ldr	r3, [pc, #336]	@ (8003bc4 <menu+0x2760>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d126      	bne.n	8003ac6 <menu+0x2662>
			lcd_print(1, 1, calismaSayisiText);
 8003a78:	4a53      	ldr	r2, [pc, #332]	@ (8003bc8 <menu+0x2764>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	f006 fd3f 	bl	800a500 <lcd_print>

			if(demoMode == 1) {
 8003a82:	4b49      	ldr	r3, [pc, #292]	@ (8003ba8 <menu+0x2744>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d109      	bne.n	8003a9e <menu+0x263a>
				itoa(calismaSayisiDemo, snum, 10);
 8003a8a:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <menu+0x2768>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	4613      	mov	r3, r2
 8003a92:	220a      	movs	r2, #10
 8003a94:	494e      	ldr	r1, [pc, #312]	@ (8003bd0 <menu+0x276c>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00b f888 	bl	800ebac <itoa>
 8003a9c:	e008      	b.n	8003ab0 <menu+0x264c>
			} else {
				itoa(calismaSayisi, snum, 10);
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd4 <menu+0x2770>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	220a      	movs	r2, #10
 8003aa8:	4949      	ldr	r1, [pc, #292]	@ (8003bd0 <menu+0x276c>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f00b f87e 	bl	800ebac <itoa>
			}
			lcd_print(2, 16, snum);
 8003ab0:	4a47      	ldr	r2, [pc, #284]	@ (8003bd0 <menu+0x276c>)
 8003ab2:	2110      	movs	r1, #16
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f006 fd23 	bl	800a500 <lcd_print>

			lcd_print(2, 1, "           ");
 8003aba:	4a47      	ldr	r2, [pc, #284]	@ (8003bd8 <menu+0x2774>)
 8003abc:	2101      	movs	r1, #1
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f006 fd1e 	bl	800a500 <lcd_print>
 8003ac4:	e00d      	b.n	8003ae2 <menu+0x267e>
		} else if(calismaSayModu == 1) {
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc4 <menu+0x2760>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d109      	bne.n	8003ae2 <menu+0x267e>
			lcd_print(1, 1, calismaSayisiText);
 8003ace:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc8 <menu+0x2764>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f006 fd14 	bl	800a500 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003ad8:	4a40      	ldr	r2, [pc, #256]	@ (8003bdc <menu+0x2778>)
 8003ada:	2101      	movs	r1, #1
 8003adc:	2002      	movs	r0, #2
 8003ade:	f006 fd0f 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4832      	ldr	r0, [pc, #200]	@ (8003bb0 <menu+0x274c>)
 8003ae6:	f008 f835 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d119      	bne.n	8003b24 <menu+0x26c0>
 8003af0:	4b30      	ldr	r3, [pc, #192]	@ (8003bb4 <menu+0x2750>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d012      	beq.n	8003b24 <menu+0x26c0>
 8003afe:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <menu+0x277c>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00e      	beq.n	8003b24 <menu+0x26c0>
			calismaSayModu = calismaSayModu + 1;
 8003b06:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc4 <menu+0x2760>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc4 <menu+0x2760>)
 8003b10:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003b12:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc4 <menu+0x2760>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d902      	bls.n	8003b20 <menu+0x26bc>
				calismaSayModu = 0;
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc4 <menu+0x2760>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b20:	f000 fac4 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003b24:	2104      	movs	r1, #4
 8003b26:	4822      	ldr	r0, [pc, #136]	@ (8003bb0 <menu+0x274c>)
 8003b28:	f008 f814 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d119      	bne.n	8003b66 <menu+0x2702>
 8003b32:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <menu+0x2750>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	f083 0301 	eor.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <menu+0x2702>
 8003b40:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <menu+0x277c>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <menu+0x2702>
			calismaSayModu = calismaSayModu - 1;
 8003b48:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <menu+0x2760>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc4 <menu+0x2760>)
 8003b52:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <menu+0x2760>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <menu+0x26fe>
		   		calismaSayModu = 1;
 8003b5c:	4b19      	ldr	r3, [pc, #100]	@ (8003bc4 <menu+0x2760>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b62:	f000 faa3 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b66:	2108      	movs	r1, #8
 8003b68:	4811      	ldr	r0, [pc, #68]	@ (8003bb0 <menu+0x274c>)
 8003b6a:	f007 fff3 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d14b      	bne.n	8003c0c <menu+0x27a8>
 8003b74:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <menu+0x2750>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d044      	beq.n	8003c0c <menu+0x27a8>
			if(demoMode == 1) {
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <menu+0x2744>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d12c      	bne.n	8003be4 <menu+0x2780>
				calismaSayisiDemo = 0;
 8003b8a:	4910      	ldr	r1, [pc, #64]	@ (8003bcc <menu+0x2768>)
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[28] = 0;
 8003b98:	4907      	ldr	r1, [pc, #28]	@ (8003bb8 <menu+0x2754>)
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
 8003ba6:	e02b      	b.n	8003c00 <menu+0x279c>
 8003ba8:	200013ee 	.word	0x200013ee
 8003bac:	200016c4 	.word	0x200016c4
 8003bb0:	40010800 	.word	0x40010800
 8003bb4:	200013ff 	.word	0x200013ff
 8003bb8:	20000ff0 	.word	0x20000ff0
 8003bbc:	200013fc 	.word	0x200013fc
 8003bc0:	200013d0 	.word	0x200013d0
 8003bc4:	200013f0 	.word	0x200013f0
 8003bc8:	20001a20 	.word	0x20001a20
 8003bcc:	200013c8 	.word	0x200013c8
 8003bd0:	20001360 	.word	0x20001360
 8003bd4:	200013c0 	.word	0x200013c0
 8003bd8:	0800f8c0 	.word	0x0800f8c0
 8003bdc:	20001a34 	.word	0x20001a34
 8003be0:	20001411 	.word	0x20001411
			} else {
				calismaSayisi = 0;
 8003be4:	494d      	ldr	r1, [pc, #308]	@ (8003d1c <menu+0x28b8>)
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9c1 2300 	strd	r2, r3, [r1]
				eepromData[27] = 0;
 8003bf2:	494b      	ldr	r1, [pc, #300]	@ (8003d20 <menu+0x28bc>)
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
			}
			calismaSayModu = 0;
 8003c00:	4b48      	ldr	r3, [pc, #288]	@ (8003d24 <menu+0x28c0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003c06:	4b48      	ldr	r3, [pc, #288]	@ (8003d28 <menu+0x28c4>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003c0c:	4b47      	ldr	r3, [pc, #284]	@ (8003d2c <menu+0x28c8>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b1e      	cmp	r3, #30
 8003c12:	d16c      	bne.n	8003cee <menu+0x288a>
		calismaSayModu = 0;
 8003c14:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <menu+0x28c0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003c1a:	4a45      	ldr	r2, [pc, #276]	@ (8003d30 <menu+0x28cc>)
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f006 fc6e 	bl	800a500 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003c24:	4a43      	ldr	r2, [pc, #268]	@ (8003d34 <menu+0x28d0>)
 8003c26:	2101      	movs	r1, #1
 8003c28:	2002      	movs	r0, #2
 8003c2a:	f006 fc69 	bl	800a500 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4841      	ldr	r0, [pc, #260]	@ (8003d38 <menu+0x28d4>)
 8003c32:	f007 ff8f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d11a      	bne.n	8003c72 <menu+0x280e>
 8003c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d3c <menu+0x28d8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <menu+0x280e>
			dilSecim = dilSecim + 1;
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d40 <menu+0x28dc>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4b3b      	ldr	r3, [pc, #236]	@ (8003d40 <menu+0x28dc>)
 8003c54:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003c56:	4b3a      	ldr	r3, [pc, #232]	@ (8003d40 <menu+0x28dc>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d902      	bls.n	8003c64 <menu+0x2800>
				dilSecim = 0;
 8003c5e:	4b38      	ldr	r3, [pc, #224]	@ (8003d40 <menu+0x28dc>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003c64:	4b36      	ldr	r3, [pc, #216]	@ (8003d40 <menu+0x28dc>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 fecf 	bl	8007a0c <loadMenuTexts>

			bekle();
 8003c6e:	f000 fa1d 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c72:	2104      	movs	r1, #4
 8003c74:	4830      	ldr	r0, [pc, #192]	@ (8003d38 <menu+0x28d4>)
 8003c76:	f007 ff6d 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d11a      	bne.n	8003cb6 <menu+0x2852>
 8003c80:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <menu+0x28d8>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <menu+0x2852>
			dilSecim = dilSecim - 1;
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d40 <menu+0x28dc>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b2a      	ldr	r3, [pc, #168]	@ (8003d40 <menu+0x28dc>)
 8003c98:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003c9a:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <menu+0x28dc>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <menu+0x2844>
		   		dilSecim = 1;
 8003ca2:	4b27      	ldr	r3, [pc, #156]	@ (8003d40 <menu+0x28dc>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <menu+0x28dc>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 fead 	bl	8007a0c <loadMenuTexts>

			bekle();
 8003cb2:	f000 f9fb 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb6:	2108      	movs	r1, #8
 8003cb8:	481f      	ldr	r0, [pc, #124]	@ (8003d38 <menu+0x28d4>)
 8003cba:	f007 ff4b 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d114      	bne.n	8003cee <menu+0x288a>
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <menu+0x28d8>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	f083 0301 	eor.w	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <menu+0x288a>
			eepromData[33] = dilSecim;
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <menu+0x28dc>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	60fa      	str	r2, [r7, #12]
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <menu+0x28bc>)
 8003ce0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ce4:	e9c3 1242 	strd	r1, r2, [r3, #264]	@ 0x108
			hafizaYaz = 1;
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <menu+0x28c4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003cee:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <menu+0x28c8>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b1f      	cmp	r3, #31
 8003cf4:	f040 808b 	bne.w	8003e0e <menu+0x29aa>
		calismaSayModu = 0;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <menu+0x28c0>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003cfe:	4a11      	ldr	r2, [pc, #68]	@ (8003d44 <menu+0x28e0>)
 8003d00:	2101      	movs	r1, #1
 8003d02:	2001      	movs	r0, #1
 8003d04:	f006 fbfc 	bl	800a500 <lcd_print>

		if(iotMode == 0) {
 8003d08:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <menu+0x28e4>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11f      	bne.n	8003d50 <menu+0x28ec>
			lcd_print(2, 1, pasifText);
 8003d10:	4a0e      	ldr	r2, [pc, #56]	@ (8003d4c <menu+0x28e8>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	2002      	movs	r0, #2
 8003d16:	f006 fbf3 	bl	800a500 <lcd_print>
 8003d1a:	e022      	b.n	8003d62 <menu+0x28fe>
 8003d1c:	200013c0 	.word	0x200013c0
 8003d20:	20000ff0 	.word	0x20000ff0
 8003d24:	200013f0 	.word	0x200013f0
 8003d28:	200013fc 	.word	0x200013fc
 8003d2c:	200013d0 	.word	0x200013d0
 8003d30:	20001a48 	.word	0x20001a48
 8003d34:	20001a5c 	.word	0x20001a5c
 8003d38:	40010800 	.word	0x40010800
 8003d3c:	200013ff 	.word	0x200013ff
 8003d40:	200013f1 	.word	0x200013f1
 8003d44:	20000150 	.word	0x20000150
 8003d48:	200013ef 	.word	0x200013ef
 8003d4c:	200016b0 	.word	0x200016b0
		} else if(iotMode == 1) {
 8003d50:	4b95      	ldr	r3, [pc, #596]	@ (8003fa8 <menu+0x2b44>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d104      	bne.n	8003d62 <menu+0x28fe>
			lcd_print(2, 1, aktifText);
 8003d58:	4a94      	ldr	r2, [pc, #592]	@ (8003fac <menu+0x2b48>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	2002      	movs	r0, #2
 8003d5e:	f006 fbcf 	bl	800a500 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d62:	2102      	movs	r1, #2
 8003d64:	4892      	ldr	r0, [pc, #584]	@ (8003fb0 <menu+0x2b4c>)
 8003d66:	f007 fef5 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d115      	bne.n	8003d9c <menu+0x2938>
 8003d70:	4b90      	ldr	r3, [pc, #576]	@ (8003fb4 <menu+0x2b50>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	f083 0301 	eor.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00e      	beq.n	8003d9c <menu+0x2938>
			iotMode = iotMode + 1;
 8003d7e:	4b8a      	ldr	r3, [pc, #552]	@ (8003fa8 <menu+0x2b44>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <menu+0x2b44>)
 8003d88:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003d8a:	4b87      	ldr	r3, [pc, #540]	@ (8003fa8 <menu+0x2b44>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d902      	bls.n	8003d98 <menu+0x2934>
				iotMode = 0;
 8003d92:	4b85      	ldr	r3, [pc, #532]	@ (8003fa8 <menu+0x2b44>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003d98:	f000 f988 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d9c:	2104      	movs	r1, #4
 8003d9e:	4884      	ldr	r0, [pc, #528]	@ (8003fb0 <menu+0x2b4c>)
 8003da0:	f007 fed8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d115      	bne.n	8003dd6 <menu+0x2972>
 8003daa:	4b82      	ldr	r3, [pc, #520]	@ (8003fb4 <menu+0x2b50>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	f083 0301 	eor.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00e      	beq.n	8003dd6 <menu+0x2972>
			iotMode = iotMode - 1;
 8003db8:	4b7b      	ldr	r3, [pc, #492]	@ (8003fa8 <menu+0x2b44>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b79      	ldr	r3, [pc, #484]	@ (8003fa8 <menu+0x2b44>)
 8003dc2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003dc4:	4b78      	ldr	r3, [pc, #480]	@ (8003fa8 <menu+0x2b44>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <menu+0x296e>
		   		iotMode = 1;
 8003dcc:	4b76      	ldr	r3, [pc, #472]	@ (8003fa8 <menu+0x2b44>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003dd2:	f000 f96b 	bl	80040ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	4875      	ldr	r0, [pc, #468]	@ (8003fb0 <menu+0x2b4c>)
 8003dda:	f007 febb 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d114      	bne.n	8003e0e <menu+0x29aa>
 8003de4:	4b73      	ldr	r3, [pc, #460]	@ (8003fb4 <menu+0x2b50>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f083 0301 	eor.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <menu+0x29aa>
			eepromData[48] = iotMode;
 8003df2:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa8 <menu+0x2b44>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8003fb8 <menu+0x2b54>)
 8003e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e04:	e9c3 1260 	strd	r1, r2, [r3, #384]	@ 0x180
			hafizaYaz = 1;
 8003e08:	4b6c      	ldr	r3, [pc, #432]	@ (8003fbc <menu+0x2b58>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc0 <menu+0x2b5c>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d122      	bne.n	8003e5c <menu+0x29f8>
		calismaSayModu = 0;
 8003e16:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc4 <menu+0x2b60>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7fc fcab 	bl	8000778 <convertArrays>
		HAL_Delay(50);
 8003e22:	2032      	movs	r0, #50	@ 0x32
 8003e24:	f007 f8c6 	bl	800afb4 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f7fd fa8b 	bl	8001344 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2e:	2102      	movs	r1, #2
 8003e30:	485f      	ldr	r0, [pc, #380]	@ (8003fb0 <menu+0x2b4c>)
 8003e32:	f007 fe8f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10f      	bne.n	8003e5c <menu+0x29f8>
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	485c      	ldr	r0, [pc, #368]	@ (8003fb0 <menu+0x2b4c>)
 8003e40:	f007 fe88 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <menu+0x29f8>
 8003e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb4 <menu+0x2b50>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	f083 0301 	eor.w	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <menu+0x29f8>
			takeMachineIDWithConfirmation();
 8003e58:	f005 fa5e 	bl	8009318 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003e5c:	4b58      	ldr	r3, [pc, #352]	@ (8003fc0 <menu+0x2b5c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b21      	cmp	r3, #33	@ 0x21
 8003e62:	d12b      	bne.n	8003ebc <menu+0x2a58>
		calismaSayModu = 0;
 8003e64:	4b57      	ldr	r3, [pc, #348]	@ (8003fc4 <menu+0x2b60>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7fc fc84 	bl	8000778 <convertArrays>
		HAL_Delay(50);
 8003e70:	2032      	movs	r0, #50	@ 0x32
 8003e72:	f007 f89f 	bl	800afb4 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003e76:	2002      	movs	r0, #2
 8003e78:	f7fd fa64 	bl	8001344 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	484c      	ldr	r0, [pc, #304]	@ (8003fb0 <menu+0x2b4c>)
 8003e80:	f007 fe68 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d118      	bne.n	8003ebc <menu+0x2a58>
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	4848      	ldr	r0, [pc, #288]	@ (8003fb0 <menu+0x2b4c>)
 8003e8e:	f007 fe61 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d111      	bne.n	8003ebc <menu+0x2a58>
 8003e98:	4b46      	ldr	r3, [pc, #280]	@ (8003fb4 <menu+0x2b50>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	f083 0301 	eor.w	r3, r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <menu+0x2a58>
			takeWifiSSID();
 8003ea6:	f005 fc9b 	bl	80097e0 <takeWifiSSID>

			convertArrays(2);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f7fc fc64 	bl	8000778 <convertArrays>
			HAL_Delay(50);
 8003eb0:	2032      	movs	r0, #50	@ 0x32
 8003eb2:	f007 f87f 	bl	800afb4 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f7fd fa44 	bl	8001344 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003ebc:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <menu+0x2b5c>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b22      	cmp	r3, #34	@ 0x22
 8003ec2:	d12b      	bne.n	8003f1c <menu+0x2ab8>
		calismaSayModu = 0;
 8003ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc4 <menu+0x2b60>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003eca:	2003      	movs	r0, #3
 8003ecc:	f7fc fc54 	bl	8000778 <convertArrays>
		HAL_Delay(50);
 8003ed0:	2032      	movs	r0, #50	@ 0x32
 8003ed2:	f007 f86f 	bl	800afb4 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003ed6:	2003      	movs	r0, #3
 8003ed8:	f7fd fa34 	bl	8001344 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003edc:	2102      	movs	r1, #2
 8003ede:	4834      	ldr	r0, [pc, #208]	@ (8003fb0 <menu+0x2b4c>)
 8003ee0:	f007 fe38 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d118      	bne.n	8003f1c <menu+0x2ab8>
 8003eea:	2104      	movs	r1, #4
 8003eec:	4830      	ldr	r0, [pc, #192]	@ (8003fb0 <menu+0x2b4c>)
 8003eee:	f007 fe31 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d111      	bne.n	8003f1c <menu+0x2ab8>
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb4 <menu+0x2b50>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f083 0301 	eor.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <menu+0x2ab8>
			takeWifiPass();
 8003f06:	f005 fe47 	bl	8009b98 <takeWifiPass>

			convertArrays(3);
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	f7fc fc34 	bl	8000778 <convertArrays>
			HAL_Delay(50);
 8003f10:	2032      	movs	r0, #50	@ 0x32
 8003f12:	f007 f84f 	bl	800afb4 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003f16:	2003      	movs	r0, #3
 8003f18:	f7fd fa14 	bl	8001344 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003f1c:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <menu+0x2b5c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b23      	cmp	r3, #35	@ 0x23
 8003f22:	d13a      	bne.n	8003f9a <menu+0x2b36>
		lcd_print(1, 1, menudenCikisText);
 8003f24:	4a28      	ldr	r2, [pc, #160]	@ (8003fc8 <menu+0x2b64>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f006 fae9 	bl	800a500 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003f2e:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <menu+0x2b68>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	2002      	movs	r0, #2
 8003f34:	f006 fae4 	bl	800a500 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003f38:	2108      	movs	r1, #8
 8003f3a:	481d      	ldr	r0, [pc, #116]	@ (8003fb0 <menu+0x2b4c>)
 8003f3c:	f007 fe0a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d129      	bne.n	8003f9a <menu+0x2b36>
			menuGiris = 0;
 8003f46:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <menu+0x2b6c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003f4c:	bf00      	nop
 8003f4e:	4821      	ldr	r0, [pc, #132]	@ (8003fd4 <menu+0x2b70>)
 8003f50:	f008 fc29 	bl	800c7a6 <HAL_I2C_GetError>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d0f9      	beq.n	8003f4e <menu+0x2aea>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003f5a:	bf00      	nop
 8003f5c:	481d      	ldr	r0, [pc, #116]	@ (8003fd4 <menu+0x2b70>)
 8003f5e:	f008 fc15 	bl	800c78c <HAL_I2C_GetState>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d1f9      	bne.n	8003f5c <menu+0x2af8>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003f68:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003f6c:	9302      	str	r3, [sp, #8]
 8003f6e:	236e      	movs	r3, #110	@ 0x6e
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	4b11      	ldr	r3, [pc, #68]	@ (8003fb8 <menu+0x2b54>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	236e      	movs	r3, #110	@ 0x6e
 8003f78:	2200      	movs	r2, #0
 8003f7a:	21a0      	movs	r1, #160	@ 0xa0
 8003f7c:	4815      	ldr	r0, [pc, #84]	@ (8003fd4 <menu+0x2b70>)
 8003f7e:	f008 f8a3 	bl	800c0c8 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003f82:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003f86:	f007 f815 	bl	800afb4 <HAL_Delay>

			lcd_clear();
 8003f8a:	f006 fae5 	bl	800a558 <lcd_clear>
			HAL_Delay(500);
 8003f8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f92:	f007 f80f 	bl	800afb4 <HAL_Delay>
			NVIC_SystemReset();
 8003f96:	f7fd fa4f 	bl	8001438 <__NVIC_SystemReset>
		}
	}
}
 8003f9a:	bf00      	nop
 8003f9c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200013ef 	.word	0x200013ef
 8003fac:	200016c4 	.word	0x200016c4
 8003fb0:	40010800 	.word	0x40010800
 8003fb4:	200013ff 	.word	0x200013ff
 8003fb8:	20000ff0 	.word	0x20000ff0
 8003fbc:	200013fc 	.word	0x200013fc
 8003fc0:	200013d0 	.word	0x200013d0
 8003fc4:	200013f0 	.word	0x200013f0
 8003fc8:	20001a70 	.word	0x20001a70
 8003fcc:	20001a84 	.word	0x20001a84
 8003fd0:	200013ed 	.word	0x200013ed
 8003fd4:	20001c50 	.word	0x20001c50

08003fd8 <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003fe8:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <lcdUpdate+0x9c>)
 8003fea:	2101      	movs	r1, #1
 8003fec:	2002      	movs	r0, #2
 8003fee:	f006 fa87 	bl	800a500 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003ff2:	e03b      	b.n	800406c <lcdUpdate+0x94>
	} else if(y==2) {
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d105      	bne.n	8004006 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <lcdUpdate+0x9c>)
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	2002      	movs	r0, #2
 8004000:	f006 fa7e 	bl	800a500 <lcd_print>
}
 8004004:	e032      	b.n	800406c <lcdUpdate+0x94>
	} else if(y==3) {
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d105      	bne.n	8004018 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800400c:	4a19      	ldr	r2, [pc, #100]	@ (8004074 <lcdUpdate+0x9c>)
 800400e:	2103      	movs	r1, #3
 8004010:	2002      	movs	r0, #2
 8004012:	f006 fa75 	bl	800a500 <lcd_print>
}
 8004016:	e029      	b.n	800406c <lcdUpdate+0x94>
	} else if(y==4) {
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d105      	bne.n	800402a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <lcdUpdate+0x9c>)
 8004020:	2104      	movs	r1, #4
 8004022:	2002      	movs	r0, #2
 8004024:	f006 fa6c 	bl	800a500 <lcd_print>
}
 8004028:	e020      	b.n	800406c <lcdUpdate+0x94>
	} else if(y==5) {
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d105      	bne.n	800403c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004030:	4a10      	ldr	r2, [pc, #64]	@ (8004074 <lcdUpdate+0x9c>)
 8004032:	2105      	movs	r1, #5
 8004034:	2002      	movs	r0, #2
 8004036:	f006 fa63 	bl	800a500 <lcd_print>
}
 800403a:	e017      	b.n	800406c <lcdUpdate+0x94>
	} else if(y==6) {
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d105      	bne.n	800404e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004042:	4a0c      	ldr	r2, [pc, #48]	@ (8004074 <lcdUpdate+0x9c>)
 8004044:	2106      	movs	r1, #6
 8004046:	2002      	movs	r0, #2
 8004048:	f006 fa5a 	bl	800a500 <lcd_print>
}
 800404c:	e00e      	b.n	800406c <lcdUpdate+0x94>
	} else if (y==7) {
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b07      	cmp	r3, #7
 8004052:	d10b      	bne.n	800406c <lcdUpdate+0x94>
		lcd_clear();
 8004054:	f006 fa80 	bl	800a558 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8004058:	4a07      	ldr	r2, [pc, #28]	@ (8004078 <lcdUpdate+0xa0>)
 800405a:	2101      	movs	r1, #1
 800405c:	2001      	movs	r0, #1
 800405e:	f006 fa4f 	bl	800a500 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8004062:	4a06      	ldr	r2, [pc, #24]	@ (800407c <lcdUpdate+0xa4>)
 8004064:	2101      	movs	r1, #1
 8004066:	2002      	movs	r0, #2
 8004068:	f006 fa4a 	bl	800a500 <lcd_print>
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	0800f8cc 	.word	0x0800f8cc
 8004078:	200000c4 	.word	0x200000c4
 800407c:	200000d8 	.word	0x200000d8

08004080 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <checkLCDBacklight+0x24>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <checkLCDBacklight+0x28>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b3b      	cmp	r3, #59	@ 0x3b
 8004090:	d903      	bls.n	800409a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004092:	2000      	movs	r0, #0
 8004094:	f006 fa80 	bl	800a598 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004098:	e002      	b.n	80040a0 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 800409a:	2001      	movs	r0, #1
 800409c:	f006 fa7c 	bl	800a598 <lcd_backlight>
}
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	200013a0 	.word	0x200013a0
 80040a8:	200013bc 	.word	0x200013bc

080040ac <bekle>:

void bekle() {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	timer1=millis;
 80040b0:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <bekle+0x124>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a47      	ldr	r2, [pc, #284]	@ (80041d4 <bekle+0x128>)
 80040b6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040b8:	e002      	b.n	80040c0 <bekle+0x14>
    	butonKontrol = 1;
 80040ba:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <bekle+0x12c>)
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040c0:	2101      	movs	r1, #1
 80040c2:	4846      	ldr	r0, [pc, #280]	@ (80041dc <bekle+0x130>)
 80040c4:	f007 fd46 	bl	800bb54 <HAL_GPIO_ReadPin>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d109      	bne.n	80040e2 <bekle+0x36>
 80040ce:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <bekle+0x124>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b40      	ldr	r3, [pc, #256]	@ (80041d4 <bekle+0x128>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d0ef      	beq.n	80040ba <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040da:	e002      	b.n	80040e2 <bekle+0x36>
    	butonKontrol = 1;
 80040dc:	4b3e      	ldr	r3, [pc, #248]	@ (80041d8 <bekle+0x12c>)
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040e2:	2108      	movs	r1, #8
 80040e4:	483e      	ldr	r0, [pc, #248]	@ (80041e0 <bekle+0x134>)
 80040e6:	f007 fd35 	bl	800bb54 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d109      	bne.n	8004104 <bekle+0x58>
 80040f0:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <bekle+0x124>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <bekle+0x128>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0ef      	beq.n	80040dc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040fc:	e002      	b.n	8004104 <bekle+0x58>
    	butonKontrol = 1;
 80040fe:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <bekle+0x12c>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004104:	2102      	movs	r1, #2
 8004106:	4835      	ldr	r0, [pc, #212]	@ (80041dc <bekle+0x130>)
 8004108:	f007 fd24 	bl	800bb54 <HAL_GPIO_ReadPin>
 800410c:	4603      	mov	r3, r0
 800410e:	2b01      	cmp	r3, #1
 8004110:	d109      	bne.n	8004126 <bekle+0x7a>
 8004112:	4b2f      	ldr	r3, [pc, #188]	@ (80041d0 <bekle+0x124>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <bekle+0x128>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d0ef      	beq.n	80040fe <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800411e:	e002      	b.n	8004126 <bekle+0x7a>
    	butonKontrol = 1;
 8004120:	4b2d      	ldr	r3, [pc, #180]	@ (80041d8 <bekle+0x12c>)
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004126:	2104      	movs	r1, #4
 8004128:	482c      	ldr	r0, [pc, #176]	@ (80041dc <bekle+0x130>)
 800412a:	f007 fd13 	bl	800bb54 <HAL_GPIO_ReadPin>
 800412e:	4603      	mov	r3, r0
 8004130:	2b01      	cmp	r3, #1
 8004132:	d109      	bne.n	8004148 <bekle+0x9c>
 8004134:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <bekle+0x124>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <bekle+0x128>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d0ef      	beq.n	8004120 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004140:	e002      	b.n	8004148 <bekle+0x9c>
    	butonKontrol = 1;
 8004142:	4b25      	ldr	r3, [pc, #148]	@ (80041d8 <bekle+0x12c>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004148:	2108      	movs	r1, #8
 800414a:	4824      	ldr	r0, [pc, #144]	@ (80041dc <bekle+0x130>)
 800414c:	f007 fd02 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d109      	bne.n	800416a <bekle+0xbe>
 8004156:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <bekle+0x124>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <bekle+0x128>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d0ef      	beq.n	8004142 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004162:	e002      	b.n	800416a <bekle+0xbe>
    	butonKontrol = 1;
 8004164:	4b1c      	ldr	r3, [pc, #112]	@ (80041d8 <bekle+0x12c>)
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800416a:	2180      	movs	r1, #128	@ 0x80
 800416c:	481c      	ldr	r0, [pc, #112]	@ (80041e0 <bekle+0x134>)
 800416e:	f007 fcf1 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <bekle+0xe0>
 8004178:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <bekle+0x124>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b15      	ldr	r3, [pc, #84]	@ (80041d4 <bekle+0x128>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d0ef      	beq.n	8004164 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004184:	e002      	b.n	800418c <bekle+0xe0>
    	butonKontrol = 1;
 8004186:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <bekle+0x12c>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800418c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004190:	4813      	ldr	r0, [pc, #76]	@ (80041e0 <bekle+0x134>)
 8004192:	f007 fcdf 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <bekle+0x104>
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <bekle+0x124>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <bekle+0x128>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d0ee      	beq.n	8004186 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041a8:	e002      	b.n	80041b0 <bekle+0x104>
    	butonKontrol = 1;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <bekle+0x12c>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041b4:	480a      	ldr	r0, [pc, #40]	@ (80041e0 <bekle+0x134>)
 80041b6:	f007 fccd 	bl	800bb54 <HAL_GPIO_ReadPin>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <bekle+0x120>
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <bekle+0x124>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <bekle+0x128>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d0ee      	beq.n	80041aa <bekle+0xfe>
    }

}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	200013a0 	.word	0x200013a0
 80041d4:	200013a8 	.word	0x200013a8
 80041d8:	200013ff 	.word	0x200013ff
 80041dc:	40010800 	.word	0x40010800
 80041e0:	40011000 	.word	0x40011000

080041e4 <buttonCheck>:

uint8_t buttonCheck(void) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 80041e8:	2101      	movs	r1, #1
 80041ea:	4815      	ldr	r0, [pc, #84]	@ (8004240 <buttonCheck+0x5c>)
 80041ec:	f007 fcb2 	bl	800bb54 <HAL_GPIO_ReadPin>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d01b      	beq.n	800422e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 80041f6:	2108      	movs	r1, #8
 80041f8:	4812      	ldr	r0, [pc, #72]	@ (8004244 <buttonCheck+0x60>)
 80041fa:	f007 fcab 	bl	800bb54 <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d014      	beq.n	800422e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004204:	2102      	movs	r1, #2
 8004206:	480e      	ldr	r0, [pc, #56]	@ (8004240 <buttonCheck+0x5c>)
 8004208:	f007 fca4 	bl	800bb54 <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d00d      	beq.n	800422e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004212:	2104      	movs	r1, #4
 8004214:	480a      	ldr	r0, [pc, #40]	@ (8004240 <buttonCheck+0x5c>)
 8004216:	f007 fc9d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800421a:	4603      	mov	r3, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	d006      	beq.n	800422e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004220:	2108      	movs	r1, #8
 8004222:	4807      	ldr	r0, [pc, #28]	@ (8004240 <buttonCheck+0x5c>)
 8004224:	f007 fc96 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d104      	bne.n	8004238 <buttonCheck+0x54>
		backLightTimer = 0;
 800422e:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <buttonCheck+0x64>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
		return 1;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <buttonCheck+0x56>
	}
	return 0;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40010800 	.word	0x40010800
 8004244:	40011000 	.word	0x40011000
 8004248:	200013bc 	.word	0x200013bc

0800424c <checkBasincSalteri>:

void checkBasincSalteri() {
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004250:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <checkBasincSalteri+0x54>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <checkBasincSalteri+0x12>
		basincVar=1;
 8004258:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <checkBasincSalteri+0x58>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800425e:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <checkBasincSalteri+0x54>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d119      	bne.n	800429a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800426a:	480f      	ldr	r0, [pc, #60]	@ (80042a8 <checkBasincSalteri+0x5c>)
 800426c:	f007 fc72 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <checkBasincSalteri+0x60>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <checkBasincSalteri+0x64>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d90a      	bls.n	800429a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004284:	4b07      	ldr	r3, [pc, #28]	@ (80042a4 <checkBasincSalteri+0x58>)
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800428a:	e006      	b.n	800429a <checkBasincSalteri+0x4e>
			timer5=millis;
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <checkBasincSalteri+0x60>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a07      	ldr	r2, [pc, #28]	@ (80042b0 <checkBasincSalteri+0x64>)
 8004292:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <checkBasincSalteri+0x58>)
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200013d7 	.word	0x200013d7
 80042a4:	200013d3 	.word	0x200013d3
 80042a8:	40011000 	.word	0x40011000
 80042ac:	200013a0 	.word	0x200013a0
 80042b0:	200013b8 	.word	0x200013b8

080042b4 <checkBasGonder>:

void checkBasGonder() {
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80042b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <checkBasGonder+0x74>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10b      	bne.n	80042d8 <checkBasGonder+0x24>
 80042c0:	4b1a      	ldr	r3, [pc, #104]	@ (800432c <checkBasGonder+0x78>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <checkBasGonder+0x24>
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <checkBasGonder+0x7c>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80042d0:	4b18      	ldr	r3, [pc, #96]	@ (8004334 <checkBasGonder+0x80>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e009      	b.n	80042ec <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80042d8:	4b14      	ldr	r3, [pc, #80]	@ (800432c <checkBasGonder+0x78>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f083 0301 	eor.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80042e6:	4b13      	ldr	r3, [pc, #76]	@ (8004334 <checkBasGonder+0x80>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <checkBasGonder+0x74>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10b      	bne.n	800430c <checkBasGonder+0x58>
 80042f4:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <checkBasGonder+0x84>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <checkBasGonder+0x58>
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <checkBasGonder+0x7c>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004304:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <checkBasGonder+0x88>)
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800430a:	e009      	b.n	8004320 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <checkBasGonder+0x84>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800431a:	4b08      	ldr	r3, [pc, #32]	@ (800433c <checkBasGonder+0x88>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	200013d1 	.word	0x200013d1
 800432c:	20001405 	.word	0x20001405
 8004330:	200013df 	.word	0x200013df
 8004334:	2000140c 	.word	0x2000140c
 8004338:	20001408 	.word	0x20001408
 800433c:	2000140d 	.word	0x2000140d

08004340 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004344:	4b24      	ldr	r3, [pc, #144]	@ (80043d8 <checkKapiSecimleri+0x98>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800434c:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <checkKapiSecimleri+0x9c>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004352:	4b21      	ldr	r3, [pc, #132]	@ (80043d8 <checkKapiSecimleri+0x98>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d10e      	bne.n	8004378 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800435a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800435e:	4820      	ldr	r0, [pc, #128]	@ (80043e0 <checkKapiSecimleri+0xa0>)
 8004360:	f007 fbf8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800436a:	4b1c      	ldr	r3, [pc, #112]	@ (80043dc <checkKapiSecimleri+0x9c>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e002      	b.n	8004378 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004372:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <checkKapiSecimleri+0x9c>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004378:	4b17      	ldr	r3, [pc, #92]	@ (80043d8 <checkKapiSecimleri+0x98>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d10e      	bne.n	800439e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004384:	4816      	ldr	r0, [pc, #88]	@ (80043e0 <checkKapiSecimleri+0xa0>)
 8004386:	f007 fbe5 	bl	800bb54 <HAL_GPIO_ReadPin>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d103      	bne.n	8004398 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004390:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <checkKapiSecimleri+0x9c>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e002      	b.n	800439e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004398:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <checkKapiSecimleri+0x9c>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800439e:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <checkKapiSecimleri+0x98>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d116      	bne.n	80043d4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80043a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043aa:	480d      	ldr	r0, [pc, #52]	@ (80043e0 <checkKapiSecimleri+0xa0>)
 80043ac:	f007 fbd2 	bl	800bb54 <HAL_GPIO_ReadPin>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <checkKapiSecimleri+0x8e>
 80043b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043ba:	4809      	ldr	r0, [pc, #36]	@ (80043e0 <checkKapiSecimleri+0xa0>)
 80043bc:	f007 fbca 	bl	800bb54 <HAL_GPIO_ReadPin>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <checkKapiSecimleri+0x9c>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80043cc:	e002      	b.n	80043d4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80043ce:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <checkKapiSecimleri+0x9c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200013d8 	.word	0x200013d8
 80043dc:	20001423 	.word	0x20001423
 80043e0:	40010800 	.word	0x40010800

080043e4 <checkAktifCalisma>:

void checkAktifCalisma() {
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80043e8:	4b66      	ldr	r3, [pc, #408]	@ (8004584 <checkAktifCalisma+0x1a0>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f041 839d 	bne.w	8005b2c <checkAktifCalisma+0x1748>
 80043f2:	4b65      	ldr	r3, [pc, #404]	@ (8004588 <checkAktifCalisma+0x1a4>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f041 8398 	bne.w	8005b2c <checkAktifCalisma+0x1748>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80043fc:	4b63      	ldr	r3, [pc, #396]	@ (800458c <checkAktifCalisma+0x1a8>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d11a      	bne.n	800443a <checkAktifCalisma+0x56>
 8004404:	4b62      	ldr	r3, [pc, #392]	@ (8004590 <checkAktifCalisma+0x1ac>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d116      	bne.n	800443a <checkAktifCalisma+0x56>
 800440c:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <checkAktifCalisma+0x1b0>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <checkAktifCalisma+0x46>
 8004414:	4b60      	ldr	r3, [pc, #384]	@ (8004598 <checkAktifCalisma+0x1b4>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	f083 0301 	eor.w	r3, r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <checkAktifCalisma+0x46>
 8004422:	4b5e      	ldr	r3, [pc, #376]	@ (800459c <checkAktifCalisma+0x1b8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d007      	beq.n	800443a <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800442a:	4b5d      	ldr	r3, [pc, #372]	@ (80045a0 <checkAktifCalisma+0x1bc>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01c      	beq.n	800446c <checkAktifCalisma+0x88>
 8004432:	4b5c      	ldr	r3, [pc, #368]	@ (80045a4 <checkAktifCalisma+0x1c0>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d118      	bne.n	800446c <checkAktifCalisma+0x88>
 800443a:	4b5b      	ldr	r3, [pc, #364]	@ (80045a8 <checkAktifCalisma+0x1c4>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <checkAktifCalisma+0x66>
 8004442:	4b5a      	ldr	r3, [pc, #360]	@ (80045ac <checkAktifCalisma+0x1c8>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <checkAktifCalisma+0x88>
 800444a:	4b59      	ldr	r3, [pc, #356]	@ (80045b0 <checkAktifCalisma+0x1cc>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004452:	2201      	movs	r2, #1
 8004454:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004458:	4856      	ldr	r0, [pc, #344]	@ (80045b4 <checkAktifCalisma+0x1d0>)
 800445a:	f007 fb92 	bl	800bb82 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800445e:	4b56      	ldr	r3, [pc, #344]	@ (80045b8 <checkAktifCalisma+0x1d4>)
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004464:	4b55      	ldr	r3, [pc, #340]	@ (80045bc <checkAktifCalisma+0x1d8>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e008      	b.n	800447e <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800446c:	2200      	movs	r2, #0
 800446e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004472:	4850      	ldr	r0, [pc, #320]	@ (80045b4 <checkAktifCalisma+0x1d0>)
 8004474:	f007 fb85 	bl	800bb82 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004478:	4b4f      	ldr	r3, [pc, #316]	@ (80045b8 <checkAktifCalisma+0x1d4>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800447e:	4b42      	ldr	r3, [pc, #264]	@ (8004588 <checkAktifCalisma+0x1a4>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d164      	bne.n	8004550 <checkAktifCalisma+0x16c>
 8004486:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <checkAktifCalisma+0x1c8>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <checkAktifCalisma+0xb2>
 800448e:	4b46      	ldr	r3, [pc, #280]	@ (80045a8 <checkAktifCalisma+0x1c4>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d05c      	beq.n	8004550 <checkAktifCalisma+0x16c>
 8004496:	4b46      	ldr	r3, [pc, #280]	@ (80045b0 <checkAktifCalisma+0x1cc>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d058      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800449e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044a2:	4844      	ldr	r0, [pc, #272]	@ (80045b4 <checkAktifCalisma+0x1d0>)
 80044a4:	f007 fb56 	bl	800bb54 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <checkAktifCalisma+0xd2>
 80044ae:	4b44      	ldr	r3, [pc, #272]	@ (80045c0 <checkAktifCalisma+0x1dc>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d04c      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80044b6:	2102      	movs	r1, #2
 80044b8:	4842      	ldr	r0, [pc, #264]	@ (80045c4 <checkAktifCalisma+0x1e0>)
 80044ba:	f007 fb4b 	bl	800bb54 <HAL_GPIO_ReadPin>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d145      	bne.n	8004550 <checkAktifCalisma+0x16c>
							&& (basincVar)
 80044c4:	4b40      	ldr	r3, [pc, #256]	@ (80045c8 <checkAktifCalisma+0x1e4>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d041      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80044cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044d0:	4838      	ldr	r0, [pc, #224]	@ (80045b4 <checkAktifCalisma+0x1d0>)
 80044d2:	f007 fb3f 	bl	800bb54 <HAL_GPIO_ReadPin>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10e      	bne.n	80044fa <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80044dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044e0:	4834      	ldr	r0, [pc, #208]	@ (80045b4 <checkAktifCalisma+0x1d0>)
 80044e2:	f007 fb37 	bl	800bb54 <HAL_GPIO_ReadPin>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d106      	bne.n	80044fa <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80044ec:	2140      	movs	r1, #64	@ 0x40
 80044ee:	4835      	ldr	r0, [pc, #212]	@ (80045c4 <checkAktifCalisma+0x1e0>)
 80044f0:	f007 fb30 	bl	800bb54 <HAL_GPIO_ReadPin>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d003      	beq.n	8004502 <checkAktifCalisma+0x11e>
 80044fa:	4b24      	ldr	r3, [pc, #144]	@ (800458c <checkAktifCalisma+0x1a8>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d026      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <checkAktifCalisma+0x1b0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	f083 0301 	eor.w	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01f      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <checkAktifCalisma+0x1ac>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 800451e:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <checkAktifCalisma+0x1bc>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 800452c:	4b27      	ldr	r3, [pc, #156]	@ (80045cc <checkAktifCalisma+0x1e8>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f083 0301 	eor.w	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800453a:	4b25      	ldr	r3, [pc, #148]	@ (80045d0 <checkAktifCalisma+0x1ec>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f083 0301 	eor.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004548:	4b10      	ldr	r3, [pc, #64]	@ (800458c <checkAktifCalisma+0x1a8>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e002      	b.n	8004556 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004550:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <checkAktifCalisma+0x1a8>)
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <checkAktifCalisma+0x1a8>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03c      	beq.n	80045d8 <checkAktifCalisma+0x1f4>
 800455e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004562:	4818      	ldr	r0, [pc, #96]	@ (80045c4 <checkAktifCalisma+0x1e0>)
 8004564:	f007 faf6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d134      	bne.n	80045d8 <checkAktifCalisma+0x1f4>
 800456e:	4b19      	ldr	r3, [pc, #100]	@ (80045d4 <checkAktifCalisma+0x1f0>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d030      	beq.n	80045d8 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004576:	2201      	movs	r2, #1
 8004578:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800457c:	480d      	ldr	r0, [pc, #52]	@ (80045b4 <checkAktifCalisma+0x1d0>)
 800457e:	f007 fb00 	bl	800bb82 <HAL_GPIO_WritePin>
 8004582:	e02f      	b.n	80045e4 <checkAktifCalisma+0x200>
 8004584:	200013ee 	.word	0x200013ee
 8004588:	200013ed 	.word	0x200013ed
 800458c:	20001405 	.word	0x20001405
 8004590:	20001406 	.word	0x20001406
 8004594:	20001408 	.word	0x20001408
 8004598:	20001400 	.word	0x20001400
 800459c:	200013e3 	.word	0x200013e3
 80045a0:	20001407 	.word	0x20001407
 80045a4:	200013e2 	.word	0x200013e2
 80045a8:	20001422 	.word	0x20001422
 80045ac:	20001435 	.word	0x20001435
 80045b0:	20001423 	.word	0x20001423
 80045b4:	40010c00 	.word	0x40010c00
 80045b8:	20001424 	.word	0x20001424
 80045bc:	2000140f 	.word	0x2000140f
 80045c0:	2000140c 	.word	0x2000140c
 80045c4:	40011000 	.word	0x40011000
 80045c8:	200013d3 	.word	0x200013d3
 80045cc:	2000140a 	.word	0x2000140a
 80045d0:	2000140b 	.word	0x2000140b
 80045d4:	200013de 	.word	0x200013de
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80045d8:	2200      	movs	r2, #0
 80045da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80045de:	4865      	ldr	r0, [pc, #404]	@ (8004774 <checkAktifCalisma+0x390>)
 80045e0:	f007 facf 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80045e4:	4b64      	ldr	r3, [pc, #400]	@ (8004778 <checkAktifCalisma+0x394>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <checkAktifCalisma+0x230>
 80045ec:	4b63      	ldr	r3, [pc, #396]	@ (800477c <checkAktifCalisma+0x398>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d007      	beq.n	8004604 <checkAktifCalisma+0x220>
 80045f4:	4b61      	ldr	r3, [pc, #388]	@ (800477c <checkAktifCalisma+0x398>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d003      	beq.n	8004604 <checkAktifCalisma+0x220>
 80045fc:	4b60      	ldr	r3, [pc, #384]	@ (8004780 <checkAktifCalisma+0x39c>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004604:	2201      	movs	r2, #1
 8004606:	2104      	movs	r1, #4
 8004608:	485a      	ldr	r0, [pc, #360]	@ (8004774 <checkAktifCalisma+0x390>)
 800460a:	f007 faba 	bl	800bb82 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800460e:	4b5d      	ldr	r3, [pc, #372]	@ (8004784 <checkAktifCalisma+0x3a0>)
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004614:	4b5b      	ldr	r3, [pc, #364]	@ (8004784 <checkAktifCalisma+0x3a0>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d033      	beq.n	8004684 <checkAktifCalisma+0x2a0>
 800461c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004620:	4854      	ldr	r0, [pc, #336]	@ (8004774 <checkAktifCalisma+0x390>)
 8004622:	f007 fa97 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d106      	bne.n	800463a <checkAktifCalisma+0x256>
 800462c:	4b56      	ldr	r3, [pc, #344]	@ (8004788 <checkAktifCalisma+0x3a4>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f083 0301 	eor.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <checkAktifCalisma+0x264>
 800463a:	2102      	movs	r1, #2
 800463c:	4853      	ldr	r0, [pc, #332]	@ (800478c <checkAktifCalisma+0x3a8>)
 800463e:	f007 fa89 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d11d      	bne.n	8004684 <checkAktifCalisma+0x2a0>
 8004648:	4b51      	ldr	r3, [pc, #324]	@ (8004790 <checkAktifCalisma+0x3ac>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <checkAktifCalisma+0x274>
 8004650:	4b50      	ldr	r3, [pc, #320]	@ (8004794 <checkAktifCalisma+0x3b0>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d015      	beq.n	8004684 <checkAktifCalisma+0x2a0>
 8004658:	4b4f      	ldr	r3, [pc, #316]	@ (8004798 <checkAktifCalisma+0x3b4>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d011      	beq.n	8004684 <checkAktifCalisma+0x2a0>
 8004660:	4b4e      	ldr	r3, [pc, #312]	@ (800479c <checkAktifCalisma+0x3b8>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <checkAktifCalisma+0x2a0>
 8004668:	4b4d      	ldr	r3, [pc, #308]	@ (80047a0 <checkAktifCalisma+0x3bc>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8004676:	4b4b      	ldr	r3, [pc, #300]	@ (80047a4 <checkAktifCalisma+0x3c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4b      	ldr	r2, [pc, #300]	@ (80047a8 <checkAktifCalisma+0x3c4>)
 800467c:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800467e:	4b48      	ldr	r3, [pc, #288]	@ (80047a0 <checkAktifCalisma+0x3bc>)
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004684:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <checkAktifCalisma+0x3c0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <checkAktifCalisma+0x3c4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	4a47      	ldr	r2, [pc, #284]	@ (80047ac <checkAktifCalisma+0x3c8>)
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	4293      	cmp	r3, r2
 8004694:	d303      	bcc.n	800469e <checkAktifCalisma+0x2ba>
 8004696:	4b42      	ldr	r3, [pc, #264]	@ (80047a0 <checkAktifCalisma+0x3bc>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d118      	bne.n	80046d0 <checkAktifCalisma+0x2ec>
 800469e:	4b3c      	ldr	r3, [pc, #240]	@ (8004790 <checkAktifCalisma+0x3ac>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	f083 0301 	eor.w	r3, r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d006      	beq.n	80046ba <checkAktifCalisma+0x2d6>
 80046ac:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <checkAktifCalisma+0x3b0>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <checkAktifCalisma+0x2ec>
 80046ba:	4b37      	ldr	r3, [pc, #220]	@ (8004798 <checkAktifCalisma+0x3b4>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	f083 0301 	eor.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <checkAktifCalisma+0x2ec>
 80046c8:	4b34      	ldr	r3, [pc, #208]	@ (800479c <checkAktifCalisma+0x3b8>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2104      	movs	r1, #4
 80046d4:	4827      	ldr	r0, [pc, #156]	@ (8004774 <checkAktifCalisma+0x390>)
 80046d6:	f007 fa54 	bl	800bb82 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80046da:	4b2a      	ldr	r3, [pc, #168]	@ (8004784 <checkAktifCalisma+0x3a0>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80046e0:	4b2f      	ldr	r3, [pc, #188]	@ (80047a0 <checkAktifCalisma+0x3bc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80046e6:	4b32      	ldr	r3, [pc, #200]	@ (80047b0 <checkAktifCalisma+0x3cc>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <checkAktifCalisma+0x310>
					cerceveVar=1;
 80046ee:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <checkAktifCalisma+0x3d0>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80046f4:	4b2e      	ldr	r3, [pc, #184]	@ (80047b0 <checkAktifCalisma+0x3cc>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d116      	bne.n	800472a <checkAktifCalisma+0x346>
 80046fc:	4b2e      	ldr	r3, [pc, #184]	@ (80047b8 <checkAktifCalisma+0x3d4>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d112      	bne.n	800472a <checkAktifCalisma+0x346>
 8004704:	2101      	movs	r1, #1
 8004706:	4821      	ldr	r0, [pc, #132]	@ (800478c <checkAktifCalisma+0x3a8>)
 8004708:	f007 fa24 	bl	800bb54 <HAL_GPIO_ReadPin>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <checkAktifCalisma+0x346>
 8004712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004716:	4817      	ldr	r0, [pc, #92]	@ (8004774 <checkAktifCalisma+0x390>)
 8004718:	f007 fa1c 	bl	800bb54 <HAL_GPIO_ReadPin>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <checkAktifCalisma+0x346>
					cerceveVar=1;
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <checkAktifCalisma+0x3d0>)
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e011      	b.n	800474e <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800472a:	4b21      	ldr	r3, [pc, #132]	@ (80047b0 <checkAktifCalisma+0x3cc>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10d      	bne.n	800474e <checkAktifCalisma+0x36a>
 8004732:	2101      	movs	r1, #1
 8004734:	4815      	ldr	r0, [pc, #84]	@ (800478c <checkAktifCalisma+0x3a8>)
 8004736:	f007 fa0d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <checkAktifCalisma+0x36a>
 8004740:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <checkAktifCalisma+0x3d4>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004748:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <checkAktifCalisma+0x3d0>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800474e:	4b18      	ldr	r3, [pc, #96]	@ (80047b0 <checkAktifCalisma+0x3cc>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d135      	bne.n	80047c2 <checkAktifCalisma+0x3de>
 8004756:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <checkAktifCalisma+0x3d4>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d131      	bne.n	80047c2 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800475e:	2101      	movs	r1, #1
 8004760:	480a      	ldr	r0, [pc, #40]	@ (800478c <checkAktifCalisma+0x3a8>)
 8004762:	f007 f9f7 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d127      	bne.n	80047bc <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <checkAktifCalisma+0x3d0>)
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e026      	b.n	80047c2 <checkAktifCalisma+0x3de>
 8004774:	40010c00 	.word	0x40010c00
 8004778:	20001405 	.word	0x20001405
 800477c:	200013df 	.word	0x200013df
 8004780:	200013e3 	.word	0x200013e3
 8004784:	20001409 	.word	0x20001409
 8004788:	2000140c 	.word	0x2000140c
 800478c:	40011000 	.word	0x40011000
 8004790:	20001422 	.word	0x20001422
 8004794:	20001435 	.word	0x20001435
 8004798:	20001423 	.word	0x20001423
 800479c:	200013d3 	.word	0x200013d3
 80047a0:	20001401 	.word	0x20001401
 80047a4:	200013a0 	.word	0x200013a0
 80047a8:	200013ac 	.word	0x200013ac
 80047ac:	200013e4 	.word	0x200013e4
 80047b0:	200013d4 	.word	0x200013d4
 80047b4:	20001427 	.word	0x20001427
 80047b8:	200013d1 	.word	0x200013d1
					} else {
						cerceveVar=0;
 80047bc:	4b7f      	ldr	r3, [pc, #508]	@ (80049bc <checkAktifCalisma+0x5d8>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80047c2:	4b7f      	ldr	r3, [pc, #508]	@ (80049c0 <checkAktifCalisma+0x5dc>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d17c      	bne.n	80048c4 <checkAktifCalisma+0x4e0>
 80047ca:	4b7e      	ldr	r3, [pc, #504]	@ (80049c4 <checkAktifCalisma+0x5e0>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d078      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
 80047d2:	4b7d      	ldr	r3, [pc, #500]	@ (80049c8 <checkAktifCalisma+0x5e4>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d074      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80047da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047de:	487b      	ldr	r0, [pc, #492]	@ (80049cc <checkAktifCalisma+0x5e8>)
 80047e0:	f007 f9b8 	bl	800bb54 <HAL_GPIO_ReadPin>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <checkAktifCalisma+0x40e>
 80047ea:	4b79      	ldr	r3, [pc, #484]	@ (80049d0 <checkAktifCalisma+0x5ec>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d068      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80047f2:	4b72      	ldr	r3, [pc, #456]	@ (80049bc <checkAktifCalisma+0x5d8>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d064      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
 80047fa:	4b76      	ldr	r3, [pc, #472]	@ (80049d4 <checkAktifCalisma+0x5f0>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	f083 0301 	eor.w	r3, r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05d      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004808:	2104      	movs	r1, #4
 800480a:	4873      	ldr	r0, [pc, #460]	@ (80049d8 <checkAktifCalisma+0x5f4>)
 800480c:	f007 f9a2 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <checkAktifCalisma+0x43a>
 8004816:	4b71      	ldr	r3, [pc, #452]	@ (80049dc <checkAktifCalisma+0x5f8>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d152      	bne.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800481e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004822:	486a      	ldr	r0, [pc, #424]	@ (80049cc <checkAktifCalisma+0x5e8>)
 8004824:	f007 f996 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10e      	bne.n	800484c <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800482e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004832:	4866      	ldr	r0, [pc, #408]	@ (80049cc <checkAktifCalisma+0x5e8>)
 8004834:	f007 f98e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d106      	bne.n	800484c <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800483e:	2140      	movs	r1, #64	@ 0x40
 8004840:	4865      	ldr	r0, [pc, #404]	@ (80049d8 <checkAktifCalisma+0x5f4>)
 8004842:	f007 f987 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004846:	4603      	mov	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d003      	beq.n	8004854 <checkAktifCalisma+0x470>
 800484c:	4b64      	ldr	r3, [pc, #400]	@ (80049e0 <checkAktifCalisma+0x5fc>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d037      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004854:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <checkAktifCalisma+0x600>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	f083 0301 	eor.w	r3, r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d030      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004862:	4b61      	ldr	r3, [pc, #388]	@ (80049e8 <checkAktifCalisma+0x604>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	f083 0301 	eor.w	r3, r3, #1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d029      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004870:	4b5e      	ldr	r3, [pc, #376]	@ (80049ec <checkAktifCalisma+0x608>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d022      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800487e:	4b5c      	ldr	r3, [pc, #368]	@ (80049f0 <checkAktifCalisma+0x60c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f083 0301 	eor.w	r3, r3, #1
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 800488c:	4b59      	ldr	r3, [pc, #356]	@ (80049f4 <checkAktifCalisma+0x610>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f083 0301 	eor.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 800489a:	4b57      	ldr	r3, [pc, #348]	@ (80049f8 <checkAktifCalisma+0x614>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80048a8:	2201      	movs	r2, #1
 80048aa:	2102      	movs	r1, #2
 80048ac:	4847      	ldr	r0, [pc, #284]	@ (80049cc <checkAktifCalisma+0x5e8>)
 80048ae:	f007 f968 	bl	800bb82 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80048b2:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <checkAktifCalisma+0x5fc>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80048b8:	4b50      	ldr	r3, [pc, #320]	@ (80049fc <checkAktifCalisma+0x618>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80048be:	4b50      	ldr	r3, [pc, #320]	@ (8004a00 <checkAktifCalisma+0x61c>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80048c4:	4b46      	ldr	r3, [pc, #280]	@ (80049e0 <checkAktifCalisma+0x5fc>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d033      	beq.n	8004934 <checkAktifCalisma+0x550>
 80048cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048d0:	483e      	ldr	r0, [pc, #248]	@ (80049cc <checkAktifCalisma+0x5e8>)
 80048d2:	f007 f93f 	bl	800bb54 <HAL_GPIO_ReadPin>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d106      	bne.n	80048ea <checkAktifCalisma+0x506>
 80048dc:	4b3c      	ldr	r3, [pc, #240]	@ (80049d0 <checkAktifCalisma+0x5ec>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f083 0301 	eor.w	r3, r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <checkAktifCalisma+0x51c>
 80048ea:	2104      	movs	r1, #4
 80048ec:	483a      	ldr	r0, [pc, #232]	@ (80049d8 <checkAktifCalisma+0x5f4>)
 80048ee:	f007 f931 	bl	800bb54 <HAL_GPIO_ReadPin>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d11d      	bne.n	8004934 <checkAktifCalisma+0x550>
 80048f8:	4b38      	ldr	r3, [pc, #224]	@ (80049dc <checkAktifCalisma+0x5f8>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d019      	beq.n	8004934 <checkAktifCalisma+0x550>
 8004900:	4b30      	ldr	r3, [pc, #192]	@ (80049c4 <checkAktifCalisma+0x5e0>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <checkAktifCalisma+0x550>
 8004908:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <checkAktifCalisma+0x5e4>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d011      	beq.n	8004934 <checkAktifCalisma+0x550>
 8004910:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <checkAktifCalisma+0x5d8>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <checkAktifCalisma+0x550>
 8004918:	4b3a      	ldr	r3, [pc, #232]	@ (8004a04 <checkAktifCalisma+0x620>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f083 0301 	eor.w	r3, r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <checkAktifCalisma+0x550>
					timer2=millis;
 8004926:	4b38      	ldr	r3, [pc, #224]	@ (8004a08 <checkAktifCalisma+0x624>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a38      	ldr	r2, [pc, #224]	@ (8004a0c <checkAktifCalisma+0x628>)
 800492c:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800492e:	4b35      	ldr	r3, [pc, #212]	@ (8004a04 <checkAktifCalisma+0x620>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004934:	4b34      	ldr	r3, [pc, #208]	@ (8004a08 <checkAktifCalisma+0x624>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <checkAktifCalisma+0x628>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	4a34      	ldr	r2, [pc, #208]	@ (8004a10 <checkAktifCalisma+0x62c>)
 8004940:	7812      	ldrb	r2, [r2, #0]
 8004942:	4293      	cmp	r3, r2
 8004944:	d303      	bcc.n	800494e <checkAktifCalisma+0x56a>
 8004946:	4b2f      	ldr	r3, [pc, #188]	@ (8004a04 <checkAktifCalisma+0x620>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d114      	bne.n	8004978 <checkAktifCalisma+0x594>
 800494e:	4b1d      	ldr	r3, [pc, #116]	@ (80049c4 <checkAktifCalisma+0x5e0>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f083 0301 	eor.w	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10d      	bne.n	8004978 <checkAktifCalisma+0x594>
 800495c:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <checkAktifCalisma+0x5e4>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f083 0301 	eor.w	r3, r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <checkAktifCalisma+0x594>
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <checkAktifCalisma+0x5d8>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f083 0301 	eor.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004978:	2200      	movs	r2, #0
 800497a:	2102      	movs	r1, #2
 800497c:	4813      	ldr	r0, [pc, #76]	@ (80049cc <checkAktifCalisma+0x5e8>)
 800497e:	f007 f900 	bl	800bb82 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004982:	4b17      	ldr	r3, [pc, #92]	@ (80049e0 <checkAktifCalisma+0x5fc>)
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004988:	4b1e      	ldr	r3, [pc, #120]	@ (8004a04 <checkAktifCalisma+0x620>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800498e:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <checkAktifCalisma+0x5fc>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d040      	beq.n	8004a18 <checkAktifCalisma+0x634>
 8004996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800499a:	480f      	ldr	r0, [pc, #60]	@ (80049d8 <checkAktifCalisma+0x5f4>)
 800499c:	f007 f8da 	bl	800bb54 <HAL_GPIO_ReadPin>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d138      	bne.n	8004a18 <checkAktifCalisma+0x634>
 80049a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <checkAktifCalisma+0x630>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d034      	beq.n	8004a18 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80049ae:	2201      	movs	r2, #1
 80049b0:	2101      	movs	r1, #1
 80049b2:	4806      	ldr	r0, [pc, #24]	@ (80049cc <checkAktifCalisma+0x5e8>)
 80049b4:	f007 f8e5 	bl	800bb82 <HAL_GPIO_WritePin>
 80049b8:	e033      	b.n	8004a22 <checkAktifCalisma+0x63e>
 80049ba:	bf00      	nop
 80049bc:	20001427 	.word	0x20001427
 80049c0:	200013ed 	.word	0x200013ed
 80049c4:	20001422 	.word	0x20001422
 80049c8:	20001423 	.word	0x20001423
 80049cc:	40010c00 	.word	0x40010c00
 80049d0:	2000140d 	.word	0x2000140d
 80049d4:	20001421 	.word	0x20001421
 80049d8:	40011000 	.word	0x40011000
 80049dc:	200013d6 	.word	0x200013d6
 80049e0:	20001408 	.word	0x20001408
 80049e4:	20001405 	.word	0x20001405
 80049e8:	20001409 	.word	0x20001409
 80049ec:	20001406 	.word	0x20001406
 80049f0:	20001407 	.word	0x20001407
 80049f4:	2000140a 	.word	0x2000140a
 80049f8:	2000140b 	.word	0x2000140b
 80049fc:	20001410 	.word	0x20001410
 8004a00:	20001431 	.word	0x20001431
 8004a04:	20001400 	.word	0x20001400
 8004a08:	200013a0 	.word	0x200013a0
 8004a0c:	200013ac 	.word	0x200013ac
 8004a10:	200013e5 	.word	0x200013e5
 8004a14:	200013d5 	.word	0x200013d5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4836      	ldr	r0, [pc, #216]	@ (8004af8 <checkAktifCalisma+0x714>)
 8004a1e:	f007 f8b0 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004a22:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <checkAktifCalisma+0x718>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 8080 	bne.w	8004b2c <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004a2c:	4b34      	ldr	r3, [pc, #208]	@ (8004b00 <checkAktifCalisma+0x71c>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d003      	beq.n	8004a3c <checkAktifCalisma+0x658>
 8004a34:	4b32      	ldr	r3, [pc, #200]	@ (8004b00 <checkAktifCalisma+0x71c>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d177      	bne.n	8004b2c <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004a3c:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <checkAktifCalisma+0x720>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d073      	beq.n	8004b2c <checkAktifCalisma+0x748>
 8004a44:	4b30      	ldr	r3, [pc, #192]	@ (8004b08 <checkAktifCalisma+0x724>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d06f      	beq.n	8004b2c <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a50:	4829      	ldr	r0, [pc, #164]	@ (8004af8 <checkAktifCalisma+0x714>)
 8004a52:	f007 f87f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d167      	bne.n	8004b2c <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a60:	482a      	ldr	r0, [pc, #168]	@ (8004b0c <checkAktifCalisma+0x728>)
 8004a62:	f007 f877 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <checkAktifCalisma+0x690>
 8004a6c:	4b28      	ldr	r3, [pc, #160]	@ (8004b10 <checkAktifCalisma+0x72c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d15b      	bne.n	8004b2c <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004a74:	2140      	movs	r1, #64	@ 0x40
 8004a76:	4825      	ldr	r0, [pc, #148]	@ (8004b0c <checkAktifCalisma+0x728>)
 8004a78:	f007 f86c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10f      	bne.n	8004aa2 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004a82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a86:	481c      	ldr	r0, [pc, #112]	@ (8004af8 <checkAktifCalisma+0x714>)
 8004a88:	f007 f864 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004a92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a96:	4818      	ldr	r0, [pc, #96]	@ (8004af8 <checkAktifCalisma+0x714>)
 8004a98:	f007 f85c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d003      	beq.n	8004aaa <checkAktifCalisma+0x6c6>
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b14 <checkAktifCalisma+0x730>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d040      	beq.n	8004b2c <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <checkAktifCalisma+0x734>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	f083 0301 	eor.w	r3, r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d039      	beq.n	8004b2c <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004ab8:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <checkAktifCalisma+0x738>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	f083 0301 	eor.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d032      	beq.n	8004b2c <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004ac6:	4b16      	ldr	r3, [pc, #88]	@ (8004b20 <checkAktifCalisma+0x73c>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f083 0301 	eor.w	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d02b      	beq.n	8004b2c <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <checkAktifCalisma+0x740>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f083 0301 	eor.w	r3, r3, #1
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d024      	beq.n	8004b2c <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004ae2:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <checkAktifCalisma+0x744>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f083 0301 	eor.w	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01d      	beq.n	8004b2c <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004af0:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <checkAktifCalisma+0x730>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e01c      	b.n	8004b32 <checkAktifCalisma+0x74e>
 8004af8:	40010c00 	.word	0x40010c00
 8004afc:	200013ed 	.word	0x200013ed
 8004b00:	200013df 	.word	0x200013df
 8004b04:	20001422 	.word	0x20001422
 8004b08:	20001423 	.word	0x20001423
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	200013e0 	.word	0x200013e0
 8004b14:	20001406 	.word	0x20001406
 8004b18:	20001405 	.word	0x20001405
 8004b1c:	20001409 	.word	0x20001409
 8004b20:	20001408 	.word	0x20001408
 8004b24:	20001407 	.word	0x20001407
 8004b28:	2000140b 	.word	0x2000140b
				} else {
					devmotoryukaricalisiyor=0;
 8004b2c:	4b64      	ldr	r3, [pc, #400]	@ (8004cc0 <checkAktifCalisma+0x8dc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004b32:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <checkAktifCalisma+0x8dc>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	4861      	ldr	r0, [pc, #388]	@ (8004cc4 <checkAktifCalisma+0x8e0>)
 8004b40:	f007 f81f 	bl	800bb82 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004b44:	4b60      	ldr	r3, [pc, #384]	@ (8004cc8 <checkAktifCalisma+0x8e4>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cc8 <checkAktifCalisma+0x8e4>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d025      	beq.n	8004b9e <checkAktifCalisma+0x7ba>
 8004b52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b56:	485d      	ldr	r0, [pc, #372]	@ (8004ccc <checkAktifCalisma+0x8e8>)
 8004b58:	f006 fffc 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d007      	beq.n	8004b72 <checkAktifCalisma+0x78e>
 8004b62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b66:	4857      	ldr	r0, [pc, #348]	@ (8004cc4 <checkAktifCalisma+0x8e0>)
 8004b68:	f006 fff4 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d115      	bne.n	8004b9e <checkAktifCalisma+0x7ba>
 8004b72:	4b57      	ldr	r3, [pc, #348]	@ (8004cd0 <checkAktifCalisma+0x8ec>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d011      	beq.n	8004b9e <checkAktifCalisma+0x7ba>
 8004b7a:	4b56      	ldr	r3, [pc, #344]	@ (8004cd4 <checkAktifCalisma+0x8f0>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <checkAktifCalisma+0x7ba>
 8004b82:	4b55      	ldr	r3, [pc, #340]	@ (8004cd8 <checkAktifCalisma+0x8f4>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	f083 0301 	eor.w	r3, r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d006      	beq.n	8004b9e <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004b90:	4b52      	ldr	r3, [pc, #328]	@ (8004cdc <checkAktifCalisma+0x8f8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <checkAktifCalisma+0x8fc>)
 8004b96:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004b98:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd8 <checkAktifCalisma+0x8f4>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004cdc <checkAktifCalisma+0x8f8>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce0 <checkAktifCalisma+0x8fc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8004ce4 <checkAktifCalisma+0x900>)
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d303      	bcc.n	8004bb8 <checkAktifCalisma+0x7d4>
 8004bb0:	4b49      	ldr	r3, [pc, #292]	@ (8004cd8 <checkAktifCalisma+0x8f4>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <checkAktifCalisma+0x7f0>
 8004bb8:	4b45      	ldr	r3, [pc, #276]	@ (8004cd0 <checkAktifCalisma+0x8ec>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f083 0301 	eor.w	r3, r3, #1
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <checkAktifCalisma+0x7f0>
 8004bc6:	4b43      	ldr	r3, [pc, #268]	@ (8004cd4 <checkAktifCalisma+0x8f0>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	f083 0301 	eor.w	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	483a      	ldr	r0, [pc, #232]	@ (8004cc4 <checkAktifCalisma+0x8e0>)
 8004bda:	f006 ffd2 	bl	800bb82 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004bde:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc8 <checkAktifCalisma+0x8e4>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004be4:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd8 <checkAktifCalisma+0x8f4>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004bea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ce8 <checkAktifCalisma+0x904>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 8088 	bne.w	8004d04 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cec <checkAktifCalisma+0x908>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d003      	beq.n	8004c04 <checkAktifCalisma+0x820>
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cec <checkAktifCalisma+0x908>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d17f      	bne.n	8004d04 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004c04:	4b32      	ldr	r3, [pc, #200]	@ (8004cd0 <checkAktifCalisma+0x8ec>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d07b      	beq.n	8004d04 <checkAktifCalisma+0x920>
 8004c0c:	4b31      	ldr	r3, [pc, #196]	@ (8004cd4 <checkAktifCalisma+0x8f0>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d077      	beq.n	8004d04 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004c14:	2140      	movs	r1, #64	@ 0x40
 8004c16:	482b      	ldr	r0, [pc, #172]	@ (8004cc4 <checkAktifCalisma+0x8e0>)
 8004c18:	f006 ff9c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d170      	bne.n	8004d04 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004c22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c26:	4827      	ldr	r0, [pc, #156]	@ (8004cc4 <checkAktifCalisma+0x8e0>)
 8004c28:	f006 ff94 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <checkAktifCalisma+0x856>
 8004c32:	4b2f      	ldr	r3, [pc, #188]	@ (8004cf0 <checkAktifCalisma+0x90c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d164      	bne.n	8004d04 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004c3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c3e:	4823      	ldr	r0, [pc, #140]	@ (8004ccc <checkAktifCalisma+0x8e8>)
 8004c40:	f006 ff88 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10f      	bne.n	8004c6a <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c4e:	481f      	ldr	r0, [pc, #124]	@ (8004ccc <checkAktifCalisma+0x8e8>)
 8004c50:	f006 ff80 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004c5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c5e:	481b      	ldr	r0, [pc, #108]	@ (8004ccc <checkAktifCalisma+0x8e8>)
 8004c60:	f006 ff78 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d003      	beq.n	8004c72 <checkAktifCalisma+0x88e>
 8004c6a:	4b22      	ldr	r3, [pc, #136]	@ (8004cf4 <checkAktifCalisma+0x910>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d048      	beq.n	8004d04 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004c72:	4b21      	ldr	r3, [pc, #132]	@ (8004cf8 <checkAktifCalisma+0x914>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	f083 0301 	eor.w	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d041      	beq.n	8004d04 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004c80:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <checkAktifCalisma+0x918>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03a      	beq.n	8004d04 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d00 <checkAktifCalisma+0x91c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	f083 0301 	eor.w	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d033      	beq.n	8004d04 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <checkAktifCalisma+0x8e4>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f083 0301 	eor.w	r3, r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02c      	beq.n	8004d04 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <checkAktifCalisma+0x8dc>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	f083 0301 	eor.w	r3, r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d025      	beq.n	8004d04 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <checkAktifCalisma+0x910>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e024      	b.n	8004d0a <checkAktifCalisma+0x926>
 8004cc0:	20001406 	.word	0x20001406
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	2000140a 	.word	0x2000140a
 8004ccc:	40010c00 	.word	0x40010c00
 8004cd0:	20001422 	.word	0x20001422
 8004cd4:	20001423 	.word	0x20001423
 8004cd8:	20001402 	.word	0x20001402
 8004cdc:	200013a0 	.word	0x200013a0
 8004ce0:	200013ac 	.word	0x200013ac
 8004ce4:	200013e6 	.word	0x200013e6
 8004ce8:	200013ed 	.word	0x200013ed
 8004cec:	200013df 	.word	0x200013df
 8004cf0:	200013e1 	.word	0x200013e1
 8004cf4:	20001407 	.word	0x20001407
 8004cf8:	20001405 	.word	0x20001405
 8004cfc:	20001409 	.word	0x20001409
 8004d00:	20001408 	.word	0x20001408
				} else {
					devmotorasagicalisiyor=0;
 8004d04:	4b96      	ldr	r3, [pc, #600]	@ (8004f60 <checkAktifCalisma+0xb7c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004d0a:	4b95      	ldr	r3, [pc, #596]	@ (8004f60 <checkAktifCalisma+0xb7c>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004d12:	2201      	movs	r2, #1
 8004d14:	2110      	movs	r1, #16
 8004d16:	4893      	ldr	r0, [pc, #588]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004d18:	f006 ff33 	bl	800bb82 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004d1c:	4b92      	ldr	r3, [pc, #584]	@ (8004f68 <checkAktifCalisma+0xb84>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004d22:	4b91      	ldr	r3, [pc, #580]	@ (8004f68 <checkAktifCalisma+0xb84>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d024      	beq.n	8004d74 <checkAktifCalisma+0x990>
 8004d2a:	2140      	movs	r1, #64	@ 0x40
 8004d2c:	488d      	ldr	r0, [pc, #564]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004d2e:	f006 ff11 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d007      	beq.n	8004d48 <checkAktifCalisma+0x964>
 8004d38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d3c:	4889      	ldr	r0, [pc, #548]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004d3e:	f006 ff09 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d115      	bne.n	8004d74 <checkAktifCalisma+0x990>
 8004d48:	4b88      	ldr	r3, [pc, #544]	@ (8004f6c <checkAktifCalisma+0xb88>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d011      	beq.n	8004d74 <checkAktifCalisma+0x990>
 8004d50:	4b87      	ldr	r3, [pc, #540]	@ (8004f70 <checkAktifCalisma+0xb8c>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00d      	beq.n	8004d74 <checkAktifCalisma+0x990>
 8004d58:	4b86      	ldr	r3, [pc, #536]	@ (8004f74 <checkAktifCalisma+0xb90>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f083 0301 	eor.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d006      	beq.n	8004d74 <checkAktifCalisma+0x990>
					timer2=millis;
 8004d66:	4b84      	ldr	r3, [pc, #528]	@ (8004f78 <checkAktifCalisma+0xb94>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a84      	ldr	r2, [pc, #528]	@ (8004f7c <checkAktifCalisma+0xb98>)
 8004d6c:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004d6e:	4b81      	ldr	r3, [pc, #516]	@ (8004f74 <checkAktifCalisma+0xb90>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004d74:	4b80      	ldr	r3, [pc, #512]	@ (8004f78 <checkAktifCalisma+0xb94>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b80      	ldr	r3, [pc, #512]	@ (8004f7c <checkAktifCalisma+0xb98>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	4a80      	ldr	r2, [pc, #512]	@ (8004f80 <checkAktifCalisma+0xb9c>)
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d303      	bcc.n	8004d8e <checkAktifCalisma+0x9aa>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	@ (8004f74 <checkAktifCalisma+0xb90>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <checkAktifCalisma+0x9c6>
 8004d8e:	4b77      	ldr	r3, [pc, #476]	@ (8004f6c <checkAktifCalisma+0xb88>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f083 0301 	eor.w	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <checkAktifCalisma+0x9c6>
 8004d9c:	4b74      	ldr	r3, [pc, #464]	@ (8004f70 <checkAktifCalisma+0xb8c>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f083 0301 	eor.w	r3, r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2110      	movs	r1, #16
 8004dae:	486d      	ldr	r0, [pc, #436]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004db0:	f006 fee7 	bl	800bb82 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004db4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f68 <checkAktifCalisma+0xb84>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004dba:	4b6e      	ldr	r3, [pc, #440]	@ (8004f74 <checkAktifCalisma+0xb90>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004dc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004dc4:	486f      	ldr	r0, [pc, #444]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004dc6:	f006 fec5 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d120      	bne.n	8004e12 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004dd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004dd4:	486b      	ldr	r0, [pc, #428]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004dd6:	f006 febd 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d118      	bne.n	8004e12 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004de0:	2104      	movs	r1, #4
 8004de2:	4868      	ldr	r0, [pc, #416]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004de4:	f006 feb6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d111      	bne.n	8004e12 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004dee:	2102      	movs	r1, #2
 8004df0:	4864      	ldr	r0, [pc, #400]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004df2:	f006 feaf 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4861      	ldr	r0, [pc, #388]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004e00:	f006 fea8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f88 <checkAktifCalisma+0xba4>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e002      	b.n	8004e18 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004e12:	4b5d      	ldr	r3, [pc, #372]	@ (8004f88 <checkAktifCalisma+0xba4>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e18:	4b5c      	ldr	r3, [pc, #368]	@ (8004f8c <checkAktifCalisma+0xba8>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d144      	bne.n	8004eaa <checkAktifCalisma+0xac6>
 8004e20:	4b5b      	ldr	r3, [pc, #364]	@ (8004f90 <checkAktifCalisma+0xbac>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d003      	beq.n	8004e30 <checkAktifCalisma+0xa4c>
 8004e28:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <checkAktifCalisma+0xbac>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d13c      	bne.n	8004eaa <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e30:	2180      	movs	r1, #128	@ 0x80
 8004e32:	484c      	ldr	r0, [pc, #304]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004e34:	f006 fe8e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <checkAktifCalisma+0xa62>
 8004e3e:	4b55      	ldr	r3, [pc, #340]	@ (8004f94 <checkAktifCalisma+0xbb0>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <checkAktifCalisma+0xa7a>
 8004e46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e4a:	484e      	ldr	r0, [pc, #312]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004e4c:	f006 fe82 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d129      	bne.n	8004eaa <checkAktifCalisma+0xac6>
 8004e56:	4b4f      	ldr	r3, [pc, #316]	@ (8004f94 <checkAktifCalisma+0xbb0>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d125      	bne.n	8004eaa <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e5e:	2104      	movs	r1, #4
 8004e60:	4840      	ldr	r0, [pc, #256]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004e62:	f006 fe77 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d003      	beq.n	8004e74 <checkAktifCalisma+0xa90>
 8004e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f98 <checkAktifCalisma+0xbb4>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11a      	bne.n	8004eaa <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e74:	2102      	movs	r1, #2
 8004e76:	483b      	ldr	r0, [pc, #236]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004e78:	f006 fe6c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d113      	bne.n	8004eaa <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004e82:	4b46      	ldr	r3, [pc, #280]	@ (8004f9c <checkAktifCalisma+0xbb8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00c      	beq.n	8004eaa <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004e90:	4b3d      	ldr	r3, [pc, #244]	@ (8004f88 <checkAktifCalisma+0xba4>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004e98:	4b41      	ldr	r3, [pc, #260]	@ (8004fa0 <checkAktifCalisma+0xbbc>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004e9e:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <checkAktifCalisma+0xb94>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	@ (8004fa4 <checkAktifCalisma+0xbc0>)
 8004ea4:	6013      	str	r3, [r2, #0]
					bekle();
 8004ea6:	f7ff f901 	bl	80040ac <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004eaa:	4b33      	ldr	r3, [pc, #204]	@ (8004f78 <checkAktifCalisma+0xb94>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa4 <checkAktifCalisma+0xbc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa8 <checkAktifCalisma+0xbc4>)
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d211      	bcs.n	8004ee0 <checkAktifCalisma+0xafc>
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	4829      	ldr	r0, [pc, #164]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004ec0:	f006 fe48 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <checkAktifCalisma+0xafc>
 8004eca:	4b33      	ldr	r3, [pc, #204]	@ (8004f98 <checkAktifCalisma+0xbb4>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d006      	beq.n	8004ee0 <checkAktifCalisma+0xafc>
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f88 <checkAktifCalisma+0xba4>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	f083 0301 	eor.w	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa0 <checkAktifCalisma+0xbbc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ee6:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <checkAktifCalisma+0xba8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d160      	bne.n	8004fb0 <checkAktifCalisma+0xbcc>
 8004eee:	4b28      	ldr	r3, [pc, #160]	@ (8004f90 <checkAktifCalisma+0xbac>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d003      	beq.n	8004efe <checkAktifCalisma+0xb1a>
 8004ef6:	4b26      	ldr	r3, [pc, #152]	@ (8004f90 <checkAktifCalisma+0xbac>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d158      	bne.n	8004fb0 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004efe:	2104      	movs	r1, #4
 8004f00:	4818      	ldr	r0, [pc, #96]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004f02:	f006 fe27 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d003      	beq.n	8004f14 <checkAktifCalisma+0xb30>
 8004f0c:	4b22      	ldr	r3, [pc, #136]	@ (8004f98 <checkAktifCalisma+0xbb4>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d14d      	bne.n	8004fb0 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f14:	2102      	movs	r1, #2
 8004f16:	4813      	ldr	r0, [pc, #76]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004f18:	f006 fe1c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d146      	bne.n	8004fb0 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004f22:	2180      	movs	r1, #128	@ 0x80
 8004f24:	480f      	ldr	r0, [pc, #60]	@ (8004f64 <checkAktifCalisma+0xb80>)
 8004f26:	f006 fe15 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <checkAktifCalisma+0xb54>
 8004f30:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <checkAktifCalisma+0xbb0>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <checkAktifCalisma+0xb6c>
 8004f38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f3c:	4811      	ldr	r0, [pc, #68]	@ (8004f84 <checkAktifCalisma+0xba0>)
 8004f3e:	f006 fe09 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d133      	bne.n	8004fb0 <checkAktifCalisma+0xbcc>
 8004f48:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <checkAktifCalisma+0xbb0>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d12f      	bne.n	8004fb0 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004f50:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <checkAktifCalisma+0xba4>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02b      	beq.n	8004fb0 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004f58:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <checkAktifCalisma+0xbc8>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e02a      	b.n	8004fb6 <checkAktifCalisma+0xbd2>
 8004f60:	20001407 	.word	0x20001407
 8004f64:	40011000 	.word	0x40011000
 8004f68:	2000140b 	.word	0x2000140b
 8004f6c:	20001422 	.word	0x20001422
 8004f70:	20001423 	.word	0x20001423
 8004f74:	20001403 	.word	0x20001403
 8004f78:	200013a0 	.word	0x200013a0
 8004f7c:	200013ac 	.word	0x200013ac
 8004f80:	200013e6 	.word	0x200013e6
 8004f84:	40010c00 	.word	0x40010c00
 8004f88:	20001412 	.word	0x20001412
 8004f8c:	200013d9 	.word	0x200013d9
 8004f90:	200013d8 	.word	0x200013d8
 8004f94:	200013dc 	.word	0x200013dc
 8004f98:	200013d6 	.word	0x200013d6
 8004f9c:	200013ff 	.word	0x200013ff
 8004fa0:	20001413 	.word	0x20001413
 8004fa4:	200013a4 	.word	0x200013a4
 8004fa8:	200013e9 	.word	0x200013e9
 8004fac:	20001414 	.word	0x20001414
				} else {
					kapi1butonkontrol=0;
 8004fb0:	4b8b      	ldr	r3, [pc, #556]	@ (80051e0 <checkAktifCalisma+0xdfc>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80051e4 <checkAktifCalisma+0xe00>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d121      	bne.n	8005002 <checkAktifCalisma+0xc1e>
 8004fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d003      	beq.n	8004fce <checkAktifCalisma+0xbea>
 8004fc6:	4b88      	ldr	r3, [pc, #544]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d119      	bne.n	8005002 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004fce:	2104      	movs	r1, #4
 8004fd0:	4886      	ldr	r0, [pc, #536]	@ (80051ec <checkAktifCalisma+0xe08>)
 8004fd2:	f006 fdbf 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d003      	beq.n	8004fe4 <checkAktifCalisma+0xc00>
 8004fdc:	4b84      	ldr	r3, [pc, #528]	@ (80051f0 <checkAktifCalisma+0xe0c>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10e      	bne.n	8005002 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4881      	ldr	r0, [pc, #516]	@ (80051ec <checkAktifCalisma+0xe08>)
 8004fe8:	f006 fdb4 	bl	800bb54 <HAL_GPIO_ReadPin>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004ff2:	4b80      	ldr	r3, [pc, #512]	@ (80051f4 <checkAktifCalisma+0xe10>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <checkAktifCalisma+0xe14>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e002      	b.n	8005008 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8005002:	4b7d      	ldr	r3, [pc, #500]	@ (80051f8 <checkAktifCalisma+0xe14>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005008:	4b75      	ldr	r3, [pc, #468]	@ (80051e0 <checkAktifCalisma+0xdfc>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <checkAktifCalisma+0xc3c>
 8005010:	4b79      	ldr	r3, [pc, #484]	@ (80051f8 <checkAktifCalisma+0xe14>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <checkAktifCalisma+0xc3c>
 8005018:	4b78      	ldr	r3, [pc, #480]	@ (80051fc <checkAktifCalisma+0xe18>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005020:	2201      	movs	r2, #1
 8005022:	2180      	movs	r1, #128	@ 0x80
 8005024:	4876      	ldr	r0, [pc, #472]	@ (8005200 <checkAktifCalisma+0xe1c>)
 8005026:	f006 fdac 	bl	800bb82 <HAL_GPIO_WritePin>
 800502a:	e004      	b.n	8005036 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800502c:	2200      	movs	r2, #0
 800502e:	2180      	movs	r1, #128	@ 0x80
 8005030:	4873      	ldr	r0, [pc, #460]	@ (8005200 <checkAktifCalisma+0xe1c>)
 8005032:	f006 fda6 	bl	800bb82 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005036:	4b73      	ldr	r3, [pc, #460]	@ (8005204 <checkAktifCalisma+0xe20>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d141      	bne.n	80050c2 <checkAktifCalisma+0xcde>
 800503e:	4b6a      	ldr	r3, [pc, #424]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d003      	beq.n	800504e <checkAktifCalisma+0xc6a>
 8005046:	4b68      	ldr	r3, [pc, #416]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d139      	bne.n	80050c2 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800504e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005052:	4866      	ldr	r0, [pc, #408]	@ (80051ec <checkAktifCalisma+0xe08>)
 8005054:	f006 fd7e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <checkAktifCalisma+0xc82>
 800505e:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <checkAktifCalisma+0xe24>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <checkAktifCalisma+0xc9a>
 8005066:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800506a:	4868      	ldr	r0, [pc, #416]	@ (800520c <checkAktifCalisma+0xe28>)
 800506c:	f006 fd72 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d125      	bne.n	80050c2 <checkAktifCalisma+0xcde>
 8005076:	4b64      	ldr	r3, [pc, #400]	@ (8005208 <checkAktifCalisma+0xe24>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d121      	bne.n	80050c2 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800507e:	2102      	movs	r1, #2
 8005080:	485a      	ldr	r0, [pc, #360]	@ (80051ec <checkAktifCalisma+0xe08>)
 8005082:	f006 fd67 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005086:	4603      	mov	r3, r0
 8005088:	2b01      	cmp	r3, #1
 800508a:	d11a      	bne.n	80050c2 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800508c:	2104      	movs	r1, #4
 800508e:	4857      	ldr	r0, [pc, #348]	@ (80051ec <checkAktifCalisma+0xe08>)
 8005090:	f006 fd60 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d113      	bne.n	80050c2 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 800509a:	4b56      	ldr	r3, [pc, #344]	@ (80051f4 <checkAktifCalisma+0xe10>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00f      	beq.n	80050c2 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 80050a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005210 <checkAktifCalisma+0xe2c>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f083 0301 	eor.w	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 80050b0:	4b58      	ldr	r3, [pc, #352]	@ (8005214 <checkAktifCalisma+0xe30>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80050b6:	4b58      	ldr	r3, [pc, #352]	@ (8005218 <checkAktifCalisma+0xe34>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a58      	ldr	r2, [pc, #352]	@ (800521c <checkAktifCalisma+0xe38>)
 80050bc:	6013      	str	r3, [r2, #0]
					bekle();
 80050be:	f7fe fff5 	bl	80040ac <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80050c2:	4b55      	ldr	r3, [pc, #340]	@ (8005218 <checkAktifCalisma+0xe34>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b55      	ldr	r3, [pc, #340]	@ (800521c <checkAktifCalisma+0xe38>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	4a54      	ldr	r2, [pc, #336]	@ (8005220 <checkAktifCalisma+0xe3c>)
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d20d      	bcs.n	80050f0 <checkAktifCalisma+0xd0c>
 80050d4:	2102      	movs	r1, #2
 80050d6:	4845      	ldr	r0, [pc, #276]	@ (80051ec <checkAktifCalisma+0xe08>)
 80050d8:	f006 fd3c 	bl	800bb54 <HAL_GPIO_ReadPin>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d006      	beq.n	80050f0 <checkAktifCalisma+0xd0c>
 80050e2:	4b44      	ldr	r3, [pc, #272]	@ (80051f4 <checkAktifCalisma+0xe10>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 80050f0:	4b48      	ldr	r3, [pc, #288]	@ (8005214 <checkAktifCalisma+0xe30>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050f6:	4b43      	ldr	r3, [pc, #268]	@ (8005204 <checkAktifCalisma+0xe20>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d135      	bne.n	800516a <checkAktifCalisma+0xd86>
 80050fe:	4b3a      	ldr	r3, [pc, #232]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d003      	beq.n	800510e <checkAktifCalisma+0xd2a>
 8005106:	4b38      	ldr	r3, [pc, #224]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d12d      	bne.n	800516a <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800510e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005112:	4836      	ldr	r0, [pc, #216]	@ (80051ec <checkAktifCalisma+0xe08>)
 8005114:	f006 fd1e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <checkAktifCalisma+0xd42>
 800511e:	4b3a      	ldr	r3, [pc, #232]	@ (8005208 <checkAktifCalisma+0xe24>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <checkAktifCalisma+0xd5a>
 8005126:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800512a:	4838      	ldr	r0, [pc, #224]	@ (800520c <checkAktifCalisma+0xe28>)
 800512c:	f006 fd12 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d119      	bne.n	800516a <checkAktifCalisma+0xd86>
 8005136:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <checkAktifCalisma+0xe24>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d115      	bne.n	800516a <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800513e:	2102      	movs	r1, #2
 8005140:	482a      	ldr	r0, [pc, #168]	@ (80051ec <checkAktifCalisma+0xe08>)
 8005142:	f006 fd07 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d10e      	bne.n	800516a <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800514c:	2104      	movs	r1, #4
 800514e:	4827      	ldr	r0, [pc, #156]	@ (80051ec <checkAktifCalisma+0xe08>)
 8005150:	f006 fd00 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 800515a:	4b26      	ldr	r3, [pc, #152]	@ (80051f4 <checkAktifCalisma+0xe10>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8005162:	4b30      	ldr	r3, [pc, #192]	@ (8005224 <checkAktifCalisma+0xe40>)
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e002      	b.n	8005170 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800516a:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <checkAktifCalisma+0xe40>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005170:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <checkAktifCalisma+0xe20>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d11d      	bne.n	80051b4 <checkAktifCalisma+0xdd0>
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <checkAktifCalisma+0xe04>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d003      	beq.n	8005188 <checkAktifCalisma+0xda4>
 8005180:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <checkAktifCalisma+0xe04>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d115      	bne.n	80051b4 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005188:	2102      	movs	r1, #2
 800518a:	4818      	ldr	r0, [pc, #96]	@ (80051ec <checkAktifCalisma+0xe08>)
 800518c:	f006 fce2 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10e      	bne.n	80051b4 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005196:	2104      	movs	r1, #4
 8005198:	4814      	ldr	r0, [pc, #80]	@ (80051ec <checkAktifCalisma+0xe08>)
 800519a:	f006 fcdb 	bl	800bb54 <HAL_GPIO_ReadPin>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d107      	bne.n	80051b4 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 80051a4:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <checkAktifCalisma+0xe10>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 80051ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005228 <checkAktifCalisma+0xe44>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e002      	b.n	80051ba <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 80051b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <checkAktifCalisma+0xe44>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80051ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <checkAktifCalisma+0xe40>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <checkAktifCalisma+0xdee>
 80051c2:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <checkAktifCalisma+0xe44>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <checkAktifCalisma+0xdee>
 80051ca:	4b12      	ldr	r3, [pc, #72]	@ (8005214 <checkAktifCalisma+0xe30>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d02c      	beq.n	800522c <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80051d2:	2201      	movs	r2, #1
 80051d4:	2140      	movs	r1, #64	@ 0x40
 80051d6:	480a      	ldr	r0, [pc, #40]	@ (8005200 <checkAktifCalisma+0xe1c>)
 80051d8:	f006 fcd3 	bl	800bb82 <HAL_GPIO_WritePin>
 80051dc:	e02b      	b.n	8005236 <checkAktifCalisma+0xe52>
 80051de:	bf00      	nop
 80051e0:	20001414 	.word	0x20001414
 80051e4:	200013d9 	.word	0x200013d9
 80051e8:	200013d8 	.word	0x200013d8
 80051ec:	40011000 	.word	0x40011000
 80051f0:	200013d6 	.word	0x200013d6
 80051f4:	20001412 	.word	0x20001412
 80051f8:	20001415 	.word	0x20001415
 80051fc:	20001413 	.word	0x20001413
 8005200:	40010800 	.word	0x40010800
 8005204:	200013da 	.word	0x200013da
 8005208:	200013dc 	.word	0x200013dc
 800520c:	40010c00 	.word	0x40010c00
 8005210:	200013ff 	.word	0x200013ff
 8005214:	20001416 	.word	0x20001416
 8005218:	200013a0 	.word	0x200013a0
 800521c:	200013a4 	.word	0x200013a4
 8005220:	200013ea 	.word	0x200013ea
 8005224:	20001417 	.word	0x20001417
 8005228:	20001418 	.word	0x20001418
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	@ 0x40
 8005230:	4835      	ldr	r0, [pc, #212]	@ (8005308 <checkAktifCalisma+0xf24>)
 8005232:	f006 fca6 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8005236:	4b35      	ldr	r3, [pc, #212]	@ (800530c <checkAktifCalisma+0xf28>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <checkAktifCalisma+0xe62>
 800523e:	4b33      	ldr	r3, [pc, #204]	@ (800530c <checkAktifCalisma+0xf28>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d115      	bne.n	8005272 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005246:	2104      	movs	r1, #4
 8005248:	4831      	ldr	r0, [pc, #196]	@ (8005310 <checkAktifCalisma+0xf2c>)
 800524a:	f006 fc83 	bl	800bb54 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d003      	beq.n	800525c <checkAktifCalisma+0xe78>
 8005254:	4b2f      	ldr	r3, [pc, #188]	@ (8005314 <checkAktifCalisma+0xf30>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800525c:	2102      	movs	r1, #2
 800525e:	482c      	ldr	r0, [pc, #176]	@ (8005310 <checkAktifCalisma+0xf2c>)
 8005260:	f006 fc78 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800526a:	4b2b      	ldr	r3, [pc, #172]	@ (8005318 <checkAktifCalisma+0xf34>)
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e002      	b.n	8005278 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005272:	4b29      	ldr	r3, [pc, #164]	@ (8005318 <checkAktifCalisma+0xf34>)
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005278:	4b24      	ldr	r3, [pc, #144]	@ (800530c <checkAktifCalisma+0xf28>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d003      	beq.n	8005288 <checkAktifCalisma+0xea4>
 8005280:	4b22      	ldr	r3, [pc, #136]	@ (800530c <checkAktifCalisma+0xf28>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d111      	bne.n	80052ac <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005288:	2102      	movs	r1, #2
 800528a:	4821      	ldr	r0, [pc, #132]	@ (8005310 <checkAktifCalisma+0xf2c>)
 800528c:	f006 fc62 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005290:	4603      	mov	r3, r0
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10a      	bne.n	80052ac <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005296:	2104      	movs	r1, #4
 8005298:	481d      	ldr	r0, [pc, #116]	@ (8005310 <checkAktifCalisma+0xf2c>)
 800529a:	f006 fc5b 	bl	800bb54 <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <checkAktifCalisma+0xf38>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <checkAktifCalisma+0xf38>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80052b2:	4b19      	ldr	r3, [pc, #100]	@ (8005318 <checkAktifCalisma+0xf34>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00f      	beq.n	80052da <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 80052ba:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <checkAktifCalisma+0xf3c>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d10b      	bne.n	80052da <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80052c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052c6:	4817      	ldr	r0, [pc, #92]	@ (8005324 <checkAktifCalisma+0xf40>)
 80052c8:	f006 fc44 	bl	800bb54 <HAL_GPIO_ReadPin>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 80052d2:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <checkAktifCalisma+0xf44>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e002      	b.n	80052e0 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 80052da:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <checkAktifCalisma+0xf44>)
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80052e0:	4b0e      	ldr	r3, [pc, #56]	@ (800531c <checkAktifCalisma+0xf38>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 80052e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <checkAktifCalisma+0xf3c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d11f      	bne.n	8005330 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80052f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052f4:	480b      	ldr	r0, [pc, #44]	@ (8005324 <checkAktifCalisma+0xf40>)
 80052f6:	f006 fc2d 	bl	800bb54 <HAL_GPIO_ReadPin>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d117      	bne.n	8005330 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8005300:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <checkAktifCalisma+0xf48>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e016      	b.n	8005336 <checkAktifCalisma+0xf52>
 8005308:	40010800 	.word	0x40010800
 800530c:	200013dd 	.word	0x200013dd
 8005310:	40011000 	.word	0x40011000
 8005314:	200013d6 	.word	0x200013d6
 8005318:	2000141c 	.word	0x2000141c
 800531c:	2000141d 	.word	0x2000141d
 8005320:	200013dc 	.word	0x200013dc
 8005324:	40010c00 	.word	0x40010c00
 8005328:	2000142c 	.word	0x2000142c
 800532c:	2000142d 	.word	0x2000142d
				} else {
					kapiactablaesp2=0;
 8005330:	4b7e      	ldr	r3, [pc, #504]	@ (800552c <checkAktifCalisma+0x1148>)
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005336:	4b7e      	ldr	r3, [pc, #504]	@ (8005530 <checkAktifCalisma+0x114c>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d154      	bne.n	80053e8 <checkAktifCalisma+0x1004>
 800533e:	4b7d      	ldr	r3, [pc, #500]	@ (8005534 <checkAktifCalisma+0x1150>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d003      	beq.n	800534e <checkAktifCalisma+0xf6a>
 8005346:	4b7b      	ldr	r3, [pc, #492]	@ (8005534 <checkAktifCalisma+0x1150>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d14c      	bne.n	80053e8 <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800534e:	4b7a      	ldr	r3, [pc, #488]	@ (8005538 <checkAktifCalisma+0x1154>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <checkAktifCalisma+0xf7a>
 8005356:	4b79      	ldr	r3, [pc, #484]	@ (800553c <checkAktifCalisma+0x1158>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d044      	beq.n	80053e8 <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800535e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005362:	4877      	ldr	r0, [pc, #476]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005364:	f006 fbf6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01c      	beq.n	80053a8 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800536e:	2180      	movs	r1, #128	@ 0x80
 8005370:	4873      	ldr	r0, [pc, #460]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005372:	f006 fbef 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800537c:	2104      	movs	r1, #4
 800537e:	4870      	ldr	r0, [pc, #448]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005380:	f006 fbe8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d00e      	beq.n	80053a8 <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800538a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800538e:	486c      	ldr	r0, [pc, #432]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005390:	f006 fbe0 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800539a:	2102      	movs	r1, #2
 800539c:	4868      	ldr	r0, [pc, #416]	@ (8005540 <checkAktifCalisma+0x115c>)
 800539e:	f006 fbd9 	bl	800bb54 <HAL_GPIO_ReadPin>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d103      	bne.n	80053b0 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80053a8:	4b66      	ldr	r3, [pc, #408]	@ (8005544 <checkAktifCalisma+0x1160>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <checkAktifCalisma+0xfdc>
 80053b0:	4b65      	ldr	r3, [pc, #404]	@ (8005548 <checkAktifCalisma+0x1164>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <checkAktifCalisma+0xfdc>
 80053b8:	4b5c      	ldr	r3, [pc, #368]	@ (800552c <checkAktifCalisma+0x1148>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 80053c0:	4b62      	ldr	r3, [pc, #392]	@ (800554c <checkAktifCalisma+0x1168>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00f      	beq.n	80053e8 <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 80053c8:	4b61      	ldr	r3, [pc, #388]	@ (8005550 <checkAktifCalisma+0x116c>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f083 0301 	eor.w	r3, r3, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 80053d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005554 <checkAktifCalisma+0x1170>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80053dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005558 <checkAktifCalisma+0x1174>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a5e      	ldr	r2, [pc, #376]	@ (800555c <checkAktifCalisma+0x1178>)
 80053e2:	6013      	str	r3, [r2, #0]
					bekle();
 80053e4:	f7fe fe62 	bl	80040ac <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80053e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005558 <checkAktifCalisma+0x1174>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b5b      	ldr	r3, [pc, #364]	@ (800555c <checkAktifCalisma+0x1178>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005560 <checkAktifCalisma+0x117c>)
 80053f4:	7812      	ldrb	r2, [r2, #0]
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d214      	bcs.n	8005424 <checkAktifCalisma+0x1040>
 80053fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005538 <checkAktifCalisma+0x1154>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f083 0301 	eor.w	r3, r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <checkAktifCalisma+0x1032>
 8005408:	4b4c      	ldr	r3, [pc, #304]	@ (800553c <checkAktifCalisma+0x1158>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <checkAktifCalisma+0x1040>
 8005416:	4b4d      	ldr	r3, [pc, #308]	@ (800554c <checkAktifCalisma+0x1168>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f083 0301 	eor.w	r3, r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8005424:	4b4b      	ldr	r3, [pc, #300]	@ (8005554 <checkAktifCalisma+0x1170>)
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800542a:	4b41      	ldr	r3, [pc, #260]	@ (8005530 <checkAktifCalisma+0x114c>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d148      	bne.n	80054c4 <checkAktifCalisma+0x10e0>
 8005432:	4b40      	ldr	r3, [pc, #256]	@ (8005534 <checkAktifCalisma+0x1150>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d003      	beq.n	8005442 <checkAktifCalisma+0x105e>
 800543a:	4b3e      	ldr	r3, [pc, #248]	@ (8005534 <checkAktifCalisma+0x1150>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d140      	bne.n	80054c4 <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005442:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <checkAktifCalisma+0x1154>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <checkAktifCalisma+0x106e>
 800544a:	4b3c      	ldr	r3, [pc, #240]	@ (800553c <checkAktifCalisma+0x1158>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d038      	beq.n	80054c4 <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005452:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005456:	483a      	ldr	r0, [pc, #232]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005458:	f006 fb7c 	bl	800bb54 <HAL_GPIO_ReadPin>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01c      	beq.n	800549c <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005462:	2180      	movs	r1, #128	@ 0x80
 8005464:	4836      	ldr	r0, [pc, #216]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005466:	f006 fb75 	bl	800bb54 <HAL_GPIO_ReadPin>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005470:	2104      	movs	r1, #4
 8005472:	4833      	ldr	r0, [pc, #204]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005474:	f006 fb6e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d00e      	beq.n	800549c <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800547e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005482:	482f      	ldr	r0, [pc, #188]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005484:	f006 fb66 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800548e:	2102      	movs	r1, #2
 8005490:	482b      	ldr	r0, [pc, #172]	@ (8005540 <checkAktifCalisma+0x115c>)
 8005492:	f006 fb5f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d103      	bne.n	80054a4 <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800549c:	4b29      	ldr	r3, [pc, #164]	@ (8005544 <checkAktifCalisma+0x1160>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <checkAktifCalisma+0x10d0>
 80054a4:	4b28      	ldr	r3, [pc, #160]	@ (8005548 <checkAktifCalisma+0x1164>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <checkAktifCalisma+0x10d0>
 80054ac:	4b1f      	ldr	r3, [pc, #124]	@ (800552c <checkAktifCalisma+0x1148>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 80054b4:	4b25      	ldr	r3, [pc, #148]	@ (800554c <checkAktifCalisma+0x1168>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 80054bc:	4b29      	ldr	r3, [pc, #164]	@ (8005564 <checkAktifCalisma+0x1180>)
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e002      	b.n	80054ca <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 80054c4:	4b27      	ldr	r3, [pc, #156]	@ (8005564 <checkAktifCalisma+0x1180>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80054ca:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <checkAktifCalisma+0x114c>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d117      	bne.n	8005502 <checkAktifCalisma+0x111e>
 80054d2:	4b18      	ldr	r3, [pc, #96]	@ (8005534 <checkAktifCalisma+0x1150>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d003      	beq.n	80054e2 <checkAktifCalisma+0x10fe>
 80054da:	4b16      	ldr	r3, [pc, #88]	@ (8005534 <checkAktifCalisma+0x1150>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d10f      	bne.n	8005502 <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <checkAktifCalisma+0x1154>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <checkAktifCalisma+0x110e>
 80054ea:	4b14      	ldr	r3, [pc, #80]	@ (800553c <checkAktifCalisma+0x1158>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 80054f2:	4b16      	ldr	r3, [pc, #88]	@ (800554c <checkAktifCalisma+0x1168>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 80054fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005568 <checkAktifCalisma+0x1184>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e002      	b.n	8005508 <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005502:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <checkAktifCalisma+0x1184>)
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005508:	4b16      	ldr	r3, [pc, #88]	@ (8005564 <checkAktifCalisma+0x1180>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <checkAktifCalisma+0x113c>
 8005510:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <checkAktifCalisma+0x1170>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <checkAktifCalisma+0x113c>
 8005518:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <checkAktifCalisma+0x1184>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d027      	beq.n	8005570 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005520:	2201      	movs	r2, #1
 8005522:	2120      	movs	r1, #32
 8005524:	4811      	ldr	r0, [pc, #68]	@ (800556c <checkAktifCalisma+0x1188>)
 8005526:	f006 fb2c 	bl	800bb82 <HAL_GPIO_WritePin>
 800552a:	e026      	b.n	800557a <checkAktifCalisma+0x1196>
 800552c:	2000142d 	.word	0x2000142d
 8005530:	200013db 	.word	0x200013db
 8005534:	200013d8 	.word	0x200013d8
 8005538:	2000141c 	.word	0x2000141c
 800553c:	2000141d 	.word	0x2000141d
 8005540:	40011000 	.word	0x40011000
 8005544:	200013dc 	.word	0x200013dc
 8005548:	2000142c 	.word	0x2000142c
 800554c:	20001412 	.word	0x20001412
 8005550:	200013ff 	.word	0x200013ff
 8005554:	20001419 	.word	0x20001419
 8005558:	200013a0 	.word	0x200013a0
 800555c:	200013a4 	.word	0x200013a4
 8005560:	200013eb 	.word	0x200013eb
 8005564:	2000141a 	.word	0x2000141a
 8005568:	2000141b 	.word	0x2000141b
 800556c:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005570:	2200      	movs	r2, #0
 8005572:	2120      	movs	r1, #32
 8005574:	4881      	ldr	r0, [pc, #516]	@ (800577c <checkAktifCalisma+0x1398>)
 8005576:	f006 fb04 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800557a:	4b81      	ldr	r3, [pc, #516]	@ (8005780 <checkAktifCalisma+0x139c>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <checkAktifCalisma+0x11bc>
 8005582:	2102      	movs	r1, #2
 8005584:	487f      	ldr	r0, [pc, #508]	@ (8005784 <checkAktifCalisma+0x13a0>)
 8005586:	f006 fae5 	bl	800bb54 <HAL_GPIO_ReadPin>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d107      	bne.n	80055a0 <checkAktifCalisma+0x11bc>
 8005590:	4b7d      	ldr	r3, [pc, #500]	@ (8005788 <checkAktifCalisma+0x13a4>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <checkAktifCalisma+0x11bc>
 8005598:	4b7c      	ldr	r3, [pc, #496]	@ (800578c <checkAktifCalisma+0x13a8>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d112      	bne.n	80055c6 <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80055a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005790 <checkAktifCalisma+0x13ac>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d026      	beq.n	80055f6 <checkAktifCalisma+0x1212>
 80055a8:	2104      	movs	r1, #4
 80055aa:	4876      	ldr	r0, [pc, #472]	@ (8005784 <checkAktifCalisma+0x13a0>)
 80055ac:	f006 fad2 	bl	800bb54 <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d11f      	bne.n	80055f6 <checkAktifCalisma+0x1212>
 80055b6:	4b74      	ldr	r3, [pc, #464]	@ (8005788 <checkAktifCalisma+0x13a4>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01b      	beq.n	80055f6 <checkAktifCalisma+0x1212>
 80055be:	4b73      	ldr	r3, [pc, #460]	@ (800578c <checkAktifCalisma+0x13a8>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d017      	beq.n	80055f6 <checkAktifCalisma+0x1212>



					calismaSayisi++;
 80055c6:	4b73      	ldr	r3, [pc, #460]	@ (8005794 <checkAktifCalisma+0x13b0>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	1c54      	adds	r4, r2, #1
 80055ce:	f143 0500 	adc.w	r5, r3, #0
 80055d2:	4b70      	ldr	r3, [pc, #448]	@ (8005794 <checkAktifCalisma+0x13b0>)
 80055d4:	e9c3 4500 	strd	r4, r5, [r3]
					eepromData[27]=calismaSayisi;
 80055d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005794 <checkAktifCalisma+0x13b0>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	496e      	ldr	r1, [pc, #440]	@ (8005798 <checkAktifCalisma+0x13b4>)
 80055e0:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8

					hafizaYaz=1;
 80055e4:	4b6d      	ldr	r3, [pc, #436]	@ (800579c <checkAktifCalisma+0x13b8>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80055ea:	4b65      	ldr	r3, [pc, #404]	@ (8005780 <checkAktifCalisma+0x139c>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80055f0:	4b67      	ldr	r3, [pc, #412]	@ (8005790 <checkAktifCalisma+0x13ac>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80055f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80055fa:	4869      	ldr	r0, [pc, #420]	@ (80057a0 <checkAktifCalisma+0x13bc>)
 80055fc:	f006 faaa 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <checkAktifCalisma+0x1250>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800560a:	4865      	ldr	r0, [pc, #404]	@ (80057a0 <checkAktifCalisma+0x13bc>)
 800560c:	f006 faa2 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <checkAktifCalisma+0x1250>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800561a:	4861      	ldr	r0, [pc, #388]	@ (80057a0 <checkAktifCalisma+0x13bc>)
 800561c:	f006 fa9a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d006      	beq.n	8005634 <checkAktifCalisma+0x1250>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005626:	2140      	movs	r1, #64	@ 0x40
 8005628:	4856      	ldr	r0, [pc, #344]	@ (8005784 <checkAktifCalisma+0x13a0>)
 800562a:	f006 fa93 	bl	800bb54 <HAL_GPIO_ReadPin>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <checkAktifCalisma+0x1258>

					startBasili=1;
 8005634:	4b5b      	ldr	r3, [pc, #364]	@ (80057a4 <checkAktifCalisma+0x13c0>)
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e002      	b.n	8005642 <checkAktifCalisma+0x125e>
				} else {
					startBasili=0;
 800563c:	4b59      	ldr	r3, [pc, #356]	@ (80057a4 <checkAktifCalisma+0x13c0>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005642:	4b58      	ldr	r3, [pc, #352]	@ (80057a4 <checkAktifCalisma+0x13c0>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d014      	beq.n	8005674 <checkAktifCalisma+0x1290>
 800564a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800564e:	4854      	ldr	r0, [pc, #336]	@ (80057a0 <checkAktifCalisma+0x13bc>)
 8005650:	f006 fa80 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10c      	bne.n	8005674 <checkAktifCalisma+0x1290>

					hataVar=1;
 800565a:	4b53      	ldr	r3, [pc, #332]	@ (80057a8 <checkAktifCalisma+0x13c4>)
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005660:	2001      	movs	r0, #1
 8005662:	f7fb fac5 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005666:	2001      	movs	r0, #1
 8005668:	f7fb fa5c 	bl	8000b24 <hata2EEPROM>
					acilstophatasi=1;
 800566c:	4b4f      	ldr	r3, [pc, #316]	@ (80057ac <checkAktifCalisma+0x13c8>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e018      	b.n	80056a6 <checkAktifCalisma+0x12c2>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005674:	4b4d      	ldr	r3, [pc, #308]	@ (80057ac <checkAktifCalisma+0x13c8>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d014      	beq.n	80056a6 <checkAktifCalisma+0x12c2>
 800567c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005680:	4847      	ldr	r0, [pc, #284]	@ (80057a0 <checkAktifCalisma+0x13bc>)
 8005682:	f006 fa67 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10c      	bne.n	80056a6 <checkAktifCalisma+0x12c2>
 800568c:	4b45      	ldr	r3, [pc, #276]	@ (80057a4 <checkAktifCalisma+0x13c0>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f083 0301 	eor.w	r3, r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <checkAktifCalisma+0x12c2>
					acilstophatasi=0;
 800569a:	4b44      	ldr	r3, [pc, #272]	@ (80057ac <checkAktifCalisma+0x13c8>)
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80056a0:	2001      	movs	r0, #1
 80056a2:	f7fe fc99 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80056a6:	4b42      	ldr	r3, [pc, #264]	@ (80057b0 <checkAktifCalisma+0x13cc>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d023      	beq.n	80056fc <checkAktifCalisma+0x1318>
 80056b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056b8:	4839      	ldr	r0, [pc, #228]	@ (80057a0 <checkAktifCalisma+0x13bc>)
 80056ba:	f006 fa4b 	bl	800bb54 <HAL_GPIO_ReadPin>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <checkAktifCalisma+0x12e8>
 80056c4:	4b3b      	ldr	r3, [pc, #236]	@ (80057b4 <checkAktifCalisma+0x13d0>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <checkAktifCalisma+0x1318>
 80056cc:	4b3a      	ldr	r3, [pc, #232]	@ (80057b8 <checkAktifCalisma+0x13d4>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d113      	bne.n	80056fc <checkAktifCalisma+0x1318>
 80056d4:	4b39      	ldr	r3, [pc, #228]	@ (80057bc <checkAktifCalisma+0x13d8>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f083 0301 	eor.w	r3, r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <checkAktifCalisma+0x1318>
					hataVar=1;
 80056e2:	4b31      	ldr	r3, [pc, #196]	@ (80057a8 <checkAktifCalisma+0x13c4>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80056e8:	2002      	movs	r0, #2
 80056ea:	f7fb fa81 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80056ee:	2002      	movs	r0, #2
 80056f0:	f7fb fa18 	bl	8000b24 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80056f4:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <checkAktifCalisma+0x13d8>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e017      	b.n	800572c <checkAktifCalisma+0x1348>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80056fc:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <checkAktifCalisma+0x13d8>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <checkAktifCalisma+0x1348>
 8005704:	4b2a      	ldr	r3, [pc, #168]	@ (80057b0 <checkAktifCalisma+0x13cc>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00f      	beq.n	800572c <checkAktifCalisma+0x1348>
 800570c:	4b2c      	ldr	r3, [pc, #176]	@ (80057c0 <checkAktifCalisma+0x13dc>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f083 0301 	eor.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <checkAktifCalisma+0x1348>
					emniyetCercevesihatasi=0;
 800571a:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <checkAktifCalisma+0x13d8>)
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005720:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <checkAktifCalisma+0x13d0>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8005726:	2002      	movs	r0, #2
 8005728:	f7fe fc56 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800572c:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <checkAktifCalisma+0x13e0>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d14f      	bne.n	80057d4 <checkAktifCalisma+0x13f0>
 8005734:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <checkAktifCalisma+0x13e4>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d14b      	bne.n	80057d4 <checkAktifCalisma+0x13f0>
 800573c:	4b23      	ldr	r3, [pc, #140]	@ (80057cc <checkAktifCalisma+0x13e8>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d047      	beq.n	80057d4 <checkAktifCalisma+0x13f0>
 8005744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005748:	480e      	ldr	r0, [pc, #56]	@ (8005784 <checkAktifCalisma+0x13a0>)
 800574a:	f006 fa03 	bl	800bb54 <HAL_GPIO_ReadPin>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d13f      	bne.n	80057d4 <checkAktifCalisma+0x13f0>
 8005754:	4b1e      	ldr	r3, [pc, #120]	@ (80057d0 <checkAktifCalisma+0x13ec>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f083 0301 	eor.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d038      	beq.n	80057d4 <checkAktifCalisma+0x13f0>
					hataVar=1;
 8005762:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <checkAktifCalisma+0x13c4>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005768:	2003      	movs	r0, #3
 800576a:	f7fb fa41 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 800576e:	2003      	movs	r0, #3
 8005770:	f7fb f9d8 	bl	8000b24 <hata2EEPROM>
					basinchatasi=1;
 8005774:	4b16      	ldr	r3, [pc, #88]	@ (80057d0 <checkAktifCalisma+0x13ec>)
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e041      	b.n	8005800 <checkAktifCalisma+0x141c>
 800577c:	40010800 	.word	0x40010800
 8005780:	2000140f 	.word	0x2000140f
 8005784:	40011000 	.word	0x40011000
 8005788:	200013d6 	.word	0x200013d6
 800578c:	20001412 	.word	0x20001412
 8005790:	20001410 	.word	0x20001410
 8005794:	200013c0 	.word	0x200013c0
 8005798:	20000ff0 	.word	0x20000ff0
 800579c:	200013fc 	.word	0x200013fc
 80057a0:	40010c00 	.word	0x40010c00
 80057a4:	2000141e 	.word	0x2000141e
 80057a8:	20001425 	.word	0x20001425
 80057ac:	20001420 	.word	0x20001420
 80057b0:	20001427 	.word	0x20001427
 80057b4:	20001431 	.word	0x20001431
 80057b8:	200013d4 	.word	0x200013d4
 80057bc:	20001421 	.word	0x20001421
 80057c0:	20001408 	.word	0x20001408
 80057c4:	200013d3 	.word	0x200013d3
 80057c8:	200013d7 	.word	0x200013d7
 80057cc:	20001424 	.word	0x20001424
 80057d0:	2000142e 	.word	0x2000142e
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80057d4:	4b85      	ldr	r3, [pc, #532]	@ (80059ec <checkAktifCalisma+0x1608>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d011      	beq.n	8005800 <checkAktifCalisma+0x141c>
 80057dc:	4b84      	ldr	r3, [pc, #528]	@ (80059f0 <checkAktifCalisma+0x160c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10d      	bne.n	8005800 <checkAktifCalisma+0x141c>
 80057e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057e8:	4882      	ldr	r0, [pc, #520]	@ (80059f4 <checkAktifCalisma+0x1610>)
 80057ea:	f006 f9b3 	bl	800bb54 <HAL_GPIO_ReadPin>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <checkAktifCalisma+0x141c>
					basinchatasi=0;
 80057f4:	4b7d      	ldr	r3, [pc, #500]	@ (80059ec <checkAktifCalisma+0x1608>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80057fa:	2003      	movs	r0, #3
 80057fc:	f7fe fbec 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005800:	4b7d      	ldr	r3, [pc, #500]	@ (80059f8 <checkAktifCalisma+0x1614>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d103      	bne.n	8005810 <checkAktifCalisma+0x142c>
 8005808:	4b7c      	ldr	r3, [pc, #496]	@ (80059fc <checkAktifCalisma+0x1618>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d023      	beq.n	8005858 <checkAktifCalisma+0x1474>
 8005810:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005814:	487a      	ldr	r0, [pc, #488]	@ (8005a00 <checkAktifCalisma+0x161c>)
 8005816:	f006 f99d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b01      	cmp	r3, #1
 800581e:	d11b      	bne.n	8005858 <checkAktifCalisma+0x1474>
 8005820:	4b78      	ldr	r3, [pc, #480]	@ (8005a04 <checkAktifCalisma+0x1620>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d003      	beq.n	8005830 <checkAktifCalisma+0x144c>
 8005828:	4b76      	ldr	r3, [pc, #472]	@ (8005a04 <checkAktifCalisma+0x1620>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d113      	bne.n	8005858 <checkAktifCalisma+0x1474>
 8005830:	4b75      	ldr	r3, [pc, #468]	@ (8005a08 <checkAktifCalisma+0x1624>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f083 0301 	eor.w	r3, r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <checkAktifCalisma+0x1474>
					hataVar=1;
 800583e:	4b73      	ldr	r3, [pc, #460]	@ (8005a0c <checkAktifCalisma+0x1628>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005844:	2004      	movs	r0, #4
 8005846:	f7fb f9d3 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800584a:	2004      	movs	r0, #4
 800584c:	f7fb f96a 	bl	8000b24 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005850:	4b6d      	ldr	r3, [pc, #436]	@ (8005a08 <checkAktifCalisma+0x1624>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e01f      	b.n	8005898 <checkAktifCalisma+0x14b4>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005858:	4b6b      	ldr	r3, [pc, #428]	@ (8005a08 <checkAktifCalisma+0x1624>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <checkAktifCalisma+0x14b4>
 8005860:	4b6b      	ldr	r3, [pc, #428]	@ (8005a10 <checkAktifCalisma+0x162c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <checkAktifCalisma+0x14b4>
 8005868:	4b63      	ldr	r3, [pc, #396]	@ (80059f8 <checkAktifCalisma+0x1614>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f083 0301 	eor.w	r3, r3, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <checkAktifCalisma+0x14b4>
 8005876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800587a:	4861      	ldr	r0, [pc, #388]	@ (8005a00 <checkAktifCalisma+0x161c>)
 800587c:	f006 f96a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <checkAktifCalisma+0x14b4>

					katkapisivicihatasi=0;
 8005886:	4b60      	ldr	r3, [pc, #384]	@ (8005a08 <checkAktifCalisma+0x1624>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800588c:	4b5b      	ldr	r3, [pc, #364]	@ (80059fc <checkAktifCalisma+0x1618>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005892:	2004      	movs	r0, #4
 8005894:	f7fe fba0 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005898:	4b57      	ldr	r3, [pc, #348]	@ (80059f8 <checkAktifCalisma+0x1614>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <checkAktifCalisma+0x14c4>
 80058a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005a14 <checkAktifCalisma+0x1630>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d023      	beq.n	80058f0 <checkAktifCalisma+0x150c>
 80058a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058ac:	4854      	ldr	r0, [pc, #336]	@ (8005a00 <checkAktifCalisma+0x161c>)
 80058ae:	f006 f951 	bl	800bb54 <HAL_GPIO_ReadPin>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11b      	bne.n	80058f0 <checkAktifCalisma+0x150c>
 80058b8:	4b52      	ldr	r3, [pc, #328]	@ (8005a04 <checkAktifCalisma+0x1620>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d003      	beq.n	80058c8 <checkAktifCalisma+0x14e4>
 80058c0:	4b50      	ldr	r3, [pc, #320]	@ (8005a04 <checkAktifCalisma+0x1620>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d113      	bne.n	80058f0 <checkAktifCalisma+0x150c>
 80058c8:	4b53      	ldr	r3, [pc, #332]	@ (8005a18 <checkAktifCalisma+0x1634>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f083 0301 	eor.w	r3, r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <checkAktifCalisma+0x150c>

					hataVar=1;
 80058d6:	4b4d      	ldr	r3, [pc, #308]	@ (8005a0c <checkAktifCalisma+0x1628>)
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80058dc:	2005      	movs	r0, #5
 80058de:	f7fb f987 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80058e2:	2005      	movs	r0, #5
 80058e4:	f7fb f91e 	bl	8000b24 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80058e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005a18 <checkAktifCalisma+0x1634>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e023      	b.n	8005938 <checkAktifCalisma+0x1554>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80058f0:	4b49      	ldr	r3, [pc, #292]	@ (8005a18 <checkAktifCalisma+0x1634>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01f      	beq.n	8005938 <checkAktifCalisma+0x1554>
 80058f8:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <checkAktifCalisma+0x162c>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <checkAktifCalisma+0x1554>
 8005900:	4b3d      	ldr	r3, [pc, #244]	@ (80059f8 <checkAktifCalisma+0x1614>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f083 0301 	eor.w	r3, r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <checkAktifCalisma+0x1554>
 800590e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005912:	483b      	ldr	r0, [pc, #236]	@ (8005a00 <checkAktifCalisma+0x161c>)
 8005914:	f006 f91e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <checkAktifCalisma+0x1554>
 800591e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a10 <checkAktifCalisma+0x162c>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <checkAktifCalisma+0x1554>
					tablakapisivicihatasi=0;
 8005926:	4b3c      	ldr	r3, [pc, #240]	@ (8005a18 <checkAktifCalisma+0x1634>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 800592c:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <checkAktifCalisma+0x1630>)
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005932:	2005      	movs	r0, #5
 8005934:	f7fe fb50 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005938:	4b38      	ldr	r3, [pc, #224]	@ (8005a1c <checkAktifCalisma+0x1638>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d107      	bne.n	8005950 <checkAktifCalisma+0x156c>
 8005940:	4b37      	ldr	r3, [pc, #220]	@ (8005a20 <checkAktifCalisma+0x163c>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <checkAktifCalisma+0x156c>
 8005948:	4b36      	ldr	r3, [pc, #216]	@ (8005a24 <checkAktifCalisma+0x1640>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01b      	beq.n	8005988 <checkAktifCalisma+0x15a4>
 8005950:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <checkAktifCalisma+0x1644>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f083 0301 	eor.w	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d014      	beq.n	8005988 <checkAktifCalisma+0x15a4>
				    if(millis-timer4>=makineCalismaTmr) {
 800595e:	4b33      	ldr	r3, [pc, #204]	@ (8005a2c <checkAktifCalisma+0x1648>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b33      	ldr	r3, [pc, #204]	@ (8005a30 <checkAktifCalisma+0x164c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	4a32      	ldr	r2, [pc, #200]	@ (8005a34 <checkAktifCalisma+0x1650>)
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	4293      	cmp	r3, r2
 800596e:	d30b      	bcc.n	8005988 <checkAktifCalisma+0x15a4>
					  	hataVar=1;
 8005970:	4b26      	ldr	r3, [pc, #152]	@ (8005a0c <checkAktifCalisma+0x1628>)
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005976:	2006      	movs	r0, #6
 8005978:	f7fb f93a 	bl	8000bf0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 800597c:	2006      	movs	r0, #6
 800597e:	f7fb f8d1 	bl	8000b24 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005982:	4b29      	ldr	r3, [pc, #164]	@ (8005a28 <checkAktifCalisma+0x1644>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005988:	4b27      	ldr	r3, [pc, #156]	@ (8005a28 <checkAktifCalisma+0x1644>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <checkAktifCalisma+0x15d4>
 8005990:	2108      	movs	r1, #8
 8005992:	481b      	ldr	r0, [pc, #108]	@ (8005a00 <checkAktifCalisma+0x161c>)
 8005994:	f006 f8de 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <checkAktifCalisma+0x15d4>
 800599e:	4b16      	ldr	r3, [pc, #88]	@ (80059f8 <checkAktifCalisma+0x1614>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f083 0301 	eor.w	r3, r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <checkAktifCalisma+0x15d4>
					maksimumcalismahatasi=0;
 80059ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005a28 <checkAktifCalisma+0x1644>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80059b2:	2006      	movs	r0, #6
 80059b4:	f7fe fb10 	bl	8003fd8 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80059b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a38 <checkAktifCalisma+0x1654>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <checkAktifCalisma+0x15f4>
 80059c0:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <checkAktifCalisma+0x163c>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <checkAktifCalisma+0x15f4>
 80059c8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <checkAktifCalisma+0x1658>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <checkAktifCalisma+0x15f4>
 80059d0:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <checkAktifCalisma+0x1640>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d035      	beq.n	8005a44 <checkAktifCalisma+0x1660>
					makineCalisiyor=0;
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <checkAktifCalisma+0x165c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80059de:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <checkAktifCalisma+0x1618>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <checkAktifCalisma+0x1630>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e032      	b.n	8005a52 <checkAktifCalisma+0x166e>
 80059ec:	2000142e 	.word	0x2000142e
 80059f0:	200013d3 	.word	0x200013d3
 80059f4:	40010c00 	.word	0x40010c00
 80059f8:	2000141e 	.word	0x2000141e
 80059fc:	20001432 	.word	0x20001432
 8005a00:	40010800 	.word	0x40010800
 8005a04:	200013d8 	.word	0x200013d8
 8005a08:	2000142f 	.word	0x2000142f
 8005a0c:	20001425 	.word	0x20001425
 8005a10:	20001412 	.word	0x20001412
 8005a14:	20001433 	.word	0x20001433
 8005a18:	20001430 	.word	0x20001430
 8005a1c:	20001424 	.word	0x20001424
 8005a20:	20001408 	.word	0x20001408
 8005a24:	20001407 	.word	0x20001407
 8005a28:	2000141f 	.word	0x2000141f
 8005a2c:	200013a0 	.word	0x200013a0
 8005a30:	200013b4 	.word	0x200013b4
 8005a34:	200013e8 	.word	0x200013e8
 8005a38:	20001405 	.word	0x20001405
 8005a3c:	20001406 	.word	0x20001406
 8005a40:	20001426 	.word	0x20001426
				} else {
					makineCalisiyor=1;
 8005a44:	4b3a      	ldr	r3, [pc, #232]	@ (8005b30 <checkAktifCalisma+0x174c>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b34 <checkAktifCalisma+0x1750>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b38 <checkAktifCalisma+0x1754>)
 8005a50:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005a52:	4b3a      	ldr	r3, [pc, #232]	@ (8005b3c <checkAktifCalisma+0x1758>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d02f      	beq.n	8005aba <checkAktifCalisma+0x16d6>
 8005a5a:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <checkAktifCalisma+0x175c>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f083 0301 	eor.w	r3, r3, #1
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d028      	beq.n	8005aba <checkAktifCalisma+0x16d6>
 8005a68:	4b36      	ldr	r3, [pc, #216]	@ (8005b44 <checkAktifCalisma+0x1760>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f083 0301 	eor.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d021      	beq.n	8005aba <checkAktifCalisma+0x16d6>
 8005a76:	4b34      	ldr	r3, [pc, #208]	@ (8005b48 <checkAktifCalisma+0x1764>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	f083 0301 	eor.w	r3, r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01a      	beq.n	8005aba <checkAktifCalisma+0x16d6>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005a84:	4b31      	ldr	r3, [pc, #196]	@ (8005b4c <checkAktifCalisma+0x1768>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	f083 0301 	eor.w	r3, r3, #1
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <checkAktifCalisma+0x16d6>
 8005a92:	4b2f      	ldr	r3, [pc, #188]	@ (8005b50 <checkAktifCalisma+0x176c>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f083 0301 	eor.w	r3, r3, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <checkAktifCalisma+0x16d6>
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b54 <checkAktifCalisma+0x1770>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f083 0301 	eor.w	r3, r3, #1
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <checkAktifCalisma+0x16d6>

					hataVar=0;
 8005aae:	4b23      	ldr	r3, [pc, #140]	@ (8005b3c <checkAktifCalisma+0x1758>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005ab4:	2007      	movs	r0, #7
 8005ab6:	f7fe fa8f 	bl	8003fd8 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005aba:	4b20      	ldr	r3, [pc, #128]	@ (8005b3c <checkAktifCalisma+0x1758>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02a      	beq.n	8005b18 <checkAktifCalisma+0x1734>
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b40 <checkAktifCalisma+0x175c>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f083 0301 	eor.w	r3, r3, #1
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <checkAktifCalisma+0x1734>
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b44 <checkAktifCalisma+0x1760>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01f      	beq.n	8005b18 <checkAktifCalisma+0x1734>
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <checkAktifCalisma+0x1764>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f083 0301 	eor.w	r3, r3, #1
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d018      	beq.n	8005b18 <checkAktifCalisma+0x1734>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005ae6:	4b19      	ldr	r3, [pc, #100]	@ (8005b4c <checkAktifCalisma+0x1768>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f083 0301 	eor.w	r3, r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d011      	beq.n	8005b18 <checkAktifCalisma+0x1734>
 8005af4:	4b16      	ldr	r3, [pc, #88]	@ (8005b50 <checkAktifCalisma+0x176c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f083 0301 	eor.w	r3, r3, #1
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <checkAktifCalisma+0x1734>
 8005b02:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <checkAktifCalisma+0x1770>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f083 0301 	eor.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <checkAktifCalisma+0x1734>
				{
					EmnCerHataMakYukariCalis=1;
 8005b10:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <checkAktifCalisma+0x1774>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005b16:	e009      	b.n	8005b2c <checkAktifCalisma+0x1748>
				else if(emniyetCercevesihatasi==0)
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <checkAktifCalisma+0x1760>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f083 0301 	eor.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <checkAktifCalisma+0x1748>
					EmnCerHataMakYukariCalis=0;
 8005b26:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <checkAktifCalisma+0x1774>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b30:	20001426 	.word	0x20001426
 8005b34:	200013a0 	.word	0x200013a0
 8005b38:	200013b4 	.word	0x200013b4
 8005b3c:	20001425 	.word	0x20001425
 8005b40:	20001420 	.word	0x20001420
 8005b44:	20001421 	.word	0x20001421
 8005b48:	2000142e 	.word	0x2000142e
 8005b4c:	2000142f 	.word	0x2000142f
 8005b50:	20001430 	.word	0x20001430
 8005b54:	2000141f 	.word	0x2000141f
 8005b58:	20001434 	.word	0x20001434

08005b5c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b60:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005b62:	4b67      	ldr	r3, [pc, #412]	@ (8005d00 <checkDemoModCalisma+0x1a4>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f041 83a0 	bne.w	80072ac <checkDemoModCalisma+0x1750>
 8005b6c:	4b65      	ldr	r3, [pc, #404]	@ (8005d04 <checkDemoModCalisma+0x1a8>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f041 839b 	bne.w	80072ac <checkDemoModCalisma+0x1750>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005b76:	4b64      	ldr	r3, [pc, #400]	@ (8005d08 <checkDemoModCalisma+0x1ac>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11a      	bne.n	8005bb4 <checkDemoModCalisma+0x58>
 8005b7e:	4b63      	ldr	r3, [pc, #396]	@ (8005d0c <checkDemoModCalisma+0x1b0>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d116      	bne.n	8005bb4 <checkDemoModCalisma+0x58>
 8005b86:	4b62      	ldr	r3, [pc, #392]	@ (8005d10 <checkDemoModCalisma+0x1b4>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <checkDemoModCalisma+0x48>
 8005b8e:	4b61      	ldr	r3, [pc, #388]	@ (8005d14 <checkDemoModCalisma+0x1b8>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f083 0301 	eor.w	r3, r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <checkDemoModCalisma+0x48>
 8005b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8005d18 <checkDemoModCalisma+0x1bc>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d007      	beq.n	8005bb4 <checkDemoModCalisma+0x58>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8005ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8005d1c <checkDemoModCalisma+0x1c0>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01c      	beq.n	8005be6 <checkDemoModCalisma+0x8a>
 8005bac:	4b5c      	ldr	r3, [pc, #368]	@ (8005d20 <checkDemoModCalisma+0x1c4>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d118      	bne.n	8005be6 <checkDemoModCalisma+0x8a>
 8005bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d24 <checkDemoModCalisma+0x1c8>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <checkDemoModCalisma+0x68>
 8005bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d28 <checkDemoModCalisma+0x1cc>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <checkDemoModCalisma+0x8a>
 8005bc4:	4b59      	ldr	r3, [pc, #356]	@ (8005d2c <checkDemoModCalisma+0x1d0>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bd2:	4857      	ldr	r0, [pc, #348]	@ (8005d30 <checkDemoModCalisma+0x1d4>)
 8005bd4:	f005 ffd5 	bl	800bb82 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005bd8:	4b56      	ldr	r3, [pc, #344]	@ (8005d34 <checkDemoModCalisma+0x1d8>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005bde:	4b56      	ldr	r3, [pc, #344]	@ (8005d38 <checkDemoModCalisma+0x1dc>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	e008      	b.n	8005bf8 <checkDemoModCalisma+0x9c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005be6:	2200      	movs	r2, #0
 8005be8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bec:	4850      	ldr	r0, [pc, #320]	@ (8005d30 <checkDemoModCalisma+0x1d4>)
 8005bee:	f005 ffc8 	bl	800bb82 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005bf2:	4b50      	ldr	r3, [pc, #320]	@ (8005d34 <checkDemoModCalisma+0x1d8>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005bf8:	4b42      	ldr	r3, [pc, #264]	@ (8005d04 <checkDemoModCalisma+0x1a8>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d164      	bne.n	8005cca <checkDemoModCalisma+0x16e>
 8005c00:	4b49      	ldr	r3, [pc, #292]	@ (8005d28 <checkDemoModCalisma+0x1cc>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <checkDemoModCalisma+0xb4>
 8005c08:	4b46      	ldr	r3, [pc, #280]	@ (8005d24 <checkDemoModCalisma+0x1c8>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d05c      	beq.n	8005cca <checkDemoModCalisma+0x16e>
 8005c10:	4b46      	ldr	r3, [pc, #280]	@ (8005d2c <checkDemoModCalisma+0x1d0>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d058      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005c18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c1c:	4844      	ldr	r0, [pc, #272]	@ (8005d30 <checkDemoModCalisma+0x1d4>)
 8005c1e:	f005 ff99 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <checkDemoModCalisma+0xd4>
 8005c28:	4b44      	ldr	r3, [pc, #272]	@ (8005d3c <checkDemoModCalisma+0x1e0>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d04c      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005c30:	2102      	movs	r1, #2
 8005c32:	4843      	ldr	r0, [pc, #268]	@ (8005d40 <checkDemoModCalisma+0x1e4>)
 8005c34:	f005 ff8e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d145      	bne.n	8005cca <checkDemoModCalisma+0x16e>
							&& (basincVar)
 8005c3e:	4b41      	ldr	r3, [pc, #260]	@ (8005d44 <checkDemoModCalisma+0x1e8>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d041      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005c46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c4a:	4839      	ldr	r0, [pc, #228]	@ (8005d30 <checkDemoModCalisma+0x1d4>)
 8005c4c:	f005 ff82 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10e      	bne.n	8005c74 <checkDemoModCalisma+0x118>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c5a:	4835      	ldr	r0, [pc, #212]	@ (8005d30 <checkDemoModCalisma+0x1d4>)
 8005c5c:	f005 ff7a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d106      	bne.n	8005c74 <checkDemoModCalisma+0x118>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005c66:	2140      	movs	r1, #64	@ 0x40
 8005c68:	4835      	ldr	r0, [pc, #212]	@ (8005d40 <checkDemoModCalisma+0x1e4>)
 8005c6a:	f005 ff73 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d003      	beq.n	8005c7c <checkDemoModCalisma+0x120>
 8005c74:	4b24      	ldr	r3, [pc, #144]	@ (8005d08 <checkDemoModCalisma+0x1ac>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d026      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&& (asagivalfcalisiyor==0)
 8005c7c:	4b24      	ldr	r3, [pc, #144]	@ (8005d10 <checkDemoModCalisma+0x1b4>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f083 0301 	eor.w	r3, r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01f      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&& (devmotoryukaricalisiyor==0)
 8005c8a:	4b20      	ldr	r3, [pc, #128]	@ (8005d0c <checkDemoModCalisma+0x1b0>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f083 0301 	eor.w	r3, r3, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d018      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&& (devmotorasagicalisiyor==0)
 8005c98:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <checkDemoModCalisma+0x1c0>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f083 0301 	eor.w	r3, r3, #1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&&(devyukarivalfcalisiyor==0)
 8005ca6:	4b28      	ldr	r3, [pc, #160]	@ (8005d48 <checkDemoModCalisma+0x1ec>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f083 0301 	eor.w	r3, r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <checkDemoModCalisma+0x16e>
							&&(devasagivalfcalisiyor==0)) {
 8005cb4:	4b25      	ldr	r3, [pc, #148]	@ (8005d4c <checkDemoModCalisma+0x1f0>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <checkDemoModCalisma+0x16e>
					yukarimotorcalisiyor=1;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	@ (8005d08 <checkDemoModCalisma+0x1ac>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	e002      	b.n	8005cd0 <checkDemoModCalisma+0x174>
				} else {
					yukarimotorcalisiyor=0;
 8005cca:	4b0f      	ldr	r3, [pc, #60]	@ (8005d08 <checkDemoModCalisma+0x1ac>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <checkDemoModCalisma+0x1ac>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d03d      	beq.n	8005d54 <checkDemoModCalisma+0x1f8>
 8005cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cdc:	4818      	ldr	r0, [pc, #96]	@ (8005d40 <checkDemoModCalisma+0x1e4>)
 8005cde:	f005 ff39 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d135      	bne.n	8005d54 <checkDemoModCalisma+0x1f8>
 8005ce8:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <checkDemoModCalisma+0x1f4>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d031      	beq.n	8005d54 <checkDemoModCalisma+0x1f8>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005cf6:	480e      	ldr	r0, [pc, #56]	@ (8005d30 <checkDemoModCalisma+0x1d4>)
 8005cf8:	f005 ff43 	bl	800bb82 <HAL_GPIO_WritePin>
 8005cfc:	e030      	b.n	8005d60 <checkDemoModCalisma+0x204>
 8005cfe:	bf00      	nop
 8005d00:	200013ee 	.word	0x200013ee
 8005d04:	200013ed 	.word	0x200013ed
 8005d08:	20001405 	.word	0x20001405
 8005d0c:	20001406 	.word	0x20001406
 8005d10:	20001408 	.word	0x20001408
 8005d14:	20001400 	.word	0x20001400
 8005d18:	200013e3 	.word	0x200013e3
 8005d1c:	20001407 	.word	0x20001407
 8005d20:	200013e2 	.word	0x200013e2
 8005d24:	20001422 	.word	0x20001422
 8005d28:	20001435 	.word	0x20001435
 8005d2c:	20001423 	.word	0x20001423
 8005d30:	40010c00 	.word	0x40010c00
 8005d34:	20001424 	.word	0x20001424
 8005d38:	2000140f 	.word	0x2000140f
 8005d3c:	2000140c 	.word	0x2000140c
 8005d40:	40011000 	.word	0x40011000
 8005d44:	200013d3 	.word	0x200013d3
 8005d48:	2000140a 	.word	0x2000140a
 8005d4c:	2000140b 	.word	0x2000140b
 8005d50:	200013de 	.word	0x200013de
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d5a:	4865      	ldr	r0, [pc, #404]	@ (8005ef0 <checkDemoModCalisma+0x394>)
 8005d5c:	f005 ff11 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005d60:	4b64      	ldr	r3, [pc, #400]	@ (8005ef4 <checkDemoModCalisma+0x398>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <checkDemoModCalisma+0x234>
 8005d68:	4b63      	ldr	r3, [pc, #396]	@ (8005ef8 <checkDemoModCalisma+0x39c>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d007      	beq.n	8005d80 <checkDemoModCalisma+0x224>
 8005d70:	4b61      	ldr	r3, [pc, #388]	@ (8005ef8 <checkDemoModCalisma+0x39c>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d003      	beq.n	8005d80 <checkDemoModCalisma+0x224>
 8005d78:	4b60      	ldr	r3, [pc, #384]	@ (8005efc <checkDemoModCalisma+0x3a0>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d107      	bne.n	8005d90 <checkDemoModCalisma+0x234>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005d80:	2201      	movs	r2, #1
 8005d82:	2104      	movs	r1, #4
 8005d84:	485a      	ldr	r0, [pc, #360]	@ (8005ef0 <checkDemoModCalisma+0x394>)
 8005d86:	f005 fefc 	bl	800bb82 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005f00 <checkDemoModCalisma+0x3a4>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005d90:	4b5b      	ldr	r3, [pc, #364]	@ (8005f00 <checkDemoModCalisma+0x3a4>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d033      	beq.n	8005e00 <checkDemoModCalisma+0x2a4>
 8005d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d9c:	4854      	ldr	r0, [pc, #336]	@ (8005ef0 <checkDemoModCalisma+0x394>)
 8005d9e:	f005 fed9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d106      	bne.n	8005db6 <checkDemoModCalisma+0x25a>
 8005da8:	4b56      	ldr	r3, [pc, #344]	@ (8005f04 <checkDemoModCalisma+0x3a8>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f083 0301 	eor.w	r3, r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <checkDemoModCalisma+0x268>
 8005db6:	2102      	movs	r1, #2
 8005db8:	4853      	ldr	r0, [pc, #332]	@ (8005f08 <checkDemoModCalisma+0x3ac>)
 8005dba:	f005 fecb 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11d      	bne.n	8005e00 <checkDemoModCalisma+0x2a4>
 8005dc4:	4b51      	ldr	r3, [pc, #324]	@ (8005f0c <checkDemoModCalisma+0x3b0>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <checkDemoModCalisma+0x278>
 8005dcc:	4b50      	ldr	r3, [pc, #320]	@ (8005f10 <checkDemoModCalisma+0x3b4>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d015      	beq.n	8005e00 <checkDemoModCalisma+0x2a4>
 8005dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8005f14 <checkDemoModCalisma+0x3b8>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d011      	beq.n	8005e00 <checkDemoModCalisma+0x2a4>
 8005ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8005f18 <checkDemoModCalisma+0x3bc>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <checkDemoModCalisma+0x2a4>
 8005de4:	4b4d      	ldr	r3, [pc, #308]	@ (8005f1c <checkDemoModCalisma+0x3c0>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f083 0301 	eor.w	r3, r3, #1
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <checkDemoModCalisma+0x2a4>
					timer2=millis;
 8005df2:	4b4b      	ldr	r3, [pc, #300]	@ (8005f20 <checkDemoModCalisma+0x3c4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4b      	ldr	r2, [pc, #300]	@ (8005f24 <checkDemoModCalisma+0x3c8>)
 8005df8:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8005dfa:	4b48      	ldr	r3, [pc, #288]	@ (8005f1c <checkDemoModCalisma+0x3c0>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8005e00:	4b47      	ldr	r3, [pc, #284]	@ (8005f20 <checkDemoModCalisma+0x3c4>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b47      	ldr	r3, [pc, #284]	@ (8005f24 <checkDemoModCalisma+0x3c8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	4a47      	ldr	r2, [pc, #284]	@ (8005f28 <checkDemoModCalisma+0x3cc>)
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d303      	bcc.n	8005e1a <checkDemoModCalisma+0x2be>
 8005e12:	4b42      	ldr	r3, [pc, #264]	@ (8005f1c <checkDemoModCalisma+0x3c0>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d118      	bne.n	8005e4c <checkDemoModCalisma+0x2f0>
 8005e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8005f0c <checkDemoModCalisma+0x3b0>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f083 0301 	eor.w	r3, r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d006      	beq.n	8005e36 <checkDemoModCalisma+0x2da>
 8005e28:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <checkDemoModCalisma+0x3b4>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f083 0301 	eor.w	r3, r3, #1
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <checkDemoModCalisma+0x2f0>
 8005e36:	4b37      	ldr	r3, [pc, #220]	@ (8005f14 <checkDemoModCalisma+0x3b8>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f083 0301 	eor.w	r3, r3, #1
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <checkDemoModCalisma+0x2f0>
 8005e44:	4b34      	ldr	r3, [pc, #208]	@ (8005f18 <checkDemoModCalisma+0x3bc>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <checkDemoModCalisma+0x306>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4827      	ldr	r0, [pc, #156]	@ (8005ef0 <checkDemoModCalisma+0x394>)
 8005e52:	f005 fe96 	bl	800bb82 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8005e56:	4b2a      	ldr	r3, [pc, #168]	@ (8005f00 <checkDemoModCalisma+0x3a4>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8005e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005f1c <checkDemoModCalisma+0x3c0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8005e62:	4b32      	ldr	r3, [pc, #200]	@ (8005f2c <checkDemoModCalisma+0x3d0>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <checkDemoModCalisma+0x314>
					cerceveVar=1;
 8005e6a:	4b31      	ldr	r3, [pc, #196]	@ (8005f30 <checkDemoModCalisma+0x3d4>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005e70:	4b2e      	ldr	r3, [pc, #184]	@ (8005f2c <checkDemoModCalisma+0x3d0>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d116      	bne.n	8005ea6 <checkDemoModCalisma+0x34a>
 8005e78:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <checkDemoModCalisma+0x3d8>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d112      	bne.n	8005ea6 <checkDemoModCalisma+0x34a>
 8005e80:	2101      	movs	r1, #1
 8005e82:	4821      	ldr	r0, [pc, #132]	@ (8005f08 <checkDemoModCalisma+0x3ac>)
 8005e84:	f005 fe66 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <checkDemoModCalisma+0x34a>
 8005e8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e92:	4817      	ldr	r0, [pc, #92]	@ (8005ef0 <checkDemoModCalisma+0x394>)
 8005e94:	f005 fe5e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <checkDemoModCalisma+0x34a>
					cerceveVar=1;
 8005e9e:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <checkDemoModCalisma+0x3d4>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e011      	b.n	8005eca <checkDemoModCalisma+0x36e>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005ea6:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <checkDemoModCalisma+0x3d0>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10d      	bne.n	8005eca <checkDemoModCalisma+0x36e>
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4815      	ldr	r0, [pc, #84]	@ (8005f08 <checkDemoModCalisma+0x3ac>)
 8005eb2:	f005 fe4f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <checkDemoModCalisma+0x36e>
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <checkDemoModCalisma+0x3d8>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <checkDemoModCalisma+0x36e>
					cerceveVar=0;
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f30 <checkDemoModCalisma+0x3d4>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005eca:	4b18      	ldr	r3, [pc, #96]	@ (8005f2c <checkDemoModCalisma+0x3d0>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d135      	bne.n	8005f3e <checkDemoModCalisma+0x3e2>
 8005ed2:	4b18      	ldr	r3, [pc, #96]	@ (8005f34 <checkDemoModCalisma+0x3d8>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d131      	bne.n	8005f3e <checkDemoModCalisma+0x3e2>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005eda:	2101      	movs	r1, #1
 8005edc:	480a      	ldr	r0, [pc, #40]	@ (8005f08 <checkDemoModCalisma+0x3ac>)
 8005ede:	f005 fe39 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d127      	bne.n	8005f38 <checkDemoModCalisma+0x3dc>
						cerceveVar=1;
 8005ee8:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <checkDemoModCalisma+0x3d4>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e026      	b.n	8005f3e <checkDemoModCalisma+0x3e2>
 8005ef0:	40010c00 	.word	0x40010c00
 8005ef4:	20001405 	.word	0x20001405
 8005ef8:	200013df 	.word	0x200013df
 8005efc:	200013e3 	.word	0x200013e3
 8005f00:	20001409 	.word	0x20001409
 8005f04:	2000140c 	.word	0x2000140c
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	20001422 	.word	0x20001422
 8005f10:	20001435 	.word	0x20001435
 8005f14:	20001423 	.word	0x20001423
 8005f18:	200013d3 	.word	0x200013d3
 8005f1c:	20001401 	.word	0x20001401
 8005f20:	200013a0 	.word	0x200013a0
 8005f24:	200013ac 	.word	0x200013ac
 8005f28:	200013e4 	.word	0x200013e4
 8005f2c:	200013d4 	.word	0x200013d4
 8005f30:	20001427 	.word	0x20001427
 8005f34:	200013d1 	.word	0x200013d1
					} else {
						cerceveVar=0;
 8005f38:	4b7f      	ldr	r3, [pc, #508]	@ (8006138 <checkDemoModCalisma+0x5dc>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800613c <checkDemoModCalisma+0x5e0>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d17c      	bne.n	8006040 <checkDemoModCalisma+0x4e4>
 8005f46:	4b7e      	ldr	r3, [pc, #504]	@ (8006140 <checkDemoModCalisma+0x5e4>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d078      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
 8005f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8006144 <checkDemoModCalisma+0x5e8>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d074      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005f56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f5a:	487b      	ldr	r0, [pc, #492]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 8005f5c:	f005 fdfa 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <checkDemoModCalisma+0x412>
 8005f66:	4b79      	ldr	r3, [pc, #484]	@ (800614c <checkDemoModCalisma+0x5f0>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d068      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005f6e:	4b72      	ldr	r3, [pc, #456]	@ (8006138 <checkDemoModCalisma+0x5dc>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d064      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
 8005f76:	4b76      	ldr	r3, [pc, #472]	@ (8006150 <checkDemoModCalisma+0x5f4>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f083 0301 	eor.w	r3, r3, #1
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05d      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005f84:	2104      	movs	r1, #4
 8005f86:	4873      	ldr	r0, [pc, #460]	@ (8006154 <checkDemoModCalisma+0x5f8>)
 8005f88:	f005 fde4 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <checkDemoModCalisma+0x43e>
 8005f92:	4b71      	ldr	r3, [pc, #452]	@ (8006158 <checkDemoModCalisma+0x5fc>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d152      	bne.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005f9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f9e:	486a      	ldr	r0, [pc, #424]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 8005fa0:	f005 fdd8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10e      	bne.n	8005fc8 <checkDemoModCalisma+0x46c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005faa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fae:	4866      	ldr	r0, [pc, #408]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 8005fb0:	f005 fdd0 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d106      	bne.n	8005fc8 <checkDemoModCalisma+0x46c>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005fba:	2140      	movs	r1, #64	@ 0x40
 8005fbc:	4865      	ldr	r0, [pc, #404]	@ (8006154 <checkDemoModCalisma+0x5f8>)
 8005fbe:	f005 fdc9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d003      	beq.n	8005fd0 <checkDemoModCalisma+0x474>
 8005fc8:	4b64      	ldr	r3, [pc, #400]	@ (800615c <checkDemoModCalisma+0x600>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d037      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (yukarimotorcalisiyor==0)
 8005fd0:	4b63      	ldr	r3, [pc, #396]	@ (8006160 <checkDemoModCalisma+0x604>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f083 0301 	eor.w	r3, r3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d030      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (yukarivalfcalisiyor==0)
 8005fde:	4b61      	ldr	r3, [pc, #388]	@ (8006164 <checkDemoModCalisma+0x608>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	f083 0301 	eor.w	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d029      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005fec:	4b5e      	ldr	r3, [pc, #376]	@ (8006168 <checkDemoModCalisma+0x60c>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f083 0301 	eor.w	r3, r3, #1
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d022      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (devmotorasagicalisiyor==0)
 8005ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800616c <checkDemoModCalisma+0x610>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f083 0301 	eor.w	r3, r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01b      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (devyukarivalfcalisiyor==0)
 8006008:	4b59      	ldr	r3, [pc, #356]	@ (8006170 <checkDemoModCalisma+0x614>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f083 0301 	eor.w	r3, r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d014      	beq.n	8006040 <checkDemoModCalisma+0x4e4>
						&& (devasagivalfcalisiyor==0)) {
 8006016:	4b57      	ldr	r3, [pc, #348]	@ (8006174 <checkDemoModCalisma+0x618>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f083 0301 	eor.w	r3, r3, #1
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00d      	beq.n	8006040 <checkDemoModCalisma+0x4e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006024:	2201      	movs	r2, #1
 8006026:	2102      	movs	r1, #2
 8006028:	4847      	ldr	r0, [pc, #284]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 800602a:	f005 fdaa 	bl	800bb82 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800602e:	4b4b      	ldr	r3, [pc, #300]	@ (800615c <checkDemoModCalisma+0x600>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8006034:	4b50      	ldr	r3, [pc, #320]	@ (8006178 <checkDemoModCalisma+0x61c>)
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800603a:	4b50      	ldr	r3, [pc, #320]	@ (800617c <checkDemoModCalisma+0x620>)
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006040:	4b46      	ldr	r3, [pc, #280]	@ (800615c <checkDemoModCalisma+0x600>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d033      	beq.n	80060b0 <checkDemoModCalisma+0x554>
 8006048:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800604c:	483e      	ldr	r0, [pc, #248]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 800604e:	f005 fd81 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d106      	bne.n	8006066 <checkDemoModCalisma+0x50a>
 8006058:	4b3c      	ldr	r3, [pc, #240]	@ (800614c <checkDemoModCalisma+0x5f0>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f083 0301 	eor.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <checkDemoModCalisma+0x520>
 8006066:	2104      	movs	r1, #4
 8006068:	483a      	ldr	r0, [pc, #232]	@ (8006154 <checkDemoModCalisma+0x5f8>)
 800606a:	f005 fd73 	bl	800bb54 <HAL_GPIO_ReadPin>
 800606e:	4603      	mov	r3, r0
 8006070:	2b01      	cmp	r3, #1
 8006072:	d11d      	bne.n	80060b0 <checkDemoModCalisma+0x554>
 8006074:	4b38      	ldr	r3, [pc, #224]	@ (8006158 <checkDemoModCalisma+0x5fc>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d019      	beq.n	80060b0 <checkDemoModCalisma+0x554>
 800607c:	4b30      	ldr	r3, [pc, #192]	@ (8006140 <checkDemoModCalisma+0x5e4>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <checkDemoModCalisma+0x554>
 8006084:	4b2f      	ldr	r3, [pc, #188]	@ (8006144 <checkDemoModCalisma+0x5e8>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d011      	beq.n	80060b0 <checkDemoModCalisma+0x554>
 800608c:	4b2a      	ldr	r3, [pc, #168]	@ (8006138 <checkDemoModCalisma+0x5dc>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <checkDemoModCalisma+0x554>
 8006094:	4b3a      	ldr	r3, [pc, #232]	@ (8006180 <checkDemoModCalisma+0x624>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f083 0301 	eor.w	r3, r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d006      	beq.n	80060b0 <checkDemoModCalisma+0x554>
					timer2=millis;
 80060a2:	4b38      	ldr	r3, [pc, #224]	@ (8006184 <checkDemoModCalisma+0x628>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a38      	ldr	r2, [pc, #224]	@ (8006188 <checkDemoModCalisma+0x62c>)
 80060a8:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80060aa:	4b35      	ldr	r3, [pc, #212]	@ (8006180 <checkDemoModCalisma+0x624>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80060b0:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <checkDemoModCalisma+0x628>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b34      	ldr	r3, [pc, #208]	@ (8006188 <checkDemoModCalisma+0x62c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	4a34      	ldr	r2, [pc, #208]	@ (800618c <checkDemoModCalisma+0x630>)
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	4293      	cmp	r3, r2
 80060c0:	d303      	bcc.n	80060ca <checkDemoModCalisma+0x56e>
 80060c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <checkDemoModCalisma+0x624>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d114      	bne.n	80060f4 <checkDemoModCalisma+0x598>
 80060ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <checkDemoModCalisma+0x5e4>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f083 0301 	eor.w	r3, r3, #1
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <checkDemoModCalisma+0x598>
 80060d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006144 <checkDemoModCalisma+0x5e8>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f083 0301 	eor.w	r3, r3, #1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <checkDemoModCalisma+0x598>
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <checkDemoModCalisma+0x5dc>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f083 0301 	eor.w	r3, r3, #1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <checkDemoModCalisma+0x5ae>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80060f4:	2200      	movs	r2, #0
 80060f6:	2102      	movs	r1, #2
 80060f8:	4813      	ldr	r0, [pc, #76]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 80060fa:	f005 fd42 	bl	800bb82 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80060fe:	4b17      	ldr	r3, [pc, #92]	@ (800615c <checkDemoModCalisma+0x600>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8006104:	4b1e      	ldr	r3, [pc, #120]	@ (8006180 <checkDemoModCalisma+0x624>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800610a:	4b14      	ldr	r3, [pc, #80]	@ (800615c <checkDemoModCalisma+0x600>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d040      	beq.n	8006194 <checkDemoModCalisma+0x638>
 8006112:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006116:	480f      	ldr	r0, [pc, #60]	@ (8006154 <checkDemoModCalisma+0x5f8>)
 8006118:	f005 fd1c 	bl	800bb54 <HAL_GPIO_ReadPin>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d138      	bne.n	8006194 <checkDemoModCalisma+0x638>
 8006122:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <checkDemoModCalisma+0x634>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d034      	beq.n	8006194 <checkDemoModCalisma+0x638>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800612a:	2201      	movs	r2, #1
 800612c:	2101      	movs	r1, #1
 800612e:	4806      	ldr	r0, [pc, #24]	@ (8006148 <checkDemoModCalisma+0x5ec>)
 8006130:	f005 fd27 	bl	800bb82 <HAL_GPIO_WritePin>
 8006134:	e033      	b.n	800619e <checkDemoModCalisma+0x642>
 8006136:	bf00      	nop
 8006138:	20001427 	.word	0x20001427
 800613c:	200013ed 	.word	0x200013ed
 8006140:	20001422 	.word	0x20001422
 8006144:	20001423 	.word	0x20001423
 8006148:	40010c00 	.word	0x40010c00
 800614c:	2000140d 	.word	0x2000140d
 8006150:	20001421 	.word	0x20001421
 8006154:	40011000 	.word	0x40011000
 8006158:	200013d6 	.word	0x200013d6
 800615c:	20001408 	.word	0x20001408
 8006160:	20001405 	.word	0x20001405
 8006164:	20001409 	.word	0x20001409
 8006168:	20001406 	.word	0x20001406
 800616c:	20001407 	.word	0x20001407
 8006170:	2000140a 	.word	0x2000140a
 8006174:	2000140b 	.word	0x2000140b
 8006178:	20001410 	.word	0x20001410
 800617c:	20001431 	.word	0x20001431
 8006180:	20001400 	.word	0x20001400
 8006184:	200013a0 	.word	0x200013a0
 8006188:	200013ac 	.word	0x200013ac
 800618c:	200013e5 	.word	0x200013e5
 8006190:	200013d5 	.word	0x200013d5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006194:	2200      	movs	r2, #0
 8006196:	2101      	movs	r1, #1
 8006198:	4836      	ldr	r0, [pc, #216]	@ (8006274 <checkDemoModCalisma+0x718>)
 800619a:	f005 fcf2 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800619e:	4b36      	ldr	r3, [pc, #216]	@ (8006278 <checkDemoModCalisma+0x71c>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 8080 	bne.w	80062a8 <checkDemoModCalisma+0x74c>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80061a8:	4b34      	ldr	r3, [pc, #208]	@ (800627c <checkDemoModCalisma+0x720>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d003      	beq.n	80061b8 <checkDemoModCalisma+0x65c>
 80061b0:	4b32      	ldr	r3, [pc, #200]	@ (800627c <checkDemoModCalisma+0x720>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d177      	bne.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (stopVar) && (kapiSivicVar)
 80061b8:	4b31      	ldr	r3, [pc, #196]	@ (8006280 <checkDemoModCalisma+0x724>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d073      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
 80061c0:	4b30      	ldr	r3, [pc, #192]	@ (8006284 <checkDemoModCalisma+0x728>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d06f      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80061c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061cc:	4829      	ldr	r0, [pc, #164]	@ (8006274 <checkDemoModCalisma+0x718>)
 80061ce:	f005 fcc1 	bl	800bb54 <HAL_GPIO_ReadPin>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d167      	bne.n	80062a8 <checkDemoModCalisma+0x74c>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80061d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061dc:	482a      	ldr	r0, [pc, #168]	@ (8006288 <checkDemoModCalisma+0x72c>)
 80061de:	f005 fcb9 	bl	800bb54 <HAL_GPIO_ReadPin>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <checkDemoModCalisma+0x694>
 80061e8:	4b28      	ldr	r3, [pc, #160]	@ (800628c <checkDemoModCalisma+0x730>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d15b      	bne.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80061f0:	2140      	movs	r1, #64	@ 0x40
 80061f2:	4825      	ldr	r0, [pc, #148]	@ (8006288 <checkDemoModCalisma+0x72c>)
 80061f4:	f005 fcae 	bl	800bb54 <HAL_GPIO_ReadPin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d10f      	bne.n	800621e <checkDemoModCalisma+0x6c2>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80061fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006202:	481c      	ldr	r0, [pc, #112]	@ (8006274 <checkDemoModCalisma+0x718>)
 8006204:	f005 fca6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006208:	4603      	mov	r3, r0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <checkDemoModCalisma+0x6c2>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800620e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006212:	4818      	ldr	r0, [pc, #96]	@ (8006274 <checkDemoModCalisma+0x718>)
 8006214:	f005 fc9e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d003      	beq.n	8006226 <checkDemoModCalisma+0x6ca>
 800621e:	4b1c      	ldr	r3, [pc, #112]	@ (8006290 <checkDemoModCalisma+0x734>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d040      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (yukarimotorcalisiyor==0)
 8006226:	4b1b      	ldr	r3, [pc, #108]	@ (8006294 <checkDemoModCalisma+0x738>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f083 0301 	eor.w	r3, r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d039      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (yukarivalfcalisiyor==0)
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <checkDemoModCalisma+0x73c>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f083 0301 	eor.w	r3, r3, #1
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d032      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (asagivalfcalisiyor==0)
 8006242:	4b16      	ldr	r3, [pc, #88]	@ (800629c <checkDemoModCalisma+0x740>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f083 0301 	eor.w	r3, r3, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d02b      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
						&& (devmotorasagicalisiyor==0)
 8006250:	4b13      	ldr	r3, [pc, #76]	@ (80062a0 <checkDemoModCalisma+0x744>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f083 0301 	eor.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d024      	beq.n	80062a8 <checkDemoModCalisma+0x74c>
						&&(devasagivalfcalisiyor==0)) {
 800625e:	4b11      	ldr	r3, [pc, #68]	@ (80062a4 <checkDemoModCalisma+0x748>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f083 0301 	eor.w	r3, r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01d      	beq.n	80062a8 <checkDemoModCalisma+0x74c>

					devmotoryukaricalisiyor=1;
 800626c:	4b08      	ldr	r3, [pc, #32]	@ (8006290 <checkDemoModCalisma+0x734>)
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e01c      	b.n	80062ae <checkDemoModCalisma+0x752>
 8006274:	40010c00 	.word	0x40010c00
 8006278:	200013ed 	.word	0x200013ed
 800627c:	200013df 	.word	0x200013df
 8006280:	20001422 	.word	0x20001422
 8006284:	20001423 	.word	0x20001423
 8006288:	40011000 	.word	0x40011000
 800628c:	200013e0 	.word	0x200013e0
 8006290:	20001406 	.word	0x20001406
 8006294:	20001405 	.word	0x20001405
 8006298:	20001409 	.word	0x20001409
 800629c:	20001408 	.word	0x20001408
 80062a0:	20001407 	.word	0x20001407
 80062a4:	2000140b 	.word	0x2000140b
				} else {
					devmotoryukaricalisiyor=0;
 80062a8:	4b64      	ldr	r3, [pc, #400]	@ (800643c <checkDemoModCalisma+0x8e0>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 80062ae:	4b63      	ldr	r3, [pc, #396]	@ (800643c <checkDemoModCalisma+0x8e0>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <checkDemoModCalisma+0x76a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80062b6:	2201      	movs	r2, #1
 80062b8:	2120      	movs	r1, #32
 80062ba:	4861      	ldr	r0, [pc, #388]	@ (8006440 <checkDemoModCalisma+0x8e4>)
 80062bc:	f005 fc61 	bl	800bb82 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 80062c0:	4b60      	ldr	r3, [pc, #384]	@ (8006444 <checkDemoModCalisma+0x8e8>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80062c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006444 <checkDemoModCalisma+0x8e8>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d025      	beq.n	800631a <checkDemoModCalisma+0x7be>
 80062ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062d2:	485d      	ldr	r0, [pc, #372]	@ (8006448 <checkDemoModCalisma+0x8ec>)
 80062d4:	f005 fc3e 	bl	800bb54 <HAL_GPIO_ReadPin>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d007      	beq.n	80062ee <checkDemoModCalisma+0x792>
 80062de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062e2:	4857      	ldr	r0, [pc, #348]	@ (8006440 <checkDemoModCalisma+0x8e4>)
 80062e4:	f005 fc36 	bl	800bb54 <HAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d115      	bne.n	800631a <checkDemoModCalisma+0x7be>
 80062ee:	4b57      	ldr	r3, [pc, #348]	@ (800644c <checkDemoModCalisma+0x8f0>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d011      	beq.n	800631a <checkDemoModCalisma+0x7be>
 80062f6:	4b56      	ldr	r3, [pc, #344]	@ (8006450 <checkDemoModCalisma+0x8f4>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00d      	beq.n	800631a <checkDemoModCalisma+0x7be>
 80062fe:	4b55      	ldr	r3, [pc, #340]	@ (8006454 <checkDemoModCalisma+0x8f8>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f083 0301 	eor.w	r3, r3, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <checkDemoModCalisma+0x7be>
					timer2=millis;
 800630c:	4b52      	ldr	r3, [pc, #328]	@ (8006458 <checkDemoModCalisma+0x8fc>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a52      	ldr	r2, [pc, #328]	@ (800645c <checkDemoModCalisma+0x900>)
 8006312:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8006314:	4b4f      	ldr	r3, [pc, #316]	@ (8006454 <checkDemoModCalisma+0x8f8>)
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800631a:	4b4f      	ldr	r3, [pc, #316]	@ (8006458 <checkDemoModCalisma+0x8fc>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b4f      	ldr	r3, [pc, #316]	@ (800645c <checkDemoModCalisma+0x900>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	4a4e      	ldr	r2, [pc, #312]	@ (8006460 <checkDemoModCalisma+0x904>)
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	4293      	cmp	r3, r2
 800632a:	d303      	bcc.n	8006334 <checkDemoModCalisma+0x7d8>
 800632c:	4b49      	ldr	r3, [pc, #292]	@ (8006454 <checkDemoModCalisma+0x8f8>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10d      	bne.n	8006350 <checkDemoModCalisma+0x7f4>
 8006334:	4b45      	ldr	r3, [pc, #276]	@ (800644c <checkDemoModCalisma+0x8f0>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f083 0301 	eor.w	r3, r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <checkDemoModCalisma+0x7f4>
 8006342:	4b43      	ldr	r3, [pc, #268]	@ (8006450 <checkDemoModCalisma+0x8f4>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f083 0301 	eor.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <checkDemoModCalisma+0x80a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006350:	2200      	movs	r2, #0
 8006352:	2120      	movs	r1, #32
 8006354:	483a      	ldr	r0, [pc, #232]	@ (8006440 <checkDemoModCalisma+0x8e4>)
 8006356:	f005 fc14 	bl	800bb82 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 800635a:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <checkDemoModCalisma+0x8e8>)
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8006360:	4b3c      	ldr	r3, [pc, #240]	@ (8006454 <checkDemoModCalisma+0x8f8>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8006366:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <checkDemoModCalisma+0x908>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 8088 	bne.w	8006480 <checkDemoModCalisma+0x924>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006370:	4b3d      	ldr	r3, [pc, #244]	@ (8006468 <checkDemoModCalisma+0x90c>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d003      	beq.n	8006380 <checkDemoModCalisma+0x824>
 8006378:	4b3b      	ldr	r3, [pc, #236]	@ (8006468 <checkDemoModCalisma+0x90c>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d17f      	bne.n	8006480 <checkDemoModCalisma+0x924>
						&& (stopVar) && (kapiSivicVar)
 8006380:	4b32      	ldr	r3, [pc, #200]	@ (800644c <checkDemoModCalisma+0x8f0>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d07b      	beq.n	8006480 <checkDemoModCalisma+0x924>
 8006388:	4b31      	ldr	r3, [pc, #196]	@ (8006450 <checkDemoModCalisma+0x8f4>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d077      	beq.n	8006480 <checkDemoModCalisma+0x924>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006390:	2140      	movs	r1, #64	@ 0x40
 8006392:	482b      	ldr	r0, [pc, #172]	@ (8006440 <checkDemoModCalisma+0x8e4>)
 8006394:	f005 fbde 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d170      	bne.n	8006480 <checkDemoModCalisma+0x924>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800639e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80063a2:	4827      	ldr	r0, [pc, #156]	@ (8006440 <checkDemoModCalisma+0x8e4>)
 80063a4:	f005 fbd6 	bl	800bb54 <HAL_GPIO_ReadPin>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <checkDemoModCalisma+0x85a>
 80063ae:	4b2f      	ldr	r3, [pc, #188]	@ (800646c <checkDemoModCalisma+0x910>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d164      	bne.n	8006480 <checkDemoModCalisma+0x924>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80063b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063ba:	4823      	ldr	r0, [pc, #140]	@ (8006448 <checkDemoModCalisma+0x8ec>)
 80063bc:	f005 fbca 	bl	800bb54 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10f      	bne.n	80063e6 <checkDemoModCalisma+0x88a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80063c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80063ca:	481f      	ldr	r0, [pc, #124]	@ (8006448 <checkDemoModCalisma+0x8ec>)
 80063cc:	f005 fbc2 	bl	800bb54 <HAL_GPIO_ReadPin>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d107      	bne.n	80063e6 <checkDemoModCalisma+0x88a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80063d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80063da:	481b      	ldr	r0, [pc, #108]	@ (8006448 <checkDemoModCalisma+0x8ec>)
 80063dc:	f005 fbba 	bl	800bb54 <HAL_GPIO_ReadPin>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d003      	beq.n	80063ee <checkDemoModCalisma+0x892>
 80063e6:	4b22      	ldr	r3, [pc, #136]	@ (8006470 <checkDemoModCalisma+0x914>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d048      	beq.n	8006480 <checkDemoModCalisma+0x924>
						&& (yukarimotorcalisiyor==0)
 80063ee:	4b21      	ldr	r3, [pc, #132]	@ (8006474 <checkDemoModCalisma+0x918>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d041      	beq.n	8006480 <checkDemoModCalisma+0x924>
						&& (yukarivalfcalisiyor==0)
 80063fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006478 <checkDemoModCalisma+0x91c>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f083 0301 	eor.w	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d03a      	beq.n	8006480 <checkDemoModCalisma+0x924>
						&& (asagivalfcalisiyor==0)
 800640a:	4b1c      	ldr	r3, [pc, #112]	@ (800647c <checkDemoModCalisma+0x920>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f083 0301 	eor.w	r3, r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d033      	beq.n	8006480 <checkDemoModCalisma+0x924>
						&& (devyukarivalfcalisiyor==0)
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <checkDemoModCalisma+0x8e8>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f083 0301 	eor.w	r3, r3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d02c      	beq.n	8006480 <checkDemoModCalisma+0x924>
						&& (devmotoryukaricalisiyor==0)) {
 8006426:	4b05      	ldr	r3, [pc, #20]	@ (800643c <checkDemoModCalisma+0x8e0>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f083 0301 	eor.w	r3, r3, #1
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d025      	beq.n	8006480 <checkDemoModCalisma+0x924>

					devmotorasagicalisiyor=1;
 8006434:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <checkDemoModCalisma+0x914>)
 8006436:	2201      	movs	r2, #1
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e024      	b.n	8006486 <checkDemoModCalisma+0x92a>
 800643c:	20001406 	.word	0x20001406
 8006440:	40011000 	.word	0x40011000
 8006444:	2000140a 	.word	0x2000140a
 8006448:	40010c00 	.word	0x40010c00
 800644c:	20001422 	.word	0x20001422
 8006450:	20001423 	.word	0x20001423
 8006454:	20001402 	.word	0x20001402
 8006458:	200013a0 	.word	0x200013a0
 800645c:	200013ac 	.word	0x200013ac
 8006460:	200013e6 	.word	0x200013e6
 8006464:	200013ed 	.word	0x200013ed
 8006468:	200013df 	.word	0x200013df
 800646c:	200013e1 	.word	0x200013e1
 8006470:	20001407 	.word	0x20001407
 8006474:	20001405 	.word	0x20001405
 8006478:	20001409 	.word	0x20001409
 800647c:	20001408 	.word	0x20001408
				} else {
					devmotorasagicalisiyor=0;
 8006480:	4b96      	ldr	r3, [pc, #600]	@ (80066dc <checkDemoModCalisma+0xb80>)
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8006486:	4b95      	ldr	r3, [pc, #596]	@ (80066dc <checkDemoModCalisma+0xb80>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <checkDemoModCalisma+0x942>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800648e:	2201      	movs	r2, #1
 8006490:	2110      	movs	r1, #16
 8006492:	4893      	ldr	r0, [pc, #588]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 8006494:	f005 fb75 	bl	800bb82 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8006498:	4b92      	ldr	r3, [pc, #584]	@ (80066e4 <checkDemoModCalisma+0xb88>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800649e:	4b91      	ldr	r3, [pc, #580]	@ (80066e4 <checkDemoModCalisma+0xb88>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d024      	beq.n	80064f0 <checkDemoModCalisma+0x994>
 80064a6:	2140      	movs	r1, #64	@ 0x40
 80064a8:	488d      	ldr	r0, [pc, #564]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 80064aa:	f005 fb53 	bl	800bb54 <HAL_GPIO_ReadPin>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d007      	beq.n	80064c4 <checkDemoModCalisma+0x968>
 80064b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80064b8:	4889      	ldr	r0, [pc, #548]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 80064ba:	f005 fb4b 	bl	800bb54 <HAL_GPIO_ReadPin>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d115      	bne.n	80064f0 <checkDemoModCalisma+0x994>
 80064c4:	4b88      	ldr	r3, [pc, #544]	@ (80066e8 <checkDemoModCalisma+0xb8c>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d011      	beq.n	80064f0 <checkDemoModCalisma+0x994>
 80064cc:	4b87      	ldr	r3, [pc, #540]	@ (80066ec <checkDemoModCalisma+0xb90>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00d      	beq.n	80064f0 <checkDemoModCalisma+0x994>
 80064d4:	4b86      	ldr	r3, [pc, #536]	@ (80066f0 <checkDemoModCalisma+0xb94>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f083 0301 	eor.w	r3, r3, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <checkDemoModCalisma+0x994>
					timer2=millis;
 80064e2:	4b84      	ldr	r3, [pc, #528]	@ (80066f4 <checkDemoModCalisma+0xb98>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a84      	ldr	r2, [pc, #528]	@ (80066f8 <checkDemoModCalisma+0xb9c>)
 80064e8:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80064ea:	4b81      	ldr	r3, [pc, #516]	@ (80066f0 <checkDemoModCalisma+0xb94>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80064f0:	4b80      	ldr	r3, [pc, #512]	@ (80066f4 <checkDemoModCalisma+0xb98>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b80      	ldr	r3, [pc, #512]	@ (80066f8 <checkDemoModCalisma+0xb9c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	4a80      	ldr	r2, [pc, #512]	@ (80066fc <checkDemoModCalisma+0xba0>)
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	4293      	cmp	r3, r2
 8006500:	d303      	bcc.n	800650a <checkDemoModCalisma+0x9ae>
 8006502:	4b7b      	ldr	r3, [pc, #492]	@ (80066f0 <checkDemoModCalisma+0xb94>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10d      	bne.n	8006526 <checkDemoModCalisma+0x9ca>
 800650a:	4b77      	ldr	r3, [pc, #476]	@ (80066e8 <checkDemoModCalisma+0xb8c>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f083 0301 	eor.w	r3, r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <checkDemoModCalisma+0x9ca>
 8006518:	4b74      	ldr	r3, [pc, #464]	@ (80066ec <checkDemoModCalisma+0xb90>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f083 0301 	eor.w	r3, r3, #1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <checkDemoModCalisma+0x9e0>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006526:	2200      	movs	r2, #0
 8006528:	2110      	movs	r1, #16
 800652a:	486d      	ldr	r0, [pc, #436]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 800652c:	f005 fb29 	bl	800bb82 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8006530:	4b6c      	ldr	r3, [pc, #432]	@ (80066e4 <checkDemoModCalisma+0xb88>)
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8006536:	4b6e      	ldr	r3, [pc, #440]	@ (80066f0 <checkDemoModCalisma+0xb94>)
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800653c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006540:	486f      	ldr	r0, [pc, #444]	@ (8006700 <checkDemoModCalisma+0xba4>)
 8006542:	f005 fb07 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d120      	bne.n	800658e <checkDemoModCalisma+0xa32>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800654c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006550:	486b      	ldr	r0, [pc, #428]	@ (8006700 <checkDemoModCalisma+0xba4>)
 8006552:	f005 faff 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d118      	bne.n	800658e <checkDemoModCalisma+0xa32>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800655c:	2104      	movs	r1, #4
 800655e:	4868      	ldr	r0, [pc, #416]	@ (8006700 <checkDemoModCalisma+0xba4>)
 8006560:	f005 faf8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d111      	bne.n	800658e <checkDemoModCalisma+0xa32>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800656a:	2102      	movs	r1, #2
 800656c:	4864      	ldr	r0, [pc, #400]	@ (8006700 <checkDemoModCalisma+0xba4>)
 800656e:	f005 faf1 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <checkDemoModCalisma+0xa32>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006578:	2101      	movs	r1, #1
 800657a:	4861      	ldr	r0, [pc, #388]	@ (8006700 <checkDemoModCalisma+0xba4>)
 800657c:	f005 faea 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <checkDemoModCalisma+0xa32>
					makineStop=1;
 8006586:	4b5f      	ldr	r3, [pc, #380]	@ (8006704 <checkDemoModCalisma+0xba8>)
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e002      	b.n	8006594 <checkDemoModCalisma+0xa38>
				} else {
					makineStop=0;
 800658e:	4b5d      	ldr	r3, [pc, #372]	@ (8006704 <checkDemoModCalisma+0xba8>)
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006594:	4b5c      	ldr	r3, [pc, #368]	@ (8006708 <checkDemoModCalisma+0xbac>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d144      	bne.n	8006626 <checkDemoModCalisma+0xaca>
 800659c:	4b5b      	ldr	r3, [pc, #364]	@ (800670c <checkDemoModCalisma+0xbb0>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d003      	beq.n	80065ac <checkDemoModCalisma+0xa50>
 80065a4:	4b59      	ldr	r3, [pc, #356]	@ (800670c <checkDemoModCalisma+0xbb0>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d13c      	bne.n	8006626 <checkDemoModCalisma+0xaca>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80065ac:	2180      	movs	r1, #128	@ 0x80
 80065ae:	484c      	ldr	r0, [pc, #304]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 80065b0:	f005 fad0 	bl	800bb54 <HAL_GPIO_ReadPin>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <checkDemoModCalisma+0xa66>
 80065ba:	4b55      	ldr	r3, [pc, #340]	@ (8006710 <checkDemoModCalisma+0xbb4>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <checkDemoModCalisma+0xa7e>
 80065c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80065c6:	484e      	ldr	r0, [pc, #312]	@ (8006700 <checkDemoModCalisma+0xba4>)
 80065c8:	f005 fac4 	bl	800bb54 <HAL_GPIO_ReadPin>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d129      	bne.n	8006626 <checkDemoModCalisma+0xaca>
 80065d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006710 <checkDemoModCalisma+0xbb4>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d125      	bne.n	8006626 <checkDemoModCalisma+0xaca>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80065da:	2104      	movs	r1, #4
 80065dc:	4840      	ldr	r0, [pc, #256]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 80065de:	f005 fab9 	bl	800bb54 <HAL_GPIO_ReadPin>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d003      	beq.n	80065f0 <checkDemoModCalisma+0xa94>
 80065e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006714 <checkDemoModCalisma+0xbb8>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11a      	bne.n	8006626 <checkDemoModCalisma+0xaca>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80065f0:	2102      	movs	r1, #2
 80065f2:	483b      	ldr	r0, [pc, #236]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 80065f4:	f005 faae 	bl	800bb54 <HAL_GPIO_ReadPin>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d113      	bne.n	8006626 <checkDemoModCalisma+0xaca>
						&&(butonKontrol==0)
 80065fe:	4b46      	ldr	r3, [pc, #280]	@ (8006718 <checkDemoModCalisma+0xbbc>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f083 0301 	eor.w	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00c      	beq.n	8006626 <checkDemoModCalisma+0xaca>
						&&(makineStop==1)) {
 800660c:	4b3d      	ldr	r3, [pc, #244]	@ (8006704 <checkDemoModCalisma+0xba8>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <checkDemoModCalisma+0xaca>

					kapi1prudhome=1;
 8006614:	4b41      	ldr	r3, [pc, #260]	@ (800671c <checkDemoModCalisma+0xbc0>)
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800661a:	4b36      	ldr	r3, [pc, #216]	@ (80066f4 <checkDemoModCalisma+0xb98>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a40      	ldr	r2, [pc, #256]	@ (8006720 <checkDemoModCalisma+0xbc4>)
 8006620:	6013      	str	r3, [r2, #0]
					bekle();
 8006622:	f7fd fd43 	bl	80040ac <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006626:	4b33      	ldr	r3, [pc, #204]	@ (80066f4 <checkDemoModCalisma+0xb98>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b3d      	ldr	r3, [pc, #244]	@ (8006720 <checkDemoModCalisma+0xbc4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	4a3c      	ldr	r2, [pc, #240]	@ (8006724 <checkDemoModCalisma+0xbc8>)
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	4293      	cmp	r3, r2
 8006636:	d211      	bcs.n	800665c <checkDemoModCalisma+0xb00>
 8006638:	2104      	movs	r1, #4
 800663a:	4829      	ldr	r0, [pc, #164]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 800663c:	f005 fa8a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <checkDemoModCalisma+0xb00>
 8006646:	4b33      	ldr	r3, [pc, #204]	@ (8006714 <checkDemoModCalisma+0xbb8>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <checkDemoModCalisma+0xb00>
 800664e:	4b2d      	ldr	r3, [pc, #180]	@ (8006704 <checkDemoModCalisma+0xba8>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	f083 0301 	eor.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <checkDemoModCalisma+0xb06>
					kapi1prudhome=0;
 800665c:	4b2f      	ldr	r3, [pc, #188]	@ (800671c <checkDemoModCalisma+0xbc0>)
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006662:	4b29      	ldr	r3, [pc, #164]	@ (8006708 <checkDemoModCalisma+0xbac>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d160      	bne.n	800672c <checkDemoModCalisma+0xbd0>
 800666a:	4b28      	ldr	r3, [pc, #160]	@ (800670c <checkDemoModCalisma+0xbb0>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d003      	beq.n	800667a <checkDemoModCalisma+0xb1e>
 8006672:	4b26      	ldr	r3, [pc, #152]	@ (800670c <checkDemoModCalisma+0xbb0>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d158      	bne.n	800672c <checkDemoModCalisma+0xbd0>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800667a:	2104      	movs	r1, #4
 800667c:	4818      	ldr	r0, [pc, #96]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 800667e:	f005 fa69 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d003      	beq.n	8006690 <checkDemoModCalisma+0xb34>
 8006688:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <checkDemoModCalisma+0xbb8>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d14d      	bne.n	800672c <checkDemoModCalisma+0xbd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006690:	2102      	movs	r1, #2
 8006692:	4813      	ldr	r0, [pc, #76]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 8006694:	f005 fa5e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d146      	bne.n	800672c <checkDemoModCalisma+0xbd0>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800669e:	2180      	movs	r1, #128	@ 0x80
 80066a0:	480f      	ldr	r0, [pc, #60]	@ (80066e0 <checkDemoModCalisma+0xb84>)
 80066a2:	f005 fa57 	bl	800bb54 <HAL_GPIO_ReadPin>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <checkDemoModCalisma+0xb58>
 80066ac:	4b18      	ldr	r3, [pc, #96]	@ (8006710 <checkDemoModCalisma+0xbb4>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <checkDemoModCalisma+0xb70>
 80066b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80066b8:	4811      	ldr	r0, [pc, #68]	@ (8006700 <checkDemoModCalisma+0xba4>)
 80066ba:	f005 fa4b 	bl	800bb54 <HAL_GPIO_ReadPin>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d133      	bne.n	800672c <checkDemoModCalisma+0xbd0>
 80066c4:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <checkDemoModCalisma+0xbb4>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d12f      	bne.n	800672c <checkDemoModCalisma+0xbd0>
						&&(makineStop==1)) {
 80066cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <checkDemoModCalisma+0xba8>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02b      	beq.n	800672c <checkDemoModCalisma+0xbd0>

					kapi1butonkontrol=1;
 80066d4:	4b14      	ldr	r3, [pc, #80]	@ (8006728 <checkDemoModCalisma+0xbcc>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e02a      	b.n	8006732 <checkDemoModCalisma+0xbd6>
 80066dc:	20001407 	.word	0x20001407
 80066e0:	40011000 	.word	0x40011000
 80066e4:	2000140b 	.word	0x2000140b
 80066e8:	20001422 	.word	0x20001422
 80066ec:	20001423 	.word	0x20001423
 80066f0:	20001403 	.word	0x20001403
 80066f4:	200013a0 	.word	0x200013a0
 80066f8:	200013ac 	.word	0x200013ac
 80066fc:	200013e6 	.word	0x200013e6
 8006700:	40010c00 	.word	0x40010c00
 8006704:	20001412 	.word	0x20001412
 8006708:	200013d9 	.word	0x200013d9
 800670c:	200013d8 	.word	0x200013d8
 8006710:	200013dc 	.word	0x200013dc
 8006714:	200013d6 	.word	0x200013d6
 8006718:	200013ff 	.word	0x200013ff
 800671c:	20001413 	.word	0x20001413
 8006720:	200013a4 	.word	0x200013a4
 8006724:	200013e9 	.word	0x200013e9
 8006728:	20001414 	.word	0x20001414
				} else {
					kapi1butonkontrol=0;
 800672c:	4b8b      	ldr	r3, [pc, #556]	@ (800695c <checkDemoModCalisma+0xe00>)
 800672e:	2200      	movs	r2, #0
 8006730:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006732:	4b8b      	ldr	r3, [pc, #556]	@ (8006960 <checkDemoModCalisma+0xe04>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d121      	bne.n	800677e <checkDemoModCalisma+0xc22>
 800673a:	4b8a      	ldr	r3, [pc, #552]	@ (8006964 <checkDemoModCalisma+0xe08>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d003      	beq.n	800674a <checkDemoModCalisma+0xbee>
 8006742:	4b88      	ldr	r3, [pc, #544]	@ (8006964 <checkDemoModCalisma+0xe08>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d119      	bne.n	800677e <checkDemoModCalisma+0xc22>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800674a:	2104      	movs	r1, #4
 800674c:	4886      	ldr	r0, [pc, #536]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 800674e:	f005 fa01 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b01      	cmp	r3, #1
 8006756:	d003      	beq.n	8006760 <checkDemoModCalisma+0xc04>
 8006758:	4b84      	ldr	r3, [pc, #528]	@ (800696c <checkDemoModCalisma+0xe10>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10e      	bne.n	800677e <checkDemoModCalisma+0xc22>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006760:	2102      	movs	r1, #2
 8006762:	4881      	ldr	r0, [pc, #516]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 8006764:	f005 f9f6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <checkDemoModCalisma+0xc22>
						&&(makineStop==1)) {
 800676e:	4b80      	ldr	r3, [pc, #512]	@ (8006970 <checkDemoModCalisma+0xe14>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <checkDemoModCalisma+0xc22>

					kapi1pizzato=1;
 8006776:	4b7f      	ldr	r3, [pc, #508]	@ (8006974 <checkDemoModCalisma+0xe18>)
 8006778:	2201      	movs	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e002      	b.n	8006784 <checkDemoModCalisma+0xc28>
				} else {
					kapi1pizzato=0;
 800677e:	4b7d      	ldr	r3, [pc, #500]	@ (8006974 <checkDemoModCalisma+0xe18>)
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006784:	4b75      	ldr	r3, [pc, #468]	@ (800695c <checkDemoModCalisma+0xe00>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <checkDemoModCalisma+0xc40>
 800678c:	4b79      	ldr	r3, [pc, #484]	@ (8006974 <checkDemoModCalisma+0xe18>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <checkDemoModCalisma+0xc40>
 8006794:	4b78      	ldr	r3, [pc, #480]	@ (8006978 <checkDemoModCalisma+0xe1c>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <checkDemoModCalisma+0xc4c>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800679c:	2201      	movs	r2, #1
 800679e:	2180      	movs	r1, #128	@ 0x80
 80067a0:	4876      	ldr	r0, [pc, #472]	@ (800697c <checkDemoModCalisma+0xe20>)
 80067a2:	f005 f9ee 	bl	800bb82 <HAL_GPIO_WritePin>
 80067a6:	e004      	b.n	80067b2 <checkDemoModCalisma+0xc56>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067a8:	2200      	movs	r2, #0
 80067aa:	2180      	movs	r1, #128	@ 0x80
 80067ac:	4873      	ldr	r0, [pc, #460]	@ (800697c <checkDemoModCalisma+0xe20>)
 80067ae:	f005 f9e8 	bl	800bb82 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80067b2:	4b73      	ldr	r3, [pc, #460]	@ (8006980 <checkDemoModCalisma+0xe24>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d141      	bne.n	800683e <checkDemoModCalisma+0xce2>
 80067ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006964 <checkDemoModCalisma+0xe08>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d003      	beq.n	80067ca <checkDemoModCalisma+0xc6e>
 80067c2:	4b68      	ldr	r3, [pc, #416]	@ (8006964 <checkDemoModCalisma+0xe08>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d139      	bne.n	800683e <checkDemoModCalisma+0xce2>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80067ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067ce:	4866      	ldr	r0, [pc, #408]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 80067d0:	f005 f9c0 	bl	800bb54 <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <checkDemoModCalisma+0xc86>
 80067da:	4b6a      	ldr	r3, [pc, #424]	@ (8006984 <checkDemoModCalisma+0xe28>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <checkDemoModCalisma+0xc9e>
 80067e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80067e6:	4868      	ldr	r0, [pc, #416]	@ (8006988 <checkDemoModCalisma+0xe2c>)
 80067e8:	f005 f9b4 	bl	800bb54 <HAL_GPIO_ReadPin>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d125      	bne.n	800683e <checkDemoModCalisma+0xce2>
 80067f2:	4b64      	ldr	r3, [pc, #400]	@ (8006984 <checkDemoModCalisma+0xe28>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d121      	bne.n	800683e <checkDemoModCalisma+0xce2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067fa:	2102      	movs	r1, #2
 80067fc:	485a      	ldr	r0, [pc, #360]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 80067fe:	f005 f9a9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006802:	4603      	mov	r3, r0
 8006804:	2b01      	cmp	r3, #1
 8006806:	d11a      	bne.n	800683e <checkDemoModCalisma+0xce2>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006808:	2104      	movs	r1, #4
 800680a:	4857      	ldr	r0, [pc, #348]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 800680c:	f005 f9a2 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d113      	bne.n	800683e <checkDemoModCalisma+0xce2>
						&&(makineStop==1)
 8006816:	4b56      	ldr	r3, [pc, #344]	@ (8006970 <checkDemoModCalisma+0xe14>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00f      	beq.n	800683e <checkDemoModCalisma+0xce2>
						&&(butonKontrol==0)) {
 800681e:	4b5b      	ldr	r3, [pc, #364]	@ (800698c <checkDemoModCalisma+0xe30>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	f083 0301 	eor.w	r3, r3, #1
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <checkDemoModCalisma+0xce2>

					kapi2prudhome=1;
 800682c:	4b58      	ldr	r3, [pc, #352]	@ (8006990 <checkDemoModCalisma+0xe34>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006832:	4b58      	ldr	r3, [pc, #352]	@ (8006994 <checkDemoModCalisma+0xe38>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a58      	ldr	r2, [pc, #352]	@ (8006998 <checkDemoModCalisma+0xe3c>)
 8006838:	6013      	str	r3, [r2, #0]
					bekle();
 800683a:	f7fd fc37 	bl	80040ac <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800683e:	4b55      	ldr	r3, [pc, #340]	@ (8006994 <checkDemoModCalisma+0xe38>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b55      	ldr	r3, [pc, #340]	@ (8006998 <checkDemoModCalisma+0xe3c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	4a54      	ldr	r2, [pc, #336]	@ (800699c <checkDemoModCalisma+0xe40>)
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	4293      	cmp	r3, r2
 800684e:	d20d      	bcs.n	800686c <checkDemoModCalisma+0xd10>
 8006850:	2102      	movs	r1, #2
 8006852:	4845      	ldr	r0, [pc, #276]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 8006854:	f005 f97e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <checkDemoModCalisma+0xd10>
 800685e:	4b44      	ldr	r3, [pc, #272]	@ (8006970 <checkDemoModCalisma+0xe14>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f083 0301 	eor.w	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <checkDemoModCalisma+0xd16>
					kapi2prudhome=0;
 800686c:	4b48      	ldr	r3, [pc, #288]	@ (8006990 <checkDemoModCalisma+0xe34>)
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006872:	4b43      	ldr	r3, [pc, #268]	@ (8006980 <checkDemoModCalisma+0xe24>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d135      	bne.n	80068e6 <checkDemoModCalisma+0xd8a>
 800687a:	4b3a      	ldr	r3, [pc, #232]	@ (8006964 <checkDemoModCalisma+0xe08>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d003      	beq.n	800688a <checkDemoModCalisma+0xd2e>
 8006882:	4b38      	ldr	r3, [pc, #224]	@ (8006964 <checkDemoModCalisma+0xe08>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d12d      	bne.n	80068e6 <checkDemoModCalisma+0xd8a>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800688a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800688e:	4836      	ldr	r0, [pc, #216]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 8006890:	f005 f960 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <checkDemoModCalisma+0xd46>
 800689a:	4b3a      	ldr	r3, [pc, #232]	@ (8006984 <checkDemoModCalisma+0xe28>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <checkDemoModCalisma+0xd5e>
 80068a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80068a6:	4838      	ldr	r0, [pc, #224]	@ (8006988 <checkDemoModCalisma+0xe2c>)
 80068a8:	f005 f954 	bl	800bb54 <HAL_GPIO_ReadPin>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d119      	bne.n	80068e6 <checkDemoModCalisma+0xd8a>
 80068b2:	4b34      	ldr	r3, [pc, #208]	@ (8006984 <checkDemoModCalisma+0xe28>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d115      	bne.n	80068e6 <checkDemoModCalisma+0xd8a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80068ba:	2102      	movs	r1, #2
 80068bc:	482a      	ldr	r0, [pc, #168]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 80068be:	f005 f949 	bl	800bb54 <HAL_GPIO_ReadPin>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d10e      	bne.n	80068e6 <checkDemoModCalisma+0xd8a>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80068c8:	2104      	movs	r1, #4
 80068ca:	4827      	ldr	r0, [pc, #156]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 80068cc:	f005 f942 	bl	800bb54 <HAL_GPIO_ReadPin>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <checkDemoModCalisma+0xd8a>
						&&(makineStop==1)) {
 80068d6:	4b26      	ldr	r3, [pc, #152]	@ (8006970 <checkDemoModCalisma+0xe14>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <checkDemoModCalisma+0xd8a>

					kapi2butonkontrol=1;
 80068de:	4b30      	ldr	r3, [pc, #192]	@ (80069a0 <checkDemoModCalisma+0xe44>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	e002      	b.n	80068ec <checkDemoModCalisma+0xd90>
				} else {
					kapi2butonkontrol=0;
 80068e6:	4b2e      	ldr	r3, [pc, #184]	@ (80069a0 <checkDemoModCalisma+0xe44>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80068ec:	4b24      	ldr	r3, [pc, #144]	@ (8006980 <checkDemoModCalisma+0xe24>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d11d      	bne.n	8006930 <checkDemoModCalisma+0xdd4>
 80068f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <checkDemoModCalisma+0xe08>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d003      	beq.n	8006904 <checkDemoModCalisma+0xda8>
 80068fc:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <checkDemoModCalisma+0xe08>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d115      	bne.n	8006930 <checkDemoModCalisma+0xdd4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006904:	2102      	movs	r1, #2
 8006906:	4818      	ldr	r0, [pc, #96]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 8006908:	f005 f924 	bl	800bb54 <HAL_GPIO_ReadPin>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d10e      	bne.n	8006930 <checkDemoModCalisma+0xdd4>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006912:	2104      	movs	r1, #4
 8006914:	4814      	ldr	r0, [pc, #80]	@ (8006968 <checkDemoModCalisma+0xe0c>)
 8006916:	f005 f91d 	bl	800bb54 <HAL_GPIO_ReadPin>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <checkDemoModCalisma+0xdd4>
						&&(makineStop==1)) {
 8006920:	4b13      	ldr	r3, [pc, #76]	@ (8006970 <checkDemoModCalisma+0xe14>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <checkDemoModCalisma+0xdd4>

					kapi2pizzato=1;
 8006928:	4b1e      	ldr	r3, [pc, #120]	@ (80069a4 <checkDemoModCalisma+0xe48>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e002      	b.n	8006936 <checkDemoModCalisma+0xdda>
				} else {
					kapi2pizzato=0;
 8006930:	4b1c      	ldr	r3, [pc, #112]	@ (80069a4 <checkDemoModCalisma+0xe48>)
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006936:	4b1a      	ldr	r3, [pc, #104]	@ (80069a0 <checkDemoModCalisma+0xe44>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <checkDemoModCalisma+0xdf2>
 800693e:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <checkDemoModCalisma+0xe48>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <checkDemoModCalisma+0xdf2>
 8006946:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <checkDemoModCalisma+0xe34>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d02c      	beq.n	80069a8 <checkDemoModCalisma+0xe4c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800694e:	2201      	movs	r2, #1
 8006950:	2140      	movs	r1, #64	@ 0x40
 8006952:	480a      	ldr	r0, [pc, #40]	@ (800697c <checkDemoModCalisma+0xe20>)
 8006954:	f005 f915 	bl	800bb82 <HAL_GPIO_WritePin>
 8006958:	e02b      	b.n	80069b2 <checkDemoModCalisma+0xe56>
 800695a:	bf00      	nop
 800695c:	20001414 	.word	0x20001414
 8006960:	200013d9 	.word	0x200013d9
 8006964:	200013d8 	.word	0x200013d8
 8006968:	40011000 	.word	0x40011000
 800696c:	200013d6 	.word	0x200013d6
 8006970:	20001412 	.word	0x20001412
 8006974:	20001415 	.word	0x20001415
 8006978:	20001413 	.word	0x20001413
 800697c:	40010800 	.word	0x40010800
 8006980:	200013da 	.word	0x200013da
 8006984:	200013dc 	.word	0x200013dc
 8006988:	40010c00 	.word	0x40010c00
 800698c:	200013ff 	.word	0x200013ff
 8006990:	20001416 	.word	0x20001416
 8006994:	200013a0 	.word	0x200013a0
 8006998:	200013a4 	.word	0x200013a4
 800699c:	200013ea 	.word	0x200013ea
 80069a0:	20001417 	.word	0x20001417
 80069a4:	20001418 	.word	0x20001418
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069a8:	2200      	movs	r2, #0
 80069aa:	2140      	movs	r1, #64	@ 0x40
 80069ac:	4835      	ldr	r0, [pc, #212]	@ (8006a84 <checkDemoModCalisma+0xf28>)
 80069ae:	f005 f8e8 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80069b2:	4b35      	ldr	r3, [pc, #212]	@ (8006a88 <checkDemoModCalisma+0xf2c>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <checkDemoModCalisma+0xe66>
 80069ba:	4b33      	ldr	r3, [pc, #204]	@ (8006a88 <checkDemoModCalisma+0xf2c>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d115      	bne.n	80069ee <checkDemoModCalisma+0xe92>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80069c2:	2104      	movs	r1, #4
 80069c4:	4831      	ldr	r0, [pc, #196]	@ (8006a8c <checkDemoModCalisma+0xf30>)
 80069c6:	f005 f8c5 	bl	800bb54 <HAL_GPIO_ReadPin>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d003      	beq.n	80069d8 <checkDemoModCalisma+0xe7c>
 80069d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006a90 <checkDemoModCalisma+0xf34>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <checkDemoModCalisma+0xe92>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80069d8:	2102      	movs	r1, #2
 80069da:	482c      	ldr	r0, [pc, #176]	@ (8006a8c <checkDemoModCalisma+0xf30>)
 80069dc:	f005 f8ba 	bl	800bb54 <HAL_GPIO_ReadPin>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <checkDemoModCalisma+0xe92>

					kapiTablaAcKonumKat1=1;
 80069e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a94 <checkDemoModCalisma+0xf38>)
 80069e8:	2201      	movs	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	e002      	b.n	80069f4 <checkDemoModCalisma+0xe98>
				} else {
					kapiTablaAcKonumKat1=0;
 80069ee:	4b29      	ldr	r3, [pc, #164]	@ (8006a94 <checkDemoModCalisma+0xf38>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80069f4:	4b24      	ldr	r3, [pc, #144]	@ (8006a88 <checkDemoModCalisma+0xf2c>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d003      	beq.n	8006a04 <checkDemoModCalisma+0xea8>
 80069fc:	4b22      	ldr	r3, [pc, #136]	@ (8006a88 <checkDemoModCalisma+0xf2c>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d111      	bne.n	8006a28 <checkDemoModCalisma+0xecc>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a04:	2102      	movs	r1, #2
 8006a06:	4821      	ldr	r0, [pc, #132]	@ (8006a8c <checkDemoModCalisma+0xf30>)
 8006a08:	f005 f8a4 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10a      	bne.n	8006a28 <checkDemoModCalisma+0xecc>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006a12:	2104      	movs	r1, #4
 8006a14:	481d      	ldr	r0, [pc, #116]	@ (8006a8c <checkDemoModCalisma+0xf30>)
 8006a16:	f005 f89d 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d103      	bne.n	8006a28 <checkDemoModCalisma+0xecc>

					kapiTablaAcKonumKat2=1;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	@ (8006a98 <checkDemoModCalisma+0xf3c>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e002      	b.n	8006a2e <checkDemoModCalisma+0xed2>
				} else {
					kapiTablaAcKonumKat2=0;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <checkDemoModCalisma+0xf3c>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8006a2e:	4b19      	ldr	r3, [pc, #100]	@ (8006a94 <checkDemoModCalisma+0xf38>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00f      	beq.n	8006a56 <checkDemoModCalisma+0xefa>
						&& kapiAcTipi==1
 8006a36:	4b19      	ldr	r3, [pc, #100]	@ (8006a9c <checkDemoModCalisma+0xf40>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10b      	bne.n	8006a56 <checkDemoModCalisma+0xefa>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006a3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006a42:	4817      	ldr	r0, [pc, #92]	@ (8006aa0 <checkDemoModCalisma+0xf44>)
 8006a44:	f005 f886 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <checkDemoModCalisma+0xefa>

					kapiactablaesp1=1;
 8006a4e:	4b15      	ldr	r3, [pc, #84]	@ (8006aa4 <checkDemoModCalisma+0xf48>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e002      	b.n	8006a5c <checkDemoModCalisma+0xf00>
				} else {
					kapiactablaesp1=0;
 8006a56:	4b13      	ldr	r3, [pc, #76]	@ (8006aa4 <checkDemoModCalisma+0xf48>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a98 <checkDemoModCalisma+0xf3c>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d023      	beq.n	8006aac <checkDemoModCalisma+0xf50>
						&& kapiAcTipi==1
 8006a64:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <checkDemoModCalisma+0xf40>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d11f      	bne.n	8006aac <checkDemoModCalisma+0xf50>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006a70:	480b      	ldr	r0, [pc, #44]	@ (8006aa0 <checkDemoModCalisma+0xf44>)
 8006a72:	f005 f86f 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d117      	bne.n	8006aac <checkDemoModCalisma+0xf50>

					kapiactablaesp2=1;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa8 <checkDemoModCalisma+0xf4c>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e016      	b.n	8006ab2 <checkDemoModCalisma+0xf56>
 8006a84:	40010800 	.word	0x40010800
 8006a88:	200013dd 	.word	0x200013dd
 8006a8c:	40011000 	.word	0x40011000
 8006a90:	200013d6 	.word	0x200013d6
 8006a94:	2000141c 	.word	0x2000141c
 8006a98:	2000141d 	.word	0x2000141d
 8006a9c:	200013dc 	.word	0x200013dc
 8006aa0:	40010c00 	.word	0x40010c00
 8006aa4:	2000142c 	.word	0x2000142c
 8006aa8:	2000142d 	.word	0x2000142d
				} else {
					kapiactablaesp2=0;
 8006aac:	4b7e      	ldr	r3, [pc, #504]	@ (8006ca8 <checkDemoModCalisma+0x114c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8006cac <checkDemoModCalisma+0x1150>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d154      	bne.n	8006b64 <checkDemoModCalisma+0x1008>
 8006aba:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb0 <checkDemoModCalisma+0x1154>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d003      	beq.n	8006aca <checkDemoModCalisma+0xf6e>
 8006ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8006cb0 <checkDemoModCalisma+0x1154>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d14c      	bne.n	8006b64 <checkDemoModCalisma+0x1008>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006aca:	4b7a      	ldr	r3, [pc, #488]	@ (8006cb4 <checkDemoModCalisma+0x1158>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d103      	bne.n	8006ada <checkDemoModCalisma+0xf7e>
 8006ad2:	4b79      	ldr	r3, [pc, #484]	@ (8006cb8 <checkDemoModCalisma+0x115c>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d044      	beq.n	8006b64 <checkDemoModCalisma+0x1008>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006ada:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ade:	4877      	ldr	r0, [pc, #476]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006ae0:	f005 f838 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01c      	beq.n	8006b24 <checkDemoModCalisma+0xfc8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006aea:	2180      	movs	r1, #128	@ 0x80
 8006aec:	4873      	ldr	r0, [pc, #460]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006aee:	f005 f831 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <checkDemoModCalisma+0xfaa>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006af8:	2104      	movs	r1, #4
 8006afa:	4870      	ldr	r0, [pc, #448]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006afc:	f005 f82a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d00e      	beq.n	8006b24 <checkDemoModCalisma+0xfc8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006b06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b0a:	486c      	ldr	r0, [pc, #432]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006b0c:	f005 f822 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <checkDemoModCalisma+0xfd0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006b16:	2102      	movs	r1, #2
 8006b18:	4868      	ldr	r0, [pc, #416]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006b1a:	f005 f81b 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d103      	bne.n	8006b2c <checkDemoModCalisma+0xfd0>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006b24:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <checkDemoModCalisma+0x1164>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <checkDemoModCalisma+0xfe0>
 8006b2c:	4b65      	ldr	r3, [pc, #404]	@ (8006cc4 <checkDemoModCalisma+0x1168>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <checkDemoModCalisma+0xfe0>
 8006b34:	4b5c      	ldr	r3, [pc, #368]	@ (8006ca8 <checkDemoModCalisma+0x114c>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <checkDemoModCalisma+0x1008>
						&&(makineStop==1)
 8006b3c:	4b62      	ldr	r3, [pc, #392]	@ (8006cc8 <checkDemoModCalisma+0x116c>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00f      	beq.n	8006b64 <checkDemoModCalisma+0x1008>
						&&(butonKontrol==0)) {
 8006b44:	4b61      	ldr	r3, [pc, #388]	@ (8006ccc <checkDemoModCalisma+0x1170>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f083 0301 	eor.w	r3, r3, #1
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <checkDemoModCalisma+0x1008>

					kapiTablaprudhome=1;
 8006b52:	4b5f      	ldr	r3, [pc, #380]	@ (8006cd0 <checkDemoModCalisma+0x1174>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006b58:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd4 <checkDemoModCalisma+0x1178>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a5e      	ldr	r2, [pc, #376]	@ (8006cd8 <checkDemoModCalisma+0x117c>)
 8006b5e:	6013      	str	r3, [r2, #0]
					bekle();
 8006b60:	f7fd faa4 	bl	80040ac <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006b64:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd4 <checkDemoModCalisma+0x1178>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd8 <checkDemoModCalisma+0x117c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8006cdc <checkDemoModCalisma+0x1180>)
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d214      	bcs.n	8006ba0 <checkDemoModCalisma+0x1044>
 8006b76:	4b4f      	ldr	r3, [pc, #316]	@ (8006cb4 <checkDemoModCalisma+0x1158>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	f083 0301 	eor.w	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <checkDemoModCalisma+0x1036>
 8006b84:	4b4c      	ldr	r3, [pc, #304]	@ (8006cb8 <checkDemoModCalisma+0x115c>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f083 0301 	eor.w	r3, r3, #1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <checkDemoModCalisma+0x1044>
 8006b92:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc8 <checkDemoModCalisma+0x116c>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f083 0301 	eor.w	r3, r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <checkDemoModCalisma+0x104a>
					kapiTablaprudhome=0;
 8006ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd0 <checkDemoModCalisma+0x1174>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006ba6:	4b41      	ldr	r3, [pc, #260]	@ (8006cac <checkDemoModCalisma+0x1150>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d148      	bne.n	8006c40 <checkDemoModCalisma+0x10e4>
 8006bae:	4b40      	ldr	r3, [pc, #256]	@ (8006cb0 <checkDemoModCalisma+0x1154>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d003      	beq.n	8006bbe <checkDemoModCalisma+0x1062>
 8006bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8006cb0 <checkDemoModCalisma+0x1154>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d140      	bne.n	8006c40 <checkDemoModCalisma+0x10e4>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8006cb4 <checkDemoModCalisma+0x1158>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <checkDemoModCalisma+0x1072>
 8006bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb8 <checkDemoModCalisma+0x115c>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d038      	beq.n	8006c40 <checkDemoModCalisma+0x10e4>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006bce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bd2:	483a      	ldr	r0, [pc, #232]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006bd4:	f004 ffbe 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01c      	beq.n	8006c18 <checkDemoModCalisma+0x10bc>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006bde:	2180      	movs	r1, #128	@ 0x80
 8006be0:	4836      	ldr	r0, [pc, #216]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006be2:	f004 ffb7 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <checkDemoModCalisma+0x109e>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006bec:	2104      	movs	r1, #4
 8006bee:	4833      	ldr	r0, [pc, #204]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006bf0:	f004 ffb0 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d00e      	beq.n	8006c18 <checkDemoModCalisma+0x10bc>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006bfe:	482f      	ldr	r0, [pc, #188]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006c00:	f004 ffa8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <checkDemoModCalisma+0x10c4>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	482b      	ldr	r0, [pc, #172]	@ (8006cbc <checkDemoModCalisma+0x1160>)
 8006c0e:	f004 ffa1 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d103      	bne.n	8006c20 <checkDemoModCalisma+0x10c4>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006c18:	4b29      	ldr	r3, [pc, #164]	@ (8006cc0 <checkDemoModCalisma+0x1164>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <checkDemoModCalisma+0x10d4>
 8006c20:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <checkDemoModCalisma+0x1168>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <checkDemoModCalisma+0x10d4>
 8006c28:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca8 <checkDemoModCalisma+0x114c>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <checkDemoModCalisma+0x10e4>
						&&(makineStop==1)) {
 8006c30:	4b25      	ldr	r3, [pc, #148]	@ (8006cc8 <checkDemoModCalisma+0x116c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <checkDemoModCalisma+0x10e4>

					kapiTablabutonkontrol=1;
 8006c38:	4b29      	ldr	r3, [pc, #164]	@ (8006ce0 <checkDemoModCalisma+0x1184>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e002      	b.n	8006c46 <checkDemoModCalisma+0x10ea>
				} else {
					kapiTablabutonkontrol=0;
 8006c40:	4b27      	ldr	r3, [pc, #156]	@ (8006ce0 <checkDemoModCalisma+0x1184>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006c46:	4b19      	ldr	r3, [pc, #100]	@ (8006cac <checkDemoModCalisma+0x1150>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d117      	bne.n	8006c7e <checkDemoModCalisma+0x1122>
 8006c4e:	4b18      	ldr	r3, [pc, #96]	@ (8006cb0 <checkDemoModCalisma+0x1154>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d003      	beq.n	8006c5e <checkDemoModCalisma+0x1102>
 8006c56:	4b16      	ldr	r3, [pc, #88]	@ (8006cb0 <checkDemoModCalisma+0x1154>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d10f      	bne.n	8006c7e <checkDemoModCalisma+0x1122>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006c5e:	4b15      	ldr	r3, [pc, #84]	@ (8006cb4 <checkDemoModCalisma+0x1158>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <checkDemoModCalisma+0x1112>
 8006c66:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <checkDemoModCalisma+0x115c>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <checkDemoModCalisma+0x1122>
						&&(makineStop==1)) {
 8006c6e:	4b16      	ldr	r3, [pc, #88]	@ (8006cc8 <checkDemoModCalisma+0x116c>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <checkDemoModCalisma+0x1122>

					kapiTablapizzato=1;
 8006c76:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce4 <checkDemoModCalisma+0x1188>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e002      	b.n	8006c84 <checkDemoModCalisma+0x1128>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8006c7e:	4b19      	ldr	r3, [pc, #100]	@ (8006ce4 <checkDemoModCalisma+0x1188>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006c84:	4b16      	ldr	r3, [pc, #88]	@ (8006ce0 <checkDemoModCalisma+0x1184>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <checkDemoModCalisma+0x1140>
 8006c8c:	4b10      	ldr	r3, [pc, #64]	@ (8006cd0 <checkDemoModCalisma+0x1174>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <checkDemoModCalisma+0x1140>
 8006c94:	4b13      	ldr	r3, [pc, #76]	@ (8006ce4 <checkDemoModCalisma+0x1188>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d027      	beq.n	8006cec <checkDemoModCalisma+0x1190>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	2120      	movs	r1, #32
 8006ca0:	4811      	ldr	r0, [pc, #68]	@ (8006ce8 <checkDemoModCalisma+0x118c>)
 8006ca2:	f004 ff6e 	bl	800bb82 <HAL_GPIO_WritePin>
 8006ca6:	e026      	b.n	8006cf6 <checkDemoModCalisma+0x119a>
 8006ca8:	2000142d 	.word	0x2000142d
 8006cac:	200013db 	.word	0x200013db
 8006cb0:	200013d8 	.word	0x200013d8
 8006cb4:	2000141c 	.word	0x2000141c
 8006cb8:	2000141d 	.word	0x2000141d
 8006cbc:	40011000 	.word	0x40011000
 8006cc0:	200013dc 	.word	0x200013dc
 8006cc4:	2000142c 	.word	0x2000142c
 8006cc8:	20001412 	.word	0x20001412
 8006ccc:	200013ff 	.word	0x200013ff
 8006cd0:	20001419 	.word	0x20001419
 8006cd4:	200013a0 	.word	0x200013a0
 8006cd8:	200013a4 	.word	0x200013a4
 8006cdc:	200013eb 	.word	0x200013eb
 8006ce0:	2000141a 	.word	0x2000141a
 8006ce4:	2000141b 	.word	0x2000141b
 8006ce8:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006cec:	2200      	movs	r2, #0
 8006cee:	2120      	movs	r1, #32
 8006cf0:	4882      	ldr	r0, [pc, #520]	@ (8006efc <checkDemoModCalisma+0x13a0>)
 8006cf2:	f004 ff46 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006cf6:	4b82      	ldr	r3, [pc, #520]	@ (8006f00 <checkDemoModCalisma+0x13a4>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <checkDemoModCalisma+0x11c0>
 8006cfe:	2102      	movs	r1, #2
 8006d00:	4880      	ldr	r0, [pc, #512]	@ (8006f04 <checkDemoModCalisma+0x13a8>)
 8006d02:	f004 ff27 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d107      	bne.n	8006d1c <checkDemoModCalisma+0x11c0>
 8006d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f08 <checkDemoModCalisma+0x13ac>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d103      	bne.n	8006d1c <checkDemoModCalisma+0x11c0>
 8006d14:	4b7d      	ldr	r3, [pc, #500]	@ (8006f0c <checkDemoModCalisma+0x13b0>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d112      	bne.n	8006d42 <checkDemoModCalisma+0x11e6>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8006f10 <checkDemoModCalisma+0x13b4>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d027      	beq.n	8006d74 <checkDemoModCalisma+0x1218>
 8006d24:	2104      	movs	r1, #4
 8006d26:	4877      	ldr	r0, [pc, #476]	@ (8006f04 <checkDemoModCalisma+0x13a8>)
 8006d28:	f004 ff14 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d120      	bne.n	8006d74 <checkDemoModCalisma+0x1218>
 8006d32:	4b75      	ldr	r3, [pc, #468]	@ (8006f08 <checkDemoModCalisma+0x13ac>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01c      	beq.n	8006d74 <checkDemoModCalisma+0x1218>
 8006d3a:	4b74      	ldr	r3, [pc, #464]	@ (8006f0c <checkDemoModCalisma+0x13b0>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d018      	beq.n	8006d74 <checkDemoModCalisma+0x1218>


					calismaSayisiDemo++;
 8006d42:	4b74      	ldr	r3, [pc, #464]	@ (8006f14 <checkDemoModCalisma+0x13b8>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f112 0801 	adds.w	r8, r2, #1
 8006d4c:	f143 0900 	adc.w	r9, r3, #0
 8006d50:	4b70      	ldr	r3, [pc, #448]	@ (8006f14 <checkDemoModCalisma+0x13b8>)
 8006d52:	e9c3 8900 	strd	r8, r9, [r3]
					eepromData[28]=calismaSayisiDemo;
 8006d56:	4b6f      	ldr	r3, [pc, #444]	@ (8006f14 <checkDemoModCalisma+0x13b8>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	496e      	ldr	r1, [pc, #440]	@ (8006f18 <checkDemoModCalisma+0x13bc>)
 8006d5e:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0

					hafizaYaz=1;
 8006d62:	4b6e      	ldr	r3, [pc, #440]	@ (8006f1c <checkDemoModCalisma+0x13c0>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8006d68:	4b65      	ldr	r3, [pc, #404]	@ (8006f00 <checkDemoModCalisma+0x13a4>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8006d6e:	4b68      	ldr	r3, [pc, #416]	@ (8006f10 <checkDemoModCalisma+0x13b4>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d78:	4869      	ldr	r0, [pc, #420]	@ (8006f20 <checkDemoModCalisma+0x13c4>)
 8006d7a:	f004 feeb 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d016      	beq.n	8006db2 <checkDemoModCalisma+0x1256>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006d84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006d88:	4865      	ldr	r0, [pc, #404]	@ (8006f20 <checkDemoModCalisma+0x13c4>)
 8006d8a:	f004 fee3 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <checkDemoModCalisma+0x1256>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006d94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d98:	4861      	ldr	r0, [pc, #388]	@ (8006f20 <checkDemoModCalisma+0x13c4>)
 8006d9a:	f004 fedb 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d006      	beq.n	8006db2 <checkDemoModCalisma+0x1256>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006da4:	2140      	movs	r1, #64	@ 0x40
 8006da6:	4857      	ldr	r0, [pc, #348]	@ (8006f04 <checkDemoModCalisma+0x13a8>)
 8006da8:	f004 fed4 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <checkDemoModCalisma+0x125e>

					startBasili=1;
 8006db2:	4b5c      	ldr	r3, [pc, #368]	@ (8006f24 <checkDemoModCalisma+0x13c8>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	e002      	b.n	8006dc0 <checkDemoModCalisma+0x1264>
				} else {
					startBasili=0;
 8006dba:	4b5a      	ldr	r3, [pc, #360]	@ (8006f24 <checkDemoModCalisma+0x13c8>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006dc0:	4b58      	ldr	r3, [pc, #352]	@ (8006f24 <checkDemoModCalisma+0x13c8>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d014      	beq.n	8006df2 <checkDemoModCalisma+0x1296>
 8006dc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006dcc:	4854      	ldr	r0, [pc, #336]	@ (8006f20 <checkDemoModCalisma+0x13c4>)
 8006dce:	f004 fec1 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10c      	bne.n	8006df2 <checkDemoModCalisma+0x1296>

					hataVar=1;
 8006dd8:	4b53      	ldr	r3, [pc, #332]	@ (8006f28 <checkDemoModCalisma+0x13cc>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006dde:	2001      	movs	r0, #1
 8006de0:	f7f9 ff06 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006de4:	2001      	movs	r0, #1
 8006de6:	f7f9 fe9d 	bl	8000b24 <hata2EEPROM>
					acilstophatasi=1;
 8006dea:	4b50      	ldr	r3, [pc, #320]	@ (8006f2c <checkDemoModCalisma+0x13d0>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	e018      	b.n	8006e24 <checkDemoModCalisma+0x12c8>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006df2:	4b4e      	ldr	r3, [pc, #312]	@ (8006f2c <checkDemoModCalisma+0x13d0>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d014      	beq.n	8006e24 <checkDemoModCalisma+0x12c8>
 8006dfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006dfe:	4848      	ldr	r0, [pc, #288]	@ (8006f20 <checkDemoModCalisma+0x13c4>)
 8006e00:	f004 fea8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10c      	bne.n	8006e24 <checkDemoModCalisma+0x12c8>
 8006e0a:	4b46      	ldr	r3, [pc, #280]	@ (8006f24 <checkDemoModCalisma+0x13c8>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	f083 0301 	eor.w	r3, r3, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <checkDemoModCalisma+0x12c8>
					acilstophatasi=0;
 8006e18:	4b44      	ldr	r3, [pc, #272]	@ (8006f2c <checkDemoModCalisma+0x13d0>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8006e1e:	2001      	movs	r0, #1
 8006e20:	f7fd f8da 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8006e24:	4b42      	ldr	r3, [pc, #264]	@ (8006f30 <checkDemoModCalisma+0x13d4>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f083 0301 	eor.w	r3, r3, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d023      	beq.n	8006e7a <checkDemoModCalisma+0x131e>
 8006e32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006e36:	483a      	ldr	r0, [pc, #232]	@ (8006f20 <checkDemoModCalisma+0x13c4>)
 8006e38:	f004 fe8c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <checkDemoModCalisma+0x12ee>
 8006e42:	4b3c      	ldr	r3, [pc, #240]	@ (8006f34 <checkDemoModCalisma+0x13d8>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <checkDemoModCalisma+0x131e>
 8006e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f38 <checkDemoModCalisma+0x13dc>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d113      	bne.n	8006e7a <checkDemoModCalisma+0x131e>
 8006e52:	4b3a      	ldr	r3, [pc, #232]	@ (8006f3c <checkDemoModCalisma+0x13e0>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	f083 0301 	eor.w	r3, r3, #1
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00c      	beq.n	8006e7a <checkDemoModCalisma+0x131e>
					hataVar=1;
 8006e60:	4b31      	ldr	r3, [pc, #196]	@ (8006f28 <checkDemoModCalisma+0x13cc>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8006e66:	2002      	movs	r0, #2
 8006e68:	f7f9 fec2 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 8006e6c:	2002      	movs	r0, #2
 8006e6e:	f7f9 fe59 	bl	8000b24 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006e72:	4b32      	ldr	r3, [pc, #200]	@ (8006f3c <checkDemoModCalisma+0x13e0>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e017      	b.n	8006eaa <checkDemoModCalisma+0x134e>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006e7a:	4b30      	ldr	r3, [pc, #192]	@ (8006f3c <checkDemoModCalisma+0x13e0>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d013      	beq.n	8006eaa <checkDemoModCalisma+0x134e>
 8006e82:	4b2b      	ldr	r3, [pc, #172]	@ (8006f30 <checkDemoModCalisma+0x13d4>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00f      	beq.n	8006eaa <checkDemoModCalisma+0x134e>
 8006e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f40 <checkDemoModCalisma+0x13e4>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	f083 0301 	eor.w	r3, r3, #1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <checkDemoModCalisma+0x134e>
					emniyetCercevesihatasi=0;
 8006e98:	4b28      	ldr	r3, [pc, #160]	@ (8006f3c <checkDemoModCalisma+0x13e0>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006e9e:	4b25      	ldr	r3, [pc, #148]	@ (8006f34 <checkDemoModCalisma+0x13d8>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006ea4:	2002      	movs	r0, #2
 8006ea6:	f7fd f897 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8006eaa:	4b26      	ldr	r3, [pc, #152]	@ (8006f44 <checkDemoModCalisma+0x13e8>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d150      	bne.n	8006f54 <checkDemoModCalisma+0x13f8>
 8006eb2:	4b25      	ldr	r3, [pc, #148]	@ (8006f48 <checkDemoModCalisma+0x13ec>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d14c      	bne.n	8006f54 <checkDemoModCalisma+0x13f8>
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <checkDemoModCalisma+0x13f0>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d048      	beq.n	8006f54 <checkDemoModCalisma+0x13f8>
 8006ec2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ec6:	480f      	ldr	r0, [pc, #60]	@ (8006f04 <checkDemoModCalisma+0x13a8>)
 8006ec8:	f004 fe44 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d140      	bne.n	8006f54 <checkDemoModCalisma+0x13f8>
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f50 <checkDemoModCalisma+0x13f4>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f083 0301 	eor.w	r3, r3, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d039      	beq.n	8006f54 <checkDemoModCalisma+0x13f8>
					hataVar=1;
 8006ee0:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <checkDemoModCalisma+0x13cc>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006ee6:	2003      	movs	r0, #3
 8006ee8:	f7f9 fe82 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006eec:	2003      	movs	r0, #3
 8006eee:	f7f9 fe19 	bl	8000b24 <hata2EEPROM>
					basinchatasi=1;
 8006ef2:	4b17      	ldr	r3, [pc, #92]	@ (8006f50 <checkDemoModCalisma+0x13f4>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e042      	b.n	8006f80 <checkDemoModCalisma+0x1424>
 8006efa:	bf00      	nop
 8006efc:	40010800 	.word	0x40010800
 8006f00:	2000140f 	.word	0x2000140f
 8006f04:	40011000 	.word	0x40011000
 8006f08:	200013d6 	.word	0x200013d6
 8006f0c:	20001412 	.word	0x20001412
 8006f10:	20001410 	.word	0x20001410
 8006f14:	200013c8 	.word	0x200013c8
 8006f18:	20000ff0 	.word	0x20000ff0
 8006f1c:	200013fc 	.word	0x200013fc
 8006f20:	40010c00 	.word	0x40010c00
 8006f24:	2000141e 	.word	0x2000141e
 8006f28:	20001425 	.word	0x20001425
 8006f2c:	20001420 	.word	0x20001420
 8006f30:	20001427 	.word	0x20001427
 8006f34:	20001431 	.word	0x20001431
 8006f38:	200013d4 	.word	0x200013d4
 8006f3c:	20001421 	.word	0x20001421
 8006f40:	20001408 	.word	0x20001408
 8006f44:	200013d3 	.word	0x200013d3
 8006f48:	200013d7 	.word	0x200013d7
 8006f4c:	20001424 	.word	0x20001424
 8006f50:	2000142e 	.word	0x2000142e
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006f54:	4b85      	ldr	r3, [pc, #532]	@ (800716c <checkDemoModCalisma+0x1610>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d011      	beq.n	8006f80 <checkDemoModCalisma+0x1424>
 8006f5c:	4b84      	ldr	r3, [pc, #528]	@ (8007170 <checkDemoModCalisma+0x1614>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d10d      	bne.n	8006f80 <checkDemoModCalisma+0x1424>
 8006f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006f68:	4882      	ldr	r0, [pc, #520]	@ (8007174 <checkDemoModCalisma+0x1618>)
 8006f6a:	f004 fdf3 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d105      	bne.n	8006f80 <checkDemoModCalisma+0x1424>
					basinchatasi=0;
 8006f74:	4b7d      	ldr	r3, [pc, #500]	@ (800716c <checkDemoModCalisma+0x1610>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8006f7a:	2003      	movs	r0, #3
 8006f7c:	f7fd f82c 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006f80:	4b7d      	ldr	r3, [pc, #500]	@ (8007178 <checkDemoModCalisma+0x161c>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <checkDemoModCalisma+0x1434>
 8006f88:	4b7c      	ldr	r3, [pc, #496]	@ (800717c <checkDemoModCalisma+0x1620>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d023      	beq.n	8006fd8 <checkDemoModCalisma+0x147c>
 8006f90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f94:	487a      	ldr	r0, [pc, #488]	@ (8007180 <checkDemoModCalisma+0x1624>)
 8006f96:	f004 fddd 	bl	800bb54 <HAL_GPIO_ReadPin>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d11b      	bne.n	8006fd8 <checkDemoModCalisma+0x147c>
 8006fa0:	4b78      	ldr	r3, [pc, #480]	@ (8007184 <checkDemoModCalisma+0x1628>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d003      	beq.n	8006fb0 <checkDemoModCalisma+0x1454>
 8006fa8:	4b76      	ldr	r3, [pc, #472]	@ (8007184 <checkDemoModCalisma+0x1628>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d113      	bne.n	8006fd8 <checkDemoModCalisma+0x147c>
 8006fb0:	4b75      	ldr	r3, [pc, #468]	@ (8007188 <checkDemoModCalisma+0x162c>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f083 0301 	eor.w	r3, r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <checkDemoModCalisma+0x147c>
					hataVar=1;
 8006fbe:	4b73      	ldr	r3, [pc, #460]	@ (800718c <checkDemoModCalisma+0x1630>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006fc4:	2004      	movs	r0, #4
 8006fc6:	f7f9 fe13 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006fca:	2004      	movs	r0, #4
 8006fcc:	f7f9 fdaa 	bl	8000b24 <hata2EEPROM>
					katkapisivicihatasi=1;
 8006fd0:	4b6d      	ldr	r3, [pc, #436]	@ (8007188 <checkDemoModCalisma+0x162c>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e01f      	b.n	8007018 <checkDemoModCalisma+0x14bc>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007188 <checkDemoModCalisma+0x162c>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01b      	beq.n	8007018 <checkDemoModCalisma+0x14bc>
 8006fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8007190 <checkDemoModCalisma+0x1634>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d017      	beq.n	8007018 <checkDemoModCalisma+0x14bc>
 8006fe8:	4b63      	ldr	r3, [pc, #396]	@ (8007178 <checkDemoModCalisma+0x161c>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f083 0301 	eor.w	r3, r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <checkDemoModCalisma+0x14bc>
 8006ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ffa:	4861      	ldr	r0, [pc, #388]	@ (8007180 <checkDemoModCalisma+0x1624>)
 8006ffc:	f004 fdaa 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <checkDemoModCalisma+0x14bc>

					katkapisivicihatasi=0;
 8007006:	4b60      	ldr	r3, [pc, #384]	@ (8007188 <checkDemoModCalisma+0x162c>)
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800700c:	4b5b      	ldr	r3, [pc, #364]	@ (800717c <checkDemoModCalisma+0x1620>)
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8007012:	2004      	movs	r0, #4
 8007014:	f7fc ffe0 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8007018:	4b57      	ldr	r3, [pc, #348]	@ (8007178 <checkDemoModCalisma+0x161c>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <checkDemoModCalisma+0x14cc>
 8007020:	4b5c      	ldr	r3, [pc, #368]	@ (8007194 <checkDemoModCalisma+0x1638>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d023      	beq.n	8007070 <checkDemoModCalisma+0x1514>
 8007028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800702c:	4854      	ldr	r0, [pc, #336]	@ (8007180 <checkDemoModCalisma+0x1624>)
 800702e:	f004 fd91 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007032:	4603      	mov	r3, r0
 8007034:	2b01      	cmp	r3, #1
 8007036:	d11b      	bne.n	8007070 <checkDemoModCalisma+0x1514>
 8007038:	4b52      	ldr	r3, [pc, #328]	@ (8007184 <checkDemoModCalisma+0x1628>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d003      	beq.n	8007048 <checkDemoModCalisma+0x14ec>
 8007040:	4b50      	ldr	r3, [pc, #320]	@ (8007184 <checkDemoModCalisma+0x1628>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d113      	bne.n	8007070 <checkDemoModCalisma+0x1514>
 8007048:	4b53      	ldr	r3, [pc, #332]	@ (8007198 <checkDemoModCalisma+0x163c>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f083 0301 	eor.w	r3, r3, #1
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <checkDemoModCalisma+0x1514>

					hataVar=1;
 8007056:	4b4d      	ldr	r3, [pc, #308]	@ (800718c <checkDemoModCalisma+0x1630>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800705c:	2005      	movs	r0, #5
 800705e:	f7f9 fdc7 	bl	8000bf0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8007062:	2005      	movs	r0, #5
 8007064:	f7f9 fd5e 	bl	8000b24 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8007068:	4b4b      	ldr	r3, [pc, #300]	@ (8007198 <checkDemoModCalisma+0x163c>)
 800706a:	2201      	movs	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	e023      	b.n	80070b8 <checkDemoModCalisma+0x155c>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007070:	4b49      	ldr	r3, [pc, #292]	@ (8007198 <checkDemoModCalisma+0x163c>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <checkDemoModCalisma+0x155c>
 8007078:	4b45      	ldr	r3, [pc, #276]	@ (8007190 <checkDemoModCalisma+0x1634>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01b      	beq.n	80070b8 <checkDemoModCalisma+0x155c>
 8007080:	4b3d      	ldr	r3, [pc, #244]	@ (8007178 <checkDemoModCalisma+0x161c>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f083 0301 	eor.w	r3, r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d014      	beq.n	80070b8 <checkDemoModCalisma+0x155c>
 800708e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007092:	483b      	ldr	r0, [pc, #236]	@ (8007180 <checkDemoModCalisma+0x1624>)
 8007094:	f004 fd5e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <checkDemoModCalisma+0x155c>
 800709e:	4b3c      	ldr	r3, [pc, #240]	@ (8007190 <checkDemoModCalisma+0x1634>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <checkDemoModCalisma+0x155c>
					tablakapisivicihatasi=0;
 80070a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007198 <checkDemoModCalisma+0x163c>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80070ac:	4b39      	ldr	r3, [pc, #228]	@ (8007194 <checkDemoModCalisma+0x1638>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80070b2:	2005      	movs	r0, #5
 80070b4:	f7fc ff90 	bl	8003fd8 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80070b8:	4b38      	ldr	r3, [pc, #224]	@ (800719c <checkDemoModCalisma+0x1640>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d107      	bne.n	80070d0 <checkDemoModCalisma+0x1574>
 80070c0:	4b37      	ldr	r3, [pc, #220]	@ (80071a0 <checkDemoModCalisma+0x1644>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <checkDemoModCalisma+0x1574>
 80070c8:	4b36      	ldr	r3, [pc, #216]	@ (80071a4 <checkDemoModCalisma+0x1648>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01b      	beq.n	8007108 <checkDemoModCalisma+0x15ac>
 80070d0:	4b35      	ldr	r3, [pc, #212]	@ (80071a8 <checkDemoModCalisma+0x164c>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f083 0301 	eor.w	r3, r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d014      	beq.n	8007108 <checkDemoModCalisma+0x15ac>
				    if(millis-timer4>=makineCalismaTmr) {
 80070de:	4b33      	ldr	r3, [pc, #204]	@ (80071ac <checkDemoModCalisma+0x1650>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b33      	ldr	r3, [pc, #204]	@ (80071b0 <checkDemoModCalisma+0x1654>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	4a32      	ldr	r2, [pc, #200]	@ (80071b4 <checkDemoModCalisma+0x1658>)
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d30b      	bcc.n	8007108 <checkDemoModCalisma+0x15ac>
					  	hataVar=1;
 80070f0:	4b26      	ldr	r3, [pc, #152]	@ (800718c <checkDemoModCalisma+0x1630>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80070f6:	2006      	movs	r0, #6
 80070f8:	f7f9 fd7a 	bl	8000bf0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80070fc:	2006      	movs	r0, #6
 80070fe:	f7f9 fd11 	bl	8000b24 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8007102:	4b29      	ldr	r3, [pc, #164]	@ (80071a8 <checkDemoModCalisma+0x164c>)
 8007104:	2201      	movs	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007108:	4b27      	ldr	r3, [pc, #156]	@ (80071a8 <checkDemoModCalisma+0x164c>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d013      	beq.n	8007138 <checkDemoModCalisma+0x15dc>
 8007110:	2108      	movs	r1, #8
 8007112:	481b      	ldr	r0, [pc, #108]	@ (8007180 <checkDemoModCalisma+0x1624>)
 8007114:	f004 fd1e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <checkDemoModCalisma+0x15dc>
 800711e:	4b16      	ldr	r3, [pc, #88]	@ (8007178 <checkDemoModCalisma+0x161c>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f083 0301 	eor.w	r3, r3, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <checkDemoModCalisma+0x15dc>
					maksimumcalismahatasi=0;
 800712c:	4b1e      	ldr	r3, [pc, #120]	@ (80071a8 <checkDemoModCalisma+0x164c>)
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8007132:	2006      	movs	r0, #6
 8007134:	f7fc ff50 	bl	8003fd8 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007138:	4b1f      	ldr	r3, [pc, #124]	@ (80071b8 <checkDemoModCalisma+0x165c>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <checkDemoModCalisma+0x15fc>
 8007140:	4b17      	ldr	r3, [pc, #92]	@ (80071a0 <checkDemoModCalisma+0x1644>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <checkDemoModCalisma+0x15fc>
 8007148:	4b1c      	ldr	r3, [pc, #112]	@ (80071bc <checkDemoModCalisma+0x1660>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <checkDemoModCalisma+0x15fc>
 8007150:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <checkDemoModCalisma+0x1648>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d035      	beq.n	80071c4 <checkDemoModCalisma+0x1668>
					makineCalisiyor=0;
 8007158:	4b19      	ldr	r3, [pc, #100]	@ (80071c0 <checkDemoModCalisma+0x1664>)
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800715e:	4b07      	ldr	r3, [pc, #28]	@ (800717c <checkDemoModCalisma+0x1620>)
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8007164:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <checkDemoModCalisma+0x1638>)
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	e032      	b.n	80071d2 <checkDemoModCalisma+0x1676>
 800716c:	2000142e 	.word	0x2000142e
 8007170:	200013d3 	.word	0x200013d3
 8007174:	40010c00 	.word	0x40010c00
 8007178:	2000141e 	.word	0x2000141e
 800717c:	20001432 	.word	0x20001432
 8007180:	40010800 	.word	0x40010800
 8007184:	200013d8 	.word	0x200013d8
 8007188:	2000142f 	.word	0x2000142f
 800718c:	20001425 	.word	0x20001425
 8007190:	20001412 	.word	0x20001412
 8007194:	20001433 	.word	0x20001433
 8007198:	20001430 	.word	0x20001430
 800719c:	20001424 	.word	0x20001424
 80071a0:	20001408 	.word	0x20001408
 80071a4:	20001407 	.word	0x20001407
 80071a8:	2000141f 	.word	0x2000141f
 80071ac:	200013a0 	.word	0x200013a0
 80071b0:	200013b4 	.word	0x200013b4
 80071b4:	200013e8 	.word	0x200013e8
 80071b8:	20001405 	.word	0x20001405
 80071bc:	20001406 	.word	0x20001406
 80071c0:	20001426 	.word	0x20001426
				} else {
					makineCalisiyor=1;
 80071c4:	4b90      	ldr	r3, [pc, #576]	@ (8007408 <checkDemoModCalisma+0x18ac>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80071ca:	4b90      	ldr	r3, [pc, #576]	@ (800740c <checkDemoModCalisma+0x18b0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a90      	ldr	r2, [pc, #576]	@ (8007410 <checkDemoModCalisma+0x18b4>)
 80071d0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80071d2:	4b90      	ldr	r3, [pc, #576]	@ (8007414 <checkDemoModCalisma+0x18b8>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d02f      	beq.n	800723a <checkDemoModCalisma+0x16de>
 80071da:	4b8f      	ldr	r3, [pc, #572]	@ (8007418 <checkDemoModCalisma+0x18bc>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f083 0301 	eor.w	r3, r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d028      	beq.n	800723a <checkDemoModCalisma+0x16de>
 80071e8:	4b8c      	ldr	r3, [pc, #560]	@ (800741c <checkDemoModCalisma+0x18c0>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f083 0301 	eor.w	r3, r3, #1
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d021      	beq.n	800723a <checkDemoModCalisma+0x16de>
 80071f6:	4b8a      	ldr	r3, [pc, #552]	@ (8007420 <checkDemoModCalisma+0x18c4>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	f083 0301 	eor.w	r3, r3, #1
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <checkDemoModCalisma+0x16de>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007204:	4b87      	ldr	r3, [pc, #540]	@ (8007424 <checkDemoModCalisma+0x18c8>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f083 0301 	eor.w	r3, r3, #1
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d013      	beq.n	800723a <checkDemoModCalisma+0x16de>
 8007212:	4b85      	ldr	r3, [pc, #532]	@ (8007428 <checkDemoModCalisma+0x18cc>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	f083 0301 	eor.w	r3, r3, #1
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <checkDemoModCalisma+0x16de>
 8007220:	4b82      	ldr	r3, [pc, #520]	@ (800742c <checkDemoModCalisma+0x18d0>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f083 0301 	eor.w	r3, r3, #1
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <checkDemoModCalisma+0x16de>

					hataVar=0;
 800722e:	4b79      	ldr	r3, [pc, #484]	@ (8007414 <checkDemoModCalisma+0x18b8>)
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8007234:	2007      	movs	r0, #7
 8007236:	f7fc fecf 	bl	8003fd8 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800723a:	4b76      	ldr	r3, [pc, #472]	@ (8007414 <checkDemoModCalisma+0x18b8>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d02a      	beq.n	8007298 <checkDemoModCalisma+0x173c>
 8007242:	4b75      	ldr	r3, [pc, #468]	@ (8007418 <checkDemoModCalisma+0x18bc>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	f083 0301 	eor.w	r3, r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d023      	beq.n	8007298 <checkDemoModCalisma+0x173c>
 8007250:	4b72      	ldr	r3, [pc, #456]	@ (800741c <checkDemoModCalisma+0x18c0>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01f      	beq.n	8007298 <checkDemoModCalisma+0x173c>
 8007258:	4b71      	ldr	r3, [pc, #452]	@ (8007420 <checkDemoModCalisma+0x18c4>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f083 0301 	eor.w	r3, r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <checkDemoModCalisma+0x173c>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8007266:	4b6f      	ldr	r3, [pc, #444]	@ (8007424 <checkDemoModCalisma+0x18c8>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f083 0301 	eor.w	r3, r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <checkDemoModCalisma+0x173c>
 8007274:	4b6c      	ldr	r3, [pc, #432]	@ (8007428 <checkDemoModCalisma+0x18cc>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	f083 0301 	eor.w	r3, r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <checkDemoModCalisma+0x173c>
 8007282:	4b6a      	ldr	r3, [pc, #424]	@ (800742c <checkDemoModCalisma+0x18d0>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	f083 0301 	eor.w	r3, r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <checkDemoModCalisma+0x173c>
				{
					EmnCerHataMakYukariCalis=1;
 8007290:	4b67      	ldr	r3, [pc, #412]	@ (8007430 <checkDemoModCalisma+0x18d4>)
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e009      	b.n	80072ac <checkDemoModCalisma+0x1750>
				}
				else if(emniyetCercevesihatasi==0)
 8007298:	4b60      	ldr	r3, [pc, #384]	@ (800741c <checkDemoModCalisma+0x18c0>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f083 0301 	eor.w	r3, r3, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=0;
 80072a6:	4b62      	ldr	r3, [pc, #392]	@ (8007430 <checkDemoModCalisma+0x18d4>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80072ac:	4b61      	ldr	r3, [pc, #388]	@ (8007434 <checkDemoModCalisma+0x18d8>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 81ce 	bne.w	8007652 <checkDemoModCalisma+0x1af6>
 80072b6:	4b60      	ldr	r3, [pc, #384]	@ (8007438 <checkDemoModCalisma+0x18dc>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 81c9 	beq.w	8007652 <checkDemoModCalisma+0x1af6>
 80072c0:	4b5e      	ldr	r3, [pc, #376]	@ (800743c <checkDemoModCalisma+0x18e0>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 81c4 	bne.w	8007652 <checkDemoModCalisma+0x1af6>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80072ca:	2102      	movs	r1, #2
 80072cc:	485c      	ldr	r0, [pc, #368]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 80072ce:	f004 fc41 	bl	800bb54 <HAL_GPIO_ReadPin>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11d      	bne.n	8007314 <checkDemoModCalisma+0x17b8>
						&& (demoAsagiCalis==0)
 80072d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007444 <checkDemoModCalisma+0x18e8>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f083 0301 	eor.w	r3, r3, #1
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <checkDemoModCalisma+0x17b8>
						&& (demoDevYukari==0)
 80072e6:	4b58      	ldr	r3, [pc, #352]	@ (8007448 <checkDemoModCalisma+0x18ec>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f083 0301 	eor.w	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00f      	beq.n	8007314 <checkDemoModCalisma+0x17b8>
						&& (demoDevAsagi==0)) {
 80072f4:	4b55      	ldr	r3, [pc, #340]	@ (800744c <checkDemoModCalisma+0x18f0>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f083 0301 	eor.w	r3, r3, #1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <checkDemoModCalisma+0x17b8>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007302:	2201      	movs	r2, #1
 8007304:	2104      	movs	r1, #4
 8007306:	4852      	ldr	r0, [pc, #328]	@ (8007450 <checkDemoModCalisma+0x18f4>)
 8007308:	f004 fc3b 	bl	800bb82 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 800730c:	4b51      	ldr	r3, [pc, #324]	@ (8007454 <checkDemoModCalisma+0x18f8>)
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e00e      	b.n	8007332 <checkDemoModCalisma+0x17d6>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007314:	2102      	movs	r1, #2
 8007316:	484a      	ldr	r0, [pc, #296]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 8007318:	f004 fc1c 	bl	800bb54 <HAL_GPIO_ReadPin>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d107      	bne.n	8007332 <checkDemoModCalisma+0x17d6>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007322:	2200      	movs	r2, #0
 8007324:	2104      	movs	r1, #4
 8007326:	484a      	ldr	r0, [pc, #296]	@ (8007450 <checkDemoModCalisma+0x18f4>)
 8007328:	f004 fc2b 	bl	800bb82 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 800732c:	4b49      	ldr	r3, [pc, #292]	@ (8007454 <checkDemoModCalisma+0x18f8>)
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007332:	4b48      	ldr	r3, [pc, #288]	@ (8007454 <checkDemoModCalisma+0x18f8>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <checkDemoModCalisma+0x17f6>
 800733a:	4b43      	ldr	r3, [pc, #268]	@ (8007448 <checkDemoModCalisma+0x18ec>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <checkDemoModCalisma+0x17f6>
 8007342:	4b42      	ldr	r3, [pc, #264]	@ (800744c <checkDemoModCalisma+0x18f0>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d103      	bne.n	8007352 <checkDemoModCalisma+0x17f6>
 800734a:	4b3e      	ldr	r3, [pc, #248]	@ (8007444 <checkDemoModCalisma+0x18e8>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00c      	beq.n	800736c <checkDemoModCalisma+0x1810>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007352:	2201      	movs	r2, #1
 8007354:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007358:	483d      	ldr	r0, [pc, #244]	@ (8007450 <checkDemoModCalisma+0x18f4>)
 800735a:	f004 fc12 	bl	800bb82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800735e:	2201      	movs	r2, #1
 8007360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007364:	483a      	ldr	r0, [pc, #232]	@ (8007450 <checkDemoModCalisma+0x18f4>)
 8007366:	f004 fc0c 	bl	800bb82 <HAL_GPIO_WritePin>
 800736a:	e00b      	b.n	8007384 <checkDemoModCalisma+0x1828>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007372:	4837      	ldr	r0, [pc, #220]	@ (8007450 <checkDemoModCalisma+0x18f4>)
 8007374:	f004 fc05 	bl	800bb82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007378:	2200      	movs	r2, #0
 800737a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800737e:	4834      	ldr	r0, [pc, #208]	@ (8007450 <checkDemoModCalisma+0x18f4>)
 8007380:	f004 fbff 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007384:	2102      	movs	r1, #2
 8007386:	482e      	ldr	r0, [pc, #184]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 8007388:	f004 fbe4 	bl	800bb54 <HAL_GPIO_ReadPin>
 800738c:	4603      	mov	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d10d      	bne.n	80073ae <checkDemoModCalisma+0x1852>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007396:	482a      	ldr	r0, [pc, #168]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 8007398:	f004 fbdc 	bl	800bb54 <HAL_GPIO_ReadPin>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <checkDemoModCalisma+0x1852>
						&& (demoYukariCalis==0)
 80073a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007454 <checkDemoModCalisma+0x18f8>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f083 0301 	eor.w	r3, r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073ae:	2102      	movs	r1, #2
 80073b0:	4823      	ldr	r0, [pc, #140]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 80073b2:	f004 fbcf 	bl	800bb54 <HAL_GPIO_ReadPin>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d14d      	bne.n	8007458 <checkDemoModCalisma+0x18fc>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80073bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073c0:	481f      	ldr	r0, [pc, #124]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 80073c2:	f004 fbc7 	bl	800bb54 <HAL_GPIO_ReadPin>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d145      	bne.n	8007458 <checkDemoModCalisma+0x18fc>
						&&(demoYukariCalis==0)
 80073cc:	4b21      	ldr	r3, [pc, #132]	@ (8007454 <checkDemoModCalisma+0x18f8>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f083 0301 	eor.w	r3, r3, #1
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d03e      	beq.n	8007458 <checkDemoModCalisma+0x18fc>
						&&(demoAsagiCalis==0)
 80073da:	4b1a      	ldr	r3, [pc, #104]	@ (8007444 <checkDemoModCalisma+0x18e8>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f083 0301 	eor.w	r3, r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d037      	beq.n	8007458 <checkDemoModCalisma+0x18fc>
						&& (demoDevAsagi==0)) {
 80073e8:	4b18      	ldr	r3, [pc, #96]	@ (800744c <checkDemoModCalisma+0x18f0>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f083 0301 	eor.w	r3, r3, #1
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d030      	beq.n	8007458 <checkDemoModCalisma+0x18fc>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80073f6:	2201      	movs	r2, #1
 80073f8:	2120      	movs	r1, #32
 80073fa:	4811      	ldr	r0, [pc, #68]	@ (8007440 <checkDemoModCalisma+0x18e4>)
 80073fc:	f004 fbc1 	bl	800bb82 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8007400:	4b11      	ldr	r3, [pc, #68]	@ (8007448 <checkDemoModCalisma+0x18ec>)
 8007402:	2201      	movs	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e02f      	b.n	8007468 <checkDemoModCalisma+0x190c>
 8007408:	20001426 	.word	0x20001426
 800740c:	200013a0 	.word	0x200013a0
 8007410:	200013b4 	.word	0x200013b4
 8007414:	20001425 	.word	0x20001425
 8007418:	20001420 	.word	0x20001420
 800741c:	20001421 	.word	0x20001421
 8007420:	2000142e 	.word	0x2000142e
 8007424:	2000142f 	.word	0x2000142f
 8007428:	20001430 	.word	0x20001430
 800742c:	2000141f 	.word	0x2000141f
 8007430:	20001434 	.word	0x20001434
 8007434:	200013ee 	.word	0x200013ee
 8007438:	20001422 	.word	0x20001422
 800743c:	200013ed 	.word	0x200013ed
 8007440:	40011000 	.word	0x40011000
 8007444:	20001429 	.word	0x20001429
 8007448:	2000142a 	.word	0x2000142a
 800744c:	2000142b 	.word	0x2000142b
 8007450:	40010c00 	.word	0x40010c00
 8007454:	20001428 	.word	0x20001428
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007458:	2200      	movs	r2, #0
 800745a:	2120      	movs	r1, #32
 800745c:	489d      	ldr	r0, [pc, #628]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 800745e:	f004 fb90 	bl	800bb82 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8007462:	4b9d      	ldr	r3, [pc, #628]	@ (80076d8 <checkDemoModCalisma+0x1b7c>)
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007468:	2102      	movs	r1, #2
 800746a:	489a      	ldr	r0, [pc, #616]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 800746c:	f004 fb72 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007470:	4603      	mov	r3, r0
 8007472:	2b01      	cmp	r3, #1
 8007474:	d125      	bne.n	80074c2 <checkDemoModCalisma+0x1966>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007476:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800747a:	4896      	ldr	r0, [pc, #600]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 800747c:	f004 fb6a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d11d      	bne.n	80074c2 <checkDemoModCalisma+0x1966>
						&&(demoYukariCalis==0)
 8007486:	4b95      	ldr	r3, [pc, #596]	@ (80076dc <checkDemoModCalisma+0x1b80>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f083 0301 	eor.w	r3, r3, #1
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d016      	beq.n	80074c2 <checkDemoModCalisma+0x1966>
						&&(demoDevYukari==0)
 8007494:	4b90      	ldr	r3, [pc, #576]	@ (80076d8 <checkDemoModCalisma+0x1b7c>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f083 0301 	eor.w	r3, r3, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <checkDemoModCalisma+0x1966>
						&& (demoAsagiCalis==0)) {
 80074a2:	4b8f      	ldr	r3, [pc, #572]	@ (80076e0 <checkDemoModCalisma+0x1b84>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f083 0301 	eor.w	r3, r3, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <checkDemoModCalisma+0x1966>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80074b0:	2201      	movs	r2, #1
 80074b2:	2110      	movs	r1, #16
 80074b4:	4887      	ldr	r0, [pc, #540]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 80074b6:	f004 fb64 	bl	800bb82 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 80074ba:	4b8a      	ldr	r3, [pc, #552]	@ (80076e4 <checkDemoModCalisma+0x1b88>)
 80074bc:	2201      	movs	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e007      	b.n	80074d2 <checkDemoModCalisma+0x1976>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80074c2:	2200      	movs	r2, #0
 80074c4:	2110      	movs	r1, #16
 80074c6:	4883      	ldr	r0, [pc, #524]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 80074c8:	f004 fb5b 	bl	800bb82 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 80074cc:	4b85      	ldr	r3, [pc, #532]	@ (80076e4 <checkDemoModCalisma+0x1b88>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80074d2:	2104      	movs	r1, #4
 80074d4:	487f      	ldr	r0, [pc, #508]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 80074d6:	f004 fb3d 	bl	800bb54 <HAL_GPIO_ReadPin>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d125      	bne.n	800752c <checkDemoModCalisma+0x19d0>
						&& (demoYukariCalis==0)
 80074e0:	4b7e      	ldr	r3, [pc, #504]	@ (80076dc <checkDemoModCalisma+0x1b80>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f083 0301 	eor.w	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01e      	beq.n	800752c <checkDemoModCalisma+0x19d0>
						&& (demoDevAsagi==0)
 80074ee:	4b7d      	ldr	r3, [pc, #500]	@ (80076e4 <checkDemoModCalisma+0x1b88>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f083 0301 	eor.w	r3, r3, #1
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d017      	beq.n	800752c <checkDemoModCalisma+0x19d0>
						&& (demoDevYukari==0)) {
 80074fc:	4b76      	ldr	r3, [pc, #472]	@ (80076d8 <checkDemoModCalisma+0x1b7c>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	f083 0301 	eor.w	r3, r3, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d010      	beq.n	800752c <checkDemoModCalisma+0x19d0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800750a:	2201      	movs	r2, #1
 800750c:	2102      	movs	r1, #2
 800750e:	4876      	ldr	r0, [pc, #472]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 8007510:	f004 fb37 	bl	800bb82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007514:	2201      	movs	r2, #1
 8007516:	2101      	movs	r1, #1
 8007518:	4873      	ldr	r0, [pc, #460]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 800751a:	f004 fb32 	bl	800bb82 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 800751e:	4b70      	ldr	r3, [pc, #448]	@ (80076e0 <checkDemoModCalisma+0x1b84>)
 8007520:	2201      	movs	r2, #1
 8007522:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8007524:	4b71      	ldr	r3, [pc, #452]	@ (80076ec <checkDemoModCalisma+0x1b90>)
 8007526:	2201      	movs	r2, #1
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	e013      	b.n	8007554 <checkDemoModCalisma+0x19f8>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800752c:	2104      	movs	r1, #4
 800752e:	4869      	ldr	r0, [pc, #420]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 8007530:	f004 fb10 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007534:	4603      	mov	r3, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10c      	bne.n	8007554 <checkDemoModCalisma+0x19f8>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800753a:	2200      	movs	r2, #0
 800753c:	2102      	movs	r1, #2
 800753e:	486a      	ldr	r0, [pc, #424]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 8007540:	f004 fb1f 	bl	800bb82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007544:	2200      	movs	r2, #0
 8007546:	2101      	movs	r1, #1
 8007548:	4867      	ldr	r0, [pc, #412]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 800754a:	f004 fb1a 	bl	800bb82 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 800754e:	4b64      	ldr	r3, [pc, #400]	@ (80076e0 <checkDemoModCalisma+0x1b84>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007554:	2104      	movs	r1, #4
 8007556:	485f      	ldr	r0, [pc, #380]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 8007558:	f004 fafc 	bl	800bb54 <HAL_GPIO_ReadPin>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10d      	bne.n	800757e <checkDemoModCalisma+0x1a22>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007562:	2201      	movs	r2, #1
 8007564:	2180      	movs	r1, #128	@ 0x80
 8007566:	4862      	ldr	r0, [pc, #392]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 8007568:	f004 fb0b 	bl	800bb82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800756c:	2201      	movs	r2, #1
 800756e:	2120      	movs	r1, #32
 8007570:	485f      	ldr	r0, [pc, #380]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 8007572:	f004 fb06 	bl	800bb82 <HAL_GPIO_WritePin>
					timer3 = millis;
 8007576:	4b5f      	ldr	r3, [pc, #380]	@ (80076f4 <checkDemoModCalisma+0x1b98>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a5f      	ldr	r2, [pc, #380]	@ (80076f8 <checkDemoModCalisma+0x1b9c>)
 800757c:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800757e:	4b5d      	ldr	r3, [pc, #372]	@ (80076f4 <checkDemoModCalisma+0x1b98>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b5d      	ldr	r3, [pc, #372]	@ (80076f8 <checkDemoModCalisma+0x1b9c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b04      	cmp	r3, #4
 800758a:	d909      	bls.n	80075a0 <checkDemoModCalisma+0x1a44>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800758c:	2200      	movs	r2, #0
 800758e:	2180      	movs	r1, #128	@ 0x80
 8007590:	4857      	ldr	r0, [pc, #348]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 8007592:	f004 faf6 	bl	800bb82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007596:	2200      	movs	r2, #0
 8007598:	2120      	movs	r1, #32
 800759a:	4855      	ldr	r0, [pc, #340]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 800759c:	f004 faf1 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80075a0:	2102      	movs	r1, #2
 80075a2:	484c      	ldr	r0, [pc, #304]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 80075a4:	f004 fad6 	bl	800bb54 <HAL_GPIO_ReadPin>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d108      	bne.n	80075c0 <checkDemoModCalisma+0x1a64>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80075ae:	2201      	movs	r2, #1
 80075b0:	2140      	movs	r1, #64	@ 0x40
 80075b2:	484f      	ldr	r0, [pc, #316]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 80075b4:	f004 fae5 	bl	800bb82 <HAL_GPIO_WritePin>
					timer3 = millis;
 80075b8:	4b4e      	ldr	r3, [pc, #312]	@ (80076f4 <checkDemoModCalisma+0x1b98>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a4e      	ldr	r2, [pc, #312]	@ (80076f8 <checkDemoModCalisma+0x1b9c>)
 80075be:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 80075c0:	4b4c      	ldr	r3, [pc, #304]	@ (80076f4 <checkDemoModCalisma+0x1b98>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4b4c      	ldr	r3, [pc, #304]	@ (80076f8 <checkDemoModCalisma+0x1b9c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d904      	bls.n	80075d8 <checkDemoModCalisma+0x1a7c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80075ce:	2200      	movs	r2, #0
 80075d0:	2140      	movs	r1, #64	@ 0x40
 80075d2:	4847      	ldr	r0, [pc, #284]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 80075d4:	f004 fad5 	bl	800bb82 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80075d8:	4b40      	ldr	r3, [pc, #256]	@ (80076dc <checkDemoModCalisma+0x1b80>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d018      	beq.n	8007612 <checkDemoModCalisma+0x1ab6>
 80075e0:	4b42      	ldr	r3, [pc, #264]	@ (80076ec <checkDemoModCalisma+0x1b90>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d014      	beq.n	8007612 <checkDemoModCalisma+0x1ab6>

					calismaSayisiDemo++;
 80075e8:	4b44      	ldr	r3, [pc, #272]	@ (80076fc <checkDemoModCalisma+0x1ba0>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	1c54      	adds	r4, r2, #1
 80075f0:	f143 0500 	adc.w	r5, r3, #0
 80075f4:	4b41      	ldr	r3, [pc, #260]	@ (80076fc <checkDemoModCalisma+0x1ba0>)
 80075f6:	e9c3 4500 	strd	r4, r5, [r3]
					eepromData[28]=calismaSayisiDemo;
 80075fa:	4b40      	ldr	r3, [pc, #256]	@ (80076fc <checkDemoModCalisma+0x1ba0>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	493f      	ldr	r1, [pc, #252]	@ (8007700 <checkDemoModCalisma+0x1ba4>)
 8007602:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0

					hafizaYaz=1;
 8007606:	4b3f      	ldr	r3, [pc, #252]	@ (8007704 <checkDemoModCalisma+0x1ba8>)
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 800760c:	4b37      	ldr	r3, [pc, #220]	@ (80076ec <checkDemoModCalisma+0x1b90>)
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8007612:	4b3d      	ldr	r3, [pc, #244]	@ (8007708 <checkDemoModCalisma+0x1bac>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d158      	bne.n	80076cc <checkDemoModCalisma+0x1b70>
					lcd_print(2,1,"Cycle     ");
 800761a:	4a3c      	ldr	r2, [pc, #240]	@ (800770c <checkDemoModCalisma+0x1bb0>)
 800761c:	2101      	movs	r1, #1
 800761e:	2002      	movs	r0, #2
 8007620:	f002 ff6e 	bl	800a500 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8007624:	4a3a      	ldr	r2, [pc, #232]	@ (8007710 <checkDemoModCalisma+0x1bb4>)
 8007626:	2101      	movs	r1, #1
 8007628:	2001      	movs	r0, #1
 800762a:	f002 ff69 	bl	800a500 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 800762e:	4b33      	ldr	r3, [pc, #204]	@ (80076fc <checkDemoModCalisma+0x1ba0>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	4613      	mov	r3, r2
 8007636:	220a      	movs	r2, #10
 8007638:	4936      	ldr	r1, [pc, #216]	@ (8007714 <checkDemoModCalisma+0x1bb8>)
 800763a:	4618      	mov	r0, r3
 800763c:	f007 fab6 	bl	800ebac <itoa>
					lcd_print(2,11,snum);
 8007640:	4a34      	ldr	r2, [pc, #208]	@ (8007714 <checkDemoModCalisma+0x1bb8>)
 8007642:	210b      	movs	r1, #11
 8007644:	2002      	movs	r0, #2
 8007646:	f002 ff5b 	bl	800a500 <lcd_print>
					mesajYazildi=1;
 800764a:	4b33      	ldr	r3, [pc, #204]	@ (8007718 <checkDemoModCalisma+0x1bbc>)
 800764c:	2201      	movs	r2, #1
 800764e:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8007650:	e03c      	b.n	80076cc <checkDemoModCalisma+0x1b70>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8007652:	4b32      	ldr	r3, [pc, #200]	@ (800771c <checkDemoModCalisma+0x1bc0>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d003      	beq.n	8007662 <checkDemoModCalisma+0x1b06>
 800765a:	4b2b      	ldr	r3, [pc, #172]	@ (8007708 <checkDemoModCalisma+0x1bac>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d134      	bne.n	80076cc <checkDemoModCalisma+0x1b70>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007662:	2200      	movs	r2, #0
 8007664:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007668:	481f      	ldr	r0, [pc, #124]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 800766a:	f004 fa8a 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800766e:	2200      	movs	r2, #0
 8007670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007674:	481c      	ldr	r0, [pc, #112]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 8007676:	f004 fa84 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800767a:	2200      	movs	r2, #0
 800767c:	2104      	movs	r1, #4
 800767e:	481a      	ldr	r0, [pc, #104]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 8007680:	f004 fa7f 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007684:	2200      	movs	r2, #0
 8007686:	2102      	movs	r1, #2
 8007688:	4817      	ldr	r0, [pc, #92]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 800768a:	f004 fa7a 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800768e:	2200      	movs	r2, #0
 8007690:	2101      	movs	r1, #1
 8007692:	4815      	ldr	r0, [pc, #84]	@ (80076e8 <checkDemoModCalisma+0x1b8c>)
 8007694:	f004 fa75 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007698:	2200      	movs	r2, #0
 800769a:	2120      	movs	r1, #32
 800769c:	480d      	ldr	r0, [pc, #52]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 800769e:	f004 fa70 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2110      	movs	r1, #16
 80076a6:	480b      	ldr	r0, [pc, #44]	@ (80076d4 <checkDemoModCalisma+0x1b78>)
 80076a8:	f004 fa6b 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2180      	movs	r1, #128	@ 0x80
 80076b0:	480f      	ldr	r0, [pc, #60]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 80076b2:	f004 fa66 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80076b6:	2200      	movs	r2, #0
 80076b8:	2140      	movs	r1, #64	@ 0x40
 80076ba:	480d      	ldr	r0, [pc, #52]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 80076bc:	f004 fa61 	bl	800bb82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80076c0:	2200      	movs	r2, #0
 80076c2:	2120      	movs	r1, #32
 80076c4:	480a      	ldr	r0, [pc, #40]	@ (80076f0 <checkDemoModCalisma+0x1b94>)
 80076c6:	f004 fa5c 	bl	800bb82 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 80076ca:	e7ff      	b.n	80076cc <checkDemoModCalisma+0x1b70>
 80076cc:	bf00      	nop
 80076ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80076d2:	bf00      	nop
 80076d4:	40011000 	.word	0x40011000
 80076d8:	2000142a 	.word	0x2000142a
 80076dc:	20001428 	.word	0x20001428
 80076e0:	20001429 	.word	0x20001429
 80076e4:	2000142b 	.word	0x2000142b
 80076e8:	40010c00 	.word	0x40010c00
 80076ec:	2000140e 	.word	0x2000140e
 80076f0:	40010800 	.word	0x40010800
 80076f4:	200013a0 	.word	0x200013a0
 80076f8:	200013b0 	.word	0x200013b0
 80076fc:	200013c8 	.word	0x200013c8
 8007700:	20000ff0 	.word	0x20000ff0
 8007704:	200013fc 	.word	0x200013fc
 8007708:	200013ed 	.word	0x200013ed
 800770c:	0800f8d0 	.word	0x0800f8d0
 8007710:	0800f8dc 	.word	0x0800f8dc
 8007714:	20001360 	.word	0x20001360
 8007718:	20001404 	.word	0x20001404
 800771c:	200013ee 	.word	0x200013ee

08007720 <mainLoop>:

void mainLoop() {
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007726:	f7fc fcab 	bl	8004080 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800772a:	2101      	movs	r1, #1
 800772c:	489e      	ldr	r0, [pc, #632]	@ (80079a8 <mainLoop+0x288>)
 800772e:	f004 fa11 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d136      	bne.n	80077a6 <mainLoop+0x86>
 8007738:	2108      	movs	r1, #8
 800773a:	489c      	ldr	r0, [pc, #624]	@ (80079ac <mainLoop+0x28c>)
 800773c:	f004 fa0a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d12f      	bne.n	80077a6 <mainLoop+0x86>
 8007746:	2102      	movs	r1, #2
 8007748:	4897      	ldr	r0, [pc, #604]	@ (80079a8 <mainLoop+0x288>)
 800774a:	f004 fa03 	bl	800bb54 <HAL_GPIO_ReadPin>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d128      	bne.n	80077a6 <mainLoop+0x86>
 8007754:	2104      	movs	r1, #4
 8007756:	4894      	ldr	r0, [pc, #592]	@ (80079a8 <mainLoop+0x288>)
 8007758:	f004 f9fc 	bl	800bb54 <HAL_GPIO_ReadPin>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d121      	bne.n	80077a6 <mainLoop+0x86>
 8007762:	2108      	movs	r1, #8
 8007764:	4890      	ldr	r0, [pc, #576]	@ (80079a8 <mainLoop+0x288>)
 8007766:	f004 f9f5 	bl	800bb54 <HAL_GPIO_ReadPin>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11a      	bne.n	80077a6 <mainLoop+0x86>
 8007770:	2180      	movs	r1, #128	@ 0x80
 8007772:	488e      	ldr	r0, [pc, #568]	@ (80079ac <mainLoop+0x28c>)
 8007774:	f004 f9ee 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d113      	bne.n	80077a6 <mainLoop+0x86>
 800777e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007782:	488a      	ldr	r0, [pc, #552]	@ (80079ac <mainLoop+0x28c>)
 8007784:	f004 f9e6 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10b      	bne.n	80077a6 <mainLoop+0x86>
 800778e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007792:	4886      	ldr	r0, [pc, #536]	@ (80079ac <mainLoop+0x28c>)
 8007794:	f004 f9de 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007798:	4603      	mov	r3, r0
 800779a:	2b01      	cmp	r3, #1
 800779c:	d103      	bne.n	80077a6 <mainLoop+0x86>
			butonKontrol=0;
 800779e:	4b84      	ldr	r3, [pc, #528]	@ (80079b0 <mainLoop+0x290>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e003      	b.n	80077ae <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80077a6:	4b83      	ldr	r3, [pc, #524]	@ (80079b4 <mainLoop+0x294>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a83      	ldr	r2, [pc, #524]	@ (80079b8 <mainLoop+0x298>)
 80077ac:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 80077ae:	f7fc fd19 	bl	80041e4 <buttonCheck>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d103      	bne.n	80077c0 <mainLoop+0xa0>
			backLightTimer = millis;
 80077b8:	4b7e      	ldr	r3, [pc, #504]	@ (80079b4 <mainLoop+0x294>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a7e      	ldr	r2, [pc, #504]	@ (80079b8 <mainLoop+0x298>)
 80077be:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80077c0:	4b7e      	ldr	r3, [pc, #504]	@ (80079bc <mainLoop+0x29c>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02c      	beq.n	8007822 <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80077c8:	bf00      	nop
 80077ca:	487d      	ldr	r0, [pc, #500]	@ (80079c0 <mainLoop+0x2a0>)
 80077cc:	f004 ffeb 	bl	800c7a6 <HAL_I2C_GetError>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d0f9      	beq.n	80077ca <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077d6:	bf00      	nop
 80077d8:	4879      	ldr	r0, [pc, #484]	@ (80079c0 <mainLoop+0x2a0>)
 80077da:	f004 ffd7 	bl	800c78c <HAL_I2C_GetState>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d1f9      	bne.n	80077d8 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80077e4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80077e8:	9302      	str	r3, [sp, #8]
 80077ea:	236e      	movs	r3, #110	@ 0x6e
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	4b75      	ldr	r3, [pc, #468]	@ (80079c4 <mainLoop+0x2a4>)
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	236e      	movs	r3, #110	@ 0x6e
 80077f4:	2200      	movs	r2, #0
 80077f6:	21a0      	movs	r1, #160	@ 0xa0
 80077f8:	4871      	ldr	r0, [pc, #452]	@ (80079c0 <mainLoop+0x2a0>)
 80077fa:	f004 fc65 	bl	800c0c8 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80077fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007802:	f003 fbd7 	bl	800afb4 <HAL_Delay>

		  hafizaYaz=0;
 8007806:	4b6d      	ldr	r3, [pc, #436]	@ (80079bc <mainLoop+0x29c>)
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 800780c:	4a6e      	ldr	r2, [pc, #440]	@ (80079c8 <mainLoop+0x2a8>)
 800780e:	2101      	movs	r1, #1
 8007810:	2002      	movs	r0, #2
 8007812:	f002 fe75 	bl	800a500 <lcd_print>

		  HAL_Delay(1000);
 8007816:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800781a:	f003 fbcb 	bl	800afb4 <HAL_Delay>
		  lcd_clear();
 800781e:	f002 fe9b 	bl	800a558 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007822:	4b6a      	ldr	r3, [pc, #424]	@ (80079cc <mainLoop+0x2ac>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f083 0301 	eor.w	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d043      	beq.n	80078b8 <mainLoop+0x198>
 8007830:	4863      	ldr	r0, [pc, #396]	@ (80079c0 <mainLoop+0x2a0>)
 8007832:	f004 ffab 	bl	800c78c <HAL_I2C_GetState>
 8007836:	4603      	mov	r3, r0
 8007838:	2b20      	cmp	r3, #32
 800783a:	d13d      	bne.n	80078b8 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 800783c:	4b64      	ldr	r3, [pc, #400]	@ (80079d0 <mainLoop+0x2b0>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f083 0301 	eor.w	r3, r3, #1
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d028      	beq.n	800789c <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 800784a:	4a62      	ldr	r2, [pc, #392]	@ (80079d4 <mainLoop+0x2b4>)
 800784c:	2101      	movs	r1, #1
 800784e:	2001      	movs	r0, #1
 8007850:	f002 fe56 	bl	800a500 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8007854:	4a60      	ldr	r2, [pc, #384]	@ (80079d8 <mainLoop+0x2b8>)
 8007856:	2101      	movs	r1, #1
 8007858:	2002      	movs	r0, #2
 800785a:	f002 fe51 	bl	800a500 <lcd_print>
			  HAL_Delay(1000);
 800785e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007862:	f003 fba7 	bl	800afb4 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007866:	bf00      	nop
 8007868:	4855      	ldr	r0, [pc, #340]	@ (80079c0 <mainLoop+0x2a0>)
 800786a:	f004 ff9c 	bl	800c7a6 <HAL_I2C_GetError>
 800786e:	4603      	mov	r3, r0
 8007870:	2b04      	cmp	r3, #4
 8007872:	d0f9      	beq.n	8007868 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007874:	e003      	b.n	800787e <mainLoop+0x15e>
				  HAL_Delay(1000);
 8007876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800787a:	f003 fb9b 	bl	800afb4 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800787e:	4850      	ldr	r0, [pc, #320]	@ (80079c0 <mainLoop+0x2a0>)
 8007880:	f004 ff84 	bl	800c78c <HAL_I2C_GetState>
 8007884:	4603      	mov	r3, r0
 8007886:	2b20      	cmp	r3, #32
 8007888:	d1f5      	bne.n	8007876 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 800788a:	4a54      	ldr	r2, [pc, #336]	@ (80079dc <mainLoop+0x2bc>)
 800788c:	2101      	movs	r1, #1
 800788e:	2002      	movs	r0, #2
 8007890:	f002 fe36 	bl	800a500 <lcd_print>

			  ilkOkuma=1;
 8007894:	4b4e      	ldr	r3, [pc, #312]	@ (80079d0 <mainLoop+0x2b0>)
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e006      	b.n	80078aa <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 800789c:	4a50      	ldr	r2, [pc, #320]	@ (80079e0 <mainLoop+0x2c0>)
 800789e:	2101      	movs	r1, #1
 80078a0:	2002      	movs	r0, #2
 80078a2:	f002 fe2d 	bl	800a500 <lcd_print>
			  lcd_clear();
 80078a6:	f002 fe57 	bl	800a558 <lcd_clear>
		  }

		  lcd_clear();
 80078aa:	f002 fe55 	bl	800a558 <lcd_clear>

		  eepromKontrol();
 80078ae:	f7f8 fcc1 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80078b2:	4b46      	ldr	r3, [pc, #280]	@ (80079cc <mainLoop+0x2ac>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80078b8:	4b4a      	ldr	r3, [pc, #296]	@ (80079e4 <mainLoop+0x2c4>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11c      	bne.n	80078fa <mainLoop+0x1da>
 80078c0:	4b49      	ldr	r3, [pc, #292]	@ (80079e8 <mainLoop+0x2c8>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	f083 0301 	eor.w	r3, r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d015      	beq.n	80078fa <mainLoop+0x1da>
 80078ce:	4b47      	ldr	r3, [pc, #284]	@ (80079ec <mainLoop+0x2cc>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d111      	bne.n	80078fa <mainLoop+0x1da>
			lcd_clear();
 80078d6:	f002 fe3f 	bl	800a558 <lcd_clear>
			HAL_Delay(10);
 80078da:	200a      	movs	r0, #10
 80078dc:	f003 fb6a 	bl	800afb4 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 80078e0:	4a43      	ldr	r2, [pc, #268]	@ (80079f0 <mainLoop+0x2d0>)
 80078e2:	2101      	movs	r1, #1
 80078e4:	2001      	movs	r0, #1
 80078e6:	f002 fe0b 	bl	800a500 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 80078ea:	4a42      	ldr	r2, [pc, #264]	@ (80079f4 <mainLoop+0x2d4>)
 80078ec:	2101      	movs	r1, #1
 80078ee:	2002      	movs	r0, #2
 80078f0:	f002 fe06 	bl	800a500 <lcd_print>
			mesajYazildi=1;
 80078f4:	4b3c      	ldr	r3, [pc, #240]	@ (80079e8 <mainLoop+0x2c8>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80078fa:	4b3a      	ldr	r3, [pc, #232]	@ (80079e4 <mainLoop+0x2c4>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d112      	bne.n	8007928 <mainLoop+0x208>
 8007902:	2102      	movs	r1, #2
 8007904:	4828      	ldr	r0, [pc, #160]	@ (80079a8 <mainLoop+0x288>)
 8007906:	f004 f925 	bl	800bb54 <HAL_GPIO_ReadPin>
 800790a:	4603      	mov	r3, r0
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10b      	bne.n	8007928 <mainLoop+0x208>
 8007910:	2104      	movs	r1, #4
 8007912:	4825      	ldr	r0, [pc, #148]	@ (80079a8 <mainLoop+0x288>)
 8007914:	f004 f91e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d104      	bne.n	8007928 <mainLoop+0x208>
			menuGiris=1;
 800791e:	4b31      	ldr	r3, [pc, #196]	@ (80079e4 <mainLoop+0x2c4>)
 8007920:	2201      	movs	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007924:	f002 fe18 	bl	800a558 <lcd_clear>
		}

		if(menuGiris==1) {
 8007928:	4b2e      	ldr	r3, [pc, #184]	@ (80079e4 <mainLoop+0x2c4>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <mainLoop+0x214>
			menu();
 8007930:	f7f9 fd98 	bl	8001464 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007934:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007938:	481c      	ldr	r0, [pc, #112]	@ (80079ac <mainLoop+0x28c>)
 800793a:	f004 f93a 	bl	800bbb2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800793e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007942:	482d      	ldr	r0, [pc, #180]	@ (80079f8 <mainLoop+0x2d8>)
 8007944:	f004 f906 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <mainLoop+0x244>
 800794e:	4b2b      	ldr	r3, [pc, #172]	@ (80079fc <mainLoop+0x2dc>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f083 0301 	eor.w	r3, r3, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <mainLoop+0x244>
			stopVar=1;
 800795c:	4b28      	ldr	r3, [pc, #160]	@ (8007a00 <mainLoop+0x2e0>)
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	e002      	b.n	800796a <mainLoop+0x24a>
		} else {
			stopVar=0;
 8007964:	4b26      	ldr	r3, [pc, #152]	@ (8007a00 <mainLoop+0x2e0>)
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 800796a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800796e:	4822      	ldr	r0, [pc, #136]	@ (80079f8 <mainLoop+0x2d8>)
 8007970:	f004 f8f0 	bl	800bb54 <HAL_GPIO_ReadPin>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d107      	bne.n	800798a <mainLoop+0x26a>
 800797a:	4b22      	ldr	r3, [pc, #136]	@ (8007a04 <mainLoop+0x2e4>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <mainLoop+0x26a>
			EmnStopVar=1;
 8007982:	4b21      	ldr	r3, [pc, #132]	@ (8007a08 <mainLoop+0x2e8>)
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e002      	b.n	8007990 <mainLoop+0x270>
		} else {
			EmnStopVar=0;
 800798a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a08 <mainLoop+0x2e8>)
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007990:	f7fc fc5c 	bl	800424c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007994:	f7fc fc8e 	bl	80042b4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007998:	f7fc fcd2 	bl	8004340 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800799c:	f7fc fd22 	bl	80043e4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80079a0:	f7fe f8dc 	bl	8005b5c <checkDemoModCalisma>
		checkLCDBacklight();
 80079a4:	e6bf      	b.n	8007726 <mainLoop+0x6>
 80079a6:	bf00      	nop
 80079a8:	40010800 	.word	0x40010800
 80079ac:	40011000 	.word	0x40011000
 80079b0:	200013ff 	.word	0x200013ff
 80079b4:	200013a0 	.word	0x200013a0
 80079b8:	200013bc 	.word	0x200013bc
 80079bc:	200013fc 	.word	0x200013fc
 80079c0:	20001c50 	.word	0x20001c50
 80079c4:	20000ff0 	.word	0x20000ff0
 80079c8:	20001b74 	.word	0x20001b74
 80079cc:	200013fd 	.word	0x200013fd
 80079d0:	200013fe 	.word	0x200013fe
 80079d4:	20000178 	.word	0x20000178
 80079d8:	20001b88 	.word	0x20001b88
 80079dc:	20001b9c 	.word	0x20001b9c
 80079e0:	20001bb0 	.word	0x20001bb0
 80079e4:	200013ed 	.word	0x200013ed
 80079e8:	20001404 	.word	0x20001404
 80079ec:	200013ee 	.word	0x200013ee
 80079f0:	200000c4 	.word	0x200000c4
 80079f4:	200000d8 	.word	0x200000d8
 80079f8:	40010c00 	.word	0x40010c00
 80079fc:	20001425 	.word	0x20001425
 8007a00:	20001422 	.word	0x20001422
 8007a04:	20001434 	.word	0x20001434
 8007a08:	20001435 	.word	0x20001435

08007a0c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8007a0c:	b5b0      	push	{r4, r5, r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 853d 	bne.w	8008498 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8007a1e:	4ac7      	ldr	r2, [pc, #796]	@ (8007d3c <loadMenuTexts+0x330>)
 8007a20:	4bc7      	ldr	r3, [pc, #796]	@ (8007d40 <loadMenuTexts+0x334>)
 8007a22:	4614      	mov	r4, r2
 8007a24:	461d      	mov	r5, r3
 8007a26:	6828      	ldr	r0, [r5, #0]
 8007a28:	6869      	ldr	r1, [r5, #4]
 8007a2a:	68aa      	ldr	r2, [r5, #8]
 8007a2c:	68eb      	ldr	r3, [r5, #12]
 8007a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a30:	7c2b      	ldrb	r3, [r5, #16]
 8007a32:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8007a34:	4ac3      	ldr	r2, [pc, #780]	@ (8007d44 <loadMenuTexts+0x338>)
 8007a36:	4bc4      	ldr	r3, [pc, #784]	@ (8007d48 <loadMenuTexts+0x33c>)
 8007a38:	4614      	mov	r4, r2
 8007a3a:	461d      	mov	r5, r3
 8007a3c:	6828      	ldr	r0, [r5, #0]
 8007a3e:	6869      	ldr	r1, [r5, #4]
 8007a40:	68aa      	ldr	r2, [r5, #8]
 8007a42:	68eb      	ldr	r3, [r5, #12]
 8007a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a46:	7c2b      	ldrb	r3, [r5, #16]
 8007a48:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8007a4a:	4ac0      	ldr	r2, [pc, #768]	@ (8007d4c <loadMenuTexts+0x340>)
 8007a4c:	4bc0      	ldr	r3, [pc, #768]	@ (8007d50 <loadMenuTexts+0x344>)
 8007a4e:	4614      	mov	r4, r2
 8007a50:	461d      	mov	r5, r3
 8007a52:	6828      	ldr	r0, [r5, #0]
 8007a54:	6869      	ldr	r1, [r5, #4]
 8007a56:	68aa      	ldr	r2, [r5, #8]
 8007a58:	68eb      	ldr	r3, [r5, #12]
 8007a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a5c:	7c2b      	ldrb	r3, [r5, #16]
 8007a5e:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8007a60:	4abc      	ldr	r2, [pc, #752]	@ (8007d54 <loadMenuTexts+0x348>)
 8007a62:	4bbd      	ldr	r3, [pc, #756]	@ (8007d58 <loadMenuTexts+0x34c>)
 8007a64:	4614      	mov	r4, r2
 8007a66:	461d      	mov	r5, r3
 8007a68:	6828      	ldr	r0, [r5, #0]
 8007a6a:	6869      	ldr	r1, [r5, #4]
 8007a6c:	68aa      	ldr	r2, [r5, #8]
 8007a6e:	68eb      	ldr	r3, [r5, #12]
 8007a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a72:	7c2b      	ldrb	r3, [r5, #16]
 8007a74:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8007a76:	4ab9      	ldr	r2, [pc, #740]	@ (8007d5c <loadMenuTexts+0x350>)
 8007a78:	4bb9      	ldr	r3, [pc, #740]	@ (8007d60 <loadMenuTexts+0x354>)
 8007a7a:	4614      	mov	r4, r2
 8007a7c:	461d      	mov	r5, r3
 8007a7e:	6828      	ldr	r0, [r5, #0]
 8007a80:	6869      	ldr	r1, [r5, #4]
 8007a82:	68aa      	ldr	r2, [r5, #8]
 8007a84:	68eb      	ldr	r3, [r5, #12]
 8007a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a88:	7c2b      	ldrb	r3, [r5, #16]
 8007a8a:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8007a8c:	4ab5      	ldr	r2, [pc, #724]	@ (8007d64 <loadMenuTexts+0x358>)
 8007a8e:	4bb6      	ldr	r3, [pc, #728]	@ (8007d68 <loadMenuTexts+0x35c>)
 8007a90:	4614      	mov	r4, r2
 8007a92:	461d      	mov	r5, r3
 8007a94:	6828      	ldr	r0, [r5, #0]
 8007a96:	6869      	ldr	r1, [r5, #4]
 8007a98:	68aa      	ldr	r2, [r5, #8]
 8007a9a:	68eb      	ldr	r3, [r5, #12]
 8007a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a9e:	7c2b      	ldrb	r3, [r5, #16]
 8007aa0:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8007aa2:	4ab2      	ldr	r2, [pc, #712]	@ (8007d6c <loadMenuTexts+0x360>)
 8007aa4:	4bb2      	ldr	r3, [pc, #712]	@ (8007d70 <loadMenuTexts+0x364>)
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	6828      	ldr	r0, [r5, #0]
 8007aac:	6869      	ldr	r1, [r5, #4]
 8007aae:	68aa      	ldr	r2, [r5, #8]
 8007ab0:	68eb      	ldr	r3, [r5, #12]
 8007ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ab4:	7c2b      	ldrb	r3, [r5, #16]
 8007ab6:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007ab8:	4aae      	ldr	r2, [pc, #696]	@ (8007d74 <loadMenuTexts+0x368>)
 8007aba:	4baf      	ldr	r3, [pc, #700]	@ (8007d78 <loadMenuTexts+0x36c>)
 8007abc:	4614      	mov	r4, r2
 8007abe:	461d      	mov	r5, r3
 8007ac0:	6828      	ldr	r0, [r5, #0]
 8007ac2:	6869      	ldr	r1, [r5, #4]
 8007ac4:	68aa      	ldr	r2, [r5, #8]
 8007ac6:	68eb      	ldr	r3, [r5, #12]
 8007ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aca:	7c2b      	ldrb	r3, [r5, #16]
 8007acc:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8007ace:	4aab      	ldr	r2, [pc, #684]	@ (8007d7c <loadMenuTexts+0x370>)
 8007ad0:	4bab      	ldr	r3, [pc, #684]	@ (8007d80 <loadMenuTexts+0x374>)
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	6828      	ldr	r0, [r5, #0]
 8007ad8:	6869      	ldr	r1, [r5, #4]
 8007ada:	68aa      	ldr	r2, [r5, #8]
 8007adc:	68eb      	ldr	r3, [r5, #12]
 8007ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ae0:	7c2b      	ldrb	r3, [r5, #16]
 8007ae2:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007ae4:	4aa7      	ldr	r2, [pc, #668]	@ (8007d84 <loadMenuTexts+0x378>)
 8007ae6:	4ba8      	ldr	r3, [pc, #672]	@ (8007d88 <loadMenuTexts+0x37c>)
 8007ae8:	4614      	mov	r4, r2
 8007aea:	461d      	mov	r5, r3
 8007aec:	6828      	ldr	r0, [r5, #0]
 8007aee:	6869      	ldr	r1, [r5, #4]
 8007af0:	68aa      	ldr	r2, [r5, #8]
 8007af2:	68eb      	ldr	r3, [r5, #12]
 8007af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af6:	7c2b      	ldrb	r3, [r5, #16]
 8007af8:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8007afa:	4aa4      	ldr	r2, [pc, #656]	@ (8007d8c <loadMenuTexts+0x380>)
 8007afc:	4ba4      	ldr	r3, [pc, #656]	@ (8007d90 <loadMenuTexts+0x384>)
 8007afe:	4614      	mov	r4, r2
 8007b00:	461d      	mov	r5, r3
 8007b02:	6828      	ldr	r0, [r5, #0]
 8007b04:	6869      	ldr	r1, [r5, #4]
 8007b06:	68aa      	ldr	r2, [r5, #8]
 8007b08:	68eb      	ldr	r3, [r5, #12]
 8007b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b0c:	7c2b      	ldrb	r3, [r5, #16]
 8007b0e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8007b10:	4aa0      	ldr	r2, [pc, #640]	@ (8007d94 <loadMenuTexts+0x388>)
 8007b12:	4ba1      	ldr	r3, [pc, #644]	@ (8007d98 <loadMenuTexts+0x38c>)
 8007b14:	4614      	mov	r4, r2
 8007b16:	461d      	mov	r5, r3
 8007b18:	6828      	ldr	r0, [r5, #0]
 8007b1a:	6869      	ldr	r1, [r5, #4]
 8007b1c:	68aa      	ldr	r2, [r5, #8]
 8007b1e:	68eb      	ldr	r3, [r5, #12]
 8007b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b22:	7c2b      	ldrb	r3, [r5, #16]
 8007b24:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8007b26:	4a9d      	ldr	r2, [pc, #628]	@ (8007d9c <loadMenuTexts+0x390>)
 8007b28:	4b9d      	ldr	r3, [pc, #628]	@ (8007da0 <loadMenuTexts+0x394>)
 8007b2a:	4614      	mov	r4, r2
 8007b2c:	461d      	mov	r5, r3
 8007b2e:	6828      	ldr	r0, [r5, #0]
 8007b30:	6869      	ldr	r1, [r5, #4]
 8007b32:	68aa      	ldr	r2, [r5, #8]
 8007b34:	68eb      	ldr	r3, [r5, #12]
 8007b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b38:	7c2b      	ldrb	r3, [r5, #16]
 8007b3a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8007b3c:	4a99      	ldr	r2, [pc, #612]	@ (8007da4 <loadMenuTexts+0x398>)
 8007b3e:	4b9a      	ldr	r3, [pc, #616]	@ (8007da8 <loadMenuTexts+0x39c>)
 8007b40:	4614      	mov	r4, r2
 8007b42:	461d      	mov	r5, r3
 8007b44:	6828      	ldr	r0, [r5, #0]
 8007b46:	6869      	ldr	r1, [r5, #4]
 8007b48:	68aa      	ldr	r2, [r5, #8]
 8007b4a:	68eb      	ldr	r3, [r5, #12]
 8007b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b4e:	7c2b      	ldrb	r3, [r5, #16]
 8007b50:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8007b52:	4a96      	ldr	r2, [pc, #600]	@ (8007dac <loadMenuTexts+0x3a0>)
 8007b54:	4b96      	ldr	r3, [pc, #600]	@ (8007db0 <loadMenuTexts+0x3a4>)
 8007b56:	4614      	mov	r4, r2
 8007b58:	461d      	mov	r5, r3
 8007b5a:	6828      	ldr	r0, [r5, #0]
 8007b5c:	6869      	ldr	r1, [r5, #4]
 8007b5e:	68aa      	ldr	r2, [r5, #8]
 8007b60:	68eb      	ldr	r3, [r5, #12]
 8007b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b64:	7c2b      	ldrb	r3, [r5, #16]
 8007b66:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8007b68:	4a92      	ldr	r2, [pc, #584]	@ (8007db4 <loadMenuTexts+0x3a8>)
 8007b6a:	4b93      	ldr	r3, [pc, #588]	@ (8007db8 <loadMenuTexts+0x3ac>)
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	461d      	mov	r5, r3
 8007b70:	6828      	ldr	r0, [r5, #0]
 8007b72:	6869      	ldr	r1, [r5, #4]
 8007b74:	68aa      	ldr	r2, [r5, #8]
 8007b76:	68eb      	ldr	r3, [r5, #12]
 8007b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b7a:	7c2b      	ldrb	r3, [r5, #16]
 8007b7c:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8007b7e:	4a8f      	ldr	r2, [pc, #572]	@ (8007dbc <loadMenuTexts+0x3b0>)
 8007b80:	4b8f      	ldr	r3, [pc, #572]	@ (8007dc0 <loadMenuTexts+0x3b4>)
 8007b82:	4614      	mov	r4, r2
 8007b84:	461d      	mov	r5, r3
 8007b86:	6828      	ldr	r0, [r5, #0]
 8007b88:	6869      	ldr	r1, [r5, #4]
 8007b8a:	68aa      	ldr	r2, [r5, #8]
 8007b8c:	68eb      	ldr	r3, [r5, #12]
 8007b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b90:	7c2b      	ldrb	r3, [r5, #16]
 8007b92:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8007b94:	4a8b      	ldr	r2, [pc, #556]	@ (8007dc4 <loadMenuTexts+0x3b8>)
 8007b96:	4b8c      	ldr	r3, [pc, #560]	@ (8007dc8 <loadMenuTexts+0x3bc>)
 8007b98:	4614      	mov	r4, r2
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	6828      	ldr	r0, [r5, #0]
 8007b9e:	6869      	ldr	r1, [r5, #4]
 8007ba0:	68aa      	ldr	r2, [r5, #8]
 8007ba2:	68eb      	ldr	r3, [r5, #12]
 8007ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba6:	7c2b      	ldrb	r3, [r5, #16]
 8007ba8:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8007baa:	4a88      	ldr	r2, [pc, #544]	@ (8007dcc <loadMenuTexts+0x3c0>)
 8007bac:	4b88      	ldr	r3, [pc, #544]	@ (8007dd0 <loadMenuTexts+0x3c4>)
 8007bae:	4614      	mov	r4, r2
 8007bb0:	461d      	mov	r5, r3
 8007bb2:	6828      	ldr	r0, [r5, #0]
 8007bb4:	6869      	ldr	r1, [r5, #4]
 8007bb6:	68aa      	ldr	r2, [r5, #8]
 8007bb8:	68eb      	ldr	r3, [r5, #12]
 8007bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bbc:	7c2b      	ldrb	r3, [r5, #16]
 8007bbe:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8007bc0:	4a84      	ldr	r2, [pc, #528]	@ (8007dd4 <loadMenuTexts+0x3c8>)
 8007bc2:	4b85      	ldr	r3, [pc, #532]	@ (8007dd8 <loadMenuTexts+0x3cc>)
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	6828      	ldr	r0, [r5, #0]
 8007bca:	6869      	ldr	r1, [r5, #4]
 8007bcc:	68aa      	ldr	r2, [r5, #8]
 8007bce:	68eb      	ldr	r3, [r5, #12]
 8007bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd2:	7c2b      	ldrb	r3, [r5, #16]
 8007bd4:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8007bd6:	4a81      	ldr	r2, [pc, #516]	@ (8007ddc <loadMenuTexts+0x3d0>)
 8007bd8:	4b81      	ldr	r3, [pc, #516]	@ (8007de0 <loadMenuTexts+0x3d4>)
 8007bda:	4614      	mov	r4, r2
 8007bdc:	461d      	mov	r5, r3
 8007bde:	6828      	ldr	r0, [r5, #0]
 8007be0:	6869      	ldr	r1, [r5, #4]
 8007be2:	68aa      	ldr	r2, [r5, #8]
 8007be4:	68eb      	ldr	r3, [r5, #12]
 8007be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007be8:	7c2b      	ldrb	r3, [r5, #16]
 8007bea:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8007bec:	4a7d      	ldr	r2, [pc, #500]	@ (8007de4 <loadMenuTexts+0x3d8>)
 8007bee:	4b7e      	ldr	r3, [pc, #504]	@ (8007de8 <loadMenuTexts+0x3dc>)
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	6828      	ldr	r0, [r5, #0]
 8007bf6:	6869      	ldr	r1, [r5, #4]
 8007bf8:	68aa      	ldr	r2, [r5, #8]
 8007bfa:	68eb      	ldr	r3, [r5, #12]
 8007bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bfe:	7c2b      	ldrb	r3, [r5, #16]
 8007c00:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8007c02:	4a7a      	ldr	r2, [pc, #488]	@ (8007dec <loadMenuTexts+0x3e0>)
 8007c04:	4b7a      	ldr	r3, [pc, #488]	@ (8007df0 <loadMenuTexts+0x3e4>)
 8007c06:	4614      	mov	r4, r2
 8007c08:	461d      	mov	r5, r3
 8007c0a:	6828      	ldr	r0, [r5, #0]
 8007c0c:	6869      	ldr	r1, [r5, #4]
 8007c0e:	68aa      	ldr	r2, [r5, #8]
 8007c10:	68eb      	ldr	r3, [r5, #12]
 8007c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c14:	7c2b      	ldrb	r3, [r5, #16]
 8007c16:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8007c18:	4a76      	ldr	r2, [pc, #472]	@ (8007df4 <loadMenuTexts+0x3e8>)
 8007c1a:	4b77      	ldr	r3, [pc, #476]	@ (8007df8 <loadMenuTexts+0x3ec>)
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	461d      	mov	r5, r3
 8007c20:	6828      	ldr	r0, [r5, #0]
 8007c22:	6869      	ldr	r1, [r5, #4]
 8007c24:	68aa      	ldr	r2, [r5, #8]
 8007c26:	68eb      	ldr	r3, [r5, #12]
 8007c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c2a:	7c2b      	ldrb	r3, [r5, #16]
 8007c2c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8007c2e:	4a73      	ldr	r2, [pc, #460]	@ (8007dfc <loadMenuTexts+0x3f0>)
 8007c30:	4b73      	ldr	r3, [pc, #460]	@ (8007e00 <loadMenuTexts+0x3f4>)
 8007c32:	4614      	mov	r4, r2
 8007c34:	461d      	mov	r5, r3
 8007c36:	6828      	ldr	r0, [r5, #0]
 8007c38:	6869      	ldr	r1, [r5, #4]
 8007c3a:	68aa      	ldr	r2, [r5, #8]
 8007c3c:	68eb      	ldr	r3, [r5, #12]
 8007c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c40:	7c2b      	ldrb	r3, [r5, #16]
 8007c42:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8007c44:	4a6f      	ldr	r2, [pc, #444]	@ (8007e04 <loadMenuTexts+0x3f8>)
 8007c46:	4b70      	ldr	r3, [pc, #448]	@ (8007e08 <loadMenuTexts+0x3fc>)
 8007c48:	4614      	mov	r4, r2
 8007c4a:	461d      	mov	r5, r3
 8007c4c:	6828      	ldr	r0, [r5, #0]
 8007c4e:	6869      	ldr	r1, [r5, #4]
 8007c50:	68aa      	ldr	r2, [r5, #8]
 8007c52:	68eb      	ldr	r3, [r5, #12]
 8007c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c56:	7c2b      	ldrb	r3, [r5, #16]
 8007c58:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8007c5a:	4a6c      	ldr	r2, [pc, #432]	@ (8007e0c <loadMenuTexts+0x400>)
 8007c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8007e10 <loadMenuTexts+0x404>)
 8007c5e:	4614      	mov	r4, r2
 8007c60:	461d      	mov	r5, r3
 8007c62:	6828      	ldr	r0, [r5, #0]
 8007c64:	6869      	ldr	r1, [r5, #4]
 8007c66:	68aa      	ldr	r2, [r5, #8]
 8007c68:	68eb      	ldr	r3, [r5, #12]
 8007c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c6c:	7c2b      	ldrb	r3, [r5, #16]
 8007c6e:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8007c70:	4a68      	ldr	r2, [pc, #416]	@ (8007e14 <loadMenuTexts+0x408>)
 8007c72:	4b69      	ldr	r3, [pc, #420]	@ (8007e18 <loadMenuTexts+0x40c>)
 8007c74:	4614      	mov	r4, r2
 8007c76:	461d      	mov	r5, r3
 8007c78:	6828      	ldr	r0, [r5, #0]
 8007c7a:	6869      	ldr	r1, [r5, #4]
 8007c7c:	68aa      	ldr	r2, [r5, #8]
 8007c7e:	68eb      	ldr	r3, [r5, #12]
 8007c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c82:	7c2b      	ldrb	r3, [r5, #16]
 8007c84:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8007c86:	4a65      	ldr	r2, [pc, #404]	@ (8007e1c <loadMenuTexts+0x410>)
 8007c88:	4b65      	ldr	r3, [pc, #404]	@ (8007e20 <loadMenuTexts+0x414>)
 8007c8a:	4614      	mov	r4, r2
 8007c8c:	461d      	mov	r5, r3
 8007c8e:	6828      	ldr	r0, [r5, #0]
 8007c90:	6869      	ldr	r1, [r5, #4]
 8007c92:	68aa      	ldr	r2, [r5, #8]
 8007c94:	68eb      	ldr	r3, [r5, #12]
 8007c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c98:	7c2b      	ldrb	r3, [r5, #16]
 8007c9a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8007c9c:	4a61      	ldr	r2, [pc, #388]	@ (8007e24 <loadMenuTexts+0x418>)
 8007c9e:	4b62      	ldr	r3, [pc, #392]	@ (8007e28 <loadMenuTexts+0x41c>)
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	461d      	mov	r5, r3
 8007ca4:	6828      	ldr	r0, [r5, #0]
 8007ca6:	6869      	ldr	r1, [r5, #4]
 8007ca8:	68aa      	ldr	r2, [r5, #8]
 8007caa:	68eb      	ldr	r3, [r5, #12]
 8007cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cae:	7c2b      	ldrb	r3, [r5, #16]
 8007cb0:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8007cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8007e2c <loadMenuTexts+0x420>)
 8007cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8007e30 <loadMenuTexts+0x424>)
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	461d      	mov	r5, r3
 8007cba:	6828      	ldr	r0, [r5, #0]
 8007cbc:	6869      	ldr	r1, [r5, #4]
 8007cbe:	68aa      	ldr	r2, [r5, #8]
 8007cc0:	68eb      	ldr	r3, [r5, #12]
 8007cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cc4:	7c2b      	ldrb	r3, [r5, #16]
 8007cc6:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8007cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8007e34 <loadMenuTexts+0x428>)
 8007cca:	4b5b      	ldr	r3, [pc, #364]	@ (8007e38 <loadMenuTexts+0x42c>)
 8007ccc:	4614      	mov	r4, r2
 8007cce:	461d      	mov	r5, r3
 8007cd0:	6828      	ldr	r0, [r5, #0]
 8007cd2:	6869      	ldr	r1, [r5, #4]
 8007cd4:	68aa      	ldr	r2, [r5, #8]
 8007cd6:	68eb      	ldr	r3, [r5, #12]
 8007cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cda:	7c2b      	ldrb	r3, [r5, #16]
 8007cdc:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8007cde:	4a57      	ldr	r2, [pc, #348]	@ (8007e3c <loadMenuTexts+0x430>)
 8007ce0:	4b57      	ldr	r3, [pc, #348]	@ (8007e40 <loadMenuTexts+0x434>)
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	461d      	mov	r5, r3
 8007ce6:	6828      	ldr	r0, [r5, #0]
 8007ce8:	6869      	ldr	r1, [r5, #4]
 8007cea:	68aa      	ldr	r2, [r5, #8]
 8007cec:	68eb      	ldr	r3, [r5, #12]
 8007cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cf0:	7c2b      	ldrb	r3, [r5, #16]
 8007cf2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8007cf4:	4a53      	ldr	r2, [pc, #332]	@ (8007e44 <loadMenuTexts+0x438>)
 8007cf6:	4b54      	ldr	r3, [pc, #336]	@ (8007e48 <loadMenuTexts+0x43c>)
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	461d      	mov	r5, r3
 8007cfc:	6828      	ldr	r0, [r5, #0]
 8007cfe:	6869      	ldr	r1, [r5, #4]
 8007d00:	68aa      	ldr	r2, [r5, #8]
 8007d02:	68eb      	ldr	r3, [r5, #12]
 8007d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d06:	7c2b      	ldrb	r3, [r5, #16]
 8007d08:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8007d0a:	4a50      	ldr	r2, [pc, #320]	@ (8007e4c <loadMenuTexts+0x440>)
 8007d0c:	4b50      	ldr	r3, [pc, #320]	@ (8007e50 <loadMenuTexts+0x444>)
 8007d0e:	4614      	mov	r4, r2
 8007d10:	461d      	mov	r5, r3
 8007d12:	6828      	ldr	r0, [r5, #0]
 8007d14:	6869      	ldr	r1, [r5, #4]
 8007d16:	68aa      	ldr	r2, [r5, #8]
 8007d18:	68eb      	ldr	r3, [r5, #12]
 8007d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d1c:	7c2b      	ldrb	r3, [r5, #16]
 8007d1e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8007d20:	4a4c      	ldr	r2, [pc, #304]	@ (8007e54 <loadMenuTexts+0x448>)
 8007d22:	4b4d      	ldr	r3, [pc, #308]	@ (8007e58 <loadMenuTexts+0x44c>)
 8007d24:	4614      	mov	r4, r2
 8007d26:	461d      	mov	r5, r3
 8007d28:	6828      	ldr	r0, [r5, #0]
 8007d2a:	6869      	ldr	r1, [r5, #4]
 8007d2c:	68aa      	ldr	r2, [r5, #8]
 8007d2e:	68eb      	ldr	r3, [r5, #12]
 8007d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d32:	7c2b      	ldrb	r3, [r5, #16]
 8007d34:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8007d36:	4a49      	ldr	r2, [pc, #292]	@ (8007e5c <loadMenuTexts+0x450>)
 8007d38:	e092      	b.n	8007e60 <loadMenuTexts+0x454>
 8007d3a:	bf00      	nop
 8007d3c:	20001534 	.word	0x20001534
 8007d40:	2000018c 	.word	0x2000018c
 8007d44:	20001548 	.word	0x20001548
 8007d48:	200001a0 	.word	0x200001a0
 8007d4c:	2000155c 	.word	0x2000155c
 8007d50:	200001b4 	.word	0x200001b4
 8007d54:	20001570 	.word	0x20001570
 8007d58:	200001c8 	.word	0x200001c8
 8007d5c:	20001584 	.word	0x20001584
 8007d60:	200001dc 	.word	0x200001dc
 8007d64:	20001598 	.word	0x20001598
 8007d68:	200001f0 	.word	0x200001f0
 8007d6c:	200015ac 	.word	0x200015ac
 8007d70:	20000204 	.word	0x20000204
 8007d74:	200015c0 	.word	0x200015c0
 8007d78:	20000218 	.word	0x20000218
 8007d7c:	200015d4 	.word	0x200015d4
 8007d80:	2000022c 	.word	0x2000022c
 8007d84:	200015e8 	.word	0x200015e8
 8007d88:	20000240 	.word	0x20000240
 8007d8c:	200015fc 	.word	0x200015fc
 8007d90:	20000254 	.word	0x20000254
 8007d94:	20001610 	.word	0x20001610
 8007d98:	20000268 	.word	0x20000268
 8007d9c:	20001624 	.word	0x20001624
 8007da0:	2000027c 	.word	0x2000027c
 8007da4:	20001638 	.word	0x20001638
 8007da8:	20000290 	.word	0x20000290
 8007dac:	2000164c 	.word	0x2000164c
 8007db0:	200002a4 	.word	0x200002a4
 8007db4:	20001660 	.word	0x20001660
 8007db8:	200002b8 	.word	0x200002b8
 8007dbc:	20001674 	.word	0x20001674
 8007dc0:	200002cc 	.word	0x200002cc
 8007dc4:	20001688 	.word	0x20001688
 8007dc8:	200002e0 	.word	0x200002e0
 8007dcc:	2000169c 	.word	0x2000169c
 8007dd0:	200002f4 	.word	0x200002f4
 8007dd4:	200016b0 	.word	0x200016b0
 8007dd8:	20000308 	.word	0x20000308
 8007ddc:	200016c4 	.word	0x200016c4
 8007de0:	2000031c 	.word	0x2000031c
 8007de4:	200016d8 	.word	0x200016d8
 8007de8:	20000330 	.word	0x20000330
 8007dec:	200016ec 	.word	0x200016ec
 8007df0:	20000344 	.word	0x20000344
 8007df4:	20001700 	.word	0x20001700
 8007df8:	20000358 	.word	0x20000358
 8007dfc:	20001714 	.word	0x20001714
 8007e00:	2000036c 	.word	0x2000036c
 8007e04:	20001728 	.word	0x20001728
 8007e08:	20000380 	.word	0x20000380
 8007e0c:	2000173c 	.word	0x2000173c
 8007e10:	20000394 	.word	0x20000394
 8007e14:	20001750 	.word	0x20001750
 8007e18:	200003a8 	.word	0x200003a8
 8007e1c:	20001764 	.word	0x20001764
 8007e20:	200003bc 	.word	0x200003bc
 8007e24:	20001778 	.word	0x20001778
 8007e28:	200003d0 	.word	0x200003d0
 8007e2c:	2000178c 	.word	0x2000178c
 8007e30:	200003e4 	.word	0x200003e4
 8007e34:	200017a0 	.word	0x200017a0
 8007e38:	200003f8 	.word	0x200003f8
 8007e3c:	200017b4 	.word	0x200017b4
 8007e40:	2000040c 	.word	0x2000040c
 8007e44:	200017c8 	.word	0x200017c8
 8007e48:	20000420 	.word	0x20000420
 8007e4c:	200017dc 	.word	0x200017dc
 8007e50:	20000434 	.word	0x20000434
 8007e54:	200017f0 	.word	0x200017f0
 8007e58:	20000448 	.word	0x20000448
 8007e5c:	20001804 	.word	0x20001804
 8007e60:	4bc7      	ldr	r3, [pc, #796]	@ (8008180 <loadMenuTexts+0x774>)
 8007e62:	4614      	mov	r4, r2
 8007e64:	461d      	mov	r5, r3
 8007e66:	6828      	ldr	r0, [r5, #0]
 8007e68:	6869      	ldr	r1, [r5, #4]
 8007e6a:	68aa      	ldr	r2, [r5, #8]
 8007e6c:	68eb      	ldr	r3, [r5, #12]
 8007e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e70:	7c2b      	ldrb	r3, [r5, #16]
 8007e72:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8007e74:	4ac3      	ldr	r2, [pc, #780]	@ (8008184 <loadMenuTexts+0x778>)
 8007e76:	4bc4      	ldr	r3, [pc, #784]	@ (8008188 <loadMenuTexts+0x77c>)
 8007e78:	4614      	mov	r4, r2
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	6828      	ldr	r0, [r5, #0]
 8007e7e:	6869      	ldr	r1, [r5, #4]
 8007e80:	68aa      	ldr	r2, [r5, #8]
 8007e82:	68eb      	ldr	r3, [r5, #12]
 8007e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e86:	7c2b      	ldrb	r3, [r5, #16]
 8007e88:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8007e8a:	4ac0      	ldr	r2, [pc, #768]	@ (800818c <loadMenuTexts+0x780>)
 8007e8c:	4bc0      	ldr	r3, [pc, #768]	@ (8008190 <loadMenuTexts+0x784>)
 8007e8e:	4614      	mov	r4, r2
 8007e90:	461d      	mov	r5, r3
 8007e92:	6828      	ldr	r0, [r5, #0]
 8007e94:	6869      	ldr	r1, [r5, #4]
 8007e96:	68aa      	ldr	r2, [r5, #8]
 8007e98:	68eb      	ldr	r3, [r5, #12]
 8007e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e9c:	7c2b      	ldrb	r3, [r5, #16]
 8007e9e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8007ea0:	4abc      	ldr	r2, [pc, #752]	@ (8008194 <loadMenuTexts+0x788>)
 8007ea2:	4bbd      	ldr	r3, [pc, #756]	@ (8008198 <loadMenuTexts+0x78c>)
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	461d      	mov	r5, r3
 8007ea8:	6828      	ldr	r0, [r5, #0]
 8007eaa:	6869      	ldr	r1, [r5, #4]
 8007eac:	68aa      	ldr	r2, [r5, #8]
 8007eae:	68eb      	ldr	r3, [r5, #12]
 8007eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb2:	7c2b      	ldrb	r3, [r5, #16]
 8007eb4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8007eb6:	4ab9      	ldr	r2, [pc, #740]	@ (800819c <loadMenuTexts+0x790>)
 8007eb8:	4bb9      	ldr	r3, [pc, #740]	@ (80081a0 <loadMenuTexts+0x794>)
 8007eba:	4614      	mov	r4, r2
 8007ebc:	461d      	mov	r5, r3
 8007ebe:	6828      	ldr	r0, [r5, #0]
 8007ec0:	6869      	ldr	r1, [r5, #4]
 8007ec2:	68aa      	ldr	r2, [r5, #8]
 8007ec4:	68eb      	ldr	r3, [r5, #12]
 8007ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ec8:	7c2b      	ldrb	r3, [r5, #16]
 8007eca:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8007ecc:	4ab5      	ldr	r2, [pc, #724]	@ (80081a4 <loadMenuTexts+0x798>)
 8007ece:	4bb6      	ldr	r3, [pc, #728]	@ (80081a8 <loadMenuTexts+0x79c>)
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	461d      	mov	r5, r3
 8007ed4:	6828      	ldr	r0, [r5, #0]
 8007ed6:	6869      	ldr	r1, [r5, #4]
 8007ed8:	68aa      	ldr	r2, [r5, #8]
 8007eda:	68eb      	ldr	r3, [r5, #12]
 8007edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ede:	7c2b      	ldrb	r3, [r5, #16]
 8007ee0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8007ee2:	4ab2      	ldr	r2, [pc, #712]	@ (80081ac <loadMenuTexts+0x7a0>)
 8007ee4:	4bb2      	ldr	r3, [pc, #712]	@ (80081b0 <loadMenuTexts+0x7a4>)
 8007ee6:	4614      	mov	r4, r2
 8007ee8:	461d      	mov	r5, r3
 8007eea:	6828      	ldr	r0, [r5, #0]
 8007eec:	6869      	ldr	r1, [r5, #4]
 8007eee:	68aa      	ldr	r2, [r5, #8]
 8007ef0:	68eb      	ldr	r3, [r5, #12]
 8007ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef4:	7c2b      	ldrb	r3, [r5, #16]
 8007ef6:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007ef8:	4aae      	ldr	r2, [pc, #696]	@ (80081b4 <loadMenuTexts+0x7a8>)
 8007efa:	4baf      	ldr	r3, [pc, #700]	@ (80081b8 <loadMenuTexts+0x7ac>)
 8007efc:	4614      	mov	r4, r2
 8007efe:	461d      	mov	r5, r3
 8007f00:	6828      	ldr	r0, [r5, #0]
 8007f02:	6869      	ldr	r1, [r5, #4]
 8007f04:	68aa      	ldr	r2, [r5, #8]
 8007f06:	68eb      	ldr	r3, [r5, #12]
 8007f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f0a:	7c2b      	ldrb	r3, [r5, #16]
 8007f0c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8007f0e:	4aab      	ldr	r2, [pc, #684]	@ (80081bc <loadMenuTexts+0x7b0>)
 8007f10:	4bab      	ldr	r3, [pc, #684]	@ (80081c0 <loadMenuTexts+0x7b4>)
 8007f12:	4614      	mov	r4, r2
 8007f14:	461d      	mov	r5, r3
 8007f16:	6828      	ldr	r0, [r5, #0]
 8007f18:	6869      	ldr	r1, [r5, #4]
 8007f1a:	68aa      	ldr	r2, [r5, #8]
 8007f1c:	68eb      	ldr	r3, [r5, #12]
 8007f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f20:	7c2b      	ldrb	r3, [r5, #16]
 8007f22:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8007f24:	4aa7      	ldr	r2, [pc, #668]	@ (80081c4 <loadMenuTexts+0x7b8>)
 8007f26:	4ba8      	ldr	r3, [pc, #672]	@ (80081c8 <loadMenuTexts+0x7bc>)
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	6828      	ldr	r0, [r5, #0]
 8007f2e:	6869      	ldr	r1, [r5, #4]
 8007f30:	68aa      	ldr	r2, [r5, #8]
 8007f32:	68eb      	ldr	r3, [r5, #12]
 8007f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f36:	7c2b      	ldrb	r3, [r5, #16]
 8007f38:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8007f3a:	4aa4      	ldr	r2, [pc, #656]	@ (80081cc <loadMenuTexts+0x7c0>)
 8007f3c:	4ba4      	ldr	r3, [pc, #656]	@ (80081d0 <loadMenuTexts+0x7c4>)
 8007f3e:	4614      	mov	r4, r2
 8007f40:	461d      	mov	r5, r3
 8007f42:	6828      	ldr	r0, [r5, #0]
 8007f44:	6869      	ldr	r1, [r5, #4]
 8007f46:	68aa      	ldr	r2, [r5, #8]
 8007f48:	68eb      	ldr	r3, [r5, #12]
 8007f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f4c:	7c2b      	ldrb	r3, [r5, #16]
 8007f4e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8007f50:	4aa0      	ldr	r2, [pc, #640]	@ (80081d4 <loadMenuTexts+0x7c8>)
 8007f52:	4ba1      	ldr	r3, [pc, #644]	@ (80081d8 <loadMenuTexts+0x7cc>)
 8007f54:	4614      	mov	r4, r2
 8007f56:	461d      	mov	r5, r3
 8007f58:	6828      	ldr	r0, [r5, #0]
 8007f5a:	6869      	ldr	r1, [r5, #4]
 8007f5c:	68aa      	ldr	r2, [r5, #8]
 8007f5e:	68eb      	ldr	r3, [r5, #12]
 8007f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f62:	7c2b      	ldrb	r3, [r5, #16]
 8007f64:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8007f66:	4a9d      	ldr	r2, [pc, #628]	@ (80081dc <loadMenuTexts+0x7d0>)
 8007f68:	4b9d      	ldr	r3, [pc, #628]	@ (80081e0 <loadMenuTexts+0x7d4>)
 8007f6a:	4614      	mov	r4, r2
 8007f6c:	461d      	mov	r5, r3
 8007f6e:	6828      	ldr	r0, [r5, #0]
 8007f70:	6869      	ldr	r1, [r5, #4]
 8007f72:	68aa      	ldr	r2, [r5, #8]
 8007f74:	68eb      	ldr	r3, [r5, #12]
 8007f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f78:	7c2b      	ldrb	r3, [r5, #16]
 8007f7a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8007f7c:	4a99      	ldr	r2, [pc, #612]	@ (80081e4 <loadMenuTexts+0x7d8>)
 8007f7e:	4b9a      	ldr	r3, [pc, #616]	@ (80081e8 <loadMenuTexts+0x7dc>)
 8007f80:	4614      	mov	r4, r2
 8007f82:	461d      	mov	r5, r3
 8007f84:	6828      	ldr	r0, [r5, #0]
 8007f86:	6869      	ldr	r1, [r5, #4]
 8007f88:	68aa      	ldr	r2, [r5, #8]
 8007f8a:	68eb      	ldr	r3, [r5, #12]
 8007f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8e:	7c2b      	ldrb	r3, [r5, #16]
 8007f90:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8007f92:	4a96      	ldr	r2, [pc, #600]	@ (80081ec <loadMenuTexts+0x7e0>)
 8007f94:	4b96      	ldr	r3, [pc, #600]	@ (80081f0 <loadMenuTexts+0x7e4>)
 8007f96:	4614      	mov	r4, r2
 8007f98:	461d      	mov	r5, r3
 8007f9a:	6828      	ldr	r0, [r5, #0]
 8007f9c:	6869      	ldr	r1, [r5, #4]
 8007f9e:	68aa      	ldr	r2, [r5, #8]
 8007fa0:	68eb      	ldr	r3, [r5, #12]
 8007fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fa4:	7c2b      	ldrb	r3, [r5, #16]
 8007fa6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007fa8:	4a92      	ldr	r2, [pc, #584]	@ (80081f4 <loadMenuTexts+0x7e8>)
 8007faa:	4b93      	ldr	r3, [pc, #588]	@ (80081f8 <loadMenuTexts+0x7ec>)
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	6828      	ldr	r0, [r5, #0]
 8007fb2:	6869      	ldr	r1, [r5, #4]
 8007fb4:	68aa      	ldr	r2, [r5, #8]
 8007fb6:	68eb      	ldr	r3, [r5, #12]
 8007fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fba:	7c2b      	ldrb	r3, [r5, #16]
 8007fbc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8007fbe:	4a8f      	ldr	r2, [pc, #572]	@ (80081fc <loadMenuTexts+0x7f0>)
 8007fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8008200 <loadMenuTexts+0x7f4>)
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	461d      	mov	r5, r3
 8007fc6:	6828      	ldr	r0, [r5, #0]
 8007fc8:	6869      	ldr	r1, [r5, #4]
 8007fca:	68aa      	ldr	r2, [r5, #8]
 8007fcc:	68eb      	ldr	r3, [r5, #12]
 8007fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd0:	7c2b      	ldrb	r3, [r5, #16]
 8007fd2:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8007fd4:	4a8b      	ldr	r2, [pc, #556]	@ (8008204 <loadMenuTexts+0x7f8>)
 8007fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8008208 <loadMenuTexts+0x7fc>)
 8007fd8:	4614      	mov	r4, r2
 8007fda:	461d      	mov	r5, r3
 8007fdc:	6828      	ldr	r0, [r5, #0]
 8007fde:	6869      	ldr	r1, [r5, #4]
 8007fe0:	68aa      	ldr	r2, [r5, #8]
 8007fe2:	68eb      	ldr	r3, [r5, #12]
 8007fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fe6:	7c2b      	ldrb	r3, [r5, #16]
 8007fe8:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8007fea:	4a88      	ldr	r2, [pc, #544]	@ (800820c <loadMenuTexts+0x800>)
 8007fec:	4b88      	ldr	r3, [pc, #544]	@ (8008210 <loadMenuTexts+0x804>)
 8007fee:	4614      	mov	r4, r2
 8007ff0:	461d      	mov	r5, r3
 8007ff2:	6828      	ldr	r0, [r5, #0]
 8007ff4:	6869      	ldr	r1, [r5, #4]
 8007ff6:	68aa      	ldr	r2, [r5, #8]
 8007ff8:	68eb      	ldr	r3, [r5, #12]
 8007ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ffc:	7c2b      	ldrb	r3, [r5, #16]
 8007ffe:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8008000:	4a84      	ldr	r2, [pc, #528]	@ (8008214 <loadMenuTexts+0x808>)
 8008002:	4b85      	ldr	r3, [pc, #532]	@ (8008218 <loadMenuTexts+0x80c>)
 8008004:	4614      	mov	r4, r2
 8008006:	461d      	mov	r5, r3
 8008008:	6828      	ldr	r0, [r5, #0]
 800800a:	6869      	ldr	r1, [r5, #4]
 800800c:	68aa      	ldr	r2, [r5, #8]
 800800e:	68eb      	ldr	r3, [r5, #12]
 8008010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008012:	7c2b      	ldrb	r3, [r5, #16]
 8008014:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8008016:	4a81      	ldr	r2, [pc, #516]	@ (800821c <loadMenuTexts+0x810>)
 8008018:	4b81      	ldr	r3, [pc, #516]	@ (8008220 <loadMenuTexts+0x814>)
 800801a:	4614      	mov	r4, r2
 800801c:	461d      	mov	r5, r3
 800801e:	6828      	ldr	r0, [r5, #0]
 8008020:	6869      	ldr	r1, [r5, #4]
 8008022:	68aa      	ldr	r2, [r5, #8]
 8008024:	68eb      	ldr	r3, [r5, #12]
 8008026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008028:	7c2b      	ldrb	r3, [r5, #16]
 800802a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800802c:	4a7d      	ldr	r2, [pc, #500]	@ (8008224 <loadMenuTexts+0x818>)
 800802e:	4b7e      	ldr	r3, [pc, #504]	@ (8008228 <loadMenuTexts+0x81c>)
 8008030:	4614      	mov	r4, r2
 8008032:	461d      	mov	r5, r3
 8008034:	6828      	ldr	r0, [r5, #0]
 8008036:	6869      	ldr	r1, [r5, #4]
 8008038:	68aa      	ldr	r2, [r5, #8]
 800803a:	68eb      	ldr	r3, [r5, #12]
 800803c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800803e:	7c2b      	ldrb	r3, [r5, #16]
 8008040:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8008042:	4a7a      	ldr	r2, [pc, #488]	@ (800822c <loadMenuTexts+0x820>)
 8008044:	4b7a      	ldr	r3, [pc, #488]	@ (8008230 <loadMenuTexts+0x824>)
 8008046:	4614      	mov	r4, r2
 8008048:	461d      	mov	r5, r3
 800804a:	6828      	ldr	r0, [r5, #0]
 800804c:	6869      	ldr	r1, [r5, #4]
 800804e:	68aa      	ldr	r2, [r5, #8]
 8008050:	68eb      	ldr	r3, [r5, #12]
 8008052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008054:	7c2b      	ldrb	r3, [r5, #16]
 8008056:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8008058:	4a76      	ldr	r2, [pc, #472]	@ (8008234 <loadMenuTexts+0x828>)
 800805a:	4b77      	ldr	r3, [pc, #476]	@ (8008238 <loadMenuTexts+0x82c>)
 800805c:	4614      	mov	r4, r2
 800805e:	461d      	mov	r5, r3
 8008060:	6828      	ldr	r0, [r5, #0]
 8008062:	6869      	ldr	r1, [r5, #4]
 8008064:	68aa      	ldr	r2, [r5, #8]
 8008066:	68eb      	ldr	r3, [r5, #12]
 8008068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800806a:	7c2b      	ldrb	r3, [r5, #16]
 800806c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800806e:	4a73      	ldr	r2, [pc, #460]	@ (800823c <loadMenuTexts+0x830>)
 8008070:	4b73      	ldr	r3, [pc, #460]	@ (8008240 <loadMenuTexts+0x834>)
 8008072:	4614      	mov	r4, r2
 8008074:	461d      	mov	r5, r3
 8008076:	6828      	ldr	r0, [r5, #0]
 8008078:	6869      	ldr	r1, [r5, #4]
 800807a:	68aa      	ldr	r2, [r5, #8]
 800807c:	68eb      	ldr	r3, [r5, #12]
 800807e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008080:	7c2b      	ldrb	r3, [r5, #16]
 8008082:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8008084:	4a6f      	ldr	r2, [pc, #444]	@ (8008244 <loadMenuTexts+0x838>)
 8008086:	4b70      	ldr	r3, [pc, #448]	@ (8008248 <loadMenuTexts+0x83c>)
 8008088:	4614      	mov	r4, r2
 800808a:	461d      	mov	r5, r3
 800808c:	6828      	ldr	r0, [r5, #0]
 800808e:	6869      	ldr	r1, [r5, #4]
 8008090:	68aa      	ldr	r2, [r5, #8]
 8008092:	68eb      	ldr	r3, [r5, #12]
 8008094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008096:	7c2b      	ldrb	r3, [r5, #16]
 8008098:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 800809a:	4a6c      	ldr	r2, [pc, #432]	@ (800824c <loadMenuTexts+0x840>)
 800809c:	4b6c      	ldr	r3, [pc, #432]	@ (8008250 <loadMenuTexts+0x844>)
 800809e:	4614      	mov	r4, r2
 80080a0:	461d      	mov	r5, r3
 80080a2:	6828      	ldr	r0, [r5, #0]
 80080a4:	6869      	ldr	r1, [r5, #4]
 80080a6:	68aa      	ldr	r2, [r5, #8]
 80080a8:	68eb      	ldr	r3, [r5, #12]
 80080aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ac:	7c2b      	ldrb	r3, [r5, #16]
 80080ae:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80080b0:	4a68      	ldr	r2, [pc, #416]	@ (8008254 <loadMenuTexts+0x848>)
 80080b2:	4b69      	ldr	r3, [pc, #420]	@ (8008258 <loadMenuTexts+0x84c>)
 80080b4:	4614      	mov	r4, r2
 80080b6:	461d      	mov	r5, r3
 80080b8:	6828      	ldr	r0, [r5, #0]
 80080ba:	6869      	ldr	r1, [r5, #4]
 80080bc:	68aa      	ldr	r2, [r5, #8]
 80080be:	68eb      	ldr	r3, [r5, #12]
 80080c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080c2:	7c2b      	ldrb	r3, [r5, #16]
 80080c4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80080c6:	4a65      	ldr	r2, [pc, #404]	@ (800825c <loadMenuTexts+0x850>)
 80080c8:	4b65      	ldr	r3, [pc, #404]	@ (8008260 <loadMenuTexts+0x854>)
 80080ca:	4614      	mov	r4, r2
 80080cc:	461d      	mov	r5, r3
 80080ce:	6828      	ldr	r0, [r5, #0]
 80080d0:	6869      	ldr	r1, [r5, #4]
 80080d2:	68aa      	ldr	r2, [r5, #8]
 80080d4:	68eb      	ldr	r3, [r5, #12]
 80080d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080d8:	7c2b      	ldrb	r3, [r5, #16]
 80080da:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80080dc:	4a61      	ldr	r2, [pc, #388]	@ (8008264 <loadMenuTexts+0x858>)
 80080de:	4b62      	ldr	r3, [pc, #392]	@ (8008268 <loadMenuTexts+0x85c>)
 80080e0:	4614      	mov	r4, r2
 80080e2:	461d      	mov	r5, r3
 80080e4:	6828      	ldr	r0, [r5, #0]
 80080e6:	6869      	ldr	r1, [r5, #4]
 80080e8:	68aa      	ldr	r2, [r5, #8]
 80080ea:	68eb      	ldr	r3, [r5, #12]
 80080ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ee:	7c2b      	ldrb	r3, [r5, #16]
 80080f0:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80080f2:	4a5e      	ldr	r2, [pc, #376]	@ (800826c <loadMenuTexts+0x860>)
 80080f4:	4b5e      	ldr	r3, [pc, #376]	@ (8008270 <loadMenuTexts+0x864>)
 80080f6:	4614      	mov	r4, r2
 80080f8:	461d      	mov	r5, r3
 80080fa:	6828      	ldr	r0, [r5, #0]
 80080fc:	6869      	ldr	r1, [r5, #4]
 80080fe:	68aa      	ldr	r2, [r5, #8]
 8008100:	68eb      	ldr	r3, [r5, #12]
 8008102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008104:	7c2b      	ldrb	r3, [r5, #16]
 8008106:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8008108:	4a5a      	ldr	r2, [pc, #360]	@ (8008274 <loadMenuTexts+0x868>)
 800810a:	4b5b      	ldr	r3, [pc, #364]	@ (8008278 <loadMenuTexts+0x86c>)
 800810c:	4614      	mov	r4, r2
 800810e:	461d      	mov	r5, r3
 8008110:	6828      	ldr	r0, [r5, #0]
 8008112:	6869      	ldr	r1, [r5, #4]
 8008114:	68aa      	ldr	r2, [r5, #8]
 8008116:	68eb      	ldr	r3, [r5, #12]
 8008118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800811a:	7c2b      	ldrb	r3, [r5, #16]
 800811c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800811e:	4a57      	ldr	r2, [pc, #348]	@ (800827c <loadMenuTexts+0x870>)
 8008120:	4b57      	ldr	r3, [pc, #348]	@ (8008280 <loadMenuTexts+0x874>)
 8008122:	4614      	mov	r4, r2
 8008124:	461d      	mov	r5, r3
 8008126:	6828      	ldr	r0, [r5, #0]
 8008128:	6869      	ldr	r1, [r5, #4]
 800812a:	68aa      	ldr	r2, [r5, #8]
 800812c:	68eb      	ldr	r3, [r5, #12]
 800812e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008130:	7c2b      	ldrb	r3, [r5, #16]
 8008132:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8008134:	4a53      	ldr	r2, [pc, #332]	@ (8008284 <loadMenuTexts+0x878>)
 8008136:	4b54      	ldr	r3, [pc, #336]	@ (8008288 <loadMenuTexts+0x87c>)
 8008138:	4614      	mov	r4, r2
 800813a:	461d      	mov	r5, r3
 800813c:	6828      	ldr	r0, [r5, #0]
 800813e:	6869      	ldr	r1, [r5, #4]
 8008140:	68aa      	ldr	r2, [r5, #8]
 8008142:	68eb      	ldr	r3, [r5, #12]
 8008144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008146:	7c2b      	ldrb	r3, [r5, #16]
 8008148:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800814a:	4a50      	ldr	r2, [pc, #320]	@ (800828c <loadMenuTexts+0x880>)
 800814c:	4b50      	ldr	r3, [pc, #320]	@ (8008290 <loadMenuTexts+0x884>)
 800814e:	4614      	mov	r4, r2
 8008150:	461d      	mov	r5, r3
 8008152:	6828      	ldr	r0, [r5, #0]
 8008154:	6869      	ldr	r1, [r5, #4]
 8008156:	68aa      	ldr	r2, [r5, #8]
 8008158:	68eb      	ldr	r3, [r5, #12]
 800815a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800815c:	7c2b      	ldrb	r3, [r5, #16]
 800815e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8008160:	4a4c      	ldr	r2, [pc, #304]	@ (8008294 <loadMenuTexts+0x888>)
 8008162:	4b4d      	ldr	r3, [pc, #308]	@ (8008298 <loadMenuTexts+0x88c>)
 8008164:	4614      	mov	r4, r2
 8008166:	461d      	mov	r5, r3
 8008168:	6828      	ldr	r0, [r5, #0]
 800816a:	6869      	ldr	r1, [r5, #4]
 800816c:	68aa      	ldr	r2, [r5, #8]
 800816e:	68eb      	ldr	r3, [r5, #12]
 8008170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008172:	7c2b      	ldrb	r3, [r5, #16]
 8008174:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8008176:	4a49      	ldr	r2, [pc, #292]	@ (800829c <loadMenuTexts+0x890>)
 8008178:	4b49      	ldr	r3, [pc, #292]	@ (80082a0 <loadMenuTexts+0x894>)
 800817a:	4614      	mov	r4, r2
 800817c:	461d      	mov	r5, r3
 800817e:	e091      	b.n	80082a4 <loadMenuTexts+0x898>
 8008180:	2000045c 	.word	0x2000045c
 8008184:	20001818 	.word	0x20001818
 8008188:	20000470 	.word	0x20000470
 800818c:	2000182c 	.word	0x2000182c
 8008190:	20000484 	.word	0x20000484
 8008194:	20001840 	.word	0x20001840
 8008198:	20000498 	.word	0x20000498
 800819c:	20001854 	.word	0x20001854
 80081a0:	200004ac 	.word	0x200004ac
 80081a4:	20001868 	.word	0x20001868
 80081a8:	200004c0 	.word	0x200004c0
 80081ac:	2000187c 	.word	0x2000187c
 80081b0:	200004d4 	.word	0x200004d4
 80081b4:	20001890 	.word	0x20001890
 80081b8:	200004e8 	.word	0x200004e8
 80081bc:	200018a4 	.word	0x200018a4
 80081c0:	200004fc 	.word	0x200004fc
 80081c4:	200018b8 	.word	0x200018b8
 80081c8:	20000510 	.word	0x20000510
 80081cc:	200018cc 	.word	0x200018cc
 80081d0:	20000524 	.word	0x20000524
 80081d4:	200018e0 	.word	0x200018e0
 80081d8:	20000538 	.word	0x20000538
 80081dc:	200018f4 	.word	0x200018f4
 80081e0:	2000054c 	.word	0x2000054c
 80081e4:	20001908 	.word	0x20001908
 80081e8:	20000560 	.word	0x20000560
 80081ec:	2000191c 	.word	0x2000191c
 80081f0:	20000574 	.word	0x20000574
 80081f4:	20001930 	.word	0x20001930
 80081f8:	20000588 	.word	0x20000588
 80081fc:	20001944 	.word	0x20001944
 8008200:	2000059c 	.word	0x2000059c
 8008204:	20001958 	.word	0x20001958
 8008208:	200005b0 	.word	0x200005b0
 800820c:	2000196c 	.word	0x2000196c
 8008210:	200005c4 	.word	0x200005c4
 8008214:	20001980 	.word	0x20001980
 8008218:	200005d8 	.word	0x200005d8
 800821c:	20001994 	.word	0x20001994
 8008220:	200005ec 	.word	0x200005ec
 8008224:	200019a8 	.word	0x200019a8
 8008228:	20000600 	.word	0x20000600
 800822c:	200019bc 	.word	0x200019bc
 8008230:	20000614 	.word	0x20000614
 8008234:	200019d0 	.word	0x200019d0
 8008238:	20000628 	.word	0x20000628
 800823c:	200019e4 	.word	0x200019e4
 8008240:	2000063c 	.word	0x2000063c
 8008244:	200019f8 	.word	0x200019f8
 8008248:	20000650 	.word	0x20000650
 800824c:	20001a0c 	.word	0x20001a0c
 8008250:	20000664 	.word	0x20000664
 8008254:	20001a20 	.word	0x20001a20
 8008258:	20000678 	.word	0x20000678
 800825c:	20001a34 	.word	0x20001a34
 8008260:	2000068c 	.word	0x2000068c
 8008264:	20001a48 	.word	0x20001a48
 8008268:	200006a0 	.word	0x200006a0
 800826c:	20001a5c 	.word	0x20001a5c
 8008270:	200006b4 	.word	0x200006b4
 8008274:	20001a70 	.word	0x20001a70
 8008278:	200006c8 	.word	0x200006c8
 800827c:	20001a84 	.word	0x20001a84
 8008280:	200006dc 	.word	0x200006dc
 8008284:	20001a98 	.word	0x20001a98
 8008288:	200006f0 	.word	0x200006f0
 800828c:	20001aac 	.word	0x20001aac
 8008290:	20000c7c 	.word	0x20000c7c
 8008294:	20001ac0 	.word	0x20001ac0
 8008298:	20000c90 	.word	0x20000c90
 800829c:	20001ad4 	.word	0x20001ad4
 80082a0:	20000ca4 	.word	0x20000ca4
 80082a4:	6828      	ldr	r0, [r5, #0]
 80082a6:	6869      	ldr	r1, [r5, #4]
 80082a8:	68aa      	ldr	r2, [r5, #8]
 80082aa:	68eb      	ldr	r3, [r5, #12]
 80082ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082ae:	7c2b      	ldrb	r3, [r5, #16]
 80082b0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80082b2:	4a59      	ldr	r2, [pc, #356]	@ (8008418 <loadMenuTexts+0xa0c>)
 80082b4:	4b59      	ldr	r3, [pc, #356]	@ (800841c <loadMenuTexts+0xa10>)
 80082b6:	4614      	mov	r4, r2
 80082b8:	461d      	mov	r5, r3
 80082ba:	6828      	ldr	r0, [r5, #0]
 80082bc:	6869      	ldr	r1, [r5, #4]
 80082be:	68aa      	ldr	r2, [r5, #8]
 80082c0:	68eb      	ldr	r3, [r5, #12]
 80082c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082c4:	7c2b      	ldrb	r3, [r5, #16]
 80082c6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80082c8:	4a55      	ldr	r2, [pc, #340]	@ (8008420 <loadMenuTexts+0xa14>)
 80082ca:	4b56      	ldr	r3, [pc, #344]	@ (8008424 <loadMenuTexts+0xa18>)
 80082cc:	4614      	mov	r4, r2
 80082ce:	461d      	mov	r5, r3
 80082d0:	6828      	ldr	r0, [r5, #0]
 80082d2:	6869      	ldr	r1, [r5, #4]
 80082d4:	68aa      	ldr	r2, [r5, #8]
 80082d6:	68eb      	ldr	r3, [r5, #12]
 80082d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082da:	7c2b      	ldrb	r3, [r5, #16]
 80082dc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80082de:	4a52      	ldr	r2, [pc, #328]	@ (8008428 <loadMenuTexts+0xa1c>)
 80082e0:	4b52      	ldr	r3, [pc, #328]	@ (800842c <loadMenuTexts+0xa20>)
 80082e2:	4614      	mov	r4, r2
 80082e4:	461d      	mov	r5, r3
 80082e6:	6828      	ldr	r0, [r5, #0]
 80082e8:	6869      	ldr	r1, [r5, #4]
 80082ea:	68aa      	ldr	r2, [r5, #8]
 80082ec:	68eb      	ldr	r3, [r5, #12]
 80082ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082f0:	7c2b      	ldrb	r3, [r5, #16]
 80082f2:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80082f4:	4a4e      	ldr	r2, [pc, #312]	@ (8008430 <loadMenuTexts+0xa24>)
 80082f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008434 <loadMenuTexts+0xa28>)
 80082f8:	4614      	mov	r4, r2
 80082fa:	461d      	mov	r5, r3
 80082fc:	6828      	ldr	r0, [r5, #0]
 80082fe:	6869      	ldr	r1, [r5, #4]
 8008300:	68aa      	ldr	r2, [r5, #8]
 8008302:	68eb      	ldr	r3, [r5, #12]
 8008304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008306:	7c2b      	ldrb	r3, [r5, #16]
 8008308:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 800830a:	4a4b      	ldr	r2, [pc, #300]	@ (8008438 <loadMenuTexts+0xa2c>)
 800830c:	4b4b      	ldr	r3, [pc, #300]	@ (800843c <loadMenuTexts+0xa30>)
 800830e:	4614      	mov	r4, r2
 8008310:	461d      	mov	r5, r3
 8008312:	6828      	ldr	r0, [r5, #0]
 8008314:	6869      	ldr	r1, [r5, #4]
 8008316:	68aa      	ldr	r2, [r5, #8]
 8008318:	68eb      	ldr	r3, [r5, #12]
 800831a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800831c:	7c2b      	ldrb	r3, [r5, #16]
 800831e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8008320:	4a47      	ldr	r2, [pc, #284]	@ (8008440 <loadMenuTexts+0xa34>)
 8008322:	4b48      	ldr	r3, [pc, #288]	@ (8008444 <loadMenuTexts+0xa38>)
 8008324:	4614      	mov	r4, r2
 8008326:	461d      	mov	r5, r3
 8008328:	6828      	ldr	r0, [r5, #0]
 800832a:	6869      	ldr	r1, [r5, #4]
 800832c:	68aa      	ldr	r2, [r5, #8]
 800832e:	68eb      	ldr	r3, [r5, #12]
 8008330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008332:	7c2b      	ldrb	r3, [r5, #16]
 8008334:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8008336:	4a44      	ldr	r2, [pc, #272]	@ (8008448 <loadMenuTexts+0xa3c>)
 8008338:	4b44      	ldr	r3, [pc, #272]	@ (800844c <loadMenuTexts+0xa40>)
 800833a:	4614      	mov	r4, r2
 800833c:	461d      	mov	r5, r3
 800833e:	6828      	ldr	r0, [r5, #0]
 8008340:	6869      	ldr	r1, [r5, #4]
 8008342:	68aa      	ldr	r2, [r5, #8]
 8008344:	68eb      	ldr	r3, [r5, #12]
 8008346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008348:	7c2b      	ldrb	r3, [r5, #16]
 800834a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 800834c:	4a40      	ldr	r2, [pc, #256]	@ (8008450 <loadMenuTexts+0xa44>)
 800834e:	4b41      	ldr	r3, [pc, #260]	@ (8008454 <loadMenuTexts+0xa48>)
 8008350:	4614      	mov	r4, r2
 8008352:	461d      	mov	r5, r3
 8008354:	6828      	ldr	r0, [r5, #0]
 8008356:	6869      	ldr	r1, [r5, #4]
 8008358:	68aa      	ldr	r2, [r5, #8]
 800835a:	68eb      	ldr	r3, [r5, #12]
 800835c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800835e:	7c2b      	ldrb	r3, [r5, #16]
 8008360:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8008362:	4a3d      	ldr	r2, [pc, #244]	@ (8008458 <loadMenuTexts+0xa4c>)
 8008364:	4b3d      	ldr	r3, [pc, #244]	@ (800845c <loadMenuTexts+0xa50>)
 8008366:	4614      	mov	r4, r2
 8008368:	461d      	mov	r5, r3
 800836a:	6828      	ldr	r0, [r5, #0]
 800836c:	6869      	ldr	r1, [r5, #4]
 800836e:	68aa      	ldr	r2, [r5, #8]
 8008370:	68eb      	ldr	r3, [r5, #12]
 8008372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008374:	7c2b      	ldrb	r3, [r5, #16]
 8008376:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8008378:	4a39      	ldr	r2, [pc, #228]	@ (8008460 <loadMenuTexts+0xa54>)
 800837a:	4b3a      	ldr	r3, [pc, #232]	@ (8008464 <loadMenuTexts+0xa58>)
 800837c:	4614      	mov	r4, r2
 800837e:	461d      	mov	r5, r3
 8008380:	6828      	ldr	r0, [r5, #0]
 8008382:	6869      	ldr	r1, [r5, #4]
 8008384:	68aa      	ldr	r2, [r5, #8]
 8008386:	68eb      	ldr	r3, [r5, #12]
 8008388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800838a:	7c2b      	ldrb	r3, [r5, #16]
 800838c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 800838e:	4a36      	ldr	r2, [pc, #216]	@ (8008468 <loadMenuTexts+0xa5c>)
 8008390:	4b36      	ldr	r3, [pc, #216]	@ (800846c <loadMenuTexts+0xa60>)
 8008392:	4614      	mov	r4, r2
 8008394:	461d      	mov	r5, r3
 8008396:	6828      	ldr	r0, [r5, #0]
 8008398:	6869      	ldr	r1, [r5, #4]
 800839a:	68aa      	ldr	r2, [r5, #8]
 800839c:	68eb      	ldr	r3, [r5, #12]
 800839e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083a0:	7c2b      	ldrb	r3, [r5, #16]
 80083a2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 80083a4:	4a32      	ldr	r2, [pc, #200]	@ (8008470 <loadMenuTexts+0xa64>)
 80083a6:	4b33      	ldr	r3, [pc, #204]	@ (8008474 <loadMenuTexts+0xa68>)
 80083a8:	4614      	mov	r4, r2
 80083aa:	461d      	mov	r5, r3
 80083ac:	6828      	ldr	r0, [r5, #0]
 80083ae:	6869      	ldr	r1, [r5, #4]
 80083b0:	68aa      	ldr	r2, [r5, #8]
 80083b2:	68eb      	ldr	r3, [r5, #12]
 80083b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083b6:	7c2b      	ldrb	r3, [r5, #16]
 80083b8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 80083ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008478 <loadMenuTexts+0xa6c>)
 80083bc:	4b2f      	ldr	r3, [pc, #188]	@ (800847c <loadMenuTexts+0xa70>)
 80083be:	4614      	mov	r4, r2
 80083c0:	461d      	mov	r5, r3
 80083c2:	6828      	ldr	r0, [r5, #0]
 80083c4:	6869      	ldr	r1, [r5, #4]
 80083c6:	68aa      	ldr	r2, [r5, #8]
 80083c8:	68eb      	ldr	r3, [r5, #12]
 80083ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083cc:	7c2b      	ldrb	r3, [r5, #16]
 80083ce:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 80083d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008480 <loadMenuTexts+0xa74>)
 80083d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008484 <loadMenuTexts+0xa78>)
 80083d4:	4614      	mov	r4, r2
 80083d6:	461d      	mov	r5, r3
 80083d8:	6828      	ldr	r0, [r5, #0]
 80083da:	6869      	ldr	r1, [r5, #4]
 80083dc:	68aa      	ldr	r2, [r5, #8]
 80083de:	68eb      	ldr	r3, [r5, #12]
 80083e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083e2:	7c2b      	ldrb	r3, [r5, #16]
 80083e4:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80083e6:	4a28      	ldr	r2, [pc, #160]	@ (8008488 <loadMenuTexts+0xa7c>)
 80083e8:	4b28      	ldr	r3, [pc, #160]	@ (800848c <loadMenuTexts+0xa80>)
 80083ea:	4614      	mov	r4, r2
 80083ec:	461d      	mov	r5, r3
 80083ee:	6828      	ldr	r0, [r5, #0]
 80083f0:	6869      	ldr	r1, [r5, #4]
 80083f2:	68aa      	ldr	r2, [r5, #8]
 80083f4:	68eb      	ldr	r3, [r5, #12]
 80083f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083f8:	7c2b      	ldrb	r3, [r5, #16]
 80083fa:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 80083fc:	4a24      	ldr	r2, [pc, #144]	@ (8008490 <loadMenuTexts+0xa84>)
 80083fe:	4b25      	ldr	r3, [pc, #148]	@ (8008494 <loadMenuTexts+0xa88>)
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	6828      	ldr	r0, [r5, #0]
 8008406:	6869      	ldr	r1, [r5, #4]
 8008408:	68aa      	ldr	r2, [r5, #8]
 800840a:	68eb      	ldr	r3, [r5, #12]
 800840c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800840e:	7c2b      	ldrb	r3, [r5, #16]
 8008410:	7023      	strb	r3, [r4, #0]
 8008412:	f000 bd3a 	b.w	8008e8a <loadMenuTexts+0x147e>
 8008416:	bf00      	nop
 8008418:	20001ae8 	.word	0x20001ae8
 800841c:	20000cb8 	.word	0x20000cb8
 8008420:	20001afc 	.word	0x20001afc
 8008424:	20000d1c 	.word	0x20000d1c
 8008428:	20001b10 	.word	0x20001b10
 800842c:	20000d30 	.word	0x20000d30
 8008430:	20001b24 	.word	0x20001b24
 8008434:	20000d6c 	.word	0x20000d6c
 8008438:	20001b38 	.word	0x20001b38
 800843c:	20000d80 	.word	0x20000d80
 8008440:	20001b4c 	.word	0x20001b4c
 8008444:	20000dbc 	.word	0x20000dbc
 8008448:	20001b60 	.word	0x20001b60
 800844c:	20000dd0 	.word	0x20000dd0
 8008450:	20001b74 	.word	0x20001b74
 8008454:	20000e0c 	.word	0x20000e0c
 8008458:	20001b88 	.word	0x20001b88
 800845c:	20000e34 	.word	0x20000e34
 8008460:	20001b9c 	.word	0x20001b9c
 8008464:	20000e5c 	.word	0x20000e5c
 8008468:	20001bb0 	.word	0x20001bb0
 800846c:	20000e84 	.word	0x20000e84
 8008470:	20001bc4 	.word	0x20001bc4
 8008474:	20000eac 	.word	0x20000eac
 8008478:	20001bd8 	.word	0x20001bd8
 800847c:	20000ed4 	.word	0x20000ed4
 8008480:	20001bec 	.word	0x20001bec
 8008484:	20000efc 	.word	0x20000efc
 8008488:	20001c00 	.word	0x20001c00
 800848c:	20000f24 	.word	0x20000f24
 8008490:	20001c14 	.word	0x20001c14
 8008494:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8008498:	4ac6      	ldr	r2, [pc, #792]	@ (80087b4 <loadMenuTexts+0xda8>)
 800849a:	4bc7      	ldr	r3, [pc, #796]	@ (80087b8 <loadMenuTexts+0xdac>)
 800849c:	4614      	mov	r4, r2
 800849e:	461d      	mov	r5, r3
 80084a0:	6828      	ldr	r0, [r5, #0]
 80084a2:	6869      	ldr	r1, [r5, #4]
 80084a4:	68aa      	ldr	r2, [r5, #8]
 80084a6:	68eb      	ldr	r3, [r5, #12]
 80084a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084aa:	7c2b      	ldrb	r3, [r5, #16]
 80084ac:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 80084ae:	4ac3      	ldr	r2, [pc, #780]	@ (80087bc <loadMenuTexts+0xdb0>)
 80084b0:	4bc3      	ldr	r3, [pc, #780]	@ (80087c0 <loadMenuTexts+0xdb4>)
 80084b2:	4614      	mov	r4, r2
 80084b4:	461d      	mov	r5, r3
 80084b6:	6828      	ldr	r0, [r5, #0]
 80084b8:	6869      	ldr	r1, [r5, #4]
 80084ba:	68aa      	ldr	r2, [r5, #8]
 80084bc:	68eb      	ldr	r3, [r5, #12]
 80084be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084c0:	7c2b      	ldrb	r3, [r5, #16]
 80084c2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 80084c4:	4abf      	ldr	r2, [pc, #764]	@ (80087c4 <loadMenuTexts+0xdb8>)
 80084c6:	4bc0      	ldr	r3, [pc, #768]	@ (80087c8 <loadMenuTexts+0xdbc>)
 80084c8:	4614      	mov	r4, r2
 80084ca:	461d      	mov	r5, r3
 80084cc:	6828      	ldr	r0, [r5, #0]
 80084ce:	6869      	ldr	r1, [r5, #4]
 80084d0:	68aa      	ldr	r2, [r5, #8]
 80084d2:	68eb      	ldr	r3, [r5, #12]
 80084d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084d6:	7c2b      	ldrb	r3, [r5, #16]
 80084d8:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 80084da:	4abc      	ldr	r2, [pc, #752]	@ (80087cc <loadMenuTexts+0xdc0>)
 80084dc:	4bbc      	ldr	r3, [pc, #752]	@ (80087d0 <loadMenuTexts+0xdc4>)
 80084de:	4614      	mov	r4, r2
 80084e0:	461d      	mov	r5, r3
 80084e2:	6828      	ldr	r0, [r5, #0]
 80084e4:	6869      	ldr	r1, [r5, #4]
 80084e6:	68aa      	ldr	r2, [r5, #8]
 80084e8:	68eb      	ldr	r3, [r5, #12]
 80084ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ec:	7c2b      	ldrb	r3, [r5, #16]
 80084ee:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80084f0:	4ab8      	ldr	r2, [pc, #736]	@ (80087d4 <loadMenuTexts+0xdc8>)
 80084f2:	4bb9      	ldr	r3, [pc, #740]	@ (80087d8 <loadMenuTexts+0xdcc>)
 80084f4:	4614      	mov	r4, r2
 80084f6:	461d      	mov	r5, r3
 80084f8:	6828      	ldr	r0, [r5, #0]
 80084fa:	6869      	ldr	r1, [r5, #4]
 80084fc:	68aa      	ldr	r2, [r5, #8]
 80084fe:	68eb      	ldr	r3, [r5, #12]
 8008500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008502:	7c2b      	ldrb	r3, [r5, #16]
 8008504:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8008506:	4ab5      	ldr	r2, [pc, #724]	@ (80087dc <loadMenuTexts+0xdd0>)
 8008508:	4bb5      	ldr	r3, [pc, #724]	@ (80087e0 <loadMenuTexts+0xdd4>)
 800850a:	4614      	mov	r4, r2
 800850c:	461d      	mov	r5, r3
 800850e:	6828      	ldr	r0, [r5, #0]
 8008510:	6869      	ldr	r1, [r5, #4]
 8008512:	68aa      	ldr	r2, [r5, #8]
 8008514:	68eb      	ldr	r3, [r5, #12]
 8008516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008518:	7c2b      	ldrb	r3, [r5, #16]
 800851a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 800851c:	4ab1      	ldr	r2, [pc, #708]	@ (80087e4 <loadMenuTexts+0xdd8>)
 800851e:	4bb2      	ldr	r3, [pc, #712]	@ (80087e8 <loadMenuTexts+0xddc>)
 8008520:	4614      	mov	r4, r2
 8008522:	461d      	mov	r5, r3
 8008524:	6828      	ldr	r0, [r5, #0]
 8008526:	6869      	ldr	r1, [r5, #4]
 8008528:	68aa      	ldr	r2, [r5, #8]
 800852a:	68eb      	ldr	r3, [r5, #12]
 800852c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800852e:	7c2b      	ldrb	r3, [r5, #16]
 8008530:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8008532:	4aae      	ldr	r2, [pc, #696]	@ (80087ec <loadMenuTexts+0xde0>)
 8008534:	4bae      	ldr	r3, [pc, #696]	@ (80087f0 <loadMenuTexts+0xde4>)
 8008536:	4614      	mov	r4, r2
 8008538:	461d      	mov	r5, r3
 800853a:	6828      	ldr	r0, [r5, #0]
 800853c:	6869      	ldr	r1, [r5, #4]
 800853e:	68aa      	ldr	r2, [r5, #8]
 8008540:	68eb      	ldr	r3, [r5, #12]
 8008542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008544:	7c2b      	ldrb	r3, [r5, #16]
 8008546:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8008548:	4aaa      	ldr	r2, [pc, #680]	@ (80087f4 <loadMenuTexts+0xde8>)
 800854a:	4bab      	ldr	r3, [pc, #684]	@ (80087f8 <loadMenuTexts+0xdec>)
 800854c:	4614      	mov	r4, r2
 800854e:	461d      	mov	r5, r3
 8008550:	6828      	ldr	r0, [r5, #0]
 8008552:	6869      	ldr	r1, [r5, #4]
 8008554:	68aa      	ldr	r2, [r5, #8]
 8008556:	68eb      	ldr	r3, [r5, #12]
 8008558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800855a:	7c2b      	ldrb	r3, [r5, #16]
 800855c:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 800855e:	4aa7      	ldr	r2, [pc, #668]	@ (80087fc <loadMenuTexts+0xdf0>)
 8008560:	4ba7      	ldr	r3, [pc, #668]	@ (8008800 <loadMenuTexts+0xdf4>)
 8008562:	4614      	mov	r4, r2
 8008564:	461d      	mov	r5, r3
 8008566:	6828      	ldr	r0, [r5, #0]
 8008568:	6869      	ldr	r1, [r5, #4]
 800856a:	68aa      	ldr	r2, [r5, #8]
 800856c:	68eb      	ldr	r3, [r5, #12]
 800856e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008570:	7c2b      	ldrb	r3, [r5, #16]
 8008572:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8008574:	4aa3      	ldr	r2, [pc, #652]	@ (8008804 <loadMenuTexts+0xdf8>)
 8008576:	4ba4      	ldr	r3, [pc, #656]	@ (8008808 <loadMenuTexts+0xdfc>)
 8008578:	4614      	mov	r4, r2
 800857a:	461d      	mov	r5, r3
 800857c:	6828      	ldr	r0, [r5, #0]
 800857e:	6869      	ldr	r1, [r5, #4]
 8008580:	68aa      	ldr	r2, [r5, #8]
 8008582:	68eb      	ldr	r3, [r5, #12]
 8008584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008586:	7c2b      	ldrb	r3, [r5, #16]
 8008588:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 800858a:	4aa0      	ldr	r2, [pc, #640]	@ (800880c <loadMenuTexts+0xe00>)
 800858c:	4ba0      	ldr	r3, [pc, #640]	@ (8008810 <loadMenuTexts+0xe04>)
 800858e:	4614      	mov	r4, r2
 8008590:	461d      	mov	r5, r3
 8008592:	6828      	ldr	r0, [r5, #0]
 8008594:	6869      	ldr	r1, [r5, #4]
 8008596:	68aa      	ldr	r2, [r5, #8]
 8008598:	68eb      	ldr	r3, [r5, #12]
 800859a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800859c:	7c2b      	ldrb	r3, [r5, #16]
 800859e:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 80085a0:	4a9c      	ldr	r2, [pc, #624]	@ (8008814 <loadMenuTexts+0xe08>)
 80085a2:	4b9d      	ldr	r3, [pc, #628]	@ (8008818 <loadMenuTexts+0xe0c>)
 80085a4:	4614      	mov	r4, r2
 80085a6:	461d      	mov	r5, r3
 80085a8:	6828      	ldr	r0, [r5, #0]
 80085aa:	6869      	ldr	r1, [r5, #4]
 80085ac:	68aa      	ldr	r2, [r5, #8]
 80085ae:	68eb      	ldr	r3, [r5, #12]
 80085b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085b2:	7c2b      	ldrb	r3, [r5, #16]
 80085b4:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 80085b6:	4a99      	ldr	r2, [pc, #612]	@ (800881c <loadMenuTexts+0xe10>)
 80085b8:	4b99      	ldr	r3, [pc, #612]	@ (8008820 <loadMenuTexts+0xe14>)
 80085ba:	4614      	mov	r4, r2
 80085bc:	461d      	mov	r5, r3
 80085be:	6828      	ldr	r0, [r5, #0]
 80085c0:	6869      	ldr	r1, [r5, #4]
 80085c2:	68aa      	ldr	r2, [r5, #8]
 80085c4:	68eb      	ldr	r3, [r5, #12]
 80085c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085c8:	7c2b      	ldrb	r3, [r5, #16]
 80085ca:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 80085cc:	4a95      	ldr	r2, [pc, #596]	@ (8008824 <loadMenuTexts+0xe18>)
 80085ce:	4b96      	ldr	r3, [pc, #600]	@ (8008828 <loadMenuTexts+0xe1c>)
 80085d0:	4614      	mov	r4, r2
 80085d2:	461d      	mov	r5, r3
 80085d4:	6828      	ldr	r0, [r5, #0]
 80085d6:	6869      	ldr	r1, [r5, #4]
 80085d8:	68aa      	ldr	r2, [r5, #8]
 80085da:	68eb      	ldr	r3, [r5, #12]
 80085dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085de:	7c2b      	ldrb	r3, [r5, #16]
 80085e0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 80085e2:	4a92      	ldr	r2, [pc, #584]	@ (800882c <loadMenuTexts+0xe20>)
 80085e4:	4b92      	ldr	r3, [pc, #584]	@ (8008830 <loadMenuTexts+0xe24>)
 80085e6:	4614      	mov	r4, r2
 80085e8:	461d      	mov	r5, r3
 80085ea:	6828      	ldr	r0, [r5, #0]
 80085ec:	6869      	ldr	r1, [r5, #4]
 80085ee:	68aa      	ldr	r2, [r5, #8]
 80085f0:	68eb      	ldr	r3, [r5, #12]
 80085f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085f4:	7c2b      	ldrb	r3, [r5, #16]
 80085f6:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 80085f8:	4a8e      	ldr	r2, [pc, #568]	@ (8008834 <loadMenuTexts+0xe28>)
 80085fa:	4b8f      	ldr	r3, [pc, #572]	@ (8008838 <loadMenuTexts+0xe2c>)
 80085fc:	4614      	mov	r4, r2
 80085fe:	461d      	mov	r5, r3
 8008600:	6828      	ldr	r0, [r5, #0]
 8008602:	6869      	ldr	r1, [r5, #4]
 8008604:	68aa      	ldr	r2, [r5, #8]
 8008606:	68eb      	ldr	r3, [r5, #12]
 8008608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800860a:	7c2b      	ldrb	r3, [r5, #16]
 800860c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 800860e:	4a8b      	ldr	r2, [pc, #556]	@ (800883c <loadMenuTexts+0xe30>)
 8008610:	4b8b      	ldr	r3, [pc, #556]	@ (8008840 <loadMenuTexts+0xe34>)
 8008612:	4614      	mov	r4, r2
 8008614:	461d      	mov	r5, r3
 8008616:	6828      	ldr	r0, [r5, #0]
 8008618:	6869      	ldr	r1, [r5, #4]
 800861a:	68aa      	ldr	r2, [r5, #8]
 800861c:	68eb      	ldr	r3, [r5, #12]
 800861e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008620:	7c2b      	ldrb	r3, [r5, #16]
 8008622:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8008624:	4a87      	ldr	r2, [pc, #540]	@ (8008844 <loadMenuTexts+0xe38>)
 8008626:	4b88      	ldr	r3, [pc, #544]	@ (8008848 <loadMenuTexts+0xe3c>)
 8008628:	4614      	mov	r4, r2
 800862a:	461d      	mov	r5, r3
 800862c:	6828      	ldr	r0, [r5, #0]
 800862e:	6869      	ldr	r1, [r5, #4]
 8008630:	68aa      	ldr	r2, [r5, #8]
 8008632:	68eb      	ldr	r3, [r5, #12]
 8008634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008636:	7c2b      	ldrb	r3, [r5, #16]
 8008638:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 800863a:	4a84      	ldr	r2, [pc, #528]	@ (800884c <loadMenuTexts+0xe40>)
 800863c:	4b84      	ldr	r3, [pc, #528]	@ (8008850 <loadMenuTexts+0xe44>)
 800863e:	4614      	mov	r4, r2
 8008640:	461d      	mov	r5, r3
 8008642:	6828      	ldr	r0, [r5, #0]
 8008644:	6869      	ldr	r1, [r5, #4]
 8008646:	68aa      	ldr	r2, [r5, #8]
 8008648:	68eb      	ldr	r3, [r5, #12]
 800864a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800864c:	7c2b      	ldrb	r3, [r5, #16]
 800864e:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8008650:	4a80      	ldr	r2, [pc, #512]	@ (8008854 <loadMenuTexts+0xe48>)
 8008652:	4b81      	ldr	r3, [pc, #516]	@ (8008858 <loadMenuTexts+0xe4c>)
 8008654:	4614      	mov	r4, r2
 8008656:	461d      	mov	r5, r3
 8008658:	6828      	ldr	r0, [r5, #0]
 800865a:	6869      	ldr	r1, [r5, #4]
 800865c:	68aa      	ldr	r2, [r5, #8]
 800865e:	68eb      	ldr	r3, [r5, #12]
 8008660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008662:	7c2b      	ldrb	r3, [r5, #16]
 8008664:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8008666:	4a7d      	ldr	r2, [pc, #500]	@ (800885c <loadMenuTexts+0xe50>)
 8008668:	4b7d      	ldr	r3, [pc, #500]	@ (8008860 <loadMenuTexts+0xe54>)
 800866a:	4614      	mov	r4, r2
 800866c:	461d      	mov	r5, r3
 800866e:	6828      	ldr	r0, [r5, #0]
 8008670:	6869      	ldr	r1, [r5, #4]
 8008672:	68aa      	ldr	r2, [r5, #8]
 8008674:	68eb      	ldr	r3, [r5, #12]
 8008676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008678:	7c2b      	ldrb	r3, [r5, #16]
 800867a:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 800867c:	4a79      	ldr	r2, [pc, #484]	@ (8008864 <loadMenuTexts+0xe58>)
 800867e:	4b7a      	ldr	r3, [pc, #488]	@ (8008868 <loadMenuTexts+0xe5c>)
 8008680:	4614      	mov	r4, r2
 8008682:	461d      	mov	r5, r3
 8008684:	6828      	ldr	r0, [r5, #0]
 8008686:	6869      	ldr	r1, [r5, #4]
 8008688:	68aa      	ldr	r2, [r5, #8]
 800868a:	68eb      	ldr	r3, [r5, #12]
 800868c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800868e:	7c2b      	ldrb	r3, [r5, #16]
 8008690:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8008692:	4a76      	ldr	r2, [pc, #472]	@ (800886c <loadMenuTexts+0xe60>)
 8008694:	4b76      	ldr	r3, [pc, #472]	@ (8008870 <loadMenuTexts+0xe64>)
 8008696:	4614      	mov	r4, r2
 8008698:	461d      	mov	r5, r3
 800869a:	6828      	ldr	r0, [r5, #0]
 800869c:	6869      	ldr	r1, [r5, #4]
 800869e:	68aa      	ldr	r2, [r5, #8]
 80086a0:	68eb      	ldr	r3, [r5, #12]
 80086a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086a4:	7c2b      	ldrb	r3, [r5, #16]
 80086a6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 80086a8:	4a72      	ldr	r2, [pc, #456]	@ (8008874 <loadMenuTexts+0xe68>)
 80086aa:	4b73      	ldr	r3, [pc, #460]	@ (8008878 <loadMenuTexts+0xe6c>)
 80086ac:	4614      	mov	r4, r2
 80086ae:	461d      	mov	r5, r3
 80086b0:	6828      	ldr	r0, [r5, #0]
 80086b2:	6869      	ldr	r1, [r5, #4]
 80086b4:	68aa      	ldr	r2, [r5, #8]
 80086b6:	68eb      	ldr	r3, [r5, #12]
 80086b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086ba:	7c2b      	ldrb	r3, [r5, #16]
 80086bc:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 80086be:	4a6f      	ldr	r2, [pc, #444]	@ (800887c <loadMenuTexts+0xe70>)
 80086c0:	4b6f      	ldr	r3, [pc, #444]	@ (8008880 <loadMenuTexts+0xe74>)
 80086c2:	4614      	mov	r4, r2
 80086c4:	461d      	mov	r5, r3
 80086c6:	6828      	ldr	r0, [r5, #0]
 80086c8:	6869      	ldr	r1, [r5, #4]
 80086ca:	68aa      	ldr	r2, [r5, #8]
 80086cc:	68eb      	ldr	r3, [r5, #12]
 80086ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086d0:	7c2b      	ldrb	r3, [r5, #16]
 80086d2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 80086d4:	4a6b      	ldr	r2, [pc, #428]	@ (8008884 <loadMenuTexts+0xe78>)
 80086d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <loadMenuTexts+0xe7c>)
 80086d8:	4614      	mov	r4, r2
 80086da:	461d      	mov	r5, r3
 80086dc:	6828      	ldr	r0, [r5, #0]
 80086de:	6869      	ldr	r1, [r5, #4]
 80086e0:	68aa      	ldr	r2, [r5, #8]
 80086e2:	68eb      	ldr	r3, [r5, #12]
 80086e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086e6:	7c2b      	ldrb	r3, [r5, #16]
 80086e8:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 80086ea:	4a68      	ldr	r2, [pc, #416]	@ (800888c <loadMenuTexts+0xe80>)
 80086ec:	4b68      	ldr	r3, [pc, #416]	@ (8008890 <loadMenuTexts+0xe84>)
 80086ee:	4614      	mov	r4, r2
 80086f0:	461d      	mov	r5, r3
 80086f2:	6828      	ldr	r0, [r5, #0]
 80086f4:	6869      	ldr	r1, [r5, #4]
 80086f6:	68aa      	ldr	r2, [r5, #8]
 80086f8:	68eb      	ldr	r3, [r5, #12]
 80086fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086fc:	7c2b      	ldrb	r3, [r5, #16]
 80086fe:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8008700:	4a64      	ldr	r2, [pc, #400]	@ (8008894 <loadMenuTexts+0xe88>)
 8008702:	4b65      	ldr	r3, [pc, #404]	@ (8008898 <loadMenuTexts+0xe8c>)
 8008704:	4614      	mov	r4, r2
 8008706:	461d      	mov	r5, r3
 8008708:	6828      	ldr	r0, [r5, #0]
 800870a:	6869      	ldr	r1, [r5, #4]
 800870c:	68aa      	ldr	r2, [r5, #8]
 800870e:	68eb      	ldr	r3, [r5, #12]
 8008710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008712:	7c2b      	ldrb	r3, [r5, #16]
 8008714:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8008716:	4a61      	ldr	r2, [pc, #388]	@ (800889c <loadMenuTexts+0xe90>)
 8008718:	4b61      	ldr	r3, [pc, #388]	@ (80088a0 <loadMenuTexts+0xe94>)
 800871a:	4614      	mov	r4, r2
 800871c:	461d      	mov	r5, r3
 800871e:	6828      	ldr	r0, [r5, #0]
 8008720:	6869      	ldr	r1, [r5, #4]
 8008722:	68aa      	ldr	r2, [r5, #8]
 8008724:	68eb      	ldr	r3, [r5, #12]
 8008726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008728:	7c2b      	ldrb	r3, [r5, #16]
 800872a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 800872c:	4a5d      	ldr	r2, [pc, #372]	@ (80088a4 <loadMenuTexts+0xe98>)
 800872e:	4b5e      	ldr	r3, [pc, #376]	@ (80088a8 <loadMenuTexts+0xe9c>)
 8008730:	4614      	mov	r4, r2
 8008732:	461d      	mov	r5, r3
 8008734:	6828      	ldr	r0, [r5, #0]
 8008736:	6869      	ldr	r1, [r5, #4]
 8008738:	68aa      	ldr	r2, [r5, #8]
 800873a:	68eb      	ldr	r3, [r5, #12]
 800873c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800873e:	7c2b      	ldrb	r3, [r5, #16]
 8008740:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8008742:	4a5a      	ldr	r2, [pc, #360]	@ (80088ac <loadMenuTexts+0xea0>)
 8008744:	4b5a      	ldr	r3, [pc, #360]	@ (80088b0 <loadMenuTexts+0xea4>)
 8008746:	4614      	mov	r4, r2
 8008748:	461d      	mov	r5, r3
 800874a:	6828      	ldr	r0, [r5, #0]
 800874c:	6869      	ldr	r1, [r5, #4]
 800874e:	68aa      	ldr	r2, [r5, #8]
 8008750:	68eb      	ldr	r3, [r5, #12]
 8008752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008754:	7c2b      	ldrb	r3, [r5, #16]
 8008756:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8008758:	4a56      	ldr	r2, [pc, #344]	@ (80088b4 <loadMenuTexts+0xea8>)
 800875a:	4b57      	ldr	r3, [pc, #348]	@ (80088b8 <loadMenuTexts+0xeac>)
 800875c:	4614      	mov	r4, r2
 800875e:	461d      	mov	r5, r3
 8008760:	6828      	ldr	r0, [r5, #0]
 8008762:	6869      	ldr	r1, [r5, #4]
 8008764:	68aa      	ldr	r2, [r5, #8]
 8008766:	68eb      	ldr	r3, [r5, #12]
 8008768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800876a:	7c2b      	ldrb	r3, [r5, #16]
 800876c:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 800876e:	4a53      	ldr	r2, [pc, #332]	@ (80088bc <loadMenuTexts+0xeb0>)
 8008770:	4b53      	ldr	r3, [pc, #332]	@ (80088c0 <loadMenuTexts+0xeb4>)
 8008772:	4614      	mov	r4, r2
 8008774:	461d      	mov	r5, r3
 8008776:	6828      	ldr	r0, [r5, #0]
 8008778:	6869      	ldr	r1, [r5, #4]
 800877a:	68aa      	ldr	r2, [r5, #8]
 800877c:	68eb      	ldr	r3, [r5, #12]
 800877e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008780:	7c2b      	ldrb	r3, [r5, #16]
 8008782:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8008784:	4a4f      	ldr	r2, [pc, #316]	@ (80088c4 <loadMenuTexts+0xeb8>)
 8008786:	4b50      	ldr	r3, [pc, #320]	@ (80088c8 <loadMenuTexts+0xebc>)
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	6828      	ldr	r0, [r5, #0]
 800878e:	6869      	ldr	r1, [r5, #4]
 8008790:	68aa      	ldr	r2, [r5, #8]
 8008792:	68eb      	ldr	r3, [r5, #12]
 8008794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008796:	7c2b      	ldrb	r3, [r5, #16]
 8008798:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 800879a:	4a4c      	ldr	r2, [pc, #304]	@ (80088cc <loadMenuTexts+0xec0>)
 800879c:	4b4c      	ldr	r3, [pc, #304]	@ (80088d0 <loadMenuTexts+0xec4>)
 800879e:	4614      	mov	r4, r2
 80087a0:	461d      	mov	r5, r3
 80087a2:	6828      	ldr	r0, [r5, #0]
 80087a4:	6869      	ldr	r1, [r5, #4]
 80087a6:	68aa      	ldr	r2, [r5, #8]
 80087a8:	68eb      	ldr	r3, [r5, #12]
 80087aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ac:	7c2b      	ldrb	r3, [r5, #16]
 80087ae:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 80087b0:	4a48      	ldr	r2, [pc, #288]	@ (80088d4 <loadMenuTexts+0xec8>)
 80087b2:	e091      	b.n	80088d8 <loadMenuTexts+0xecc>
 80087b4:	20001534 	.word	0x20001534
 80087b8:	20000704 	.word	0x20000704
 80087bc:	20001548 	.word	0x20001548
 80087c0:	20000718 	.word	0x20000718
 80087c4:	2000155c 	.word	0x2000155c
 80087c8:	2000072c 	.word	0x2000072c
 80087cc:	20001570 	.word	0x20001570
 80087d0:	20000740 	.word	0x20000740
 80087d4:	20001584 	.word	0x20001584
 80087d8:	20000754 	.word	0x20000754
 80087dc:	20001598 	.word	0x20001598
 80087e0:	20000768 	.word	0x20000768
 80087e4:	200015ac 	.word	0x200015ac
 80087e8:	2000077c 	.word	0x2000077c
 80087ec:	200015c0 	.word	0x200015c0
 80087f0:	20000790 	.word	0x20000790
 80087f4:	200015d4 	.word	0x200015d4
 80087f8:	200007a4 	.word	0x200007a4
 80087fc:	200015e8 	.word	0x200015e8
 8008800:	200007b8 	.word	0x200007b8
 8008804:	200015fc 	.word	0x200015fc
 8008808:	200007cc 	.word	0x200007cc
 800880c:	20001610 	.word	0x20001610
 8008810:	200007e0 	.word	0x200007e0
 8008814:	20001624 	.word	0x20001624
 8008818:	200007f4 	.word	0x200007f4
 800881c:	20001638 	.word	0x20001638
 8008820:	20000808 	.word	0x20000808
 8008824:	2000164c 	.word	0x2000164c
 8008828:	2000081c 	.word	0x2000081c
 800882c:	20001660 	.word	0x20001660
 8008830:	20000830 	.word	0x20000830
 8008834:	20001674 	.word	0x20001674
 8008838:	20000844 	.word	0x20000844
 800883c:	20001688 	.word	0x20001688
 8008840:	20000858 	.word	0x20000858
 8008844:	2000169c 	.word	0x2000169c
 8008848:	2000086c 	.word	0x2000086c
 800884c:	200016b0 	.word	0x200016b0
 8008850:	20000880 	.word	0x20000880
 8008854:	200016c4 	.word	0x200016c4
 8008858:	20000894 	.word	0x20000894
 800885c:	200016d8 	.word	0x200016d8
 8008860:	200008a8 	.word	0x200008a8
 8008864:	200016ec 	.word	0x200016ec
 8008868:	200008bc 	.word	0x200008bc
 800886c:	20001700 	.word	0x20001700
 8008870:	200008d0 	.word	0x200008d0
 8008874:	20001714 	.word	0x20001714
 8008878:	200008e4 	.word	0x200008e4
 800887c:	20001728 	.word	0x20001728
 8008880:	200008f8 	.word	0x200008f8
 8008884:	2000173c 	.word	0x2000173c
 8008888:	2000090c 	.word	0x2000090c
 800888c:	20001750 	.word	0x20001750
 8008890:	20000920 	.word	0x20000920
 8008894:	20001764 	.word	0x20001764
 8008898:	20000934 	.word	0x20000934
 800889c:	20001778 	.word	0x20001778
 80088a0:	20000948 	.word	0x20000948
 80088a4:	2000178c 	.word	0x2000178c
 80088a8:	2000095c 	.word	0x2000095c
 80088ac:	200017a0 	.word	0x200017a0
 80088b0:	20000970 	.word	0x20000970
 80088b4:	200017b4 	.word	0x200017b4
 80088b8:	20000984 	.word	0x20000984
 80088bc:	200017c8 	.word	0x200017c8
 80088c0:	20000998 	.word	0x20000998
 80088c4:	200017dc 	.word	0x200017dc
 80088c8:	200009ac 	.word	0x200009ac
 80088cc:	200017f0 	.word	0x200017f0
 80088d0:	200009c0 	.word	0x200009c0
 80088d4:	20001804 	.word	0x20001804
 80088d8:	4bc7      	ldr	r3, [pc, #796]	@ (8008bf8 <loadMenuTexts+0x11ec>)
 80088da:	4614      	mov	r4, r2
 80088dc:	461d      	mov	r5, r3
 80088de:	6828      	ldr	r0, [r5, #0]
 80088e0:	6869      	ldr	r1, [r5, #4]
 80088e2:	68aa      	ldr	r2, [r5, #8]
 80088e4:	68eb      	ldr	r3, [r5, #12]
 80088e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088e8:	7c2b      	ldrb	r3, [r5, #16]
 80088ea:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 80088ec:	4ac3      	ldr	r2, [pc, #780]	@ (8008bfc <loadMenuTexts+0x11f0>)
 80088ee:	4bc4      	ldr	r3, [pc, #784]	@ (8008c00 <loadMenuTexts+0x11f4>)
 80088f0:	4614      	mov	r4, r2
 80088f2:	461d      	mov	r5, r3
 80088f4:	6828      	ldr	r0, [r5, #0]
 80088f6:	6869      	ldr	r1, [r5, #4]
 80088f8:	68aa      	ldr	r2, [r5, #8]
 80088fa:	68eb      	ldr	r3, [r5, #12]
 80088fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088fe:	7c2b      	ldrb	r3, [r5, #16]
 8008900:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8008902:	4ac0      	ldr	r2, [pc, #768]	@ (8008c04 <loadMenuTexts+0x11f8>)
 8008904:	4bc0      	ldr	r3, [pc, #768]	@ (8008c08 <loadMenuTexts+0x11fc>)
 8008906:	4614      	mov	r4, r2
 8008908:	461d      	mov	r5, r3
 800890a:	6828      	ldr	r0, [r5, #0]
 800890c:	6869      	ldr	r1, [r5, #4]
 800890e:	68aa      	ldr	r2, [r5, #8]
 8008910:	68eb      	ldr	r3, [r5, #12]
 8008912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008914:	7c2b      	ldrb	r3, [r5, #16]
 8008916:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8008918:	4abc      	ldr	r2, [pc, #752]	@ (8008c0c <loadMenuTexts+0x1200>)
 800891a:	4bbd      	ldr	r3, [pc, #756]	@ (8008c10 <loadMenuTexts+0x1204>)
 800891c:	4614      	mov	r4, r2
 800891e:	461d      	mov	r5, r3
 8008920:	6828      	ldr	r0, [r5, #0]
 8008922:	6869      	ldr	r1, [r5, #4]
 8008924:	68aa      	ldr	r2, [r5, #8]
 8008926:	68eb      	ldr	r3, [r5, #12]
 8008928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800892a:	7c2b      	ldrb	r3, [r5, #16]
 800892c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800892e:	4ab9      	ldr	r2, [pc, #740]	@ (8008c14 <loadMenuTexts+0x1208>)
 8008930:	4bb9      	ldr	r3, [pc, #740]	@ (8008c18 <loadMenuTexts+0x120c>)
 8008932:	4614      	mov	r4, r2
 8008934:	461d      	mov	r5, r3
 8008936:	6828      	ldr	r0, [r5, #0]
 8008938:	6869      	ldr	r1, [r5, #4]
 800893a:	68aa      	ldr	r2, [r5, #8]
 800893c:	68eb      	ldr	r3, [r5, #12]
 800893e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008940:	7c2b      	ldrb	r3, [r5, #16]
 8008942:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8008944:	4ab5      	ldr	r2, [pc, #724]	@ (8008c1c <loadMenuTexts+0x1210>)
 8008946:	4bb6      	ldr	r3, [pc, #728]	@ (8008c20 <loadMenuTexts+0x1214>)
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	6828      	ldr	r0, [r5, #0]
 800894e:	6869      	ldr	r1, [r5, #4]
 8008950:	68aa      	ldr	r2, [r5, #8]
 8008952:	68eb      	ldr	r3, [r5, #12]
 8008954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008956:	7c2b      	ldrb	r3, [r5, #16]
 8008958:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 800895a:	4ab2      	ldr	r2, [pc, #712]	@ (8008c24 <loadMenuTexts+0x1218>)
 800895c:	4bb2      	ldr	r3, [pc, #712]	@ (8008c28 <loadMenuTexts+0x121c>)
 800895e:	4614      	mov	r4, r2
 8008960:	461d      	mov	r5, r3
 8008962:	6828      	ldr	r0, [r5, #0]
 8008964:	6869      	ldr	r1, [r5, #4]
 8008966:	68aa      	ldr	r2, [r5, #8]
 8008968:	68eb      	ldr	r3, [r5, #12]
 800896a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800896c:	7c2b      	ldrb	r3, [r5, #16]
 800896e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8008970:	4aae      	ldr	r2, [pc, #696]	@ (8008c2c <loadMenuTexts+0x1220>)
 8008972:	4baf      	ldr	r3, [pc, #700]	@ (8008c30 <loadMenuTexts+0x1224>)
 8008974:	4614      	mov	r4, r2
 8008976:	461d      	mov	r5, r3
 8008978:	6828      	ldr	r0, [r5, #0]
 800897a:	6869      	ldr	r1, [r5, #4]
 800897c:	68aa      	ldr	r2, [r5, #8]
 800897e:	68eb      	ldr	r3, [r5, #12]
 8008980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008982:	7c2b      	ldrb	r3, [r5, #16]
 8008984:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8008986:	4aab      	ldr	r2, [pc, #684]	@ (8008c34 <loadMenuTexts+0x1228>)
 8008988:	4bab      	ldr	r3, [pc, #684]	@ (8008c38 <loadMenuTexts+0x122c>)
 800898a:	4614      	mov	r4, r2
 800898c:	461d      	mov	r5, r3
 800898e:	6828      	ldr	r0, [r5, #0]
 8008990:	6869      	ldr	r1, [r5, #4]
 8008992:	68aa      	ldr	r2, [r5, #8]
 8008994:	68eb      	ldr	r3, [r5, #12]
 8008996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008998:	7c2b      	ldrb	r3, [r5, #16]
 800899a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 800899c:	4aa7      	ldr	r2, [pc, #668]	@ (8008c3c <loadMenuTexts+0x1230>)
 800899e:	4ba8      	ldr	r3, [pc, #672]	@ (8008c40 <loadMenuTexts+0x1234>)
 80089a0:	4614      	mov	r4, r2
 80089a2:	461d      	mov	r5, r3
 80089a4:	6828      	ldr	r0, [r5, #0]
 80089a6:	6869      	ldr	r1, [r5, #4]
 80089a8:	68aa      	ldr	r2, [r5, #8]
 80089aa:	68eb      	ldr	r3, [r5, #12]
 80089ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ae:	7c2b      	ldrb	r3, [r5, #16]
 80089b0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80089b2:	4aa4      	ldr	r2, [pc, #656]	@ (8008c44 <loadMenuTexts+0x1238>)
 80089b4:	4ba4      	ldr	r3, [pc, #656]	@ (8008c48 <loadMenuTexts+0x123c>)
 80089b6:	4614      	mov	r4, r2
 80089b8:	461d      	mov	r5, r3
 80089ba:	6828      	ldr	r0, [r5, #0]
 80089bc:	6869      	ldr	r1, [r5, #4]
 80089be:	68aa      	ldr	r2, [r5, #8]
 80089c0:	68eb      	ldr	r3, [r5, #12]
 80089c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089c4:	7c2b      	ldrb	r3, [r5, #16]
 80089c6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80089c8:	4aa0      	ldr	r2, [pc, #640]	@ (8008c4c <loadMenuTexts+0x1240>)
 80089ca:	4ba1      	ldr	r3, [pc, #644]	@ (8008c50 <loadMenuTexts+0x1244>)
 80089cc:	4614      	mov	r4, r2
 80089ce:	461d      	mov	r5, r3
 80089d0:	6828      	ldr	r0, [r5, #0]
 80089d2:	6869      	ldr	r1, [r5, #4]
 80089d4:	68aa      	ldr	r2, [r5, #8]
 80089d6:	68eb      	ldr	r3, [r5, #12]
 80089d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089da:	7c2b      	ldrb	r3, [r5, #16]
 80089dc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 80089de:	4a9d      	ldr	r2, [pc, #628]	@ (8008c54 <loadMenuTexts+0x1248>)
 80089e0:	4b9d      	ldr	r3, [pc, #628]	@ (8008c58 <loadMenuTexts+0x124c>)
 80089e2:	4614      	mov	r4, r2
 80089e4:	461d      	mov	r5, r3
 80089e6:	6828      	ldr	r0, [r5, #0]
 80089e8:	6869      	ldr	r1, [r5, #4]
 80089ea:	68aa      	ldr	r2, [r5, #8]
 80089ec:	68eb      	ldr	r3, [r5, #12]
 80089ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089f0:	7c2b      	ldrb	r3, [r5, #16]
 80089f2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 80089f4:	4a99      	ldr	r2, [pc, #612]	@ (8008c5c <loadMenuTexts+0x1250>)
 80089f6:	4b9a      	ldr	r3, [pc, #616]	@ (8008c60 <loadMenuTexts+0x1254>)
 80089f8:	4614      	mov	r4, r2
 80089fa:	461d      	mov	r5, r3
 80089fc:	6828      	ldr	r0, [r5, #0]
 80089fe:	6869      	ldr	r1, [r5, #4]
 8008a00:	68aa      	ldr	r2, [r5, #8]
 8008a02:	68eb      	ldr	r3, [r5, #12]
 8008a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a06:	7c2b      	ldrb	r3, [r5, #16]
 8008a08:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8008a0a:	4a96      	ldr	r2, [pc, #600]	@ (8008c64 <loadMenuTexts+0x1258>)
 8008a0c:	4b96      	ldr	r3, [pc, #600]	@ (8008c68 <loadMenuTexts+0x125c>)
 8008a0e:	4614      	mov	r4, r2
 8008a10:	461d      	mov	r5, r3
 8008a12:	6828      	ldr	r0, [r5, #0]
 8008a14:	6869      	ldr	r1, [r5, #4]
 8008a16:	68aa      	ldr	r2, [r5, #8]
 8008a18:	68eb      	ldr	r3, [r5, #12]
 8008a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a1c:	7c2b      	ldrb	r3, [r5, #16]
 8008a1e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8008a20:	4a92      	ldr	r2, [pc, #584]	@ (8008c6c <loadMenuTexts+0x1260>)
 8008a22:	4b93      	ldr	r3, [pc, #588]	@ (8008c70 <loadMenuTexts+0x1264>)
 8008a24:	4614      	mov	r4, r2
 8008a26:	461d      	mov	r5, r3
 8008a28:	6828      	ldr	r0, [r5, #0]
 8008a2a:	6869      	ldr	r1, [r5, #4]
 8008a2c:	68aa      	ldr	r2, [r5, #8]
 8008a2e:	68eb      	ldr	r3, [r5, #12]
 8008a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a32:	7c2b      	ldrb	r3, [r5, #16]
 8008a34:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8008a36:	4a8f      	ldr	r2, [pc, #572]	@ (8008c74 <loadMenuTexts+0x1268>)
 8008a38:	4b8f      	ldr	r3, [pc, #572]	@ (8008c78 <loadMenuTexts+0x126c>)
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	461d      	mov	r5, r3
 8008a3e:	6828      	ldr	r0, [r5, #0]
 8008a40:	6869      	ldr	r1, [r5, #4]
 8008a42:	68aa      	ldr	r2, [r5, #8]
 8008a44:	68eb      	ldr	r3, [r5, #12]
 8008a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a48:	7c2b      	ldrb	r3, [r5, #16]
 8008a4a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8008a4c:	4a8b      	ldr	r2, [pc, #556]	@ (8008c7c <loadMenuTexts+0x1270>)
 8008a4e:	4b8c      	ldr	r3, [pc, #560]	@ (8008c80 <loadMenuTexts+0x1274>)
 8008a50:	4614      	mov	r4, r2
 8008a52:	461d      	mov	r5, r3
 8008a54:	6828      	ldr	r0, [r5, #0]
 8008a56:	6869      	ldr	r1, [r5, #4]
 8008a58:	68aa      	ldr	r2, [r5, #8]
 8008a5a:	68eb      	ldr	r3, [r5, #12]
 8008a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a5e:	7c2b      	ldrb	r3, [r5, #16]
 8008a60:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8008a62:	4a88      	ldr	r2, [pc, #544]	@ (8008c84 <loadMenuTexts+0x1278>)
 8008a64:	4b88      	ldr	r3, [pc, #544]	@ (8008c88 <loadMenuTexts+0x127c>)
 8008a66:	4614      	mov	r4, r2
 8008a68:	461d      	mov	r5, r3
 8008a6a:	6828      	ldr	r0, [r5, #0]
 8008a6c:	6869      	ldr	r1, [r5, #4]
 8008a6e:	68aa      	ldr	r2, [r5, #8]
 8008a70:	68eb      	ldr	r3, [r5, #12]
 8008a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a74:	7c2b      	ldrb	r3, [r5, #16]
 8008a76:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8008a78:	4a84      	ldr	r2, [pc, #528]	@ (8008c8c <loadMenuTexts+0x1280>)
 8008a7a:	4b85      	ldr	r3, [pc, #532]	@ (8008c90 <loadMenuTexts+0x1284>)
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	461d      	mov	r5, r3
 8008a80:	6828      	ldr	r0, [r5, #0]
 8008a82:	6869      	ldr	r1, [r5, #4]
 8008a84:	68aa      	ldr	r2, [r5, #8]
 8008a86:	68eb      	ldr	r3, [r5, #12]
 8008a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a8a:	7c2b      	ldrb	r3, [r5, #16]
 8008a8c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8008a8e:	4a81      	ldr	r2, [pc, #516]	@ (8008c94 <loadMenuTexts+0x1288>)
 8008a90:	4b81      	ldr	r3, [pc, #516]	@ (8008c98 <loadMenuTexts+0x128c>)
 8008a92:	4614      	mov	r4, r2
 8008a94:	461d      	mov	r5, r3
 8008a96:	6828      	ldr	r0, [r5, #0]
 8008a98:	6869      	ldr	r1, [r5, #4]
 8008a9a:	68aa      	ldr	r2, [r5, #8]
 8008a9c:	68eb      	ldr	r3, [r5, #12]
 8008a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aa0:	7c2b      	ldrb	r3, [r5, #16]
 8008aa2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8008aa4:	4a7d      	ldr	r2, [pc, #500]	@ (8008c9c <loadMenuTexts+0x1290>)
 8008aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8008ca0 <loadMenuTexts+0x1294>)
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	461d      	mov	r5, r3
 8008aac:	6828      	ldr	r0, [r5, #0]
 8008aae:	6869      	ldr	r1, [r5, #4]
 8008ab0:	68aa      	ldr	r2, [r5, #8]
 8008ab2:	68eb      	ldr	r3, [r5, #12]
 8008ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ab6:	7c2b      	ldrb	r3, [r5, #16]
 8008ab8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8008aba:	4a7a      	ldr	r2, [pc, #488]	@ (8008ca4 <loadMenuTexts+0x1298>)
 8008abc:	4b7a      	ldr	r3, [pc, #488]	@ (8008ca8 <loadMenuTexts+0x129c>)
 8008abe:	4614      	mov	r4, r2
 8008ac0:	461d      	mov	r5, r3
 8008ac2:	6828      	ldr	r0, [r5, #0]
 8008ac4:	6869      	ldr	r1, [r5, #4]
 8008ac6:	68aa      	ldr	r2, [r5, #8]
 8008ac8:	68eb      	ldr	r3, [r5, #12]
 8008aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008acc:	7c2b      	ldrb	r3, [r5, #16]
 8008ace:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8008ad0:	4a76      	ldr	r2, [pc, #472]	@ (8008cac <loadMenuTexts+0x12a0>)
 8008ad2:	4b77      	ldr	r3, [pc, #476]	@ (8008cb0 <loadMenuTexts+0x12a4>)
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	461d      	mov	r5, r3
 8008ad8:	6828      	ldr	r0, [r5, #0]
 8008ada:	6869      	ldr	r1, [r5, #4]
 8008adc:	68aa      	ldr	r2, [r5, #8]
 8008ade:	68eb      	ldr	r3, [r5, #12]
 8008ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ae2:	7c2b      	ldrb	r3, [r5, #16]
 8008ae4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8008ae6:	4a73      	ldr	r2, [pc, #460]	@ (8008cb4 <loadMenuTexts+0x12a8>)
 8008ae8:	4b73      	ldr	r3, [pc, #460]	@ (8008cb8 <loadMenuTexts+0x12ac>)
 8008aea:	4614      	mov	r4, r2
 8008aec:	461d      	mov	r5, r3
 8008aee:	6828      	ldr	r0, [r5, #0]
 8008af0:	6869      	ldr	r1, [r5, #4]
 8008af2:	68aa      	ldr	r2, [r5, #8]
 8008af4:	68eb      	ldr	r3, [r5, #12]
 8008af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008af8:	7c2b      	ldrb	r3, [r5, #16]
 8008afa:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8008afc:	4a6f      	ldr	r2, [pc, #444]	@ (8008cbc <loadMenuTexts+0x12b0>)
 8008afe:	4b70      	ldr	r3, [pc, #448]	@ (8008cc0 <loadMenuTexts+0x12b4>)
 8008b00:	4614      	mov	r4, r2
 8008b02:	461d      	mov	r5, r3
 8008b04:	6828      	ldr	r0, [r5, #0]
 8008b06:	6869      	ldr	r1, [r5, #4]
 8008b08:	68aa      	ldr	r2, [r5, #8]
 8008b0a:	68eb      	ldr	r3, [r5, #12]
 8008b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b0e:	7c2b      	ldrb	r3, [r5, #16]
 8008b10:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8008b12:	4a6c      	ldr	r2, [pc, #432]	@ (8008cc4 <loadMenuTexts+0x12b8>)
 8008b14:	4b6c      	ldr	r3, [pc, #432]	@ (8008cc8 <loadMenuTexts+0x12bc>)
 8008b16:	4614      	mov	r4, r2
 8008b18:	461d      	mov	r5, r3
 8008b1a:	6828      	ldr	r0, [r5, #0]
 8008b1c:	6869      	ldr	r1, [r5, #4]
 8008b1e:	68aa      	ldr	r2, [r5, #8]
 8008b20:	68eb      	ldr	r3, [r5, #12]
 8008b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b24:	7c2b      	ldrb	r3, [r5, #16]
 8008b26:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8008b28:	4a68      	ldr	r2, [pc, #416]	@ (8008ccc <loadMenuTexts+0x12c0>)
 8008b2a:	4b69      	ldr	r3, [pc, #420]	@ (8008cd0 <loadMenuTexts+0x12c4>)
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	461d      	mov	r5, r3
 8008b30:	6828      	ldr	r0, [r5, #0]
 8008b32:	6869      	ldr	r1, [r5, #4]
 8008b34:	68aa      	ldr	r2, [r5, #8]
 8008b36:	68eb      	ldr	r3, [r5, #12]
 8008b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b3a:	7c2b      	ldrb	r3, [r5, #16]
 8008b3c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8008b3e:	4a65      	ldr	r2, [pc, #404]	@ (8008cd4 <loadMenuTexts+0x12c8>)
 8008b40:	4b65      	ldr	r3, [pc, #404]	@ (8008cd8 <loadMenuTexts+0x12cc>)
 8008b42:	4614      	mov	r4, r2
 8008b44:	461d      	mov	r5, r3
 8008b46:	6828      	ldr	r0, [r5, #0]
 8008b48:	6869      	ldr	r1, [r5, #4]
 8008b4a:	68aa      	ldr	r2, [r5, #8]
 8008b4c:	68eb      	ldr	r3, [r5, #12]
 8008b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b50:	7c2b      	ldrb	r3, [r5, #16]
 8008b52:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8008b54:	4a61      	ldr	r2, [pc, #388]	@ (8008cdc <loadMenuTexts+0x12d0>)
 8008b56:	4b62      	ldr	r3, [pc, #392]	@ (8008ce0 <loadMenuTexts+0x12d4>)
 8008b58:	4614      	mov	r4, r2
 8008b5a:	461d      	mov	r5, r3
 8008b5c:	6828      	ldr	r0, [r5, #0]
 8008b5e:	6869      	ldr	r1, [r5, #4]
 8008b60:	68aa      	ldr	r2, [r5, #8]
 8008b62:	68eb      	ldr	r3, [r5, #12]
 8008b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b66:	7c2b      	ldrb	r3, [r5, #16]
 8008b68:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8008b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8008ce4 <loadMenuTexts+0x12d8>)
 8008b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8008ce8 <loadMenuTexts+0x12dc>)
 8008b6e:	4614      	mov	r4, r2
 8008b70:	461d      	mov	r5, r3
 8008b72:	6828      	ldr	r0, [r5, #0]
 8008b74:	6869      	ldr	r1, [r5, #4]
 8008b76:	68aa      	ldr	r2, [r5, #8]
 8008b78:	68eb      	ldr	r3, [r5, #12]
 8008b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b7c:	7c2b      	ldrb	r3, [r5, #16]
 8008b7e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8008b80:	4a5a      	ldr	r2, [pc, #360]	@ (8008cec <loadMenuTexts+0x12e0>)
 8008b82:	4b5b      	ldr	r3, [pc, #364]	@ (8008cf0 <loadMenuTexts+0x12e4>)
 8008b84:	4614      	mov	r4, r2
 8008b86:	461d      	mov	r5, r3
 8008b88:	6828      	ldr	r0, [r5, #0]
 8008b8a:	6869      	ldr	r1, [r5, #4]
 8008b8c:	68aa      	ldr	r2, [r5, #8]
 8008b8e:	68eb      	ldr	r3, [r5, #12]
 8008b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b92:	7c2b      	ldrb	r3, [r5, #16]
 8008b94:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8008b96:	4a57      	ldr	r2, [pc, #348]	@ (8008cf4 <loadMenuTexts+0x12e8>)
 8008b98:	4b57      	ldr	r3, [pc, #348]	@ (8008cf8 <loadMenuTexts+0x12ec>)
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	461d      	mov	r5, r3
 8008b9e:	6828      	ldr	r0, [r5, #0]
 8008ba0:	6869      	ldr	r1, [r5, #4]
 8008ba2:	68aa      	ldr	r2, [r5, #8]
 8008ba4:	68eb      	ldr	r3, [r5, #12]
 8008ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ba8:	7c2b      	ldrb	r3, [r5, #16]
 8008baa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8008bac:	4a53      	ldr	r2, [pc, #332]	@ (8008cfc <loadMenuTexts+0x12f0>)
 8008bae:	4b54      	ldr	r3, [pc, #336]	@ (8008d00 <loadMenuTexts+0x12f4>)
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	6828      	ldr	r0, [r5, #0]
 8008bb6:	6869      	ldr	r1, [r5, #4]
 8008bb8:	68aa      	ldr	r2, [r5, #8]
 8008bba:	68eb      	ldr	r3, [r5, #12]
 8008bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bbe:	7c2b      	ldrb	r3, [r5, #16]
 8008bc0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8008bc2:	4a50      	ldr	r2, [pc, #320]	@ (8008d04 <loadMenuTexts+0x12f8>)
 8008bc4:	4b50      	ldr	r3, [pc, #320]	@ (8008d08 <loadMenuTexts+0x12fc>)
 8008bc6:	4614      	mov	r4, r2
 8008bc8:	461d      	mov	r5, r3
 8008bca:	6828      	ldr	r0, [r5, #0]
 8008bcc:	6869      	ldr	r1, [r5, #4]
 8008bce:	68aa      	ldr	r2, [r5, #8]
 8008bd0:	68eb      	ldr	r3, [r5, #12]
 8008bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bd4:	7c2b      	ldrb	r3, [r5, #16]
 8008bd6:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8008bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8008d0c <loadMenuTexts+0x1300>)
 8008bda:	4b4d      	ldr	r3, [pc, #308]	@ (8008d10 <loadMenuTexts+0x1304>)
 8008bdc:	4614      	mov	r4, r2
 8008bde:	461d      	mov	r5, r3
 8008be0:	6828      	ldr	r0, [r5, #0]
 8008be2:	6869      	ldr	r1, [r5, #4]
 8008be4:	68aa      	ldr	r2, [r5, #8]
 8008be6:	68eb      	ldr	r3, [r5, #12]
 8008be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bea:	7c2b      	ldrb	r3, [r5, #16]
 8008bec:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8008bee:	4a49      	ldr	r2, [pc, #292]	@ (8008d14 <loadMenuTexts+0x1308>)
 8008bf0:	4b49      	ldr	r3, [pc, #292]	@ (8008d18 <loadMenuTexts+0x130c>)
 8008bf2:	4614      	mov	r4, r2
 8008bf4:	461d      	mov	r5, r3
 8008bf6:	e091      	b.n	8008d1c <loadMenuTexts+0x1310>
 8008bf8:	200009d4 	.word	0x200009d4
 8008bfc:	20001818 	.word	0x20001818
 8008c00:	200009e8 	.word	0x200009e8
 8008c04:	2000182c 	.word	0x2000182c
 8008c08:	200009fc 	.word	0x200009fc
 8008c0c:	20001840 	.word	0x20001840
 8008c10:	20000a10 	.word	0x20000a10
 8008c14:	20001854 	.word	0x20001854
 8008c18:	20000a24 	.word	0x20000a24
 8008c1c:	20001868 	.word	0x20001868
 8008c20:	20000a38 	.word	0x20000a38
 8008c24:	2000187c 	.word	0x2000187c
 8008c28:	20000a4c 	.word	0x20000a4c
 8008c2c:	20001890 	.word	0x20001890
 8008c30:	20000a60 	.word	0x20000a60
 8008c34:	200018a4 	.word	0x200018a4
 8008c38:	20000a74 	.word	0x20000a74
 8008c3c:	200018b8 	.word	0x200018b8
 8008c40:	20000a88 	.word	0x20000a88
 8008c44:	200018cc 	.word	0x200018cc
 8008c48:	20000a9c 	.word	0x20000a9c
 8008c4c:	200018e0 	.word	0x200018e0
 8008c50:	20000ab0 	.word	0x20000ab0
 8008c54:	200018f4 	.word	0x200018f4
 8008c58:	20000ac4 	.word	0x20000ac4
 8008c5c:	20001908 	.word	0x20001908
 8008c60:	20000ad8 	.word	0x20000ad8
 8008c64:	2000191c 	.word	0x2000191c
 8008c68:	20000aec 	.word	0x20000aec
 8008c6c:	20001930 	.word	0x20001930
 8008c70:	20000b00 	.word	0x20000b00
 8008c74:	20001944 	.word	0x20001944
 8008c78:	20000b14 	.word	0x20000b14
 8008c7c:	20001958 	.word	0x20001958
 8008c80:	20000b28 	.word	0x20000b28
 8008c84:	2000196c 	.word	0x2000196c
 8008c88:	20000b3c 	.word	0x20000b3c
 8008c8c:	20001980 	.word	0x20001980
 8008c90:	20000b50 	.word	0x20000b50
 8008c94:	20001994 	.word	0x20001994
 8008c98:	20000b64 	.word	0x20000b64
 8008c9c:	200019a8 	.word	0x200019a8
 8008ca0:	20000b78 	.word	0x20000b78
 8008ca4:	200019bc 	.word	0x200019bc
 8008ca8:	20000b8c 	.word	0x20000b8c
 8008cac:	200019d0 	.word	0x200019d0
 8008cb0:	20000ba0 	.word	0x20000ba0
 8008cb4:	200019e4 	.word	0x200019e4
 8008cb8:	20000bb4 	.word	0x20000bb4
 8008cbc:	200019f8 	.word	0x200019f8
 8008cc0:	20000bc8 	.word	0x20000bc8
 8008cc4:	20001a0c 	.word	0x20001a0c
 8008cc8:	20000bdc 	.word	0x20000bdc
 8008ccc:	20001a20 	.word	0x20001a20
 8008cd0:	20000bf0 	.word	0x20000bf0
 8008cd4:	20001a34 	.word	0x20001a34
 8008cd8:	20000c04 	.word	0x20000c04
 8008cdc:	20001a48 	.word	0x20001a48
 8008ce0:	20000c18 	.word	0x20000c18
 8008ce4:	20001a5c 	.word	0x20001a5c
 8008ce8:	20000c2c 	.word	0x20000c2c
 8008cec:	20001a70 	.word	0x20001a70
 8008cf0:	20000c40 	.word	0x20000c40
 8008cf4:	20001a84 	.word	0x20001a84
 8008cf8:	20000c54 	.word	0x20000c54
 8008cfc:	20001a98 	.word	0x20001a98
 8008d00:	20000c68 	.word	0x20000c68
 8008d04:	20001aac 	.word	0x20001aac
 8008d08:	20000cf4 	.word	0x20000cf4
 8008d0c:	20001ac0 	.word	0x20001ac0
 8008d10:	20000d08 	.word	0x20000d08
 8008d14:	20001ad4 	.word	0x20001ad4
 8008d18:	20000ccc 	.word	0x20000ccc
 8008d1c:	6828      	ldr	r0, [r5, #0]
 8008d1e:	6869      	ldr	r1, [r5, #4]
 8008d20:	68aa      	ldr	r2, [r5, #8]
 8008d22:	68eb      	ldr	r3, [r5, #12]
 8008d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d26:	7c2b      	ldrb	r3, [r5, #16]
 8008d28:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8008d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8008e98 <loadMenuTexts+0x148c>)
 8008d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8008e9c <loadMenuTexts+0x1490>)
 8008d2e:	4614      	mov	r4, r2
 8008d30:	461d      	mov	r5, r3
 8008d32:	6828      	ldr	r0, [r5, #0]
 8008d34:	6869      	ldr	r1, [r5, #4]
 8008d36:	68aa      	ldr	r2, [r5, #8]
 8008d38:	68eb      	ldr	r3, [r5, #12]
 8008d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d3c:	7c2b      	ldrb	r3, [r5, #16]
 8008d3e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8008d40:	4a57      	ldr	r2, [pc, #348]	@ (8008ea0 <loadMenuTexts+0x1494>)
 8008d42:	4b58      	ldr	r3, [pc, #352]	@ (8008ea4 <loadMenuTexts+0x1498>)
 8008d44:	4614      	mov	r4, r2
 8008d46:	461d      	mov	r5, r3
 8008d48:	6828      	ldr	r0, [r5, #0]
 8008d4a:	6869      	ldr	r1, [r5, #4]
 8008d4c:	68aa      	ldr	r2, [r5, #8]
 8008d4e:	68eb      	ldr	r3, [r5, #12]
 8008d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d52:	7c2b      	ldrb	r3, [r5, #16]
 8008d54:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8008d56:	4a54      	ldr	r2, [pc, #336]	@ (8008ea8 <loadMenuTexts+0x149c>)
 8008d58:	4b54      	ldr	r3, [pc, #336]	@ (8008eac <loadMenuTexts+0x14a0>)
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	461d      	mov	r5, r3
 8008d5e:	6828      	ldr	r0, [r5, #0]
 8008d60:	6869      	ldr	r1, [r5, #4]
 8008d62:	68aa      	ldr	r2, [r5, #8]
 8008d64:	68eb      	ldr	r3, [r5, #12]
 8008d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d68:	7c2b      	ldrb	r3, [r5, #16]
 8008d6a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8008d6c:	4a50      	ldr	r2, [pc, #320]	@ (8008eb0 <loadMenuTexts+0x14a4>)
 8008d6e:	4b51      	ldr	r3, [pc, #324]	@ (8008eb4 <loadMenuTexts+0x14a8>)
 8008d70:	4614      	mov	r4, r2
 8008d72:	461d      	mov	r5, r3
 8008d74:	6828      	ldr	r0, [r5, #0]
 8008d76:	6869      	ldr	r1, [r5, #4]
 8008d78:	68aa      	ldr	r2, [r5, #8]
 8008d7a:	68eb      	ldr	r3, [r5, #12]
 8008d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d7e:	7c2b      	ldrb	r3, [r5, #16]
 8008d80:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 8008d82:	4a4d      	ldr	r2, [pc, #308]	@ (8008eb8 <loadMenuTexts+0x14ac>)
 8008d84:	4b4d      	ldr	r3, [pc, #308]	@ (8008ebc <loadMenuTexts+0x14b0>)
 8008d86:	4614      	mov	r4, r2
 8008d88:	461d      	mov	r5, r3
 8008d8a:	6828      	ldr	r0, [r5, #0]
 8008d8c:	6869      	ldr	r1, [r5, #4]
 8008d8e:	68aa      	ldr	r2, [r5, #8]
 8008d90:	68eb      	ldr	r3, [r5, #12]
 8008d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d94:	7c2b      	ldrb	r3, [r5, #16]
 8008d96:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8008d98:	4a49      	ldr	r2, [pc, #292]	@ (8008ec0 <loadMenuTexts+0x14b4>)
 8008d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8008ec4 <loadMenuTexts+0x14b8>)
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	461d      	mov	r5, r3
 8008da0:	6828      	ldr	r0, [r5, #0]
 8008da2:	6869      	ldr	r1, [r5, #4]
 8008da4:	68aa      	ldr	r2, [r5, #8]
 8008da6:	68eb      	ldr	r3, [r5, #12]
 8008da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008daa:	7c2b      	ldrb	r3, [r5, #16]
 8008dac:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8008dae:	4a46      	ldr	r2, [pc, #280]	@ (8008ec8 <loadMenuTexts+0x14bc>)
 8008db0:	4b46      	ldr	r3, [pc, #280]	@ (8008ecc <loadMenuTexts+0x14c0>)
 8008db2:	4614      	mov	r4, r2
 8008db4:	461d      	mov	r5, r3
 8008db6:	6828      	ldr	r0, [r5, #0]
 8008db8:	6869      	ldr	r1, [r5, #4]
 8008dba:	68aa      	ldr	r2, [r5, #8]
 8008dbc:	68eb      	ldr	r3, [r5, #12]
 8008dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dc0:	7c2b      	ldrb	r3, [r5, #16]
 8008dc2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8008dc4:	4a42      	ldr	r2, [pc, #264]	@ (8008ed0 <loadMenuTexts+0x14c4>)
 8008dc6:	4b43      	ldr	r3, [pc, #268]	@ (8008ed4 <loadMenuTexts+0x14c8>)
 8008dc8:	4614      	mov	r4, r2
 8008dca:	461d      	mov	r5, r3
 8008dcc:	6828      	ldr	r0, [r5, #0]
 8008dce:	6869      	ldr	r1, [r5, #4]
 8008dd0:	68aa      	ldr	r2, [r5, #8]
 8008dd2:	68eb      	ldr	r3, [r5, #12]
 8008dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd6:	7c2b      	ldrb	r3, [r5, #16]
 8008dd8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8008dda:	4a3f      	ldr	r2, [pc, #252]	@ (8008ed8 <loadMenuTexts+0x14cc>)
 8008ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8008edc <loadMenuTexts+0x14d0>)
 8008dde:	4614      	mov	r4, r2
 8008de0:	461d      	mov	r5, r3
 8008de2:	6828      	ldr	r0, [r5, #0]
 8008de4:	6869      	ldr	r1, [r5, #4]
 8008de6:	68aa      	ldr	r2, [r5, #8]
 8008de8:	68eb      	ldr	r3, [r5, #12]
 8008dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dec:	7c2b      	ldrb	r3, [r5, #16]
 8008dee:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8008df0:	4a3b      	ldr	r2, [pc, #236]	@ (8008ee0 <loadMenuTexts+0x14d4>)
 8008df2:	4b3c      	ldr	r3, [pc, #240]	@ (8008ee4 <loadMenuTexts+0x14d8>)
 8008df4:	4614      	mov	r4, r2
 8008df6:	461d      	mov	r5, r3
 8008df8:	6828      	ldr	r0, [r5, #0]
 8008dfa:	6869      	ldr	r1, [r5, #4]
 8008dfc:	68aa      	ldr	r2, [r5, #8]
 8008dfe:	68eb      	ldr	r3, [r5, #12]
 8008e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e02:	7c2b      	ldrb	r3, [r5, #16]
 8008e04:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8008e06:	4a38      	ldr	r2, [pc, #224]	@ (8008ee8 <loadMenuTexts+0x14dc>)
 8008e08:	4b38      	ldr	r3, [pc, #224]	@ (8008eec <loadMenuTexts+0x14e0>)
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	461d      	mov	r5, r3
 8008e0e:	6828      	ldr	r0, [r5, #0]
 8008e10:	6869      	ldr	r1, [r5, #4]
 8008e12:	68aa      	ldr	r2, [r5, #8]
 8008e14:	68eb      	ldr	r3, [r5, #12]
 8008e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e18:	7c2b      	ldrb	r3, [r5, #16]
 8008e1a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8008e1c:	4a34      	ldr	r2, [pc, #208]	@ (8008ef0 <loadMenuTexts+0x14e4>)
 8008e1e:	4b35      	ldr	r3, [pc, #212]	@ (8008ef4 <loadMenuTexts+0x14e8>)
 8008e20:	4614      	mov	r4, r2
 8008e22:	461d      	mov	r5, r3
 8008e24:	6828      	ldr	r0, [r5, #0]
 8008e26:	6869      	ldr	r1, [r5, #4]
 8008e28:	68aa      	ldr	r2, [r5, #8]
 8008e2a:	68eb      	ldr	r3, [r5, #12]
 8008e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e2e:	7c2b      	ldrb	r3, [r5, #16]
 8008e30:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8008e32:	4a31      	ldr	r2, [pc, #196]	@ (8008ef8 <loadMenuTexts+0x14ec>)
 8008e34:	4b31      	ldr	r3, [pc, #196]	@ (8008efc <loadMenuTexts+0x14f0>)
 8008e36:	4614      	mov	r4, r2
 8008e38:	461d      	mov	r5, r3
 8008e3a:	6828      	ldr	r0, [r5, #0]
 8008e3c:	6869      	ldr	r1, [r5, #4]
 8008e3e:	68aa      	ldr	r2, [r5, #8]
 8008e40:	68eb      	ldr	r3, [r5, #12]
 8008e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e44:	7c2b      	ldrb	r3, [r5, #16]
 8008e46:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8008e48:	4a2d      	ldr	r2, [pc, #180]	@ (8008f00 <loadMenuTexts+0x14f4>)
 8008e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8008f04 <loadMenuTexts+0x14f8>)
 8008e4c:	4614      	mov	r4, r2
 8008e4e:	461d      	mov	r5, r3
 8008e50:	6828      	ldr	r0, [r5, #0]
 8008e52:	6869      	ldr	r1, [r5, #4]
 8008e54:	68aa      	ldr	r2, [r5, #8]
 8008e56:	68eb      	ldr	r3, [r5, #12]
 8008e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e5a:	7c2b      	ldrb	r3, [r5, #16]
 8008e5c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f08 <loadMenuTexts+0x14fc>)
 8008e60:	4b2a      	ldr	r3, [pc, #168]	@ (8008f0c <loadMenuTexts+0x1500>)
 8008e62:	4614      	mov	r4, r2
 8008e64:	461d      	mov	r5, r3
 8008e66:	6828      	ldr	r0, [r5, #0]
 8008e68:	6869      	ldr	r1, [r5, #4]
 8008e6a:	68aa      	ldr	r2, [r5, #8]
 8008e6c:	68eb      	ldr	r3, [r5, #12]
 8008e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e70:	7c2b      	ldrb	r3, [r5, #16]
 8008e72:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8008e74:	4a26      	ldr	r2, [pc, #152]	@ (8008f10 <loadMenuTexts+0x1504>)
 8008e76:	4b27      	ldr	r3, [pc, #156]	@ (8008f14 <loadMenuTexts+0x1508>)
 8008e78:	4614      	mov	r4, r2
 8008e7a:	461d      	mov	r5, r3
 8008e7c:	6828      	ldr	r0, [r5, #0]
 8008e7e:	6869      	ldr	r1, [r5, #4]
 8008e80:	68aa      	ldr	r2, [r5, #8]
 8008e82:	68eb      	ldr	r3, [r5, #12]
 8008e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e86:	7c2b      	ldrb	r3, [r5, #16]
 8008e88:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8008e8a:	f000 f845 	bl	8008f18 <menuVariableFinisher>
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bdb0      	pop	{r4, r5, r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20001ae8 	.word	0x20001ae8
 8008e9c:	20000ce0 	.word	0x20000ce0
 8008ea0:	20001afc 	.word	0x20001afc
 8008ea4:	20000d44 	.word	0x20000d44
 8008ea8:	20001b10 	.word	0x20001b10
 8008eac:	20000d58 	.word	0x20000d58
 8008eb0:	20001b24 	.word	0x20001b24
 8008eb4:	20000d94 	.word	0x20000d94
 8008eb8:	20001b38 	.word	0x20001b38
 8008ebc:	20000da8 	.word	0x20000da8
 8008ec0:	20001b4c 	.word	0x20001b4c
 8008ec4:	20000de4 	.word	0x20000de4
 8008ec8:	20001b60 	.word	0x20001b60
 8008ecc:	20000df8 	.word	0x20000df8
 8008ed0:	20001b74 	.word	0x20001b74
 8008ed4:	20000e20 	.word	0x20000e20
 8008ed8:	20001b88 	.word	0x20001b88
 8008edc:	20000e48 	.word	0x20000e48
 8008ee0:	20001b9c 	.word	0x20001b9c
 8008ee4:	20000e70 	.word	0x20000e70
 8008ee8:	20001bb0 	.word	0x20001bb0
 8008eec:	20000e98 	.word	0x20000e98
 8008ef0:	20001bc4 	.word	0x20001bc4
 8008ef4:	20000ec0 	.word	0x20000ec0
 8008ef8:	20001bd8 	.word	0x20001bd8
 8008efc:	20000ee8 	.word	0x20000ee8
 8008f00:	20001bec 	.word	0x20001bec
 8008f04:	20000f10 	.word	0x20000f10
 8008f08:	20001c00 	.word	0x20001c00
 8008f0c:	20000f38 	.word	0x20000f38
 8008f10:	20001c14 	.word	0x20001c14
 8008f14:	20000f60 	.word	0x20000f60

08008f18 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8008f1c:	4b99      	ldr	r3, [pc, #612]	@ (8009184 <menuVariableFinisher+0x26c>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8008f22:	4b99      	ldr	r3, [pc, #612]	@ (8009188 <menuVariableFinisher+0x270>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8008f28:	4b98      	ldr	r3, [pc, #608]	@ (800918c <menuVariableFinisher+0x274>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8008f2e:	4b98      	ldr	r3, [pc, #608]	@ (8009190 <menuVariableFinisher+0x278>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8008f34:	4b97      	ldr	r3, [pc, #604]	@ (8009194 <menuVariableFinisher+0x27c>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8008f3a:	4b97      	ldr	r3, [pc, #604]	@ (8009198 <menuVariableFinisher+0x280>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8008f40:	4b96      	ldr	r3, [pc, #600]	@ (800919c <menuVariableFinisher+0x284>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8008f46:	4b96      	ldr	r3, [pc, #600]	@ (80091a0 <menuVariableFinisher+0x288>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8008f4c:	4b95      	ldr	r3, [pc, #596]	@ (80091a4 <menuVariableFinisher+0x28c>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8008f52:	4b95      	ldr	r3, [pc, #596]	@ (80091a8 <menuVariableFinisher+0x290>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8008f58:	4b94      	ldr	r3, [pc, #592]	@ (80091ac <menuVariableFinisher+0x294>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8008f5e:	4b94      	ldr	r3, [pc, #592]	@ (80091b0 <menuVariableFinisher+0x298>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8008f64:	4b93      	ldr	r3, [pc, #588]	@ (80091b4 <menuVariableFinisher+0x29c>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8008f6a:	4b93      	ldr	r3, [pc, #588]	@ (80091b8 <menuVariableFinisher+0x2a0>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8008f70:	4b92      	ldr	r3, [pc, #584]	@ (80091bc <menuVariableFinisher+0x2a4>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8008f76:	4b92      	ldr	r3, [pc, #584]	@ (80091c0 <menuVariableFinisher+0x2a8>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8008f7c:	4b91      	ldr	r3, [pc, #580]	@ (80091c4 <menuVariableFinisher+0x2ac>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8008f82:	4b91      	ldr	r3, [pc, #580]	@ (80091c8 <menuVariableFinisher+0x2b0>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8008f88:	4b90      	ldr	r3, [pc, #576]	@ (80091cc <menuVariableFinisher+0x2b4>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8008f8e:	4b90      	ldr	r3, [pc, #576]	@ (80091d0 <menuVariableFinisher+0x2b8>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8008f94:	4b8f      	ldr	r3, [pc, #572]	@ (80091d4 <menuVariableFinisher+0x2bc>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8008f9a:	4b8f      	ldr	r3, [pc, #572]	@ (80091d8 <menuVariableFinisher+0x2c0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8008fa0:	4b8e      	ldr	r3, [pc, #568]	@ (80091dc <menuVariableFinisher+0x2c4>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8008fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80091e0 <menuVariableFinisher+0x2c8>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8008fac:	4b8d      	ldr	r3, [pc, #564]	@ (80091e4 <menuVariableFinisher+0x2cc>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8008fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80091e8 <menuVariableFinisher+0x2d0>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8008fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80091ec <menuVariableFinisher+0x2d4>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8008fbe:	4b8c      	ldr	r3, [pc, #560]	@ (80091f0 <menuVariableFinisher+0x2d8>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8008fc4:	4b8b      	ldr	r3, [pc, #556]	@ (80091f4 <menuVariableFinisher+0x2dc>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8008fca:	4b8b      	ldr	r3, [pc, #556]	@ (80091f8 <menuVariableFinisher+0x2e0>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8008fd0:	4b8a      	ldr	r3, [pc, #552]	@ (80091fc <menuVariableFinisher+0x2e4>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8008fd6:	4b8a      	ldr	r3, [pc, #552]	@ (8009200 <menuVariableFinisher+0x2e8>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8008fdc:	4b89      	ldr	r3, [pc, #548]	@ (8009204 <menuVariableFinisher+0x2ec>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8008fe2:	4b89      	ldr	r3, [pc, #548]	@ (8009208 <menuVariableFinisher+0x2f0>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8008fe8:	4b88      	ldr	r3, [pc, #544]	@ (800920c <menuVariableFinisher+0x2f4>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8008fee:	4b88      	ldr	r3, [pc, #544]	@ (8009210 <menuVariableFinisher+0x2f8>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8008ff4:	4b87      	ldr	r3, [pc, #540]	@ (8009214 <menuVariableFinisher+0x2fc>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8008ffa:	4b87      	ldr	r3, [pc, #540]	@ (8009218 <menuVariableFinisher+0x300>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8009000:	4b86      	ldr	r3, [pc, #536]	@ (800921c <menuVariableFinisher+0x304>)
 8009002:	2200      	movs	r2, #0
 8009004:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8009006:	4b86      	ldr	r3, [pc, #536]	@ (8009220 <menuVariableFinisher+0x308>)
 8009008:	2200      	movs	r2, #0
 800900a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800900c:	4b85      	ldr	r3, [pc, #532]	@ (8009224 <menuVariableFinisher+0x30c>)
 800900e:	2200      	movs	r2, #0
 8009010:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8009012:	4b85      	ldr	r3, [pc, #532]	@ (8009228 <menuVariableFinisher+0x310>)
 8009014:	2200      	movs	r2, #0
 8009016:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8009018:	4b84      	ldr	r3, [pc, #528]	@ (800922c <menuVariableFinisher+0x314>)
 800901a:	2200      	movs	r2, #0
 800901c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800901e:	4b84      	ldr	r3, [pc, #528]	@ (8009230 <menuVariableFinisher+0x318>)
 8009020:	2200      	movs	r2, #0
 8009022:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8009024:	4b83      	ldr	r3, [pc, #524]	@ (8009234 <menuVariableFinisher+0x31c>)
 8009026:	2200      	movs	r2, #0
 8009028:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800902a:	4b83      	ldr	r3, [pc, #524]	@ (8009238 <menuVariableFinisher+0x320>)
 800902c:	2200      	movs	r2, #0
 800902e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8009030:	4b82      	ldr	r3, [pc, #520]	@ (800923c <menuVariableFinisher+0x324>)
 8009032:	2200      	movs	r2, #0
 8009034:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8009036:	4b82      	ldr	r3, [pc, #520]	@ (8009240 <menuVariableFinisher+0x328>)
 8009038:	2200      	movs	r2, #0
 800903a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800903c:	4b81      	ldr	r3, [pc, #516]	@ (8009244 <menuVariableFinisher+0x32c>)
 800903e:	2200      	movs	r2, #0
 8009040:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8009042:	4b81      	ldr	r3, [pc, #516]	@ (8009248 <menuVariableFinisher+0x330>)
 8009044:	2200      	movs	r2, #0
 8009046:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8009048:	4b80      	ldr	r3, [pc, #512]	@ (800924c <menuVariableFinisher+0x334>)
 800904a:	2200      	movs	r2, #0
 800904c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800904e:	4b80      	ldr	r3, [pc, #512]	@ (8009250 <menuVariableFinisher+0x338>)
 8009050:	2200      	movs	r2, #0
 8009052:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8009054:	4b7f      	ldr	r3, [pc, #508]	@ (8009254 <menuVariableFinisher+0x33c>)
 8009056:	2200      	movs	r2, #0
 8009058:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800905a:	4b7f      	ldr	r3, [pc, #508]	@ (8009258 <menuVariableFinisher+0x340>)
 800905c:	2200      	movs	r2, #0
 800905e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8009060:	4b7e      	ldr	r3, [pc, #504]	@ (800925c <menuVariableFinisher+0x344>)
 8009062:	2200      	movs	r2, #0
 8009064:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8009066:	4b7e      	ldr	r3, [pc, #504]	@ (8009260 <menuVariableFinisher+0x348>)
 8009068:	2200      	movs	r2, #0
 800906a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800906c:	4b7d      	ldr	r3, [pc, #500]	@ (8009264 <menuVariableFinisher+0x34c>)
 800906e:	2200      	movs	r2, #0
 8009070:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8009072:	4b7d      	ldr	r3, [pc, #500]	@ (8009268 <menuVariableFinisher+0x350>)
 8009074:	2200      	movs	r2, #0
 8009076:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8009078:	4b7c      	ldr	r3, [pc, #496]	@ (800926c <menuVariableFinisher+0x354>)
 800907a:	2200      	movs	r2, #0
 800907c:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800907e:	4b7c      	ldr	r3, [pc, #496]	@ (8009270 <menuVariableFinisher+0x358>)
 8009080:	2200      	movs	r2, #0
 8009082:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8009084:	4b7b      	ldr	r3, [pc, #492]	@ (8009274 <menuVariableFinisher+0x35c>)
 8009086:	2200      	movs	r2, #0
 8009088:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 800908a:	4b7b      	ldr	r3, [pc, #492]	@ (8009278 <menuVariableFinisher+0x360>)
 800908c:	2200      	movs	r2, #0
 800908e:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8009090:	4b7a      	ldr	r3, [pc, #488]	@ (800927c <menuVariableFinisher+0x364>)
 8009092:	2200      	movs	r2, #0
 8009094:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8009096:	4b7a      	ldr	r3, [pc, #488]	@ (8009280 <menuVariableFinisher+0x368>)
 8009098:	2200      	movs	r2, #0
 800909a:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 800909c:	4b79      	ldr	r3, [pc, #484]	@ (8009284 <menuVariableFinisher+0x36c>)
 800909e:	2200      	movs	r2, #0
 80090a0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80090a2:	4b79      	ldr	r3, [pc, #484]	@ (8009288 <menuVariableFinisher+0x370>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80090a8:	4b78      	ldr	r3, [pc, #480]	@ (800928c <menuVariableFinisher+0x374>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80090ae:	4b78      	ldr	r3, [pc, #480]	@ (8009290 <menuVariableFinisher+0x378>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80090b4:	4b77      	ldr	r3, [pc, #476]	@ (8009294 <menuVariableFinisher+0x37c>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80090ba:	4b77      	ldr	r3, [pc, #476]	@ (8009298 <menuVariableFinisher+0x380>)
 80090bc:	2200      	movs	r2, #0
 80090be:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80090c0:	4b76      	ldr	r3, [pc, #472]	@ (800929c <menuVariableFinisher+0x384>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80090c6:	4b76      	ldr	r3, [pc, #472]	@ (80092a0 <menuVariableFinisher+0x388>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80090cc:	4b75      	ldr	r3, [pc, #468]	@ (80092a4 <menuVariableFinisher+0x38c>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80090d2:	4b75      	ldr	r3, [pc, #468]	@ (80092a8 <menuVariableFinisher+0x390>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80090d8:	4b74      	ldr	r3, [pc, #464]	@ (80092ac <menuVariableFinisher+0x394>)
 80090da:	2200      	movs	r2, #0
 80090dc:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80090de:	4b74      	ldr	r3, [pc, #464]	@ (80092b0 <menuVariableFinisher+0x398>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80090e4:	4b73      	ldr	r3, [pc, #460]	@ (80092b4 <menuVariableFinisher+0x39c>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80090ea:	4b73      	ldr	r3, [pc, #460]	@ (80092b8 <menuVariableFinisher+0x3a0>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80090f0:	4b72      	ldr	r3, [pc, #456]	@ (80092bc <menuVariableFinisher+0x3a4>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80090f6:	4b72      	ldr	r3, [pc, #456]	@ (80092c0 <menuVariableFinisher+0x3a8>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80090fc:	4b71      	ldr	r3, [pc, #452]	@ (80092c4 <menuVariableFinisher+0x3ac>)
 80090fe:	2200      	movs	r2, #0
 8009100:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8009102:	4b71      	ldr	r3, [pc, #452]	@ (80092c8 <menuVariableFinisher+0x3b0>)
 8009104:	2200      	movs	r2, #0
 8009106:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8009108:	4b70      	ldr	r3, [pc, #448]	@ (80092cc <menuVariableFinisher+0x3b4>)
 800910a:	2200      	movs	r2, #0
 800910c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800910e:	4b70      	ldr	r3, [pc, #448]	@ (80092d0 <menuVariableFinisher+0x3b8>)
 8009110:	2200      	movs	r2, #0
 8009112:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8009114:	4b6f      	ldr	r3, [pc, #444]	@ (80092d4 <menuVariableFinisher+0x3bc>)
 8009116:	2200      	movs	r2, #0
 8009118:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 800911a:	4b6f      	ldr	r3, [pc, #444]	@ (80092d8 <menuVariableFinisher+0x3c0>)
 800911c:	2200      	movs	r2, #0
 800911e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8009120:	4b6e      	ldr	r3, [pc, #440]	@ (80092dc <menuVariableFinisher+0x3c4>)
 8009122:	2200      	movs	r2, #0
 8009124:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8009126:	4b6e      	ldr	r3, [pc, #440]	@ (80092e0 <menuVariableFinisher+0x3c8>)
 8009128:	2200      	movs	r2, #0
 800912a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 800912c:	4b6d      	ldr	r3, [pc, #436]	@ (80092e4 <menuVariableFinisher+0x3cc>)
 800912e:	2200      	movs	r2, #0
 8009130:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8009132:	4b6d      	ldr	r3, [pc, #436]	@ (80092e8 <menuVariableFinisher+0x3d0>)
 8009134:	2200      	movs	r2, #0
 8009136:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8009138:	4b6c      	ldr	r3, [pc, #432]	@ (80092ec <menuVariableFinisher+0x3d4>)
 800913a:	2200      	movs	r2, #0
 800913c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800913e:	4b6c      	ldr	r3, [pc, #432]	@ (80092f0 <menuVariableFinisher+0x3d8>)
 8009140:	2200      	movs	r2, #0
 8009142:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8009144:	4b6b      	ldr	r3, [pc, #428]	@ (80092f4 <menuVariableFinisher+0x3dc>)
 8009146:	2200      	movs	r2, #0
 8009148:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800914a:	4b6b      	ldr	r3, [pc, #428]	@ (80092f8 <menuVariableFinisher+0x3e0>)
 800914c:	2200      	movs	r2, #0
 800914e:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8009150:	4b6a      	ldr	r3, [pc, #424]	@ (80092fc <menuVariableFinisher+0x3e4>)
 8009152:	2200      	movs	r2, #0
 8009154:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8009156:	4b6a      	ldr	r3, [pc, #424]	@ (8009300 <menuVariableFinisher+0x3e8>)
 8009158:	2200      	movs	r2, #0
 800915a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800915c:	4b69      	ldr	r3, [pc, #420]	@ (8009304 <menuVariableFinisher+0x3ec>)
 800915e:	2200      	movs	r2, #0
 8009160:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8009162:	4b69      	ldr	r3, [pc, #420]	@ (8009308 <menuVariableFinisher+0x3f0>)
 8009164:	2200      	movs	r2, #0
 8009166:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8009168:	4b68      	ldr	r3, [pc, #416]	@ (800930c <menuVariableFinisher+0x3f4>)
 800916a:	2200      	movs	r2, #0
 800916c:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800916e:	4b68      	ldr	r3, [pc, #416]	@ (8009310 <menuVariableFinisher+0x3f8>)
 8009170:	2200      	movs	r2, #0
 8009172:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8009174:	4b67      	ldr	r3, [pc, #412]	@ (8009314 <menuVariableFinisher+0x3fc>)
 8009176:	2200      	movs	r2, #0
 8009178:	741a      	strb	r2, [r3, #16]
}
 800917a:	bf00      	nop
 800917c:	46bd      	mov	sp, r7
 800917e:	bc80      	pop	{r7}
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	2000009c 	.word	0x2000009c
 8009188:	200000b0 	.word	0x200000b0
 800918c:	200000c4 	.word	0x200000c4
 8009190:	200000d8 	.word	0x200000d8
 8009194:	200000ec 	.word	0x200000ec
 8009198:	20000100 	.word	0x20000100
 800919c:	20000114 	.word	0x20000114
 80091a0:	20000128 	.word	0x20000128
 80091a4:	2000013c 	.word	0x2000013c
 80091a8:	20000150 	.word	0x20000150
 80091ac:	20000164 	.word	0x20000164
 80091b0:	20000178 	.word	0x20000178
 80091b4:	20001534 	.word	0x20001534
 80091b8:	20001548 	.word	0x20001548
 80091bc:	2000155c 	.word	0x2000155c
 80091c0:	20001570 	.word	0x20001570
 80091c4:	20001584 	.word	0x20001584
 80091c8:	20001598 	.word	0x20001598
 80091cc:	200015ac 	.word	0x200015ac
 80091d0:	200015c0 	.word	0x200015c0
 80091d4:	200015d4 	.word	0x200015d4
 80091d8:	200015e8 	.word	0x200015e8
 80091dc:	200015fc 	.word	0x200015fc
 80091e0:	20001610 	.word	0x20001610
 80091e4:	20001624 	.word	0x20001624
 80091e8:	20001638 	.word	0x20001638
 80091ec:	2000164c 	.word	0x2000164c
 80091f0:	20001660 	.word	0x20001660
 80091f4:	20001674 	.word	0x20001674
 80091f8:	20001688 	.word	0x20001688
 80091fc:	2000169c 	.word	0x2000169c
 8009200:	200016b0 	.word	0x200016b0
 8009204:	200016c4 	.word	0x200016c4
 8009208:	200016d8 	.word	0x200016d8
 800920c:	200016ec 	.word	0x200016ec
 8009210:	20001700 	.word	0x20001700
 8009214:	20001714 	.word	0x20001714
 8009218:	20001728 	.word	0x20001728
 800921c:	2000173c 	.word	0x2000173c
 8009220:	20001750 	.word	0x20001750
 8009224:	20001764 	.word	0x20001764
 8009228:	20001778 	.word	0x20001778
 800922c:	2000178c 	.word	0x2000178c
 8009230:	200017a0 	.word	0x200017a0
 8009234:	200017b4 	.word	0x200017b4
 8009238:	200017c8 	.word	0x200017c8
 800923c:	200017dc 	.word	0x200017dc
 8009240:	200017f0 	.word	0x200017f0
 8009244:	20001804 	.word	0x20001804
 8009248:	20001818 	.word	0x20001818
 800924c:	2000182c 	.word	0x2000182c
 8009250:	20001840 	.word	0x20001840
 8009254:	20001854 	.word	0x20001854
 8009258:	20001868 	.word	0x20001868
 800925c:	2000187c 	.word	0x2000187c
 8009260:	20001890 	.word	0x20001890
 8009264:	200018a4 	.word	0x200018a4
 8009268:	200018b8 	.word	0x200018b8
 800926c:	200018cc 	.word	0x200018cc
 8009270:	200018e0 	.word	0x200018e0
 8009274:	200018f4 	.word	0x200018f4
 8009278:	20001908 	.word	0x20001908
 800927c:	2000191c 	.word	0x2000191c
 8009280:	20001930 	.word	0x20001930
 8009284:	20001944 	.word	0x20001944
 8009288:	20001958 	.word	0x20001958
 800928c:	2000196c 	.word	0x2000196c
 8009290:	20001980 	.word	0x20001980
 8009294:	20001994 	.word	0x20001994
 8009298:	200019a8 	.word	0x200019a8
 800929c:	200019bc 	.word	0x200019bc
 80092a0:	200019d0 	.word	0x200019d0
 80092a4:	200019e4 	.word	0x200019e4
 80092a8:	200019f8 	.word	0x200019f8
 80092ac:	20001a0c 	.word	0x20001a0c
 80092b0:	20001a20 	.word	0x20001a20
 80092b4:	20001a34 	.word	0x20001a34
 80092b8:	20001a48 	.word	0x20001a48
 80092bc:	20001a5c 	.word	0x20001a5c
 80092c0:	20001a70 	.word	0x20001a70
 80092c4:	20001a84 	.word	0x20001a84
 80092c8:	20001a98 	.word	0x20001a98
 80092cc:	20001aac 	.word	0x20001aac
 80092d0:	20001ac0 	.word	0x20001ac0
 80092d4:	20001ad4 	.word	0x20001ad4
 80092d8:	20001ae8 	.word	0x20001ae8
 80092dc:	20001afc 	.word	0x20001afc
 80092e0:	20001b10 	.word	0x20001b10
 80092e4:	20001b24 	.word	0x20001b24
 80092e8:	20001b38 	.word	0x20001b38
 80092ec:	20001b4c 	.word	0x20001b4c
 80092f0:	20001b60 	.word	0x20001b60
 80092f4:	20001b74 	.word	0x20001b74
 80092f8:	20001b88 	.word	0x20001b88
 80092fc:	20001b9c 	.word	0x20001b9c
 8009300:	20001bb0 	.word	0x20001bb0
 8009304:	20001bc4 	.word	0x20001bc4
 8009308:	20001bd8 	.word	0x20001bd8
 800930c:	20001bec 	.word	0x20001bec
 8009310:	20001c00 	.word	0x20001c00
 8009314:	20001c14 	.word	0x20001c14

08009318 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800931e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009322:	f001 fe47 	bl	800afb4 <HAL_Delay>
	int confirmationVal = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800932a:	e012      	b.n	8009352 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 800932c:	4a12      	ldr	r2, [pc, #72]	@ (8009378 <takeMachineIDWithConfirmation+0x60>)
 800932e:	2101      	movs	r1, #1
 8009330:	2001      	movs	r0, #1
 8009332:	f001 f8e5 	bl	800a500 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8009336:	4a11      	ldr	r2, [pc, #68]	@ (800937c <takeMachineIDWithConfirmation+0x64>)
 8009338:	2101      	movs	r1, #1
 800933a:	2002      	movs	r0, #2
 800933c:	f001 f8e0 	bl	800a500 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8009340:	2102      	movs	r1, #2
 8009342:	480f      	ldr	r0, [pc, #60]	@ (8009380 <takeMachineIDWithConfirmation+0x68>)
 8009344:	f002 fc06 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009348:	4603      	mov	r3, r0
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 800934e:	2301      	movs	r3, #1
 8009350:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0e9      	beq.n	800932c <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8009358:	f000 f814 	bl	8009384 <takeMachineID>

	convertArrays(1);
 800935c:	2001      	movs	r0, #1
 800935e:	f7f7 fa0b 	bl	8000778 <convertArrays>
	HAL_Delay(50);
 8009362:	2032      	movs	r0, #50	@ 0x32
 8009364:	f001 fe26 	bl	800afb4 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8009368:	2001      	movs	r0, #1
 800936a:	f7f7 ffeb 	bl	8001344 <printCredentials>
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20001bec 	.word	0x20001bec
 800937c:	20001c00 	.word	0x20001c00
 8009380:	40010800 	.word	0x40010800

08009384 <takeMachineID>:

void takeMachineID() {
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 800938a:	2001      	movs	r0, #1
 800938c:	f001 f916 	bl	800a5bc <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8009390:	220c      	movs	r2, #12
 8009392:	2100      	movs	r1, #0
 8009394:	4892      	ldr	r0, [pc, #584]	@ (80095e0 <takeMachineID+0x25c>)
 8009396:	f005 fd45 	bl	800ee24 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 800939a:	2305      	movs	r3, #5
 800939c:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800939e:	2303      	movs	r3, #3
 80093a0:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80093a2:	2300      	movs	r3, #0
 80093a4:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80093a6:	4b8f      	ldr	r3, [pc, #572]	@ (80095e4 <takeMachineID+0x260>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 80093ac:	2100      	movs	r1, #0
 80093ae:	2001      	movs	r0, #1
 80093b0:	f7f7 fd7e 	bl	8000eb0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80093b4:	2108      	movs	r1, #8
 80093b6:	488c      	ldr	r0, [pc, #560]	@ (80095e8 <takeMachineID+0x264>)
 80093b8:	f002 fbcc 	bl	800bb54 <HAL_GPIO_ReadPin>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d128      	bne.n	8009414 <takeMachineID+0x90>
        	lcd_cursor(0);
 80093c2:	2000      	movs	r0, #0
 80093c4:	f001 f8fa 	bl	800a5bc <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 80093c8:	f000 feda 	bl	800a180 <checkEEPROM4ID>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d00e      	beq.n	80093f0 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 80093d2:	4a86      	ldr	r2, [pc, #536]	@ (80095ec <takeMachineID+0x268>)
 80093d4:	2101      	movs	r1, #1
 80093d6:	2001      	movs	r0, #1
 80093d8:	f001 f892 	bl	800a500 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 80093dc:	4a84      	ldr	r2, [pc, #528]	@ (80095f0 <takeMachineID+0x26c>)
 80093de:	2101      	movs	r1, #1
 80093e0:	2002      	movs	r0, #2
 80093e2:	f001 f88d 	bl	800a500 <lcd_print>
        		HAL_Delay(1250);
 80093e6:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80093ea:	f001 fde3 	bl	800afb4 <HAL_Delay>

        		goto mainSection;
 80093ee:	e7cc      	b.n	800938a <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80093f0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	236e      	movs	r3, #110	@ 0x6e
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	4b7e      	ldr	r3, [pc, #504]	@ (80095f4 <takeMachineID+0x270>)
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	236e      	movs	r3, #110	@ 0x6e
 8009400:	2200      	movs	r2, #0
 8009402:	21a0      	movs	r1, #160	@ 0xa0
 8009404:	487c      	ldr	r0, [pc, #496]	@ (80095f8 <takeMachineID+0x274>)
 8009406:	f002 fe5f 	bl	800c0c8 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800940a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800940e:	f001 fdd1 	bl	800afb4 <HAL_Delay>

            	break;
 8009412:	e16a      	b.n	80096ea <takeMachineID+0x366>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009414:	2101      	movs	r1, #1
 8009416:	4874      	ldr	r0, [pc, #464]	@ (80095e8 <takeMachineID+0x264>)
 8009418:	f002 fb9c 	bl	800bb54 <HAL_GPIO_ReadPin>
 800941c:	4603      	mov	r3, r0
 800941e:	2b01      	cmp	r3, #1
 8009420:	d111      	bne.n	8009446 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b07      	cmp	r3, #7
 8009426:	d102      	bne.n	800942e <takeMachineID+0xaa>
        		cursorPosition = 10;
 8009428:	230a      	movs	r3, #10
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	e008      	b.n	8009440 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b0e      	cmp	r3, #14
 8009432:	d102      	bne.n	800943a <takeMachineID+0xb6>
                cursorPosition = 3;
 8009434:	2303      	movs	r3, #3
 8009436:	60bb      	str	r3, [r7, #8]
 8009438:	e002      	b.n	8009440 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	3301      	adds	r3, #1
 800943e:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8009440:	2096      	movs	r0, #150	@ 0x96
 8009442:	f001 fdb7 	bl	800afb4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8009446:	2108      	movs	r1, #8
 8009448:	486c      	ldr	r0, [pc, #432]	@ (80095fc <takeMachineID+0x278>)
 800944a:	f002 fb83 	bl	800bb54 <HAL_GPIO_ReadPin>
 800944e:	4603      	mov	r3, r0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d111      	bne.n	8009478 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b03      	cmp	r3, #3
 8009458:	d102      	bne.n	8009460 <takeMachineID+0xdc>
                cursorPosition = 14;
 800945a:	230e      	movs	r3, #14
 800945c:	60bb      	str	r3, [r7, #8]
 800945e:	e008      	b.n	8009472 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b0a      	cmp	r3, #10
 8009464:	d102      	bne.n	800946c <takeMachineID+0xe8>
            	cursorPosition = 7;
 8009466:	2307      	movs	r3, #7
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	e002      	b.n	8009472 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	3b01      	subs	r3, #1
 8009470:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8009472:	20fa      	movs	r0, #250	@ 0xfa
 8009474:	f001 fd9e 	bl	800afb4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009478:	2102      	movs	r1, #2
 800947a:	485b      	ldr	r0, [pc, #364]	@ (80095e8 <takeMachineID+0x264>)
 800947c:	f002 fb6a 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009480:	4603      	mov	r3, r0
 8009482:	2b01      	cmp	r3, #1
 8009484:	f040 80e4 	bne.w	8009650 <takeMachineID+0x2cc>
        	if(cursorPosition == 3) {
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b03      	cmp	r3, #3
 800948c:	d10f      	bne.n	80094ae <takeMachineID+0x12a>
        		machineID[arrayPos] = '0';
 800948e:	4a54      	ldr	r2, [pc, #336]	@ (80095e0 <takeMachineID+0x25c>)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	2230      	movs	r2, #48	@ 0x30
 8009496:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8009498:	4a56      	ldr	r2, [pc, #344]	@ (80095f4 <takeMachineID+0x270>)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	18d1      	adds	r1, r2, r3
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	e9c1 2300 	strd	r2, r3, [r1]
 80094ac:	e0ba      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 4) {
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d10f      	bne.n	80094d4 <takeMachineID+0x150>
        		machineID[arrayPos] = '1';
 80094b4:	4a4a      	ldr	r2, [pc, #296]	@ (80095e0 <takeMachineID+0x25c>)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	2231      	movs	r2, #49	@ 0x31
 80094bc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 80094be:	4a4d      	ldr	r2, [pc, #308]	@ (80095f4 <takeMachineID+0x270>)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	18d1      	adds	r1, r2, r3
 80094c6:	f04f 0201 	mov.w	r2, #1
 80094ca:	f04f 0300 	mov.w	r3, #0
 80094ce:	e9c1 2300 	strd	r2, r3, [r1]
 80094d2:	e0a7      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 5) {
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d10f      	bne.n	80094fa <takeMachineID+0x176>
        		machineID[arrayPos] = '2';
 80094da:	4a41      	ldr	r2, [pc, #260]	@ (80095e0 <takeMachineID+0x25c>)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4413      	add	r3, r2
 80094e0:	2232      	movs	r2, #50	@ 0x32
 80094e2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 80094e4:	4a43      	ldr	r2, [pc, #268]	@ (80095f4 <takeMachineID+0x270>)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	18d1      	adds	r1, r2, r3
 80094ec:	f04f 0202 	mov.w	r2, #2
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	e9c1 2300 	strd	r2, r3, [r1]
 80094f8:	e094      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 6) {
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b06      	cmp	r3, #6
 80094fe:	d10f      	bne.n	8009520 <takeMachineID+0x19c>
        		machineID[arrayPos] = '3';
 8009500:	4a37      	ldr	r2, [pc, #220]	@ (80095e0 <takeMachineID+0x25c>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4413      	add	r3, r2
 8009506:	2233      	movs	r2, #51	@ 0x33
 8009508:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800950a:	4a3a      	ldr	r2, [pc, #232]	@ (80095f4 <takeMachineID+0x270>)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	18d1      	adds	r1, r2, r3
 8009512:	f04f 0203 	mov.w	r2, #3
 8009516:	f04f 0300 	mov.w	r3, #0
 800951a:	e9c1 2300 	strd	r2, r3, [r1]
 800951e:	e081      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 7) {
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b07      	cmp	r3, #7
 8009524:	d10f      	bne.n	8009546 <takeMachineID+0x1c2>
        		machineID[arrayPos] = '4';
 8009526:	4a2e      	ldr	r2, [pc, #184]	@ (80095e0 <takeMachineID+0x25c>)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	2234      	movs	r2, #52	@ 0x34
 800952e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8009530:	4a30      	ldr	r2, [pc, #192]	@ (80095f4 <takeMachineID+0x270>)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	18d1      	adds	r1, r2, r3
 8009538:	f04f 0204 	mov.w	r2, #4
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	e9c1 2300 	strd	r2, r3, [r1]
 8009544:	e06e      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 10) {
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b0a      	cmp	r3, #10
 800954a:	d10f      	bne.n	800956c <takeMachineID+0x1e8>
        		machineID[arrayPos] = '5';
 800954c:	4a24      	ldr	r2, [pc, #144]	@ (80095e0 <takeMachineID+0x25c>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	2235      	movs	r2, #53	@ 0x35
 8009554:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8009556:	4a27      	ldr	r2, [pc, #156]	@ (80095f4 <takeMachineID+0x270>)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	18d1      	adds	r1, r2, r3
 800955e:	f04f 0205 	mov.w	r2, #5
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	e9c1 2300 	strd	r2, r3, [r1]
 800956a:	e05b      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 11) {
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b0b      	cmp	r3, #11
 8009570:	d10f      	bne.n	8009592 <takeMachineID+0x20e>
        		machineID[arrayPos] = '6';
 8009572:	4a1b      	ldr	r2, [pc, #108]	@ (80095e0 <takeMachineID+0x25c>)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	2236      	movs	r2, #54	@ 0x36
 800957a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 800957c:	4a1d      	ldr	r2, [pc, #116]	@ (80095f4 <takeMachineID+0x270>)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	18d1      	adds	r1, r2, r3
 8009584:	f04f 0206 	mov.w	r2, #6
 8009588:	f04f 0300 	mov.w	r3, #0
 800958c:	e9c1 2300 	strd	r2, r3, [r1]
 8009590:	e048      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 12) {
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b0c      	cmp	r3, #12
 8009596:	d10f      	bne.n	80095b8 <takeMachineID+0x234>
        		machineID[arrayPos] = '7';
 8009598:	4a11      	ldr	r2, [pc, #68]	@ (80095e0 <takeMachineID+0x25c>)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	2237      	movs	r2, #55	@ 0x37
 80095a0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80095a2:	4a14      	ldr	r2, [pc, #80]	@ (80095f4 <takeMachineID+0x270>)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	18d1      	adds	r1, r2, r3
 80095aa:	f04f 0207 	mov.w	r2, #7
 80095ae:	f04f 0300 	mov.w	r3, #0
 80095b2:	e9c1 2300 	strd	r2, r3, [r1]
 80095b6:	e035      	b.n	8009624 <takeMachineID+0x2a0>
        	} else if(cursorPosition == 13) {
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b0d      	cmp	r3, #13
 80095bc:	d120      	bne.n	8009600 <takeMachineID+0x27c>
        		machineID[arrayPos] = '8';
 80095be:	4a08      	ldr	r2, [pc, #32]	@ (80095e0 <takeMachineID+0x25c>)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	2238      	movs	r2, #56	@ 0x38
 80095c6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80095c8:	4a0a      	ldr	r2, [pc, #40]	@ (80095f4 <takeMachineID+0x270>)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	18d1      	adds	r1, r2, r3
 80095d0:	f04f 0208 	mov.w	r2, #8
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	e9c1 2300 	strd	r2, r3, [r1]
 80095dc:	e022      	b.n	8009624 <takeMachineID+0x2a0>
 80095de:	bf00      	nop
 80095e0:	20001368 	.word	0x20001368
 80095e4:	20000000 	.word	0x20000000
 80095e8:	40010800 	.word	0x40010800
 80095ec:	20001afc 	.word	0x20001afc
 80095f0:	20001b10 	.word	0x20001b10
 80095f4:	20000ff0 	.word	0x20000ff0
 80095f8:	20001c50 	.word	0x20001c50
 80095fc:	40011000 	.word	0x40011000
        	} else if(cursorPosition == 14) {
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b0e      	cmp	r3, #14
 8009604:	d10e      	bne.n	8009624 <takeMachineID+0x2a0>
        		machineID[arrayPos] = '9';
 8009606:	4a3b      	ldr	r2, [pc, #236]	@ (80096f4 <takeMachineID+0x370>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4413      	add	r3, r2
 800960c:	2239      	movs	r2, #57	@ 0x39
 800960e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8009610:	4a39      	ldr	r2, [pc, #228]	@ (80096f8 <takeMachineID+0x374>)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	18d1      	adds	r1, r2, r3
 8009618:	f04f 0209 	mov.w	r2, #9
 800961c:	f04f 0300 	mov.w	r3, #0
 8009620:	e9c1 2300 	strd	r2, r3, [r1]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	b2d9      	uxtb	r1, r3
 8009628:	4a32      	ldr	r2, [pc, #200]	@ (80096f4 <takeMachineID+0x370>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	2001      	movs	r0, #1
 8009634:	f000 ff79 	bl	800a52a <lcd_print_char>

        	writeLoc++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3301      	adds	r3, #1
 8009642:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 800964a:	2096      	movs	r0, #150	@ 0x96
 800964c:	f001 fcb2 	bl	800afb4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009650:	2104      	movs	r1, #4
 8009652:	482a      	ldr	r0, [pc, #168]	@ (80096fc <takeMachineID+0x378>)
 8009654:	f002 fa7e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009658:	4603      	mov	r3, r0
 800965a:	2b01      	cmp	r3, #1
 800965c:	d13e      	bne.n	80096dc <takeMachineID+0x358>
            if(strlen(machineID) >= 1) {
 800965e:	4b25      	ldr	r3, [pc, #148]	@ (80096f4 <takeMachineID+0x370>)
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d037      	beq.n	80096d6 <takeMachineID+0x352>
                machineID[arrayPos] = '\0';
 8009666:	4a23      	ldr	r2, [pc, #140]	@ (80096f4 <takeMachineID+0x370>)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4413      	add	r3, r2
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8009670:	4a21      	ldr	r2, [pc, #132]	@ (80096f8 <takeMachineID+0x374>)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	18d1      	adds	r1, r2, r3
 8009678:	f04f 0200 	mov.w	r2, #0
 800967c:	f04f 0300 	mov.w	r3, #0
 8009680:	e9c1 2300 	strd	r2, r3, [r1]

                if(writeLoc > 5) {
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b05      	cmp	r3, #5
 8009688:	dd03      	ble.n	8009692 <takeMachineID+0x30e>
                	writeLoc--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3b01      	subs	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	e004      	b.n	800969c <takeMachineID+0x318>
                } else if(writeLoc < 5) {
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b04      	cmp	r3, #4
 8009696:	dc01      	bgt.n	800969c <takeMachineID+0x318>
                	writeLoc = 5;
 8009698:	2305      	movs	r3, #5
 800969a:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dd06      	ble.n	80096b0 <takeMachineID+0x32c>
                	arrayPos--;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	e007      	b.n	80096c0 <takeMachineID+0x33c>
                } else if(arrayPos < 0) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da04      	bge.n	80096c0 <takeMachineID+0x33c>
                	arrayPos = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80096ba:	4b11      	ldr	r3, [pc, #68]	@ (8009700 <takeMachineID+0x37c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	3305      	adds	r3, #5
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	4619      	mov	r1, r3
 80096ca:	2001      	movs	r0, #1
 80096cc:	f000 ff4e 	bl	800a56c <lcd_delete_char>
                HAL_Delay(50);
 80096d0:	2032      	movs	r0, #50	@ 0x32
 80096d2:	f001 fc6f 	bl	800afb4 <HAL_Delay>
            }

            HAL_Delay(150);
 80096d6:	2096      	movs	r0, #150	@ 0x96
 80096d8:	f001 fc6c 	bl	800afb4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	2002      	movs	r0, #2
 80096e4:	f000 feed 	bl	800a4c2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80096e8:	e664      	b.n	80093b4 <takeMachineID+0x30>
    }
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20001368 	.word	0x20001368
 80096f8:	20000ff0 	.word	0x20000ff0
 80096fc:	40010800 	.word	0x40010800
 8009700:	20000000 	.word	0x20000000

08009704 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af04      	add	r7, sp, #16
	int loopVal = 1;
 800970a:	2301      	movs	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800970e:	4a2c      	ldr	r2, [pc, #176]	@ (80097c0 <ssidConfirmation+0xbc>)
 8009710:	2101      	movs	r1, #1
 8009712:	2001      	movs	r0, #1
 8009714:	f000 fef4 	bl	800a500 <lcd_print>

	while(loopVal == 1) {
 8009718:	e01f      	b.n	800975a <ssidConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 800971a:	4a2a      	ldr	r2, [pc, #168]	@ (80097c4 <ssidConfirmation+0xc0>)
 800971c:	2101      	movs	r1, #1
 800971e:	2002      	movs	r0, #2
 8009720:	f000 feee 	bl	800a500 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009724:	2102      	movs	r1, #2
 8009726:	4828      	ldr	r0, [pc, #160]	@ (80097c8 <ssidConfirmation+0xc4>)
 8009728:	f002 fa14 	bl	800bb54 <HAL_GPIO_ReadPin>
 800972c:	4603      	mov	r3, r0
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <ssidConfirmation+0x32>
			loopVal = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiSSID) > 16) {
 8009736:	4825      	ldr	r0, [pc, #148]	@ (80097cc <ssidConfirmation+0xc8>)
 8009738:	f7f6 fd74 	bl	8000224 <strlen>
 800973c:	4603      	mov	r3, r0
 800973e:	2b10      	cmp	r3, #16
 8009740:	d906      	bls.n	8009750 <ssidConfirmation+0x4c>
			slideText(wifiSSID, 1, 1, 1);
 8009742:	2301      	movs	r3, #1
 8009744:	2201      	movs	r2, #1
 8009746:	2101      	movs	r1, #1
 8009748:	4820      	ldr	r0, [pc, #128]	@ (80097cc <ssidConfirmation+0xc8>)
 800974a:	f7f7 fd55 	bl	80011f8 <slideText>
 800974e:	e004      	b.n	800975a <ssidConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiSSID);
 8009750:	4a1e      	ldr	r2, [pc, #120]	@ (80097cc <ssidConfirmation+0xc8>)
 8009752:	2101      	movs	r1, #1
 8009754:	2001      	movs	r0, #1
 8009756:	f000 fed3 	bl	800a500 <lcd_print>
	while(loopVal == 1) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d0dc      	beq.n	800971a <ssidConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8009760:	2000      	movs	r0, #0
 8009762:	f000 ff2b 	bl	800a5bc <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8009766:	4819      	ldr	r0, [pc, #100]	@ (80097cc <ssidConfirmation+0xc8>)
 8009768:	f7f6 fd5c 	bl	8000224 <strlen>
 800976c:	4603      	mov	r3, r0
 800976e:	2b14      	cmp	r3, #20
 8009770:	d90f      	bls.n	8009792 <ssidConfirmation+0x8e>
    	lcd_print(1, 1, ssidExceedErrorText);
 8009772:	4a17      	ldr	r2, [pc, #92]	@ (80097d0 <ssidConfirmation+0xcc>)
 8009774:	2101      	movs	r1, #1
 8009776:	2001      	movs	r0, #1
 8009778:	f000 fec2 	bl	800a500 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800977c:	4a15      	ldr	r2, [pc, #84]	@ (80097d4 <ssidConfirmation+0xd0>)
 800977e:	2101      	movs	r1, #1
 8009780:	2002      	movs	r0, #2
 8009782:	f000 febd 	bl	800a500 <lcd_print>
        HAL_Delay(1250);
 8009786:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800978a:	f001 fc13 	bl	800afb4 <HAL_Delay>

        return 0;
 800978e:	2300      	movs	r3, #0
 8009790:	e011      	b.n	80097b6 <ssidConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009792:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009796:	9302      	str	r3, [sp, #8]
 8009798:	236e      	movs	r3, #110	@ 0x6e
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	4b0e      	ldr	r3, [pc, #56]	@ (80097d8 <ssidConfirmation+0xd4>)
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	236e      	movs	r3, #110	@ 0x6e
 80097a2:	2200      	movs	r2, #0
 80097a4:	21a0      	movs	r1, #160	@ 0xa0
 80097a6:	480d      	ldr	r0, [pc, #52]	@ (80097dc <ssidConfirmation+0xd8>)
 80097a8:	f002 fc8e 	bl	800c0c8 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 80097ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80097b0:	f001 fc00 	bl	800afb4 <HAL_Delay>

    	return 1;
 80097b4:	2301      	movs	r3, #1
    }
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	0800f8f0 	.word	0x0800f8f0
 80097c4:	20001c14 	.word	0x20001c14
 80097c8:	40010800 	.word	0x40010800
 80097cc:	20001374 	.word	0x20001374
 80097d0:	20001b24 	.word	0x20001b24
 80097d4:	20001b38 	.word	0x20001b38
 80097d8:	20000ff0 	.word	0x20000ff0
 80097dc:	20001c50 	.word	0x20001c50

080097e0 <takeWifiSSID>:

void takeWifiSSID() {
 80097e0:	b5b0      	push	{r4, r5, r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80097e6:	2001      	movs	r0, #1
 80097e8:	f000 fee8 	bl	800a5bc <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80097ec:	2214      	movs	r2, #20
 80097ee:	2100      	movs	r1, #0
 80097f0:	489a      	ldr	r0, [pc, #616]	@ (8009a5c <takeWifiSSID+0x27c>)
 80097f2:	f005 fb17 	bl	800ee24 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80097f6:	2301      	movs	r3, #1
 80097f8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80097fa:	2307      	movs	r3, #7
 80097fc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80097fe:	2301      	movs	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8009806:	4b96      	ldr	r3, [pc, #600]	@ (8009a60 <takeWifiSSID+0x280>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800980c:	2101      	movs	r1, #1
 800980e:	2002      	movs	r0, #2
 8009810:	f7f7 fb4e 	bl	8000eb0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009814:	2108      	movs	r1, #8
 8009816:	4893      	ldr	r0, [pc, #588]	@ (8009a64 <takeWifiSSID+0x284>)
 8009818:	f002 f99c 	bl	800bb54 <HAL_GPIO_ReadPin>
 800981c:	4603      	mov	r3, r0
 800981e:	2b01      	cmp	r3, #1
 8009820:	d106      	bne.n	8009830 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8009822:	f7ff ff6f 	bl	8009704 <ssidConfirmation>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	f040 8140 	bne.w	8009aae <takeWifiSSID+0x2ce>
        		goto mainSSIDSection;
 800982e:	e7da      	b.n	80097e6 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009830:	2101      	movs	r1, #1
 8009832:	488c      	ldr	r0, [pc, #560]	@ (8009a64 <takeWifiSSID+0x284>)
 8009834:	f002 f98e 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009838:	4603      	mov	r3, r0
 800983a:	2b01      	cmp	r3, #1
 800983c:	d14d      	bne.n	80098da <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b50      	cmp	r3, #80	@ 0x50
 8009842:	dd01      	ble.n	8009848 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8009844:	2301      	movs	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b10      	cmp	r3, #16
 800984c:	d13f      	bne.n	80098ce <takeWifiSSID+0xee>
            	if(page == 1) {
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d109      	bne.n	8009868 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]
            		page++;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	3301      	adds	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800985e:	2102      	movs	r1, #2
 8009860:	2002      	movs	r0, #2
 8009862:	f7f7 fb25 	bl	8000eb0 <printTemplate>
 8009866:	e035      	b.n	80098d4 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d109      	bne.n	8009882 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800986e:	2301      	movs	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]
            		page++;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	3301      	adds	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009878:	2103      	movs	r1, #3
 800987a:	2002      	movs	r0, #2
 800987c:	f7f7 fb18 	bl	8000eb0 <printTemplate>
 8009880:	e028      	b.n	80098d4 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d109      	bne.n	800989c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8009888:	2301      	movs	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
            		page++;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	3301      	adds	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009892:	2104      	movs	r1, #4
 8009894:	2002      	movs	r0, #2
 8009896:	f7f7 fb0b 	bl	8000eb0 <printTemplate>
 800989a:	e01b      	b.n	80098d4 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d109      	bne.n	80098b6 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 80098a2:	2301      	movs	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]
            		page++;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	3301      	adds	r3, #1
 80098aa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80098ac:	2105      	movs	r1, #5
 80098ae:	2002      	movs	r0, #2
 80098b0:	f7f7 fafe 	bl	8000eb0 <printTemplate>
 80098b4:	e00e      	b.n	80098d4 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b05      	cmp	r3, #5
 80098ba:	d10b      	bne.n	80098d4 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80098bc:	2301      	movs	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80098c4:	2101      	movs	r1, #1
 80098c6:	2002      	movs	r0, #2
 80098c8:	f7f7 faf2 	bl	8000eb0 <printTemplate>
 80098cc:	e002      	b.n	80098d4 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80098d4:	2096      	movs	r0, #150	@ 0x96
 80098d6:	f001 fb6d 	bl	800afb4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80098da:	2108      	movs	r1, #8
 80098dc:	4862      	ldr	r0, [pc, #392]	@ (8009a68 <takeWifiSSID+0x288>)
 80098de:	f002 f939 	bl	800bb54 <HAL_GPIO_ReadPin>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d149      	bne.n	800997c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dc01      	bgt.n	80098f2 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80098ee:	2350      	movs	r3, #80	@ 0x50
 80098f0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d13b      	bne.n	8009970 <takeWifiSSID+0x190>
            	if(page == 1) {
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d108      	bne.n	8009910 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80098fe:	2310      	movs	r3, #16
 8009900:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8009902:	2305      	movs	r3, #5
 8009904:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8009906:	2105      	movs	r1, #5
 8009908:	2002      	movs	r0, #2
 800990a:	f7f7 fad1 	bl	8000eb0 <printTemplate>
 800990e:	e032      	b.n	8009976 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d108      	bne.n	8009928 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8009916:	2310      	movs	r3, #16
 8009918:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800991a:	2301      	movs	r3, #1
 800991c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800991e:	2101      	movs	r1, #1
 8009920:	2002      	movs	r0, #2
 8009922:	f7f7 fac5 	bl	8000eb0 <printTemplate>
 8009926:	e026      	b.n	8009976 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d108      	bne.n	8009940 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 800992e:	2310      	movs	r3, #16
 8009930:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009932:	2302      	movs	r3, #2
 8009934:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8009936:	2102      	movs	r1, #2
 8009938:	2002      	movs	r0, #2
 800993a:	f7f7 fab9 	bl	8000eb0 <printTemplate>
 800993e:	e01a      	b.n	8009976 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b04      	cmp	r3, #4
 8009944:	d108      	bne.n	8009958 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8009946:	2310      	movs	r3, #16
 8009948:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800994a:	2303      	movs	r3, #3
 800994c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800994e:	2103      	movs	r1, #3
 8009950:	2002      	movs	r0, #2
 8009952:	f7f7 faad 	bl	8000eb0 <printTemplate>
 8009956:	e00e      	b.n	8009976 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b05      	cmp	r3, #5
 800995c:	d10b      	bne.n	8009976 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 800995e:	2310      	movs	r3, #16
 8009960:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8009962:	2304      	movs	r3, #4
 8009964:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8009966:	2104      	movs	r1, #4
 8009968:	2002      	movs	r0, #2
 800996a:	f7f7 faa1 	bl	8000eb0 <printTemplate>
 800996e:	e002      	b.n	8009976 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3b01      	subs	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009976:	2096      	movs	r0, #150	@ 0x96
 8009978:	f001 fb1c 	bl	800afb4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800997c:	2102      	movs	r1, #2
 800997e:	4839      	ldr	r0, [pc, #228]	@ (8009a64 <takeWifiSSID+0x284>)
 8009980:	f002 f8e8 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009984:	4603      	mov	r3, r0
 8009986:	2b01      	cmp	r3, #1
 8009988:	d137      	bne.n	80099fa <takeWifiSSID+0x21a>
            eepromData[eepromVal] = cursorPosition;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	17da      	asrs	r2, r3, #31
 800998e:	461c      	mov	r4, r3
 8009990:	4615      	mov	r5, r2
 8009992:	4a36      	ldr	r2, [pc, #216]	@ (8009a6c <takeWifiSSID+0x28c>)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	4413      	add	r3, r2
 800999a:	e9c3 4500 	strd	r4, r5, [r3]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 800999e:	4a34      	ldr	r2, [pc, #208]	@ (8009a70 <takeWifiSSID+0x290>)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	7819      	ldrb	r1, [r3, #0]
 80099a6:	4a2d      	ldr	r2, [pc, #180]	@ (8009a5c <takeWifiSSID+0x27c>)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4413      	add	r3, r2
 80099ac:	460a      	mov	r2, r1
 80099ae:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	b2d9      	uxtb	r1, r3
 80099b4:	4a2e      	ldr	r2, [pc, #184]	@ (8009a70 <takeWifiSSID+0x290>)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	2001      	movs	r0, #1
 80099c0:	f000 fdb3 	bl	800a52a <lcd_print_char>

            writeLoc++;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	3301      	adds	r3, #1
 80099c8:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3301      	adds	r3, #1
 80099d4:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80099d6:	4a25      	ldr	r2, [pc, #148]	@ (8009a6c <takeWifiSSID+0x28c>)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	18d1      	adds	r1, r2, r3
 80099de:	f04f 0200 	mov.w	r2, #0
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	e9c1 2300 	strd	r2, r3, [r1]
            wifiSSID[arrayPosition] = '\0';
 80099ea:	4a1c      	ldr	r2, [pc, #112]	@ (8009a5c <takeWifiSSID+0x27c>)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4413      	add	r3, r2
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80099f4:	2096      	movs	r0, #150	@ 0x96
 80099f6:	f001 fadd 	bl	800afb4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80099fa:	2104      	movs	r1, #4
 80099fc:	4819      	ldr	r0, [pc, #100]	@ (8009a64 <takeWifiSSID+0x284>)
 80099fe:	f002 f8a9 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d14b      	bne.n	8009aa0 <takeWifiSSID+0x2c0>
        	if(strlen(wifiSSID) >= 1) {
 8009a08:	4b14      	ldr	r3, [pc, #80]	@ (8009a5c <takeWifiSSID+0x27c>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d044      	beq.n	8009a9a <takeWifiSSID+0x2ba>
        		eepromData[eepromVal] = '\0';
 8009a10:	4a16      	ldr	r2, [pc, #88]	@ (8009a6c <takeWifiSSID+0x28c>)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	18d1      	adds	r1, r2, r3
 8009a18:	f04f 0200 	mov.w	r2, #0
 8009a1c:	f04f 0300 	mov.w	r3, #0
 8009a20:	e9c1 2300 	strd	r2, r3, [r1]
        		wifiSSID[arrayPosition] = '\0';
 8009a24:	4a0d      	ldr	r2, [pc, #52]	@ (8009a5c <takeWifiSSID+0x27c>)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4413      	add	r3, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]

        		//if(strlen(wifiSSID) > 10) {
        		    //slideTextInput(wifiSSID, 7, 1, 1);
        		//}

        		if(writeLoc > 7) {
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b07      	cmp	r3, #7
 8009a32:	dd03      	ble.n	8009a3c <takeWifiSSID+0x25c>
        			writeLoc--;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	e004      	b.n	8009a46 <takeWifiSSID+0x266>
        		} else if(writeLoc < 7) {
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2b06      	cmp	r3, #6
 8009a40:	dc01      	bgt.n	8009a46 <takeWifiSSID+0x266>
        			writeLoc = 7;
 8009a42:	2307      	movs	r3, #7
 8009a44:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dd13      	ble.n	8009a74 <takeWifiSSID+0x294>
        			arrayPosition--;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	607b      	str	r3, [r7, #4]
 8009a58:	e014      	b.n	8009a84 <takeWifiSSID+0x2a4>
 8009a5a:	bf00      	nop
 8009a5c:	20001374 	.word	0x20001374
 8009a60:	20000004 	.word	0x20000004
 8009a64:	40010800 	.word	0x40010800
 8009a68:	40011000 	.word	0x40011000
 8009a6c:	20000ff0 	.word	0x20000ff0
 8009a70:	20000018 	.word	0x20000018
        		} else if(arrayPosition < 0) {
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da04      	bge.n	8009a84 <takeWifiSSID+0x2a4>
        			arrayPosition = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab8 <takeWifiSSID+0x2d8>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	3307      	adds	r3, #7
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	2001      	movs	r0, #1
 8009a90:	f000 fd6c 	bl	800a56c <lcd_delete_char>
        		HAL_Delay(50);
 8009a94:	2032      	movs	r0, #50	@ 0x32
 8009a96:	f001 fa8d 	bl	800afb4 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8009a9a:	2096      	movs	r0, #150	@ 0x96
 8009a9c:	f001 fa8a 	bl	800afb4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	2002      	movs	r0, #2
 8009aa8:	f000 fd0b 	bl	800a4c2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009aac:	e6b2      	b.n	8009814 <takeWifiSSID+0x34>
        		break;
 8009aae:	bf00      	nop
    }
}
 8009ab0:	bf00      	nop
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ab8:	20000004 	.word	0x20000004

08009abc <passConfirmation>:

uint8_t passConfirmation() {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8009ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8009b78 <passConfirmation+0xbc>)
 8009ac8:	2101      	movs	r1, #1
 8009aca:	2001      	movs	r0, #1
 8009acc:	f000 fd18 	bl	800a500 <lcd_print>

	while(loopVal == 1) {
 8009ad0:	e01f      	b.n	8009b12 <passConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8009ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b7c <passConfirmation+0xc0>)
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	2002      	movs	r0, #2
 8009ad8:	f000 fd12 	bl	800a500 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009adc:	2102      	movs	r1, #2
 8009ade:	4828      	ldr	r0, [pc, #160]	@ (8009b80 <passConfirmation+0xc4>)
 8009ae0:	f002 f838 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <passConfirmation+0x32>
			loopVal = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiPass) > 16) {
 8009aee:	4825      	ldr	r0, [pc, #148]	@ (8009b84 <passConfirmation+0xc8>)
 8009af0:	f7f6 fb98 	bl	8000224 <strlen>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b10      	cmp	r3, #16
 8009af8:	d906      	bls.n	8009b08 <passConfirmation+0x4c>
			slideText(wifiPass, 1, 1, 1);
 8009afa:	2301      	movs	r3, #1
 8009afc:	2201      	movs	r2, #1
 8009afe:	2101      	movs	r1, #1
 8009b00:	4820      	ldr	r0, [pc, #128]	@ (8009b84 <passConfirmation+0xc8>)
 8009b02:	f7f7 fb79 	bl	80011f8 <slideText>
 8009b06:	e004      	b.n	8009b12 <passConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiPass);
 8009b08:	4a1e      	ldr	r2, [pc, #120]	@ (8009b84 <passConfirmation+0xc8>)
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	f000 fcf7 	bl	800a500 <lcd_print>
	while(loopVal == 1) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d0dc      	beq.n	8009ad2 <passConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8009b18:	2000      	movs	r0, #0
 8009b1a:	f000 fd4f 	bl	800a5bc <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8009b1e:	4819      	ldr	r0, [pc, #100]	@ (8009b84 <passConfirmation+0xc8>)
 8009b20:	f7f6 fb80 	bl	8000224 <strlen>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b14      	cmp	r3, #20
 8009b28:	d90f      	bls.n	8009b4a <passConfirmation+0x8e>
    	lcd_print(1, 1, passExceedErrorText);
 8009b2a:	4a17      	ldr	r2, [pc, #92]	@ (8009b88 <passConfirmation+0xcc>)
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	2001      	movs	r0, #1
 8009b30:	f000 fce6 	bl	800a500 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8009b34:	4a15      	ldr	r2, [pc, #84]	@ (8009b8c <passConfirmation+0xd0>)
 8009b36:	2101      	movs	r1, #1
 8009b38:	2002      	movs	r0, #2
 8009b3a:	f000 fce1 	bl	800a500 <lcd_print>
        HAL_Delay(1250);
 8009b3e:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8009b42:	f001 fa37 	bl	800afb4 <HAL_Delay>

        return 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e011      	b.n	8009b6e <passConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8009b4a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009b4e:	9302      	str	r3, [sp, #8]
 8009b50:	236e      	movs	r3, #110	@ 0x6e
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	4b0e      	ldr	r3, [pc, #56]	@ (8009b90 <passConfirmation+0xd4>)
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	236e      	movs	r3, #110	@ 0x6e
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	21a0      	movs	r1, #160	@ 0xa0
 8009b5e:	480d      	ldr	r0, [pc, #52]	@ (8009b94 <passConfirmation+0xd8>)
 8009b60:	f002 fab2 	bl	800c0c8 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8009b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009b68:	f001 fa24 	bl	800afb4 <HAL_Delay>

    	return 1;
 8009b6c:	2301      	movs	r3, #1
    }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	0800f8f0 	.word	0x0800f8f0
 8009b7c:	20001c14 	.word	0x20001c14
 8009b80:	40010800 	.word	0x40010800
 8009b84:	20001388 	.word	0x20001388
 8009b88:	20001b4c 	.word	0x20001b4c
 8009b8c:	20001b60 	.word	0x20001b60
 8009b90:	20000ff0 	.word	0x20000ff0
 8009b94:	20001c50 	.word	0x20001c50

08009b98 <takeWifiPass>:

void takeWifiPass() {
 8009b98:	b5b0      	push	{r4, r5, r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	f000 fd0c 	bl	800a5bc <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8009ba4:	2214      	movs	r2, #20
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	489a      	ldr	r0, [pc, #616]	@ (8009e14 <takeWifiPass+0x27c>)
 8009baa:	f005 f93b 	bl	800ee24 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8009bae:	2301      	movs	r3, #1
 8009bb0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8009bb2:	2307      	movs	r3, #7
 8009bb4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8009bbe:	4b96      	ldr	r3, [pc, #600]	@ (8009e18 <takeWifiPass+0x280>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	2003      	movs	r0, #3
 8009bc8:	f7f7 f972 	bl	8000eb0 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009bcc:	2108      	movs	r1, #8
 8009bce:	4893      	ldr	r0, [pc, #588]	@ (8009e1c <takeWifiPass+0x284>)
 8009bd0:	f001 ffc0 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d106      	bne.n	8009be8 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8009bda:	f7ff ff6f 	bl	8009abc <passConfirmation>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f040 8140 	bne.w	8009e66 <takeWifiPass+0x2ce>
    	        goto mainPassSection;
 8009be6:	e7da      	b.n	8009b9e <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009be8:	2101      	movs	r1, #1
 8009bea:	488c      	ldr	r0, [pc, #560]	@ (8009e1c <takeWifiPass+0x284>)
 8009bec:	f001 ffb2 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d14d      	bne.n	8009c92 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b50      	cmp	r3, #80	@ 0x50
 8009bfa:	dd01      	ble.n	8009c00 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b10      	cmp	r3, #16
 8009c04:	d13f      	bne.n	8009c86 <takeWifiPass+0xee>
            	if(page == 1) {
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d109      	bne.n	8009c20 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]
            		page++;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	3301      	adds	r3, #1
 8009c14:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8009c16:	2102      	movs	r1, #2
 8009c18:	2003      	movs	r0, #3
 8009c1a:	f7f7 f949 	bl	8000eb0 <printTemplate>
 8009c1e:	e035      	b.n	8009c8c <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d109      	bne.n	8009c3a <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8009c26:	2301      	movs	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
            		page++;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8009c30:	2103      	movs	r1, #3
 8009c32:	2003      	movs	r0, #3
 8009c34:	f7f7 f93c 	bl	8000eb0 <printTemplate>
 8009c38:	e028      	b.n	8009c8c <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d109      	bne.n	8009c54 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8009c40:	2301      	movs	r3, #1
 8009c42:	60fb      	str	r3, [r7, #12]
            		page++;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	3301      	adds	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8009c4a:	2104      	movs	r1, #4
 8009c4c:	2003      	movs	r0, #3
 8009c4e:	f7f7 f92f 	bl	8000eb0 <printTemplate>
 8009c52:	e01b      	b.n	8009c8c <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d109      	bne.n	8009c6e <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
            		page++;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	3301      	adds	r3, #1
 8009c62:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8009c64:	2105      	movs	r1, #5
 8009c66:	2003      	movs	r0, #3
 8009c68:	f7f7 f922 	bl	8000eb0 <printTemplate>
 8009c6c:	e00e      	b.n	8009c8c <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	d10b      	bne.n	8009c8c <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	2003      	movs	r0, #3
 8009c80:	f7f7 f916 	bl	8000eb0 <printTemplate>
 8009c84:	e002      	b.n	8009c8c <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009c8c:	2096      	movs	r0, #150	@ 0x96
 8009c8e:	f001 f991 	bl	800afb4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8009c92:	2108      	movs	r1, #8
 8009c94:	4862      	ldr	r0, [pc, #392]	@ (8009e20 <takeWifiPass+0x288>)
 8009c96:	f001 ff5d 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d149      	bne.n	8009d34 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc01      	bgt.n	8009caa <takeWifiPass+0x112>
        		cursorPosition = 80;
 8009ca6:	2350      	movs	r3, #80	@ 0x50
 8009ca8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d13b      	bne.n	8009d28 <takeWifiPass+0x190>
            	if(page == 1) {
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d108      	bne.n	8009cc8 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8009cb6:	2310      	movs	r3, #16
 8009cb8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8009cba:	2305      	movs	r3, #5
 8009cbc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8009cbe:	2105      	movs	r1, #5
 8009cc0:	2003      	movs	r0, #3
 8009cc2:	f7f7 f8f5 	bl	8000eb0 <printTemplate>
 8009cc6:	e032      	b.n	8009d2e <takeWifiPass+0x196>
            	} else if(page == 2) {
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d108      	bne.n	8009ce0 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8009cce:	2310      	movs	r3, #16
 8009cd0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	2003      	movs	r0, #3
 8009cda:	f7f7 f8e9 	bl	8000eb0 <printTemplate>
 8009cde:	e026      	b.n	8009d2e <takeWifiPass+0x196>
            	} else if(page == 3) {
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d108      	bne.n	8009cf8 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009cea:	2302      	movs	r3, #2
 8009cec:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8009cee:	2102      	movs	r1, #2
 8009cf0:	2003      	movs	r0, #3
 8009cf2:	f7f7 f8dd 	bl	8000eb0 <printTemplate>
 8009cf6:	e01a      	b.n	8009d2e <takeWifiPass+0x196>
            	} else if(page == 4) {
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d108      	bne.n	8009d10 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8009cfe:	2310      	movs	r3, #16
 8009d00:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8009d02:	2303      	movs	r3, #3
 8009d04:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8009d06:	2103      	movs	r1, #3
 8009d08:	2003      	movs	r0, #3
 8009d0a:	f7f7 f8d1 	bl	8000eb0 <printTemplate>
 8009d0e:	e00e      	b.n	8009d2e <takeWifiPass+0x196>
            	} else if(page == 5) {
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d10b      	bne.n	8009d2e <takeWifiPass+0x196>
            		cursorPosition = 16;
 8009d16:	2310      	movs	r3, #16
 8009d18:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8009d1e:	2104      	movs	r1, #4
 8009d20:	2003      	movs	r0, #3
 8009d22:	f7f7 f8c5 	bl	8000eb0 <printTemplate>
 8009d26:	e002      	b.n	8009d2e <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009d2e:	2096      	movs	r0, #150	@ 0x96
 8009d30:	f001 f940 	bl	800afb4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009d34:	2102      	movs	r1, #2
 8009d36:	4839      	ldr	r0, [pc, #228]	@ (8009e1c <takeWifiPass+0x284>)
 8009d38:	f001 ff0c 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d137      	bne.n	8009db2 <takeWifiPass+0x21a>
            eepromData[eepromVal] = cursorPosition;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	17da      	asrs	r2, r3, #31
 8009d46:	461c      	mov	r4, r3
 8009d48:	4615      	mov	r5, r2
 8009d4a:	4a36      	ldr	r2, [pc, #216]	@ (8009e24 <takeWifiPass+0x28c>)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	4413      	add	r3, r2
 8009d52:	e9c3 4500 	strd	r4, r5, [r3]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8009d56:	4a34      	ldr	r2, [pc, #208]	@ (8009e28 <takeWifiPass+0x290>)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	7819      	ldrb	r1, [r3, #0]
 8009d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8009e14 <takeWifiPass+0x27c>)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4413      	add	r3, r2
 8009d64:	460a      	mov	r2, r1
 8009d66:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	b2d9      	uxtb	r1, r3
 8009d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8009e28 <takeWifiPass+0x290>)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4413      	add	r3, r2
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	2001      	movs	r0, #1
 8009d78:	f000 fbd7 	bl	800a52a <lcd_print_char>

            writeLoc++;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8009d8e:	4a25      	ldr	r2, [pc, #148]	@ (8009e24 <takeWifiPass+0x28c>)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	18d1      	adds	r1, r2, r3
 8009d96:	f04f 0200 	mov.w	r2, #0
 8009d9a:	f04f 0300 	mov.w	r3, #0
 8009d9e:	e9c1 2300 	strd	r2, r3, [r1]
            wifiPass[arrayPosition] = '\0';
 8009da2:	4a1c      	ldr	r2, [pc, #112]	@ (8009e14 <takeWifiPass+0x27c>)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	4413      	add	r3, r2
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8009dac:	2096      	movs	r0, #150	@ 0x96
 8009dae:	f001 f901 	bl	800afb4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8009db2:	2104      	movs	r1, #4
 8009db4:	4819      	ldr	r0, [pc, #100]	@ (8009e1c <takeWifiPass+0x284>)
 8009db6:	f001 fecd 	bl	800bb54 <HAL_GPIO_ReadPin>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d14b      	bne.n	8009e58 <takeWifiPass+0x2c0>
        	if(strlen(wifiPass) >= 1) {
 8009dc0:	4b14      	ldr	r3, [pc, #80]	@ (8009e14 <takeWifiPass+0x27c>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d044      	beq.n	8009e52 <takeWifiPass+0x2ba>
        		eepromData[eepromVal] = '\0';
 8009dc8:	4a16      	ldr	r2, [pc, #88]	@ (8009e24 <takeWifiPass+0x28c>)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	18d1      	adds	r1, r2, r3
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	e9c1 2300 	strd	r2, r3, [r1]
        		wifiPass[arrayPosition] = '\0';
 8009ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8009e14 <takeWifiPass+0x27c>)
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b07      	cmp	r3, #7
 8009dea:	dd03      	ble.n	8009df4 <takeWifiPass+0x25c>
        			writeLoc--;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	e004      	b.n	8009dfe <takeWifiPass+0x266>
        		} else if(writeLoc < 7) {
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	2b06      	cmp	r3, #6
 8009df8:	dc01      	bgt.n	8009dfe <takeWifiPass+0x266>
        			writeLoc = 7;
 8009dfa:	2307      	movs	r3, #7
 8009dfc:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dd13      	ble.n	8009e2c <takeWifiPass+0x294>
        			arrayPosition--;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	607b      	str	r3, [r7, #4]
 8009e10:	e014      	b.n	8009e3c <takeWifiPass+0x2a4>
 8009e12:	bf00      	nop
 8009e14:	20001388 	.word	0x20001388
 8009e18:	20000008 	.word	0x20000008
 8009e1c:	40010800 	.word	0x40010800
 8009e20:	40011000 	.word	0x40011000
 8009e24:	20000ff0 	.word	0x20000ff0
 8009e28:	20000018 	.word	0x20000018
        		} else if(arrayPosition < 0) {
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	da04      	bge.n	8009e3c <takeWifiPass+0x2a4>
        			arrayPosition = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8009e36:	4b0e      	ldr	r3, [pc, #56]	@ (8009e70 <takeWifiPass+0x2d8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	3307      	adds	r3, #7
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	4619      	mov	r1, r3
 8009e46:	2001      	movs	r0, #1
 8009e48:	f000 fb90 	bl	800a56c <lcd_delete_char>
        		HAL_Delay(50);
 8009e4c:	2032      	movs	r0, #50	@ 0x32
 8009e4e:	f001 f8b1 	bl	800afb4 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8009e52:	2096      	movs	r0, #150	@ 0x96
 8009e54:	f001 f8ae 	bl	800afb4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	2002      	movs	r0, #2
 8009e60:	f000 fb2f 	bl	800a4c2 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009e64:	e6b2      	b.n	8009bcc <takeWifiPass+0x34>
    	        break;
 8009e66:	bf00      	nop
    }
}
 8009e68:	bf00      	nop
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e70:	20000008 	.word	0x20000008

08009e74 <mergeData>:

char* mergeData() {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b09c      	sub	sp, #112	@ 0x70
 8009e78:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e7e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009e82:	2229      	movs	r2, #41	@ 0x29
 8009e84:	2100      	movs	r1, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f004 ffcc 	bl	800ee24 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8009e8c:	4b66      	ldr	r3, [pc, #408]	@ (800a028 <mergeData+0x1b4>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	703b      	strb	r3, [r7, #0]
 8009e92:	4b66      	ldr	r3, [pc, #408]	@ (800a02c <mergeData+0x1b8>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	707b      	strb	r3, [r7, #1]
 8009e98:	4b65      	ldr	r3, [pc, #404]	@ (800a030 <mergeData+0x1bc>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	70bb      	strb	r3, [r7, #2]
 8009e9e:	4b65      	ldr	r3, [pc, #404]	@ (800a034 <mergeData+0x1c0>)
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	70fb      	strb	r3, [r7, #3]
 8009ea4:	4b64      	ldr	r3, [pc, #400]	@ (800a038 <mergeData+0x1c4>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	713b      	strb	r3, [r7, #4]
 8009eaa:	4b64      	ldr	r3, [pc, #400]	@ (800a03c <mergeData+0x1c8>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	717b      	strb	r3, [r7, #5]
 8009eb0:	4b63      	ldr	r3, [pc, #396]	@ (800a040 <mergeData+0x1cc>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	71bb      	strb	r3, [r7, #6]
 8009eb6:	4b63      	ldr	r3, [pc, #396]	@ (800a044 <mergeData+0x1d0>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
 8009ebc:	4b62      	ldr	r3, [pc, #392]	@ (800a048 <mergeData+0x1d4>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	723b      	strb	r3, [r7, #8]
 8009ec2:	4b62      	ldr	r3, [pc, #392]	@ (800a04c <mergeData+0x1d8>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	727b      	strb	r3, [r7, #9]
 8009ec8:	4b61      	ldr	r3, [pc, #388]	@ (800a050 <mergeData+0x1dc>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	72bb      	strb	r3, [r7, #10]
 8009ece:	4b61      	ldr	r3, [pc, #388]	@ (800a054 <mergeData+0x1e0>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	72fb      	strb	r3, [r7, #11]
 8009ed4:	4b60      	ldr	r3, [pc, #384]	@ (800a058 <mergeData+0x1e4>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	733b      	strb	r3, [r7, #12]
 8009eda:	4b60      	ldr	r3, [pc, #384]	@ (800a05c <mergeData+0x1e8>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	737b      	strb	r3, [r7, #13]
 8009ee0:	4b5f      	ldr	r3, [pc, #380]	@ (800a060 <mergeData+0x1ec>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	73bb      	strb	r3, [r7, #14]
 8009ee6:	4b5f      	ldr	r3, [pc, #380]	@ (800a064 <mergeData+0x1f0>)
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	73fb      	strb	r3, [r7, #15]
 8009eec:	4b5e      	ldr	r3, [pc, #376]	@ (800a068 <mergeData+0x1f4>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	743b      	strb	r3, [r7, #16]
 8009ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800a06c <mergeData+0x1f8>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	747b      	strb	r3, [r7, #17]
 8009ef8:	4b5d      	ldr	r3, [pc, #372]	@ (800a070 <mergeData+0x1fc>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	74bb      	strb	r3, [r7, #18]
 8009efe:	4b5d      	ldr	r3, [pc, #372]	@ (800a074 <mergeData+0x200>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	74fb      	strb	r3, [r7, #19]
 8009f04:	4b5c      	ldr	r3, [pc, #368]	@ (800a078 <mergeData+0x204>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	753b      	strb	r3, [r7, #20]
 8009f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800a07c <mergeData+0x208>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	757b      	strb	r3, [r7, #21]
 8009f10:	4b5b      	ldr	r3, [pc, #364]	@ (800a080 <mergeData+0x20c>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	75bb      	strb	r3, [r7, #22]
 8009f16:	4b5b      	ldr	r3, [pc, #364]	@ (800a084 <mergeData+0x210>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	75fb      	strb	r3, [r7, #23]
 8009f1c:	4b5a      	ldr	r3, [pc, #360]	@ (800a088 <mergeData+0x214>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	763b      	strb	r3, [r7, #24]
 8009f22:	4b5a      	ldr	r3, [pc, #360]	@ (800a08c <mergeData+0x218>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	767b      	strb	r3, [r7, #25]
 8009f28:	4b59      	ldr	r3, [pc, #356]	@ (800a090 <mergeData+0x21c>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	76bb      	strb	r3, [r7, #26]
 8009f2e:	4b59      	ldr	r3, [pc, #356]	@ (800a094 <mergeData+0x220>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	b2d3      	uxtb	r3, r2
 8009f36:	76fb      	strb	r3, [r7, #27]
 8009f38:	4b57      	ldr	r3, [pc, #348]	@ (800a098 <mergeData+0x224>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	b2d3      	uxtb	r3, r2
 8009f40:	773b      	strb	r3, [r7, #28]
 8009f42:	4b56      	ldr	r3, [pc, #344]	@ (800a09c <mergeData+0x228>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8009f48:	4b55      	ldr	r3, [pc, #340]	@ (800a0a0 <mergeData+0x22c>)
 8009f4a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	@ 0x130
	uint8_t uintVariables[] = {
 8009f4e:	b2d3      	uxtb	r3, r2
 8009f50:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8009f52:	4b53      	ldr	r3, [pc, #332]	@ (800a0a0 <mergeData+0x22c>)
 8009f54:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	@ 0x138
	uint8_t uintVariables[] = {
 8009f58:	b2d3      	uxtb	r3, r2
 8009f5a:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8009f5c:	4b50      	ldr	r3, [pc, #320]	@ (800a0a0 <mergeData+0x22c>)
 8009f5e:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
	uint8_t uintVariables[] = {
 8009f62:	b2d3      	uxtb	r3, r2
 8009f64:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8009f68:	4b4d      	ldr	r3, [pc, #308]	@ (800a0a0 <mergeData+0x22c>)
 8009f6a:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	@ 0x148
	uint8_t uintVariables[] = {
 8009f6e:	b2d3      	uxtb	r3, r2
 8009f70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8009f74:	4b4a      	ldr	r3, [pc, #296]	@ (800a0a0 <mergeData+0x22c>)
 8009f76:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	@ 0x150
	uint8_t uintVariables[] = {
 8009f7a:	b2d3      	uxtb	r3, r2
 8009f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8009f80:	4b47      	ldr	r3, [pc, #284]	@ (800a0a0 <mergeData+0x22c>)
 8009f82:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	@ 0x158
	uint8_t uintVariables[] = {
 8009f86:	b2d3      	uxtb	r3, r2
 8009f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8009f8c:	4b44      	ldr	r3, [pc, #272]	@ (800a0a0 <mergeData+0x22c>)
 8009f8e:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
	uint8_t uintVariables[] = {
 8009f92:	b2d3      	uxtb	r3, r2
 8009f94:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8009f98:	4b41      	ldr	r3, [pc, #260]	@ (800a0a0 <mergeData+0x22c>)
 8009f9a:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	@ 0x168
	uint8_t uintVariables[] = {
 8009f9e:	b2d3      	uxtb	r3, r2
 8009fa0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8009fa4:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a0 <mergeData+0x22c>)
 8009fa6:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	@ 0x170
	uint8_t uintVariables[] = {
 8009faa:	b2d3      	uxtb	r3, r2
 8009fac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8009fb0:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a0 <mergeData+0x22c>)
 8009fb2:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	@ 0x178
	uint8_t uintVariables[] = {
 8009fb6:	b2d3      	uxtb	r3, r2
 8009fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009fbc:	2306      	movs	r3, #6
 8009fbe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc6:	e015      	b.n	8009ff4 <mergeData+0x180>
	    sprintf(temp, "%u", uintVariables[i]);
 8009fc8:	463a      	mov	r2, r7
 8009fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fcc:	4413      	add	r3, r2
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fd6:	4933      	ldr	r1, [pc, #204]	@ (800a0a4 <mergeData+0x230>)
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f004 fe9f 	bl	800ed1c <siprintf>
	    strcat(combinedString, temp);
 8009fde:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009fe2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f004 fef9 	bl	800ede0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8009fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ff6:	2b28      	cmp	r3, #40	@ 0x28
 8009ff8:	d9e6      	bls.n	8009fc8 <mergeData+0x154>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8009ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f6 f910 	bl	8000224 <strlen>
 800a004:	4603      	mov	r3, r0
 800a006:	3301      	adds	r3, #1
 800a008:	4618      	mov	r0, r3
 800a00a:	f004 fdd1 	bl	800ebb0 <malloc>
 800a00e:	4603      	mov	r3, r0
 800a010:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 800a012:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a016:	4619      	mov	r1, r3
 800a018:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a01a:	f004 ff47 	bl	800eeac <strcpy>
	return result;
 800a01e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 800a020:	4618      	mov	r0, r3
 800a022:	3770      	adds	r7, #112	@ 0x70
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	200013df 	.word	0x200013df
 800a02c:	200013d1 	.word	0x200013d1
 800a030:	200013d4 	.word	0x200013d4
 800a034:	200013d5 	.word	0x200013d5
 800a038:	200013d6 	.word	0x200013d6
 800a03c:	200013dd 	.word	0x200013dd
 800a040:	200013d7 	.word	0x200013d7
 800a044:	200013d8 	.word	0x200013d8
 800a048:	200013dc 	.word	0x200013dc
 800a04c:	200013d9 	.word	0x200013d9
 800a050:	200013e9 	.word	0x200013e9
 800a054:	200013da 	.word	0x200013da
 800a058:	200013ea 	.word	0x200013ea
 800a05c:	200013db 	.word	0x200013db
 800a060:	200013eb 	.word	0x200013eb
 800a064:	200013de 	.word	0x200013de
 800a068:	200013e0 	.word	0x200013e0
 800a06c:	200013e1 	.word	0x200013e1
 800a070:	200013e2 	.word	0x200013e2
 800a074:	200013e3 	.word	0x200013e3
 800a078:	200013e4 	.word	0x200013e4
 800a07c:	200013e5 	.word	0x200013e5
 800a080:	200013e6 	.word	0x200013e6
 800a084:	200013e7 	.word	0x200013e7
 800a088:	200013e8 	.word	0x200013e8
 800a08c:	200013ec 	.word	0x200013ec
 800a090:	200013ee 	.word	0x200013ee
 800a094:	200013c0 	.word	0x200013c0
 800a098:	200013c8 	.word	0x200013c8
 800a09c:	200013f1 	.word	0x200013f1
 800a0a0:	20000ff0 	.word	0x20000ff0
 800a0a4:	0800f904 	.word	0x0800f904

0800a0a8 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 800a0ae:	4a13      	ldr	r2, [pc, #76]	@ (800a0fc <convertAndSendData+0x54>)
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	f000 fa24 	bl	800a500 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 800a0b8:	4a11      	ldr	r2, [pc, #68]	@ (800a100 <convertAndSendData+0x58>)
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	2002      	movs	r0, #2
 800a0be:	f000 fa1f 	bl	800a500 <lcd_print>

	for(int i=0; i<2; i++) {
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	607b      	str	r3, [r7, #4]
 800a0c6:	e00c      	b.n	800a0e2 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 800a0c8:	f7ff fed4 	bl	8009e74 <mergeData>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a104 <convertAndSendData+0x5c>)
 800a0d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a108 <convertAndSendData+0x60>)
 800a0d4:	490d      	ldr	r1, [pc, #52]	@ (800a10c <convertAndSendData+0x64>)
 800a0d6:	480e      	ldr	r0, [pc, #56]	@ (800a110 <convertAndSendData+0x68>)
 800a0d8:	f7f6 fc84 	bl	80009e4 <sendMachineData>
	for(int i=0; i<2; i++) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	ddef      	ble.n	800a0c8 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 800a0e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a0ec:	f000 ff62 	bl	800afb4 <HAL_Delay>
	lcd_clear();
 800a0f0:	f000 fa32 	bl	800a558 <lcd_clear>
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20001aac 	.word	0x20001aac
 800a100:	20001ac0 	.word	0x20001ac0
 800a104:	20001388 	.word	0x20001388
 800a108:	20001374 	.word	0x20001374
 800a10c:	20001368 	.word	0x20001368
 800a110:	20001cec 	.word	0x20001cec

0800a114 <iotSetup>:

void iotSetup() {
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 800a118:	4b13      	ldr	r3, [pc, #76]	@ (800a168 <iotSetup+0x54>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d016      	beq.n	800a14e <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 800a120:	f000 f82e 	bl	800a180 <checkEEPROM4ID>
 800a124:	4603      	mov	r3, r0
 800a126:	2b01      	cmp	r3, #1
 800a128:	d001      	beq.n	800a12e <iotSetup+0x1a>
			takeMachineID();
 800a12a:	f7ff f92b 	bl	8009384 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 800a12e:	480f      	ldr	r0, [pc, #60]	@ (800a16c <iotSetup+0x58>)
 800a130:	f7f6 f878 	bl	8000224 <strlen>
 800a134:	4603      	mov	r3, r0
 800a136:	2b01      	cmp	r3, #1
 800a138:	d801      	bhi.n	800a13e <iotSetup+0x2a>
			takeWifiSSID();
 800a13a:	f7ff fb51 	bl	80097e0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 800a13e:	480c      	ldr	r0, [pc, #48]	@ (800a170 <iotSetup+0x5c>)
 800a140:	f7f6 f870 	bl	8000224 <strlen>
 800a144:	4603      	mov	r3, r0
 800a146:	2b01      	cmp	r3, #1
 800a148:	d801      	bhi.n	800a14e <iotSetup+0x3a>
			takeWifiPass();
 800a14a:	f7ff fd25 	bl	8009b98 <takeWifiPass>
			//HAL_Delay(200);
			//goto takeIDSection;
		//}
	//}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 800a14e:	4a09      	ldr	r2, [pc, #36]	@ (800a174 <iotSetup+0x60>)
 800a150:	4909      	ldr	r1, [pc, #36]	@ (800a178 <iotSetup+0x64>)
 800a152:	480a      	ldr	r0, [pc, #40]	@ (800a17c <iotSetup+0x68>)
 800a154:	f7f6 fb9e 	bl	8000894 <ESP8266_Init>
	HAL_Delay(500);
 800a158:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a15c:	f000 ff2a 	bl	800afb4 <HAL_Delay>
	convertAndSendData();
 800a160:	f7ff ffa2 	bl	800a0a8 <convertAndSendData>
}
 800a164:	bf00      	nop
 800a166:	bd80      	pop	{r7, pc}
 800a168:	200013ef 	.word	0x200013ef
 800a16c:	20001374 	.word	0x20001374
 800a170:	20001388 	.word	0x20001388
 800a174:	0800f908 	.word	0x0800f908
 800a178:	0800f920 	.word	0x0800f920
 800a17c:	20001cec 	.word	0x20001cec

0800a180 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800a186:	4b10      	ldr	r3, [pc, #64]	@ (800a1c8 <checkEEPROM4ID+0x48>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 800a18c:	2301      	movs	r3, #1
 800a18e:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 800a190:	2300      	movs	r3, #0
 800a192:	607b      	str	r3, [r7, #4]
 800a194:	e00f      	b.n	800a1b6 <checkEEPROM4ID+0x36>
		if(eepromData[eepromVal] == '\0') {
 800a196:	4a0d      	ldr	r2, [pc, #52]	@ (800a1cc <checkEEPROM4ID+0x4c>)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	4413      	add	r3, r2
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	d101      	bne.n	800a1aa <checkEEPROM4ID+0x2a>
			returnVal = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	607b      	str	r3, [r7, #4]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b0b      	cmp	r3, #11
 800a1ba:	ddec      	ble.n	800a196 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bc80      	pop	{r7}
 800a1c6:	4770      	bx	lr
 800a1c8:	20000000 	.word	0x20000000
 800a1cc:	20000ff0 	.word	0x20000ff0

0800a1d0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	f023 030f 	bic.w	r3, r3, #15
 800a1e0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800a1e8:	7b7b      	ldrb	r3, [r7, #13]
 800a1ea:	f043 030c 	orr.w	r3, r3, #12
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800a1f2:	7b7b      	ldrb	r3, [r7, #13]
 800a1f4:	f043 0308 	orr.w	r3, r3, #8
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800a1fc:	7b3b      	ldrb	r3, [r7, #12]
 800a1fe:	f043 030c 	orr.w	r3, r3, #12
 800a202:	b2db      	uxtb	r3, r3
 800a204:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800a206:	7b3b      	ldrb	r3, [r7, #12]
 800a208:	f043 0308 	orr.w	r3, r3, #8
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800a210:	bf00      	nop
 800a212:	4825      	ldr	r0, [pc, #148]	@ (800a2a8 <lcd_send_cmd+0xd8>)
 800a214:	f002 fac7 	bl	800c7a6 <HAL_I2C_GetError>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d0f9      	beq.n	800a212 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800a21e:	bf00      	nop
 800a220:	4821      	ldr	r0, [pc, #132]	@ (800a2a8 <lcd_send_cmd+0xd8>)
 800a222:	f002 fab3 	bl	800c78c <HAL_I2C_GetState>
 800a226:	4603      	mov	r3, r0
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d1f9      	bne.n	800a220 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800a22c:	4b1f      	ldr	r3, [pc, #124]	@ (800a2ac <lcd_send_cmd+0xdc>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d116      	bne.n	800a262 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
 800a238:	e00f      	b.n	800a25a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
 800a23c:	3310      	adds	r3, #16
 800a23e:	443b      	add	r3, r7
 800a240:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	f022 0208 	bic.w	r2, r2, #8
 800a24a:	b2d2      	uxtb	r2, r2
 800a24c:	3310      	adds	r3, #16
 800a24e:	443b      	add	r3, r7
 800a250:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	3301      	adds	r3, #1
 800a258:	73fb      	strb	r3, [r7, #15]
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d9ec      	bls.n	800a23a <lcd_send_cmd+0x6a>
 800a260:	e015      	b.n	800a28e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800a262:	2300      	movs	r3, #0
 800a264:	73bb      	strb	r3, [r7, #14]
 800a266:	e00f      	b.n	800a288 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800a268:	7bbb      	ldrb	r3, [r7, #14]
 800a26a:	3310      	adds	r3, #16
 800a26c:	443b      	add	r3, r7
 800a26e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	f042 0208 	orr.w	r2, r2, #8
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	3310      	adds	r3, #16
 800a27c:	443b      	add	r3, r7
 800a27e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	3301      	adds	r3, #1
 800a286:	73bb      	strb	r3, [r7, #14]
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d9ec      	bls.n	800a268 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800a28e:	f107 0208 	add.w	r2, r7, #8
 800a292:	2364      	movs	r3, #100	@ 0x64
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	2304      	movs	r3, #4
 800a298:	214e      	movs	r1, #78	@ 0x4e
 800a29a:	4803      	ldr	r0, [pc, #12]	@ (800a2a8 <lcd_send_cmd+0xd8>)
 800a29c:	f001 fe16 	bl	800becc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20001c50 	.word	0x20001c50
 800a2ac:	20001c25 	.word	0x20001c25

0800a2b0 <lcd_send_data>:

void lcd_send_data (char data) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	f023 030f 	bic.w	r3, r3, #15
 800a2c0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800a2c8:	7b7b      	ldrb	r3, [r7, #13]
 800a2ca:	f043 030d 	orr.w	r3, r3, #13
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800a2d2:	7b7b      	ldrb	r3, [r7, #13]
 800a2d4:	f043 0309 	orr.w	r3, r3, #9
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800a2dc:	7b3b      	ldrb	r3, [r7, #12]
 800a2de:	f043 030d 	orr.w	r3, r3, #13
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800a2e6:	7b3b      	ldrb	r3, [r7, #12]
 800a2e8:	f043 0309 	orr.w	r3, r3, #9
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800a2f0:	bf00      	nop
 800a2f2:	4825      	ldr	r0, [pc, #148]	@ (800a388 <lcd_send_data+0xd8>)
 800a2f4:	f002 fa57 	bl	800c7a6 <HAL_I2C_GetError>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d0f9      	beq.n	800a2f2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800a2fe:	bf00      	nop
 800a300:	4821      	ldr	r0, [pc, #132]	@ (800a388 <lcd_send_data+0xd8>)
 800a302:	f002 fa43 	bl	800c78c <HAL_I2C_GetState>
 800a306:	4603      	mov	r3, r0
 800a308:	2b20      	cmp	r3, #32
 800a30a:	d1f9      	bne.n	800a300 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 800a30c:	4b1f      	ldr	r3, [pc, #124]	@ (800a38c <lcd_send_data+0xdc>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d116      	bne.n	800a342 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
 800a318:	e00f      	b.n	800a33a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	3310      	adds	r3, #16
 800a31e:	443b      	add	r3, r7
 800a320:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	f022 0208 	bic.w	r2, r2, #8
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	3310      	adds	r3, #16
 800a32e:	443b      	add	r3, r7
 800a330:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	3301      	adds	r3, #1
 800a338:	73fb      	strb	r3, [r7, #15]
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d9ec      	bls.n	800a31a <lcd_send_data+0x6a>
 800a340:	e015      	b.n	800a36e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800a342:	2300      	movs	r3, #0
 800a344:	73bb      	strb	r3, [r7, #14]
 800a346:	e00f      	b.n	800a368 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	3310      	adds	r3, #16
 800a34c:	443b      	add	r3, r7
 800a34e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a352:	7bbb      	ldrb	r3, [r7, #14]
 800a354:	f042 0208 	orr.w	r2, r2, #8
 800a358:	b2d2      	uxtb	r2, r2
 800a35a:	3310      	adds	r3, #16
 800a35c:	443b      	add	r3, r7
 800a35e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	3301      	adds	r3, #1
 800a366:	73bb      	strb	r3, [r7, #14]
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d9ec      	bls.n	800a348 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800a36e:	f107 0208 	add.w	r2, r7, #8
 800a372:	2364      	movs	r3, #100	@ 0x64
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	2304      	movs	r3, #4
 800a378:	214e      	movs	r1, #78	@ 0x4e
 800a37a:	4803      	ldr	r0, [pc, #12]	@ (800a388 <lcd_send_data+0xd8>)
 800a37c:	f001 fda6 	bl	800becc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20001c50 	.word	0x20001c50
 800a38c:	20001c25 	.word	0x20001c25

0800a390 <lcd_send_string>:

void lcd_send_string (char *str) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	while (*str) {
 800a398:	e006      	b.n	800a3a8 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff ff84 	bl	800a2b0 <lcd_send_data>
	while (*str) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f4      	bne.n	800a39a <lcd_send_string+0xa>
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <lcd_send_char>:

void lcd_send_char(char ch) {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af02      	add	r7, sp, #8
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	f023 030f 	bic.w	r3, r3, #15
 800a3cc:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800a3d4:	7b7b      	ldrb	r3, [r7, #13]
 800a3d6:	f043 030d 	orr.w	r3, r3, #13
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800a3de:	7b7b      	ldrb	r3, [r7, #13]
 800a3e0:	f043 0309 	orr.w	r3, r3, #9
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800a3e8:	7b3b      	ldrb	r3, [r7, #12]
 800a3ea:	f043 030d 	orr.w	r3, r3, #13
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800a3f2:	7b3b      	ldrb	r3, [r7, #12]
 800a3f4:	f043 0309 	orr.w	r3, r3, #9
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800a3fc:	bf00      	nop
 800a3fe:	4825      	ldr	r0, [pc, #148]	@ (800a494 <lcd_send_char+0xd8>)
 800a400:	f002 f9d1 	bl	800c7a6 <HAL_I2C_GetError>
 800a404:	4603      	mov	r3, r0
 800a406:	2b04      	cmp	r3, #4
 800a408:	d0f9      	beq.n	800a3fe <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800a40a:	bf00      	nop
 800a40c:	4821      	ldr	r0, [pc, #132]	@ (800a494 <lcd_send_char+0xd8>)
 800a40e:	f002 f9bd 	bl	800c78c <HAL_I2C_GetState>
 800a412:	4603      	mov	r3, r0
 800a414:	2b20      	cmp	r3, #32
 800a416:	d1f9      	bne.n	800a40c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800a418:	4b1f      	ldr	r3, [pc, #124]	@ (800a498 <lcd_send_char+0xdc>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d116      	bne.n	800a44e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
 800a424:	e00f      	b.n	800a446 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	3310      	adds	r3, #16
 800a42a:	443b      	add	r3, r7
 800a42c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	f022 0208 	bic.w	r2, r2, #8
 800a436:	b2d2      	uxtb	r2, r2
 800a438:	3310      	adds	r3, #16
 800a43a:	443b      	add	r3, r7
 800a43c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	3301      	adds	r3, #1
 800a444:	73fb      	strb	r3, [r7, #15]
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d9ec      	bls.n	800a426 <lcd_send_char+0x6a>
 800a44c:	e015      	b.n	800a47a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800a44e:	2300      	movs	r3, #0
 800a450:	73bb      	strb	r3, [r7, #14]
 800a452:	e00f      	b.n	800a474 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	3310      	adds	r3, #16
 800a458:	443b      	add	r3, r7
 800a45a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	f042 0208 	orr.w	r2, r2, #8
 800a464:	b2d2      	uxtb	r2, r2
 800a466:	3310      	adds	r3, #16
 800a468:	443b      	add	r3, r7
 800a46a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	3301      	adds	r3, #1
 800a472:	73bb      	strb	r3, [r7, #14]
 800a474:	7bbb      	ldrb	r3, [r7, #14]
 800a476:	2b03      	cmp	r3, #3
 800a478:	d9ec      	bls.n	800a454 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800a47a:	f107 0208 	add.w	r2, r7, #8
 800a47e:	2364      	movs	r3, #100	@ 0x64
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	2304      	movs	r3, #4
 800a484:	214e      	movs	r1, #78	@ 0x4e
 800a486:	4803      	ldr	r0, [pc, #12]	@ (800a494 <lcd_send_char+0xd8>)
 800a488:	f001 fd20 	bl	800becc <HAL_I2C_Master_Transmit>
}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20001c50 	.word	0x20001c50
 800a498:	20001c25 	.word	0x20001c25

0800a49c <lcd_init>:

void lcd_init (void) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800a4a0:	2002      	movs	r0, #2
 800a4a2:	f7ff fe95 	bl	800a1d0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800a4a6:	2028      	movs	r0, #40	@ 0x28
 800a4a8:	f7ff fe92 	bl	800a1d0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800a4ac:	200c      	movs	r0, #12
 800a4ae:	f7ff fe8f 	bl	800a1d0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800a4b2:	2080      	movs	r0, #128	@ 0x80
 800a4b4:	f7ff fe8c 	bl	800a1d0 <lcd_send_cmd>
	lcd_backlight(1);
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f000 f86d 	bl	800a598 <lcd_backlight>
}
 800a4be:	bf00      	nop
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	460a      	mov	r2, r1
 800a4cc:	71fb      	strb	r3, [r7, #7]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d106      	bne.n	800a4e6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800a4d8:	79bb      	ldrb	r3, [r7, #6]
 800a4da:	337f      	adds	r3, #127	@ 0x7f
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fe76 	bl	800a1d0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800a4e4:	e008      	b.n	800a4f8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d105      	bne.n	800a4f8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800a4ec:	79bb      	ldrb	r3, [r7, #6]
 800a4ee:	3b41      	subs	r3, #65	@ 0x41
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff fe6c 	bl	800a1d0 <lcd_send_cmd>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	603a      	str	r2, [r7, #0]
 800a50a:	71fb      	strb	r3, [r7, #7]
 800a50c:	460b      	mov	r3, r1
 800a50e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800a510:	79ba      	ldrb	r2, [r7, #6]
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff ffd3 	bl	800a4c2 <lcd_gotoxy>
	lcd_send_string(str);
 800a51c:	6838      	ldr	r0, [r7, #0]
 800a51e:	f7ff ff37 	bl	800a390 <lcd_send_string>
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b082      	sub	sp, #8
 800a52e:	af00      	add	r7, sp, #0
 800a530:	4603      	mov	r3, r0
 800a532:	71fb      	strb	r3, [r7, #7]
 800a534:	460b      	mov	r3, r1
 800a536:	71bb      	strb	r3, [r7, #6]
 800a538:	4613      	mov	r3, r2
 800a53a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800a53c:	79ba      	ldrb	r2, [r7, #6]
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	4611      	mov	r1, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff ffbd 	bl	800a4c2 <lcd_gotoxy>
    lcd_send_char(ch);
 800a548:	797b      	ldrb	r3, [r7, #5]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff ff36 	bl	800a3bc <lcd_send_char>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <lcd_clear>:

void lcd_clear(void) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800a55c:	2001      	movs	r0, #1
 800a55e:	f7ff fe37 	bl	800a1d0 <lcd_send_cmd>
    HAL_Delay(2);
 800a562:	2002      	movs	r0, #2
 800a564:	f000 fd26 	bl	800afb4 <HAL_Delay>
}
 800a568:	bf00      	nop
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	460a      	mov	r2, r1
 800a576:	71fb      	strb	r3, [r7, #7]
 800a578:	4613      	mov	r3, r2
 800a57a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800a57c:	79ba      	ldrb	r2, [r7, #6]
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff ff9d 	bl	800a4c2 <lcd_gotoxy>

    lcd_send_char(' ');
 800a588:	2020      	movs	r0, #32
 800a58a:	f7ff ff17 	bl	800a3bc <lcd_send_char>
}
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800a5a2:	4a05      	ldr	r2, [pc, #20]	@ (800a5b8 <lcd_backlight+0x20>)
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f7ff fe11 	bl	800a1d0 <lcd_send_cmd>
}
 800a5ae:	bf00      	nop
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20001c25 	.word	0x20001c25

0800a5bc <lcd_cursor>:

void lcd_cursor(int state) {
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d106      	bne.n	800a5d8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800a5ca:	200e      	movs	r0, #14
 800a5cc:	f7ff fe00 	bl	800a1d0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 800a5d0:	200f      	movs	r0, #15
 800a5d2:	f7ff fdfd 	bl	800a1d0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800a5d6:	e002      	b.n	800a5de <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800a5d8:	200c      	movs	r0, #12
 800a5da:	f7ff fdf9 	bl	800a1d0 <lcd_send_cmd>
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800a5f0:	4b04      	ldr	r3, [pc, #16]	@ (800a604 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	4a03      	ldr	r2, [pc, #12]	@ (800a604 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800a5f8:	6013      	str	r3, [r2, #0]
}
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bc80      	pop	{r7}
 800a602:	4770      	bx	lr
 800a604:	200013a0 	.word	0x200013a0

0800a608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a60c:	f000 fc70 	bl	800aef0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800a610:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a614:	f000 fcce 	bl	800afb4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a618:	f000 f89c 	bl	800a754 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a61c:	f000 f9be 	bl	800a99c <MX_GPIO_Init>
  MX_CAN_Init();
 800a620:	f000 f8de 	bl	800a7e0 <MX_CAN_Init>
  MX_I2C1_Init();
 800a624:	f000 f910 	bl	800a848 <MX_I2C1_Init>
  MX_TIM1_Init();
 800a628:	f000 f93c 	bl	800a8a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800a62c:	f000 f98c 	bl	800a948 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800a630:	2201      	movs	r2, #1
 800a632:	2140      	movs	r1, #64	@ 0x40
 800a634:	483e      	ldr	r0, [pc, #248]	@ (800a730 <main+0x128>)
 800a636:	f001 faa4 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a63a:	2201      	movs	r2, #1
 800a63c:	2180      	movs	r1, #128	@ 0x80
 800a63e:	483c      	ldr	r0, [pc, #240]	@ (800a730 <main+0x128>)
 800a640:	f001 fa9f 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800a644:	200a      	movs	r0, #10
 800a646:	f000 fcb5 	bl	800afb4 <HAL_Delay>
  lcd_init();
 800a64a:	f7ff ff27 	bl	800a49c <lcd_init>
  HAL_Delay(10);
 800a64e:	200a      	movs	r0, #10
 800a650:	f000 fcb0 	bl	800afb4 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800a654:	4837      	ldr	r0, [pc, #220]	@ (800a734 <main+0x12c>)
 800a656:	f003 f947 	bl	800d8e8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800a65a:	bf00      	nop
 800a65c:	4836      	ldr	r0, [pc, #216]	@ (800a738 <main+0x130>)
 800a65e:	f002 f8a2 	bl	800c7a6 <HAL_I2C_GetError>
 800a662:	4603      	mov	r3, r0
 800a664:	2b04      	cmp	r3, #4
 800a666:	d0f9      	beq.n	800a65c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800a668:	bf00      	nop
 800a66a:	4833      	ldr	r0, [pc, #204]	@ (800a738 <main+0x130>)
 800a66c:	f002 f88e 	bl	800c78c <HAL_I2C_GetState>
 800a670:	4603      	mov	r3, r0
 800a672:	2b20      	cmp	r3, #32
 800a674:	d1f9      	bne.n	800a66a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800a676:	2200      	movs	r2, #0
 800a678:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a67c:	482c      	ldr	r0, [pc, #176]	@ (800a730 <main+0x128>)
 800a67e:	f001 fa80 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800a682:	2200      	movs	r2, #0
 800a684:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a688:	4829      	ldr	r0, [pc, #164]	@ (800a730 <main+0x128>)
 800a68a:	f001 fa7a 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800a68e:	2200      	movs	r2, #0
 800a690:	2104      	movs	r1, #4
 800a692:	4827      	ldr	r0, [pc, #156]	@ (800a730 <main+0x128>)
 800a694:	f001 fa75 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800a698:	2200      	movs	r2, #0
 800a69a:	2102      	movs	r1, #2
 800a69c:	4824      	ldr	r0, [pc, #144]	@ (800a730 <main+0x128>)
 800a69e:	f001 fa70 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	4822      	ldr	r0, [pc, #136]	@ (800a730 <main+0x128>)
 800a6a8:	f001 fa6b 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2120      	movs	r1, #32
 800a6b0:	4822      	ldr	r0, [pc, #136]	@ (800a73c <main+0x134>)
 800a6b2:	f001 fa66 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2110      	movs	r1, #16
 800a6ba:	4820      	ldr	r0, [pc, #128]	@ (800a73c <main+0x134>)
 800a6bc:	f001 fa61 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2180      	movs	r1, #128	@ 0x80
 800a6c4:	481e      	ldr	r0, [pc, #120]	@ (800a740 <main+0x138>)
 800a6c6:	f001 fa5c 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2140      	movs	r1, #64	@ 0x40
 800a6ce:	481c      	ldr	r0, [pc, #112]	@ (800a740 <main+0x138>)
 800a6d0:	f001 fa57 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2120      	movs	r1, #32
 800a6d8:	4819      	ldr	r0, [pc, #100]	@ (800a740 <main+0x138>)
 800a6da:	f001 fa52 	bl	800bb82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2110      	movs	r1, #16
 800a6e2:	4817      	ldr	r0, [pc, #92]	@ (800a740 <main+0x138>)
 800a6e4:	f001 fa4d 	bl	800bb82 <HAL_GPIO_WritePin>

  i2cTest();
 800a6e8:	f7f6 fb34 	bl	8000d54 <i2cTest>
  HAL_Delay(100);
 800a6ec:	2064      	movs	r0, #100	@ 0x64
 800a6ee:	f000 fc61 	bl	800afb4 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800a6f2:	4a14      	ldr	r2, [pc, #80]	@ (800a744 <main+0x13c>)
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	2001      	movs	r0, #1
 800a6f8:	f7ff ff02 	bl	800a500 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 800a6fc:	4a12      	ldr	r2, [pc, #72]	@ (800a748 <main+0x140>)
 800a6fe:	2101      	movs	r1, #1
 800a700:	2002      	movs	r0, #2
 800a702:	f7ff fefd 	bl	800a500 <lcd_print>
  HAL_Delay(1000);
 800a706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a70a:	f000 fc53 	bl	800afb4 <HAL_Delay>
  lcd_clear();
 800a70e:	f7ff ff23 	bl	800a558 <lcd_clear>

  eepromKontrol();
 800a712:	f7f5 fd8f 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800a716:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a71a:	f000 fc4b 	bl	800afb4 <HAL_Delay>

  backLightTimer = millis;
 800a71e:	4b0b      	ldr	r3, [pc, #44]	@ (800a74c <main+0x144>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a0b      	ldr	r2, [pc, #44]	@ (800a750 <main+0x148>)
 800a724:	6013      	str	r3, [r2, #0]

  iotSetup();
 800a726:	f7ff fcf5 	bl	800a114 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800a72a:	f7fc fff9 	bl	8007720 <mainLoop>
 800a72e:	e7fc      	b.n	800a72a <main+0x122>
 800a730:	40010c00 	.word	0x40010c00
 800a734:	20001ca4 	.word	0x20001ca4
 800a738:	20001c50 	.word	0x20001c50
 800a73c:	40011000 	.word	0x40011000
 800a740:	40010800 	.word	0x40010800
 800a744:	2000009c 	.word	0x2000009c
 800a748:	200000b0 	.word	0x200000b0
 800a74c:	200013a0 	.word	0x200013a0
 800a750:	200013bc 	.word	0x200013bc

0800a754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b090      	sub	sp, #64	@ 0x40
 800a758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a75a:	f107 0318 	add.w	r3, r7, #24
 800a75e:	2228      	movs	r2, #40	@ 0x28
 800a760:	2100      	movs	r1, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f004 fb5e 	bl	800ee24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a768:	1d3b      	adds	r3, r7, #4
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	605a      	str	r2, [r3, #4]
 800a770:	609a      	str	r2, [r3, #8]
 800a772:	60da      	str	r2, [r3, #12]
 800a774:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a776:	2301      	movs	r3, #1
 800a778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a77a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a77e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800a780:	2300      	movs	r3, #0
 800a782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a784:	2301      	movs	r3, #1
 800a786:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a788:	2302      	movs	r3, #2
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a78c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a792:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a798:	f107 0318 	add.w	r3, r7, #24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f002 fc43 	bl	800d028 <HAL_RCC_OscConfig>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 800a7a8:	f000 f9a2 	bl	800aaf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a7ac:	230f      	movs	r3, #15
 800a7ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a7b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a7c2:	1d3b      	adds	r3, r7, #4
 800a7c4:	2102      	movs	r1, #2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f002 feb0 	bl	800d52c <HAL_RCC_ClockConfig>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800a7d2:	f000 f98d 	bl	800aaf0 <Error_Handler>
  }
}
 800a7d6:	bf00      	nop
 800a7d8:	3740      	adds	r7, #64	@ 0x40
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800a7e4:	4b16      	ldr	r3, [pc, #88]	@ (800a840 <MX_CAN_Init+0x60>)
 800a7e6:	4a17      	ldr	r2, [pc, #92]	@ (800a844 <MX_CAN_Init+0x64>)
 800a7e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800a7ea:	4b15      	ldr	r3, [pc, #84]	@ (800a840 <MX_CAN_Init+0x60>)
 800a7ec:	2210      	movs	r2, #16
 800a7ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800a7f0:	4b13      	ldr	r3, [pc, #76]	@ (800a840 <MX_CAN_Init+0x60>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a7f6:	4b12      	ldr	r3, [pc, #72]	@ (800a840 <MX_CAN_Init+0x60>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800a7fc:	4b10      	ldr	r3, [pc, #64]	@ (800a840 <MX_CAN_Init+0x60>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800a802:	4b0f      	ldr	r3, [pc, #60]	@ (800a840 <MX_CAN_Init+0x60>)
 800a804:	2200      	movs	r2, #0
 800a806:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800a808:	4b0d      	ldr	r3, [pc, #52]	@ (800a840 <MX_CAN_Init+0x60>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800a80e:	4b0c      	ldr	r3, [pc, #48]	@ (800a840 <MX_CAN_Init+0x60>)
 800a810:	2200      	movs	r2, #0
 800a812:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800a814:	4b0a      	ldr	r3, [pc, #40]	@ (800a840 <MX_CAN_Init+0x60>)
 800a816:	2200      	movs	r2, #0
 800a818:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800a81a:	4b09      	ldr	r3, [pc, #36]	@ (800a840 <MX_CAN_Init+0x60>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800a820:	4b07      	ldr	r3, [pc, #28]	@ (800a840 <MX_CAN_Init+0x60>)
 800a822:	2200      	movs	r2, #0
 800a824:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800a826:	4b06      	ldr	r3, [pc, #24]	@ (800a840 <MX_CAN_Init+0x60>)
 800a828:	2200      	movs	r2, #0
 800a82a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800a82c:	4804      	ldr	r0, [pc, #16]	@ (800a840 <MX_CAN_Init+0x60>)
 800a82e:	f000 fbe5 	bl	800affc <HAL_CAN_Init>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800a838:	f000 f95a 	bl	800aaf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800a83c:	bf00      	nop
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20001c28 	.word	0x20001c28
 800a844:	40006400 	.word	0x40006400

0800a848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a84c:	4b12      	ldr	r3, [pc, #72]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a84e:	4a13      	ldr	r2, [pc, #76]	@ (800a89c <MX_I2C1_Init+0x54>)
 800a850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800a852:	4b11      	ldr	r3, [pc, #68]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a854:	4a12      	ldr	r2, [pc, #72]	@ (800a8a0 <MX_I2C1_Init+0x58>)
 800a856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a858:	4b0f      	ldr	r3, [pc, #60]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a85e:	4b0e      	ldr	r3, [pc, #56]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a860:	2200      	movs	r2, #0
 800a862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a864:	4b0c      	ldr	r3, [pc, #48]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a86a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a86c:	4b0a      	ldr	r3, [pc, #40]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a86e:	2200      	movs	r2, #0
 800a870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a872:	4b09      	ldr	r3, [pc, #36]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a874:	2200      	movs	r2, #0
 800a876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a878:	4b07      	ldr	r3, [pc, #28]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a87e:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a880:	2200      	movs	r2, #0
 800a882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a884:	4804      	ldr	r0, [pc, #16]	@ (800a898 <MX_I2C1_Init+0x50>)
 800a886:	f001 f9ad 	bl	800bbe4 <HAL_I2C_Init>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a890:	f000 f92e 	bl	800aaf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800a894:	bf00      	nop
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20001c50 	.word	0x20001c50
 800a89c:	40005400 	.word	0x40005400
 800a8a0:	00061a80 	.word	0x00061a80

0800a8a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a8aa:	f107 0308 	add.w	r3, r7, #8
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	605a      	str	r2, [r3, #4]
 800a8b4:	609a      	str	r2, [r3, #8]
 800a8b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a8c0:	4b1f      	ldr	r3, [pc, #124]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8c2:	4a20      	ldr	r2, [pc, #128]	@ (800a944 <MX_TIM1_Init+0xa0>)
 800a8c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800a8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8c8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800a8cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800a8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8d6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800a8da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a8dc:	4b18      	ldr	r3, [pc, #96]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a8e2:	4b17      	ldr	r3, [pc, #92]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8e8:	4b15      	ldr	r3, [pc, #84]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a8ee:	4814      	ldr	r0, [pc, #80]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a8f0:	f002 ffaa 	bl	800d848 <HAL_TIM_Base_Init>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a8fa:	f000 f8f9 	bl	800aaf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a8fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a902:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	4619      	mov	r1, r3
 800a90a:	480d      	ldr	r0, [pc, #52]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a90c:	f003 f954 	bl	800dbb8 <HAL_TIM_ConfigClockSource>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a916:	f000 f8eb 	bl	800aaf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a91a:	2300      	movs	r3, #0
 800a91c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a922:	463b      	mov	r3, r7
 800a924:	4619      	mov	r1, r3
 800a926:	4806      	ldr	r0, [pc, #24]	@ (800a940 <MX_TIM1_Init+0x9c>)
 800a928:	f003 fb42 	bl	800dfb0 <HAL_TIMEx_MasterConfigSynchronization>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a932:	f000 f8dd 	bl	800aaf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20001ca4 	.word	0x20001ca4
 800a944:	40012c00 	.word	0x40012c00

0800a948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a94c:	4b11      	ldr	r3, [pc, #68]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a94e:	4a12      	ldr	r2, [pc, #72]	@ (800a998 <MX_USART1_UART_Init+0x50>)
 800a950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a952:	4b10      	ldr	r3, [pc, #64]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a95a:	4b0e      	ldr	r3, [pc, #56]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a960:	4b0c      	ldr	r3, [pc, #48]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a962:	2200      	movs	r2, #0
 800a964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a966:	4b0b      	ldr	r3, [pc, #44]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a96c:	4b09      	ldr	r3, [pc, #36]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a96e:	220c      	movs	r2, #12
 800a970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a972:	4b08      	ldr	r3, [pc, #32]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a974:	2200      	movs	r2, #0
 800a976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a978:	4b06      	ldr	r3, [pc, #24]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a97e:	4805      	ldr	r0, [pc, #20]	@ (800a994 <MX_USART1_UART_Init+0x4c>)
 800a980:	f003 fb94 	bl	800e0ac <HAL_UART_Init>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a98a:	f000 f8b1 	bl	800aaf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a98e:	bf00      	nop
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20001cec 	.word	0x20001cec
 800a998:	40013800 	.word	0x40013800

0800a99c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9a2:	f107 0310 	add.w	r3, r7, #16
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	605a      	str	r2, [r3, #4]
 800a9ac:	609a      	str	r2, [r3, #8]
 800a9ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9b0:	4b4b      	ldr	r3, [pc, #300]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	4a4a      	ldr	r2, [pc, #296]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9b6:	f043 0310 	orr.w	r3, r3, #16
 800a9ba:	6193      	str	r3, [r2, #24]
 800a9bc:	4b48      	ldr	r3, [pc, #288]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a9c8:	4b45      	ldr	r3, [pc, #276]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	4a44      	ldr	r2, [pc, #272]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9ce:	f043 0320 	orr.w	r3, r3, #32
 800a9d2:	6193      	str	r3, [r2, #24]
 800a9d4:	4b42      	ldr	r3, [pc, #264]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9d6:	699b      	ldr	r3, [r3, #24]
 800a9d8:	f003 0320 	and.w	r3, r3, #32
 800a9dc:	60bb      	str	r3, [r7, #8]
 800a9de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9e0:	4b3f      	ldr	r3, [pc, #252]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	4a3e      	ldr	r2, [pc, #248]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9e6:	f043 0304 	orr.w	r3, r3, #4
 800a9ea:	6193      	str	r3, [r2, #24]
 800a9ec:	4b3c      	ldr	r3, [pc, #240]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9f8:	4b39      	ldr	r3, [pc, #228]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	4a38      	ldr	r2, [pc, #224]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800a9fe:	f043 0308 	orr.w	r3, r3, #8
 800aa02:	6193      	str	r3, [r2, #24]
 800aa04:	4b36      	ldr	r3, [pc, #216]	@ (800aae0 <MX_GPIO_Init+0x144>)
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	f003 0308 	and.w	r3, r3, #8
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800aa10:	2200      	movs	r2, #0
 800aa12:	21f0      	movs	r1, #240	@ 0xf0
 800aa14:	4833      	ldr	r0, [pc, #204]	@ (800aae4 <MX_GPIO_Init+0x148>)
 800aa16:	f001 f8b4 	bl	800bb82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f241 0130 	movw	r1, #4144	@ 0x1030
 800aa20:	4831      	ldr	r0, [pc, #196]	@ (800aae8 <MX_GPIO_Init+0x14c>)
 800aa22:	f001 f8ae 	bl	800bb82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800aa26:	2200      	movs	r2, #0
 800aa28:	f640 4107 	movw	r1, #3079	@ 0xc07
 800aa2c:	482f      	ldr	r0, [pc, #188]	@ (800aaec <MX_GPIO_Init+0x150>)
 800aa2e:	f001 f8a8 	bl	800bb82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800aa32:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800aa36:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa40:	f107 0310 	add.w	r3, r7, #16
 800aa44:	4619      	mov	r1, r3
 800aa46:	4828      	ldr	r0, [pc, #160]	@ (800aae8 <MX_GPIO_Init+0x14c>)
 800aa48:	f000 fe24 	bl	800b694 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800aa4c:	f248 130f 	movw	r3, #33039	@ 0x810f
 800aa50:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa5a:	f107 0310 	add.w	r3, r7, #16
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4820      	ldr	r0, [pc, #128]	@ (800aae4 <MX_GPIO_Init+0x148>)
 800aa62:	f000 fe17 	bl	800b694 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800aa66:	23f0      	movs	r3, #240	@ 0xf0
 800aa68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa72:	2302      	movs	r3, #2
 800aa74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa76:	f107 0310 	add.w	r3, r7, #16
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	4819      	ldr	r0, [pc, #100]	@ (800aae4 <MX_GPIO_Init+0x148>)
 800aa7e:	f000 fe09 	bl	800b694 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800aa82:	f241 0330 	movw	r3, #4144	@ 0x1030
 800aa86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa90:	2302      	movs	r3, #2
 800aa92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa94:	f107 0310 	add.w	r3, r7, #16
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4813      	ldr	r0, [pc, #76]	@ (800aae8 <MX_GPIO_Init+0x14c>)
 800aa9c:	f000 fdfa 	bl	800b694 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800aaa0:	f640 4307 	movw	r3, #3079	@ 0xc07
 800aaa4:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaae:	2302      	movs	r3, #2
 800aab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aab2:	f107 0310 	add.w	r3, r7, #16
 800aab6:	4619      	mov	r1, r3
 800aab8:	480c      	ldr	r0, [pc, #48]	@ (800aaec <MX_GPIO_Init+0x150>)
 800aaba:	f000 fdeb 	bl	800b694 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800aabe:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800aac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aac4:	2300      	movs	r3, #0
 800aac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aacc:	f107 0310 	add.w	r3, r7, #16
 800aad0:	4619      	mov	r1, r3
 800aad2:	4806      	ldr	r0, [pc, #24]	@ (800aaec <MX_GPIO_Init+0x150>)
 800aad4:	f000 fdde 	bl	800b694 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800aad8:	bf00      	nop
 800aada:	3720      	adds	r7, #32
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	40021000 	.word	0x40021000
 800aae4:	40010800 	.word	0x40010800
 800aae8:	40011000 	.word	0x40011000
 800aaec:	40010c00 	.word	0x40010c00

0800aaf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800aaf4:	bf00      	nop
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bc80      	pop	{r7}
 800aafa:	4770      	bx	lr

0800aafc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800ab02:	4b15      	ldr	r3, [pc, #84]	@ (800ab58 <HAL_MspInit+0x5c>)
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	4a14      	ldr	r2, [pc, #80]	@ (800ab58 <HAL_MspInit+0x5c>)
 800ab08:	f043 0301 	orr.w	r3, r3, #1
 800ab0c:	6193      	str	r3, [r2, #24]
 800ab0e:	4b12      	ldr	r3, [pc, #72]	@ (800ab58 <HAL_MspInit+0x5c>)
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	60bb      	str	r3, [r7, #8]
 800ab18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab58 <HAL_MspInit+0x5c>)
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	4a0e      	ldr	r2, [pc, #56]	@ (800ab58 <HAL_MspInit+0x5c>)
 800ab20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab24:	61d3      	str	r3, [r2, #28]
 800ab26:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <HAL_MspInit+0x5c>)
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab2e:	607b      	str	r3, [r7, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800ab32:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <HAL_MspInit+0x60>)
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	4a04      	ldr	r2, [pc, #16]	@ (800ab5c <HAL_MspInit+0x60>)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ab4e:	bf00      	nop
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr
 800ab58:	40021000 	.word	0x40021000
 800ab5c:	40010000 	.word	0x40010000

0800ab60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	605a      	str	r2, [r3, #4]
 800ab72:	609a      	str	r2, [r3, #8]
 800ab74:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a1c      	ldr	r2, [pc, #112]	@ (800abec <HAL_CAN_MspInit+0x8c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d131      	bne.n	800abe4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800ab80:	4b1b      	ldr	r3, [pc, #108]	@ (800abf0 <HAL_CAN_MspInit+0x90>)
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	4a1a      	ldr	r2, [pc, #104]	@ (800abf0 <HAL_CAN_MspInit+0x90>)
 800ab86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ab8a:	61d3      	str	r3, [r2, #28]
 800ab8c:	4b18      	ldr	r3, [pc, #96]	@ (800abf0 <HAL_CAN_MspInit+0x90>)
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab98:	4b15      	ldr	r3, [pc, #84]	@ (800abf0 <HAL_CAN_MspInit+0x90>)
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	4a14      	ldr	r2, [pc, #80]	@ (800abf0 <HAL_CAN_MspInit+0x90>)
 800ab9e:	f043 0304 	orr.w	r3, r3, #4
 800aba2:	6193      	str	r3, [r2, #24]
 800aba4:	4b12      	ldr	r3, [pc, #72]	@ (800abf0 <HAL_CAN_MspInit+0x90>)
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	60bb      	str	r3, [r7, #8]
 800abae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800abb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800abb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abbe:	f107 0310 	add.w	r3, r7, #16
 800abc2:	4619      	mov	r1, r3
 800abc4:	480b      	ldr	r0, [pc, #44]	@ (800abf4 <HAL_CAN_MspInit+0x94>)
 800abc6:	f000 fd65 	bl	800b694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800abca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abd0:	2302      	movs	r3, #2
 800abd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800abd4:	2303      	movs	r3, #3
 800abd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abd8:	f107 0310 	add.w	r3, r7, #16
 800abdc:	4619      	mov	r1, r3
 800abde:	4805      	ldr	r0, [pc, #20]	@ (800abf4 <HAL_CAN_MspInit+0x94>)
 800abe0:	f000 fd58 	bl	800b694 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800abe4:	bf00      	nop
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	40006400 	.word	0x40006400
 800abf0:	40021000 	.word	0x40021000
 800abf4:	40010800 	.word	0x40010800

0800abf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac00:	f107 0310 	add.w	r3, r7, #16
 800ac04:	2200      	movs	r2, #0
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	609a      	str	r2, [r3, #8]
 800ac0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a15      	ldr	r2, [pc, #84]	@ (800ac68 <HAL_I2C_MspInit+0x70>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d123      	bne.n	800ac60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac18:	4b14      	ldr	r3, [pc, #80]	@ (800ac6c <HAL_I2C_MspInit+0x74>)
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	4a13      	ldr	r2, [pc, #76]	@ (800ac6c <HAL_I2C_MspInit+0x74>)
 800ac1e:	f043 0308 	orr.w	r3, r3, #8
 800ac22:	6193      	str	r3, [r2, #24]
 800ac24:	4b11      	ldr	r3, [pc, #68]	@ (800ac6c <HAL_I2C_MspInit+0x74>)
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ac30:	23c0      	movs	r3, #192	@ 0xc0
 800ac32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ac34:	2312      	movs	r3, #18
 800ac36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac3c:	f107 0310 	add.w	r3, r7, #16
 800ac40:	4619      	mov	r1, r3
 800ac42:	480b      	ldr	r0, [pc, #44]	@ (800ac70 <HAL_I2C_MspInit+0x78>)
 800ac44:	f000 fd26 	bl	800b694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ac48:	4b08      	ldr	r3, [pc, #32]	@ (800ac6c <HAL_I2C_MspInit+0x74>)
 800ac4a:	69db      	ldr	r3, [r3, #28]
 800ac4c:	4a07      	ldr	r2, [pc, #28]	@ (800ac6c <HAL_I2C_MspInit+0x74>)
 800ac4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac52:	61d3      	str	r3, [r2, #28]
 800ac54:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <HAL_I2C_MspInit+0x74>)
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800ac60:	bf00      	nop
 800ac62:	3720      	adds	r7, #32
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	40005400 	.word	0x40005400
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	40010c00 	.word	0x40010c00

0800ac74 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a0a      	ldr	r2, [pc, #40]	@ (800acac <HAL_I2C_MspDeInit+0x38>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d10d      	bne.n	800aca2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800ac86:	4b0a      	ldr	r3, [pc, #40]	@ (800acb0 <HAL_I2C_MspDeInit+0x3c>)
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	4a09      	ldr	r2, [pc, #36]	@ (800acb0 <HAL_I2C_MspDeInit+0x3c>)
 800ac8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac90:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800ac92:	2140      	movs	r1, #64	@ 0x40
 800ac94:	4807      	ldr	r0, [pc, #28]	@ (800acb4 <HAL_I2C_MspDeInit+0x40>)
 800ac96:	f000 fe91 	bl	800b9bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800ac9a:	2180      	movs	r1, #128	@ 0x80
 800ac9c:	4805      	ldr	r0, [pc, #20]	@ (800acb4 <HAL_I2C_MspDeInit+0x40>)
 800ac9e:	f000 fe8d 	bl	800b9bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	40005400 	.word	0x40005400
 800acb0:	40021000 	.word	0x40021000
 800acb4:	40010c00 	.word	0x40010c00

0800acb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a0d      	ldr	r2, [pc, #52]	@ (800acfc <HAL_TIM_Base_MspInit+0x44>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d113      	bne.n	800acf2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <HAL_TIM_Base_MspInit+0x48>)
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	4a0c      	ldr	r2, [pc, #48]	@ (800ad00 <HAL_TIM_Base_MspInit+0x48>)
 800acd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800acd4:	6193      	str	r3, [r2, #24]
 800acd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad00 <HAL_TIM_Base_MspInit+0x48>)
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800ace2:	2200      	movs	r2, #0
 800ace4:	2100      	movs	r1, #0
 800ace6:	2019      	movs	r0, #25
 800ace8:	f000 fb5b 	bl	800b3a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800acec:	2019      	movs	r0, #25
 800acee:	f000 fb74 	bl	800b3da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	40012c00 	.word	0x40012c00
 800ad00:	40021000 	.word	0x40021000

0800ad04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad0c:	f107 0310 	add.w	r3, r7, #16
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	605a      	str	r2, [r3, #4]
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a20      	ldr	r2, [pc, #128]	@ (800ada0 <HAL_UART_MspInit+0x9c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d139      	bne.n	800ad98 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad24:	4b1f      	ldr	r3, [pc, #124]	@ (800ada4 <HAL_UART_MspInit+0xa0>)
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	4a1e      	ldr	r2, [pc, #120]	@ (800ada4 <HAL_UART_MspInit+0xa0>)
 800ad2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad2e:	6193      	str	r3, [r2, #24]
 800ad30:	4b1c      	ldr	r3, [pc, #112]	@ (800ada4 <HAL_UART_MspInit+0xa0>)
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad38:	60fb      	str	r3, [r7, #12]
 800ad3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3c:	4b19      	ldr	r3, [pc, #100]	@ (800ada4 <HAL_UART_MspInit+0xa0>)
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	4a18      	ldr	r2, [pc, #96]	@ (800ada4 <HAL_UART_MspInit+0xa0>)
 800ad42:	f043 0304 	orr.w	r3, r3, #4
 800ad46:	6193      	str	r3, [r2, #24]
 800ad48:	4b16      	ldr	r3, [pc, #88]	@ (800ada4 <HAL_UART_MspInit+0xa0>)
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	60bb      	str	r3, [r7, #8]
 800ad52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ad54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad62:	f107 0310 	add.w	r3, r7, #16
 800ad66:	4619      	mov	r1, r3
 800ad68:	480f      	ldr	r0, [pc, #60]	@ (800ada8 <HAL_UART_MspInit+0xa4>)
 800ad6a:	f000 fc93 	bl	800b694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ad6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad7c:	f107 0310 	add.w	r3, r7, #16
 800ad80:	4619      	mov	r1, r3
 800ad82:	4809      	ldr	r0, [pc, #36]	@ (800ada8 <HAL_UART_MspInit+0xa4>)
 800ad84:	f000 fc86 	bl	800b694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	2025      	movs	r0, #37	@ 0x25
 800ad8e:	f000 fb08 	bl	800b3a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ad92:	2025      	movs	r0, #37	@ 0x25
 800ad94:	f000 fb21 	bl	800b3da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800ad98:	bf00      	nop
 800ad9a:	3720      	adds	r7, #32
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	40013800 	.word	0x40013800
 800ada4:	40021000 	.word	0x40021000
 800ada8:	40010800 	.word	0x40010800

0800adac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800adb0:	bf00      	nop
 800adb2:	e7fd      	b.n	800adb0 <NMI_Handler+0x4>

0800adb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <HardFault_Handler+0x4>

0800adbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800adc0:	bf00      	nop
 800adc2:	e7fd      	b.n	800adc0 <MemManage_Handler+0x4>

0800adc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800adc4:	b480      	push	{r7}
 800adc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800adc8:	bf00      	nop
 800adca:	e7fd      	b.n	800adc8 <BusFault_Handler+0x4>

0800adcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800add0:	bf00      	nop
 800add2:	e7fd      	b.n	800add0 <UsageFault_Handler+0x4>

0800add4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800add8:	bf00      	nop
 800adda:	46bd      	mov	sp, r7
 800addc:	bc80      	pop	{r7}
 800adde:	4770      	bx	lr

0800ade0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bc80      	pop	{r7}
 800adea:	4770      	bx	lr

0800adec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800adf0:	bf00      	nop
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr

0800adf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800adfc:	f000 f8be 	bl	800af7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ae00:	bf00      	nop
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ae08:	4802      	ldr	r0, [pc, #8]	@ (800ae14 <TIM1_UP_IRQHandler+0x10>)
 800ae0a:	f002 fdcd 	bl	800d9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800ae0e:	bf00      	nop
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20001ca4 	.word	0x20001ca4

0800ae18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ae1c:	4802      	ldr	r0, [pc, #8]	@ (800ae28 <USART1_IRQHandler+0x10>)
 800ae1e:	f003 f9cb 	bl	800e1b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ae22:	bf00      	nop
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20001cec 	.word	0x20001cec

0800ae2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ae34:	4a14      	ldr	r2, [pc, #80]	@ (800ae88 <_sbrk+0x5c>)
 800ae36:	4b15      	ldr	r3, [pc, #84]	@ (800ae8c <_sbrk+0x60>)
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ae40:	4b13      	ldr	r3, [pc, #76]	@ (800ae90 <_sbrk+0x64>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ae48:	4b11      	ldr	r3, [pc, #68]	@ (800ae90 <_sbrk+0x64>)
 800ae4a:	4a12      	ldr	r2, [pc, #72]	@ (800ae94 <_sbrk+0x68>)
 800ae4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ae4e:	4b10      	ldr	r3, [pc, #64]	@ (800ae90 <_sbrk+0x64>)
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4413      	add	r3, r2
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d207      	bcs.n	800ae6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ae5c:	f003 fffa 	bl	800ee54 <__errno>
 800ae60:	4603      	mov	r3, r0
 800ae62:	220c      	movs	r2, #12
 800ae64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ae66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae6a:	e009      	b.n	800ae80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ae6c:	4b08      	ldr	r3, [pc, #32]	@ (800ae90 <_sbrk+0x64>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ae72:	4b07      	ldr	r3, [pc, #28]	@ (800ae90 <_sbrk+0x64>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4413      	add	r3, r2
 800ae7a:	4a05      	ldr	r2, [pc, #20]	@ (800ae90 <_sbrk+0x64>)
 800ae7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	2000c000 	.word	0x2000c000
 800ae8c:	00000400 	.word	0x00000400
 800ae90:	20001d34 	.word	0x20001d34
 800ae94:	20001e88 	.word	0x20001e88

0800ae98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ae9c:	bf00      	nop
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bc80      	pop	{r7}
 800aea2:	4770      	bx	lr

0800aea4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aea4:	480c      	ldr	r0, [pc, #48]	@ (800aed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800aea6:	490d      	ldr	r1, [pc, #52]	@ (800aedc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800aea8:	4a0d      	ldr	r2, [pc, #52]	@ (800aee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800aeaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aeac:	e002      	b.n	800aeb4 <LoopCopyDataInit>

0800aeae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aeae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aeb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aeb2:	3304      	adds	r3, #4

0800aeb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aeb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aeb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aeb8:	d3f9      	bcc.n	800aeae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aeba:	4a0a      	ldr	r2, [pc, #40]	@ (800aee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800aebc:	4c0a      	ldr	r4, [pc, #40]	@ (800aee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800aebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aec0:	e001      	b.n	800aec6 <LoopFillZerobss>

0800aec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aec4:	3204      	adds	r2, #4

0800aec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aec8:	d3fb      	bcc.n	800aec2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800aeca:	f7ff ffe5 	bl	800ae98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aece:	f003 ffc7 	bl	800ee60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800aed2:	f7ff fb99 	bl	800a608 <main>
  bx lr
 800aed6:	4770      	bx	lr
  ldr r0, =_sdata
 800aed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aedc:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 800aee0:	0800f9bc 	.word	0x0800f9bc
  ldr r2, =_sbss
 800aee4:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 800aee8:	20001e84 	.word	0x20001e84

0800aeec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800aeec:	e7fe      	b.n	800aeec <ADC1_2_IRQHandler>
	...

0800aef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800aef4:	4b08      	ldr	r3, [pc, #32]	@ (800af18 <HAL_Init+0x28>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a07      	ldr	r2, [pc, #28]	@ (800af18 <HAL_Init+0x28>)
 800aefa:	f043 0310 	orr.w	r3, r3, #16
 800aefe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800af00:	2003      	movs	r0, #3
 800af02:	f000 fa43 	bl	800b38c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800af06:	200f      	movs	r0, #15
 800af08:	f000 f808 	bl	800af1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800af0c:	f7ff fdf6 	bl	800aafc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	40022000 	.word	0x40022000

0800af1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800af24:	4b12      	ldr	r3, [pc, #72]	@ (800af70 <HAL_InitTick+0x54>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	4b12      	ldr	r3, [pc, #72]	@ (800af74 <HAL_InitTick+0x58>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	4619      	mov	r1, r3
 800af2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800af32:	fbb3 f3f1 	udiv	r3, r3, r1
 800af36:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fa5b 	bl	800b3f6 <HAL_SYSTICK_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e00e      	b.n	800af68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b0f      	cmp	r3, #15
 800af4e:	d80a      	bhi.n	800af66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800af50:	2200      	movs	r2, #0
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af58:	f000 fa23 	bl	800b3a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800af5c:	4a06      	ldr	r2, [pc, #24]	@ (800af78 <HAL_InitTick+0x5c>)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	e000      	b.n	800af68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20000f74 	.word	0x20000f74
 800af74:	20000f7c 	.word	0x20000f7c
 800af78:	20000f78 	.word	0x20000f78

0800af7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800af80:	4b05      	ldr	r3, [pc, #20]	@ (800af98 <HAL_IncTick+0x1c>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	461a      	mov	r2, r3
 800af86:	4b05      	ldr	r3, [pc, #20]	@ (800af9c <HAL_IncTick+0x20>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4413      	add	r3, r2
 800af8c:	4a03      	ldr	r2, [pc, #12]	@ (800af9c <HAL_IncTick+0x20>)
 800af8e:	6013      	str	r3, [r2, #0]
}
 800af90:	bf00      	nop
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr
 800af98:	20000f7c 	.word	0x20000f7c
 800af9c:	20001d38 	.word	0x20001d38

0800afa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  return uwTick;
 800afa4:	4b02      	ldr	r3, [pc, #8]	@ (800afb0 <HAL_GetTick+0x10>)
 800afa6:	681b      	ldr	r3, [r3, #0]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr
 800afb0:	20001d38 	.word	0x20001d38

0800afb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800afbc:	f7ff fff0 	bl	800afa0 <HAL_GetTick>
 800afc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afcc:	d005      	beq.n	800afda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800afce:	4b0a      	ldr	r3, [pc, #40]	@ (800aff8 <HAL_Delay+0x44>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	4413      	add	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800afda:	bf00      	nop
 800afdc:	f7ff ffe0 	bl	800afa0 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d8f7      	bhi.n	800afdc <HAL_Delay+0x28>
  {
  }
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000f7c 	.word	0x20000f7c

0800affc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e0ed      	b.n	800b1ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff fda0 	bl	800ab60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b030:	f7ff ffb6 	bl	800afa0 <HAL_GetTick>
 800b034:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b036:	e012      	b.n	800b05e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b038:	f7ff ffb2 	bl	800afa0 <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b0a      	cmp	r3, #10
 800b044:	d90b      	bls.n	800b05e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2205      	movs	r2, #5
 800b056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e0c5      	b.n	800b1ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d0e5      	beq.n	800b038 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 0202 	bic.w	r2, r2, #2
 800b07a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b07c:	f7ff ff90 	bl	800afa0 <HAL_GetTick>
 800b080:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b082:	e012      	b.n	800b0aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b084:	f7ff ff8c 	bl	800afa0 <HAL_GetTick>
 800b088:	4602      	mov	r2, r0
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	2b0a      	cmp	r3, #10
 800b090:	d90b      	bls.n	800b0aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b096:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2205      	movs	r2, #5
 800b0a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e09f      	b.n	800b1ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e5      	bne.n	800b084 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7e1b      	ldrb	r3, [r3, #24]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d108      	bne.n	800b0d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	e007      	b.n	800b0e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7e5b      	ldrb	r3, [r3, #25]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d108      	bne.n	800b0fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	e007      	b.n	800b10c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b10a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	7e9b      	ldrb	r3, [r3, #26]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d108      	bne.n	800b126 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0220 	orr.w	r2, r2, #32
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e007      	b.n	800b136 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f022 0220 	bic.w	r2, r2, #32
 800b134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7edb      	ldrb	r3, [r3, #27]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d108      	bne.n	800b150 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 0210 	bic.w	r2, r2, #16
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	e007      	b.n	800b160 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0210 	orr.w	r2, r2, #16
 800b15e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	7f1b      	ldrb	r3, [r3, #28]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d108      	bne.n	800b17a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f042 0208 	orr.w	r2, r2, #8
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	e007      	b.n	800b18a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0208 	bic.w	r2, r2, #8
 800b188:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	7f5b      	ldrb	r3, [r3, #29]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d108      	bne.n	800b1a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f042 0204 	orr.w	r2, r2, #4
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	e007      	b.n	800b1b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 0204 	bic.w	r2, r2, #4
 800b1b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	ea42 0103 	orr.w	r1, r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	1e5a      	subs	r2, r3, #1
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <__NVIC_SetPriorityGrouping>:
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f003 0307 	and.w	r3, r3, #7
 800b202:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b204:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <__NVIC_SetPriorityGrouping+0x44>)
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b210:	4013      	ands	r3, r2
 800b212:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b21c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b226:	4a04      	ldr	r2, [pc, #16]	@ (800b238 <__NVIC_SetPriorityGrouping+0x44>)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	60d3      	str	r3, [r2, #12]
}
 800b22c:	bf00      	nop
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	bc80      	pop	{r7}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	e000ed00 	.word	0xe000ed00

0800b23c <__NVIC_GetPriorityGrouping>:
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b240:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <__NVIC_GetPriorityGrouping+0x18>)
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	0a1b      	lsrs	r3, r3, #8
 800b246:	f003 0307 	and.w	r3, r3, #7
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bc80      	pop	{r7}
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	e000ed00 	.word	0xe000ed00

0800b258 <__NVIC_EnableIRQ>:
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b266:	2b00      	cmp	r3, #0
 800b268:	db0b      	blt.n	800b282 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	f003 021f 	and.w	r2, r3, #31
 800b270:	4906      	ldr	r1, [pc, #24]	@ (800b28c <__NVIC_EnableIRQ+0x34>)
 800b272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b276:	095b      	lsrs	r3, r3, #5
 800b278:	2001      	movs	r0, #1
 800b27a:	fa00 f202 	lsl.w	r2, r0, r2
 800b27e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	bc80      	pop	{r7}
 800b28a:	4770      	bx	lr
 800b28c:	e000e100 	.word	0xe000e100

0800b290 <__NVIC_SetPriority>:
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	db0a      	blt.n	800b2ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	490c      	ldr	r1, [pc, #48]	@ (800b2dc <__NVIC_SetPriority+0x4c>)
 800b2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ae:	0112      	lsls	r2, r2, #4
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	440b      	add	r3, r1
 800b2b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b2b8:	e00a      	b.n	800b2d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	4908      	ldr	r1, [pc, #32]	@ (800b2e0 <__NVIC_SetPriority+0x50>)
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	f003 030f 	and.w	r3, r3, #15
 800b2c6:	3b04      	subs	r3, #4
 800b2c8:	0112      	lsls	r2, r2, #4
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	440b      	add	r3, r1
 800b2ce:	761a      	strb	r2, [r3, #24]
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	e000e100 	.word	0xe000e100
 800b2e0:	e000ed00 	.word	0xe000ed00

0800b2e4 <NVIC_EncodePriority>:
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b089      	sub	sp, #36	@ 0x24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f1c3 0307 	rsb	r3, r3, #7
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	bf28      	it	cs
 800b302:	2304      	movcs	r3, #4
 800b304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	3304      	adds	r3, #4
 800b30a:	2b06      	cmp	r3, #6
 800b30c:	d902      	bls.n	800b314 <NVIC_EncodePriority+0x30>
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	3b03      	subs	r3, #3
 800b312:	e000      	b.n	800b316 <NVIC_EncodePriority+0x32>
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	43da      	mvns	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	401a      	ands	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b32c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	fa01 f303 	lsl.w	r3, r1, r3
 800b336:	43d9      	mvns	r1, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b33c:	4313      	orrs	r3, r2
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3724      	adds	r7, #36	@ 0x24
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr

0800b348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3b01      	subs	r3, #1
 800b354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b358:	d301      	bcc.n	800b35e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b35a:	2301      	movs	r3, #1
 800b35c:	e00f      	b.n	800b37e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b35e:	4a0a      	ldr	r2, [pc, #40]	@ (800b388 <SysTick_Config+0x40>)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3b01      	subs	r3, #1
 800b364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b366:	210f      	movs	r1, #15
 800b368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b36c:	f7ff ff90 	bl	800b290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b370:	4b05      	ldr	r3, [pc, #20]	@ (800b388 <SysTick_Config+0x40>)
 800b372:	2200      	movs	r2, #0
 800b374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b376:	4b04      	ldr	r3, [pc, #16]	@ (800b388 <SysTick_Config+0x40>)
 800b378:	2207      	movs	r2, #7
 800b37a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	e000e010 	.word	0xe000e010

0800b38c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ff2d 	bl	800b1f4 <__NVIC_SetPriorityGrouping>
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b086      	sub	sp, #24
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
 800b3ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b3b4:	f7ff ff42 	bl	800b23c <__NVIC_GetPriorityGrouping>
 800b3b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	68b9      	ldr	r1, [r7, #8]
 800b3be:	6978      	ldr	r0, [r7, #20]
 800b3c0:	f7ff ff90 	bl	800b2e4 <NVIC_EncodePriority>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7ff ff5f 	bl	800b290 <__NVIC_SetPriority>
}
 800b3d2:	bf00      	nop
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b3e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff ff35 	bl	800b258 <__NVIC_EnableIRQ>
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff ffa2 	bl	800b348 <SysTick_Config>
 800b404:	4603      	mov	r3, r0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b40e:	b480      	push	{r7}
 800b410:	b085      	sub	sp, #20
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b02      	cmp	r3, #2
 800b424:	d008      	beq.n	800b438 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2204      	movs	r2, #4
 800b42a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e020      	b.n	800b47a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 020e 	bic.w	r2, r2, #14
 800b446:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0201 	bic.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b460:	2101      	movs	r1, #1
 800b462:	fa01 f202 	lsl.w	r2, r1, r2
 800b466:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	bc80      	pop	{r7}
 800b482:	4770      	bx	lr

0800b484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d005      	beq.n	800b4a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2204      	movs	r2, #4
 800b4a0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	73fb      	strb	r3, [r7, #15]
 800b4a6:	e0d6      	b.n	800b656 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 020e 	bic.w	r2, r2, #14
 800b4b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f022 0201 	bic.w	r2, r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	4b64      	ldr	r3, [pc, #400]	@ (800b660 <HAL_DMA_Abort_IT+0x1dc>)
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d958      	bls.n	800b586 <HAL_DMA_Abort_IT+0x102>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a62      	ldr	r2, [pc, #392]	@ (800b664 <HAL_DMA_Abort_IT+0x1e0>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d04f      	beq.n	800b57e <HAL_DMA_Abort_IT+0xfa>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a61      	ldr	r2, [pc, #388]	@ (800b668 <HAL_DMA_Abort_IT+0x1e4>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d048      	beq.n	800b57a <HAL_DMA_Abort_IT+0xf6>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a5f      	ldr	r2, [pc, #380]	@ (800b66c <HAL_DMA_Abort_IT+0x1e8>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d040      	beq.n	800b574 <HAL_DMA_Abort_IT+0xf0>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a5e      	ldr	r2, [pc, #376]	@ (800b670 <HAL_DMA_Abort_IT+0x1ec>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d038      	beq.n	800b56e <HAL_DMA_Abort_IT+0xea>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a5c      	ldr	r2, [pc, #368]	@ (800b674 <HAL_DMA_Abort_IT+0x1f0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d030      	beq.n	800b568 <HAL_DMA_Abort_IT+0xe4>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a5b      	ldr	r2, [pc, #364]	@ (800b678 <HAL_DMA_Abort_IT+0x1f4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d028      	beq.n	800b562 <HAL_DMA_Abort_IT+0xde>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a52      	ldr	r2, [pc, #328]	@ (800b660 <HAL_DMA_Abort_IT+0x1dc>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d020      	beq.n	800b55c <HAL_DMA_Abort_IT+0xd8>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a57      	ldr	r2, [pc, #348]	@ (800b67c <HAL_DMA_Abort_IT+0x1f8>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d019      	beq.n	800b558 <HAL_DMA_Abort_IT+0xd4>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a55      	ldr	r2, [pc, #340]	@ (800b680 <HAL_DMA_Abort_IT+0x1fc>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d012      	beq.n	800b554 <HAL_DMA_Abort_IT+0xd0>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a54      	ldr	r2, [pc, #336]	@ (800b684 <HAL_DMA_Abort_IT+0x200>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d00a      	beq.n	800b54e <HAL_DMA_Abort_IT+0xca>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a52      	ldr	r2, [pc, #328]	@ (800b688 <HAL_DMA_Abort_IT+0x204>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d102      	bne.n	800b548 <HAL_DMA_Abort_IT+0xc4>
 800b542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b546:	e01b      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b54c:	e018      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b54e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b552:	e015      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b554:	2310      	movs	r3, #16
 800b556:	e013      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b558:	2301      	movs	r3, #1
 800b55a:	e011      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b55c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b560:	e00e      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b562:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b566:	e00b      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b56c:	e008      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b56e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b572:	e005      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b578:	e002      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b57a:	2310      	movs	r3, #16
 800b57c:	e000      	b.n	800b580 <HAL_DMA_Abort_IT+0xfc>
 800b57e:	2301      	movs	r3, #1
 800b580:	4a42      	ldr	r2, [pc, #264]	@ (800b68c <HAL_DMA_Abort_IT+0x208>)
 800b582:	6053      	str	r3, [r2, #4]
 800b584:	e057      	b.n	800b636 <HAL_DMA_Abort_IT+0x1b2>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a36      	ldr	r2, [pc, #216]	@ (800b664 <HAL_DMA_Abort_IT+0x1e0>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d04f      	beq.n	800b630 <HAL_DMA_Abort_IT+0x1ac>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a34      	ldr	r2, [pc, #208]	@ (800b668 <HAL_DMA_Abort_IT+0x1e4>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d048      	beq.n	800b62c <HAL_DMA_Abort_IT+0x1a8>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a33      	ldr	r2, [pc, #204]	@ (800b66c <HAL_DMA_Abort_IT+0x1e8>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d040      	beq.n	800b626 <HAL_DMA_Abort_IT+0x1a2>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a31      	ldr	r2, [pc, #196]	@ (800b670 <HAL_DMA_Abort_IT+0x1ec>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d038      	beq.n	800b620 <HAL_DMA_Abort_IT+0x19c>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a30      	ldr	r2, [pc, #192]	@ (800b674 <HAL_DMA_Abort_IT+0x1f0>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d030      	beq.n	800b61a <HAL_DMA_Abort_IT+0x196>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a2e      	ldr	r2, [pc, #184]	@ (800b678 <HAL_DMA_Abort_IT+0x1f4>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d028      	beq.n	800b614 <HAL_DMA_Abort_IT+0x190>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a26      	ldr	r2, [pc, #152]	@ (800b660 <HAL_DMA_Abort_IT+0x1dc>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d020      	beq.n	800b60e <HAL_DMA_Abort_IT+0x18a>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b67c <HAL_DMA_Abort_IT+0x1f8>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d019      	beq.n	800b60a <HAL_DMA_Abort_IT+0x186>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a29      	ldr	r2, [pc, #164]	@ (800b680 <HAL_DMA_Abort_IT+0x1fc>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d012      	beq.n	800b606 <HAL_DMA_Abort_IT+0x182>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a27      	ldr	r2, [pc, #156]	@ (800b684 <HAL_DMA_Abort_IT+0x200>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00a      	beq.n	800b600 <HAL_DMA_Abort_IT+0x17c>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a26      	ldr	r2, [pc, #152]	@ (800b688 <HAL_DMA_Abort_IT+0x204>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d102      	bne.n	800b5fa <HAL_DMA_Abort_IT+0x176>
 800b5f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5f8:	e01b      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b5fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b5fe:	e018      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b604:	e015      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b606:	2310      	movs	r3, #16
 800b608:	e013      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e011      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b60e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b612:	e00e      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b614:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b618:	e00b      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b61a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b61e:	e008      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b624:	e005      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b62a:	e002      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b62c:	2310      	movs	r3, #16
 800b62e:	e000      	b.n	800b632 <HAL_DMA_Abort_IT+0x1ae>
 800b630:	2301      	movs	r3, #1
 800b632:	4a17      	ldr	r2, [pc, #92]	@ (800b690 <HAL_DMA_Abort_IT+0x20c>)
 800b634:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	4798      	blx	r3
    } 
  }
  return status;
 800b656:	7bfb      	ldrb	r3, [r7, #15]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	40020080 	.word	0x40020080
 800b664:	40020008 	.word	0x40020008
 800b668:	4002001c 	.word	0x4002001c
 800b66c:	40020030 	.word	0x40020030
 800b670:	40020044 	.word	0x40020044
 800b674:	40020058 	.word	0x40020058
 800b678:	4002006c 	.word	0x4002006c
 800b67c:	40020408 	.word	0x40020408
 800b680:	4002041c 	.word	0x4002041c
 800b684:	40020430 	.word	0x40020430
 800b688:	40020444 	.word	0x40020444
 800b68c:	40020400 	.word	0x40020400
 800b690:	40020000 	.word	0x40020000

0800b694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b694:	b480      	push	{r7}
 800b696:	b08b      	sub	sp, #44	@ 0x2c
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b6a6:	e179      	b.n	800b99c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	f040 8168 	bne.w	800b996 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4a96      	ldr	r2, [pc, #600]	@ (800b924 <HAL_GPIO_Init+0x290>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d05e      	beq.n	800b78e <HAL_GPIO_Init+0xfa>
 800b6d0:	4a94      	ldr	r2, [pc, #592]	@ (800b924 <HAL_GPIO_Init+0x290>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d875      	bhi.n	800b7c2 <HAL_GPIO_Init+0x12e>
 800b6d6:	4a94      	ldr	r2, [pc, #592]	@ (800b928 <HAL_GPIO_Init+0x294>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d058      	beq.n	800b78e <HAL_GPIO_Init+0xfa>
 800b6dc:	4a92      	ldr	r2, [pc, #584]	@ (800b928 <HAL_GPIO_Init+0x294>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d86f      	bhi.n	800b7c2 <HAL_GPIO_Init+0x12e>
 800b6e2:	4a92      	ldr	r2, [pc, #584]	@ (800b92c <HAL_GPIO_Init+0x298>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d052      	beq.n	800b78e <HAL_GPIO_Init+0xfa>
 800b6e8:	4a90      	ldr	r2, [pc, #576]	@ (800b92c <HAL_GPIO_Init+0x298>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d869      	bhi.n	800b7c2 <HAL_GPIO_Init+0x12e>
 800b6ee:	4a90      	ldr	r2, [pc, #576]	@ (800b930 <HAL_GPIO_Init+0x29c>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d04c      	beq.n	800b78e <HAL_GPIO_Init+0xfa>
 800b6f4:	4a8e      	ldr	r2, [pc, #568]	@ (800b930 <HAL_GPIO_Init+0x29c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d863      	bhi.n	800b7c2 <HAL_GPIO_Init+0x12e>
 800b6fa:	4a8e      	ldr	r2, [pc, #568]	@ (800b934 <HAL_GPIO_Init+0x2a0>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d046      	beq.n	800b78e <HAL_GPIO_Init+0xfa>
 800b700:	4a8c      	ldr	r2, [pc, #560]	@ (800b934 <HAL_GPIO_Init+0x2a0>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d85d      	bhi.n	800b7c2 <HAL_GPIO_Init+0x12e>
 800b706:	2b12      	cmp	r3, #18
 800b708:	d82a      	bhi.n	800b760 <HAL_GPIO_Init+0xcc>
 800b70a:	2b12      	cmp	r3, #18
 800b70c:	d859      	bhi.n	800b7c2 <HAL_GPIO_Init+0x12e>
 800b70e:	a201      	add	r2, pc, #4	@ (adr r2, 800b714 <HAL_GPIO_Init+0x80>)
 800b710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b714:	0800b78f 	.word	0x0800b78f
 800b718:	0800b769 	.word	0x0800b769
 800b71c:	0800b77b 	.word	0x0800b77b
 800b720:	0800b7bd 	.word	0x0800b7bd
 800b724:	0800b7c3 	.word	0x0800b7c3
 800b728:	0800b7c3 	.word	0x0800b7c3
 800b72c:	0800b7c3 	.word	0x0800b7c3
 800b730:	0800b7c3 	.word	0x0800b7c3
 800b734:	0800b7c3 	.word	0x0800b7c3
 800b738:	0800b7c3 	.word	0x0800b7c3
 800b73c:	0800b7c3 	.word	0x0800b7c3
 800b740:	0800b7c3 	.word	0x0800b7c3
 800b744:	0800b7c3 	.word	0x0800b7c3
 800b748:	0800b7c3 	.word	0x0800b7c3
 800b74c:	0800b7c3 	.word	0x0800b7c3
 800b750:	0800b7c3 	.word	0x0800b7c3
 800b754:	0800b7c3 	.word	0x0800b7c3
 800b758:	0800b771 	.word	0x0800b771
 800b75c:	0800b785 	.word	0x0800b785
 800b760:	4a75      	ldr	r2, [pc, #468]	@ (800b938 <HAL_GPIO_Init+0x2a4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d013      	beq.n	800b78e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b766:	e02c      	b.n	800b7c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	623b      	str	r3, [r7, #32]
          break;
 800b76e:	e029      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	3304      	adds	r3, #4
 800b776:	623b      	str	r3, [r7, #32]
          break;
 800b778:	e024      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	3308      	adds	r3, #8
 800b780:	623b      	str	r3, [r7, #32]
          break;
 800b782:	e01f      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	330c      	adds	r3, #12
 800b78a:	623b      	str	r3, [r7, #32]
          break;
 800b78c:	e01a      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d102      	bne.n	800b79c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b796:	2304      	movs	r3, #4
 800b798:	623b      	str	r3, [r7, #32]
          break;
 800b79a:	e013      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d105      	bne.n	800b7b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b7a4:	2308      	movs	r3, #8
 800b7a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	69fa      	ldr	r2, [r7, #28]
 800b7ac:	611a      	str	r2, [r3, #16]
          break;
 800b7ae:	e009      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b7b0:	2308      	movs	r3, #8
 800b7b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	615a      	str	r2, [r3, #20]
          break;
 800b7ba:	e003      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	623b      	str	r3, [r7, #32]
          break;
 800b7c0:	e000      	b.n	800b7c4 <HAL_GPIO_Init+0x130>
          break;
 800b7c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	2bff      	cmp	r3, #255	@ 0xff
 800b7c8:	d801      	bhi.n	800b7ce <HAL_GPIO_Init+0x13a>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	e001      	b.n	800b7d2 <HAL_GPIO_Init+0x13e>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2bff      	cmp	r3, #255	@ 0xff
 800b7d8:	d802      	bhi.n	800b7e0 <HAL_GPIO_Init+0x14c>
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	e002      	b.n	800b7e6 <HAL_GPIO_Init+0x152>
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e2:	3b08      	subs	r3, #8
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	210f      	movs	r1, #15
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f4:	43db      	mvns	r3, r3
 800b7f6:	401a      	ands	r2, r3
 800b7f8:	6a39      	ldr	r1, [r7, #32]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b800:	431a      	orrs	r2, r3
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 80c1 	beq.w	800b996 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b814:	4b49      	ldr	r3, [pc, #292]	@ (800b93c <HAL_GPIO_Init+0x2a8>)
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	4a48      	ldr	r2, [pc, #288]	@ (800b93c <HAL_GPIO_Init+0x2a8>)
 800b81a:	f043 0301 	orr.w	r3, r3, #1
 800b81e:	6193      	str	r3, [r2, #24]
 800b820:	4b46      	ldr	r3, [pc, #280]	@ (800b93c <HAL_GPIO_Init+0x2a8>)
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	60bb      	str	r3, [r7, #8]
 800b82a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800b82c:	4a44      	ldr	r2, [pc, #272]	@ (800b940 <HAL_GPIO_Init+0x2ac>)
 800b82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b830:	089b      	lsrs	r3, r3, #2
 800b832:	3302      	adds	r3, #2
 800b834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83c:	f003 0303 	and.w	r3, r3, #3
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	220f      	movs	r2, #15
 800b844:	fa02 f303 	lsl.w	r3, r2, r3
 800b848:	43db      	mvns	r3, r3
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4013      	ands	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a3c      	ldr	r2, [pc, #240]	@ (800b944 <HAL_GPIO_Init+0x2b0>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d01f      	beq.n	800b898 <HAL_GPIO_Init+0x204>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a3b      	ldr	r2, [pc, #236]	@ (800b948 <HAL_GPIO_Init+0x2b4>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d019      	beq.n	800b894 <HAL_GPIO_Init+0x200>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a3a      	ldr	r2, [pc, #232]	@ (800b94c <HAL_GPIO_Init+0x2b8>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d013      	beq.n	800b890 <HAL_GPIO_Init+0x1fc>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a39      	ldr	r2, [pc, #228]	@ (800b950 <HAL_GPIO_Init+0x2bc>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d00d      	beq.n	800b88c <HAL_GPIO_Init+0x1f8>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a38      	ldr	r2, [pc, #224]	@ (800b954 <HAL_GPIO_Init+0x2c0>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d007      	beq.n	800b888 <HAL_GPIO_Init+0x1f4>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a37      	ldr	r2, [pc, #220]	@ (800b958 <HAL_GPIO_Init+0x2c4>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d101      	bne.n	800b884 <HAL_GPIO_Init+0x1f0>
 800b880:	2305      	movs	r3, #5
 800b882:	e00a      	b.n	800b89a <HAL_GPIO_Init+0x206>
 800b884:	2306      	movs	r3, #6
 800b886:	e008      	b.n	800b89a <HAL_GPIO_Init+0x206>
 800b888:	2304      	movs	r3, #4
 800b88a:	e006      	b.n	800b89a <HAL_GPIO_Init+0x206>
 800b88c:	2303      	movs	r3, #3
 800b88e:	e004      	b.n	800b89a <HAL_GPIO_Init+0x206>
 800b890:	2302      	movs	r3, #2
 800b892:	e002      	b.n	800b89a <HAL_GPIO_Init+0x206>
 800b894:	2301      	movs	r3, #1
 800b896:	e000      	b.n	800b89a <HAL_GPIO_Init+0x206>
 800b898:	2300      	movs	r3, #0
 800b89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b89c:	f002 0203 	and.w	r2, r2, #3
 800b8a0:	0092      	lsls	r2, r2, #2
 800b8a2:	4093      	lsls	r3, r2
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800b8aa:	4925      	ldr	r1, [pc, #148]	@ (800b940 <HAL_GPIO_Init+0x2ac>)
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	089b      	lsrs	r3, r3, #2
 800b8b0:	3302      	adds	r3, #2
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d006      	beq.n	800b8d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800b8c4:	4b25      	ldr	r3, [pc, #148]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8c6:	689a      	ldr	r2, [r3, #8]
 800b8c8:	4924      	ldr	r1, [pc, #144]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	608b      	str	r3, [r1, #8]
 800b8d0:	e006      	b.n	800b8e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800b8d2:	4b22      	ldr	r3, [pc, #136]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	43db      	mvns	r3, r3
 800b8da:	4920      	ldr	r1, [pc, #128]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8dc:	4013      	ands	r3, r2
 800b8de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d006      	beq.n	800b8fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800b8ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	491a      	ldr	r1, [pc, #104]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60cb      	str	r3, [r1, #12]
 800b8f8:	e006      	b.n	800b908 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800b8fa:	4b18      	ldr	r3, [pc, #96]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	43db      	mvns	r3, r3
 800b902:	4916      	ldr	r1, [pc, #88]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b904:	4013      	ands	r3, r2
 800b906:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d025      	beq.n	800b960 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800b914:	4b11      	ldr	r3, [pc, #68]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	4910      	ldr	r1, [pc, #64]	@ (800b95c <HAL_GPIO_Init+0x2c8>)
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	604b      	str	r3, [r1, #4]
 800b920:	e025      	b.n	800b96e <HAL_GPIO_Init+0x2da>
 800b922:	bf00      	nop
 800b924:	10320000 	.word	0x10320000
 800b928:	10310000 	.word	0x10310000
 800b92c:	10220000 	.word	0x10220000
 800b930:	10210000 	.word	0x10210000
 800b934:	10120000 	.word	0x10120000
 800b938:	10110000 	.word	0x10110000
 800b93c:	40021000 	.word	0x40021000
 800b940:	40010000 	.word	0x40010000
 800b944:	40010800 	.word	0x40010800
 800b948:	40010c00 	.word	0x40010c00
 800b94c:	40011000 	.word	0x40011000
 800b950:	40011400 	.word	0x40011400
 800b954:	40011800 	.word	0x40011800
 800b958:	40011c00 	.word	0x40011c00
 800b95c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800b960:	4b15      	ldr	r3, [pc, #84]	@ (800b9b8 <HAL_GPIO_Init+0x324>)
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	43db      	mvns	r3, r3
 800b968:	4913      	ldr	r1, [pc, #76]	@ (800b9b8 <HAL_GPIO_Init+0x324>)
 800b96a:	4013      	ands	r3, r2
 800b96c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d006      	beq.n	800b988 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800b97a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <HAL_GPIO_Init+0x324>)
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	490e      	ldr	r1, [pc, #56]	@ (800b9b8 <HAL_GPIO_Init+0x324>)
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	4313      	orrs	r3, r2
 800b984:	600b      	str	r3, [r1, #0]
 800b986:	e006      	b.n	800b996 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800b988:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b8 <HAL_GPIO_Init+0x324>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	43db      	mvns	r3, r3
 800b990:	4909      	ldr	r1, [pc, #36]	@ (800b9b8 <HAL_GPIO_Init+0x324>)
 800b992:	4013      	ands	r3, r2
 800b994:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	3301      	adds	r3, #1
 800b99a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f47f ae7e 	bne.w	800b6a8 <HAL_GPIO_Init+0x14>
  }
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	372c      	adds	r7, #44	@ 0x2c
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bc80      	pop	{r7}
 800b9b6:	4770      	bx	lr
 800b9b8:	40010400 	.word	0x40010400

0800b9bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b089      	sub	sp, #36	@ 0x24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800b9ca:	e0a6      	b.n	800bb1a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 8099 	beq.w	800bb14 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800b9e2:	4a54      	ldr	r2, [pc, #336]	@ (800bb34 <HAL_GPIO_DeInit+0x178>)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	089b      	lsrs	r3, r3, #2
 800b9e8:	3302      	adds	r3, #2
 800b9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ee:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	220f      	movs	r2, #15
 800b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	4013      	ands	r3, r2
 800ba02:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a4c      	ldr	r2, [pc, #304]	@ (800bb38 <HAL_GPIO_DeInit+0x17c>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d01f      	beq.n	800ba4c <HAL_GPIO_DeInit+0x90>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a4b      	ldr	r2, [pc, #300]	@ (800bb3c <HAL_GPIO_DeInit+0x180>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d019      	beq.n	800ba48 <HAL_GPIO_DeInit+0x8c>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a4a      	ldr	r2, [pc, #296]	@ (800bb40 <HAL_GPIO_DeInit+0x184>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d013      	beq.n	800ba44 <HAL_GPIO_DeInit+0x88>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a49      	ldr	r2, [pc, #292]	@ (800bb44 <HAL_GPIO_DeInit+0x188>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d00d      	beq.n	800ba40 <HAL_GPIO_DeInit+0x84>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a48      	ldr	r2, [pc, #288]	@ (800bb48 <HAL_GPIO_DeInit+0x18c>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d007      	beq.n	800ba3c <HAL_GPIO_DeInit+0x80>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a47      	ldr	r2, [pc, #284]	@ (800bb4c <HAL_GPIO_DeInit+0x190>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d101      	bne.n	800ba38 <HAL_GPIO_DeInit+0x7c>
 800ba34:	2305      	movs	r3, #5
 800ba36:	e00a      	b.n	800ba4e <HAL_GPIO_DeInit+0x92>
 800ba38:	2306      	movs	r3, #6
 800ba3a:	e008      	b.n	800ba4e <HAL_GPIO_DeInit+0x92>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	e006      	b.n	800ba4e <HAL_GPIO_DeInit+0x92>
 800ba40:	2303      	movs	r3, #3
 800ba42:	e004      	b.n	800ba4e <HAL_GPIO_DeInit+0x92>
 800ba44:	2302      	movs	r3, #2
 800ba46:	e002      	b.n	800ba4e <HAL_GPIO_DeInit+0x92>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e000      	b.n	800ba4e <HAL_GPIO_DeInit+0x92>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	f002 0203 	and.w	r2, r2, #3
 800ba54:	0092      	lsls	r2, r2, #2
 800ba56:	4093      	lsls	r3, r2
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d132      	bne.n	800bac4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800ba5e:	4b3c      	ldr	r3, [pc, #240]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	43db      	mvns	r3, r3
 800ba66:	493a      	ldr	r1, [pc, #232]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba68:	4013      	ands	r3, r2
 800ba6a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800ba6c:	4b38      	ldr	r3, [pc, #224]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	43db      	mvns	r3, r3
 800ba74:	4936      	ldr	r1, [pc, #216]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba76:	4013      	ands	r3, r2
 800ba78:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800ba7a:	4b35      	ldr	r3, [pc, #212]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba7c:	68da      	ldr	r2, [r3, #12]
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	43db      	mvns	r3, r3
 800ba82:	4933      	ldr	r1, [pc, #204]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba84:	4013      	ands	r3, r2
 800ba86:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800ba88:	4b31      	ldr	r3, [pc, #196]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	43db      	mvns	r3, r3
 800ba90:	492f      	ldr	r1, [pc, #188]	@ (800bb50 <HAL_GPIO_DeInit+0x194>)
 800ba92:	4013      	ands	r3, r2
 800ba94:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	f003 0303 	and.w	r3, r3, #3
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	220f      	movs	r2, #15
 800baa0:	fa02 f303 	lsl.w	r3, r2, r3
 800baa4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800baa6:	4a23      	ldr	r2, [pc, #140]	@ (800bb34 <HAL_GPIO_DeInit+0x178>)
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	089b      	lsrs	r3, r3, #2
 800baac:	3302      	adds	r3, #2
 800baae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	43da      	mvns	r2, r3
 800bab6:	481f      	ldr	r0, [pc, #124]	@ (800bb34 <HAL_GPIO_DeInit+0x178>)
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	089b      	lsrs	r3, r3, #2
 800babc:	400a      	ands	r2, r1
 800babe:	3302      	adds	r3, #2
 800bac0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	2bff      	cmp	r3, #255	@ 0xff
 800bac8:	d801      	bhi.n	800bace <HAL_GPIO_DeInit+0x112>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	e001      	b.n	800bad2 <HAL_GPIO_DeInit+0x116>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3304      	adds	r3, #4
 800bad2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	2bff      	cmp	r3, #255	@ 0xff
 800bad8:	d802      	bhi.n	800bae0 <HAL_GPIO_DeInit+0x124>
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	e002      	b.n	800bae6 <HAL_GPIO_DeInit+0x12a>
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	3b08      	subs	r3, #8
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	210f      	movs	r1, #15
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	fa01 f303 	lsl.w	r3, r1, r3
 800baf4:	43db      	mvns	r3, r3
 800baf6:	401a      	ands	r2, r3
 800baf8:	2104      	movs	r1, #4
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	fa01 f303 	lsl.w	r3, r1, r3
 800bb00:	431a      	orrs	r2, r3
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68da      	ldr	r2, [r3, #12]
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	43db      	mvns	r3, r3
 800bb0e:	401a      	ands	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	60da      	str	r2, [r3, #12]
    }

    position++;
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	3301      	adds	r3, #1
 800bb18:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f47f af52 	bne.w	800b9cc <HAL_GPIO_DeInit+0x10>
  }
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	3724      	adds	r7, #36	@ 0x24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bc80      	pop	{r7}
 800bb32:	4770      	bx	lr
 800bb34:	40010000 	.word	0x40010000
 800bb38:	40010800 	.word	0x40010800
 800bb3c:	40010c00 	.word	0x40010c00
 800bb40:	40011000 	.word	0x40011000
 800bb44:	40011400 	.word	0x40011400
 800bb48:	40011800 	.word	0x40011800
 800bb4c:	40011c00 	.word	0x40011c00
 800bb50:	40010400 	.word	0x40010400

0800bb54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	887b      	ldrh	r3, [r7, #2]
 800bb66:	4013      	ands	r3, r2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	73fb      	strb	r3, [r7, #15]
 800bb70:	e001      	b.n	800bb76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bc80      	pop	{r7}
 800bb80:	4770      	bx	lr

0800bb82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b083      	sub	sp, #12
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	807b      	strh	r3, [r7, #2]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bb92:	787b      	ldrb	r3, [r7, #1]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bb98:	887a      	ldrh	r2, [r7, #2]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800bb9e:	e003      	b.n	800bba8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800bba0:	887b      	ldrh	r3, [r7, #2]
 800bba2:	041a      	lsls	r2, r3, #16
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	611a      	str	r2, [r3, #16]
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bc80      	pop	{r7}
 800bbb0:	4770      	bx	lr

0800bbb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bbc4:	887a      	ldrh	r2, [r7, #2]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4013      	ands	r3, r2
 800bbca:	041a      	lsls	r2, r3, #16
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	43d9      	mvns	r1, r3
 800bbd0:	887b      	ldrh	r3, [r7, #2]
 800bbd2:	400b      	ands	r3, r1
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	611a      	str	r2, [r3, #16]
}
 800bbda:	bf00      	nop
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bc80      	pop	{r7}
 800bbe2:	4770      	bx	lr

0800bbe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e12b      	b.n	800be4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d106      	bne.n	800bc10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fe fff4 	bl	800abf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2224      	movs	r2, #36	@ 0x24
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0201 	bic.w	r2, r2, #1
 800bc26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bc46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bc48:	f001 fdb8 	bl	800d7bc <HAL_RCC_GetPCLK1Freq>
 800bc4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	4a81      	ldr	r2, [pc, #516]	@ (800be58 <HAL_I2C_Init+0x274>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d807      	bhi.n	800bc68 <HAL_I2C_Init+0x84>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a80      	ldr	r2, [pc, #512]	@ (800be5c <HAL_I2C_Init+0x278>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	bf94      	ite	ls
 800bc60:	2301      	movls	r3, #1
 800bc62:	2300      	movhi	r3, #0
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	e006      	b.n	800bc76 <HAL_I2C_Init+0x92>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4a7d      	ldr	r2, [pc, #500]	@ (800be60 <HAL_I2C_Init+0x27c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	bf94      	ite	ls
 800bc70:	2301      	movls	r3, #1
 800bc72:	2300      	movhi	r3, #0
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e0e7      	b.n	800be4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4a78      	ldr	r2, [pc, #480]	@ (800be64 <HAL_I2C_Init+0x280>)
 800bc82:	fba2 2303 	umull	r2, r3, r2, r3
 800bc86:	0c9b      	lsrs	r3, r3, #18
 800bc88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	4a6a      	ldr	r2, [pc, #424]	@ (800be58 <HAL_I2C_Init+0x274>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d802      	bhi.n	800bcb8 <HAL_I2C_Init+0xd4>
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	e009      	b.n	800bccc <HAL_I2C_Init+0xe8>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bcbe:	fb02 f303 	mul.w	r3, r2, r3
 800bcc2:	4a69      	ldr	r2, [pc, #420]	@ (800be68 <HAL_I2C_Init+0x284>)
 800bcc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc8:	099b      	lsrs	r3, r3, #6
 800bcca:	3301      	adds	r3, #1
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	6812      	ldr	r2, [r2, #0]
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800bcde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	495c      	ldr	r1, [pc, #368]	@ (800be58 <HAL_I2C_Init+0x274>)
 800bce8:	428b      	cmp	r3, r1
 800bcea:	d819      	bhi.n	800bd20 <HAL_I2C_Init+0x13c>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	1e59      	subs	r1, r3, #1
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	fbb1 f3f3 	udiv	r3, r1, r3
 800bcfa:	1c59      	adds	r1, r3, #1
 800bcfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bd00:	400b      	ands	r3, r1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00a      	beq.n	800bd1c <HAL_I2C_Init+0x138>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	1e59      	subs	r1, r3, #1
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd14:	3301      	adds	r3, #1
 800bd16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd1a:	e051      	b.n	800bdc0 <HAL_I2C_Init+0x1dc>
 800bd1c:	2304      	movs	r3, #4
 800bd1e:	e04f      	b.n	800bdc0 <HAL_I2C_Init+0x1dc>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d111      	bne.n	800bd4c <HAL_I2C_Init+0x168>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	1e58      	subs	r0, r3, #1
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6859      	ldr	r1, [r3, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	440b      	add	r3, r1
 800bd36:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	bf0c      	ite	eq
 800bd44:	2301      	moveq	r3, #1
 800bd46:	2300      	movne	r3, #0
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	e012      	b.n	800bd72 <HAL_I2C_Init+0x18e>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	1e58      	subs	r0, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6859      	ldr	r1, [r3, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	440b      	add	r3, r1
 800bd5a:	0099      	lsls	r1, r3, #2
 800bd5c:	440b      	add	r3, r1
 800bd5e:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd62:	3301      	adds	r3, #1
 800bd64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bf0c      	ite	eq
 800bd6c:	2301      	moveq	r3, #1
 800bd6e:	2300      	movne	r3, #0
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <HAL_I2C_Init+0x196>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e022      	b.n	800bdc0 <HAL_I2C_Init+0x1dc>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10e      	bne.n	800bda0 <HAL_I2C_Init+0x1bc>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	1e58      	subs	r0, r3, #1
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6859      	ldr	r1, [r3, #4]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	440b      	add	r3, r1
 800bd90:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd94:	3301      	adds	r3, #1
 800bd96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd9e:	e00f      	b.n	800bdc0 <HAL_I2C_Init+0x1dc>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	1e58      	subs	r0, r3, #1
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6859      	ldr	r1, [r3, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	440b      	add	r3, r1
 800bdae:	0099      	lsls	r1, r3, #2
 800bdb0:	440b      	add	r3, r1
 800bdb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	6809      	ldr	r1, [r1, #0]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	69da      	ldr	r2, [r3, #28]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800bdee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6911      	ldr	r1, [r2, #16]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	68d2      	ldr	r2, [r2, #12]
 800bdfa:	4311      	orrs	r1, r2
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	6812      	ldr	r2, [r2, #0]
 800be00:	430b      	orrs	r3, r1
 800be02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	695a      	ldr	r2, [r3, #20]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	431a      	orrs	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f042 0201 	orr.w	r2, r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2220      	movs	r2, #32
 800be3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	000186a0 	.word	0x000186a0
 800be5c:	001e847f 	.word	0x001e847f
 800be60:	003d08ff 	.word	0x003d08ff
 800be64:	431bde83 	.word	0x431bde83
 800be68:	10624dd3 	.word	0x10624dd3

0800be6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e021      	b.n	800bec2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2224      	movs	r2, #36	@ 0x24
 800be82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0201 	bic.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7fe feec 	bl	800ac74 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	607a      	str	r2, [r7, #4]
 800bed6:	461a      	mov	r2, r3
 800bed8:	460b      	mov	r3, r1
 800beda:	817b      	strh	r3, [r7, #10]
 800bedc:	4613      	mov	r3, r2
 800bede:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bee0:	f7ff f85e 	bl	800afa0 <HAL_GetTick>
 800bee4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beec:	b2db      	uxtb	r3, r3
 800beee:	2b20      	cmp	r3, #32
 800bef0:	f040 80e0 	bne.w	800c0b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	2319      	movs	r3, #25
 800befa:	2201      	movs	r2, #1
 800befc:	4970      	ldr	r1, [pc, #448]	@ (800c0c0 <HAL_I2C_Master_Transmit+0x1f4>)
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 fe5c 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e0d3      	b.n	800c0b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d101      	bne.n	800bf1c <HAL_I2C_Master_Transmit+0x50>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e0cc      	b.n	800c0b6 <HAL_I2C_Master_Transmit+0x1ea>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d007      	beq.n	800bf42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f042 0201 	orr.w	r2, r2, #1
 800bf40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bf50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2221      	movs	r2, #33	@ 0x21
 800bf56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2210      	movs	r2, #16
 800bf5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	893a      	ldrh	r2, [r7, #8]
 800bf72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4a50      	ldr	r2, [pc, #320]	@ (800c0c4 <HAL_I2C_Master_Transmit+0x1f8>)
 800bf82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bf84:	8979      	ldrh	r1, [r7, #10]
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	6a3a      	ldr	r2, [r7, #32]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 fc16 	bl	800c7bc <I2C_MasterRequestWrite>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e08d      	b.n	800c0b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	613b      	str	r3, [r7, #16]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	699b      	ldr	r3, [r3, #24]
 800bfac:	613b      	str	r3, [r7, #16]
 800bfae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bfb0:	e066      	b.n	800c080 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	6a39      	ldr	r1, [r7, #32]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 ff1a 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00d      	beq.n	800bfde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d107      	bne.n	800bfda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e06b      	b.n	800c0b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c006:	3b01      	subs	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	f003 0304 	and.w	r3, r3, #4
 800c018:	2b04      	cmp	r3, #4
 800c01a:	d11b      	bne.n	800c054 <HAL_I2C_Master_Transmit+0x188>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c020:	2b00      	cmp	r3, #0
 800c022:	d017      	beq.n	800c054 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c028:	781a      	ldrb	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c03e:	b29b      	uxth	r3, r3
 800c040:	3b01      	subs	r3, #1
 800c042:	b29a      	uxth	r2, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c04c:	3b01      	subs	r3, #1
 800c04e:	b29a      	uxth	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	6a39      	ldr	r1, [r7, #32]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 ff11 	bl	800ce80 <I2C_WaitOnBTFFlagUntilTimeout>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00d      	beq.n	800c080 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c068:	2b04      	cmp	r3, #4
 800c06a:	d107      	bne.n	800c07c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c07a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e01a      	b.n	800c0b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c084:	2b00      	cmp	r3, #0
 800c086:	d194      	bne.n	800bfb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2220      	movs	r2, #32
 800c09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	e000      	b.n	800c0b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c0b4:	2302      	movs	r3, #2
  }
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	00100002 	.word	0x00100002
 800c0c4:	ffff0000 	.word	0xffff0000

0800c0c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	817b      	strh	r3, [r7, #10]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	813b      	strh	r3, [r7, #8]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c0e2:	f7fe ff5d 	bl	800afa0 <HAL_GetTick>
 800c0e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b20      	cmp	r3, #32
 800c0f2:	f040 80d9 	bne.w	800c2a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2319      	movs	r3, #25
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	496d      	ldr	r1, [pc, #436]	@ (800c2b4 <HAL_I2C_Mem_Write+0x1ec>)
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 fd5b 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c10c:	2302      	movs	r3, #2
 800c10e:	e0cc      	b.n	800c2aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c116:	2b01      	cmp	r3, #1
 800c118:	d101      	bne.n	800c11e <HAL_I2C_Mem_Write+0x56>
 800c11a:	2302      	movs	r3, #2
 800c11c:	e0c5      	b.n	800c2aa <HAL_I2C_Mem_Write+0x1e2>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b01      	cmp	r3, #1
 800c132:	d007      	beq.n	800c144 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f042 0201 	orr.w	r2, r2, #1
 800c142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2221      	movs	r2, #33	@ 0x21
 800c158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2240      	movs	r2, #64	@ 0x40
 800c160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6a3a      	ldr	r2, [r7, #32]
 800c16e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	4a4d      	ldr	r2, [pc, #308]	@ (800c2b8 <HAL_I2C_Mem_Write+0x1f0>)
 800c184:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c186:	88f8      	ldrh	r0, [r7, #6]
 800c188:	893a      	ldrh	r2, [r7, #8]
 800c18a:	8979      	ldrh	r1, [r7, #10]
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	9301      	str	r3, [sp, #4]
 800c190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	4603      	mov	r3, r0
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f000 fb92 	bl	800c8c0 <I2C_RequestMemoryWrite>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d052      	beq.n	800c248 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e081      	b.n	800c2aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 fe20 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00d      	beq.n	800c1d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d107      	bne.n	800c1ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e06b      	b.n	800c2aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d6:	781a      	ldrb	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b04      	cmp	r3, #4
 800c20e:	d11b      	bne.n	800c248 <HAL_I2C_Mem_Write+0x180>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c214:	2b00      	cmp	r3, #0
 800c216:	d017      	beq.n	800c248 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c228:	1c5a      	adds	r2, r3, #1
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c232:	3b01      	subs	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c23e:	b29b      	uxth	r3, r3
 800c240:	3b01      	subs	r3, #1
 800c242:	b29a      	uxth	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1aa      	bne.n	800c1a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f000 fe13 	bl	800ce80 <I2C_WaitOnBTFFlagUntilTimeout>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00d      	beq.n	800c27c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c264:	2b04      	cmp	r3, #4
 800c266:	d107      	bne.n	800c278 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c276:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e016      	b.n	800c2aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c28a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2220      	movs	r2, #32
 800c290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e000      	b.n	800c2aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c2a8:	2302      	movs	r3, #2
  }
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	00100002 	.word	0x00100002
 800c2b8:	ffff0000 	.word	0xffff0000

0800c2bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08c      	sub	sp, #48	@ 0x30
 800c2c0:	af02      	add	r7, sp, #8
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	817b      	strh	r3, [r7, #10]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	813b      	strh	r3, [r7, #8]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c2da:	f7fe fe61 	bl	800afa0 <HAL_GetTick>
 800c2de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	f040 8244 	bne.w	800c776 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	2319      	movs	r3, #25
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	4982      	ldr	r1, [pc, #520]	@ (800c500 <HAL_I2C_Mem_Read+0x244>)
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f000 fc5f 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800c304:	2302      	movs	r3, #2
 800c306:	e237      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <HAL_I2C_Mem_Read+0x5a>
 800c312:	2302      	movs	r3, #2
 800c314:	e230      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d007      	beq.n	800c33c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f042 0201 	orr.w	r2, r2, #1
 800c33a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c34a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2222      	movs	r2, #34	@ 0x22
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2240      	movs	r2, #64	@ 0x40
 800c358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800c36c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c372:	b29a      	uxth	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4a62      	ldr	r2, [pc, #392]	@ (800c504 <HAL_I2C_Mem_Read+0x248>)
 800c37c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c37e:	88f8      	ldrh	r0, [r7, #6]
 800c380:	893a      	ldrh	r2, [r7, #8]
 800c382:	8979      	ldrh	r1, [r7, #10]
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4603      	mov	r3, r0
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f000 fb2c 	bl	800c9ec <I2C_RequestMemoryRead>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e1ec      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d113      	bne.n	800c3ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	61fb      	str	r3, [r7, #28]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3ca:	601a      	str	r2, [r3, #0]
 800c3cc:	e1c0      	b.n	800c750 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d11e      	bne.n	800c414 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3e6:	b672      	cpsid	i
}
 800c3e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	61bb      	str	r3, [r7, #24]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	61bb      	str	r3, [r7, #24]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	61bb      	str	r3, [r7, #24]
 800c3fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c40e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c410:	b662      	cpsie	i
}
 800c412:	e035      	b.n	800c480 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d11e      	bne.n	800c45a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c42a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c42c:	b672      	cpsid	i
}
 800c42e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	617b      	str	r3, [r7, #20]
 800c444:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c454:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c456:	b662      	cpsie	i
}
 800c458:	e012      	b.n	800c480 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c468:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c46a:	2300      	movs	r3, #0
 800c46c:	613b      	str	r3, [r7, #16]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	613b      	str	r3, [r7, #16]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800c480:	e166      	b.n	800c750 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c486:	2b03      	cmp	r3, #3
 800c488:	f200 811f 	bhi.w	800c6ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c490:	2b01      	cmp	r3, #1
 800c492:	d123      	bne.n	800c4dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c496:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 fd39 	bl	800cf10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d001      	beq.n	800c4a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e167      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	691a      	ldr	r2, [r3, #16]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b2:	b2d2      	uxtb	r2, r2
 800c4b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ba:	1c5a      	adds	r2, r3, #1
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c4da:	e139      	b.n	800c750 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d152      	bne.n	800c58a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	4906      	ldr	r1, [pc, #24]	@ (800c508 <HAL_I2C_Mem_Read+0x24c>)
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 fb64 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d008      	beq.n	800c50c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e13c      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
 800c4fe:	bf00      	nop
 800c500:	00100002 	.word	0x00100002
 800c504:	ffff0000 	.word	0xffff0000
 800c508:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800c50c:	b672      	cpsid	i
}
 800c50e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c51e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	691a      	ldr	r2, [r3, #16]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52a:	b2d2      	uxtb	r2, r2
 800c52c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c532:	1c5a      	adds	r2, r3, #1
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c53c:	3b01      	subs	r3, #1
 800c53e:	b29a      	uxth	r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c548:	b29b      	uxth	r3, r3
 800c54a:	3b01      	subs	r3, #1
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c552:	b662      	cpsie	i
}
 800c554:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	691a      	ldr	r2, [r3, #16]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c560:	b2d2      	uxtb	r2, r2
 800c562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c572:	3b01      	subs	r3, #1
 800c574:	b29a      	uxth	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c57e:	b29b      	uxth	r3, r3
 800c580:	3b01      	subs	r3, #1
 800c582:	b29a      	uxth	r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c588:	e0e2      	b.n	800c750 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	2200      	movs	r2, #0
 800c592:	497b      	ldr	r1, [pc, #492]	@ (800c780 <HAL_I2C_Mem_Read+0x4c4>)
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 fb11 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e0e9      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5b4:	b672      	cpsid	i
}
 800c5b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	691a      	ldr	r2, [r3, #16]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c5ea:	4b66      	ldr	r3, [pc, #408]	@ (800c784 <HAL_I2C_Mem_Read+0x4c8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	08db      	lsrs	r3, r3, #3
 800c5f0:	4a65      	ldr	r2, [pc, #404]	@ (800c788 <HAL_I2C_Mem_Read+0x4cc>)
 800c5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f6:	0a1a      	lsrs	r2, r3, #8
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00da      	lsls	r2, r3, #3
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	3b01      	subs	r3, #1
 800c608:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d118      	bne.n	800c642 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2220      	movs	r2, #32
 800c61a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c62a:	f043 0220 	orr.w	r2, r3, #32
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800c632:	b662      	cpsie	i
}
 800c634:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e09a      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	f003 0304 	and.w	r3, r3, #4
 800c64c:	2b04      	cmp	r3, #4
 800c64e:	d1d9      	bne.n	800c604 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c65e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	691a      	ldr	r2, [r3, #16]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c67c:	3b01      	subs	r3, #1
 800c67e:	b29a      	uxth	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c688:	b29b      	uxth	r3, r3
 800c68a:	3b01      	subs	r3, #1
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c692:	b662      	cpsie	i
}
 800c694:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	691a      	ldr	r2, [r3, #16]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a0:	b2d2      	uxtb	r2, r2
 800c6a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c6c8:	e042      	b.n	800c750 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f000 fc1e 	bl	800cf10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e04c      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	691a      	ldr	r2, [r3, #16]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c706:	b29b      	uxth	r3, r3
 800c708:	3b01      	subs	r3, #1
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	f003 0304 	and.w	r3, r3, #4
 800c71a:	2b04      	cmp	r3, #4
 800c71c:	d118      	bne.n	800c750 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	691a      	ldr	r2, [r3, #16]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c728:	b2d2      	uxtb	r2, r2
 800c72a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c730:	1c5a      	adds	r2, r3, #1
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c73a:	3b01      	subs	r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c746:	b29b      	uxth	r3, r3
 800c748:	3b01      	subs	r3, #1
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c754:	2b00      	cmp	r3, #0
 800c756:	f47f ae94 	bne.w	800c482 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2220      	movs	r2, #32
 800c75e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	e000      	b.n	800c778 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800c776:	2302      	movs	r3, #2
  }
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3728      	adds	r7, #40	@ 0x28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	00010004 	.word	0x00010004
 800c784:	20000f74 	.word	0x20000f74
 800c788:	14f8b589 	.word	0x14f8b589

0800c78c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c79a:	b2db      	uxtb	r3, r3
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bc80      	pop	{r7}
 800c7a4:	4770      	bx	lr

0800c7a6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bc80      	pop	{r7}
 800c7ba:	4770      	bx	lr

0800c7bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b088      	sub	sp, #32
 800c7c0:	af02      	add	r7, sp, #8
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	607a      	str	r2, [r7, #4]
 800c7c6:	603b      	str	r3, [r7, #0]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d006      	beq.n	800c7e6 <I2C_MasterRequestWrite+0x2a>
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d003      	beq.n	800c7e6 <I2C_MasterRequestWrite+0x2a>
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c7e4:	d108      	bne.n	800c7f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	e00b      	b.n	800c810 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7fc:	2b12      	cmp	r3, #18
 800c7fe:	d107      	bne.n	800c810 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c80e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 f9cd 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00d      	beq.n	800c844 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c836:	d103      	bne.n	800c840 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c83e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c840:	2303      	movs	r3, #3
 800c842:	e035      	b.n	800c8b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c84c:	d108      	bne.n	800c860 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c84e:	897b      	ldrh	r3, [r7, #10]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	461a      	mov	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c85c:	611a      	str	r2, [r3, #16]
 800c85e:	e01b      	b.n	800c898 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c860:	897b      	ldrh	r3, [r7, #10]
 800c862:	11db      	asrs	r3, r3, #7
 800c864:	b2db      	uxtb	r3, r3
 800c866:	f003 0306 	and.w	r3, r3, #6
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f063 030f 	orn	r3, r3, #15
 800c870:	b2da      	uxtb	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	490e      	ldr	r1, [pc, #56]	@ (800c8b8 <I2C_MasterRequestWrite+0xfc>)
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 fa16 	bl	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e010      	b.n	800c8b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c88e:	897b      	ldrh	r3, [r7, #10]
 800c890:	b2da      	uxtb	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	4907      	ldr	r1, [pc, #28]	@ (800c8bc <I2C_MasterRequestWrite+0x100>)
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 fa06 	bl	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3718      	adds	r7, #24
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	00010008 	.word	0x00010008
 800c8bc:	00010002 	.word	0x00010002

0800c8c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b088      	sub	sp, #32
 800c8c4:	af02      	add	r7, sp, #8
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	817b      	strh	r3, [r7, #10]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	813b      	strh	r3, [r7, #8]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c8e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 f960 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00d      	beq.n	800c91e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c90c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c910:	d103      	bne.n	800c91a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c918:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e05f      	b.n	800c9de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c91e:	897b      	ldrh	r3, [r7, #10]
 800c920:	b2db      	uxtb	r3, r3
 800c922:	461a      	mov	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c92c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c930:	6a3a      	ldr	r2, [r7, #32]
 800c932:	492d      	ldr	r1, [pc, #180]	@ (800c9e8 <I2C_RequestMemoryWrite+0x128>)
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 f9bb 	bl	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	e04c      	b.n	800c9de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c944:	2300      	movs	r3, #0
 800c946:	617b      	str	r3, [r7, #20]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	617b      	str	r3, [r7, #20]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c95c:	6a39      	ldr	r1, [r7, #32]
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f000 fa46 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00d      	beq.n	800c986 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c96e:	2b04      	cmp	r3, #4
 800c970:	d107      	bne.n	800c982 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e02b      	b.n	800c9de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c986:	88fb      	ldrh	r3, [r7, #6]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d105      	bne.n	800c998 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c98c:	893b      	ldrh	r3, [r7, #8]
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	611a      	str	r2, [r3, #16]
 800c996:	e021      	b.n	800c9dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c998:	893b      	ldrh	r3, [r7, #8]
 800c99a:	0a1b      	lsrs	r3, r3, #8
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a8:	6a39      	ldr	r1, [r7, #32]
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f000 fa20 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00d      	beq.n	800c9d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	d107      	bne.n	800c9ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e005      	b.n	800c9de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c9d2:	893b      	ldrh	r3, [r7, #8]
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	00010002 	.word	0x00010002

0800c9ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	4608      	mov	r0, r1
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	817b      	strh	r3, [r7, #10]
 800c9fe:	460b      	mov	r3, r1
 800ca00:	813b      	strh	r3, [r7, #8]
 800ca02:	4613      	mov	r3, r2
 800ca04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ca14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ca26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f000 f8c2 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00d      	beq.n	800ca5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca4c:	d103      	bne.n	800ca56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ca56:	2303      	movs	r3, #3
 800ca58:	e0aa      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ca5a:	897b      	ldrh	r3, [r7, #10]
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	461a      	mov	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ca68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	6a3a      	ldr	r2, [r7, #32]
 800ca6e:	4952      	ldr	r1, [pc, #328]	@ (800cbb8 <I2C_RequestMemoryRead+0x1cc>)
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 f91d 	bl	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e097      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca80:	2300      	movs	r3, #0
 800ca82:	617b      	str	r3, [r7, #20]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	617b      	str	r3, [r7, #20]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca98:	6a39      	ldr	r1, [r7, #32]
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 f9a8 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00d      	beq.n	800cac2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d107      	bne.n	800cabe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cabc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e076      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cac2:	88fb      	ldrh	r3, [r7, #6]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d105      	bne.n	800cad4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cac8:	893b      	ldrh	r3, [r7, #8]
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	611a      	str	r2, [r3, #16]
 800cad2:	e021      	b.n	800cb18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cad4:	893b      	ldrh	r3, [r7, #8]
 800cad6:	0a1b      	lsrs	r3, r3, #8
 800cad8:	b29b      	uxth	r3, r3
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cae4:	6a39      	ldr	r1, [r7, #32]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 f982 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00d      	beq.n	800cb0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d107      	bne.n	800cb0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e050      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cb0e:	893b      	ldrh	r3, [r7, #8]
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb1a:	6a39      	ldr	r1, [r7, #32]
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f000 f967 	bl	800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00d      	beq.n	800cb44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d107      	bne.n	800cb40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	e035      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 f82b 	bl	800cbbc <I2C_WaitOnFlagUntilTimeout>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00d      	beq.n	800cb88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb7a:	d103      	bne.n	800cb84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e013      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cb88:	897b      	ldrh	r3, [r7, #10]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f043 0301 	orr.w	r3, r3, #1
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	6a3a      	ldr	r2, [r7, #32]
 800cb9c:	4906      	ldr	r1, [pc, #24]	@ (800cbb8 <I2C_RequestMemoryRead+0x1cc>)
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f886 	bl	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e000      	b.n	800cbb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3718      	adds	r7, #24
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	00010002 	.word	0x00010002

0800cbbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	603b      	str	r3, [r7, #0]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cbcc:	e048      	b.n	800cc60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbd4:	d044      	beq.n	800cc60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbd6:	f7fe f9e3 	bl	800afa0 <HAL_GetTick>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d302      	bcc.n	800cbec <I2C_WaitOnFlagUntilTimeout+0x30>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d139      	bne.n	800cc60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	0c1b      	lsrs	r3, r3, #16
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d10d      	bne.n	800cc12 <I2C_WaitOnFlagUntilTimeout+0x56>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	43da      	mvns	r2, r3
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	4013      	ands	r3, r2
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	bf0c      	ite	eq
 800cc08:	2301      	moveq	r3, #1
 800cc0a:	2300      	movne	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	461a      	mov	r2, r3
 800cc10:	e00c      	b.n	800cc2c <I2C_WaitOnFlagUntilTimeout+0x70>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	43da      	mvns	r2, r3
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bf0c      	ite	eq
 800cc24:	2301      	moveq	r3, #1
 800cc26:	2300      	movne	r3, #0
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d116      	bne.n	800cc60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2220      	movs	r2, #32
 800cc3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc4c:	f043 0220 	orr.w	r2, r3, #32
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e023      	b.n	800cca8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	0c1b      	lsrs	r3, r3, #16
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d10d      	bne.n	800cc86 <I2C_WaitOnFlagUntilTimeout+0xca>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	695b      	ldr	r3, [r3, #20]
 800cc70:	43da      	mvns	r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	4013      	ands	r3, r2
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	bf0c      	ite	eq
 800cc7c:	2301      	moveq	r3, #1
 800cc7e:	2300      	movne	r3, #0
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	461a      	mov	r2, r3
 800cc84:	e00c      	b.n	800cca0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	43da      	mvns	r2, r3
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	4013      	ands	r3, r2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bf0c      	ite	eq
 800cc98:	2301      	moveq	r3, #1
 800cc9a:	2300      	movne	r3, #0
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	461a      	mov	r2, r3
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d093      	beq.n	800cbce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ccbe:	e071      	b.n	800cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccce:	d123      	bne.n	800cd18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ccde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2220      	movs	r2, #32
 800ccf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd04:	f043 0204 	orr.w	r2, r3, #4
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e067      	b.n	800cde8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd1e:	d041      	beq.n	800cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd20:	f7fe f93e 	bl	800afa0 <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d302      	bcc.n	800cd36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d136      	bne.n	800cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	0c1b      	lsrs	r3, r3, #16
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d10c      	bne.n	800cd5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	43da      	mvns	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	bf14      	ite	ne
 800cd52:	2301      	movne	r3, #1
 800cd54:	2300      	moveq	r3, #0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	e00b      	b.n	800cd72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	699b      	ldr	r3, [r3, #24]
 800cd60:	43da      	mvns	r2, r3
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	4013      	ands	r3, r2
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bf14      	ite	ne
 800cd6c:	2301      	movne	r3, #1
 800cd6e:	2300      	moveq	r3, #0
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d016      	beq.n	800cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2220      	movs	r2, #32
 800cd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd90:	f043 0220 	orr.w	r2, r3, #32
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e021      	b.n	800cde8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	0c1b      	lsrs	r3, r3, #16
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d10c      	bne.n	800cdc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	43da      	mvns	r2, r3
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	4013      	ands	r3, r2
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	bf14      	ite	ne
 800cdc0:	2301      	movne	r3, #1
 800cdc2:	2300      	moveq	r3, #0
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	e00b      	b.n	800cde0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	43da      	mvns	r2, r3
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	bf14      	ite	ne
 800cdda:	2301      	movne	r3, #1
 800cddc:	2300      	moveq	r3, #0
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f47f af6d 	bne.w	800ccc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cdfc:	e034      	b.n	800ce68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f000 f8e3 	bl	800cfca <I2C_IsAcknowledgeFailed>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e034      	b.n	800ce78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce14:	d028      	beq.n	800ce68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce16:	f7fe f8c3 	bl	800afa0 <HAL_GetTick>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d302      	bcc.n	800ce2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d11d      	bne.n	800ce68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce36:	2b80      	cmp	r3, #128	@ 0x80
 800ce38:	d016      	beq.n	800ce68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2220      	movs	r2, #32
 800ce44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce54:	f043 0220 	orr.w	r2, r3, #32
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e007      	b.n	800ce78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce72:	2b80      	cmp	r3, #128	@ 0x80
 800ce74:	d1c3      	bne.n	800cdfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ce8c:	e034      	b.n	800cef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f89b 	bl	800cfca <I2C_IsAcknowledgeFailed>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e034      	b.n	800cf08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cea4:	d028      	beq.n	800cef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cea6:	f7fe f87b 	bl	800afa0 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d302      	bcc.n	800cebc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11d      	bne.n	800cef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	f003 0304 	and.w	r3, r3, #4
 800cec6:	2b04      	cmp	r3, #4
 800cec8:	d016      	beq.n	800cef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2220      	movs	r2, #32
 800ced4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee4:	f043 0220 	orr.w	r2, r3, #32
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e007      	b.n	800cf08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	f003 0304 	and.w	r3, r3, #4
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	d1c3      	bne.n	800ce8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cf1c:	e049      	b.n	800cfb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b10      	cmp	r3, #16
 800cf2a:	d119      	bne.n	800cf60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f06f 0210 	mvn.w	r2, #16
 800cf34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2220      	movs	r2, #32
 800cf40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e030      	b.n	800cfc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf60:	f7fe f81e 	bl	800afa0 <HAL_GetTick>
 800cf64:	4602      	mov	r2, r0
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d302      	bcc.n	800cf76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d11d      	bne.n	800cfb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf80:	2b40      	cmp	r3, #64	@ 0x40
 800cf82:	d016      	beq.n	800cfb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf9e:	f043 0220 	orr.w	r2, r3, #32
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e007      	b.n	800cfc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfbc:	2b40      	cmp	r3, #64	@ 0x40
 800cfbe:	d1ae      	bne.n	800cf1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cfca:	b480      	push	{r7}
 800cfcc:	b083      	sub	sp, #12
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfe0:	d11b      	bne.n	800d01a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cfea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2220      	movs	r2, #32
 800cff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d006:	f043 0204 	orr.w	r2, r3, #4
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	bc80      	pop	{r7}
 800d024:	4770      	bx	lr
	...

0800d028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d036:	2301      	movs	r3, #1
 800d038:	e272      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 8087 	beq.w	800d156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d048:	4b92      	ldr	r3, [pc, #584]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	f003 030c 	and.w	r3, r3, #12
 800d050:	2b04      	cmp	r3, #4
 800d052:	d00c      	beq.n	800d06e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d054:	4b8f      	ldr	r3, [pc, #572]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	f003 030c 	and.w	r3, r3, #12
 800d05c:	2b08      	cmp	r3, #8
 800d05e:	d112      	bne.n	800d086 <HAL_RCC_OscConfig+0x5e>
 800d060:	4b8c      	ldr	r3, [pc, #560]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d06c:	d10b      	bne.n	800d086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d06e:	4b89      	ldr	r3, [pc, #548]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d06c      	beq.n	800d154 <HAL_RCC_OscConfig+0x12c>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d168      	bne.n	800d154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e24c      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d08e:	d106      	bne.n	800d09e <HAL_RCC_OscConfig+0x76>
 800d090:	4b80      	ldr	r3, [pc, #512]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a7f      	ldr	r2, [pc, #508]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d09a:	6013      	str	r3, [r2, #0]
 800d09c:	e02e      	b.n	800d0fc <HAL_RCC_OscConfig+0xd4>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10c      	bne.n	800d0c0 <HAL_RCC_OscConfig+0x98>
 800d0a6:	4b7b      	ldr	r3, [pc, #492]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a7a      	ldr	r2, [pc, #488]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	4b78      	ldr	r3, [pc, #480]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a77      	ldr	r2, [pc, #476]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	e01d      	b.n	800d0fc <HAL_RCC_OscConfig+0xd4>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0c8:	d10c      	bne.n	800d0e4 <HAL_RCC_OscConfig+0xbc>
 800d0ca:	4b72      	ldr	r3, [pc, #456]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a71      	ldr	r2, [pc, #452]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	4b6f      	ldr	r3, [pc, #444]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a6e      	ldr	r2, [pc, #440]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0e0:	6013      	str	r3, [r2, #0]
 800d0e2:	e00b      	b.n	800d0fc <HAL_RCC_OscConfig+0xd4>
 800d0e4:	4b6b      	ldr	r3, [pc, #428]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a6a      	ldr	r2, [pc, #424]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0ee:	6013      	str	r3, [r2, #0]
 800d0f0:	4b68      	ldr	r3, [pc, #416]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a67      	ldr	r2, [pc, #412]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d0f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d0fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d013      	beq.n	800d12c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d104:	f7fd ff4c 	bl	800afa0 <HAL_GetTick>
 800d108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d10a:	e008      	b.n	800d11e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d10c:	f7fd ff48 	bl	800afa0 <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	2b64      	cmp	r3, #100	@ 0x64
 800d118:	d901      	bls.n	800d11e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e200      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d11e:	4b5d      	ldr	r3, [pc, #372]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0f0      	beq.n	800d10c <HAL_RCC_OscConfig+0xe4>
 800d12a:	e014      	b.n	800d156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d12c:	f7fd ff38 	bl	800afa0 <HAL_GetTick>
 800d130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d132:	e008      	b.n	800d146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d134:	f7fd ff34 	bl	800afa0 <HAL_GetTick>
 800d138:	4602      	mov	r2, r0
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	2b64      	cmp	r3, #100	@ 0x64
 800d140:	d901      	bls.n	800d146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e1ec      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d146:	4b53      	ldr	r3, [pc, #332]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1f0      	bne.n	800d134 <HAL_RCC_OscConfig+0x10c>
 800d152:	e000      	b.n	800d156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d063      	beq.n	800d22a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d162:	4b4c      	ldr	r3, [pc, #304]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f003 030c 	and.w	r3, r3, #12
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800d16e:	4b49      	ldr	r3, [pc, #292]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	f003 030c 	and.w	r3, r3, #12
 800d176:	2b08      	cmp	r3, #8
 800d178:	d11c      	bne.n	800d1b4 <HAL_RCC_OscConfig+0x18c>
 800d17a:	4b46      	ldr	r3, [pc, #280]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d116      	bne.n	800d1b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d186:	4b43      	ldr	r3, [pc, #268]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f003 0302 	and.w	r3, r3, #2
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <HAL_RCC_OscConfig+0x176>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d001      	beq.n	800d19e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e1c0      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d19e:	4b3d      	ldr	r3, [pc, #244]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	695b      	ldr	r3, [r3, #20]
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	4939      	ldr	r1, [pc, #228]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d1b2:	e03a      	b.n	800d22a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d020      	beq.n	800d1fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d1bc:	4b36      	ldr	r3, [pc, #216]	@ (800d298 <HAL_RCC_OscConfig+0x270>)
 800d1be:	2201      	movs	r2, #1
 800d1c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d1c2:	f7fd feed 	bl	800afa0 <HAL_GetTick>
 800d1c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d1c8:	e008      	b.n	800d1dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1ca:	f7fd fee9 	bl	800afa0 <HAL_GetTick>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d901      	bls.n	800d1dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	e1a1      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d1dc:	4b2d      	ldr	r3, [pc, #180]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0302 	and.w	r3, r3, #2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d0f0      	beq.n	800d1ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	695b      	ldr	r3, [r3, #20]
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	4927      	ldr	r1, [pc, #156]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	600b      	str	r3, [r1, #0]
 800d1fc:	e015      	b.n	800d22a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d1fe:	4b26      	ldr	r3, [pc, #152]	@ (800d298 <HAL_RCC_OscConfig+0x270>)
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d204:	f7fd fecc 	bl	800afa0 <HAL_GetTick>
 800d208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d20a:	e008      	b.n	800d21e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d20c:	f7fd fec8 	bl	800afa0 <HAL_GetTick>
 800d210:	4602      	mov	r2, r0
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	1ad3      	subs	r3, r2, r3
 800d216:	2b02      	cmp	r3, #2
 800d218:	d901      	bls.n	800d21e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e180      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d21e:	4b1d      	ldr	r3, [pc, #116]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1f0      	bne.n	800d20c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 0308 	and.w	r3, r3, #8
 800d232:	2b00      	cmp	r3, #0
 800d234:	d03a      	beq.n	800d2ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d019      	beq.n	800d272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d23e:	4b17      	ldr	r3, [pc, #92]	@ (800d29c <HAL_RCC_OscConfig+0x274>)
 800d240:	2201      	movs	r2, #1
 800d242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d244:	f7fd feac 	bl	800afa0 <HAL_GetTick>
 800d248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d24a:	e008      	b.n	800d25e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d24c:	f7fd fea8 	bl	800afa0 <HAL_GetTick>
 800d250:	4602      	mov	r2, r0
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d901      	bls.n	800d25e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800d25a:	2303      	movs	r3, #3
 800d25c:	e160      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d25e:	4b0d      	ldr	r3, [pc, #52]	@ (800d294 <HAL_RCC_OscConfig+0x26c>)
 800d260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d262:	f003 0302 	and.w	r3, r3, #2
 800d266:	2b00      	cmp	r3, #0
 800d268:	d0f0      	beq.n	800d24c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800d26a:	2001      	movs	r0, #1
 800d26c:	f000 face 	bl	800d80c <RCC_Delay>
 800d270:	e01c      	b.n	800d2ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d272:	4b0a      	ldr	r3, [pc, #40]	@ (800d29c <HAL_RCC_OscConfig+0x274>)
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d278:	f7fd fe92 	bl	800afa0 <HAL_GetTick>
 800d27c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d27e:	e00f      	b.n	800d2a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d280:	f7fd fe8e 	bl	800afa0 <HAL_GetTick>
 800d284:	4602      	mov	r2, r0
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d908      	bls.n	800d2a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	e146      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
 800d292:	bf00      	nop
 800d294:	40021000 	.word	0x40021000
 800d298:	42420000 	.word	0x42420000
 800d29c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2a0:	4b92      	ldr	r3, [pc, #584]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a4:	f003 0302 	and.w	r3, r3, #2
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e9      	bne.n	800d280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f003 0304 	and.w	r3, r3, #4
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f000 80a6 	beq.w	800d406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d2be:	4b8b      	ldr	r3, [pc, #556]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10d      	bne.n	800d2e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2ca:	4b88      	ldr	r3, [pc, #544]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	4a87      	ldr	r2, [pc, #540]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d2d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2d4:	61d3      	str	r3, [r2, #28]
 800d2d6:	4b85      	ldr	r3, [pc, #532]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2de:	60bb      	str	r3, [r7, #8]
 800d2e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d2e6:	4b82      	ldr	r3, [pc, #520]	@ (800d4f0 <HAL_RCC_OscConfig+0x4c8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d118      	bne.n	800d324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d2f2:	4b7f      	ldr	r3, [pc, #508]	@ (800d4f0 <HAL_RCC_OscConfig+0x4c8>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a7e      	ldr	r2, [pc, #504]	@ (800d4f0 <HAL_RCC_OscConfig+0x4c8>)
 800d2f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d2fe:	f7fd fe4f 	bl	800afa0 <HAL_GetTick>
 800d302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d304:	e008      	b.n	800d318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d306:	f7fd fe4b 	bl	800afa0 <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b64      	cmp	r3, #100	@ 0x64
 800d312:	d901      	bls.n	800d318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	e103      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d318:	4b75      	ldr	r3, [pc, #468]	@ (800d4f0 <HAL_RCC_OscConfig+0x4c8>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d320:	2b00      	cmp	r3, #0
 800d322:	d0f0      	beq.n	800d306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d106      	bne.n	800d33a <HAL_RCC_OscConfig+0x312>
 800d32c:	4b6f      	ldr	r3, [pc, #444]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d32e:	6a1b      	ldr	r3, [r3, #32]
 800d330:	4a6e      	ldr	r2, [pc, #440]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d332:	f043 0301 	orr.w	r3, r3, #1
 800d336:	6213      	str	r3, [r2, #32]
 800d338:	e02d      	b.n	800d396 <HAL_RCC_OscConfig+0x36e>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10c      	bne.n	800d35c <HAL_RCC_OscConfig+0x334>
 800d342:	4b6a      	ldr	r3, [pc, #424]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	4a69      	ldr	r2, [pc, #420]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d348:	f023 0301 	bic.w	r3, r3, #1
 800d34c:	6213      	str	r3, [r2, #32]
 800d34e:	4b67      	ldr	r3, [pc, #412]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	4a66      	ldr	r2, [pc, #408]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d354:	f023 0304 	bic.w	r3, r3, #4
 800d358:	6213      	str	r3, [r2, #32]
 800d35a:	e01c      	b.n	800d396 <HAL_RCC_OscConfig+0x36e>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	2b05      	cmp	r3, #5
 800d362:	d10c      	bne.n	800d37e <HAL_RCC_OscConfig+0x356>
 800d364:	4b61      	ldr	r3, [pc, #388]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d366:	6a1b      	ldr	r3, [r3, #32]
 800d368:	4a60      	ldr	r2, [pc, #384]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d36a:	f043 0304 	orr.w	r3, r3, #4
 800d36e:	6213      	str	r3, [r2, #32]
 800d370:	4b5e      	ldr	r3, [pc, #376]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d372:	6a1b      	ldr	r3, [r3, #32]
 800d374:	4a5d      	ldr	r2, [pc, #372]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d376:	f043 0301 	orr.w	r3, r3, #1
 800d37a:	6213      	str	r3, [r2, #32]
 800d37c:	e00b      	b.n	800d396 <HAL_RCC_OscConfig+0x36e>
 800d37e:	4b5b      	ldr	r3, [pc, #364]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d380:	6a1b      	ldr	r3, [r3, #32]
 800d382:	4a5a      	ldr	r2, [pc, #360]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d384:	f023 0301 	bic.w	r3, r3, #1
 800d388:	6213      	str	r3, [r2, #32]
 800d38a:	4b58      	ldr	r3, [pc, #352]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d38c:	6a1b      	ldr	r3, [r3, #32]
 800d38e:	4a57      	ldr	r2, [pc, #348]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d390:	f023 0304 	bic.w	r3, r3, #4
 800d394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d015      	beq.n	800d3ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d39e:	f7fd fdff 	bl	800afa0 <HAL_GetTick>
 800d3a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3a4:	e00a      	b.n	800d3bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3a6:	f7fd fdfb 	bl	800afa0 <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d901      	bls.n	800d3bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e0b1      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3bc:	4b4b      	ldr	r3, [pc, #300]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d3be:	6a1b      	ldr	r3, [r3, #32]
 800d3c0:	f003 0302 	and.w	r3, r3, #2
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d0ee      	beq.n	800d3a6 <HAL_RCC_OscConfig+0x37e>
 800d3c8:	e014      	b.n	800d3f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d3ca:	f7fd fde9 	bl	800afa0 <HAL_GetTick>
 800d3ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d3d0:	e00a      	b.n	800d3e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3d2:	f7fd fde5 	bl	800afa0 <HAL_GetTick>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d901      	bls.n	800d3e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e09b      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d3e8:	4b40      	ldr	r3, [pc, #256]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d3ea:	6a1b      	ldr	r3, [r3, #32]
 800d3ec:	f003 0302 	and.w	r3, r3, #2
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1ee      	bne.n	800d3d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d3f4:	7dfb      	ldrb	r3, [r7, #23]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d105      	bne.n	800d406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3fa:	4b3c      	ldr	r3, [pc, #240]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	4a3b      	ldr	r2, [pc, #236]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f000 8087 	beq.w	800d51e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d410:	4b36      	ldr	r3, [pc, #216]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	f003 030c 	and.w	r3, r3, #12
 800d418:	2b08      	cmp	r3, #8
 800d41a:	d061      	beq.n	800d4e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	69db      	ldr	r3, [r3, #28]
 800d420:	2b02      	cmp	r3, #2
 800d422:	d146      	bne.n	800d4b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d424:	4b33      	ldr	r3, [pc, #204]	@ (800d4f4 <HAL_RCC_OscConfig+0x4cc>)
 800d426:	2200      	movs	r2, #0
 800d428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d42a:	f7fd fdb9 	bl	800afa0 <HAL_GetTick>
 800d42e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d430:	e008      	b.n	800d444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d432:	f7fd fdb5 	bl	800afa0 <HAL_GetTick>
 800d436:	4602      	mov	r2, r0
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d901      	bls.n	800d444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800d440:	2303      	movs	r3, #3
 800d442:	e06d      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d444:	4b29      	ldr	r3, [pc, #164]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1f0      	bne.n	800d432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d458:	d108      	bne.n	800d46c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800d45a:	4b24      	ldr	r3, [pc, #144]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	4921      	ldr	r1, [pc, #132]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d468:	4313      	orrs	r3, r2
 800d46a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d46c:	4b1f      	ldr	r3, [pc, #124]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a19      	ldr	r1, [r3, #32]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d47c:	430b      	orrs	r3, r1
 800d47e:	491b      	ldr	r1, [pc, #108]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d480:	4313      	orrs	r3, r2
 800d482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d484:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f4 <HAL_RCC_OscConfig+0x4cc>)
 800d486:	2201      	movs	r2, #1
 800d488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d48a:	f7fd fd89 	bl	800afa0 <HAL_GetTick>
 800d48e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d490:	e008      	b.n	800d4a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d492:	f7fd fd85 	bl	800afa0 <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d901      	bls.n	800d4a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	e03d      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d4a4:	4b11      	ldr	r3, [pc, #68]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0f0      	beq.n	800d492 <HAL_RCC_OscConfig+0x46a>
 800d4b0:	e035      	b.n	800d51e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4b2:	4b10      	ldr	r3, [pc, #64]	@ (800d4f4 <HAL_RCC_OscConfig+0x4cc>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4b8:	f7fd fd72 	bl	800afa0 <HAL_GetTick>
 800d4bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d4be:	e008      	b.n	800d4d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4c0:	f7fd fd6e 	bl	800afa0 <HAL_GetTick>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d901      	bls.n	800d4d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e026      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d4d2:	4b06      	ldr	r3, [pc, #24]	@ (800d4ec <HAL_RCC_OscConfig+0x4c4>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1f0      	bne.n	800d4c0 <HAL_RCC_OscConfig+0x498>
 800d4de:	e01e      	b.n	800d51e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	69db      	ldr	r3, [r3, #28]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d107      	bne.n	800d4f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e019      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
 800d4ec:	40021000 	.word	0x40021000
 800d4f0:	40007000 	.word	0x40007000
 800d4f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d4f8:	4b0b      	ldr	r3, [pc, #44]	@ (800d528 <HAL_RCC_OscConfig+0x500>)
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a1b      	ldr	r3, [r3, #32]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d106      	bne.n	800d51a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d516:	429a      	cmp	r2, r3
 800d518:	d001      	beq.n	800d51e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e000      	b.n	800d520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	40021000 	.word	0x40021000

0800d52c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	e0d0      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d540:	4b6a      	ldr	r3, [pc, #424]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0307 	and.w	r3, r3, #7
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d910      	bls.n	800d570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d54e:	4b67      	ldr	r3, [pc, #412]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f023 0207 	bic.w	r2, r3, #7
 800d556:	4965      	ldr	r1, [pc, #404]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d55e:	4b63      	ldr	r3, [pc, #396]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 0307 	and.w	r3, r3, #7
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d001      	beq.n	800d570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800d56c:	2301      	movs	r3, #1
 800d56e:	e0b8      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f003 0302 	and.w	r3, r3, #2
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d020      	beq.n	800d5be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 0304 	and.w	r3, r3, #4
 800d584:	2b00      	cmp	r3, #0
 800d586:	d005      	beq.n	800d594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d588:	4b59      	ldr	r3, [pc, #356]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	4a58      	ldr	r2, [pc, #352]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d58e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d5a0:	4b53      	ldr	r3, [pc, #332]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	4a52      	ldr	r2, [pc, #328]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800d5aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d5ac:	4b50      	ldr	r3, [pc, #320]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	494d      	ldr	r1, [pc, #308]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d040      	beq.n	800d64c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d107      	bne.n	800d5e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5d2:	4b47      	ldr	r3, [pc, #284]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d115      	bne.n	800d60a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e07f      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d107      	bne.n	800d5fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5ea:	4b41      	ldr	r3, [pc, #260]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d109      	bne.n	800d60a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e073      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d5fa:	4b3d      	ldr	r3, [pc, #244]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f003 0302 	and.w	r3, r3, #2
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e06b      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d60a:	4b39      	ldr	r3, [pc, #228]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	f023 0203 	bic.w	r2, r3, #3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	4936      	ldr	r1, [pc, #216]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d618:	4313      	orrs	r3, r2
 800d61a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d61c:	f7fd fcc0 	bl	800afa0 <HAL_GetTick>
 800d620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d622:	e00a      	b.n	800d63a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d624:	f7fd fcbc 	bl	800afa0 <HAL_GetTick>
 800d628:	4602      	mov	r2, r0
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d632:	4293      	cmp	r3, r2
 800d634:	d901      	bls.n	800d63a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d636:	2303      	movs	r3, #3
 800d638:	e053      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d63a:	4b2d      	ldr	r3, [pc, #180]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	f003 020c 	and.w	r2, r3, #12
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	429a      	cmp	r2, r3
 800d64a:	d1eb      	bne.n	800d624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d64c:	4b27      	ldr	r3, [pc, #156]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0307 	and.w	r3, r3, #7
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d210      	bcs.n	800d67c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d65a:	4b24      	ldr	r3, [pc, #144]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f023 0207 	bic.w	r2, r3, #7
 800d662:	4922      	ldr	r1, [pc, #136]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	4313      	orrs	r3, r2
 800d668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d66a:	4b20      	ldr	r3, [pc, #128]	@ (800d6ec <HAL_RCC_ClockConfig+0x1c0>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0307 	and.w	r3, r3, #7
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	429a      	cmp	r2, r3
 800d676:	d001      	beq.n	800d67c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	e032      	b.n	800d6e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f003 0304 	and.w	r3, r3, #4
 800d684:	2b00      	cmp	r3, #0
 800d686:	d008      	beq.n	800d69a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d688:	4b19      	ldr	r3, [pc, #100]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	4916      	ldr	r1, [pc, #88]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d696:	4313      	orrs	r3, r2
 800d698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f003 0308 	and.w	r3, r3, #8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d009      	beq.n	800d6ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d6a6:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	490e      	ldr	r1, [pc, #56]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d6ba:	f000 f821 	bl	800d700 <HAL_RCC_GetSysClockFreq>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d6f0 <HAL_RCC_ClockConfig+0x1c4>)
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	091b      	lsrs	r3, r3, #4
 800d6c6:	f003 030f 	and.w	r3, r3, #15
 800d6ca:	490a      	ldr	r1, [pc, #40]	@ (800d6f4 <HAL_RCC_ClockConfig+0x1c8>)
 800d6cc:	5ccb      	ldrb	r3, [r1, r3]
 800d6ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d2:	4a09      	ldr	r2, [pc, #36]	@ (800d6f8 <HAL_RCC_ClockConfig+0x1cc>)
 800d6d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d6d6:	4b09      	ldr	r3, [pc, #36]	@ (800d6fc <HAL_RCC_ClockConfig+0x1d0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd fc1e 	bl	800af1c <HAL_InitTick>

  return HAL_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	40022000 	.word	0x40022000
 800d6f0:	40021000 	.word	0x40021000
 800d6f4:	0800f928 	.word	0x0800f928
 800d6f8:	20000f74 	.word	0x20000f74
 800d6fc:	20000f78 	.word	0x20000f78

0800d700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d700:	b480      	push	{r7}
 800d702:	b087      	sub	sp, #28
 800d704:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d706:	2300      	movs	r3, #0
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	2300      	movs	r3, #0
 800d70c:	60bb      	str	r3, [r7, #8]
 800d70e:	2300      	movs	r3, #0
 800d710:	617b      	str	r3, [r7, #20]
 800d712:	2300      	movs	r3, #0
 800d714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800d716:	2300      	movs	r3, #0
 800d718:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800d71a:	4b1e      	ldr	r3, [pc, #120]	@ (800d794 <HAL_RCC_GetSysClockFreq+0x94>)
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f003 030c 	and.w	r3, r3, #12
 800d726:	2b04      	cmp	r3, #4
 800d728:	d002      	beq.n	800d730 <HAL_RCC_GetSysClockFreq+0x30>
 800d72a:	2b08      	cmp	r3, #8
 800d72c:	d003      	beq.n	800d736 <HAL_RCC_GetSysClockFreq+0x36>
 800d72e:	e027      	b.n	800d780 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d730:	4b19      	ldr	r3, [pc, #100]	@ (800d798 <HAL_RCC_GetSysClockFreq+0x98>)
 800d732:	613b      	str	r3, [r7, #16]
      break;
 800d734:	e027      	b.n	800d786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	0c9b      	lsrs	r3, r3, #18
 800d73a:	f003 030f 	and.w	r3, r3, #15
 800d73e:	4a17      	ldr	r2, [pc, #92]	@ (800d79c <HAL_RCC_GetSysClockFreq+0x9c>)
 800d740:	5cd3      	ldrb	r3, [r2, r3]
 800d742:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d010      	beq.n	800d770 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d74e:	4b11      	ldr	r3, [pc, #68]	@ (800d794 <HAL_RCC_GetSysClockFreq+0x94>)
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	0c5b      	lsrs	r3, r3, #17
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	4a11      	ldr	r2, [pc, #68]	@ (800d7a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800d75a:	5cd3      	ldrb	r3, [r2, r3]
 800d75c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a0d      	ldr	r2, [pc, #52]	@ (800d798 <HAL_RCC_GetSysClockFreq+0x98>)
 800d762:	fb03 f202 	mul.w	r2, r3, r2
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	fbb2 f3f3 	udiv	r3, r2, r3
 800d76c:	617b      	str	r3, [r7, #20]
 800d76e:	e004      	b.n	800d77a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a0c      	ldr	r2, [pc, #48]	@ (800d7a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d774:	fb02 f303 	mul.w	r3, r2, r3
 800d778:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	613b      	str	r3, [r7, #16]
      break;
 800d77e:	e002      	b.n	800d786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d780:	4b05      	ldr	r3, [pc, #20]	@ (800d798 <HAL_RCC_GetSysClockFreq+0x98>)
 800d782:	613b      	str	r3, [r7, #16]
      break;
 800d784:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d786:	693b      	ldr	r3, [r7, #16]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	371c      	adds	r7, #28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bc80      	pop	{r7}
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	40021000 	.word	0x40021000
 800d798:	007a1200 	.word	0x007a1200
 800d79c:	0800f940 	.word	0x0800f940
 800d7a0:	0800f950 	.word	0x0800f950
 800d7a4:	003d0900 	.word	0x003d0900

0800d7a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d7ac:	4b02      	ldr	r3, [pc, #8]	@ (800d7b8 <HAL_RCC_GetHCLKFreq+0x10>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bc80      	pop	{r7}
 800d7b6:	4770      	bx	lr
 800d7b8:	20000f74 	.word	0x20000f74

0800d7bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d7c0:	f7ff fff2 	bl	800d7a8 <HAL_RCC_GetHCLKFreq>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	0a1b      	lsrs	r3, r3, #8
 800d7cc:	f003 0307 	and.w	r3, r3, #7
 800d7d0:	4903      	ldr	r1, [pc, #12]	@ (800d7e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d7d2:	5ccb      	ldrb	r3, [r1, r3]
 800d7d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	40021000 	.word	0x40021000
 800d7e0:	0800f938 	.word	0x0800f938

0800d7e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d7e8:	f7ff ffde 	bl	800d7a8 <HAL_RCC_GetHCLKFreq>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	0adb      	lsrs	r3, r3, #11
 800d7f4:	f003 0307 	and.w	r3, r3, #7
 800d7f8:	4903      	ldr	r1, [pc, #12]	@ (800d808 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d7fa:	5ccb      	ldrb	r3, [r1, r3]
 800d7fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d800:	4618      	mov	r0, r3
 800d802:	bd80      	pop	{r7, pc}
 800d804:	40021000 	.word	0x40021000
 800d808:	0800f938 	.word	0x0800f938

0800d80c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800d814:	4b0a      	ldr	r3, [pc, #40]	@ (800d840 <RCC_Delay+0x34>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a0a      	ldr	r2, [pc, #40]	@ (800d844 <RCC_Delay+0x38>)
 800d81a:	fba2 2303 	umull	r2, r3, r2, r3
 800d81e:	0a5b      	lsrs	r3, r3, #9
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	fb02 f303 	mul.w	r3, r2, r3
 800d826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800d828:	bf00      	nop
  }
  while (Delay --);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	1e5a      	subs	r2, r3, #1
 800d82e:	60fa      	str	r2, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1f9      	bne.n	800d828 <RCC_Delay+0x1c>
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bc80      	pop	{r7}
 800d83e:	4770      	bx	lr
 800d840:	20000f74 	.word	0x20000f74
 800d844:	10624dd3 	.word	0x10624dd3

0800d848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e041      	b.n	800d8de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d106      	bne.n	800d874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7fd fa22 	bl	800acb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2202      	movs	r2, #2
 800d878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3304      	adds	r3, #4
 800d884:	4619      	mov	r1, r3
 800d886:	4610      	mov	r0, r2
 800d888:	f000 fa82 	bl	800dd90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
	...

0800d8e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d001      	beq.n	800d900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e044      	b.n	800d98a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2202      	movs	r2, #2
 800d904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f042 0201 	orr.w	r2, r2, #1
 800d916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a1d      	ldr	r2, [pc, #116]	@ (800d994 <HAL_TIM_Base_Start_IT+0xac>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d018      	beq.n	800d954 <HAL_TIM_Base_Start_IT+0x6c>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a1c      	ldr	r2, [pc, #112]	@ (800d998 <HAL_TIM_Base_Start_IT+0xb0>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d013      	beq.n	800d954 <HAL_TIM_Base_Start_IT+0x6c>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d934:	d00e      	beq.n	800d954 <HAL_TIM_Base_Start_IT+0x6c>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a18      	ldr	r2, [pc, #96]	@ (800d99c <HAL_TIM_Base_Start_IT+0xb4>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d009      	beq.n	800d954 <HAL_TIM_Base_Start_IT+0x6c>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a16      	ldr	r2, [pc, #88]	@ (800d9a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d004      	beq.n	800d954 <HAL_TIM_Base_Start_IT+0x6c>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a15      	ldr	r2, [pc, #84]	@ (800d9a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d111      	bne.n	800d978 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b06      	cmp	r3, #6
 800d964:	d010      	beq.n	800d988 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f042 0201 	orr.w	r2, r2, #1
 800d974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d976:	e007      	b.n	800d988 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f042 0201 	orr.w	r2, r2, #1
 800d986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	bc80      	pop	{r7}
 800d992:	4770      	bx	lr
 800d994:	40012c00 	.word	0x40012c00
 800d998:	40013400 	.word	0x40013400
 800d99c:	40000400 	.word	0x40000400
 800d9a0:	40000800 	.word	0x40000800
 800d9a4:	40000c00 	.word	0x40000c00

0800d9a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d122      	bne.n	800da04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f003 0302 	and.w	r3, r3, #2
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d11b      	bne.n	800da04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f06f 0202 	mvn.w	r2, #2
 800d9d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f9b4 	bl	800dd58 <HAL_TIM_IC_CaptureCallback>
 800d9f0:	e005      	b.n	800d9fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f9a7 	bl	800dd46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f9b6 	bl	800dd6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	f003 0304 	and.w	r3, r3, #4
 800da0e:	2b04      	cmp	r3, #4
 800da10:	d122      	bne.n	800da58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f003 0304 	and.w	r3, r3, #4
 800da1c:	2b04      	cmp	r3, #4
 800da1e:	d11b      	bne.n	800da58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f06f 0204 	mvn.w	r2, #4
 800da28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2202      	movs	r2, #2
 800da2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f98a 	bl	800dd58 <HAL_TIM_IC_CaptureCallback>
 800da44:	e005      	b.n	800da52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f97d 	bl	800dd46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f98c 	bl	800dd6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	f003 0308 	and.w	r3, r3, #8
 800da62:	2b08      	cmp	r3, #8
 800da64:	d122      	bne.n	800daac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0308 	and.w	r3, r3, #8
 800da70:	2b08      	cmp	r3, #8
 800da72:	d11b      	bne.n	800daac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f06f 0208 	mvn.w	r2, #8
 800da7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2204      	movs	r2, #4
 800da82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f960 	bl	800dd58 <HAL_TIM_IC_CaptureCallback>
 800da98:	e005      	b.n	800daa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f953 	bl	800dd46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f962 	bl	800dd6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	f003 0310 	and.w	r3, r3, #16
 800dab6:	2b10      	cmp	r3, #16
 800dab8:	d122      	bne.n	800db00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	f003 0310 	and.w	r3, r3, #16
 800dac4:	2b10      	cmp	r3, #16
 800dac6:	d11b      	bne.n	800db00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f06f 0210 	mvn.w	r2, #16
 800dad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2208      	movs	r2, #8
 800dad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	69db      	ldr	r3, [r3, #28]
 800dade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 f936 	bl	800dd58 <HAL_TIM_IC_CaptureCallback>
 800daec:	e005      	b.n	800dafa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f929 	bl	800dd46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f938 	bl	800dd6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d10e      	bne.n	800db2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d107      	bne.n	800db2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f06f 0201 	mvn.w	r2, #1
 800db24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7fc fd5e 	bl	800a5e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db36:	2b80      	cmp	r3, #128	@ 0x80
 800db38:	d10e      	bne.n	800db58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db44:	2b80      	cmp	r3, #128	@ 0x80
 800db46:	d107      	bne.n	800db58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800db50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 faa1 	bl	800e09a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db62:	2b40      	cmp	r3, #64	@ 0x40
 800db64:	d10e      	bne.n	800db84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db70:	2b40      	cmp	r3, #64	@ 0x40
 800db72:	d107      	bne.n	800db84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800db7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f8fc 	bl	800dd7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	f003 0320 	and.w	r3, r3, #32
 800db8e:	2b20      	cmp	r3, #32
 800db90:	d10e      	bne.n	800dbb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	f003 0320 	and.w	r3, r3, #32
 800db9c:	2b20      	cmp	r3, #32
 800db9e:	d107      	bne.n	800dbb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f06f 0220 	mvn.w	r2, #32
 800dba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fa6c 	bl	800e088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d101      	bne.n	800dbd4 <HAL_TIM_ConfigClockSource+0x1c>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e0b4      	b.n	800dd3e <HAL_TIM_ConfigClockSource+0x186>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2202      	movs	r2, #2
 800dbe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800dbf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dbfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc0c:	d03e      	beq.n	800dc8c <HAL_TIM_ConfigClockSource+0xd4>
 800dc0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc12:	f200 8087 	bhi.w	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc1a:	f000 8086 	beq.w	800dd2a <HAL_TIM_ConfigClockSource+0x172>
 800dc1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc22:	d87f      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc24:	2b70      	cmp	r3, #112	@ 0x70
 800dc26:	d01a      	beq.n	800dc5e <HAL_TIM_ConfigClockSource+0xa6>
 800dc28:	2b70      	cmp	r3, #112	@ 0x70
 800dc2a:	d87b      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc2c:	2b60      	cmp	r3, #96	@ 0x60
 800dc2e:	d050      	beq.n	800dcd2 <HAL_TIM_ConfigClockSource+0x11a>
 800dc30:	2b60      	cmp	r3, #96	@ 0x60
 800dc32:	d877      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc34:	2b50      	cmp	r3, #80	@ 0x50
 800dc36:	d03c      	beq.n	800dcb2 <HAL_TIM_ConfigClockSource+0xfa>
 800dc38:	2b50      	cmp	r3, #80	@ 0x50
 800dc3a:	d873      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc3c:	2b40      	cmp	r3, #64	@ 0x40
 800dc3e:	d058      	beq.n	800dcf2 <HAL_TIM_ConfigClockSource+0x13a>
 800dc40:	2b40      	cmp	r3, #64	@ 0x40
 800dc42:	d86f      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc44:	2b30      	cmp	r3, #48	@ 0x30
 800dc46:	d064      	beq.n	800dd12 <HAL_TIM_ConfigClockSource+0x15a>
 800dc48:	2b30      	cmp	r3, #48	@ 0x30
 800dc4a:	d86b      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	d060      	beq.n	800dd12 <HAL_TIM_ConfigClockSource+0x15a>
 800dc50:	2b20      	cmp	r3, #32
 800dc52:	d867      	bhi.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d05c      	beq.n	800dd12 <HAL_TIM_ConfigClockSource+0x15a>
 800dc58:	2b10      	cmp	r3, #16
 800dc5a:	d05a      	beq.n	800dd12 <HAL_TIM_ConfigClockSource+0x15a>
 800dc5c:	e062      	b.n	800dd24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dc6e:	f000 f980 	bl	800df72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dc80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	609a      	str	r2, [r3, #8]
      break;
 800dc8a:	e04f      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dc9c:	f000 f969 	bl	800df72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	689a      	ldr	r2, [r3, #8]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dcae:	609a      	str	r2, [r3, #8]
      break;
 800dcb0:	e03c      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	f000 f8e0 	bl	800de84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2150      	movs	r1, #80	@ 0x50
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 f937 	bl	800df3e <TIM_ITRx_SetConfig>
      break;
 800dcd0:	e02c      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcde:	461a      	mov	r2, r3
 800dce0:	f000 f8fe 	bl	800dee0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2160      	movs	r1, #96	@ 0x60
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 f927 	bl	800df3e <TIM_ITRx_SetConfig>
      break;
 800dcf0:	e01c      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f000 f8c0 	bl	800de84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2140      	movs	r1, #64	@ 0x40
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 f917 	bl	800df3e <TIM_ITRx_SetConfig>
      break;
 800dd10:	e00c      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f000 f90e 	bl	800df3e <TIM_ITRx_SetConfig>
      break;
 800dd22:	e003      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	73fb      	strb	r3, [r7, #15]
      break;
 800dd28:	e000      	b.n	800dd2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dd2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b083      	sub	sp, #12
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd4e:	bf00      	nop
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bc80      	pop	{r7}
 800dd56:	4770      	bx	lr

0800dd58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bc80      	pop	{r7}
 800dd68:	4770      	bx	lr

0800dd6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b083      	sub	sp, #12
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd72:	bf00      	nop
 800dd74:	370c      	adds	r7, #12
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bc80      	pop	{r7}
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bc80      	pop	{r7}
 800dd8c:	4770      	bx	lr
	...

0800dd90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a33      	ldr	r2, [pc, #204]	@ (800de70 <TIM_Base_SetConfig+0xe0>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d013      	beq.n	800ddd0 <TIM_Base_SetConfig+0x40>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a32      	ldr	r2, [pc, #200]	@ (800de74 <TIM_Base_SetConfig+0xe4>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d00f      	beq.n	800ddd0 <TIM_Base_SetConfig+0x40>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddb6:	d00b      	beq.n	800ddd0 <TIM_Base_SetConfig+0x40>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4a2f      	ldr	r2, [pc, #188]	@ (800de78 <TIM_Base_SetConfig+0xe8>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d007      	beq.n	800ddd0 <TIM_Base_SetConfig+0x40>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a2e      	ldr	r2, [pc, #184]	@ (800de7c <TIM_Base_SetConfig+0xec>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d003      	beq.n	800ddd0 <TIM_Base_SetConfig+0x40>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4a2d      	ldr	r2, [pc, #180]	@ (800de80 <TIM_Base_SetConfig+0xf0>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d108      	bne.n	800dde2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4a22      	ldr	r2, [pc, #136]	@ (800de70 <TIM_Base_SetConfig+0xe0>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d013      	beq.n	800de12 <TIM_Base_SetConfig+0x82>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4a21      	ldr	r2, [pc, #132]	@ (800de74 <TIM_Base_SetConfig+0xe4>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d00f      	beq.n	800de12 <TIM_Base_SetConfig+0x82>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddf8:	d00b      	beq.n	800de12 <TIM_Base_SetConfig+0x82>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a1e      	ldr	r2, [pc, #120]	@ (800de78 <TIM_Base_SetConfig+0xe8>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d007      	beq.n	800de12 <TIM_Base_SetConfig+0x82>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a1d      	ldr	r2, [pc, #116]	@ (800de7c <TIM_Base_SetConfig+0xec>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d003      	beq.n	800de12 <TIM_Base_SetConfig+0x82>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a1c      	ldr	r2, [pc, #112]	@ (800de80 <TIM_Base_SetConfig+0xf0>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d108      	bne.n	800de24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	4313      	orrs	r3, r2
 800de22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	695b      	ldr	r3, [r3, #20]
 800de2e:	4313      	orrs	r3, r2
 800de30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	689a      	ldr	r2, [r3, #8]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a09      	ldr	r2, [pc, #36]	@ (800de70 <TIM_Base_SetConfig+0xe0>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d003      	beq.n	800de58 <TIM_Base_SetConfig+0xc8>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a08      	ldr	r2, [pc, #32]	@ (800de74 <TIM_Base_SetConfig+0xe4>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d103      	bne.n	800de60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	615a      	str	r2, [r3, #20]
}
 800de66:	bf00      	nop
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bc80      	pop	{r7}
 800de6e:	4770      	bx	lr
 800de70:	40012c00 	.word	0x40012c00
 800de74:	40013400 	.word	0x40013400
 800de78:	40000400 	.word	0x40000400
 800de7c:	40000800 	.word	0x40000800
 800de80:	40000c00 	.word	0x40000c00

0800de84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de84:	b480      	push	{r7}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6a1b      	ldr	r3, [r3, #32]
 800de94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	f023 0201 	bic.w	r2, r3, #1
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800deae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	011b      	lsls	r3, r3, #4
 800deb4:	693a      	ldr	r2, [r7, #16]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f023 030a 	bic.w	r3, r3, #10
 800dec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	621a      	str	r2, [r3, #32]
}
 800ded6:	bf00      	nop
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	bc80      	pop	{r7}
 800dede:	4770      	bx	lr

0800dee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b087      	sub	sp, #28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6a1b      	ldr	r3, [r3, #32]
 800def0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6a1b      	ldr	r3, [r3, #32]
 800def6:	f023 0210 	bic.w	r2, r3, #16
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800df0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	031b      	lsls	r3, r3, #12
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	4313      	orrs	r3, r2
 800df14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800df1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	011b      	lsls	r3, r3, #4
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	4313      	orrs	r3, r2
 800df26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	693a      	ldr	r2, [r7, #16]
 800df2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	697a      	ldr	r2, [r7, #20]
 800df32:	621a      	str	r2, [r3, #32]
}
 800df34:	bf00      	nop
 800df36:	371c      	adds	r7, #28
 800df38:	46bd      	mov	sp, r7
 800df3a:	bc80      	pop	{r7}
 800df3c:	4770      	bx	lr

0800df3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df3e:	b480      	push	{r7}
 800df40:	b085      	sub	sp, #20
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	f043 0307 	orr.w	r3, r3, #7
 800df60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	609a      	str	r2, [r3, #8]
}
 800df68:	bf00      	nop
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bc80      	pop	{r7}
 800df70:	4770      	bx	lr

0800df72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df72:	b480      	push	{r7}
 800df74:	b087      	sub	sp, #28
 800df76:	af00      	add	r7, sp, #0
 800df78:	60f8      	str	r0, [r7, #12]
 800df7a:	60b9      	str	r1, [r7, #8]
 800df7c:	607a      	str	r2, [r7, #4]
 800df7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	021a      	lsls	r2, r3, #8
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	431a      	orrs	r2, r3
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	4313      	orrs	r3, r2
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	4313      	orrs	r3, r2
 800df9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	609a      	str	r2, [r3, #8]
}
 800dfa6:	bf00      	nop
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bc80      	pop	{r7}
 800dfae:	4770      	bx	lr

0800dfb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d101      	bne.n	800dfc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	e050      	b.n	800e06a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	4313      	orrs	r3, r2
 800dff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a1b      	ldr	r2, [pc, #108]	@ (800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d018      	beq.n	800e03e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a19      	ldr	r2, [pc, #100]	@ (800e078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d013      	beq.n	800e03e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e01e:	d00e      	beq.n	800e03e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4a15      	ldr	r2, [pc, #84]	@ (800e07c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d009      	beq.n	800e03e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a14      	ldr	r2, [pc, #80]	@ (800e080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d004      	beq.n	800e03e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a12      	ldr	r2, [pc, #72]	@ (800e084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d10c      	bne.n	800e058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3714      	adds	r7, #20
 800e06e:	46bd      	mov	sp, r7
 800e070:	bc80      	pop	{r7}
 800e072:	4770      	bx	lr
 800e074:	40012c00 	.word	0x40012c00
 800e078:	40013400 	.word	0x40013400
 800e07c:	40000400 	.word	0x40000400
 800e080:	40000800 	.word	0x40000800
 800e084:	40000c00 	.word	0x40000c00

0800e088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	bc80      	pop	{r7}
 800e098:	4770      	bx	lr

0800e09a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e09a:	b480      	push	{r7}
 800e09c:	b083      	sub	sp, #12
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0a2:	bf00      	nop
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bc80      	pop	{r7}
 800e0aa:	4770      	bx	lr

0800e0ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e042      	b.n	800e144 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7fc fe16 	bl	800ad04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2224      	movs	r2, #36	@ 0x24
 800e0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68da      	ldr	r2, [r3, #12]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e0ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fcb5 	bl	800ea60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	691a      	ldr	r2, [r3, #16]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	695a      	ldr	r2, [r3, #20]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68da      	ldr	r2, [r3, #12]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2220      	movs	r2, #32
 800e130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2220      	movs	r2, #32
 800e138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	4613      	mov	r3, r2
 800e158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e160:	b2db      	uxtb	r3, r3
 800e162:	2b20      	cmp	r3, #32
 800e164:	d121      	bne.n	800e1aa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <HAL_UART_Transmit_IT+0x26>
 800e16c:	88fb      	ldrh	r3, [r7, #6]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d101      	bne.n	800e176 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e01a      	b.n	800e1ac <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	88fa      	ldrh	r2, [r7, #6]
 800e180:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	88fa      	ldrh	r2, [r7, #6]
 800e186:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2221      	movs	r2, #33	@ 0x21
 800e192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	68da      	ldr	r2, [r3, #12]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e1a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e000      	b.n	800e1ac <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800e1aa:	2302      	movs	r3, #2
  }
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bc80      	pop	{r7}
 800e1b4:	4770      	bx	lr
	...

0800e1b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b0ba      	sub	sp, #232	@ 0xe8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1ee:	f003 030f 	and.w	r3, r3, #15
 800e1f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e1f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10f      	bne.n	800e21e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e202:	f003 0320 	and.w	r3, r3, #32
 800e206:	2b00      	cmp	r3, #0
 800e208:	d009      	beq.n	800e21e <HAL_UART_IRQHandler+0x66>
 800e20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b00      	cmp	r3, #0
 800e214:	d003      	beq.n	800e21e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fb63 	bl	800e8e2 <UART_Receive_IT>
      return;
 800e21c:	e25b      	b.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e21e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 80de 	beq.w	800e3e4 <HAL_UART_IRQHandler+0x22c>
 800e228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e22c:	f003 0301 	and.w	r3, r3, #1
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e238:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 80d1 	beq.w	800e3e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e246:	f003 0301 	and.w	r3, r3, #1
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00b      	beq.n	800e266 <HAL_UART_IRQHandler+0xae>
 800e24e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e256:	2b00      	cmp	r3, #0
 800e258:	d005      	beq.n	800e266 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e25e:	f043 0201 	orr.w	r2, r3, #1
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e26a:	f003 0304 	and.w	r3, r3, #4
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00b      	beq.n	800e28a <HAL_UART_IRQHandler+0xd2>
 800e272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e276:	f003 0301 	and.w	r3, r3, #1
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d005      	beq.n	800e28a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e282:	f043 0202 	orr.w	r2, r3, #2
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00b      	beq.n	800e2ae <HAL_UART_IRQHandler+0xf6>
 800e296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e29a:	f003 0301 	and.w	r3, r3, #1
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d005      	beq.n	800e2ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2a6:	f043 0204 	orr.w	r2, r3, #4
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2b2:	f003 0308 	and.w	r3, r3, #8
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d011      	beq.n	800e2de <HAL_UART_IRQHandler+0x126>
 800e2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2be:	f003 0320 	and.w	r3, r3, #32
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d105      	bne.n	800e2d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e2c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e2ca:	f003 0301 	and.w	r3, r3, #1
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d005      	beq.n	800e2de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2d6:	f043 0208 	orr.w	r2, r3, #8
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 81f2 	beq.w	800e6cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2ec:	f003 0320 	and.w	r3, r3, #32
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d008      	beq.n	800e306 <HAL_UART_IRQHandler+0x14e>
 800e2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2f8:	f003 0320 	and.w	r3, r3, #32
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d002      	beq.n	800e306 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 faee 	bl	800e8e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	695b      	ldr	r3, [r3, #20]
 800e30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e310:	2b00      	cmp	r3, #0
 800e312:	bf14      	ite	ne
 800e314:	2301      	movne	r3, #1
 800e316:	2300      	moveq	r3, #0
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e322:	f003 0308 	and.w	r3, r3, #8
 800e326:	2b00      	cmp	r3, #0
 800e328:	d103      	bne.n	800e332 <HAL_UART_IRQHandler+0x17a>
 800e32a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d04f      	beq.n	800e3d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f9f8 	bl	800e728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e342:	2b00      	cmp	r3, #0
 800e344:	d041      	beq.n	800e3ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	3314      	adds	r3, #20
 800e34c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e354:	e853 3f00 	ldrex	r3, [r3]
 800e358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e35c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3314      	adds	r3, #20
 800e36e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e372:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e37e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e38a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1d9      	bne.n	800e346 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d013      	beq.n	800e3c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e39e:	4a7e      	ldr	r2, [pc, #504]	@ (800e598 <HAL_UART_IRQHandler+0x3e0>)
 800e3a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd f86c 	bl	800b484 <HAL_DMA_Abort_IT>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d016      	beq.n	800e3e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e3bc:	4610      	mov	r0, r2
 800e3be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3c0:	e00e      	b.n	800e3e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f99c 	bl	800e700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3c8:	e00a      	b.n	800e3e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f998 	bl	800e700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d0:	e006      	b.n	800e3e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f994 	bl	800e700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e3de:	e175      	b.n	800e6cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3e0:	bf00      	nop
    return;
 800e3e2:	e173      	b.n	800e6cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	f040 814f 	bne.w	800e68c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3f2:	f003 0310 	and.w	r3, r3, #16
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f000 8148 	beq.w	800e68c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e400:	f003 0310 	and.w	r3, r3, #16
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 8141 	beq.w	800e68c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e40a:	2300      	movs	r3, #0
 800e40c:	60bb      	str	r3, [r7, #8]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	60bb      	str	r3, [r7, #8]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	60bb      	str	r3, [r7, #8]
 800e41e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	695b      	ldr	r3, [r3, #20]
 800e426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 80b6 	beq.w	800e59c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e43c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 8145 	beq.w	800e6d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e44a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e44e:	429a      	cmp	r2, r3
 800e450:	f080 813e 	bcs.w	800e6d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e45a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	2b20      	cmp	r3, #32
 800e464:	f000 8088 	beq.w	800e578 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	330c      	adds	r3, #12
 800e46e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e476:	e853 3f00 	ldrex	r3, [r3]
 800e47a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e47e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e482:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e486:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	330c      	adds	r3, #12
 800e490:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e494:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e498:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e4a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e4a4:	e841 2300 	strex	r3, r2, [r1]
 800e4a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e4ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1d9      	bne.n	800e468 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3314      	adds	r3, #20
 800e4ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4be:	e853 3f00 	ldrex	r3, [r3]
 800e4c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e4c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4c6:	f023 0301 	bic.w	r3, r3, #1
 800e4ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3314      	adds	r3, #20
 800e4d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e4d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e4dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e4e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e4e4:	e841 2300 	strex	r3, r2, [r1]
 800e4e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e4ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e1      	bne.n	800e4b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3314      	adds	r3, #20
 800e4f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4fa:	e853 3f00 	ldrex	r3, [r3]
 800e4fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3314      	adds	r3, #20
 800e510:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e514:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e516:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e518:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e51a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e51c:	e841 2300 	strex	r3, r2, [r1]
 800e520:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1e3      	bne.n	800e4f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2220      	movs	r2, #32
 800e52c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	330c      	adds	r3, #12
 800e53c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e540:	e853 3f00 	ldrex	r3, [r3]
 800e544:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e548:	f023 0310 	bic.w	r3, r3, #16
 800e54c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	330c      	adds	r3, #12
 800e556:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e55a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e55c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e3      	bne.n	800e536 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e572:	4618      	mov	r0, r3
 800e574:	f7fc ff4b 	bl	800b40e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2202      	movs	r2, #2
 800e57c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e586:	b29b      	uxth	r3, r3
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	4619      	mov	r1, r3
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f8bf 	bl	800e712 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e594:	e09c      	b.n	800e6d0 <HAL_UART_IRQHandler+0x518>
 800e596:	bf00      	nop
 800e598:	0800e7ed 	.word	0x0800e7ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 808e 	beq.w	800e6d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e5b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f000 8089 	beq.w	800e6d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	330c      	adds	r3, #12
 800e5c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5cc:	e853 3f00 	ldrex	r3, [r3]
 800e5d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e5d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	330c      	adds	r3, #12
 800e5e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e5e6:	647a      	str	r2, [r7, #68]	@ 0x44
 800e5e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5ee:	e841 2300 	strex	r3, r2, [r1]
 800e5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1e3      	bne.n	800e5c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	3314      	adds	r3, #20
 800e600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e604:	e853 3f00 	ldrex	r3, [r3]
 800e608:	623b      	str	r3, [r7, #32]
   return(result);
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	f023 0301 	bic.w	r3, r3, #1
 800e610:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3314      	adds	r3, #20
 800e61a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e61e:	633a      	str	r2, [r7, #48]	@ 0x30
 800e620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e626:	e841 2300 	strex	r3, r2, [r1]
 800e62a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1e3      	bne.n	800e5fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2220      	movs	r2, #32
 800e636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	330c      	adds	r3, #12
 800e646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	e853 3f00 	ldrex	r3, [r3]
 800e64e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f023 0310 	bic.w	r3, r3, #16
 800e656:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	330c      	adds	r3, #12
 800e660:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e664:	61fa      	str	r2, [r7, #28]
 800e666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e668:	69b9      	ldr	r1, [r7, #24]
 800e66a:	69fa      	ldr	r2, [r7, #28]
 800e66c:	e841 2300 	strex	r3, r2, [r1]
 800e670:	617b      	str	r3, [r7, #20]
   return(result);
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1e3      	bne.n	800e640 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2202      	movs	r2, #2
 800e67c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e67e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e682:	4619      	mov	r1, r3
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 f844 	bl	800e712 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e68a:	e023      	b.n	800e6d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e694:	2b00      	cmp	r3, #0
 800e696:	d009      	beq.n	800e6ac <HAL_UART_IRQHandler+0x4f4>
 800e698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e69c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d003      	beq.n	800e6ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f8b5 	bl	800e814 <UART_Transmit_IT>
    return;
 800e6aa:	e014      	b.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00e      	beq.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
 800e6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d008      	beq.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 f8f4 	bl	800e8b2 <UART_EndTransmit_IT>
    return;
 800e6ca:	e004      	b.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
    return;
 800e6cc:	bf00      	nop
 800e6ce:	e002      	b.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800e6d0:	bf00      	nop
 800e6d2:	e000      	b.n	800e6d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800e6d4:	bf00      	nop
  }
}
 800e6d6:	37e8      	adds	r7, #232	@ 0xe8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e6e4:	bf00      	nop
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bc80      	pop	{r7}
 800e6ec:	4770      	bx	lr

0800e6ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	b083      	sub	sp, #12
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e6f6:	bf00      	nop
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bc80      	pop	{r7}
 800e6fe:	4770      	bx	lr

0800e700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e708:	bf00      	nop
 800e70a:	370c      	adds	r7, #12
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bc80      	pop	{r7}
 800e710:	4770      	bx	lr

0800e712 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e712:	b480      	push	{r7}
 800e714:	b083      	sub	sp, #12
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	460b      	mov	r3, r1
 800e71c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e71e:	bf00      	nop
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	bc80      	pop	{r7}
 800e726:	4770      	bx	lr

0800e728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e728:	b480      	push	{r7}
 800e72a:	b095      	sub	sp, #84	@ 0x54
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	330c      	adds	r3, #12
 800e736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e73a:	e853 3f00 	ldrex	r3, [r3]
 800e73e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	330c      	adds	r3, #12
 800e74e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e750:	643a      	str	r2, [r7, #64]	@ 0x40
 800e752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e758:	e841 2300 	strex	r3, r2, [r1]
 800e75c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1e5      	bne.n	800e730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3314      	adds	r3, #20
 800e76a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76c:	6a3b      	ldr	r3, [r7, #32]
 800e76e:	e853 3f00 	ldrex	r3, [r3]
 800e772:	61fb      	str	r3, [r7, #28]
   return(result);
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	f023 0301 	bic.w	r3, r3, #1
 800e77a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3314      	adds	r3, #20
 800e782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e78c:	e841 2300 	strex	r3, r2, [r1]
 800e790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1e5      	bne.n	800e764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d119      	bne.n	800e7d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	330c      	adds	r3, #12
 800e7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	e853 3f00 	ldrex	r3, [r3]
 800e7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	f023 0310 	bic.w	r3, r3, #16
 800e7b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	330c      	adds	r3, #12
 800e7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7c0:	61ba      	str	r2, [r7, #24]
 800e7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c4:	6979      	ldr	r1, [r7, #20]
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	e841 2300 	strex	r3, r2, [r1]
 800e7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1e5      	bne.n	800e7a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2220      	movs	r2, #32
 800e7d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e7e2:	bf00      	nop
 800e7e4:	3754      	adds	r7, #84	@ 0x54
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bc80      	pop	{r7}
 800e7ea:	4770      	bx	lr

0800e7ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff ff7a 	bl	800e700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e80c:	bf00      	nop
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e822:	b2db      	uxtb	r3, r3
 800e824:	2b21      	cmp	r3, #33	@ 0x21
 800e826:	d13e      	bne.n	800e8a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e830:	d114      	bne.n	800e85c <UART_Transmit_IT+0x48>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d110      	bne.n	800e85c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	461a      	mov	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e84e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a1b      	ldr	r3, [r3, #32]
 800e854:	1c9a      	adds	r2, r3, #2
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	621a      	str	r2, [r3, #32]
 800e85a:	e008      	b.n	800e86e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a1b      	ldr	r3, [r3, #32]
 800e860:	1c59      	adds	r1, r3, #1
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	6211      	str	r1, [r2, #32]
 800e866:	781a      	ldrb	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e872:	b29b      	uxth	r3, r3
 800e874:	3b01      	subs	r3, #1
 800e876:	b29b      	uxth	r3, r3
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	4619      	mov	r1, r3
 800e87c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10f      	bne.n	800e8a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e890:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68da      	ldr	r2, [r3, #12]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e8a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	e000      	b.n	800e8a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e8a6:	2302      	movs	r3, #2
  }
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3714      	adds	r7, #20
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bc80      	pop	{r7}
 800e8b0:	4770      	bx	lr

0800e8b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68da      	ldr	r2, [r3, #12]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2220      	movs	r2, #32
 800e8ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff ff02 	bl	800e6dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b08c      	sub	sp, #48	@ 0x30
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b22      	cmp	r3, #34	@ 0x22
 800e8f4:	f040 80ae 	bne.w	800ea54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e900:	d117      	bne.n	800e932 <UART_Receive_IT+0x50>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d113      	bne.n	800e932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e90a:	2300      	movs	r3, #0
 800e90c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e912:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e920:	b29a      	uxth	r2, r3
 800e922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e92a:	1c9a      	adds	r2, r3, #2
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	629a      	str	r2, [r3, #40]	@ 0x28
 800e930:	e026      	b.n	800e980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e938:	2300      	movs	r3, #0
 800e93a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e944:	d007      	beq.n	800e956 <UART_Receive_IT+0x74>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10a      	bne.n	800e964 <UART_Receive_IT+0x82>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d106      	bne.n	800e964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	e008      	b.n	800e976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e970:	b2da      	uxtb	r2, r3
 800e972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e984:	b29b      	uxth	r3, r3
 800e986:	3b01      	subs	r3, #1
 800e988:	b29b      	uxth	r3, r3
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	4619      	mov	r1, r3
 800e98e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e990:	2b00      	cmp	r3, #0
 800e992:	d15d      	bne.n	800ea50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68da      	ldr	r2, [r3, #12]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f022 0220 	bic.w	r2, r2, #32
 800e9a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	68da      	ldr	r2, [r3, #12]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e9b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	695a      	ldr	r2, [r3, #20]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f022 0201 	bic.w	r2, r2, #1
 800e9c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2220      	movs	r2, #32
 800e9c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d135      	bne.n	800ea46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	330c      	adds	r3, #12
 800e9e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	f023 0310 	bic.w	r3, r3, #16
 800e9f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	330c      	adds	r3, #12
 800e9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea00:	623a      	str	r2, [r7, #32]
 800ea02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea04:	69f9      	ldr	r1, [r7, #28]
 800ea06:	6a3a      	ldr	r2, [r7, #32]
 800ea08:	e841 2300 	strex	r3, r2, [r1]
 800ea0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e5      	bne.n	800e9e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f003 0310 	and.w	r3, r3, #16
 800ea1e:	2b10      	cmp	r3, #16
 800ea20:	d10a      	bne.n	800ea38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ea22:	2300      	movs	r3, #0
 800ea24:	60fb      	str	r3, [r7, #12]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	60fb      	str	r3, [r7, #12]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7ff fe67 	bl	800e712 <HAL_UARTEx_RxEventCallback>
 800ea44:	e002      	b.n	800ea4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff fe51 	bl	800e6ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	e002      	b.n	800ea56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	e000      	b.n	800ea56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ea54:	2302      	movs	r3, #2
  }
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3730      	adds	r7, #48	@ 0x30
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
	...

0800ea60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	689a      	ldr	r2, [r3, #8]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	431a      	orrs	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	695b      	ldr	r3, [r3, #20]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ea9a:	f023 030c 	bic.w	r3, r3, #12
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	6812      	ldr	r2, [r2, #0]
 800eaa2:	68b9      	ldr	r1, [r7, #8]
 800eaa4:	430b      	orrs	r3, r1
 800eaa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	695b      	ldr	r3, [r3, #20]
 800eaae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	699a      	ldr	r2, [r3, #24]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	430a      	orrs	r2, r1
 800eabc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a2c      	ldr	r2, [pc, #176]	@ (800eb74 <UART_SetConfig+0x114>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d103      	bne.n	800ead0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800eac8:	f7fe fe8c 	bl	800d7e4 <HAL_RCC_GetPCLK2Freq>
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	e002      	b.n	800ead6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ead0:	f7fe fe74 	bl	800d7bc <HAL_RCC_GetPCLK1Freq>
 800ead4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	009a      	lsls	r2, r3, #2
 800eae0:	441a      	add	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaec:	4a22      	ldr	r2, [pc, #136]	@ (800eb78 <UART_SetConfig+0x118>)
 800eaee:	fba2 2303 	umull	r2, r3, r2, r3
 800eaf2:	095b      	lsrs	r3, r3, #5
 800eaf4:	0119      	lsls	r1, r3, #4
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4413      	add	r3, r2
 800eafe:	009a      	lsls	r2, r3, #2
 800eb00:	441a      	add	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	fbb2 f2f3 	udiv	r2, r2, r3
 800eb0c:	4b1a      	ldr	r3, [pc, #104]	@ (800eb78 <UART_SetConfig+0x118>)
 800eb0e:	fba3 0302 	umull	r0, r3, r3, r2
 800eb12:	095b      	lsrs	r3, r3, #5
 800eb14:	2064      	movs	r0, #100	@ 0x64
 800eb16:	fb00 f303 	mul.w	r3, r0, r3
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	011b      	lsls	r3, r3, #4
 800eb1e:	3332      	adds	r3, #50	@ 0x32
 800eb20:	4a15      	ldr	r2, [pc, #84]	@ (800eb78 <UART_SetConfig+0x118>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	095b      	lsrs	r3, r3, #5
 800eb28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eb2c:	4419      	add	r1, r3
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	4613      	mov	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4413      	add	r3, r2
 800eb36:	009a      	lsls	r2, r3, #2
 800eb38:	441a      	add	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	fbb2 f2f3 	udiv	r2, r2, r3
 800eb44:	4b0c      	ldr	r3, [pc, #48]	@ (800eb78 <UART_SetConfig+0x118>)
 800eb46:	fba3 0302 	umull	r0, r3, r3, r2
 800eb4a:	095b      	lsrs	r3, r3, #5
 800eb4c:	2064      	movs	r0, #100	@ 0x64
 800eb4e:	fb00 f303 	mul.w	r3, r0, r3
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	011b      	lsls	r3, r3, #4
 800eb56:	3332      	adds	r3, #50	@ 0x32
 800eb58:	4a07      	ldr	r2, [pc, #28]	@ (800eb78 <UART_SetConfig+0x118>)
 800eb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb5e:	095b      	lsrs	r3, r3, #5
 800eb60:	f003 020f 	and.w	r2, r3, #15
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	440a      	add	r2, r1
 800eb6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	40013800 	.word	0x40013800
 800eb78:	51eb851f 	.word	0x51eb851f

0800eb7c <__itoa>:
 800eb7c:	1e93      	subs	r3, r2, #2
 800eb7e:	2b22      	cmp	r3, #34	@ 0x22
 800eb80:	b510      	push	{r4, lr}
 800eb82:	460c      	mov	r4, r1
 800eb84:	d904      	bls.n	800eb90 <__itoa+0x14>
 800eb86:	2300      	movs	r3, #0
 800eb88:	461c      	mov	r4, r3
 800eb8a:	700b      	strb	r3, [r1, #0]
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	bd10      	pop	{r4, pc}
 800eb90:	2a0a      	cmp	r2, #10
 800eb92:	d109      	bne.n	800eba8 <__itoa+0x2c>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	da07      	bge.n	800eba8 <__itoa+0x2c>
 800eb98:	232d      	movs	r3, #45	@ 0x2d
 800eb9a:	700b      	strb	r3, [r1, #0]
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	4240      	negs	r0, r0
 800eba0:	4421      	add	r1, r4
 800eba2:	f000 f8db 	bl	800ed5c <__utoa>
 800eba6:	e7f1      	b.n	800eb8c <__itoa+0x10>
 800eba8:	2100      	movs	r1, #0
 800ebaa:	e7f9      	b.n	800eba0 <__itoa+0x24>

0800ebac <itoa>:
 800ebac:	f7ff bfe6 	b.w	800eb7c <__itoa>

0800ebb0 <malloc>:
 800ebb0:	4b02      	ldr	r3, [pc, #8]	@ (800ebbc <malloc+0xc>)
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	6818      	ldr	r0, [r3, #0]
 800ebb6:	f000 b825 	b.w	800ec04 <_malloc_r>
 800ebba:	bf00      	nop
 800ebbc:	20000f80 	.word	0x20000f80

0800ebc0 <sbrk_aligned>:
 800ebc0:	b570      	push	{r4, r5, r6, lr}
 800ebc2:	4e0f      	ldr	r6, [pc, #60]	@ (800ec00 <sbrk_aligned+0x40>)
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	6831      	ldr	r1, [r6, #0]
 800ebc8:	4605      	mov	r5, r0
 800ebca:	b911      	cbnz	r1, 800ebd2 <sbrk_aligned+0x12>
 800ebcc:	f000 f932 	bl	800ee34 <_sbrk_r>
 800ebd0:	6030      	str	r0, [r6, #0]
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	f000 f92d 	bl	800ee34 <_sbrk_r>
 800ebda:	1c43      	adds	r3, r0, #1
 800ebdc:	d103      	bne.n	800ebe6 <sbrk_aligned+0x26>
 800ebde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	1cc4      	adds	r4, r0, #3
 800ebe8:	f024 0403 	bic.w	r4, r4, #3
 800ebec:	42a0      	cmp	r0, r4
 800ebee:	d0f8      	beq.n	800ebe2 <sbrk_aligned+0x22>
 800ebf0:	1a21      	subs	r1, r4, r0
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f000 f91e 	bl	800ee34 <_sbrk_r>
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	d1f2      	bne.n	800ebe2 <sbrk_aligned+0x22>
 800ebfc:	e7ef      	b.n	800ebde <sbrk_aligned+0x1e>
 800ebfe:	bf00      	nop
 800ec00:	20001d3c 	.word	0x20001d3c

0800ec04 <_malloc_r>:
 800ec04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec08:	1ccd      	adds	r5, r1, #3
 800ec0a:	f025 0503 	bic.w	r5, r5, #3
 800ec0e:	3508      	adds	r5, #8
 800ec10:	2d0c      	cmp	r5, #12
 800ec12:	bf38      	it	cc
 800ec14:	250c      	movcc	r5, #12
 800ec16:	2d00      	cmp	r5, #0
 800ec18:	4606      	mov	r6, r0
 800ec1a:	db01      	blt.n	800ec20 <_malloc_r+0x1c>
 800ec1c:	42a9      	cmp	r1, r5
 800ec1e:	d904      	bls.n	800ec2a <_malloc_r+0x26>
 800ec20:	230c      	movs	r3, #12
 800ec22:	6033      	str	r3, [r6, #0]
 800ec24:	2000      	movs	r0, #0
 800ec26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed00 <_malloc_r+0xfc>
 800ec2e:	f000 f869 	bl	800ed04 <__malloc_lock>
 800ec32:	f8d8 3000 	ldr.w	r3, [r8]
 800ec36:	461c      	mov	r4, r3
 800ec38:	bb44      	cbnz	r4, 800ec8c <_malloc_r+0x88>
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	f7ff ffbf 	bl	800ebc0 <sbrk_aligned>
 800ec42:	1c43      	adds	r3, r0, #1
 800ec44:	4604      	mov	r4, r0
 800ec46:	d158      	bne.n	800ecfa <_malloc_r+0xf6>
 800ec48:	f8d8 4000 	ldr.w	r4, [r8]
 800ec4c:	4627      	mov	r7, r4
 800ec4e:	2f00      	cmp	r7, #0
 800ec50:	d143      	bne.n	800ecda <_malloc_r+0xd6>
 800ec52:	2c00      	cmp	r4, #0
 800ec54:	d04b      	beq.n	800ecee <_malloc_r+0xea>
 800ec56:	6823      	ldr	r3, [r4, #0]
 800ec58:	4639      	mov	r1, r7
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	eb04 0903 	add.w	r9, r4, r3
 800ec60:	f000 f8e8 	bl	800ee34 <_sbrk_r>
 800ec64:	4581      	cmp	r9, r0
 800ec66:	d142      	bne.n	800ecee <_malloc_r+0xea>
 800ec68:	6821      	ldr	r1, [r4, #0]
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	1a6d      	subs	r5, r5, r1
 800ec6e:	4629      	mov	r1, r5
 800ec70:	f7ff ffa6 	bl	800ebc0 <sbrk_aligned>
 800ec74:	3001      	adds	r0, #1
 800ec76:	d03a      	beq.n	800ecee <_malloc_r+0xea>
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	442b      	add	r3, r5
 800ec7c:	6023      	str	r3, [r4, #0]
 800ec7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	bb62      	cbnz	r2, 800ece0 <_malloc_r+0xdc>
 800ec86:	f8c8 7000 	str.w	r7, [r8]
 800ec8a:	e00f      	b.n	800ecac <_malloc_r+0xa8>
 800ec8c:	6822      	ldr	r2, [r4, #0]
 800ec8e:	1b52      	subs	r2, r2, r5
 800ec90:	d420      	bmi.n	800ecd4 <_malloc_r+0xd0>
 800ec92:	2a0b      	cmp	r2, #11
 800ec94:	d917      	bls.n	800ecc6 <_malloc_r+0xc2>
 800ec96:	1961      	adds	r1, r4, r5
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	6025      	str	r5, [r4, #0]
 800ec9c:	bf18      	it	ne
 800ec9e:	6059      	strne	r1, [r3, #4]
 800eca0:	6863      	ldr	r3, [r4, #4]
 800eca2:	bf08      	it	eq
 800eca4:	f8c8 1000 	streq.w	r1, [r8]
 800eca8:	5162      	str	r2, [r4, r5]
 800ecaa:	604b      	str	r3, [r1, #4]
 800ecac:	4630      	mov	r0, r6
 800ecae:	f000 f82f 	bl	800ed10 <__malloc_unlock>
 800ecb2:	f104 000b 	add.w	r0, r4, #11
 800ecb6:	1d23      	adds	r3, r4, #4
 800ecb8:	f020 0007 	bic.w	r0, r0, #7
 800ecbc:	1ac2      	subs	r2, r0, r3
 800ecbe:	bf1c      	itt	ne
 800ecc0:	1a1b      	subne	r3, r3, r0
 800ecc2:	50a3      	strne	r3, [r4, r2]
 800ecc4:	e7af      	b.n	800ec26 <_malloc_r+0x22>
 800ecc6:	6862      	ldr	r2, [r4, #4]
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	bf0c      	ite	eq
 800eccc:	f8c8 2000 	streq.w	r2, [r8]
 800ecd0:	605a      	strne	r2, [r3, #4]
 800ecd2:	e7eb      	b.n	800ecac <_malloc_r+0xa8>
 800ecd4:	4623      	mov	r3, r4
 800ecd6:	6864      	ldr	r4, [r4, #4]
 800ecd8:	e7ae      	b.n	800ec38 <_malloc_r+0x34>
 800ecda:	463c      	mov	r4, r7
 800ecdc:	687f      	ldr	r7, [r7, #4]
 800ecde:	e7b6      	b.n	800ec4e <_malloc_r+0x4a>
 800ece0:	461a      	mov	r2, r3
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d1fb      	bne.n	800ece0 <_malloc_r+0xdc>
 800ece8:	2300      	movs	r3, #0
 800ecea:	6053      	str	r3, [r2, #4]
 800ecec:	e7de      	b.n	800ecac <_malloc_r+0xa8>
 800ecee:	230c      	movs	r3, #12
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	6033      	str	r3, [r6, #0]
 800ecf4:	f000 f80c 	bl	800ed10 <__malloc_unlock>
 800ecf8:	e794      	b.n	800ec24 <_malloc_r+0x20>
 800ecfa:	6005      	str	r5, [r0, #0]
 800ecfc:	e7d6      	b.n	800ecac <_malloc_r+0xa8>
 800ecfe:	bf00      	nop
 800ed00:	20001d40 	.word	0x20001d40

0800ed04 <__malloc_lock>:
 800ed04:	4801      	ldr	r0, [pc, #4]	@ (800ed0c <__malloc_lock+0x8>)
 800ed06:	f000 b8cf 	b.w	800eea8 <__retarget_lock_acquire_recursive>
 800ed0a:	bf00      	nop
 800ed0c:	20001e7c 	.word	0x20001e7c

0800ed10 <__malloc_unlock>:
 800ed10:	4801      	ldr	r0, [pc, #4]	@ (800ed18 <__malloc_unlock+0x8>)
 800ed12:	f000 b8ca 	b.w	800eeaa <__retarget_lock_release_recursive>
 800ed16:	bf00      	nop
 800ed18:	20001e7c 	.word	0x20001e7c

0800ed1c <siprintf>:
 800ed1c:	b40e      	push	{r1, r2, r3}
 800ed1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ed22:	b500      	push	{lr}
 800ed24:	b09c      	sub	sp, #112	@ 0x70
 800ed26:	ab1d      	add	r3, sp, #116	@ 0x74
 800ed28:	9002      	str	r0, [sp, #8]
 800ed2a:	9006      	str	r0, [sp, #24]
 800ed2c:	9107      	str	r1, [sp, #28]
 800ed2e:	9104      	str	r1, [sp, #16]
 800ed30:	4808      	ldr	r0, [pc, #32]	@ (800ed54 <siprintf+0x38>)
 800ed32:	4909      	ldr	r1, [pc, #36]	@ (800ed58 <siprintf+0x3c>)
 800ed34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed38:	9105      	str	r1, [sp, #20]
 800ed3a:	6800      	ldr	r0, [r0, #0]
 800ed3c:	a902      	add	r1, sp, #8
 800ed3e:	9301      	str	r3, [sp, #4]
 800ed40:	f000 f960 	bl	800f004 <_svfiprintf_r>
 800ed44:	2200      	movs	r2, #0
 800ed46:	9b02      	ldr	r3, [sp, #8]
 800ed48:	701a      	strb	r2, [r3, #0]
 800ed4a:	b01c      	add	sp, #112	@ 0x70
 800ed4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed50:	b003      	add	sp, #12
 800ed52:	4770      	bx	lr
 800ed54:	20000f80 	.word	0x20000f80
 800ed58:	ffff0208 	.word	0xffff0208

0800ed5c <__utoa>:
 800ed5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed5e:	b08b      	sub	sp, #44	@ 0x2c
 800ed60:	4605      	mov	r5, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	466e      	mov	r6, sp
 800ed66:	4c1d      	ldr	r4, [pc, #116]	@ (800eddc <__utoa+0x80>)
 800ed68:	f104 0c20 	add.w	ip, r4, #32
 800ed6c:	4637      	mov	r7, r6
 800ed6e:	6820      	ldr	r0, [r4, #0]
 800ed70:	6861      	ldr	r1, [r4, #4]
 800ed72:	3408      	adds	r4, #8
 800ed74:	c703      	stmia	r7!, {r0, r1}
 800ed76:	4564      	cmp	r4, ip
 800ed78:	463e      	mov	r6, r7
 800ed7a:	d1f7      	bne.n	800ed6c <__utoa+0x10>
 800ed7c:	7921      	ldrb	r1, [r4, #4]
 800ed7e:	6820      	ldr	r0, [r4, #0]
 800ed80:	7139      	strb	r1, [r7, #4]
 800ed82:	1e91      	subs	r1, r2, #2
 800ed84:	2922      	cmp	r1, #34	@ 0x22
 800ed86:	6038      	str	r0, [r7, #0]
 800ed88:	f04f 0100 	mov.w	r1, #0
 800ed8c:	d904      	bls.n	800ed98 <__utoa+0x3c>
 800ed8e:	7019      	strb	r1, [r3, #0]
 800ed90:	460b      	mov	r3, r1
 800ed92:	4618      	mov	r0, r3
 800ed94:	b00b      	add	sp, #44	@ 0x2c
 800ed96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed98:	1e58      	subs	r0, r3, #1
 800ed9a:	4684      	mov	ip, r0
 800ed9c:	fbb5 f7f2 	udiv	r7, r5, r2
 800eda0:	fb02 5617 	mls	r6, r2, r7, r5
 800eda4:	3628      	adds	r6, #40	@ 0x28
 800eda6:	446e      	add	r6, sp
 800eda8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800edac:	460c      	mov	r4, r1
 800edae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800edb2:	462e      	mov	r6, r5
 800edb4:	42b2      	cmp	r2, r6
 800edb6:	463d      	mov	r5, r7
 800edb8:	f101 0101 	add.w	r1, r1, #1
 800edbc:	d9ee      	bls.n	800ed9c <__utoa+0x40>
 800edbe:	2200      	movs	r2, #0
 800edc0:	545a      	strb	r2, [r3, r1]
 800edc2:	1919      	adds	r1, r3, r4
 800edc4:	1aa5      	subs	r5, r4, r2
 800edc6:	42aa      	cmp	r2, r5
 800edc8:	dae3      	bge.n	800ed92 <__utoa+0x36>
 800edca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800edce:	780e      	ldrb	r6, [r1, #0]
 800edd0:	3201      	adds	r2, #1
 800edd2:	7006      	strb	r6, [r0, #0]
 800edd4:	f801 5901 	strb.w	r5, [r1], #-1
 800edd8:	e7f4      	b.n	800edc4 <__utoa+0x68>
 800edda:	bf00      	nop
 800eddc:	0800f952 	.word	0x0800f952

0800ede0 <strcat>:
 800ede0:	4602      	mov	r2, r0
 800ede2:	b510      	push	{r4, lr}
 800ede4:	7814      	ldrb	r4, [r2, #0]
 800ede6:	4613      	mov	r3, r2
 800ede8:	3201      	adds	r2, #1
 800edea:	2c00      	cmp	r4, #0
 800edec:	d1fa      	bne.n	800ede4 <strcat+0x4>
 800edee:	3b01      	subs	r3, #1
 800edf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edf8:	2a00      	cmp	r2, #0
 800edfa:	d1f9      	bne.n	800edf0 <strcat+0x10>
 800edfc:	bd10      	pop	{r4, pc}

0800edfe <strncpy>:
 800edfe:	4603      	mov	r3, r0
 800ee00:	b510      	push	{r4, lr}
 800ee02:	3901      	subs	r1, #1
 800ee04:	b132      	cbz	r2, 800ee14 <strncpy+0x16>
 800ee06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee0a:	3a01      	subs	r2, #1
 800ee0c:	f803 4b01 	strb.w	r4, [r3], #1
 800ee10:	2c00      	cmp	r4, #0
 800ee12:	d1f7      	bne.n	800ee04 <strncpy+0x6>
 800ee14:	2100      	movs	r1, #0
 800ee16:	441a      	add	r2, r3
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d100      	bne.n	800ee1e <strncpy+0x20>
 800ee1c:	bd10      	pop	{r4, pc}
 800ee1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ee22:	e7f9      	b.n	800ee18 <strncpy+0x1a>

0800ee24 <memset>:
 800ee24:	4603      	mov	r3, r0
 800ee26:	4402      	add	r2, r0
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d100      	bne.n	800ee2e <memset+0xa>
 800ee2c:	4770      	bx	lr
 800ee2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ee32:	e7f9      	b.n	800ee28 <memset+0x4>

0800ee34 <_sbrk_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	2300      	movs	r3, #0
 800ee38:	4d05      	ldr	r5, [pc, #20]	@ (800ee50 <_sbrk_r+0x1c>)
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	602b      	str	r3, [r5, #0]
 800ee40:	f7fb fff4 	bl	800ae2c <_sbrk>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d102      	bne.n	800ee4e <_sbrk_r+0x1a>
 800ee48:	682b      	ldr	r3, [r5, #0]
 800ee4a:	b103      	cbz	r3, 800ee4e <_sbrk_r+0x1a>
 800ee4c:	6023      	str	r3, [r4, #0]
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	20001e80 	.word	0x20001e80

0800ee54 <__errno>:
 800ee54:	4b01      	ldr	r3, [pc, #4]	@ (800ee5c <__errno+0x8>)
 800ee56:	6818      	ldr	r0, [r3, #0]
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	20000f80 	.word	0x20000f80

0800ee60 <__libc_init_array>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	2600      	movs	r6, #0
 800ee64:	4d0c      	ldr	r5, [pc, #48]	@ (800ee98 <__libc_init_array+0x38>)
 800ee66:	4c0d      	ldr	r4, [pc, #52]	@ (800ee9c <__libc_init_array+0x3c>)
 800ee68:	1b64      	subs	r4, r4, r5
 800ee6a:	10a4      	asrs	r4, r4, #2
 800ee6c:	42a6      	cmp	r6, r4
 800ee6e:	d109      	bne.n	800ee84 <__libc_init_array+0x24>
 800ee70:	f000 fbc2 	bl	800f5f8 <_init>
 800ee74:	2600      	movs	r6, #0
 800ee76:	4d0a      	ldr	r5, [pc, #40]	@ (800eea0 <__libc_init_array+0x40>)
 800ee78:	4c0a      	ldr	r4, [pc, #40]	@ (800eea4 <__libc_init_array+0x44>)
 800ee7a:	1b64      	subs	r4, r4, r5
 800ee7c:	10a4      	asrs	r4, r4, #2
 800ee7e:	42a6      	cmp	r6, r4
 800ee80:	d105      	bne.n	800ee8e <__libc_init_array+0x2e>
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee88:	4798      	blx	r3
 800ee8a:	3601      	adds	r6, #1
 800ee8c:	e7ee      	b.n	800ee6c <__libc_init_array+0xc>
 800ee8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee92:	4798      	blx	r3
 800ee94:	3601      	adds	r6, #1
 800ee96:	e7f2      	b.n	800ee7e <__libc_init_array+0x1e>
 800ee98:	0800f9b4 	.word	0x0800f9b4
 800ee9c:	0800f9b4 	.word	0x0800f9b4
 800eea0:	0800f9b4 	.word	0x0800f9b4
 800eea4:	0800f9b8 	.word	0x0800f9b8

0800eea8 <__retarget_lock_acquire_recursive>:
 800eea8:	4770      	bx	lr

0800eeaa <__retarget_lock_release_recursive>:
 800eeaa:	4770      	bx	lr

0800eeac <strcpy>:
 800eeac:	4603      	mov	r3, r0
 800eeae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeb2:	f803 2b01 	strb.w	r2, [r3], #1
 800eeb6:	2a00      	cmp	r2, #0
 800eeb8:	d1f9      	bne.n	800eeae <strcpy+0x2>
 800eeba:	4770      	bx	lr

0800eebc <_free_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4605      	mov	r5, r0
 800eec0:	2900      	cmp	r1, #0
 800eec2:	d040      	beq.n	800ef46 <_free_r+0x8a>
 800eec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eec8:	1f0c      	subs	r4, r1, #4
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	bfb8      	it	lt
 800eece:	18e4      	addlt	r4, r4, r3
 800eed0:	f7ff ff18 	bl	800ed04 <__malloc_lock>
 800eed4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef48 <_free_r+0x8c>)
 800eed6:	6813      	ldr	r3, [r2, #0]
 800eed8:	b933      	cbnz	r3, 800eee8 <_free_r+0x2c>
 800eeda:	6063      	str	r3, [r4, #4]
 800eedc:	6014      	str	r4, [r2, #0]
 800eede:	4628      	mov	r0, r5
 800eee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eee4:	f7ff bf14 	b.w	800ed10 <__malloc_unlock>
 800eee8:	42a3      	cmp	r3, r4
 800eeea:	d908      	bls.n	800eefe <_free_r+0x42>
 800eeec:	6820      	ldr	r0, [r4, #0]
 800eeee:	1821      	adds	r1, r4, r0
 800eef0:	428b      	cmp	r3, r1
 800eef2:	bf01      	itttt	eq
 800eef4:	6819      	ldreq	r1, [r3, #0]
 800eef6:	685b      	ldreq	r3, [r3, #4]
 800eef8:	1809      	addeq	r1, r1, r0
 800eefa:	6021      	streq	r1, [r4, #0]
 800eefc:	e7ed      	b.n	800eeda <_free_r+0x1e>
 800eefe:	461a      	mov	r2, r3
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	b10b      	cbz	r3, 800ef08 <_free_r+0x4c>
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	d9fa      	bls.n	800eefe <_free_r+0x42>
 800ef08:	6811      	ldr	r1, [r2, #0]
 800ef0a:	1850      	adds	r0, r2, r1
 800ef0c:	42a0      	cmp	r0, r4
 800ef0e:	d10b      	bne.n	800ef28 <_free_r+0x6c>
 800ef10:	6820      	ldr	r0, [r4, #0]
 800ef12:	4401      	add	r1, r0
 800ef14:	1850      	adds	r0, r2, r1
 800ef16:	4283      	cmp	r3, r0
 800ef18:	6011      	str	r1, [r2, #0]
 800ef1a:	d1e0      	bne.n	800eede <_free_r+0x22>
 800ef1c:	6818      	ldr	r0, [r3, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	4408      	add	r0, r1
 800ef22:	6010      	str	r0, [r2, #0]
 800ef24:	6053      	str	r3, [r2, #4]
 800ef26:	e7da      	b.n	800eede <_free_r+0x22>
 800ef28:	d902      	bls.n	800ef30 <_free_r+0x74>
 800ef2a:	230c      	movs	r3, #12
 800ef2c:	602b      	str	r3, [r5, #0]
 800ef2e:	e7d6      	b.n	800eede <_free_r+0x22>
 800ef30:	6820      	ldr	r0, [r4, #0]
 800ef32:	1821      	adds	r1, r4, r0
 800ef34:	428b      	cmp	r3, r1
 800ef36:	bf01      	itttt	eq
 800ef38:	6819      	ldreq	r1, [r3, #0]
 800ef3a:	685b      	ldreq	r3, [r3, #4]
 800ef3c:	1809      	addeq	r1, r1, r0
 800ef3e:	6021      	streq	r1, [r4, #0]
 800ef40:	6063      	str	r3, [r4, #4]
 800ef42:	6054      	str	r4, [r2, #4]
 800ef44:	e7cb      	b.n	800eede <_free_r+0x22>
 800ef46:	bd38      	pop	{r3, r4, r5, pc}
 800ef48:	20001d40 	.word	0x20001d40

0800ef4c <__ssputs_r>:
 800ef4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef50:	461f      	mov	r7, r3
 800ef52:	688e      	ldr	r6, [r1, #8]
 800ef54:	4682      	mov	sl, r0
 800ef56:	42be      	cmp	r6, r7
 800ef58:	460c      	mov	r4, r1
 800ef5a:	4690      	mov	r8, r2
 800ef5c:	680b      	ldr	r3, [r1, #0]
 800ef5e:	d82d      	bhi.n	800efbc <__ssputs_r+0x70>
 800ef60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef68:	d026      	beq.n	800efb8 <__ssputs_r+0x6c>
 800ef6a:	6965      	ldr	r5, [r4, #20]
 800ef6c:	6909      	ldr	r1, [r1, #16]
 800ef6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef72:	eba3 0901 	sub.w	r9, r3, r1
 800ef76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef7a:	1c7b      	adds	r3, r7, #1
 800ef7c:	444b      	add	r3, r9
 800ef7e:	106d      	asrs	r5, r5, #1
 800ef80:	429d      	cmp	r5, r3
 800ef82:	bf38      	it	cc
 800ef84:	461d      	movcc	r5, r3
 800ef86:	0553      	lsls	r3, r2, #21
 800ef88:	d527      	bpl.n	800efda <__ssputs_r+0x8e>
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	f7ff fe3a 	bl	800ec04 <_malloc_r>
 800ef90:	4606      	mov	r6, r0
 800ef92:	b360      	cbz	r0, 800efee <__ssputs_r+0xa2>
 800ef94:	464a      	mov	r2, r9
 800ef96:	6921      	ldr	r1, [r4, #16]
 800ef98:	f000 fb18 	bl	800f5cc <memcpy>
 800ef9c:	89a3      	ldrh	r3, [r4, #12]
 800ef9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800efa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efa6:	81a3      	strh	r3, [r4, #12]
 800efa8:	6126      	str	r6, [r4, #16]
 800efaa:	444e      	add	r6, r9
 800efac:	6026      	str	r6, [r4, #0]
 800efae:	463e      	mov	r6, r7
 800efb0:	6165      	str	r5, [r4, #20]
 800efb2:	eba5 0509 	sub.w	r5, r5, r9
 800efb6:	60a5      	str	r5, [r4, #8]
 800efb8:	42be      	cmp	r6, r7
 800efba:	d900      	bls.n	800efbe <__ssputs_r+0x72>
 800efbc:	463e      	mov	r6, r7
 800efbe:	4632      	mov	r2, r6
 800efc0:	4641      	mov	r1, r8
 800efc2:	6820      	ldr	r0, [r4, #0]
 800efc4:	f000 fada 	bl	800f57c <memmove>
 800efc8:	2000      	movs	r0, #0
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	1b9b      	subs	r3, r3, r6
 800efce:	60a3      	str	r3, [r4, #8]
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	4433      	add	r3, r6
 800efd4:	6023      	str	r3, [r4, #0]
 800efd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efda:	462a      	mov	r2, r5
 800efdc:	f000 faa0 	bl	800f520 <_realloc_r>
 800efe0:	4606      	mov	r6, r0
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d1e0      	bne.n	800efa8 <__ssputs_r+0x5c>
 800efe6:	4650      	mov	r0, sl
 800efe8:	6921      	ldr	r1, [r4, #16]
 800efea:	f7ff ff67 	bl	800eebc <_free_r>
 800efee:	230c      	movs	r3, #12
 800eff0:	f8ca 3000 	str.w	r3, [sl]
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800effa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800effe:	81a3      	strh	r3, [r4, #12]
 800f000:	e7e9      	b.n	800efd6 <__ssputs_r+0x8a>
	...

0800f004 <_svfiprintf_r>:
 800f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f008:	4698      	mov	r8, r3
 800f00a:	898b      	ldrh	r3, [r1, #12]
 800f00c:	4607      	mov	r7, r0
 800f00e:	061b      	lsls	r3, r3, #24
 800f010:	460d      	mov	r5, r1
 800f012:	4614      	mov	r4, r2
 800f014:	b09d      	sub	sp, #116	@ 0x74
 800f016:	d510      	bpl.n	800f03a <_svfiprintf_r+0x36>
 800f018:	690b      	ldr	r3, [r1, #16]
 800f01a:	b973      	cbnz	r3, 800f03a <_svfiprintf_r+0x36>
 800f01c:	2140      	movs	r1, #64	@ 0x40
 800f01e:	f7ff fdf1 	bl	800ec04 <_malloc_r>
 800f022:	6028      	str	r0, [r5, #0]
 800f024:	6128      	str	r0, [r5, #16]
 800f026:	b930      	cbnz	r0, 800f036 <_svfiprintf_r+0x32>
 800f028:	230c      	movs	r3, #12
 800f02a:	603b      	str	r3, [r7, #0]
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f030:	b01d      	add	sp, #116	@ 0x74
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	2340      	movs	r3, #64	@ 0x40
 800f038:	616b      	str	r3, [r5, #20]
 800f03a:	2300      	movs	r3, #0
 800f03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f03e:	2320      	movs	r3, #32
 800f040:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f044:	2330      	movs	r3, #48	@ 0x30
 800f046:	f04f 0901 	mov.w	r9, #1
 800f04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f04e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800f1e8 <_svfiprintf_r+0x1e4>
 800f052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f056:	4623      	mov	r3, r4
 800f058:	469a      	mov	sl, r3
 800f05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f05e:	b10a      	cbz	r2, 800f064 <_svfiprintf_r+0x60>
 800f060:	2a25      	cmp	r2, #37	@ 0x25
 800f062:	d1f9      	bne.n	800f058 <_svfiprintf_r+0x54>
 800f064:	ebba 0b04 	subs.w	fp, sl, r4
 800f068:	d00b      	beq.n	800f082 <_svfiprintf_r+0x7e>
 800f06a:	465b      	mov	r3, fp
 800f06c:	4622      	mov	r2, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	4638      	mov	r0, r7
 800f072:	f7ff ff6b 	bl	800ef4c <__ssputs_r>
 800f076:	3001      	adds	r0, #1
 800f078:	f000 80a7 	beq.w	800f1ca <_svfiprintf_r+0x1c6>
 800f07c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f07e:	445a      	add	r2, fp
 800f080:	9209      	str	r2, [sp, #36]	@ 0x24
 800f082:	f89a 3000 	ldrb.w	r3, [sl]
 800f086:	2b00      	cmp	r3, #0
 800f088:	f000 809f 	beq.w	800f1ca <_svfiprintf_r+0x1c6>
 800f08c:	2300      	movs	r3, #0
 800f08e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f096:	f10a 0a01 	add.w	sl, sl, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	9307      	str	r3, [sp, #28]
 800f09e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0a4:	4654      	mov	r4, sl
 800f0a6:	2205      	movs	r2, #5
 800f0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ac:	484e      	ldr	r0, [pc, #312]	@ (800f1e8 <_svfiprintf_r+0x1e4>)
 800f0ae:	f000 fa7f 	bl	800f5b0 <memchr>
 800f0b2:	9a04      	ldr	r2, [sp, #16]
 800f0b4:	b9d8      	cbnz	r0, 800f0ee <_svfiprintf_r+0xea>
 800f0b6:	06d0      	lsls	r0, r2, #27
 800f0b8:	bf44      	itt	mi
 800f0ba:	2320      	movmi	r3, #32
 800f0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0c0:	0711      	lsls	r1, r2, #28
 800f0c2:	bf44      	itt	mi
 800f0c4:	232b      	movmi	r3, #43	@ 0x2b
 800f0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0d0:	d015      	beq.n	800f0fe <_svfiprintf_r+0xfa>
 800f0d2:	4654      	mov	r4, sl
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	f04f 0c0a 	mov.w	ip, #10
 800f0da:	9a07      	ldr	r2, [sp, #28]
 800f0dc:	4621      	mov	r1, r4
 800f0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0e2:	3b30      	subs	r3, #48	@ 0x30
 800f0e4:	2b09      	cmp	r3, #9
 800f0e6:	d94b      	bls.n	800f180 <_svfiprintf_r+0x17c>
 800f0e8:	b1b0      	cbz	r0, 800f118 <_svfiprintf_r+0x114>
 800f0ea:	9207      	str	r2, [sp, #28]
 800f0ec:	e014      	b.n	800f118 <_svfiprintf_r+0x114>
 800f0ee:	eba0 0308 	sub.w	r3, r0, r8
 800f0f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	46a2      	mov	sl, r4
 800f0fa:	9304      	str	r3, [sp, #16]
 800f0fc:	e7d2      	b.n	800f0a4 <_svfiprintf_r+0xa0>
 800f0fe:	9b03      	ldr	r3, [sp, #12]
 800f100:	1d19      	adds	r1, r3, #4
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	9103      	str	r1, [sp, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	bfbb      	ittet	lt
 800f10a:	425b      	neglt	r3, r3
 800f10c:	f042 0202 	orrlt.w	r2, r2, #2
 800f110:	9307      	strge	r3, [sp, #28]
 800f112:	9307      	strlt	r3, [sp, #28]
 800f114:	bfb8      	it	lt
 800f116:	9204      	strlt	r2, [sp, #16]
 800f118:	7823      	ldrb	r3, [r4, #0]
 800f11a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f11c:	d10a      	bne.n	800f134 <_svfiprintf_r+0x130>
 800f11e:	7863      	ldrb	r3, [r4, #1]
 800f120:	2b2a      	cmp	r3, #42	@ 0x2a
 800f122:	d132      	bne.n	800f18a <_svfiprintf_r+0x186>
 800f124:	9b03      	ldr	r3, [sp, #12]
 800f126:	3402      	adds	r4, #2
 800f128:	1d1a      	adds	r2, r3, #4
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	9203      	str	r2, [sp, #12]
 800f12e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f132:	9305      	str	r3, [sp, #20]
 800f134:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800f1ec <_svfiprintf_r+0x1e8>
 800f138:	2203      	movs	r2, #3
 800f13a:	4650      	mov	r0, sl
 800f13c:	7821      	ldrb	r1, [r4, #0]
 800f13e:	f000 fa37 	bl	800f5b0 <memchr>
 800f142:	b138      	cbz	r0, 800f154 <_svfiprintf_r+0x150>
 800f144:	2240      	movs	r2, #64	@ 0x40
 800f146:	9b04      	ldr	r3, [sp, #16]
 800f148:	eba0 000a 	sub.w	r0, r0, sl
 800f14c:	4082      	lsls	r2, r0
 800f14e:	4313      	orrs	r3, r2
 800f150:	3401      	adds	r4, #1
 800f152:	9304      	str	r3, [sp, #16]
 800f154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f158:	2206      	movs	r2, #6
 800f15a:	4825      	ldr	r0, [pc, #148]	@ (800f1f0 <_svfiprintf_r+0x1ec>)
 800f15c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f160:	f000 fa26 	bl	800f5b0 <memchr>
 800f164:	2800      	cmp	r0, #0
 800f166:	d036      	beq.n	800f1d6 <_svfiprintf_r+0x1d2>
 800f168:	4b22      	ldr	r3, [pc, #136]	@ (800f1f4 <_svfiprintf_r+0x1f0>)
 800f16a:	bb1b      	cbnz	r3, 800f1b4 <_svfiprintf_r+0x1b0>
 800f16c:	9b03      	ldr	r3, [sp, #12]
 800f16e:	3307      	adds	r3, #7
 800f170:	f023 0307 	bic.w	r3, r3, #7
 800f174:	3308      	adds	r3, #8
 800f176:	9303      	str	r3, [sp, #12]
 800f178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f17a:	4433      	add	r3, r6
 800f17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f17e:	e76a      	b.n	800f056 <_svfiprintf_r+0x52>
 800f180:	460c      	mov	r4, r1
 800f182:	2001      	movs	r0, #1
 800f184:	fb0c 3202 	mla	r2, ip, r2, r3
 800f188:	e7a8      	b.n	800f0dc <_svfiprintf_r+0xd8>
 800f18a:	2300      	movs	r3, #0
 800f18c:	f04f 0c0a 	mov.w	ip, #10
 800f190:	4619      	mov	r1, r3
 800f192:	3401      	adds	r4, #1
 800f194:	9305      	str	r3, [sp, #20]
 800f196:	4620      	mov	r0, r4
 800f198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f19c:	3a30      	subs	r2, #48	@ 0x30
 800f19e:	2a09      	cmp	r2, #9
 800f1a0:	d903      	bls.n	800f1aa <_svfiprintf_r+0x1a6>
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d0c6      	beq.n	800f134 <_svfiprintf_r+0x130>
 800f1a6:	9105      	str	r1, [sp, #20]
 800f1a8:	e7c4      	b.n	800f134 <_svfiprintf_r+0x130>
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1b2:	e7f0      	b.n	800f196 <_svfiprintf_r+0x192>
 800f1b4:	ab03      	add	r3, sp, #12
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	462a      	mov	r2, r5
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f1f8 <_svfiprintf_r+0x1f4>)
 800f1be:	a904      	add	r1, sp, #16
 800f1c0:	f3af 8000 	nop.w
 800f1c4:	1c42      	adds	r2, r0, #1
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	d1d6      	bne.n	800f178 <_svfiprintf_r+0x174>
 800f1ca:	89ab      	ldrh	r3, [r5, #12]
 800f1cc:	065b      	lsls	r3, r3, #25
 800f1ce:	f53f af2d 	bmi.w	800f02c <_svfiprintf_r+0x28>
 800f1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1d4:	e72c      	b.n	800f030 <_svfiprintf_r+0x2c>
 800f1d6:	ab03      	add	r3, sp, #12
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	462a      	mov	r2, r5
 800f1dc:	4638      	mov	r0, r7
 800f1de:	4b06      	ldr	r3, [pc, #24]	@ (800f1f8 <_svfiprintf_r+0x1f4>)
 800f1e0:	a904      	add	r1, sp, #16
 800f1e2:	f000 f87d 	bl	800f2e0 <_printf_i>
 800f1e6:	e7ed      	b.n	800f1c4 <_svfiprintf_r+0x1c0>
 800f1e8:	0800f977 	.word	0x0800f977
 800f1ec:	0800f97d 	.word	0x0800f97d
 800f1f0:	0800f981 	.word	0x0800f981
 800f1f4:	00000000 	.word	0x00000000
 800f1f8:	0800ef4d 	.word	0x0800ef4d

0800f1fc <_printf_common>:
 800f1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f200:	4616      	mov	r6, r2
 800f202:	4698      	mov	r8, r3
 800f204:	688a      	ldr	r2, [r1, #8]
 800f206:	690b      	ldr	r3, [r1, #16]
 800f208:	4607      	mov	r7, r0
 800f20a:	4293      	cmp	r3, r2
 800f20c:	bfb8      	it	lt
 800f20e:	4613      	movlt	r3, r2
 800f210:	6033      	str	r3, [r6, #0]
 800f212:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f216:	460c      	mov	r4, r1
 800f218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f21c:	b10a      	cbz	r2, 800f222 <_printf_common+0x26>
 800f21e:	3301      	adds	r3, #1
 800f220:	6033      	str	r3, [r6, #0]
 800f222:	6823      	ldr	r3, [r4, #0]
 800f224:	0699      	lsls	r1, r3, #26
 800f226:	bf42      	ittt	mi
 800f228:	6833      	ldrmi	r3, [r6, #0]
 800f22a:	3302      	addmi	r3, #2
 800f22c:	6033      	strmi	r3, [r6, #0]
 800f22e:	6825      	ldr	r5, [r4, #0]
 800f230:	f015 0506 	ands.w	r5, r5, #6
 800f234:	d106      	bne.n	800f244 <_printf_common+0x48>
 800f236:	f104 0a19 	add.w	sl, r4, #25
 800f23a:	68e3      	ldr	r3, [r4, #12]
 800f23c:	6832      	ldr	r2, [r6, #0]
 800f23e:	1a9b      	subs	r3, r3, r2
 800f240:	42ab      	cmp	r3, r5
 800f242:	dc2b      	bgt.n	800f29c <_printf_common+0xa0>
 800f244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f248:	6822      	ldr	r2, [r4, #0]
 800f24a:	3b00      	subs	r3, #0
 800f24c:	bf18      	it	ne
 800f24e:	2301      	movne	r3, #1
 800f250:	0692      	lsls	r2, r2, #26
 800f252:	d430      	bmi.n	800f2b6 <_printf_common+0xba>
 800f254:	4641      	mov	r1, r8
 800f256:	4638      	mov	r0, r7
 800f258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f25c:	47c8      	blx	r9
 800f25e:	3001      	adds	r0, #1
 800f260:	d023      	beq.n	800f2aa <_printf_common+0xae>
 800f262:	6823      	ldr	r3, [r4, #0]
 800f264:	6922      	ldr	r2, [r4, #16]
 800f266:	f003 0306 	and.w	r3, r3, #6
 800f26a:	2b04      	cmp	r3, #4
 800f26c:	bf14      	ite	ne
 800f26e:	2500      	movne	r5, #0
 800f270:	6833      	ldreq	r3, [r6, #0]
 800f272:	f04f 0600 	mov.w	r6, #0
 800f276:	bf08      	it	eq
 800f278:	68e5      	ldreq	r5, [r4, #12]
 800f27a:	f104 041a 	add.w	r4, r4, #26
 800f27e:	bf08      	it	eq
 800f280:	1aed      	subeq	r5, r5, r3
 800f282:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f286:	bf08      	it	eq
 800f288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f28c:	4293      	cmp	r3, r2
 800f28e:	bfc4      	itt	gt
 800f290:	1a9b      	subgt	r3, r3, r2
 800f292:	18ed      	addgt	r5, r5, r3
 800f294:	42b5      	cmp	r5, r6
 800f296:	d11a      	bne.n	800f2ce <_printf_common+0xd2>
 800f298:	2000      	movs	r0, #0
 800f29a:	e008      	b.n	800f2ae <_printf_common+0xb2>
 800f29c:	2301      	movs	r3, #1
 800f29e:	4652      	mov	r2, sl
 800f2a0:	4641      	mov	r1, r8
 800f2a2:	4638      	mov	r0, r7
 800f2a4:	47c8      	blx	r9
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	d103      	bne.n	800f2b2 <_printf_common+0xb6>
 800f2aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b2:	3501      	adds	r5, #1
 800f2b4:	e7c1      	b.n	800f23a <_printf_common+0x3e>
 800f2b6:	2030      	movs	r0, #48	@ 0x30
 800f2b8:	18e1      	adds	r1, r4, r3
 800f2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f2c4:	4422      	add	r2, r4
 800f2c6:	3302      	adds	r3, #2
 800f2c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f2cc:	e7c2      	b.n	800f254 <_printf_common+0x58>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	4641      	mov	r1, r8
 800f2d4:	4638      	mov	r0, r7
 800f2d6:	47c8      	blx	r9
 800f2d8:	3001      	adds	r0, #1
 800f2da:	d0e6      	beq.n	800f2aa <_printf_common+0xae>
 800f2dc:	3601      	adds	r6, #1
 800f2de:	e7d9      	b.n	800f294 <_printf_common+0x98>

0800f2e0 <_printf_i>:
 800f2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e4:	7e0f      	ldrb	r7, [r1, #24]
 800f2e6:	4691      	mov	r9, r2
 800f2e8:	2f78      	cmp	r7, #120	@ 0x78
 800f2ea:	4680      	mov	r8, r0
 800f2ec:	460c      	mov	r4, r1
 800f2ee:	469a      	mov	sl, r3
 800f2f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2f6:	d807      	bhi.n	800f308 <_printf_i+0x28>
 800f2f8:	2f62      	cmp	r7, #98	@ 0x62
 800f2fa:	d80a      	bhi.n	800f312 <_printf_i+0x32>
 800f2fc:	2f00      	cmp	r7, #0
 800f2fe:	f000 80d3 	beq.w	800f4a8 <_printf_i+0x1c8>
 800f302:	2f58      	cmp	r7, #88	@ 0x58
 800f304:	f000 80ba 	beq.w	800f47c <_printf_i+0x19c>
 800f308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f310:	e03a      	b.n	800f388 <_printf_i+0xa8>
 800f312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f316:	2b15      	cmp	r3, #21
 800f318:	d8f6      	bhi.n	800f308 <_printf_i+0x28>
 800f31a:	a101      	add	r1, pc, #4	@ (adr r1, 800f320 <_printf_i+0x40>)
 800f31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f320:	0800f379 	.word	0x0800f379
 800f324:	0800f38d 	.word	0x0800f38d
 800f328:	0800f309 	.word	0x0800f309
 800f32c:	0800f309 	.word	0x0800f309
 800f330:	0800f309 	.word	0x0800f309
 800f334:	0800f309 	.word	0x0800f309
 800f338:	0800f38d 	.word	0x0800f38d
 800f33c:	0800f309 	.word	0x0800f309
 800f340:	0800f309 	.word	0x0800f309
 800f344:	0800f309 	.word	0x0800f309
 800f348:	0800f309 	.word	0x0800f309
 800f34c:	0800f48f 	.word	0x0800f48f
 800f350:	0800f3b7 	.word	0x0800f3b7
 800f354:	0800f449 	.word	0x0800f449
 800f358:	0800f309 	.word	0x0800f309
 800f35c:	0800f309 	.word	0x0800f309
 800f360:	0800f4b1 	.word	0x0800f4b1
 800f364:	0800f309 	.word	0x0800f309
 800f368:	0800f3b7 	.word	0x0800f3b7
 800f36c:	0800f309 	.word	0x0800f309
 800f370:	0800f309 	.word	0x0800f309
 800f374:	0800f451 	.word	0x0800f451
 800f378:	6833      	ldr	r3, [r6, #0]
 800f37a:	1d1a      	adds	r2, r3, #4
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	6032      	str	r2, [r6, #0]
 800f380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f388:	2301      	movs	r3, #1
 800f38a:	e09e      	b.n	800f4ca <_printf_i+0x1ea>
 800f38c:	6833      	ldr	r3, [r6, #0]
 800f38e:	6820      	ldr	r0, [r4, #0]
 800f390:	1d19      	adds	r1, r3, #4
 800f392:	6031      	str	r1, [r6, #0]
 800f394:	0606      	lsls	r6, r0, #24
 800f396:	d501      	bpl.n	800f39c <_printf_i+0xbc>
 800f398:	681d      	ldr	r5, [r3, #0]
 800f39a:	e003      	b.n	800f3a4 <_printf_i+0xc4>
 800f39c:	0645      	lsls	r5, r0, #25
 800f39e:	d5fb      	bpl.n	800f398 <_printf_i+0xb8>
 800f3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f3a4:	2d00      	cmp	r5, #0
 800f3a6:	da03      	bge.n	800f3b0 <_printf_i+0xd0>
 800f3a8:	232d      	movs	r3, #45	@ 0x2d
 800f3aa:	426d      	negs	r5, r5
 800f3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3b0:	230a      	movs	r3, #10
 800f3b2:	4859      	ldr	r0, [pc, #356]	@ (800f518 <_printf_i+0x238>)
 800f3b4:	e011      	b.n	800f3da <_printf_i+0xfa>
 800f3b6:	6821      	ldr	r1, [r4, #0]
 800f3b8:	6833      	ldr	r3, [r6, #0]
 800f3ba:	0608      	lsls	r0, r1, #24
 800f3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f3c0:	d402      	bmi.n	800f3c8 <_printf_i+0xe8>
 800f3c2:	0649      	lsls	r1, r1, #25
 800f3c4:	bf48      	it	mi
 800f3c6:	b2ad      	uxthmi	r5, r5
 800f3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f3ca:	6033      	str	r3, [r6, #0]
 800f3cc:	bf14      	ite	ne
 800f3ce:	230a      	movne	r3, #10
 800f3d0:	2308      	moveq	r3, #8
 800f3d2:	4851      	ldr	r0, [pc, #324]	@ (800f518 <_printf_i+0x238>)
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f3da:	6866      	ldr	r6, [r4, #4]
 800f3dc:	2e00      	cmp	r6, #0
 800f3de:	bfa8      	it	ge
 800f3e0:	6821      	ldrge	r1, [r4, #0]
 800f3e2:	60a6      	str	r6, [r4, #8]
 800f3e4:	bfa4      	itt	ge
 800f3e6:	f021 0104 	bicge.w	r1, r1, #4
 800f3ea:	6021      	strge	r1, [r4, #0]
 800f3ec:	b90d      	cbnz	r5, 800f3f2 <_printf_i+0x112>
 800f3ee:	2e00      	cmp	r6, #0
 800f3f0:	d04b      	beq.n	800f48a <_printf_i+0x1aa>
 800f3f2:	4616      	mov	r6, r2
 800f3f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3f8:	fb03 5711 	mls	r7, r3, r1, r5
 800f3fc:	5dc7      	ldrb	r7, [r0, r7]
 800f3fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f402:	462f      	mov	r7, r5
 800f404:	42bb      	cmp	r3, r7
 800f406:	460d      	mov	r5, r1
 800f408:	d9f4      	bls.n	800f3f4 <_printf_i+0x114>
 800f40a:	2b08      	cmp	r3, #8
 800f40c:	d10b      	bne.n	800f426 <_printf_i+0x146>
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	07df      	lsls	r7, r3, #31
 800f412:	d508      	bpl.n	800f426 <_printf_i+0x146>
 800f414:	6923      	ldr	r3, [r4, #16]
 800f416:	6861      	ldr	r1, [r4, #4]
 800f418:	4299      	cmp	r1, r3
 800f41a:	bfde      	ittt	le
 800f41c:	2330      	movle	r3, #48	@ 0x30
 800f41e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f422:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f426:	1b92      	subs	r2, r2, r6
 800f428:	6122      	str	r2, [r4, #16]
 800f42a:	464b      	mov	r3, r9
 800f42c:	4621      	mov	r1, r4
 800f42e:	4640      	mov	r0, r8
 800f430:	f8cd a000 	str.w	sl, [sp]
 800f434:	aa03      	add	r2, sp, #12
 800f436:	f7ff fee1 	bl	800f1fc <_printf_common>
 800f43a:	3001      	adds	r0, #1
 800f43c:	d14a      	bne.n	800f4d4 <_printf_i+0x1f4>
 800f43e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f442:	b004      	add	sp, #16
 800f444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f448:	6823      	ldr	r3, [r4, #0]
 800f44a:	f043 0320 	orr.w	r3, r3, #32
 800f44e:	6023      	str	r3, [r4, #0]
 800f450:	2778      	movs	r7, #120	@ 0x78
 800f452:	4832      	ldr	r0, [pc, #200]	@ (800f51c <_printf_i+0x23c>)
 800f454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	6831      	ldr	r1, [r6, #0]
 800f45c:	061f      	lsls	r7, r3, #24
 800f45e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f462:	d402      	bmi.n	800f46a <_printf_i+0x18a>
 800f464:	065f      	lsls	r7, r3, #25
 800f466:	bf48      	it	mi
 800f468:	b2ad      	uxthmi	r5, r5
 800f46a:	6031      	str	r1, [r6, #0]
 800f46c:	07d9      	lsls	r1, r3, #31
 800f46e:	bf44      	itt	mi
 800f470:	f043 0320 	orrmi.w	r3, r3, #32
 800f474:	6023      	strmi	r3, [r4, #0]
 800f476:	b11d      	cbz	r5, 800f480 <_printf_i+0x1a0>
 800f478:	2310      	movs	r3, #16
 800f47a:	e7ab      	b.n	800f3d4 <_printf_i+0xf4>
 800f47c:	4826      	ldr	r0, [pc, #152]	@ (800f518 <_printf_i+0x238>)
 800f47e:	e7e9      	b.n	800f454 <_printf_i+0x174>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	f023 0320 	bic.w	r3, r3, #32
 800f486:	6023      	str	r3, [r4, #0]
 800f488:	e7f6      	b.n	800f478 <_printf_i+0x198>
 800f48a:	4616      	mov	r6, r2
 800f48c:	e7bd      	b.n	800f40a <_printf_i+0x12a>
 800f48e:	6833      	ldr	r3, [r6, #0]
 800f490:	6825      	ldr	r5, [r4, #0]
 800f492:	1d18      	adds	r0, r3, #4
 800f494:	6961      	ldr	r1, [r4, #20]
 800f496:	6030      	str	r0, [r6, #0]
 800f498:	062e      	lsls	r6, r5, #24
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	d501      	bpl.n	800f4a2 <_printf_i+0x1c2>
 800f49e:	6019      	str	r1, [r3, #0]
 800f4a0:	e002      	b.n	800f4a8 <_printf_i+0x1c8>
 800f4a2:	0668      	lsls	r0, r5, #25
 800f4a4:	d5fb      	bpl.n	800f49e <_printf_i+0x1be>
 800f4a6:	8019      	strh	r1, [r3, #0]
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4616      	mov	r6, r2
 800f4ac:	6123      	str	r3, [r4, #16]
 800f4ae:	e7bc      	b.n	800f42a <_printf_i+0x14a>
 800f4b0:	6833      	ldr	r3, [r6, #0]
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	1d1a      	adds	r2, r3, #4
 800f4b6:	6032      	str	r2, [r6, #0]
 800f4b8:	681e      	ldr	r6, [r3, #0]
 800f4ba:	6862      	ldr	r2, [r4, #4]
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f000 f877 	bl	800f5b0 <memchr>
 800f4c2:	b108      	cbz	r0, 800f4c8 <_printf_i+0x1e8>
 800f4c4:	1b80      	subs	r0, r0, r6
 800f4c6:	6060      	str	r0, [r4, #4]
 800f4c8:	6863      	ldr	r3, [r4, #4]
 800f4ca:	6123      	str	r3, [r4, #16]
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4d2:	e7aa      	b.n	800f42a <_printf_i+0x14a>
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	4649      	mov	r1, r9
 800f4d8:	4640      	mov	r0, r8
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	47d0      	blx	sl
 800f4de:	3001      	adds	r0, #1
 800f4e0:	d0ad      	beq.n	800f43e <_printf_i+0x15e>
 800f4e2:	6823      	ldr	r3, [r4, #0]
 800f4e4:	079b      	lsls	r3, r3, #30
 800f4e6:	d413      	bmi.n	800f510 <_printf_i+0x230>
 800f4e8:	68e0      	ldr	r0, [r4, #12]
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	4298      	cmp	r0, r3
 800f4ee:	bfb8      	it	lt
 800f4f0:	4618      	movlt	r0, r3
 800f4f2:	e7a6      	b.n	800f442 <_printf_i+0x162>
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	4632      	mov	r2, r6
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	4640      	mov	r0, r8
 800f4fc:	47d0      	blx	sl
 800f4fe:	3001      	adds	r0, #1
 800f500:	d09d      	beq.n	800f43e <_printf_i+0x15e>
 800f502:	3501      	adds	r5, #1
 800f504:	68e3      	ldr	r3, [r4, #12]
 800f506:	9903      	ldr	r1, [sp, #12]
 800f508:	1a5b      	subs	r3, r3, r1
 800f50a:	42ab      	cmp	r3, r5
 800f50c:	dcf2      	bgt.n	800f4f4 <_printf_i+0x214>
 800f50e:	e7eb      	b.n	800f4e8 <_printf_i+0x208>
 800f510:	2500      	movs	r5, #0
 800f512:	f104 0619 	add.w	r6, r4, #25
 800f516:	e7f5      	b.n	800f504 <_printf_i+0x224>
 800f518:	0800f988 	.word	0x0800f988
 800f51c:	0800f999 	.word	0x0800f999

0800f520 <_realloc_r>:
 800f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	4680      	mov	r8, r0
 800f526:	4615      	mov	r5, r2
 800f528:	460c      	mov	r4, r1
 800f52a:	b921      	cbnz	r1, 800f536 <_realloc_r+0x16>
 800f52c:	4611      	mov	r1, r2
 800f52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f532:	f7ff bb67 	b.w	800ec04 <_malloc_r>
 800f536:	b92a      	cbnz	r2, 800f544 <_realloc_r+0x24>
 800f538:	f7ff fcc0 	bl	800eebc <_free_r>
 800f53c:	2400      	movs	r4, #0
 800f53e:	4620      	mov	r0, r4
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	f000 f850 	bl	800f5e8 <_malloc_usable_size_r>
 800f548:	4285      	cmp	r5, r0
 800f54a:	4606      	mov	r6, r0
 800f54c:	d802      	bhi.n	800f554 <_realloc_r+0x34>
 800f54e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f552:	d8f4      	bhi.n	800f53e <_realloc_r+0x1e>
 800f554:	4629      	mov	r1, r5
 800f556:	4640      	mov	r0, r8
 800f558:	f7ff fb54 	bl	800ec04 <_malloc_r>
 800f55c:	4607      	mov	r7, r0
 800f55e:	2800      	cmp	r0, #0
 800f560:	d0ec      	beq.n	800f53c <_realloc_r+0x1c>
 800f562:	42b5      	cmp	r5, r6
 800f564:	462a      	mov	r2, r5
 800f566:	4621      	mov	r1, r4
 800f568:	bf28      	it	cs
 800f56a:	4632      	movcs	r2, r6
 800f56c:	f000 f82e 	bl	800f5cc <memcpy>
 800f570:	4621      	mov	r1, r4
 800f572:	4640      	mov	r0, r8
 800f574:	f7ff fca2 	bl	800eebc <_free_r>
 800f578:	463c      	mov	r4, r7
 800f57a:	e7e0      	b.n	800f53e <_realloc_r+0x1e>

0800f57c <memmove>:
 800f57c:	4288      	cmp	r0, r1
 800f57e:	b510      	push	{r4, lr}
 800f580:	eb01 0402 	add.w	r4, r1, r2
 800f584:	d902      	bls.n	800f58c <memmove+0x10>
 800f586:	4284      	cmp	r4, r0
 800f588:	4623      	mov	r3, r4
 800f58a:	d807      	bhi.n	800f59c <memmove+0x20>
 800f58c:	1e43      	subs	r3, r0, #1
 800f58e:	42a1      	cmp	r1, r4
 800f590:	d008      	beq.n	800f5a4 <memmove+0x28>
 800f592:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f59a:	e7f8      	b.n	800f58e <memmove+0x12>
 800f59c:	4601      	mov	r1, r0
 800f59e:	4402      	add	r2, r0
 800f5a0:	428a      	cmp	r2, r1
 800f5a2:	d100      	bne.n	800f5a6 <memmove+0x2a>
 800f5a4:	bd10      	pop	{r4, pc}
 800f5a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5ae:	e7f7      	b.n	800f5a0 <memmove+0x24>

0800f5b0 <memchr>:
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	b510      	push	{r4, lr}
 800f5b4:	b2c9      	uxtb	r1, r1
 800f5b6:	4402      	add	r2, r0
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	d101      	bne.n	800f5c2 <memchr+0x12>
 800f5be:	2000      	movs	r0, #0
 800f5c0:	e003      	b.n	800f5ca <memchr+0x1a>
 800f5c2:	7804      	ldrb	r4, [r0, #0]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	428c      	cmp	r4, r1
 800f5c8:	d1f6      	bne.n	800f5b8 <memchr+0x8>
 800f5ca:	bd10      	pop	{r4, pc}

0800f5cc <memcpy>:
 800f5cc:	440a      	add	r2, r1
 800f5ce:	4291      	cmp	r1, r2
 800f5d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f5d4:	d100      	bne.n	800f5d8 <memcpy+0xc>
 800f5d6:	4770      	bx	lr
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5de:	4291      	cmp	r1, r2
 800f5e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5e4:	d1f9      	bne.n	800f5da <memcpy+0xe>
 800f5e6:	bd10      	pop	{r4, pc}

0800f5e8 <_malloc_usable_size_r>:
 800f5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ec:	1f18      	subs	r0, r3, #4
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	bfbc      	itt	lt
 800f5f2:	580b      	ldrlt	r3, [r1, r0]
 800f5f4:	18c0      	addlt	r0, r0, r3
 800f5f6:	4770      	bx	lr

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
