
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e000  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  0800e1e4  0800e1e4  0000f1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f164  0800f164  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f164  0800f164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f16c  0800f16c  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f16c  0800f16c  0001016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f170  0800f170  00010170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f174  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000fd0  08010144  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002120  08010144  00012120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af64  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca8  00000000  00000000  0002cf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102c  00000000  00000000  000320f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1ba  00000000  00000000  00033124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e804  00000000  00000000  000502de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11ee  00000000  00000000  0006eae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fcd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b6c  00000000  00000000  0010fd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00115880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e1cc 	.word	0x0800e1cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e1cc 	.word	0x0800e1cc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	200014a0 	.word	0x200014a0
 80004ac:	20001544 	.word	0x20001544
 80004b0:	2000159b 	.word	0x2000159b
 80004b4:	20001545 	.word	0x20001545
 80004b8:	20001571 	.word	0x20001571
 80004bc:	20001574 	.word	0x20001574
 80004c0:	20001575 	.word	0x20001575
 80004c4:	20001576 	.word	0x20001576
 80004c8:	20001577 	.word	0x20001577
 80004cc:	20001578 	.word	0x20001578
 80004d0:	20001579 	.word	0x20001579
 80004d4:	20001589 	.word	0x20001589
 80004d8:	2000157a 	.word	0x2000157a
 80004dc:	2000158a 	.word	0x2000158a
 80004e0:	2000157b 	.word	0x2000157b
 80004e4:	2000158b 	.word	0x2000158b
 80004e8:	2000157e 	.word	0x2000157e
 80004ec:	2000157f 	.word	0x2000157f
 80004f0:	20001580 	.word	0x20001580
 80004f4:	20001581 	.word	0x20001581
 80004f8:	20001582 	.word	0x20001582
 80004fc:	20001583 	.word	0x20001583
 8000500:	20001584 	.word	0x20001584
 8000504:	20001585 	.word	0x20001585
 8000508:	20001586 	.word	0x20001586
 800050c:	20001587 	.word	0x20001587
 8000510:	20001588 	.word	0x20001588
 8000514:	2000158c 	.word	0x2000158c
 8000518:	2000158e 	.word	0x2000158e
 800051c:	20001568 	.word	0x20001568
 8000520:	20001569 	.word	0x20001569
 8000524:	2000156a 	.word	0x2000156a
 8000528:	2000156b 	.word	0x2000156b
 800052c:	20001590 	.word	0x20001590
 8000530:	2000157d 	.word	0x2000157d
 8000534:	2000158f 	.word	0x2000158f
 8000538:	2000157c 	.word	0x2000157c
 800053c:	20001591 	.word	0x20001591
 8000540:	20001592 	.word	0x20001592
 8000544:	20001593 	.word	0x20001593
 8000548:	20001594 	.word	0x20001594
 800054c:	20001595 	.word	0x20001595
 8000550:	20001596 	.word	0x20001596
 8000554:	20001597 	.word	0x20001597
 8000558:	20001598 	.word	0x20001598
 800055c:	20001599 	.word	0x20001599
 8000560:	2000159a 	.word	0x2000159a
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 f9a7 	bl	8009990 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 f9a1 	bl	8009990 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 f99b 	bl	8009990 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fdfc 	bl	800625c <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000157f 	.word	0x2000157f
 800066c:	20001580 	.word	0x20001580
 8000670:	20001581 	.word	0x20001581
 8000674:	20001582 	.word	0x20001582
 8000678:	20001583 	.word	0x20001583
 800067c:	20001584 	.word	0x20001584
 8000680:	20001585 	.word	0x20001585
 8000684:	20001586 	.word	0x20001586
 8000688:	20001587 	.word	0x20001587
 800068c:	20001588 	.word	0x20001588
 8000690:	2000158c 	.word	0x2000158c
 8000694:	2000158e 	.word	0x2000158e
 8000698:	2000158f 	.word	0x2000158f
 800069c:	20001590 	.word	0x20001590
 80006a0:	2000159b 	.word	0x2000159b

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fbf8 	bl	8008eb8 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 f960 	bl	8009990 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fc1e 	bl	8008f10 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200014a0 	.word	0x200014a0
 80006e0:	20001e10 	.word	0x20001e10

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a f997 	bl	800aaa4 <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fb97 	bl	8008eb8 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 f8f2 	bl	8009990 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001eec 	.word	0x20001eec
 80007c4:	0800e1e4 	.word	0x0800e1e4

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fa1f 	bl	800ac98 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fb25 	bl	8008eb8 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001eec 	.word	0x20001eec
 80008a4:	0800e1f8 	.word	0x0800e1f8

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	200014a0 	.word	0x200014a0
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001518 	.word	0x20001518
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001524 	.word	0x20001524
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001534 	.word	0x20001534

080009ac <Wifi_SendRaw>:

Wifi_t	Wifi;

//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009be:	d813      	bhi.n	80009e8 <Wifi_SendRaw+0x3c>
	{
		// Send the information in data through the UART of the ESP8266
		memcpy(Wifi.TxBuffer,data,len);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	461a      	mov	r2, r3
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <Wifi_SendRaw+0x48>)
 80009c8:	f00d f862 	bl	800da90 <memcpy>
		if(HAL_UART_Transmit(&huart1,data,len,900) == HAL_OK)
 80009cc:	887a      	ldrh	r2, [r7, #2]
 80009ce:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <Wifi_SendRaw+0x4c>)
 80009d6:	f00c f8a7 	bl	800cb28 <HAL_UART_Transmit>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <Wifi_SendRaw+0x38>
			return true;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e002      	b.n	80009ea <Wifi_SendRaw+0x3e>
		else
			return false;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e000      	b.n	80009ea <Wifi_SendRaw+0x3e>
	}
	else
		return false;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200011ed 	.word	0x200011ed
 80009f8:	20001f88 	.word	0x20001f88

080009fc <Wifi_SendString>:
//#########################################################################################################
bool Wifi_SendString(char *data)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fc0d 	bl	8000224 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffcb 	bl	80009ac <Wifi_SendRaw>
 8000a16:	4603      	mov	r3, r0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Wifi_WaitForString>:
	DWT_Delay_us(DelayUs);
	return true;
}
//#########################################################################################################
bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 8000a20:	b40c      	push	{r2, r3}
 8000a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a26:	b089      	sub	sp, #36	@ 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	466b      	mov	r3, sp
 8000a30:	461e      	mov	r6, r3
	 *
	 * If the ESP8266 return a AT+OK after the last command, the function is going to
	 * return a true value and the result number would be 1.
	 */

	if(result == NULL)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <Wifi_WaitForString+0x1c>
		return false;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e075      	b.n	8000b28 <Wifi_WaitForString+0x108>
	if(CountOfParameter == 0)
 8000a3c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <Wifi_WaitForString+0x28>
		return false;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e06f      	b.n	8000b28 <Wifi_WaitForString+0x108>

	*result=0;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]

	va_list tag;
		va_start (tag,CountOfParameter);
 8000a4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a52:	60bb      	str	r3, [r7, #8]
		char *arg[CountOfParameter];
 8000a54:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8000a58:	460b      	mov	r3, r1
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	b2cb      	uxtb	r3, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	4698      	mov	r8, r3
 8000a64:	4691      	mov	r9, r2
 8000a66:	f04f 0200 	mov.w	r2, #0
 8000a6a:	f04f 0300 	mov.w	r3, #0
 8000a6e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a72:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a76:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a7a:	b2cb      	uxtb	r3, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	461c      	mov	r4, r3
 8000a80:	4615      	mov	r5, r2
 8000a82:	f04f 0200 	mov.w	r2, #0
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	016b      	lsls	r3, r5, #5
 8000a8c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a90:	0162      	lsls	r2, r4, #5
 8000a92:	460b      	mov	r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	3307      	adds	r3, #7
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000aa0:	466b      	mov	r3, sp
 8000aa2:	3303      	adds	r3, #3
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	77fb      	strb	r3, [r7, #31]
 8000aae:	e00a      	b.n	8000ac6 <Wifi_WaitForString+0xa6>
			arg[i] = va_arg (tag, char *);
 8000ab0:	7ffa      	ldrb	r2, [r7, #31]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1d19      	adds	r1, r3, #4
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	6819      	ldr	r1, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint8_t i=0; i<CountOfParameter ; i++)
 8000ac0:	7ffb      	ldrb	r3, [r7, #31]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	77fb      	strb	r3, [r7, #31]
 8000ac6:	7ffa      	ldrb	r2, [r7, #31]
 8000ac8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d3ef      	bcc.n	8000ab0 <Wifi_WaitForString+0x90>
	va_end (tag);

	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	e023      	b.n	8000b1e <Wifi_WaitForString+0xfe>
	{
		DWT_Delay_us(20000);
 8000ad6:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000ada:	f008 f831 	bl	8008b40 <DWT_Delay_us>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75fb      	strb	r3, [r7, #23]
 8000ae2:	e014      	b.n	8000b0e <Wifi_WaitForString+0xee>
		{
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 8000ae4:	7dfa      	ldrb	r2, [r7, #23]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <Wifi_WaitForString+0x118>)
 8000af0:	f00c ff74 	bl	800d9dc <strstr>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <Wifi_WaitForString+0xe8>
			{
				*result = mx+1;
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	3301      	adds	r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	701a      	strb	r2, [r3, #0]
				return true;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e00f      	b.n	8000b28 <Wifi_WaitForString+0x108>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	75fb      	strb	r3, [r7, #23]
 8000b0e:	7dfa      	ldrb	r2, [r7, #23]
 8000b10:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3e5      	bcc.n	8000ae4 <Wifi_WaitForString+0xc4>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=20)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3314      	adds	r3, #20
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3d7      	bcc.n	8000ad6 <Wifi_WaitForString+0xb6>
			}
		}
	}
	// timeout
	return false;
 8000b26:	2300      	movs	r3, #0
 8000b28:	46b5      	mov	sp, r6

}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b34:	b002      	add	sp, #8
 8000b36:	4770      	bx	lr
 8000b38:	20000fed 	.word	0x20000fed

08000b3c <Wifi_RxClear>:
  }
  *dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	2100      	movs	r1, #0
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <Wifi_RxClear+0x28>)
 8000b48:	f00c ff5e 	bl	800da08 <memset>
	Wifi.RxIndex=0;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <Wifi_RxClear+0x2c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f8a3 2302 	strh.w	r2, [r3, #770]	@ 0x302
	HAL_UART_Receive_IT(&huart1,&Wifi.usartBuff,1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	4904      	ldr	r1, [pc, #16]	@ (8000b68 <Wifi_RxClear+0x2c>)
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <Wifi_RxClear+0x30>)
 8000b5a:	f00c f868 	bl	800cc2e <HAL_UART_Receive_IT>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000fed 	.word	0x20000fed
 8000b68:	20000fec 	.word	0x20000fec
 8000b6c:	20001f88 	.word	0x20001f88

08000b70 <Wifi_Restart>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Restart(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af02      	add	r7, sp, #8
	// Make a restart of the ESP8266 using the AT Commands

	uint8_t result;
	bool	returnVal=false;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8000b7a:	f7ff ffdf 	bl	8000b3c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RST\r\n");
 8000b7e:	4913      	ldr	r1, [pc, #76]	@ (8000bcc <Wifi_Restart+0x5c>)
 8000b80:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <Wifi_Restart+0x60>)
 8000b82:	f00c fec9 	bl	800d918 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000b86:	4812      	ldr	r0, [pc, #72]	@ (8000bd0 <Wifi_Restart+0x60>)
 8000b88:	f7ff ff38 	bl	80009fc <Wifi_SendString>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d011      	beq.n	8000bb6 <Wifi_Restart+0x46>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000b92:	1db9      	adds	r1, r7, #6
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <Wifi_Restart+0x64>)
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <Wifi_Restart+0x68>)
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba0:	f7ff ff3e 	bl	8000a20 <Wifi_WaitForString>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <Wifi_Restart+0x4a>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d006      	beq.n	8000bbe <Wifi_Restart+0x4e>
			break;
		returnVal=true;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	e004      	b.n	8000bc0 <Wifi_Restart+0x50>
			break;
 8000bb6:	bf00      	nop
 8000bb8:	e002      	b.n	8000bc0 <Wifi_Restart+0x50>
			break;			// The timeout was completed and the string was not there
 8000bba:	bf00      	nop
 8000bbc:	e000      	b.n	8000bc0 <Wifi_Restart+0x50>
			break;
 8000bbe:	bf00      	nop
	}while(0);
	return returnVal;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	0800e220 	.word	0x0800e220
 8000bd0:	200011ed 	.word	0x200011ed
 8000bd4:	0800e218 	.word	0x0800e218
 8000bd8:	0800e214 	.word	0x0800e214

08000bdc <Wifi_FactoryReset>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool	Wifi_FactoryReset(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
	uint8_t result;
	bool	returnVal=false;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8000be6:	f7ff ffa9 	bl	8000b3c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RESTORE\r\n");
 8000bea:	4913      	ldr	r1, [pc, #76]	@ (8000c38 <Wifi_FactoryReset+0x5c>)
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <Wifi_FactoryReset+0x60>)
 8000bee:	f00c fe93 	bl	800d918 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000bf2:	4812      	ldr	r0, [pc, #72]	@ (8000c3c <Wifi_FactoryReset+0x60>)
 8000bf4:	f7ff ff02 	bl	80009fc <Wifi_SendString>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d011      	beq.n	8000c22 <Wifi_FactoryReset+0x46>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000bfe:	1db9      	adds	r1, r7, #6
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <Wifi_FactoryReset+0x64>)
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <Wifi_FactoryReset+0x68>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f7ff ff08 	bl	8000a20 <Wifi_WaitForString>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <Wifi_FactoryReset+0x4a>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d006      	beq.n	8000c2a <Wifi_FactoryReset+0x4e>
			break;
		returnVal=true;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	e004      	b.n	8000c2c <Wifi_FactoryReset+0x50>
			break;
 8000c22:	bf00      	nop
 8000c24:	e002      	b.n	8000c2c <Wifi_FactoryReset+0x50>
			break;			// The timeout was completed and the string was not there
 8000c26:	bf00      	nop
 8000c28:	e000      	b.n	8000c2c <Wifi_FactoryReset+0x50>
			break;
 8000c2a:	bf00      	nop
	}while(0);
	return returnVal;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800e23c 	.word	0x0800e23c
 8000c3c:	200011ed 	.word	0x200011ed
 8000c40:	0800e218 	.word	0x0800e218
 8000c44:	0800e214 	.word	0x0800e214

08000c48 <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	bool	returnVal=false;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000c56:	f7ff ff71 	bl	8000b3c <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4915      	ldr	r1, [pc, #84]	@ (8000cb4 <Wifi_SetMode+0x6c>)
 8000c60:	4815      	ldr	r0, [pc, #84]	@ (8000cb8 <Wifi_SetMode+0x70>)
 8000c62:	f00c fe59 	bl	800d918 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <Wifi_SetMode+0x70>)
 8000c68:	f7ff fec8 	bl	80009fc <Wifi_SendString>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d016      	beq.n	8000ca0 <Wifi_SetMode+0x58>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000c72:	f107 010e 	add.w	r1, r7, #14
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <Wifi_SetMode+0x74>)
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <Wifi_SetMode+0x78>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c82:	f7ff fecd 	bl	8000a20 <Wifi_WaitForString>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00b      	beq.n	8000ca4 <Wifi_SetMode+0x5c>
			break;			// The timeout was completed and the string was not there
		if(result == 2)		// It was find the "ERROR" String in the receiving information
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d00a      	beq.n	8000ca8 <Wifi_SetMode+0x60>
			break;
		Wifi.Mode = WifiMode_;
 8000c92:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <Wifi_SetMode+0x7c>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f882 3305 	strb.w	r3, [r2, #773]	@ 0x305
		returnVal=true;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e004      	b.n	8000caa <Wifi_SetMode+0x62>
			break;
 8000ca0:	bf00      	nop
 8000ca2:	e002      	b.n	8000caa <Wifi_SetMode+0x62>
			break;			// The timeout was completed and the string was not there
 8000ca4:	bf00      	nop
 8000ca6:	e000      	b.n	8000caa <Wifi_SetMode+0x62>
			break;
 8000ca8:	bf00      	nop
	}while(0);
	return returnVal;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0800e26c 	.word	0x0800e26c
 8000cb8:	200011ed 	.word	0x200011ed
 8000cbc:	0800e218 	.word	0x0800e218
 8000cc0:	0800e214 	.word	0x0800e214
 8000cc4:	20000fec 	.word	0x20000fec

08000cc8 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	uint8_t result;
	bool	returnVal=false;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	75fb      	strb	r3, [r7, #23]
	do
	{
		/*
		 * It connects to a WiFi network who has all the parameters correctly
		 */
		Wifi_RxClear();
 8000cd8:	f7ff ff30 	bl	8000b3c <Wifi_RxClear>
		if(MAC==NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d106      	bne.n	8000cf0 <Wifi_Station_ConnectToAp+0x28>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4919      	ldr	r1, [pc, #100]	@ (8000d4c <Wifi_Station_ConnectToAp+0x84>)
 8000ce8:	4819      	ldr	r0, [pc, #100]	@ (8000d50 <Wifi_Station_ConnectToAp+0x88>)
 8000cea:	f00c fe15 	bl	800d918 <siprintf>
 8000cee:	e007      	b.n	8000d00 <Wifi_Station_ConnectToAp+0x38>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4916      	ldr	r1, [pc, #88]	@ (8000d54 <Wifi_Station_ConnectToAp+0x8c>)
 8000cfa:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <Wifi_Station_ConnectToAp+0x88>)
 8000cfc:	f00c fe0c 	bl	800d918 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000d00:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <Wifi_Station_ConnectToAp+0x88>)
 8000d02:	f7ff fe7b 	bl	80009fc <Wifi_SendString>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d014      	beq.n	8000d36 <Wifi_Station_ConnectToAp+0x6e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 8000d0c:	f107 0116 	add.w	r1, r7, #22
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <Wifi_Station_ConnectToAp+0x90>)
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <Wifi_Station_ConnectToAp+0x94>)
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <Wifi_Station_ConnectToAp+0x98>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8000d20:	f7ff fe7e 	bl	8000a20 <Wifi_WaitForString>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d007      	beq.n	8000d3a <Wifi_Station_ConnectToAp+0x72>
			break;
		if(result > 1)		// If the result is higher to 1 is because there were an error
 8000d2a:	7dbb      	ldrb	r3, [r7, #22]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d806      	bhi.n	8000d3e <Wifi_Station_ConnectToAp+0x76>
			break;			// in the communication
		returnVal=true;
 8000d30:	2301      	movs	r3, #1
 8000d32:	75fb      	strb	r3, [r7, #23]
 8000d34:	e004      	b.n	8000d40 <Wifi_Station_ConnectToAp+0x78>
			break;
 8000d36:	bf00      	nop
 8000d38:	e002      	b.n	8000d40 <Wifi_Station_ConnectToAp+0x78>
			break;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <Wifi_Station_ConnectToAp+0x78>
			break;			// in the communication
 8000d3e:	bf00      	nop
	}while(0);
	return returnVal;
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800e2e4 	.word	0x0800e2e4
 8000d50:	200011ed 	.word	0x200011ed
 8000d54:	0800e300 	.word	0x0800e300
 8000d58:	0800e328 	.word	0x0800e328
 8000d5c:	0800e334 	.word	0x0800e334
 8000d60:	0800e320 	.word	0x0800e320

08000d64 <Wifi_TcpIp_StartTcpConnection>:
	}while(0);
	return returnVal;
}
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	460b      	mov	r3, r1
 8000d76:	81bb      	strh	r3, [r7, #12]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	80fb      	strh	r3, [r7, #6]
	uint8_t result;
	bool	returnVal=false;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	75fb      	strb	r3, [r7, #23]
		/*
		 * It makes a TCP server and then it creates a TCP Connection according to the
		 * settings in the function. It uses a very high time of waiting because the
		 * ESP8266 takes a lot of time to create a connection with a TCP the first time.
		 */
		Wifi_RxClear();
 8000d80:	f7ff fedc 	bl	8000b3c <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==true){
 8000d84:	4b33      	ldr	r3, [pc, #204]	@ (8000e54 <Wifi_TcpIp_StartTcpConnection+0xf0>)
 8000d86:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d11b      	bne.n	8000dc6 <Wifi_TcpIp_StartTcpConnection+0x62>
			sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 8000d8e:	89bb      	ldrh	r3, [r7, #12]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4931      	ldr	r1, [pc, #196]	@ (8000e58 <Wifi_TcpIp_StartTcpConnection+0xf4>)
 8000d94:	4831      	ldr	r0, [pc, #196]	@ (8000e5c <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8000d96:	f00c fdbf 	bl	800d918 <siprintf>
			if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000d9a:	4830      	ldr	r0, [pc, #192]	@ (8000e5c <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8000d9c:	f7ff fe2e 	bl	80009fc <Wifi_SendString>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d046      	beq.n	8000e34 <Wifi_TcpIp_StartTcpConnection+0xd0>
				break;
			if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000da6:	f107 0116 	add.w	r1, r7, #22
 8000daa:	4b2d      	ldr	r3, [pc, #180]	@ (8000e60 <Wifi_TcpIp_StartTcpConnection+0xfc>)
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <Wifi_TcpIp_StartTcpConnection+0x100>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db6:	f7ff fe33 	bl	8000a20 <Wifi_WaitForString>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d03b      	beq.n	8000e38 <Wifi_TcpIp_StartTcpConnection+0xd4>
				break;			// The timeout was completed and the string was not there
			if(result == 2)		// It was find the "ERROR" String in the receiving information
 8000dc0:	7dbb      	ldrb	r3, [r7, #22]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d03a      	beq.n	8000e3c <Wifi_TcpIp_StartTcpConnection+0xd8>
				break;
		}
		Wifi_RxClear();
 8000dc6:	f7ff feb9 	bl	8000b3c <Wifi_RxClear>
		if(Wifi.TcpIpMultiConnection==false)
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <Wifi_TcpIp_StartTcpConnection+0xf0>)
 8000dcc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d109      	bne.n	8000de8 <Wifi_TcpIp_StartTcpConnection+0x84>
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 8000dd4:	89ba      	ldrh	r2, [r7, #12]
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	4922      	ldr	r1, [pc, #136]	@ (8000e68 <Wifi_TcpIp_StartTcpConnection+0x104>)
 8000de0:	481e      	ldr	r0, [pc, #120]	@ (8000e5c <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8000de2:	f00c fd99 	bl	800d918 <siprintf>
 8000de6:	e00a      	b.n	8000dfe <Wifi_TcpIp_StartTcpConnection+0x9a>
		else
		  sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 8000de8:	7bf9      	ldrb	r1, [r7, #15]
 8000dea:	89bb      	ldrh	r3, [r7, #12]
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	9201      	str	r2, [sp, #4]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	460a      	mov	r2, r1
 8000df6:	491d      	ldr	r1, [pc, #116]	@ (8000e6c <Wifi_TcpIp_StartTcpConnection+0x108>)
 8000df8:	4818      	ldr	r0, [pc, #96]	@ (8000e5c <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8000dfa:	f00c fd8d 	bl	800d918 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000dfe:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <Wifi_TcpIp_StartTcpConnection+0xf8>)
 8000e00:	f7ff fdfc 	bl	80009fc <Wifi_SendString>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d01a      	beq.n	8000e40 <Wifi_TcpIp_StartTcpConnection+0xdc>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 8000e0a:	f107 0116 	add.w	r1, r7, #22
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <Wifi_TcpIp_StartTcpConnection+0xfc>)
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <Wifi_TcpIp_StartTcpConnection+0x10c>)
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <Wifi_TcpIp_StartTcpConnection+0x100>)
 8000e18:	2203      	movs	r2, #3
 8000e1a:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000e1e:	f7ff fdff 	bl	8000a20 <Wifi_WaitForString>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00d      	beq.n	8000e44 <Wifi_TcpIp_StartTcpConnection+0xe0>
			break;
		if(result == 3)
 8000e28:	7dbb      	ldrb	r3, [r7, #22]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d00c      	beq.n	8000e48 <Wifi_TcpIp_StartTcpConnection+0xe4>
			break;
		returnVal=true;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	75fb      	strb	r3, [r7, #23]
 8000e32:	e00a      	b.n	8000e4a <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;
 8000e34:	bf00      	nop
 8000e36:	e008      	b.n	8000e4a <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;			// The timeout was completed and the string was not there
 8000e38:	bf00      	nop
 8000e3a:	e006      	b.n	8000e4a <Wifi_TcpIp_StartTcpConnection+0xe6>
				break;
 8000e3c:	bf00      	nop
 8000e3e:	e004      	b.n	8000e4a <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8000e40:	bf00      	nop
 8000e42:	e002      	b.n	8000e4a <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8000e44:	bf00      	nop
 8000e46:	e000      	b.n	8000e4a <Wifi_TcpIp_StartTcpConnection+0xe6>
			break;
 8000e48:	bf00      	nop
	}while(0);
	return returnVal;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000fec 	.word	0x20000fec
 8000e58:	0800e46c 	.word	0x0800e46c
 8000e5c:	200011ed 	.word	0x200011ed
 8000e60:	0800e218 	.word	0x0800e218
 8000e64:	0800e214 	.word	0x0800e214
 8000e68:	0800e480 	.word	0x0800e480
 8000e6c:	0800e4a0 	.word	0x0800e4a0
 8000e70:	0800e4c4 	.word	0x0800e4c4

08000e74 <ESP8266_Init>:

#include "SystemDefaults.h"
#include "GlobalVariables.h"
#include "Flash.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
    Wifi_FactoryReset();
 8000e80:	f7ff feac 	bl	8000bdc <Wifi_FactoryReset>
    HAL_Delay(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e88:	f008 fd82 	bl	8009990 <HAL_Delay>

    Wifi_Restart();
 8000e8c:	f7ff fe70 	bl	8000b70 <Wifi_Restart>
    HAL_Delay(1000);
 8000e90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e94:	f008 fd7c 	bl	8009990 <HAL_Delay>

    Wifi_SendString("AT\r\n");
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <ESP8266_Init+0x5c>)
 8000e9a:	f7ff fdaf 	bl	80009fc <Wifi_SendString>
    HAL_Delay(2000);
 8000e9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea2:	f008 fd75 	bl	8009990 <HAL_Delay>

    Wifi_SetMode(WifiMode_Station);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fece 	bl	8000c48 <Wifi_SetMode>
    HAL_Delay(2000);
 8000eac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eb0:	f008 fd6e 	bl	8009990 <HAL_Delay>

    Wifi_Station_ConnectToAp((char *)wifiSS, (char *)wifiPA, NULL);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f7ff ff05 	bl	8000cc8 <Wifi_Station_ConnectToAp>
    HAL_Delay(2000);
 8000ebe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ec2:	f008 fd65 	bl	8009990 <HAL_Delay>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800e5bc 	.word	0x0800e5bc

08000ed4 <checkForUpdates>:
	} else {
		return 0;  // Başarısız
	}
}

void checkForUpdates(UART_HandleTypeDef *huart, const char *currentVersion) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0a8      	sub	sp, #160	@ 0xa0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	char checkUpdateCommand[150];
	sprintf(checkUpdateCommand, "GET /api/v2/updateChecker/checkUpdatesRaw?currentVersion=%s HTTP/1.0\r\nHost: %s\r\n\r\n", currentVersion, mainServerWithPort);
 8000ede:	f107 0008 	add.w	r0, r7, #8
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <checkForUpdates+0xe0>)
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4934      	ldr	r1, [pc, #208]	@ (8000fb8 <checkForUpdates+0xe4>)
 8000ee8:	f00c fd16 	bl	800d918 <siprintf>
	Wifi_TcpIp_StartTcpConnection(0, mainServer, 3000, 10);
 8000eec:	230a      	movs	r3, #10
 8000eee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ef2:	4932      	ldr	r1, [pc, #200]	@ (8000fbc <checkForUpdates+0xe8>)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ff35 	bl	8000d64 <Wifi_TcpIp_StartTcpConnection>
	HAL_Delay(2000);
 8000efa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000efe:	f008 fd47 	bl	8009990 <HAL_Delay>

	sprintf(bufferTX, "AT+CIPSEND=%d\r\n", strlen(checkUpdateCommand));
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff f98c 	bl	8000224 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	492b      	ldr	r1, [pc, #172]	@ (8000fc0 <checkForUpdates+0xec>)
 8000f12:	482c      	ldr	r0, [pc, #176]	@ (8000fc4 <checkForUpdates+0xf0>)
 8000f14:	f00c fd00 	bl	800d918 <siprintf>
	Wifi_SendString(bufferTX);
 8000f18:	482a      	ldr	r0, [pc, #168]	@ (8000fc4 <checkForUpdates+0xf0>)
 8000f1a:	f7ff fd6f 	bl	80009fc <Wifi_SendString>
	HAL_Delay(2000);
 8000f1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f22:	f008 fd35 	bl	8009990 <HAL_Delay>

	Wifi_SendString(checkUpdateCommand);
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fd66 	bl	80009fc <Wifi_SendString>
	HAL_Delay(5000);
 8000f30:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f34:	f008 fd2c 	bl	8009990 <HAL_Delay>

	HAL_UART_Receive_IT(huart, bufferRX, sizeof(bufferRX));
 8000f38:	22fa      	movs	r2, #250	@ 0xfa
 8000f3a:	4923      	ldr	r1, [pc, #140]	@ (8000fc8 <checkForUpdates+0xf4>)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f00b fe76 	bl	800cc2e <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000f42:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f46:	f008 fd23 	bl	8009990 <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK")) {
 8000f4a:	4920      	ldr	r1, [pc, #128]	@ (8000fcc <checkForUpdates+0xf8>)
 8000f4c:	481e      	ldr	r0, [pc, #120]	@ (8000fc8 <checkForUpdates+0xf4>)
 8000f4e:	f00c fd45 	bl	800d9dc <strstr>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d01e      	beq.n	8000f96 <checkForUpdates+0xc2>
		if (strstr(bufferRX, "\"updateAvailable\":true")) {
 8000f58:	491d      	ldr	r1, [pc, #116]	@ (8000fd0 <checkForUpdates+0xfc>)
 8000f5a:	481b      	ldr	r0, [pc, #108]	@ (8000fc8 <checkForUpdates+0xf4>)
 8000f5c:	f00c fd3e 	bl	800d9dc <strstr>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <checkForUpdates+0xaa>
			lcd_print(1, 1, "New Update Available");
 8000f66:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <checkForUpdates+0x100>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f007 ffa4 	bl	8008eb8 <lcd_print>
			HAL_Delay(2000);
 8000f70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f74:	f008 fd0c 	bl	8009990 <HAL_Delay>
			lcd_clear();
 8000f78:	f007 ffca 	bl	8008f10 <lcd_clear>
	} else {
		lcd_print(1, 1, "Update Check Failed");
		HAL_Delay(2000);
		lcd_clear();
	}
}
 8000f7c:	e016      	b.n	8000fac <checkForUpdates+0xd8>
			lcd_print(1, 1, "No Update Available");
 8000f7e:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <checkForUpdates+0x104>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	2001      	movs	r0, #1
 8000f84:	f007 ff98 	bl	8008eb8 <lcd_print>
			HAL_Delay(2000);
 8000f88:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f8c:	f008 fd00 	bl	8009990 <HAL_Delay>
			lcd_clear();
 8000f90:	f007 ffbe 	bl	8008f10 <lcd_clear>
}
 8000f94:	e00a      	b.n	8000fac <checkForUpdates+0xd8>
		lcd_print(1, 1, "Update Check Failed");
 8000f96:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <checkForUpdates+0x108>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f007 ff8c 	bl	8008eb8 <lcd_print>
		HAL_Delay(2000);
 8000fa0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fa4:	f008 fcf4 	bl	8009990 <HAL_Delay>
		lcd_clear();
 8000fa8:	f007 ffb2 	bl	8008f10 <lcd_clear>
}
 8000fac:	bf00      	nop
 8000fae:	37a0      	adds	r7, #160	@ 0xa0
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800e970 	.word	0x0800e970
 8000fb8:	0800ee18 	.word	0x0800ee18
 8000fbc:	0800e630 	.word	0x0800e630
 8000fc0:	0800e984 	.word	0x0800e984
 8000fc4:	200015d8 	.word	0x200015d8
 8000fc8:	200016d4 	.word	0x200016d4
 8000fcc:	0800ee08 	.word	0x0800ee08
 8000fd0:	0800ee6c 	.word	0x0800ee6c
 8000fd4:	0800ee84 	.word	0x0800ee84
 8000fd8:	0800ee9c 	.word	0x0800ee9c
 8000fdc:	0800eeb0 	.word	0x0800eeb0

08000fe0 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000fea:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <hata2EEPROM+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <hata2EEPROM+0xa4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a24      	ldr	r2, [pc, #144]	@ (8001088 <hata2EEPROM+0xa8>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000ffe:	f000 f8d1 	bl	80011a4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8001002:	e000      	b.n	8001006 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8001004:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e012      	b.n	8001032 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <hata2EEPROM+0xa4>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <hata2EEPROM+0xa8>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d107      	bne.n	800102c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <hata2EEPROM+0xa4>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	4918      	ldr	r1, [pc, #96]	@ (8001088 <hata2EEPROM+0xa8>)
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	54ca      	strb	r2, [r1, r3]
					break;
 800102a:	e007      	b.n	800103c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <hata2EEPROM+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbe7      	blt.n	800100c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <hata2EEPROM+0xa4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b299      	uxth	r1, r3
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <hata2EEPROM+0xa0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b298      	uxth	r0, r3
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <hata2EEPROM+0xa4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <hata2EEPROM+0xa8>)
 800104e:	4413      	add	r3, r2
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <hata2EEPROM+0xa0>)
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	b292      	uxth	r2, r2
 8001056:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 800105a:	9402      	str	r4, [sp, #8]
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4603      	mov	r3, r0
 8001062:	460a      	mov	r2, r1
 8001064:	21a0      	movs	r1, #160	@ 0xa0
 8001066:	4809      	ldr	r0, [pc, #36]	@ (800108c <hata2EEPROM+0xac>)
 8001068:	f009 fd1c 	bl	800aaa4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800106c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001070:	f008 fc8e 	bl	8009990 <HAL_Delay>
	eepromKontrol();
 8001074:	f7ff f8de 	bl	8000234 <eepromKontrol>
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	20000094 	.word	0x20000094
 8001084:	20000098 	.word	0x20000098
 8001088:	200014a0 	.word	0x200014a0
 800108c:	20001eec 	.word	0x20001eec

08001090 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10f      	bne.n	80010c0 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 80010a0:	4a38      	ldr	r2, [pc, #224]	@ (8001184 <hataKoduLcdGoster+0xf4>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	2001      	movs	r0, #1
 80010a6:	f007 ff07 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, "1");
 80010aa:	4a37      	ldr	r2, [pc, #220]	@ (8001188 <hataKoduLcdGoster+0xf8>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	2002      	movs	r0, #2
 80010b0:	f007 ff02 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "          ");
 80010b4:	4a35      	ldr	r2, [pc, #212]	@ (800118c <hataKoduLcdGoster+0xfc>)
 80010b6:	2107      	movs	r1, #7
 80010b8:	2002      	movs	r0, #2
 80010ba:	f007 fefd 	bl	8008eb8 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80010be:	e05d      	b.n	800117c <hataKoduLcdGoster+0xec>
	} else if(x==2){
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d10f      	bne.n	80010e6 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 80010c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001184 <hataKoduLcdGoster+0xf4>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	2001      	movs	r0, #1
 80010cc:	f007 fef4 	bl	8008eb8 <lcd_print>
		lcd_print(2, 2, "2");
 80010d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001190 <hataKoduLcdGoster+0x100>)
 80010d2:	2102      	movs	r1, #2
 80010d4:	2002      	movs	r0, #2
 80010d6:	f007 feef 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "          ");
 80010da:	4a2c      	ldr	r2, [pc, #176]	@ (800118c <hataKoduLcdGoster+0xfc>)
 80010dc:	2107      	movs	r1, #7
 80010de:	2002      	movs	r0, #2
 80010e0:	f007 feea 	bl	8008eb8 <lcd_print>
}
 80010e4:	e04a      	b.n	800117c <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d10f      	bne.n	800110c <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 80010ec:	4a25      	ldr	r2, [pc, #148]	@ (8001184 <hataKoduLcdGoster+0xf4>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	2001      	movs	r0, #1
 80010f2:	f007 fee1 	bl	8008eb8 <lcd_print>
		lcd_print(2, 3, "3");
 80010f6:	4a27      	ldr	r2, [pc, #156]	@ (8001194 <hataKoduLcdGoster+0x104>)
 80010f8:	2103      	movs	r1, #3
 80010fa:	2002      	movs	r0, #2
 80010fc:	f007 fedc 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "          ");
 8001100:	4a22      	ldr	r2, [pc, #136]	@ (800118c <hataKoduLcdGoster+0xfc>)
 8001102:	2107      	movs	r1, #7
 8001104:	2002      	movs	r0, #2
 8001106:	f007 fed7 	bl	8008eb8 <lcd_print>
}
 800110a:	e037      	b.n	800117c <hataKoduLcdGoster+0xec>
	} else if(x==4){
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d10f      	bne.n	8001132 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8001112:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <hataKoduLcdGoster+0xf4>)
 8001114:	2101      	movs	r1, #1
 8001116:	2001      	movs	r0, #1
 8001118:	f007 fece 	bl	8008eb8 <lcd_print>
		lcd_print(2, 4, "4");
 800111c:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <hataKoduLcdGoster+0x108>)
 800111e:	2104      	movs	r1, #4
 8001120:	2002      	movs	r0, #2
 8001122:	f007 fec9 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "          ");
 8001126:	4a19      	ldr	r2, [pc, #100]	@ (800118c <hataKoduLcdGoster+0xfc>)
 8001128:	2107      	movs	r1, #7
 800112a:	2002      	movs	r0, #2
 800112c:	f007 fec4 	bl	8008eb8 <lcd_print>
}
 8001130:	e024      	b.n	800117c <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d10f      	bne.n	8001158 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <hataKoduLcdGoster+0xf4>)
 800113a:	2101      	movs	r1, #1
 800113c:	2001      	movs	r0, #1
 800113e:	f007 febb 	bl	8008eb8 <lcd_print>
		lcd_print(2, 5, "5");
 8001142:	4a16      	ldr	r2, [pc, #88]	@ (800119c <hataKoduLcdGoster+0x10c>)
 8001144:	2105      	movs	r1, #5
 8001146:	2002      	movs	r0, #2
 8001148:	f007 feb6 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "          ");
 800114c:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <hataKoduLcdGoster+0xfc>)
 800114e:	2107      	movs	r1, #7
 8001150:	2002      	movs	r0, #2
 8001152:	f007 feb1 	bl	8008eb8 <lcd_print>
}
 8001156:	e011      	b.n	800117c <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d10e      	bne.n	800117c <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <hataKoduLcdGoster+0xf4>)
 8001160:	2101      	movs	r1, #1
 8001162:	2001      	movs	r0, #1
 8001164:	f007 fea8 	bl	8008eb8 <lcd_print>
		lcd_print(2, 6, "6");
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <hataKoduLcdGoster+0x110>)
 800116a:	2106      	movs	r1, #6
 800116c:	2002      	movs	r0, #2
 800116e:	f007 fea3 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "          ");
 8001172:	4a06      	ldr	r2, [pc, #24]	@ (800118c <hataKoduLcdGoster+0xfc>)
 8001174:	2107      	movs	r1, #7
 8001176:	2002      	movs	r0, #2
 8001178:	f007 fe9e 	bl	8008eb8 <lcd_print>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20001e60 	.word	0x20001e60
 8001188:	0800ef44 	.word	0x0800ef44
 800118c:	0800ef48 	.word	0x0800ef48
 8001190:	0800ef54 	.word	0x0800ef54
 8001194:	0800ef58 	.word	0x0800ef58
 8001198:	0800ef5c 	.word	0x0800ef5c
 800119c:	0800ef60 	.word	0x0800ef60
 80011a0:	0800ef64 	.word	0x0800ef64

080011a4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	e009      	b.n	80011c4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <eepromDataFillWithEmpty+0x38>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	4a09      	ldr	r2, [pc, #36]	@ (80011e0 <eepromDataFillWithEmpty+0x3c>)
 80011ba:	2100      	movs	r1, #0
 80011bc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <eepromDataFillWithEmpty+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbf0      	blt.n	80011b0 <eepromDataFillWithEmpty+0xc>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000006c 	.word	0x2000006c
 80011e0:	200014a0 	.word	0x200014a0
 80011e4:	20000094 	.word	0x20000094

080011e8 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80011fa:	4b50      	ldr	r3, [pc, #320]	@ (800133c <i2cTest+0x154>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b4e      	ldr	r3, [pc, #312]	@ (800133c <i2cTest+0x154>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800120a:	484c      	ldr	r0, [pc, #304]	@ (800133c <i2cTest+0x154>)
 800120c:	f009 fb1c 	bl	800a848 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8001214:	2311      	movs	r3, #17
 8001216:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001218:	2301      	movs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4846      	ldr	r0, [pc, #280]	@ (8001340 <i2cTest+0x158>)
 8001226:	f008 ff23 	bl	800a070 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2140      	movs	r1, #64	@ 0x40
 800122e:	4844      	ldr	r0, [pc, #272]	@ (8001340 <i2cTest+0x158>)
 8001230:	f009 f995 	bl	800a55e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2180      	movs	r1, #128	@ 0x80
 8001238:	4841      	ldr	r0, [pc, #260]	@ (8001340 <i2cTest+0x158>)
 800123a:	f009 f990 	bl	800a55e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
 8001240:	f008 fba6 	bl	8009990 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001244:	bf00      	nop
 8001246:	2140      	movs	r1, #64	@ 0x40
 8001248:	483d      	ldr	r0, [pc, #244]	@ (8001340 <i2cTest+0x158>)
 800124a:	f009 f971 	bl	800a530 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d006      	beq.n	8001262 <i2cTest+0x7a>
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	483a      	ldr	r0, [pc, #232]	@ (8001340 <i2cTest+0x158>)
 8001258:	f009 f96a 	bl	800a530 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d1f1      	bne.n	8001246 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2180      	movs	r1, #128	@ 0x80
 8001266:	4836      	ldr	r0, [pc, #216]	@ (8001340 <i2cTest+0x158>)
 8001268:	f009 f979 	bl	800a55e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f008 fb8f 	bl	8009990 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001272:	bf00      	nop
 8001274:	2180      	movs	r1, #128	@ 0x80
 8001276:	4832      	ldr	r0, [pc, #200]	@ (8001340 <i2cTest+0x158>)
 8001278:	f009 f95a 	bl	800a530 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d0f8      	beq.n	8001274 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	482e      	ldr	r0, [pc, #184]	@ (8001340 <i2cTest+0x158>)
 8001288:	f009 f969 	bl	800a55e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800128c:	200a      	movs	r0, #10
 800128e:	f008 fb7f 	bl	8009990 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001292:	bf00      	nop
 8001294:	2140      	movs	r1, #64	@ 0x40
 8001296:	482a      	ldr	r0, [pc, #168]	@ (8001340 <i2cTest+0x158>)
 8001298:	f009 f94a 	bl	800a530 <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d0f8      	beq.n	8001294 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2140      	movs	r1, #64	@ 0x40
 80012a6:	4826      	ldr	r0, [pc, #152]	@ (8001340 <i2cTest+0x158>)
 80012a8:	f009 f959 	bl	800a55e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f008 fb6f 	bl	8009990 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80012b2:	bf00      	nop
 80012b4:	2140      	movs	r1, #64	@ 0x40
 80012b6:	4822      	ldr	r0, [pc, #136]	@ (8001340 <i2cTest+0x158>)
 80012b8:	f009 f93a 	bl	800a530 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1f8      	bne.n	80012b4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	481e      	ldr	r0, [pc, #120]	@ (8001340 <i2cTest+0x158>)
 80012c8:	f009 f949 	bl	800a55e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f008 fb5f 	bl	8009990 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80012d2:	bf00      	nop
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	481a      	ldr	r0, [pc, #104]	@ (8001340 <i2cTest+0x158>)
 80012d8:	f009 f92a 	bl	800a530 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d1f8      	bne.n	80012d4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e2:	23c0      	movs	r3, #192	@ 0xc0
 80012e4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80012e6:	2312      	movs	r3, #18
 80012e8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4812      	ldr	r0, [pc, #72]	@ (8001340 <i2cTest+0x158>)
 80012f8:	f008 feba 	bl	800a070 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <i2cTest+0x154>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <i2cTest+0x154>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800130a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <i2cTest+0x154>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <i2cTest+0x154>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800131a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <i2cTest+0x154>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <i2cTest+0x154>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <i2cTest+0x154>)
 800132e:	f009 f947 	bl	800a5c0 <HAL_I2C_Init>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20001eec 	.word	0x20001eec
 8001340:	40010c00 	.word	0x40010c00

08001344 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800134e:	20c8      	movs	r0, #200	@ 0xc8
 8001350:	f008 fb1e 	bl	8009990 <HAL_Delay>
	lcd_clear();
 8001354:	f007 fddc 	bl	8008f10 <lcd_clear>
	if(type == 1 && page == 0) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d13e      	bne.n	80013dc <printTemplate+0x98>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d13b      	bne.n	80013dc <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001364:	4a9a      	ldr	r2, [pc, #616]	@ (80015d0 <printTemplate+0x28c>)
 8001366:	2101      	movs	r1, #1
 8001368:	2001      	movs	r0, #1
 800136a:	f007 fda5 	bl	8008eb8 <lcd_print>
		lcd_print(2, 3, "0");
 800136e:	4a99      	ldr	r2, [pc, #612]	@ (80015d4 <printTemplate+0x290>)
 8001370:	2103      	movs	r1, #3
 8001372:	2002      	movs	r0, #2
 8001374:	f007 fda0 	bl	8008eb8 <lcd_print>
		lcd_print(2, 4, "1");
 8001378:	4a97      	ldr	r2, [pc, #604]	@ (80015d8 <printTemplate+0x294>)
 800137a:	2104      	movs	r1, #4
 800137c:	2002      	movs	r0, #2
 800137e:	f007 fd9b 	bl	8008eb8 <lcd_print>
		lcd_print(2, 5, "2");
 8001382:	4a96      	ldr	r2, [pc, #600]	@ (80015dc <printTemplate+0x298>)
 8001384:	2105      	movs	r1, #5
 8001386:	2002      	movs	r0, #2
 8001388:	f007 fd96 	bl	8008eb8 <lcd_print>
		lcd_print(2, 6, "3");
 800138c:	4a94      	ldr	r2, [pc, #592]	@ (80015e0 <printTemplate+0x29c>)
 800138e:	2106      	movs	r1, #6
 8001390:	2002      	movs	r0, #2
 8001392:	f007 fd91 	bl	8008eb8 <lcd_print>
		lcd_print(2, 7, "4");
 8001396:	4a93      	ldr	r2, [pc, #588]	@ (80015e4 <printTemplate+0x2a0>)
 8001398:	2107      	movs	r1, #7
 800139a:	2002      	movs	r0, #2
 800139c:	f007 fd8c 	bl	8008eb8 <lcd_print>
		lcd_print(2, 10, "5");
 80013a0:	4a91      	ldr	r2, [pc, #580]	@ (80015e8 <printTemplate+0x2a4>)
 80013a2:	210a      	movs	r1, #10
 80013a4:	2002      	movs	r0, #2
 80013a6:	f007 fd87 	bl	8008eb8 <lcd_print>
		lcd_print(2, 11, "6");
 80013aa:	4a90      	ldr	r2, [pc, #576]	@ (80015ec <printTemplate+0x2a8>)
 80013ac:	210b      	movs	r1, #11
 80013ae:	2002      	movs	r0, #2
 80013b0:	f007 fd82 	bl	8008eb8 <lcd_print>
		lcd_print(2, 12, "7");
 80013b4:	4a8e      	ldr	r2, [pc, #568]	@ (80015f0 <printTemplate+0x2ac>)
 80013b6:	210c      	movs	r1, #12
 80013b8:	2002      	movs	r0, #2
 80013ba:	f007 fd7d 	bl	8008eb8 <lcd_print>
		lcd_print(2, 13, "8");
 80013be:	4a8d      	ldr	r2, [pc, #564]	@ (80015f4 <printTemplate+0x2b0>)
 80013c0:	210d      	movs	r1, #13
 80013c2:	2002      	movs	r0, #2
 80013c4:	f007 fd78 	bl	8008eb8 <lcd_print>
		lcd_print(2, 14, "9");
 80013c8:	4a8b      	ldr	r2, [pc, #556]	@ (80015f8 <printTemplate+0x2b4>)
 80013ca:	210e      	movs	r1, #14
 80013cc:	2002      	movs	r0, #2
 80013ce:	f007 fd73 	bl	8008eb8 <lcd_print>
		lcd_gotoxy(2, 3);
 80013d2:	2103      	movs	r1, #3
 80013d4:	2002      	movs	r0, #2
 80013d6:	f007 fd50 	bl	8008e7a <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80013da:	e0f5      	b.n	80015c8 <printTemplate+0x284>
	} else if(type == 2) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d178      	bne.n	80014d4 <printTemplate+0x190>
		if(page == 1) {
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d114      	bne.n	8001412 <printTemplate+0xce>
			lcd_clear();
 80013e8:	f007 fd92 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f008 facf 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80013f2:	4a82      	ldr	r2, [pc, #520]	@ (80015fc <printTemplate+0x2b8>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	2001      	movs	r0, #1
 80013f8:	f007 fd5e 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80013fc:	4a80      	ldr	r2, [pc, #512]	@ (8001600 <printTemplate+0x2bc>)
 80013fe:	2107      	movs	r1, #7
 8001400:	2001      	movs	r0, #1
 8001402:	f007 fd59 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001406:	4a7f      	ldr	r2, [pc, #508]	@ (8001604 <printTemplate+0x2c0>)
 8001408:	2101      	movs	r1, #1
 800140a:	2002      	movs	r0, #2
 800140c:	f007 fd54 	bl	8008eb8 <lcd_print>
}
 8001410:	e0da      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 2) {
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d114      	bne.n	8001442 <printTemplate+0xfe>
			lcd_clear();
 8001418:	f007 fd7a 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	@ 0x64
 800141e:	f008 fab7 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001422:	4a79      	ldr	r2, [pc, #484]	@ (8001608 <printTemplate+0x2c4>)
 8001424:	2101      	movs	r1, #1
 8001426:	2001      	movs	r0, #1
 8001428:	f007 fd46 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800142c:	4a74      	ldr	r2, [pc, #464]	@ (8001600 <printTemplate+0x2bc>)
 800142e:	2107      	movs	r1, #7
 8001430:	2001      	movs	r0, #1
 8001432:	f007 fd41 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001436:	4a75      	ldr	r2, [pc, #468]	@ (800160c <printTemplate+0x2c8>)
 8001438:	2101      	movs	r1, #1
 800143a:	2002      	movs	r0, #2
 800143c:	f007 fd3c 	bl	8008eb8 <lcd_print>
}
 8001440:	e0c2      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 3) {
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d114      	bne.n	8001472 <printTemplate+0x12e>
			lcd_clear();
 8001448:	f007 fd62 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	@ 0x64
 800144e:	f008 fa9f 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001452:	4a6a      	ldr	r2, [pc, #424]	@ (80015fc <printTemplate+0x2b8>)
 8001454:	2101      	movs	r1, #1
 8001456:	2001      	movs	r0, #1
 8001458:	f007 fd2e 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800145c:	4a68      	ldr	r2, [pc, #416]	@ (8001600 <printTemplate+0x2bc>)
 800145e:	2107      	movs	r1, #7
 8001460:	2001      	movs	r0, #1
 8001462:	f007 fd29 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001466:	4a6a      	ldr	r2, [pc, #424]	@ (8001610 <printTemplate+0x2cc>)
 8001468:	2101      	movs	r1, #1
 800146a:	2002      	movs	r0, #2
 800146c:	f007 fd24 	bl	8008eb8 <lcd_print>
}
 8001470:	e0aa      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 4) {
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d114      	bne.n	80014a2 <printTemplate+0x15e>
			lcd_clear();
 8001478:	f007 fd4a 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 800147c:	2064      	movs	r0, #100	@ 0x64
 800147e:	f008 fa87 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001482:	4a5e      	ldr	r2, [pc, #376]	@ (80015fc <printTemplate+0x2b8>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f007 fd16 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800148c:	4a5c      	ldr	r2, [pc, #368]	@ (8001600 <printTemplate+0x2bc>)
 800148e:	2107      	movs	r1, #7
 8001490:	2001      	movs	r0, #1
 8001492:	f007 fd11 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001496:	4a5f      	ldr	r2, [pc, #380]	@ (8001614 <printTemplate+0x2d0>)
 8001498:	2101      	movs	r1, #1
 800149a:	2002      	movs	r0, #2
 800149c:	f007 fd0c 	bl	8008eb8 <lcd_print>
}
 80014a0:	e092      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 5) {
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	f040 808f 	bne.w	80015c8 <printTemplate+0x284>
			lcd_clear();
 80014aa:	f007 fd31 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f008 fa6e 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80014b4:	4a51      	ldr	r2, [pc, #324]	@ (80015fc <printTemplate+0x2b8>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2001      	movs	r0, #1
 80014ba:	f007 fcfd 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80014be:	4a50      	ldr	r2, [pc, #320]	@ (8001600 <printTemplate+0x2bc>)
 80014c0:	2107      	movs	r1, #7
 80014c2:	2001      	movs	r0, #1
 80014c4:	f007 fcf8 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80014c8:	4a53      	ldr	r2, [pc, #332]	@ (8001618 <printTemplate+0x2d4>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	2002      	movs	r0, #2
 80014ce:	f007 fcf3 	bl	8008eb8 <lcd_print>
}
 80014d2:	e079      	b.n	80015c8 <printTemplate+0x284>
	} else if(type == 3) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d176      	bne.n	80015c8 <printTemplate+0x284>
		if(page == 1) {
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d114      	bne.n	800150a <printTemplate+0x1c6>
			lcd_clear();
 80014e0:	f007 fd16 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	@ 0x64
 80014e6:	f008 fa53 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80014ea:	4a4c      	ldr	r2, [pc, #304]	@ (800161c <printTemplate+0x2d8>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2001      	movs	r0, #1
 80014f0:	f007 fce2 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80014f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001620 <printTemplate+0x2dc>)
 80014f6:	2107      	movs	r1, #7
 80014f8:	2001      	movs	r0, #1
 80014fa:	f007 fcdd 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80014fe:	4a41      	ldr	r2, [pc, #260]	@ (8001604 <printTemplate+0x2c0>)
 8001500:	2101      	movs	r1, #1
 8001502:	2002      	movs	r0, #2
 8001504:	f007 fcd8 	bl	8008eb8 <lcd_print>
}
 8001508:	e05e      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 2) {
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d114      	bne.n	800153a <printTemplate+0x1f6>
			lcd_clear();
 8001510:	f007 fcfe 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 8001514:	2064      	movs	r0, #100	@ 0x64
 8001516:	f008 fa3b 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800151a:	4a40      	ldr	r2, [pc, #256]	@ (800161c <printTemplate+0x2d8>)
 800151c:	2101      	movs	r1, #1
 800151e:	2001      	movs	r0, #1
 8001520:	f007 fcca 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001524:	4a3e      	ldr	r2, [pc, #248]	@ (8001620 <printTemplate+0x2dc>)
 8001526:	2107      	movs	r1, #7
 8001528:	2001      	movs	r0, #1
 800152a:	f007 fcc5 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800152e:	4a37      	ldr	r2, [pc, #220]	@ (800160c <printTemplate+0x2c8>)
 8001530:	2101      	movs	r1, #1
 8001532:	2002      	movs	r0, #2
 8001534:	f007 fcc0 	bl	8008eb8 <lcd_print>
}
 8001538:	e046      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 3) {
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d114      	bne.n	800156a <printTemplate+0x226>
			lcd_clear();
 8001540:	f007 fce6 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 8001544:	2064      	movs	r0, #100	@ 0x64
 8001546:	f008 fa23 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800154a:	4a34      	ldr	r2, [pc, #208]	@ (800161c <printTemplate+0x2d8>)
 800154c:	2101      	movs	r1, #1
 800154e:	2001      	movs	r0, #1
 8001550:	f007 fcb2 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001554:	4a32      	ldr	r2, [pc, #200]	@ (8001620 <printTemplate+0x2dc>)
 8001556:	2107      	movs	r1, #7
 8001558:	2001      	movs	r0, #1
 800155a:	f007 fcad 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800155e:	4a2c      	ldr	r2, [pc, #176]	@ (8001610 <printTemplate+0x2cc>)
 8001560:	2101      	movs	r1, #1
 8001562:	2002      	movs	r0, #2
 8001564:	f007 fca8 	bl	8008eb8 <lcd_print>
}
 8001568:	e02e      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 4) {
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d114      	bne.n	800159a <printTemplate+0x256>
			lcd_clear();
 8001570:	f007 fcce 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	@ 0x64
 8001576:	f008 fa0b 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800157a:	4a28      	ldr	r2, [pc, #160]	@ (800161c <printTemplate+0x2d8>)
 800157c:	2101      	movs	r1, #1
 800157e:	2001      	movs	r0, #1
 8001580:	f007 fc9a 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001584:	4a26      	ldr	r2, [pc, #152]	@ (8001620 <printTemplate+0x2dc>)
 8001586:	2107      	movs	r1, #7
 8001588:	2001      	movs	r0, #1
 800158a:	f007 fc95 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <printTemplate+0x2d0>)
 8001590:	2101      	movs	r1, #1
 8001592:	2002      	movs	r0, #2
 8001594:	f007 fc90 	bl	8008eb8 <lcd_print>
}
 8001598:	e016      	b.n	80015c8 <printTemplate+0x284>
		} else if(page == 5) {
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d113      	bne.n	80015c8 <printTemplate+0x284>
			lcd_clear();
 80015a0:	f007 fcb6 	bl	8008f10 <lcd_clear>
			HAL_Delay(100);
 80015a4:	2064      	movs	r0, #100	@ 0x64
 80015a6:	f008 f9f3 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <printTemplate+0x2d8>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	2001      	movs	r0, #1
 80015b0:	f007 fc82 	bl	8008eb8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80015b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001620 <printTemplate+0x2dc>)
 80015b6:	2107      	movs	r1, #7
 80015b8:	2001      	movs	r0, #1
 80015ba:	f007 fc7d 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80015be:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <printTemplate+0x2d4>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	2002      	movs	r0, #2
 80015c4:	f007 fc78 	bl	8008eb8 <lcd_print>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	0800ef68 	.word	0x0800ef68
 80015d4:	0800ef70 	.word	0x0800ef70
 80015d8:	0800ef74 	.word	0x0800ef74
 80015dc:	0800ef78 	.word	0x0800ef78
 80015e0:	0800ef7c 	.word	0x0800ef7c
 80015e4:	0800ef80 	.word	0x0800ef80
 80015e8:	0800ef84 	.word	0x0800ef84
 80015ec:	0800ef88 	.word	0x0800ef88
 80015f0:	0800ef8c 	.word	0x0800ef8c
 80015f4:	0800ef90 	.word	0x0800ef90
 80015f8:	0800ef94 	.word	0x0800ef94
 80015fc:	0800ef98 	.word	0x0800ef98
 8001600:	20001524 	.word	0x20001524
 8001604:	0800efac 	.word	0x0800efac
 8001608:	0800efc0 	.word	0x0800efc0
 800160c:	0800efc8 	.word	0x0800efc8
 8001610:	0800efdc 	.word	0x0800efdc
 8001614:	0800eff0 	.word	0x0800eff0
 8001618:	0800f004 	.word	0x0800f004
 800161c:	0800f018 	.word	0x0800f018
 8001620:	20001534 	.word	0x20001534

08001624 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10a      	bne.n	8001648 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8001632:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <printCredentials+0x70>)
 8001634:	2101      	movs	r1, #1
 8001636:	2002      	movs	r0, #2
 8001638:	f007 fc3e 	bl	8008eb8 <lcd_print>
		lcd_print(2, 13, "    ");
 800163c:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <printCredentials+0x74>)
 800163e:	210d      	movs	r1, #13
 8001640:	2002      	movs	r0, #2
 8001642:	f007 fc39 	bl	8008eb8 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8001646:	e021      	b.n	800168c <printCredentials+0x68>
	} else if(type == 2) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d10f      	bne.n	800166e <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 800164e:	4a13      	ldr	r2, [pc, #76]	@ (800169c <printCredentials+0x78>)
 8001650:	2101      	movs	r1, #1
 8001652:	2001      	movs	r0, #1
 8001654:	f007 fc30 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, "                ");
 8001658:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <printCredentials+0x7c>)
 800165a:	2101      	movs	r1, #1
 800165c:	2002      	movs	r0, #2
 800165e:	f007 fc2b 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8001662:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <printCredentials+0x80>)
 8001664:	2101      	movs	r1, #1
 8001666:	2002      	movs	r0, #2
 8001668:	f007 fc26 	bl	8008eb8 <lcd_print>
}
 800166c:	e00e      	b.n	800168c <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800166e:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <printCredentials+0x84>)
 8001670:	2101      	movs	r1, #1
 8001672:	2001      	movs	r0, #1
 8001674:	f007 fc20 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, "                ");
 8001678:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <printCredentials+0x7c>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f007 fc1b 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <printCredentials+0x88>)
 8001684:	2101      	movs	r1, #1
 8001686:	2002      	movs	r0, #2
 8001688:	f007 fc16 	bl	8008eb8 <lcd_print>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20001518 	.word	0x20001518
 8001698:	0800f02c 	.word	0x0800f02c
 800169c:	0800f034 	.word	0x0800f034
 80016a0:	0800f048 	.word	0x0800f048
 80016a4:	20001524 	.word	0x20001524
 80016a8:	0800f05c 	.word	0x0800f05c
 80016ac:	20001534 	.word	0x20001534

080016b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016b4:	f3bf 8f4f 	dsb	sy
}
 80016b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <__NVIC_SystemReset+0x24>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016c2:	4904      	ldr	r1, [pc, #16]	@ (80016d4 <__NVIC_SystemReset+0x24>)
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_SystemReset+0x28>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016ca:	f3bf 8f4f 	dsb	sy
}
 80016ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <__NVIC_SystemReset+0x20>
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	05fa0004 	.word	0x05fa0004

080016dc <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e2:	2101      	movs	r1, #1
 80016e4:	488e      	ldr	r0, [pc, #568]	@ (8001920 <menu+0x244>)
 80016e6:	f008 ff23 	bl	800a530 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	f040 8099 	bne.w	8001824 <menu+0x148>
 80016f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001924 <menu+0x248>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f083 0301 	eor.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8091 	beq.w	8001824 <menu+0x148>
		menuSayac = menuSayac+1;
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <menu+0x24c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b87      	ldr	r3, [pc, #540]	@ (8001928 <menu+0x24c>)
 800170c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800170e:	4b86      	ldr	r3, [pc, #536]	@ (8001928 <menu+0x24c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b24      	cmp	r3, #36	@ 0x24
 8001714:	d102      	bne.n	800171c <menu+0x40>
			menuSayac = 1;
 8001716:	4b84      	ldr	r3, [pc, #528]	@ (8001928 <menu+0x24c>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800171c:	4b82      	ldr	r3, [pc, #520]	@ (8001928 <menu+0x24c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d106      	bne.n	8001732 <menu+0x56>
 8001724:	4b81      	ldr	r3, [pc, #516]	@ (800192c <menu+0x250>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <menu+0x56>
			menuSayac = 21;
 800172c:	4b7e      	ldr	r3, [pc, #504]	@ (8001928 <menu+0x24c>)
 800172e:	2215      	movs	r2, #21
 8001730:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001732:	4b7d      	ldr	r3, [pc, #500]	@ (8001928 <menu+0x24c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d106      	bne.n	8001748 <menu+0x6c>
 800173a:	4b7d      	ldr	r3, [pc, #500]	@ (8001930 <menu+0x254>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <menu+0x6c>
			menuSayac = 16;
 8001742:	4b79      	ldr	r3, [pc, #484]	@ (8001928 <menu+0x24c>)
 8001744:	2210      	movs	r2, #16
 8001746:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001748:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <menu+0x24c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b0d      	cmp	r3, #13
 800174e:	d106      	bne.n	800175e <menu+0x82>
 8001750:	4b77      	ldr	r3, [pc, #476]	@ (8001930 <menu+0x254>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <menu+0x82>
			menuSayac = 16;
 8001758:	4b73      	ldr	r3, [pc, #460]	@ (8001928 <menu+0x24c>)
 800175a:	2210      	movs	r2, #16
 800175c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800175e:	4b72      	ldr	r3, [pc, #456]	@ (8001928 <menu+0x24c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b09      	cmp	r3, #9
 8001764:	d106      	bne.n	8001774 <menu+0x98>
 8001766:	4b72      	ldr	r3, [pc, #456]	@ (8001930 <menu+0x254>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d102      	bne.n	8001774 <menu+0x98>
			menuSayac = 13;
 800176e:	4b6e      	ldr	r3, [pc, #440]	@ (8001928 <menu+0x24c>)
 8001770:	220d      	movs	r2, #13
 8001772:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001774:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <menu+0x24c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b0a      	cmp	r3, #10
 800177a:	d10a      	bne.n	8001792 <menu+0xb6>
 800177c:	4b6d      	ldr	r3, [pc, #436]	@ (8001934 <menu+0x258>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d003      	beq.n	800178c <menu+0xb0>
 8001784:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <menu+0x258>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d102      	bne.n	8001792 <menu+0xb6>
			menuSayac = 11;
 800178c:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <menu+0x24c>)
 800178e:	220b      	movs	r2, #11
 8001790:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001792:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <menu+0x24c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d10e      	bne.n	80017b8 <menu+0xdc>
 800179a:	4b67      	ldr	r3, [pc, #412]	@ (8001938 <menu+0x25c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d003      	beq.n	80017aa <menu+0xce>
 80017a2:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <menu+0x25c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d106      	bne.n	80017b8 <menu+0xdc>
 80017aa:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <menu+0x254>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <menu+0xdc>
			menuSayac = 16;
 80017b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <menu+0x24c>)
 80017b4:	2210      	movs	r2, #16
 80017b6:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80017b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001928 <menu+0x24c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d10e      	bne.n	80017de <menu+0x102>
 80017c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001938 <menu+0x25c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d003      	beq.n	80017d0 <menu+0xf4>
 80017c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001938 <menu+0x25c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d106      	bne.n	80017de <menu+0x102>
 80017d0:	4b57      	ldr	r3, [pc, #348]	@ (8001930 <menu+0x254>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d102      	bne.n	80017de <menu+0x102>
			menuSayac = 13;
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <menu+0x24c>)
 80017da:	220d      	movs	r2, #13
 80017dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017de:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <menu+0x24c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	d106      	bne.n	80017f4 <menu+0x118>
 80017e6:	4b55      	ldr	r3, [pc, #340]	@ (800193c <menu+0x260>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <menu+0x118>
			menuSayac = 16;
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <menu+0x24c>)
 80017f0:	2210      	movs	r2, #16
 80017f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80017f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <menu+0x24c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b18      	cmp	r3, #24
 80017fa:	d106      	bne.n	800180a <menu+0x12e>
 80017fc:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <menu+0x250>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <menu+0x12e>
			menuSayac = 26;
 8001804:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <menu+0x24c>)
 8001806:	221a      	movs	r2, #26
 8001808:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <menu+0x24c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b21      	cmp	r3, #33	@ 0x21
 8001810:	d106      	bne.n	8001820 <menu+0x144>
 8001812:	4b4b      	ldr	r3, [pc, #300]	@ (8001940 <menu+0x264>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <menu+0x144>
			menuSayac = 35;
 800181a:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <menu+0x24c>)
 800181c:	2223      	movs	r2, #35	@ 0x23
 800181e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001820:	f002 fca2 	bl	8004168 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001824:	2108      	movs	r1, #8
 8001826:	4847      	ldr	r0, [pc, #284]	@ (8001944 <menu+0x268>)
 8001828:	f008 fe82 	bl	800a530 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b01      	cmp	r3, #1
 8001830:	f040 8097 	bne.w	8001962 <menu+0x286>
 8001834:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <menu+0x248>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 808f 	beq.w	8001962 <menu+0x286>
		if (menuSayac <= 1) {
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <menu+0x24c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d802      	bhi.n	8001852 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <menu+0x24c>)
 800184e:	2224      	movs	r2, #36	@ 0x24
 8001850:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001852:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <menu+0x24c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	3b01      	subs	r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <menu+0x24c>)
 800185c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <menu+0x24c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b14      	cmp	r3, #20
 8001864:	d106      	bne.n	8001874 <menu+0x198>
 8001866:	4b31      	ldr	r3, [pc, #196]	@ (800192c <menu+0x250>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <menu+0x198>
			menuSayac = 17;
 800186e:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <menu+0x24c>)
 8001870:	2211      	movs	r2, #17
 8001872:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001874:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <menu+0x24c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d106      	bne.n	800188a <menu+0x1ae>
 800187c:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <menu+0x254>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <menu+0x1ae>
			menuSayac = 7;
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <menu+0x24c>)
 8001886:	2207      	movs	r2, #7
 8001888:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <menu+0x24c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	d106      	bne.n	80018a0 <menu+0x1c4>
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <menu+0x254>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <menu+0x1c4>
			menuSayac = 12;
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <menu+0x24c>)
 800189c:	220c      	movs	r2, #12
 800189e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80018a0:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <menu+0x24c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d106      	bne.n	80018b6 <menu+0x1da>
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <menu+0x254>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d102      	bne.n	80018b6 <menu+0x1da>
			menuSayac = 8;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <menu+0x24c>)
 80018b2:	2208      	movs	r2, #8
 80018b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <menu+0x24c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d10a      	bne.n	80018d4 <menu+0x1f8>
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <menu+0x258>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d003      	beq.n	80018ce <menu+0x1f2>
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <menu+0x258>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d102      	bne.n	80018d4 <menu+0x1f8>
			menuSayac = 9;
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <menu+0x24c>)
 80018d0:	2209      	movs	r2, #9
 80018d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <menu+0x24c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d10a      	bne.n	80018f2 <menu+0x216>
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <menu+0x25c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d003      	beq.n	80018ec <menu+0x210>
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <menu+0x25c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d102      	bne.n	80018f2 <menu+0x216>
			menuSayac = 11;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <menu+0x24c>)
 80018ee:	220b      	movs	r2, #11
 80018f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <menu+0x24c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	d106      	bne.n	8001908 <menu+0x22c>
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <menu+0x260>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <menu+0x22c>
			menuSayac = 14;
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <menu+0x24c>)
 8001904:	220e      	movs	r2, #14
 8001906:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <menu+0x24c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b19      	cmp	r3, #25
 800190e:	d11b      	bne.n	8001948 <menu+0x26c>
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <menu+0x250>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d117      	bne.n	8001948 <menu+0x26c>
			menuSayac = 23;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <menu+0x24c>)
 800191a:	2217      	movs	r2, #23
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e013      	b.n	8001948 <menu+0x26c>
 8001920:	40010800 	.word	0x40010800
 8001924:	2000159f 	.word	0x2000159f
 8001928:	20001570 	.word	0x20001570
 800192c:	2000157f 	.word	0x2000157f
 8001930:	20001578 	.word	0x20001578
 8001934:	20001579 	.word	0x20001579
 8001938:	2000157a 	.word	0x2000157a
 800193c:	2000157b 	.word	0x2000157b
 8001940:	2000159b 	.word	0x2000159b
 8001944:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001948:	4bb0      	ldr	r3, [pc, #704]	@ (8001c0c <menu+0x530>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b22      	cmp	r3, #34	@ 0x22
 800194e:	d106      	bne.n	800195e <menu+0x282>
 8001950:	4baf      	ldr	r3, [pc, #700]	@ (8001c10 <menu+0x534>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <menu+0x282>
			menuSayac = 32;
 8001958:	4bac      	ldr	r3, [pc, #688]	@ (8001c0c <menu+0x530>)
 800195a:	2220      	movs	r2, #32
 800195c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800195e:	f002 fc03 	bl	8004168 <bekle>
	}

	if (menuSayac == 0) {
 8001962:	4baa      	ldr	r3, [pc, #680]	@ (8001c0c <menu+0x530>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800196a:	4aaa      	ldr	r2, [pc, #680]	@ (8001c14 <menu+0x538>)
 800196c:	2101      	movs	r1, #1
 800196e:	2001      	movs	r0, #1
 8001970:	f007 faa2 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001974:	4aa8      	ldr	r2, [pc, #672]	@ (8001c18 <menu+0x53c>)
 8001976:	2101      	movs	r1, #1
 8001978:	2002      	movs	r0, #2
 800197a:	f007 fa9d 	bl	8008eb8 <lcd_print>
	}

	if (menuSayac == 1) {
 800197e:	4ba3      	ldr	r3, [pc, #652]	@ (8001c0c <menu+0x530>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 81f4 	bne.w	8001d70 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001988:	4aa4      	ldr	r2, [pc, #656]	@ (8001c1c <menu+0x540>)
 800198a:	2101      	movs	r1, #1
 800198c:	2001      	movs	r0, #1
 800198e:	f007 fa93 	bl	8008eb8 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001992:	4ba3      	ldr	r3, [pc, #652]	@ (8001c20 <menu+0x544>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d115      	bne.n	80019c6 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800199a:	4aa2      	ldr	r2, [pc, #648]	@ (8001c24 <menu+0x548>)
 800199c:	2101      	movs	r1, #1
 800199e:	2002      	movs	r0, #2
 80019a0:	f007 fa8a 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "   ");
 80019a4:	4aa0      	ldr	r2, [pc, #640]	@ (8001c28 <menu+0x54c>)
 80019a6:	210f      	movs	r1, #15
 80019a8:	2002      	movs	r0, #2
 80019aa:	f007 fa85 	bl	8008eb8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80019ae:	4b9f      	ldr	r3, [pc, #636]	@ (8001c2c <menu+0x550>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	220a      	movs	r2, #10
 80019b4:	499e      	ldr	r1, [pc, #632]	@ (8001c30 <menu+0x554>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00b fefe 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 80019bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001c30 <menu+0x554>)
 80019be:	210e      	movs	r1, #14
 80019c0:	2002      	movs	r0, #2
 80019c2:	f007 fa79 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80019c6:	4b96      	ldr	r3, [pc, #600]	@ (8001c20 <menu+0x544>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d115      	bne.n	80019fa <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 80019ce:	4a99      	ldr	r2, [pc, #612]	@ (8001c34 <menu+0x558>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	2002      	movs	r0, #2
 80019d4:	f007 fa70 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 80019d8:	4a97      	ldr	r2, [pc, #604]	@ (8001c38 <menu+0x55c>)
 80019da:	210f      	movs	r1, #15
 80019dc:	2002      	movs	r0, #2
 80019de:	f007 fa6b 	bl	8008eb8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80019e2:	4b96      	ldr	r3, [pc, #600]	@ (8001c3c <menu+0x560>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	220a      	movs	r2, #10
 80019e8:	4991      	ldr	r1, [pc, #580]	@ (8001c30 <menu+0x554>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f00b fee4 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 80019f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001c30 <menu+0x554>)
 80019f2:	210e      	movs	r1, #14
 80019f4:	2002      	movs	r0, #2
 80019f6:	f007 fa5f 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80019fa:	4b89      	ldr	r3, [pc, #548]	@ (8001c20 <menu+0x544>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d115      	bne.n	8001a2e <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001a02:	4a8f      	ldr	r2, [pc, #572]	@ (8001c40 <menu+0x564>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	2002      	movs	r0, #2
 8001a08:	f007 fa56 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a0c:	4a8a      	ldr	r2, [pc, #552]	@ (8001c38 <menu+0x55c>)
 8001a0e:	210f      	movs	r1, #15
 8001a10:	2002      	movs	r0, #2
 8001a12:	f007 fa51 	bl	8008eb8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001a16:	4b8b      	ldr	r3, [pc, #556]	@ (8001c44 <menu+0x568>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	220a      	movs	r2, #10
 8001a1c:	4984      	ldr	r1, [pc, #528]	@ (8001c30 <menu+0x554>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00b feca 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001a24:	4a82      	ldr	r2, [pc, #520]	@ (8001c30 <menu+0x554>)
 8001a26:	210e      	movs	r1, #14
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f007 fa45 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c20 <menu+0x544>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d115      	bne.n	8001a62 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001a36:	4a84      	ldr	r2, [pc, #528]	@ (8001c48 <menu+0x56c>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f007 fa3c 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a40:	4a7d      	ldr	r2, [pc, #500]	@ (8001c38 <menu+0x55c>)
 8001a42:	210f      	movs	r1, #15
 8001a44:	2002      	movs	r0, #2
 8001a46:	f007 fa37 	bl	8008eb8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001a4a:	4b80      	ldr	r3, [pc, #512]	@ (8001c4c <menu+0x570>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	220a      	movs	r2, #10
 8001a50:	4977      	ldr	r1, [pc, #476]	@ (8001c30 <menu+0x554>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00b feb0 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001a58:	4a75      	ldr	r2, [pc, #468]	@ (8001c30 <menu+0x554>)
 8001a5a:	210e      	movs	r1, #14
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f007 fa2b 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001a62:	4b6f      	ldr	r3, [pc, #444]	@ (8001c20 <menu+0x544>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d115      	bne.n	8001a96 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001a6a:	4a79      	ldr	r2, [pc, #484]	@ (8001c50 <menu+0x574>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f007 fa22 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a74:	4a70      	ldr	r2, [pc, #448]	@ (8001c38 <menu+0x55c>)
 8001a76:	210f      	movs	r1, #15
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f007 fa1d 	bl	8008eb8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a7e:	4b75      	ldr	r3, [pc, #468]	@ (8001c54 <menu+0x578>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	220a      	movs	r2, #10
 8001a84:	496a      	ldr	r1, [pc, #424]	@ (8001c30 <menu+0x554>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00b fe96 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001a8c:	4a68      	ldr	r2, [pc, #416]	@ (8001c30 <menu+0x554>)
 8001a8e:	210e      	movs	r1, #14
 8001a90:	2002      	movs	r0, #2
 8001a92:	f007 fa11 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a96:	4b62      	ldr	r3, [pc, #392]	@ (8001c20 <menu+0x544>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d115      	bne.n	8001aca <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c58 <menu+0x57c>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f007 fa08 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001aa8:	4a63      	ldr	r2, [pc, #396]	@ (8001c38 <menu+0x55c>)
 8001aaa:	210f      	movs	r1, #15
 8001aac:	2002      	movs	r0, #2
 8001aae:	f007 fa03 	bl	8008eb8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c5c <menu+0x580>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	220a      	movs	r2, #10
 8001ab8:	495d      	ldr	r1, [pc, #372]	@ (8001c30 <menu+0x554>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f00b fe7c 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8001c30 <menu+0x554>)
 8001ac2:	210e      	movs	r1, #14
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f007 f9f7 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001aca:	4b55      	ldr	r3, [pc, #340]	@ (8001c20 <menu+0x544>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d115      	bne.n	8001afe <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001ad2:	4a63      	ldr	r2, [pc, #396]	@ (8001c60 <menu+0x584>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f007 f9ee 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001adc:	4a56      	ldr	r2, [pc, #344]	@ (8001c38 <menu+0x55c>)
 8001ade:	210f      	movs	r1, #15
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f007 f9e9 	bl	8008eb8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <menu+0x588>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	220a      	movs	r2, #10
 8001aec:	4950      	ldr	r1, [pc, #320]	@ (8001c30 <menu+0x554>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00b fe62 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001af4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c30 <menu+0x554>)
 8001af6:	210e      	movs	r1, #14
 8001af8:	2002      	movs	r0, #2
 8001afa:	f007 f9dd 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001afe:	4b48      	ldr	r3, [pc, #288]	@ (8001c20 <menu+0x544>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d115      	bne.n	8001b32 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001b06:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <menu+0x58c>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f007 f9d4 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001b10:	4a49      	ldr	r2, [pc, #292]	@ (8001c38 <menu+0x55c>)
 8001b12:	210f      	movs	r1, #15
 8001b14:	2002      	movs	r0, #2
 8001b16:	f007 f9cf 	bl	8008eb8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b1a:	4b54      	ldr	r3, [pc, #336]	@ (8001c6c <menu+0x590>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	220a      	movs	r2, #10
 8001b20:	4943      	ldr	r1, [pc, #268]	@ (8001c30 <menu+0x554>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00b fe48 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001b28:	4a41      	ldr	r2, [pc, #260]	@ (8001c30 <menu+0x554>)
 8001b2a:	210e      	movs	r1, #14
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f007 f9c3 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b32:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <menu+0x544>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d115      	bne.n	8001b66 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001b3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c70 <menu+0x594>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f007 f9ba 	bl	8008eb8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001b44:	4a3c      	ldr	r2, [pc, #240]	@ (8001c38 <menu+0x55c>)
 8001b46:	210f      	movs	r1, #15
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f007 f9b5 	bl	8008eb8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001b4e:	4b49      	ldr	r3, [pc, #292]	@ (8001c74 <menu+0x598>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	220a      	movs	r2, #10
 8001b54:	4936      	ldr	r1, [pc, #216]	@ (8001c30 <menu+0x554>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00b fe2e 	bl	800d7b8 <itoa>
			lcd_print(2, 14, snum);
 8001b5c:	4a34      	ldr	r2, [pc, #208]	@ (8001c30 <menu+0x554>)
 8001b5e:	210e      	movs	r1, #14
 8001b60:	2002      	movs	r0, #2
 8001b62:	f007 f9a9 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <menu+0x544>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b09      	cmp	r3, #9
 8001b6c:	d115      	bne.n	8001b9a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001b6e:	4a42      	ldr	r2, [pc, #264]	@ (8001c78 <menu+0x59c>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	2002      	movs	r0, #2
 8001b74:	f007 f9a0 	bl	8008eb8 <lcd_print>
			lcd_print(2, 16, " ");
 8001b78:	4a40      	ldr	r2, [pc, #256]	@ (8001c7c <menu+0x5a0>)
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f007 f99b 	bl	8008eb8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b82:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <menu+0x5a4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	220a      	movs	r2, #10
 8001b88:	4929      	ldr	r1, [pc, #164]	@ (8001c30 <menu+0x554>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f00b fe14 	bl	800d7b8 <itoa>
			lcd_print(2, 15, snum);
 8001b90:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <menu+0x554>)
 8001b92:	210f      	movs	r1, #15
 8001b94:	2002      	movs	r0, #2
 8001b96:	f007 f98f 	bl	8008eb8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <menu+0x544>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b0a      	cmp	r3, #10
 8001ba0:	d104      	bne.n	8001bac <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001ba2:	4a38      	ldr	r2, [pc, #224]	@ (8001c84 <menu+0x5a8>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f007 f986 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bac:	2102      	movs	r1, #2
 8001bae:	4836      	ldr	r0, [pc, #216]	@ (8001c88 <menu+0x5ac>)
 8001bb0:	f008 fcbe 	bl	800a530 <HAL_GPIO_ReadPin>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d119      	bne.n	8001bee <menu+0x512>
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <menu+0x5b0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f083 0301 	eor.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d012      	beq.n	8001bee <menu+0x512>
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <menu+0x5b4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10e      	bne.n	8001bee <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <menu+0x544>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <menu+0x544>)
 8001bda:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <menu+0x544>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d902      	bls.n	8001bea <menu+0x50e>
				hataGostermeSirasi = 0;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <menu+0x544>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bea:	f002 fabd 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4825      	ldr	r0, [pc, #148]	@ (8001c88 <menu+0x5ac>)
 8001bf2:	f008 fc9d 	bl	800a530 <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d15e      	bne.n	8001cba <menu+0x5de>
 8001bfc:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <menu+0x5b0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d057      	beq.n	8001cba <menu+0x5de>
 8001c0a:	e043      	b.n	8001c94 <menu+0x5b8>
 8001c0c:	20001570 	.word	0x20001570
 8001c10:	2000159b 	.word	0x2000159b
 8001c14:	200017d0 	.word	0x200017d0
 8001c18:	200017e4 	.word	0x200017e4
 8001c1c:	200017f8 	.word	0x200017f8
 8001c20:	20001572 	.word	0x20001572
 8001c24:	2000180c 	.word	0x2000180c
 8001c28:	0800f070 	.word	0x0800f070
 8001c2c:	20001591 	.word	0x20001591
 8001c30:	20001510 	.word	0x20001510
 8001c34:	20001820 	.word	0x20001820
 8001c38:	0800f074 	.word	0x0800f074
 8001c3c:	20001592 	.word	0x20001592
 8001c40:	20001834 	.word	0x20001834
 8001c44:	20001593 	.word	0x20001593
 8001c48:	20001848 	.word	0x20001848
 8001c4c:	20001594 	.word	0x20001594
 8001c50:	2000185c 	.word	0x2000185c
 8001c54:	20001595 	.word	0x20001595
 8001c58:	20001870 	.word	0x20001870
 8001c5c:	20001596 	.word	0x20001596
 8001c60:	20001884 	.word	0x20001884
 8001c64:	20001597 	.word	0x20001597
 8001c68:	20001898 	.word	0x20001898
 8001c6c:	20001598 	.word	0x20001598
 8001c70:	200018ac 	.word	0x200018ac
 8001c74:	20001599 	.word	0x20001599
 8001c78:	200018c0 	.word	0x200018c0
 8001c7c:	0800f078 	.word	0x0800f078
 8001c80:	2000159a 	.word	0x2000159a
 8001c84:	200018d4 	.word	0x200018d4
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	2000159f 	.word	0x2000159f
 8001c90:	2000157f 	.word	0x2000157f
 8001c94:	4b8a      	ldr	r3, [pc, #552]	@ (8001ec0 <menu+0x7e4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10e      	bne.n	8001cba <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c9c:	4b89      	ldr	r3, [pc, #548]	@ (8001ec4 <menu+0x7e8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b87      	ldr	r3, [pc, #540]	@ (8001ec4 <menu+0x7e8>)
 8001ca6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001ca8:	4b86      	ldr	r3, [pc, #536]	@ (8001ec4 <menu+0x7e8>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	d902      	bls.n	8001cb6 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001cb0:	4b84      	ldr	r3, [pc, #528]	@ (8001ec4 <menu+0x7e8>)
 8001cb2:	220a      	movs	r2, #10
 8001cb4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cb6:	f002 fa57 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001cba:	2108      	movs	r1, #8
 8001cbc:	4882      	ldr	r0, [pc, #520]	@ (8001ec8 <menu+0x7ec>)
 8001cbe:	f008 fc37 	bl	800a530 <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d153      	bne.n	8001d70 <menu+0x694>
 8001cc8:	4b80      	ldr	r3, [pc, #512]	@ (8001ecc <menu+0x7f0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04c      	beq.n	8001d70 <menu+0x694>
 8001cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec4 <menu+0x7e8>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b0a      	cmp	r3, #10
 8001cdc:	d148      	bne.n	8001d70 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001cde:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed0 <menu+0x7f4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <menu+0x7f8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001cec:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed8 <menu+0x7fc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <menu+0x7f8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001cfa:	4b78      	ldr	r3, [pc, #480]	@ (8001edc <menu+0x800>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	4b74      	ldr	r3, [pc, #464]	@ (8001ed4 <menu+0x7f8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d08:	4b75      	ldr	r3, [pc, #468]	@ (8001ee0 <menu+0x804>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	4b71      	ldr	r3, [pc, #452]	@ (8001ed4 <menu+0x7f8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d16:	4b73      	ldr	r3, [pc, #460]	@ (8001ee4 <menu+0x808>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed4 <menu+0x7f8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d24:	4b70      	ldr	r3, [pc, #448]	@ (8001ee8 <menu+0x80c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed4 <menu+0x7f8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d32:	4b6e      	ldr	r3, [pc, #440]	@ (8001eec <menu+0x810>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <menu+0x7f8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d40:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef0 <menu+0x814>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	4b63      	ldr	r3, [pc, #396]	@ (8001ed4 <menu+0x7f8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d4e:	4b69      	ldr	r3, [pc, #420]	@ (8001ef4 <menu+0x818>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <menu+0x7f8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001d5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ef8 <menu+0x81c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed4 <menu+0x7f8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001d6a:	4b64      	ldr	r3, [pc, #400]	@ (8001efc <menu+0x820>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001d70:	4b63      	ldr	r3, [pc, #396]	@ (8001f00 <menu+0x824>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 808e 	bne.w	8001e96 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001d7a:	4a62      	ldr	r2, [pc, #392]	@ (8001f04 <menu+0x828>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f007 f89a 	bl	8008eb8 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d84:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec0 <menu+0x7e4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d003      	beq.n	8001d94 <menu+0x6b8>
 8001d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <menu+0x7e4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d104      	bne.n	8001d9e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001d94:	4a5c      	ldr	r2, [pc, #368]	@ (8001f08 <menu+0x82c>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f007 f88d 	bl	8008eb8 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f0c <menu+0x830>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <menu+0x6dc>
 8001da6:	4b46      	ldr	r3, [pc, #280]	@ (8001ec0 <menu+0x7e4>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001dae:	4a58      	ldr	r2, [pc, #352]	@ (8001f10 <menu+0x834>)
 8001db0:	2101      	movs	r1, #1
 8001db2:	2002      	movs	r0, #2
 8001db4:	f007 f880 	bl	8008eb8 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001db8:	4b54      	ldr	r3, [pc, #336]	@ (8001f0c <menu+0x830>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d108      	bne.n	8001dd2 <menu+0x6f6>
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec0 <menu+0x7e4>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d104      	bne.n	8001dd2 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001dc8:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <menu+0x838>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f007 f873 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	483c      	ldr	r0, [pc, #240]	@ (8001ec8 <menu+0x7ec>)
 8001dd6:	f008 fbab 	bl	800a530 <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d119      	bne.n	8001e14 <menu+0x738>
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <menu+0x7f0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <menu+0x738>
 8001dee:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <menu+0x7e4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001df6:	4b45      	ldr	r3, [pc, #276]	@ (8001f0c <menu+0x830>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <menu+0x830>)
 8001e00:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e02:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <menu+0x830>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d902      	bls.n	8001e10 <menu+0x734>
				calismaSekli = 0;
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <menu+0x830>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e10:	f002 f9aa 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e14:	2104      	movs	r1, #4
 8001e16:	482c      	ldr	r0, [pc, #176]	@ (8001ec8 <menu+0x7ec>)
 8001e18:	f008 fb8a 	bl	800a530 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <menu+0x77a>
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <menu+0x7f0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <menu+0x77a>
 8001e30:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <menu+0x7e4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10e      	bne.n	8001e56 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001e38:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <menu+0x830>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <menu+0x830>)
 8001e42:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e44:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <menu+0x830>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <menu+0x776>
	    		calismaSekli = 1;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <menu+0x830>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e52:	f002 f989 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e56:	2108      	movs	r1, #8
 8001e58:	481b      	ldr	r0, [pc, #108]	@ (8001ec8 <menu+0x7ec>)
 8001e5a:	f008 fb69 	bl	800a530 <HAL_GPIO_ReadPin>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d118      	bne.n	8001e96 <menu+0x7ba>
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <menu+0x7f0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d011      	beq.n	8001e96 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <menu+0x830>)
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <menu+0x7f8>)
 8001e78:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <menu+0x830>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d106      	bne.n	8001e90 <menu+0x7b4>
				altLimit = 1;
 8001e82:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <menu+0x83c>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e88:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <menu+0x83c>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <menu+0x7f8>)
 8001e8e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <menu+0x820>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <menu+0x824>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	f040 809c 	bne.w	8001fd8 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <menu+0x840>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f007 f807 	bl	8008eb8 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <menu+0x844>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d13a      	bne.n	8001f28 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <menu+0x848>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f006 fffe 	bl	8008eb8 <lcd_print>
 8001ebc:	e03d      	b.n	8001f3a <menu+0x85e>
 8001ebe:	bf00      	nop
 8001ec0:	2000157f 	.word	0x2000157f
 8001ec4:	20001572 	.word	0x20001572
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	2000159f 	.word	0x2000159f
 8001ed0:	20001591 	.word	0x20001591
 8001ed4:	200014a0 	.word	0x200014a0
 8001ed8:	20001592 	.word	0x20001592
 8001edc:	20001593 	.word	0x20001593
 8001ee0:	20001594 	.word	0x20001594
 8001ee4:	20001595 	.word	0x20001595
 8001ee8:	20001596 	.word	0x20001596
 8001eec:	20001597 	.word	0x20001597
 8001ef0:	20001598 	.word	0x20001598
 8001ef4:	20001599 	.word	0x20001599
 8001ef8:	2000159a 	.word	0x2000159a
 8001efc:	2000159c 	.word	0x2000159c
 8001f00:	20001570 	.word	0x20001570
 8001f04:	200018e8 	.word	0x200018e8
 8001f08:	200018fc 	.word	0x200018fc
 8001f0c:	20001571 	.word	0x20001571
 8001f10:	20001910 	.word	0x20001910
 8001f14:	20001924 	.word	0x20001924
 8001f18:	20001576 	.word	0x20001576
 8001f1c:	20001938 	.word	0x20001938
 8001f20:	20001574 	.word	0x20001574
 8001f24:	2000194c 	.word	0x2000194c
		} else if(emniyetCercevesi == 1) {
 8001f28:	4b6b      	ldr	r3, [pc, #428]	@ (80020d8 <menu+0x9fc>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d104      	bne.n	8001f3a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001f30:	4a6a      	ldr	r2, [pc, #424]	@ (80020dc <menu+0xa00>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	2002      	movs	r0, #2
 8001f36:	f006 ffbf 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	4868      	ldr	r0, [pc, #416]	@ (80020e0 <menu+0xa04>)
 8001f3e:	f008 faf7 	bl	800a530 <HAL_GPIO_ReadPin>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d115      	bne.n	8001f74 <menu+0x898>
 8001f48:	4b66      	ldr	r3, [pc, #408]	@ (80020e4 <menu+0xa08>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00e      	beq.n	8001f74 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f56:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <menu+0x9fc>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80020d8 <menu+0x9fc>)
 8001f60:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f62:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <menu+0x9fc>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d902      	bls.n	8001f70 <menu+0x894>
				emniyetCercevesi = 0;
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <menu+0x9fc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f70:	f002 f8fa 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f74:	2104      	movs	r1, #4
 8001f76:	485a      	ldr	r0, [pc, #360]	@ (80020e0 <menu+0xa04>)
 8001f78:	f008 fada 	bl	800a530 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d115      	bne.n	8001fae <menu+0x8d2>
 8001f82:	4b58      	ldr	r3, [pc, #352]	@ (80020e4 <menu+0xa08>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f90:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <menu+0x9fc>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b4f      	ldr	r3, [pc, #316]	@ (80020d8 <menu+0x9fc>)
 8001f9a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <menu+0x9fc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80020d8 <menu+0x9fc>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001faa:	f002 f8dd 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001fae:	2108      	movs	r1, #8
 8001fb0:	484b      	ldr	r0, [pc, #300]	@ (80020e0 <menu+0xa04>)
 8001fb2:	f008 fabd 	bl	800a530 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10d      	bne.n	8001fd8 <menu+0x8fc>
 8001fbc:	4b49      	ldr	r3, [pc, #292]	@ (80020e4 <menu+0xa08>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f083 0301 	eor.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001fca:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <menu+0x9fc>)
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b46      	ldr	r3, [pc, #280]	@ (80020e8 <menu+0xa0c>)
 8001fd0:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fd2:	4b46      	ldr	r3, [pc, #280]	@ (80020ec <menu+0xa10>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fd8:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <menu+0xa14>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d166      	bne.n	80020ae <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001fe0:	4a44      	ldr	r2, [pc, #272]	@ (80020f4 <menu+0xa18>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f006 ff67 	bl	8008eb8 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001fea:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <menu+0xa1c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001ff2:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <menu+0xa20>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f006 ff5e 	bl	8008eb8 <lcd_print>
 8001ffc:	e008      	b.n	8002010 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <menu+0xa1c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d104      	bne.n	8002010 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8002006:	4a3e      	ldr	r2, [pc, #248]	@ (8002100 <menu+0xa24>)
 8002008:	2101      	movs	r1, #1
 800200a:	2002      	movs	r0, #2
 800200c:	f006 ff54 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002010:	2102      	movs	r1, #2
 8002012:	4833      	ldr	r0, [pc, #204]	@ (80020e0 <menu+0xa04>)
 8002014:	f008 fa8c 	bl	800a530 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d115      	bne.n	800204a <menu+0x96e>
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <menu+0xa08>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f083 0301 	eor.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 800202c:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <menu+0xa1c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b30      	ldr	r3, [pc, #192]	@ (80020f8 <menu+0xa1c>)
 8002036:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002038:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <menu+0xa1c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d902      	bls.n	8002046 <menu+0x96a>
				yavaslamaLimit = 0;
 8002040:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <menu+0xa1c>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002046:	f002 f88f 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800204a:	2104      	movs	r1, #4
 800204c:	4824      	ldr	r0, [pc, #144]	@ (80020e0 <menu+0xa04>)
 800204e:	f008 fa6f 	bl	800a530 <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d115      	bne.n	8002084 <menu+0x9a8>
 8002058:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <menu+0xa08>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00e      	beq.n	8002084 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002066:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <menu+0xa1c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3b01      	subs	r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <menu+0xa1c>)
 8002070:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <menu+0xa1c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 800207a:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <menu+0xa1c>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002080:	f002 f872 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002084:	2108      	movs	r1, #8
 8002086:	4816      	ldr	r0, [pc, #88]	@ (80020e0 <menu+0xa04>)
 8002088:	f008 fa52 	bl	800a530 <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10d      	bne.n	80020ae <menu+0x9d2>
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <menu+0xa08>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <menu+0xa1c>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <menu+0xa0c>)
 80020a6:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80020a8:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <menu+0xa10>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <menu+0xa14>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	f040 80aa 	bne.w	800220c <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 80020b8:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <menu+0xa28>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	2001      	movs	r0, #1
 80020be:	f006 fefb 	bl	8008eb8 <lcd_print>

		if(altLimit == 0) {
 80020c2:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <menu+0xa2c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d120      	bne.n	800210c <menu+0xa30>
			lcd_print(2, 1, pasifText);
 80020ca:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <menu+0xa20>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	2002      	movs	r0, #2
 80020d0:	f006 fef2 	bl	8008eb8 <lcd_print>
 80020d4:	e023      	b.n	800211e <menu+0xa42>
 80020d6:	bf00      	nop
 80020d8:	20001574 	.word	0x20001574
 80020dc:	200000ec 	.word	0x200000ec
 80020e0:	40010800 	.word	0x40010800
 80020e4:	2000159f 	.word	0x2000159f
 80020e8:	200014a0 	.word	0x200014a0
 80020ec:	2000159c 	.word	0x2000159c
 80020f0:	20001570 	.word	0x20001570
 80020f4:	20001974 	.word	0x20001974
 80020f8:	20001575 	.word	0x20001575
 80020fc:	2000194c 	.word	0x2000194c
 8002100:	20001960 	.word	0x20001960
 8002104:	20001988 	.word	0x20001988
 8002108:	20001576 	.word	0x20001576
		} else if(altLimit == 1) {
 800210c:	4b89      	ldr	r3, [pc, #548]	@ (8002334 <menu+0xc58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d104      	bne.n	800211e <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8002114:	4a88      	ldr	r2, [pc, #544]	@ (8002338 <menu+0xc5c>)
 8002116:	2101      	movs	r1, #1
 8002118:	2002      	movs	r0, #2
 800211a:	f006 fecd 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800211e:	2102      	movs	r1, #2
 8002120:	4886      	ldr	r0, [pc, #536]	@ (800233c <menu+0xc60>)
 8002122:	f008 fa05 	bl	800a530 <HAL_GPIO_ReadPin>
 8002126:	4603      	mov	r3, r0
 8002128:	2b01      	cmp	r3, #1
 800212a:	d119      	bne.n	8002160 <menu+0xa84>
 800212c:	4b84      	ldr	r3, [pc, #528]	@ (8002340 <menu+0xc64>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <menu+0xa84>
 800213a:	4b82      	ldr	r3, [pc, #520]	@ (8002344 <menu+0xc68>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10e      	bne.n	8002160 <menu+0xa84>
			altLimit = altLimit + 1;
 8002142:	4b7c      	ldr	r3, [pc, #496]	@ (8002334 <menu+0xc58>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b7a      	ldr	r3, [pc, #488]	@ (8002334 <menu+0xc58>)
 800214c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800214e:	4b79      	ldr	r3, [pc, #484]	@ (8002334 <menu+0xc58>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d902      	bls.n	800215c <menu+0xa80>
				altLimit = 0;
 8002156:	4b77      	ldr	r3, [pc, #476]	@ (8002334 <menu+0xc58>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800215c:	f002 f804 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002160:	2104      	movs	r1, #4
 8002162:	4876      	ldr	r0, [pc, #472]	@ (800233c <menu+0xc60>)
 8002164:	f008 f9e4 	bl	800a530 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d119      	bne.n	80021a2 <menu+0xac6>
 800216e:	4b74      	ldr	r3, [pc, #464]	@ (8002340 <menu+0xc64>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d012      	beq.n	80021a2 <menu+0xac6>
 800217c:	4b71      	ldr	r3, [pc, #452]	@ (8002344 <menu+0xc68>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10e      	bne.n	80021a2 <menu+0xac6>
			altLimit = altLimit - 1;
 8002184:	4b6b      	ldr	r3, [pc, #428]	@ (8002334 <menu+0xc58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b69      	ldr	r3, [pc, #420]	@ (8002334 <menu+0xc58>)
 800218e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002190:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <menu+0xc58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <menu+0xac2>
		   		altLimit = 1;
 8002198:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <menu+0xc58>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800219e:	f001 ffe3 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021a2:	2108      	movs	r1, #8
 80021a4:	4865      	ldr	r0, [pc, #404]	@ (800233c <menu+0xc60>)
 80021a6:	f008 f9c3 	bl	800a530 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d12d      	bne.n	800220c <menu+0xb30>
 80021b0:	4b63      	ldr	r3, [pc, #396]	@ (8002340 <menu+0xc64>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d026      	beq.n	800220c <menu+0xb30>
			eepromData[5] = altLimit;
 80021be:	4b5d      	ldr	r3, [pc, #372]	@ (8002334 <menu+0xc58>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b61      	ldr	r3, [pc, #388]	@ (8002348 <menu+0xc6c>)
 80021c4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80021c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <menu+0xc58>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d110      	bne.n	80021f0 <menu+0xb14>
 80021ce:	4b5f      	ldr	r3, [pc, #380]	@ (800234c <menu+0xc70>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <menu+0xb02>
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <menu+0xc70>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d108      	bne.n	80021f0 <menu+0xb14>
				kapiTablaAcKonum = 3;
 80021de:	4b5b      	ldr	r3, [pc, #364]	@ (800234c <menu+0xc70>)
 80021e0:	2203      	movs	r2, #3
 80021e2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <menu+0xc70>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b57      	ldr	r3, [pc, #348]	@ (8002348 <menu+0xc6c>)
 80021ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80021ee:	e00a      	b.n	8002206 <menu+0xb2a>
			} else if(altLimit == 0) {
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <menu+0xc58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <menu+0xb2a>
				platformSilindirTipi = 0;
 80021f8:	4b55      	ldr	r3, [pc, #340]	@ (8002350 <menu+0xc74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021fe:	4b54      	ldr	r3, [pc, #336]	@ (8002350 <menu+0xc74>)
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <menu+0xc6c>)
 8002204:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002206:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <menu+0xc78>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800220c:	4b52      	ldr	r3, [pc, #328]	@ (8002358 <menu+0xc7c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b06      	cmp	r3, #6
 8002212:	d166      	bne.n	80022e2 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8002214:	4a51      	ldr	r2, [pc, #324]	@ (800235c <menu+0xc80>)
 8002216:	2101      	movs	r1, #1
 8002218:	2001      	movs	r0, #1
 800221a:	f006 fe4d 	bl	8008eb8 <lcd_print>

		if(basincSalteri == 0) {
 800221e:	4b50      	ldr	r3, [pc, #320]	@ (8002360 <menu+0xc84>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8002226:	4a4f      	ldr	r2, [pc, #316]	@ (8002364 <menu+0xc88>)
 8002228:	2101      	movs	r1, #1
 800222a:	2002      	movs	r0, #2
 800222c:	f006 fe44 	bl	8008eb8 <lcd_print>
 8002230:	e008      	b.n	8002244 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8002232:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <menu+0xc84>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d104      	bne.n	8002244 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 800223a:	4a3f      	ldr	r2, [pc, #252]	@ (8002338 <menu+0xc5c>)
 800223c:	2101      	movs	r1, #1
 800223e:	2002      	movs	r0, #2
 8002240:	f006 fe3a 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002244:	2102      	movs	r1, #2
 8002246:	483d      	ldr	r0, [pc, #244]	@ (800233c <menu+0xc60>)
 8002248:	f008 f972 	bl	800a530 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d115      	bne.n	800227e <menu+0xba2>
 8002252:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <menu+0xc64>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8002260:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <menu+0xc84>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <menu+0xc84>)
 800226a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800226c:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <menu+0xc84>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d902      	bls.n	800227a <menu+0xb9e>
				basincSalteri = 0;
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <menu+0xc84>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800227a:	f001 ff75 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800227e:	2104      	movs	r1, #4
 8002280:	482e      	ldr	r0, [pc, #184]	@ (800233c <menu+0xc60>)
 8002282:	f008 f955 	bl	800a530 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d115      	bne.n	80022b8 <menu+0xbdc>
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <menu+0xc64>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f083 0301 	eor.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 800229a:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <menu+0xc84>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002360 <menu+0xc84>)
 80022a4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80022a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <menu+0xc84>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <menu+0xbd8>
		   		basincSalteri = 1;
 80022ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002360 <menu+0xc84>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022b4:	f001 ff58 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b8:	2108      	movs	r1, #8
 80022ba:	4820      	ldr	r0, [pc, #128]	@ (800233c <menu+0xc60>)
 80022bc:	f008 f938 	bl	800a530 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10d      	bne.n	80022e2 <menu+0xc06>
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <menu+0xc64>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <menu+0xc06>
			eepromData[6] = basincSalteri;
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <menu+0xc84>)
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <menu+0xc6c>)
 80022da:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <menu+0xc78>)
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <menu+0xc7c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b07      	cmp	r3, #7
 80022e8:	f040 80a9 	bne.w	800243e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 80022ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002368 <menu+0xc8c>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	2001      	movs	r0, #1
 80022f2:	f006 fde1 	bl	8008eb8 <lcd_print>

		if(kapiSecimleri == 0) {
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <menu+0xc90>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 80022fe:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <menu+0xc88>)
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f006 fdd8 	bl	8008eb8 <lcd_print>
 8002308:	e03f      	b.n	800238a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <menu+0xc90>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8002312:	4a17      	ldr	r2, [pc, #92]	@ (8002370 <menu+0xc94>)
 8002314:	2101      	movs	r1, #1
 8002316:	2002      	movs	r0, #2
 8002318:	f006 fdce 	bl	8008eb8 <lcd_print>
 800231c:	e035      	b.n	800238a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <menu+0xc90>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d128      	bne.n	8002378 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8002326:	4a13      	ldr	r2, [pc, #76]	@ (8002374 <menu+0xc98>)
 8002328:	2101      	movs	r1, #1
 800232a:	2002      	movs	r0, #2
 800232c:	f006 fdc4 	bl	8008eb8 <lcd_print>
 8002330:	e02b      	b.n	800238a <menu+0xcae>
 8002332:	bf00      	nop
 8002334:	20001576 	.word	0x20001576
 8002338:	20001960 	.word	0x20001960
 800233c:	40010800 	.word	0x40010800
 8002340:	2000159f 	.word	0x2000159f
 8002344:	20001571 	.word	0x20001571
 8002348:	200014a0 	.word	0x200014a0
 800234c:	2000157d 	.word	0x2000157d
 8002350:	20001583 	.word	0x20001583
 8002354:	2000159c 	.word	0x2000159c
 8002358:	20001570 	.word	0x20001570
 800235c:	2000199c 	.word	0x2000199c
 8002360:	20001577 	.word	0x20001577
 8002364:	2000194c 	.word	0x2000194c
 8002368:	200019b0 	.word	0x200019b0
 800236c:	20001578 	.word	0x20001578
 8002370:	200019c4 	.word	0x200019c4
 8002374:	200019d8 	.word	0x200019d8
		} else if(kapiSecimleri == 3) {
 8002378:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <menu+0xe78>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d104      	bne.n	800238a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002380:	4a75      	ldr	r2, [pc, #468]	@ (8002558 <menu+0xe7c>)
 8002382:	2101      	movs	r1, #1
 8002384:	2002      	movs	r0, #2
 8002386:	f006 fd97 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800238a:	2102      	movs	r1, #2
 800238c:	4873      	ldr	r0, [pc, #460]	@ (800255c <menu+0xe80>)
 800238e:	f008 f8cf 	bl	800a530 <HAL_GPIO_ReadPin>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d115      	bne.n	80023c4 <menu+0xce8>
 8002398:	4b71      	ldr	r3, [pc, #452]	@ (8002560 <menu+0xe84>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00e      	beq.n	80023c4 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 80023a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002554 <menu+0xe78>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b69      	ldr	r3, [pc, #420]	@ (8002554 <menu+0xe78>)
 80023b0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80023b2:	4b68      	ldr	r3, [pc, #416]	@ (8002554 <menu+0xe78>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d902      	bls.n	80023c0 <menu+0xce4>
				kapiSecimleri = 0;
 80023ba:	4b66      	ldr	r3, [pc, #408]	@ (8002554 <menu+0xe78>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023c0:	f001 fed2 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c4:	2104      	movs	r1, #4
 80023c6:	4865      	ldr	r0, [pc, #404]	@ (800255c <menu+0xe80>)
 80023c8:	f008 f8b2 	bl	800a530 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d115      	bne.n	80023fe <menu+0xd22>
 80023d2:	4b63      	ldr	r3, [pc, #396]	@ (8002560 <menu+0xe84>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80023e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002554 <menu+0xe78>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <menu+0xe78>)
 80023ea:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023ec:	4b59      	ldr	r3, [pc, #356]	@ (8002554 <menu+0xe78>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d902      	bls.n	80023fa <menu+0xd1e>
		   		kapiSecimleri = 3;
 80023f4:	4b57      	ldr	r3, [pc, #348]	@ (8002554 <menu+0xe78>)
 80023f6:	2203      	movs	r2, #3
 80023f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023fa:	f001 feb5 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023fe:	2108      	movs	r1, #8
 8002400:	4856      	ldr	r0, [pc, #344]	@ (800255c <menu+0xe80>)
 8002402:	f008 f895 	bl	800a530 <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d118      	bne.n	800243e <menu+0xd62>
 800240c:	4b54      	ldr	r3, [pc, #336]	@ (8002560 <menu+0xe84>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d011      	beq.n	800243e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 800241a:	4b4e      	ldr	r3, [pc, #312]	@ (8002554 <menu+0xe78>)
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b51      	ldr	r3, [pc, #324]	@ (8002564 <menu+0xe88>)
 8002420:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002422:	4b4c      	ldr	r3, [pc, #304]	@ (8002554 <menu+0xe78>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <menu+0xd5c>
				altLimit = 1;
 800242a:	4b4f      	ldr	r3, [pc, #316]	@ (8002568 <menu+0xe8c>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002430:	4b4d      	ldr	r3, [pc, #308]	@ (8002568 <menu+0xe8c>)
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <menu+0xe88>)
 8002436:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002438:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <menu+0xe90>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800243e:	4b4c      	ldr	r3, [pc, #304]	@ (8002570 <menu+0xe94>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d167      	bne.n	8002516 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002446:	4a4b      	ldr	r2, [pc, #300]	@ (8002574 <menu+0xe98>)
 8002448:	2101      	movs	r1, #1
 800244a:	2001      	movs	r0, #1
 800244c:	f006 fd34 	bl	8008eb8 <lcd_print>

		if(kapiAcTipi == 0) {
 8002450:	4b49      	ldr	r3, [pc, #292]	@ (8002578 <menu+0xe9c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002458:	4a48      	ldr	r2, [pc, #288]	@ (800257c <menu+0xea0>)
 800245a:	2101      	movs	r1, #1
 800245c:	2002      	movs	r0, #2
 800245e:	f006 fd2b 	bl	8008eb8 <lcd_print>
 8002462:	e008      	b.n	8002476 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002464:	4b44      	ldr	r3, [pc, #272]	@ (8002578 <menu+0xe9c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d104      	bne.n	8002476 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 800246c:	4a44      	ldr	r2, [pc, #272]	@ (8002580 <menu+0xea4>)
 800246e:	2101      	movs	r1, #1
 8002470:	2002      	movs	r0, #2
 8002472:	f006 fd21 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002476:	2102      	movs	r1, #2
 8002478:	4838      	ldr	r0, [pc, #224]	@ (800255c <menu+0xe80>)
 800247a:	f008 f859 	bl	800a530 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d115      	bne.n	80024b0 <menu+0xdd4>
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <menu+0xe84>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00e      	beq.n	80024b0 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <menu+0xe9c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <menu+0xe9c>)
 800249c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800249e:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <menu+0xe9c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d902      	bls.n	80024ac <menu+0xdd0>
				kapiAcTipi = 0;
 80024a6:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <menu+0xe9c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024ac:	f001 fe5c 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b0:	2104      	movs	r1, #4
 80024b2:	482a      	ldr	r0, [pc, #168]	@ (800255c <menu+0xe80>)
 80024b4:	f008 f83c 	bl	800a530 <HAL_GPIO_ReadPin>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d115      	bne.n	80024ea <menu+0xe0e>
 80024be:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <menu+0xe84>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	f083 0301 	eor.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 80024cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <menu+0xe9c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <menu+0xe9c>)
 80024d6:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80024d8:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <menu+0xe9c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <menu+0xe0a>
		   		kapiAcTipi = 1;
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <menu+0xe9c>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024e6:	f001 fe3f 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ea:	2108      	movs	r1, #8
 80024ec:	481b      	ldr	r0, [pc, #108]	@ (800255c <menu+0xe80>)
 80024ee:	f008 f81f 	bl	800a530 <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d10e      	bne.n	8002516 <menu+0xe3a>
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <menu+0xe84>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8002506:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <menu+0xe9c>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <menu+0xe88>)
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <menu+0xe90>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <menu+0xe94>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b09      	cmp	r3, #9
 800251c:	f040 8092 	bne.w	8002644 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002520:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <menu+0xea8>)
 8002522:	2101      	movs	r1, #1
 8002524:	2001      	movs	r0, #1
 8002526:	f006 fcc7 	bl	8008eb8 <lcd_print>

		if(kapi1Tip == 0) {
 800252a:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <menu+0xeac>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002532:	4a16      	ldr	r2, [pc, #88]	@ (800258c <menu+0xeb0>)
 8002534:	2101      	movs	r1, #1
 8002536:	2002      	movs	r0, #2
 8002538:	f006 fcbe 	bl	8008eb8 <lcd_print>
 800253c:	e033      	b.n	80025a6 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <menu+0xeac>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d126      	bne.n	8002594 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002546:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <menu+0xeb4>)
 8002548:	2101      	movs	r1, #1
 800254a:	2002      	movs	r0, #2
 800254c:	f006 fcb4 	bl	8008eb8 <lcd_print>
 8002550:	e029      	b.n	80025a6 <menu+0xeca>
 8002552:	bf00      	nop
 8002554:	20001578 	.word	0x20001578
 8002558:	200019ec 	.word	0x200019ec
 800255c:	40010800 	.word	0x40010800
 8002560:	2000159f 	.word	0x2000159f
 8002564:	200014a0 	.word	0x200014a0
 8002568:	20001576 	.word	0x20001576
 800256c:	2000159c 	.word	0x2000159c
 8002570:	20001570 	.word	0x20001570
 8002574:	20001a00 	.word	0x20001a00
 8002578:	2000157c 	.word	0x2000157c
 800257c:	20001a14 	.word	0x20001a14
 8002580:	20001a28 	.word	0x20001a28
 8002584:	20001a3c 	.word	0x20001a3c
 8002588:	20001579 	.word	0x20001579
 800258c:	20000100 	.word	0x20000100
 8002590:	20001a50 	.word	0x20001a50
		} else if(kapi1Tip == 2) {
 8002594:	4b73      	ldr	r3, [pc, #460]	@ (8002764 <menu+0x1088>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d104      	bne.n	80025a6 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800259c:	4a72      	ldr	r2, [pc, #456]	@ (8002768 <menu+0x108c>)
 800259e:	2101      	movs	r1, #1
 80025a0:	2002      	movs	r0, #2
 80025a2:	f006 fc89 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a6:	2102      	movs	r1, #2
 80025a8:	4870      	ldr	r0, [pc, #448]	@ (800276c <menu+0x1090>)
 80025aa:	f007 ffc1 	bl	800a530 <HAL_GPIO_ReadPin>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d115      	bne.n	80025e0 <menu+0xf04>
 80025b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002770 <menu+0x1094>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f083 0301 	eor.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00e      	beq.n	80025e0 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 80025c2:	4b68      	ldr	r3, [pc, #416]	@ (8002764 <menu+0x1088>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b66      	ldr	r3, [pc, #408]	@ (8002764 <menu+0x1088>)
 80025cc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025ce:	4b65      	ldr	r3, [pc, #404]	@ (8002764 <menu+0x1088>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d902      	bls.n	80025dc <menu+0xf00>
				kapi1Tip = 0;
 80025d6:	4b63      	ldr	r3, [pc, #396]	@ (8002764 <menu+0x1088>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025dc:	f001 fdc4 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025e0:	2104      	movs	r1, #4
 80025e2:	4862      	ldr	r0, [pc, #392]	@ (800276c <menu+0x1090>)
 80025e4:	f007 ffa4 	bl	800a530 <HAL_GPIO_ReadPin>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d115      	bne.n	800261a <menu+0xf3e>
 80025ee:	4b60      	ldr	r3, [pc, #384]	@ (8002770 <menu+0x1094>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00e      	beq.n	800261a <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80025fc:	4b59      	ldr	r3, [pc, #356]	@ (8002764 <menu+0x1088>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3b01      	subs	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b57      	ldr	r3, [pc, #348]	@ (8002764 <menu+0x1088>)
 8002606:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002608:	4b56      	ldr	r3, [pc, #344]	@ (8002764 <menu+0x1088>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d902      	bls.n	8002616 <menu+0xf3a>
		   		kapi1Tip = 2;
 8002610:	4b54      	ldr	r3, [pc, #336]	@ (8002764 <menu+0x1088>)
 8002612:	2202      	movs	r2, #2
 8002614:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002616:	f001 fda7 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800261a:	2108      	movs	r1, #8
 800261c:	4853      	ldr	r0, [pc, #332]	@ (800276c <menu+0x1090>)
 800261e:	f007 ff87 	bl	800a530 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10d      	bne.n	8002644 <menu+0xf68>
 8002628:	4b51      	ldr	r3, [pc, #324]	@ (8002770 <menu+0x1094>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f083 0301 	eor.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002636:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <menu+0x1088>)
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	4b4e      	ldr	r3, [pc, #312]	@ (8002774 <menu+0x1098>)
 800263c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800263e:	4b4e      	ldr	r3, [pc, #312]	@ (8002778 <menu+0x109c>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002644:	4b4d      	ldr	r3, [pc, #308]	@ (800277c <menu+0x10a0>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b0a      	cmp	r3, #10
 800264a:	d16c      	bne.n	8002726 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800264c:	4a4c      	ldr	r2, [pc, #304]	@ (8002780 <menu+0x10a4>)
 800264e:	2101      	movs	r1, #1
 8002650:	2001      	movs	r0, #1
 8002652:	f006 fc31 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002656:	4a4b      	ldr	r2, [pc, #300]	@ (8002784 <menu+0x10a8>)
 8002658:	2101      	movs	r1, #1
 800265a:	2002      	movs	r0, #2
 800265c:	f006 fc2c 	bl	8008eb8 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002660:	4b49      	ldr	r3, [pc, #292]	@ (8002788 <menu+0x10ac>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	220a      	movs	r2, #10
 8002666:	4949      	ldr	r1, [pc, #292]	@ (800278c <menu+0x10b0>)
 8002668:	4618      	mov	r0, r3
 800266a:	f00b f8a5 	bl	800d7b8 <itoa>
		lcd_print(2,16,snum);
 800266e:	4a47      	ldr	r2, [pc, #284]	@ (800278c <menu+0x10b0>)
 8002670:	2110      	movs	r1, #16
 8002672:	2002      	movs	r0, #2
 8002674:	f006 fc20 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002678:	2102      	movs	r1, #2
 800267a:	483c      	ldr	r0, [pc, #240]	@ (800276c <menu+0x1090>)
 800267c:	f007 ff58 	bl	800a530 <HAL_GPIO_ReadPin>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d119      	bne.n	80026ba <menu+0xfde>
 8002686:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <menu+0x1094>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	f083 0301 	eor.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <menu+0xfde>
 8002694:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <menu+0x1088>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10e      	bne.n	80026ba <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800269c:	4b3a      	ldr	r3, [pc, #232]	@ (8002788 <menu+0x10ac>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <menu+0x10ac>)
 80026a6:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026a8:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <menu+0x10ac>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d902      	bls.n	80026b6 <menu+0xfda>
				kapi1AcSure = 0;
 80026b0:	4b35      	ldr	r3, [pc, #212]	@ (8002788 <menu+0x10ac>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026b6:	f001 fd57 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026ba:	2104      	movs	r1, #4
 80026bc:	482b      	ldr	r0, [pc, #172]	@ (800276c <menu+0x1090>)
 80026be:	f007 ff37 	bl	800a530 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d119      	bne.n	80026fc <menu+0x1020>
 80026c8:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <menu+0x1094>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <menu+0x1020>
 80026d6:	4b23      	ldr	r3, [pc, #140]	@ (8002764 <menu+0x1088>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10e      	bne.n	80026fc <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80026de:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <menu+0x10ac>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <menu+0x10ac>)
 80026e8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026ea:	4b27      	ldr	r3, [pc, #156]	@ (8002788 <menu+0x10ac>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <menu+0x101c>
		   		kapi1AcSure = 5;
 80026f2:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <menu+0x10ac>)
 80026f4:	2205      	movs	r2, #5
 80026f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026f8:	f001 fd36 	bl	8004168 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026fc:	2108      	movs	r1, #8
 80026fe:	481b      	ldr	r0, [pc, #108]	@ (800276c <menu+0x1090>)
 8002700:	f007 ff16 	bl	800a530 <HAL_GPIO_ReadPin>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10d      	bne.n	8002726 <menu+0x104a>
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <menu+0x1094>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <menu+0x10ac>)
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <menu+0x1098>)
 800271e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002720:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <menu+0x109c>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <menu+0x10a0>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b0b      	cmp	r3, #11
 800272c:	f040 8090 	bne.w	8002850 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002730:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <menu+0x10b4>)
 8002732:	2101      	movs	r1, #1
 8002734:	2001      	movs	r0, #1
 8002736:	f006 fbbf 	bl	8008eb8 <lcd_print>

		if(kapi2Tip == 0) {
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <menu+0x10b8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002742:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <menu+0x10bc>)
 8002744:	2101      	movs	r1, #1
 8002746:	2002      	movs	r0, #2
 8002748:	f006 fbb6 	bl	8008eb8 <lcd_print>
 800274c:	e031      	b.n	80027b2 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <menu+0x10b8>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d124      	bne.n	80027a0 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002756:	4a11      	ldr	r2, [pc, #68]	@ (800279c <menu+0x10c0>)
 8002758:	2101      	movs	r1, #1
 800275a:	2002      	movs	r0, #2
 800275c:	f006 fbac 	bl	8008eb8 <lcd_print>
 8002760:	e027      	b.n	80027b2 <menu+0x10d6>
 8002762:	bf00      	nop
 8002764:	20001579 	.word	0x20001579
 8002768:	20000114 	.word	0x20000114
 800276c:	40010800 	.word	0x40010800
 8002770:	2000159f 	.word	0x2000159f
 8002774:	200014a0 	.word	0x200014a0
 8002778:	2000159c 	.word	0x2000159c
 800277c:	20001570 	.word	0x20001570
 8002780:	20001a64 	.word	0x20001a64
 8002784:	20001a78 	.word	0x20001a78
 8002788:	20001589 	.word	0x20001589
 800278c:	20001510 	.word	0x20001510
 8002790:	20001a8c 	.word	0x20001a8c
 8002794:	2000157a 	.word	0x2000157a
 8002798:	20000100 	.word	0x20000100
 800279c:	20001a50 	.word	0x20001a50
		} else if(kapi2Tip == 2) {
 80027a0:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <menu+0x1294>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d104      	bne.n	80027b2 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 80027a8:	4a72      	ldr	r2, [pc, #456]	@ (8002974 <menu+0x1298>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2002      	movs	r0, #2
 80027ae:	f006 fb83 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b2:	2102      	movs	r1, #2
 80027b4:	4870      	ldr	r0, [pc, #448]	@ (8002978 <menu+0x129c>)
 80027b6:	f007 febb 	bl	800a530 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d115      	bne.n	80027ec <menu+0x1110>
 80027c0:	4b6e      	ldr	r3, [pc, #440]	@ (800297c <menu+0x12a0>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 80027ce:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <menu+0x1294>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <menu+0x1294>)
 80027d8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027da:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <menu+0x1294>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <menu+0x110c>
				kapi2Tip = 0;
 80027e2:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <menu+0x1294>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e8:	f001 fcbe 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ec:	2104      	movs	r1, #4
 80027ee:	4862      	ldr	r0, [pc, #392]	@ (8002978 <menu+0x129c>)
 80027f0:	f007 fe9e 	bl	800a530 <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d115      	bne.n	8002826 <menu+0x114a>
 80027fa:	4b60      	ldr	r3, [pc, #384]	@ (800297c <menu+0x12a0>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002808:	4b59      	ldr	r3, [pc, #356]	@ (8002970 <menu+0x1294>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3b01      	subs	r3, #1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <menu+0x1294>)
 8002812:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002814:	4b56      	ldr	r3, [pc, #344]	@ (8002970 <menu+0x1294>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d902      	bls.n	8002822 <menu+0x1146>
		   		kapi2Tip = 2;
 800281c:	4b54      	ldr	r3, [pc, #336]	@ (8002970 <menu+0x1294>)
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002822:	f001 fca1 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002826:	2108      	movs	r1, #8
 8002828:	4853      	ldr	r0, [pc, #332]	@ (8002978 <menu+0x129c>)
 800282a:	f007 fe81 	bl	800a530 <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10d      	bne.n	8002850 <menu+0x1174>
 8002834:	4b51      	ldr	r3, [pc, #324]	@ (800297c <menu+0x12a0>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002842:	4b4b      	ldr	r3, [pc, #300]	@ (8002970 <menu+0x1294>)
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	4b4e      	ldr	r3, [pc, #312]	@ (8002980 <menu+0x12a4>)
 8002848:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800284a:	4b4e      	ldr	r3, [pc, #312]	@ (8002984 <menu+0x12a8>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <menu+0x12ac>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d16c      	bne.n	8002932 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002858:	4a4c      	ldr	r2, [pc, #304]	@ (800298c <menu+0x12b0>)
 800285a:	2101      	movs	r1, #1
 800285c:	2001      	movs	r0, #1
 800285e:	f006 fb2b 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002862:	4a4b      	ldr	r2, [pc, #300]	@ (8002990 <menu+0x12b4>)
 8002864:	2101      	movs	r1, #1
 8002866:	2002      	movs	r0, #2
 8002868:	f006 fb26 	bl	8008eb8 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800286c:	4b49      	ldr	r3, [pc, #292]	@ (8002994 <menu+0x12b8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	220a      	movs	r2, #10
 8002872:	4949      	ldr	r1, [pc, #292]	@ (8002998 <menu+0x12bc>)
 8002874:	4618      	mov	r0, r3
 8002876:	f00a ff9f 	bl	800d7b8 <itoa>
		lcd_print(2,16,snum);
 800287a:	4a47      	ldr	r2, [pc, #284]	@ (8002998 <menu+0x12bc>)
 800287c:	2110      	movs	r1, #16
 800287e:	2002      	movs	r0, #2
 8002880:	f006 fb1a 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002884:	2102      	movs	r1, #2
 8002886:	483c      	ldr	r0, [pc, #240]	@ (8002978 <menu+0x129c>)
 8002888:	f007 fe52 	bl	800a530 <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d119      	bne.n	80028c6 <menu+0x11ea>
 8002892:	4b3a      	ldr	r3, [pc, #232]	@ (800297c <menu+0x12a0>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <menu+0x11ea>
 80028a0:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <menu+0x1294>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10e      	bne.n	80028c6 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 80028a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <menu+0x12b8>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <menu+0x12b8>)
 80028b2:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80028b4:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <menu+0x12b8>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d902      	bls.n	80028c2 <menu+0x11e6>
				kapi2AcSure = 0;
 80028bc:	4b35      	ldr	r3, [pc, #212]	@ (8002994 <menu+0x12b8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028c2:	f001 fc51 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028c6:	2104      	movs	r1, #4
 80028c8:	482b      	ldr	r0, [pc, #172]	@ (8002978 <menu+0x129c>)
 80028ca:	f007 fe31 	bl	800a530 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d119      	bne.n	8002908 <menu+0x122c>
 80028d4:	4b29      	ldr	r3, [pc, #164]	@ (800297c <menu+0x12a0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d012      	beq.n	8002908 <menu+0x122c>
 80028e2:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <menu+0x1294>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80028ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002994 <menu+0x12b8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b28      	ldr	r3, [pc, #160]	@ (8002994 <menu+0x12b8>)
 80028f4:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80028f6:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <menu+0x12b8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <menu+0x1228>
		   		kapi2AcSure = 5;
 80028fe:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <menu+0x12b8>)
 8002900:	2205      	movs	r2, #5
 8002902:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002904:	f001 fc30 	bl	8004168 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002908:	2108      	movs	r1, #8
 800290a:	481b      	ldr	r0, [pc, #108]	@ (8002978 <menu+0x129c>)
 800290c:	f007 fe10 	bl	800a530 <HAL_GPIO_ReadPin>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10d      	bne.n	8002932 <menu+0x1256>
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <menu+0x12a0>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <menu+0x12b8>)
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <menu+0x12a4>)
 800292a:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800292c:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <menu+0x12a8>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <menu+0x12ac>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b0d      	cmp	r3, #13
 8002938:	f040 8090 	bne.w	8002a5c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800293c:	4a17      	ldr	r2, [pc, #92]	@ (800299c <menu+0x12c0>)
 800293e:	2101      	movs	r1, #1
 8002940:	2001      	movs	r0, #1
 8002942:	f006 fab9 	bl	8008eb8 <lcd_print>

		if(kapitablaTip == 0) {
 8002946:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <menu+0x12c4>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800294e:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <menu+0x12c8>)
 8002950:	2101      	movs	r1, #1
 8002952:	2002      	movs	r0, #2
 8002954:	f006 fab0 	bl	8008eb8 <lcd_print>
 8002958:	e031      	b.n	80029be <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <menu+0x12c4>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d124      	bne.n	80029ac <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002962:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <menu+0x12cc>)
 8002964:	2101      	movs	r1, #1
 8002966:	2002      	movs	r0, #2
 8002968:	f006 faa6 	bl	8008eb8 <lcd_print>
 800296c:	e027      	b.n	80029be <menu+0x12e2>
 800296e:	bf00      	nop
 8002970:	2000157a 	.word	0x2000157a
 8002974:	20000114 	.word	0x20000114
 8002978:	40010800 	.word	0x40010800
 800297c:	2000159f 	.word	0x2000159f
 8002980:	200014a0 	.word	0x200014a0
 8002984:	2000159c 	.word	0x2000159c
 8002988:	20001570 	.word	0x20001570
 800298c:	20001aa0 	.word	0x20001aa0
 8002990:	20001a78 	.word	0x20001a78
 8002994:	2000158a 	.word	0x2000158a
 8002998:	20001510 	.word	0x20001510
 800299c:	20001ab4 	.word	0x20001ab4
 80029a0:	2000157b 	.word	0x2000157b
 80029a4:	20000100 	.word	0x20000100
 80029a8:	20001a50 	.word	0x20001a50
		} else if(kapitablaTip == 2) {
 80029ac:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <menu+0x13d0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 80029b4:	4a3e      	ldr	r2, [pc, #248]	@ (8002ab0 <menu+0x13d4>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f006 fa7d 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029be:	2102      	movs	r1, #2
 80029c0:	483c      	ldr	r0, [pc, #240]	@ (8002ab4 <menu+0x13d8>)
 80029c2:	f007 fdb5 	bl	800a530 <HAL_GPIO_ReadPin>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d115      	bne.n	80029f8 <menu+0x131c>
 80029cc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab8 <menu+0x13dc>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <menu+0x13d0>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b32      	ldr	r3, [pc, #200]	@ (8002aac <menu+0x13d0>)
 80029e4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <menu+0x13d0>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <menu+0x1318>
				kapitablaTip = 0;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <menu+0x13d0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f4:	f001 fbb8 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f8:	2104      	movs	r1, #4
 80029fa:	482e      	ldr	r0, [pc, #184]	@ (8002ab4 <menu+0x13d8>)
 80029fc:	f007 fd98 	bl	800a530 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d115      	bne.n	8002a32 <menu+0x1356>
 8002a06:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab8 <menu+0x13dc>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002a14:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <menu+0x13d0>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <menu+0x13d0>)
 8002a1e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <menu+0x13d0>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d902      	bls.n	8002a2e <menu+0x1352>
		   		kapitablaTip = 2;
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <menu+0x13d0>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2e:	f001 fb9b 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a32:	2108      	movs	r1, #8
 8002a34:	481f      	ldr	r0, [pc, #124]	@ (8002ab4 <menu+0x13d8>)
 8002a36:	f007 fd7b 	bl	800a530 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10d      	bne.n	8002a5c <menu+0x1380>
 8002a40:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <menu+0x13dc>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	@ (8002aac <menu+0x13d0>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <menu+0x13e0>)
 8002a54:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <menu+0x13e4>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <menu+0x13e8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0e      	cmp	r3, #14
 8002a62:	f040 80a3 	bne.w	8002bac <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002a66:	4a18      	ldr	r2, [pc, #96]	@ (8002ac8 <menu+0x13ec>)
 8002a68:	2101      	movs	r1, #1
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f006 fa24 	bl	8008eb8 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <menu+0x13f0>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <menu+0x13f4>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f006 fa1b 	bl	8008eb8 <lcd_print>
 8002a82:	e034      	b.n	8002aee <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <menu+0x13f0>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002a8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ad4 <menu+0x13f8>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2002      	movs	r0, #2
 8002a92:	f006 fa11 	bl	8008eb8 <lcd_print>
 8002a96:	e02a      	b.n	8002aee <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <menu+0x13f0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d11d      	bne.n	8002adc <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <menu+0x13fc>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f006 fa07 	bl	8008eb8 <lcd_print>
 8002aaa:	e020      	b.n	8002aee <menu+0x1412>
 8002aac:	2000157b 	.word	0x2000157b
 8002ab0:	20000114 	.word	0x20000114
 8002ab4:	40010800 	.word	0x40010800
 8002ab8:	2000159f 	.word	0x2000159f
 8002abc:	200014a0 	.word	0x200014a0
 8002ac0:	2000159c 	.word	0x2000159c
 8002ac4:	20001570 	.word	0x20001570
 8002ac8:	20001ac8 	.word	0x20001ac8
 8002acc:	2000157d 	.word	0x2000157d
 8002ad0:	20001adc 	.word	0x20001adc
 8002ad4:	20001af0 	.word	0x20001af0
 8002ad8:	20001b04 	.word	0x20001b04
		} else if(kapiTablaAcKonum == 3) {
 8002adc:	4b76      	ldr	r3, [pc, #472]	@ (8002cb8 <menu+0x15dc>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d104      	bne.n	8002aee <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002ae4:	4a75      	ldr	r2, [pc, #468]	@ (8002cbc <menu+0x15e0>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f006 f9e5 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aee:	2102      	movs	r1, #2
 8002af0:	4873      	ldr	r0, [pc, #460]	@ (8002cc0 <menu+0x15e4>)
 8002af2:	f007 fd1d 	bl	800a530 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d115      	bne.n	8002b28 <menu+0x144c>
 8002afc:	4b71      	ldr	r3, [pc, #452]	@ (8002cc4 <menu+0x15e8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00e      	beq.n	8002b28 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb8 <menu+0x15dc>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4b69      	ldr	r3, [pc, #420]	@ (8002cb8 <menu+0x15dc>)
 8002b14:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b16:	4b68      	ldr	r3, [pc, #416]	@ (8002cb8 <menu+0x15dc>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002b1e:	4b66      	ldr	r3, [pc, #408]	@ (8002cb8 <menu+0x15dc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b24:	f001 fb20 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b28:	2104      	movs	r1, #4
 8002b2a:	4865      	ldr	r0, [pc, #404]	@ (8002cc0 <menu+0x15e4>)
 8002b2c:	f007 fd00 	bl	800a530 <HAL_GPIO_ReadPin>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d115      	bne.n	8002b62 <menu+0x1486>
 8002b36:	4b63      	ldr	r3, [pc, #396]	@ (8002cc4 <menu+0x15e8>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b44:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <menu+0x15dc>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb8 <menu+0x15dc>)
 8002b4e:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b50:	4b59      	ldr	r3, [pc, #356]	@ (8002cb8 <menu+0x15dc>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d902      	bls.n	8002b5e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002b58:	4b57      	ldr	r3, [pc, #348]	@ (8002cb8 <menu+0x15dc>)
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b5e:	f001 fb03 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b62:	2108      	movs	r1, #8
 8002b64:	4856      	ldr	r0, [pc, #344]	@ (8002cc0 <menu+0x15e4>)
 8002b66:	f007 fce3 	bl	800a530 <HAL_GPIO_ReadPin>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d11d      	bne.n	8002bac <menu+0x14d0>
 8002b70:	4b54      	ldr	r3, [pc, #336]	@ (8002cc4 <menu+0x15e8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	f083 0301 	eor.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb8 <menu+0x15dc>)
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <menu+0x15ec>)
 8002b84:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b88:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb8 <menu+0x15dc>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <menu+0x14bc>
 8002b90:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <menu+0x15dc>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d106      	bne.n	8002ba6 <menu+0x14ca>
				altLimit = 1;
 8002b98:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <menu+0x15f0>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <menu+0x15f0>)
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	4b49      	ldr	r3, [pc, #292]	@ (8002cc8 <menu+0x15ec>)
 8002ba4:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <menu+0x15f4>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002bac:	4b49      	ldr	r3, [pc, #292]	@ (8002cd4 <menu+0x15f8>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d16c      	bne.n	8002c8e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002bb4:	4a48      	ldr	r2, [pc, #288]	@ (8002cd8 <menu+0x15fc>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f006 f97d 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002bbe:	4a47      	ldr	r2, [pc, #284]	@ (8002cdc <menu+0x1600>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	f006 f978 	bl	8008eb8 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002bc8:	4b45      	ldr	r3, [pc, #276]	@ (8002ce0 <menu+0x1604>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	220a      	movs	r2, #10
 8002bce:	4945      	ldr	r1, [pc, #276]	@ (8002ce4 <menu+0x1608>)
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f00a fdf1 	bl	800d7b8 <itoa>
		lcd_print(2,16,snum);
 8002bd6:	4a43      	ldr	r2, [pc, #268]	@ (8002ce4 <menu+0x1608>)
 8002bd8:	2110      	movs	r1, #16
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f006 f96c 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002be0:	2102      	movs	r1, #2
 8002be2:	4837      	ldr	r0, [pc, #220]	@ (8002cc0 <menu+0x15e4>)
 8002be4:	f007 fca4 	bl	800a530 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d119      	bne.n	8002c22 <menu+0x1546>
 8002bee:	4b35      	ldr	r3, [pc, #212]	@ (8002cc4 <menu+0x15e8>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <menu+0x1546>
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <menu+0x160c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10e      	bne.n	8002c22 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002c04:	4b36      	ldr	r3, [pc, #216]	@ (8002ce0 <menu+0x1604>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <menu+0x1604>)
 8002c0e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002c10:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <menu+0x1604>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d902      	bls.n	8002c1e <menu+0x1542>
				kapiTablaAcSure = 0;
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <menu+0x1604>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c1e:	f001 faa3 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c22:	2104      	movs	r1, #4
 8002c24:	4826      	ldr	r0, [pc, #152]	@ (8002cc0 <menu+0x15e4>)
 8002c26:	f007 fc83 	bl	800a530 <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d119      	bne.n	8002c64 <menu+0x1588>
 8002c30:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <menu+0x15e8>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d012      	beq.n	8002c64 <menu+0x1588>
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce8 <menu+0x160c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c46:	4b26      	ldr	r3, [pc, #152]	@ (8002ce0 <menu+0x1604>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <menu+0x1604>)
 8002c50:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c52:	4b23      	ldr	r3, [pc, #140]	@ (8002ce0 <menu+0x1604>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002c5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <menu+0x1604>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c60:	f001 fa82 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c64:	2108      	movs	r1, #8
 8002c66:	4816      	ldr	r0, [pc, #88]	@ (8002cc0 <menu+0x15e4>)
 8002c68:	f007 fc62 	bl	800a530 <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <menu+0x15b2>
 8002c72:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <menu+0x15e8>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002c80:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <menu+0x1604>)
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <menu+0x15ec>)
 8002c86:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <menu+0x15f4>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002c8e:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <menu+0x15f8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	f040 8086 	bne.w	8002da4 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002c98:	4a14      	ldr	r2, [pc, #80]	@ (8002cec <menu+0x1610>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f006 f90b 	bl	8008eb8 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002ca2:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <menu+0x1614>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d124      	bne.n	8002cf4 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002caa:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <menu+0x15e0>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f006 f902 	bl	8008eb8 <lcd_print>
 8002cb4:	e027      	b.n	8002d06 <menu+0x162a>
 8002cb6:	bf00      	nop
 8002cb8:	2000157d 	.word	0x2000157d
 8002cbc:	2000194c 	.word	0x2000194c
 8002cc0:	40010800 	.word	0x40010800
 8002cc4:	2000159f 	.word	0x2000159f
 8002cc8:	200014a0 	.word	0x200014a0
 8002ccc:	20001576 	.word	0x20001576
 8002cd0:	2000159c 	.word	0x2000159c
 8002cd4:	20001570 	.word	0x20001570
 8002cd8:	20001b18 	.word	0x20001b18
 8002cdc:	20001a78 	.word	0x20001a78
 8002ce0:	2000158b 	.word	0x2000158b
 8002ce4:	20001510 	.word	0x20001510
 8002ce8:	2000157b 	.word	0x2000157b
 8002cec:	20001b2c 	.word	0x20001b2c
 8002cf0:	2000157e 	.word	0x2000157e
		} else if(yukariYavasLimit == 1) {
 8002cf4:	4b84      	ldr	r3, [pc, #528]	@ (8002f08 <menu+0x182c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d104      	bne.n	8002d06 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002cfc:	4a83      	ldr	r2, [pc, #524]	@ (8002f0c <menu+0x1830>)
 8002cfe:	2101      	movs	r1, #1
 8002d00:	2002      	movs	r0, #2
 8002d02:	f006 f8d9 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d06:	2102      	movs	r1, #2
 8002d08:	4881      	ldr	r0, [pc, #516]	@ (8002f10 <menu+0x1834>)
 8002d0a:	f007 fc11 	bl	800a530 <HAL_GPIO_ReadPin>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d115      	bne.n	8002d40 <menu+0x1664>
 8002d14:	4b7f      	ldr	r3, [pc, #508]	@ (8002f14 <menu+0x1838>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	f083 0301 	eor.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002d22:	4b79      	ldr	r3, [pc, #484]	@ (8002f08 <menu+0x182c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b77      	ldr	r3, [pc, #476]	@ (8002f08 <menu+0x182c>)
 8002d2c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002d2e:	4b76      	ldr	r3, [pc, #472]	@ (8002f08 <menu+0x182c>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d902      	bls.n	8002d3c <menu+0x1660>
				yukariYavasLimit = 0;
 8002d36:	4b74      	ldr	r3, [pc, #464]	@ (8002f08 <menu+0x182c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d3c:	f001 fa14 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d40:	2104      	movs	r1, #4
 8002d42:	4873      	ldr	r0, [pc, #460]	@ (8002f10 <menu+0x1834>)
 8002d44:	f007 fbf4 	bl	800a530 <HAL_GPIO_ReadPin>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d115      	bne.n	8002d7a <menu+0x169e>
 8002d4e:	4b71      	ldr	r3, [pc, #452]	@ (8002f14 <menu+0x1838>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00e      	beq.n	8002d7a <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <menu+0x182c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b68      	ldr	r3, [pc, #416]	@ (8002f08 <menu+0x182c>)
 8002d66:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002d68:	4b67      	ldr	r3, [pc, #412]	@ (8002f08 <menu+0x182c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002d70:	4b65      	ldr	r3, [pc, #404]	@ (8002f08 <menu+0x182c>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d76:	f001 f9f7 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d7a:	2108      	movs	r1, #8
 8002d7c:	4864      	ldr	r0, [pc, #400]	@ (8002f10 <menu+0x1834>)
 8002d7e:	f007 fbd7 	bl	800a530 <HAL_GPIO_ReadPin>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10d      	bne.n	8002da4 <menu+0x16c8>
 8002d88:	4b62      	ldr	r3, [pc, #392]	@ (8002f14 <menu+0x1838>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002d96:	4b5c      	ldr	r3, [pc, #368]	@ (8002f08 <menu+0x182c>)
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f18 <menu+0x183c>)
 8002d9c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002f1c <menu+0x1840>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <menu+0x1844>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b11      	cmp	r3, #17
 8002daa:	f040 808b 	bne.w	8002ec4 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002dae:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <menu+0x1848>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	2001      	movs	r0, #1
 8002db4:	f006 f880 	bl	8008eb8 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002db8:	4b5b      	ldr	r3, [pc, #364]	@ (8002f28 <menu+0x184c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d105      	bne.n	8002dcc <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f2c <menu+0x1850>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f006 f877 	bl	8008eb8 <lcd_print>
 8002dca:	e012      	b.n	8002df2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002dcc:	4b56      	ldr	r3, [pc, #344]	@ (8002f28 <menu+0x184c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002dd4:	4a56      	ldr	r2, [pc, #344]	@ (8002f30 <menu+0x1854>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f006 f86d 	bl	8008eb8 <lcd_print>
 8002dde:	e008      	b.n	8002df2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002de0:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <menu+0x184c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002de8:	4a52      	ldr	r2, [pc, #328]	@ (8002f34 <menu+0x1858>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2002      	movs	r0, #2
 8002dee:	f006 f863 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df2:	2102      	movs	r1, #2
 8002df4:	4846      	ldr	r0, [pc, #280]	@ (8002f10 <menu+0x1834>)
 8002df6:	f007 fb9b 	bl	800a530 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d115      	bne.n	8002e2c <menu+0x1750>
 8002e00:	4b44      	ldr	r3, [pc, #272]	@ (8002f14 <menu+0x1838>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002e0e:	4b46      	ldr	r3, [pc, #280]	@ (8002f28 <menu+0x184c>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b44      	ldr	r3, [pc, #272]	@ (8002f28 <menu+0x184c>)
 8002e18:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002e1a:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <menu+0x184c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002e22:	4b41      	ldr	r3, [pc, #260]	@ (8002f28 <menu+0x184c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e28:	f001 f99e 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	4838      	ldr	r0, [pc, #224]	@ (8002f10 <menu+0x1834>)
 8002e30:	f007 fb7e 	bl	800a530 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d115      	bne.n	8002e66 <menu+0x178a>
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <menu+0x1838>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002e48:	4b37      	ldr	r3, [pc, #220]	@ (8002f28 <menu+0x184c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	4b35      	ldr	r3, [pc, #212]	@ (8002f28 <menu+0x184c>)
 8002e52:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002e54:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <menu+0x184c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d902      	bls.n	8002e62 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002e5c:	4b32      	ldr	r3, [pc, #200]	@ (8002f28 <menu+0x184c>)
 8002e5e:	2202      	movs	r2, #2
 8002e60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e62:	f001 f981 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e66:	2108      	movs	r1, #8
 8002e68:	4829      	ldr	r0, [pc, #164]	@ (8002f10 <menu+0x1834>)
 8002e6a:	f007 fb61 	bl	800a530 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d127      	bne.n	8002ec4 <menu+0x17e8>
 8002e74:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <menu+0x1838>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f083 0301 	eor.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d020      	beq.n	8002ec4 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002e82:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <menu+0x184c>)
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <menu+0x183c>)
 8002e88:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002e8a:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <menu+0x184c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <menu+0x17be>
 8002e92:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <menu+0x184c>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d106      	bne.n	8002ea8 <menu+0x17cc>
				calismaSekli = 0;
 8002e9a:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <menu+0x185c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <menu+0x185c>)
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <menu+0x183c>)
 8002ea6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <menu+0x184c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002eb0:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <menu+0x1860>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002eb6:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <menu+0x1860>)
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <menu+0x183c>)
 8002ebc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002ebe:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <menu+0x1840>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <menu+0x1844>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b12      	cmp	r3, #18
 8002eca:	f040 8097 	bne.w	8002ffc <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002ece:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <menu+0x184c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d105      	bne.n	8002ee2 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <menu+0x1864>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2001      	movs	r0, #1
 8002edc:	f005 ffec 	bl	8008eb8 <lcd_print>
 8002ee0:	e008      	b.n	8002ef4 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <menu+0x184c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d104      	bne.n	8002ef4 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002eea:	4a16      	ldr	r2, [pc, #88]	@ (8002f44 <menu+0x1868>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f005 ffe2 	bl	8008eb8 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <menu+0x186c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d127      	bne.n	8002f4c <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002efc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <menu+0x1858>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f005 ffd9 	bl	8008eb8 <lcd_print>
 8002f06:	e02a      	b.n	8002f5e <menu+0x1882>
 8002f08:	2000157e 	.word	0x2000157e
 8002f0c:	20001960 	.word	0x20001960
 8002f10:	40010800 	.word	0x40010800
 8002f14:	2000159f 	.word	0x2000159f
 8002f18:	200014a0 	.word	0x200014a0
 8002f1c:	2000159c 	.word	0x2000159c
 8002f20:	20001570 	.word	0x20001570
 8002f24:	20001b40 	.word	0x20001b40
 8002f28:	2000157f 	.word	0x2000157f
 8002f2c:	20001b54 	.word	0x20001b54
 8002f30:	20001b68 	.word	0x20001b68
 8002f34:	2000194c 	.word	0x2000194c
 8002f38:	20001571 	.word	0x20001571
 8002f3c:	20001582 	.word	0x20001582
 8002f40:	20001b7c 	.word	0x20001b7c
 8002f44:	20001b90 	.word	0x20001b90
 8002f48:	20001580 	.word	0x20001580
		} else if(devirmeYukariIleriLimit == 1){
 8002f4c:	4b79      	ldr	r3, [pc, #484]	@ (8003134 <menu+0x1a58>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d104      	bne.n	8002f5e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002f54:	4a78      	ldr	r2, [pc, #480]	@ (8003138 <menu+0x1a5c>)
 8002f56:	2101      	movs	r1, #1
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f005 ffad 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f5e:	2102      	movs	r1, #2
 8002f60:	4876      	ldr	r0, [pc, #472]	@ (800313c <menu+0x1a60>)
 8002f62:	f007 fae5 	bl	800a530 <HAL_GPIO_ReadPin>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d115      	bne.n	8002f98 <menu+0x18bc>
 8002f6c:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <menu+0x1a64>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	f083 0301 	eor.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003134 <menu+0x1a58>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <menu+0x1a58>)
 8002f84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002f86:	4b6b      	ldr	r3, [pc, #428]	@ (8003134 <menu+0x1a58>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d902      	bls.n	8002f94 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002f8e:	4b69      	ldr	r3, [pc, #420]	@ (8003134 <menu+0x1a58>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f94:	f001 f8e8 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f98:	2104      	movs	r1, #4
 8002f9a:	4868      	ldr	r0, [pc, #416]	@ (800313c <menu+0x1a60>)
 8002f9c:	f007 fac8 	bl	800a530 <HAL_GPIO_ReadPin>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d115      	bne.n	8002fd2 <menu+0x18f6>
 8002fa6:	4b66      	ldr	r3, [pc, #408]	@ (8003140 <menu+0x1a64>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	f083 0301 	eor.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002fb4:	4b5f      	ldr	r3, [pc, #380]	@ (8003134 <menu+0x1a58>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8003134 <menu+0x1a58>)
 8002fbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003134 <menu+0x1a58>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8003134 <menu+0x1a58>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fce:	f001 f8cb 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd2:	2108      	movs	r1, #8
 8002fd4:	4859      	ldr	r0, [pc, #356]	@ (800313c <menu+0x1a60>)
 8002fd6:	f007 faab 	bl	800a530 <HAL_GPIO_ReadPin>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10d      	bne.n	8002ffc <menu+0x1920>
 8002fe0:	4b57      	ldr	r3, [pc, #348]	@ (8003140 <menu+0x1a64>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f083 0301 	eor.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002fee:	4b51      	ldr	r3, [pc, #324]	@ (8003134 <menu+0x1a58>)
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <menu+0x1a68>)
 8002ff4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002ff6:	4b54      	ldr	r3, [pc, #336]	@ (8003148 <menu+0x1a6c>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <menu+0x1a70>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b13      	cmp	r3, #19
 8003002:	d174      	bne.n	80030ee <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8003004:	4b52      	ldr	r3, [pc, #328]	@ (8003150 <menu+0x1a74>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d105      	bne.n	8003018 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 800300c:	4a51      	ldr	r2, [pc, #324]	@ (8003154 <menu+0x1a78>)
 800300e:	2101      	movs	r1, #1
 8003010:	2001      	movs	r0, #1
 8003012:	f005 ff51 	bl	8008eb8 <lcd_print>
 8003016:	e008      	b.n	800302a <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8003018:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <menu+0x1a74>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d104      	bne.n	800302a <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8003020:	4a4d      	ldr	r2, [pc, #308]	@ (8003158 <menu+0x1a7c>)
 8003022:	2101      	movs	r1, #1
 8003024:	2001      	movs	r0, #1
 8003026:	f005 ff47 	bl	8008eb8 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 800302a:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <menu+0x1a80>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8003032:	4a4b      	ldr	r2, [pc, #300]	@ (8003160 <menu+0x1a84>)
 8003034:	2101      	movs	r1, #1
 8003036:	2002      	movs	r0, #2
 8003038:	f005 ff3e 	bl	8008eb8 <lcd_print>
 800303c:	e008      	b.n	8003050 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <menu+0x1a80>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d104      	bne.n	8003050 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8003046:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <menu+0x1a5c>)
 8003048:	2101      	movs	r1, #1
 800304a:	2002      	movs	r0, #2
 800304c:	f005 ff34 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003050:	2102      	movs	r1, #2
 8003052:	483a      	ldr	r0, [pc, #232]	@ (800313c <menu+0x1a60>)
 8003054:	f007 fa6c 	bl	800a530 <HAL_GPIO_ReadPin>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d115      	bne.n	800308a <menu+0x19ae>
 800305e:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <menu+0x1a64>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	f083 0301 	eor.w	r3, r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <menu+0x1a80>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b39      	ldr	r3, [pc, #228]	@ (800315c <menu+0x1a80>)
 8003076:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003078:	4b38      	ldr	r3, [pc, #224]	@ (800315c <menu+0x1a80>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d902      	bls.n	8003086 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8003080:	4b36      	ldr	r3, [pc, #216]	@ (800315c <menu+0x1a80>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003086:	f001 f86f 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800308a:	2104      	movs	r1, #4
 800308c:	482b      	ldr	r0, [pc, #172]	@ (800313c <menu+0x1a60>)
 800308e:	f007 fa4f 	bl	800a530 <HAL_GPIO_ReadPin>
 8003092:	4603      	mov	r3, r0
 8003094:	2b01      	cmp	r3, #1
 8003096:	d115      	bne.n	80030c4 <menu+0x19e8>
 8003098:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <menu+0x1a64>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	f083 0301 	eor.w	r3, r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80030a6:	4b2d      	ldr	r3, [pc, #180]	@ (800315c <menu+0x1a80>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <menu+0x1a80>)
 80030b0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80030b2:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <menu+0x1a80>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 80030ba:	4b28      	ldr	r3, [pc, #160]	@ (800315c <menu+0x1a80>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030c0:	f001 f852 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030c4:	2108      	movs	r1, #8
 80030c6:	481d      	ldr	r0, [pc, #116]	@ (800313c <menu+0x1a60>)
 80030c8:	f007 fa32 	bl	800a530 <HAL_GPIO_ReadPin>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10d      	bne.n	80030ee <menu+0x1a12>
 80030d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <menu+0x1a64>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	f083 0301 	eor.w	r3, r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <menu+0x1a80>)
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <menu+0x1a68>)
 80030e6:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80030e8:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <menu+0x1a6c>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80030ee:	4b17      	ldr	r3, [pc, #92]	@ (800314c <menu+0x1a70>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b14      	cmp	r3, #20
 80030f4:	f040 809e 	bne.w	8003234 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 80030f8:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <menu+0x1a74>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8003100:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <menu+0x1a88>)
 8003102:	2101      	movs	r1, #1
 8003104:	2001      	movs	r0, #1
 8003106:	f005 fed7 	bl	8008eb8 <lcd_print>
 800310a:	e008      	b.n	800311e <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 800310c:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <menu+0x1a74>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d104      	bne.n	800311e <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <menu+0x1a8c>)
 8003116:	2101      	movs	r1, #1
 8003118:	2001      	movs	r0, #1
 800311a:	f005 fecd 	bl	8008eb8 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <menu+0x1a90>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d126      	bne.n	8003174 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8003126:	4a12      	ldr	r2, [pc, #72]	@ (8003170 <menu+0x1a94>)
 8003128:	2101      	movs	r1, #1
 800312a:	2002      	movs	r0, #2
 800312c:	f005 fec4 	bl	8008eb8 <lcd_print>
 8003130:	e029      	b.n	8003186 <menu+0x1aaa>
 8003132:	bf00      	nop
 8003134:	20001580 	.word	0x20001580
 8003138:	20001960 	.word	0x20001960
 800313c:	40010800 	.word	0x40010800
 8003140:	2000159f 	.word	0x2000159f
 8003144:	200014a0 	.word	0x200014a0
 8003148:	2000159c 	.word	0x2000159c
 800314c:	20001570 	.word	0x20001570
 8003150:	2000157f 	.word	0x2000157f
 8003154:	20001ba4 	.word	0x20001ba4
 8003158:	20001bb8 	.word	0x20001bb8
 800315c:	20001581 	.word	0x20001581
 8003160:	2000194c 	.word	0x2000194c
 8003164:	20001bcc 	.word	0x20001bcc
 8003168:	20001be0 	.word	0x20001be0
 800316c:	20001582 	.word	0x20001582
 8003170:	20001bf4 	.word	0x20001bf4
		} else if(devirmeSilindirTipi == 1) {
 8003174:	4b39      	ldr	r3, [pc, #228]	@ (800325c <menu+0x1b80>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d104      	bne.n	8003186 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 800317c:	4a38      	ldr	r2, [pc, #224]	@ (8003260 <menu+0x1b84>)
 800317e:	2101      	movs	r1, #1
 8003180:	2002      	movs	r0, #2
 8003182:	f005 fe99 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003186:	2102      	movs	r1, #2
 8003188:	4836      	ldr	r0, [pc, #216]	@ (8003264 <menu+0x1b88>)
 800318a:	f007 f9d1 	bl	800a530 <HAL_GPIO_ReadPin>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d119      	bne.n	80031c8 <menu+0x1aec>
 8003194:	4b34      	ldr	r3, [pc, #208]	@ (8003268 <menu+0x1b8c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <menu+0x1aec>
 80031a2:	4b32      	ldr	r3, [pc, #200]	@ (800326c <menu+0x1b90>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d10e      	bne.n	80031c8 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80031aa:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <menu+0x1b80>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b2a      	ldr	r3, [pc, #168]	@ (800325c <menu+0x1b80>)
 80031b4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80031b6:	4b29      	ldr	r3, [pc, #164]	@ (800325c <menu+0x1b80>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d902      	bls.n	80031c4 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 80031be:	4b27      	ldr	r3, [pc, #156]	@ (800325c <menu+0x1b80>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031c4:	f000 ffd0 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80031c8:	2104      	movs	r1, #4
 80031ca:	4826      	ldr	r0, [pc, #152]	@ (8003264 <menu+0x1b88>)
 80031cc:	f007 f9b0 	bl	800a530 <HAL_GPIO_ReadPin>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d119      	bne.n	800320a <menu+0x1b2e>
 80031d6:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <menu+0x1b8c>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	f083 0301 	eor.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <menu+0x1b2e>
 80031e4:	4b21      	ldr	r3, [pc, #132]	@ (800326c <menu+0x1b90>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d10e      	bne.n	800320a <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <menu+0x1b80>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b19      	ldr	r3, [pc, #100]	@ (800325c <menu+0x1b80>)
 80031f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <menu+0x1b80>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8003200:	4b16      	ldr	r3, [pc, #88]	@ (800325c <menu+0x1b80>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003206:	f000 ffaf 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800320a:	2108      	movs	r1, #8
 800320c:	4815      	ldr	r0, [pc, #84]	@ (8003264 <menu+0x1b88>)
 800320e:	f007 f98f 	bl	800a530 <HAL_GPIO_ReadPin>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10d      	bne.n	8003234 <menu+0x1b58>
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <menu+0x1b8c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8003226:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <menu+0x1b80>)
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <menu+0x1b94>)
 800322c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800322e:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <menu+0x1b98>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003234:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <menu+0x1b9c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b15      	cmp	r3, #21
 800323a:	f040 8088 	bne.w	800334e <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 800323e:	4a0f      	ldr	r2, [pc, #60]	@ (800327c <menu+0x1ba0>)
 8003240:	2101      	movs	r1, #1
 8003242:	2001      	movs	r0, #1
 8003244:	f005 fe38 	bl	8008eb8 <lcd_print>

		if(platformSilindirTipi == 0) {
 8003248:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <menu+0x1ba4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11b      	bne.n	8003288 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8003250:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <menu+0x1ba8>)
 8003252:	2101      	movs	r1, #1
 8003254:	2002      	movs	r0, #2
 8003256:	f005 fe2f 	bl	8008eb8 <lcd_print>
 800325a:	e01e      	b.n	800329a <menu+0x1bbe>
 800325c:	20001582 	.word	0x20001582
 8003260:	20001c08 	.word	0x20001c08
 8003264:	40010800 	.word	0x40010800
 8003268:	2000159f 	.word	0x2000159f
 800326c:	2000157f 	.word	0x2000157f
 8003270:	200014a0 	.word	0x200014a0
 8003274:	2000159c 	.word	0x2000159c
 8003278:	20001570 	.word	0x20001570
 800327c:	20001c1c 	.word	0x20001c1c
 8003280:	20001583 	.word	0x20001583
 8003284:	20001bf4 	.word	0x20001bf4
		} else if(platformSilindirTipi == 1) {
 8003288:	4ba1      	ldr	r3, [pc, #644]	@ (8003510 <menu+0x1e34>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d104      	bne.n	800329a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003290:	4aa0      	ldr	r2, [pc, #640]	@ (8003514 <menu+0x1e38>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f005 fe0f 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800329a:	2102      	movs	r1, #2
 800329c:	489e      	ldr	r0, [pc, #632]	@ (8003518 <menu+0x1e3c>)
 800329e:	f007 f947 	bl	800a530 <HAL_GPIO_ReadPin>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d115      	bne.n	80032d4 <menu+0x1bf8>
 80032a8:	4b9c      	ldr	r3, [pc, #624]	@ (800351c <menu+0x1e40>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f083 0301 	eor.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 80032b6:	4b96      	ldr	r3, [pc, #600]	@ (8003510 <menu+0x1e34>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b94      	ldr	r3, [pc, #592]	@ (8003510 <menu+0x1e34>)
 80032c0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80032c2:	4b93      	ldr	r3, [pc, #588]	@ (8003510 <menu+0x1e34>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d902      	bls.n	80032d0 <menu+0x1bf4>
				platformSilindirTipi = 0;
 80032ca:	4b91      	ldr	r3, [pc, #580]	@ (8003510 <menu+0x1e34>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032d0:	f000 ff4a 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d4:	2104      	movs	r1, #4
 80032d6:	4890      	ldr	r0, [pc, #576]	@ (8003518 <menu+0x1e3c>)
 80032d8:	f007 f92a 	bl	800a530 <HAL_GPIO_ReadPin>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d115      	bne.n	800330e <menu+0x1c32>
 80032e2:	4b8e      	ldr	r3, [pc, #568]	@ (800351c <menu+0x1e40>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 80032f0:	4b87      	ldr	r3, [pc, #540]	@ (8003510 <menu+0x1e34>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <menu+0x1e34>)
 80032fa:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80032fc:	4b84      	ldr	r3, [pc, #528]	@ (8003510 <menu+0x1e34>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8003304:	4b82      	ldr	r3, [pc, #520]	@ (8003510 <menu+0x1e34>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800330a:	f000 ff2d 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800330e:	2108      	movs	r1, #8
 8003310:	4881      	ldr	r0, [pc, #516]	@ (8003518 <menu+0x1e3c>)
 8003312:	f007 f90d 	bl	800a530 <HAL_GPIO_ReadPin>
 8003316:	4603      	mov	r3, r0
 8003318:	2b01      	cmp	r3, #1
 800331a:	d118      	bne.n	800334e <menu+0x1c72>
 800331c:	4b7f      	ldr	r3, [pc, #508]	@ (800351c <menu+0x1e40>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d011      	beq.n	800334e <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 800332a:	4b79      	ldr	r3, [pc, #484]	@ (8003510 <menu+0x1e34>)
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	4b7c      	ldr	r3, [pc, #496]	@ (8003520 <menu+0x1e44>)
 8003330:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003332:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <menu+0x1e34>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d106      	bne.n	8003348 <menu+0x1c6c>
				altLimit = 1;
 800333a:	4b7a      	ldr	r3, [pc, #488]	@ (8003524 <menu+0x1e48>)
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003340:	4b78      	ldr	r3, [pc, #480]	@ (8003524 <menu+0x1e48>)
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	4b76      	ldr	r3, [pc, #472]	@ (8003520 <menu+0x1e44>)
 8003346:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003348:	4b77      	ldr	r3, [pc, #476]	@ (8003528 <menu+0x1e4c>)
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800334e:	4b77      	ldr	r3, [pc, #476]	@ (800352c <menu+0x1e50>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b16      	cmp	r3, #22
 8003354:	d164      	bne.n	8003420 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8003356:	4a76      	ldr	r2, [pc, #472]	@ (8003530 <menu+0x1e54>)
 8003358:	2101      	movs	r1, #1
 800335a:	2001      	movs	r0, #1
 800335c:	f005 fdac 	bl	8008eb8 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003360:	4a74      	ldr	r2, [pc, #464]	@ (8003534 <menu+0x1e58>)
 8003362:	2101      	movs	r1, #1
 8003364:	2002      	movs	r0, #2
 8003366:	f005 fda7 	bl	8008eb8 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800336a:	4b73      	ldr	r3, [pc, #460]	@ (8003538 <menu+0x1e5c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	220a      	movs	r2, #10
 8003370:	4972      	ldr	r1, [pc, #456]	@ (800353c <menu+0x1e60>)
 8003372:	4618      	mov	r0, r3
 8003374:	f00a fa20 	bl	800d7b8 <itoa>
		lcd_print(2,16,snum);
 8003378:	4a70      	ldr	r2, [pc, #448]	@ (800353c <menu+0x1e60>)
 800337a:	2110      	movs	r1, #16
 800337c:	2002      	movs	r0, #2
 800337e:	f005 fd9b 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003382:	2102      	movs	r1, #2
 8003384:	4864      	ldr	r0, [pc, #400]	@ (8003518 <menu+0x1e3c>)
 8003386:	f007 f8d3 	bl	800a530 <HAL_GPIO_ReadPin>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d115      	bne.n	80033bc <menu+0x1ce0>
 8003390:	4b62      	ldr	r3, [pc, #392]	@ (800351c <menu+0x1e40>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00e      	beq.n	80033bc <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800339e:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <menu+0x1e5c>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b64      	ldr	r3, [pc, #400]	@ (8003538 <menu+0x1e5c>)
 80033a8:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80033aa:	4b63      	ldr	r3, [pc, #396]	@ (8003538 <menu+0x1e5c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d902      	bls.n	80033b8 <menu+0x1cdc>
				yukariValfTmr = 0;
 80033b2:	4b61      	ldr	r3, [pc, #388]	@ (8003538 <menu+0x1e5c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033b8:	f000 fed6 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033bc:	2104      	movs	r1, #4
 80033be:	4856      	ldr	r0, [pc, #344]	@ (8003518 <menu+0x1e3c>)
 80033c0:	f007 f8b6 	bl	800a530 <HAL_GPIO_ReadPin>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d115      	bne.n	80033f6 <menu+0x1d1a>
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <menu+0x1e40>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80033d8:	4b57      	ldr	r3, [pc, #348]	@ (8003538 <menu+0x1e5c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b55      	ldr	r3, [pc, #340]	@ (8003538 <menu+0x1e5c>)
 80033e2:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80033e4:	4b54      	ldr	r3, [pc, #336]	@ (8003538 <menu+0x1e5c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d902      	bls.n	80033f2 <menu+0x1d16>
		   		yukariValfTmr = 5;
 80033ec:	4b52      	ldr	r3, [pc, #328]	@ (8003538 <menu+0x1e5c>)
 80033ee:	2205      	movs	r2, #5
 80033f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033f2:	f000 feb9 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f6:	2108      	movs	r1, #8
 80033f8:	4847      	ldr	r0, [pc, #284]	@ (8003518 <menu+0x1e3c>)
 80033fa:	f007 f899 	bl	800a530 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <menu+0x1d44>
 8003404:	4b45      	ldr	r3, [pc, #276]	@ (800351c <menu+0x1e40>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8003412:	4b49      	ldr	r3, [pc, #292]	@ (8003538 <menu+0x1e5c>)
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	4b42      	ldr	r3, [pc, #264]	@ (8003520 <menu+0x1e44>)
 8003418:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800341a:	4b43      	ldr	r3, [pc, #268]	@ (8003528 <menu+0x1e4c>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003420:	4b42      	ldr	r3, [pc, #264]	@ (800352c <menu+0x1e50>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b17      	cmp	r3, #23
 8003426:	d164      	bne.n	80034f2 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003428:	4a45      	ldr	r2, [pc, #276]	@ (8003540 <menu+0x1e64>)
 800342a:	2101      	movs	r1, #1
 800342c:	2001      	movs	r0, #1
 800342e:	f005 fd43 	bl	8008eb8 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003432:	4a40      	ldr	r2, [pc, #256]	@ (8003534 <menu+0x1e58>)
 8003434:	2101      	movs	r1, #1
 8003436:	2002      	movs	r0, #2
 8003438:	f005 fd3e 	bl	8008eb8 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800343c:	4b41      	ldr	r3, [pc, #260]	@ (8003544 <menu+0x1e68>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	220a      	movs	r2, #10
 8003442:	493e      	ldr	r1, [pc, #248]	@ (800353c <menu+0x1e60>)
 8003444:	4618      	mov	r0, r3
 8003446:	f00a f9b7 	bl	800d7b8 <itoa>
		lcd_print(2,16,snum);
 800344a:	4a3c      	ldr	r2, [pc, #240]	@ (800353c <menu+0x1e60>)
 800344c:	2110      	movs	r1, #16
 800344e:	2002      	movs	r0, #2
 8003450:	f005 fd32 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003454:	2102      	movs	r1, #2
 8003456:	4830      	ldr	r0, [pc, #192]	@ (8003518 <menu+0x1e3c>)
 8003458:	f007 f86a 	bl	800a530 <HAL_GPIO_ReadPin>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d115      	bne.n	800348e <menu+0x1db2>
 8003462:	4b2e      	ldr	r3, [pc, #184]	@ (800351c <menu+0x1e40>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f083 0301 	eor.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003470:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <menu+0x1e68>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b32      	ldr	r3, [pc, #200]	@ (8003544 <menu+0x1e68>)
 800347a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800347c:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <menu+0x1e68>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b05      	cmp	r3, #5
 8003482:	d902      	bls.n	800348a <menu+0x1dae>
				asagiValfTmr = 0;
 8003484:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <menu+0x1e68>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800348a:	f000 fe6d 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800348e:	2104      	movs	r1, #4
 8003490:	4821      	ldr	r0, [pc, #132]	@ (8003518 <menu+0x1e3c>)
 8003492:	f007 f84d 	bl	800a530 <HAL_GPIO_ReadPin>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d115      	bne.n	80034c8 <menu+0x1dec>
 800349c:	4b1f      	ldr	r3, [pc, #124]	@ (800351c <menu+0x1e40>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f083 0301 	eor.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 80034aa:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <menu+0x1e68>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <menu+0x1e68>)
 80034b4:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80034b6:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <menu+0x1e68>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <menu+0x1de8>
		   		asagiValfTmr = 5;
 80034be:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <menu+0x1e68>)
 80034c0:	2205      	movs	r2, #5
 80034c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034c4:	f000 fe50 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c8:	2108      	movs	r1, #8
 80034ca:	4813      	ldr	r0, [pc, #76]	@ (8003518 <menu+0x1e3c>)
 80034cc:	f007 f830 	bl	800a530 <HAL_GPIO_ReadPin>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10d      	bne.n	80034f2 <menu+0x1e16>
 80034d6:	4b11      	ldr	r3, [pc, #68]	@ (800351c <menu+0x1e40>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	f083 0301 	eor.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <menu+0x1e68>)
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <menu+0x1e44>)
 80034ea:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80034ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <menu+0x1e4c>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80034f2:	4b0e      	ldr	r3, [pc, #56]	@ (800352c <menu+0x1e50>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b18      	cmp	r3, #24
 80034f8:	f040 8093 	bne.w	8003622 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <menu+0x1e6c>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d125      	bne.n	8003550 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003504:	4a11      	ldr	r2, [pc, #68]	@ (800354c <menu+0x1e70>)
 8003506:	2101      	movs	r1, #1
 8003508:	2001      	movs	r0, #1
 800350a:	f005 fcd5 	bl	8008eb8 <lcd_print>
 800350e:	e028      	b.n	8003562 <menu+0x1e86>
 8003510:	20001583 	.word	0x20001583
 8003514:	20001c08 	.word	0x20001c08
 8003518:	40010800 	.word	0x40010800
 800351c:	2000159f 	.word	0x2000159f
 8003520:	200014a0 	.word	0x200014a0
 8003524:	20001576 	.word	0x20001576
 8003528:	2000159c 	.word	0x2000159c
 800352c:	20001570 	.word	0x20001570
 8003530:	20001c30 	.word	0x20001c30
 8003534:	20001a78 	.word	0x20001a78
 8003538:	20001584 	.word	0x20001584
 800353c:	20001510 	.word	0x20001510
 8003540:	20001c44 	.word	0x20001c44
 8003544:	20001585 	.word	0x20001585
 8003548:	2000157f 	.word	0x2000157f
 800354c:	20001c58 	.word	0x20001c58
		} else if(devirmeYuruyusSecim == 1) {
 8003550:	4b8c      	ldr	r3, [pc, #560]	@ (8003784 <menu+0x20a8>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d104      	bne.n	8003562 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003558:	4a8b      	ldr	r2, [pc, #556]	@ (8003788 <menu+0x20ac>)
 800355a:	2101      	movs	r1, #1
 800355c:	2001      	movs	r0, #1
 800355e:	f005 fcab 	bl	8008eb8 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003562:	4a8a      	ldr	r2, [pc, #552]	@ (800378c <menu+0x20b0>)
 8003564:	2101      	movs	r1, #1
 8003566:	2002      	movs	r0, #2
 8003568:	f005 fca6 	bl	8008eb8 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800356c:	4b88      	ldr	r3, [pc, #544]	@ (8003790 <menu+0x20b4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	220a      	movs	r2, #10
 8003572:	4988      	ldr	r1, [pc, #544]	@ (8003794 <menu+0x20b8>)
 8003574:	4618      	mov	r0, r3
 8003576:	f00a f91f 	bl	800d7b8 <itoa>
		lcd_print(2, 16, snum);
 800357a:	4a86      	ldr	r2, [pc, #536]	@ (8003794 <menu+0x20b8>)
 800357c:	2110      	movs	r1, #16
 800357e:	2002      	movs	r0, #2
 8003580:	f005 fc9a 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003584:	2102      	movs	r1, #2
 8003586:	4884      	ldr	r0, [pc, #528]	@ (8003798 <menu+0x20bc>)
 8003588:	f006 ffd2 	bl	800a530 <HAL_GPIO_ReadPin>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d115      	bne.n	80035be <menu+0x1ee2>
 8003592:	4b82      	ldr	r3, [pc, #520]	@ (800379c <menu+0x20c0>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f083 0301 	eor.w	r3, r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00e      	beq.n	80035be <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80035a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003790 <menu+0x20b4>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	4b79      	ldr	r3, [pc, #484]	@ (8003790 <menu+0x20b4>)
 80035aa:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80035ac:	4b78      	ldr	r3, [pc, #480]	@ (8003790 <menu+0x20b4>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d902      	bls.n	80035ba <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 80035b4:	4b76      	ldr	r3, [pc, #472]	@ (8003790 <menu+0x20b4>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035ba:	f000 fdd5 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035be:	2104      	movs	r1, #4
 80035c0:	4875      	ldr	r0, [pc, #468]	@ (8003798 <menu+0x20bc>)
 80035c2:	f006 ffb5 	bl	800a530 <HAL_GPIO_ReadPin>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d115      	bne.n	80035f8 <menu+0x1f1c>
 80035cc:	4b73      	ldr	r3, [pc, #460]	@ (800379c <menu+0x20c0>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80035da:	4b6d      	ldr	r3, [pc, #436]	@ (8003790 <menu+0x20b4>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	3b01      	subs	r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003790 <menu+0x20b4>)
 80035e4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80035e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003790 <menu+0x20b4>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80035ee:	4b68      	ldr	r3, [pc, #416]	@ (8003790 <menu+0x20b4>)
 80035f0:	2205      	movs	r2, #5
 80035f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035f4:	f000 fdb8 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f8:	2108      	movs	r1, #8
 80035fa:	4867      	ldr	r0, [pc, #412]	@ (8003798 <menu+0x20bc>)
 80035fc:	f006 ff98 	bl	800a530 <HAL_GPIO_ReadPin>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10d      	bne.n	8003622 <menu+0x1f46>
 8003606:	4b65      	ldr	r3, [pc, #404]	@ (800379c <menu+0x20c0>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	f083 0301 	eor.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003614:	4b5e      	ldr	r3, [pc, #376]	@ (8003790 <menu+0x20b4>)
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	4b61      	ldr	r3, [pc, #388]	@ (80037a0 <menu+0x20c4>)
 800361a:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800361c:	4b61      	ldr	r3, [pc, #388]	@ (80037a4 <menu+0x20c8>)
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003622:	4b61      	ldr	r3, [pc, #388]	@ (80037a8 <menu+0x20cc>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b19      	cmp	r3, #25
 8003628:	d172      	bne.n	8003710 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800362a:	4b56      	ldr	r3, [pc, #344]	@ (8003784 <menu+0x20a8>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d105      	bne.n	800363e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003632:	4a5e      	ldr	r2, [pc, #376]	@ (80037ac <menu+0x20d0>)
 8003634:	2101      	movs	r1, #1
 8003636:	2001      	movs	r0, #1
 8003638:	f005 fc3e 	bl	8008eb8 <lcd_print>
 800363c:	e008      	b.n	8003650 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800363e:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <menu+0x20a8>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d104      	bne.n	8003650 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003646:	4a5a      	ldr	r2, [pc, #360]	@ (80037b0 <menu+0x20d4>)
 8003648:	2101      	movs	r1, #1
 800364a:	2001      	movs	r0, #1
 800364c:	f005 fc34 	bl	8008eb8 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003650:	4a4e      	ldr	r2, [pc, #312]	@ (800378c <menu+0x20b0>)
 8003652:	2101      	movs	r1, #1
 8003654:	2002      	movs	r0, #2
 8003656:	f005 fc2f 	bl	8008eb8 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800365a:	4b56      	ldr	r3, [pc, #344]	@ (80037b4 <menu+0x20d8>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	220a      	movs	r2, #10
 8003660:	494c      	ldr	r1, [pc, #304]	@ (8003794 <menu+0x20b8>)
 8003662:	4618      	mov	r0, r3
 8003664:	f00a f8a8 	bl	800d7b8 <itoa>
		lcd_print(2,16,snum);
 8003668:	4a4a      	ldr	r2, [pc, #296]	@ (8003794 <menu+0x20b8>)
 800366a:	2110      	movs	r1, #16
 800366c:	2002      	movs	r0, #2
 800366e:	f005 fc23 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003672:	2102      	movs	r1, #2
 8003674:	4848      	ldr	r0, [pc, #288]	@ (8003798 <menu+0x20bc>)
 8003676:	f006 ff5b 	bl	800a530 <HAL_GPIO_ReadPin>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d115      	bne.n	80036ac <menu+0x1fd0>
 8003680:	4b46      	ldr	r3, [pc, #280]	@ (800379c <menu+0x20c0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f083 0301 	eor.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800368e:	4b49      	ldr	r3, [pc, #292]	@ (80037b4 <menu+0x20d8>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b47      	ldr	r3, [pc, #284]	@ (80037b4 <menu+0x20d8>)
 8003698:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800369a:	4b46      	ldr	r3, [pc, #280]	@ (80037b4 <menu+0x20d8>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d902      	bls.n	80036a8 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 80036a2:	4b44      	ldr	r3, [pc, #272]	@ (80037b4 <menu+0x20d8>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036a8:	f000 fd5e 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ac:	2104      	movs	r1, #4
 80036ae:	483a      	ldr	r0, [pc, #232]	@ (8003798 <menu+0x20bc>)
 80036b0:	f006 ff3e 	bl	800a530 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d115      	bne.n	80036e6 <menu+0x200a>
 80036ba:	4b38      	ldr	r3, [pc, #224]	@ (800379c <menu+0x20c0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80036c8:	4b3a      	ldr	r3, [pc, #232]	@ (80037b4 <menu+0x20d8>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4b38      	ldr	r3, [pc, #224]	@ (80037b4 <menu+0x20d8>)
 80036d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80036d4:	4b37      	ldr	r3, [pc, #220]	@ (80037b4 <menu+0x20d8>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d902      	bls.n	80036e2 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80036dc:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <menu+0x20d8>)
 80036de:	2205      	movs	r2, #5
 80036e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036e2:	f000 fd41 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e6:	2108      	movs	r1, #8
 80036e8:	482b      	ldr	r0, [pc, #172]	@ (8003798 <menu+0x20bc>)
 80036ea:	f006 ff21 	bl	800a530 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10d      	bne.n	8003710 <menu+0x2034>
 80036f4:	4b29      	ldr	r3, [pc, #164]	@ (800379c <menu+0x20c0>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003702:	4b2c      	ldr	r3, [pc, #176]	@ (80037b4 <menu+0x20d8>)
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	4b26      	ldr	r3, [pc, #152]	@ (80037a0 <menu+0x20c4>)
 8003708:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800370a:	4b26      	ldr	r3, [pc, #152]	@ (80037a4 <menu+0x20c8>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <menu+0x20cc>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b1a      	cmp	r3, #26
 8003716:	f040 80b7 	bne.w	8003888 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800371a:	4a27      	ldr	r2, [pc, #156]	@ (80037b8 <menu+0x20dc>)
 800371c:	2101      	movs	r1, #1
 800371e:	2001      	movs	r0, #1
 8003720:	f005 fbca 	bl	8008eb8 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003724:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <menu+0x20e0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b63      	cmp	r3, #99	@ 0x63
 800372a:	d911      	bls.n	8003750 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 800372c:	4a17      	ldr	r2, [pc, #92]	@ (800378c <menu+0x20b0>)
 800372e:	2101      	movs	r1, #1
 8003730:	2002      	movs	r0, #2
 8003732:	f005 fbc1 	bl	8008eb8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <menu+0x20e0>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	220a      	movs	r2, #10
 800373c:	4915      	ldr	r1, [pc, #84]	@ (8003794 <menu+0x20b8>)
 800373e:	4618      	mov	r0, r3
 8003740:	f00a f83a 	bl	800d7b8 <itoa>
			lcd_print(2,14,snum);
 8003744:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <menu+0x20b8>)
 8003746:	210e      	movs	r1, #14
 8003748:	2002      	movs	r0, #2
 800374a:	f005 fbb5 	bl	8008eb8 <lcd_print>
 800374e:	e04c      	b.n	80037ea <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <menu+0x20e0>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b09      	cmp	r3, #9
 8003756:	d933      	bls.n	80037c0 <menu+0x20e4>
 8003758:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <menu+0x20e0>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b63      	cmp	r3, #99	@ 0x63
 800375e:	d82f      	bhi.n	80037c0 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003760:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <menu+0x20b0>)
 8003762:	2101      	movs	r1, #1
 8003764:	2002      	movs	r0, #2
 8003766:	f005 fba7 	bl	8008eb8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <menu+0x20e0>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	220a      	movs	r2, #10
 8003770:	4908      	ldr	r1, [pc, #32]	@ (8003794 <menu+0x20b8>)
 8003772:	4618      	mov	r0, r3
 8003774:	f00a f820 	bl	800d7b8 <itoa>
			lcd_print(2, 15, snum);
 8003778:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <menu+0x20b8>)
 800377a:	210f      	movs	r1, #15
 800377c:	2002      	movs	r0, #2
 800377e:	f005 fb9b 	bl	8008eb8 <lcd_print>
 8003782:	e032      	b.n	80037ea <menu+0x210e>
 8003784:	2000157f 	.word	0x2000157f
 8003788:	20001c6c 	.word	0x20001c6c
 800378c:	20001a78 	.word	0x20001a78
 8003790:	20001586 	.word	0x20001586
 8003794:	20001510 	.word	0x20001510
 8003798:	40010800 	.word	0x40010800
 800379c:	2000159f 	.word	0x2000159f
 80037a0:	200014a0 	.word	0x200014a0
 80037a4:	2000159c 	.word	0x2000159c
 80037a8:	20001570 	.word	0x20001570
 80037ac:	20001c80 	.word	0x20001c80
 80037b0:	20001c94 	.word	0x20001c94
 80037b4:	20001587 	.word	0x20001587
 80037b8:	20001ca8 	.word	0x20001ca8
 80037bc:	20001588 	.word	0x20001588
		} else if(makineCalismaTmr <=  9) {
 80037c0:	4b72      	ldr	r3, [pc, #456]	@ (800398c <menu+0x22b0>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d810      	bhi.n	80037ea <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 80037c8:	4a71      	ldr	r2, [pc, #452]	@ (8003990 <menu+0x22b4>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	2002      	movs	r0, #2
 80037ce:	f005 fb73 	bl	8008eb8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80037d2:	4b6e      	ldr	r3, [pc, #440]	@ (800398c <menu+0x22b0>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	220a      	movs	r2, #10
 80037d8:	496e      	ldr	r1, [pc, #440]	@ (8003994 <menu+0x22b8>)
 80037da:	4618      	mov	r0, r3
 80037dc:	f009 ffec 	bl	800d7b8 <itoa>
			lcd_print(2, 16, snum);
 80037e0:	4a6c      	ldr	r2, [pc, #432]	@ (8003994 <menu+0x22b8>)
 80037e2:	2110      	movs	r1, #16
 80037e4:	2002      	movs	r0, #2
 80037e6:	f005 fb67 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ea:	2102      	movs	r1, #2
 80037ec:	486a      	ldr	r0, [pc, #424]	@ (8003998 <menu+0x22bc>)
 80037ee:	f006 fe9f 	bl	800a530 <HAL_GPIO_ReadPin>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d115      	bne.n	8003824 <menu+0x2148>
 80037f8:	4b68      	ldr	r3, [pc, #416]	@ (800399c <menu+0x22c0>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	f083 0301 	eor.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00e      	beq.n	8003824 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003806:	4b61      	ldr	r3, [pc, #388]	@ (800398c <menu+0x22b0>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b5f      	ldr	r3, [pc, #380]	@ (800398c <menu+0x22b0>)
 8003810:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003812:	4b5e      	ldr	r3, [pc, #376]	@ (800398c <menu+0x22b0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2bb4      	cmp	r3, #180	@ 0xb4
 8003818:	d902      	bls.n	8003820 <menu+0x2144>
				makineCalismaTmr = 0;
 800381a:	4b5c      	ldr	r3, [pc, #368]	@ (800398c <menu+0x22b0>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003820:	f000 fca2 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003824:	2104      	movs	r1, #4
 8003826:	485c      	ldr	r0, [pc, #368]	@ (8003998 <menu+0x22bc>)
 8003828:	f006 fe82 	bl	800a530 <HAL_GPIO_ReadPin>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d115      	bne.n	800385e <menu+0x2182>
 8003832:	4b5a      	ldr	r3, [pc, #360]	@ (800399c <menu+0x22c0>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	f083 0301 	eor.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003840:	4b52      	ldr	r3, [pc, #328]	@ (800398c <menu+0x22b0>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4b50      	ldr	r3, [pc, #320]	@ (800398c <menu+0x22b0>)
 800384a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800384c:	4b4f      	ldr	r3, [pc, #316]	@ (800398c <menu+0x22b0>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2bb5      	cmp	r3, #181	@ 0xb5
 8003852:	d902      	bls.n	800385a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <menu+0x22b0>)
 8003856:	22b4      	movs	r2, #180	@ 0xb4
 8003858:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800385a:	f000 fc85 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800385e:	2108      	movs	r1, #8
 8003860:	484d      	ldr	r0, [pc, #308]	@ (8003998 <menu+0x22bc>)
 8003862:	f006 fe65 	bl	800a530 <HAL_GPIO_ReadPin>
 8003866:	4603      	mov	r3, r0
 8003868:	2b01      	cmp	r3, #1
 800386a:	d10d      	bne.n	8003888 <menu+0x21ac>
 800386c:	4b4b      	ldr	r3, [pc, #300]	@ (800399c <menu+0x22c0>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f083 0301 	eor.w	r3, r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800387a:	4b44      	ldr	r3, [pc, #272]	@ (800398c <menu+0x22b0>)
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	4b48      	ldr	r3, [pc, #288]	@ (80039a0 <menu+0x22c4>)
 8003880:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003882:	4b48      	ldr	r3, [pc, #288]	@ (80039a4 <menu+0x22c8>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003888:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <menu+0x22cc>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b1b      	cmp	r3, #27
 800388e:	d166      	bne.n	800395e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003890:	4a46      	ldr	r2, [pc, #280]	@ (80039ac <menu+0x22d0>)
 8003892:	2101      	movs	r1, #1
 8003894:	2001      	movs	r0, #1
 8003896:	f005 fb0f 	bl	8008eb8 <lcd_print>

		if(buzzer == 0) {
 800389a:	4b45      	ldr	r3, [pc, #276]	@ (80039b0 <menu+0x22d4>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 80038a2:	4a44      	ldr	r2, [pc, #272]	@ (80039b4 <menu+0x22d8>)
 80038a4:	2101      	movs	r1, #1
 80038a6:	2002      	movs	r0, #2
 80038a8:	f005 fb06 	bl	8008eb8 <lcd_print>
 80038ac:	e008      	b.n	80038c0 <menu+0x21e4>
		} else if(buzzer == 1) {
 80038ae:	4b40      	ldr	r3, [pc, #256]	@ (80039b0 <menu+0x22d4>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d104      	bne.n	80038c0 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 80038b6:	4a40      	ldr	r2, [pc, #256]	@ (80039b8 <menu+0x22dc>)
 80038b8:	2101      	movs	r1, #1
 80038ba:	2002      	movs	r0, #2
 80038bc:	f005 fafc 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c0:	2102      	movs	r1, #2
 80038c2:	4835      	ldr	r0, [pc, #212]	@ (8003998 <menu+0x22bc>)
 80038c4:	f006 fe34 	bl	800a530 <HAL_GPIO_ReadPin>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d115      	bne.n	80038fa <menu+0x221e>
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <menu+0x22c0>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f083 0301 	eor.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <menu+0x221e>
			buzzer = buzzer + 1;
 80038dc:	4b34      	ldr	r3, [pc, #208]	@ (80039b0 <menu+0x22d4>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b32      	ldr	r3, [pc, #200]	@ (80039b0 <menu+0x22d4>)
 80038e6:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80038e8:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <menu+0x22d4>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d902      	bls.n	80038f6 <menu+0x221a>
				buzzer = 0;
 80038f0:	4b2f      	ldr	r3, [pc, #188]	@ (80039b0 <menu+0x22d4>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038f6:	f000 fc37 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fa:	2104      	movs	r1, #4
 80038fc:	4826      	ldr	r0, [pc, #152]	@ (8003998 <menu+0x22bc>)
 80038fe:	f006 fe17 	bl	800a530 <HAL_GPIO_ReadPin>
 8003902:	4603      	mov	r3, r0
 8003904:	2b01      	cmp	r3, #1
 8003906:	d115      	bne.n	8003934 <menu+0x2258>
 8003908:	4b24      	ldr	r3, [pc, #144]	@ (800399c <menu+0x22c0>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	f083 0301 	eor.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <menu+0x2258>
			buzzer = buzzer - 1;
 8003916:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <menu+0x22d4>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	3b01      	subs	r3, #1
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <menu+0x22d4>)
 8003920:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <menu+0x22d4>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <menu+0x2254>
		   		buzzer = 1;
 800392a:	4b21      	ldr	r3, [pc, #132]	@ (80039b0 <menu+0x22d4>)
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003930:	f000 fc1a 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003934:	2108      	movs	r1, #8
 8003936:	4818      	ldr	r0, [pc, #96]	@ (8003998 <menu+0x22bc>)
 8003938:	f006 fdfa 	bl	800a530 <HAL_GPIO_ReadPin>
 800393c:	4603      	mov	r3, r0
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10d      	bne.n	800395e <menu+0x2282>
 8003942:	4b16      	ldr	r3, [pc, #88]	@ (800399c <menu+0x22c0>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <menu+0x2282>
			eepromData[25] = buzzer;
 8003950:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <menu+0x22d4>)
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <menu+0x22c4>)
 8003956:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003958:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <menu+0x22c8>)
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <menu+0x22cc>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b1c      	cmp	r3, #28
 8003964:	f040 8088 	bne.w	8003a78 <menu+0x239c>
		calismaSayModu = 0;
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <menu+0x22e0>)
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800396e:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <menu+0x22e4>)
 8003970:	2101      	movs	r1, #1
 8003972:	2001      	movs	r0, #1
 8003974:	f005 faa0 	bl	8008eb8 <lcd_print>

		if(demoMode == 0) {
 8003978:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <menu+0x22e8>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d123      	bne.n	80039c8 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003980:	4a0c      	ldr	r2, [pc, #48]	@ (80039b4 <menu+0x22d8>)
 8003982:	2101      	movs	r1, #1
 8003984:	2002      	movs	r0, #2
 8003986:	f005 fa97 	bl	8008eb8 <lcd_print>
 800398a:	e026      	b.n	80039da <menu+0x22fe>
 800398c:	20001588 	.word	0x20001588
 8003990:	20001a78 	.word	0x20001a78
 8003994:	20001510 	.word	0x20001510
 8003998:	40010800 	.word	0x40010800
 800399c:	2000159f 	.word	0x2000159f
 80039a0:	200014a0 	.word	0x200014a0
 80039a4:	2000159c 	.word	0x2000159c
 80039a8:	20001570 	.word	0x20001570
 80039ac:	20000128 	.word	0x20000128
 80039b0:	2000158c 	.word	0x2000158c
 80039b4:	2000194c 	.word	0x2000194c
 80039b8:	20001960 	.word	0x20001960
 80039bc:	2000158f 	.word	0x2000158f
 80039c0:	2000013c 	.word	0x2000013c
 80039c4:	2000158e 	.word	0x2000158e
		} else if(demoMode == 1) {
 80039c8:	4b80      	ldr	r3, [pc, #512]	@ (8003bcc <menu+0x24f0>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d104      	bne.n	80039da <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80039d0:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd0 <menu+0x24f4>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	2002      	movs	r0, #2
 80039d6:	f005 fa6f 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039da:	2102      	movs	r1, #2
 80039dc:	487d      	ldr	r0, [pc, #500]	@ (8003bd4 <menu+0x24f8>)
 80039de:	f006 fda7 	bl	800a530 <HAL_GPIO_ReadPin>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d115      	bne.n	8003a14 <menu+0x2338>
 80039e8:	4b7b      	ldr	r3, [pc, #492]	@ (8003bd8 <menu+0x24fc>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	f083 0301 	eor.w	r3, r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <menu+0x2338>
			demoMode = demoMode + 1;
 80039f6:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <menu+0x24f0>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b73      	ldr	r3, [pc, #460]	@ (8003bcc <menu+0x24f0>)
 8003a00:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003a02:	4b72      	ldr	r3, [pc, #456]	@ (8003bcc <menu+0x24f0>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d902      	bls.n	8003a10 <menu+0x2334>
				demoMode = 0;
 8003a0a:	4b70      	ldr	r3, [pc, #448]	@ (8003bcc <menu+0x24f0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a10:	f000 fbaa 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a14:	2104      	movs	r1, #4
 8003a16:	486f      	ldr	r0, [pc, #444]	@ (8003bd4 <menu+0x24f8>)
 8003a18:	f006 fd8a 	bl	800a530 <HAL_GPIO_ReadPin>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d115      	bne.n	8003a4e <menu+0x2372>
 8003a22:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd8 <menu+0x24fc>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f083 0301 	eor.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <menu+0x2372>
			demoMode = demoMode - 1;
 8003a30:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <menu+0x24f0>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	4b64      	ldr	r3, [pc, #400]	@ (8003bcc <menu+0x24f0>)
 8003a3a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003a3c:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <menu+0x24f0>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <menu+0x236e>
		   		demoMode = 1;
 8003a44:	4b61      	ldr	r3, [pc, #388]	@ (8003bcc <menu+0x24f0>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a4a:	f000 fb8d 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a4e:	2108      	movs	r1, #8
 8003a50:	4860      	ldr	r0, [pc, #384]	@ (8003bd4 <menu+0x24f8>)
 8003a52:	f006 fd6d 	bl	800a530 <HAL_GPIO_ReadPin>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10d      	bne.n	8003a78 <menu+0x239c>
 8003a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd8 <menu+0x24fc>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f083 0301 	eor.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <menu+0x239c>
			eepromData[26] = demoMode;
 8003a6a:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <menu+0x24f0>)
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <menu+0x2500>)
 8003a70:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003a72:	4b5b      	ldr	r3, [pc, #364]	@ (8003be0 <menu+0x2504>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003a78:	4b5a      	ldr	r3, [pc, #360]	@ (8003be4 <menu+0x2508>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b1d      	cmp	r3, #29
 8003a7e:	f040 80d5 	bne.w	8003c2c <menu+0x2550>
		finalCount=0;
 8003a82:	4b59      	ldr	r3, [pc, #356]	@ (8003be8 <menu+0x250c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003a88:	4b58      	ldr	r3, [pc, #352]	@ (8003bec <menu+0x2510>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d135      	bne.n	8003afc <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003a90:	4a57      	ldr	r2, [pc, #348]	@ (8003bf0 <menu+0x2514>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2001      	movs	r0, #1
 8003a96:	f005 fa0f 	bl	8008eb8 <lcd_print>

			if(demoMode == 1) {
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <menu+0x24f0>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d113      	bne.n	8003aca <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003aa2:	4b54      	ldr	r3, [pc, #336]	@ (8003bf4 <menu+0x2518>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	1a9a      	subs	r2, r3, r2
 8003aae:	4b4e      	ldr	r3, [pc, #312]	@ (8003be8 <menu+0x250c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8003be8 <menu+0x250c>)
 8003ab6:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf8 <menu+0x251c>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b4a      	ldr	r3, [pc, #296]	@ (8003be8 <menu+0x250c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a48      	ldr	r2, [pc, #288]	@ (8003be8 <menu+0x250c>)
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e012      	b.n	8003af0 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003aca:	4b4c      	ldr	r3, [pc, #304]	@ (8003bfc <menu+0x2520>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	1a9a      	subs	r2, r3, r2
 8003ad6:	4b44      	ldr	r3, [pc, #272]	@ (8003be8 <menu+0x250c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	4a42      	ldr	r2, [pc, #264]	@ (8003be8 <menu+0x250c>)
 8003ade:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003ae0:	4b47      	ldr	r3, [pc, #284]	@ (8003c00 <menu+0x2524>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b40      	ldr	r3, [pc, #256]	@ (8003be8 <menu+0x250c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	4a3e      	ldr	r2, [pc, #248]	@ (8003be8 <menu+0x250c>)
 8003aee:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003af0:	4b3d      	ldr	r3, [pc, #244]	@ (8003be8 <menu+0x250c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fa89 	bl	800400c <displayCycleOnLCD>
 8003afa:	e00d      	b.n	8003b18 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <menu+0x2510>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d109      	bne.n	8003b18 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003b04:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf0 <menu+0x2514>)
 8003b06:	2101      	movs	r1, #1
 8003b08:	2001      	movs	r0, #1
 8003b0a:	f005 f9d5 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c04 <menu+0x2528>)
 8003b10:	2101      	movs	r1, #1
 8003b12:	2002      	movs	r0, #2
 8003b14:	f005 f9d0 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b18:	2102      	movs	r1, #2
 8003b1a:	482e      	ldr	r0, [pc, #184]	@ (8003bd4 <menu+0x24f8>)
 8003b1c:	f006 fd08 	bl	800a530 <HAL_GPIO_ReadPin>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d115      	bne.n	8003b52 <menu+0x2476>
 8003b26:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <menu+0x24fc>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003b34:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <menu+0x2510>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bec <menu+0x2510>)
 8003b3e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003b40:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <menu+0x2510>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d902      	bls.n	8003b4e <menu+0x2472>
				calismaSayModu = 0;
 8003b48:	4b28      	ldr	r3, [pc, #160]	@ (8003bec <menu+0x2510>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b4e:	f000 fb0b 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b52:	2104      	movs	r1, #4
 8003b54:	481f      	ldr	r0, [pc, #124]	@ (8003bd4 <menu+0x24f8>)
 8003b56:	f006 fceb 	bl	800a530 <HAL_GPIO_ReadPin>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d115      	bne.n	8003b8c <menu+0x24b0>
 8003b60:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <menu+0x24fc>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	f083 0301 	eor.w	r3, r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bec <menu+0x2510>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <menu+0x2510>)
 8003b78:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bec <menu+0x2510>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <menu+0x2510>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b88:	f000 faee 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b8c:	2108      	movs	r1, #8
 8003b8e:	4811      	ldr	r0, [pc, #68]	@ (8003bd4 <menu+0x24f8>)
 8003b90:	f006 fcce 	bl	800a530 <HAL_GPIO_ReadPin>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d148      	bne.n	8003c2c <menu+0x2550>
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <menu+0x24fc>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d041      	beq.n	8003c2c <menu+0x2550>
			if(demoMode == 1) {
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <menu+0x24f0>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d12b      	bne.n	8003c08 <menu+0x252c>
				eepromData[28] = 0;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <menu+0x2500>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <menu+0x2500>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <menu+0x251c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <menu+0x2518>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e02a      	b.n	8003c20 <menu+0x2544>
 8003bca:	bf00      	nop
 8003bcc:	2000158e 	.word	0x2000158e
 8003bd0:	20001960 	.word	0x20001960
 8003bd4:	40010800 	.word	0x40010800
 8003bd8:	2000159f 	.word	0x2000159f
 8003bdc:	200014a0 	.word	0x200014a0
 8003be0:	2000159c 	.word	0x2000159c
 8003be4:	20001570 	.word	0x20001570
 8003be8:	2000156c 	.word	0x2000156c
 8003bec:	2000158f 	.word	0x2000158f
 8003bf0:	20001cbc 	.word	0x20001cbc
 8003bf4:	2000156b 	.word	0x2000156b
 8003bf8:	20001569 	.word	0x20001569
 8003bfc:	2000156a 	.word	0x2000156a
 8003c00:	20001568 	.word	0x20001568
 8003c04:	20001cd0 	.word	0x20001cd0
			} else {
				eepromData[27] = 0;
 8003c08:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <menu+0x265c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d38 <menu+0x265c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003c14:	4b49      	ldr	r3, [pc, #292]	@ (8003d3c <menu+0x2660>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003c1a:	4b49      	ldr	r3, [pc, #292]	@ (8003d40 <menu+0x2664>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003c20:	4b48      	ldr	r3, [pc, #288]	@ (8003d44 <menu+0x2668>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003c26:	4b48      	ldr	r3, [pc, #288]	@ (8003d48 <menu+0x266c>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003c2c:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <menu+0x2670>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b1e      	cmp	r3, #30
 8003c32:	d16a      	bne.n	8003d0a <menu+0x262e>
		calismaSayModu = 0;
 8003c34:	4b43      	ldr	r3, [pc, #268]	@ (8003d44 <menu+0x2668>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003c3a:	4a45      	ldr	r2, [pc, #276]	@ (8003d50 <menu+0x2674>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f005 f93a 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003c44:	4a43      	ldr	r2, [pc, #268]	@ (8003d54 <menu+0x2678>)
 8003c46:	2101      	movs	r1, #1
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f005 f935 	bl	8008eb8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4841      	ldr	r0, [pc, #260]	@ (8003d58 <menu+0x267c>)
 8003c52:	f006 fc6d 	bl	800a530 <HAL_GPIO_ReadPin>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d11c      	bne.n	8003c96 <menu+0x25ba>
 8003c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <menu+0x2680>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <menu+0x2684>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b3b      	ldr	r3, [pc, #236]	@ (8003d60 <menu+0x2684>)
 8003c74:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003c76:	4b3a      	ldr	r3, [pc, #232]	@ (8003d60 <menu+0x2684>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d902      	bls.n	8003c84 <menu+0x25a8>
				dilSecim = 0;
 8003c7e:	4b38      	ldr	r3, [pc, #224]	@ (8003d60 <menu+0x2684>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003c84:	f003 ff70 	bl	8007b68 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003c88:	4b35      	ldr	r3, [pc, #212]	@ (8003d60 <menu+0x2684>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 fae5 	bl	800625c <loadMenuTexts>

			bekle();
 8003c92:	f000 fa69 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c96:	2104      	movs	r1, #4
 8003c98:	482f      	ldr	r0, [pc, #188]	@ (8003d58 <menu+0x267c>)
 8003c9a:	f006 fc49 	bl	800a530 <HAL_GPIO_ReadPin>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11c      	bne.n	8003cde <menu+0x2602>
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d5c <menu+0x2680>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d015      	beq.n	8003cde <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <menu+0x2684>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b29      	ldr	r3, [pc, #164]	@ (8003d60 <menu+0x2684>)
 8003cbc:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <menu+0x2684>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <menu+0x25f0>
		   		dilSecim = 1;
 8003cc6:	4b26      	ldr	r3, [pc, #152]	@ (8003d60 <menu+0x2684>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003ccc:	f003 ff4c 	bl	8007b68 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003cd0:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <menu+0x2684>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f002 fac1 	bl	800625c <loadMenuTexts>

			bekle();
 8003cda:	f000 fa45 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cde:	2108      	movs	r1, #8
 8003ce0:	481d      	ldr	r0, [pc, #116]	@ (8003d58 <menu+0x267c>)
 8003ce2:	f006 fc25 	bl	800a530 <HAL_GPIO_ReadPin>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10e      	bne.n	8003d0a <menu+0x262e>
 8003cec:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <menu+0x2680>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <menu+0x262e>
			eepromData[33] = dilSecim;
 8003cfa:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <menu+0x2684>)
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003d38 <menu+0x265c>)
 8003d00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003d04:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <menu+0x266c>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <menu+0x2670>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b1f      	cmp	r3, #31
 8003d10:	f040 8087 	bne.w	8003e22 <menu+0x2746>
		calismaSayModu = 0;
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <menu+0x2668>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <menu+0x2688>)
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	2001      	movs	r0, #1
 8003d20:	f005 f8ca 	bl	8008eb8 <lcd_print>

		if(iotMode == 0) {
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <menu+0x268c>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d121      	bne.n	8003d70 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d6c <menu+0x2690>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	2002      	movs	r0, #2
 8003d32:	f005 f8c1 	bl	8008eb8 <lcd_print>
 8003d36:	e024      	b.n	8003d82 <menu+0x26a6>
 8003d38:	200014a0 	.word	0x200014a0
 8003d3c:	20001568 	.word	0x20001568
 8003d40:	2000156a 	.word	0x2000156a
 8003d44:	2000158f 	.word	0x2000158f
 8003d48:	2000159c 	.word	0x2000159c
 8003d4c:	20001570 	.word	0x20001570
 8003d50:	20001ce4 	.word	0x20001ce4
 8003d54:	20001cf8 	.word	0x20001cf8
 8003d58:	40010800 	.word	0x40010800
 8003d5c:	2000159f 	.word	0x2000159f
 8003d60:	20001590 	.word	0x20001590
 8003d64:	20000150 	.word	0x20000150
 8003d68:	2000159b 	.word	0x2000159b
 8003d6c:	2000194c 	.word	0x2000194c
		} else if(iotMode == 1) {
 8003d70:	4b99      	ldr	r3, [pc, #612]	@ (8003fd8 <menu+0x28fc>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d104      	bne.n	8003d82 <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003d78:	4a98      	ldr	r2, [pc, #608]	@ (8003fdc <menu+0x2900>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	2002      	movs	r0, #2
 8003d7e:	f005 f89b 	bl	8008eb8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d82:	2102      	movs	r1, #2
 8003d84:	4896      	ldr	r0, [pc, #600]	@ (8003fe0 <menu+0x2904>)
 8003d86:	f006 fbd3 	bl	800a530 <HAL_GPIO_ReadPin>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d115      	bne.n	8003dbc <menu+0x26e0>
 8003d90:	4b94      	ldr	r3, [pc, #592]	@ (8003fe4 <menu+0x2908>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f083 0301 	eor.w	r3, r3, #1
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00e      	beq.n	8003dbc <menu+0x26e0>
			iotMode = iotMode + 1;
 8003d9e:	4b8e      	ldr	r3, [pc, #568]	@ (8003fd8 <menu+0x28fc>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4b8c      	ldr	r3, [pc, #560]	@ (8003fd8 <menu+0x28fc>)
 8003da8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003daa:	4b8b      	ldr	r3, [pc, #556]	@ (8003fd8 <menu+0x28fc>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d902      	bls.n	8003db8 <menu+0x26dc>
				iotMode = 0;
 8003db2:	4b89      	ldr	r3, [pc, #548]	@ (8003fd8 <menu+0x28fc>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003db8:	f000 f9d6 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	4888      	ldr	r0, [pc, #544]	@ (8003fe0 <menu+0x2904>)
 8003dc0:	f006 fbb6 	bl	800a530 <HAL_GPIO_ReadPin>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d115      	bne.n	8003df6 <menu+0x271a>
 8003dca:	4b86      	ldr	r3, [pc, #536]	@ (8003fe4 <menu+0x2908>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f083 0301 	eor.w	r3, r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00e      	beq.n	8003df6 <menu+0x271a>
			iotMode = iotMode - 1;
 8003dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8003fd8 <menu+0x28fc>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	4b7d      	ldr	r3, [pc, #500]	@ (8003fd8 <menu+0x28fc>)
 8003de2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003de4:	4b7c      	ldr	r3, [pc, #496]	@ (8003fd8 <menu+0x28fc>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <menu+0x2716>
		   		iotMode = 1;
 8003dec:	4b7a      	ldr	r3, [pc, #488]	@ (8003fd8 <menu+0x28fc>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003df2:	f000 f9b9 	bl	8004168 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df6:	2108      	movs	r1, #8
 8003df8:	4879      	ldr	r0, [pc, #484]	@ (8003fe0 <menu+0x2904>)
 8003dfa:	f006 fb99 	bl	800a530 <HAL_GPIO_ReadPin>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10e      	bne.n	8003e22 <menu+0x2746>
 8003e04:	4b77      	ldr	r3, [pc, #476]	@ (8003fe4 <menu+0x2908>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	f083 0301 	eor.w	r3, r3, #1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <menu+0x2746>
			eepromData[48] = iotMode;
 8003e12:	4b71      	ldr	r3, [pc, #452]	@ (8003fd8 <menu+0x28fc>)
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	4b74      	ldr	r3, [pc, #464]	@ (8003fe8 <menu+0x290c>)
 8003e18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003e1c:	4b73      	ldr	r3, [pc, #460]	@ (8003fec <menu+0x2910>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003e22:	4b73      	ldr	r3, [pc, #460]	@ (8003ff0 <menu+0x2914>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d127      	bne.n	8003e7a <menu+0x279e>
		calismaSayModu = 0;
 8003e2a:	4b72      	ldr	r3, [pc, #456]	@ (8003ff4 <menu+0x2918>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003e30:	4a71      	ldr	r2, [pc, #452]	@ (8003ff8 <menu+0x291c>)
 8003e32:	2101      	movs	r1, #1
 8003e34:	2001      	movs	r0, #1
 8003e36:	f005 f83f 	bl	8008eb8 <lcd_print>

		convertArrays(1);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f7fc fd34 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003e40:	2032      	movs	r0, #50	@ 0x32
 8003e42:	f005 fda5 	bl	8009990 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003e46:	2001      	movs	r0, #1
 8003e48:	f7fd fbec 	bl	8001624 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4864      	ldr	r0, [pc, #400]	@ (8003fe0 <menu+0x2904>)
 8003e50:	f006 fb6e 	bl	800a530 <HAL_GPIO_ReadPin>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10f      	bne.n	8003e7a <menu+0x279e>
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	4860      	ldr	r0, [pc, #384]	@ (8003fe0 <menu+0x2904>)
 8003e5e:	f006 fb67 	bl	800a530 <HAL_GPIO_ReadPin>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d108      	bne.n	8003e7a <menu+0x279e>
 8003e68:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe4 <menu+0x2908>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003e76:	f004 f8eb 	bl	8008050 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff0 <menu+0x2914>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b21      	cmp	r3, #33	@ 0x21
 8003e80:	d12b      	bne.n	8003eda <menu+0x27fe>
		calismaSayModu = 0;
 8003e82:	4b5c      	ldr	r3, [pc, #368]	@ (8003ff4 <menu+0x2918>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003e88:	2002      	movs	r0, #2
 8003e8a:	f7fc fd0d 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003e8e:	2032      	movs	r0, #50	@ 0x32
 8003e90:	f005 fd7e 	bl	8009990 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003e94:	2002      	movs	r0, #2
 8003e96:	f7fd fbc5 	bl	8001624 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4850      	ldr	r0, [pc, #320]	@ (8003fe0 <menu+0x2904>)
 8003e9e:	f006 fb47 	bl	800a530 <HAL_GPIO_ReadPin>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d118      	bne.n	8003eda <menu+0x27fe>
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	484d      	ldr	r0, [pc, #308]	@ (8003fe0 <menu+0x2904>)
 8003eac:	f006 fb40 	bl	800a530 <HAL_GPIO_ReadPin>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d111      	bne.n	8003eda <menu+0x27fe>
 8003eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe4 <menu+0x2908>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	f083 0301 	eor.w	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <menu+0x27fe>
			takeWifiSSID();
 8003ec4:	f004 fad0 	bl	8008468 <takeWifiSSID>

			convertArrays(2);
 8003ec8:	2002      	movs	r0, #2
 8003eca:	f7fc fced 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003ece:	2032      	movs	r0, #50	@ 0x32
 8003ed0:	f005 fd5e 	bl	8009990 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f7fd fba5 	bl	8001624 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003eda:	4b45      	ldr	r3, [pc, #276]	@ (8003ff0 <menu+0x2914>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b22      	cmp	r3, #34	@ 0x22
 8003ee0:	d12b      	bne.n	8003f3a <menu+0x285e>
		calismaSayModu = 0;
 8003ee2:	4b44      	ldr	r3, [pc, #272]	@ (8003ff4 <menu+0x2918>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f7fc fcdd 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003eee:	2032      	movs	r0, #50	@ 0x32
 8003ef0:	f005 fd4e 	bl	8009990 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f7fd fb95 	bl	8001624 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003efa:	2102      	movs	r1, #2
 8003efc:	4838      	ldr	r0, [pc, #224]	@ (8003fe0 <menu+0x2904>)
 8003efe:	f006 fb17 	bl	800a530 <HAL_GPIO_ReadPin>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d118      	bne.n	8003f3a <menu+0x285e>
 8003f08:	2104      	movs	r1, #4
 8003f0a:	4835      	ldr	r0, [pc, #212]	@ (8003fe0 <menu+0x2904>)
 8003f0c:	f006 fb10 	bl	800a530 <HAL_GPIO_ReadPin>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d111      	bne.n	8003f3a <menu+0x285e>
 8003f16:	4b33      	ldr	r3, [pc, #204]	@ (8003fe4 <menu+0x2908>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	f083 0301 	eor.w	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <menu+0x285e>
			takeWifiPass();
 8003f24:	f004 fc4c 	bl	80087c0 <takeWifiPass>

			convertArrays(3);
 8003f28:	2003      	movs	r0, #3
 8003f2a:	f7fc fcbd 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003f2e:	2032      	movs	r0, #50	@ 0x32
 8003f30:	f005 fd2e 	bl	8009990 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003f34:	2003      	movs	r0, #3
 8003f36:	f7fd fb75 	bl	8001624 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff0 <menu+0x2914>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b23      	cmp	r3, #35	@ 0x23
 8003f40:	d146      	bne.n	8003fd0 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003f42:	4a2e      	ldr	r2, [pc, #184]	@ (8003ffc <menu+0x2920>)
 8003f44:	2101      	movs	r1, #1
 8003f46:	2001      	movs	r0, #1
 8003f48:	f004 ffb6 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <menu+0x2924>)
 8003f4e:	2101      	movs	r1, #1
 8003f50:	2002      	movs	r0, #2
 8003f52:	f004 ffb1 	bl	8008eb8 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003f56:	2108      	movs	r1, #8
 8003f58:	4821      	ldr	r0, [pc, #132]	@ (8003fe0 <menu+0x2904>)
 8003f5a:	f006 fae9 	bl	800a530 <HAL_GPIO_ReadPin>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d135      	bne.n	8003fd0 <menu+0x28f4>
			menuGiris = 0;
 8003f64:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <menu+0x2928>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003f6a:	f005 fd07 	bl	800997c <HAL_GetTick>
 8003f6e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f70:	e007      	b.n	8003f82 <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f72:	f005 fd03 	bl	800997c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f80:	d806      	bhi.n	8003f90 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f82:	4821      	ldr	r0, [pc, #132]	@ (8004008 <menu+0x292c>)
 8003f84:	f007 f8fd 	bl	800b182 <HAL_I2C_GetError>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d0f1      	beq.n	8003f72 <menu+0x2896>
 8003f8e:	e000      	b.n	8003f92 <menu+0x28b6>
			        break;
 8003f90:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003f92:	f005 fcf3 	bl	800997c <HAL_GetTick>
 8003f96:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003f98:	e007      	b.n	8003faa <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f9a:	f005 fcef 	bl	800997c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fa8:	d806      	bhi.n	8003fb8 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003faa:	4817      	ldr	r0, [pc, #92]	@ (8004008 <menu+0x292c>)
 8003fac:	f007 f8dc 	bl	800b168 <HAL_I2C_GetState>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d1f1      	bne.n	8003f9a <menu+0x28be>
 8003fb6:	e000      	b.n	8003fba <menu+0x28de>
			        break;
 8003fb8:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f7fc fb72 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003fc0:	f004 ffa6 	bl	8008f10 <lcd_clear>
			HAL_Delay(500);
 8003fc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fc8:	f005 fce2 	bl	8009990 <HAL_Delay>
			NVIC_SystemReset();
 8003fcc:	f7fd fb70 	bl	80016b0 <__NVIC_SystemReset>
		}
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	2000159b 	.word	0x2000159b
 8003fdc:	20001960 	.word	0x20001960
 8003fe0:	40010800 	.word	0x40010800
 8003fe4:	2000159f 	.word	0x2000159f
 8003fe8:	200014a0 	.word	0x200014a0
 8003fec:	2000159c 	.word	0x2000159c
 8003ff0:	20001570 	.word	0x20001570
 8003ff4:	2000158f 	.word	0x2000158f
 8003ff8:	20001e74 	.word	0x20001e74
 8003ffc:	20001d0c 	.word	0x20001d0c
 8004000:	20001d20 	.word	0x20001d20
 8004004:	2000158d 	.word	0x2000158d
 8004008:	20001eec 	.word	0x20001eec

0800400c <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	@ 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8004014:	220a      	movs	r2, #10
 8004016:	491c      	ldr	r1, [pc, #112]	@ (8004088 <displayCycleOnLCD+0x7c>)
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f009 fbcd 	bl	800d7b8 <itoa>

    int length = strlen(snum);
 800401e:	481a      	ldr	r0, [pc, #104]	@ (8004088 <displayCycleOnLCD+0x7c>)
 8004020:	f7fc f900 	bl	8000224 <strlen>
 8004024:	4603      	mov	r3, r0
 8004026:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f1c3 0310 	rsb	r3, r3, #16
 800402e:	0fda      	lsrs	r2, r3, #31
 8004030:	4413      	add	r3, r2
 8004032:	105b      	asrs	r3, r3, #1
 8004034:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8004036:	f107 0308 	add.w	r3, r7, #8
 800403a:	2210      	movs	r2, #16
 800403c:	2120      	movs	r1, #32
 800403e:	4618      	mov	r0, r3
 8004040:	f009 fce2 	bl	800da08 <memset>
    displayLine[16] = '\0'; // Null terminator
 8004044:	2300      	movs	r3, #0
 8004046:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	e00d      	b.n	800406a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	4413      	add	r3, r2
 8004054:	490c      	ldr	r1, [pc, #48]	@ (8004088 <displayCycleOnLCD+0x7c>)
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	440a      	add	r2, r1
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	3328      	adds	r3, #40	@ 0x28
 800405e:	443b      	add	r3, r7
 8004060:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	3301      	adds	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	429a      	cmp	r2, r3
 8004070:	dbed      	blt.n	800404e <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	461a      	mov	r2, r3
 8004078:	2101      	movs	r1, #1
 800407a:	2002      	movs	r0, #2
 800407c:	f004 ff1c 	bl	8008eb8 <lcd_print>
}
 8004080:	bf00      	nop
 8004082:	3728      	adds	r7, #40	@ 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20001510 	.word	0x20001510

0800408c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d105      	bne.n	80040a8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800409c:	4a24      	ldr	r2, [pc, #144]	@ (8004130 <lcdUpdate+0xa4>)
 800409e:	2101      	movs	r1, #1
 80040a0:	2002      	movs	r0, #2
 80040a2:	f004 ff09 	bl	8008eb8 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 80040a6:	e03e      	b.n	8004126 <lcdUpdate+0x9a>
	} else if(y==2) {
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d105      	bne.n	80040ba <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80040ae:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <lcdUpdate+0xa4>)
 80040b0:	2102      	movs	r1, #2
 80040b2:	2002      	movs	r0, #2
 80040b4:	f004 ff00 	bl	8008eb8 <lcd_print>
}
 80040b8:	e035      	b.n	8004126 <lcdUpdate+0x9a>
	} else if(y==3) {
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d105      	bne.n	80040cc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <lcdUpdate+0xa4>)
 80040c2:	2103      	movs	r1, #3
 80040c4:	2002      	movs	r0, #2
 80040c6:	f004 fef7 	bl	8008eb8 <lcd_print>
}
 80040ca:	e02c      	b.n	8004126 <lcdUpdate+0x9a>
	} else if(y==4) {
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d105      	bne.n	80040de <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80040d2:	4a17      	ldr	r2, [pc, #92]	@ (8004130 <lcdUpdate+0xa4>)
 80040d4:	2104      	movs	r1, #4
 80040d6:	2002      	movs	r0, #2
 80040d8:	f004 feee 	bl	8008eb8 <lcd_print>
}
 80040dc:	e023      	b.n	8004126 <lcdUpdate+0x9a>
	} else if(y==5) {
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	d105      	bne.n	80040f0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80040e4:	4a12      	ldr	r2, [pc, #72]	@ (8004130 <lcdUpdate+0xa4>)
 80040e6:	2105      	movs	r1, #5
 80040e8:	2002      	movs	r0, #2
 80040ea:	f004 fee5 	bl	8008eb8 <lcd_print>
}
 80040ee:	e01a      	b.n	8004126 <lcdUpdate+0x9a>
	} else if(y==6) {
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d105      	bne.n	8004102 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80040f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004130 <lcdUpdate+0xa4>)
 80040f8:	2106      	movs	r1, #6
 80040fa:	2002      	movs	r0, #2
 80040fc:	f004 fedc 	bl	8008eb8 <lcd_print>
}
 8004100:	e011      	b.n	8004126 <lcdUpdate+0x9a>
	} else if (y==7) {
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b07      	cmp	r3, #7
 8004106:	d10e      	bne.n	8004126 <lcdUpdate+0x9a>
		lcd_clear();
 8004108:	f004 ff02 	bl	8008f10 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 800410c:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <lcdUpdate+0xa8>)
 800410e:	2101      	movs	r1, #1
 8004110:	2001      	movs	r0, #1
 8004112:	f004 fed1 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8004116:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <lcdUpdate+0xac>)
 8004118:	2101      	movs	r1, #1
 800411a:	2002      	movs	r0, #2
 800411c:	f004 fecc 	bl	8008eb8 <lcd_print>
		HAL_Delay(10);
 8004120:	200a      	movs	r0, #10
 8004122:	f005 fc35 	bl	8009990 <HAL_Delay>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	0800f07c 	.word	0x0800f07c
 8004134:	200000c4 	.word	0x200000c4
 8004138:	200000d8 	.word	0x200000d8

0800413c <checkLCDBacklight>:

void checkLCDBacklight() {
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8004140:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <checkLCDBacklight+0x24>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <checkLCDBacklight+0x28>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b3b      	cmp	r3, #59	@ 0x3b
 800414c:	d903      	bls.n	8004156 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800414e:	2000      	movs	r0, #0
 8004150:	f004 fefe 	bl	8008f50 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004154:	e002      	b.n	800415c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004156:	2001      	movs	r0, #1
 8004158:	f004 fefa 	bl	8008f50 <lcd_backlight>
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20001548 	.word	0x20001548
 8004164:	20001564 	.word	0x20001564

08004168 <bekle>:

void bekle() {
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
	timer1=millis;
 800416c:	4b47      	ldr	r3, [pc, #284]	@ (800428c <bekle+0x124>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a47      	ldr	r2, [pc, #284]	@ (8004290 <bekle+0x128>)
 8004172:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004174:	e002      	b.n	800417c <bekle+0x14>
    	butonKontrol = 1;
 8004176:	4b47      	ldr	r3, [pc, #284]	@ (8004294 <bekle+0x12c>)
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800417c:	2101      	movs	r1, #1
 800417e:	4846      	ldr	r0, [pc, #280]	@ (8004298 <bekle+0x130>)
 8004180:	f006 f9d6 	bl	800a530 <HAL_GPIO_ReadPin>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d109      	bne.n	800419e <bekle+0x36>
 800418a:	4b40      	ldr	r3, [pc, #256]	@ (800428c <bekle+0x124>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b40      	ldr	r3, [pc, #256]	@ (8004290 <bekle+0x128>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d0ef      	beq.n	8004176 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004196:	e002      	b.n	800419e <bekle+0x36>
    	butonKontrol = 1;
 8004198:	4b3e      	ldr	r3, [pc, #248]	@ (8004294 <bekle+0x12c>)
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800419e:	2108      	movs	r1, #8
 80041a0:	483e      	ldr	r0, [pc, #248]	@ (800429c <bekle+0x134>)
 80041a2:	f006 f9c5 	bl	800a530 <HAL_GPIO_ReadPin>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d109      	bne.n	80041c0 <bekle+0x58>
 80041ac:	4b37      	ldr	r3, [pc, #220]	@ (800428c <bekle+0x124>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b37      	ldr	r3, [pc, #220]	@ (8004290 <bekle+0x128>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0ef      	beq.n	8004198 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041b8:	e002      	b.n	80041c0 <bekle+0x58>
    	butonKontrol = 1;
 80041ba:	4b36      	ldr	r3, [pc, #216]	@ (8004294 <bekle+0x12c>)
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041c0:	2102      	movs	r1, #2
 80041c2:	4835      	ldr	r0, [pc, #212]	@ (8004298 <bekle+0x130>)
 80041c4:	f006 f9b4 	bl	800a530 <HAL_GPIO_ReadPin>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d109      	bne.n	80041e2 <bekle+0x7a>
 80041ce:	4b2f      	ldr	r3, [pc, #188]	@ (800428c <bekle+0x124>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <bekle+0x128>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d0ef      	beq.n	80041ba <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041da:	e002      	b.n	80041e2 <bekle+0x7a>
    	butonKontrol = 1;
 80041dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004294 <bekle+0x12c>)
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041e2:	2104      	movs	r1, #4
 80041e4:	482c      	ldr	r0, [pc, #176]	@ (8004298 <bekle+0x130>)
 80041e6:	f006 f9a3 	bl	800a530 <HAL_GPIO_ReadPin>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d109      	bne.n	8004204 <bekle+0x9c>
 80041f0:	4b26      	ldr	r3, [pc, #152]	@ (800428c <bekle+0x124>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <bekle+0x128>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0ef      	beq.n	80041dc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041fc:	e002      	b.n	8004204 <bekle+0x9c>
    	butonKontrol = 1;
 80041fe:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <bekle+0x12c>)
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004204:	2108      	movs	r1, #8
 8004206:	4824      	ldr	r0, [pc, #144]	@ (8004298 <bekle+0x130>)
 8004208:	f006 f992 	bl	800a530 <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d109      	bne.n	8004226 <bekle+0xbe>
 8004212:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <bekle+0x124>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <bekle+0x128>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d0ef      	beq.n	80041fe <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800421e:	e002      	b.n	8004226 <bekle+0xbe>
    	butonKontrol = 1;
 8004220:	4b1c      	ldr	r3, [pc, #112]	@ (8004294 <bekle+0x12c>)
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004226:	2180      	movs	r1, #128	@ 0x80
 8004228:	481c      	ldr	r0, [pc, #112]	@ (800429c <bekle+0x134>)
 800422a:	f006 f981 	bl	800a530 <HAL_GPIO_ReadPin>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <bekle+0xe0>
 8004234:	4b15      	ldr	r3, [pc, #84]	@ (800428c <bekle+0x124>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <bekle+0x128>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d0ef      	beq.n	8004220 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004240:	e002      	b.n	8004248 <bekle+0xe0>
    	butonKontrol = 1;
 8004242:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <bekle+0x12c>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800424c:	4813      	ldr	r0, [pc, #76]	@ (800429c <bekle+0x134>)
 800424e:	f006 f96f 	bl	800a530 <HAL_GPIO_ReadPin>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <bekle+0x104>
 8004258:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <bekle+0x124>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <bekle+0x128>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d0ee      	beq.n	8004242 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004264:	e002      	b.n	800426c <bekle+0x104>
    	butonKontrol = 1;
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <bekle+0x12c>)
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800426c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004270:	480a      	ldr	r0, [pc, #40]	@ (800429c <bekle+0x134>)
 8004272:	f006 f95d 	bl	800a530 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <bekle+0x120>
 800427c:	4b03      	ldr	r3, [pc, #12]	@ (800428c <bekle+0x124>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <bekle+0x128>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d0ee      	beq.n	8004266 <bekle+0xfe>
    }

}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20001548 	.word	0x20001548
 8004290:	20001550 	.word	0x20001550
 8004294:	2000159f 	.word	0x2000159f
 8004298:	40010800 	.word	0x40010800
 800429c:	40011000 	.word	0x40011000

080042a0 <buttonCheck>:

uint8_t buttonCheck(void) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 80042a4:	2101      	movs	r1, #1
 80042a6:	4815      	ldr	r0, [pc, #84]	@ (80042fc <buttonCheck+0x5c>)
 80042a8:	f006 f942 	bl	800a530 <HAL_GPIO_ReadPin>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d01b      	beq.n	80042ea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 80042b2:	2108      	movs	r1, #8
 80042b4:	4812      	ldr	r0, [pc, #72]	@ (8004300 <buttonCheck+0x60>)
 80042b6:	f006 f93b 	bl	800a530 <HAL_GPIO_ReadPin>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d014      	beq.n	80042ea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 80042c0:	2102      	movs	r1, #2
 80042c2:	480e      	ldr	r0, [pc, #56]	@ (80042fc <buttonCheck+0x5c>)
 80042c4:	f006 f934 	bl	800a530 <HAL_GPIO_ReadPin>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d00d      	beq.n	80042ea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 80042ce:	2104      	movs	r1, #4
 80042d0:	480a      	ldr	r0, [pc, #40]	@ (80042fc <buttonCheck+0x5c>)
 80042d2:	f006 f92d 	bl	800a530 <HAL_GPIO_ReadPin>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d006      	beq.n	80042ea <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80042dc:	2108      	movs	r1, #8
 80042de:	4807      	ldr	r0, [pc, #28]	@ (80042fc <buttonCheck+0x5c>)
 80042e0:	f006 f926 	bl	800a530 <HAL_GPIO_ReadPin>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d104      	bne.n	80042f4 <buttonCheck+0x54>
		backLightTimer = 0;
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <buttonCheck+0x64>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
		return 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <buttonCheck+0x56>
	}
	return 0;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40010800 	.word	0x40010800
 8004300:	40011000 	.word	0x40011000
 8004304:	20001564 	.word	0x20001564

08004308 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800430c:	4b13      	ldr	r3, [pc, #76]	@ (800435c <checkBasincSalteri+0x54>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <checkBasincSalteri+0x12>
		basincVar=1;
 8004314:	4b12      	ldr	r3, [pc, #72]	@ (8004360 <checkBasincSalteri+0x58>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <checkBasincSalteri+0x54>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d119      	bne.n	8004356 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004326:	480f      	ldr	r0, [pc, #60]	@ (8004364 <checkBasincSalteri+0x5c>)
 8004328:	f006 f902 	bl	800a530 <HAL_GPIO_ReadPin>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <checkBasincSalteri+0x60>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <checkBasincSalteri+0x64>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d90a      	bls.n	8004356 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <checkBasincSalteri+0x58>)
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004346:	e006      	b.n	8004356 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004348:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <checkBasincSalteri+0x60>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a07      	ldr	r2, [pc, #28]	@ (800436c <checkBasincSalteri+0x64>)
 800434e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004350:	4b03      	ldr	r3, [pc, #12]	@ (8004360 <checkBasincSalteri+0x58>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20001577 	.word	0x20001577
 8004360:	20001573 	.word	0x20001573
 8004364:	40011000 	.word	0x40011000
 8004368:	20001548 	.word	0x20001548
 800436c:	20001560 	.word	0x20001560

08004370 <checkBasGonder>:

void checkBasGonder() {
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004374:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <checkBasGonder+0x74>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10b      	bne.n	8004394 <checkBasGonder+0x24>
 800437c:	4b1a      	ldr	r3, [pc, #104]	@ (80043e8 <checkBasGonder+0x78>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <checkBasGonder+0x24>
 8004384:	4b19      	ldr	r3, [pc, #100]	@ (80043ec <checkBasGonder+0x7c>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800438c:	4b18      	ldr	r3, [pc, #96]	@ (80043f0 <checkBasGonder+0x80>)
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e009      	b.n	80043a8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004394:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <checkBasGonder+0x78>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80043a2:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <checkBasGonder+0x80>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <checkBasGonder+0x74>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10b      	bne.n	80043c8 <checkBasGonder+0x58>
 80043b0:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <checkBasGonder+0x84>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <checkBasGonder+0x58>
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <checkBasGonder+0x7c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80043c0:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <checkBasGonder+0x88>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80043c6:	e009      	b.n	80043dc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80043c8:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <checkBasGonder+0x84>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f083 0301 	eor.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80043d6:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <checkBasGonder+0x88>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	20001571 	.word	0x20001571
 80043e8:	200015a5 	.word	0x200015a5
 80043ec:	2000157f 	.word	0x2000157f
 80043f0:	200015ac 	.word	0x200015ac
 80043f4:	200015a8 	.word	0x200015a8
 80043f8:	200015ad 	.word	0x200015ad

080043fc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004400:	4b24      	ldr	r3, [pc, #144]	@ (8004494 <checkKapiSecimleri+0x98>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004408:	4b23      	ldr	r3, [pc, #140]	@ (8004498 <checkKapiSecimleri+0x9c>)
 800440a:	2201      	movs	r2, #1
 800440c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800440e:	4b21      	ldr	r3, [pc, #132]	@ (8004494 <checkKapiSecimleri+0x98>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10e      	bne.n	8004434 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800441a:	4820      	ldr	r0, [pc, #128]	@ (800449c <checkKapiSecimleri+0xa0>)
 800441c:	f006 f888 	bl	800a530 <HAL_GPIO_ReadPin>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004426:	4b1c      	ldr	r3, [pc, #112]	@ (8004498 <checkKapiSecimleri+0x9c>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e002      	b.n	8004434 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800442e:	4b1a      	ldr	r3, [pc, #104]	@ (8004498 <checkKapiSecimleri+0x9c>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004434:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <checkKapiSecimleri+0x98>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d10e      	bne.n	800445a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800443c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004440:	4816      	ldr	r0, [pc, #88]	@ (800449c <checkKapiSecimleri+0xa0>)
 8004442:	f006 f875 	bl	800a530 <HAL_GPIO_ReadPin>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <checkKapiSecimleri+0x9c>)
 800444e:	2201      	movs	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e002      	b.n	800445a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004454:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <checkKapiSecimleri+0x9c>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800445a:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <checkKapiSecimleri+0x98>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d116      	bne.n	8004490 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004466:	480d      	ldr	r0, [pc, #52]	@ (800449c <checkKapiSecimleri+0xa0>)
 8004468:	f006 f862 	bl	800a530 <HAL_GPIO_ReadPin>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <checkKapiSecimleri+0x8e>
 8004472:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004476:	4809      	ldr	r0, [pc, #36]	@ (800449c <checkKapiSecimleri+0xa0>)
 8004478:	f006 f85a 	bl	800a530 <HAL_GPIO_ReadPin>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004482:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <checkKapiSecimleri+0x9c>)
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004488:	e002      	b.n	8004490 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800448a:	4b03      	ldr	r3, [pc, #12]	@ (8004498 <checkKapiSecimleri+0x9c>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20001578 	.word	0x20001578
 8004498:	200015c2 	.word	0x200015c2
 800449c:	40010800 	.word	0x40010800

080044a0 <checkAktifCalisma>:

void checkAktifCalisma() {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80044a4:	4b66      	ldr	r3, [pc, #408]	@ (8004640 <checkAktifCalisma+0x1a0>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f041 8343 	bne.w	8005b34 <checkAktifCalisma+0x1694>
 80044ae:	4b65      	ldr	r3, [pc, #404]	@ (8004644 <checkAktifCalisma+0x1a4>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f041 833e 	bne.w	8005b34 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80044b8:	4b63      	ldr	r3, [pc, #396]	@ (8004648 <checkAktifCalisma+0x1a8>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11a      	bne.n	80044f6 <checkAktifCalisma+0x56>
 80044c0:	4b62      	ldr	r3, [pc, #392]	@ (800464c <checkAktifCalisma+0x1ac>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <checkAktifCalisma+0x56>
 80044c8:	4b61      	ldr	r3, [pc, #388]	@ (8004650 <checkAktifCalisma+0x1b0>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <checkAktifCalisma+0x46>
 80044d0:	4b60      	ldr	r3, [pc, #384]	@ (8004654 <checkAktifCalisma+0x1b4>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f083 0301 	eor.w	r3, r3, #1
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <checkAktifCalisma+0x46>
 80044de:	4b5e      	ldr	r3, [pc, #376]	@ (8004658 <checkAktifCalisma+0x1b8>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d007      	beq.n	80044f6 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80044e6:	4b5d      	ldr	r3, [pc, #372]	@ (800465c <checkAktifCalisma+0x1bc>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01c      	beq.n	8004528 <checkAktifCalisma+0x88>
 80044ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <checkAktifCalisma+0x1c0>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d118      	bne.n	8004528 <checkAktifCalisma+0x88>
 80044f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004664 <checkAktifCalisma+0x1c4>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <checkAktifCalisma+0x66>
 80044fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004668 <checkAktifCalisma+0x1c8>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d010      	beq.n	8004528 <checkAktifCalisma+0x88>
 8004506:	4b59      	ldr	r3, [pc, #356]	@ (800466c <checkAktifCalisma+0x1cc>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00c      	beq.n	8004528 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800450e:	2201      	movs	r2, #1
 8004510:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004514:	4856      	ldr	r0, [pc, #344]	@ (8004670 <checkAktifCalisma+0x1d0>)
 8004516:	f006 f822 	bl	800a55e <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800451a:	4b56      	ldr	r3, [pc, #344]	@ (8004674 <checkAktifCalisma+0x1d4>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004520:	4b55      	ldr	r3, [pc, #340]	@ (8004678 <checkAktifCalisma+0x1d8>)
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e008      	b.n	800453a <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004528:	2200      	movs	r2, #0
 800452a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800452e:	4850      	ldr	r0, [pc, #320]	@ (8004670 <checkAktifCalisma+0x1d0>)
 8004530:	f006 f815 	bl	800a55e <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004534:	4b4f      	ldr	r3, [pc, #316]	@ (8004674 <checkAktifCalisma+0x1d4>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800453a:	4b42      	ldr	r3, [pc, #264]	@ (8004644 <checkAktifCalisma+0x1a4>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d164      	bne.n	800460c <checkAktifCalisma+0x16c>
 8004542:	4b49      	ldr	r3, [pc, #292]	@ (8004668 <checkAktifCalisma+0x1c8>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <checkAktifCalisma+0xb2>
 800454a:	4b46      	ldr	r3, [pc, #280]	@ (8004664 <checkAktifCalisma+0x1c4>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d05c      	beq.n	800460c <checkAktifCalisma+0x16c>
 8004552:	4b46      	ldr	r3, [pc, #280]	@ (800466c <checkAktifCalisma+0x1cc>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d058      	beq.n	800460c <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800455a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800455e:	4844      	ldr	r0, [pc, #272]	@ (8004670 <checkAktifCalisma+0x1d0>)
 8004560:	f005 ffe6 	bl	800a530 <HAL_GPIO_ReadPin>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <checkAktifCalisma+0xd2>
 800456a:	4b44      	ldr	r3, [pc, #272]	@ (800467c <checkAktifCalisma+0x1dc>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d04c      	beq.n	800460c <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004572:	2102      	movs	r1, #2
 8004574:	4842      	ldr	r0, [pc, #264]	@ (8004680 <checkAktifCalisma+0x1e0>)
 8004576:	f005 ffdb 	bl	800a530 <HAL_GPIO_ReadPin>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d145      	bne.n	800460c <checkAktifCalisma+0x16c>
							&& (basincVar)
 8004580:	4b40      	ldr	r3, [pc, #256]	@ (8004684 <checkAktifCalisma+0x1e4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d041      	beq.n	800460c <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800458c:	4838      	ldr	r0, [pc, #224]	@ (8004670 <checkAktifCalisma+0x1d0>)
 800458e:	f005 ffcf 	bl	800a530 <HAL_GPIO_ReadPin>
 8004592:	4603      	mov	r3, r0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d10e      	bne.n	80045b6 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004598:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800459c:	4834      	ldr	r0, [pc, #208]	@ (8004670 <checkAktifCalisma+0x1d0>)
 800459e:	f005 ffc7 	bl	800a530 <HAL_GPIO_ReadPin>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80045a8:	2140      	movs	r1, #64	@ 0x40
 80045aa:	4835      	ldr	r0, [pc, #212]	@ (8004680 <checkAktifCalisma+0x1e0>)
 80045ac:	f005 ffc0 	bl	800a530 <HAL_GPIO_ReadPin>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d003      	beq.n	80045be <checkAktifCalisma+0x11e>
 80045b6:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <checkAktifCalisma+0x1a8>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d026      	beq.n	800460c <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 80045be:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <checkAktifCalisma+0x1b0>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	f083 0301 	eor.w	r3, r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01f      	beq.n	800460c <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 80045cc:	4b1f      	ldr	r3, [pc, #124]	@ (800464c <checkAktifCalisma+0x1ac>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	f083 0301 	eor.w	r3, r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d018      	beq.n	800460c <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80045da:	4b20      	ldr	r3, [pc, #128]	@ (800465c <checkAktifCalisma+0x1bc>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	f083 0301 	eor.w	r3, r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d011      	beq.n	800460c <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <checkAktifCalisma+0x1e8>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	f083 0301 	eor.w	r3, r3, #1
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80045f6:	4b25      	ldr	r3, [pc, #148]	@ (800468c <checkAktifCalisma+0x1ec>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	f083 0301 	eor.w	r3, r3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8004604:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <checkAktifCalisma+0x1a8>)
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	e002      	b.n	8004612 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 800460c:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <checkAktifCalisma+0x1a8>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <checkAktifCalisma+0x1a8>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03c      	beq.n	8004694 <checkAktifCalisma+0x1f4>
 800461a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800461e:	4818      	ldr	r0, [pc, #96]	@ (8004680 <checkAktifCalisma+0x1e0>)
 8004620:	f005 ff86 	bl	800a530 <HAL_GPIO_ReadPin>
 8004624:	4603      	mov	r3, r0
 8004626:	2b01      	cmp	r3, #1
 8004628:	d134      	bne.n	8004694 <checkAktifCalisma+0x1f4>
 800462a:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <checkAktifCalisma+0x1f0>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d030      	beq.n	8004694 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004632:	2201      	movs	r2, #1
 8004634:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004638:	480d      	ldr	r0, [pc, #52]	@ (8004670 <checkAktifCalisma+0x1d0>)
 800463a:	f005 ff90 	bl	800a55e <HAL_GPIO_WritePin>
 800463e:	e02f      	b.n	80046a0 <checkAktifCalisma+0x200>
 8004640:	2000158e 	.word	0x2000158e
 8004644:	2000158d 	.word	0x2000158d
 8004648:	200015a5 	.word	0x200015a5
 800464c:	200015a6 	.word	0x200015a6
 8004650:	200015a8 	.word	0x200015a8
 8004654:	200015a0 	.word	0x200015a0
 8004658:	20001583 	.word	0x20001583
 800465c:	200015a7 	.word	0x200015a7
 8004660:	20001582 	.word	0x20001582
 8004664:	200015c1 	.word	0x200015c1
 8004668:	200015d4 	.word	0x200015d4
 800466c:	200015c2 	.word	0x200015c2
 8004670:	40010c00 	.word	0x40010c00
 8004674:	200015c3 	.word	0x200015c3
 8004678:	200015af 	.word	0x200015af
 800467c:	200015ac 	.word	0x200015ac
 8004680:	40011000 	.word	0x40011000
 8004684:	20001573 	.word	0x20001573
 8004688:	200015aa 	.word	0x200015aa
 800468c:	200015ab 	.word	0x200015ab
 8004690:	2000157e 	.word	0x2000157e
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800469a:	4865      	ldr	r0, [pc, #404]	@ (8004830 <checkAktifCalisma+0x390>)
 800469c:	f005 ff5f 	bl	800a55e <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80046a0:	4b64      	ldr	r3, [pc, #400]	@ (8004834 <checkAktifCalisma+0x394>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <checkAktifCalisma+0x230>
 80046a8:	4b63      	ldr	r3, [pc, #396]	@ (8004838 <checkAktifCalisma+0x398>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d007      	beq.n	80046c0 <checkAktifCalisma+0x220>
 80046b0:	4b61      	ldr	r3, [pc, #388]	@ (8004838 <checkAktifCalisma+0x398>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d003      	beq.n	80046c0 <checkAktifCalisma+0x220>
 80046b8:	4b60      	ldr	r3, [pc, #384]	@ (800483c <checkAktifCalisma+0x39c>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80046c0:	2201      	movs	r2, #1
 80046c2:	2104      	movs	r1, #4
 80046c4:	485a      	ldr	r0, [pc, #360]	@ (8004830 <checkAktifCalisma+0x390>)
 80046c6:	f005 ff4a 	bl	800a55e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80046ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004840 <checkAktifCalisma+0x3a0>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80046d0:	4b5b      	ldr	r3, [pc, #364]	@ (8004840 <checkAktifCalisma+0x3a0>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d033      	beq.n	8004740 <checkAktifCalisma+0x2a0>
 80046d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046dc:	4854      	ldr	r0, [pc, #336]	@ (8004830 <checkAktifCalisma+0x390>)
 80046de:	f005 ff27 	bl	800a530 <HAL_GPIO_ReadPin>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <checkAktifCalisma+0x256>
 80046e8:	4b56      	ldr	r3, [pc, #344]	@ (8004844 <checkAktifCalisma+0x3a4>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f083 0301 	eor.w	r3, r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <checkAktifCalisma+0x264>
 80046f6:	2102      	movs	r1, #2
 80046f8:	4853      	ldr	r0, [pc, #332]	@ (8004848 <checkAktifCalisma+0x3a8>)
 80046fa:	f005 ff19 	bl	800a530 <HAL_GPIO_ReadPin>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11d      	bne.n	8004740 <checkAktifCalisma+0x2a0>
 8004704:	4b51      	ldr	r3, [pc, #324]	@ (800484c <checkAktifCalisma+0x3ac>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <checkAktifCalisma+0x274>
 800470c:	4b50      	ldr	r3, [pc, #320]	@ (8004850 <checkAktifCalisma+0x3b0>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <checkAktifCalisma+0x2a0>
 8004714:	4b4f      	ldr	r3, [pc, #316]	@ (8004854 <checkAktifCalisma+0x3b4>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <checkAktifCalisma+0x2a0>
 800471c:	4b4e      	ldr	r3, [pc, #312]	@ (8004858 <checkAktifCalisma+0x3b8>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <checkAktifCalisma+0x2a0>
 8004724:	4b4d      	ldr	r3, [pc, #308]	@ (800485c <checkAktifCalisma+0x3bc>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8004732:	4b4b      	ldr	r3, [pc, #300]	@ (8004860 <checkAktifCalisma+0x3c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a4b      	ldr	r2, [pc, #300]	@ (8004864 <checkAktifCalisma+0x3c4>)
 8004738:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800473a:	4b48      	ldr	r3, [pc, #288]	@ (800485c <checkAktifCalisma+0x3bc>)
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004740:	4b47      	ldr	r3, [pc, #284]	@ (8004860 <checkAktifCalisma+0x3c0>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <checkAktifCalisma+0x3c4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4a47      	ldr	r2, [pc, #284]	@ (8004868 <checkAktifCalisma+0x3c8>)
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	4293      	cmp	r3, r2
 8004750:	d303      	bcc.n	800475a <checkAktifCalisma+0x2ba>
 8004752:	4b42      	ldr	r3, [pc, #264]	@ (800485c <checkAktifCalisma+0x3bc>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d118      	bne.n	800478c <checkAktifCalisma+0x2ec>
 800475a:	4b3c      	ldr	r3, [pc, #240]	@ (800484c <checkAktifCalisma+0x3ac>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <checkAktifCalisma+0x2d6>
 8004768:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <checkAktifCalisma+0x3b0>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f083 0301 	eor.w	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <checkAktifCalisma+0x2ec>
 8004776:	4b37      	ldr	r3, [pc, #220]	@ (8004854 <checkAktifCalisma+0x3b4>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f083 0301 	eor.w	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d103      	bne.n	800478c <checkAktifCalisma+0x2ec>
 8004784:	4b34      	ldr	r3, [pc, #208]	@ (8004858 <checkAktifCalisma+0x3b8>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800478c:	2200      	movs	r2, #0
 800478e:	2104      	movs	r1, #4
 8004790:	4827      	ldr	r0, [pc, #156]	@ (8004830 <checkAktifCalisma+0x390>)
 8004792:	f005 fee4 	bl	800a55e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004796:	4b2a      	ldr	r3, [pc, #168]	@ (8004840 <checkAktifCalisma+0x3a0>)
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800479c:	4b2f      	ldr	r3, [pc, #188]	@ (800485c <checkAktifCalisma+0x3bc>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80047a2:	4b32      	ldr	r3, [pc, #200]	@ (800486c <checkAktifCalisma+0x3cc>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <checkAktifCalisma+0x310>
					cerceveVar=1;
 80047aa:	4b31      	ldr	r3, [pc, #196]	@ (8004870 <checkAktifCalisma+0x3d0>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80047b0:	4b2e      	ldr	r3, [pc, #184]	@ (800486c <checkAktifCalisma+0x3cc>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d116      	bne.n	80047e6 <checkAktifCalisma+0x346>
 80047b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004874 <checkAktifCalisma+0x3d4>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d112      	bne.n	80047e6 <checkAktifCalisma+0x346>
 80047c0:	2101      	movs	r1, #1
 80047c2:	4821      	ldr	r0, [pc, #132]	@ (8004848 <checkAktifCalisma+0x3a8>)
 80047c4:	f005 feb4 	bl	800a530 <HAL_GPIO_ReadPin>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <checkAktifCalisma+0x346>
 80047ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047d2:	4817      	ldr	r0, [pc, #92]	@ (8004830 <checkAktifCalisma+0x390>)
 80047d4:	f005 feac 	bl	800a530 <HAL_GPIO_ReadPin>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <checkAktifCalisma+0x346>
					cerceveVar=1;
 80047de:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <checkAktifCalisma+0x3d0>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e011      	b.n	800480a <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80047e6:	4b21      	ldr	r3, [pc, #132]	@ (800486c <checkAktifCalisma+0x3cc>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10d      	bne.n	800480a <checkAktifCalisma+0x36a>
 80047ee:	2101      	movs	r1, #1
 80047f0:	4815      	ldr	r0, [pc, #84]	@ (8004848 <checkAktifCalisma+0x3a8>)
 80047f2:	f005 fe9d 	bl	800a530 <HAL_GPIO_ReadPin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <checkAktifCalisma+0x36a>
 80047fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004874 <checkAktifCalisma+0x3d4>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <checkAktifCalisma+0x36a>
					cerceveVar=0;
 8004804:	4b1a      	ldr	r3, [pc, #104]	@ (8004870 <checkAktifCalisma+0x3d0>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 800480a:	4b18      	ldr	r3, [pc, #96]	@ (800486c <checkAktifCalisma+0x3cc>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d135      	bne.n	800487e <checkAktifCalisma+0x3de>
 8004812:	4b18      	ldr	r3, [pc, #96]	@ (8004874 <checkAktifCalisma+0x3d4>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d131      	bne.n	800487e <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800481a:	2101      	movs	r1, #1
 800481c:	480a      	ldr	r0, [pc, #40]	@ (8004848 <checkAktifCalisma+0x3a8>)
 800481e:	f005 fe87 	bl	800a530 <HAL_GPIO_ReadPin>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d127      	bne.n	8004878 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004828:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <checkAktifCalisma+0x3d0>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e026      	b.n	800487e <checkAktifCalisma+0x3de>
 8004830:	40010c00 	.word	0x40010c00
 8004834:	200015a5 	.word	0x200015a5
 8004838:	2000157f 	.word	0x2000157f
 800483c:	20001583 	.word	0x20001583
 8004840:	200015a9 	.word	0x200015a9
 8004844:	200015ac 	.word	0x200015ac
 8004848:	40011000 	.word	0x40011000
 800484c:	200015c1 	.word	0x200015c1
 8004850:	200015d4 	.word	0x200015d4
 8004854:	200015c2 	.word	0x200015c2
 8004858:	20001573 	.word	0x20001573
 800485c:	200015a1 	.word	0x200015a1
 8004860:	20001548 	.word	0x20001548
 8004864:	20001554 	.word	0x20001554
 8004868:	20001584 	.word	0x20001584
 800486c:	20001574 	.word	0x20001574
 8004870:	200015c6 	.word	0x200015c6
 8004874:	20001571 	.word	0x20001571
					} else {
						cerceveVar=0;
 8004878:	4b7f      	ldr	r3, [pc, #508]	@ (8004a78 <checkAktifCalisma+0x5d8>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800487e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a7c <checkAktifCalisma+0x5dc>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d17c      	bne.n	8004980 <checkAktifCalisma+0x4e0>
 8004886:	4b7e      	ldr	r3, [pc, #504]	@ (8004a80 <checkAktifCalisma+0x5e0>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d078      	beq.n	8004980 <checkAktifCalisma+0x4e0>
 800488e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a84 <checkAktifCalisma+0x5e4>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d074      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004896:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800489a:	487b      	ldr	r0, [pc, #492]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 800489c:	f005 fe48 	bl	800a530 <HAL_GPIO_ReadPin>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <checkAktifCalisma+0x40e>
 80048a6:	4b79      	ldr	r3, [pc, #484]	@ (8004a8c <checkAktifCalisma+0x5ec>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d068      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80048ae:	4b72      	ldr	r3, [pc, #456]	@ (8004a78 <checkAktifCalisma+0x5d8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d064      	beq.n	8004980 <checkAktifCalisma+0x4e0>
 80048b6:	4b76      	ldr	r3, [pc, #472]	@ (8004a90 <checkAktifCalisma+0x5f0>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f083 0301 	eor.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d05d      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80048c4:	2104      	movs	r1, #4
 80048c6:	4873      	ldr	r0, [pc, #460]	@ (8004a94 <checkAktifCalisma+0x5f4>)
 80048c8:	f005 fe32 	bl	800a530 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <checkAktifCalisma+0x43a>
 80048d2:	4b71      	ldr	r3, [pc, #452]	@ (8004a98 <checkAktifCalisma+0x5f8>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d152      	bne.n	8004980 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048de:	486a      	ldr	r0, [pc, #424]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 80048e0:	f005 fe26 	bl	800a530 <HAL_GPIO_ReadPin>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80048ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048ee:	4866      	ldr	r0, [pc, #408]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 80048f0:	f005 fe1e 	bl	800a530 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d106      	bne.n	8004908 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80048fa:	2140      	movs	r1, #64	@ 0x40
 80048fc:	4865      	ldr	r0, [pc, #404]	@ (8004a94 <checkAktifCalisma+0x5f4>)
 80048fe:	f005 fe17 	bl	800a530 <HAL_GPIO_ReadPin>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d003      	beq.n	8004910 <checkAktifCalisma+0x470>
 8004908:	4b64      	ldr	r3, [pc, #400]	@ (8004a9c <checkAktifCalisma+0x5fc>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d037      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004910:	4b63      	ldr	r3, [pc, #396]	@ (8004aa0 <checkAktifCalisma+0x600>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	f083 0301 	eor.w	r3, r3, #1
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d030      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800491e:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <checkAktifCalisma+0x604>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f083 0301 	eor.w	r3, r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d029      	beq.n	8004980 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 800492c:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa8 <checkAktifCalisma+0x608>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f083 0301 	eor.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d022      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800493a:	4b5c      	ldr	r3, [pc, #368]	@ (8004aac <checkAktifCalisma+0x60c>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f083 0301 	eor.w	r3, r3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004948:	4b59      	ldr	r3, [pc, #356]	@ (8004ab0 <checkAktifCalisma+0x610>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f083 0301 	eor.w	r3, r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d014      	beq.n	8004980 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004956:	4b57      	ldr	r3, [pc, #348]	@ (8004ab4 <checkAktifCalisma+0x614>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f083 0301 	eor.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004964:	2201      	movs	r2, #1
 8004966:	2102      	movs	r1, #2
 8004968:	4847      	ldr	r0, [pc, #284]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 800496a:	f005 fdf8 	bl	800a55e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800496e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a9c <checkAktifCalisma+0x5fc>)
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004974:	4b50      	ldr	r3, [pc, #320]	@ (8004ab8 <checkAktifCalisma+0x618>)
 8004976:	2201      	movs	r2, #1
 8004978:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800497a:	4b50      	ldr	r3, [pc, #320]	@ (8004abc <checkAktifCalisma+0x61c>)
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004980:	4b46      	ldr	r3, [pc, #280]	@ (8004a9c <checkAktifCalisma+0x5fc>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d033      	beq.n	80049f0 <checkAktifCalisma+0x550>
 8004988:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800498c:	483e      	ldr	r0, [pc, #248]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 800498e:	f005 fdcf 	bl	800a530 <HAL_GPIO_ReadPin>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d106      	bne.n	80049a6 <checkAktifCalisma+0x506>
 8004998:	4b3c      	ldr	r3, [pc, #240]	@ (8004a8c <checkAktifCalisma+0x5ec>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	f083 0301 	eor.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <checkAktifCalisma+0x51c>
 80049a6:	2104      	movs	r1, #4
 80049a8:	483a      	ldr	r0, [pc, #232]	@ (8004a94 <checkAktifCalisma+0x5f4>)
 80049aa:	f005 fdc1 	bl	800a530 <HAL_GPIO_ReadPin>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d11d      	bne.n	80049f0 <checkAktifCalisma+0x550>
 80049b4:	4b38      	ldr	r3, [pc, #224]	@ (8004a98 <checkAktifCalisma+0x5f8>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d019      	beq.n	80049f0 <checkAktifCalisma+0x550>
 80049bc:	4b30      	ldr	r3, [pc, #192]	@ (8004a80 <checkAktifCalisma+0x5e0>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <checkAktifCalisma+0x550>
 80049c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a84 <checkAktifCalisma+0x5e4>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d011      	beq.n	80049f0 <checkAktifCalisma+0x550>
 80049cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004a78 <checkAktifCalisma+0x5d8>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <checkAktifCalisma+0x550>
 80049d4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac0 <checkAktifCalisma+0x620>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	f083 0301 	eor.w	r3, r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <checkAktifCalisma+0x550>
					timer2=millis;
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <checkAktifCalisma+0x624>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a38      	ldr	r2, [pc, #224]	@ (8004ac8 <checkAktifCalisma+0x628>)
 80049e8:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80049ea:	4b35      	ldr	r3, [pc, #212]	@ (8004ac0 <checkAktifCalisma+0x620>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80049f0:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <checkAktifCalisma+0x624>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b34      	ldr	r3, [pc, #208]	@ (8004ac8 <checkAktifCalisma+0x628>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <checkAktifCalisma+0x62c>)
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d303      	bcc.n	8004a0a <checkAktifCalisma+0x56a>
 8004a02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac0 <checkAktifCalisma+0x620>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d114      	bne.n	8004a34 <checkAktifCalisma+0x594>
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <checkAktifCalisma+0x5e0>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	f083 0301 	eor.w	r3, r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10d      	bne.n	8004a34 <checkAktifCalisma+0x594>
 8004a18:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <checkAktifCalisma+0x5e4>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <checkAktifCalisma+0x594>
 8004a26:	4b14      	ldr	r3, [pc, #80]	@ (8004a78 <checkAktifCalisma+0x5d8>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	f083 0301 	eor.w	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004a34:	2200      	movs	r2, #0
 8004a36:	2102      	movs	r1, #2
 8004a38:	4813      	ldr	r0, [pc, #76]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 8004a3a:	f005 fd90 	bl	800a55e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004a3e:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <checkAktifCalisma+0x5fc>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004a44:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac0 <checkAktifCalisma+0x620>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004a4a:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <checkAktifCalisma+0x5fc>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d040      	beq.n	8004ad4 <checkAktifCalisma+0x634>
 8004a52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a56:	480f      	ldr	r0, [pc, #60]	@ (8004a94 <checkAktifCalisma+0x5f4>)
 8004a58:	f005 fd6a 	bl	800a530 <HAL_GPIO_ReadPin>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d138      	bne.n	8004ad4 <checkAktifCalisma+0x634>
 8004a62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <checkAktifCalisma+0x630>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d034      	beq.n	8004ad4 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4806      	ldr	r0, [pc, #24]	@ (8004a88 <checkAktifCalisma+0x5e8>)
 8004a70:	f005 fd75 	bl	800a55e <HAL_GPIO_WritePin>
 8004a74:	e033      	b.n	8004ade <checkAktifCalisma+0x63e>
 8004a76:	bf00      	nop
 8004a78:	200015c6 	.word	0x200015c6
 8004a7c:	2000158d 	.word	0x2000158d
 8004a80:	200015c1 	.word	0x200015c1
 8004a84:	200015c2 	.word	0x200015c2
 8004a88:	40010c00 	.word	0x40010c00
 8004a8c:	200015ad 	.word	0x200015ad
 8004a90:	200015c0 	.word	0x200015c0
 8004a94:	40011000 	.word	0x40011000
 8004a98:	20001576 	.word	0x20001576
 8004a9c:	200015a8 	.word	0x200015a8
 8004aa0:	200015a5 	.word	0x200015a5
 8004aa4:	200015a9 	.word	0x200015a9
 8004aa8:	200015a6 	.word	0x200015a6
 8004aac:	200015a7 	.word	0x200015a7
 8004ab0:	200015aa 	.word	0x200015aa
 8004ab4:	200015ab 	.word	0x200015ab
 8004ab8:	200015b0 	.word	0x200015b0
 8004abc:	200015d0 	.word	0x200015d0
 8004ac0:	200015a0 	.word	0x200015a0
 8004ac4:	20001548 	.word	0x20001548
 8004ac8:	20001554 	.word	0x20001554
 8004acc:	20001585 	.word	0x20001585
 8004ad0:	20001575 	.word	0x20001575
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4836      	ldr	r0, [pc, #216]	@ (8004bb4 <checkAktifCalisma+0x714>)
 8004ada:	f005 fd40 	bl	800a55e <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004ade:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <checkAktifCalisma+0x718>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f040 8080 	bne.w	8004be8 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004ae8:	4b34      	ldr	r3, [pc, #208]	@ (8004bbc <checkAktifCalisma+0x71c>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d003      	beq.n	8004af8 <checkAktifCalisma+0x658>
 8004af0:	4b32      	ldr	r3, [pc, #200]	@ (8004bbc <checkAktifCalisma+0x71c>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d177      	bne.n	8004be8 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004af8:	4b31      	ldr	r3, [pc, #196]	@ (8004bc0 <checkAktifCalisma+0x720>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d073      	beq.n	8004be8 <checkAktifCalisma+0x748>
 8004b00:	4b30      	ldr	r3, [pc, #192]	@ (8004bc4 <checkAktifCalisma+0x724>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d06f      	beq.n	8004be8 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004b08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b0c:	4829      	ldr	r0, [pc, #164]	@ (8004bb4 <checkAktifCalisma+0x714>)
 8004b0e:	f005 fd0f 	bl	800a530 <HAL_GPIO_ReadPin>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d167      	bne.n	8004be8 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004b18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b1c:	482a      	ldr	r0, [pc, #168]	@ (8004bc8 <checkAktifCalisma+0x728>)
 8004b1e:	f005 fd07 	bl	800a530 <HAL_GPIO_ReadPin>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <checkAktifCalisma+0x690>
 8004b28:	4b28      	ldr	r3, [pc, #160]	@ (8004bcc <checkAktifCalisma+0x72c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d15b      	bne.n	8004be8 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004b30:	2140      	movs	r1, #64	@ 0x40
 8004b32:	4825      	ldr	r0, [pc, #148]	@ (8004bc8 <checkAktifCalisma+0x728>)
 8004b34:	f005 fcfc 	bl	800a530 <HAL_GPIO_ReadPin>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10f      	bne.n	8004b5e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004b3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b42:	481c      	ldr	r0, [pc, #112]	@ (8004bb4 <checkAktifCalisma+0x714>)
 8004b44:	f005 fcf4 	bl	800a530 <HAL_GPIO_ReadPin>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b52:	4818      	ldr	r0, [pc, #96]	@ (8004bb4 <checkAktifCalisma+0x714>)
 8004b54:	f005 fcec 	bl	800a530 <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d003      	beq.n	8004b66 <checkAktifCalisma+0x6c6>
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd0 <checkAktifCalisma+0x730>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d040      	beq.n	8004be8 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004b66:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd4 <checkAktifCalisma+0x734>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	f083 0301 	eor.w	r3, r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d039      	beq.n	8004be8 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004b74:	4b18      	ldr	r3, [pc, #96]	@ (8004bd8 <checkAktifCalisma+0x738>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	f083 0301 	eor.w	r3, r3, #1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d032      	beq.n	8004be8 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004b82:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <checkAktifCalisma+0x73c>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	f083 0301 	eor.w	r3, r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02b      	beq.n	8004be8 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004b90:	4b13      	ldr	r3, [pc, #76]	@ (8004be0 <checkAktifCalisma+0x740>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f083 0301 	eor.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d024      	beq.n	8004be8 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004b9e:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <checkAktifCalisma+0x744>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f083 0301 	eor.w	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01d      	beq.n	8004be8 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004bac:	4b08      	ldr	r3, [pc, #32]	@ (8004bd0 <checkAktifCalisma+0x730>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e01c      	b.n	8004bee <checkAktifCalisma+0x74e>
 8004bb4:	40010c00 	.word	0x40010c00
 8004bb8:	2000158d 	.word	0x2000158d
 8004bbc:	2000157f 	.word	0x2000157f
 8004bc0:	200015c1 	.word	0x200015c1
 8004bc4:	200015c2 	.word	0x200015c2
 8004bc8:	40011000 	.word	0x40011000
 8004bcc:	20001580 	.word	0x20001580
 8004bd0:	200015a6 	.word	0x200015a6
 8004bd4:	200015a5 	.word	0x200015a5
 8004bd8:	200015a9 	.word	0x200015a9
 8004bdc:	200015a8 	.word	0x200015a8
 8004be0:	200015a7 	.word	0x200015a7
 8004be4:	200015ab 	.word	0x200015ab
				} else {
					devmotoryukaricalisiyor=0;
 8004be8:	4b64      	ldr	r3, [pc, #400]	@ (8004d7c <checkAktifCalisma+0x8dc>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004bee:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <checkAktifCalisma+0x8dc>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	4861      	ldr	r0, [pc, #388]	@ (8004d80 <checkAktifCalisma+0x8e0>)
 8004bfc:	f005 fcaf 	bl	800a55e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004c00:	4b60      	ldr	r3, [pc, #384]	@ (8004d84 <checkAktifCalisma+0x8e4>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004c06:	4b5f      	ldr	r3, [pc, #380]	@ (8004d84 <checkAktifCalisma+0x8e4>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d025      	beq.n	8004c5a <checkAktifCalisma+0x7ba>
 8004c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c12:	485d      	ldr	r0, [pc, #372]	@ (8004d88 <checkAktifCalisma+0x8e8>)
 8004c14:	f005 fc8c 	bl	800a530 <HAL_GPIO_ReadPin>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d007      	beq.n	8004c2e <checkAktifCalisma+0x78e>
 8004c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c22:	4857      	ldr	r0, [pc, #348]	@ (8004d80 <checkAktifCalisma+0x8e0>)
 8004c24:	f005 fc84 	bl	800a530 <HAL_GPIO_ReadPin>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d115      	bne.n	8004c5a <checkAktifCalisma+0x7ba>
 8004c2e:	4b57      	ldr	r3, [pc, #348]	@ (8004d8c <checkAktifCalisma+0x8ec>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <checkAktifCalisma+0x7ba>
 8004c36:	4b56      	ldr	r3, [pc, #344]	@ (8004d90 <checkAktifCalisma+0x8f0>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <checkAktifCalisma+0x7ba>
 8004c3e:	4b55      	ldr	r3, [pc, #340]	@ (8004d94 <checkAktifCalisma+0x8f4>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	f083 0301 	eor.w	r3, r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004c4c:	4b52      	ldr	r3, [pc, #328]	@ (8004d98 <checkAktifCalisma+0x8f8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a52      	ldr	r2, [pc, #328]	@ (8004d9c <checkAktifCalisma+0x8fc>)
 8004c52:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004c54:	4b4f      	ldr	r3, [pc, #316]	@ (8004d94 <checkAktifCalisma+0x8f4>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <checkAktifCalisma+0x8f8>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <checkAktifCalisma+0x8fc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	4a4e      	ldr	r2, [pc, #312]	@ (8004da0 <checkAktifCalisma+0x900>)
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d303      	bcc.n	8004c74 <checkAktifCalisma+0x7d4>
 8004c6c:	4b49      	ldr	r3, [pc, #292]	@ (8004d94 <checkAktifCalisma+0x8f4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <checkAktifCalisma+0x7f0>
 8004c74:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <checkAktifCalisma+0x8ec>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f083 0301 	eor.w	r3, r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <checkAktifCalisma+0x7f0>
 8004c82:	4b43      	ldr	r3, [pc, #268]	@ (8004d90 <checkAktifCalisma+0x8f0>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	f083 0301 	eor.w	r3, r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004c90:	2200      	movs	r2, #0
 8004c92:	2120      	movs	r1, #32
 8004c94:	483a      	ldr	r0, [pc, #232]	@ (8004d80 <checkAktifCalisma+0x8e0>)
 8004c96:	f005 fc62 	bl	800a55e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d84 <checkAktifCalisma+0x8e4>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8004d94 <checkAktifCalisma+0x8f4>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8004da4 <checkAktifCalisma+0x904>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 8088 	bne.w	8004dc0 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8004da8 <checkAktifCalisma+0x908>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d003      	beq.n	8004cc0 <checkAktifCalisma+0x820>
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8004da8 <checkAktifCalisma+0x908>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d17f      	bne.n	8004dc0 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004cc0:	4b32      	ldr	r3, [pc, #200]	@ (8004d8c <checkAktifCalisma+0x8ec>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d07b      	beq.n	8004dc0 <checkAktifCalisma+0x920>
 8004cc8:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <checkAktifCalisma+0x8f0>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d077      	beq.n	8004dc0 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004cd0:	2140      	movs	r1, #64	@ 0x40
 8004cd2:	482b      	ldr	r0, [pc, #172]	@ (8004d80 <checkAktifCalisma+0x8e0>)
 8004cd4:	f005 fc2c 	bl	800a530 <HAL_GPIO_ReadPin>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d170      	bne.n	8004dc0 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ce2:	4827      	ldr	r0, [pc, #156]	@ (8004d80 <checkAktifCalisma+0x8e0>)
 8004ce4:	f005 fc24 	bl	800a530 <HAL_GPIO_ReadPin>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <checkAktifCalisma+0x856>
 8004cee:	4b2f      	ldr	r3, [pc, #188]	@ (8004dac <checkAktifCalisma+0x90c>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d164      	bne.n	8004dc0 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cfa:	4823      	ldr	r0, [pc, #140]	@ (8004d88 <checkAktifCalisma+0x8e8>)
 8004cfc:	f005 fc18 	bl	800a530 <HAL_GPIO_ReadPin>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10f      	bne.n	8004d26 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004d06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d0a:	481f      	ldr	r0, [pc, #124]	@ (8004d88 <checkAktifCalisma+0x8e8>)
 8004d0c:	f005 fc10 	bl	800a530 <HAL_GPIO_ReadPin>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004d16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d1a:	481b      	ldr	r0, [pc, #108]	@ (8004d88 <checkAktifCalisma+0x8e8>)
 8004d1c:	f005 fc08 	bl	800a530 <HAL_GPIO_ReadPin>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d003      	beq.n	8004d2e <checkAktifCalisma+0x88e>
 8004d26:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <checkAktifCalisma+0x910>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d048      	beq.n	8004dc0 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004d2e:	4b21      	ldr	r3, [pc, #132]	@ (8004db4 <checkAktifCalisma+0x914>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	f083 0301 	eor.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d041      	beq.n	8004dc0 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <checkAktifCalisma+0x918>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f083 0301 	eor.w	r3, r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d03a      	beq.n	8004dc0 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004dbc <checkAktifCalisma+0x91c>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f083 0301 	eor.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d033      	beq.n	8004dc0 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004d58:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <checkAktifCalisma+0x8e4>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f083 0301 	eor.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02c      	beq.n	8004dc0 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004d66:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <checkAktifCalisma+0x8dc>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	f083 0301 	eor.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d025      	beq.n	8004dc0 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <checkAktifCalisma+0x910>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e024      	b.n	8004dc6 <checkAktifCalisma+0x926>
 8004d7c:	200015a6 	.word	0x200015a6
 8004d80:	40011000 	.word	0x40011000
 8004d84:	200015aa 	.word	0x200015aa
 8004d88:	40010c00 	.word	0x40010c00
 8004d8c:	200015c1 	.word	0x200015c1
 8004d90:	200015c2 	.word	0x200015c2
 8004d94:	200015a2 	.word	0x200015a2
 8004d98:	20001548 	.word	0x20001548
 8004d9c:	20001554 	.word	0x20001554
 8004da0:	20001586 	.word	0x20001586
 8004da4:	2000158d 	.word	0x2000158d
 8004da8:	2000157f 	.word	0x2000157f
 8004dac:	20001581 	.word	0x20001581
 8004db0:	200015a7 	.word	0x200015a7
 8004db4:	200015a5 	.word	0x200015a5
 8004db8:	200015a9 	.word	0x200015a9
 8004dbc:	200015a8 	.word	0x200015a8
				} else {
					devmotorasagicalisiyor=0;
 8004dc0:	4b96      	ldr	r3, [pc, #600]	@ (800501c <checkAktifCalisma+0xb7c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004dc6:	4b95      	ldr	r3, [pc, #596]	@ (800501c <checkAktifCalisma+0xb7c>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2110      	movs	r1, #16
 8004dd2:	4893      	ldr	r0, [pc, #588]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004dd4:	f005 fbc3 	bl	800a55e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004dd8:	4b92      	ldr	r3, [pc, #584]	@ (8005024 <checkAktifCalisma+0xb84>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004dde:	4b91      	ldr	r3, [pc, #580]	@ (8005024 <checkAktifCalisma+0xb84>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d024      	beq.n	8004e30 <checkAktifCalisma+0x990>
 8004de6:	2140      	movs	r1, #64	@ 0x40
 8004de8:	488d      	ldr	r0, [pc, #564]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004dea:	f005 fba1 	bl	800a530 <HAL_GPIO_ReadPin>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d007      	beq.n	8004e04 <checkAktifCalisma+0x964>
 8004df4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004df8:	4889      	ldr	r0, [pc, #548]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004dfa:	f005 fb99 	bl	800a530 <HAL_GPIO_ReadPin>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d115      	bne.n	8004e30 <checkAktifCalisma+0x990>
 8004e04:	4b88      	ldr	r3, [pc, #544]	@ (8005028 <checkAktifCalisma+0xb88>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <checkAktifCalisma+0x990>
 8004e0c:	4b87      	ldr	r3, [pc, #540]	@ (800502c <checkAktifCalisma+0xb8c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <checkAktifCalisma+0x990>
 8004e14:	4b86      	ldr	r3, [pc, #536]	@ (8005030 <checkAktifCalisma+0xb90>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	f083 0301 	eor.w	r3, r3, #1
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <checkAktifCalisma+0x990>
					timer2=millis;
 8004e22:	4b84      	ldr	r3, [pc, #528]	@ (8005034 <checkAktifCalisma+0xb94>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a84      	ldr	r2, [pc, #528]	@ (8005038 <checkAktifCalisma+0xb98>)
 8004e28:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004e2a:	4b81      	ldr	r3, [pc, #516]	@ (8005030 <checkAktifCalisma+0xb90>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004e30:	4b80      	ldr	r3, [pc, #512]	@ (8005034 <checkAktifCalisma+0xb94>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b80      	ldr	r3, [pc, #512]	@ (8005038 <checkAktifCalisma+0xb98>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	4a80      	ldr	r2, [pc, #512]	@ (800503c <checkAktifCalisma+0xb9c>)
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d303      	bcc.n	8004e4a <checkAktifCalisma+0x9aa>
 8004e42:	4b7b      	ldr	r3, [pc, #492]	@ (8005030 <checkAktifCalisma+0xb90>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <checkAktifCalisma+0x9c6>
 8004e4a:	4b77      	ldr	r3, [pc, #476]	@ (8005028 <checkAktifCalisma+0xb88>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f083 0301 	eor.w	r3, r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d106      	bne.n	8004e66 <checkAktifCalisma+0x9c6>
 8004e58:	4b74      	ldr	r3, [pc, #464]	@ (800502c <checkAktifCalisma+0xb8c>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f083 0301 	eor.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2110      	movs	r1, #16
 8004e6a:	486d      	ldr	r0, [pc, #436]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004e6c:	f005 fb77 	bl	800a55e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004e70:	4b6c      	ldr	r3, [pc, #432]	@ (8005024 <checkAktifCalisma+0xb84>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004e76:	4b6e      	ldr	r3, [pc, #440]	@ (8005030 <checkAktifCalisma+0xb90>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004e7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e80:	486f      	ldr	r0, [pc, #444]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004e82:	f005 fb55 	bl	800a530 <HAL_GPIO_ReadPin>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d120      	bne.n	8004ece <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e90:	486b      	ldr	r0, [pc, #428]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004e92:	f005 fb4d 	bl	800a530 <HAL_GPIO_ReadPin>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d118      	bne.n	8004ece <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004e9c:	2104      	movs	r1, #4
 8004e9e:	4868      	ldr	r0, [pc, #416]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004ea0:	f005 fb46 	bl	800a530 <HAL_GPIO_ReadPin>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d111      	bne.n	8004ece <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4864      	ldr	r0, [pc, #400]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004eae:	f005 fb3f 	bl	800a530 <HAL_GPIO_ReadPin>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4861      	ldr	r0, [pc, #388]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004ebc:	f005 fb38 	bl	800a530 <HAL_GPIO_ReadPin>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8005044 <checkAktifCalisma+0xba4>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	e002      	b.n	8004ed4 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004ece:	4b5d      	ldr	r3, [pc, #372]	@ (8005044 <checkAktifCalisma+0xba4>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8005048 <checkAktifCalisma+0xba8>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d144      	bne.n	8004f66 <checkAktifCalisma+0xac6>
 8004edc:	4b5b      	ldr	r3, [pc, #364]	@ (800504c <checkAktifCalisma+0xbac>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d003      	beq.n	8004eec <checkAktifCalisma+0xa4c>
 8004ee4:	4b59      	ldr	r3, [pc, #356]	@ (800504c <checkAktifCalisma+0xbac>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d13c      	bne.n	8004f66 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004eec:	2180      	movs	r1, #128	@ 0x80
 8004eee:	484c      	ldr	r0, [pc, #304]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004ef0:	f005 fb1e 	bl	800a530 <HAL_GPIO_ReadPin>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <checkAktifCalisma+0xa62>
 8004efa:	4b55      	ldr	r3, [pc, #340]	@ (8005050 <checkAktifCalisma+0xbb0>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <checkAktifCalisma+0xa7a>
 8004f02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f06:	484e      	ldr	r0, [pc, #312]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004f08:	f005 fb12 	bl	800a530 <HAL_GPIO_ReadPin>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d129      	bne.n	8004f66 <checkAktifCalisma+0xac6>
 8004f12:	4b4f      	ldr	r3, [pc, #316]	@ (8005050 <checkAktifCalisma+0xbb0>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d125      	bne.n	8004f66 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	4840      	ldr	r0, [pc, #256]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004f1e:	f005 fb07 	bl	800a530 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d003      	beq.n	8004f30 <checkAktifCalisma+0xa90>
 8004f28:	4b4a      	ldr	r3, [pc, #296]	@ (8005054 <checkAktifCalisma+0xbb4>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11a      	bne.n	8004f66 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f30:	2102      	movs	r1, #2
 8004f32:	483b      	ldr	r0, [pc, #236]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004f34:	f005 fafc 	bl	800a530 <HAL_GPIO_ReadPin>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d113      	bne.n	8004f66 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004f3e:	4b46      	ldr	r3, [pc, #280]	@ (8005058 <checkAktifCalisma+0xbb8>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005044 <checkAktifCalisma+0xba4>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004f54:	4b41      	ldr	r3, [pc, #260]	@ (800505c <checkAktifCalisma+0xbbc>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004f5a:	4b36      	ldr	r3, [pc, #216]	@ (8005034 <checkAktifCalisma+0xb94>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a40      	ldr	r2, [pc, #256]	@ (8005060 <checkAktifCalisma+0xbc0>)
 8004f60:	6013      	str	r3, [r2, #0]
					bekle();
 8004f62:	f7ff f901 	bl	8004168 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004f66:	4b33      	ldr	r3, [pc, #204]	@ (8005034 <checkAktifCalisma+0xb94>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8005060 <checkAktifCalisma+0xbc0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	4a3c      	ldr	r2, [pc, #240]	@ (8005064 <checkAktifCalisma+0xbc4>)
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d211      	bcs.n	8004f9c <checkAktifCalisma+0xafc>
 8004f78:	2104      	movs	r1, #4
 8004f7a:	4829      	ldr	r0, [pc, #164]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004f7c:	f005 fad8 	bl	800a530 <HAL_GPIO_ReadPin>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <checkAktifCalisma+0xafc>
 8004f86:	4b33      	ldr	r3, [pc, #204]	@ (8005054 <checkAktifCalisma+0xbb4>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <checkAktifCalisma+0xafc>
 8004f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005044 <checkAktifCalisma+0xba4>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f083 0301 	eor.w	r3, r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800505c <checkAktifCalisma+0xbbc>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fa2:	4b29      	ldr	r3, [pc, #164]	@ (8005048 <checkAktifCalisma+0xba8>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d160      	bne.n	800506c <checkAktifCalisma+0xbcc>
 8004faa:	4b28      	ldr	r3, [pc, #160]	@ (800504c <checkAktifCalisma+0xbac>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d003      	beq.n	8004fba <checkAktifCalisma+0xb1a>
 8004fb2:	4b26      	ldr	r3, [pc, #152]	@ (800504c <checkAktifCalisma+0xbac>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d158      	bne.n	800506c <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004fba:	2104      	movs	r1, #4
 8004fbc:	4818      	ldr	r0, [pc, #96]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004fbe:	f005 fab7 	bl	800a530 <HAL_GPIO_ReadPin>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d003      	beq.n	8004fd0 <checkAktifCalisma+0xb30>
 8004fc8:	4b22      	ldr	r3, [pc, #136]	@ (8005054 <checkAktifCalisma+0xbb4>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d14d      	bne.n	800506c <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4813      	ldr	r0, [pc, #76]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004fd4:	f005 faac 	bl	800a530 <HAL_GPIO_ReadPin>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d146      	bne.n	800506c <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fde:	2180      	movs	r1, #128	@ 0x80
 8004fe0:	480f      	ldr	r0, [pc, #60]	@ (8005020 <checkAktifCalisma+0xb80>)
 8004fe2:	f005 faa5 	bl	800a530 <HAL_GPIO_ReadPin>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <checkAktifCalisma+0xb54>
 8004fec:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <checkAktifCalisma+0xbb0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <checkAktifCalisma+0xb6c>
 8004ff4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ff8:	4811      	ldr	r0, [pc, #68]	@ (8005040 <checkAktifCalisma+0xba0>)
 8004ffa:	f005 fa99 	bl	800a530 <HAL_GPIO_ReadPin>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d133      	bne.n	800506c <checkAktifCalisma+0xbcc>
 8005004:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <checkAktifCalisma+0xbb0>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d12f      	bne.n	800506c <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 800500c:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <checkAktifCalisma+0xba4>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02b      	beq.n	800506c <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8005014:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <checkAktifCalisma+0xbc8>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e02a      	b.n	8005072 <checkAktifCalisma+0xbd2>
 800501c:	200015a7 	.word	0x200015a7
 8005020:	40011000 	.word	0x40011000
 8005024:	200015ab 	.word	0x200015ab
 8005028:	200015c1 	.word	0x200015c1
 800502c:	200015c2 	.word	0x200015c2
 8005030:	200015a3 	.word	0x200015a3
 8005034:	20001548 	.word	0x20001548
 8005038:	20001554 	.word	0x20001554
 800503c:	20001586 	.word	0x20001586
 8005040:	40010c00 	.word	0x40010c00
 8005044:	200015b1 	.word	0x200015b1
 8005048:	20001579 	.word	0x20001579
 800504c:	20001578 	.word	0x20001578
 8005050:	2000157c 	.word	0x2000157c
 8005054:	20001576 	.word	0x20001576
 8005058:	2000159f 	.word	0x2000159f
 800505c:	200015b2 	.word	0x200015b2
 8005060:	2000154c 	.word	0x2000154c
 8005064:	20001589 	.word	0x20001589
 8005068:	200015b3 	.word	0x200015b3
				} else {
					kapi1butonkontrol=0;
 800506c:	4b8b      	ldr	r3, [pc, #556]	@ (800529c <checkAktifCalisma+0xdfc>)
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005072:	4b8b      	ldr	r3, [pc, #556]	@ (80052a0 <checkAktifCalisma+0xe00>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d121      	bne.n	80050be <checkAktifCalisma+0xc1e>
 800507a:	4b8a      	ldr	r3, [pc, #552]	@ (80052a4 <checkAktifCalisma+0xe04>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d003      	beq.n	800508a <checkAktifCalisma+0xbea>
 8005082:	4b88      	ldr	r3, [pc, #544]	@ (80052a4 <checkAktifCalisma+0xe04>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d119      	bne.n	80050be <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800508a:	2104      	movs	r1, #4
 800508c:	4886      	ldr	r0, [pc, #536]	@ (80052a8 <checkAktifCalisma+0xe08>)
 800508e:	f005 fa4f 	bl	800a530 <HAL_GPIO_ReadPin>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d003      	beq.n	80050a0 <checkAktifCalisma+0xc00>
 8005098:	4b84      	ldr	r3, [pc, #528]	@ (80052ac <checkAktifCalisma+0xe0c>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10e      	bne.n	80050be <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80050a0:	2102      	movs	r1, #2
 80050a2:	4881      	ldr	r0, [pc, #516]	@ (80052a8 <checkAktifCalisma+0xe08>)
 80050a4:	f005 fa44 	bl	800a530 <HAL_GPIO_ReadPin>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d107      	bne.n	80050be <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 80050ae:	4b80      	ldr	r3, [pc, #512]	@ (80052b0 <checkAktifCalisma+0xe10>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 80050b6:	4b7f      	ldr	r3, [pc, #508]	@ (80052b4 <checkAktifCalisma+0xe14>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e002      	b.n	80050c4 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 80050be:	4b7d      	ldr	r3, [pc, #500]	@ (80052b4 <checkAktifCalisma+0xe14>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80050c4:	4b75      	ldr	r3, [pc, #468]	@ (800529c <checkAktifCalisma+0xdfc>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d107      	bne.n	80050dc <checkAktifCalisma+0xc3c>
 80050cc:	4b79      	ldr	r3, [pc, #484]	@ (80052b4 <checkAktifCalisma+0xe14>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <checkAktifCalisma+0xc3c>
 80050d4:	4b78      	ldr	r3, [pc, #480]	@ (80052b8 <checkAktifCalisma+0xe18>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80050dc:	2201      	movs	r2, #1
 80050de:	2180      	movs	r1, #128	@ 0x80
 80050e0:	4876      	ldr	r0, [pc, #472]	@ (80052bc <checkAktifCalisma+0xe1c>)
 80050e2:	f005 fa3c 	bl	800a55e <HAL_GPIO_WritePin>
 80050e6:	e004      	b.n	80050f2 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	4873      	ldr	r0, [pc, #460]	@ (80052bc <checkAktifCalisma+0xe1c>)
 80050ee:	f005 fa36 	bl	800a55e <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050f2:	4b73      	ldr	r3, [pc, #460]	@ (80052c0 <checkAktifCalisma+0xe20>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d141      	bne.n	800517e <checkAktifCalisma+0xcde>
 80050fa:	4b6a      	ldr	r3, [pc, #424]	@ (80052a4 <checkAktifCalisma+0xe04>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d003      	beq.n	800510a <checkAktifCalisma+0xc6a>
 8005102:	4b68      	ldr	r3, [pc, #416]	@ (80052a4 <checkAktifCalisma+0xe04>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d139      	bne.n	800517e <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800510a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800510e:	4866      	ldr	r0, [pc, #408]	@ (80052a8 <checkAktifCalisma+0xe08>)
 8005110:	f005 fa0e 	bl	800a530 <HAL_GPIO_ReadPin>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <checkAktifCalisma+0xc82>
 800511a:	4b6a      	ldr	r3, [pc, #424]	@ (80052c4 <checkAktifCalisma+0xe24>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <checkAktifCalisma+0xc9a>
 8005122:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005126:	4868      	ldr	r0, [pc, #416]	@ (80052c8 <checkAktifCalisma+0xe28>)
 8005128:	f005 fa02 	bl	800a530 <HAL_GPIO_ReadPin>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d125      	bne.n	800517e <checkAktifCalisma+0xcde>
 8005132:	4b64      	ldr	r3, [pc, #400]	@ (80052c4 <checkAktifCalisma+0xe24>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d121      	bne.n	800517e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800513a:	2102      	movs	r1, #2
 800513c:	485a      	ldr	r0, [pc, #360]	@ (80052a8 <checkAktifCalisma+0xe08>)
 800513e:	f005 f9f7 	bl	800a530 <HAL_GPIO_ReadPin>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d11a      	bne.n	800517e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005148:	2104      	movs	r1, #4
 800514a:	4857      	ldr	r0, [pc, #348]	@ (80052a8 <checkAktifCalisma+0xe08>)
 800514c:	f005 f9f0 	bl	800a530 <HAL_GPIO_ReadPin>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d113      	bne.n	800517e <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8005156:	4b56      	ldr	r3, [pc, #344]	@ (80052b0 <checkAktifCalisma+0xe10>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00f      	beq.n	800517e <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 800515e:	4b5b      	ldr	r3, [pc, #364]	@ (80052cc <checkAktifCalisma+0xe2c>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f083 0301 	eor.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 800516c:	4b58      	ldr	r3, [pc, #352]	@ (80052d0 <checkAktifCalisma+0xe30>)
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005172:	4b58      	ldr	r3, [pc, #352]	@ (80052d4 <checkAktifCalisma+0xe34>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a58      	ldr	r2, [pc, #352]	@ (80052d8 <checkAktifCalisma+0xe38>)
 8005178:	6013      	str	r3, [r2, #0]
					bekle();
 800517a:	f7fe fff5 	bl	8004168 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800517e:	4b55      	ldr	r3, [pc, #340]	@ (80052d4 <checkAktifCalisma+0xe34>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b55      	ldr	r3, [pc, #340]	@ (80052d8 <checkAktifCalisma+0xe38>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	4a54      	ldr	r2, [pc, #336]	@ (80052dc <checkAktifCalisma+0xe3c>)
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	4293      	cmp	r3, r2
 800518e:	d20d      	bcs.n	80051ac <checkAktifCalisma+0xd0c>
 8005190:	2102      	movs	r1, #2
 8005192:	4845      	ldr	r0, [pc, #276]	@ (80052a8 <checkAktifCalisma+0xe08>)
 8005194:	f005 f9cc 	bl	800a530 <HAL_GPIO_ReadPin>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <checkAktifCalisma+0xd0c>
 800519e:	4b44      	ldr	r3, [pc, #272]	@ (80052b0 <checkAktifCalisma+0xe10>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f083 0301 	eor.w	r3, r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 80051ac:	4b48      	ldr	r3, [pc, #288]	@ (80052d0 <checkAktifCalisma+0xe30>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80051b2:	4b43      	ldr	r3, [pc, #268]	@ (80052c0 <checkAktifCalisma+0xe20>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d135      	bne.n	8005226 <checkAktifCalisma+0xd86>
 80051ba:	4b3a      	ldr	r3, [pc, #232]	@ (80052a4 <checkAktifCalisma+0xe04>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d003      	beq.n	80051ca <checkAktifCalisma+0xd2a>
 80051c2:	4b38      	ldr	r3, [pc, #224]	@ (80052a4 <checkAktifCalisma+0xe04>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d12d      	bne.n	8005226 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80051ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051ce:	4836      	ldr	r0, [pc, #216]	@ (80052a8 <checkAktifCalisma+0xe08>)
 80051d0:	f005 f9ae 	bl	800a530 <HAL_GPIO_ReadPin>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <checkAktifCalisma+0xd42>
 80051da:	4b3a      	ldr	r3, [pc, #232]	@ (80052c4 <checkAktifCalisma+0xe24>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <checkAktifCalisma+0xd5a>
 80051e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051e6:	4838      	ldr	r0, [pc, #224]	@ (80052c8 <checkAktifCalisma+0xe28>)
 80051e8:	f005 f9a2 	bl	800a530 <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d119      	bne.n	8005226 <checkAktifCalisma+0xd86>
 80051f2:	4b34      	ldr	r3, [pc, #208]	@ (80052c4 <checkAktifCalisma+0xe24>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d115      	bne.n	8005226 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80051fa:	2102      	movs	r1, #2
 80051fc:	482a      	ldr	r0, [pc, #168]	@ (80052a8 <checkAktifCalisma+0xe08>)
 80051fe:	f005 f997 	bl	800a530 <HAL_GPIO_ReadPin>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10e      	bne.n	8005226 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005208:	2104      	movs	r1, #4
 800520a:	4827      	ldr	r0, [pc, #156]	@ (80052a8 <checkAktifCalisma+0xe08>)
 800520c:	f005 f990 	bl	800a530 <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d107      	bne.n	8005226 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8005216:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <checkAktifCalisma+0xe10>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 800521e:	4b30      	ldr	r3, [pc, #192]	@ (80052e0 <checkAktifCalisma+0xe40>)
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e002      	b.n	800522c <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8005226:	4b2e      	ldr	r3, [pc, #184]	@ (80052e0 <checkAktifCalisma+0xe40>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800522c:	4b24      	ldr	r3, [pc, #144]	@ (80052c0 <checkAktifCalisma+0xe20>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d11d      	bne.n	8005270 <checkAktifCalisma+0xdd0>
 8005234:	4b1b      	ldr	r3, [pc, #108]	@ (80052a4 <checkAktifCalisma+0xe04>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d003      	beq.n	8005244 <checkAktifCalisma+0xda4>
 800523c:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <checkAktifCalisma+0xe04>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d115      	bne.n	8005270 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005244:	2102      	movs	r1, #2
 8005246:	4818      	ldr	r0, [pc, #96]	@ (80052a8 <checkAktifCalisma+0xe08>)
 8005248:	f005 f972 	bl	800a530 <HAL_GPIO_ReadPin>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d10e      	bne.n	8005270 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005252:	2104      	movs	r1, #4
 8005254:	4814      	ldr	r0, [pc, #80]	@ (80052a8 <checkAktifCalisma+0xe08>)
 8005256:	f005 f96b 	bl	800a530 <HAL_GPIO_ReadPin>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <checkAktifCalisma+0xe10>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005268:	4b1e      	ldr	r3, [pc, #120]	@ (80052e4 <checkAktifCalisma+0xe44>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e002      	b.n	8005276 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005270:	4b1c      	ldr	r3, [pc, #112]	@ (80052e4 <checkAktifCalisma+0xe44>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005276:	4b1a      	ldr	r3, [pc, #104]	@ (80052e0 <checkAktifCalisma+0xe40>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <checkAktifCalisma+0xdee>
 800527e:	4b19      	ldr	r3, [pc, #100]	@ (80052e4 <checkAktifCalisma+0xe44>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <checkAktifCalisma+0xdee>
 8005286:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <checkAktifCalisma+0xe30>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02c      	beq.n	80052e8 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800528e:	2201      	movs	r2, #1
 8005290:	2140      	movs	r1, #64	@ 0x40
 8005292:	480a      	ldr	r0, [pc, #40]	@ (80052bc <checkAktifCalisma+0xe1c>)
 8005294:	f005 f963 	bl	800a55e <HAL_GPIO_WritePin>
 8005298:	e02b      	b.n	80052f2 <checkAktifCalisma+0xe52>
 800529a:	bf00      	nop
 800529c:	200015b3 	.word	0x200015b3
 80052a0:	20001579 	.word	0x20001579
 80052a4:	20001578 	.word	0x20001578
 80052a8:	40011000 	.word	0x40011000
 80052ac:	20001576 	.word	0x20001576
 80052b0:	200015b1 	.word	0x200015b1
 80052b4:	200015b4 	.word	0x200015b4
 80052b8:	200015b2 	.word	0x200015b2
 80052bc:	40010800 	.word	0x40010800
 80052c0:	2000157a 	.word	0x2000157a
 80052c4:	2000157c 	.word	0x2000157c
 80052c8:	40010c00 	.word	0x40010c00
 80052cc:	2000159f 	.word	0x2000159f
 80052d0:	200015b5 	.word	0x200015b5
 80052d4:	20001548 	.word	0x20001548
 80052d8:	2000154c 	.word	0x2000154c
 80052dc:	2000158a 	.word	0x2000158a
 80052e0:	200015b6 	.word	0x200015b6
 80052e4:	200015b7 	.word	0x200015b7
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80052e8:	2200      	movs	r2, #0
 80052ea:	2140      	movs	r1, #64	@ 0x40
 80052ec:	4889      	ldr	r0, [pc, #548]	@ (8005514 <checkAktifCalisma+0x1074>)
 80052ee:	f005 f936 	bl	800a55e <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80052f2:	4b89      	ldr	r3, [pc, #548]	@ (8005518 <checkAktifCalisma+0x1078>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <checkAktifCalisma+0xe62>
 80052fa:	4b87      	ldr	r3, [pc, #540]	@ (8005518 <checkAktifCalisma+0x1078>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d115      	bne.n	800532e <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005302:	2104      	movs	r1, #4
 8005304:	4885      	ldr	r0, [pc, #532]	@ (800551c <checkAktifCalisma+0x107c>)
 8005306:	f005 f913 	bl	800a530 <HAL_GPIO_ReadPin>
 800530a:	4603      	mov	r3, r0
 800530c:	2b01      	cmp	r3, #1
 800530e:	d003      	beq.n	8005318 <checkAktifCalisma+0xe78>
 8005310:	4b83      	ldr	r3, [pc, #524]	@ (8005520 <checkAktifCalisma+0x1080>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005318:	2102      	movs	r1, #2
 800531a:	4880      	ldr	r0, [pc, #512]	@ (800551c <checkAktifCalisma+0x107c>)
 800531c:	f005 f908 	bl	800a530 <HAL_GPIO_ReadPin>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8005326:	4b7f      	ldr	r3, [pc, #508]	@ (8005524 <checkAktifCalisma+0x1084>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e002      	b.n	8005334 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 800532e:	4b7d      	ldr	r3, [pc, #500]	@ (8005524 <checkAktifCalisma+0x1084>)
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005334:	4b78      	ldr	r3, [pc, #480]	@ (8005518 <checkAktifCalisma+0x1078>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d003      	beq.n	8005344 <checkAktifCalisma+0xea4>
 800533c:	4b76      	ldr	r3, [pc, #472]	@ (8005518 <checkAktifCalisma+0x1078>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d111      	bne.n	8005368 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005344:	2102      	movs	r1, #2
 8005346:	4875      	ldr	r0, [pc, #468]	@ (800551c <checkAktifCalisma+0x107c>)
 8005348:	f005 f8f2 	bl	800a530 <HAL_GPIO_ReadPin>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10a      	bne.n	8005368 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005352:	2104      	movs	r1, #4
 8005354:	4871      	ldr	r0, [pc, #452]	@ (800551c <checkAktifCalisma+0x107c>)
 8005356:	f005 f8eb 	bl	800a530 <HAL_GPIO_ReadPin>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005360:	4b71      	ldr	r3, [pc, #452]	@ (8005528 <checkAktifCalisma+0x1088>)
 8005362:	2201      	movs	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005368:	4b6f      	ldr	r3, [pc, #444]	@ (8005528 <checkAktifCalisma+0x1088>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800536e:	4b6d      	ldr	r3, [pc, #436]	@ (8005524 <checkAktifCalisma+0x1084>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00f      	beq.n	8005396 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8005376:	4b6d      	ldr	r3, [pc, #436]	@ (800552c <checkAktifCalisma+0x108c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10b      	bne.n	8005396 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800537e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005382:	486b      	ldr	r0, [pc, #428]	@ (8005530 <checkAktifCalisma+0x1090>)
 8005384:	f005 f8d4 	bl	800a530 <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800538e:	4b69      	ldr	r3, [pc, #420]	@ (8005534 <checkAktifCalisma+0x1094>)
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e002      	b.n	800539c <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005396:	4b67      	ldr	r3, [pc, #412]	@ (8005534 <checkAktifCalisma+0x1094>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 800539c:	4b62      	ldr	r3, [pc, #392]	@ (8005528 <checkAktifCalisma+0x1088>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00f      	beq.n	80053c4 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 80053a4:	4b61      	ldr	r3, [pc, #388]	@ (800552c <checkAktifCalisma+0x108c>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10b      	bne.n	80053c4 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80053ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053b0:	485f      	ldr	r0, [pc, #380]	@ (8005530 <checkAktifCalisma+0x1090>)
 80053b2:	f005 f8bd 	bl	800a530 <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 80053bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005538 <checkAktifCalisma+0x1098>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e002      	b.n	80053ca <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 80053c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005538 <checkAktifCalisma+0x1098>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80053ca:	4b5c      	ldr	r3, [pc, #368]	@ (800553c <checkAktifCalisma+0x109c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11b      	bne.n	800540a <checkAktifCalisma+0xf6a>
 80053d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005540 <checkAktifCalisma+0x10a0>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d003      	beq.n	80053e2 <checkAktifCalisma+0xf42>
 80053da:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <checkAktifCalisma+0x10a0>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d113      	bne.n	800540a <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 80053e2:	4b50      	ldr	r3, [pc, #320]	@ (8005524 <checkAktifCalisma+0x1084>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <checkAktifCalisma+0xf52>
 80053ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005528 <checkAktifCalisma+0x1088>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <checkAktifCalisma+0xf6a>
 80053f2:	4b54      	ldr	r3, [pc, #336]	@ (8005544 <checkAktifCalisma+0x10a4>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <checkAktifCalisma+0xf62>
 80053fa:	4b53      	ldr	r3, [pc, #332]	@ (8005548 <checkAktifCalisma+0x10a8>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 8005402:	4b52      	ldr	r3, [pc, #328]	@ (800554c <checkAktifCalisma+0x10ac>)
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	e002      	b.n	8005410 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 800540a:	4b50      	ldr	r3, [pc, #320]	@ (800554c <checkAktifCalisma+0x10ac>)
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005410:	4b4a      	ldr	r3, [pc, #296]	@ (800553c <checkAktifCalisma+0x109c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d148      	bne.n	80054aa <checkAktifCalisma+0x100a>
 8005418:	4b49      	ldr	r3, [pc, #292]	@ (8005540 <checkAktifCalisma+0x10a0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d003      	beq.n	8005428 <checkAktifCalisma+0xf88>
 8005420:	4b47      	ldr	r3, [pc, #284]	@ (8005540 <checkAktifCalisma+0x10a0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d140      	bne.n	80054aa <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005428:	4b3e      	ldr	r3, [pc, #248]	@ (8005524 <checkAktifCalisma+0x1084>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <checkAktifCalisma+0xf98>
 8005430:	4b3d      	ldr	r3, [pc, #244]	@ (8005528 <checkAktifCalisma+0x1088>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d038      	beq.n	80054aa <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005438:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800543c:	4837      	ldr	r0, [pc, #220]	@ (800551c <checkAktifCalisma+0x107c>)
 800543e:	f005 f877 	bl	800a530 <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01c      	beq.n	8005482 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005448:	2180      	movs	r1, #128	@ 0x80
 800544a:	4834      	ldr	r0, [pc, #208]	@ (800551c <checkAktifCalisma+0x107c>)
 800544c:	f005 f870 	bl	800a530 <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005456:	2104      	movs	r1, #4
 8005458:	4830      	ldr	r0, [pc, #192]	@ (800551c <checkAktifCalisma+0x107c>)
 800545a:	f005 f869 	bl	800a530 <HAL_GPIO_ReadPin>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d00e      	beq.n	8005482 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005464:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005468:	482c      	ldr	r0, [pc, #176]	@ (800551c <checkAktifCalisma+0x107c>)
 800546a:	f005 f861 	bl	800a530 <HAL_GPIO_ReadPin>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005474:	2102      	movs	r1, #2
 8005476:	4829      	ldr	r0, [pc, #164]	@ (800551c <checkAktifCalisma+0x107c>)
 8005478:	f005 f85a 	bl	800a530 <HAL_GPIO_ReadPin>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d103      	bne.n	800548a <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005482:	4b2a      	ldr	r3, [pc, #168]	@ (800552c <checkAktifCalisma+0x108c>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <checkAktifCalisma+0xffa>
 800548a:	4b2a      	ldr	r3, [pc, #168]	@ (8005534 <checkAktifCalisma+0x1094>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <checkAktifCalisma+0xffa>
 8005492:	4b29      	ldr	r3, [pc, #164]	@ (8005538 <checkAktifCalisma+0x1098>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 800549a:	4b2d      	ldr	r3, [pc, #180]	@ (8005550 <checkAktifCalisma+0x10b0>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 80054a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005554 <checkAktifCalisma+0x10b4>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 80054aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005554 <checkAktifCalisma+0x10b4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80054b0:	4b22      	ldr	r3, [pc, #136]	@ (800553c <checkAktifCalisma+0x109c>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d117      	bne.n	80054e8 <checkAktifCalisma+0x1048>
 80054b8:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <checkAktifCalisma+0x10a0>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d003      	beq.n	80054c8 <checkAktifCalisma+0x1028>
 80054c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <checkAktifCalisma+0x10a0>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d10f      	bne.n	80054e8 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80054c8:	4b16      	ldr	r3, [pc, #88]	@ (8005524 <checkAktifCalisma+0x1084>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <checkAktifCalisma+0x1038>
 80054d0:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <checkAktifCalisma+0x1088>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d007      	beq.n	80054e8 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 80054d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <checkAktifCalisma+0x10b0>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 80054e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <checkAktifCalisma+0x10b8>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e002      	b.n	80054ee <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80054e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005558 <checkAktifCalisma+0x10b8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80054ee:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <checkAktifCalisma+0x10b4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d107      	bne.n	8005506 <checkAktifCalisma+0x1066>
 80054f6:	4b15      	ldr	r3, [pc, #84]	@ (800554c <checkAktifCalisma+0x10ac>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <checkAktifCalisma+0x1066>
 80054fe:	4b16      	ldr	r3, [pc, #88]	@ (8005558 <checkAktifCalisma+0x10b8>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d02a      	beq.n	800555c <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005506:	2201      	movs	r2, #1
 8005508:	2120      	movs	r1, #32
 800550a:	4802      	ldr	r0, [pc, #8]	@ (8005514 <checkAktifCalisma+0x1074>)
 800550c:	f005 f827 	bl	800a55e <HAL_GPIO_WritePin>
 8005510:	e029      	b.n	8005566 <checkAktifCalisma+0x10c6>
 8005512:	bf00      	nop
 8005514:	40010800 	.word	0x40010800
 8005518:	2000157d 	.word	0x2000157d
 800551c:	40011000 	.word	0x40011000
 8005520:	20001576 	.word	0x20001576
 8005524:	200015bb 	.word	0x200015bb
 8005528:	200015bc 	.word	0x200015bc
 800552c:	2000157c 	.word	0x2000157c
 8005530:	40010c00 	.word	0x40010c00
 8005534:	200015cb 	.word	0x200015cb
 8005538:	200015cc 	.word	0x200015cc
 800553c:	2000157b 	.word	0x2000157b
 8005540:	20001578 	.word	0x20001578
 8005544:	200015b2 	.word	0x200015b2
 8005548:	200015b5 	.word	0x200015b5
 800554c:	200015b8 	.word	0x200015b8
 8005550:	200015b1 	.word	0x200015b1
 8005554:	200015b9 	.word	0x200015b9
 8005558:	200015ba 	.word	0x200015ba
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800555c:	2200      	movs	r2, #0
 800555e:	2120      	movs	r1, #32
 8005560:	4887      	ldr	r0, [pc, #540]	@ (8005780 <checkAktifCalisma+0x12e0>)
 8005562:	f004 fffc 	bl	800a55e <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005566:	4b87      	ldr	r3, [pc, #540]	@ (8005784 <checkAktifCalisma+0x12e4>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00e      	beq.n	800558c <checkAktifCalisma+0x10ec>
 800556e:	2102      	movs	r1, #2
 8005570:	4885      	ldr	r0, [pc, #532]	@ (8005788 <checkAktifCalisma+0x12e8>)
 8005572:	f004 ffdd 	bl	800a530 <HAL_GPIO_ReadPin>
 8005576:	4603      	mov	r3, r0
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <checkAktifCalisma+0x10ec>
 800557c:	4b83      	ldr	r3, [pc, #524]	@ (800578c <checkAktifCalisma+0x12ec>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <checkAktifCalisma+0x10ec>
 8005584:	4b82      	ldr	r3, [pc, #520]	@ (8005790 <checkAktifCalisma+0x12f0>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d112      	bne.n	80055b2 <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800558c:	4b81      	ldr	r3, [pc, #516]	@ (8005794 <checkAktifCalisma+0x12f4>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d032      	beq.n	80055fa <checkAktifCalisma+0x115a>
 8005594:	2104      	movs	r1, #4
 8005596:	487c      	ldr	r0, [pc, #496]	@ (8005788 <checkAktifCalisma+0x12e8>)
 8005598:	f004 ffca 	bl	800a530 <HAL_GPIO_ReadPin>
 800559c:	4603      	mov	r3, r0
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d12b      	bne.n	80055fa <checkAktifCalisma+0x115a>
 80055a2:	4b7a      	ldr	r3, [pc, #488]	@ (800578c <checkAktifCalisma+0x12ec>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d027      	beq.n	80055fa <checkAktifCalisma+0x115a>
 80055aa:	4b79      	ldr	r3, [pc, #484]	@ (8005790 <checkAktifCalisma+0x12f0>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d023      	beq.n	80055fa <checkAktifCalisma+0x115a>



					calismaSayisi++;
 80055b2:	4b79      	ldr	r3, [pc, #484]	@ (8005798 <checkAktifCalisma+0x12f8>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b77      	ldr	r3, [pc, #476]	@ (8005798 <checkAktifCalisma+0x12f8>)
 80055bc:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80055be:	4b76      	ldr	r3, [pc, #472]	@ (8005798 <checkAktifCalisma+0x12f8>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2bff      	cmp	r3, #255	@ 0xff
 80055c4:	d108      	bne.n	80055d8 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 80055c6:	4b74      	ldr	r3, [pc, #464]	@ (8005798 <checkAktifCalisma+0x12f8>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80055cc:	4b73      	ldr	r3, [pc, #460]	@ (800579c <checkAktifCalisma+0x12fc>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b71      	ldr	r3, [pc, #452]	@ (800579c <checkAktifCalisma+0x12fc>)
 80055d6:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80055d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005798 <checkAktifCalisma+0x12f8>)
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	4b70      	ldr	r3, [pc, #448]	@ (80057a0 <checkAktifCalisma+0x1300>)
 80055de:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80055e0:	4b6e      	ldr	r3, [pc, #440]	@ (800579c <checkAktifCalisma+0x12fc>)
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	4b6e      	ldr	r3, [pc, #440]	@ (80057a0 <checkAktifCalisma+0x1300>)
 80055e6:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80055e8:	4b6e      	ldr	r3, [pc, #440]	@ (80057a4 <checkAktifCalisma+0x1304>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80055ee:	4b65      	ldr	r3, [pc, #404]	@ (8005784 <checkAktifCalisma+0x12e4>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80055f4:	4b67      	ldr	r3, [pc, #412]	@ (8005794 <checkAktifCalisma+0x12f4>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80055fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80055fe:	486a      	ldr	r0, [pc, #424]	@ (80057a8 <checkAktifCalisma+0x1308>)
 8005600:	f004 ff96 	bl	800a530 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800560a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800560e:	4866      	ldr	r0, [pc, #408]	@ (80057a8 <checkAktifCalisma+0x1308>)
 8005610:	f004 ff8e 	bl	800a530 <HAL_GPIO_ReadPin>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800561a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800561e:	4862      	ldr	r0, [pc, #392]	@ (80057a8 <checkAktifCalisma+0x1308>)
 8005620:	f004 ff86 	bl	800a530 <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800562a:	2140      	movs	r1, #64	@ 0x40
 800562c:	4856      	ldr	r0, [pc, #344]	@ (8005788 <checkAktifCalisma+0x12e8>)
 800562e:	f004 ff7f 	bl	800a530 <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005638:	4b5c      	ldr	r3, [pc, #368]	@ (80057ac <checkAktifCalisma+0x130c>)
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e002      	b.n	8005646 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 8005640:	4b5a      	ldr	r3, [pc, #360]	@ (80057ac <checkAktifCalisma+0x130c>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005646:	4b59      	ldr	r3, [pc, #356]	@ (80057ac <checkAktifCalisma+0x130c>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d014      	beq.n	8005678 <checkAktifCalisma+0x11d8>
 800564e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005652:	4855      	ldr	r0, [pc, #340]	@ (80057a8 <checkAktifCalisma+0x1308>)
 8005654:	f004 ff6c 	bl	800a530 <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10c      	bne.n	8005678 <checkAktifCalisma+0x11d8>

					hataVar=1;
 800565e:	4b54      	ldr	r3, [pc, #336]	@ (80057b0 <checkAktifCalisma+0x1310>)
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005664:	2001      	movs	r0, #1
 8005666:	f7fb fd13 	bl	8001090 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800566a:	2001      	movs	r0, #1
 800566c:	f7fb fcb8 	bl	8000fe0 <hata2EEPROM>
					acilstophatasi=1;
 8005670:	4b50      	ldr	r3, [pc, #320]	@ (80057b4 <checkAktifCalisma+0x1314>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e018      	b.n	80056aa <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005678:	4b4e      	ldr	r3, [pc, #312]	@ (80057b4 <checkAktifCalisma+0x1314>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d014      	beq.n	80056aa <checkAktifCalisma+0x120a>
 8005680:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005684:	4848      	ldr	r0, [pc, #288]	@ (80057a8 <checkAktifCalisma+0x1308>)
 8005686:	f004 ff53 	bl	800a530 <HAL_GPIO_ReadPin>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10c      	bne.n	80056aa <checkAktifCalisma+0x120a>
 8005690:	4b46      	ldr	r3, [pc, #280]	@ (80057ac <checkAktifCalisma+0x130c>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f083 0301 	eor.w	r3, r3, #1
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800569e:	4b45      	ldr	r3, [pc, #276]	@ (80057b4 <checkAktifCalisma+0x1314>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80056a4:	2001      	movs	r0, #1
 80056a6:	f7fe fcf1 	bl	800408c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80056aa:	4b43      	ldr	r3, [pc, #268]	@ (80057b8 <checkAktifCalisma+0x1318>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d023      	beq.n	8005700 <checkAktifCalisma+0x1260>
 80056b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056bc:	483a      	ldr	r0, [pc, #232]	@ (80057a8 <checkAktifCalisma+0x1308>)
 80056be:	f004 ff37 	bl	800a530 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <checkAktifCalisma+0x1230>
 80056c8:	4b3c      	ldr	r3, [pc, #240]	@ (80057bc <checkAktifCalisma+0x131c>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d017      	beq.n	8005700 <checkAktifCalisma+0x1260>
 80056d0:	4b3b      	ldr	r3, [pc, #236]	@ (80057c0 <checkAktifCalisma+0x1320>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d113      	bne.n	8005700 <checkAktifCalisma+0x1260>
 80056d8:	4b3a      	ldr	r3, [pc, #232]	@ (80057c4 <checkAktifCalisma+0x1324>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f083 0301 	eor.w	r3, r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00c      	beq.n	8005700 <checkAktifCalisma+0x1260>
					hataVar=1;
 80056e6:	4b32      	ldr	r3, [pc, #200]	@ (80057b0 <checkAktifCalisma+0x1310>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80056ec:	2002      	movs	r0, #2
 80056ee:	f7fb fccf 	bl	8001090 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80056f2:	2002      	movs	r0, #2
 80056f4:	f7fb fc74 	bl	8000fe0 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80056f8:	4b32      	ldr	r3, [pc, #200]	@ (80057c4 <checkAktifCalisma+0x1324>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e017      	b.n	8005730 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005700:	4b30      	ldr	r3, [pc, #192]	@ (80057c4 <checkAktifCalisma+0x1324>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d013      	beq.n	8005730 <checkAktifCalisma+0x1290>
 8005708:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <checkAktifCalisma+0x1318>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00f      	beq.n	8005730 <checkAktifCalisma+0x1290>
 8005710:	4b2d      	ldr	r3, [pc, #180]	@ (80057c8 <checkAktifCalisma+0x1328>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	f083 0301 	eor.w	r3, r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 800571e:	4b29      	ldr	r3, [pc, #164]	@ (80057c4 <checkAktifCalisma+0x1324>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005724:	4b25      	ldr	r3, [pc, #148]	@ (80057bc <checkAktifCalisma+0x131c>)
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800572a:	2002      	movs	r0, #2
 800572c:	f7fe fcae 	bl	800408c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005730:	4b26      	ldr	r3, [pc, #152]	@ (80057cc <checkAktifCalisma+0x132c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d151      	bne.n	80057dc <checkAktifCalisma+0x133c>
 8005738:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <checkAktifCalisma+0x1330>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d14d      	bne.n	80057dc <checkAktifCalisma+0x133c>
 8005740:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <checkAktifCalisma+0x1334>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d049      	beq.n	80057dc <checkAktifCalisma+0x133c>
 8005748:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800574c:	480e      	ldr	r0, [pc, #56]	@ (8005788 <checkAktifCalisma+0x12e8>)
 800574e:	f004 feef 	bl	800a530 <HAL_GPIO_ReadPin>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d141      	bne.n	80057dc <checkAktifCalisma+0x133c>
 8005758:	4b1f      	ldr	r3, [pc, #124]	@ (80057d8 <checkAktifCalisma+0x1338>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f083 0301 	eor.w	r3, r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d03a      	beq.n	80057dc <checkAktifCalisma+0x133c>
					hataVar=1;
 8005766:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <checkAktifCalisma+0x1310>)
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800576c:	2003      	movs	r0, #3
 800576e:	f7fb fc8f 	bl	8001090 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8005772:	2003      	movs	r0, #3
 8005774:	f7fb fc34 	bl	8000fe0 <hata2EEPROM>
					basinchatasi=1;
 8005778:	4b17      	ldr	r3, [pc, #92]	@ (80057d8 <checkAktifCalisma+0x1338>)
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e043      	b.n	8005808 <checkAktifCalisma+0x1368>
 8005780:	40010800 	.word	0x40010800
 8005784:	200015af 	.word	0x200015af
 8005788:	40011000 	.word	0x40011000
 800578c:	20001576 	.word	0x20001576
 8005790:	200015b1 	.word	0x200015b1
 8005794:	200015b0 	.word	0x200015b0
 8005798:	20001568 	.word	0x20001568
 800579c:	2000156a 	.word	0x2000156a
 80057a0:	200014a0 	.word	0x200014a0
 80057a4:	2000159c 	.word	0x2000159c
 80057a8:	40010c00 	.word	0x40010c00
 80057ac:	200015bd 	.word	0x200015bd
 80057b0:	200015c4 	.word	0x200015c4
 80057b4:	200015bf 	.word	0x200015bf
 80057b8:	200015c6 	.word	0x200015c6
 80057bc:	200015d0 	.word	0x200015d0
 80057c0:	20001574 	.word	0x20001574
 80057c4:	200015c0 	.word	0x200015c0
 80057c8:	200015a8 	.word	0x200015a8
 80057cc:	20001573 	.word	0x20001573
 80057d0:	20001577 	.word	0x20001577
 80057d4:	200015c3 	.word	0x200015c3
 80057d8:	200015cd 	.word	0x200015cd
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80057dc:	4b85      	ldr	r3, [pc, #532]	@ (80059f4 <checkAktifCalisma+0x1554>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d011      	beq.n	8005808 <checkAktifCalisma+0x1368>
 80057e4:	4b84      	ldr	r3, [pc, #528]	@ (80059f8 <checkAktifCalisma+0x1558>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10d      	bne.n	8005808 <checkAktifCalisma+0x1368>
 80057ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057f0:	4882      	ldr	r0, [pc, #520]	@ (80059fc <checkAktifCalisma+0x155c>)
 80057f2:	f004 fe9d 	bl	800a530 <HAL_GPIO_ReadPin>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 80057fc:	4b7d      	ldr	r3, [pc, #500]	@ (80059f4 <checkAktifCalisma+0x1554>)
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8005802:	2003      	movs	r0, #3
 8005804:	f7fe fc42 	bl	800408c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005808:	4b7d      	ldr	r3, [pc, #500]	@ (8005a00 <checkAktifCalisma+0x1560>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <checkAktifCalisma+0x1378>
 8005810:	4b7c      	ldr	r3, [pc, #496]	@ (8005a04 <checkAktifCalisma+0x1564>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d023      	beq.n	8005860 <checkAktifCalisma+0x13c0>
 8005818:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800581c:	487a      	ldr	r0, [pc, #488]	@ (8005a08 <checkAktifCalisma+0x1568>)
 800581e:	f004 fe87 	bl	800a530 <HAL_GPIO_ReadPin>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d11b      	bne.n	8005860 <checkAktifCalisma+0x13c0>
 8005828:	4b78      	ldr	r3, [pc, #480]	@ (8005a0c <checkAktifCalisma+0x156c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d003      	beq.n	8005838 <checkAktifCalisma+0x1398>
 8005830:	4b76      	ldr	r3, [pc, #472]	@ (8005a0c <checkAktifCalisma+0x156c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d113      	bne.n	8005860 <checkAktifCalisma+0x13c0>
 8005838:	4b75      	ldr	r3, [pc, #468]	@ (8005a10 <checkAktifCalisma+0x1570>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <checkAktifCalisma+0x13c0>
					hataVar=1;
 8005846:	4b73      	ldr	r3, [pc, #460]	@ (8005a14 <checkAktifCalisma+0x1574>)
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 800584c:	2004      	movs	r0, #4
 800584e:	f7fb fc1f 	bl	8001090 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005852:	2004      	movs	r0, #4
 8005854:	f7fb fbc4 	bl	8000fe0 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005858:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <checkAktifCalisma+0x1570>)
 800585a:	2201      	movs	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e01f      	b.n	80058a0 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005860:	4b6b      	ldr	r3, [pc, #428]	@ (8005a10 <checkAktifCalisma+0x1570>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <checkAktifCalisma+0x1400>
 8005868:	4b6b      	ldr	r3, [pc, #428]	@ (8005a18 <checkAktifCalisma+0x1578>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d017      	beq.n	80058a0 <checkAktifCalisma+0x1400>
 8005870:	4b63      	ldr	r3, [pc, #396]	@ (8005a00 <checkAktifCalisma+0x1560>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <checkAktifCalisma+0x1400>
 800587e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005882:	4861      	ldr	r0, [pc, #388]	@ (8005a08 <checkAktifCalisma+0x1568>)
 8005884:	f004 fe54 	bl	800a530 <HAL_GPIO_ReadPin>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d108      	bne.n	80058a0 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 800588e:	4b60      	ldr	r3, [pc, #384]	@ (8005a10 <checkAktifCalisma+0x1570>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005894:	4b5b      	ldr	r3, [pc, #364]	@ (8005a04 <checkAktifCalisma+0x1564>)
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800589a:	2004      	movs	r0, #4
 800589c:	f7fe fbf6 	bl	800408c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80058a0:	4b57      	ldr	r3, [pc, #348]	@ (8005a00 <checkAktifCalisma+0x1560>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <checkAktifCalisma+0x1410>
 80058a8:	4b5c      	ldr	r3, [pc, #368]	@ (8005a1c <checkAktifCalisma+0x157c>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d023      	beq.n	80058f8 <checkAktifCalisma+0x1458>
 80058b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058b4:	4854      	ldr	r0, [pc, #336]	@ (8005a08 <checkAktifCalisma+0x1568>)
 80058b6:	f004 fe3b 	bl	800a530 <HAL_GPIO_ReadPin>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d11b      	bne.n	80058f8 <checkAktifCalisma+0x1458>
 80058c0:	4b52      	ldr	r3, [pc, #328]	@ (8005a0c <checkAktifCalisma+0x156c>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d003      	beq.n	80058d0 <checkAktifCalisma+0x1430>
 80058c8:	4b50      	ldr	r3, [pc, #320]	@ (8005a0c <checkAktifCalisma+0x156c>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d113      	bne.n	80058f8 <checkAktifCalisma+0x1458>
 80058d0:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <checkAktifCalisma+0x1580>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f083 0301 	eor.w	r3, r3, #1
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <checkAktifCalisma+0x1458>

					hataVar=1;
 80058de:	4b4d      	ldr	r3, [pc, #308]	@ (8005a14 <checkAktifCalisma+0x1574>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80058e4:	2005      	movs	r0, #5
 80058e6:	f7fb fbd3 	bl	8001090 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80058ea:	2005      	movs	r0, #5
 80058ec:	f7fb fb78 	bl	8000fe0 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80058f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a20 <checkAktifCalisma+0x1580>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e023      	b.n	8005940 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80058f8:	4b49      	ldr	r3, [pc, #292]	@ (8005a20 <checkAktifCalisma+0x1580>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01f      	beq.n	8005940 <checkAktifCalisma+0x14a0>
 8005900:	4b45      	ldr	r3, [pc, #276]	@ (8005a18 <checkAktifCalisma+0x1578>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01b      	beq.n	8005940 <checkAktifCalisma+0x14a0>
 8005908:	4b3d      	ldr	r3, [pc, #244]	@ (8005a00 <checkAktifCalisma+0x1560>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f083 0301 	eor.w	r3, r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d014      	beq.n	8005940 <checkAktifCalisma+0x14a0>
 8005916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800591a:	483b      	ldr	r0, [pc, #236]	@ (8005a08 <checkAktifCalisma+0x1568>)
 800591c:	f004 fe08 	bl	800a530 <HAL_GPIO_ReadPin>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10c      	bne.n	8005940 <checkAktifCalisma+0x14a0>
 8005926:	4b3c      	ldr	r3, [pc, #240]	@ (8005a18 <checkAktifCalisma+0x1578>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 800592e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a20 <checkAktifCalisma+0x1580>)
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005934:	4b39      	ldr	r3, [pc, #228]	@ (8005a1c <checkAktifCalisma+0x157c>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 800593a:	2005      	movs	r0, #5
 800593c:	f7fe fba6 	bl	800408c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005940:	4b38      	ldr	r3, [pc, #224]	@ (8005a24 <checkAktifCalisma+0x1584>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <checkAktifCalisma+0x14b8>
 8005948:	4b37      	ldr	r3, [pc, #220]	@ (8005a28 <checkAktifCalisma+0x1588>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <checkAktifCalisma+0x14b8>
 8005950:	4b36      	ldr	r3, [pc, #216]	@ (8005a2c <checkAktifCalisma+0x158c>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01b      	beq.n	8005990 <checkAktifCalisma+0x14f0>
 8005958:	4b35      	ldr	r3, [pc, #212]	@ (8005a30 <checkAktifCalisma+0x1590>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005966:	4b33      	ldr	r3, [pc, #204]	@ (8005a34 <checkAktifCalisma+0x1594>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b33      	ldr	r3, [pc, #204]	@ (8005a38 <checkAktifCalisma+0x1598>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	4a32      	ldr	r2, [pc, #200]	@ (8005a3c <checkAktifCalisma+0x159c>)
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	4293      	cmp	r3, r2
 8005976:	d30b      	bcc.n	8005990 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005978:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <checkAktifCalisma+0x1574>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800597e:	2006      	movs	r0, #6
 8005980:	f7fb fb86 	bl	8001090 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005984:	2006      	movs	r0, #6
 8005986:	f7fb fb2b 	bl	8000fe0 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800598a:	4b29      	ldr	r3, [pc, #164]	@ (8005a30 <checkAktifCalisma+0x1590>)
 800598c:	2201      	movs	r2, #1
 800598e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005990:	4b27      	ldr	r3, [pc, #156]	@ (8005a30 <checkAktifCalisma+0x1590>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <checkAktifCalisma+0x1520>
 8005998:	2108      	movs	r1, #8
 800599a:	481b      	ldr	r0, [pc, #108]	@ (8005a08 <checkAktifCalisma+0x1568>)
 800599c:	f004 fdc8 	bl	800a530 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00c      	beq.n	80059c0 <checkAktifCalisma+0x1520>
 80059a6:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <checkAktifCalisma+0x1560>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 80059b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a30 <checkAktifCalisma+0x1590>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80059ba:	2006      	movs	r0, #6
 80059bc:	f7fe fb66 	bl	800408c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80059c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a40 <checkAktifCalisma+0x15a0>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <checkAktifCalisma+0x1540>
 80059c8:	4b17      	ldr	r3, [pc, #92]	@ (8005a28 <checkAktifCalisma+0x1588>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <checkAktifCalisma+0x1540>
 80059d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a44 <checkAktifCalisma+0x15a4>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <checkAktifCalisma+0x1540>
 80059d8:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <checkAktifCalisma+0x158c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d035      	beq.n	8005a4c <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 80059e0:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <checkAktifCalisma+0x15a8>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80059e6:	4b07      	ldr	r3, [pc, #28]	@ (8005a04 <checkAktifCalisma+0x1564>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <checkAktifCalisma+0x157c>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	e032      	b.n	8005a5a <checkAktifCalisma+0x15ba>
 80059f4:	200015cd 	.word	0x200015cd
 80059f8:	20001573 	.word	0x20001573
 80059fc:	40010c00 	.word	0x40010c00
 8005a00:	200015bd 	.word	0x200015bd
 8005a04:	200015d1 	.word	0x200015d1
 8005a08:	40010800 	.word	0x40010800
 8005a0c:	20001578 	.word	0x20001578
 8005a10:	200015ce 	.word	0x200015ce
 8005a14:	200015c4 	.word	0x200015c4
 8005a18:	200015b1 	.word	0x200015b1
 8005a1c:	200015d2 	.word	0x200015d2
 8005a20:	200015cf 	.word	0x200015cf
 8005a24:	200015c3 	.word	0x200015c3
 8005a28:	200015a8 	.word	0x200015a8
 8005a2c:	200015a7 	.word	0x200015a7
 8005a30:	200015be 	.word	0x200015be
 8005a34:	20001548 	.word	0x20001548
 8005a38:	2000155c 	.word	0x2000155c
 8005a3c:	20001588 	.word	0x20001588
 8005a40:	200015a5 	.word	0x200015a5
 8005a44:	200015a6 	.word	0x200015a6
 8005a48:	200015c5 	.word	0x200015c5
				} else {
					makineCalisiyor=1;
 8005a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b38 <checkAktifCalisma+0x1698>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005a52:	4b3a      	ldr	r3, [pc, #232]	@ (8005b3c <checkAktifCalisma+0x169c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a3a      	ldr	r2, [pc, #232]	@ (8005b40 <checkAktifCalisma+0x16a0>)
 8005a58:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b44 <checkAktifCalisma+0x16a4>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d02f      	beq.n	8005ac2 <checkAktifCalisma+0x1622>
 8005a62:	4b39      	ldr	r3, [pc, #228]	@ (8005b48 <checkAktifCalisma+0x16a8>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f083 0301 	eor.w	r3, r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d028      	beq.n	8005ac2 <checkAktifCalisma+0x1622>
 8005a70:	4b36      	ldr	r3, [pc, #216]	@ (8005b4c <checkAktifCalisma+0x16ac>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f083 0301 	eor.w	r3, r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d021      	beq.n	8005ac2 <checkAktifCalisma+0x1622>
 8005a7e:	4b34      	ldr	r3, [pc, #208]	@ (8005b50 <checkAktifCalisma+0x16b0>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f083 0301 	eor.w	r3, r3, #1
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01a      	beq.n	8005ac2 <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005a8c:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <checkAktifCalisma+0x16b4>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f083 0301 	eor.w	r3, r3, #1
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <checkAktifCalisma+0x1622>
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <checkAktifCalisma+0x16b8>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f083 0301 	eor.w	r3, r3, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00c      	beq.n	8005ac2 <checkAktifCalisma+0x1622>
 8005aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b5c <checkAktifCalisma+0x16bc>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f083 0301 	eor.w	r3, r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <checkAktifCalisma+0x1622>

					hataVar=0;
 8005ab6:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <checkAktifCalisma+0x16a4>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005abc:	2007      	movs	r0, #7
 8005abe:	f7fe fae5 	bl	800408c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005ac2:	4b20      	ldr	r3, [pc, #128]	@ (8005b44 <checkAktifCalisma+0x16a4>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d02a      	beq.n	8005b20 <checkAktifCalisma+0x1680>
 8005aca:	4b1f      	ldr	r3, [pc, #124]	@ (8005b48 <checkAktifCalisma+0x16a8>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f083 0301 	eor.w	r3, r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d023      	beq.n	8005b20 <checkAktifCalisma+0x1680>
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b4c <checkAktifCalisma+0x16ac>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01f      	beq.n	8005b20 <checkAktifCalisma+0x1680>
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b50 <checkAktifCalisma+0x16b0>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f083 0301 	eor.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d018      	beq.n	8005b20 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005aee:	4b19      	ldr	r3, [pc, #100]	@ (8005b54 <checkAktifCalisma+0x16b4>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f083 0301 	eor.w	r3, r3, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d011      	beq.n	8005b20 <checkAktifCalisma+0x1680>
 8005afc:	4b16      	ldr	r3, [pc, #88]	@ (8005b58 <checkAktifCalisma+0x16b8>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f083 0301 	eor.w	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <checkAktifCalisma+0x1680>
 8005b0a:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <checkAktifCalisma+0x16bc>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f083 0301 	eor.w	r3, r3, #1
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <checkAktifCalisma+0x16c0>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005b1e:	e009      	b.n	8005b34 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005b20:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <checkAktifCalisma+0x16ac>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f083 0301 	eor.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <checkAktifCalisma+0x16c0>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200015c5 	.word	0x200015c5
 8005b3c:	20001548 	.word	0x20001548
 8005b40:	2000155c 	.word	0x2000155c
 8005b44:	200015c4 	.word	0x200015c4
 8005b48:	200015bf 	.word	0x200015bf
 8005b4c:	200015c0 	.word	0x200015c0
 8005b50:	200015cd 	.word	0x200015cd
 8005b54:	200015ce 	.word	0x200015ce
 8005b58:	200015cf 	.word	0x200015cf
 8005b5c:	200015be 	.word	0x200015be
 8005b60:	200015d3 	.word	0x200015d3

08005b64 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005b68:	4b8b      	ldr	r3, [pc, #556]	@ (8005d98 <checkDemoModCalisma+0x234>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 81c4 	bne.w	8005efa <checkDemoModCalisma+0x396>
 8005b72:	4b8a      	ldr	r3, [pc, #552]	@ (8005d9c <checkDemoModCalisma+0x238>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 81bf 	beq.w	8005efa <checkDemoModCalisma+0x396>
 8005b7c:	4b88      	ldr	r3, [pc, #544]	@ (8005da0 <checkDemoModCalisma+0x23c>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 81ba 	bne.w	8005efa <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b86:	2102      	movs	r1, #2
 8005b88:	4886      	ldr	r0, [pc, #536]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005b8a:	f004 fcd1 	bl	800a530 <HAL_GPIO_ReadPin>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11d      	bne.n	8005bd0 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005b94:	4b84      	ldr	r3, [pc, #528]	@ (8005da8 <checkDemoModCalisma+0x244>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d016      	beq.n	8005bd0 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005ba2:	4b82      	ldr	r3, [pc, #520]	@ (8005dac <checkDemoModCalisma+0x248>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f083 0301 	eor.w	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005bb0:	4b7f      	ldr	r3, [pc, #508]	@ (8005db0 <checkDemoModCalisma+0x24c>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f083 0301 	eor.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	487c      	ldr	r0, [pc, #496]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005bc4:	f004 fccb 	bl	800a55e <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005bc8:	4b7b      	ldr	r3, [pc, #492]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e00e      	b.n	8005bee <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4874      	ldr	r0, [pc, #464]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005bd4:	f004 fcac 	bl	800a530 <HAL_GPIO_ReadPin>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005bde:	2200      	movs	r2, #0
 8005be0:	2104      	movs	r1, #4
 8005be2:	4874      	ldr	r0, [pc, #464]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005be4:	f004 fcbb 	bl	800a55e <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005be8:	4b73      	ldr	r3, [pc, #460]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005bee:	4b72      	ldr	r3, [pc, #456]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <checkDemoModCalisma+0xaa>
 8005bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8005dac <checkDemoModCalisma+0x248>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d107      	bne.n	8005c0e <checkDemoModCalisma+0xaa>
 8005bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8005db0 <checkDemoModCalisma+0x24c>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <checkDemoModCalisma+0xaa>
 8005c06:	4b68      	ldr	r3, [pc, #416]	@ (8005da8 <checkDemoModCalisma+0x244>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00c      	beq.n	8005c28 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c14:	4867      	ldr	r0, [pc, #412]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005c16:	f004 fca2 	bl	800a55e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c20:	4864      	ldr	r0, [pc, #400]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005c22:	f004 fc9c 	bl	800a55e <HAL_GPIO_WritePin>
 8005c26:	e00b      	b.n	8005c40 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c2e:	4861      	ldr	r0, [pc, #388]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005c30:	f004 fc95 	bl	800a55e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c3a:	485e      	ldr	r0, [pc, #376]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005c3c:	f004 fc8f 	bl	800a55e <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c40:	2102      	movs	r1, #2
 8005c42:	4858      	ldr	r0, [pc, #352]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005c44:	f004 fc74 	bl	800a530 <HAL_GPIO_ReadPin>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d10d      	bne.n	8005c6a <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005c4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c52:	4854      	ldr	r0, [pc, #336]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005c54:	f004 fc6c 	bl	800a530 <HAL_GPIO_ReadPin>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d105      	bne.n	8005c6a <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005c5e:	4b56      	ldr	r3, [pc, #344]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f083 0301 	eor.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	484d      	ldr	r0, [pc, #308]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005c6e:	f004 fc5f 	bl	800a530 <HAL_GPIO_ReadPin>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d125      	bne.n	8005cc4 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005c78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c7c:	4849      	ldr	r0, [pc, #292]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005c7e:	f004 fc57 	bl	800a530 <HAL_GPIO_ReadPin>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11d      	bne.n	8005cc4 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005c88:	4b4b      	ldr	r3, [pc, #300]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f083 0301 	eor.w	r3, r3, #1
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005c96:	4b44      	ldr	r3, [pc, #272]	@ (8005da8 <checkDemoModCalisma+0x244>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00f      	beq.n	8005cc4 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005ca4:	4b42      	ldr	r3, [pc, #264]	@ (8005db0 <checkDemoModCalisma+0x24c>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f083 0301 	eor.w	r3, r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	2120      	movs	r1, #32
 8005cb6:	483b      	ldr	r0, [pc, #236]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005cb8:	f004 fc51 	bl	800a55e <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dac <checkDemoModCalisma+0x248>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e007      	b.n	8005cd4 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2120      	movs	r1, #32
 8005cc8:	4836      	ldr	r0, [pc, #216]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005cca:	f004 fc48 	bl	800a55e <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005cce:	4b37      	ldr	r3, [pc, #220]	@ (8005dac <checkDemoModCalisma+0x248>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	4833      	ldr	r0, [pc, #204]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005cd8:	f004 fc2a 	bl	800a530 <HAL_GPIO_ReadPin>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d125      	bne.n	8005d2e <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005ce2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ce6:	482f      	ldr	r0, [pc, #188]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005ce8:	f004 fc22 	bl	800a530 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11d      	bne.n	8005d2e <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005cf2:	4b31      	ldr	r3, [pc, #196]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f083 0301 	eor.w	r3, r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005d00:	4b2a      	ldr	r3, [pc, #168]	@ (8005dac <checkDemoModCalisma+0x248>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f083 0301 	eor.w	r3, r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005d0e:	4b26      	ldr	r3, [pc, #152]	@ (8005da8 <checkDemoModCalisma+0x244>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f083 0301 	eor.w	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2110      	movs	r1, #16
 8005d20:	4820      	ldr	r0, [pc, #128]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005d22:	f004 fc1c 	bl	800a55e <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005d26:	4b22      	ldr	r3, [pc, #136]	@ (8005db0 <checkDemoModCalisma+0x24c>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e007      	b.n	8005d3e <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2110      	movs	r1, #16
 8005d32:	481c      	ldr	r0, [pc, #112]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005d34:	f004 fc13 	bl	800a55e <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	@ (8005db0 <checkDemoModCalisma+0x24c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d3e:	2104      	movs	r1, #4
 8005d40:	4818      	ldr	r0, [pc, #96]	@ (8005da4 <checkDemoModCalisma+0x240>)
 8005d42:	f004 fbf5 	bl	800a530 <HAL_GPIO_ReadPin>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d139      	bne.n	8005dc0 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005db8 <checkDemoModCalisma+0x254>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f083 0301 	eor.w	r3, r3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d032      	beq.n	8005dc0 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005d5a:	4b15      	ldr	r3, [pc, #84]	@ (8005db0 <checkDemoModCalisma+0x24c>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f083 0301 	eor.w	r3, r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02b      	beq.n	8005dc0 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005d68:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <checkDemoModCalisma+0x248>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f083 0301 	eor.w	r3, r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d024      	beq.n	8005dc0 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005d76:	2201      	movs	r2, #1
 8005d78:	2102      	movs	r1, #2
 8005d7a:	480e      	ldr	r0, [pc, #56]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005d7c:	f004 fbef 	bl	800a55e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005d80:	2201      	movs	r2, #1
 8005d82:	2101      	movs	r1, #1
 8005d84:	480b      	ldr	r0, [pc, #44]	@ (8005db4 <checkDemoModCalisma+0x250>)
 8005d86:	f004 fbea 	bl	800a55e <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005d8a:	4b07      	ldr	r3, [pc, #28]	@ (8005da8 <checkDemoModCalisma+0x244>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005d90:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <checkDemoModCalisma+0x258>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e027      	b.n	8005de8 <checkDemoModCalisma+0x284>
 8005d98:	2000158e 	.word	0x2000158e
 8005d9c:	200015c1 	.word	0x200015c1
 8005da0:	2000158d 	.word	0x2000158d
 8005da4:	40011000 	.word	0x40011000
 8005da8:	200015c8 	.word	0x200015c8
 8005dac:	200015c9 	.word	0x200015c9
 8005db0:	200015ca 	.word	0x200015ca
 8005db4:	40010c00 	.word	0x40010c00
 8005db8:	200015c7 	.word	0x200015c7
 8005dbc:	200015ae 	.word	0x200015ae
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005dc0:	2104      	movs	r1, #4
 8005dc2:	486d      	ldr	r0, [pc, #436]	@ (8005f78 <checkDemoModCalisma+0x414>)
 8005dc4:	f004 fbb4 	bl	800a530 <HAL_GPIO_ReadPin>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10c      	bne.n	8005de8 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	486a      	ldr	r0, [pc, #424]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005dd4:	f004 fbc3 	bl	800a55e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4867      	ldr	r0, [pc, #412]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005dde:	f004 fbbe 	bl	800a55e <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005de2:	4b67      	ldr	r3, [pc, #412]	@ (8005f80 <checkDemoModCalisma+0x41c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005de8:	2104      	movs	r1, #4
 8005dea:	4863      	ldr	r0, [pc, #396]	@ (8005f78 <checkDemoModCalisma+0x414>)
 8005dec:	f004 fba0 	bl	800a530 <HAL_GPIO_ReadPin>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d10d      	bne.n	8005e12 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005df6:	2201      	movs	r2, #1
 8005df8:	2180      	movs	r1, #128	@ 0x80
 8005dfa:	4862      	ldr	r0, [pc, #392]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005dfc:	f004 fbaf 	bl	800a55e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e00:	2201      	movs	r2, #1
 8005e02:	2120      	movs	r1, #32
 8005e04:	485f      	ldr	r0, [pc, #380]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005e06:	f004 fbaa 	bl	800a55e <HAL_GPIO_WritePin>
					timer3 = millis;
 8005e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f88 <checkDemoModCalisma+0x424>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8005f8c <checkDemoModCalisma+0x428>)
 8005e10:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005e12:	4b5d      	ldr	r3, [pc, #372]	@ (8005f88 <checkDemoModCalisma+0x424>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b5d      	ldr	r3, [pc, #372]	@ (8005f8c <checkDemoModCalisma+0x428>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d909      	bls.n	8005e34 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	4857      	ldr	r0, [pc, #348]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005e26:	f004 fb9a 	bl	800a55e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	4855      	ldr	r0, [pc, #340]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005e30:	f004 fb95 	bl	800a55e <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005e34:	2102      	movs	r1, #2
 8005e36:	4850      	ldr	r0, [pc, #320]	@ (8005f78 <checkDemoModCalisma+0x414>)
 8005e38:	f004 fb7a 	bl	800a530 <HAL_GPIO_ReadPin>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d108      	bne.n	8005e54 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005e42:	2201      	movs	r2, #1
 8005e44:	2140      	movs	r1, #64	@ 0x40
 8005e46:	484f      	ldr	r0, [pc, #316]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005e48:	f004 fb89 	bl	800a55e <HAL_GPIO_WritePin>
					timer3 = millis;
 8005e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8005f88 <checkDemoModCalisma+0x424>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a4e      	ldr	r2, [pc, #312]	@ (8005f8c <checkDemoModCalisma+0x428>)
 8005e52:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005e54:	4b4c      	ldr	r3, [pc, #304]	@ (8005f88 <checkDemoModCalisma+0x424>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	4b4c      	ldr	r3, [pc, #304]	@ (8005f8c <checkDemoModCalisma+0x428>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d904      	bls.n	8005e6c <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e62:	2200      	movs	r2, #0
 8005e64:	2140      	movs	r1, #64	@ 0x40
 8005e66:	4847      	ldr	r0, [pc, #284]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005e68:	f004 fb79 	bl	800a55e <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005e6c:	4b48      	ldr	r3, [pc, #288]	@ (8005f90 <checkDemoModCalisma+0x42c>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d024      	beq.n	8005ebe <checkDemoModCalisma+0x35a>
 8005e74:	4b47      	ldr	r3, [pc, #284]	@ (8005f94 <checkDemoModCalisma+0x430>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d020      	beq.n	8005ebe <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005e7c:	4b46      	ldr	r3, [pc, #280]	@ (8005f98 <checkDemoModCalisma+0x434>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	4b44      	ldr	r3, [pc, #272]	@ (8005f98 <checkDemoModCalisma+0x434>)
 8005e86:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005e88:	4b44      	ldr	r3, [pc, #272]	@ (8005f9c <checkDemoModCalisma+0x438>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2bff      	cmp	r3, #255	@ 0xff
 8005e8e:	d108      	bne.n	8005ea2 <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005e90:	4b42      	ldr	r3, [pc, #264]	@ (8005f9c <checkDemoModCalisma+0x438>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005e96:	4b42      	ldr	r3, [pc, #264]	@ (8005fa0 <checkDemoModCalisma+0x43c>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	4b40      	ldr	r3, [pc, #256]	@ (8005fa0 <checkDemoModCalisma+0x43c>)
 8005ea0:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8005f98 <checkDemoModCalisma+0x434>)
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa4 <checkDemoModCalisma+0x440>)
 8005ea8:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa8 <checkDemoModCalisma+0x444>)
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	4b3d      	ldr	r3, [pc, #244]	@ (8005fa4 <checkDemoModCalisma+0x440>)
 8005eb0:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fac <checkDemoModCalisma+0x448>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005eb8:	4b36      	ldr	r3, [pc, #216]	@ (8005f94 <checkDemoModCalisma+0x430>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb0 <checkDemoModCalisma+0x44c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d156      	bne.n	8005f74 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005ec6:	4a3b      	ldr	r2, [pc, #236]	@ (8005fb4 <checkDemoModCalisma+0x450>)
 8005ec8:	2101      	movs	r1, #1
 8005eca:	2002      	movs	r0, #2
 8005ecc:	f002 fff4 	bl	8008eb8 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005ed0:	4a39      	ldr	r2, [pc, #228]	@ (8005fb8 <checkDemoModCalisma+0x454>)
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	f002 ffef 	bl	8008eb8 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005eda:	4b2f      	ldr	r3, [pc, #188]	@ (8005f98 <checkDemoModCalisma+0x434>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	220a      	movs	r2, #10
 8005ee0:	4936      	ldr	r1, [pc, #216]	@ (8005fbc <checkDemoModCalisma+0x458>)
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f007 fc68 	bl	800d7b8 <itoa>
					lcd_print(2,11,snum);
 8005ee8:	4a34      	ldr	r2, [pc, #208]	@ (8005fbc <checkDemoModCalisma+0x458>)
 8005eea:	210b      	movs	r1, #11
 8005eec:	2002      	movs	r0, #2
 8005eee:	f002 ffe3 	bl	8008eb8 <lcd_print>
					mesajYazildi=1;
 8005ef2:	4b33      	ldr	r3, [pc, #204]	@ (8005fc0 <checkDemoModCalisma+0x45c>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005ef8:	e03c      	b.n	8005f74 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005efa:	4b32      	ldr	r3, [pc, #200]	@ (8005fc4 <checkDemoModCalisma+0x460>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d003      	beq.n	8005f0a <checkDemoModCalisma+0x3a6>
 8005f02:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <checkDemoModCalisma+0x44c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d134      	bne.n	8005f74 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f10:	481a      	ldr	r0, [pc, #104]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005f12:	f004 fb24 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005f16:	2200      	movs	r2, #0
 8005f18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f1c:	4817      	ldr	r0, [pc, #92]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005f1e:	f004 fb1e 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2104      	movs	r1, #4
 8005f26:	4815      	ldr	r0, [pc, #84]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005f28:	f004 fb19 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2102      	movs	r1, #2
 8005f30:	4812      	ldr	r0, [pc, #72]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005f32:	f004 fb14 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005f36:	2200      	movs	r2, #0
 8005f38:	2101      	movs	r1, #1
 8005f3a:	4810      	ldr	r0, [pc, #64]	@ (8005f7c <checkDemoModCalisma+0x418>)
 8005f3c:	f004 fb0f 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005f40:	2200      	movs	r2, #0
 8005f42:	2120      	movs	r1, #32
 8005f44:	480c      	ldr	r0, [pc, #48]	@ (8005f78 <checkDemoModCalisma+0x414>)
 8005f46:	f004 fb0a 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2110      	movs	r1, #16
 8005f4e:	480a      	ldr	r0, [pc, #40]	@ (8005f78 <checkDemoModCalisma+0x414>)
 8005f50:	f004 fb05 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f54:	2200      	movs	r2, #0
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	480a      	ldr	r0, [pc, #40]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005f5a:	f004 fb00 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2140      	movs	r1, #64	@ 0x40
 8005f62:	4808      	ldr	r0, [pc, #32]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005f64:	f004 fafb 	bl	800a55e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2120      	movs	r1, #32
 8005f6c:	4805      	ldr	r0, [pc, #20]	@ (8005f84 <checkDemoModCalisma+0x420>)
 8005f6e:	f004 faf6 	bl	800a55e <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005f72:	e7ff      	b.n	8005f74 <checkDemoModCalisma+0x410>
 8005f74:	bf00      	nop
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40011000 	.word	0x40011000
 8005f7c:	40010c00 	.word	0x40010c00
 8005f80:	200015c8 	.word	0x200015c8
 8005f84:	40010800 	.word	0x40010800
 8005f88:	20001548 	.word	0x20001548
 8005f8c:	20001558 	.word	0x20001558
 8005f90:	200015c7 	.word	0x200015c7
 8005f94:	200015ae 	.word	0x200015ae
 8005f98:	20001569 	.word	0x20001569
 8005f9c:	20001568 	.word	0x20001568
 8005fa0:	2000156a 	.word	0x2000156a
 8005fa4:	200014a0 	.word	0x200014a0
 8005fa8:	2000156b 	.word	0x2000156b
 8005fac:	2000159c 	.word	0x2000159c
 8005fb0:	2000158d 	.word	0x2000158d
 8005fb4:	0800f080 	.word	0x0800f080
 8005fb8:	0800f08c 	.word	0x0800f08c
 8005fbc:	20001510 	.word	0x20001510
 8005fc0:	200015a4 	.word	0x200015a4
 8005fc4:	2000158e 	.word	0x2000158e

08005fc8 <mainLoop>:

void mainLoop() {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005fcc:	f7fe f8b6 	bl	800413c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	488b      	ldr	r0, [pc, #556]	@ (8006200 <mainLoop+0x238>)
 8005fd4:	f004 faac 	bl	800a530 <HAL_GPIO_ReadPin>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d136      	bne.n	800604c <mainLoop+0x84>
 8005fde:	2108      	movs	r1, #8
 8005fe0:	4888      	ldr	r0, [pc, #544]	@ (8006204 <mainLoop+0x23c>)
 8005fe2:	f004 faa5 	bl	800a530 <HAL_GPIO_ReadPin>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d12f      	bne.n	800604c <mainLoop+0x84>
 8005fec:	2102      	movs	r1, #2
 8005fee:	4884      	ldr	r0, [pc, #528]	@ (8006200 <mainLoop+0x238>)
 8005ff0:	f004 fa9e 	bl	800a530 <HAL_GPIO_ReadPin>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d128      	bne.n	800604c <mainLoop+0x84>
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	4880      	ldr	r0, [pc, #512]	@ (8006200 <mainLoop+0x238>)
 8005ffe:	f004 fa97 	bl	800a530 <HAL_GPIO_ReadPin>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d121      	bne.n	800604c <mainLoop+0x84>
 8006008:	2108      	movs	r1, #8
 800600a:	487d      	ldr	r0, [pc, #500]	@ (8006200 <mainLoop+0x238>)
 800600c:	f004 fa90 	bl	800a530 <HAL_GPIO_ReadPin>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d11a      	bne.n	800604c <mainLoop+0x84>
 8006016:	2180      	movs	r1, #128	@ 0x80
 8006018:	487a      	ldr	r0, [pc, #488]	@ (8006204 <mainLoop+0x23c>)
 800601a:	f004 fa89 	bl	800a530 <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	d113      	bne.n	800604c <mainLoop+0x84>
 8006024:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006028:	4876      	ldr	r0, [pc, #472]	@ (8006204 <mainLoop+0x23c>)
 800602a:	f004 fa81 	bl	800a530 <HAL_GPIO_ReadPin>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10b      	bne.n	800604c <mainLoop+0x84>
 8006034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006038:	4872      	ldr	r0, [pc, #456]	@ (8006204 <mainLoop+0x23c>)
 800603a:	f004 fa79 	bl	800a530 <HAL_GPIO_ReadPin>
 800603e:	4603      	mov	r3, r0
 8006040:	2b01      	cmp	r3, #1
 8006042:	d103      	bne.n	800604c <mainLoop+0x84>
			butonKontrol=0;
 8006044:	4b70      	ldr	r3, [pc, #448]	@ (8006208 <mainLoop+0x240>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e003      	b.n	8006054 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 800604c:	4b6f      	ldr	r3, [pc, #444]	@ (800620c <mainLoop+0x244>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a6f      	ldr	r2, [pc, #444]	@ (8006210 <mainLoop+0x248>)
 8006052:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8006054:	f7fe f924 	bl	80042a0 <buttonCheck>
 8006058:	4603      	mov	r3, r0
 800605a:	2b01      	cmp	r3, #1
 800605c:	d103      	bne.n	8006066 <mainLoop+0x9e>
			backLightTimer = millis;
 800605e:	4b6b      	ldr	r3, [pc, #428]	@ (800620c <mainLoop+0x244>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6b      	ldr	r2, [pc, #428]	@ (8006210 <mainLoop+0x248>)
 8006064:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8006066:	4b6b      	ldr	r3, [pc, #428]	@ (8006214 <mainLoop+0x24c>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <mainLoop+0xb2>
			hafizaYaz = 0;
 800606e:	4b69      	ldr	r3, [pc, #420]	@ (8006214 <mainLoop+0x24c>)
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8006074:	2001      	movs	r0, #1
 8006076:	f7fa fb15 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800607a:	4b67      	ldr	r3, [pc, #412]	@ (8006218 <mainLoop+0x250>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f083 0301 	eor.w	r3, r3, #1
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d043      	beq.n	8006110 <mainLoop+0x148>
 8006088:	4864      	ldr	r0, [pc, #400]	@ (800621c <mainLoop+0x254>)
 800608a:	f005 f86d 	bl	800b168 <HAL_I2C_GetState>
 800608e:	4603      	mov	r3, r0
 8006090:	2b20      	cmp	r3, #32
 8006092:	d13d      	bne.n	8006110 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8006094:	4b62      	ldr	r3, [pc, #392]	@ (8006220 <mainLoop+0x258>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f083 0301 	eor.w	r3, r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d028      	beq.n	80060f4 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 80060a2:	4a60      	ldr	r2, [pc, #384]	@ (8006224 <mainLoop+0x25c>)
 80060a4:	2101      	movs	r1, #1
 80060a6:	2001      	movs	r0, #1
 80060a8:	f002 ff06 	bl	8008eb8 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 80060ac:	4a5e      	ldr	r2, [pc, #376]	@ (8006228 <mainLoop+0x260>)
 80060ae:	2101      	movs	r1, #1
 80060b0:	2002      	movs	r0, #2
 80060b2:	f002 ff01 	bl	8008eb8 <lcd_print>
			  HAL_Delay(1000);
 80060b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060ba:	f003 fc69 	bl	8009990 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80060be:	bf00      	nop
 80060c0:	4856      	ldr	r0, [pc, #344]	@ (800621c <mainLoop+0x254>)
 80060c2:	f005 f85e 	bl	800b182 <HAL_I2C_GetError>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d0f9      	beq.n	80060c0 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80060cc:	e003      	b.n	80060d6 <mainLoop+0x10e>
				  HAL_Delay(1000);
 80060ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060d2:	f003 fc5d 	bl	8009990 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80060d6:	4851      	ldr	r0, [pc, #324]	@ (800621c <mainLoop+0x254>)
 80060d8:	f005 f846 	bl	800b168 <HAL_I2C_GetState>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d1f5      	bne.n	80060ce <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80060e2:	4a52      	ldr	r2, [pc, #328]	@ (800622c <mainLoop+0x264>)
 80060e4:	2101      	movs	r1, #1
 80060e6:	2002      	movs	r0, #2
 80060e8:	f002 fee6 	bl	8008eb8 <lcd_print>

			  ilkOkuma=1;
 80060ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006220 <mainLoop+0x258>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e006      	b.n	8006102 <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 80060f4:	4a4e      	ldr	r2, [pc, #312]	@ (8006230 <mainLoop+0x268>)
 80060f6:	2101      	movs	r1, #1
 80060f8:	2002      	movs	r0, #2
 80060fa:	f002 fedd 	bl	8008eb8 <lcd_print>
			  lcd_clear();
 80060fe:	f002 ff07 	bl	8008f10 <lcd_clear>
		  }

		  lcd_clear();
 8006102:	f002 ff05 	bl	8008f10 <lcd_clear>

		  eepromKontrol();
 8006106:	f7fa f895 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800610a:	4b43      	ldr	r3, [pc, #268]	@ (8006218 <mainLoop+0x250>)
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006110:	4b48      	ldr	r3, [pc, #288]	@ (8006234 <mainLoop+0x26c>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <mainLoop+0x18a>
 8006118:	4b47      	ldr	r3, [pc, #284]	@ (8006238 <mainLoop+0x270>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f083 0301 	eor.w	r3, r3, #1
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d015      	beq.n	8006152 <mainLoop+0x18a>
 8006126:	4b45      	ldr	r3, [pc, #276]	@ (800623c <mainLoop+0x274>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d111      	bne.n	8006152 <mainLoop+0x18a>
			lcd_clear();
 800612e:	f002 feef 	bl	8008f10 <lcd_clear>
			HAL_Delay(10);
 8006132:	200a      	movs	r0, #10
 8006134:	f003 fc2c 	bl	8009990 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006138:	4a41      	ldr	r2, [pc, #260]	@ (8006240 <mainLoop+0x278>)
 800613a:	2101      	movs	r1, #1
 800613c:	2001      	movs	r0, #1
 800613e:	f002 febb 	bl	8008eb8 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006142:	4a40      	ldr	r2, [pc, #256]	@ (8006244 <mainLoop+0x27c>)
 8006144:	2101      	movs	r1, #1
 8006146:	2002      	movs	r0, #2
 8006148:	f002 feb6 	bl	8008eb8 <lcd_print>
			mesajYazildi=1;
 800614c:	4b3a      	ldr	r3, [pc, #232]	@ (8006238 <mainLoop+0x270>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006152:	4b38      	ldr	r3, [pc, #224]	@ (8006234 <mainLoop+0x26c>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d112      	bne.n	8006180 <mainLoop+0x1b8>
 800615a:	2102      	movs	r1, #2
 800615c:	4828      	ldr	r0, [pc, #160]	@ (8006200 <mainLoop+0x238>)
 800615e:	f004 f9e7 	bl	800a530 <HAL_GPIO_ReadPin>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d10b      	bne.n	8006180 <mainLoop+0x1b8>
 8006168:	2104      	movs	r1, #4
 800616a:	4825      	ldr	r0, [pc, #148]	@ (8006200 <mainLoop+0x238>)
 800616c:	f004 f9e0 	bl	800a530 <HAL_GPIO_ReadPin>
 8006170:	4603      	mov	r3, r0
 8006172:	2b01      	cmp	r3, #1
 8006174:	d104      	bne.n	8006180 <mainLoop+0x1b8>
			menuGiris=1;
 8006176:	4b2f      	ldr	r3, [pc, #188]	@ (8006234 <mainLoop+0x26c>)
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800617c:	f002 fec8 	bl	8008f10 <lcd_clear>
		}

		if(menuGiris==1) {
 8006180:	4b2c      	ldr	r3, [pc, #176]	@ (8006234 <mainLoop+0x26c>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <mainLoop+0x1c4>
			menu();
 8006188:	f7fb faa8 	bl	80016dc <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800618c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006190:	481c      	ldr	r0, [pc, #112]	@ (8006204 <mainLoop+0x23c>)
 8006192:	f004 f9fc 	bl	800a58e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006196:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800619a:	482b      	ldr	r0, [pc, #172]	@ (8006248 <mainLoop+0x280>)
 800619c:	f004 f9c8 	bl	800a530 <HAL_GPIO_ReadPin>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <mainLoop+0x1f4>
 80061a6:	4b29      	ldr	r3, [pc, #164]	@ (800624c <mainLoop+0x284>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f083 0301 	eor.w	r3, r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <mainLoop+0x1f4>
			stopVar=1;
 80061b4:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <mainLoop+0x288>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e002      	b.n	80061c2 <mainLoop+0x1fa>
		} else {
			stopVar=0;
 80061bc:	4b24      	ldr	r3, [pc, #144]	@ (8006250 <mainLoop+0x288>)
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80061c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80061c6:	4820      	ldr	r0, [pc, #128]	@ (8006248 <mainLoop+0x280>)
 80061c8:	f004 f9b2 	bl	800a530 <HAL_GPIO_ReadPin>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <mainLoop+0x21a>
 80061d2:	4b20      	ldr	r3, [pc, #128]	@ (8006254 <mainLoop+0x28c>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <mainLoop+0x21a>
			EmnStopVar=1;
 80061da:	4b1f      	ldr	r3, [pc, #124]	@ (8006258 <mainLoop+0x290>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e002      	b.n	80061e8 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80061e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <mainLoop+0x290>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80061e8:	f7fe f88e 	bl	8004308 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80061ec:	f7fe f8c0 	bl	8004370 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80061f0:	f7fe f904 	bl	80043fc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80061f4:	f7fe f954 	bl	80044a0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80061f8:	f7ff fcb4 	bl	8005b64 <checkDemoModCalisma>
		checkLCDBacklight();
 80061fc:	e6e6      	b.n	8005fcc <mainLoop+0x4>
 80061fe:	bf00      	nop
 8006200:	40010800 	.word	0x40010800
 8006204:	40011000 	.word	0x40011000
 8006208:	2000159f 	.word	0x2000159f
 800620c:	20001548 	.word	0x20001548
 8006210:	20001564 	.word	0x20001564
 8006214:	2000159c 	.word	0x2000159c
 8006218:	2000159d 	.word	0x2000159d
 800621c:	20001eec 	.word	0x20001eec
 8006220:	2000159e 	.word	0x2000159e
 8006224:	20000178 	.word	0x20000178
 8006228:	20001e24 	.word	0x20001e24
 800622c:	20001e38 	.word	0x20001e38
 8006230:	20001e4c 	.word	0x20001e4c
 8006234:	2000158d 	.word	0x2000158d
 8006238:	200015a4 	.word	0x200015a4
 800623c:	2000158e 	.word	0x2000158e
 8006240:	200000c4 	.word	0x200000c4
 8006244:	200000d8 	.word	0x200000d8
 8006248:	40010c00 	.word	0x40010c00
 800624c:	200015c4 	.word	0x200015c4
 8006250:	200015c1 	.word	0x200015c1
 8006254:	200015d3 	.word	0x200015d3
 8006258:	200015d4 	.word	0x200015d4

0800625c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 800625c:	b5b0      	push	{r4, r5, r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f040 853d 	bne.w	8006ce8 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800626e:	4ac7      	ldr	r2, [pc, #796]	@ (800658c <loadMenuTexts+0x330>)
 8006270:	4bc7      	ldr	r3, [pc, #796]	@ (8006590 <loadMenuTexts+0x334>)
 8006272:	4614      	mov	r4, r2
 8006274:	461d      	mov	r5, r3
 8006276:	6828      	ldr	r0, [r5, #0]
 8006278:	6869      	ldr	r1, [r5, #4]
 800627a:	68aa      	ldr	r2, [r5, #8]
 800627c:	68eb      	ldr	r3, [r5, #12]
 800627e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006280:	7c2b      	ldrb	r3, [r5, #16]
 8006282:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006284:	4ac3      	ldr	r2, [pc, #780]	@ (8006594 <loadMenuTexts+0x338>)
 8006286:	4bc4      	ldr	r3, [pc, #784]	@ (8006598 <loadMenuTexts+0x33c>)
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	6828      	ldr	r0, [r5, #0]
 800628e:	6869      	ldr	r1, [r5, #4]
 8006290:	68aa      	ldr	r2, [r5, #8]
 8006292:	68eb      	ldr	r3, [r5, #12]
 8006294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006296:	7c2b      	ldrb	r3, [r5, #16]
 8006298:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 800629a:	4ac0      	ldr	r2, [pc, #768]	@ (800659c <loadMenuTexts+0x340>)
 800629c:	4bc0      	ldr	r3, [pc, #768]	@ (80065a0 <loadMenuTexts+0x344>)
 800629e:	4614      	mov	r4, r2
 80062a0:	461d      	mov	r5, r3
 80062a2:	6828      	ldr	r0, [r5, #0]
 80062a4:	6869      	ldr	r1, [r5, #4]
 80062a6:	68aa      	ldr	r2, [r5, #8]
 80062a8:	68eb      	ldr	r3, [r5, #12]
 80062aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ac:	7c2b      	ldrb	r3, [r5, #16]
 80062ae:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 80062b0:	4abc      	ldr	r2, [pc, #752]	@ (80065a4 <loadMenuTexts+0x348>)
 80062b2:	4bbd      	ldr	r3, [pc, #756]	@ (80065a8 <loadMenuTexts+0x34c>)
 80062b4:	4614      	mov	r4, r2
 80062b6:	461d      	mov	r5, r3
 80062b8:	6828      	ldr	r0, [r5, #0]
 80062ba:	6869      	ldr	r1, [r5, #4]
 80062bc:	68aa      	ldr	r2, [r5, #8]
 80062be:	68eb      	ldr	r3, [r5, #12]
 80062c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c2:	7c2b      	ldrb	r3, [r5, #16]
 80062c4:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80062c6:	4ab9      	ldr	r2, [pc, #740]	@ (80065ac <loadMenuTexts+0x350>)
 80062c8:	4bb9      	ldr	r3, [pc, #740]	@ (80065b0 <loadMenuTexts+0x354>)
 80062ca:	4614      	mov	r4, r2
 80062cc:	461d      	mov	r5, r3
 80062ce:	6828      	ldr	r0, [r5, #0]
 80062d0:	6869      	ldr	r1, [r5, #4]
 80062d2:	68aa      	ldr	r2, [r5, #8]
 80062d4:	68eb      	ldr	r3, [r5, #12]
 80062d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d8:	7c2b      	ldrb	r3, [r5, #16]
 80062da:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80062dc:	4ab5      	ldr	r2, [pc, #724]	@ (80065b4 <loadMenuTexts+0x358>)
 80062de:	4bb6      	ldr	r3, [pc, #728]	@ (80065b8 <loadMenuTexts+0x35c>)
 80062e0:	4614      	mov	r4, r2
 80062e2:	461d      	mov	r5, r3
 80062e4:	6828      	ldr	r0, [r5, #0]
 80062e6:	6869      	ldr	r1, [r5, #4]
 80062e8:	68aa      	ldr	r2, [r5, #8]
 80062ea:	68eb      	ldr	r3, [r5, #12]
 80062ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ee:	7c2b      	ldrb	r3, [r5, #16]
 80062f0:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80062f2:	4ab2      	ldr	r2, [pc, #712]	@ (80065bc <loadMenuTexts+0x360>)
 80062f4:	4bb2      	ldr	r3, [pc, #712]	@ (80065c0 <loadMenuTexts+0x364>)
 80062f6:	4614      	mov	r4, r2
 80062f8:	461d      	mov	r5, r3
 80062fa:	6828      	ldr	r0, [r5, #0]
 80062fc:	6869      	ldr	r1, [r5, #4]
 80062fe:	68aa      	ldr	r2, [r5, #8]
 8006300:	68eb      	ldr	r3, [r5, #12]
 8006302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006304:	7c2b      	ldrb	r3, [r5, #16]
 8006306:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006308:	4aae      	ldr	r2, [pc, #696]	@ (80065c4 <loadMenuTexts+0x368>)
 800630a:	4baf      	ldr	r3, [pc, #700]	@ (80065c8 <loadMenuTexts+0x36c>)
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	6828      	ldr	r0, [r5, #0]
 8006312:	6869      	ldr	r1, [r5, #4]
 8006314:	68aa      	ldr	r2, [r5, #8]
 8006316:	68eb      	ldr	r3, [r5, #12]
 8006318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631a:	7c2b      	ldrb	r3, [r5, #16]
 800631c:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 800631e:	4aab      	ldr	r2, [pc, #684]	@ (80065cc <loadMenuTexts+0x370>)
 8006320:	4bab      	ldr	r3, [pc, #684]	@ (80065d0 <loadMenuTexts+0x374>)
 8006322:	4614      	mov	r4, r2
 8006324:	461d      	mov	r5, r3
 8006326:	6828      	ldr	r0, [r5, #0]
 8006328:	6869      	ldr	r1, [r5, #4]
 800632a:	68aa      	ldr	r2, [r5, #8]
 800632c:	68eb      	ldr	r3, [r5, #12]
 800632e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006330:	7c2b      	ldrb	r3, [r5, #16]
 8006332:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006334:	4aa7      	ldr	r2, [pc, #668]	@ (80065d4 <loadMenuTexts+0x378>)
 8006336:	4ba8      	ldr	r3, [pc, #672]	@ (80065d8 <loadMenuTexts+0x37c>)
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	6828      	ldr	r0, [r5, #0]
 800633e:	6869      	ldr	r1, [r5, #4]
 8006340:	68aa      	ldr	r2, [r5, #8]
 8006342:	68eb      	ldr	r3, [r5, #12]
 8006344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006346:	7c2b      	ldrb	r3, [r5, #16]
 8006348:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800634a:	4aa4      	ldr	r2, [pc, #656]	@ (80065dc <loadMenuTexts+0x380>)
 800634c:	4ba4      	ldr	r3, [pc, #656]	@ (80065e0 <loadMenuTexts+0x384>)
 800634e:	4614      	mov	r4, r2
 8006350:	461d      	mov	r5, r3
 8006352:	6828      	ldr	r0, [r5, #0]
 8006354:	6869      	ldr	r1, [r5, #4]
 8006356:	68aa      	ldr	r2, [r5, #8]
 8006358:	68eb      	ldr	r3, [r5, #12]
 800635a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635c:	7c2b      	ldrb	r3, [r5, #16]
 800635e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006360:	4aa0      	ldr	r2, [pc, #640]	@ (80065e4 <loadMenuTexts+0x388>)
 8006362:	4ba1      	ldr	r3, [pc, #644]	@ (80065e8 <loadMenuTexts+0x38c>)
 8006364:	4614      	mov	r4, r2
 8006366:	461d      	mov	r5, r3
 8006368:	6828      	ldr	r0, [r5, #0]
 800636a:	6869      	ldr	r1, [r5, #4]
 800636c:	68aa      	ldr	r2, [r5, #8]
 800636e:	68eb      	ldr	r3, [r5, #12]
 8006370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006372:	7c2b      	ldrb	r3, [r5, #16]
 8006374:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006376:	4a9d      	ldr	r2, [pc, #628]	@ (80065ec <loadMenuTexts+0x390>)
 8006378:	4b9d      	ldr	r3, [pc, #628]	@ (80065f0 <loadMenuTexts+0x394>)
 800637a:	4614      	mov	r4, r2
 800637c:	461d      	mov	r5, r3
 800637e:	6828      	ldr	r0, [r5, #0]
 8006380:	6869      	ldr	r1, [r5, #4]
 8006382:	68aa      	ldr	r2, [r5, #8]
 8006384:	68eb      	ldr	r3, [r5, #12]
 8006386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006388:	7c2b      	ldrb	r3, [r5, #16]
 800638a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 800638c:	4a99      	ldr	r2, [pc, #612]	@ (80065f4 <loadMenuTexts+0x398>)
 800638e:	4b9a      	ldr	r3, [pc, #616]	@ (80065f8 <loadMenuTexts+0x39c>)
 8006390:	4614      	mov	r4, r2
 8006392:	461d      	mov	r5, r3
 8006394:	6828      	ldr	r0, [r5, #0]
 8006396:	6869      	ldr	r1, [r5, #4]
 8006398:	68aa      	ldr	r2, [r5, #8]
 800639a:	68eb      	ldr	r3, [r5, #12]
 800639c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639e:	7c2b      	ldrb	r3, [r5, #16]
 80063a0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80063a2:	4a96      	ldr	r2, [pc, #600]	@ (80065fc <loadMenuTexts+0x3a0>)
 80063a4:	4b96      	ldr	r3, [pc, #600]	@ (8006600 <loadMenuTexts+0x3a4>)
 80063a6:	4614      	mov	r4, r2
 80063a8:	461d      	mov	r5, r3
 80063aa:	6828      	ldr	r0, [r5, #0]
 80063ac:	6869      	ldr	r1, [r5, #4]
 80063ae:	68aa      	ldr	r2, [r5, #8]
 80063b0:	68eb      	ldr	r3, [r5, #12]
 80063b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b4:	7c2b      	ldrb	r3, [r5, #16]
 80063b6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80063b8:	4a92      	ldr	r2, [pc, #584]	@ (8006604 <loadMenuTexts+0x3a8>)
 80063ba:	4b93      	ldr	r3, [pc, #588]	@ (8006608 <loadMenuTexts+0x3ac>)
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	6828      	ldr	r0, [r5, #0]
 80063c2:	6869      	ldr	r1, [r5, #4]
 80063c4:	68aa      	ldr	r2, [r5, #8]
 80063c6:	68eb      	ldr	r3, [r5, #12]
 80063c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ca:	7c2b      	ldrb	r3, [r5, #16]
 80063cc:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80063ce:	4a8f      	ldr	r2, [pc, #572]	@ (800660c <loadMenuTexts+0x3b0>)
 80063d0:	4b8f      	ldr	r3, [pc, #572]	@ (8006610 <loadMenuTexts+0x3b4>)
 80063d2:	4614      	mov	r4, r2
 80063d4:	461d      	mov	r5, r3
 80063d6:	6828      	ldr	r0, [r5, #0]
 80063d8:	6869      	ldr	r1, [r5, #4]
 80063da:	68aa      	ldr	r2, [r5, #8]
 80063dc:	68eb      	ldr	r3, [r5, #12]
 80063de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e0:	7c2b      	ldrb	r3, [r5, #16]
 80063e2:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80063e4:	4a8b      	ldr	r2, [pc, #556]	@ (8006614 <loadMenuTexts+0x3b8>)
 80063e6:	4b8c      	ldr	r3, [pc, #560]	@ (8006618 <loadMenuTexts+0x3bc>)
 80063e8:	4614      	mov	r4, r2
 80063ea:	461d      	mov	r5, r3
 80063ec:	6828      	ldr	r0, [r5, #0]
 80063ee:	6869      	ldr	r1, [r5, #4]
 80063f0:	68aa      	ldr	r2, [r5, #8]
 80063f2:	68eb      	ldr	r3, [r5, #12]
 80063f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f6:	7c2b      	ldrb	r3, [r5, #16]
 80063f8:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80063fa:	4a88      	ldr	r2, [pc, #544]	@ (800661c <loadMenuTexts+0x3c0>)
 80063fc:	4b88      	ldr	r3, [pc, #544]	@ (8006620 <loadMenuTexts+0x3c4>)
 80063fe:	4614      	mov	r4, r2
 8006400:	461d      	mov	r5, r3
 8006402:	6828      	ldr	r0, [r5, #0]
 8006404:	6869      	ldr	r1, [r5, #4]
 8006406:	68aa      	ldr	r2, [r5, #8]
 8006408:	68eb      	ldr	r3, [r5, #12]
 800640a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640c:	7c2b      	ldrb	r3, [r5, #16]
 800640e:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006410:	4a84      	ldr	r2, [pc, #528]	@ (8006624 <loadMenuTexts+0x3c8>)
 8006412:	4b85      	ldr	r3, [pc, #532]	@ (8006628 <loadMenuTexts+0x3cc>)
 8006414:	4614      	mov	r4, r2
 8006416:	461d      	mov	r5, r3
 8006418:	6828      	ldr	r0, [r5, #0]
 800641a:	6869      	ldr	r1, [r5, #4]
 800641c:	68aa      	ldr	r2, [r5, #8]
 800641e:	68eb      	ldr	r3, [r5, #12]
 8006420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006422:	7c2b      	ldrb	r3, [r5, #16]
 8006424:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006426:	4a81      	ldr	r2, [pc, #516]	@ (800662c <loadMenuTexts+0x3d0>)
 8006428:	4b81      	ldr	r3, [pc, #516]	@ (8006630 <loadMenuTexts+0x3d4>)
 800642a:	4614      	mov	r4, r2
 800642c:	461d      	mov	r5, r3
 800642e:	6828      	ldr	r0, [r5, #0]
 8006430:	6869      	ldr	r1, [r5, #4]
 8006432:	68aa      	ldr	r2, [r5, #8]
 8006434:	68eb      	ldr	r3, [r5, #12]
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	7c2b      	ldrb	r3, [r5, #16]
 800643a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800643c:	4a7d      	ldr	r2, [pc, #500]	@ (8006634 <loadMenuTexts+0x3d8>)
 800643e:	4b7e      	ldr	r3, [pc, #504]	@ (8006638 <loadMenuTexts+0x3dc>)
 8006440:	4614      	mov	r4, r2
 8006442:	461d      	mov	r5, r3
 8006444:	6828      	ldr	r0, [r5, #0]
 8006446:	6869      	ldr	r1, [r5, #4]
 8006448:	68aa      	ldr	r2, [r5, #8]
 800644a:	68eb      	ldr	r3, [r5, #12]
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	7c2b      	ldrb	r3, [r5, #16]
 8006450:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006452:	4a7a      	ldr	r2, [pc, #488]	@ (800663c <loadMenuTexts+0x3e0>)
 8006454:	4b7a      	ldr	r3, [pc, #488]	@ (8006640 <loadMenuTexts+0x3e4>)
 8006456:	4614      	mov	r4, r2
 8006458:	461d      	mov	r5, r3
 800645a:	6828      	ldr	r0, [r5, #0]
 800645c:	6869      	ldr	r1, [r5, #4]
 800645e:	68aa      	ldr	r2, [r5, #8]
 8006460:	68eb      	ldr	r3, [r5, #12]
 8006462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006464:	7c2b      	ldrb	r3, [r5, #16]
 8006466:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006468:	4a76      	ldr	r2, [pc, #472]	@ (8006644 <loadMenuTexts+0x3e8>)
 800646a:	4b77      	ldr	r3, [pc, #476]	@ (8006648 <loadMenuTexts+0x3ec>)
 800646c:	4614      	mov	r4, r2
 800646e:	461d      	mov	r5, r3
 8006470:	6828      	ldr	r0, [r5, #0]
 8006472:	6869      	ldr	r1, [r5, #4]
 8006474:	68aa      	ldr	r2, [r5, #8]
 8006476:	68eb      	ldr	r3, [r5, #12]
 8006478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647a:	7c2b      	ldrb	r3, [r5, #16]
 800647c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800647e:	4a73      	ldr	r2, [pc, #460]	@ (800664c <loadMenuTexts+0x3f0>)
 8006480:	4b73      	ldr	r3, [pc, #460]	@ (8006650 <loadMenuTexts+0x3f4>)
 8006482:	4614      	mov	r4, r2
 8006484:	461d      	mov	r5, r3
 8006486:	6828      	ldr	r0, [r5, #0]
 8006488:	6869      	ldr	r1, [r5, #4]
 800648a:	68aa      	ldr	r2, [r5, #8]
 800648c:	68eb      	ldr	r3, [r5, #12]
 800648e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006490:	7c2b      	ldrb	r3, [r5, #16]
 8006492:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006494:	4a6f      	ldr	r2, [pc, #444]	@ (8006654 <loadMenuTexts+0x3f8>)
 8006496:	4b70      	ldr	r3, [pc, #448]	@ (8006658 <loadMenuTexts+0x3fc>)
 8006498:	4614      	mov	r4, r2
 800649a:	461d      	mov	r5, r3
 800649c:	6828      	ldr	r0, [r5, #0]
 800649e:	6869      	ldr	r1, [r5, #4]
 80064a0:	68aa      	ldr	r2, [r5, #8]
 80064a2:	68eb      	ldr	r3, [r5, #12]
 80064a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a6:	7c2b      	ldrb	r3, [r5, #16]
 80064a8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80064aa:	4a6c      	ldr	r2, [pc, #432]	@ (800665c <loadMenuTexts+0x400>)
 80064ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006660 <loadMenuTexts+0x404>)
 80064ae:	4614      	mov	r4, r2
 80064b0:	461d      	mov	r5, r3
 80064b2:	6828      	ldr	r0, [r5, #0]
 80064b4:	6869      	ldr	r1, [r5, #4]
 80064b6:	68aa      	ldr	r2, [r5, #8]
 80064b8:	68eb      	ldr	r3, [r5, #12]
 80064ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064bc:	7c2b      	ldrb	r3, [r5, #16]
 80064be:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80064c0:	4a68      	ldr	r2, [pc, #416]	@ (8006664 <loadMenuTexts+0x408>)
 80064c2:	4b69      	ldr	r3, [pc, #420]	@ (8006668 <loadMenuTexts+0x40c>)
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	6828      	ldr	r0, [r5, #0]
 80064ca:	6869      	ldr	r1, [r5, #4]
 80064cc:	68aa      	ldr	r2, [r5, #8]
 80064ce:	68eb      	ldr	r3, [r5, #12]
 80064d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d2:	7c2b      	ldrb	r3, [r5, #16]
 80064d4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80064d6:	4a65      	ldr	r2, [pc, #404]	@ (800666c <loadMenuTexts+0x410>)
 80064d8:	4b65      	ldr	r3, [pc, #404]	@ (8006670 <loadMenuTexts+0x414>)
 80064da:	4614      	mov	r4, r2
 80064dc:	461d      	mov	r5, r3
 80064de:	6828      	ldr	r0, [r5, #0]
 80064e0:	6869      	ldr	r1, [r5, #4]
 80064e2:	68aa      	ldr	r2, [r5, #8]
 80064e4:	68eb      	ldr	r3, [r5, #12]
 80064e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e8:	7c2b      	ldrb	r3, [r5, #16]
 80064ea:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80064ec:	4a61      	ldr	r2, [pc, #388]	@ (8006674 <loadMenuTexts+0x418>)
 80064ee:	4b62      	ldr	r3, [pc, #392]	@ (8006678 <loadMenuTexts+0x41c>)
 80064f0:	4614      	mov	r4, r2
 80064f2:	461d      	mov	r5, r3
 80064f4:	6828      	ldr	r0, [r5, #0]
 80064f6:	6869      	ldr	r1, [r5, #4]
 80064f8:	68aa      	ldr	r2, [r5, #8]
 80064fa:	68eb      	ldr	r3, [r5, #12]
 80064fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fe:	7c2b      	ldrb	r3, [r5, #16]
 8006500:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8006502:	4a5e      	ldr	r2, [pc, #376]	@ (800667c <loadMenuTexts+0x420>)
 8006504:	4b5e      	ldr	r3, [pc, #376]	@ (8006680 <loadMenuTexts+0x424>)
 8006506:	4614      	mov	r4, r2
 8006508:	461d      	mov	r5, r3
 800650a:	6828      	ldr	r0, [r5, #0]
 800650c:	6869      	ldr	r1, [r5, #4]
 800650e:	68aa      	ldr	r2, [r5, #8]
 8006510:	68eb      	ldr	r3, [r5, #12]
 8006512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006514:	7c2b      	ldrb	r3, [r5, #16]
 8006516:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006518:	4a5a      	ldr	r2, [pc, #360]	@ (8006684 <loadMenuTexts+0x428>)
 800651a:	4b5b      	ldr	r3, [pc, #364]	@ (8006688 <loadMenuTexts+0x42c>)
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	6828      	ldr	r0, [r5, #0]
 8006522:	6869      	ldr	r1, [r5, #4]
 8006524:	68aa      	ldr	r2, [r5, #8]
 8006526:	68eb      	ldr	r3, [r5, #12]
 8006528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800652a:	7c2b      	ldrb	r3, [r5, #16]
 800652c:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800652e:	4a57      	ldr	r2, [pc, #348]	@ (800668c <loadMenuTexts+0x430>)
 8006530:	4b57      	ldr	r3, [pc, #348]	@ (8006690 <loadMenuTexts+0x434>)
 8006532:	4614      	mov	r4, r2
 8006534:	461d      	mov	r5, r3
 8006536:	6828      	ldr	r0, [r5, #0]
 8006538:	6869      	ldr	r1, [r5, #4]
 800653a:	68aa      	ldr	r2, [r5, #8]
 800653c:	68eb      	ldr	r3, [r5, #12]
 800653e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006540:	7c2b      	ldrb	r3, [r5, #16]
 8006542:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006544:	4a53      	ldr	r2, [pc, #332]	@ (8006694 <loadMenuTexts+0x438>)
 8006546:	4b54      	ldr	r3, [pc, #336]	@ (8006698 <loadMenuTexts+0x43c>)
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	6828      	ldr	r0, [r5, #0]
 800654e:	6869      	ldr	r1, [r5, #4]
 8006550:	68aa      	ldr	r2, [r5, #8]
 8006552:	68eb      	ldr	r3, [r5, #12]
 8006554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006556:	7c2b      	ldrb	r3, [r5, #16]
 8006558:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800655a:	4a50      	ldr	r2, [pc, #320]	@ (800669c <loadMenuTexts+0x440>)
 800655c:	4b50      	ldr	r3, [pc, #320]	@ (80066a0 <loadMenuTexts+0x444>)
 800655e:	4614      	mov	r4, r2
 8006560:	461d      	mov	r5, r3
 8006562:	6828      	ldr	r0, [r5, #0]
 8006564:	6869      	ldr	r1, [r5, #4]
 8006566:	68aa      	ldr	r2, [r5, #8]
 8006568:	68eb      	ldr	r3, [r5, #12]
 800656a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656c:	7c2b      	ldrb	r3, [r5, #16]
 800656e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006570:	4a4c      	ldr	r2, [pc, #304]	@ (80066a4 <loadMenuTexts+0x448>)
 8006572:	4b4d      	ldr	r3, [pc, #308]	@ (80066a8 <loadMenuTexts+0x44c>)
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	6828      	ldr	r0, [r5, #0]
 800657a:	6869      	ldr	r1, [r5, #4]
 800657c:	68aa      	ldr	r2, [r5, #8]
 800657e:	68eb      	ldr	r3, [r5, #12]
 8006580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006582:	7c2b      	ldrb	r3, [r5, #16]
 8006584:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006586:	4a49      	ldr	r2, [pc, #292]	@ (80066ac <loadMenuTexts+0x450>)
 8006588:	e092      	b.n	80066b0 <loadMenuTexts+0x454>
 800658a:	bf00      	nop
 800658c:	200017d0 	.word	0x200017d0
 8006590:	2000018c 	.word	0x2000018c
 8006594:	200017e4 	.word	0x200017e4
 8006598:	200001a0 	.word	0x200001a0
 800659c:	200017f8 	.word	0x200017f8
 80065a0:	200001b4 	.word	0x200001b4
 80065a4:	2000180c 	.word	0x2000180c
 80065a8:	200001c8 	.word	0x200001c8
 80065ac:	20001820 	.word	0x20001820
 80065b0:	200001dc 	.word	0x200001dc
 80065b4:	20001834 	.word	0x20001834
 80065b8:	200001f0 	.word	0x200001f0
 80065bc:	20001848 	.word	0x20001848
 80065c0:	20000204 	.word	0x20000204
 80065c4:	2000185c 	.word	0x2000185c
 80065c8:	20000218 	.word	0x20000218
 80065cc:	20001870 	.word	0x20001870
 80065d0:	2000022c 	.word	0x2000022c
 80065d4:	20001884 	.word	0x20001884
 80065d8:	20000240 	.word	0x20000240
 80065dc:	20001898 	.word	0x20001898
 80065e0:	20000254 	.word	0x20000254
 80065e4:	200018ac 	.word	0x200018ac
 80065e8:	20000268 	.word	0x20000268
 80065ec:	200018c0 	.word	0x200018c0
 80065f0:	2000027c 	.word	0x2000027c
 80065f4:	200018d4 	.word	0x200018d4
 80065f8:	20000290 	.word	0x20000290
 80065fc:	200018e8 	.word	0x200018e8
 8006600:	200002a4 	.word	0x200002a4
 8006604:	200018fc 	.word	0x200018fc
 8006608:	200002b8 	.word	0x200002b8
 800660c:	20001910 	.word	0x20001910
 8006610:	200002cc 	.word	0x200002cc
 8006614:	20001924 	.word	0x20001924
 8006618:	200002e0 	.word	0x200002e0
 800661c:	20001938 	.word	0x20001938
 8006620:	200002f4 	.word	0x200002f4
 8006624:	2000194c 	.word	0x2000194c
 8006628:	20000308 	.word	0x20000308
 800662c:	20001960 	.word	0x20001960
 8006630:	2000031c 	.word	0x2000031c
 8006634:	20001974 	.word	0x20001974
 8006638:	20000330 	.word	0x20000330
 800663c:	20001988 	.word	0x20001988
 8006640:	20000344 	.word	0x20000344
 8006644:	2000199c 	.word	0x2000199c
 8006648:	20000358 	.word	0x20000358
 800664c:	200019b0 	.word	0x200019b0
 8006650:	2000036c 	.word	0x2000036c
 8006654:	200019c4 	.word	0x200019c4
 8006658:	20000380 	.word	0x20000380
 800665c:	200019d8 	.word	0x200019d8
 8006660:	20000394 	.word	0x20000394
 8006664:	200019ec 	.word	0x200019ec
 8006668:	200003a8 	.word	0x200003a8
 800666c:	20001a00 	.word	0x20001a00
 8006670:	200003bc 	.word	0x200003bc
 8006674:	20001a14 	.word	0x20001a14
 8006678:	200003d0 	.word	0x200003d0
 800667c:	20001a28 	.word	0x20001a28
 8006680:	200003e4 	.word	0x200003e4
 8006684:	20001a3c 	.word	0x20001a3c
 8006688:	200003f8 	.word	0x200003f8
 800668c:	20001a50 	.word	0x20001a50
 8006690:	2000040c 	.word	0x2000040c
 8006694:	20001a64 	.word	0x20001a64
 8006698:	20000420 	.word	0x20000420
 800669c:	20001a78 	.word	0x20001a78
 80066a0:	20000434 	.word	0x20000434
 80066a4:	20001a8c 	.word	0x20001a8c
 80066a8:	20000448 	.word	0x20000448
 80066ac:	20001aa0 	.word	0x20001aa0
 80066b0:	4bc7      	ldr	r3, [pc, #796]	@ (80069d0 <loadMenuTexts+0x774>)
 80066b2:	4614      	mov	r4, r2
 80066b4:	461d      	mov	r5, r3
 80066b6:	6828      	ldr	r0, [r5, #0]
 80066b8:	6869      	ldr	r1, [r5, #4]
 80066ba:	68aa      	ldr	r2, [r5, #8]
 80066bc:	68eb      	ldr	r3, [r5, #12]
 80066be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c0:	7c2b      	ldrb	r3, [r5, #16]
 80066c2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80066c4:	4ac3      	ldr	r2, [pc, #780]	@ (80069d4 <loadMenuTexts+0x778>)
 80066c6:	4bc4      	ldr	r3, [pc, #784]	@ (80069d8 <loadMenuTexts+0x77c>)
 80066c8:	4614      	mov	r4, r2
 80066ca:	461d      	mov	r5, r3
 80066cc:	6828      	ldr	r0, [r5, #0]
 80066ce:	6869      	ldr	r1, [r5, #4]
 80066d0:	68aa      	ldr	r2, [r5, #8]
 80066d2:	68eb      	ldr	r3, [r5, #12]
 80066d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d6:	7c2b      	ldrb	r3, [r5, #16]
 80066d8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80066da:	4ac0      	ldr	r2, [pc, #768]	@ (80069dc <loadMenuTexts+0x780>)
 80066dc:	4bc0      	ldr	r3, [pc, #768]	@ (80069e0 <loadMenuTexts+0x784>)
 80066de:	4614      	mov	r4, r2
 80066e0:	461d      	mov	r5, r3
 80066e2:	6828      	ldr	r0, [r5, #0]
 80066e4:	6869      	ldr	r1, [r5, #4]
 80066e6:	68aa      	ldr	r2, [r5, #8]
 80066e8:	68eb      	ldr	r3, [r5, #12]
 80066ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ec:	7c2b      	ldrb	r3, [r5, #16]
 80066ee:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80066f0:	4abc      	ldr	r2, [pc, #752]	@ (80069e4 <loadMenuTexts+0x788>)
 80066f2:	4bbd      	ldr	r3, [pc, #756]	@ (80069e8 <loadMenuTexts+0x78c>)
 80066f4:	4614      	mov	r4, r2
 80066f6:	461d      	mov	r5, r3
 80066f8:	6828      	ldr	r0, [r5, #0]
 80066fa:	6869      	ldr	r1, [r5, #4]
 80066fc:	68aa      	ldr	r2, [r5, #8]
 80066fe:	68eb      	ldr	r3, [r5, #12]
 8006700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006702:	7c2b      	ldrb	r3, [r5, #16]
 8006704:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8006706:	4ab9      	ldr	r2, [pc, #740]	@ (80069ec <loadMenuTexts+0x790>)
 8006708:	4bb9      	ldr	r3, [pc, #740]	@ (80069f0 <loadMenuTexts+0x794>)
 800670a:	4614      	mov	r4, r2
 800670c:	461d      	mov	r5, r3
 800670e:	6828      	ldr	r0, [r5, #0]
 8006710:	6869      	ldr	r1, [r5, #4]
 8006712:	68aa      	ldr	r2, [r5, #8]
 8006714:	68eb      	ldr	r3, [r5, #12]
 8006716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006718:	7c2b      	ldrb	r3, [r5, #16]
 800671a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 800671c:	4ab5      	ldr	r2, [pc, #724]	@ (80069f4 <loadMenuTexts+0x798>)
 800671e:	4bb6      	ldr	r3, [pc, #728]	@ (80069f8 <loadMenuTexts+0x79c>)
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	6828      	ldr	r0, [r5, #0]
 8006726:	6869      	ldr	r1, [r5, #4]
 8006728:	68aa      	ldr	r2, [r5, #8]
 800672a:	68eb      	ldr	r3, [r5, #12]
 800672c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672e:	7c2b      	ldrb	r3, [r5, #16]
 8006730:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8006732:	4ab2      	ldr	r2, [pc, #712]	@ (80069fc <loadMenuTexts+0x7a0>)
 8006734:	4bb2      	ldr	r3, [pc, #712]	@ (8006a00 <loadMenuTexts+0x7a4>)
 8006736:	4614      	mov	r4, r2
 8006738:	461d      	mov	r5, r3
 800673a:	6828      	ldr	r0, [r5, #0]
 800673c:	6869      	ldr	r1, [r5, #4]
 800673e:	68aa      	ldr	r2, [r5, #8]
 8006740:	68eb      	ldr	r3, [r5, #12]
 8006742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006744:	7c2b      	ldrb	r3, [r5, #16]
 8006746:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006748:	4aae      	ldr	r2, [pc, #696]	@ (8006a04 <loadMenuTexts+0x7a8>)
 800674a:	4baf      	ldr	r3, [pc, #700]	@ (8006a08 <loadMenuTexts+0x7ac>)
 800674c:	4614      	mov	r4, r2
 800674e:	461d      	mov	r5, r3
 8006750:	6828      	ldr	r0, [r5, #0]
 8006752:	6869      	ldr	r1, [r5, #4]
 8006754:	68aa      	ldr	r2, [r5, #8]
 8006756:	68eb      	ldr	r3, [r5, #12]
 8006758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675a:	7c2b      	ldrb	r3, [r5, #16]
 800675c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800675e:	4aab      	ldr	r2, [pc, #684]	@ (8006a0c <loadMenuTexts+0x7b0>)
 8006760:	4bab      	ldr	r3, [pc, #684]	@ (8006a10 <loadMenuTexts+0x7b4>)
 8006762:	4614      	mov	r4, r2
 8006764:	461d      	mov	r5, r3
 8006766:	6828      	ldr	r0, [r5, #0]
 8006768:	6869      	ldr	r1, [r5, #4]
 800676a:	68aa      	ldr	r2, [r5, #8]
 800676c:	68eb      	ldr	r3, [r5, #12]
 800676e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006770:	7c2b      	ldrb	r3, [r5, #16]
 8006772:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006774:	4aa7      	ldr	r2, [pc, #668]	@ (8006a14 <loadMenuTexts+0x7b8>)
 8006776:	4ba8      	ldr	r3, [pc, #672]	@ (8006a18 <loadMenuTexts+0x7bc>)
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	6828      	ldr	r0, [r5, #0]
 800677e:	6869      	ldr	r1, [r5, #4]
 8006780:	68aa      	ldr	r2, [r5, #8]
 8006782:	68eb      	ldr	r3, [r5, #12]
 8006784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006786:	7c2b      	ldrb	r3, [r5, #16]
 8006788:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800678a:	4aa4      	ldr	r2, [pc, #656]	@ (8006a1c <loadMenuTexts+0x7c0>)
 800678c:	4ba4      	ldr	r3, [pc, #656]	@ (8006a20 <loadMenuTexts+0x7c4>)
 800678e:	4614      	mov	r4, r2
 8006790:	461d      	mov	r5, r3
 8006792:	6828      	ldr	r0, [r5, #0]
 8006794:	6869      	ldr	r1, [r5, #4]
 8006796:	68aa      	ldr	r2, [r5, #8]
 8006798:	68eb      	ldr	r3, [r5, #12]
 800679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679c:	7c2b      	ldrb	r3, [r5, #16]
 800679e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80067a0:	4aa0      	ldr	r2, [pc, #640]	@ (8006a24 <loadMenuTexts+0x7c8>)
 80067a2:	4ba1      	ldr	r3, [pc, #644]	@ (8006a28 <loadMenuTexts+0x7cc>)
 80067a4:	4614      	mov	r4, r2
 80067a6:	461d      	mov	r5, r3
 80067a8:	6828      	ldr	r0, [r5, #0]
 80067aa:	6869      	ldr	r1, [r5, #4]
 80067ac:	68aa      	ldr	r2, [r5, #8]
 80067ae:	68eb      	ldr	r3, [r5, #12]
 80067b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b2:	7c2b      	ldrb	r3, [r5, #16]
 80067b4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80067b6:	4a9d      	ldr	r2, [pc, #628]	@ (8006a2c <loadMenuTexts+0x7d0>)
 80067b8:	4b9d      	ldr	r3, [pc, #628]	@ (8006a30 <loadMenuTexts+0x7d4>)
 80067ba:	4614      	mov	r4, r2
 80067bc:	461d      	mov	r5, r3
 80067be:	6828      	ldr	r0, [r5, #0]
 80067c0:	6869      	ldr	r1, [r5, #4]
 80067c2:	68aa      	ldr	r2, [r5, #8]
 80067c4:	68eb      	ldr	r3, [r5, #12]
 80067c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c8:	7c2b      	ldrb	r3, [r5, #16]
 80067ca:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80067cc:	4a99      	ldr	r2, [pc, #612]	@ (8006a34 <loadMenuTexts+0x7d8>)
 80067ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006a38 <loadMenuTexts+0x7dc>)
 80067d0:	4614      	mov	r4, r2
 80067d2:	461d      	mov	r5, r3
 80067d4:	6828      	ldr	r0, [r5, #0]
 80067d6:	6869      	ldr	r1, [r5, #4]
 80067d8:	68aa      	ldr	r2, [r5, #8]
 80067da:	68eb      	ldr	r3, [r5, #12]
 80067dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067de:	7c2b      	ldrb	r3, [r5, #16]
 80067e0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80067e2:	4a96      	ldr	r2, [pc, #600]	@ (8006a3c <loadMenuTexts+0x7e0>)
 80067e4:	4b96      	ldr	r3, [pc, #600]	@ (8006a40 <loadMenuTexts+0x7e4>)
 80067e6:	4614      	mov	r4, r2
 80067e8:	461d      	mov	r5, r3
 80067ea:	6828      	ldr	r0, [r5, #0]
 80067ec:	6869      	ldr	r1, [r5, #4]
 80067ee:	68aa      	ldr	r2, [r5, #8]
 80067f0:	68eb      	ldr	r3, [r5, #12]
 80067f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f4:	7c2b      	ldrb	r3, [r5, #16]
 80067f6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80067f8:	4a92      	ldr	r2, [pc, #584]	@ (8006a44 <loadMenuTexts+0x7e8>)
 80067fa:	4b93      	ldr	r3, [pc, #588]	@ (8006a48 <loadMenuTexts+0x7ec>)
 80067fc:	4614      	mov	r4, r2
 80067fe:	461d      	mov	r5, r3
 8006800:	6828      	ldr	r0, [r5, #0]
 8006802:	6869      	ldr	r1, [r5, #4]
 8006804:	68aa      	ldr	r2, [r5, #8]
 8006806:	68eb      	ldr	r3, [r5, #12]
 8006808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800680a:	7c2b      	ldrb	r3, [r5, #16]
 800680c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 800680e:	4a8f      	ldr	r2, [pc, #572]	@ (8006a4c <loadMenuTexts+0x7f0>)
 8006810:	4b8f      	ldr	r3, [pc, #572]	@ (8006a50 <loadMenuTexts+0x7f4>)
 8006812:	4614      	mov	r4, r2
 8006814:	461d      	mov	r5, r3
 8006816:	6828      	ldr	r0, [r5, #0]
 8006818:	6869      	ldr	r1, [r5, #4]
 800681a:	68aa      	ldr	r2, [r5, #8]
 800681c:	68eb      	ldr	r3, [r5, #12]
 800681e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006820:	7c2b      	ldrb	r3, [r5, #16]
 8006822:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006824:	4a8b      	ldr	r2, [pc, #556]	@ (8006a54 <loadMenuTexts+0x7f8>)
 8006826:	4b8c      	ldr	r3, [pc, #560]	@ (8006a58 <loadMenuTexts+0x7fc>)
 8006828:	4614      	mov	r4, r2
 800682a:	461d      	mov	r5, r3
 800682c:	6828      	ldr	r0, [r5, #0]
 800682e:	6869      	ldr	r1, [r5, #4]
 8006830:	68aa      	ldr	r2, [r5, #8]
 8006832:	68eb      	ldr	r3, [r5, #12]
 8006834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006836:	7c2b      	ldrb	r3, [r5, #16]
 8006838:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800683a:	4a88      	ldr	r2, [pc, #544]	@ (8006a5c <loadMenuTexts+0x800>)
 800683c:	4b88      	ldr	r3, [pc, #544]	@ (8006a60 <loadMenuTexts+0x804>)
 800683e:	4614      	mov	r4, r2
 8006840:	461d      	mov	r5, r3
 8006842:	6828      	ldr	r0, [r5, #0]
 8006844:	6869      	ldr	r1, [r5, #4]
 8006846:	68aa      	ldr	r2, [r5, #8]
 8006848:	68eb      	ldr	r3, [r5, #12]
 800684a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800684c:	7c2b      	ldrb	r3, [r5, #16]
 800684e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006850:	4a84      	ldr	r2, [pc, #528]	@ (8006a64 <loadMenuTexts+0x808>)
 8006852:	4b85      	ldr	r3, [pc, #532]	@ (8006a68 <loadMenuTexts+0x80c>)
 8006854:	4614      	mov	r4, r2
 8006856:	461d      	mov	r5, r3
 8006858:	6828      	ldr	r0, [r5, #0]
 800685a:	6869      	ldr	r1, [r5, #4]
 800685c:	68aa      	ldr	r2, [r5, #8]
 800685e:	68eb      	ldr	r3, [r5, #12]
 8006860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006862:	7c2b      	ldrb	r3, [r5, #16]
 8006864:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006866:	4a81      	ldr	r2, [pc, #516]	@ (8006a6c <loadMenuTexts+0x810>)
 8006868:	4b81      	ldr	r3, [pc, #516]	@ (8006a70 <loadMenuTexts+0x814>)
 800686a:	4614      	mov	r4, r2
 800686c:	461d      	mov	r5, r3
 800686e:	6828      	ldr	r0, [r5, #0]
 8006870:	6869      	ldr	r1, [r5, #4]
 8006872:	68aa      	ldr	r2, [r5, #8]
 8006874:	68eb      	ldr	r3, [r5, #12]
 8006876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006878:	7c2b      	ldrb	r3, [r5, #16]
 800687a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800687c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a74 <loadMenuTexts+0x818>)
 800687e:	4b7e      	ldr	r3, [pc, #504]	@ (8006a78 <loadMenuTexts+0x81c>)
 8006880:	4614      	mov	r4, r2
 8006882:	461d      	mov	r5, r3
 8006884:	6828      	ldr	r0, [r5, #0]
 8006886:	6869      	ldr	r1, [r5, #4]
 8006888:	68aa      	ldr	r2, [r5, #8]
 800688a:	68eb      	ldr	r3, [r5, #12]
 800688c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688e:	7c2b      	ldrb	r3, [r5, #16]
 8006890:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006892:	4a7a      	ldr	r2, [pc, #488]	@ (8006a7c <loadMenuTexts+0x820>)
 8006894:	4b7a      	ldr	r3, [pc, #488]	@ (8006a80 <loadMenuTexts+0x824>)
 8006896:	4614      	mov	r4, r2
 8006898:	461d      	mov	r5, r3
 800689a:	6828      	ldr	r0, [r5, #0]
 800689c:	6869      	ldr	r1, [r5, #4]
 800689e:	68aa      	ldr	r2, [r5, #8]
 80068a0:	68eb      	ldr	r3, [r5, #12]
 80068a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a4:	7c2b      	ldrb	r3, [r5, #16]
 80068a6:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80068a8:	4a76      	ldr	r2, [pc, #472]	@ (8006a84 <loadMenuTexts+0x828>)
 80068aa:	4b77      	ldr	r3, [pc, #476]	@ (8006a88 <loadMenuTexts+0x82c>)
 80068ac:	4614      	mov	r4, r2
 80068ae:	461d      	mov	r5, r3
 80068b0:	6828      	ldr	r0, [r5, #0]
 80068b2:	6869      	ldr	r1, [r5, #4]
 80068b4:	68aa      	ldr	r2, [r5, #8]
 80068b6:	68eb      	ldr	r3, [r5, #12]
 80068b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ba:	7c2b      	ldrb	r3, [r5, #16]
 80068bc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80068be:	4a73      	ldr	r2, [pc, #460]	@ (8006a8c <loadMenuTexts+0x830>)
 80068c0:	4b73      	ldr	r3, [pc, #460]	@ (8006a90 <loadMenuTexts+0x834>)
 80068c2:	4614      	mov	r4, r2
 80068c4:	461d      	mov	r5, r3
 80068c6:	6828      	ldr	r0, [r5, #0]
 80068c8:	6869      	ldr	r1, [r5, #4]
 80068ca:	68aa      	ldr	r2, [r5, #8]
 80068cc:	68eb      	ldr	r3, [r5, #12]
 80068ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068d0:	7c2b      	ldrb	r3, [r5, #16]
 80068d2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80068d4:	4a6f      	ldr	r2, [pc, #444]	@ (8006a94 <loadMenuTexts+0x838>)
 80068d6:	4b70      	ldr	r3, [pc, #448]	@ (8006a98 <loadMenuTexts+0x83c>)
 80068d8:	4614      	mov	r4, r2
 80068da:	461d      	mov	r5, r3
 80068dc:	6828      	ldr	r0, [r5, #0]
 80068de:	6869      	ldr	r1, [r5, #4]
 80068e0:	68aa      	ldr	r2, [r5, #8]
 80068e2:	68eb      	ldr	r3, [r5, #12]
 80068e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e6:	7c2b      	ldrb	r3, [r5, #16]
 80068e8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80068ea:	4a6c      	ldr	r2, [pc, #432]	@ (8006a9c <loadMenuTexts+0x840>)
 80068ec:	4b6c      	ldr	r3, [pc, #432]	@ (8006aa0 <loadMenuTexts+0x844>)
 80068ee:	4614      	mov	r4, r2
 80068f0:	461d      	mov	r5, r3
 80068f2:	6828      	ldr	r0, [r5, #0]
 80068f4:	6869      	ldr	r1, [r5, #4]
 80068f6:	68aa      	ldr	r2, [r5, #8]
 80068f8:	68eb      	ldr	r3, [r5, #12]
 80068fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fc:	7c2b      	ldrb	r3, [r5, #16]
 80068fe:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006900:	4a68      	ldr	r2, [pc, #416]	@ (8006aa4 <loadMenuTexts+0x848>)
 8006902:	4b69      	ldr	r3, [pc, #420]	@ (8006aa8 <loadMenuTexts+0x84c>)
 8006904:	4614      	mov	r4, r2
 8006906:	461d      	mov	r5, r3
 8006908:	6828      	ldr	r0, [r5, #0]
 800690a:	6869      	ldr	r1, [r5, #4]
 800690c:	68aa      	ldr	r2, [r5, #8]
 800690e:	68eb      	ldr	r3, [r5, #12]
 8006910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006912:	7c2b      	ldrb	r3, [r5, #16]
 8006914:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8006916:	4a65      	ldr	r2, [pc, #404]	@ (8006aac <loadMenuTexts+0x850>)
 8006918:	4b65      	ldr	r3, [pc, #404]	@ (8006ab0 <loadMenuTexts+0x854>)
 800691a:	4614      	mov	r4, r2
 800691c:	461d      	mov	r5, r3
 800691e:	6828      	ldr	r0, [r5, #0]
 8006920:	6869      	ldr	r1, [r5, #4]
 8006922:	68aa      	ldr	r2, [r5, #8]
 8006924:	68eb      	ldr	r3, [r5, #12]
 8006926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006928:	7c2b      	ldrb	r3, [r5, #16]
 800692a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 800692c:	4a61      	ldr	r2, [pc, #388]	@ (8006ab4 <loadMenuTexts+0x858>)
 800692e:	4b62      	ldr	r3, [pc, #392]	@ (8006ab8 <loadMenuTexts+0x85c>)
 8006930:	4614      	mov	r4, r2
 8006932:	461d      	mov	r5, r3
 8006934:	6828      	ldr	r0, [r5, #0]
 8006936:	6869      	ldr	r1, [r5, #4]
 8006938:	68aa      	ldr	r2, [r5, #8]
 800693a:	68eb      	ldr	r3, [r5, #12]
 800693c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693e:	7c2b      	ldrb	r3, [r5, #16]
 8006940:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8006942:	4a5e      	ldr	r2, [pc, #376]	@ (8006abc <loadMenuTexts+0x860>)
 8006944:	4b5e      	ldr	r3, [pc, #376]	@ (8006ac0 <loadMenuTexts+0x864>)
 8006946:	4614      	mov	r4, r2
 8006948:	461d      	mov	r5, r3
 800694a:	6828      	ldr	r0, [r5, #0]
 800694c:	6869      	ldr	r1, [r5, #4]
 800694e:	68aa      	ldr	r2, [r5, #8]
 8006950:	68eb      	ldr	r3, [r5, #12]
 8006952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006954:	7c2b      	ldrb	r3, [r5, #16]
 8006956:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006958:	4a5a      	ldr	r2, [pc, #360]	@ (8006ac4 <loadMenuTexts+0x868>)
 800695a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ac8 <loadMenuTexts+0x86c>)
 800695c:	4614      	mov	r4, r2
 800695e:	461d      	mov	r5, r3
 8006960:	6828      	ldr	r0, [r5, #0]
 8006962:	6869      	ldr	r1, [r5, #4]
 8006964:	68aa      	ldr	r2, [r5, #8]
 8006966:	68eb      	ldr	r3, [r5, #12]
 8006968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800696a:	7c2b      	ldrb	r3, [r5, #16]
 800696c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800696e:	4a57      	ldr	r2, [pc, #348]	@ (8006acc <loadMenuTexts+0x870>)
 8006970:	4b57      	ldr	r3, [pc, #348]	@ (8006ad0 <loadMenuTexts+0x874>)
 8006972:	4614      	mov	r4, r2
 8006974:	461d      	mov	r5, r3
 8006976:	6828      	ldr	r0, [r5, #0]
 8006978:	6869      	ldr	r1, [r5, #4]
 800697a:	68aa      	ldr	r2, [r5, #8]
 800697c:	68eb      	ldr	r3, [r5, #12]
 800697e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006980:	7c2b      	ldrb	r3, [r5, #16]
 8006982:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006984:	4a53      	ldr	r2, [pc, #332]	@ (8006ad4 <loadMenuTexts+0x878>)
 8006986:	4b54      	ldr	r3, [pc, #336]	@ (8006ad8 <loadMenuTexts+0x87c>)
 8006988:	4614      	mov	r4, r2
 800698a:	461d      	mov	r5, r3
 800698c:	6828      	ldr	r0, [r5, #0]
 800698e:	6869      	ldr	r1, [r5, #4]
 8006990:	68aa      	ldr	r2, [r5, #8]
 8006992:	68eb      	ldr	r3, [r5, #12]
 8006994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006996:	7c2b      	ldrb	r3, [r5, #16]
 8006998:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800699a:	4a50      	ldr	r2, [pc, #320]	@ (8006adc <loadMenuTexts+0x880>)
 800699c:	4b50      	ldr	r3, [pc, #320]	@ (8006ae0 <loadMenuTexts+0x884>)
 800699e:	4614      	mov	r4, r2
 80069a0:	461d      	mov	r5, r3
 80069a2:	6828      	ldr	r0, [r5, #0]
 80069a4:	6869      	ldr	r1, [r5, #4]
 80069a6:	68aa      	ldr	r2, [r5, #8]
 80069a8:	68eb      	ldr	r3, [r5, #12]
 80069aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ac:	7c2b      	ldrb	r3, [r5, #16]
 80069ae:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 80069b0:	4a4c      	ldr	r2, [pc, #304]	@ (8006ae4 <loadMenuTexts+0x888>)
 80069b2:	4b4d      	ldr	r3, [pc, #308]	@ (8006ae8 <loadMenuTexts+0x88c>)
 80069b4:	4614      	mov	r4, r2
 80069b6:	461d      	mov	r5, r3
 80069b8:	6828      	ldr	r0, [r5, #0]
 80069ba:	6869      	ldr	r1, [r5, #4]
 80069bc:	68aa      	ldr	r2, [r5, #8]
 80069be:	68eb      	ldr	r3, [r5, #12]
 80069c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c2:	7c2b      	ldrb	r3, [r5, #16]
 80069c4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 80069c6:	4a49      	ldr	r2, [pc, #292]	@ (8006aec <loadMenuTexts+0x890>)
 80069c8:	4b49      	ldr	r3, [pc, #292]	@ (8006af0 <loadMenuTexts+0x894>)
 80069ca:	4614      	mov	r4, r2
 80069cc:	461d      	mov	r5, r3
 80069ce:	e091      	b.n	8006af4 <loadMenuTexts+0x898>
 80069d0:	2000045c 	.word	0x2000045c
 80069d4:	20001ab4 	.word	0x20001ab4
 80069d8:	20000470 	.word	0x20000470
 80069dc:	20001ac8 	.word	0x20001ac8
 80069e0:	20000484 	.word	0x20000484
 80069e4:	20001adc 	.word	0x20001adc
 80069e8:	20000498 	.word	0x20000498
 80069ec:	20001af0 	.word	0x20001af0
 80069f0:	200004ac 	.word	0x200004ac
 80069f4:	20001b04 	.word	0x20001b04
 80069f8:	200004c0 	.word	0x200004c0
 80069fc:	20001b18 	.word	0x20001b18
 8006a00:	200004d4 	.word	0x200004d4
 8006a04:	20001b2c 	.word	0x20001b2c
 8006a08:	200004e8 	.word	0x200004e8
 8006a0c:	20001b40 	.word	0x20001b40
 8006a10:	200004fc 	.word	0x200004fc
 8006a14:	20001b54 	.word	0x20001b54
 8006a18:	20000510 	.word	0x20000510
 8006a1c:	20001b68 	.word	0x20001b68
 8006a20:	20000524 	.word	0x20000524
 8006a24:	20001b7c 	.word	0x20001b7c
 8006a28:	20000538 	.word	0x20000538
 8006a2c:	20001b90 	.word	0x20001b90
 8006a30:	2000054c 	.word	0x2000054c
 8006a34:	20001ba4 	.word	0x20001ba4
 8006a38:	20000560 	.word	0x20000560
 8006a3c:	20001bb8 	.word	0x20001bb8
 8006a40:	20000574 	.word	0x20000574
 8006a44:	20001bcc 	.word	0x20001bcc
 8006a48:	20000588 	.word	0x20000588
 8006a4c:	20001be0 	.word	0x20001be0
 8006a50:	2000059c 	.word	0x2000059c
 8006a54:	20001bf4 	.word	0x20001bf4
 8006a58:	200005b0 	.word	0x200005b0
 8006a5c:	20001c08 	.word	0x20001c08
 8006a60:	200005c4 	.word	0x200005c4
 8006a64:	20001c1c 	.word	0x20001c1c
 8006a68:	200005d8 	.word	0x200005d8
 8006a6c:	20001c30 	.word	0x20001c30
 8006a70:	200005ec 	.word	0x200005ec
 8006a74:	20001c44 	.word	0x20001c44
 8006a78:	20000600 	.word	0x20000600
 8006a7c:	20001c58 	.word	0x20001c58
 8006a80:	20000614 	.word	0x20000614
 8006a84:	20001c6c 	.word	0x20001c6c
 8006a88:	20000628 	.word	0x20000628
 8006a8c:	20001c80 	.word	0x20001c80
 8006a90:	2000063c 	.word	0x2000063c
 8006a94:	20001c94 	.word	0x20001c94
 8006a98:	20000650 	.word	0x20000650
 8006a9c:	20001ca8 	.word	0x20001ca8
 8006aa0:	20000664 	.word	0x20000664
 8006aa4:	20001cbc 	.word	0x20001cbc
 8006aa8:	20000678 	.word	0x20000678
 8006aac:	20001cd0 	.word	0x20001cd0
 8006ab0:	2000068c 	.word	0x2000068c
 8006ab4:	20001ce4 	.word	0x20001ce4
 8006ab8:	200006a0 	.word	0x200006a0
 8006abc:	20001cf8 	.word	0x20001cf8
 8006ac0:	200006b4 	.word	0x200006b4
 8006ac4:	20001d0c 	.word	0x20001d0c
 8006ac8:	200006c8 	.word	0x200006c8
 8006acc:	20001d20 	.word	0x20001d20
 8006ad0:	200006dc 	.word	0x200006dc
 8006ad4:	20001d34 	.word	0x20001d34
 8006ad8:	200006f0 	.word	0x200006f0
 8006adc:	20001d48 	.word	0x20001d48
 8006ae0:	20000c7c 	.word	0x20000c7c
 8006ae4:	20001d5c 	.word	0x20001d5c
 8006ae8:	20000c90 	.word	0x20000c90
 8006aec:	20001d70 	.word	0x20001d70
 8006af0:	20000ca4 	.word	0x20000ca4
 8006af4:	6828      	ldr	r0, [r5, #0]
 8006af6:	6869      	ldr	r1, [r5, #4]
 8006af8:	68aa      	ldr	r2, [r5, #8]
 8006afa:	68eb      	ldr	r3, [r5, #12]
 8006afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afe:	7c2b      	ldrb	r3, [r5, #16]
 8006b00:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006b02:	4a59      	ldr	r2, [pc, #356]	@ (8006c68 <loadMenuTexts+0xa0c>)
 8006b04:	4b59      	ldr	r3, [pc, #356]	@ (8006c6c <loadMenuTexts+0xa10>)
 8006b06:	4614      	mov	r4, r2
 8006b08:	461d      	mov	r5, r3
 8006b0a:	6828      	ldr	r0, [r5, #0]
 8006b0c:	6869      	ldr	r1, [r5, #4]
 8006b0e:	68aa      	ldr	r2, [r5, #8]
 8006b10:	68eb      	ldr	r3, [r5, #12]
 8006b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b14:	7c2b      	ldrb	r3, [r5, #16]
 8006b16:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006b18:	4a55      	ldr	r2, [pc, #340]	@ (8006c70 <loadMenuTexts+0xa14>)
 8006b1a:	4b56      	ldr	r3, [pc, #344]	@ (8006c74 <loadMenuTexts+0xa18>)
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	6828      	ldr	r0, [r5, #0]
 8006b22:	6869      	ldr	r1, [r5, #4]
 8006b24:	68aa      	ldr	r2, [r5, #8]
 8006b26:	68eb      	ldr	r3, [r5, #12]
 8006b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2a:	7c2b      	ldrb	r3, [r5, #16]
 8006b2c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006b2e:	4a52      	ldr	r2, [pc, #328]	@ (8006c78 <loadMenuTexts+0xa1c>)
 8006b30:	4b52      	ldr	r3, [pc, #328]	@ (8006c7c <loadMenuTexts+0xa20>)
 8006b32:	4614      	mov	r4, r2
 8006b34:	461d      	mov	r5, r3
 8006b36:	6828      	ldr	r0, [r5, #0]
 8006b38:	6869      	ldr	r1, [r5, #4]
 8006b3a:	68aa      	ldr	r2, [r5, #8]
 8006b3c:	68eb      	ldr	r3, [r5, #12]
 8006b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b40:	7c2b      	ldrb	r3, [r5, #16]
 8006b42:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006b44:	4a4e      	ldr	r2, [pc, #312]	@ (8006c80 <loadMenuTexts+0xa24>)
 8006b46:	4b4f      	ldr	r3, [pc, #316]	@ (8006c84 <loadMenuTexts+0xa28>)
 8006b48:	4614      	mov	r4, r2
 8006b4a:	461d      	mov	r5, r3
 8006b4c:	6828      	ldr	r0, [r5, #0]
 8006b4e:	6869      	ldr	r1, [r5, #4]
 8006b50:	68aa      	ldr	r2, [r5, #8]
 8006b52:	68eb      	ldr	r3, [r5, #12]
 8006b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b56:	7c2b      	ldrb	r3, [r5, #16]
 8006b58:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006b5a:	4a4b      	ldr	r2, [pc, #300]	@ (8006c88 <loadMenuTexts+0xa2c>)
 8006b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c8c <loadMenuTexts+0xa30>)
 8006b5e:	4614      	mov	r4, r2
 8006b60:	461d      	mov	r5, r3
 8006b62:	6828      	ldr	r0, [r5, #0]
 8006b64:	6869      	ldr	r1, [r5, #4]
 8006b66:	68aa      	ldr	r2, [r5, #8]
 8006b68:	68eb      	ldr	r3, [r5, #12]
 8006b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6c:	7c2b      	ldrb	r3, [r5, #16]
 8006b6e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006b70:	4a47      	ldr	r2, [pc, #284]	@ (8006c90 <loadMenuTexts+0xa34>)
 8006b72:	4b48      	ldr	r3, [pc, #288]	@ (8006c94 <loadMenuTexts+0xa38>)
 8006b74:	4614      	mov	r4, r2
 8006b76:	461d      	mov	r5, r3
 8006b78:	6828      	ldr	r0, [r5, #0]
 8006b7a:	6869      	ldr	r1, [r5, #4]
 8006b7c:	68aa      	ldr	r2, [r5, #8]
 8006b7e:	68eb      	ldr	r3, [r5, #12]
 8006b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b82:	7c2b      	ldrb	r3, [r5, #16]
 8006b84:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006b86:	4a44      	ldr	r2, [pc, #272]	@ (8006c98 <loadMenuTexts+0xa3c>)
 8006b88:	4b44      	ldr	r3, [pc, #272]	@ (8006c9c <loadMenuTexts+0xa40>)
 8006b8a:	4614      	mov	r4, r2
 8006b8c:	461d      	mov	r5, r3
 8006b8e:	6828      	ldr	r0, [r5, #0]
 8006b90:	6869      	ldr	r1, [r5, #4]
 8006b92:	68aa      	ldr	r2, [r5, #8]
 8006b94:	68eb      	ldr	r3, [r5, #12]
 8006b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b98:	7c2b      	ldrb	r3, [r5, #16]
 8006b9a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006b9c:	4a40      	ldr	r2, [pc, #256]	@ (8006ca0 <loadMenuTexts+0xa44>)
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <loadMenuTexts+0xa48>)
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	6828      	ldr	r0, [r5, #0]
 8006ba6:	6869      	ldr	r1, [r5, #4]
 8006ba8:	68aa      	ldr	r2, [r5, #8]
 8006baa:	68eb      	ldr	r3, [r5, #12]
 8006bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bae:	7c2b      	ldrb	r3, [r5, #16]
 8006bb0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ca8 <loadMenuTexts+0xa4c>)
 8006bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8006cac <loadMenuTexts+0xa50>)
 8006bb6:	4614      	mov	r4, r2
 8006bb8:	461d      	mov	r5, r3
 8006bba:	6828      	ldr	r0, [r5, #0]
 8006bbc:	6869      	ldr	r1, [r5, #4]
 8006bbe:	68aa      	ldr	r2, [r5, #8]
 8006bc0:	68eb      	ldr	r3, [r5, #12]
 8006bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc4:	7c2b      	ldrb	r3, [r5, #16]
 8006bc6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006bc8:	4a39      	ldr	r2, [pc, #228]	@ (8006cb0 <loadMenuTexts+0xa54>)
 8006bca:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb4 <loadMenuTexts+0xa58>)
 8006bcc:	4614      	mov	r4, r2
 8006bce:	461d      	mov	r5, r3
 8006bd0:	6828      	ldr	r0, [r5, #0]
 8006bd2:	6869      	ldr	r1, [r5, #4]
 8006bd4:	68aa      	ldr	r2, [r5, #8]
 8006bd6:	68eb      	ldr	r3, [r5, #12]
 8006bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bda:	7c2b      	ldrb	r3, [r5, #16]
 8006bdc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006bde:	4a36      	ldr	r2, [pc, #216]	@ (8006cb8 <loadMenuTexts+0xa5c>)
 8006be0:	4b36      	ldr	r3, [pc, #216]	@ (8006cbc <loadMenuTexts+0xa60>)
 8006be2:	4614      	mov	r4, r2
 8006be4:	461d      	mov	r5, r3
 8006be6:	6828      	ldr	r0, [r5, #0]
 8006be8:	6869      	ldr	r1, [r5, #4]
 8006bea:	68aa      	ldr	r2, [r5, #8]
 8006bec:	68eb      	ldr	r3, [r5, #12]
 8006bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf0:	7c2b      	ldrb	r3, [r5, #16]
 8006bf2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006bf4:	4a32      	ldr	r2, [pc, #200]	@ (8006cc0 <loadMenuTexts+0xa64>)
 8006bf6:	4b33      	ldr	r3, [pc, #204]	@ (8006cc4 <loadMenuTexts+0xa68>)
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	6828      	ldr	r0, [r5, #0]
 8006bfe:	6869      	ldr	r1, [r5, #4]
 8006c00:	68aa      	ldr	r2, [r5, #8]
 8006c02:	68eb      	ldr	r3, [r5, #12]
 8006c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c06:	7c2b      	ldrb	r3, [r5, #16]
 8006c08:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc8 <loadMenuTexts+0xa6c>)
 8006c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8006ccc <loadMenuTexts+0xa70>)
 8006c0e:	4614      	mov	r4, r2
 8006c10:	461d      	mov	r5, r3
 8006c12:	6828      	ldr	r0, [r5, #0]
 8006c14:	6869      	ldr	r1, [r5, #4]
 8006c16:	68aa      	ldr	r2, [r5, #8]
 8006c18:	68eb      	ldr	r3, [r5, #12]
 8006c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1c:	7c2b      	ldrb	r3, [r5, #16]
 8006c1e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006c20:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd0 <loadMenuTexts+0xa74>)
 8006c22:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd4 <loadMenuTexts+0xa78>)
 8006c24:	4614      	mov	r4, r2
 8006c26:	461d      	mov	r5, r3
 8006c28:	6828      	ldr	r0, [r5, #0]
 8006c2a:	6869      	ldr	r1, [r5, #4]
 8006c2c:	68aa      	ldr	r2, [r5, #8]
 8006c2e:	68eb      	ldr	r3, [r5, #12]
 8006c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c32:	7c2b      	ldrb	r3, [r5, #16]
 8006c34:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006c36:	4a28      	ldr	r2, [pc, #160]	@ (8006cd8 <loadMenuTexts+0xa7c>)
 8006c38:	4b28      	ldr	r3, [pc, #160]	@ (8006cdc <loadMenuTexts+0xa80>)
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	6828      	ldr	r0, [r5, #0]
 8006c40:	6869      	ldr	r1, [r5, #4]
 8006c42:	68aa      	ldr	r2, [r5, #8]
 8006c44:	68eb      	ldr	r3, [r5, #12]
 8006c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c48:	7c2b      	ldrb	r3, [r5, #16]
 8006c4a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006c4c:	4a24      	ldr	r2, [pc, #144]	@ (8006ce0 <loadMenuTexts+0xa84>)
 8006c4e:	4b25      	ldr	r3, [pc, #148]	@ (8006ce4 <loadMenuTexts+0xa88>)
 8006c50:	4614      	mov	r4, r2
 8006c52:	461d      	mov	r5, r3
 8006c54:	6828      	ldr	r0, [r5, #0]
 8006c56:	6869      	ldr	r1, [r5, #4]
 8006c58:	68aa      	ldr	r2, [r5, #8]
 8006c5a:	68eb      	ldr	r3, [r5, #12]
 8006c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5e:	7c2b      	ldrb	r3, [r5, #16]
 8006c60:	7023      	strb	r3, [r4, #0]
 8006c62:	f000 bd3a 	b.w	80076da <loadMenuTexts+0x147e>
 8006c66:	bf00      	nop
 8006c68:	20001d84 	.word	0x20001d84
 8006c6c:	20000cb8 	.word	0x20000cb8
 8006c70:	20001d98 	.word	0x20001d98
 8006c74:	20000d1c 	.word	0x20000d1c
 8006c78:	20001dac 	.word	0x20001dac
 8006c7c:	20000d30 	.word	0x20000d30
 8006c80:	20001dc0 	.word	0x20001dc0
 8006c84:	20000d6c 	.word	0x20000d6c
 8006c88:	20001dd4 	.word	0x20001dd4
 8006c8c:	20000d80 	.word	0x20000d80
 8006c90:	20001de8 	.word	0x20001de8
 8006c94:	20000dbc 	.word	0x20000dbc
 8006c98:	20001dfc 	.word	0x20001dfc
 8006c9c:	20000dd0 	.word	0x20000dd0
 8006ca0:	20001e10 	.word	0x20001e10
 8006ca4:	20000e0c 	.word	0x20000e0c
 8006ca8:	20001e24 	.word	0x20001e24
 8006cac:	20000e34 	.word	0x20000e34
 8006cb0:	20001e38 	.word	0x20001e38
 8006cb4:	20000e5c 	.word	0x20000e5c
 8006cb8:	20001e4c 	.word	0x20001e4c
 8006cbc:	20000e84 	.word	0x20000e84
 8006cc0:	20001e60 	.word	0x20001e60
 8006cc4:	20000eac 	.word	0x20000eac
 8006cc8:	20001e74 	.word	0x20001e74
 8006ccc:	20000ed4 	.word	0x20000ed4
 8006cd0:	20001e88 	.word	0x20001e88
 8006cd4:	20000efc 	.word	0x20000efc
 8006cd8:	20001e9c 	.word	0x20001e9c
 8006cdc:	20000f24 	.word	0x20000f24
 8006ce0:	20001eb0 	.word	0x20001eb0
 8006ce4:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006ce8:	4ac6      	ldr	r2, [pc, #792]	@ (8007004 <loadMenuTexts+0xda8>)
 8006cea:	4bc7      	ldr	r3, [pc, #796]	@ (8007008 <loadMenuTexts+0xdac>)
 8006cec:	4614      	mov	r4, r2
 8006cee:	461d      	mov	r5, r3
 8006cf0:	6828      	ldr	r0, [r5, #0]
 8006cf2:	6869      	ldr	r1, [r5, #4]
 8006cf4:	68aa      	ldr	r2, [r5, #8]
 8006cf6:	68eb      	ldr	r3, [r5, #12]
 8006cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cfa:	7c2b      	ldrb	r3, [r5, #16]
 8006cfc:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006cfe:	4ac3      	ldr	r2, [pc, #780]	@ (800700c <loadMenuTexts+0xdb0>)
 8006d00:	4bc3      	ldr	r3, [pc, #780]	@ (8007010 <loadMenuTexts+0xdb4>)
 8006d02:	4614      	mov	r4, r2
 8006d04:	461d      	mov	r5, r3
 8006d06:	6828      	ldr	r0, [r5, #0]
 8006d08:	6869      	ldr	r1, [r5, #4]
 8006d0a:	68aa      	ldr	r2, [r5, #8]
 8006d0c:	68eb      	ldr	r3, [r5, #12]
 8006d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d10:	7c2b      	ldrb	r3, [r5, #16]
 8006d12:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006d14:	4abf      	ldr	r2, [pc, #764]	@ (8007014 <loadMenuTexts+0xdb8>)
 8006d16:	4bc0      	ldr	r3, [pc, #768]	@ (8007018 <loadMenuTexts+0xdbc>)
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	6828      	ldr	r0, [r5, #0]
 8006d1e:	6869      	ldr	r1, [r5, #4]
 8006d20:	68aa      	ldr	r2, [r5, #8]
 8006d22:	68eb      	ldr	r3, [r5, #12]
 8006d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d26:	7c2b      	ldrb	r3, [r5, #16]
 8006d28:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006d2a:	4abc      	ldr	r2, [pc, #752]	@ (800701c <loadMenuTexts+0xdc0>)
 8006d2c:	4bbc      	ldr	r3, [pc, #752]	@ (8007020 <loadMenuTexts+0xdc4>)
 8006d2e:	4614      	mov	r4, r2
 8006d30:	461d      	mov	r5, r3
 8006d32:	6828      	ldr	r0, [r5, #0]
 8006d34:	6869      	ldr	r1, [r5, #4]
 8006d36:	68aa      	ldr	r2, [r5, #8]
 8006d38:	68eb      	ldr	r3, [r5, #12]
 8006d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3c:	7c2b      	ldrb	r3, [r5, #16]
 8006d3e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006d40:	4ab8      	ldr	r2, [pc, #736]	@ (8007024 <loadMenuTexts+0xdc8>)
 8006d42:	4bb9      	ldr	r3, [pc, #740]	@ (8007028 <loadMenuTexts+0xdcc>)
 8006d44:	4614      	mov	r4, r2
 8006d46:	461d      	mov	r5, r3
 8006d48:	6828      	ldr	r0, [r5, #0]
 8006d4a:	6869      	ldr	r1, [r5, #4]
 8006d4c:	68aa      	ldr	r2, [r5, #8]
 8006d4e:	68eb      	ldr	r3, [r5, #12]
 8006d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d52:	7c2b      	ldrb	r3, [r5, #16]
 8006d54:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006d56:	4ab5      	ldr	r2, [pc, #724]	@ (800702c <loadMenuTexts+0xdd0>)
 8006d58:	4bb5      	ldr	r3, [pc, #724]	@ (8007030 <loadMenuTexts+0xdd4>)
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	6828      	ldr	r0, [r5, #0]
 8006d60:	6869      	ldr	r1, [r5, #4]
 8006d62:	68aa      	ldr	r2, [r5, #8]
 8006d64:	68eb      	ldr	r3, [r5, #12]
 8006d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d68:	7c2b      	ldrb	r3, [r5, #16]
 8006d6a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006d6c:	4ab1      	ldr	r2, [pc, #708]	@ (8007034 <loadMenuTexts+0xdd8>)
 8006d6e:	4bb2      	ldr	r3, [pc, #712]	@ (8007038 <loadMenuTexts+0xddc>)
 8006d70:	4614      	mov	r4, r2
 8006d72:	461d      	mov	r5, r3
 8006d74:	6828      	ldr	r0, [r5, #0]
 8006d76:	6869      	ldr	r1, [r5, #4]
 8006d78:	68aa      	ldr	r2, [r5, #8]
 8006d7a:	68eb      	ldr	r3, [r5, #12]
 8006d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7e:	7c2b      	ldrb	r3, [r5, #16]
 8006d80:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006d82:	4aae      	ldr	r2, [pc, #696]	@ (800703c <loadMenuTexts+0xde0>)
 8006d84:	4bae      	ldr	r3, [pc, #696]	@ (8007040 <loadMenuTexts+0xde4>)
 8006d86:	4614      	mov	r4, r2
 8006d88:	461d      	mov	r5, r3
 8006d8a:	6828      	ldr	r0, [r5, #0]
 8006d8c:	6869      	ldr	r1, [r5, #4]
 8006d8e:	68aa      	ldr	r2, [r5, #8]
 8006d90:	68eb      	ldr	r3, [r5, #12]
 8006d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d94:	7c2b      	ldrb	r3, [r5, #16]
 8006d96:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006d98:	4aaa      	ldr	r2, [pc, #680]	@ (8007044 <loadMenuTexts+0xde8>)
 8006d9a:	4bab      	ldr	r3, [pc, #684]	@ (8007048 <loadMenuTexts+0xdec>)
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	6828      	ldr	r0, [r5, #0]
 8006da2:	6869      	ldr	r1, [r5, #4]
 8006da4:	68aa      	ldr	r2, [r5, #8]
 8006da6:	68eb      	ldr	r3, [r5, #12]
 8006da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006daa:	7c2b      	ldrb	r3, [r5, #16]
 8006dac:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006dae:	4aa7      	ldr	r2, [pc, #668]	@ (800704c <loadMenuTexts+0xdf0>)
 8006db0:	4ba7      	ldr	r3, [pc, #668]	@ (8007050 <loadMenuTexts+0xdf4>)
 8006db2:	4614      	mov	r4, r2
 8006db4:	461d      	mov	r5, r3
 8006db6:	6828      	ldr	r0, [r5, #0]
 8006db8:	6869      	ldr	r1, [r5, #4]
 8006dba:	68aa      	ldr	r2, [r5, #8]
 8006dbc:	68eb      	ldr	r3, [r5, #12]
 8006dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc0:	7c2b      	ldrb	r3, [r5, #16]
 8006dc2:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006dc4:	4aa3      	ldr	r2, [pc, #652]	@ (8007054 <loadMenuTexts+0xdf8>)
 8006dc6:	4ba4      	ldr	r3, [pc, #656]	@ (8007058 <loadMenuTexts+0xdfc>)
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	6828      	ldr	r0, [r5, #0]
 8006dce:	6869      	ldr	r1, [r5, #4]
 8006dd0:	68aa      	ldr	r2, [r5, #8]
 8006dd2:	68eb      	ldr	r3, [r5, #12]
 8006dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd6:	7c2b      	ldrb	r3, [r5, #16]
 8006dd8:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006dda:	4aa0      	ldr	r2, [pc, #640]	@ (800705c <loadMenuTexts+0xe00>)
 8006ddc:	4ba0      	ldr	r3, [pc, #640]	@ (8007060 <loadMenuTexts+0xe04>)
 8006dde:	4614      	mov	r4, r2
 8006de0:	461d      	mov	r5, r3
 8006de2:	6828      	ldr	r0, [r5, #0]
 8006de4:	6869      	ldr	r1, [r5, #4]
 8006de6:	68aa      	ldr	r2, [r5, #8]
 8006de8:	68eb      	ldr	r3, [r5, #12]
 8006dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dec:	7c2b      	ldrb	r3, [r5, #16]
 8006dee:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006df0:	4a9c      	ldr	r2, [pc, #624]	@ (8007064 <loadMenuTexts+0xe08>)
 8006df2:	4b9d      	ldr	r3, [pc, #628]	@ (8007068 <loadMenuTexts+0xe0c>)
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	6828      	ldr	r0, [r5, #0]
 8006dfa:	6869      	ldr	r1, [r5, #4]
 8006dfc:	68aa      	ldr	r2, [r5, #8]
 8006dfe:	68eb      	ldr	r3, [r5, #12]
 8006e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e02:	7c2b      	ldrb	r3, [r5, #16]
 8006e04:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006e06:	4a99      	ldr	r2, [pc, #612]	@ (800706c <loadMenuTexts+0xe10>)
 8006e08:	4b99      	ldr	r3, [pc, #612]	@ (8007070 <loadMenuTexts+0xe14>)
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	461d      	mov	r5, r3
 8006e0e:	6828      	ldr	r0, [r5, #0]
 8006e10:	6869      	ldr	r1, [r5, #4]
 8006e12:	68aa      	ldr	r2, [r5, #8]
 8006e14:	68eb      	ldr	r3, [r5, #12]
 8006e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e18:	7c2b      	ldrb	r3, [r5, #16]
 8006e1a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006e1c:	4a95      	ldr	r2, [pc, #596]	@ (8007074 <loadMenuTexts+0xe18>)
 8006e1e:	4b96      	ldr	r3, [pc, #600]	@ (8007078 <loadMenuTexts+0xe1c>)
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	6828      	ldr	r0, [r5, #0]
 8006e26:	6869      	ldr	r1, [r5, #4]
 8006e28:	68aa      	ldr	r2, [r5, #8]
 8006e2a:	68eb      	ldr	r3, [r5, #12]
 8006e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2e:	7c2b      	ldrb	r3, [r5, #16]
 8006e30:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006e32:	4a92      	ldr	r2, [pc, #584]	@ (800707c <loadMenuTexts+0xe20>)
 8006e34:	4b92      	ldr	r3, [pc, #584]	@ (8007080 <loadMenuTexts+0xe24>)
 8006e36:	4614      	mov	r4, r2
 8006e38:	461d      	mov	r5, r3
 8006e3a:	6828      	ldr	r0, [r5, #0]
 8006e3c:	6869      	ldr	r1, [r5, #4]
 8006e3e:	68aa      	ldr	r2, [r5, #8]
 8006e40:	68eb      	ldr	r3, [r5, #12]
 8006e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e44:	7c2b      	ldrb	r3, [r5, #16]
 8006e46:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006e48:	4a8e      	ldr	r2, [pc, #568]	@ (8007084 <loadMenuTexts+0xe28>)
 8006e4a:	4b8f      	ldr	r3, [pc, #572]	@ (8007088 <loadMenuTexts+0xe2c>)
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	461d      	mov	r5, r3
 8006e50:	6828      	ldr	r0, [r5, #0]
 8006e52:	6869      	ldr	r1, [r5, #4]
 8006e54:	68aa      	ldr	r2, [r5, #8]
 8006e56:	68eb      	ldr	r3, [r5, #12]
 8006e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5a:	7c2b      	ldrb	r3, [r5, #16]
 8006e5c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006e5e:	4a8b      	ldr	r2, [pc, #556]	@ (800708c <loadMenuTexts+0xe30>)
 8006e60:	4b8b      	ldr	r3, [pc, #556]	@ (8007090 <loadMenuTexts+0xe34>)
 8006e62:	4614      	mov	r4, r2
 8006e64:	461d      	mov	r5, r3
 8006e66:	6828      	ldr	r0, [r5, #0]
 8006e68:	6869      	ldr	r1, [r5, #4]
 8006e6a:	68aa      	ldr	r2, [r5, #8]
 8006e6c:	68eb      	ldr	r3, [r5, #12]
 8006e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e70:	7c2b      	ldrb	r3, [r5, #16]
 8006e72:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006e74:	4a87      	ldr	r2, [pc, #540]	@ (8007094 <loadMenuTexts+0xe38>)
 8006e76:	4b88      	ldr	r3, [pc, #544]	@ (8007098 <loadMenuTexts+0xe3c>)
 8006e78:	4614      	mov	r4, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	6828      	ldr	r0, [r5, #0]
 8006e7e:	6869      	ldr	r1, [r5, #4]
 8006e80:	68aa      	ldr	r2, [r5, #8]
 8006e82:	68eb      	ldr	r3, [r5, #12]
 8006e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e86:	7c2b      	ldrb	r3, [r5, #16]
 8006e88:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006e8a:	4a84      	ldr	r2, [pc, #528]	@ (800709c <loadMenuTexts+0xe40>)
 8006e8c:	4b84      	ldr	r3, [pc, #528]	@ (80070a0 <loadMenuTexts+0xe44>)
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	6828      	ldr	r0, [r5, #0]
 8006e94:	6869      	ldr	r1, [r5, #4]
 8006e96:	68aa      	ldr	r2, [r5, #8]
 8006e98:	68eb      	ldr	r3, [r5, #12]
 8006e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e9c:	7c2b      	ldrb	r3, [r5, #16]
 8006e9e:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006ea0:	4a80      	ldr	r2, [pc, #512]	@ (80070a4 <loadMenuTexts+0xe48>)
 8006ea2:	4b81      	ldr	r3, [pc, #516]	@ (80070a8 <loadMenuTexts+0xe4c>)
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	6828      	ldr	r0, [r5, #0]
 8006eaa:	6869      	ldr	r1, [r5, #4]
 8006eac:	68aa      	ldr	r2, [r5, #8]
 8006eae:	68eb      	ldr	r3, [r5, #12]
 8006eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb2:	7c2b      	ldrb	r3, [r5, #16]
 8006eb4:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80070ac <loadMenuTexts+0xe50>)
 8006eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80070b0 <loadMenuTexts+0xe54>)
 8006eba:	4614      	mov	r4, r2
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	6828      	ldr	r0, [r5, #0]
 8006ec0:	6869      	ldr	r1, [r5, #4]
 8006ec2:	68aa      	ldr	r2, [r5, #8]
 8006ec4:	68eb      	ldr	r3, [r5, #12]
 8006ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec8:	7c2b      	ldrb	r3, [r5, #16]
 8006eca:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006ecc:	4a79      	ldr	r2, [pc, #484]	@ (80070b4 <loadMenuTexts+0xe58>)
 8006ece:	4b7a      	ldr	r3, [pc, #488]	@ (80070b8 <loadMenuTexts+0xe5c>)
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	6828      	ldr	r0, [r5, #0]
 8006ed6:	6869      	ldr	r1, [r5, #4]
 8006ed8:	68aa      	ldr	r2, [r5, #8]
 8006eda:	68eb      	ldr	r3, [r5, #12]
 8006edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ede:	7c2b      	ldrb	r3, [r5, #16]
 8006ee0:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006ee2:	4a76      	ldr	r2, [pc, #472]	@ (80070bc <loadMenuTexts+0xe60>)
 8006ee4:	4b76      	ldr	r3, [pc, #472]	@ (80070c0 <loadMenuTexts+0xe64>)
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	461d      	mov	r5, r3
 8006eea:	6828      	ldr	r0, [r5, #0]
 8006eec:	6869      	ldr	r1, [r5, #4]
 8006eee:	68aa      	ldr	r2, [r5, #8]
 8006ef0:	68eb      	ldr	r3, [r5, #12]
 8006ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef4:	7c2b      	ldrb	r3, [r5, #16]
 8006ef6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006ef8:	4a72      	ldr	r2, [pc, #456]	@ (80070c4 <loadMenuTexts+0xe68>)
 8006efa:	4b73      	ldr	r3, [pc, #460]	@ (80070c8 <loadMenuTexts+0xe6c>)
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	6828      	ldr	r0, [r5, #0]
 8006f02:	6869      	ldr	r1, [r5, #4]
 8006f04:	68aa      	ldr	r2, [r5, #8]
 8006f06:	68eb      	ldr	r3, [r5, #12]
 8006f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f0a:	7c2b      	ldrb	r3, [r5, #16]
 8006f0c:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006f0e:	4a6f      	ldr	r2, [pc, #444]	@ (80070cc <loadMenuTexts+0xe70>)
 8006f10:	4b6f      	ldr	r3, [pc, #444]	@ (80070d0 <loadMenuTexts+0xe74>)
 8006f12:	4614      	mov	r4, r2
 8006f14:	461d      	mov	r5, r3
 8006f16:	6828      	ldr	r0, [r5, #0]
 8006f18:	6869      	ldr	r1, [r5, #4]
 8006f1a:	68aa      	ldr	r2, [r5, #8]
 8006f1c:	68eb      	ldr	r3, [r5, #12]
 8006f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f20:	7c2b      	ldrb	r3, [r5, #16]
 8006f22:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006f24:	4a6b      	ldr	r2, [pc, #428]	@ (80070d4 <loadMenuTexts+0xe78>)
 8006f26:	4b6c      	ldr	r3, [pc, #432]	@ (80070d8 <loadMenuTexts+0xe7c>)
 8006f28:	4614      	mov	r4, r2
 8006f2a:	461d      	mov	r5, r3
 8006f2c:	6828      	ldr	r0, [r5, #0]
 8006f2e:	6869      	ldr	r1, [r5, #4]
 8006f30:	68aa      	ldr	r2, [r5, #8]
 8006f32:	68eb      	ldr	r3, [r5, #12]
 8006f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f36:	7c2b      	ldrb	r3, [r5, #16]
 8006f38:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006f3a:	4a68      	ldr	r2, [pc, #416]	@ (80070dc <loadMenuTexts+0xe80>)
 8006f3c:	4b68      	ldr	r3, [pc, #416]	@ (80070e0 <loadMenuTexts+0xe84>)
 8006f3e:	4614      	mov	r4, r2
 8006f40:	461d      	mov	r5, r3
 8006f42:	6828      	ldr	r0, [r5, #0]
 8006f44:	6869      	ldr	r1, [r5, #4]
 8006f46:	68aa      	ldr	r2, [r5, #8]
 8006f48:	68eb      	ldr	r3, [r5, #12]
 8006f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f4c:	7c2b      	ldrb	r3, [r5, #16]
 8006f4e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006f50:	4a64      	ldr	r2, [pc, #400]	@ (80070e4 <loadMenuTexts+0xe88>)
 8006f52:	4b65      	ldr	r3, [pc, #404]	@ (80070e8 <loadMenuTexts+0xe8c>)
 8006f54:	4614      	mov	r4, r2
 8006f56:	461d      	mov	r5, r3
 8006f58:	6828      	ldr	r0, [r5, #0]
 8006f5a:	6869      	ldr	r1, [r5, #4]
 8006f5c:	68aa      	ldr	r2, [r5, #8]
 8006f5e:	68eb      	ldr	r3, [r5, #12]
 8006f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f62:	7c2b      	ldrb	r3, [r5, #16]
 8006f64:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006f66:	4a61      	ldr	r2, [pc, #388]	@ (80070ec <loadMenuTexts+0xe90>)
 8006f68:	4b61      	ldr	r3, [pc, #388]	@ (80070f0 <loadMenuTexts+0xe94>)
 8006f6a:	4614      	mov	r4, r2
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	6828      	ldr	r0, [r5, #0]
 8006f70:	6869      	ldr	r1, [r5, #4]
 8006f72:	68aa      	ldr	r2, [r5, #8]
 8006f74:	68eb      	ldr	r3, [r5, #12]
 8006f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f78:	7c2b      	ldrb	r3, [r5, #16]
 8006f7a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80070f4 <loadMenuTexts+0xe98>)
 8006f7e:	4b5e      	ldr	r3, [pc, #376]	@ (80070f8 <loadMenuTexts+0xe9c>)
 8006f80:	4614      	mov	r4, r2
 8006f82:	461d      	mov	r5, r3
 8006f84:	6828      	ldr	r0, [r5, #0]
 8006f86:	6869      	ldr	r1, [r5, #4]
 8006f88:	68aa      	ldr	r2, [r5, #8]
 8006f8a:	68eb      	ldr	r3, [r5, #12]
 8006f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8e:	7c2b      	ldrb	r3, [r5, #16]
 8006f90:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006f92:	4a5a      	ldr	r2, [pc, #360]	@ (80070fc <loadMenuTexts+0xea0>)
 8006f94:	4b5a      	ldr	r3, [pc, #360]	@ (8007100 <loadMenuTexts+0xea4>)
 8006f96:	4614      	mov	r4, r2
 8006f98:	461d      	mov	r5, r3
 8006f9a:	6828      	ldr	r0, [r5, #0]
 8006f9c:	6869      	ldr	r1, [r5, #4]
 8006f9e:	68aa      	ldr	r2, [r5, #8]
 8006fa0:	68eb      	ldr	r3, [r5, #12]
 8006fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa4:	7c2b      	ldrb	r3, [r5, #16]
 8006fa6:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006fa8:	4a56      	ldr	r2, [pc, #344]	@ (8007104 <loadMenuTexts+0xea8>)
 8006faa:	4b57      	ldr	r3, [pc, #348]	@ (8007108 <loadMenuTexts+0xeac>)
 8006fac:	4614      	mov	r4, r2
 8006fae:	461d      	mov	r5, r3
 8006fb0:	6828      	ldr	r0, [r5, #0]
 8006fb2:	6869      	ldr	r1, [r5, #4]
 8006fb4:	68aa      	ldr	r2, [r5, #8]
 8006fb6:	68eb      	ldr	r3, [r5, #12]
 8006fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fba:	7c2b      	ldrb	r3, [r5, #16]
 8006fbc:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006fbe:	4a53      	ldr	r2, [pc, #332]	@ (800710c <loadMenuTexts+0xeb0>)
 8006fc0:	4b53      	ldr	r3, [pc, #332]	@ (8007110 <loadMenuTexts+0xeb4>)
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	461d      	mov	r5, r3
 8006fc6:	6828      	ldr	r0, [r5, #0]
 8006fc8:	6869      	ldr	r1, [r5, #4]
 8006fca:	68aa      	ldr	r2, [r5, #8]
 8006fcc:	68eb      	ldr	r3, [r5, #12]
 8006fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd0:	7c2b      	ldrb	r3, [r5, #16]
 8006fd2:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8007114 <loadMenuTexts+0xeb8>)
 8006fd6:	4b50      	ldr	r3, [pc, #320]	@ (8007118 <loadMenuTexts+0xebc>)
 8006fd8:	4614      	mov	r4, r2
 8006fda:	461d      	mov	r5, r3
 8006fdc:	6828      	ldr	r0, [r5, #0]
 8006fde:	6869      	ldr	r1, [r5, #4]
 8006fe0:	68aa      	ldr	r2, [r5, #8]
 8006fe2:	68eb      	ldr	r3, [r5, #12]
 8006fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe6:	7c2b      	ldrb	r3, [r5, #16]
 8006fe8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006fea:	4a4c      	ldr	r2, [pc, #304]	@ (800711c <loadMenuTexts+0xec0>)
 8006fec:	4b4c      	ldr	r3, [pc, #304]	@ (8007120 <loadMenuTexts+0xec4>)
 8006fee:	4614      	mov	r4, r2
 8006ff0:	461d      	mov	r5, r3
 8006ff2:	6828      	ldr	r0, [r5, #0]
 8006ff4:	6869      	ldr	r1, [r5, #4]
 8006ff6:	68aa      	ldr	r2, [r5, #8]
 8006ff8:	68eb      	ldr	r3, [r5, #12]
 8006ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ffc:	7c2b      	ldrb	r3, [r5, #16]
 8006ffe:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8007000:	4a48      	ldr	r2, [pc, #288]	@ (8007124 <loadMenuTexts+0xec8>)
 8007002:	e091      	b.n	8007128 <loadMenuTexts+0xecc>
 8007004:	200017d0 	.word	0x200017d0
 8007008:	20000704 	.word	0x20000704
 800700c:	200017e4 	.word	0x200017e4
 8007010:	20000718 	.word	0x20000718
 8007014:	200017f8 	.word	0x200017f8
 8007018:	2000072c 	.word	0x2000072c
 800701c:	2000180c 	.word	0x2000180c
 8007020:	20000740 	.word	0x20000740
 8007024:	20001820 	.word	0x20001820
 8007028:	20000754 	.word	0x20000754
 800702c:	20001834 	.word	0x20001834
 8007030:	20000768 	.word	0x20000768
 8007034:	20001848 	.word	0x20001848
 8007038:	2000077c 	.word	0x2000077c
 800703c:	2000185c 	.word	0x2000185c
 8007040:	20000790 	.word	0x20000790
 8007044:	20001870 	.word	0x20001870
 8007048:	200007a4 	.word	0x200007a4
 800704c:	20001884 	.word	0x20001884
 8007050:	200007b8 	.word	0x200007b8
 8007054:	20001898 	.word	0x20001898
 8007058:	200007cc 	.word	0x200007cc
 800705c:	200018ac 	.word	0x200018ac
 8007060:	200007e0 	.word	0x200007e0
 8007064:	200018c0 	.word	0x200018c0
 8007068:	200007f4 	.word	0x200007f4
 800706c:	200018d4 	.word	0x200018d4
 8007070:	20000808 	.word	0x20000808
 8007074:	200018e8 	.word	0x200018e8
 8007078:	2000081c 	.word	0x2000081c
 800707c:	200018fc 	.word	0x200018fc
 8007080:	20000830 	.word	0x20000830
 8007084:	20001910 	.word	0x20001910
 8007088:	20000844 	.word	0x20000844
 800708c:	20001924 	.word	0x20001924
 8007090:	20000858 	.word	0x20000858
 8007094:	20001938 	.word	0x20001938
 8007098:	2000086c 	.word	0x2000086c
 800709c:	2000194c 	.word	0x2000194c
 80070a0:	20000880 	.word	0x20000880
 80070a4:	20001960 	.word	0x20001960
 80070a8:	20000894 	.word	0x20000894
 80070ac:	20001974 	.word	0x20001974
 80070b0:	200008a8 	.word	0x200008a8
 80070b4:	20001988 	.word	0x20001988
 80070b8:	200008bc 	.word	0x200008bc
 80070bc:	2000199c 	.word	0x2000199c
 80070c0:	200008d0 	.word	0x200008d0
 80070c4:	200019b0 	.word	0x200019b0
 80070c8:	200008e4 	.word	0x200008e4
 80070cc:	200019c4 	.word	0x200019c4
 80070d0:	200008f8 	.word	0x200008f8
 80070d4:	200019d8 	.word	0x200019d8
 80070d8:	2000090c 	.word	0x2000090c
 80070dc:	200019ec 	.word	0x200019ec
 80070e0:	20000920 	.word	0x20000920
 80070e4:	20001a00 	.word	0x20001a00
 80070e8:	20000934 	.word	0x20000934
 80070ec:	20001a14 	.word	0x20001a14
 80070f0:	20000948 	.word	0x20000948
 80070f4:	20001a28 	.word	0x20001a28
 80070f8:	2000095c 	.word	0x2000095c
 80070fc:	20001a3c 	.word	0x20001a3c
 8007100:	20000970 	.word	0x20000970
 8007104:	20001a50 	.word	0x20001a50
 8007108:	20000984 	.word	0x20000984
 800710c:	20001a64 	.word	0x20001a64
 8007110:	20000998 	.word	0x20000998
 8007114:	20001a78 	.word	0x20001a78
 8007118:	200009ac 	.word	0x200009ac
 800711c:	20001a8c 	.word	0x20001a8c
 8007120:	200009c0 	.word	0x200009c0
 8007124:	20001aa0 	.word	0x20001aa0
 8007128:	4bc7      	ldr	r3, [pc, #796]	@ (8007448 <loadMenuTexts+0x11ec>)
 800712a:	4614      	mov	r4, r2
 800712c:	461d      	mov	r5, r3
 800712e:	6828      	ldr	r0, [r5, #0]
 8007130:	6869      	ldr	r1, [r5, #4]
 8007132:	68aa      	ldr	r2, [r5, #8]
 8007134:	68eb      	ldr	r3, [r5, #12]
 8007136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007138:	7c2b      	ldrb	r3, [r5, #16]
 800713a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 800713c:	4ac3      	ldr	r2, [pc, #780]	@ (800744c <loadMenuTexts+0x11f0>)
 800713e:	4bc4      	ldr	r3, [pc, #784]	@ (8007450 <loadMenuTexts+0x11f4>)
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	6828      	ldr	r0, [r5, #0]
 8007146:	6869      	ldr	r1, [r5, #4]
 8007148:	68aa      	ldr	r2, [r5, #8]
 800714a:	68eb      	ldr	r3, [r5, #12]
 800714c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714e:	7c2b      	ldrb	r3, [r5, #16]
 8007150:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007152:	4ac0      	ldr	r2, [pc, #768]	@ (8007454 <loadMenuTexts+0x11f8>)
 8007154:	4bc0      	ldr	r3, [pc, #768]	@ (8007458 <loadMenuTexts+0x11fc>)
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	6828      	ldr	r0, [r5, #0]
 800715c:	6869      	ldr	r1, [r5, #4]
 800715e:	68aa      	ldr	r2, [r5, #8]
 8007160:	68eb      	ldr	r3, [r5, #12]
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	7c2b      	ldrb	r3, [r5, #16]
 8007166:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007168:	4abc      	ldr	r2, [pc, #752]	@ (800745c <loadMenuTexts+0x1200>)
 800716a:	4bbd      	ldr	r3, [pc, #756]	@ (8007460 <loadMenuTexts+0x1204>)
 800716c:	4614      	mov	r4, r2
 800716e:	461d      	mov	r5, r3
 8007170:	6828      	ldr	r0, [r5, #0]
 8007172:	6869      	ldr	r1, [r5, #4]
 8007174:	68aa      	ldr	r2, [r5, #8]
 8007176:	68eb      	ldr	r3, [r5, #12]
 8007178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800717a:	7c2b      	ldrb	r3, [r5, #16]
 800717c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800717e:	4ab9      	ldr	r2, [pc, #740]	@ (8007464 <loadMenuTexts+0x1208>)
 8007180:	4bb9      	ldr	r3, [pc, #740]	@ (8007468 <loadMenuTexts+0x120c>)
 8007182:	4614      	mov	r4, r2
 8007184:	461d      	mov	r5, r3
 8007186:	6828      	ldr	r0, [r5, #0]
 8007188:	6869      	ldr	r1, [r5, #4]
 800718a:	68aa      	ldr	r2, [r5, #8]
 800718c:	68eb      	ldr	r3, [r5, #12]
 800718e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007190:	7c2b      	ldrb	r3, [r5, #16]
 8007192:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007194:	4ab5      	ldr	r2, [pc, #724]	@ (800746c <loadMenuTexts+0x1210>)
 8007196:	4bb6      	ldr	r3, [pc, #728]	@ (8007470 <loadMenuTexts+0x1214>)
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	6828      	ldr	r0, [r5, #0]
 800719e:	6869      	ldr	r1, [r5, #4]
 80071a0:	68aa      	ldr	r2, [r5, #8]
 80071a2:	68eb      	ldr	r3, [r5, #12]
 80071a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a6:	7c2b      	ldrb	r3, [r5, #16]
 80071a8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80071aa:	4ab2      	ldr	r2, [pc, #712]	@ (8007474 <loadMenuTexts+0x1218>)
 80071ac:	4bb2      	ldr	r3, [pc, #712]	@ (8007478 <loadMenuTexts+0x121c>)
 80071ae:	4614      	mov	r4, r2
 80071b0:	461d      	mov	r5, r3
 80071b2:	6828      	ldr	r0, [r5, #0]
 80071b4:	6869      	ldr	r1, [r5, #4]
 80071b6:	68aa      	ldr	r2, [r5, #8]
 80071b8:	68eb      	ldr	r3, [r5, #12]
 80071ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071bc:	7c2b      	ldrb	r3, [r5, #16]
 80071be:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80071c0:	4aae      	ldr	r2, [pc, #696]	@ (800747c <loadMenuTexts+0x1220>)
 80071c2:	4baf      	ldr	r3, [pc, #700]	@ (8007480 <loadMenuTexts+0x1224>)
 80071c4:	4614      	mov	r4, r2
 80071c6:	461d      	mov	r5, r3
 80071c8:	6828      	ldr	r0, [r5, #0]
 80071ca:	6869      	ldr	r1, [r5, #4]
 80071cc:	68aa      	ldr	r2, [r5, #8]
 80071ce:	68eb      	ldr	r3, [r5, #12]
 80071d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d2:	7c2b      	ldrb	r3, [r5, #16]
 80071d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80071d6:	4aab      	ldr	r2, [pc, #684]	@ (8007484 <loadMenuTexts+0x1228>)
 80071d8:	4bab      	ldr	r3, [pc, #684]	@ (8007488 <loadMenuTexts+0x122c>)
 80071da:	4614      	mov	r4, r2
 80071dc:	461d      	mov	r5, r3
 80071de:	6828      	ldr	r0, [r5, #0]
 80071e0:	6869      	ldr	r1, [r5, #4]
 80071e2:	68aa      	ldr	r2, [r5, #8]
 80071e4:	68eb      	ldr	r3, [r5, #12]
 80071e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e8:	7c2b      	ldrb	r3, [r5, #16]
 80071ea:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80071ec:	4aa7      	ldr	r2, [pc, #668]	@ (800748c <loadMenuTexts+0x1230>)
 80071ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007490 <loadMenuTexts+0x1234>)
 80071f0:	4614      	mov	r4, r2
 80071f2:	461d      	mov	r5, r3
 80071f4:	6828      	ldr	r0, [r5, #0]
 80071f6:	6869      	ldr	r1, [r5, #4]
 80071f8:	68aa      	ldr	r2, [r5, #8]
 80071fa:	68eb      	ldr	r3, [r5, #12]
 80071fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fe:	7c2b      	ldrb	r3, [r5, #16]
 8007200:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8007202:	4aa4      	ldr	r2, [pc, #656]	@ (8007494 <loadMenuTexts+0x1238>)
 8007204:	4ba4      	ldr	r3, [pc, #656]	@ (8007498 <loadMenuTexts+0x123c>)
 8007206:	4614      	mov	r4, r2
 8007208:	461d      	mov	r5, r3
 800720a:	6828      	ldr	r0, [r5, #0]
 800720c:	6869      	ldr	r1, [r5, #4]
 800720e:	68aa      	ldr	r2, [r5, #8]
 8007210:	68eb      	ldr	r3, [r5, #12]
 8007212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007214:	7c2b      	ldrb	r3, [r5, #16]
 8007216:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8007218:	4aa0      	ldr	r2, [pc, #640]	@ (800749c <loadMenuTexts+0x1240>)
 800721a:	4ba1      	ldr	r3, [pc, #644]	@ (80074a0 <loadMenuTexts+0x1244>)
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	6828      	ldr	r0, [r5, #0]
 8007222:	6869      	ldr	r1, [r5, #4]
 8007224:	68aa      	ldr	r2, [r5, #8]
 8007226:	68eb      	ldr	r3, [r5, #12]
 8007228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722a:	7c2b      	ldrb	r3, [r5, #16]
 800722c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 800722e:	4a9d      	ldr	r2, [pc, #628]	@ (80074a4 <loadMenuTexts+0x1248>)
 8007230:	4b9d      	ldr	r3, [pc, #628]	@ (80074a8 <loadMenuTexts+0x124c>)
 8007232:	4614      	mov	r4, r2
 8007234:	461d      	mov	r5, r3
 8007236:	6828      	ldr	r0, [r5, #0]
 8007238:	6869      	ldr	r1, [r5, #4]
 800723a:	68aa      	ldr	r2, [r5, #8]
 800723c:	68eb      	ldr	r3, [r5, #12]
 800723e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007240:	7c2b      	ldrb	r3, [r5, #16]
 8007242:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007244:	4a99      	ldr	r2, [pc, #612]	@ (80074ac <loadMenuTexts+0x1250>)
 8007246:	4b9a      	ldr	r3, [pc, #616]	@ (80074b0 <loadMenuTexts+0x1254>)
 8007248:	4614      	mov	r4, r2
 800724a:	461d      	mov	r5, r3
 800724c:	6828      	ldr	r0, [r5, #0]
 800724e:	6869      	ldr	r1, [r5, #4]
 8007250:	68aa      	ldr	r2, [r5, #8]
 8007252:	68eb      	ldr	r3, [r5, #12]
 8007254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007256:	7c2b      	ldrb	r3, [r5, #16]
 8007258:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800725a:	4a96      	ldr	r2, [pc, #600]	@ (80074b4 <loadMenuTexts+0x1258>)
 800725c:	4b96      	ldr	r3, [pc, #600]	@ (80074b8 <loadMenuTexts+0x125c>)
 800725e:	4614      	mov	r4, r2
 8007260:	461d      	mov	r5, r3
 8007262:	6828      	ldr	r0, [r5, #0]
 8007264:	6869      	ldr	r1, [r5, #4]
 8007266:	68aa      	ldr	r2, [r5, #8]
 8007268:	68eb      	ldr	r3, [r5, #12]
 800726a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726c:	7c2b      	ldrb	r3, [r5, #16]
 800726e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007270:	4a92      	ldr	r2, [pc, #584]	@ (80074bc <loadMenuTexts+0x1260>)
 8007272:	4b93      	ldr	r3, [pc, #588]	@ (80074c0 <loadMenuTexts+0x1264>)
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	6828      	ldr	r0, [r5, #0]
 800727a:	6869      	ldr	r1, [r5, #4]
 800727c:	68aa      	ldr	r2, [r5, #8]
 800727e:	68eb      	ldr	r3, [r5, #12]
 8007280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007282:	7c2b      	ldrb	r3, [r5, #16]
 8007284:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007286:	4a8f      	ldr	r2, [pc, #572]	@ (80074c4 <loadMenuTexts+0x1268>)
 8007288:	4b8f      	ldr	r3, [pc, #572]	@ (80074c8 <loadMenuTexts+0x126c>)
 800728a:	4614      	mov	r4, r2
 800728c:	461d      	mov	r5, r3
 800728e:	6828      	ldr	r0, [r5, #0]
 8007290:	6869      	ldr	r1, [r5, #4]
 8007292:	68aa      	ldr	r2, [r5, #8]
 8007294:	68eb      	ldr	r3, [r5, #12]
 8007296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007298:	7c2b      	ldrb	r3, [r5, #16]
 800729a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 800729c:	4a8b      	ldr	r2, [pc, #556]	@ (80074cc <loadMenuTexts+0x1270>)
 800729e:	4b8c      	ldr	r3, [pc, #560]	@ (80074d0 <loadMenuTexts+0x1274>)
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	6828      	ldr	r0, [r5, #0]
 80072a6:	6869      	ldr	r1, [r5, #4]
 80072a8:	68aa      	ldr	r2, [r5, #8]
 80072aa:	68eb      	ldr	r3, [r5, #12]
 80072ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ae:	7c2b      	ldrb	r3, [r5, #16]
 80072b0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 80072b2:	4a88      	ldr	r2, [pc, #544]	@ (80074d4 <loadMenuTexts+0x1278>)
 80072b4:	4b88      	ldr	r3, [pc, #544]	@ (80074d8 <loadMenuTexts+0x127c>)
 80072b6:	4614      	mov	r4, r2
 80072b8:	461d      	mov	r5, r3
 80072ba:	6828      	ldr	r0, [r5, #0]
 80072bc:	6869      	ldr	r1, [r5, #4]
 80072be:	68aa      	ldr	r2, [r5, #8]
 80072c0:	68eb      	ldr	r3, [r5, #12]
 80072c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c4:	7c2b      	ldrb	r3, [r5, #16]
 80072c6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80072c8:	4a84      	ldr	r2, [pc, #528]	@ (80074dc <loadMenuTexts+0x1280>)
 80072ca:	4b85      	ldr	r3, [pc, #532]	@ (80074e0 <loadMenuTexts+0x1284>)
 80072cc:	4614      	mov	r4, r2
 80072ce:	461d      	mov	r5, r3
 80072d0:	6828      	ldr	r0, [r5, #0]
 80072d2:	6869      	ldr	r1, [r5, #4]
 80072d4:	68aa      	ldr	r2, [r5, #8]
 80072d6:	68eb      	ldr	r3, [r5, #12]
 80072d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072da:	7c2b      	ldrb	r3, [r5, #16]
 80072dc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80072de:	4a81      	ldr	r2, [pc, #516]	@ (80074e4 <loadMenuTexts+0x1288>)
 80072e0:	4b81      	ldr	r3, [pc, #516]	@ (80074e8 <loadMenuTexts+0x128c>)
 80072e2:	4614      	mov	r4, r2
 80072e4:	461d      	mov	r5, r3
 80072e6:	6828      	ldr	r0, [r5, #0]
 80072e8:	6869      	ldr	r1, [r5, #4]
 80072ea:	68aa      	ldr	r2, [r5, #8]
 80072ec:	68eb      	ldr	r3, [r5, #12]
 80072ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f0:	7c2b      	ldrb	r3, [r5, #16]
 80072f2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80072f4:	4a7d      	ldr	r2, [pc, #500]	@ (80074ec <loadMenuTexts+0x1290>)
 80072f6:	4b7e      	ldr	r3, [pc, #504]	@ (80074f0 <loadMenuTexts+0x1294>)
 80072f8:	4614      	mov	r4, r2
 80072fa:	461d      	mov	r5, r3
 80072fc:	6828      	ldr	r0, [r5, #0]
 80072fe:	6869      	ldr	r1, [r5, #4]
 8007300:	68aa      	ldr	r2, [r5, #8]
 8007302:	68eb      	ldr	r3, [r5, #12]
 8007304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007306:	7c2b      	ldrb	r3, [r5, #16]
 8007308:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 800730a:	4a7a      	ldr	r2, [pc, #488]	@ (80074f4 <loadMenuTexts+0x1298>)
 800730c:	4b7a      	ldr	r3, [pc, #488]	@ (80074f8 <loadMenuTexts+0x129c>)
 800730e:	4614      	mov	r4, r2
 8007310:	461d      	mov	r5, r3
 8007312:	6828      	ldr	r0, [r5, #0]
 8007314:	6869      	ldr	r1, [r5, #4]
 8007316:	68aa      	ldr	r2, [r5, #8]
 8007318:	68eb      	ldr	r3, [r5, #12]
 800731a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731c:	7c2b      	ldrb	r3, [r5, #16]
 800731e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007320:	4a76      	ldr	r2, [pc, #472]	@ (80074fc <loadMenuTexts+0x12a0>)
 8007322:	4b77      	ldr	r3, [pc, #476]	@ (8007500 <loadMenuTexts+0x12a4>)
 8007324:	4614      	mov	r4, r2
 8007326:	461d      	mov	r5, r3
 8007328:	6828      	ldr	r0, [r5, #0]
 800732a:	6869      	ldr	r1, [r5, #4]
 800732c:	68aa      	ldr	r2, [r5, #8]
 800732e:	68eb      	ldr	r3, [r5, #12]
 8007330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007332:	7c2b      	ldrb	r3, [r5, #16]
 8007334:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007336:	4a73      	ldr	r2, [pc, #460]	@ (8007504 <loadMenuTexts+0x12a8>)
 8007338:	4b73      	ldr	r3, [pc, #460]	@ (8007508 <loadMenuTexts+0x12ac>)
 800733a:	4614      	mov	r4, r2
 800733c:	461d      	mov	r5, r3
 800733e:	6828      	ldr	r0, [r5, #0]
 8007340:	6869      	ldr	r1, [r5, #4]
 8007342:	68aa      	ldr	r2, [r5, #8]
 8007344:	68eb      	ldr	r3, [r5, #12]
 8007346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007348:	7c2b      	ldrb	r3, [r5, #16]
 800734a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 800734c:	4a6f      	ldr	r2, [pc, #444]	@ (800750c <loadMenuTexts+0x12b0>)
 800734e:	4b70      	ldr	r3, [pc, #448]	@ (8007510 <loadMenuTexts+0x12b4>)
 8007350:	4614      	mov	r4, r2
 8007352:	461d      	mov	r5, r3
 8007354:	6828      	ldr	r0, [r5, #0]
 8007356:	6869      	ldr	r1, [r5, #4]
 8007358:	68aa      	ldr	r2, [r5, #8]
 800735a:	68eb      	ldr	r3, [r5, #12]
 800735c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735e:	7c2b      	ldrb	r3, [r5, #16]
 8007360:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007362:	4a6c      	ldr	r2, [pc, #432]	@ (8007514 <loadMenuTexts+0x12b8>)
 8007364:	4b6c      	ldr	r3, [pc, #432]	@ (8007518 <loadMenuTexts+0x12bc>)
 8007366:	4614      	mov	r4, r2
 8007368:	461d      	mov	r5, r3
 800736a:	6828      	ldr	r0, [r5, #0]
 800736c:	6869      	ldr	r1, [r5, #4]
 800736e:	68aa      	ldr	r2, [r5, #8]
 8007370:	68eb      	ldr	r3, [r5, #12]
 8007372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007374:	7c2b      	ldrb	r3, [r5, #16]
 8007376:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007378:	4a68      	ldr	r2, [pc, #416]	@ (800751c <loadMenuTexts+0x12c0>)
 800737a:	4b69      	ldr	r3, [pc, #420]	@ (8007520 <loadMenuTexts+0x12c4>)
 800737c:	4614      	mov	r4, r2
 800737e:	461d      	mov	r5, r3
 8007380:	6828      	ldr	r0, [r5, #0]
 8007382:	6869      	ldr	r1, [r5, #4]
 8007384:	68aa      	ldr	r2, [r5, #8]
 8007386:	68eb      	ldr	r3, [r5, #12]
 8007388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800738a:	7c2b      	ldrb	r3, [r5, #16]
 800738c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800738e:	4a65      	ldr	r2, [pc, #404]	@ (8007524 <loadMenuTexts+0x12c8>)
 8007390:	4b65      	ldr	r3, [pc, #404]	@ (8007528 <loadMenuTexts+0x12cc>)
 8007392:	4614      	mov	r4, r2
 8007394:	461d      	mov	r5, r3
 8007396:	6828      	ldr	r0, [r5, #0]
 8007398:	6869      	ldr	r1, [r5, #4]
 800739a:	68aa      	ldr	r2, [r5, #8]
 800739c:	68eb      	ldr	r3, [r5, #12]
 800739e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a0:	7c2b      	ldrb	r3, [r5, #16]
 80073a2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80073a4:	4a61      	ldr	r2, [pc, #388]	@ (800752c <loadMenuTexts+0x12d0>)
 80073a6:	4b62      	ldr	r3, [pc, #392]	@ (8007530 <loadMenuTexts+0x12d4>)
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	6828      	ldr	r0, [r5, #0]
 80073ae:	6869      	ldr	r1, [r5, #4]
 80073b0:	68aa      	ldr	r2, [r5, #8]
 80073b2:	68eb      	ldr	r3, [r5, #12]
 80073b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b6:	7c2b      	ldrb	r3, [r5, #16]
 80073b8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80073ba:	4a5e      	ldr	r2, [pc, #376]	@ (8007534 <loadMenuTexts+0x12d8>)
 80073bc:	4b5e      	ldr	r3, [pc, #376]	@ (8007538 <loadMenuTexts+0x12dc>)
 80073be:	4614      	mov	r4, r2
 80073c0:	461d      	mov	r5, r3
 80073c2:	6828      	ldr	r0, [r5, #0]
 80073c4:	6869      	ldr	r1, [r5, #4]
 80073c6:	68aa      	ldr	r2, [r5, #8]
 80073c8:	68eb      	ldr	r3, [r5, #12]
 80073ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073cc:	7c2b      	ldrb	r3, [r5, #16]
 80073ce:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80073d0:	4a5a      	ldr	r2, [pc, #360]	@ (800753c <loadMenuTexts+0x12e0>)
 80073d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007540 <loadMenuTexts+0x12e4>)
 80073d4:	4614      	mov	r4, r2
 80073d6:	461d      	mov	r5, r3
 80073d8:	6828      	ldr	r0, [r5, #0]
 80073da:	6869      	ldr	r1, [r5, #4]
 80073dc:	68aa      	ldr	r2, [r5, #8]
 80073de:	68eb      	ldr	r3, [r5, #12]
 80073e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e2:	7c2b      	ldrb	r3, [r5, #16]
 80073e4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80073e6:	4a57      	ldr	r2, [pc, #348]	@ (8007544 <loadMenuTexts+0x12e8>)
 80073e8:	4b57      	ldr	r3, [pc, #348]	@ (8007548 <loadMenuTexts+0x12ec>)
 80073ea:	4614      	mov	r4, r2
 80073ec:	461d      	mov	r5, r3
 80073ee:	6828      	ldr	r0, [r5, #0]
 80073f0:	6869      	ldr	r1, [r5, #4]
 80073f2:	68aa      	ldr	r2, [r5, #8]
 80073f4:	68eb      	ldr	r3, [r5, #12]
 80073f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f8:	7c2b      	ldrb	r3, [r5, #16]
 80073fa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80073fc:	4a53      	ldr	r2, [pc, #332]	@ (800754c <loadMenuTexts+0x12f0>)
 80073fe:	4b54      	ldr	r3, [pc, #336]	@ (8007550 <loadMenuTexts+0x12f4>)
 8007400:	4614      	mov	r4, r2
 8007402:	461d      	mov	r5, r3
 8007404:	6828      	ldr	r0, [r5, #0]
 8007406:	6869      	ldr	r1, [r5, #4]
 8007408:	68aa      	ldr	r2, [r5, #8]
 800740a:	68eb      	ldr	r3, [r5, #12]
 800740c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740e:	7c2b      	ldrb	r3, [r5, #16]
 8007410:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8007412:	4a50      	ldr	r2, [pc, #320]	@ (8007554 <loadMenuTexts+0x12f8>)
 8007414:	4b50      	ldr	r3, [pc, #320]	@ (8007558 <loadMenuTexts+0x12fc>)
 8007416:	4614      	mov	r4, r2
 8007418:	461d      	mov	r5, r3
 800741a:	6828      	ldr	r0, [r5, #0]
 800741c:	6869      	ldr	r1, [r5, #4]
 800741e:	68aa      	ldr	r2, [r5, #8]
 8007420:	68eb      	ldr	r3, [r5, #12]
 8007422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007424:	7c2b      	ldrb	r3, [r5, #16]
 8007426:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007428:	4a4c      	ldr	r2, [pc, #304]	@ (800755c <loadMenuTexts+0x1300>)
 800742a:	4b4d      	ldr	r3, [pc, #308]	@ (8007560 <loadMenuTexts+0x1304>)
 800742c:	4614      	mov	r4, r2
 800742e:	461d      	mov	r5, r3
 8007430:	6828      	ldr	r0, [r5, #0]
 8007432:	6869      	ldr	r1, [r5, #4]
 8007434:	68aa      	ldr	r2, [r5, #8]
 8007436:	68eb      	ldr	r3, [r5, #12]
 8007438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743a:	7c2b      	ldrb	r3, [r5, #16]
 800743c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800743e:	4a49      	ldr	r2, [pc, #292]	@ (8007564 <loadMenuTexts+0x1308>)
 8007440:	4b49      	ldr	r3, [pc, #292]	@ (8007568 <loadMenuTexts+0x130c>)
 8007442:	4614      	mov	r4, r2
 8007444:	461d      	mov	r5, r3
 8007446:	e091      	b.n	800756c <loadMenuTexts+0x1310>
 8007448:	200009d4 	.word	0x200009d4
 800744c:	20001ab4 	.word	0x20001ab4
 8007450:	200009e8 	.word	0x200009e8
 8007454:	20001ac8 	.word	0x20001ac8
 8007458:	200009fc 	.word	0x200009fc
 800745c:	20001adc 	.word	0x20001adc
 8007460:	20000a10 	.word	0x20000a10
 8007464:	20001af0 	.word	0x20001af0
 8007468:	20000a24 	.word	0x20000a24
 800746c:	20001b04 	.word	0x20001b04
 8007470:	20000a38 	.word	0x20000a38
 8007474:	20001b18 	.word	0x20001b18
 8007478:	20000a4c 	.word	0x20000a4c
 800747c:	20001b2c 	.word	0x20001b2c
 8007480:	20000a60 	.word	0x20000a60
 8007484:	20001b40 	.word	0x20001b40
 8007488:	20000a74 	.word	0x20000a74
 800748c:	20001b54 	.word	0x20001b54
 8007490:	20000a88 	.word	0x20000a88
 8007494:	20001b68 	.word	0x20001b68
 8007498:	20000a9c 	.word	0x20000a9c
 800749c:	20001b7c 	.word	0x20001b7c
 80074a0:	20000ab0 	.word	0x20000ab0
 80074a4:	20001b90 	.word	0x20001b90
 80074a8:	20000ac4 	.word	0x20000ac4
 80074ac:	20001ba4 	.word	0x20001ba4
 80074b0:	20000ad8 	.word	0x20000ad8
 80074b4:	20001bb8 	.word	0x20001bb8
 80074b8:	20000aec 	.word	0x20000aec
 80074bc:	20001bcc 	.word	0x20001bcc
 80074c0:	20000b00 	.word	0x20000b00
 80074c4:	20001be0 	.word	0x20001be0
 80074c8:	20000b14 	.word	0x20000b14
 80074cc:	20001bf4 	.word	0x20001bf4
 80074d0:	20000b28 	.word	0x20000b28
 80074d4:	20001c08 	.word	0x20001c08
 80074d8:	20000b3c 	.word	0x20000b3c
 80074dc:	20001c1c 	.word	0x20001c1c
 80074e0:	20000b50 	.word	0x20000b50
 80074e4:	20001c30 	.word	0x20001c30
 80074e8:	20000b64 	.word	0x20000b64
 80074ec:	20001c44 	.word	0x20001c44
 80074f0:	20000b78 	.word	0x20000b78
 80074f4:	20001c58 	.word	0x20001c58
 80074f8:	20000b8c 	.word	0x20000b8c
 80074fc:	20001c6c 	.word	0x20001c6c
 8007500:	20000ba0 	.word	0x20000ba0
 8007504:	20001c80 	.word	0x20001c80
 8007508:	20000bb4 	.word	0x20000bb4
 800750c:	20001c94 	.word	0x20001c94
 8007510:	20000bc8 	.word	0x20000bc8
 8007514:	20001ca8 	.word	0x20001ca8
 8007518:	20000bdc 	.word	0x20000bdc
 800751c:	20001cbc 	.word	0x20001cbc
 8007520:	20000bf0 	.word	0x20000bf0
 8007524:	20001cd0 	.word	0x20001cd0
 8007528:	20000c04 	.word	0x20000c04
 800752c:	20001ce4 	.word	0x20001ce4
 8007530:	20000c18 	.word	0x20000c18
 8007534:	20001cf8 	.word	0x20001cf8
 8007538:	20000c2c 	.word	0x20000c2c
 800753c:	20001d0c 	.word	0x20001d0c
 8007540:	20000c40 	.word	0x20000c40
 8007544:	20001d20 	.word	0x20001d20
 8007548:	20000c54 	.word	0x20000c54
 800754c:	20001d34 	.word	0x20001d34
 8007550:	20000c68 	.word	0x20000c68
 8007554:	20001d48 	.word	0x20001d48
 8007558:	20000cf4 	.word	0x20000cf4
 800755c:	20001d5c 	.word	0x20001d5c
 8007560:	20000d08 	.word	0x20000d08
 8007564:	20001d70 	.word	0x20001d70
 8007568:	20000ccc 	.word	0x20000ccc
 800756c:	6828      	ldr	r0, [r5, #0]
 800756e:	6869      	ldr	r1, [r5, #4]
 8007570:	68aa      	ldr	r2, [r5, #8]
 8007572:	68eb      	ldr	r3, [r5, #12]
 8007574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007576:	7c2b      	ldrb	r3, [r5, #16]
 8007578:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800757a:	4a5b      	ldr	r2, [pc, #364]	@ (80076e8 <loadMenuTexts+0x148c>)
 800757c:	4b5b      	ldr	r3, [pc, #364]	@ (80076ec <loadMenuTexts+0x1490>)
 800757e:	4614      	mov	r4, r2
 8007580:	461d      	mov	r5, r3
 8007582:	6828      	ldr	r0, [r5, #0]
 8007584:	6869      	ldr	r1, [r5, #4]
 8007586:	68aa      	ldr	r2, [r5, #8]
 8007588:	68eb      	ldr	r3, [r5, #12]
 800758a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758c:	7c2b      	ldrb	r3, [r5, #16]
 800758e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007590:	4a57      	ldr	r2, [pc, #348]	@ (80076f0 <loadMenuTexts+0x1494>)
 8007592:	4b58      	ldr	r3, [pc, #352]	@ (80076f4 <loadMenuTexts+0x1498>)
 8007594:	4614      	mov	r4, r2
 8007596:	461d      	mov	r5, r3
 8007598:	6828      	ldr	r0, [r5, #0]
 800759a:	6869      	ldr	r1, [r5, #4]
 800759c:	68aa      	ldr	r2, [r5, #8]
 800759e:	68eb      	ldr	r3, [r5, #12]
 80075a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a2:	7c2b      	ldrb	r3, [r5, #16]
 80075a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80075a6:	4a54      	ldr	r2, [pc, #336]	@ (80076f8 <loadMenuTexts+0x149c>)
 80075a8:	4b54      	ldr	r3, [pc, #336]	@ (80076fc <loadMenuTexts+0x14a0>)
 80075aa:	4614      	mov	r4, r2
 80075ac:	461d      	mov	r5, r3
 80075ae:	6828      	ldr	r0, [r5, #0]
 80075b0:	6869      	ldr	r1, [r5, #4]
 80075b2:	68aa      	ldr	r2, [r5, #8]
 80075b4:	68eb      	ldr	r3, [r5, #12]
 80075b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b8:	7c2b      	ldrb	r3, [r5, #16]
 80075ba:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80075bc:	4a50      	ldr	r2, [pc, #320]	@ (8007700 <loadMenuTexts+0x14a4>)
 80075be:	4b51      	ldr	r3, [pc, #324]	@ (8007704 <loadMenuTexts+0x14a8>)
 80075c0:	4614      	mov	r4, r2
 80075c2:	461d      	mov	r5, r3
 80075c4:	6828      	ldr	r0, [r5, #0]
 80075c6:	6869      	ldr	r1, [r5, #4]
 80075c8:	68aa      	ldr	r2, [r5, #8]
 80075ca:	68eb      	ldr	r3, [r5, #12]
 80075cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ce:	7c2b      	ldrb	r3, [r5, #16]
 80075d0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80075d2:	4a4d      	ldr	r2, [pc, #308]	@ (8007708 <loadMenuTexts+0x14ac>)
 80075d4:	4b4d      	ldr	r3, [pc, #308]	@ (800770c <loadMenuTexts+0x14b0>)
 80075d6:	4614      	mov	r4, r2
 80075d8:	461d      	mov	r5, r3
 80075da:	6828      	ldr	r0, [r5, #0]
 80075dc:	6869      	ldr	r1, [r5, #4]
 80075de:	68aa      	ldr	r2, [r5, #8]
 80075e0:	68eb      	ldr	r3, [r5, #12]
 80075e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e4:	7c2b      	ldrb	r3, [r5, #16]
 80075e6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80075e8:	4a49      	ldr	r2, [pc, #292]	@ (8007710 <loadMenuTexts+0x14b4>)
 80075ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007714 <loadMenuTexts+0x14b8>)
 80075ec:	4614      	mov	r4, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	6828      	ldr	r0, [r5, #0]
 80075f2:	6869      	ldr	r1, [r5, #4]
 80075f4:	68aa      	ldr	r2, [r5, #8]
 80075f6:	68eb      	ldr	r3, [r5, #12]
 80075f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075fa:	7c2b      	ldrb	r3, [r5, #16]
 80075fc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80075fe:	4a46      	ldr	r2, [pc, #280]	@ (8007718 <loadMenuTexts+0x14bc>)
 8007600:	4b46      	ldr	r3, [pc, #280]	@ (800771c <loadMenuTexts+0x14c0>)
 8007602:	4614      	mov	r4, r2
 8007604:	461d      	mov	r5, r3
 8007606:	6828      	ldr	r0, [r5, #0]
 8007608:	6869      	ldr	r1, [r5, #4]
 800760a:	68aa      	ldr	r2, [r5, #8]
 800760c:	68eb      	ldr	r3, [r5, #12]
 800760e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007610:	7c2b      	ldrb	r3, [r5, #16]
 8007612:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007614:	4a42      	ldr	r2, [pc, #264]	@ (8007720 <loadMenuTexts+0x14c4>)
 8007616:	4b43      	ldr	r3, [pc, #268]	@ (8007724 <loadMenuTexts+0x14c8>)
 8007618:	4614      	mov	r4, r2
 800761a:	461d      	mov	r5, r3
 800761c:	6828      	ldr	r0, [r5, #0]
 800761e:	6869      	ldr	r1, [r5, #4]
 8007620:	68aa      	ldr	r2, [r5, #8]
 8007622:	68eb      	ldr	r3, [r5, #12]
 8007624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007626:	7c2b      	ldrb	r3, [r5, #16]
 8007628:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800762a:	4a3f      	ldr	r2, [pc, #252]	@ (8007728 <loadMenuTexts+0x14cc>)
 800762c:	4b3f      	ldr	r3, [pc, #252]	@ (800772c <loadMenuTexts+0x14d0>)
 800762e:	4614      	mov	r4, r2
 8007630:	461d      	mov	r5, r3
 8007632:	6828      	ldr	r0, [r5, #0]
 8007634:	6869      	ldr	r1, [r5, #4]
 8007636:	68aa      	ldr	r2, [r5, #8]
 8007638:	68eb      	ldr	r3, [r5, #12]
 800763a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800763c:	7c2b      	ldrb	r3, [r5, #16]
 800763e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007640:	4a3b      	ldr	r2, [pc, #236]	@ (8007730 <loadMenuTexts+0x14d4>)
 8007642:	4b3c      	ldr	r3, [pc, #240]	@ (8007734 <loadMenuTexts+0x14d8>)
 8007644:	4614      	mov	r4, r2
 8007646:	461d      	mov	r5, r3
 8007648:	6828      	ldr	r0, [r5, #0]
 800764a:	6869      	ldr	r1, [r5, #4]
 800764c:	68aa      	ldr	r2, [r5, #8]
 800764e:	68eb      	ldr	r3, [r5, #12]
 8007650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007652:	7c2b      	ldrb	r3, [r5, #16]
 8007654:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007656:	4a38      	ldr	r2, [pc, #224]	@ (8007738 <loadMenuTexts+0x14dc>)
 8007658:	4b38      	ldr	r3, [pc, #224]	@ (800773c <loadMenuTexts+0x14e0>)
 800765a:	4614      	mov	r4, r2
 800765c:	461d      	mov	r5, r3
 800765e:	6828      	ldr	r0, [r5, #0]
 8007660:	6869      	ldr	r1, [r5, #4]
 8007662:	68aa      	ldr	r2, [r5, #8]
 8007664:	68eb      	ldr	r3, [r5, #12]
 8007666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007668:	7c2b      	ldrb	r3, [r5, #16]
 800766a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800766c:	4a34      	ldr	r2, [pc, #208]	@ (8007740 <loadMenuTexts+0x14e4>)
 800766e:	4b35      	ldr	r3, [pc, #212]	@ (8007744 <loadMenuTexts+0x14e8>)
 8007670:	4614      	mov	r4, r2
 8007672:	461d      	mov	r5, r3
 8007674:	6828      	ldr	r0, [r5, #0]
 8007676:	6869      	ldr	r1, [r5, #4]
 8007678:	68aa      	ldr	r2, [r5, #8]
 800767a:	68eb      	ldr	r3, [r5, #12]
 800767c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767e:	7c2b      	ldrb	r3, [r5, #16]
 8007680:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007682:	4a31      	ldr	r2, [pc, #196]	@ (8007748 <loadMenuTexts+0x14ec>)
 8007684:	4b31      	ldr	r3, [pc, #196]	@ (800774c <loadMenuTexts+0x14f0>)
 8007686:	4614      	mov	r4, r2
 8007688:	461d      	mov	r5, r3
 800768a:	6828      	ldr	r0, [r5, #0]
 800768c:	6869      	ldr	r1, [r5, #4]
 800768e:	68aa      	ldr	r2, [r5, #8]
 8007690:	68eb      	ldr	r3, [r5, #12]
 8007692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007694:	7c2b      	ldrb	r3, [r5, #16]
 8007696:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007698:	4a2d      	ldr	r2, [pc, #180]	@ (8007750 <loadMenuTexts+0x14f4>)
 800769a:	4b2e      	ldr	r3, [pc, #184]	@ (8007754 <loadMenuTexts+0x14f8>)
 800769c:	4614      	mov	r4, r2
 800769e:	461d      	mov	r5, r3
 80076a0:	6828      	ldr	r0, [r5, #0]
 80076a2:	6869      	ldr	r1, [r5, #4]
 80076a4:	68aa      	ldr	r2, [r5, #8]
 80076a6:	68eb      	ldr	r3, [r5, #12]
 80076a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076aa:	7c2b      	ldrb	r3, [r5, #16]
 80076ac:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80076ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007758 <loadMenuTexts+0x14fc>)
 80076b0:	4b2a      	ldr	r3, [pc, #168]	@ (800775c <loadMenuTexts+0x1500>)
 80076b2:	4614      	mov	r4, r2
 80076b4:	461d      	mov	r5, r3
 80076b6:	6828      	ldr	r0, [r5, #0]
 80076b8:	6869      	ldr	r1, [r5, #4]
 80076ba:	68aa      	ldr	r2, [r5, #8]
 80076bc:	68eb      	ldr	r3, [r5, #12]
 80076be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076c0:	7c2b      	ldrb	r3, [r5, #16]
 80076c2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80076c4:	4a26      	ldr	r2, [pc, #152]	@ (8007760 <loadMenuTexts+0x1504>)
 80076c6:	4b27      	ldr	r3, [pc, #156]	@ (8007764 <loadMenuTexts+0x1508>)
 80076c8:	4614      	mov	r4, r2
 80076ca:	461d      	mov	r5, r3
 80076cc:	6828      	ldr	r0, [r5, #0]
 80076ce:	6869      	ldr	r1, [r5, #4]
 80076d0:	68aa      	ldr	r2, [r5, #8]
 80076d2:	68eb      	ldr	r3, [r5, #12]
 80076d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076d6:	7c2b      	ldrb	r3, [r5, #16]
 80076d8:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80076da:	f000 f845 	bl	8007768 <menuVariableFinisher>
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bdb0      	pop	{r4, r5, r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20001d84 	.word	0x20001d84
 80076ec:	20000ce0 	.word	0x20000ce0
 80076f0:	20001d98 	.word	0x20001d98
 80076f4:	20000d44 	.word	0x20000d44
 80076f8:	20001dac 	.word	0x20001dac
 80076fc:	20000d58 	.word	0x20000d58
 8007700:	20001dc0 	.word	0x20001dc0
 8007704:	20000d94 	.word	0x20000d94
 8007708:	20001dd4 	.word	0x20001dd4
 800770c:	20000da8 	.word	0x20000da8
 8007710:	20001de8 	.word	0x20001de8
 8007714:	20000de4 	.word	0x20000de4
 8007718:	20001dfc 	.word	0x20001dfc
 800771c:	20000df8 	.word	0x20000df8
 8007720:	20001e10 	.word	0x20001e10
 8007724:	20000e20 	.word	0x20000e20
 8007728:	20001e24 	.word	0x20001e24
 800772c:	20000e48 	.word	0x20000e48
 8007730:	20001e38 	.word	0x20001e38
 8007734:	20000e70 	.word	0x20000e70
 8007738:	20001e4c 	.word	0x20001e4c
 800773c:	20000e98 	.word	0x20000e98
 8007740:	20001e60 	.word	0x20001e60
 8007744:	20000ec0 	.word	0x20000ec0
 8007748:	20001e74 	.word	0x20001e74
 800774c:	20000ee8 	.word	0x20000ee8
 8007750:	20001e88 	.word	0x20001e88
 8007754:	20000f10 	.word	0x20000f10
 8007758:	20001e9c 	.word	0x20001e9c
 800775c:	20000f38 	.word	0x20000f38
 8007760:	20001eb0 	.word	0x20001eb0
 8007764:	20000f60 	.word	0x20000f60

08007768 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 800776c:	4b99      	ldr	r3, [pc, #612]	@ (80079d4 <menuVariableFinisher+0x26c>)
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007772:	4b99      	ldr	r3, [pc, #612]	@ (80079d8 <menuVariableFinisher+0x270>)
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007778:	4b98      	ldr	r3, [pc, #608]	@ (80079dc <menuVariableFinisher+0x274>)
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800777e:	4b98      	ldr	r3, [pc, #608]	@ (80079e0 <menuVariableFinisher+0x278>)
 8007780:	2200      	movs	r2, #0
 8007782:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007784:	4b97      	ldr	r3, [pc, #604]	@ (80079e4 <menuVariableFinisher+0x27c>)
 8007786:	2200      	movs	r2, #0
 8007788:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800778a:	4b97      	ldr	r3, [pc, #604]	@ (80079e8 <menuVariableFinisher+0x280>)
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007790:	4b96      	ldr	r3, [pc, #600]	@ (80079ec <menuVariableFinisher+0x284>)
 8007792:	2200      	movs	r2, #0
 8007794:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007796:	4b96      	ldr	r3, [pc, #600]	@ (80079f0 <menuVariableFinisher+0x288>)
 8007798:	2200      	movs	r2, #0
 800779a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 800779c:	4b95      	ldr	r3, [pc, #596]	@ (80079f4 <menuVariableFinisher+0x28c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80077a2:	4b95      	ldr	r3, [pc, #596]	@ (80079f8 <menuVariableFinisher+0x290>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80077a8:	4b94      	ldr	r3, [pc, #592]	@ (80079fc <menuVariableFinisher+0x294>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80077ae:	4b94      	ldr	r3, [pc, #592]	@ (8007a00 <menuVariableFinisher+0x298>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80077b4:	4b93      	ldr	r3, [pc, #588]	@ (8007a04 <menuVariableFinisher+0x29c>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80077ba:	4b93      	ldr	r3, [pc, #588]	@ (8007a08 <menuVariableFinisher+0x2a0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80077c0:	4b92      	ldr	r3, [pc, #584]	@ (8007a0c <menuVariableFinisher+0x2a4>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80077c6:	4b92      	ldr	r3, [pc, #584]	@ (8007a10 <menuVariableFinisher+0x2a8>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80077cc:	4b91      	ldr	r3, [pc, #580]	@ (8007a14 <menuVariableFinisher+0x2ac>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80077d2:	4b91      	ldr	r3, [pc, #580]	@ (8007a18 <menuVariableFinisher+0x2b0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80077d8:	4b90      	ldr	r3, [pc, #576]	@ (8007a1c <menuVariableFinisher+0x2b4>)
 80077da:	2200      	movs	r2, #0
 80077dc:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80077de:	4b90      	ldr	r3, [pc, #576]	@ (8007a20 <menuVariableFinisher+0x2b8>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80077e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007a24 <menuVariableFinisher+0x2bc>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80077ea:	4b8f      	ldr	r3, [pc, #572]	@ (8007a28 <menuVariableFinisher+0x2c0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80077f0:	4b8e      	ldr	r3, [pc, #568]	@ (8007a2c <menuVariableFinisher+0x2c4>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80077f6:	4b8e      	ldr	r3, [pc, #568]	@ (8007a30 <menuVariableFinisher+0x2c8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80077fc:	4b8d      	ldr	r3, [pc, #564]	@ (8007a34 <menuVariableFinisher+0x2cc>)
 80077fe:	2200      	movs	r2, #0
 8007800:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007802:	4b8d      	ldr	r3, [pc, #564]	@ (8007a38 <menuVariableFinisher+0x2d0>)
 8007804:	2200      	movs	r2, #0
 8007806:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007808:	4b8c      	ldr	r3, [pc, #560]	@ (8007a3c <menuVariableFinisher+0x2d4>)
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 800780e:	4b8c      	ldr	r3, [pc, #560]	@ (8007a40 <menuVariableFinisher+0x2d8>)
 8007810:	2200      	movs	r2, #0
 8007812:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007814:	4b8b      	ldr	r3, [pc, #556]	@ (8007a44 <menuVariableFinisher+0x2dc>)
 8007816:	2200      	movs	r2, #0
 8007818:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 800781a:	4b8b      	ldr	r3, [pc, #556]	@ (8007a48 <menuVariableFinisher+0x2e0>)
 800781c:	2200      	movs	r2, #0
 800781e:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007820:	4b8a      	ldr	r3, [pc, #552]	@ (8007a4c <menuVariableFinisher+0x2e4>)
 8007822:	2200      	movs	r2, #0
 8007824:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007826:	4b8a      	ldr	r3, [pc, #552]	@ (8007a50 <menuVariableFinisher+0x2e8>)
 8007828:	2200      	movs	r2, #0
 800782a:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 800782c:	4b89      	ldr	r3, [pc, #548]	@ (8007a54 <menuVariableFinisher+0x2ec>)
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007832:	4b89      	ldr	r3, [pc, #548]	@ (8007a58 <menuVariableFinisher+0x2f0>)
 8007834:	2200      	movs	r2, #0
 8007836:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007838:	4b88      	ldr	r3, [pc, #544]	@ (8007a5c <menuVariableFinisher+0x2f4>)
 800783a:	2200      	movs	r2, #0
 800783c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800783e:	4b88      	ldr	r3, [pc, #544]	@ (8007a60 <menuVariableFinisher+0x2f8>)
 8007840:	2200      	movs	r2, #0
 8007842:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007844:	4b87      	ldr	r3, [pc, #540]	@ (8007a64 <menuVariableFinisher+0x2fc>)
 8007846:	2200      	movs	r2, #0
 8007848:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800784a:	4b87      	ldr	r3, [pc, #540]	@ (8007a68 <menuVariableFinisher+0x300>)
 800784c:	2200      	movs	r2, #0
 800784e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007850:	4b86      	ldr	r3, [pc, #536]	@ (8007a6c <menuVariableFinisher+0x304>)
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007856:	4b86      	ldr	r3, [pc, #536]	@ (8007a70 <menuVariableFinisher+0x308>)
 8007858:	2200      	movs	r2, #0
 800785a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800785c:	4b85      	ldr	r3, [pc, #532]	@ (8007a74 <menuVariableFinisher+0x30c>)
 800785e:	2200      	movs	r2, #0
 8007860:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007862:	4b85      	ldr	r3, [pc, #532]	@ (8007a78 <menuVariableFinisher+0x310>)
 8007864:	2200      	movs	r2, #0
 8007866:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007868:	4b84      	ldr	r3, [pc, #528]	@ (8007a7c <menuVariableFinisher+0x314>)
 800786a:	2200      	movs	r2, #0
 800786c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800786e:	4b84      	ldr	r3, [pc, #528]	@ (8007a80 <menuVariableFinisher+0x318>)
 8007870:	2200      	movs	r2, #0
 8007872:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007874:	4b83      	ldr	r3, [pc, #524]	@ (8007a84 <menuVariableFinisher+0x31c>)
 8007876:	2200      	movs	r2, #0
 8007878:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800787a:	4b83      	ldr	r3, [pc, #524]	@ (8007a88 <menuVariableFinisher+0x320>)
 800787c:	2200      	movs	r2, #0
 800787e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007880:	4b82      	ldr	r3, [pc, #520]	@ (8007a8c <menuVariableFinisher+0x324>)
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007886:	4b82      	ldr	r3, [pc, #520]	@ (8007a90 <menuVariableFinisher+0x328>)
 8007888:	2200      	movs	r2, #0
 800788a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800788c:	4b81      	ldr	r3, [pc, #516]	@ (8007a94 <menuVariableFinisher+0x32c>)
 800788e:	2200      	movs	r2, #0
 8007890:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007892:	4b81      	ldr	r3, [pc, #516]	@ (8007a98 <menuVariableFinisher+0x330>)
 8007894:	2200      	movs	r2, #0
 8007896:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007898:	4b80      	ldr	r3, [pc, #512]	@ (8007a9c <menuVariableFinisher+0x334>)
 800789a:	2200      	movs	r2, #0
 800789c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800789e:	4b80      	ldr	r3, [pc, #512]	@ (8007aa0 <menuVariableFinisher+0x338>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80078a4:	4b7f      	ldr	r3, [pc, #508]	@ (8007aa4 <menuVariableFinisher+0x33c>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80078aa:	4b7f      	ldr	r3, [pc, #508]	@ (8007aa8 <menuVariableFinisher+0x340>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80078b0:	4b7e      	ldr	r3, [pc, #504]	@ (8007aac <menuVariableFinisher+0x344>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80078b6:	4b7e      	ldr	r3, [pc, #504]	@ (8007ab0 <menuVariableFinisher+0x348>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80078bc:	4b7d      	ldr	r3, [pc, #500]	@ (8007ab4 <menuVariableFinisher+0x34c>)
 80078be:	2200      	movs	r2, #0
 80078c0:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80078c2:	4b7d      	ldr	r3, [pc, #500]	@ (8007ab8 <menuVariableFinisher+0x350>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80078c8:	4b7c      	ldr	r3, [pc, #496]	@ (8007abc <menuVariableFinisher+0x354>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80078ce:	4b7c      	ldr	r3, [pc, #496]	@ (8007ac0 <menuVariableFinisher+0x358>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80078d4:	4b7b      	ldr	r3, [pc, #492]	@ (8007ac4 <menuVariableFinisher+0x35c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80078da:	4b7b      	ldr	r3, [pc, #492]	@ (8007ac8 <menuVariableFinisher+0x360>)
 80078dc:	2200      	movs	r2, #0
 80078de:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80078e0:	4b7a      	ldr	r3, [pc, #488]	@ (8007acc <menuVariableFinisher+0x364>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80078e6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ad0 <menuVariableFinisher+0x368>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80078ec:	4b79      	ldr	r3, [pc, #484]	@ (8007ad4 <menuVariableFinisher+0x36c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80078f2:	4b79      	ldr	r3, [pc, #484]	@ (8007ad8 <menuVariableFinisher+0x370>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80078f8:	4b78      	ldr	r3, [pc, #480]	@ (8007adc <menuVariableFinisher+0x374>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80078fe:	4b78      	ldr	r3, [pc, #480]	@ (8007ae0 <menuVariableFinisher+0x378>)
 8007900:	2200      	movs	r2, #0
 8007902:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007904:	4b77      	ldr	r3, [pc, #476]	@ (8007ae4 <menuVariableFinisher+0x37c>)
 8007906:	2200      	movs	r2, #0
 8007908:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 800790a:	4b77      	ldr	r3, [pc, #476]	@ (8007ae8 <menuVariableFinisher+0x380>)
 800790c:	2200      	movs	r2, #0
 800790e:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007910:	4b76      	ldr	r3, [pc, #472]	@ (8007aec <menuVariableFinisher+0x384>)
 8007912:	2200      	movs	r2, #0
 8007914:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007916:	4b76      	ldr	r3, [pc, #472]	@ (8007af0 <menuVariableFinisher+0x388>)
 8007918:	2200      	movs	r2, #0
 800791a:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 800791c:	4b75      	ldr	r3, [pc, #468]	@ (8007af4 <menuVariableFinisher+0x38c>)
 800791e:	2200      	movs	r2, #0
 8007920:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007922:	4b75      	ldr	r3, [pc, #468]	@ (8007af8 <menuVariableFinisher+0x390>)
 8007924:	2200      	movs	r2, #0
 8007926:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007928:	4b74      	ldr	r3, [pc, #464]	@ (8007afc <menuVariableFinisher+0x394>)
 800792a:	2200      	movs	r2, #0
 800792c:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800792e:	4b74      	ldr	r3, [pc, #464]	@ (8007b00 <menuVariableFinisher+0x398>)
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007934:	4b73      	ldr	r3, [pc, #460]	@ (8007b04 <menuVariableFinisher+0x39c>)
 8007936:	2200      	movs	r2, #0
 8007938:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 800793a:	4b73      	ldr	r3, [pc, #460]	@ (8007b08 <menuVariableFinisher+0x3a0>)
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007940:	4b72      	ldr	r3, [pc, #456]	@ (8007b0c <menuVariableFinisher+0x3a4>)
 8007942:	2200      	movs	r2, #0
 8007944:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007946:	4b72      	ldr	r3, [pc, #456]	@ (8007b10 <menuVariableFinisher+0x3a8>)
 8007948:	2200      	movs	r2, #0
 800794a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 800794c:	4b71      	ldr	r3, [pc, #452]	@ (8007b14 <menuVariableFinisher+0x3ac>)
 800794e:	2200      	movs	r2, #0
 8007950:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007952:	4b71      	ldr	r3, [pc, #452]	@ (8007b18 <menuVariableFinisher+0x3b0>)
 8007954:	2200      	movs	r2, #0
 8007956:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007958:	4b70      	ldr	r3, [pc, #448]	@ (8007b1c <menuVariableFinisher+0x3b4>)
 800795a:	2200      	movs	r2, #0
 800795c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800795e:	4b70      	ldr	r3, [pc, #448]	@ (8007b20 <menuVariableFinisher+0x3b8>)
 8007960:	2200      	movs	r2, #0
 8007962:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007964:	4b6f      	ldr	r3, [pc, #444]	@ (8007b24 <menuVariableFinisher+0x3bc>)
 8007966:	2200      	movs	r2, #0
 8007968:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 800796a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b28 <menuVariableFinisher+0x3c0>)
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007970:	4b6e      	ldr	r3, [pc, #440]	@ (8007b2c <menuVariableFinisher+0x3c4>)
 8007972:	2200      	movs	r2, #0
 8007974:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007976:	4b6e      	ldr	r3, [pc, #440]	@ (8007b30 <menuVariableFinisher+0x3c8>)
 8007978:	2200      	movs	r2, #0
 800797a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 800797c:	4b6d      	ldr	r3, [pc, #436]	@ (8007b34 <menuVariableFinisher+0x3cc>)
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007982:	4b6d      	ldr	r3, [pc, #436]	@ (8007b38 <menuVariableFinisher+0x3d0>)
 8007984:	2200      	movs	r2, #0
 8007986:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007988:	4b6c      	ldr	r3, [pc, #432]	@ (8007b3c <menuVariableFinisher+0x3d4>)
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800798e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b40 <menuVariableFinisher+0x3d8>)
 8007990:	2200      	movs	r2, #0
 8007992:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007994:	4b6b      	ldr	r3, [pc, #428]	@ (8007b44 <menuVariableFinisher+0x3dc>)
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800799a:	4b6b      	ldr	r3, [pc, #428]	@ (8007b48 <menuVariableFinisher+0x3e0>)
 800799c:	2200      	movs	r2, #0
 800799e:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 80079a0:	4b6a      	ldr	r3, [pc, #424]	@ (8007b4c <menuVariableFinisher+0x3e4>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 80079a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007b50 <menuVariableFinisher+0x3e8>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 80079ac:	4b69      	ldr	r3, [pc, #420]	@ (8007b54 <menuVariableFinisher+0x3ec>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 80079b2:	4b69      	ldr	r3, [pc, #420]	@ (8007b58 <menuVariableFinisher+0x3f0>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 80079b8:	4b68      	ldr	r3, [pc, #416]	@ (8007b5c <menuVariableFinisher+0x3f4>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 80079be:	4b68      	ldr	r3, [pc, #416]	@ (8007b60 <menuVariableFinisher+0x3f8>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 80079c4:	4b67      	ldr	r3, [pc, #412]	@ (8007b64 <menuVariableFinisher+0x3fc>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	741a      	strb	r2, [r3, #16]
}
 80079ca:	bf00      	nop
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	2000009c 	.word	0x2000009c
 80079d8:	200000b0 	.word	0x200000b0
 80079dc:	200000c4 	.word	0x200000c4
 80079e0:	200000d8 	.word	0x200000d8
 80079e4:	200000ec 	.word	0x200000ec
 80079e8:	20000100 	.word	0x20000100
 80079ec:	20000114 	.word	0x20000114
 80079f0:	20000128 	.word	0x20000128
 80079f4:	2000013c 	.word	0x2000013c
 80079f8:	20000150 	.word	0x20000150
 80079fc:	20000164 	.word	0x20000164
 8007a00:	20000178 	.word	0x20000178
 8007a04:	200017d0 	.word	0x200017d0
 8007a08:	200017e4 	.word	0x200017e4
 8007a0c:	200017f8 	.word	0x200017f8
 8007a10:	2000180c 	.word	0x2000180c
 8007a14:	20001820 	.word	0x20001820
 8007a18:	20001834 	.word	0x20001834
 8007a1c:	20001848 	.word	0x20001848
 8007a20:	2000185c 	.word	0x2000185c
 8007a24:	20001870 	.word	0x20001870
 8007a28:	20001884 	.word	0x20001884
 8007a2c:	20001898 	.word	0x20001898
 8007a30:	200018ac 	.word	0x200018ac
 8007a34:	200018c0 	.word	0x200018c0
 8007a38:	200018d4 	.word	0x200018d4
 8007a3c:	200018e8 	.word	0x200018e8
 8007a40:	200018fc 	.word	0x200018fc
 8007a44:	20001910 	.word	0x20001910
 8007a48:	20001924 	.word	0x20001924
 8007a4c:	20001938 	.word	0x20001938
 8007a50:	2000194c 	.word	0x2000194c
 8007a54:	20001960 	.word	0x20001960
 8007a58:	20001974 	.word	0x20001974
 8007a5c:	20001988 	.word	0x20001988
 8007a60:	2000199c 	.word	0x2000199c
 8007a64:	200019b0 	.word	0x200019b0
 8007a68:	200019c4 	.word	0x200019c4
 8007a6c:	200019d8 	.word	0x200019d8
 8007a70:	200019ec 	.word	0x200019ec
 8007a74:	20001a00 	.word	0x20001a00
 8007a78:	20001a14 	.word	0x20001a14
 8007a7c:	20001a28 	.word	0x20001a28
 8007a80:	20001a3c 	.word	0x20001a3c
 8007a84:	20001a50 	.word	0x20001a50
 8007a88:	20001a64 	.word	0x20001a64
 8007a8c:	20001a78 	.word	0x20001a78
 8007a90:	20001a8c 	.word	0x20001a8c
 8007a94:	20001aa0 	.word	0x20001aa0
 8007a98:	20001ab4 	.word	0x20001ab4
 8007a9c:	20001ac8 	.word	0x20001ac8
 8007aa0:	20001adc 	.word	0x20001adc
 8007aa4:	20001af0 	.word	0x20001af0
 8007aa8:	20001b04 	.word	0x20001b04
 8007aac:	20001b18 	.word	0x20001b18
 8007ab0:	20001b2c 	.word	0x20001b2c
 8007ab4:	20001b40 	.word	0x20001b40
 8007ab8:	20001b54 	.word	0x20001b54
 8007abc:	20001b68 	.word	0x20001b68
 8007ac0:	20001b7c 	.word	0x20001b7c
 8007ac4:	20001b90 	.word	0x20001b90
 8007ac8:	20001ba4 	.word	0x20001ba4
 8007acc:	20001bb8 	.word	0x20001bb8
 8007ad0:	20001bcc 	.word	0x20001bcc
 8007ad4:	20001be0 	.word	0x20001be0
 8007ad8:	20001bf4 	.word	0x20001bf4
 8007adc:	20001c08 	.word	0x20001c08
 8007ae0:	20001c1c 	.word	0x20001c1c
 8007ae4:	20001c30 	.word	0x20001c30
 8007ae8:	20001c44 	.word	0x20001c44
 8007aec:	20001c58 	.word	0x20001c58
 8007af0:	20001c6c 	.word	0x20001c6c
 8007af4:	20001c80 	.word	0x20001c80
 8007af8:	20001c94 	.word	0x20001c94
 8007afc:	20001ca8 	.word	0x20001ca8
 8007b00:	20001cbc 	.word	0x20001cbc
 8007b04:	20001cd0 	.word	0x20001cd0
 8007b08:	20001ce4 	.word	0x20001ce4
 8007b0c:	20001cf8 	.word	0x20001cf8
 8007b10:	20001d0c 	.word	0x20001d0c
 8007b14:	20001d20 	.word	0x20001d20
 8007b18:	20001d34 	.word	0x20001d34
 8007b1c:	20001d48 	.word	0x20001d48
 8007b20:	20001d5c 	.word	0x20001d5c
 8007b24:	20001d70 	.word	0x20001d70
 8007b28:	20001d84 	.word	0x20001d84
 8007b2c:	20001d98 	.word	0x20001d98
 8007b30:	20001dac 	.word	0x20001dac
 8007b34:	20001dc0 	.word	0x20001dc0
 8007b38:	20001dd4 	.word	0x20001dd4
 8007b3c:	20001de8 	.word	0x20001de8
 8007b40:	20001dfc 	.word	0x20001dfc
 8007b44:	20001e10 	.word	0x20001e10
 8007b48:	20001e24 	.word	0x20001e24
 8007b4c:	20001e38 	.word	0x20001e38
 8007b50:	20001e4c 	.word	0x20001e4c
 8007b54:	20001e60 	.word	0x20001e60
 8007b58:	20001e74 	.word	0x20001e74
 8007b5c:	20001e88 	.word	0x20001e88
 8007b60:	20001e9c 	.word	0x20001e9c
 8007b64:	20001eb0 	.word	0x20001eb0

08007b68 <resetMenuTexts>:

void resetMenuTexts() {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007b6c:	2211      	movs	r2, #17
 8007b6e:	2100      	movs	r1, #0
 8007b70:	48d3      	ldr	r0, [pc, #844]	@ (8007ec0 <resetMenuTexts+0x358>)
 8007b72:	f005 ff49 	bl	800da08 <memset>
    memset(ayarlarText, 0, 17);
 8007b76:	2211      	movs	r2, #17
 8007b78:	2100      	movs	r1, #0
 8007b7a:	48d2      	ldr	r0, [pc, #840]	@ (8007ec4 <resetMenuTexts+0x35c>)
 8007b7c:	f005 ff44 	bl	800da08 <memset>
    memset(hataKayitListText, 0, 17);
 8007b80:	2211      	movs	r2, #17
 8007b82:	2100      	movs	r1, #0
 8007b84:	48d0      	ldr	r0, [pc, #832]	@ (8007ec8 <resetMenuTexts+0x360>)
 8007b86:	f005 ff3f 	bl	800da08 <memset>
    memset(birHataKoduText, 0, 17);
 8007b8a:	2211      	movs	r2, #17
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	48cf      	ldr	r0, [pc, #828]	@ (8007ecc <resetMenuTexts+0x364>)
 8007b90:	f005 ff3a 	bl	800da08 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007b94:	2211      	movs	r2, #17
 8007b96:	2100      	movs	r1, #0
 8007b98:	48cd      	ldr	r0, [pc, #820]	@ (8007ed0 <resetMenuTexts+0x368>)
 8007b9a:	f005 ff35 	bl	800da08 <memset>
    memset(ucHataKoduText, 0, 17);
 8007b9e:	2211      	movs	r2, #17
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	48cc      	ldr	r0, [pc, #816]	@ (8007ed4 <resetMenuTexts+0x36c>)
 8007ba4:	f005 ff30 	bl	800da08 <memset>
    memset(dortHataKoduText, 0, 17);
 8007ba8:	2211      	movs	r2, #17
 8007baa:	2100      	movs	r1, #0
 8007bac:	48ca      	ldr	r0, [pc, #808]	@ (8007ed8 <resetMenuTexts+0x370>)
 8007bae:	f005 ff2b 	bl	800da08 <memset>
    memset(besHataKoduText, 0, 17);
 8007bb2:	2211      	movs	r2, #17
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	48c9      	ldr	r0, [pc, #804]	@ (8007edc <resetMenuTexts+0x374>)
 8007bb8:	f005 ff26 	bl	800da08 <memset>
    memset(altiHataKoduText, 0, 17);
 8007bbc:	2211      	movs	r2, #17
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	48c7      	ldr	r0, [pc, #796]	@ (8007ee0 <resetMenuTexts+0x378>)
 8007bc2:	f005 ff21 	bl	800da08 <memset>
    memset(yediHataKoduText, 0, 17);
 8007bc6:	2211      	movs	r2, #17
 8007bc8:	2100      	movs	r1, #0
 8007bca:	48c6      	ldr	r0, [pc, #792]	@ (8007ee4 <resetMenuTexts+0x37c>)
 8007bcc:	f005 ff1c 	bl	800da08 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007bd0:	2211      	movs	r2, #17
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	48c4      	ldr	r0, [pc, #784]	@ (8007ee8 <resetMenuTexts+0x380>)
 8007bd6:	f005 ff17 	bl	800da08 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007bda:	2211      	movs	r2, #17
 8007bdc:	2100      	movs	r1, #0
 8007bde:	48c3      	ldr	r0, [pc, #780]	@ (8007eec <resetMenuTexts+0x384>)
 8007be0:	f005 ff12 	bl	800da08 <memset>
    memset(onHataKoduText, 0, 17);
 8007be4:	2211      	movs	r2, #17
 8007be6:	2100      	movs	r1, #0
 8007be8:	48c1      	ldr	r0, [pc, #772]	@ (8007ef0 <resetMenuTexts+0x388>)
 8007bea:	f005 ff0d 	bl	800da08 <memset>
    memset(silmekIcinText, 0, 17);
 8007bee:	2211      	movs	r2, #17
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	48c0      	ldr	r0, [pc, #768]	@ (8007ef4 <resetMenuTexts+0x38c>)
 8007bf4:	f005 ff08 	bl	800da08 <memset>
    memset(calismaSekliText, 0, 17);
 8007bf8:	2211      	movs	r2, #17
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	48be      	ldr	r0, [pc, #760]	@ (8007ef8 <resetMenuTexts+0x390>)
 8007bfe:	f005 ff03 	bl	800da08 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007c02:	2211      	movs	r2, #17
 8007c04:	2100      	movs	r1, #0
 8007c06:	48bd      	ldr	r0, [pc, #756]	@ (8007efc <resetMenuTexts+0x394>)
 8007c08:	f005 fefe 	bl	800da08 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007c0c:	2211      	movs	r2, #17
 8007c0e:	2100      	movs	r1, #0
 8007c10:	48bb      	ldr	r0, [pc, #748]	@ (8007f00 <resetMenuTexts+0x398>)
 8007c12:	f005 fef9 	bl	800da08 <memset>
    memset(basGonderText, 0, 17);
 8007c16:	2211      	movs	r2, #17
 8007c18:	2100      	movs	r1, #0
 8007c1a:	48ba      	ldr	r0, [pc, #744]	@ (8007f04 <resetMenuTexts+0x39c>)
 8007c1c:	f005 fef4 	bl	800da08 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007c20:	2211      	movs	r2, #17
 8007c22:	2100      	movs	r1, #0
 8007c24:	48b8      	ldr	r0, [pc, #736]	@ (8007f08 <resetMenuTexts+0x3a0>)
 8007c26:	f005 feef 	bl	800da08 <memset>
    memset(pasifText, 0, 17);
 8007c2a:	2211      	movs	r2, #17
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	48b7      	ldr	r0, [pc, #732]	@ (8007f0c <resetMenuTexts+0x3a4>)
 8007c30:	f005 feea 	bl	800da08 <memset>
    memset(aktifText, 0, 17);
 8007c34:	2211      	movs	r2, #17
 8007c36:	2100      	movs	r1, #0
 8007c38:	48b5      	ldr	r0, [pc, #724]	@ (8007f10 <resetMenuTexts+0x3a8>)
 8007c3a:	f005 fee5 	bl	800da08 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007c3e:	2211      	movs	r2, #17
 8007c40:	2100      	movs	r1, #0
 8007c42:	48b4      	ldr	r0, [pc, #720]	@ (8007f14 <resetMenuTexts+0x3ac>)
 8007c44:	f005 fee0 	bl	800da08 <memset>
    memset(altLimitText, 0, 17);
 8007c48:	2211      	movs	r2, #17
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	48b2      	ldr	r0, [pc, #712]	@ (8007f18 <resetMenuTexts+0x3b0>)
 8007c4e:	f005 fedb 	bl	800da08 <memset>
    memset(basincSalteriText, 0, 17);
 8007c52:	2211      	movs	r2, #17
 8007c54:	2100      	movs	r1, #0
 8007c56:	48b1      	ldr	r0, [pc, #708]	@ (8007f1c <resetMenuTexts+0x3b4>)
 8007c58:	f005 fed6 	bl	800da08 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007c5c:	2211      	movs	r2, #17
 8007c5e:	2100      	movs	r1, #0
 8007c60:	48af      	ldr	r0, [pc, #700]	@ (8007f20 <resetMenuTexts+0x3b8>)
 8007c62:	f005 fed1 	bl	800da08 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007c66:	2211      	movs	r2, #17
 8007c68:	2100      	movs	r1, #0
 8007c6a:	48ae      	ldr	r0, [pc, #696]	@ (8007f24 <resetMenuTexts+0x3bc>)
 8007c6c:	f005 fecc 	bl	800da08 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007c70:	2211      	movs	r2, #17
 8007c72:	2100      	movs	r1, #0
 8007c74:	48ac      	ldr	r0, [pc, #688]	@ (8007f28 <resetMenuTexts+0x3c0>)
 8007c76:	f005 fec7 	bl	800da08 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007c7a:	2211      	movs	r2, #17
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	48ab      	ldr	r0, [pc, #684]	@ (8007f2c <resetMenuTexts+0x3c4>)
 8007c80:	f005 fec2 	bl	800da08 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007c84:	2211      	movs	r2, #17
 8007c86:	2100      	movs	r1, #0
 8007c88:	48a9      	ldr	r0, [pc, #676]	@ (8007f30 <resetMenuTexts+0x3c8>)
 8007c8a:	f005 febd 	bl	800da08 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007c8e:	2211      	movs	r2, #17
 8007c90:	2100      	movs	r1, #0
 8007c92:	48a8      	ldr	r0, [pc, #672]	@ (8007f34 <resetMenuTexts+0x3cc>)
 8007c94:	f005 feb8 	bl	800da08 <memset>
    memset(katButonuEXTText, 0, 17);
 8007c98:	2211      	movs	r2, #17
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	48a6      	ldr	r0, [pc, #664]	@ (8007f38 <resetMenuTexts+0x3d0>)
 8007c9e:	f005 feb3 	bl	800da08 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007ca2:	2211      	movs	r2, #17
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	48a5      	ldr	r0, [pc, #660]	@ (8007f3c <resetMenuTexts+0x3d4>)
 8007ca8:	f005 feae 	bl	800da08 <memset>
    memset(butonKontrolluText, 0, 17);
 8007cac:	2211      	movs	r2, #17
 8007cae:	2100      	movs	r1, #0
 8007cb0:	48a3      	ldr	r0, [pc, #652]	@ (8007f40 <resetMenuTexts+0x3d8>)
 8007cb2:	f005 fea9 	bl	800da08 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007cb6:	2211      	movs	r2, #17
 8007cb8:	2100      	movs	r1, #0
 8007cba:	48a2      	ldr	r0, [pc, #648]	@ (8007f44 <resetMenuTexts+0x3dc>)
 8007cbc:	f005 fea4 	bl	800da08 <memset>
    memset(kacSaniyeText, 0, 17);
 8007cc0:	2211      	movs	r2, #17
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	48a0      	ldr	r0, [pc, #640]	@ (8007f48 <resetMenuTexts+0x3e0>)
 8007cc6:	f005 fe9f 	bl	800da08 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007cca:	2211      	movs	r2, #17
 8007ccc:	2100      	movs	r1, #0
 8007cce:	489f      	ldr	r0, [pc, #636]	@ (8007f4c <resetMenuTexts+0x3e4>)
 8007cd0:	f005 fe9a 	bl	800da08 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007cd4:	2211      	movs	r2, #17
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	489d      	ldr	r0, [pc, #628]	@ (8007f50 <resetMenuTexts+0x3e8>)
 8007cda:	f005 fe95 	bl	800da08 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007cde:	2211      	movs	r2, #17
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	489c      	ldr	r0, [pc, #624]	@ (8007f54 <resetMenuTexts+0x3ec>)
 8007ce4:	f005 fe90 	bl	800da08 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007ce8:	2211      	movs	r2, #17
 8007cea:	2100      	movs	r1, #0
 8007cec:	489a      	ldr	r0, [pc, #616]	@ (8007f58 <resetMenuTexts+0x3f0>)
 8007cee:	f005 fe8b 	bl	800da08 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007cf2:	2211      	movs	r2, #17
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4899      	ldr	r0, [pc, #612]	@ (8007f5c <resetMenuTexts+0x3f4>)
 8007cf8:	f005 fe86 	bl	800da08 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007cfc:	2211      	movs	r2, #17
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4897      	ldr	r0, [pc, #604]	@ (8007f60 <resetMenuTexts+0x3f8>)
 8007d02:	f005 fe81 	bl	800da08 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007d06:	2211      	movs	r2, #17
 8007d08:	2100      	movs	r1, #0
 8007d0a:	4896      	ldr	r0, [pc, #600]	@ (8007f64 <resetMenuTexts+0x3fc>)
 8007d0c:	f005 fe7c 	bl	800da08 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007d10:	2211      	movs	r2, #17
 8007d12:	2100      	movs	r1, #0
 8007d14:	4894      	ldr	r0, [pc, #592]	@ (8007f68 <resetMenuTexts+0x400>)
 8007d16:	f005 fe77 	bl	800da08 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007d1a:	2211      	movs	r2, #17
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4893      	ldr	r0, [pc, #588]	@ (8007f6c <resetMenuTexts+0x404>)
 8007d20:	f005 fe72 	bl	800da08 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007d24:	2211      	movs	r2, #17
 8007d26:	2100      	movs	r1, #0
 8007d28:	4891      	ldr	r0, [pc, #580]	@ (8007f70 <resetMenuTexts+0x408>)
 8007d2a:	f005 fe6d 	bl	800da08 <memset>
    memset(devirmeAktifText, 0, 17);
 8007d2e:	2211      	movs	r2, #17
 8007d30:	2100      	movs	r1, #0
 8007d32:	4890      	ldr	r0, [pc, #576]	@ (8007f74 <resetMenuTexts+0x40c>)
 8007d34:	f005 fe68 	bl	800da08 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007d38:	2211      	movs	r2, #17
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	488e      	ldr	r0, [pc, #568]	@ (8007f78 <resetMenuTexts+0x410>)
 8007d3e:	f005 fe63 	bl	800da08 <memset>
    memset(devirmeYukariText, 0, 17);
 8007d42:	2211      	movs	r2, #17
 8007d44:	2100      	movs	r1, #0
 8007d46:	488d      	ldr	r0, [pc, #564]	@ (8007f7c <resetMenuTexts+0x414>)
 8007d48:	f005 fe5e 	bl	800da08 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007d4c:	2211      	movs	r2, #17
 8007d4e:	2100      	movs	r1, #0
 8007d50:	488b      	ldr	r0, [pc, #556]	@ (8007f80 <resetMenuTexts+0x418>)
 8007d52:	f005 fe59 	bl	800da08 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007d56:	2211      	movs	r2, #17
 8007d58:	2100      	movs	r1, #0
 8007d5a:	488a      	ldr	r0, [pc, #552]	@ (8007f84 <resetMenuTexts+0x41c>)
 8007d5c:	f005 fe54 	bl	800da08 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007d60:	2211      	movs	r2, #17
 8007d62:	2100      	movs	r1, #0
 8007d64:	4888      	ldr	r0, [pc, #544]	@ (8007f88 <resetMenuTexts+0x420>)
 8007d66:	f005 fe4f 	bl	800da08 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007d6a:	2211      	movs	r2, #17
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4887      	ldr	r0, [pc, #540]	@ (8007f8c <resetMenuTexts+0x424>)
 8007d70:	f005 fe4a 	bl	800da08 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007d74:	2211      	movs	r2, #17
 8007d76:	2100      	movs	r1, #0
 8007d78:	4885      	ldr	r0, [pc, #532]	@ (8007f90 <resetMenuTexts+0x428>)
 8007d7a:	f005 fe45 	bl	800da08 <memset>
    memset(tekTesirText, 0, 17);
 8007d7e:	2211      	movs	r2, #17
 8007d80:	2100      	movs	r1, #0
 8007d82:	4884      	ldr	r0, [pc, #528]	@ (8007f94 <resetMenuTexts+0x42c>)
 8007d84:	f005 fe40 	bl	800da08 <memset>
    memset(ciftTesirText, 0, 17);
 8007d88:	2211      	movs	r2, #17
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4882      	ldr	r0, [pc, #520]	@ (8007f98 <resetMenuTexts+0x430>)
 8007d8e:	f005 fe3b 	bl	800da08 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007d92:	2211      	movs	r2, #17
 8007d94:	2100      	movs	r1, #0
 8007d96:	4881      	ldr	r0, [pc, #516]	@ (8007f9c <resetMenuTexts+0x434>)
 8007d98:	f005 fe36 	bl	800da08 <memset>
    memset(yukariValfSureText, 0, 17);
 8007d9c:	2211      	movs	r2, #17
 8007d9e:	2100      	movs	r1, #0
 8007da0:	487f      	ldr	r0, [pc, #508]	@ (8007fa0 <resetMenuTexts+0x438>)
 8007da2:	f005 fe31 	bl	800da08 <memset>
    memset(asagiValfSureText, 0, 17);
 8007da6:	2211      	movs	r2, #17
 8007da8:	2100      	movs	r1, #0
 8007daa:	487e      	ldr	r0, [pc, #504]	@ (8007fa4 <resetMenuTexts+0x43c>)
 8007dac:	f005 fe2c 	bl	800da08 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007db0:	2211      	movs	r2, #17
 8007db2:	2100      	movs	r1, #0
 8007db4:	487c      	ldr	r0, [pc, #496]	@ (8007fa8 <resetMenuTexts+0x440>)
 8007db6:	f005 fe27 	bl	800da08 <memset>
    memset(ileriValfSureText, 0, 17);
 8007dba:	2211      	movs	r2, #17
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	487b      	ldr	r0, [pc, #492]	@ (8007fac <resetMenuTexts+0x444>)
 8007dc0:	f005 fe22 	bl	800da08 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007dc4:	2211      	movs	r2, #17
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4879      	ldr	r0, [pc, #484]	@ (8007fb0 <resetMenuTexts+0x448>)
 8007dca:	f005 fe1d 	bl	800da08 <memset>
    memset(geriValfSureText, 0, 17);
 8007dce:	2211      	movs	r2, #17
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4878      	ldr	r0, [pc, #480]	@ (8007fb4 <resetMenuTexts+0x44c>)
 8007dd4:	f005 fe18 	bl	800da08 <memset>
    memset(calismaSuresiText, 0, 17);
 8007dd8:	2211      	movs	r2, #17
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4876      	ldr	r0, [pc, #472]	@ (8007fb8 <resetMenuTexts+0x450>)
 8007dde:	f005 fe13 	bl	800da08 <memset>
    memset(calismaSayisiText, 0, 17);
 8007de2:	2211      	movs	r2, #17
 8007de4:	2100      	movs	r1, #0
 8007de6:	4875      	ldr	r0, [pc, #468]	@ (8007fbc <resetMenuTexts+0x454>)
 8007de8:	f005 fe0e 	bl	800da08 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007dec:	2211      	movs	r2, #17
 8007dee:	2100      	movs	r1, #0
 8007df0:	4873      	ldr	r0, [pc, #460]	@ (8007fc0 <resetMenuTexts+0x458>)
 8007df2:	f005 fe09 	bl	800da08 <memset>
    memset(dilSecimText, 0, 17);
 8007df6:	2211      	movs	r2, #17
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4872      	ldr	r0, [pc, #456]	@ (8007fc4 <resetMenuTexts+0x45c>)
 8007dfc:	f005 fe04 	bl	800da08 <memset>
    memset(secilenDilText, 0, 17);
 8007e00:	2211      	movs	r2, #17
 8007e02:	2100      	movs	r1, #0
 8007e04:	4870      	ldr	r0, [pc, #448]	@ (8007fc8 <resetMenuTexts+0x460>)
 8007e06:	f005 fdff 	bl	800da08 <memset>
    memset(menudenCikisText, 0, 17);
 8007e0a:	2211      	movs	r2, #17
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	486f      	ldr	r0, [pc, #444]	@ (8007fcc <resetMenuTexts+0x464>)
 8007e10:	f005 fdfa 	bl	800da08 <memset>
    memset(enteraBasinizText, 0, 17);
 8007e14:	2211      	movs	r2, #17
 8007e16:	2100      	movs	r1, #0
 8007e18:	486d      	ldr	r0, [pc, #436]	@ (8007fd0 <resetMenuTexts+0x468>)
 8007e1a:	f005 fdf5 	bl	800da08 <memset>
    memset(hataKoduText, 0, 17);
 8007e1e:	2211      	movs	r2, #17
 8007e20:	2100      	movs	r1, #0
 8007e22:	486c      	ldr	r0, [pc, #432]	@ (8007fd4 <resetMenuTexts+0x46c>)
 8007e24:	f005 fdf0 	bl	800da08 <memset>
    memset(dataSynchText, 0, 17);
 8007e28:	2211      	movs	r2, #17
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	486a      	ldr	r0, [pc, #424]	@ (8007fd8 <resetMenuTexts+0x470>)
 8007e2e:	f005 fdeb 	bl	800da08 <memset>
    memset(dataSynch2Text, 0, 17);
 8007e32:	2211      	movs	r2, #17
 8007e34:	2100      	movs	r1, #0
 8007e36:	4869      	ldr	r0, [pc, #420]	@ (8007fdc <resetMenuTexts+0x474>)
 8007e38:	f005 fde6 	bl	800da08 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007e3c:	2211      	movs	r2, #17
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4867      	ldr	r0, [pc, #412]	@ (8007fe0 <resetMenuTexts+0x478>)
 8007e42:	f005 fde1 	bl	800da08 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007e46:	2211      	movs	r2, #17
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4866      	ldr	r0, [pc, #408]	@ (8007fe4 <resetMenuTexts+0x47c>)
 8007e4c:	f005 fddc 	bl	800da08 <memset>
    memset(mustBe12Text, 0, 17);
 8007e50:	2211      	movs	r2, #17
 8007e52:	2100      	movs	r1, #0
 8007e54:	4864      	ldr	r0, [pc, #400]	@ (8007fe8 <resetMenuTexts+0x480>)
 8007e56:	f005 fdd7 	bl	800da08 <memset>
    memset(mustBe122Text, 0, 17);
 8007e5a:	2211      	movs	r2, #17
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4863      	ldr	r0, [pc, #396]	@ (8007fec <resetMenuTexts+0x484>)
 8007e60:	f005 fdd2 	bl	800da08 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007e64:	2211      	movs	r2, #17
 8007e66:	2100      	movs	r1, #0
 8007e68:	4861      	ldr	r0, [pc, #388]	@ (8007ff0 <resetMenuTexts+0x488>)
 8007e6a:	f005 fdcd 	bl	800da08 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007e6e:	2211      	movs	r2, #17
 8007e70:	2100      	movs	r1, #0
 8007e72:	4860      	ldr	r0, [pc, #384]	@ (8007ff4 <resetMenuTexts+0x48c>)
 8007e74:	f005 fdc8 	bl	800da08 <memset>
    memset(passExceedErrorText, 0, 17);
 8007e78:	2211      	movs	r2, #17
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	485e      	ldr	r0, [pc, #376]	@ (8007ff8 <resetMenuTexts+0x490>)
 8007e7e:	f005 fdc3 	bl	800da08 <memset>
    memset(passExceedError2Text, 0, 17);
 8007e82:	2211      	movs	r2, #17
 8007e84:	2100      	movs	r1, #0
 8007e86:	485d      	ldr	r0, [pc, #372]	@ (8007ffc <resetMenuTexts+0x494>)
 8007e88:	f005 fdbe 	bl	800da08 <memset>
    memset(dataYazildiText, 0, 17);
 8007e8c:	2211      	movs	r2, #17
 8007e8e:	2100      	movs	r1, #0
 8007e90:	485b      	ldr	r0, [pc, #364]	@ (8008000 <resetMenuTexts+0x498>)
 8007e92:	f005 fdb9 	bl	800da08 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007e96:	2211      	movs	r2, #17
 8007e98:	2100      	movs	r1, #0
 8007e9a:	485a      	ldr	r0, [pc, #360]	@ (8008004 <resetMenuTexts+0x49c>)
 8007e9c:	f005 fdb4 	bl	800da08 <memset>
    memset(dataOkunduText, 0, 17);
 8007ea0:	2211      	movs	r2, #17
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4858      	ldr	r0, [pc, #352]	@ (8008008 <resetMenuTexts+0x4a0>)
 8007ea6:	f005 fdaf 	bl	800da08 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007eaa:	2211      	movs	r2, #17
 8007eac:	2100      	movs	r1, #0
 8007eae:	4857      	ldr	r0, [pc, #348]	@ (800800c <resetMenuTexts+0x4a4>)
 8007eb0:	f005 fdaa 	bl	800da08 <memset>
    memset(errorCodeText, 0, 17);
 8007eb4:	2211      	movs	r2, #17
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4855      	ldr	r0, [pc, #340]	@ (8008010 <resetMenuTexts+0x4a8>)
 8007eba:	f005 fda5 	bl	800da08 <memset>
 8007ebe:	e0a9      	b.n	8008014 <resetMenuTexts+0x4ac>
 8007ec0:	200017d0 	.word	0x200017d0
 8007ec4:	200017e4 	.word	0x200017e4
 8007ec8:	200017f8 	.word	0x200017f8
 8007ecc:	2000180c 	.word	0x2000180c
 8007ed0:	20001820 	.word	0x20001820
 8007ed4:	20001834 	.word	0x20001834
 8007ed8:	20001848 	.word	0x20001848
 8007edc:	2000185c 	.word	0x2000185c
 8007ee0:	20001870 	.word	0x20001870
 8007ee4:	20001884 	.word	0x20001884
 8007ee8:	20001898 	.word	0x20001898
 8007eec:	200018ac 	.word	0x200018ac
 8007ef0:	200018c0 	.word	0x200018c0
 8007ef4:	200018d4 	.word	0x200018d4
 8007ef8:	200018e8 	.word	0x200018e8
 8007efc:	200018fc 	.word	0x200018fc
 8007f00:	20001910 	.word	0x20001910
 8007f04:	20001924 	.word	0x20001924
 8007f08:	20001938 	.word	0x20001938
 8007f0c:	2000194c 	.word	0x2000194c
 8007f10:	20001960 	.word	0x20001960
 8007f14:	20001974 	.word	0x20001974
 8007f18:	20001988 	.word	0x20001988
 8007f1c:	2000199c 	.word	0x2000199c
 8007f20:	200019b0 	.word	0x200019b0
 8007f24:	200019c4 	.word	0x200019c4
 8007f28:	200019d8 	.word	0x200019d8
 8007f2c:	200019ec 	.word	0x200019ec
 8007f30:	20001a00 	.word	0x20001a00
 8007f34:	20001a14 	.word	0x20001a14
 8007f38:	20001a28 	.word	0x20001a28
 8007f3c:	20001a3c 	.word	0x20001a3c
 8007f40:	20001a50 	.word	0x20001a50
 8007f44:	20001a64 	.word	0x20001a64
 8007f48:	20001a78 	.word	0x20001a78
 8007f4c:	20001a8c 	.word	0x20001a8c
 8007f50:	20001aa0 	.word	0x20001aa0
 8007f54:	20001ab4 	.word	0x20001ab4
 8007f58:	20001ac8 	.word	0x20001ac8
 8007f5c:	20001adc 	.word	0x20001adc
 8007f60:	20001af0 	.word	0x20001af0
 8007f64:	20001b04 	.word	0x20001b04
 8007f68:	20001b18 	.word	0x20001b18
 8007f6c:	20001b2c 	.word	0x20001b2c
 8007f70:	20001b40 	.word	0x20001b40
 8007f74:	20001b54 	.word	0x20001b54
 8007f78:	20001b68 	.word	0x20001b68
 8007f7c:	20001b7c 	.word	0x20001b7c
 8007f80:	20001b90 	.word	0x20001b90
 8007f84:	20001ba4 	.word	0x20001ba4
 8007f88:	20001bb8 	.word	0x20001bb8
 8007f8c:	20001bcc 	.word	0x20001bcc
 8007f90:	20001be0 	.word	0x20001be0
 8007f94:	20001bf4 	.word	0x20001bf4
 8007f98:	20001c08 	.word	0x20001c08
 8007f9c:	20001c1c 	.word	0x20001c1c
 8007fa0:	20001c30 	.word	0x20001c30
 8007fa4:	20001c44 	.word	0x20001c44
 8007fa8:	20001c58 	.word	0x20001c58
 8007fac:	20001c6c 	.word	0x20001c6c
 8007fb0:	20001c80 	.word	0x20001c80
 8007fb4:	20001c94 	.word	0x20001c94
 8007fb8:	20001ca8 	.word	0x20001ca8
 8007fbc:	20001cbc 	.word	0x20001cbc
 8007fc0:	20001cd0 	.word	0x20001cd0
 8007fc4:	20001ce4 	.word	0x20001ce4
 8007fc8:	20001cf8 	.word	0x20001cf8
 8007fcc:	20001d0c 	.word	0x20001d0c
 8007fd0:	20001d20 	.word	0x20001d20
 8007fd4:	20001d34 	.word	0x20001d34
 8007fd8:	20001d48 	.word	0x20001d48
 8007fdc:	20001d5c 	.word	0x20001d5c
 8007fe0:	20001d70 	.word	0x20001d70
 8007fe4:	20001d84 	.word	0x20001d84
 8007fe8:	20001d98 	.word	0x20001d98
 8007fec:	20001dac 	.word	0x20001dac
 8007ff0:	20001dc0 	.word	0x20001dc0
 8007ff4:	20001dd4 	.word	0x20001dd4
 8007ff8:	20001de8 	.word	0x20001de8
 8007ffc:	20001dfc 	.word	0x20001dfc
 8008000:	20001e10 	.word	0x20001e10
 8008004:	20001e24 	.word	0x20001e24
 8008008:	20001e38 	.word	0x20001e38
 800800c:	20001e4c 	.word	0x20001e4c
 8008010:	20001e60 	.word	0x20001e60
    memset(machineIDText, 0, 17);
 8008014:	2211      	movs	r2, #17
 8008016:	2100      	movs	r1, #0
 8008018:	4809      	ldr	r0, [pc, #36]	@ (8008040 <resetMenuTexts+0x4d8>)
 800801a:	f005 fcf5 	bl	800da08 <memset>
    memset(idConfirmationText, 0, 17);
 800801e:	2211      	movs	r2, #17
 8008020:	2100      	movs	r1, #0
 8008022:	4808      	ldr	r0, [pc, #32]	@ (8008044 <resetMenuTexts+0x4dc>)
 8008024:	f005 fcf0 	bl	800da08 <memset>
    memset(idConfirmationSubText, 0, 17);
 8008028:	2211      	movs	r2, #17
 800802a:	2100      	movs	r1, #0
 800802c:	4806      	ldr	r0, [pc, #24]	@ (8008048 <resetMenuTexts+0x4e0>)
 800802e:	f005 fceb 	bl	800da08 <memset>
    memset(wifiConfirmationText, 0, 17);
 8008032:	2211      	movs	r2, #17
 8008034:	2100      	movs	r1, #0
 8008036:	4805      	ldr	r0, [pc, #20]	@ (800804c <resetMenuTexts+0x4e4>)
 8008038:	f005 fce6 	bl	800da08 <memset>
}
 800803c:	bf00      	nop
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20001e74 	.word	0x20001e74
 8008044:	20001e88 	.word	0x20001e88
 8008048:	20001e9c 	.word	0x20001e9c
 800804c:	20001eb0 	.word	0x20001eb0

08008050 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800805a:	f001 fc99 	bl	8009990 <HAL_Delay>
	int confirmationVal = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008062:	e012      	b.n	800808a <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008064:	4a12      	ldr	r2, [pc, #72]	@ (80080b0 <takeMachineIDWithConfirmation+0x60>)
 8008066:	2101      	movs	r1, #1
 8008068:	2001      	movs	r0, #1
 800806a:	f000 ff25 	bl	8008eb8 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 800806e:	4a11      	ldr	r2, [pc, #68]	@ (80080b4 <takeMachineIDWithConfirmation+0x64>)
 8008070:	2101      	movs	r1, #1
 8008072:	2002      	movs	r0, #2
 8008074:	f000 ff20 	bl	8008eb8 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008078:	2102      	movs	r1, #2
 800807a:	480f      	ldr	r0, [pc, #60]	@ (80080b8 <takeMachineIDWithConfirmation+0x68>)
 800807c:	f002 fa58 	bl	800a530 <HAL_GPIO_ReadPin>
 8008080:	4603      	mov	r3, r0
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008086:	2301      	movs	r3, #1
 8008088:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0e9      	beq.n	8008064 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008090:	f000 f814 	bl	80080bc <takeMachineID>

	convertArrays(1);
 8008094:	2001      	movs	r0, #1
 8008096:	f7f8 fc07 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 800809a:	2032      	movs	r0, #50	@ 0x32
 800809c:	f001 fc78 	bl	8009990 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 80080a0:	2001      	movs	r0, #1
 80080a2:	f7f9 fabf 	bl	8001624 <printCredentials>
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001e88 	.word	0x20001e88
 80080b4:	20001e9c 	.word	0x20001e9c
 80080b8:	40010800 	.word	0x40010800

080080bc <takeMachineID>:

void takeMachineID() {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 80080c2:	2001      	movs	r0, #1
 80080c4:	f000 ff56 	bl	8008f74 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80080c8:	220c      	movs	r2, #12
 80080ca:	2100      	movs	r1, #0
 80080cc:	48a6      	ldr	r0, [pc, #664]	@ (8008368 <takeMachineID+0x2ac>)
 80080ce:	f005 fc9b 	bl	800da08 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80080d2:	2305      	movs	r3, #5
 80080d4:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80080d6:	2303      	movs	r3, #3
 80080d8:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80080de:	4ba3      	ldr	r3, [pc, #652]	@ (800836c <takeMachineID+0x2b0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 80080e4:	2100      	movs	r1, #0
 80080e6:	2001      	movs	r0, #1
 80080e8:	f7f9 f92c 	bl	8001344 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80080ec:	2108      	movs	r1, #8
 80080ee:	48a0      	ldr	r0, [pc, #640]	@ (8008370 <takeMachineID+0x2b4>)
 80080f0:	f002 fa1e 	bl	800a530 <HAL_GPIO_ReadPin>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d12f      	bne.n	800815a <takeMachineID+0x9e>
        	lcd_cursor(0);
 80080fa:	2000      	movs	r0, #0
 80080fc:	f000 ff3a 	bl	8008f74 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008100:	f000 fcf0 	bl	8008ae4 <checkEEPROM4ID>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d00e      	beq.n	8008128 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 800810a:	4a9a      	ldr	r2, [pc, #616]	@ (8008374 <takeMachineID+0x2b8>)
 800810c:	2101      	movs	r1, #1
 800810e:	2001      	movs	r0, #1
 8008110:	f000 fed2 	bl	8008eb8 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008114:	4a98      	ldr	r2, [pc, #608]	@ (8008378 <takeMachineID+0x2bc>)
 8008116:	2101      	movs	r1, #1
 8008118:	2002      	movs	r0, #2
 800811a:	f000 fecd 	bl	8008eb8 <lcd_print>
        		HAL_Delay(1250);
 800811e:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008122:	f001 fc35 	bl	8009990 <HAL_Delay>

        		goto mainSection;
 8008126:	e7cc      	b.n	80080c2 <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 8008128:	f000 fd02 	bl	8008b30 <az5>
 800812c:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d103      	bne.n	800813c <takeMachineID+0x80>
        		saveEEPROM(1);
 8008134:	2001      	movs	r0, #1
 8008136:	f7f8 fab5 	bl	80006a4 <saveEEPROM>
 800813a:	e00e      	b.n	800815a <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 800813c:	4a8f      	ldr	r2, [pc, #572]	@ (800837c <takeMachineID+0x2c0>)
 800813e:	2101      	movs	r1, #1
 8008140:	2001      	movs	r0, #1
 8008142:	f000 feb9 	bl	8008eb8 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 8008146:	4a8e      	ldr	r2, [pc, #568]	@ (8008380 <takeMachineID+0x2c4>)
 8008148:	2101      	movs	r1, #1
 800814a:	2002      	movs	r0, #2
 800814c:	f000 feb4 	bl	8008eb8 <lcd_print>

        		HAL_Delay(500);
 8008150:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008154:	f001 fc1c 	bl	8009990 <HAL_Delay>

        		goto mainSection;
 8008158:	e7b3      	b.n	80080c2 <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800815a:	2101      	movs	r1, #1
 800815c:	4884      	ldr	r0, [pc, #528]	@ (8008370 <takeMachineID+0x2b4>)
 800815e:	f002 f9e7 	bl	800a530 <HAL_GPIO_ReadPin>
 8008162:	4603      	mov	r3, r0
 8008164:	2b01      	cmp	r3, #1
 8008166:	d111      	bne.n	800818c <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2b07      	cmp	r3, #7
 800816c:	d102      	bne.n	8008174 <takeMachineID+0xb8>
        		cursorPosition = 10;
 800816e:	230a      	movs	r3, #10
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e008      	b.n	8008186 <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b0e      	cmp	r3, #14
 8008178:	d102      	bne.n	8008180 <takeMachineID+0xc4>
                cursorPosition = 3;
 800817a:	2303      	movs	r3, #3
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	e002      	b.n	8008186 <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	3301      	adds	r3, #1
 8008184:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 8008186:	2096      	movs	r0, #150	@ 0x96
 8008188:	f001 fc02 	bl	8009990 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800818c:	2108      	movs	r1, #8
 800818e:	487d      	ldr	r0, [pc, #500]	@ (8008384 <takeMachineID+0x2c8>)
 8008190:	f002 f9ce 	bl	800a530 <HAL_GPIO_ReadPin>
 8008194:	4603      	mov	r3, r0
 8008196:	2b01      	cmp	r3, #1
 8008198:	d111      	bne.n	80081be <takeMachineID+0x102>
            if (cursorPosition == 3) {
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d102      	bne.n	80081a6 <takeMachineID+0xea>
                cursorPosition = 14;
 80081a0:	230e      	movs	r3, #14
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	e008      	b.n	80081b8 <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b0a      	cmp	r3, #10
 80081aa:	d102      	bne.n	80081b2 <takeMachineID+0xf6>
            	cursorPosition = 7;
 80081ac:	2307      	movs	r3, #7
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	e002      	b.n	80081b8 <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 80081b8:	20fa      	movs	r0, #250	@ 0xfa
 80081ba:	f001 fbe9 	bl	8009990 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80081be:	2102      	movs	r1, #2
 80081c0:	486b      	ldr	r0, [pc, #428]	@ (8008370 <takeMachineID+0x2b4>)
 80081c2:	f002 f9b5 	bl	800a530 <HAL_GPIO_ReadPin>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	f040 80a1 	bne.w	8008310 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d10a      	bne.n	80081ea <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 80081d4:	4a64      	ldr	r2, [pc, #400]	@ (8008368 <takeMachineID+0x2ac>)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	2230      	movs	r2, #48	@ 0x30
 80081dc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80081de:	4a6a      	ldr	r2, [pc, #424]	@ (8008388 <takeMachineID+0x2cc>)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4413      	add	r3, r2
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	e07c      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d10a      	bne.n	8008206 <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 80081f0:	4a5d      	ldr	r2, [pc, #372]	@ (8008368 <takeMachineID+0x2ac>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4413      	add	r3, r2
 80081f6:	2231      	movs	r2, #49	@ 0x31
 80081f8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 80081fa:	4a63      	ldr	r2, [pc, #396]	@ (8008388 <takeMachineID+0x2cc>)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	4413      	add	r3, r2
 8008200:	2201      	movs	r2, #1
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e06e      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b05      	cmp	r3, #5
 800820a:	d10a      	bne.n	8008222 <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 800820c:	4a56      	ldr	r2, [pc, #344]	@ (8008368 <takeMachineID+0x2ac>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	2232      	movs	r2, #50	@ 0x32
 8008214:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008216:	4a5c      	ldr	r2, [pc, #368]	@ (8008388 <takeMachineID+0x2cc>)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	2202      	movs	r2, #2
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	e060      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b06      	cmp	r3, #6
 8008226:	d10a      	bne.n	800823e <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 8008228:	4a4f      	ldr	r2, [pc, #316]	@ (8008368 <takeMachineID+0x2ac>)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	2233      	movs	r2, #51	@ 0x33
 8008230:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008232:	4a55      	ldr	r2, [pc, #340]	@ (8008388 <takeMachineID+0x2cc>)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4413      	add	r3, r2
 8008238:	2203      	movs	r2, #3
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	e052      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b07      	cmp	r3, #7
 8008242:	d10a      	bne.n	800825a <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 8008244:	4a48      	ldr	r2, [pc, #288]	@ (8008368 <takeMachineID+0x2ac>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	2234      	movs	r2, #52	@ 0x34
 800824c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 800824e:	4a4e      	ldr	r2, [pc, #312]	@ (8008388 <takeMachineID+0x2cc>)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4413      	add	r3, r2
 8008254:	2204      	movs	r2, #4
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e044      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b0a      	cmp	r3, #10
 800825e:	d10a      	bne.n	8008276 <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 8008260:	4a41      	ldr	r2, [pc, #260]	@ (8008368 <takeMachineID+0x2ac>)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	2235      	movs	r2, #53	@ 0x35
 8008268:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 800826a:	4a47      	ldr	r2, [pc, #284]	@ (8008388 <takeMachineID+0x2cc>)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4413      	add	r3, r2
 8008270:	2205      	movs	r2, #5
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e036      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b0b      	cmp	r3, #11
 800827a:	d10a      	bne.n	8008292 <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 800827c:	4a3a      	ldr	r2, [pc, #232]	@ (8008368 <takeMachineID+0x2ac>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	2236      	movs	r2, #54	@ 0x36
 8008284:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008286:	4a40      	ldr	r2, [pc, #256]	@ (8008388 <takeMachineID+0x2cc>)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4413      	add	r3, r2
 800828c:	2206      	movs	r2, #6
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e028      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b0c      	cmp	r3, #12
 8008296:	d10a      	bne.n	80082ae <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 8008298:	4a33      	ldr	r2, [pc, #204]	@ (8008368 <takeMachineID+0x2ac>)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	2237      	movs	r2, #55	@ 0x37
 80082a0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80082a2:	4a39      	ldr	r2, [pc, #228]	@ (8008388 <takeMachineID+0x2cc>)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	2207      	movs	r2, #7
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	e01a      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b0d      	cmp	r3, #13
 80082b2:	d10a      	bne.n	80082ca <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 80082b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008368 <takeMachineID+0x2ac>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	2238      	movs	r2, #56	@ 0x38
 80082bc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80082be:	4a32      	ldr	r2, [pc, #200]	@ (8008388 <takeMachineID+0x2cc>)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4413      	add	r3, r2
 80082c4:	2208      	movs	r2, #8
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e00c      	b.n	80082e4 <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b0e      	cmp	r3, #14
 80082ce:	d109      	bne.n	80082e4 <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 80082d0:	4a25      	ldr	r2, [pc, #148]	@ (8008368 <takeMachineID+0x2ac>)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	2239      	movs	r2, #57	@ 0x39
 80082d8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 80082da:	4a2b      	ldr	r2, [pc, #172]	@ (8008388 <takeMachineID+0x2cc>)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4413      	add	r3, r2
 80082e0:	2209      	movs	r2, #9
 80082e2:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	b2d9      	uxtb	r1, r3
 80082e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008368 <takeMachineID+0x2ac>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	2001      	movs	r0, #1
 80082f4:	f000 fdf5 	bl	8008ee2 <lcd_print_char>

        	writeLoc++;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	3301      	adds	r3, #1
 80082fc:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	3301      	adds	r3, #1
 8008308:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 800830a:	2096      	movs	r0, #150	@ 0x96
 800830c:	f001 fb40 	bl	8009990 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008310:	2104      	movs	r1, #4
 8008312:	4817      	ldr	r0, [pc, #92]	@ (8008370 <takeMachineID+0x2b4>)
 8008314:	f002 f90c 	bl	800a530 <HAL_GPIO_ReadPin>
 8008318:	4603      	mov	r3, r0
 800831a:	2b01      	cmp	r3, #1
 800831c:	d14c      	bne.n	80083b8 <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 800831e:	4b12      	ldr	r3, [pc, #72]	@ (8008368 <takeMachineID+0x2ac>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d045      	beq.n	80083b2 <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 8008326:	4a10      	ldr	r2, [pc, #64]	@ (8008368 <takeMachineID+0x2ac>)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008330:	4a15      	ldr	r2, [pc, #84]	@ (8008388 <takeMachineID+0x2cc>)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4413      	add	r3, r2
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b05      	cmp	r3, #5
 800833e:	dd03      	ble.n	8008348 <takeMachineID+0x28c>
                	writeLoc--;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	3b01      	subs	r3, #1
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	e004      	b.n	8008352 <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b04      	cmp	r3, #4
 800834c:	dc01      	bgt.n	8008352 <takeMachineID+0x296>
                	writeLoc = 5;
 800834e:	2305      	movs	r3, #5
 8008350:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd19      	ble.n	800838c <takeMachineID+0x2d0>
                	arrayPos--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3b01      	subs	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	3b01      	subs	r3, #1
 8008362:	60bb      	str	r3, [r7, #8]
 8008364:	e01a      	b.n	800839c <takeMachineID+0x2e0>
 8008366:	bf00      	nop
 8008368:	20001518 	.word	0x20001518
 800836c:	20000000 	.word	0x20000000
 8008370:	40010800 	.word	0x40010800
 8008374:	20001d98 	.word	0x20001d98
 8008378:	20001dac 	.word	0x20001dac
 800837c:	20001d70 	.word	0x20001d70
 8008380:	20001d84 	.word	0x20001d84
 8008384:	40011000 	.word	0x40011000
 8008388:	200014a0 	.word	0x200014a0
                } else if(arrayPos < 0) {
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da04      	bge.n	800839c <takeMachineID+0x2e0>
                	arrayPos = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 8008396:	4b0c      	ldr	r3, [pc, #48]	@ (80083c8 <takeMachineID+0x30c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	3305      	adds	r3, #5
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	4619      	mov	r1, r3
 80083a6:	2001      	movs	r0, #1
 80083a8:	f000 fdbc 	bl	8008f24 <lcd_delete_char>
                HAL_Delay(50);
 80083ac:	2032      	movs	r0, #50	@ 0x32
 80083ae:	f001 faef 	bl	8009990 <HAL_Delay>
            }

            HAL_Delay(150);
 80083b2:	2096      	movs	r0, #150	@ 0x96
 80083b4:	f001 faec 	bl	8009990 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	4619      	mov	r1, r3
 80083be:	2002      	movs	r0, #2
 80083c0:	f000 fd5b 	bl	8008e7a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80083c4:	e692      	b.n	80080ec <takeMachineID+0x30>
 80083c6:	bf00      	nop
 80083c8:	20000000 	.word	0x20000000

080083cc <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80083d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008450 <ssidConfirmation+0x84>)
 80083d8:	2101      	movs	r1, #1
 80083da:	2001      	movs	r0, #1
 80083dc:	f000 fd6c 	bl	8008eb8 <lcd_print>

	while(loopVal == 1) {
 80083e0:	e012      	b.n	8008408 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80083e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008454 <ssidConfirmation+0x88>)
 80083e4:	2101      	movs	r1, #1
 80083e6:	2002      	movs	r0, #2
 80083e8:	f000 fd66 	bl	8008eb8 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80083ec:	2102      	movs	r1, #2
 80083ee:	481a      	ldr	r0, [pc, #104]	@ (8008458 <ssidConfirmation+0x8c>)
 80083f0:	f002 f89e 	bl	800a530 <HAL_GPIO_ReadPin>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <ssidConfirmation+0x32>
			loopVal = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 80083fe:	4a17      	ldr	r2, [pc, #92]	@ (800845c <ssidConfirmation+0x90>)
 8008400:	2101      	movs	r1, #1
 8008402:	2001      	movs	r0, #1
 8008404:	f000 fd58 	bl	8008eb8 <lcd_print>
	while(loopVal == 1) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d0e9      	beq.n	80083e2 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 800840e:	2000      	movs	r0, #0
 8008410:	f000 fdb0 	bl	8008f74 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008414:	4811      	ldr	r0, [pc, #68]	@ (800845c <ssidConfirmation+0x90>)
 8008416:	f7f7 ff05 	bl	8000224 <strlen>
 800841a:	4603      	mov	r3, r0
 800841c:	2b14      	cmp	r3, #20
 800841e:	d90f      	bls.n	8008440 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008420:	4a0f      	ldr	r2, [pc, #60]	@ (8008460 <ssidConfirmation+0x94>)
 8008422:	2101      	movs	r1, #1
 8008424:	2001      	movs	r0, #1
 8008426:	f000 fd47 	bl	8008eb8 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800842a:	4a0e      	ldr	r2, [pc, #56]	@ (8008464 <ssidConfirmation+0x98>)
 800842c:	2101      	movs	r1, #1
 800842e:	2002      	movs	r0, #2
 8008430:	f000 fd42 	bl	8008eb8 <lcd_print>
        HAL_Delay(1250);
 8008434:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008438:	f001 faaa 	bl	8009990 <HAL_Delay>

        return 0;
 800843c:	2300      	movs	r3, #0
 800843e:	e003      	b.n	8008448 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008440:	2001      	movs	r0, #1
 8008442:	f7f8 f92f 	bl	80006a4 <saveEEPROM>

    	return 1;
 8008446:	2301      	movs	r3, #1
    }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	0800f0a0 	.word	0x0800f0a0
 8008454:	20001eb0 	.word	0x20001eb0
 8008458:	40010800 	.word	0x40010800
 800845c:	20001524 	.word	0x20001524
 8008460:	20001dc0 	.word	0x20001dc0
 8008464:	20001dd4 	.word	0x20001dd4

08008468 <takeWifiSSID>:

void takeWifiSSID() {
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 800846e:	2001      	movs	r0, #1
 8008470:	f000 fd80 	bl	8008f74 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8008474:	2210      	movs	r2, #16
 8008476:	2100      	movs	r1, #0
 8008478:	48a4      	ldr	r0, [pc, #656]	@ (800870c <takeWifiSSID+0x2a4>)
 800847a:	f005 fac5 	bl	800da08 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800847e:	2301      	movs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008482:	2307      	movs	r3, #7
 8008484:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008486:	2301      	movs	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800848a:	2300      	movs	r3, #0
 800848c:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800848e:	4ba0      	ldr	r3, [pc, #640]	@ (8008710 <takeWifiSSID+0x2a8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8008494:	2101      	movs	r1, #1
 8008496:	2002      	movs	r0, #2
 8008498:	f7f8 ff54 	bl	8001344 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800849c:	2108      	movs	r1, #8
 800849e:	489d      	ldr	r0, [pc, #628]	@ (8008714 <takeWifiSSID+0x2ac>)
 80084a0:	f002 f846 	bl	800a530 <HAL_GPIO_ReadPin>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d106      	bne.n	80084b8 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80084aa:	f7ff ff8f 	bl	80083cc <ssidConfirmation>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 8126 	bne.w	8008702 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80084b6:	e7da      	b.n	800846e <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80084b8:	2101      	movs	r1, #1
 80084ba:	4896      	ldr	r0, [pc, #600]	@ (8008714 <takeWifiSSID+0x2ac>)
 80084bc:	f002 f838 	bl	800a530 <HAL_GPIO_ReadPin>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d14d      	bne.n	8008562 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b50      	cmp	r3, #80	@ 0x50
 80084ca:	dd01      	ble.n	80084d0 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80084cc:	2301      	movs	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d13f      	bne.n	8008556 <takeWifiSSID+0xee>
            	if(page == 1) {
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d109      	bne.n	80084f0 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 80084dc:	2301      	movs	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
            		page++;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	3301      	adds	r3, #1
 80084e4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80084e6:	2102      	movs	r1, #2
 80084e8:	2002      	movs	r0, #2
 80084ea:	f7f8 ff2b 	bl	8001344 <printTemplate>
 80084ee:	e035      	b.n	800855c <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d109      	bne.n	800850a <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 80084f6:	2301      	movs	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
            		page++;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008500:	2103      	movs	r1, #3
 8008502:	2002      	movs	r0, #2
 8008504:	f7f8 ff1e 	bl	8001344 <printTemplate>
 8008508:	e028      	b.n	800855c <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b03      	cmp	r3, #3
 800850e:	d109      	bne.n	8008524 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008510:	2301      	movs	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
            		page++;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	3301      	adds	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800851a:	2104      	movs	r1, #4
 800851c:	2002      	movs	r0, #2
 800851e:	f7f8 ff11 	bl	8001344 <printTemplate>
 8008522:	e01b      	b.n	800855c <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b04      	cmp	r3, #4
 8008528:	d109      	bne.n	800853e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
            		page++;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	3301      	adds	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008534:	2105      	movs	r1, #5
 8008536:	2002      	movs	r0, #2
 8008538:	f7f8 ff04 	bl	8001344 <printTemplate>
 800853c:	e00e      	b.n	800855c <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b05      	cmp	r3, #5
 8008542:	d10b      	bne.n	800855c <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8008544:	2301      	movs	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008548:	2301      	movs	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800854c:	2101      	movs	r1, #1
 800854e:	2002      	movs	r0, #2
 8008550:	f7f8 fef8 	bl	8001344 <printTemplate>
 8008554:	e002      	b.n	800855c <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800855c:	2096      	movs	r0, #150	@ 0x96
 800855e:	f001 fa17 	bl	8009990 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008562:	2108      	movs	r1, #8
 8008564:	486c      	ldr	r0, [pc, #432]	@ (8008718 <takeWifiSSID+0x2b0>)
 8008566:	f001 ffe3 	bl	800a530 <HAL_GPIO_ReadPin>
 800856a:	4603      	mov	r3, r0
 800856c:	2b01      	cmp	r3, #1
 800856e:	d149      	bne.n	8008604 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dc01      	bgt.n	800857a <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8008576:	2350      	movs	r3, #80	@ 0x50
 8008578:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d13b      	bne.n	80085f8 <takeWifiSSID+0x190>
            	if(page == 1) {
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d108      	bne.n	8008598 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8008586:	2310      	movs	r3, #16
 8008588:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800858a:	2305      	movs	r3, #5
 800858c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800858e:	2105      	movs	r1, #5
 8008590:	2002      	movs	r0, #2
 8008592:	f7f8 fed7 	bl	8001344 <printTemplate>
 8008596:	e032      	b.n	80085fe <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d108      	bne.n	80085b0 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 800859e:	2310      	movs	r3, #16
 80085a0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80085a2:	2301      	movs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80085a6:	2101      	movs	r1, #1
 80085a8:	2002      	movs	r0, #2
 80085aa:	f7f8 fecb 	bl	8001344 <printTemplate>
 80085ae:	e026      	b.n	80085fe <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d108      	bne.n	80085c8 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80085b6:	2310      	movs	r3, #16
 80085b8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80085ba:	2302      	movs	r3, #2
 80085bc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80085be:	2102      	movs	r1, #2
 80085c0:	2002      	movs	r0, #2
 80085c2:	f7f8 febf 	bl	8001344 <printTemplate>
 80085c6:	e01a      	b.n	80085fe <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d108      	bne.n	80085e0 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80085ce:	2310      	movs	r3, #16
 80085d0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80085d2:	2303      	movs	r3, #3
 80085d4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80085d6:	2103      	movs	r1, #3
 80085d8:	2002      	movs	r0, #2
 80085da:	f7f8 feb3 	bl	8001344 <printTemplate>
 80085de:	e00e      	b.n	80085fe <takeWifiSSID+0x196>
            	} else if(page == 5) {
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d10b      	bne.n	80085fe <takeWifiSSID+0x196>
            		cursorPosition = 16;
 80085e6:	2310      	movs	r3, #16
 80085e8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80085ea:	2304      	movs	r3, #4
 80085ec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80085ee:	2104      	movs	r1, #4
 80085f0:	2002      	movs	r0, #2
 80085f2:	f7f8 fea7 	bl	8001344 <printTemplate>
 80085f6:	e002      	b.n	80085fe <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80085fe:	2096      	movs	r0, #150	@ 0x96
 8008600:	f001 f9c6 	bl	8009990 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008604:	2102      	movs	r1, #2
 8008606:	4843      	ldr	r0, [pc, #268]	@ (8008714 <takeWifiSSID+0x2ac>)
 8008608:	f001 ff92 	bl	800a530 <HAL_GPIO_ReadPin>
 800860c:	4603      	mov	r3, r0
 800860e:	2b01      	cmp	r3, #1
 8008610:	d12f      	bne.n	8008672 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	b2d9      	uxtb	r1, r3
 8008616:	4a41      	ldr	r2, [pc, #260]	@ (800871c <takeWifiSSID+0x2b4>)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	460a      	mov	r2, r1
 800861e:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008620:	4a3f      	ldr	r2, [pc, #252]	@ (8008720 <takeWifiSSID+0x2b8>)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	7819      	ldrb	r1, [r3, #0]
 8008628:	4a38      	ldr	r2, [pc, #224]	@ (800870c <takeWifiSSID+0x2a4>)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	460a      	mov	r2, r1
 8008630:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	b2d9      	uxtb	r1, r3
 8008636:	4a3a      	ldr	r2, [pc, #232]	@ (8008720 <takeWifiSSID+0x2b8>)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	2001      	movs	r0, #1
 8008642:	f000 fc4e 	bl	8008ee2 <lcd_print_char>

            writeLoc++;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3301      	adds	r3, #1
 800864a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	3301      	adds	r3, #1
 8008650:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3301      	adds	r3, #1
 8008656:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008658:	4a30      	ldr	r2, [pc, #192]	@ (800871c <takeWifiSSID+0x2b4>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8008662:	4a2a      	ldr	r2, [pc, #168]	@ (800870c <takeWifiSSID+0x2a4>)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4413      	add	r3, r2
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800866c:	2096      	movs	r0, #150	@ 0x96
 800866e:	f001 f98f 	bl	8009990 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008672:	2104      	movs	r1, #4
 8008674:	4827      	ldr	r0, [pc, #156]	@ (8008714 <takeWifiSSID+0x2ac>)
 8008676:	f001 ff5b 	bl	800a530 <HAL_GPIO_ReadPin>
 800867a:	4603      	mov	r3, r0
 800867c:	2b01      	cmp	r3, #1
 800867e:	d139      	bne.n	80086f4 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008680:	4b22      	ldr	r3, [pc, #136]	@ (800870c <takeWifiSSID+0x2a4>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d032      	beq.n	80086ee <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8008688:	4a24      	ldr	r2, [pc, #144]	@ (800871c <takeWifiSSID+0x2b4>)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8008692:	4a1e      	ldr	r2, [pc, #120]	@ (800870c <takeWifiSSID+0x2a4>)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b07      	cmp	r3, #7
 80086a0:	dd03      	ble.n	80086aa <takeWifiSSID+0x242>
        			writeLoc--;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	e004      	b.n	80086b4 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2b06      	cmp	r3, #6
 80086ae:	dc01      	bgt.n	80086b4 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80086b0:	2307      	movs	r3, #7
 80086b2:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd06      	ble.n	80086c8 <takeWifiSSID+0x260>
        			arrayPosition--;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	3b01      	subs	r3, #1
 80086be:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	e007      	b.n	80086d8 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da04      	bge.n	80086d8 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80086d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008710 <takeWifiSSID+0x2a8>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	3307      	adds	r3, #7
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	4619      	mov	r1, r3
 80086e2:	2001      	movs	r0, #1
 80086e4:	f000 fc1e 	bl	8008f24 <lcd_delete_char>
        		HAL_Delay(50);
 80086e8:	2032      	movs	r0, #50	@ 0x32
 80086ea:	f001 f951 	bl	8009990 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80086ee:	2096      	movs	r0, #150	@ 0x96
 80086f0:	f001 f94e 	bl	8009990 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	2002      	movs	r0, #2
 80086fc:	f000 fbbd 	bl	8008e7a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008700:	e6cc      	b.n	800849c <takeWifiSSID+0x34>
        		break;
 8008702:	bf00      	nop
    }
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20001524 	.word	0x20001524
 8008710:	20000004 	.word	0x20000004
 8008714:	40010800 	.word	0x40010800
 8008718:	40011000 	.word	0x40011000
 800871c:	200014a0 	.word	0x200014a0
 8008720:	20000018 	.word	0x20000018

08008724 <passConfirmation>:

uint8_t passConfirmation() {
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800872e:	4a1e      	ldr	r2, [pc, #120]	@ (80087a8 <passConfirmation+0x84>)
 8008730:	2101      	movs	r1, #1
 8008732:	2001      	movs	r0, #1
 8008734:	f000 fbc0 	bl	8008eb8 <lcd_print>

	while(loopVal == 1) {
 8008738:	e012      	b.n	8008760 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800873a:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <passConfirmation+0x88>)
 800873c:	2101      	movs	r1, #1
 800873e:	2002      	movs	r0, #2
 8008740:	f000 fbba 	bl	8008eb8 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008744:	2102      	movs	r1, #2
 8008746:	481a      	ldr	r0, [pc, #104]	@ (80087b0 <passConfirmation+0x8c>)
 8008748:	f001 fef2 	bl	800a530 <HAL_GPIO_ReadPin>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <passConfirmation+0x32>
			loopVal = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 8008756:	4a17      	ldr	r2, [pc, #92]	@ (80087b4 <passConfirmation+0x90>)
 8008758:	2101      	movs	r1, #1
 800875a:	2001      	movs	r0, #1
 800875c:	f000 fbac 	bl	8008eb8 <lcd_print>
	while(loopVal == 1) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d0e9      	beq.n	800873a <passConfirmation+0x16>
	}

    lcd_cursor(0);
 8008766:	2000      	movs	r0, #0
 8008768:	f000 fc04 	bl	8008f74 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 800876c:	4811      	ldr	r0, [pc, #68]	@ (80087b4 <passConfirmation+0x90>)
 800876e:	f7f7 fd59 	bl	8000224 <strlen>
 8008772:	4603      	mov	r3, r0
 8008774:	2b14      	cmp	r3, #20
 8008776:	d90f      	bls.n	8008798 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 8008778:	4a0f      	ldr	r2, [pc, #60]	@ (80087b8 <passConfirmation+0x94>)
 800877a:	2101      	movs	r1, #1
 800877c:	2001      	movs	r0, #1
 800877e:	f000 fb9b 	bl	8008eb8 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008782:	4a0e      	ldr	r2, [pc, #56]	@ (80087bc <passConfirmation+0x98>)
 8008784:	2101      	movs	r1, #1
 8008786:	2002      	movs	r0, #2
 8008788:	f000 fb96 	bl	8008eb8 <lcd_print>
        HAL_Delay(1250);
 800878c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008790:	f001 f8fe 	bl	8009990 <HAL_Delay>

        return 0;
 8008794:	2300      	movs	r3, #0
 8008796:	e003      	b.n	80087a0 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008798:	2001      	movs	r0, #1
 800879a:	f7f7 ff83 	bl	80006a4 <saveEEPROM>

    	return 1;
 800879e:	2301      	movs	r3, #1
    }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	0800f0a0 	.word	0x0800f0a0
 80087ac:	20001eb0 	.word	0x20001eb0
 80087b0:	40010800 	.word	0x40010800
 80087b4:	20001534 	.word	0x20001534
 80087b8:	20001de8 	.word	0x20001de8
 80087bc:	20001dfc 	.word	0x20001dfc

080087c0 <takeWifiPass>:

void takeWifiPass() {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80087c6:	2001      	movs	r0, #1
 80087c8:	f000 fbd4 	bl	8008f74 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80087cc:	2210      	movs	r2, #16
 80087ce:	2100      	movs	r1, #0
 80087d0:	48a4      	ldr	r0, [pc, #656]	@ (8008a64 <takeWifiPass+0x2a4>)
 80087d2:	f005 f919 	bl	800da08 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80087d6:	2301      	movs	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80087da:	2307      	movs	r3, #7
 80087dc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80087de:	2301      	movs	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80087e6:	4ba0      	ldr	r3, [pc, #640]	@ (8008a68 <takeWifiPass+0x2a8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80087ec:	2101      	movs	r1, #1
 80087ee:	2003      	movs	r0, #3
 80087f0:	f7f8 fda8 	bl	8001344 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80087f4:	2108      	movs	r1, #8
 80087f6:	489d      	ldr	r0, [pc, #628]	@ (8008a6c <takeWifiPass+0x2ac>)
 80087f8:	f001 fe9a 	bl	800a530 <HAL_GPIO_ReadPin>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d106      	bne.n	8008810 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008802:	f7ff ff8f 	bl	8008724 <passConfirmation>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	f040 8126 	bne.w	8008a5a <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800880e:	e7da      	b.n	80087c6 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008810:	2101      	movs	r1, #1
 8008812:	4896      	ldr	r0, [pc, #600]	@ (8008a6c <takeWifiPass+0x2ac>)
 8008814:	f001 fe8c 	bl	800a530 <HAL_GPIO_ReadPin>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d14d      	bne.n	80088ba <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b50      	cmp	r3, #80	@ 0x50
 8008822:	dd01      	ble.n	8008828 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008824:	2301      	movs	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b10      	cmp	r3, #16
 800882c:	d13f      	bne.n	80088ae <takeWifiPass+0xee>
            	if(page == 1) {
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d109      	bne.n	8008848 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008834:	2301      	movs	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
            		page++;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	3301      	adds	r3, #1
 800883c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800883e:	2102      	movs	r1, #2
 8008840:	2003      	movs	r0, #3
 8008842:	f7f8 fd7f 	bl	8001344 <printTemplate>
 8008846:	e035      	b.n	80088b4 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d109      	bne.n	8008862 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 800884e:	2301      	movs	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
            		page++;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	3301      	adds	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008858:	2103      	movs	r1, #3
 800885a:	2003      	movs	r0, #3
 800885c:	f7f8 fd72 	bl	8001344 <printTemplate>
 8008860:	e028      	b.n	80088b4 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b03      	cmp	r3, #3
 8008866:	d109      	bne.n	800887c <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8008868:	2301      	movs	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
            		page++;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	3301      	adds	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008872:	2104      	movs	r1, #4
 8008874:	2003      	movs	r0, #3
 8008876:	f7f8 fd65 	bl	8001344 <printTemplate>
 800887a:	e01b      	b.n	80088b4 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b04      	cmp	r3, #4
 8008880:	d109      	bne.n	8008896 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008882:	2301      	movs	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]
            		page++;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	3301      	adds	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800888c:	2105      	movs	r1, #5
 800888e:	2003      	movs	r0, #3
 8008890:	f7f8 fd58 	bl	8001344 <printTemplate>
 8008894:	e00e      	b.n	80088b4 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b05      	cmp	r3, #5
 800889a:	d10b      	bne.n	80088b4 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 800889c:	2301      	movs	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80088a0:	2301      	movs	r3, #1
 80088a2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80088a4:	2101      	movs	r1, #1
 80088a6:	2003      	movs	r0, #3
 80088a8:	f7f8 fd4c 	bl	8001344 <printTemplate>
 80088ac:	e002      	b.n	80088b4 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80088b4:	2096      	movs	r0, #150	@ 0x96
 80088b6:	f001 f86b 	bl	8009990 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80088ba:	2108      	movs	r1, #8
 80088bc:	486c      	ldr	r0, [pc, #432]	@ (8008a70 <takeWifiPass+0x2b0>)
 80088be:	f001 fe37 	bl	800a530 <HAL_GPIO_ReadPin>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d149      	bne.n	800895c <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dc01      	bgt.n	80088d2 <takeWifiPass+0x112>
        		cursorPosition = 80;
 80088ce:	2350      	movs	r3, #80	@ 0x50
 80088d0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d13b      	bne.n	8008950 <takeWifiPass+0x190>
            	if(page == 1) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d108      	bne.n	80088f0 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80088de:	2310      	movs	r3, #16
 80088e0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80088e2:	2305      	movs	r3, #5
 80088e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80088e6:	2105      	movs	r1, #5
 80088e8:	2003      	movs	r0, #3
 80088ea:	f7f8 fd2b 	bl	8001344 <printTemplate>
 80088ee:	e032      	b.n	8008956 <takeWifiPass+0x196>
            	} else if(page == 2) {
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d108      	bne.n	8008908 <takeWifiPass+0x148>
            		cursorPosition = 16;
 80088f6:	2310      	movs	r3, #16
 80088f8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80088fa:	2301      	movs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80088fe:	2101      	movs	r1, #1
 8008900:	2003      	movs	r0, #3
 8008902:	f7f8 fd1f 	bl	8001344 <printTemplate>
 8008906:	e026      	b.n	8008956 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d108      	bne.n	8008920 <takeWifiPass+0x160>
            		cursorPosition = 16;
 800890e:	2310      	movs	r3, #16
 8008910:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008912:	2302      	movs	r3, #2
 8008914:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008916:	2102      	movs	r1, #2
 8008918:	2003      	movs	r0, #3
 800891a:	f7f8 fd13 	bl	8001344 <printTemplate>
 800891e:	e01a      	b.n	8008956 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2b04      	cmp	r3, #4
 8008924:	d108      	bne.n	8008938 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008926:	2310      	movs	r3, #16
 8008928:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800892a:	2303      	movs	r3, #3
 800892c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800892e:	2103      	movs	r1, #3
 8008930:	2003      	movs	r0, #3
 8008932:	f7f8 fd07 	bl	8001344 <printTemplate>
 8008936:	e00e      	b.n	8008956 <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b05      	cmp	r3, #5
 800893c:	d10b      	bne.n	8008956 <takeWifiPass+0x196>
            		cursorPosition = 16;
 800893e:	2310      	movs	r3, #16
 8008940:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008942:	2304      	movs	r3, #4
 8008944:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008946:	2104      	movs	r1, #4
 8008948:	2003      	movs	r0, #3
 800894a:	f7f8 fcfb 	bl	8001344 <printTemplate>
 800894e:	e002      	b.n	8008956 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b01      	subs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008956:	2096      	movs	r0, #150	@ 0x96
 8008958:	f001 f81a 	bl	8009990 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800895c:	2102      	movs	r1, #2
 800895e:	4843      	ldr	r0, [pc, #268]	@ (8008a6c <takeWifiPass+0x2ac>)
 8008960:	f001 fde6 	bl	800a530 <HAL_GPIO_ReadPin>
 8008964:	4603      	mov	r3, r0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d12f      	bne.n	80089ca <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	b2d9      	uxtb	r1, r3
 800896e:	4a41      	ldr	r2, [pc, #260]	@ (8008a74 <takeWifiPass+0x2b4>)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	460a      	mov	r2, r1
 8008976:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008978:	4a3f      	ldr	r2, [pc, #252]	@ (8008a78 <takeWifiPass+0x2b8>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	7819      	ldrb	r1, [r3, #0]
 8008980:	4a38      	ldr	r2, [pc, #224]	@ (8008a64 <takeWifiPass+0x2a4>)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4413      	add	r3, r2
 8008986:	460a      	mov	r2, r1
 8008988:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	b2d9      	uxtb	r1, r3
 800898e:	4a3a      	ldr	r2, [pc, #232]	@ (8008a78 <takeWifiPass+0x2b8>)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	2001      	movs	r0, #1
 800899a:	f000 faa2 	bl	8008ee2 <lcd_print_char>

            writeLoc++;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	3301      	adds	r3, #1
 80089a2:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	3301      	adds	r3, #1
 80089a8:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3301      	adds	r3, #1
 80089ae:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80089b0:	4a30      	ldr	r2, [pc, #192]	@ (8008a74 <takeWifiPass+0x2b4>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 80089ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008a64 <takeWifiPass+0x2a4>)
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4413      	add	r3, r2
 80089c0:	2200      	movs	r2, #0
 80089c2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80089c4:	2096      	movs	r0, #150	@ 0x96
 80089c6:	f000 ffe3 	bl	8009990 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80089ca:	2104      	movs	r1, #4
 80089cc:	4827      	ldr	r0, [pc, #156]	@ (8008a6c <takeWifiPass+0x2ac>)
 80089ce:	f001 fdaf 	bl	800a530 <HAL_GPIO_ReadPin>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d139      	bne.n	8008a4c <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 80089d8:	4b22      	ldr	r3, [pc, #136]	@ (8008a64 <takeWifiPass+0x2a4>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d032      	beq.n	8008a46 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 80089e0:	4a24      	ldr	r2, [pc, #144]	@ (8008a74 <takeWifiPass+0x2b4>)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80089ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008a64 <takeWifiPass+0x2a4>)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4413      	add	r3, r2
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	dd03      	ble.n	8008a02 <takeWifiPass+0x242>
        			writeLoc--;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	e004      	b.n	8008a0c <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b06      	cmp	r3, #6
 8008a06:	dc01      	bgt.n	8008a0c <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008a08:	2307      	movs	r3, #7
 8008a0a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd06      	ble.n	8008a20 <takeWifiPass+0x260>
        			arrayPosition--;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	607b      	str	r3, [r7, #4]
 8008a1e:	e007      	b.n	8008a30 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	da04      	bge.n	8008a30 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <takeWifiPass+0x2a8>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	3307      	adds	r3, #7
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	f000 fa72 	bl	8008f24 <lcd_delete_char>
        		HAL_Delay(50);
 8008a40:	2032      	movs	r0, #50	@ 0x32
 8008a42:	f000 ffa5 	bl	8009990 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008a46:	2096      	movs	r0, #150	@ 0x96
 8008a48:	f000 ffa2 	bl	8009990 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	2002      	movs	r0, #2
 8008a54:	f000 fa11 	bl	8008e7a <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008a58:	e6cc      	b.n	80087f4 <takeWifiPass+0x34>
    	        break;
 8008a5a:	bf00      	nop
    }
}
 8008a5c:	bf00      	nop
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20001534 	.word	0x20001534
 8008a68:	20000008 	.word	0x20000008
 8008a6c:	40010800 	.word	0x40010800
 8008a70:	40011000 	.word	0x40011000
 8008a74:	200014a0 	.word	0x200014a0
 8008a78:	20000018 	.word	0x20000018

08008a7c <iotSetup>:

	HAL_Delay(500);
	lcd_clear();
}

void iotSetup() {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008a80:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <iotSetup+0x50>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01f      	beq.n	8008ac8 <iotSetup+0x4c>
		if(checkEEPROM4ID() != 1) {
 8008a88:	f000 f82c 	bl	8008ae4 <checkEEPROM4ID>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d001      	beq.n	8008a96 <iotSetup+0x1a>
			takeMachineID();
 8008a92:	f7ff fb13 	bl	80080bc <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008a96:	480e      	ldr	r0, [pc, #56]	@ (8008ad0 <iotSetup+0x54>)
 8008a98:	f7f7 fbc4 	bl	8000224 <strlen>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d801      	bhi.n	8008aa6 <iotSetup+0x2a>
			takeWifiSSID();
 8008aa2:	f7ff fce1 	bl	8008468 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008aa6:	480b      	ldr	r0, [pc, #44]	@ (8008ad4 <iotSetup+0x58>)
 8008aa8:	f7f7 fbbc 	bl	8000224 <strlen>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d801      	bhi.n	8008ab6 <iotSetup+0x3a>
			takeWifiPass();
 8008ab2:	f7ff fe85 	bl	80087c0 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008ab6:	4a08      	ldr	r2, [pc, #32]	@ (8008ad8 <iotSetup+0x5c>)
 8008ab8:	4908      	ldr	r1, [pc, #32]	@ (8008adc <iotSetup+0x60>)
 8008aba:	4809      	ldr	r0, [pc, #36]	@ (8008ae0 <iotSetup+0x64>)
 8008abc:	f7f8 f9da 	bl	8000e74 <ESP8266_Init>
		HAL_Delay(500);
 8008ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008ac4:	f000 ff64 	bl	8009990 <HAL_Delay>
		//convertAndSendData();
	}
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	2000159b 	.word	0x2000159b
 8008ad0:	20001524 	.word	0x20001524
 8008ad4:	20001534 	.word	0x20001534
 8008ad8:	0800f0b8 	.word	0x0800f0b8
 8008adc:	0800f0d0 	.word	0x0800f0d0
 8008ae0:	20001f88 	.word	0x20001f88

08008ae4 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008aea:	4b0f      	ldr	r3, [pc, #60]	@ (8008b28 <checkEEPROM4ID+0x44>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008af0:	2301      	movs	r3, #1
 8008af2:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008af4:	2300      	movs	r3, #0
 8008af6:	607b      	str	r3, [r7, #4]
 8008af8:	e00d      	b.n	8008b16 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008afa:	4a0c      	ldr	r2, [pc, #48]	@ (8008b2c <checkEEPROM4ID+0x48>)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3301      	adds	r3, #1
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b0b      	cmp	r3, #11
 8008b1a:	ddee      	ble.n	8008afa <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr
 8008b28:	20000000 	.word	0x20000000
 8008b2c:	200014a0 	.word	0x200014a0

08008b30 <az5>:

int az5() {
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
	...

08008b40 <DWT_Delay_us>:
  }
}


void DWT_Delay_us(volatile uint32_t microseconds)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8008b48:	4b0d      	ldr	r3, [pc, #52]	@ (8008b80 <DWT_Delay_us+0x40>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8008b4e:	f003 fb19 	bl	800c184 <HAL_RCC_GetHCLKFreq>
 8008b52:	4603      	mov	r3, r0
 8008b54:	4a0b      	ldr	r2, [pc, #44]	@ (8008b84 <DWT_Delay_us+0x44>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	0c9b      	lsrs	r3, r3, #18
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8008b64:	bf00      	nop
 8008b66:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <DWT_Delay_us+0x40>)
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1ad2      	subs	r2, r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3f8      	bcc.n	8008b66 <DWT_Delay_us+0x26>
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	e0001000 	.word	0xe0001000
 8008b84:	431bde83 	.word	0x431bde83

08008b88 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	f023 030f 	bic.w	r3, r3, #15
 8008b98:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008ba0:	7b7b      	ldrb	r3, [r7, #13]
 8008ba2:	f043 030c 	orr.w	r3, r3, #12
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008baa:	7b7b      	ldrb	r3, [r7, #13]
 8008bac:	f043 0308 	orr.w	r3, r3, #8
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008bb4:	7b3b      	ldrb	r3, [r7, #12]
 8008bb6:	f043 030c 	orr.w	r3, r3, #12
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008bbe:	7b3b      	ldrb	r3, [r7, #12]
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008bc8:	bf00      	nop
 8008bca:	4825      	ldr	r0, [pc, #148]	@ (8008c60 <lcd_send_cmd+0xd8>)
 8008bcc:	f002 fad9 	bl	800b182 <HAL_I2C_GetError>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d0f9      	beq.n	8008bca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008bd6:	bf00      	nop
 8008bd8:	4821      	ldr	r0, [pc, #132]	@ (8008c60 <lcd_send_cmd+0xd8>)
 8008bda:	f002 fac5 	bl	800b168 <HAL_I2C_GetState>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d1f9      	bne.n	8008bd8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008be4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c64 <lcd_send_cmd+0xdc>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d116      	bne.n	8008c1a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	e00f      	b.n	8008c12 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	3310      	adds	r3, #16
 8008bf6:	443b      	add	r3, r7
 8008bf8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	f022 0208 	bic.w	r2, r2, #8
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	3310      	adds	r3, #16
 8008c06:	443b      	add	r3, r7
 8008c08:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d9ec      	bls.n	8008bf2 <lcd_send_cmd+0x6a>
 8008c18:	e015      	b.n	8008c46 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73bb      	strb	r3, [r7, #14]
 8008c1e:	e00f      	b.n	8008c40 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	3310      	adds	r3, #16
 8008c24:	443b      	add	r3, r7
 8008c26:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	f042 0208 	orr.w	r2, r2, #8
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	3310      	adds	r3, #16
 8008c34:	443b      	add	r3, r7
 8008c36:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	73bb      	strb	r3, [r7, #14]
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d9ec      	bls.n	8008c20 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008c46:	f107 0208 	add.w	r2, r7, #8
 8008c4a:	2364      	movs	r3, #100	@ 0x64
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	2304      	movs	r3, #4
 8008c50:	214e      	movs	r1, #78	@ 0x4e
 8008c52:	4803      	ldr	r0, [pc, #12]	@ (8008c60 <lcd_send_cmd+0xd8>)
 8008c54:	f001 fe28 	bl	800a8a8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20001eec 	.word	0x20001eec
 8008c64:	20001ec1 	.word	0x20001ec1

08008c68 <lcd_send_data>:

void lcd_send_data (char data) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	f023 030f 	bic.w	r3, r3, #15
 8008c78:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008c80:	7b7b      	ldrb	r3, [r7, #13]
 8008c82:	f043 030d 	orr.w	r3, r3, #13
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008c8a:	7b7b      	ldrb	r3, [r7, #13]
 8008c8c:	f043 0309 	orr.w	r3, r3, #9
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008c94:	7b3b      	ldrb	r3, [r7, #12]
 8008c96:	f043 030d 	orr.w	r3, r3, #13
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008c9e:	7b3b      	ldrb	r3, [r7, #12]
 8008ca0:	f043 0309 	orr.w	r3, r3, #9
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ca8:	bf00      	nop
 8008caa:	4825      	ldr	r0, [pc, #148]	@ (8008d40 <lcd_send_data+0xd8>)
 8008cac:	f002 fa69 	bl	800b182 <HAL_I2C_GetError>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	d0f9      	beq.n	8008caa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008cb6:	bf00      	nop
 8008cb8:	4821      	ldr	r0, [pc, #132]	@ (8008d40 <lcd_send_data+0xd8>)
 8008cba:	f002 fa55 	bl	800b168 <HAL_I2C_GetState>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d1f9      	bne.n	8008cb8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d44 <lcd_send_data+0xdc>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d116      	bne.n	8008cfa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	e00f      	b.n	8008cf2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	443b      	add	r3, r7
 8008cd8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	f022 0208 	bic.w	r2, r2, #8
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	3310      	adds	r3, #16
 8008ce6:	443b      	add	r3, r7
 8008ce8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d9ec      	bls.n	8008cd2 <lcd_send_data+0x6a>
 8008cf8:	e015      	b.n	8008d26 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73bb      	strb	r3, [r7, #14]
 8008cfe:	e00f      	b.n	8008d20 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	3310      	adds	r3, #16
 8008d04:	443b      	add	r3, r7
 8008d06:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	f042 0208 	orr.w	r2, r2, #8
 8008d10:	b2d2      	uxtb	r2, r2
 8008d12:	3310      	adds	r3, #16
 8008d14:	443b      	add	r3, r7
 8008d16:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	73bb      	strb	r3, [r7, #14]
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d9ec      	bls.n	8008d00 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008d26:	f107 0208 	add.w	r2, r7, #8
 8008d2a:	2364      	movs	r3, #100	@ 0x64
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	2304      	movs	r3, #4
 8008d30:	214e      	movs	r1, #78	@ 0x4e
 8008d32:	4803      	ldr	r0, [pc, #12]	@ (8008d40 <lcd_send_data+0xd8>)
 8008d34:	f001 fdb8 	bl	800a8a8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20001eec 	.word	0x20001eec
 8008d44:	20001ec1 	.word	0x20001ec1

08008d48 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008d50:	e006      	b.n	8008d60 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff ff84 	bl	8008c68 <lcd_send_data>
	while (*str) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f4      	bne.n	8008d52 <lcd_send_string+0xa>
	}
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	f023 030f 	bic.w	r3, r3, #15
 8008d84:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008d8c:	7b7b      	ldrb	r3, [r7, #13]
 8008d8e:	f043 030d 	orr.w	r3, r3, #13
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008d96:	7b7b      	ldrb	r3, [r7, #13]
 8008d98:	f043 0309 	orr.w	r3, r3, #9
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008da0:	7b3b      	ldrb	r3, [r7, #12]
 8008da2:	f043 030d 	orr.w	r3, r3, #13
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008daa:	7b3b      	ldrb	r3, [r7, #12]
 8008dac:	f043 0309 	orr.w	r3, r3, #9
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008db4:	bf00      	nop
 8008db6:	4825      	ldr	r0, [pc, #148]	@ (8008e4c <lcd_send_char+0xd8>)
 8008db8:	f002 f9e3 	bl	800b182 <HAL_I2C_GetError>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d0f9      	beq.n	8008db6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008dc2:	bf00      	nop
 8008dc4:	4821      	ldr	r0, [pc, #132]	@ (8008e4c <lcd_send_char+0xd8>)
 8008dc6:	f002 f9cf 	bl	800b168 <HAL_I2C_GetState>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d1f9      	bne.n	8008dc4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e50 <lcd_send_char+0xdc>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d116      	bne.n	8008e06 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e00f      	b.n	8008dfe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	3310      	adds	r3, #16
 8008de2:	443b      	add	r3, r7
 8008de4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	f022 0208 	bic.w	r2, r2, #8
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	3310      	adds	r3, #16
 8008df2:	443b      	add	r3, r7
 8008df4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d9ec      	bls.n	8008dde <lcd_send_char+0x6a>
 8008e04:	e015      	b.n	8008e32 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008e06:	2300      	movs	r3, #0
 8008e08:	73bb      	strb	r3, [r7, #14]
 8008e0a:	e00f      	b.n	8008e2c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	3310      	adds	r3, #16
 8008e10:	443b      	add	r3, r7
 8008e12:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	f042 0208 	orr.w	r2, r2, #8
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	3310      	adds	r3, #16
 8008e20:	443b      	add	r3, r7
 8008e22:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	73bb      	strb	r3, [r7, #14]
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d9ec      	bls.n	8008e0c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008e32:	f107 0208 	add.w	r2, r7, #8
 8008e36:	2364      	movs	r3, #100	@ 0x64
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	2304      	movs	r3, #4
 8008e3c:	214e      	movs	r1, #78	@ 0x4e
 8008e3e:	4803      	ldr	r0, [pc, #12]	@ (8008e4c <lcd_send_char+0xd8>)
 8008e40:	f001 fd32 	bl	800a8a8 <HAL_I2C_Master_Transmit>
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20001eec 	.word	0x20001eec
 8008e50:	20001ec1 	.word	0x20001ec1

08008e54 <lcd_init>:

void lcd_init (void) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008e58:	2002      	movs	r0, #2
 8008e5a:	f7ff fe95 	bl	8008b88 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008e5e:	2028      	movs	r0, #40	@ 0x28
 8008e60:	f7ff fe92 	bl	8008b88 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008e64:	200c      	movs	r0, #12
 8008e66:	f7ff fe8f 	bl	8008b88 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008e6a:	2080      	movs	r0, #128	@ 0x80
 8008e6c:	f7ff fe8c 	bl	8008b88 <lcd_send_cmd>
	lcd_backlight(1);
 8008e70:	2001      	movs	r0, #1
 8008e72:	f000 f86d 	bl	8008f50 <lcd_backlight>
}
 8008e76:	bf00      	nop
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	4603      	mov	r3, r0
 8008e82:	460a      	mov	r2, r1
 8008e84:	71fb      	strb	r3, [r7, #7]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d106      	bne.n	8008e9e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008e90:	79bb      	ldrb	r3, [r7, #6]
 8008e92:	337f      	adds	r3, #127	@ 0x7f
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fe76 	bl	8008b88 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008e9c:	e008      	b.n	8008eb0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d105      	bne.n	8008eb0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008ea4:	79bb      	ldrb	r3, [r7, #6]
 8008ea6:	3b41      	subs	r3, #65	@ 0x41
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff fe6c 	bl	8008b88 <lcd_send_cmd>
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	603a      	str	r2, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008ec8:	79ba      	ldrb	r2, [r7, #6]
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff ffd3 	bl	8008e7a <lcd_gotoxy>
	lcd_send_string(str);
 8008ed4:	6838      	ldr	r0, [r7, #0]
 8008ed6:	f7ff ff37 	bl	8008d48 <lcd_send_string>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	4603      	mov	r3, r0
 8008eea:	71fb      	strb	r3, [r7, #7]
 8008eec:	460b      	mov	r3, r1
 8008eee:	71bb      	strb	r3, [r7, #6]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008ef4:	79ba      	ldrb	r2, [r7, #6]
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff ffbd 	bl	8008e7a <lcd_gotoxy>
    lcd_send_char(ch);
 8008f00:	797b      	ldrb	r3, [r7, #5]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff ff36 	bl	8008d74 <lcd_send_char>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <lcd_clear>:

void lcd_clear(void) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008f14:	2001      	movs	r0, #1
 8008f16:	f7ff fe37 	bl	8008b88 <lcd_send_cmd>
    HAL_Delay(2);
 8008f1a:	2002      	movs	r0, #2
 8008f1c:	f000 fd38 	bl	8009990 <HAL_Delay>
}
 8008f20:	bf00      	nop
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	460a      	mov	r2, r1
 8008f2e:	71fb      	strb	r3, [r7, #7]
 8008f30:	4613      	mov	r3, r2
 8008f32:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008f34:	79ba      	ldrb	r2, [r7, #6]
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff ff9d 	bl	8008e7a <lcd_gotoxy>

    lcd_send_char(' ');
 8008f40:	2020      	movs	r0, #32
 8008f42:	f7ff ff17 	bl	8008d74 <lcd_send_char>
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008f5a:	4a05      	ldr	r2, [pc, #20]	@ (8008f70 <lcd_backlight+0x20>)
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008f60:	2000      	movs	r0, #0
 8008f62:	f7ff fe11 	bl	8008b88 <lcd_send_cmd>
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20001ec1 	.word	0x20001ec1

08008f74 <lcd_cursor>:

void lcd_cursor(int state) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d106      	bne.n	8008f90 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008f82:	200e      	movs	r0, #14
 8008f84:	f7ff fe00 	bl	8008b88 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008f88:	200f      	movs	r0, #15
 8008f8a:	f7ff fdfd 	bl	8008b88 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008f8e:	e002      	b.n	8008f96 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008f90:	200c      	movs	r0, #12
 8008f92:	f7ff fdf9 	bl	8008b88 <lcd_send_cmd>
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008fa8:	4b04      	ldr	r3, [pc, #16]	@ (8008fbc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	4a03      	ldr	r2, [pc, #12]	@ (8008fbc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008fb0:	6013      	str	r3, [r2, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr
 8008fbc:	20001548 	.word	0x20001548

08008fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008fc6:	f000 fc81 	bl	80098cc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008fca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008fce:	f000 fcdf 	bl	8009990 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008fd2:	f000 f8ad 	bl	8009130 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008fd6:	f000 f9cf 	bl	8009378 <MX_GPIO_Init>
  MX_CAN_Init();
 8008fda:	f000 f8ef 	bl	80091bc <MX_CAN_Init>
  MX_I2C1_Init();
 8008fde:	f000 f921 	bl	8009224 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008fe2:	f000 f94d 	bl	8009280 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008fe6:	f000 f99d 	bl	8009324 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008fea:	2201      	movs	r2, #1
 8008fec:	2140      	movs	r1, #64	@ 0x40
 8008fee:	4845      	ldr	r0, [pc, #276]	@ (8009104 <main+0x144>)
 8008ff0:	f001 fab5 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	2180      	movs	r1, #128	@ 0x80
 8008ff8:	4842      	ldr	r0, [pc, #264]	@ (8009104 <main+0x144>)
 8008ffa:	f001 fab0 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008ffe:	200a      	movs	r0, #10
 8009000:	f000 fcc6 	bl	8009990 <HAL_Delay>
  lcd_init();
 8009004:	f7ff ff26 	bl	8008e54 <lcd_init>
  HAL_Delay(10);
 8009008:	200a      	movs	r0, #10
 800900a:	f000 fcc1 	bl	8009990 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800900e:	483e      	ldr	r0, [pc, #248]	@ (8009108 <main+0x148>)
 8009010:	f003 f958 	bl	800c2c4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009014:	bf00      	nop
 8009016:	483d      	ldr	r0, [pc, #244]	@ (800910c <main+0x14c>)
 8009018:	f002 f8b3 	bl	800b182 <HAL_I2C_GetError>
 800901c:	4603      	mov	r3, r0
 800901e:	2b04      	cmp	r3, #4
 8009020:	d0f9      	beq.n	8009016 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009022:	bf00      	nop
 8009024:	4839      	ldr	r0, [pc, #228]	@ (800910c <main+0x14c>)
 8009026:	f002 f89f 	bl	800b168 <HAL_I2C_GetState>
 800902a:	4603      	mov	r3, r0
 800902c:	2b20      	cmp	r3, #32
 800902e:	d1f9      	bne.n	8009024 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8009030:	2200      	movs	r2, #0
 8009032:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009036:	4833      	ldr	r0, [pc, #204]	@ (8009104 <main+0x144>)
 8009038:	f001 fa91 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800903c:	2200      	movs	r2, #0
 800903e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009042:	4830      	ldr	r0, [pc, #192]	@ (8009104 <main+0x144>)
 8009044:	f001 fa8b 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8009048:	2200      	movs	r2, #0
 800904a:	2104      	movs	r1, #4
 800904c:	482d      	ldr	r0, [pc, #180]	@ (8009104 <main+0x144>)
 800904e:	f001 fa86 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009052:	2200      	movs	r2, #0
 8009054:	2102      	movs	r1, #2
 8009056:	482b      	ldr	r0, [pc, #172]	@ (8009104 <main+0x144>)
 8009058:	f001 fa81 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800905c:	2200      	movs	r2, #0
 800905e:	2101      	movs	r1, #1
 8009060:	4828      	ldr	r0, [pc, #160]	@ (8009104 <main+0x144>)
 8009062:	f001 fa7c 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009066:	2200      	movs	r2, #0
 8009068:	2120      	movs	r1, #32
 800906a:	4829      	ldr	r0, [pc, #164]	@ (8009110 <main+0x150>)
 800906c:	f001 fa77 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009070:	2200      	movs	r2, #0
 8009072:	2110      	movs	r1, #16
 8009074:	4826      	ldr	r0, [pc, #152]	@ (8009110 <main+0x150>)
 8009076:	f001 fa72 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800907a:	2200      	movs	r2, #0
 800907c:	2180      	movs	r1, #128	@ 0x80
 800907e:	4825      	ldr	r0, [pc, #148]	@ (8009114 <main+0x154>)
 8009080:	f001 fa6d 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009084:	2200      	movs	r2, #0
 8009086:	2140      	movs	r1, #64	@ 0x40
 8009088:	4822      	ldr	r0, [pc, #136]	@ (8009114 <main+0x154>)
 800908a:	f001 fa68 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800908e:	2200      	movs	r2, #0
 8009090:	2120      	movs	r1, #32
 8009092:	4820      	ldr	r0, [pc, #128]	@ (8009114 <main+0x154>)
 8009094:	f001 fa63 	bl	800a55e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009098:	2200      	movs	r2, #0
 800909a:	2110      	movs	r1, #16
 800909c:	481d      	ldr	r0, [pc, #116]	@ (8009114 <main+0x154>)
 800909e:	f001 fa5e 	bl	800a55e <HAL_GPIO_WritePin>

  i2cTest();
 80090a2:	f7f8 f8a1 	bl	80011e8 <i2cTest>
  HAL_Delay(100);
 80090a6:	2064      	movs	r0, #100	@ 0x64
 80090a8:	f000 fc72 	bl	8009990 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 80090ac:	4a1a      	ldr	r2, [pc, #104]	@ (8009118 <main+0x158>)
 80090ae:	2101      	movs	r1, #1
 80090b0:	2001      	movs	r0, #1
 80090b2:	f7ff ff01 	bl	8008eb8 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80090b6:	4a19      	ldr	r2, [pc, #100]	@ (800911c <main+0x15c>)
 80090b8:	2101      	movs	r1, #1
 80090ba:	2002      	movs	r0, #2
 80090bc:	f7ff fefc 	bl	8008eb8 <lcd_print>
  HAL_Delay(1000);
 80090c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80090c4:	f000 fc64 	bl	8009990 <HAL_Delay>
  lcd_clear();
 80090c8:	f7ff ff22 	bl	8008f10 <lcd_clear>

  eepromKontrol();
 80090cc:	f7f7 f8b2 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80090d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80090d4:	f000 fc5c 	bl	8009990 <HAL_Delay>

  backLightTimer = millis;
 80090d8:	4b11      	ldr	r3, [pc, #68]	@ (8009120 <main+0x160>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a11      	ldr	r2, [pc, #68]	@ (8009124 <main+0x164>)
 80090de:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 80090e0:	f7ff fccc 	bl	8008a7c <iotSetup>

  for(int i=0; i<2; i++) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	607b      	str	r3, [r7, #4]
 80090e8:	e006      	b.n	80090f8 <main+0x138>
	  checkForUpdates(&huart1, "1.0.0");
 80090ea:	490f      	ldr	r1, [pc, #60]	@ (8009128 <main+0x168>)
 80090ec:	480f      	ldr	r0, [pc, #60]	@ (800912c <main+0x16c>)
 80090ee:	f7f7 fef1 	bl	8000ed4 <checkForUpdates>
  for(int i=0; i<2; i++) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3301      	adds	r3, #1
 80090f6:	607b      	str	r3, [r7, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	ddf5      	ble.n	80090ea <main+0x12a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80090fe:	f7fc ff63 	bl	8005fc8 <mainLoop>
 8009102:	e7fc      	b.n	80090fe <main+0x13e>
 8009104:	40010c00 	.word	0x40010c00
 8009108:	20001f40 	.word	0x20001f40
 800910c:	20001eec 	.word	0x20001eec
 8009110:	40011000 	.word	0x40011000
 8009114:	40010800 	.word	0x40010800
 8009118:	2000009c 	.word	0x2000009c
 800911c:	200000b0 	.word	0x200000b0
 8009120:	20001548 	.word	0x20001548
 8009124:	20001564 	.word	0x20001564
 8009128:	0800f0d8 	.word	0x0800f0d8
 800912c:	20001f88 	.word	0x20001f88

08009130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b090      	sub	sp, #64	@ 0x40
 8009134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009136:	f107 0318 	add.w	r3, r7, #24
 800913a:	2228      	movs	r2, #40	@ 0x28
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f004 fc62 	bl	800da08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009144:	1d3b      	adds	r3, r7, #4
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	609a      	str	r2, [r3, #8]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009152:	2301      	movs	r3, #1
 8009154:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009156:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800915a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800915c:	2300      	movs	r3, #0
 800915e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009160:	2301      	movs	r3, #1
 8009162:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009164:	2302      	movs	r3, #2
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800916c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800916e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009174:	f107 0318 	add.w	r3, r7, #24
 8009178:	4618      	mov	r0, r3
 800917a:	f002 fc43 	bl	800ba04 <HAL_RCC_OscConfig>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009184:	f000 f9a2 	bl	80094cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009188:	230f      	movs	r3, #15
 800918a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800918c:	2302      	movs	r3, #2
 800918e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800919a:	2300      	movs	r3, #0
 800919c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800919e:	1d3b      	adds	r3, r7, #4
 80091a0:	2102      	movs	r1, #2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f002 feb0 	bl	800bf08 <HAL_RCC_ClockConfig>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80091ae:	f000 f98d 	bl	80094cc <Error_Handler>
  }
}
 80091b2:	bf00      	nop
 80091b4:	3740      	adds	r7, #64	@ 0x40
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80091c0:	4b16      	ldr	r3, [pc, #88]	@ (800921c <MX_CAN_Init+0x60>)
 80091c2:	4a17      	ldr	r2, [pc, #92]	@ (8009220 <MX_CAN_Init+0x64>)
 80091c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80091c6:	4b15      	ldr	r3, [pc, #84]	@ (800921c <MX_CAN_Init+0x60>)
 80091c8:	2210      	movs	r2, #16
 80091ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80091cc:	4b13      	ldr	r3, [pc, #76]	@ (800921c <MX_CAN_Init+0x60>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80091d2:	4b12      	ldr	r3, [pc, #72]	@ (800921c <MX_CAN_Init+0x60>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80091d8:	4b10      	ldr	r3, [pc, #64]	@ (800921c <MX_CAN_Init+0x60>)
 80091da:	2200      	movs	r2, #0
 80091dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80091de:	4b0f      	ldr	r3, [pc, #60]	@ (800921c <MX_CAN_Init+0x60>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80091e4:	4b0d      	ldr	r3, [pc, #52]	@ (800921c <MX_CAN_Init+0x60>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80091ea:	4b0c      	ldr	r3, [pc, #48]	@ (800921c <MX_CAN_Init+0x60>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80091f0:	4b0a      	ldr	r3, [pc, #40]	@ (800921c <MX_CAN_Init+0x60>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80091f6:	4b09      	ldr	r3, [pc, #36]	@ (800921c <MX_CAN_Init+0x60>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80091fc:	4b07      	ldr	r3, [pc, #28]	@ (800921c <MX_CAN_Init+0x60>)
 80091fe:	2200      	movs	r2, #0
 8009200:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009202:	4b06      	ldr	r3, [pc, #24]	@ (800921c <MX_CAN_Init+0x60>)
 8009204:	2200      	movs	r2, #0
 8009206:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009208:	4804      	ldr	r0, [pc, #16]	@ (800921c <MX_CAN_Init+0x60>)
 800920a:	f000 fbe5 	bl	80099d8 <HAL_CAN_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009214:	f000 f95a 	bl	80094cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009218:	bf00      	nop
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20001ec4 	.word	0x20001ec4
 8009220:	40006400 	.word	0x40006400

08009224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009228:	4b12      	ldr	r3, [pc, #72]	@ (8009274 <MX_I2C1_Init+0x50>)
 800922a:	4a13      	ldr	r2, [pc, #76]	@ (8009278 <MX_I2C1_Init+0x54>)
 800922c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800922e:	4b11      	ldr	r3, [pc, #68]	@ (8009274 <MX_I2C1_Init+0x50>)
 8009230:	4a12      	ldr	r2, [pc, #72]	@ (800927c <MX_I2C1_Init+0x58>)
 8009232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009234:	4b0f      	ldr	r3, [pc, #60]	@ (8009274 <MX_I2C1_Init+0x50>)
 8009236:	2200      	movs	r2, #0
 8009238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800923a:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <MX_I2C1_Init+0x50>)
 800923c:	2200      	movs	r2, #0
 800923e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009240:	4b0c      	ldr	r3, [pc, #48]	@ (8009274 <MX_I2C1_Init+0x50>)
 8009242:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009248:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <MX_I2C1_Init+0x50>)
 800924a:	2200      	movs	r2, #0
 800924c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800924e:	4b09      	ldr	r3, [pc, #36]	@ (8009274 <MX_I2C1_Init+0x50>)
 8009250:	2200      	movs	r2, #0
 8009252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009254:	4b07      	ldr	r3, [pc, #28]	@ (8009274 <MX_I2C1_Init+0x50>)
 8009256:	2200      	movs	r2, #0
 8009258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800925a:	4b06      	ldr	r3, [pc, #24]	@ (8009274 <MX_I2C1_Init+0x50>)
 800925c:	2200      	movs	r2, #0
 800925e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009260:	4804      	ldr	r0, [pc, #16]	@ (8009274 <MX_I2C1_Init+0x50>)
 8009262:	f001 f9ad 	bl	800a5c0 <HAL_I2C_Init>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800926c:	f000 f92e 	bl	80094cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009270:	bf00      	nop
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20001eec 	.word	0x20001eec
 8009278:	40005400 	.word	0x40005400
 800927c:	00061a80 	.word	0x00061a80

08009280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	605a      	str	r2, [r3, #4]
 8009290:	609a      	str	r2, [r3, #8]
 8009292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009294:	463b      	mov	r3, r7
 8009296:	2200      	movs	r2, #0
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800929c:	4b1f      	ldr	r3, [pc, #124]	@ (800931c <MX_TIM1_Init+0x9c>)
 800929e:	4a20      	ldr	r2, [pc, #128]	@ (8009320 <MX_TIM1_Init+0xa0>)
 80092a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80092a2:	4b1e      	ldr	r3, [pc, #120]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092a4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80092a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092aa:	4b1c      	ldr	r3, [pc, #112]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80092b0:	4b1a      	ldr	r3, [pc, #104]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092b2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80092b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092b8:	4b18      	ldr	r3, [pc, #96]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80092be:	4b17      	ldr	r3, [pc, #92]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092c4:	4b15      	ldr	r3, [pc, #84]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80092ca:	4814      	ldr	r0, [pc, #80]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092cc:	f002 ffaa 	bl	800c224 <HAL_TIM_Base_Init>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80092d6:	f000 f8f9 	bl	80094cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80092da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80092e0:	f107 0308 	add.w	r3, r7, #8
 80092e4:	4619      	mov	r1, r3
 80092e6:	480d      	ldr	r0, [pc, #52]	@ (800931c <MX_TIM1_Init+0x9c>)
 80092e8:	f003 f954 	bl	800c594 <HAL_TIM_ConfigClockSource>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80092f2:	f000 f8eb 	bl	80094cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092f6:	2300      	movs	r3, #0
 80092f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80092fe:	463b      	mov	r3, r7
 8009300:	4619      	mov	r1, r3
 8009302:	4806      	ldr	r0, [pc, #24]	@ (800931c <MX_TIM1_Init+0x9c>)
 8009304:	f003 fb42 	bl	800c98c <HAL_TIMEx_MasterConfigSynchronization>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800930e:	f000 f8dd 	bl	80094cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009312:	bf00      	nop
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20001f40 	.word	0x20001f40
 8009320:	40012c00 	.word	0x40012c00

08009324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009328:	4b11      	ldr	r3, [pc, #68]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 800932a:	4a12      	ldr	r2, [pc, #72]	@ (8009374 <MX_USART1_UART_Init+0x50>)
 800932c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800932e:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 8009330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009336:	4b0e      	ldr	r3, [pc, #56]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 8009338:	2200      	movs	r2, #0
 800933a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800933c:	4b0c      	ldr	r3, [pc, #48]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 800933e:	2200      	movs	r2, #0
 8009340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 8009344:	2200      	movs	r2, #0
 8009346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009348:	4b09      	ldr	r3, [pc, #36]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 800934a:	220c      	movs	r2, #12
 800934c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800934e:	4b08      	ldr	r3, [pc, #32]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 8009350:	2200      	movs	r2, #0
 8009352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009354:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 8009356:	2200      	movs	r2, #0
 8009358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800935a:	4805      	ldr	r0, [pc, #20]	@ (8009370 <MX_USART1_UART_Init+0x4c>)
 800935c:	f003 fb94 	bl	800ca88 <HAL_UART_Init>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009366:	f000 f8b1 	bl	80094cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800936a:	bf00      	nop
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20001f88 	.word	0x20001f88
 8009374:	40013800 	.word	0x40013800

08009378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800937e:	f107 0310 	add.w	r3, r7, #16
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	609a      	str	r2, [r3, #8]
 800938a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800938c:	4b4b      	ldr	r3, [pc, #300]	@ (80094bc <MX_GPIO_Init+0x144>)
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	4a4a      	ldr	r2, [pc, #296]	@ (80094bc <MX_GPIO_Init+0x144>)
 8009392:	f043 0310 	orr.w	r3, r3, #16
 8009396:	6193      	str	r3, [r2, #24]
 8009398:	4b48      	ldr	r3, [pc, #288]	@ (80094bc <MX_GPIO_Init+0x144>)
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80093a4:	4b45      	ldr	r3, [pc, #276]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	4a44      	ldr	r2, [pc, #272]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093aa:	f043 0320 	orr.w	r3, r3, #32
 80093ae:	6193      	str	r3, [r2, #24]
 80093b0:	4b42      	ldr	r3, [pc, #264]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80093bc:	4b3f      	ldr	r3, [pc, #252]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	4a3e      	ldr	r2, [pc, #248]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093c2:	f043 0304 	orr.w	r3, r3, #4
 80093c6:	6193      	str	r3, [r2, #24]
 80093c8:	4b3c      	ldr	r3, [pc, #240]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	607b      	str	r3, [r7, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80093d4:	4b39      	ldr	r3, [pc, #228]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	4a38      	ldr	r2, [pc, #224]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093da:	f043 0308 	orr.w	r3, r3, #8
 80093de:	6193      	str	r3, [r2, #24]
 80093e0:	4b36      	ldr	r3, [pc, #216]	@ (80094bc <MX_GPIO_Init+0x144>)
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80093ec:	2200      	movs	r2, #0
 80093ee:	21f0      	movs	r1, #240	@ 0xf0
 80093f0:	4833      	ldr	r0, [pc, #204]	@ (80094c0 <MX_GPIO_Init+0x148>)
 80093f2:	f001 f8b4 	bl	800a55e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80093f6:	2200      	movs	r2, #0
 80093f8:	f241 0130 	movw	r1, #4144	@ 0x1030
 80093fc:	4831      	ldr	r0, [pc, #196]	@ (80094c4 <MX_GPIO_Init+0x14c>)
 80093fe:	f001 f8ae 	bl	800a55e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009402:	2200      	movs	r2, #0
 8009404:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009408:	482f      	ldr	r0, [pc, #188]	@ (80094c8 <MX_GPIO_Init+0x150>)
 800940a:	f001 f8a8 	bl	800a55e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800940e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8009412:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009418:	2300      	movs	r3, #0
 800941a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800941c:	f107 0310 	add.w	r3, r7, #16
 8009420:	4619      	mov	r1, r3
 8009422:	4828      	ldr	r0, [pc, #160]	@ (80094c4 <MX_GPIO_Init+0x14c>)
 8009424:	f000 fe24 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009428:	f248 130f 	movw	r3, #33039	@ 0x810f
 800942c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009432:	2300      	movs	r3, #0
 8009434:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009436:	f107 0310 	add.w	r3, r7, #16
 800943a:	4619      	mov	r1, r3
 800943c:	4820      	ldr	r0, [pc, #128]	@ (80094c0 <MX_GPIO_Init+0x148>)
 800943e:	f000 fe17 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009442:	23f0      	movs	r3, #240	@ 0xf0
 8009444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009446:	2301      	movs	r3, #1
 8009448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800944a:	2300      	movs	r3, #0
 800944c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800944e:	2302      	movs	r3, #2
 8009450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009452:	f107 0310 	add.w	r3, r7, #16
 8009456:	4619      	mov	r1, r3
 8009458:	4819      	ldr	r0, [pc, #100]	@ (80094c0 <MX_GPIO_Init+0x148>)
 800945a:	f000 fe09 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800945e:	f241 0330 	movw	r3, #4144	@ 0x1030
 8009462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009464:	2301      	movs	r3, #1
 8009466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800946c:	2302      	movs	r3, #2
 800946e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009470:	f107 0310 	add.w	r3, r7, #16
 8009474:	4619      	mov	r1, r3
 8009476:	4813      	ldr	r0, [pc, #76]	@ (80094c4 <MX_GPIO_Init+0x14c>)
 8009478:	f000 fdfa 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800947c:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009480:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009482:	2301      	movs	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009486:	2300      	movs	r3, #0
 8009488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800948a:	2302      	movs	r3, #2
 800948c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800948e:	f107 0310 	add.w	r3, r7, #16
 8009492:	4619      	mov	r1, r3
 8009494:	480c      	ldr	r0, [pc, #48]	@ (80094c8 <MX_GPIO_Init+0x150>)
 8009496:	f000 fdeb 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800949a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800949e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094a0:	2300      	movs	r3, #0
 80094a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094a8:	f107 0310 	add.w	r3, r7, #16
 80094ac:	4619      	mov	r1, r3
 80094ae:	4806      	ldr	r0, [pc, #24]	@ (80094c8 <MX_GPIO_Init+0x150>)
 80094b0:	f000 fdde 	bl	800a070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80094b4:	bf00      	nop
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40021000 	.word	0x40021000
 80094c0:	40010800 	.word	0x40010800
 80094c4:	40011000 	.word	0x40011000
 80094c8:	40010c00 	.word	0x40010c00

080094cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80094d0:	bf00      	nop
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bc80      	pop	{r7}
 80094d6:	4770      	bx	lr

080094d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80094de:	4b15      	ldr	r3, [pc, #84]	@ (8009534 <HAL_MspInit+0x5c>)
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	4a14      	ldr	r2, [pc, #80]	@ (8009534 <HAL_MspInit+0x5c>)
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	6193      	str	r3, [r2, #24]
 80094ea:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <HAL_MspInit+0x5c>)
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	60bb      	str	r3, [r7, #8]
 80094f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80094f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <HAL_MspInit+0x5c>)
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009534 <HAL_MspInit+0x5c>)
 80094fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009500:	61d3      	str	r3, [r2, #28]
 8009502:	4b0c      	ldr	r3, [pc, #48]	@ (8009534 <HAL_MspInit+0x5c>)
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800950a:	607b      	str	r3, [r7, #4]
 800950c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800950e:	4b0a      	ldr	r3, [pc, #40]	@ (8009538 <HAL_MspInit+0x60>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	4a04      	ldr	r2, [pc, #16]	@ (8009538 <HAL_MspInit+0x60>)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr
 8009534:	40021000 	.word	0x40021000
 8009538:	40010000 	.word	0x40010000

0800953c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009544:	f107 0310 	add.w	r3, r7, #16
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	609a      	str	r2, [r3, #8]
 8009550:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1c      	ldr	r2, [pc, #112]	@ (80095c8 <HAL_CAN_MspInit+0x8c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d131      	bne.n	80095c0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800955c:	4b1b      	ldr	r3, [pc, #108]	@ (80095cc <HAL_CAN_MspInit+0x90>)
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	4a1a      	ldr	r2, [pc, #104]	@ (80095cc <HAL_CAN_MspInit+0x90>)
 8009562:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009566:	61d3      	str	r3, [r2, #28]
 8009568:	4b18      	ldr	r3, [pc, #96]	@ (80095cc <HAL_CAN_MspInit+0x90>)
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009574:	4b15      	ldr	r3, [pc, #84]	@ (80095cc <HAL_CAN_MspInit+0x90>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	4a14      	ldr	r2, [pc, #80]	@ (80095cc <HAL_CAN_MspInit+0x90>)
 800957a:	f043 0304 	orr.w	r3, r3, #4
 800957e:	6193      	str	r3, [r2, #24]
 8009580:	4b12      	ldr	r3, [pc, #72]	@ (80095cc <HAL_CAN_MspInit+0x90>)
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	60bb      	str	r3, [r7, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800958c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009596:	2300      	movs	r3, #0
 8009598:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	4619      	mov	r1, r3
 80095a0:	480b      	ldr	r0, [pc, #44]	@ (80095d0 <HAL_CAN_MspInit+0x94>)
 80095a2:	f000 fd65 	bl	800a070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80095a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095ac:	2302      	movs	r3, #2
 80095ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80095b0:	2303      	movs	r3, #3
 80095b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095b4:	f107 0310 	add.w	r3, r7, #16
 80095b8:	4619      	mov	r1, r3
 80095ba:	4805      	ldr	r0, [pc, #20]	@ (80095d0 <HAL_CAN_MspInit+0x94>)
 80095bc:	f000 fd58 	bl	800a070 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80095c0:	bf00      	nop
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40006400 	.word	0x40006400
 80095cc:	40021000 	.word	0x40021000
 80095d0:	40010800 	.word	0x40010800

080095d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095dc:	f107 0310 	add.w	r3, r7, #16
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a15      	ldr	r2, [pc, #84]	@ (8009644 <HAL_I2C_MspInit+0x70>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d123      	bne.n	800963c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095f4:	4b14      	ldr	r3, [pc, #80]	@ (8009648 <HAL_I2C_MspInit+0x74>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	4a13      	ldr	r2, [pc, #76]	@ (8009648 <HAL_I2C_MspInit+0x74>)
 80095fa:	f043 0308 	orr.w	r3, r3, #8
 80095fe:	6193      	str	r3, [r2, #24]
 8009600:	4b11      	ldr	r3, [pc, #68]	@ (8009648 <HAL_I2C_MspInit+0x74>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f003 0308 	and.w	r3, r3, #8
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800960c:	23c0      	movs	r3, #192	@ 0xc0
 800960e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009610:	2312      	movs	r3, #18
 8009612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009614:	2303      	movs	r3, #3
 8009616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009618:	f107 0310 	add.w	r3, r7, #16
 800961c:	4619      	mov	r1, r3
 800961e:	480b      	ldr	r0, [pc, #44]	@ (800964c <HAL_I2C_MspInit+0x78>)
 8009620:	f000 fd26 	bl	800a070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009624:	4b08      	ldr	r3, [pc, #32]	@ (8009648 <HAL_I2C_MspInit+0x74>)
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	4a07      	ldr	r2, [pc, #28]	@ (8009648 <HAL_I2C_MspInit+0x74>)
 800962a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800962e:	61d3      	str	r3, [r2, #28]
 8009630:	4b05      	ldr	r3, [pc, #20]	@ (8009648 <HAL_I2C_MspInit+0x74>)
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009638:	60bb      	str	r3, [r7, #8]
 800963a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800963c:	bf00      	nop
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40005400 	.word	0x40005400
 8009648:	40021000 	.word	0x40021000
 800964c:	40010c00 	.word	0x40010c00

08009650 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a0a      	ldr	r2, [pc, #40]	@ (8009688 <HAL_I2C_MspDeInit+0x38>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d10d      	bne.n	800967e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009662:	4b0a      	ldr	r3, [pc, #40]	@ (800968c <HAL_I2C_MspDeInit+0x3c>)
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	4a09      	ldr	r2, [pc, #36]	@ (800968c <HAL_I2C_MspDeInit+0x3c>)
 8009668:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800966c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800966e:	2140      	movs	r1, #64	@ 0x40
 8009670:	4807      	ldr	r0, [pc, #28]	@ (8009690 <HAL_I2C_MspDeInit+0x40>)
 8009672:	f000 fe91 	bl	800a398 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009676:	2180      	movs	r1, #128	@ 0x80
 8009678:	4805      	ldr	r0, [pc, #20]	@ (8009690 <HAL_I2C_MspDeInit+0x40>)
 800967a:	f000 fe8d 	bl	800a398 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	40005400 	.word	0x40005400
 800968c:	40021000 	.word	0x40021000
 8009690:	40010c00 	.word	0x40010c00

08009694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0d      	ldr	r2, [pc, #52]	@ (80096d8 <HAL_TIM_Base_MspInit+0x44>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d113      	bne.n	80096ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80096a6:	4b0d      	ldr	r3, [pc, #52]	@ (80096dc <HAL_TIM_Base_MspInit+0x48>)
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	4a0c      	ldr	r2, [pc, #48]	@ (80096dc <HAL_TIM_Base_MspInit+0x48>)
 80096ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80096b0:	6193      	str	r3, [r2, #24]
 80096b2:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <HAL_TIM_Base_MspInit+0x48>)
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80096be:	2200      	movs	r2, #0
 80096c0:	2100      	movs	r1, #0
 80096c2:	2019      	movs	r0, #25
 80096c4:	f000 fb5b 	bl	8009d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80096c8:	2019      	movs	r0, #25
 80096ca:	f000 fb74 	bl	8009db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	40012c00 	.word	0x40012c00
 80096dc:	40021000 	.word	0x40021000

080096e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096e8:	f107 0310 	add.w	r3, r7, #16
 80096ec:	2200      	movs	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	605a      	str	r2, [r3, #4]
 80096f2:	609a      	str	r2, [r3, #8]
 80096f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a20      	ldr	r2, [pc, #128]	@ (800977c <HAL_UART_MspInit+0x9c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d139      	bne.n	8009774 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009700:	4b1f      	ldr	r3, [pc, #124]	@ (8009780 <HAL_UART_MspInit+0xa0>)
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	4a1e      	ldr	r2, [pc, #120]	@ (8009780 <HAL_UART_MspInit+0xa0>)
 8009706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800970a:	6193      	str	r3, [r2, #24]
 800970c:	4b1c      	ldr	r3, [pc, #112]	@ (8009780 <HAL_UART_MspInit+0xa0>)
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009718:	4b19      	ldr	r3, [pc, #100]	@ (8009780 <HAL_UART_MspInit+0xa0>)
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	4a18      	ldr	r2, [pc, #96]	@ (8009780 <HAL_UART_MspInit+0xa0>)
 800971e:	f043 0304 	orr.w	r3, r3, #4
 8009722:	6193      	str	r3, [r2, #24]
 8009724:	4b16      	ldr	r3, [pc, #88]	@ (8009780 <HAL_UART_MspInit+0xa0>)
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	60bb      	str	r3, [r7, #8]
 800972e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009736:	2302      	movs	r3, #2
 8009738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800973a:	2303      	movs	r3, #3
 800973c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800973e:	f107 0310 	add.w	r3, r7, #16
 8009742:	4619      	mov	r1, r3
 8009744:	480f      	ldr	r0, [pc, #60]	@ (8009784 <HAL_UART_MspInit+0xa4>)
 8009746:	f000 fc93 	bl	800a070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800974a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800974e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009754:	2300      	movs	r3, #0
 8009756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009758:	f107 0310 	add.w	r3, r7, #16
 800975c:	4619      	mov	r1, r3
 800975e:	4809      	ldr	r0, [pc, #36]	@ (8009784 <HAL_UART_MspInit+0xa4>)
 8009760:	f000 fc86 	bl	800a070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009764:	2200      	movs	r2, #0
 8009766:	2100      	movs	r1, #0
 8009768:	2025      	movs	r0, #37	@ 0x25
 800976a:	f000 fb08 	bl	8009d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800976e:	2025      	movs	r0, #37	@ 0x25
 8009770:	f000 fb21 	bl	8009db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009774:	bf00      	nop
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40013800 	.word	0x40013800
 8009780:	40021000 	.word	0x40021000
 8009784:	40010800 	.word	0x40010800

08009788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800978c:	bf00      	nop
 800978e:	e7fd      	b.n	800978c <NMI_Handler+0x4>

08009790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009794:	bf00      	nop
 8009796:	e7fd      	b.n	8009794 <HardFault_Handler+0x4>

08009798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <MemManage_Handler+0x4>

080097a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80097a4:	bf00      	nop
 80097a6:	e7fd      	b.n	80097a4 <BusFault_Handler+0x4>

080097a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <UsageFault_Handler+0x4>

080097b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bc80      	pop	{r7}
 80097ba:	4770      	bx	lr

080097bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bc80      	pop	{r7}
 80097c6:	4770      	bx	lr

080097c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80097cc:	bf00      	nop
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr

080097d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80097d8:	f000 f8be 	bl	8009958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80097dc:	bf00      	nop
 80097de:	bd80      	pop	{r7, pc}

080097e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80097e4:	4802      	ldr	r0, [pc, #8]	@ (80097f0 <TIM1_UP_IRQHandler+0x10>)
 80097e6:	f002 fdcd 	bl	800c384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80097ea:	bf00      	nop
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20001f40 	.word	0x20001f40

080097f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80097f8:	4802      	ldr	r0, [pc, #8]	@ (8009804 <USART1_IRQHandler+0x10>)
 80097fa:	f003 fa3d 	bl	800cc78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80097fe:	bf00      	nop
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20001f88 	.word	0x20001f88

08009808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009810:	4a14      	ldr	r2, [pc, #80]	@ (8009864 <_sbrk+0x5c>)
 8009812:	4b15      	ldr	r3, [pc, #84]	@ (8009868 <_sbrk+0x60>)
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800981c:	4b13      	ldr	r3, [pc, #76]	@ (800986c <_sbrk+0x64>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009824:	4b11      	ldr	r3, [pc, #68]	@ (800986c <_sbrk+0x64>)
 8009826:	4a12      	ldr	r2, [pc, #72]	@ (8009870 <_sbrk+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800982a:	4b10      	ldr	r3, [pc, #64]	@ (800986c <_sbrk+0x64>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	429a      	cmp	r2, r3
 8009836:	d207      	bcs.n	8009848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009838:	f004 f8fe 	bl	800da38 <__errno>
 800983c:	4603      	mov	r3, r0
 800983e:	220c      	movs	r2, #12
 8009840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009846:	e009      	b.n	800985c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009848:	4b08      	ldr	r3, [pc, #32]	@ (800986c <_sbrk+0x64>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800984e:	4b07      	ldr	r3, [pc, #28]	@ (800986c <_sbrk+0x64>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4413      	add	r3, r2
 8009856:	4a05      	ldr	r2, [pc, #20]	@ (800986c <_sbrk+0x64>)
 8009858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800985a:	68fb      	ldr	r3, [r7, #12]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	2000c000 	.word	0x2000c000
 8009868:	00000400 	.word	0x00000400
 800986c:	20001fd0 	.word	0x20001fd0
 8009870:	20002120 	.word	0x20002120

08009874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr

08009880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009880:	480c      	ldr	r0, [pc, #48]	@ (80098b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009882:	490d      	ldr	r1, [pc, #52]	@ (80098b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009884:	4a0d      	ldr	r2, [pc, #52]	@ (80098bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009888:	e002      	b.n	8009890 <LoopCopyDataInit>

0800988a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800988a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800988c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800988e:	3304      	adds	r3, #4

08009890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009894:	d3f9      	bcc.n	800988a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009896:	4a0a      	ldr	r2, [pc, #40]	@ (80098c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009898:	4c0a      	ldr	r4, [pc, #40]	@ (80098c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800989a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800989c:	e001      	b.n	80098a2 <LoopFillZerobss>

0800989e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800989e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80098a0:	3204      	adds	r2, #4

080098a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80098a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80098a4:	d3fb      	bcc.n	800989e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80098a6:	f7ff ffe5 	bl	8009874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80098aa:	f004 f8cb 	bl	800da44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80098ae:	f7ff fb87 	bl	8008fc0 <main>
  bx lr
 80098b2:	4770      	bx	lr
  ldr r0, =_sdata
 80098b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80098b8:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 80098bc:	0800f174 	.word	0x0800f174
  ldr r2, =_sbss
 80098c0:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 80098c4:	20002120 	.word	0x20002120

080098c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80098c8:	e7fe      	b.n	80098c8 <ADC1_2_IRQHandler>
	...

080098cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098d0:	4b08      	ldr	r3, [pc, #32]	@ (80098f4 <HAL_Init+0x28>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a07      	ldr	r2, [pc, #28]	@ (80098f4 <HAL_Init+0x28>)
 80098d6:	f043 0310 	orr.w	r3, r3, #16
 80098da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098dc:	2003      	movs	r0, #3
 80098de:	f000 fa43 	bl	8009d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80098e2:	200f      	movs	r0, #15
 80098e4:	f000 f808 	bl	80098f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098e8:	f7ff fdf6 	bl	80094d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40022000 	.word	0x40022000

080098f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009900:	4b12      	ldr	r3, [pc, #72]	@ (800994c <HAL_InitTick+0x54>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b12      	ldr	r3, [pc, #72]	@ (8009950 <HAL_InitTick+0x58>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4619      	mov	r1, r3
 800990a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800990e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009912:	fbb2 f3f3 	udiv	r3, r2, r3
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fa5b 	bl	8009dd2 <HAL_SYSTICK_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e00e      	b.n	8009944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b0f      	cmp	r3, #15
 800992a:	d80a      	bhi.n	8009942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800992c:	2200      	movs	r2, #0
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009934:	f000 fa23 	bl	8009d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009938:	4a06      	ldr	r2, [pc, #24]	@ (8009954 <HAL_InitTick+0x5c>)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	e000      	b.n	8009944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000f74 	.word	0x20000f74
 8009950:	20000f7c 	.word	0x20000f7c
 8009954:	20000f78 	.word	0x20000f78

08009958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800995c:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <HAL_IncTick+0x1c>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	4b05      	ldr	r3, [pc, #20]	@ (8009978 <HAL_IncTick+0x20>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4413      	add	r3, r2
 8009968:	4a03      	ldr	r2, [pc, #12]	@ (8009978 <HAL_IncTick+0x20>)
 800996a:	6013      	str	r3, [r2, #0]
}
 800996c:	bf00      	nop
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr
 8009974:	20000f7c 	.word	0x20000f7c
 8009978:	20001fd4 	.word	0x20001fd4

0800997c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
  return uwTick;
 8009980:	4b02      	ldr	r3, [pc, #8]	@ (800998c <HAL_GetTick+0x10>)
 8009982:	681b      	ldr	r3, [r3, #0]
}
 8009984:	4618      	mov	r0, r3
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr
 800998c:	20001fd4 	.word	0x20001fd4

08009990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009998:	f7ff fff0 	bl	800997c <HAL_GetTick>
 800999c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099a8:	d005      	beq.n	80099b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80099aa:	4b0a      	ldr	r3, [pc, #40]	@ (80099d4 <HAL_Delay+0x44>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80099b6:	bf00      	nop
 80099b8:	f7ff ffe0 	bl	800997c <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d8f7      	bhi.n	80099b8 <HAL_Delay+0x28>
  {
  }
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000f7c 	.word	0x20000f7c

080099d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e0ed      	b.n	8009bc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fda0 	bl	800953c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0201 	orr.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a0c:	f7ff ffb6 	bl	800997c <HAL_GetTick>
 8009a10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009a12:	e012      	b.n	8009a3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a14:	f7ff ffb2 	bl	800997c <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b0a      	cmp	r3, #10
 8009a20:	d90b      	bls.n	8009a3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2205      	movs	r2, #5
 8009a32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e0c5      	b.n	8009bc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0e5      	beq.n	8009a14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 0202 	bic.w	r2, r2, #2
 8009a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a58:	f7ff ff90 	bl	800997c <HAL_GetTick>
 8009a5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009a5e:	e012      	b.n	8009a86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a60:	f7ff ff8c 	bl	800997c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b0a      	cmp	r3, #10
 8009a6c:	d90b      	bls.n	8009a86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e09f      	b.n	8009bc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e5      	bne.n	8009a60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	7e1b      	ldrb	r3, [r3, #24]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d108      	bne.n	8009aae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e007      	b.n	8009abe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7e5b      	ldrb	r3, [r3, #25]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d108      	bne.n	8009ad8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	e007      	b.n	8009ae8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7e9b      	ldrb	r3, [r3, #26]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d108      	bne.n	8009b02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0220 	orr.w	r2, r2, #32
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	e007      	b.n	8009b12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0220 	bic.w	r2, r2, #32
 8009b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	7edb      	ldrb	r3, [r3, #27]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d108      	bne.n	8009b2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f022 0210 	bic.w	r2, r2, #16
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e007      	b.n	8009b3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0210 	orr.w	r2, r2, #16
 8009b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	7f1b      	ldrb	r3, [r3, #28]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d108      	bne.n	8009b56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0208 	orr.w	r2, r2, #8
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e007      	b.n	8009b66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0208 	bic.w	r2, r2, #8
 8009b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7f5b      	ldrb	r3, [r3, #29]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d108      	bne.n	8009b80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0204 	orr.w	r2, r2, #4
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e007      	b.n	8009b90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0204 	bic.w	r2, r2, #4
 8009b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	ea42 0103 	orr.w	r1, r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	1e5a      	subs	r2, r3, #1
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <__NVIC_SetPriorityGrouping>:
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009be0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c14 <__NVIC_SetPriorityGrouping+0x44>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009bec:	4013      	ands	r3, r2
 8009bee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c02:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <__NVIC_SetPriorityGrouping+0x44>)
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	60d3      	str	r3, [r2, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	e000ed00 	.word	0xe000ed00

08009c18 <__NVIC_GetPriorityGrouping>:
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c1c:	4b04      	ldr	r3, [pc, #16]	@ (8009c30 <__NVIC_GetPriorityGrouping+0x18>)
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	0a1b      	lsrs	r3, r3, #8
 8009c22:	f003 0307 	and.w	r3, r3, #7
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bc80      	pop	{r7}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	e000ed00 	.word	0xe000ed00

08009c34 <__NVIC_EnableIRQ>:
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db0b      	blt.n	8009c5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	f003 021f 	and.w	r2, r3, #31
 8009c4c:	4906      	ldr	r1, [pc, #24]	@ (8009c68 <__NVIC_EnableIRQ+0x34>)
 8009c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c52:	095b      	lsrs	r3, r3, #5
 8009c54:	2001      	movs	r0, #1
 8009c56:	fa00 f202 	lsl.w	r2, r0, r2
 8009c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bc80      	pop	{r7}
 8009c66:	4770      	bx	lr
 8009c68:	e000e100 	.word	0xe000e100

08009c6c <__NVIC_SetPriority>:
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	db0a      	blt.n	8009c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	490c      	ldr	r1, [pc, #48]	@ (8009cb8 <__NVIC_SetPriority+0x4c>)
 8009c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c8a:	0112      	lsls	r2, r2, #4
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	440b      	add	r3, r1
 8009c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009c94:	e00a      	b.n	8009cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4908      	ldr	r1, [pc, #32]	@ (8009cbc <__NVIC_SetPriority+0x50>)
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	f003 030f 	and.w	r3, r3, #15
 8009ca2:	3b04      	subs	r3, #4
 8009ca4:	0112      	lsls	r2, r2, #4
 8009ca6:	b2d2      	uxtb	r2, r2
 8009ca8:	440b      	add	r3, r1
 8009caa:	761a      	strb	r2, [r3, #24]
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bc80      	pop	{r7}
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	e000e100 	.word	0xe000e100
 8009cbc:	e000ed00 	.word	0xe000ed00

08009cc0 <NVIC_EncodePriority>:
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b089      	sub	sp, #36	@ 0x24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f1c3 0307 	rsb	r3, r3, #7
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	bf28      	it	cs
 8009cde:	2304      	movcs	r3, #4
 8009ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	2b06      	cmp	r3, #6
 8009ce8:	d902      	bls.n	8009cf0 <NVIC_EncodePriority+0x30>
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	3b03      	subs	r3, #3
 8009cee:	e000      	b.n	8009cf2 <NVIC_EncodePriority+0x32>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfe:	43da      	mvns	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	401a      	ands	r2, r3
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d12:	43d9      	mvns	r1, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d18:	4313      	orrs	r3, r2
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3724      	adds	r7, #36	@ 0x24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr

08009d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d34:	d301      	bcc.n	8009d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d36:	2301      	movs	r3, #1
 8009d38:	e00f      	b.n	8009d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d64 <SysTick_Config+0x40>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d42:	210f      	movs	r1, #15
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d48:	f7ff ff90 	bl	8009c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <SysTick_Config+0x40>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d52:	4b04      	ldr	r3, [pc, #16]	@ (8009d64 <SysTick_Config+0x40>)
 8009d54:	2207      	movs	r2, #7
 8009d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	e000e010 	.word	0xe000e010

08009d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff ff2d 	bl	8009bd0 <__NVIC_SetPriorityGrouping>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b086      	sub	sp, #24
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	4603      	mov	r3, r0
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009d90:	f7ff ff42 	bl	8009c18 <__NVIC_GetPriorityGrouping>
 8009d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	6978      	ldr	r0, [r7, #20]
 8009d9c:	f7ff ff90 	bl	8009cc0 <NVIC_EncodePriority>
 8009da0:	4602      	mov	r2, r0
 8009da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff ff5f 	bl	8009c6c <__NVIC_SetPriority>
}
 8009dae:	bf00      	nop
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff ff35 	bl	8009c34 <__NVIC_EnableIRQ>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff ffa2 	bl	8009d24 <SysTick_Config>
 8009de0:	4603      	mov	r3, r0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d008      	beq.n	8009e14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2204      	movs	r2, #4
 8009e06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e020      	b.n	8009e56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 020e 	bic.w	r2, r2, #14
 8009e22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0201 	bic.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8009e42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bc80      	pop	{r7}
 8009e5e:	4770      	bx	lr

08009e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d005      	beq.n	8009e84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	73fb      	strb	r3, [r7, #15]
 8009e82:	e0d6      	b.n	800a032 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f022 020e 	bic.w	r2, r2, #14
 8009e92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4b64      	ldr	r3, [pc, #400]	@ (800a03c <HAL_DMA_Abort_IT+0x1dc>)
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d958      	bls.n	8009f62 <HAL_DMA_Abort_IT+0x102>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a62      	ldr	r2, [pc, #392]	@ (800a040 <HAL_DMA_Abort_IT+0x1e0>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d04f      	beq.n	8009f5a <HAL_DMA_Abort_IT+0xfa>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a61      	ldr	r2, [pc, #388]	@ (800a044 <HAL_DMA_Abort_IT+0x1e4>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d048      	beq.n	8009f56 <HAL_DMA_Abort_IT+0xf6>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a5f      	ldr	r2, [pc, #380]	@ (800a048 <HAL_DMA_Abort_IT+0x1e8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d040      	beq.n	8009f50 <HAL_DMA_Abort_IT+0xf0>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800a04c <HAL_DMA_Abort_IT+0x1ec>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d038      	beq.n	8009f4a <HAL_DMA_Abort_IT+0xea>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a5c      	ldr	r2, [pc, #368]	@ (800a050 <HAL_DMA_Abort_IT+0x1f0>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d030      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xe4>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a5b      	ldr	r2, [pc, #364]	@ (800a054 <HAL_DMA_Abort_IT+0x1f4>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d028      	beq.n	8009f3e <HAL_DMA_Abort_IT+0xde>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a52      	ldr	r2, [pc, #328]	@ (800a03c <HAL_DMA_Abort_IT+0x1dc>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d020      	beq.n	8009f38 <HAL_DMA_Abort_IT+0xd8>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a57      	ldr	r2, [pc, #348]	@ (800a058 <HAL_DMA_Abort_IT+0x1f8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d019      	beq.n	8009f34 <HAL_DMA_Abort_IT+0xd4>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a55      	ldr	r2, [pc, #340]	@ (800a05c <HAL_DMA_Abort_IT+0x1fc>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d012      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xd0>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a54      	ldr	r2, [pc, #336]	@ (800a060 <HAL_DMA_Abort_IT+0x200>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d00a      	beq.n	8009f2a <HAL_DMA_Abort_IT+0xca>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a52      	ldr	r2, [pc, #328]	@ (800a064 <HAL_DMA_Abort_IT+0x204>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d102      	bne.n	8009f24 <HAL_DMA_Abort_IT+0xc4>
 8009f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f22:	e01b      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f28:	e018      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f2e:	e015      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f30:	2310      	movs	r3, #16
 8009f32:	e013      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e011      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f3c:	e00e      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f42:	e00b      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f48:	e008      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f4e:	e005      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f54:	e002      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f56:	2310      	movs	r3, #16
 8009f58:	e000      	b.n	8009f5c <HAL_DMA_Abort_IT+0xfc>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4a42      	ldr	r2, [pc, #264]	@ (800a068 <HAL_DMA_Abort_IT+0x208>)
 8009f5e:	6053      	str	r3, [r2, #4]
 8009f60:	e057      	b.n	800a012 <HAL_DMA_Abort_IT+0x1b2>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a36      	ldr	r2, [pc, #216]	@ (800a040 <HAL_DMA_Abort_IT+0x1e0>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d04f      	beq.n	800a00c <HAL_DMA_Abort_IT+0x1ac>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a34      	ldr	r2, [pc, #208]	@ (800a044 <HAL_DMA_Abort_IT+0x1e4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d048      	beq.n	800a008 <HAL_DMA_Abort_IT+0x1a8>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a33      	ldr	r2, [pc, #204]	@ (800a048 <HAL_DMA_Abort_IT+0x1e8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d040      	beq.n	800a002 <HAL_DMA_Abort_IT+0x1a2>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a31      	ldr	r2, [pc, #196]	@ (800a04c <HAL_DMA_Abort_IT+0x1ec>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d038      	beq.n	8009ffc <HAL_DMA_Abort_IT+0x19c>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a30      	ldr	r2, [pc, #192]	@ (800a050 <HAL_DMA_Abort_IT+0x1f0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d030      	beq.n	8009ff6 <HAL_DMA_Abort_IT+0x196>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a2e      	ldr	r2, [pc, #184]	@ (800a054 <HAL_DMA_Abort_IT+0x1f4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d028      	beq.n	8009ff0 <HAL_DMA_Abort_IT+0x190>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a26      	ldr	r2, [pc, #152]	@ (800a03c <HAL_DMA_Abort_IT+0x1dc>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d020      	beq.n	8009fea <HAL_DMA_Abort_IT+0x18a>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a2a      	ldr	r2, [pc, #168]	@ (800a058 <HAL_DMA_Abort_IT+0x1f8>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d019      	beq.n	8009fe6 <HAL_DMA_Abort_IT+0x186>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a29      	ldr	r2, [pc, #164]	@ (800a05c <HAL_DMA_Abort_IT+0x1fc>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d012      	beq.n	8009fe2 <HAL_DMA_Abort_IT+0x182>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a27      	ldr	r2, [pc, #156]	@ (800a060 <HAL_DMA_Abort_IT+0x200>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00a      	beq.n	8009fdc <HAL_DMA_Abort_IT+0x17c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a26      	ldr	r2, [pc, #152]	@ (800a064 <HAL_DMA_Abort_IT+0x204>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d102      	bne.n	8009fd6 <HAL_DMA_Abort_IT+0x176>
 8009fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fd4:	e01b      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009fd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fda:	e018      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fe0:	e015      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009fe2:	2310      	movs	r3, #16
 8009fe4:	e013      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e011      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009fea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fee:	e00e      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009ff0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009ff4:	e00b      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ffa:	e008      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 8009ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a000:	e005      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 800a002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a006:	e002      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 800a008:	2310      	movs	r3, #16
 800a00a:	e000      	b.n	800a00e <HAL_DMA_Abort_IT+0x1ae>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4a17      	ldr	r2, [pc, #92]	@ (800a06c <HAL_DMA_Abort_IT+0x20c>)
 800a010:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
    } 
  }
  return status;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40020080 	.word	0x40020080
 800a040:	40020008 	.word	0x40020008
 800a044:	4002001c 	.word	0x4002001c
 800a048:	40020030 	.word	0x40020030
 800a04c:	40020044 	.word	0x40020044
 800a050:	40020058 	.word	0x40020058
 800a054:	4002006c 	.word	0x4002006c
 800a058:	40020408 	.word	0x40020408
 800a05c:	4002041c 	.word	0x4002041c
 800a060:	40020430 	.word	0x40020430
 800a064:	40020444 	.word	0x40020444
 800a068:	40020400 	.word	0x40020400
 800a06c:	40020000 	.word	0x40020000

0800a070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a070:	b480      	push	{r7}
 800a072:	b08b      	sub	sp, #44	@ 0x2c
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a07a:	2300      	movs	r3, #0
 800a07c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a07e:	2300      	movs	r3, #0
 800a080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a082:	e179      	b.n	800a378 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a084:	2201      	movs	r2, #1
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69fa      	ldr	r2, [r7, #28]
 800a094:	4013      	ands	r3, r2
 800a096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	f040 8168 	bne.w	800a372 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	4a96      	ldr	r2, [pc, #600]	@ (800a300 <HAL_GPIO_Init+0x290>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d05e      	beq.n	800a16a <HAL_GPIO_Init+0xfa>
 800a0ac:	4a94      	ldr	r2, [pc, #592]	@ (800a300 <HAL_GPIO_Init+0x290>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d875      	bhi.n	800a19e <HAL_GPIO_Init+0x12e>
 800a0b2:	4a94      	ldr	r2, [pc, #592]	@ (800a304 <HAL_GPIO_Init+0x294>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d058      	beq.n	800a16a <HAL_GPIO_Init+0xfa>
 800a0b8:	4a92      	ldr	r2, [pc, #584]	@ (800a304 <HAL_GPIO_Init+0x294>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d86f      	bhi.n	800a19e <HAL_GPIO_Init+0x12e>
 800a0be:	4a92      	ldr	r2, [pc, #584]	@ (800a308 <HAL_GPIO_Init+0x298>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d052      	beq.n	800a16a <HAL_GPIO_Init+0xfa>
 800a0c4:	4a90      	ldr	r2, [pc, #576]	@ (800a308 <HAL_GPIO_Init+0x298>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d869      	bhi.n	800a19e <HAL_GPIO_Init+0x12e>
 800a0ca:	4a90      	ldr	r2, [pc, #576]	@ (800a30c <HAL_GPIO_Init+0x29c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d04c      	beq.n	800a16a <HAL_GPIO_Init+0xfa>
 800a0d0:	4a8e      	ldr	r2, [pc, #568]	@ (800a30c <HAL_GPIO_Init+0x29c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d863      	bhi.n	800a19e <HAL_GPIO_Init+0x12e>
 800a0d6:	4a8e      	ldr	r2, [pc, #568]	@ (800a310 <HAL_GPIO_Init+0x2a0>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d046      	beq.n	800a16a <HAL_GPIO_Init+0xfa>
 800a0dc:	4a8c      	ldr	r2, [pc, #560]	@ (800a310 <HAL_GPIO_Init+0x2a0>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d85d      	bhi.n	800a19e <HAL_GPIO_Init+0x12e>
 800a0e2:	2b12      	cmp	r3, #18
 800a0e4:	d82a      	bhi.n	800a13c <HAL_GPIO_Init+0xcc>
 800a0e6:	2b12      	cmp	r3, #18
 800a0e8:	d859      	bhi.n	800a19e <HAL_GPIO_Init+0x12e>
 800a0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <HAL_GPIO_Init+0x80>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a16b 	.word	0x0800a16b
 800a0f4:	0800a145 	.word	0x0800a145
 800a0f8:	0800a157 	.word	0x0800a157
 800a0fc:	0800a199 	.word	0x0800a199
 800a100:	0800a19f 	.word	0x0800a19f
 800a104:	0800a19f 	.word	0x0800a19f
 800a108:	0800a19f 	.word	0x0800a19f
 800a10c:	0800a19f 	.word	0x0800a19f
 800a110:	0800a19f 	.word	0x0800a19f
 800a114:	0800a19f 	.word	0x0800a19f
 800a118:	0800a19f 	.word	0x0800a19f
 800a11c:	0800a19f 	.word	0x0800a19f
 800a120:	0800a19f 	.word	0x0800a19f
 800a124:	0800a19f 	.word	0x0800a19f
 800a128:	0800a19f 	.word	0x0800a19f
 800a12c:	0800a19f 	.word	0x0800a19f
 800a130:	0800a19f 	.word	0x0800a19f
 800a134:	0800a14d 	.word	0x0800a14d
 800a138:	0800a161 	.word	0x0800a161
 800a13c:	4a75      	ldr	r2, [pc, #468]	@ (800a314 <HAL_GPIO_Init+0x2a4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d013      	beq.n	800a16a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a142:	e02c      	b.n	800a19e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	623b      	str	r3, [r7, #32]
          break;
 800a14a:	e029      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	3304      	adds	r3, #4
 800a152:	623b      	str	r3, [r7, #32]
          break;
 800a154:	e024      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	3308      	adds	r3, #8
 800a15c:	623b      	str	r3, [r7, #32]
          break;
 800a15e:	e01f      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	330c      	adds	r3, #12
 800a166:	623b      	str	r3, [r7, #32]
          break;
 800a168:	e01a      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a172:	2304      	movs	r3, #4
 800a174:	623b      	str	r3, [r7, #32]
          break;
 800a176:	e013      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d105      	bne.n	800a18c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a180:	2308      	movs	r3, #8
 800a182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	611a      	str	r2, [r3, #16]
          break;
 800a18a:	e009      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a18c:	2308      	movs	r3, #8
 800a18e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	615a      	str	r2, [r3, #20]
          break;
 800a196:	e003      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a198:	2300      	movs	r3, #0
 800a19a:	623b      	str	r3, [r7, #32]
          break;
 800a19c:	e000      	b.n	800a1a0 <HAL_GPIO_Init+0x130>
          break;
 800a19e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2bff      	cmp	r3, #255	@ 0xff
 800a1a4:	d801      	bhi.n	800a1aa <HAL_GPIO_Init+0x13a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	e001      	b.n	800a1ae <HAL_GPIO_Init+0x13e>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2bff      	cmp	r3, #255	@ 0xff
 800a1b4:	d802      	bhi.n	800a1bc <HAL_GPIO_Init+0x14c>
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	e002      	b.n	800a1c2 <HAL_GPIO_Init+0x152>
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	3b08      	subs	r3, #8
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	210f      	movs	r1, #15
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	6a39      	ldr	r1, [r7, #32]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80c1 	beq.w	800a372 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a1f0:	4b49      	ldr	r3, [pc, #292]	@ (800a318 <HAL_GPIO_Init+0x2a8>)
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	4a48      	ldr	r2, [pc, #288]	@ (800a318 <HAL_GPIO_Init+0x2a8>)
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	6193      	str	r3, [r2, #24]
 800a1fc:	4b46      	ldr	r3, [pc, #280]	@ (800a318 <HAL_GPIO_Init+0x2a8>)
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	60bb      	str	r3, [r7, #8]
 800a206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a208:	4a44      	ldr	r2, [pc, #272]	@ (800a31c <HAL_GPIO_Init+0x2ac>)
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20c:	089b      	lsrs	r3, r3, #2
 800a20e:	3302      	adds	r3, #2
 800a210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	f003 0303 	and.w	r3, r3, #3
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	220f      	movs	r2, #15
 800a220:	fa02 f303 	lsl.w	r3, r2, r3
 800a224:	43db      	mvns	r3, r3
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4013      	ands	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a3c      	ldr	r2, [pc, #240]	@ (800a320 <HAL_GPIO_Init+0x2b0>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d01f      	beq.n	800a274 <HAL_GPIO_Init+0x204>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a3b      	ldr	r2, [pc, #236]	@ (800a324 <HAL_GPIO_Init+0x2b4>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d019      	beq.n	800a270 <HAL_GPIO_Init+0x200>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a3a      	ldr	r2, [pc, #232]	@ (800a328 <HAL_GPIO_Init+0x2b8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d013      	beq.n	800a26c <HAL_GPIO_Init+0x1fc>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a39      	ldr	r2, [pc, #228]	@ (800a32c <HAL_GPIO_Init+0x2bc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00d      	beq.n	800a268 <HAL_GPIO_Init+0x1f8>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a38      	ldr	r2, [pc, #224]	@ (800a330 <HAL_GPIO_Init+0x2c0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d007      	beq.n	800a264 <HAL_GPIO_Init+0x1f4>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a37      	ldr	r2, [pc, #220]	@ (800a334 <HAL_GPIO_Init+0x2c4>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d101      	bne.n	800a260 <HAL_GPIO_Init+0x1f0>
 800a25c:	2305      	movs	r3, #5
 800a25e:	e00a      	b.n	800a276 <HAL_GPIO_Init+0x206>
 800a260:	2306      	movs	r3, #6
 800a262:	e008      	b.n	800a276 <HAL_GPIO_Init+0x206>
 800a264:	2304      	movs	r3, #4
 800a266:	e006      	b.n	800a276 <HAL_GPIO_Init+0x206>
 800a268:	2303      	movs	r3, #3
 800a26a:	e004      	b.n	800a276 <HAL_GPIO_Init+0x206>
 800a26c:	2302      	movs	r3, #2
 800a26e:	e002      	b.n	800a276 <HAL_GPIO_Init+0x206>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <HAL_GPIO_Init+0x206>
 800a274:	2300      	movs	r3, #0
 800a276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a278:	f002 0203 	and.w	r2, r2, #3
 800a27c:	0092      	lsls	r2, r2, #2
 800a27e:	4093      	lsls	r3, r2
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a286:	4925      	ldr	r1, [pc, #148]	@ (800a31c <HAL_GPIO_Init+0x2ac>)
 800a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28a:	089b      	lsrs	r3, r3, #2
 800a28c:	3302      	adds	r3, #2
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a2a0:	4b25      	ldr	r3, [pc, #148]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	4924      	ldr	r1, [pc, #144]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	608b      	str	r3, [r1, #8]
 800a2ac:	e006      	b.n	800a2bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a2ae:	4b22      	ldr	r3, [pc, #136]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	43db      	mvns	r3, r3
 800a2b6:	4920      	ldr	r1, [pc, #128]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d006      	beq.n	800a2d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2ca:	68da      	ldr	r2, [r3, #12]
 800a2cc:	491a      	ldr	r1, [pc, #104]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	60cb      	str	r3, [r1, #12]
 800a2d4:	e006      	b.n	800a2e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a2d6:	4b18      	ldr	r3, [pc, #96]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	4916      	ldr	r1, [pc, #88]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d025      	beq.n	800a33c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a2f0:	4b11      	ldr	r3, [pc, #68]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	4910      	ldr	r1, [pc, #64]	@ (800a338 <HAL_GPIO_Init+0x2c8>)
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	604b      	str	r3, [r1, #4]
 800a2fc:	e025      	b.n	800a34a <HAL_GPIO_Init+0x2da>
 800a2fe:	bf00      	nop
 800a300:	10320000 	.word	0x10320000
 800a304:	10310000 	.word	0x10310000
 800a308:	10220000 	.word	0x10220000
 800a30c:	10210000 	.word	0x10210000
 800a310:	10120000 	.word	0x10120000
 800a314:	10110000 	.word	0x10110000
 800a318:	40021000 	.word	0x40021000
 800a31c:	40010000 	.word	0x40010000
 800a320:	40010800 	.word	0x40010800
 800a324:	40010c00 	.word	0x40010c00
 800a328:	40011000 	.word	0x40011000
 800a32c:	40011400 	.word	0x40011400
 800a330:	40011800 	.word	0x40011800
 800a334:	40011c00 	.word	0x40011c00
 800a338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a33c:	4b15      	ldr	r3, [pc, #84]	@ (800a394 <HAL_GPIO_Init+0x324>)
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	43db      	mvns	r3, r3
 800a344:	4913      	ldr	r1, [pc, #76]	@ (800a394 <HAL_GPIO_Init+0x324>)
 800a346:	4013      	ands	r3, r2
 800a348:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a356:	4b0f      	ldr	r3, [pc, #60]	@ (800a394 <HAL_GPIO_Init+0x324>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	490e      	ldr	r1, [pc, #56]	@ (800a394 <HAL_GPIO_Init+0x324>)
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	4313      	orrs	r3, r2
 800a360:	600b      	str	r3, [r1, #0]
 800a362:	e006      	b.n	800a372 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a364:	4b0b      	ldr	r3, [pc, #44]	@ (800a394 <HAL_GPIO_Init+0x324>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	43db      	mvns	r3, r3
 800a36c:	4909      	ldr	r1, [pc, #36]	@ (800a394 <HAL_GPIO_Init+0x324>)
 800a36e:	4013      	ands	r3, r2
 800a370:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	3301      	adds	r3, #1
 800a376:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37e:	fa22 f303 	lsr.w	r3, r2, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	f47f ae7e 	bne.w	800a084 <HAL_GPIO_Init+0x14>
  }
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	372c      	adds	r7, #44	@ 0x2c
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr
 800a394:	40010400 	.word	0x40010400

0800a398 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a398:	b480      	push	{r7}
 800a39a:	b089      	sub	sp, #36	@ 0x24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a3a6:	e0a6      	b.n	800a4f6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8099 	beq.w	800a4f0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a3be:	4a54      	ldr	r2, [pc, #336]	@ (800a510 <HAL_GPIO_DeInit+0x178>)
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	089b      	lsrs	r3, r3, #2
 800a3c4:	3302      	adds	r3, #2
 800a3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ca:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	220f      	movs	r2, #15
 800a3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4013      	ands	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a4c      	ldr	r2, [pc, #304]	@ (800a514 <HAL_GPIO_DeInit+0x17c>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d01f      	beq.n	800a428 <HAL_GPIO_DeInit+0x90>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a4b      	ldr	r2, [pc, #300]	@ (800a518 <HAL_GPIO_DeInit+0x180>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d019      	beq.n	800a424 <HAL_GPIO_DeInit+0x8c>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a4a      	ldr	r2, [pc, #296]	@ (800a51c <HAL_GPIO_DeInit+0x184>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d013      	beq.n	800a420 <HAL_GPIO_DeInit+0x88>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a49      	ldr	r2, [pc, #292]	@ (800a520 <HAL_GPIO_DeInit+0x188>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d00d      	beq.n	800a41c <HAL_GPIO_DeInit+0x84>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a48      	ldr	r2, [pc, #288]	@ (800a524 <HAL_GPIO_DeInit+0x18c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d007      	beq.n	800a418 <HAL_GPIO_DeInit+0x80>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a47      	ldr	r2, [pc, #284]	@ (800a528 <HAL_GPIO_DeInit+0x190>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d101      	bne.n	800a414 <HAL_GPIO_DeInit+0x7c>
 800a410:	2305      	movs	r3, #5
 800a412:	e00a      	b.n	800a42a <HAL_GPIO_DeInit+0x92>
 800a414:	2306      	movs	r3, #6
 800a416:	e008      	b.n	800a42a <HAL_GPIO_DeInit+0x92>
 800a418:	2304      	movs	r3, #4
 800a41a:	e006      	b.n	800a42a <HAL_GPIO_DeInit+0x92>
 800a41c:	2303      	movs	r3, #3
 800a41e:	e004      	b.n	800a42a <HAL_GPIO_DeInit+0x92>
 800a420:	2302      	movs	r3, #2
 800a422:	e002      	b.n	800a42a <HAL_GPIO_DeInit+0x92>
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <HAL_GPIO_DeInit+0x92>
 800a428:	2300      	movs	r3, #0
 800a42a:	69fa      	ldr	r2, [r7, #28]
 800a42c:	f002 0203 	and.w	r2, r2, #3
 800a430:	0092      	lsls	r2, r2, #2
 800a432:	4093      	lsls	r3, r2
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	429a      	cmp	r2, r3
 800a438:	d132      	bne.n	800a4a0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a43a:	4b3c      	ldr	r3, [pc, #240]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	43db      	mvns	r3, r3
 800a442:	493a      	ldr	r1, [pc, #232]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a444:	4013      	ands	r3, r2
 800a446:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a448:	4b38      	ldr	r3, [pc, #224]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	43db      	mvns	r3, r3
 800a450:	4936      	ldr	r1, [pc, #216]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a452:	4013      	ands	r3, r2
 800a454:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a456:	4b35      	ldr	r3, [pc, #212]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	43db      	mvns	r3, r3
 800a45e:	4933      	ldr	r1, [pc, #204]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a460:	4013      	ands	r3, r2
 800a462:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a464:	4b31      	ldr	r3, [pc, #196]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	43db      	mvns	r3, r3
 800a46c:	492f      	ldr	r1, [pc, #188]	@ (800a52c <HAL_GPIO_DeInit+0x194>)
 800a46e:	4013      	ands	r3, r2
 800a470:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	220f      	movs	r2, #15
 800a47c:	fa02 f303 	lsl.w	r3, r2, r3
 800a480:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a482:	4a23      	ldr	r2, [pc, #140]	@ (800a510 <HAL_GPIO_DeInit+0x178>)
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	089b      	lsrs	r3, r3, #2
 800a488:	3302      	adds	r3, #2
 800a48a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	43da      	mvns	r2, r3
 800a492:	481f      	ldr	r0, [pc, #124]	@ (800a510 <HAL_GPIO_DeInit+0x178>)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	089b      	lsrs	r3, r3, #2
 800a498:	400a      	ands	r2, r1
 800a49a:	3302      	adds	r3, #2
 800a49c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2bff      	cmp	r3, #255	@ 0xff
 800a4a4:	d801      	bhi.n	800a4aa <HAL_GPIO_DeInit+0x112>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	e001      	b.n	800a4ae <HAL_GPIO_DeInit+0x116>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2bff      	cmp	r3, #255	@ 0xff
 800a4b4:	d802      	bhi.n	800a4bc <HAL_GPIO_DeInit+0x124>
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	e002      	b.n	800a4c2 <HAL_GPIO_DeInit+0x12a>
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	3b08      	subs	r3, #8
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	210f      	movs	r1, #15
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	401a      	ands	r2, r3
 800a4d4:	2104      	movs	r1, #4
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	43db      	mvns	r3, r3
 800a4ea:	401a      	ands	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f47f af52 	bne.w	800a3a8 <HAL_GPIO_DeInit+0x10>
  }
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	3724      	adds	r7, #36	@ 0x24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr
 800a510:	40010000 	.word	0x40010000
 800a514:	40010800 	.word	0x40010800
 800a518:	40010c00 	.word	0x40010c00
 800a51c:	40011000 	.word	0x40011000
 800a520:	40011400 	.word	0x40011400
 800a524:	40011800 	.word	0x40011800
 800a528:	40011c00 	.word	0x40011c00
 800a52c:	40010400 	.word	0x40010400

0800a530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	887b      	ldrh	r3, [r7, #2]
 800a542:	4013      	ands	r3, r2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
 800a54c:	e001      	b.n	800a552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a54e:	2300      	movs	r3, #0
 800a550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a552:	7bfb      	ldrb	r3, [r7, #15]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	bc80      	pop	{r7}
 800a55c:	4770      	bx	lr

0800a55e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	460b      	mov	r3, r1
 800a568:	807b      	strh	r3, [r7, #2]
 800a56a:	4613      	mov	r3, r2
 800a56c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a56e:	787b      	ldrb	r3, [r7, #1]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d003      	beq.n	800a57c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a574:	887a      	ldrh	r2, [r7, #2]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a57a:	e003      	b.n	800a584 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a57c:	887b      	ldrh	r3, [r7, #2]
 800a57e:	041a      	lsls	r2, r3, #16
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	611a      	str	r2, [r3, #16]
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	bc80      	pop	{r7}
 800a58c:	4770      	bx	lr

0800a58e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a5a0:	887a      	ldrh	r2, [r7, #2]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	041a      	lsls	r2, r3, #16
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	43d9      	mvns	r1, r3
 800a5ac:	887b      	ldrh	r3, [r7, #2]
 800a5ae:	400b      	ands	r3, r1
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	611a      	str	r2, [r3, #16]
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bc80      	pop	{r7}
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e12b      	b.n	800a82a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d106      	bne.n	800a5ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fe fff4 	bl	80095d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2224      	movs	r2, #36	@ 0x24
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0201 	bic.w	r2, r2, #1
 800a602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a624:	f001 fdb8 	bl	800c198 <HAL_RCC_GetPCLK1Freq>
 800a628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	4a81      	ldr	r2, [pc, #516]	@ (800a834 <HAL_I2C_Init+0x274>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d807      	bhi.n	800a644 <HAL_I2C_Init+0x84>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4a80      	ldr	r2, [pc, #512]	@ (800a838 <HAL_I2C_Init+0x278>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	bf94      	ite	ls
 800a63c:	2301      	movls	r3, #1
 800a63e:	2300      	movhi	r3, #0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	e006      	b.n	800a652 <HAL_I2C_Init+0x92>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4a7d      	ldr	r2, [pc, #500]	@ (800a83c <HAL_I2C_Init+0x27c>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	bf94      	ite	ls
 800a64c:	2301      	movls	r3, #1
 800a64e:	2300      	movhi	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e0e7      	b.n	800a82a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4a78      	ldr	r2, [pc, #480]	@ (800a840 <HAL_I2C_Init+0x280>)
 800a65e:	fba2 2303 	umull	r2, r3, r2, r3
 800a662:	0c9b      	lsrs	r3, r3, #18
 800a664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	430a      	orrs	r2, r1
 800a678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a6a      	ldr	r2, [pc, #424]	@ (800a834 <HAL_I2C_Init+0x274>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d802      	bhi.n	800a694 <HAL_I2C_Init+0xd4>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	3301      	adds	r3, #1
 800a692:	e009      	b.n	800a6a8 <HAL_I2C_Init+0xe8>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a69a:	fb02 f303 	mul.w	r3, r2, r3
 800a69e:	4a69      	ldr	r2, [pc, #420]	@ (800a844 <HAL_I2C_Init+0x284>)
 800a6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a4:	099b      	lsrs	r3, r3, #6
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6812      	ldr	r2, [r2, #0]
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a6ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	495c      	ldr	r1, [pc, #368]	@ (800a834 <HAL_I2C_Init+0x274>)
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	d819      	bhi.n	800a6fc <HAL_I2C_Init+0x13c>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	1e59      	subs	r1, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a6dc:	400b      	ands	r3, r1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <HAL_I2C_Init+0x138>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	1e59      	subs	r1, r3, #1
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6f6:	e051      	b.n	800a79c <HAL_I2C_Init+0x1dc>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	e04f      	b.n	800a79c <HAL_I2C_Init+0x1dc>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d111      	bne.n	800a728 <HAL_I2C_Init+0x168>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	1e58      	subs	r0, r3, #1
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6859      	ldr	r1, [r3, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	440b      	add	r3, r1
 800a712:	fbb0 f3f3 	udiv	r3, r0, r3
 800a716:	3301      	adds	r3, #1
 800a718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bf0c      	ite	eq
 800a720:	2301      	moveq	r3, #1
 800a722:	2300      	movne	r3, #0
 800a724:	b2db      	uxtb	r3, r3
 800a726:	e012      	b.n	800a74e <HAL_I2C_Init+0x18e>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	1e58      	subs	r0, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6859      	ldr	r1, [r3, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	0099      	lsls	r1, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a73e:	3301      	adds	r3, #1
 800a740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a744:	2b00      	cmp	r3, #0
 800a746:	bf0c      	ite	eq
 800a748:	2301      	moveq	r3, #1
 800a74a:	2300      	movne	r3, #0
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <HAL_I2C_Init+0x196>
 800a752:	2301      	movs	r3, #1
 800a754:	e022      	b.n	800a79c <HAL_I2C_Init+0x1dc>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10e      	bne.n	800a77c <HAL_I2C_Init+0x1bc>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1e58      	subs	r0, r3, #1
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6859      	ldr	r1, [r3, #4]
 800a766:	460b      	mov	r3, r1
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	440b      	add	r3, r1
 800a76c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a770:	3301      	adds	r3, #1
 800a772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a77a:	e00f      	b.n	800a79c <HAL_I2C_Init+0x1dc>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	1e58      	subs	r0, r3, #1
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6859      	ldr	r1, [r3, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	0099      	lsls	r1, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a792:	3301      	adds	r3, #1
 800a794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	6809      	ldr	r1, [r1, #0]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a7ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6911      	ldr	r1, [r2, #16]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	68d2      	ldr	r2, [r2, #12]
 800a7d6:	4311      	orrs	r1, r2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695a      	ldr	r2, [r3, #20]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	000186a0 	.word	0x000186a0
 800a838:	001e847f 	.word	0x001e847f
 800a83c:	003d08ff 	.word	0x003d08ff
 800a840:	431bde83 	.word	0x431bde83
 800a844:	10624dd3 	.word	0x10624dd3

0800a848 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e021      	b.n	800a89e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2224      	movs	r2, #36	@ 0x24
 800a85e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0201 	bic.w	r2, r2, #1
 800a870:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7fe feec 	bl	8009650 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	607a      	str	r2, [r7, #4]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	817b      	strh	r3, [r7, #10]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8bc:	f7ff f85e 	bl	800997c <HAL_GetTick>
 800a8c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	f040 80e0 	bne.w	800aa90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2319      	movs	r3, #25
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4970      	ldr	r1, [pc, #448]	@ (800aa9c <HAL_I2C_Master_Transmit+0x1f4>)
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 fe5c 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e0d3      	b.n	800aa92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_I2C_Master_Transmit+0x50>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e0cc      	b.n	800aa92 <HAL_I2C_Master_Transmit+0x1ea>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d007      	beq.n	800a91e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f042 0201 	orr.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a92c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2221      	movs	r2, #33	@ 0x21
 800a932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2210      	movs	r2, #16
 800a93a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	893a      	ldrh	r2, [r7, #8]
 800a94e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a954:	b29a      	uxth	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a50      	ldr	r2, [pc, #320]	@ (800aaa0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a95e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a960:	8979      	ldrh	r1, [r7, #10]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	6a3a      	ldr	r2, [r7, #32]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fc16 	bl	800b198 <I2C_MasterRequestWrite>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e08d      	b.n	800aa92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	613b      	str	r3, [r7, #16]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	613b      	str	r3, [r7, #16]
 800a98a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a98c:	e066      	b.n	800aa5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	6a39      	ldr	r1, [r7, #32]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 ff1a 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00d      	beq.n	800a9ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d107      	bne.n	800a9b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e06b      	b.n	800aa92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9be:	781a      	ldrb	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	d11b      	bne.n	800aa30 <HAL_I2C_Master_Transmit+0x188>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d017      	beq.n	800aa30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	781a      	ldrb	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	6a39      	ldr	r1, [r7, #32]
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 ff11 	bl	800b85c <I2C_WaitOnBTFFlagUntilTimeout>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00d      	beq.n	800aa5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d107      	bne.n	800aa58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e01a      	b.n	800aa92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d194      	bne.n	800a98e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2220      	movs	r2, #32
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e000      	b.n	800aa92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800aa90:	2302      	movs	r3, #2
  }
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	00100002 	.word	0x00100002
 800aaa0:	ffff0000 	.word	0xffff0000

0800aaa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	461a      	mov	r2, r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	817b      	strh	r3, [r7, #10]
 800aab6:	460b      	mov	r3, r1
 800aab8:	813b      	strh	r3, [r7, #8]
 800aaba:	4613      	mov	r3, r2
 800aabc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aabe:	f7fe ff5d 	bl	800997c <HAL_GetTick>
 800aac2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b20      	cmp	r3, #32
 800aace:	f040 80d9 	bne.w	800ac84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	2319      	movs	r3, #25
 800aad8:	2201      	movs	r2, #1
 800aada:	496d      	ldr	r1, [pc, #436]	@ (800ac90 <HAL_I2C_Mem_Write+0x1ec>)
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 fd5b 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800aae8:	2302      	movs	r3, #2
 800aaea:	e0cc      	b.n	800ac86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_I2C_Mem_Write+0x56>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e0c5      	b.n	800ac86 <HAL_I2C_Mem_Write+0x1e2>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d007      	beq.n	800ab20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2221      	movs	r2, #33	@ 0x21
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2240      	movs	r2, #64	@ 0x40
 800ab3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6a3a      	ldr	r2, [r7, #32]
 800ab4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ab50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4a4d      	ldr	r2, [pc, #308]	@ (800ac94 <HAL_I2C_Mem_Write+0x1f0>)
 800ab60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab62:	88f8      	ldrh	r0, [r7, #6]
 800ab64:	893a      	ldrh	r2, [r7, #8]
 800ab66:	8979      	ldrh	r1, [r7, #10]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f000 fb92 	bl	800b29c <I2C_RequestMemoryWrite>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d052      	beq.n	800ac24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e081      	b.n	800ac86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fe20 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d107      	bne.n	800abaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e06b      	b.n	800ac86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	781a      	ldrb	r2, [r3, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abc8:	3b01      	subs	r3, #1
 800abca:	b29a      	uxth	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	3b01      	subs	r3, #1
 800abd8:	b29a      	uxth	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d11b      	bne.n	800ac24 <HAL_I2C_Mem_Write+0x180>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d017      	beq.n	800ac24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf8:	781a      	ldrb	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	1c5a      	adds	r2, r3, #1
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1aa      	bne.n	800ab82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 fe13 	bl	800b85c <I2C_WaitOnBTFFlagUntilTimeout>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00d      	beq.n	800ac58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d107      	bne.n	800ac54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e016      	b.n	800ac86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e000      	b.n	800ac86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ac84:	2302      	movs	r3, #2
  }
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	00100002 	.word	0x00100002
 800ac94:	ffff0000 	.word	0xffff0000

0800ac98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08c      	sub	sp, #48	@ 0x30
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	461a      	mov	r2, r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	817b      	strh	r3, [r7, #10]
 800acaa:	460b      	mov	r3, r1
 800acac:	813b      	strh	r3, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800acb6:	f7fe fe61 	bl	800997c <HAL_GetTick>
 800acba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b20      	cmp	r3, #32
 800acc6:	f040 8244 	bne.w	800b152 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	2319      	movs	r3, #25
 800acd0:	2201      	movs	r2, #1
 800acd2:	4982      	ldr	r1, [pc, #520]	@ (800aedc <HAL_I2C_Mem_Read+0x244>)
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 fc5f 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800ace0:	2302      	movs	r3, #2
 800ace2:	e237      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acea:	2b01      	cmp	r3, #1
 800acec:	d101      	bne.n	800acf2 <HAL_I2C_Mem_Read+0x5a>
 800acee:	2302      	movs	r3, #2
 800acf0:	e230      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d007      	beq.n	800ad18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f042 0201 	orr.w	r2, r2, #1
 800ad16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2222      	movs	r2, #34	@ 0x22
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2240      	movs	r2, #64	@ 0x40
 800ad34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ad48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4a62      	ldr	r2, [pc, #392]	@ (800aee0 <HAL_I2C_Mem_Read+0x248>)
 800ad58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad5a:	88f8      	ldrh	r0, [r7, #6]
 800ad5c:	893a      	ldrh	r2, [r7, #8]
 800ad5e:	8979      	ldrh	r1, [r7, #10]
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	4603      	mov	r3, r0
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fb2c 	bl	800b3c8 <I2C_RequestMemoryRead>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e1ec      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d113      	bne.n	800adaa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad82:	2300      	movs	r3, #0
 800ad84:	61fb      	str	r3, [r7, #28]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	e1c0      	b.n	800b12c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d11e      	bne.n	800adf0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800adc2:	b672      	cpsid	i
}
 800adc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adc6:	2300      	movs	r3, #0
 800adc8:	61bb      	str	r3, [r7, #24]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	61bb      	str	r3, [r7, #24]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	61bb      	str	r3, [r7, #24]
 800adda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800adec:	b662      	cpsie	i
}
 800adee:	e035      	b.n	800ae5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d11e      	bne.n	800ae36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae08:	b672      	cpsid	i
}
 800ae0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	617b      	str	r3, [r7, #20]
 800ae20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ae32:	b662      	cpsie	i
}
 800ae34:	e012      	b.n	800ae5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	613b      	str	r3, [r7, #16]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800ae5c:	e166      	b.n	800b12c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	f200 811f 	bhi.w	800b0a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d123      	bne.n	800aeb8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 fd39 	bl	800b8ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d001      	beq.n	800ae84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e167      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	691a      	ldr	r2, [r3, #16]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aea0:	3b01      	subs	r3, #1
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aeb6:	e139      	b.n	800b12c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d152      	bne.n	800af66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec6:	2200      	movs	r2, #0
 800aec8:	4906      	ldr	r1, [pc, #24]	@ (800aee4 <HAL_I2C_Mem_Read+0x24c>)
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fb64 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d008      	beq.n	800aee8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e13c      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
 800aeda:	bf00      	nop
 800aedc:	00100002 	.word	0x00100002
 800aee0:	ffff0000 	.word	0xffff0000
 800aee4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800aee8:	b672      	cpsid	i
}
 800aeea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aefa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	691a      	ldr	r2, [r3, #16]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af06:	b2d2      	uxtb	r2, r2
 800af08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af24:	b29b      	uxth	r3, r3
 800af26:	3b01      	subs	r3, #1
 800af28:	b29a      	uxth	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800af2e:	b662      	cpsie	i
}
 800af30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3c:	b2d2      	uxtb	r2, r2
 800af3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af4e:	3b01      	subs	r3, #1
 800af50:	b29a      	uxth	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	3b01      	subs	r3, #1
 800af5e:	b29a      	uxth	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800af64:	e0e2      	b.n	800b12c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6c:	2200      	movs	r2, #0
 800af6e:	497b      	ldr	r1, [pc, #492]	@ (800b15c <HAL_I2C_Mem_Read+0x4c4>)
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 fb11 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e0e9      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800af90:	b672      	cpsid	i
}
 800af92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	691a      	ldr	r2, [r3, #16]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9e:	b2d2      	uxtb	r2, r2
 800afa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afb0:	3b01      	subs	r3, #1
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800afc6:	4b66      	ldr	r3, [pc, #408]	@ (800b160 <HAL_I2C_Mem_Read+0x4c8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	08db      	lsrs	r3, r3, #3
 800afcc:	4a65      	ldr	r2, [pc, #404]	@ (800b164 <HAL_I2C_Mem_Read+0x4cc>)
 800afce:	fba2 2303 	umull	r2, r3, r2, r3
 800afd2:	0a1a      	lsrs	r2, r3, #8
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	00da      	lsls	r2, r3, #3
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d118      	bne.n	800b01e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b006:	f043 0220 	orr.w	r2, r3, #32
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b00e:	b662      	cpsie	i
}
 800b010:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e09a      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d1d9      	bne.n	800afe0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b03a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b046:	b2d2      	uxtb	r2, r2
 800b048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b058:	3b01      	subs	r3, #1
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b06e:	b662      	cpsie	i
}
 800b070:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	691a      	ldr	r2, [r3, #16]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07c:	b2d2      	uxtb	r2, r2
 800b07e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b08e:	3b01      	subs	r3, #1
 800b090:	b29a      	uxth	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b0a4:	e042      	b.n	800b12c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f000 fc1e 	bl	800b8ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e04c      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	691a      	ldr	r2, [r3, #16]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c4:	b2d2      	uxtb	r2, r2
 800b0c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d118      	bne.n	800b12c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691a      	ldr	r2, [r3, #16]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b116:	3b01      	subs	r3, #1
 800b118:	b29a      	uxth	r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b122:	b29b      	uxth	r3, r3
 800b124:	3b01      	subs	r3, #1
 800b126:	b29a      	uxth	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b130:	2b00      	cmp	r3, #0
 800b132:	f47f ae94 	bne.w	800ae5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2220      	movs	r2, #32
 800b13a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	e000      	b.n	800b154 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b152:	2302      	movs	r3, #2
  }
}
 800b154:	4618      	mov	r0, r3
 800b156:	3728      	adds	r7, #40	@ 0x28
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	00010004 	.word	0x00010004
 800b160:	20000f74 	.word	0x20000f74
 800b164:	14f8b589 	.word	0x14f8b589

0800b168 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b176:	b2db      	uxtb	r3, r3
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bc80      	pop	{r7}
 800b180:	4770      	bx	lr

0800b182 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b18e:	4618      	mov	r0, r3
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	bc80      	pop	{r7}
 800b196:	4770      	bx	lr

0800b198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d006      	beq.n	800b1c2 <I2C_MasterRequestWrite+0x2a>
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d003      	beq.n	800b1c2 <I2C_MasterRequestWrite+0x2a>
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b1c0:	d108      	bne.n	800b1d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e00b      	b.n	800b1ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d8:	2b12      	cmp	r3, #18
 800b1da:	d107      	bne.n	800b1ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 f9cd 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00d      	beq.n	800b220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b20e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b212:	d103      	bne.n	800b21c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b21a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e035      	b.n	800b28c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b228:	d108      	bne.n	800b23c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b22a:	897b      	ldrh	r3, [r7, #10]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	461a      	mov	r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b238:	611a      	str	r2, [r3, #16]
 800b23a:	e01b      	b.n	800b274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b23c:	897b      	ldrh	r3, [r7, #10]
 800b23e:	11db      	asrs	r3, r3, #7
 800b240:	b2db      	uxtb	r3, r3
 800b242:	f003 0306 	and.w	r3, r3, #6
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f063 030f 	orn	r3, r3, #15
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	490e      	ldr	r1, [pc, #56]	@ (800b294 <I2C_MasterRequestWrite+0xfc>)
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 fa16 	bl	800b68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e010      	b.n	800b28c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b26a:	897b      	ldrh	r3, [r7, #10]
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	4907      	ldr	r1, [pc, #28]	@ (800b298 <I2C_MasterRequestWrite+0x100>)
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fa06 	bl	800b68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e000      	b.n	800b28c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	00010008 	.word	0x00010008
 800b298:	00010002 	.word	0x00010002

0800b29c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	817b      	strh	r3, [r7, #10]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	813b      	strh	r3, [r7, #8]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 f960 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00d      	beq.n	800b2fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ec:	d103      	bne.n	800b2f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e05f      	b.n	800b3ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b2fa:	897b      	ldrh	r3, [r7, #10]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	6a3a      	ldr	r2, [r7, #32]
 800b30e:	492d      	ldr	r1, [pc, #180]	@ (800b3c4 <I2C_RequestMemoryWrite+0x128>)
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f9bb 	bl	800b68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e04c      	b.n	800b3ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b320:	2300      	movs	r3, #0
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b338:	6a39      	ldr	r1, [r7, #32]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 fa46 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00d      	beq.n	800b362 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34a:	2b04      	cmp	r3, #4
 800b34c:	d107      	bne.n	800b35e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b35c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e02b      	b.n	800b3ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d105      	bne.n	800b374 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b368:	893b      	ldrh	r3, [r7, #8]
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	611a      	str	r2, [r3, #16]
 800b372:	e021      	b.n	800b3b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b374:	893b      	ldrh	r3, [r7, #8]
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	b29b      	uxth	r3, r3
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b384:	6a39      	ldr	r1, [r7, #32]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 fa20 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00d      	beq.n	800b3ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b396:	2b04      	cmp	r3, #4
 800b398:	d107      	bne.n	800b3aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e005      	b.n	800b3ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3ae:	893b      	ldrh	r3, [r7, #8]
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	00010002 	.word	0x00010002

0800b3c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af02      	add	r7, sp, #8
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	4608      	mov	r0, r1
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	817b      	strh	r3, [r7, #10]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	813b      	strh	r3, [r7, #8]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	6a3b      	ldr	r3, [r7, #32]
 800b408:	2200      	movs	r2, #0
 800b40a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 f8c2 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00d      	beq.n	800b436 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b428:	d103      	bne.n	800b432 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b430:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e0aa      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b436:	897b      	ldrh	r3, [r7, #10]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	461a      	mov	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b448:	6a3a      	ldr	r2, [r7, #32]
 800b44a:	4952      	ldr	r1, [pc, #328]	@ (800b594 <I2C_RequestMemoryRead+0x1cc>)
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 f91d 	bl	800b68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e097      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b474:	6a39      	ldr	r1, [r7, #32]
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 f9a8 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00d      	beq.n	800b49e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b486:	2b04      	cmp	r3, #4
 800b488:	d107      	bne.n	800b49a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e076      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d105      	bne.n	800b4b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b4a4:	893b      	ldrh	r3, [r7, #8]
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	611a      	str	r2, [r3, #16]
 800b4ae:	e021      	b.n	800b4f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b4b0:	893b      	ldrh	r3, [r7, #8]
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4c0:	6a39      	ldr	r1, [r7, #32]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 f982 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00d      	beq.n	800b4ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d107      	bne.n	800b4e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e050      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b4ea:	893b      	ldrh	r3, [r7, #8]
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f6:	6a39      	ldr	r1, [r7, #32]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f967 	bl	800b7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00d      	beq.n	800b520 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d107      	bne.n	800b51c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b51a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e035      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b52e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	2200      	movs	r2, #0
 800b538:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 f82b 	bl	800b598 <I2C_WaitOnFlagUntilTimeout>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00d      	beq.n	800b564 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b556:	d103      	bne.n	800b560 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b55e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e013      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b564:	897b      	ldrh	r3, [r7, #10]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	f043 0301 	orr.w	r3, r3, #1
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b576:	6a3a      	ldr	r2, [r7, #32]
 800b578:	4906      	ldr	r1, [pc, #24]	@ (800b594 <I2C_RequestMemoryRead+0x1cc>)
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f000 f886 	bl	800b68c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	00010002 	.word	0x00010002

0800b598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5a8:	e048      	b.n	800b63c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5b0:	d044      	beq.n	800b63c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5b2:	f7fe f9e3 	bl	800997c <HAL_GetTick>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d302      	bcc.n	800b5c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d139      	bne.n	800b63c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	0c1b      	lsrs	r3, r3, #16
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d10d      	bne.n	800b5ee <I2C_WaitOnFlagUntilTimeout+0x56>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	43da      	mvns	r2, r3
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	4013      	ands	r3, r2
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	bf0c      	ite	eq
 800b5e4:	2301      	moveq	r3, #1
 800b5e6:	2300      	movne	r3, #0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	e00c      	b.n	800b608 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	43da      	mvns	r2, r3
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bf0c      	ite	eq
 800b600:	2301      	moveq	r3, #1
 800b602:	2300      	movne	r3, #0
 800b604:	b2db      	uxtb	r3, r3
 800b606:	461a      	mov	r2, r3
 800b608:	79fb      	ldrb	r3, [r7, #7]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d116      	bne.n	800b63c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2220      	movs	r2, #32
 800b618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b628:	f043 0220 	orr.w	r2, r3, #32
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e023      	b.n	800b684 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	0c1b      	lsrs	r3, r3, #16
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b01      	cmp	r3, #1
 800b644:	d10d      	bne.n	800b662 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	43da      	mvns	r2, r3
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	4013      	ands	r3, r2
 800b652:	b29b      	uxth	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	bf0c      	ite	eq
 800b658:	2301      	moveq	r3, #1
 800b65a:	2300      	movne	r3, #0
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	461a      	mov	r2, r3
 800b660:	e00c      	b.n	800b67c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	43da      	mvns	r2, r3
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	4013      	ands	r3, r2
 800b66e:	b29b      	uxth	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	bf0c      	ite	eq
 800b674:	2301      	moveq	r3, #1
 800b676:	2300      	movne	r3, #0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	461a      	mov	r2, r3
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d093      	beq.n	800b5aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b69a:	e071      	b.n	800b780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6aa:	d123      	bne.n	800b6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b6c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e0:	f043 0204 	orr.w	r2, r3, #4
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e067      	b.n	800b7c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6fa:	d041      	beq.n	800b780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6fc:	f7fe f93e 	bl	800997c <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d302      	bcc.n	800b712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d136      	bne.n	800b780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	0c1b      	lsrs	r3, r3, #16
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10c      	bne.n	800b736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	43da      	mvns	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4013      	ands	r3, r2
 800b728:	b29b      	uxth	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	bf14      	ite	ne
 800b72e:	2301      	movne	r3, #1
 800b730:	2300      	moveq	r3, #0
 800b732:	b2db      	uxtb	r3, r3
 800b734:	e00b      	b.n	800b74e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	43da      	mvns	r2, r3
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	4013      	ands	r3, r2
 800b742:	b29b      	uxth	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d016      	beq.n	800b780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2220      	movs	r2, #32
 800b75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76c:	f043 0220 	orr.w	r2, r3, #32
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e021      	b.n	800b7c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	0c1b      	lsrs	r3, r3, #16
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b01      	cmp	r3, #1
 800b788:	d10c      	bne.n	800b7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	43da      	mvns	r2, r3
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	4013      	ands	r3, r2
 800b796:	b29b      	uxth	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bf14      	ite	ne
 800b79c:	2301      	movne	r3, #1
 800b79e:	2300      	moveq	r3, #0
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	e00b      	b.n	800b7bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	43da      	mvns	r2, r3
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	bf14      	ite	ne
 800b7b6:	2301      	movne	r3, #1
 800b7b8:	2300      	moveq	r3, #0
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f47f af6d 	bne.w	800b69c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b7d8:	e034      	b.n	800b844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 f8e3 	bl	800b9a6 <I2C_IsAcknowledgeFailed>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e034      	b.n	800b854 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7f0:	d028      	beq.n	800b844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7f2:	f7fe f8c3 	bl	800997c <HAL_GetTick>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d302      	bcc.n	800b808 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11d      	bne.n	800b844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b812:	2b80      	cmp	r3, #128	@ 0x80
 800b814:	d016      	beq.n	800b844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2220      	movs	r2, #32
 800b820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b830:	f043 0220 	orr.w	r2, r3, #32
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e007      	b.n	800b854 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b84e:	2b80      	cmp	r3, #128	@ 0x80
 800b850:	d1c3      	bne.n	800b7da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b868:	e034      	b.n	800b8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 f89b 	bl	800b9a6 <I2C_IsAcknowledgeFailed>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e034      	b.n	800b8e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b880:	d028      	beq.n	800b8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b882:	f7fe f87b 	bl	800997c <HAL_GetTick>
 800b886:	4602      	mov	r2, r0
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d302      	bcc.n	800b898 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11d      	bne.n	800b8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	f003 0304 	and.w	r3, r3, #4
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d016      	beq.n	800b8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c0:	f043 0220 	orr.w	r2, r3, #32
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e007      	b.n	800b8e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d1c3      	bne.n	800b86a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b8f8:	e049      	b.n	800b98e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	f003 0310 	and.w	r3, r3, #16
 800b904:	2b10      	cmp	r3, #16
 800b906:	d119      	bne.n	800b93c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f06f 0210 	mvn.w	r2, #16
 800b910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2220      	movs	r2, #32
 800b91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e030      	b.n	800b99e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b93c:	f7fe f81e 	bl	800997c <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d302      	bcc.n	800b952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d11d      	bne.n	800b98e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b95c:	2b40      	cmp	r3, #64	@ 0x40
 800b95e:	d016      	beq.n	800b98e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2220      	movs	r2, #32
 800b96a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97a:	f043 0220 	orr.w	r2, r3, #32
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e007      	b.n	800b99e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b998:	2b40      	cmp	r3, #64	@ 0x40
 800b99a:	d1ae      	bne.n	800b8fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9bc:	d11b      	bne.n	800b9f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b9c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e2:	f043 0204 	orr.w	r2, r3, #4
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bc80      	pop	{r7}
 800ba00:	4770      	bx	lr
	...

0800ba04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e272      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 8087 	beq.w	800bb32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ba24:	4b92      	ldr	r3, [pc, #584]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f003 030c 	and.w	r3, r3, #12
 800ba2c:	2b04      	cmp	r3, #4
 800ba2e:	d00c      	beq.n	800ba4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ba30:	4b8f      	ldr	r3, [pc, #572]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f003 030c 	and.w	r3, r3, #12
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d112      	bne.n	800ba62 <HAL_RCC_OscConfig+0x5e>
 800ba3c:	4b8c      	ldr	r3, [pc, #560]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba48:	d10b      	bne.n	800ba62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba4a:	4b89      	ldr	r3, [pc, #548]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d06c      	beq.n	800bb30 <HAL_RCC_OscConfig+0x12c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d168      	bne.n	800bb30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e24c      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6a:	d106      	bne.n	800ba7a <HAL_RCC_OscConfig+0x76>
 800ba6c:	4b80      	ldr	r3, [pc, #512]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a7f      	ldr	r2, [pc, #508]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	e02e      	b.n	800bad8 <HAL_RCC_OscConfig+0xd4>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10c      	bne.n	800ba9c <HAL_RCC_OscConfig+0x98>
 800ba82:	4b7b      	ldr	r3, [pc, #492]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a7a      	ldr	r2, [pc, #488]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	4b78      	ldr	r3, [pc, #480]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a77      	ldr	r2, [pc, #476]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800ba94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	e01d      	b.n	800bad8 <HAL_RCC_OscConfig+0xd4>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baa4:	d10c      	bne.n	800bac0 <HAL_RCC_OscConfig+0xbc>
 800baa6:	4b72      	ldr	r3, [pc, #456]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a71      	ldr	r2, [pc, #452]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800baac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	4b6f      	ldr	r3, [pc, #444]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a6e      	ldr	r2, [pc, #440]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800babc:	6013      	str	r3, [r2, #0]
 800babe:	e00b      	b.n	800bad8 <HAL_RCC_OscConfig+0xd4>
 800bac0:	4b6b      	ldr	r3, [pc, #428]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a6a      	ldr	r2, [pc, #424]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	4b68      	ldr	r3, [pc, #416]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a67      	ldr	r2, [pc, #412]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d013      	beq.n	800bb08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bae0:	f7fd ff4c 	bl	800997c <HAL_GetTick>
 800bae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bae6:	e008      	b.n	800bafa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bae8:	f7fd ff48 	bl	800997c <HAL_GetTick>
 800baec:	4602      	mov	r2, r0
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	2b64      	cmp	r3, #100	@ 0x64
 800baf4:	d901      	bls.n	800bafa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800baf6:	2303      	movs	r3, #3
 800baf8:	e200      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bafa:	4b5d      	ldr	r3, [pc, #372]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0f0      	beq.n	800bae8 <HAL_RCC_OscConfig+0xe4>
 800bb06:	e014      	b.n	800bb32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb08:	f7fd ff38 	bl	800997c <HAL_GetTick>
 800bb0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb0e:	e008      	b.n	800bb22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb10:	f7fd ff34 	bl	800997c <HAL_GetTick>
 800bb14:	4602      	mov	r2, r0
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	2b64      	cmp	r3, #100	@ 0x64
 800bb1c:	d901      	bls.n	800bb22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e1ec      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb22:	4b53      	ldr	r3, [pc, #332]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1f0      	bne.n	800bb10 <HAL_RCC_OscConfig+0x10c>
 800bb2e:	e000      	b.n	800bb32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0302 	and.w	r3, r3, #2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d063      	beq.n	800bc06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bb3e:	4b4c      	ldr	r3, [pc, #304]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	f003 030c 	and.w	r3, r3, #12
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00b      	beq.n	800bb62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bb4a:	4b49      	ldr	r3, [pc, #292]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	f003 030c 	and.w	r3, r3, #12
 800bb52:	2b08      	cmp	r3, #8
 800bb54:	d11c      	bne.n	800bb90 <HAL_RCC_OscConfig+0x18c>
 800bb56:	4b46      	ldr	r3, [pc, #280]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d116      	bne.n	800bb90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb62:	4b43      	ldr	r3, [pc, #268]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <HAL_RCC_OscConfig+0x176>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d001      	beq.n	800bb7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e1c0      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb7a:	4b3d      	ldr	r3, [pc, #244]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	4939      	ldr	r1, [pc, #228]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb8e:	e03a      	b.n	800bc06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d020      	beq.n	800bbda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb98:	4b36      	ldr	r3, [pc, #216]	@ (800bc74 <HAL_RCC_OscConfig+0x270>)
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb9e:	f7fd feed 	bl	800997c <HAL_GetTick>
 800bba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bba4:	e008      	b.n	800bbb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bba6:	f7fd fee9 	bl	800997c <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e1a1      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbb8:	4b2d      	ldr	r3, [pc, #180]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0f0      	beq.n	800bba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbc4:	4b2a      	ldr	r3, [pc, #168]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	4927      	ldr	r1, [pc, #156]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	600b      	str	r3, [r1, #0]
 800bbd8:	e015      	b.n	800bc06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbda:	4b26      	ldr	r3, [pc, #152]	@ (800bc74 <HAL_RCC_OscConfig+0x270>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbe0:	f7fd fecc 	bl	800997c <HAL_GetTick>
 800bbe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbe6:	e008      	b.n	800bbfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbe8:	f7fd fec8 	bl	800997c <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d901      	bls.n	800bbfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e180      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbfa:	4b1d      	ldr	r3, [pc, #116]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0302 	and.w	r3, r3, #2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1f0      	bne.n	800bbe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 0308 	and.w	r3, r3, #8
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d03a      	beq.n	800bc88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d019      	beq.n	800bc4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc1a:	4b17      	ldr	r3, [pc, #92]	@ (800bc78 <HAL_RCC_OscConfig+0x274>)
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc20:	f7fd feac 	bl	800997c <HAL_GetTick>
 800bc24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc26:	e008      	b.n	800bc3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc28:	f7fd fea8 	bl	800997c <HAL_GetTick>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d901      	bls.n	800bc3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bc36:	2303      	movs	r3, #3
 800bc38:	e160      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc70 <HAL_RCC_OscConfig+0x26c>)
 800bc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0f0      	beq.n	800bc28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bc46:	2001      	movs	r0, #1
 800bc48:	f000 face 	bl	800c1e8 <RCC_Delay>
 800bc4c:	e01c      	b.n	800bc88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <HAL_RCC_OscConfig+0x274>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc54:	f7fd fe92 	bl	800997c <HAL_GetTick>
 800bc58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc5a:	e00f      	b.n	800bc7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc5c:	f7fd fe8e 	bl	800997c <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d908      	bls.n	800bc7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e146      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
 800bc6e:	bf00      	nop
 800bc70:	40021000 	.word	0x40021000
 800bc74:	42420000 	.word	0x42420000
 800bc78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc7c:	4b92      	ldr	r3, [pc, #584]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e9      	bne.n	800bc5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80a6 	beq.w	800bde2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc96:	2300      	movs	r3, #0
 800bc98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc9a:	4b8b      	ldr	r3, [pc, #556]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bc9c:	69db      	ldr	r3, [r3, #28]
 800bc9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10d      	bne.n	800bcc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bca6:	4b88      	ldr	r3, [pc, #544]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bca8:	69db      	ldr	r3, [r3, #28]
 800bcaa:	4a87      	ldr	r2, [pc, #540]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bcac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcb0:	61d3      	str	r3, [r2, #28]
 800bcb2:	4b85      	ldr	r3, [pc, #532]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcba:	60bb      	str	r3, [r7, #8]
 800bcbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcc2:	4b82      	ldr	r3, [pc, #520]	@ (800becc <HAL_RCC_OscConfig+0x4c8>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d118      	bne.n	800bd00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bcce:	4b7f      	ldr	r3, [pc, #508]	@ (800becc <HAL_RCC_OscConfig+0x4c8>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a7e      	ldr	r2, [pc, #504]	@ (800becc <HAL_RCC_OscConfig+0x4c8>)
 800bcd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bcda:	f7fd fe4f 	bl	800997c <HAL_GetTick>
 800bcde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bce0:	e008      	b.n	800bcf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bce2:	f7fd fe4b 	bl	800997c <HAL_GetTick>
 800bce6:	4602      	mov	r2, r0
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	2b64      	cmp	r3, #100	@ 0x64
 800bcee:	d901      	bls.n	800bcf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e103      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcf4:	4b75      	ldr	r3, [pc, #468]	@ (800becc <HAL_RCC_OscConfig+0x4c8>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0f0      	beq.n	800bce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d106      	bne.n	800bd16 <HAL_RCC_OscConfig+0x312>
 800bd08:	4b6f      	ldr	r3, [pc, #444]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd0a:	6a1b      	ldr	r3, [r3, #32]
 800bd0c:	4a6e      	ldr	r2, [pc, #440]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd0e:	f043 0301 	orr.w	r3, r3, #1
 800bd12:	6213      	str	r3, [r2, #32]
 800bd14:	e02d      	b.n	800bd72 <HAL_RCC_OscConfig+0x36e>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10c      	bne.n	800bd38 <HAL_RCC_OscConfig+0x334>
 800bd1e:	4b6a      	ldr	r3, [pc, #424]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	4a69      	ldr	r2, [pc, #420]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd24:	f023 0301 	bic.w	r3, r3, #1
 800bd28:	6213      	str	r3, [r2, #32]
 800bd2a:	4b67      	ldr	r3, [pc, #412]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	4a66      	ldr	r2, [pc, #408]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd30:	f023 0304 	bic.w	r3, r3, #4
 800bd34:	6213      	str	r3, [r2, #32]
 800bd36:	e01c      	b.n	800bd72 <HAL_RCC_OscConfig+0x36e>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2b05      	cmp	r3, #5
 800bd3e:	d10c      	bne.n	800bd5a <HAL_RCC_OscConfig+0x356>
 800bd40:	4b61      	ldr	r3, [pc, #388]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	4a60      	ldr	r2, [pc, #384]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd46:	f043 0304 	orr.w	r3, r3, #4
 800bd4a:	6213      	str	r3, [r2, #32]
 800bd4c:	4b5e      	ldr	r3, [pc, #376]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	4a5d      	ldr	r2, [pc, #372]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd52:	f043 0301 	orr.w	r3, r3, #1
 800bd56:	6213      	str	r3, [r2, #32]
 800bd58:	e00b      	b.n	800bd72 <HAL_RCC_OscConfig+0x36e>
 800bd5a:	4b5b      	ldr	r3, [pc, #364]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	4a5a      	ldr	r2, [pc, #360]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd60:	f023 0301 	bic.w	r3, r3, #1
 800bd64:	6213      	str	r3, [r2, #32]
 800bd66:	4b58      	ldr	r3, [pc, #352]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	4a57      	ldr	r2, [pc, #348]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd6c:	f023 0304 	bic.w	r3, r3, #4
 800bd70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d015      	beq.n	800bda6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd7a:	f7fd fdff 	bl	800997c <HAL_GetTick>
 800bd7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd80:	e00a      	b.n	800bd98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd82:	f7fd fdfb 	bl	800997c <HAL_GetTick>
 800bd86:	4602      	mov	r2, r0
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d901      	bls.n	800bd98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e0b1      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd98:	4b4b      	ldr	r3, [pc, #300]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0ee      	beq.n	800bd82 <HAL_RCC_OscConfig+0x37e>
 800bda4:	e014      	b.n	800bdd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bda6:	f7fd fde9 	bl	800997c <HAL_GetTick>
 800bdaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdac:	e00a      	b.n	800bdc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdae:	f7fd fde5 	bl	800997c <HAL_GetTick>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d901      	bls.n	800bdc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e09b      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdc4:	4b40      	ldr	r3, [pc, #256]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1ee      	bne.n	800bdae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d105      	bne.n	800bde2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdd6:	4b3c      	ldr	r3, [pc, #240]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	4a3b      	ldr	r2, [pc, #236]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bde0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 8087 	beq.w	800befa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bdec:	4b36      	ldr	r3, [pc, #216]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f003 030c 	and.w	r3, r3, #12
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d061      	beq.n	800bebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	69db      	ldr	r3, [r3, #28]
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d146      	bne.n	800be8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be00:	4b33      	ldr	r3, [pc, #204]	@ (800bed0 <HAL_RCC_OscConfig+0x4cc>)
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be06:	f7fd fdb9 	bl	800997c <HAL_GetTick>
 800be0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be0c:	e008      	b.n	800be20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be0e:	f7fd fdb5 	bl	800997c <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d901      	bls.n	800be20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e06d      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be20:	4b29      	ldr	r3, [pc, #164]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1f0      	bne.n	800be0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be34:	d108      	bne.n	800be48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800be36:	4b24      	ldr	r3, [pc, #144]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	4921      	ldr	r1, [pc, #132]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800be44:	4313      	orrs	r3, r2
 800be46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be48:	4b1f      	ldr	r3, [pc, #124]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a19      	ldr	r1, [r3, #32]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be58:	430b      	orrs	r3, r1
 800be5a:	491b      	ldr	r1, [pc, #108]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800be5c:	4313      	orrs	r3, r2
 800be5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be60:	4b1b      	ldr	r3, [pc, #108]	@ (800bed0 <HAL_RCC_OscConfig+0x4cc>)
 800be62:	2201      	movs	r2, #1
 800be64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be66:	f7fd fd89 	bl	800997c <HAL_GetTick>
 800be6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800be6c:	e008      	b.n	800be80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be6e:	f7fd fd85 	bl	800997c <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d901      	bls.n	800be80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800be7c:	2303      	movs	r3, #3
 800be7e:	e03d      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800be80:	4b11      	ldr	r3, [pc, #68]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d0f0      	beq.n	800be6e <HAL_RCC_OscConfig+0x46a>
 800be8c:	e035      	b.n	800befa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be8e:	4b10      	ldr	r3, [pc, #64]	@ (800bed0 <HAL_RCC_OscConfig+0x4cc>)
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be94:	f7fd fd72 	bl	800997c <HAL_GetTick>
 800be98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be9a:	e008      	b.n	800beae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be9c:	f7fd fd6e 	bl	800997c <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d901      	bls.n	800beae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e026      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800beae:	4b06      	ldr	r3, [pc, #24]	@ (800bec8 <HAL_RCC_OscConfig+0x4c4>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1f0      	bne.n	800be9c <HAL_RCC_OscConfig+0x498>
 800beba:	e01e      	b.n	800befa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d107      	bne.n	800bed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e019      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
 800bec8:	40021000 	.word	0x40021000
 800becc:	40007000 	.word	0x40007000
 800bed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bed4:	4b0b      	ldr	r3, [pc, #44]	@ (800bf04 <HAL_RCC_OscConfig+0x500>)
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d106      	bne.n	800bef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d001      	beq.n	800befa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	40021000 	.word	0x40021000

0800bf08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e0d0      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf1c:	4b6a      	ldr	r3, [pc, #424]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0307 	and.w	r3, r3, #7
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d910      	bls.n	800bf4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf2a:	4b67      	ldr	r3, [pc, #412]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f023 0207 	bic.w	r2, r3, #7
 800bf32:	4965      	ldr	r1, [pc, #404]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf3a:	4b63      	ldr	r3, [pc, #396]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0307 	and.w	r3, r3, #7
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d001      	beq.n	800bf4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e0b8      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d020      	beq.n	800bf9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d005      	beq.n	800bf70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf64:	4b59      	ldr	r3, [pc, #356]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	4a58      	ldr	r2, [pc, #352]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bf6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bf6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0308 	and.w	r3, r3, #8
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d005      	beq.n	800bf88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf7c:	4b53      	ldr	r3, [pc, #332]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	4a52      	ldr	r2, [pc, #328]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bf82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bf86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf88:	4b50      	ldr	r3, [pc, #320]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	494d      	ldr	r1, [pc, #308]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d040      	beq.n	800c028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d107      	bne.n	800bfbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfae:	4b47      	ldr	r3, [pc, #284]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d115      	bne.n	800bfe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e07f      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d107      	bne.n	800bfd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfc6:	4b41      	ldr	r3, [pc, #260]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d109      	bne.n	800bfe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e073      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfd6:	4b3d      	ldr	r3, [pc, #244]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 0302 	and.w	r3, r3, #2
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d101      	bne.n	800bfe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e06b      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bfe6:	4b39      	ldr	r3, [pc, #228]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	f023 0203 	bic.w	r2, r3, #3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	4936      	ldr	r1, [pc, #216]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800bff4:	4313      	orrs	r3, r2
 800bff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bff8:	f7fd fcc0 	bl	800997c <HAL_GetTick>
 800bffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bffe:	e00a      	b.n	800c016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c000:	f7fd fcbc 	bl	800997c <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c00e:	4293      	cmp	r3, r2
 800c010:	d901      	bls.n	800c016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e053      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c016:	4b2d      	ldr	r3, [pc, #180]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f003 020c 	and.w	r2, r3, #12
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	429a      	cmp	r2, r3
 800c026:	d1eb      	bne.n	800c000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c028:	4b27      	ldr	r3, [pc, #156]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 0307 	and.w	r3, r3, #7
 800c030:	683a      	ldr	r2, [r7, #0]
 800c032:	429a      	cmp	r2, r3
 800c034:	d210      	bcs.n	800c058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c036:	4b24      	ldr	r3, [pc, #144]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f023 0207 	bic.w	r2, r3, #7
 800c03e:	4922      	ldr	r1, [pc, #136]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	4313      	orrs	r3, r2
 800c044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c046:	4b20      	ldr	r3, [pc, #128]	@ (800c0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0307 	and.w	r3, r3, #7
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d001      	beq.n	800c058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e032      	b.n	800c0be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d008      	beq.n	800c076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c064:	4b19      	ldr	r3, [pc, #100]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	4916      	ldr	r1, [pc, #88]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800c072:	4313      	orrs	r3, r2
 800c074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0308 	and.w	r3, r3, #8
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d009      	beq.n	800c096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c082:	4b12      	ldr	r3, [pc, #72]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	490e      	ldr	r1, [pc, #56]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800c092:	4313      	orrs	r3, r2
 800c094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c096:	f000 f821 	bl	800c0dc <HAL_RCC_GetSysClockFreq>
 800c09a:	4602      	mov	r2, r0
 800c09c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0cc <HAL_RCC_ClockConfig+0x1c4>)
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	091b      	lsrs	r3, r3, #4
 800c0a2:	f003 030f 	and.w	r3, r3, #15
 800c0a6:	490a      	ldr	r1, [pc, #40]	@ (800c0d0 <HAL_RCC_ClockConfig+0x1c8>)
 800c0a8:	5ccb      	ldrb	r3, [r1, r3]
 800c0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ae:	4a09      	ldr	r2, [pc, #36]	@ (800c0d4 <HAL_RCC_ClockConfig+0x1cc>)
 800c0b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <HAL_RCC_ClockConfig+0x1d0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fd fc1e 	bl	80098f8 <HAL_InitTick>

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	40022000 	.word	0x40022000
 800c0cc:	40021000 	.word	0x40021000
 800c0d0:	0800f0e0 	.word	0x0800f0e0
 800c0d4:	20000f74 	.word	0x20000f74
 800c0d8:	20000f78 	.word	0x20000f78

0800c0dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60bb      	str	r3, [r7, #8]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c0f6:	4b1e      	ldr	r3, [pc, #120]	@ (800c170 <HAL_RCC_GetSysClockFreq+0x94>)
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f003 030c 	and.w	r3, r3, #12
 800c102:	2b04      	cmp	r3, #4
 800c104:	d002      	beq.n	800c10c <HAL_RCC_GetSysClockFreq+0x30>
 800c106:	2b08      	cmp	r3, #8
 800c108:	d003      	beq.n	800c112 <HAL_RCC_GetSysClockFreq+0x36>
 800c10a:	e027      	b.n	800c15c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c10c:	4b19      	ldr	r3, [pc, #100]	@ (800c174 <HAL_RCC_GetSysClockFreq+0x98>)
 800c10e:	613b      	str	r3, [r7, #16]
      break;
 800c110:	e027      	b.n	800c162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	0c9b      	lsrs	r3, r3, #18
 800c116:	f003 030f 	and.w	r3, r3, #15
 800c11a:	4a17      	ldr	r2, [pc, #92]	@ (800c178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c11c:	5cd3      	ldrb	r3, [r2, r3]
 800c11e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c126:	2b00      	cmp	r3, #0
 800c128:	d010      	beq.n	800c14c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c12a:	4b11      	ldr	r3, [pc, #68]	@ (800c170 <HAL_RCC_GetSysClockFreq+0x94>)
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	0c5b      	lsrs	r3, r3, #17
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	4a11      	ldr	r2, [pc, #68]	@ (800c17c <HAL_RCC_GetSysClockFreq+0xa0>)
 800c136:	5cd3      	ldrb	r3, [r2, r3]
 800c138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a0d      	ldr	r2, [pc, #52]	@ (800c174 <HAL_RCC_GetSysClockFreq+0x98>)
 800c13e:	fb03 f202 	mul.w	r2, r3, r2
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	fbb2 f3f3 	udiv	r3, r2, r3
 800c148:	617b      	str	r3, [r7, #20]
 800c14a:	e004      	b.n	800c156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a0c      	ldr	r2, [pc, #48]	@ (800c180 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c150:	fb02 f303 	mul.w	r3, r2, r3
 800c154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	613b      	str	r3, [r7, #16]
      break;
 800c15a:	e002      	b.n	800c162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c15c:	4b05      	ldr	r3, [pc, #20]	@ (800c174 <HAL_RCC_GetSysClockFreq+0x98>)
 800c15e:	613b      	str	r3, [r7, #16]
      break;
 800c160:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c162:	693b      	ldr	r3, [r7, #16]
}
 800c164:	4618      	mov	r0, r3
 800c166:	371c      	adds	r7, #28
 800c168:	46bd      	mov	sp, r7
 800c16a:	bc80      	pop	{r7}
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	40021000 	.word	0x40021000
 800c174:	007a1200 	.word	0x007a1200
 800c178:	0800f0f8 	.word	0x0800f0f8
 800c17c:	0800f108 	.word	0x0800f108
 800c180:	003d0900 	.word	0x003d0900

0800c184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c184:	b480      	push	{r7}
 800c186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c188:	4b02      	ldr	r3, [pc, #8]	@ (800c194 <HAL_RCC_GetHCLKFreq+0x10>)
 800c18a:	681b      	ldr	r3, [r3, #0]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	46bd      	mov	sp, r7
 800c190:	bc80      	pop	{r7}
 800c192:	4770      	bx	lr
 800c194:	20000f74 	.word	0x20000f74

0800c198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c19c:	f7ff fff2 	bl	800c184 <HAL_RCC_GetHCLKFreq>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	0a1b      	lsrs	r3, r3, #8
 800c1a8:	f003 0307 	and.w	r3, r3, #7
 800c1ac:	4903      	ldr	r1, [pc, #12]	@ (800c1bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1ae:	5ccb      	ldrb	r3, [r1, r3]
 800c1b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	40021000 	.word	0x40021000
 800c1bc:	0800f0f0 	.word	0x0800f0f0

0800c1c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c1c4:	f7ff ffde 	bl	800c184 <HAL_RCC_GetHCLKFreq>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	4b05      	ldr	r3, [pc, #20]	@ (800c1e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	0adb      	lsrs	r3, r3, #11
 800c1d0:	f003 0307 	and.w	r3, r3, #7
 800c1d4:	4903      	ldr	r1, [pc, #12]	@ (800c1e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1d6:	5ccb      	ldrb	r3, [r1, r3]
 800c1d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	40021000 	.word	0x40021000
 800c1e4:	0800f0f0 	.word	0x0800f0f0

0800c1e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <RCC_Delay+0x34>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c220 <RCC_Delay+0x38>)
 800c1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fa:	0a5b      	lsrs	r3, r3, #9
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	fb02 f303 	mul.w	r3, r2, r3
 800c202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c204:	bf00      	nop
  }
  while (Delay --);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	1e5a      	subs	r2, r3, #1
 800c20a:	60fa      	str	r2, [r7, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f9      	bne.n	800c204 <RCC_Delay+0x1c>
}
 800c210:	bf00      	nop
 800c212:	bf00      	nop
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	bc80      	pop	{r7}
 800c21a:	4770      	bx	lr
 800c21c:	20000f74 	.word	0x20000f74
 800c220:	10624dd3 	.word	0x10624dd3

0800c224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e041      	b.n	800c2ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7fd fa22 	bl	8009694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f000 fa82 	bl	800c76c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d001      	beq.n	800c2dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e044      	b.n	800c366 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f042 0201 	orr.w	r2, r2, #1
 800c2f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c370 <HAL_TIM_Base_Start_IT+0xac>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d018      	beq.n	800c330 <HAL_TIM_Base_Start_IT+0x6c>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a1c      	ldr	r2, [pc, #112]	@ (800c374 <HAL_TIM_Base_Start_IT+0xb0>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d013      	beq.n	800c330 <HAL_TIM_Base_Start_IT+0x6c>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c310:	d00e      	beq.n	800c330 <HAL_TIM_Base_Start_IT+0x6c>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a18      	ldr	r2, [pc, #96]	@ (800c378 <HAL_TIM_Base_Start_IT+0xb4>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d009      	beq.n	800c330 <HAL_TIM_Base_Start_IT+0x6c>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a16      	ldr	r2, [pc, #88]	@ (800c37c <HAL_TIM_Base_Start_IT+0xb8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d004      	beq.n	800c330 <HAL_TIM_Base_Start_IT+0x6c>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a15      	ldr	r2, [pc, #84]	@ (800c380 <HAL_TIM_Base_Start_IT+0xbc>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d111      	bne.n	800c354 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b06      	cmp	r3, #6
 800c340:	d010      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f042 0201 	orr.w	r2, r2, #1
 800c350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c352:	e007      	b.n	800c364 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0201 	orr.w	r2, r2, #1
 800c362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bc80      	pop	{r7}
 800c36e:	4770      	bx	lr
 800c370:	40012c00 	.word	0x40012c00
 800c374:	40013400 	.word	0x40013400
 800c378:	40000400 	.word	0x40000400
 800c37c:	40000800 	.word	0x40000800
 800c380:	40000c00 	.word	0x40000c00

0800c384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b02      	cmp	r3, #2
 800c398:	d122      	bne.n	800c3e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d11b      	bne.n	800c3e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f06f 0202 	mvn.w	r2, #2
 800c3b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	f003 0303 	and.w	r3, r3, #3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f9b4 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c3cc:	e005      	b.n	800c3da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 f9a7 	bl	800c722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 f9b6 	bl	800c746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	f003 0304 	and.w	r3, r3, #4
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	d122      	bne.n	800c434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b04      	cmp	r3, #4
 800c3fa:	d11b      	bne.n	800c434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f06f 0204 	mvn.w	r2, #4
 800c404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2202      	movs	r2, #2
 800c40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f98a 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c420:	e005      	b.n	800c42e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f97d 	bl	800c722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 f98c 	bl	800c746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	f003 0308 	and.w	r3, r3, #8
 800c43e:	2b08      	cmp	r3, #8
 800c440:	d122      	bne.n	800c488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	f003 0308 	and.w	r3, r3, #8
 800c44c:	2b08      	cmp	r3, #8
 800c44e:	d11b      	bne.n	800c488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f06f 0208 	mvn.w	r2, #8
 800c458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2204      	movs	r2, #4
 800c45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	f003 0303 	and.w	r3, r3, #3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f960 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c474:	e005      	b.n	800c482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f953 	bl	800c722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f962 	bl	800c746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	f003 0310 	and.w	r3, r3, #16
 800c492:	2b10      	cmp	r3, #16
 800c494:	d122      	bne.n	800c4dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f003 0310 	and.w	r3, r3, #16
 800c4a0:	2b10      	cmp	r3, #16
 800c4a2:	d11b      	bne.n	800c4dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f06f 0210 	mvn.w	r2, #16
 800c4ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2208      	movs	r2, #8
 800c4b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	69db      	ldr	r3, [r3, #28]
 800c4ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f936 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c4c8:	e005      	b.n	800c4d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f929 	bl	800c722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f938 	bl	800c746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d10e      	bne.n	800c508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d107      	bne.n	800c508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f06f 0201 	mvn.w	r2, #1
 800c500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7fc fd4c 	bl	8008fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c512:	2b80      	cmp	r3, #128	@ 0x80
 800c514:	d10e      	bne.n	800c534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c520:	2b80      	cmp	r3, #128	@ 0x80
 800c522:	d107      	bne.n	800c534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c52c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 faa1 	bl	800ca76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c53e:	2b40      	cmp	r3, #64	@ 0x40
 800c540:	d10e      	bne.n	800c560 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54c:	2b40      	cmp	r3, #64	@ 0x40
 800c54e:	d107      	bne.n	800c560 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f8fc 	bl	800c758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b20      	cmp	r3, #32
 800c56c:	d10e      	bne.n	800c58c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f003 0320 	and.w	r3, r3, #32
 800c578:	2b20      	cmp	r3, #32
 800c57a:	d107      	bne.n	800c58c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f06f 0220 	mvn.w	r2, #32
 800c584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fa6c 	bl	800ca64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c58c:	bf00      	nop
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d101      	bne.n	800c5b0 <HAL_TIM_ConfigClockSource+0x1c>
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	e0b4      	b.n	800c71a <HAL_TIM_ConfigClockSource+0x186>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c5ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5e8:	d03e      	beq.n	800c668 <HAL_TIM_ConfigClockSource+0xd4>
 800c5ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5ee:	f200 8087 	bhi.w	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c5f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5f6:	f000 8086 	beq.w	800c706 <HAL_TIM_ConfigClockSource+0x172>
 800c5fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5fe:	d87f      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c600:	2b70      	cmp	r3, #112	@ 0x70
 800c602:	d01a      	beq.n	800c63a <HAL_TIM_ConfigClockSource+0xa6>
 800c604:	2b70      	cmp	r3, #112	@ 0x70
 800c606:	d87b      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c608:	2b60      	cmp	r3, #96	@ 0x60
 800c60a:	d050      	beq.n	800c6ae <HAL_TIM_ConfigClockSource+0x11a>
 800c60c:	2b60      	cmp	r3, #96	@ 0x60
 800c60e:	d877      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c610:	2b50      	cmp	r3, #80	@ 0x50
 800c612:	d03c      	beq.n	800c68e <HAL_TIM_ConfigClockSource+0xfa>
 800c614:	2b50      	cmp	r3, #80	@ 0x50
 800c616:	d873      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c618:	2b40      	cmp	r3, #64	@ 0x40
 800c61a:	d058      	beq.n	800c6ce <HAL_TIM_ConfigClockSource+0x13a>
 800c61c:	2b40      	cmp	r3, #64	@ 0x40
 800c61e:	d86f      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c620:	2b30      	cmp	r3, #48	@ 0x30
 800c622:	d064      	beq.n	800c6ee <HAL_TIM_ConfigClockSource+0x15a>
 800c624:	2b30      	cmp	r3, #48	@ 0x30
 800c626:	d86b      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c628:	2b20      	cmp	r3, #32
 800c62a:	d060      	beq.n	800c6ee <HAL_TIM_ConfigClockSource+0x15a>
 800c62c:	2b20      	cmp	r3, #32
 800c62e:	d867      	bhi.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
 800c630:	2b00      	cmp	r3, #0
 800c632:	d05c      	beq.n	800c6ee <HAL_TIM_ConfigClockSource+0x15a>
 800c634:	2b10      	cmp	r3, #16
 800c636:	d05a      	beq.n	800c6ee <HAL_TIM_ConfigClockSource+0x15a>
 800c638:	e062      	b.n	800c700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c64a:	f000 f980 	bl	800c94e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c65c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	609a      	str	r2, [r3, #8]
      break;
 800c666:	e04f      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c678:	f000 f969 	bl	800c94e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	689a      	ldr	r2, [r3, #8]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c68a:	609a      	str	r2, [r3, #8]
      break;
 800c68c:	e03c      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c69a:	461a      	mov	r2, r3
 800c69c:	f000 f8e0 	bl	800c860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2150      	movs	r1, #80	@ 0x50
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 f937 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800c6ac:	e02c      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f000 f8fe 	bl	800c8bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2160      	movs	r1, #96	@ 0x60
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 f927 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800c6cc:	e01c      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f000 f8c0 	bl	800c860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2140      	movs	r1, #64	@ 0x40
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 f917 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800c6ec:	e00c      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f000 f90e 	bl	800c91a <TIM_ITRx_SetConfig>
      break;
 800c6fe:	e003      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	73fb      	strb	r3, [r7, #15]
      break;
 800c704:	e000      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c722:	b480      	push	{r7}
 800c724:	b083      	sub	sp, #12
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c72a:	bf00      	nop
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	bc80      	pop	{r7}
 800c732:	4770      	bx	lr

0800c734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	bc80      	pop	{r7}
 800c744:	4770      	bx	lr

0800c746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c746:	b480      	push	{r7}
 800c748:	b083      	sub	sp, #12
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	bc80      	pop	{r7}
 800c756:	4770      	bx	lr

0800c758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	bc80      	pop	{r7}
 800c768:	4770      	bx	lr
	...

0800c76c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a33      	ldr	r2, [pc, #204]	@ (800c84c <TIM_Base_SetConfig+0xe0>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d013      	beq.n	800c7ac <TIM_Base_SetConfig+0x40>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a32      	ldr	r2, [pc, #200]	@ (800c850 <TIM_Base_SetConfig+0xe4>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d00f      	beq.n	800c7ac <TIM_Base_SetConfig+0x40>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c792:	d00b      	beq.n	800c7ac <TIM_Base_SetConfig+0x40>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a2f      	ldr	r2, [pc, #188]	@ (800c854 <TIM_Base_SetConfig+0xe8>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d007      	beq.n	800c7ac <TIM_Base_SetConfig+0x40>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a2e      	ldr	r2, [pc, #184]	@ (800c858 <TIM_Base_SetConfig+0xec>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d003      	beq.n	800c7ac <TIM_Base_SetConfig+0x40>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c85c <TIM_Base_SetConfig+0xf0>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d108      	bne.n	800c7be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a22      	ldr	r2, [pc, #136]	@ (800c84c <TIM_Base_SetConfig+0xe0>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d013      	beq.n	800c7ee <TIM_Base_SetConfig+0x82>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a21      	ldr	r2, [pc, #132]	@ (800c850 <TIM_Base_SetConfig+0xe4>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d00f      	beq.n	800c7ee <TIM_Base_SetConfig+0x82>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7d4:	d00b      	beq.n	800c7ee <TIM_Base_SetConfig+0x82>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800c854 <TIM_Base_SetConfig+0xe8>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d007      	beq.n	800c7ee <TIM_Base_SetConfig+0x82>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c858 <TIM_Base_SetConfig+0xec>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d003      	beq.n	800c7ee <TIM_Base_SetConfig+0x82>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c85c <TIM_Base_SetConfig+0xf0>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d108      	bne.n	800c800 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	689a      	ldr	r2, [r3, #8]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a09      	ldr	r2, [pc, #36]	@ (800c84c <TIM_Base_SetConfig+0xe0>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d003      	beq.n	800c834 <TIM_Base_SetConfig+0xc8>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a08      	ldr	r2, [pc, #32]	@ (800c850 <TIM_Base_SetConfig+0xe4>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d103      	bne.n	800c83c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	691a      	ldr	r2, [r3, #16]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	615a      	str	r2, [r3, #20]
}
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	bc80      	pop	{r7}
 800c84a:	4770      	bx	lr
 800c84c:	40012c00 	.word	0x40012c00
 800c850:	40013400 	.word	0x40013400
 800c854:	40000400 	.word	0x40000400
 800c858:	40000800 	.word	0x40000800
 800c85c:	40000c00 	.word	0x40000c00

0800c860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	f023 0201 	bic.w	r2, r3, #1
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c88a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	011b      	lsls	r3, r3, #4
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4313      	orrs	r3, r2
 800c894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f023 030a 	bic.w	r3, r3, #10
 800c89c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	621a      	str	r2, [r3, #32]
}
 800c8b2:	bf00      	nop
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bc80      	pop	{r7}
 800c8ba:	4770      	bx	lr

0800c8bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	f023 0210 	bic.w	r2, r3, #16
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c8e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	031b      	lsls	r3, r3, #12
 800c8ec:	693a      	ldr	r2, [r7, #16]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c8f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	011b      	lsls	r3, r3, #4
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	4313      	orrs	r3, r2
 800c902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	621a      	str	r2, [r3, #32]
}
 800c910:	bf00      	nop
 800c912:	371c      	adds	r7, #28
 800c914:	46bd      	mov	sp, r7
 800c916:	bc80      	pop	{r7}
 800c918:	4770      	bx	lr

0800c91a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b085      	sub	sp, #20
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c932:	683a      	ldr	r2, [r7, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4313      	orrs	r3, r2
 800c938:	f043 0307 	orr.w	r3, r3, #7
 800c93c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	609a      	str	r2, [r3, #8]
}
 800c944:	bf00      	nop
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	bc80      	pop	{r7}
 800c94c:	4770      	bx	lr

0800c94e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c94e:	b480      	push	{r7}
 800c950:	b087      	sub	sp, #28
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	607a      	str	r2, [r7, #4]
 800c95a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	021a      	lsls	r2, r3, #8
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	431a      	orrs	r2, r3
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	4313      	orrs	r3, r2
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	4313      	orrs	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	609a      	str	r2, [r3, #8]
}
 800c982:	bf00      	nop
 800c984:	371c      	adds	r7, #28
 800c986:	46bd      	mov	sp, r7
 800c988:	bc80      	pop	{r7}
 800c98a:	4770      	bx	lr

0800c98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e050      	b.n	800ca46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a1b      	ldr	r2, [pc, #108]	@ (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d018      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a19      	ldr	r2, [pc, #100]	@ (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d013      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9fa:	d00e      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a15      	ldr	r2, [pc, #84]	@ (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d009      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a14      	ldr	r2, [pc, #80]	@ (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d004      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a12      	ldr	r2, [pc, #72]	@ (800ca60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d10c      	bne.n	800ca34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bc80      	pop	{r7}
 800ca4e:	4770      	bx	lr
 800ca50:	40012c00 	.word	0x40012c00
 800ca54:	40013400 	.word	0x40013400
 800ca58:	40000400 	.word	0x40000400
 800ca5c:	40000800 	.word	0x40000800
 800ca60:	40000c00 	.word	0x40000c00

0800ca64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca6c:	bf00      	nop
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bc80      	pop	{r7}
 800ca74:	4770      	bx	lr

0800ca76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca7e:	bf00      	nop
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bc80      	pop	{r7}
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e042      	b.n	800cb20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7fc fe16 	bl	80096e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2224      	movs	r2, #36	@ 0x24
 800cab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800caca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fdcd 	bl	800d66c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	691a      	ldr	r2, [r3, #16]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	695a      	ldr	r2, [r3, #20]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800caf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68da      	ldr	r2, [r3, #12]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cb00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2220      	movs	r2, #32
 800cb0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2220      	movs	r2, #32
 800cb14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	@ 0x28
 800cb2c:	af02      	add	r7, sp, #8
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	603b      	str	r3, [r7, #0]
 800cb34:	4613      	mov	r3, r2
 800cb36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	d16d      	bne.n	800cc24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d002      	beq.n	800cb54 <HAL_UART_Transmit+0x2c>
 800cb4e:	88fb      	ldrh	r3, [r7, #6]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e066      	b.n	800cc26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2221      	movs	r2, #33	@ 0x21
 800cb62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb66:	f7fc ff09 	bl	800997c <HAL_GetTick>
 800cb6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	88fa      	ldrh	r2, [r7, #6]
 800cb70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	88fa      	ldrh	r2, [r7, #6]
 800cb76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb80:	d108      	bne.n	800cb94 <HAL_UART_Transmit+0x6c>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d104      	bne.n	800cb94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	61bb      	str	r3, [r7, #24]
 800cb92:	e003      	b.n	800cb9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cb9c:	e02a      	b.n	800cbf4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2200      	movs	r2, #0
 800cba6:	2180      	movs	r1, #128	@ 0x80
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f000 fb1d 	bl	800d1e8 <UART_WaitOnFlagUntilTimeout>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	e036      	b.n	800cc26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10b      	bne.n	800cbd6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	3302      	adds	r3, #2
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	e007      	b.n	800cbe6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	781a      	ldrb	r2, [r3, #0]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	3b01      	subs	r3, #1
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1cf      	bne.n	800cb9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2200      	movs	r2, #0
 800cc06:	2140      	movs	r1, #64	@ 0x40
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f000 faed 	bl	800d1e8 <UART_WaitOnFlagUntilTimeout>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e006      	b.n	800cc26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	e000      	b.n	800cc26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cc24:	2302      	movs	r3, #2
  }
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3720      	adds	r7, #32
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	60f8      	str	r0, [r7, #12]
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	d112      	bne.n	800cc6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d002      	beq.n	800cc54 <HAL_UART_Receive_IT+0x26>
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e00b      	b.n	800cc70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cc5e:	88fb      	ldrh	r3, [r7, #6]
 800cc60:	461a      	mov	r2, r3
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f000 fb2d 	bl	800d2c4 <UART_Start_Receive_IT>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	e000      	b.n	800cc70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cc6e:	2302      	movs	r3, #2
  }
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b0ba      	sub	sp, #232	@ 0xe8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cca4:	2300      	movs	r3, #0
 800cca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ccaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccae:	f003 030f 	and.w	r3, r3, #15
 800ccb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ccb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10f      	bne.n	800ccde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ccbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d009      	beq.n	800ccde <HAL_UART_IRQHandler+0x66>
 800ccca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fc0a 	bl	800d4f0 <UART_Receive_IT>
      return;
 800ccdc:	e25b      	b.n	800d196 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ccde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80de 	beq.w	800cea4 <HAL_UART_IRQHandler+0x22c>
 800cce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ccf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 80d1 	beq.w	800cea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00b      	beq.n	800cd26 <HAL_UART_IRQHandler+0xae>
 800cd0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d005      	beq.n	800cd26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1e:	f043 0201 	orr.w	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd2a:	f003 0304 	and.w	r3, r3, #4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00b      	beq.n	800cd4a <HAL_UART_IRQHandler+0xd2>
 800cd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d005      	beq.n	800cd4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd42:	f043 0202 	orr.w	r2, r3, #2
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd4e:	f003 0302 	and.w	r3, r3, #2
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00b      	beq.n	800cd6e <HAL_UART_IRQHandler+0xf6>
 800cd56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d005      	beq.n	800cd6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd66:	f043 0204 	orr.w	r2, r3, #4
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd72:	f003 0308 	and.w	r3, r3, #8
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d011      	beq.n	800cd9e <HAL_UART_IRQHandler+0x126>
 800cd7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd7e:	f003 0320 	and.w	r3, r3, #32
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d105      	bne.n	800cd92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd8a:	f003 0301 	and.w	r3, r3, #1
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d005      	beq.n	800cd9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd96:	f043 0208 	orr.w	r2, r3, #8
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 81f2 	beq.w	800d18c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cda8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdac:	f003 0320 	and.w	r3, r3, #32
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d008      	beq.n	800cdc6 <HAL_UART_IRQHandler+0x14e>
 800cdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fb95 	bl	800d4f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bf14      	ite	ne
 800cdd4:	2301      	movne	r3, #1
 800cdd6:	2300      	moveq	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde2:	f003 0308 	and.w	r3, r3, #8
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d103      	bne.n	800cdf2 <HAL_UART_IRQHandler+0x17a>
 800cdea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d04f      	beq.n	800ce92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa9f 	bl	800d336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	695b      	ldr	r3, [r3, #20]
 800cdfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d041      	beq.n	800ce8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3314      	adds	r3, #20
 800ce0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce14:	e853 3f00 	ldrex	r3, [r3]
 800ce18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ce1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3314      	adds	r3, #20
 800ce2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ce32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ce36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ce3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ce42:	e841 2300 	strex	r3, r2, [r1]
 800ce46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ce4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1d9      	bne.n	800ce06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d013      	beq.n	800ce82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce5e:	4a7e      	ldr	r2, [pc, #504]	@ (800d058 <HAL_UART_IRQHandler+0x3e0>)
 800ce60:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fc fffa 	bl	8009e60 <HAL_DMA_Abort_IT>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d016      	beq.n	800cea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce80:	e00e      	b.n	800cea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f99c 	bl	800d1c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce88:	e00a      	b.n	800cea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f998 	bl	800d1c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce90:	e006      	b.n	800cea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f994 	bl	800d1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ce9e:	e175      	b.n	800d18c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cea0:	bf00      	nop
    return;
 800cea2:	e173      	b.n	800d18c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	f040 814f 	bne.w	800d14c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ceae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceb2:	f003 0310 	and.w	r3, r3, #16
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 8148 	beq.w	800d14c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cec0:	f003 0310 	and.w	r3, r3, #16
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 8141 	beq.w	800d14c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ceca:	2300      	movs	r3, #0
 800cecc:	60bb      	str	r3, [r7, #8]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	60bb      	str	r3, [r7, #8]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	60bb      	str	r3, [r7, #8]
 800cede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	695b      	ldr	r3, [r3, #20]
 800cee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 80b6 	beq.w	800d05c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cefc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 8145 	beq.w	800d190 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cf0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	f080 813e 	bcs.w	800d190 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf20:	699b      	ldr	r3, [r3, #24]
 800cf22:	2b20      	cmp	r3, #32
 800cf24:	f000 8088 	beq.w	800d038 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	330c      	adds	r3, #12
 800cf2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cf3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	330c      	adds	r3, #12
 800cf50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cf54:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cf58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cf60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf64:	e841 2300 	strex	r3, r2, [r1]
 800cf68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1d9      	bne.n	800cf28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3314      	adds	r3, #20
 800cf7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf7e:	e853 3f00 	ldrex	r3, [r3]
 800cf82:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf86:	f023 0301 	bic.w	r3, r3, #1
 800cf8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3314      	adds	r3, #20
 800cf94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cfa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cfa4:	e841 2300 	strex	r3, r2, [r1]
 800cfa8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cfaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1e1      	bne.n	800cf74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	3314      	adds	r3, #20
 800cfb6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cfba:	e853 3f00 	ldrex	r3, [r3]
 800cfbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cfc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3314      	adds	r3, #20
 800cfd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cfd4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cfd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cfda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cfdc:	e841 2300 	strex	r3, r2, [r1]
 800cfe0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cfe2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e3      	bne.n	800cfb0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2220      	movs	r2, #32
 800cfec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	330c      	adds	r3, #12
 800cffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d000:	e853 3f00 	ldrex	r3, [r3]
 800d004:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d008:	f023 0310 	bic.w	r3, r3, #16
 800d00c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	330c      	adds	r3, #12
 800d016:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d01a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d01c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d022:	e841 2300 	strex	r3, r2, [r1]
 800d026:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1e3      	bne.n	800cff6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d032:	4618      	mov	r0, r3
 800d034:	f7fc fed9 	bl	8009dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d046:	b29b      	uxth	r3, r3
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	4619      	mov	r1, r3
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f8bf 	bl	800d1d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d054:	e09c      	b.n	800d190 <HAL_UART_IRQHandler+0x518>
 800d056:	bf00      	nop
 800d058:	0800d3fb 	.word	0x0800d3fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d064:	b29b      	uxth	r3, r3
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d070:	b29b      	uxth	r3, r3
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 808e 	beq.w	800d194 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 8089 	beq.w	800d194 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	330c      	adds	r3, #12
 800d088:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08c:	e853 3f00 	ldrex	r3, [r3]
 800d090:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d098:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d0a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d0ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1e3      	bne.n	800d082 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	3314      	adds	r3, #20
 800d0c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	e853 3f00 	ldrex	r3, [r3]
 800d0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800d0ca:	6a3b      	ldr	r3, [r7, #32]
 800d0cc:	f023 0301 	bic.w	r3, r3, #1
 800d0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3314      	adds	r3, #20
 800d0da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d0de:	633a      	str	r2, [r7, #48]	@ 0x30
 800d0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0e6:	e841 2300 	strex	r3, r2, [r1]
 800d0ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1e3      	bne.n	800d0ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	330c      	adds	r3, #12
 800d106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	e853 3f00 	ldrex	r3, [r3]
 800d10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f023 0310 	bic.w	r3, r3, #16
 800d116:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	330c      	adds	r3, #12
 800d120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d124:	61fa      	str	r2, [r7, #28]
 800d126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d128:	69b9      	ldr	r1, [r7, #24]
 800d12a:	69fa      	ldr	r2, [r7, #28]
 800d12c:	e841 2300 	strex	r3, r2, [r1]
 800d130:	617b      	str	r3, [r7, #20]
   return(result);
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1e3      	bne.n	800d100 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2202      	movs	r2, #2
 800d13c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d13e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f844 	bl	800d1d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d14a:	e023      	b.n	800d194 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d154:	2b00      	cmp	r3, #0
 800d156:	d009      	beq.n	800d16c <HAL_UART_IRQHandler+0x4f4>
 800d158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d15c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d160:	2b00      	cmp	r3, #0
 800d162:	d003      	beq.n	800d16c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f95c 	bl	800d422 <UART_Transmit_IT>
    return;
 800d16a:	e014      	b.n	800d196 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00e      	beq.n	800d196 <HAL_UART_IRQHandler+0x51e>
 800d178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d180:	2b00      	cmp	r3, #0
 800d182:	d008      	beq.n	800d196 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f99b 	bl	800d4c0 <UART_EndTransmit_IT>
    return;
 800d18a:	e004      	b.n	800d196 <HAL_UART_IRQHandler+0x51e>
    return;
 800d18c:	bf00      	nop
 800d18e:	e002      	b.n	800d196 <HAL_UART_IRQHandler+0x51e>
      return;
 800d190:	bf00      	nop
 800d192:	e000      	b.n	800d196 <HAL_UART_IRQHandler+0x51e>
      return;
 800d194:	bf00      	nop
  }
}
 800d196:	37e8      	adds	r7, #232	@ 0xe8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bc80      	pop	{r7}
 800d1ac:	4770      	bx	lr

0800d1ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b083      	sub	sp, #12
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d1b6:	bf00      	nop
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bc80      	pop	{r7}
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bc80      	pop	{r7}
 800d1d0:	4770      	bx	lr

0800d1d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1d2:	b480      	push	{r7}
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1de:	bf00      	nop
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bc80      	pop	{r7}
 800d1e6:	4770      	bx	lr

0800d1e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b090      	sub	sp, #64	@ 0x40
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	603b      	str	r3, [r7, #0]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1f8:	e050      	b.n	800d29c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d200:	d04c      	beq.n	800d29c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d204:	2b00      	cmp	r3, #0
 800d206:	d007      	beq.n	800d218 <UART_WaitOnFlagUntilTimeout+0x30>
 800d208:	f7fc fbb8 	bl	800997c <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d214:	429a      	cmp	r2, r3
 800d216:	d241      	bcs.n	800d29c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	330c      	adds	r3, #12
 800d21e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d222:	e853 3f00 	ldrex	r3, [r3]
 800d226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	330c      	adds	r3, #12
 800d236:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d238:	637a      	str	r2, [r7, #52]	@ 0x34
 800d23a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d23e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e5      	bne.n	800d218 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3314      	adds	r3, #20
 800d252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	613b      	str	r3, [r7, #16]
   return(result);
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	f023 0301 	bic.w	r3, r3, #1
 800d262:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3314      	adds	r3, #20
 800d26a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d26c:	623a      	str	r2, [r7, #32]
 800d26e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	69f9      	ldr	r1, [r7, #28]
 800d272:	6a3a      	ldr	r2, [r7, #32]
 800d274:	e841 2300 	strex	r3, r2, [r1]
 800d278:	61bb      	str	r3, [r7, #24]
   return(result);
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e5      	bne.n	800d24c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2220      	movs	r2, #32
 800d284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2220      	movs	r2, #32
 800d28c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800d298:	2303      	movs	r3, #3
 800d29a:	e00f      	b.n	800d2bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	bf0c      	ite	eq
 800d2ac:	2301      	moveq	r3, #1
 800d2ae:	2300      	movne	r3, #0
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	79fb      	ldrb	r3, [r7, #7]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d09f      	beq.n	800d1fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3740      	adds	r7, #64	@ 0x40
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	88fa      	ldrh	r2, [r7, #6]
 800d2dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	88fa      	ldrh	r2, [r7, #6]
 800d2e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2222      	movs	r2, #34	@ 0x22
 800d2ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d308:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	695a      	ldr	r2, [r3, #20]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f042 0201 	orr.w	r2, r2, #1
 800d318:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68da      	ldr	r2, [r3, #12]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f042 0220 	orr.w	r2, r2, #32
 800d328:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	bc80      	pop	{r7}
 800d334:	4770      	bx	lr

0800d336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d336:	b480      	push	{r7}
 800d338:	b095      	sub	sp, #84	@ 0x54
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	330c      	adds	r3, #12
 800d344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d348:	e853 3f00 	ldrex	r3, [r3]
 800d34c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	330c      	adds	r3, #12
 800d35c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d35e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d366:	e841 2300 	strex	r3, r2, [r1]
 800d36a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1e5      	bne.n	800d33e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3314      	adds	r3, #20
 800d378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	e853 3f00 	ldrex	r3, [r3]
 800d380:	61fb      	str	r3, [r7, #28]
   return(result);
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	f023 0301 	bic.w	r3, r3, #1
 800d388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	3314      	adds	r3, #20
 800d390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d39a:	e841 2300 	strex	r3, r2, [r1]
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1e5      	bne.n	800d372 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d119      	bne.n	800d3e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	330c      	adds	r3, #12
 800d3b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	e853 3f00 	ldrex	r3, [r3]
 800d3bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	f023 0310 	bic.w	r3, r3, #16
 800d3c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	330c      	adds	r3, #12
 800d3cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3ce:	61ba      	str	r2, [r7, #24]
 800d3d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d2:	6979      	ldr	r1, [r7, #20]
 800d3d4:	69ba      	ldr	r2, [r7, #24]
 800d3d6:	e841 2300 	strex	r3, r2, [r1]
 800d3da:	613b      	str	r3, [r7, #16]
   return(result);
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1e5      	bne.n	800d3ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2220      	movs	r2, #32
 800d3e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d3f0:	bf00      	nop
 800d3f2:	3754      	adds	r7, #84	@ 0x54
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bc80      	pop	{r7}
 800d3f8:	4770      	bx	lr

0800d3fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b084      	sub	sp, #16
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff fed3 	bl	800d1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d41a:	bf00      	nop
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d422:	b480      	push	{r7}
 800d424:	b085      	sub	sp, #20
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b21      	cmp	r3, #33	@ 0x21
 800d434:	d13e      	bne.n	800d4b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d43e:	d114      	bne.n	800d46a <UART_Transmit_IT+0x48>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d110      	bne.n	800d46a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
 800d44c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	881b      	ldrh	r3, [r3, #0]
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d45c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	1c9a      	adds	r2, r3, #2
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	621a      	str	r2, [r3, #32]
 800d468:	e008      	b.n	800d47c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	1c59      	adds	r1, r3, #1
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	6211      	str	r1, [r2, #32]
 800d474:	781a      	ldrb	r2, [r3, #0]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	b29b      	uxth	r3, r3
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	4619      	mov	r1, r3
 800d48a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10f      	bne.n	800d4b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68da      	ldr	r2, [r3, #12]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d49e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68da      	ldr	r2, [r3, #12]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	e000      	b.n	800d4b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d4b4:	2302      	movs	r3, #2
  }
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bc80      	pop	{r7}
 800d4be:	4770      	bx	lr

0800d4c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d4d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2220      	movs	r2, #32
 800d4dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7ff fe5b 	bl	800d19c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b08c      	sub	sp, #48	@ 0x30
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b22      	cmp	r3, #34	@ 0x22
 800d502:	f040 80ae 	bne.w	800d662 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d50e:	d117      	bne.n	800d540 <UART_Receive_IT+0x50>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d113      	bne.n	800d540 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d518:	2300      	movs	r3, #0
 800d51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d520:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	b29b      	uxth	r3, r3
 800d52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52e:	b29a      	uxth	r2, r3
 800d530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d532:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d538:	1c9a      	adds	r2, r3, #2
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	629a      	str	r2, [r3, #40]	@ 0x28
 800d53e:	e026      	b.n	800d58e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d544:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d546:	2300      	movs	r3, #0
 800d548:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d552:	d007      	beq.n	800d564 <UART_Receive_IT+0x74>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10a      	bne.n	800d572 <UART_Receive_IT+0x82>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d106      	bne.n	800d572 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	e008      	b.n	800d584 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d582:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d588:	1c5a      	adds	r2, r3, #1
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d592:	b29b      	uxth	r3, r3
 800d594:	3b01      	subs	r3, #1
 800d596:	b29b      	uxth	r3, r3
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	4619      	mov	r1, r3
 800d59c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d15d      	bne.n	800d65e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68da      	ldr	r2, [r3, #12]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f022 0220 	bic.w	r2, r2, #32
 800d5b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68da      	ldr	r2, [r3, #12]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d5c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	695a      	ldr	r2, [r3, #20]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f022 0201 	bic.w	r2, r2, #1
 800d5d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d135      	bne.n	800d654 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	330c      	adds	r3, #12
 800d5f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	e853 3f00 	ldrex	r3, [r3]
 800d5fc:	613b      	str	r3, [r7, #16]
   return(result);
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	f023 0310 	bic.w	r3, r3, #16
 800d604:	627b      	str	r3, [r7, #36]	@ 0x24
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	330c      	adds	r3, #12
 800d60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d60e:	623a      	str	r2, [r7, #32]
 800d610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	69f9      	ldr	r1, [r7, #28]
 800d614:	6a3a      	ldr	r2, [r7, #32]
 800d616:	e841 2300 	strex	r3, r2, [r1]
 800d61a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1e5      	bne.n	800d5ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 0310 	and.w	r3, r3, #16
 800d62c:	2b10      	cmp	r3, #16
 800d62e:	d10a      	bne.n	800d646 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	60fb      	str	r3, [r7, #12]
 800d644:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff fdc0 	bl	800d1d2 <HAL_UARTEx_RxEventCallback>
 800d652:	e002      	b.n	800d65a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff fdaa 	bl	800d1ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	e002      	b.n	800d664 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	e000      	b.n	800d664 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d662:	2302      	movs	r3, #2
  }
}
 800d664:	4618      	mov	r0, r3
 800d666:	3730      	adds	r7, #48	@ 0x30
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	430a      	orrs	r2, r1
 800d688:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689a      	ldr	r2, [r3, #8]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	691b      	ldr	r3, [r3, #16]
 800d692:	431a      	orrs	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	4313      	orrs	r3, r2
 800d69a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d6a6:	f023 030c 	bic.w	r3, r3, #12
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	68b9      	ldr	r1, [r7, #8]
 800d6b0:	430b      	orrs	r3, r1
 800d6b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	699a      	ldr	r2, [r3, #24]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	430a      	orrs	r2, r1
 800d6c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a2c      	ldr	r2, [pc, #176]	@ (800d780 <UART_SetConfig+0x114>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d103      	bne.n	800d6dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d6d4:	f7fe fd74 	bl	800c1c0 <HAL_RCC_GetPCLK2Freq>
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	e002      	b.n	800d6e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d6dc:	f7fe fd5c 	bl	800c198 <HAL_RCC_GetPCLK1Freq>
 800d6e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	009a      	lsls	r2, r3, #2
 800d6ec:	441a      	add	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f8:	4a22      	ldr	r2, [pc, #136]	@ (800d784 <UART_SetConfig+0x118>)
 800d6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fe:	095b      	lsrs	r3, r3, #5
 800d700:	0119      	lsls	r1, r3, #4
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	4613      	mov	r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4413      	add	r3, r2
 800d70a:	009a      	lsls	r2, r3, #2
 800d70c:	441a      	add	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	fbb2 f2f3 	udiv	r2, r2, r3
 800d718:	4b1a      	ldr	r3, [pc, #104]	@ (800d784 <UART_SetConfig+0x118>)
 800d71a:	fba3 0302 	umull	r0, r3, r3, r2
 800d71e:	095b      	lsrs	r3, r3, #5
 800d720:	2064      	movs	r0, #100	@ 0x64
 800d722:	fb00 f303 	mul.w	r3, r0, r3
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	3332      	adds	r3, #50	@ 0x32
 800d72c:	4a15      	ldr	r2, [pc, #84]	@ (800d784 <UART_SetConfig+0x118>)
 800d72e:	fba2 2303 	umull	r2, r3, r2, r3
 800d732:	095b      	lsrs	r3, r3, #5
 800d734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d738:	4419      	add	r1, r3
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	4613      	mov	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	009a      	lsls	r2, r3, #2
 800d744:	441a      	add	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d750:	4b0c      	ldr	r3, [pc, #48]	@ (800d784 <UART_SetConfig+0x118>)
 800d752:	fba3 0302 	umull	r0, r3, r3, r2
 800d756:	095b      	lsrs	r3, r3, #5
 800d758:	2064      	movs	r0, #100	@ 0x64
 800d75a:	fb00 f303 	mul.w	r3, r0, r3
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	011b      	lsls	r3, r3, #4
 800d762:	3332      	adds	r3, #50	@ 0x32
 800d764:	4a07      	ldr	r2, [pc, #28]	@ (800d784 <UART_SetConfig+0x118>)
 800d766:	fba2 2303 	umull	r2, r3, r2, r3
 800d76a:	095b      	lsrs	r3, r3, #5
 800d76c:	f003 020f 	and.w	r2, r3, #15
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	440a      	add	r2, r1
 800d776:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d778:	bf00      	nop
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	40013800 	.word	0x40013800
 800d784:	51eb851f 	.word	0x51eb851f

0800d788 <__itoa>:
 800d788:	1e93      	subs	r3, r2, #2
 800d78a:	2b22      	cmp	r3, #34	@ 0x22
 800d78c:	b510      	push	{r4, lr}
 800d78e:	460c      	mov	r4, r1
 800d790:	d904      	bls.n	800d79c <__itoa+0x14>
 800d792:	2300      	movs	r3, #0
 800d794:	461c      	mov	r4, r3
 800d796:	700b      	strb	r3, [r1, #0]
 800d798:	4620      	mov	r0, r4
 800d79a:	bd10      	pop	{r4, pc}
 800d79c:	2a0a      	cmp	r2, #10
 800d79e:	d109      	bne.n	800d7b4 <__itoa+0x2c>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	da07      	bge.n	800d7b4 <__itoa+0x2c>
 800d7a4:	232d      	movs	r3, #45	@ 0x2d
 800d7a6:	700b      	strb	r3, [r1, #0]
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	4240      	negs	r0, r0
 800d7ac:	4421      	add	r1, r4
 800d7ae:	f000 f8d3 	bl	800d958 <__utoa>
 800d7b2:	e7f1      	b.n	800d798 <__itoa+0x10>
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	e7f9      	b.n	800d7ac <__itoa+0x24>

0800d7b8 <itoa>:
 800d7b8:	f7ff bfe6 	b.w	800d788 <__itoa>

0800d7bc <sbrk_aligned>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	4e0f      	ldr	r6, [pc, #60]	@ (800d7fc <sbrk_aligned+0x40>)
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	6831      	ldr	r1, [r6, #0]
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	b911      	cbnz	r1, 800d7ce <sbrk_aligned+0x12>
 800d7c8:	f000 f926 	bl	800da18 <_sbrk_r>
 800d7cc:	6030      	str	r0, [r6, #0]
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f000 f921 	bl	800da18 <_sbrk_r>
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	d103      	bne.n	800d7e2 <sbrk_aligned+0x26>
 800d7da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d7de:	4620      	mov	r0, r4
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	1cc4      	adds	r4, r0, #3
 800d7e4:	f024 0403 	bic.w	r4, r4, #3
 800d7e8:	42a0      	cmp	r0, r4
 800d7ea:	d0f8      	beq.n	800d7de <sbrk_aligned+0x22>
 800d7ec:	1a21      	subs	r1, r4, r0
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 f912 	bl	800da18 <_sbrk_r>
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	d1f2      	bne.n	800d7de <sbrk_aligned+0x22>
 800d7f8:	e7ef      	b.n	800d7da <sbrk_aligned+0x1e>
 800d7fa:	bf00      	nop
 800d7fc:	20001fd8 	.word	0x20001fd8

0800d800 <_malloc_r>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	1ccd      	adds	r5, r1, #3
 800d806:	f025 0503 	bic.w	r5, r5, #3
 800d80a:	3508      	adds	r5, #8
 800d80c:	2d0c      	cmp	r5, #12
 800d80e:	bf38      	it	cc
 800d810:	250c      	movcc	r5, #12
 800d812:	2d00      	cmp	r5, #0
 800d814:	4606      	mov	r6, r0
 800d816:	db01      	blt.n	800d81c <_malloc_r+0x1c>
 800d818:	42a9      	cmp	r1, r5
 800d81a:	d904      	bls.n	800d826 <_malloc_r+0x26>
 800d81c:	230c      	movs	r3, #12
 800d81e:	6033      	str	r3, [r6, #0]
 800d820:	2000      	movs	r0, #0
 800d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d8fc <_malloc_r+0xfc>
 800d82a:	f000 f869 	bl	800d900 <__malloc_lock>
 800d82e:	f8d8 3000 	ldr.w	r3, [r8]
 800d832:	461c      	mov	r4, r3
 800d834:	bb44      	cbnz	r4, 800d888 <_malloc_r+0x88>
 800d836:	4629      	mov	r1, r5
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff ffbf 	bl	800d7bc <sbrk_aligned>
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	4604      	mov	r4, r0
 800d842:	d158      	bne.n	800d8f6 <_malloc_r+0xf6>
 800d844:	f8d8 4000 	ldr.w	r4, [r8]
 800d848:	4627      	mov	r7, r4
 800d84a:	2f00      	cmp	r7, #0
 800d84c:	d143      	bne.n	800d8d6 <_malloc_r+0xd6>
 800d84e:	2c00      	cmp	r4, #0
 800d850:	d04b      	beq.n	800d8ea <_malloc_r+0xea>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	4639      	mov	r1, r7
 800d856:	4630      	mov	r0, r6
 800d858:	eb04 0903 	add.w	r9, r4, r3
 800d85c:	f000 f8dc 	bl	800da18 <_sbrk_r>
 800d860:	4581      	cmp	r9, r0
 800d862:	d142      	bne.n	800d8ea <_malloc_r+0xea>
 800d864:	6821      	ldr	r1, [r4, #0]
 800d866:	4630      	mov	r0, r6
 800d868:	1a6d      	subs	r5, r5, r1
 800d86a:	4629      	mov	r1, r5
 800d86c:	f7ff ffa6 	bl	800d7bc <sbrk_aligned>
 800d870:	3001      	adds	r0, #1
 800d872:	d03a      	beq.n	800d8ea <_malloc_r+0xea>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	442b      	add	r3, r5
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	f8d8 3000 	ldr.w	r3, [r8]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	bb62      	cbnz	r2, 800d8dc <_malloc_r+0xdc>
 800d882:	f8c8 7000 	str.w	r7, [r8]
 800d886:	e00f      	b.n	800d8a8 <_malloc_r+0xa8>
 800d888:	6822      	ldr	r2, [r4, #0]
 800d88a:	1b52      	subs	r2, r2, r5
 800d88c:	d420      	bmi.n	800d8d0 <_malloc_r+0xd0>
 800d88e:	2a0b      	cmp	r2, #11
 800d890:	d917      	bls.n	800d8c2 <_malloc_r+0xc2>
 800d892:	1961      	adds	r1, r4, r5
 800d894:	42a3      	cmp	r3, r4
 800d896:	6025      	str	r5, [r4, #0]
 800d898:	bf18      	it	ne
 800d89a:	6059      	strne	r1, [r3, #4]
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	bf08      	it	eq
 800d8a0:	f8c8 1000 	streq.w	r1, [r8]
 800d8a4:	5162      	str	r2, [r4, r5]
 800d8a6:	604b      	str	r3, [r1, #4]
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f000 f82f 	bl	800d90c <__malloc_unlock>
 800d8ae:	f104 000b 	add.w	r0, r4, #11
 800d8b2:	1d23      	adds	r3, r4, #4
 800d8b4:	f020 0007 	bic.w	r0, r0, #7
 800d8b8:	1ac2      	subs	r2, r0, r3
 800d8ba:	bf1c      	itt	ne
 800d8bc:	1a1b      	subne	r3, r3, r0
 800d8be:	50a3      	strne	r3, [r4, r2]
 800d8c0:	e7af      	b.n	800d822 <_malloc_r+0x22>
 800d8c2:	6862      	ldr	r2, [r4, #4]
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	bf0c      	ite	eq
 800d8c8:	f8c8 2000 	streq.w	r2, [r8]
 800d8cc:	605a      	strne	r2, [r3, #4]
 800d8ce:	e7eb      	b.n	800d8a8 <_malloc_r+0xa8>
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	6864      	ldr	r4, [r4, #4]
 800d8d4:	e7ae      	b.n	800d834 <_malloc_r+0x34>
 800d8d6:	463c      	mov	r4, r7
 800d8d8:	687f      	ldr	r7, [r7, #4]
 800d8da:	e7b6      	b.n	800d84a <_malloc_r+0x4a>
 800d8dc:	461a      	mov	r2, r3
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	42a3      	cmp	r3, r4
 800d8e2:	d1fb      	bne.n	800d8dc <_malloc_r+0xdc>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6053      	str	r3, [r2, #4]
 800d8e8:	e7de      	b.n	800d8a8 <_malloc_r+0xa8>
 800d8ea:	230c      	movs	r3, #12
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	6033      	str	r3, [r6, #0]
 800d8f0:	f000 f80c 	bl	800d90c <__malloc_unlock>
 800d8f4:	e794      	b.n	800d820 <_malloc_r+0x20>
 800d8f6:	6005      	str	r5, [r0, #0]
 800d8f8:	e7d6      	b.n	800d8a8 <_malloc_r+0xa8>
 800d8fa:	bf00      	nop
 800d8fc:	20001fdc 	.word	0x20001fdc

0800d900 <__malloc_lock>:
 800d900:	4801      	ldr	r0, [pc, #4]	@ (800d908 <__malloc_lock+0x8>)
 800d902:	f000 b8c3 	b.w	800da8c <__retarget_lock_acquire_recursive>
 800d906:	bf00      	nop
 800d908:	2000211c 	.word	0x2000211c

0800d90c <__malloc_unlock>:
 800d90c:	4801      	ldr	r0, [pc, #4]	@ (800d914 <__malloc_unlock+0x8>)
 800d90e:	f000 b8be 	b.w	800da8e <__retarget_lock_release_recursive>
 800d912:	bf00      	nop
 800d914:	2000211c 	.word	0x2000211c

0800d918 <siprintf>:
 800d918:	b40e      	push	{r1, r2, r3}
 800d91a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d91e:	b500      	push	{lr}
 800d920:	b09c      	sub	sp, #112	@ 0x70
 800d922:	ab1d      	add	r3, sp, #116	@ 0x74
 800d924:	9002      	str	r0, [sp, #8]
 800d926:	9006      	str	r0, [sp, #24]
 800d928:	9107      	str	r1, [sp, #28]
 800d92a:	9104      	str	r1, [sp, #16]
 800d92c:	4808      	ldr	r0, [pc, #32]	@ (800d950 <siprintf+0x38>)
 800d92e:	4909      	ldr	r1, [pc, #36]	@ (800d954 <siprintf+0x3c>)
 800d930:	f853 2b04 	ldr.w	r2, [r3], #4
 800d934:	9105      	str	r1, [sp, #20]
 800d936:	6800      	ldr	r0, [r0, #0]
 800d938:	a902      	add	r1, sp, #8
 800d93a:	9301      	str	r3, [sp, #4]
 800d93c:	f000 f95a 	bl	800dbf4 <_svfiprintf_r>
 800d940:	2200      	movs	r2, #0
 800d942:	9b02      	ldr	r3, [sp, #8]
 800d944:	701a      	strb	r2, [r3, #0]
 800d946:	b01c      	add	sp, #112	@ 0x70
 800d948:	f85d eb04 	ldr.w	lr, [sp], #4
 800d94c:	b003      	add	sp, #12
 800d94e:	4770      	bx	lr
 800d950:	20000f80 	.word	0x20000f80
 800d954:	ffff0208 	.word	0xffff0208

0800d958 <__utoa>:
 800d958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d95a:	b08b      	sub	sp, #44	@ 0x2c
 800d95c:	4605      	mov	r5, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	466e      	mov	r6, sp
 800d962:	4c1d      	ldr	r4, [pc, #116]	@ (800d9d8 <__utoa+0x80>)
 800d964:	f104 0c20 	add.w	ip, r4, #32
 800d968:	4637      	mov	r7, r6
 800d96a:	6820      	ldr	r0, [r4, #0]
 800d96c:	6861      	ldr	r1, [r4, #4]
 800d96e:	3408      	adds	r4, #8
 800d970:	c703      	stmia	r7!, {r0, r1}
 800d972:	4564      	cmp	r4, ip
 800d974:	463e      	mov	r6, r7
 800d976:	d1f7      	bne.n	800d968 <__utoa+0x10>
 800d978:	7921      	ldrb	r1, [r4, #4]
 800d97a:	6820      	ldr	r0, [r4, #0]
 800d97c:	7139      	strb	r1, [r7, #4]
 800d97e:	1e91      	subs	r1, r2, #2
 800d980:	2922      	cmp	r1, #34	@ 0x22
 800d982:	6038      	str	r0, [r7, #0]
 800d984:	f04f 0100 	mov.w	r1, #0
 800d988:	d904      	bls.n	800d994 <__utoa+0x3c>
 800d98a:	7019      	strb	r1, [r3, #0]
 800d98c:	460b      	mov	r3, r1
 800d98e:	4618      	mov	r0, r3
 800d990:	b00b      	add	sp, #44	@ 0x2c
 800d992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d994:	1e58      	subs	r0, r3, #1
 800d996:	4684      	mov	ip, r0
 800d998:	fbb5 f7f2 	udiv	r7, r5, r2
 800d99c:	fb02 5617 	mls	r6, r2, r7, r5
 800d9a0:	3628      	adds	r6, #40	@ 0x28
 800d9a2:	446e      	add	r6, sp
 800d9a4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d9ae:	462e      	mov	r6, r5
 800d9b0:	42b2      	cmp	r2, r6
 800d9b2:	463d      	mov	r5, r7
 800d9b4:	f101 0101 	add.w	r1, r1, #1
 800d9b8:	d9ee      	bls.n	800d998 <__utoa+0x40>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	545a      	strb	r2, [r3, r1]
 800d9be:	1919      	adds	r1, r3, r4
 800d9c0:	1aa5      	subs	r5, r4, r2
 800d9c2:	42aa      	cmp	r2, r5
 800d9c4:	dae3      	bge.n	800d98e <__utoa+0x36>
 800d9c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d9ca:	780e      	ldrb	r6, [r1, #0]
 800d9cc:	3201      	adds	r2, #1
 800d9ce:	7006      	strb	r6, [r0, #0]
 800d9d0:	f801 5901 	strb.w	r5, [r1], #-1
 800d9d4:	e7f4      	b.n	800d9c0 <__utoa+0x68>
 800d9d6:	bf00      	nop
 800d9d8:	0800f10a 	.word	0x0800f10a

0800d9dc <strstr>:
 800d9dc:	780a      	ldrb	r2, [r1, #0]
 800d9de:	b570      	push	{r4, r5, r6, lr}
 800d9e0:	b96a      	cbnz	r2, 800d9fe <strstr+0x22>
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d109      	bne.n	800d9fc <strstr+0x20>
 800d9e8:	460c      	mov	r4, r1
 800d9ea:	4605      	mov	r5, r0
 800d9ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d0f6      	beq.n	800d9e2 <strstr+0x6>
 800d9f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d9f8:	429e      	cmp	r6, r3
 800d9fa:	d0f7      	beq.n	800d9ec <strstr+0x10>
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	7803      	ldrb	r3, [r0, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1ef      	bne.n	800d9e4 <strstr+0x8>
 800da04:	4618      	mov	r0, r3
 800da06:	e7ec      	b.n	800d9e2 <strstr+0x6>

0800da08 <memset>:
 800da08:	4603      	mov	r3, r0
 800da0a:	4402      	add	r2, r0
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d100      	bne.n	800da12 <memset+0xa>
 800da10:	4770      	bx	lr
 800da12:	f803 1b01 	strb.w	r1, [r3], #1
 800da16:	e7f9      	b.n	800da0c <memset+0x4>

0800da18 <_sbrk_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	2300      	movs	r3, #0
 800da1c:	4d05      	ldr	r5, [pc, #20]	@ (800da34 <_sbrk_r+0x1c>)
 800da1e:	4604      	mov	r4, r0
 800da20:	4608      	mov	r0, r1
 800da22:	602b      	str	r3, [r5, #0]
 800da24:	f7fb fef0 	bl	8009808 <_sbrk>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_sbrk_r+0x1a>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_sbrk_r+0x1a>
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	20002118 	.word	0x20002118

0800da38 <__errno>:
 800da38:	4b01      	ldr	r3, [pc, #4]	@ (800da40 <__errno+0x8>)
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20000f80 	.word	0x20000f80

0800da44 <__libc_init_array>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	2600      	movs	r6, #0
 800da48:	4d0c      	ldr	r5, [pc, #48]	@ (800da7c <__libc_init_array+0x38>)
 800da4a:	4c0d      	ldr	r4, [pc, #52]	@ (800da80 <__libc_init_array+0x3c>)
 800da4c:	1b64      	subs	r4, r4, r5
 800da4e:	10a4      	asrs	r4, r4, #2
 800da50:	42a6      	cmp	r6, r4
 800da52:	d109      	bne.n	800da68 <__libc_init_array+0x24>
 800da54:	f000 fbba 	bl	800e1cc <_init>
 800da58:	2600      	movs	r6, #0
 800da5a:	4d0a      	ldr	r5, [pc, #40]	@ (800da84 <__libc_init_array+0x40>)
 800da5c:	4c0a      	ldr	r4, [pc, #40]	@ (800da88 <__libc_init_array+0x44>)
 800da5e:	1b64      	subs	r4, r4, r5
 800da60:	10a4      	asrs	r4, r4, #2
 800da62:	42a6      	cmp	r6, r4
 800da64:	d105      	bne.n	800da72 <__libc_init_array+0x2e>
 800da66:	bd70      	pop	{r4, r5, r6, pc}
 800da68:	f855 3b04 	ldr.w	r3, [r5], #4
 800da6c:	4798      	blx	r3
 800da6e:	3601      	adds	r6, #1
 800da70:	e7ee      	b.n	800da50 <__libc_init_array+0xc>
 800da72:	f855 3b04 	ldr.w	r3, [r5], #4
 800da76:	4798      	blx	r3
 800da78:	3601      	adds	r6, #1
 800da7a:	e7f2      	b.n	800da62 <__libc_init_array+0x1e>
 800da7c:	0800f16c 	.word	0x0800f16c
 800da80:	0800f16c 	.word	0x0800f16c
 800da84:	0800f16c 	.word	0x0800f16c
 800da88:	0800f170 	.word	0x0800f170

0800da8c <__retarget_lock_acquire_recursive>:
 800da8c:	4770      	bx	lr

0800da8e <__retarget_lock_release_recursive>:
 800da8e:	4770      	bx	lr

0800da90 <memcpy>:
 800da90:	440a      	add	r2, r1
 800da92:	4291      	cmp	r1, r2
 800da94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800da98:	d100      	bne.n	800da9c <memcpy+0xc>
 800da9a:	4770      	bx	lr
 800da9c:	b510      	push	{r4, lr}
 800da9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa2:	4291      	cmp	r1, r2
 800daa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daa8:	d1f9      	bne.n	800da9e <memcpy+0xe>
 800daaa:	bd10      	pop	{r4, pc}

0800daac <_free_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4605      	mov	r5, r0
 800dab0:	2900      	cmp	r1, #0
 800dab2:	d040      	beq.n	800db36 <_free_r+0x8a>
 800dab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab8:	1f0c      	subs	r4, r1, #4
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bfb8      	it	lt
 800dabe:	18e4      	addlt	r4, r4, r3
 800dac0:	f7ff ff1e 	bl	800d900 <__malloc_lock>
 800dac4:	4a1c      	ldr	r2, [pc, #112]	@ (800db38 <_free_r+0x8c>)
 800dac6:	6813      	ldr	r3, [r2, #0]
 800dac8:	b933      	cbnz	r3, 800dad8 <_free_r+0x2c>
 800daca:	6063      	str	r3, [r4, #4]
 800dacc:	6014      	str	r4, [r2, #0]
 800dace:	4628      	mov	r0, r5
 800dad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dad4:	f7ff bf1a 	b.w	800d90c <__malloc_unlock>
 800dad8:	42a3      	cmp	r3, r4
 800dada:	d908      	bls.n	800daee <_free_r+0x42>
 800dadc:	6820      	ldr	r0, [r4, #0]
 800dade:	1821      	adds	r1, r4, r0
 800dae0:	428b      	cmp	r3, r1
 800dae2:	bf01      	itttt	eq
 800dae4:	6819      	ldreq	r1, [r3, #0]
 800dae6:	685b      	ldreq	r3, [r3, #4]
 800dae8:	1809      	addeq	r1, r1, r0
 800daea:	6021      	streq	r1, [r4, #0]
 800daec:	e7ed      	b.n	800daca <_free_r+0x1e>
 800daee:	461a      	mov	r2, r3
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	b10b      	cbz	r3, 800daf8 <_free_r+0x4c>
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	d9fa      	bls.n	800daee <_free_r+0x42>
 800daf8:	6811      	ldr	r1, [r2, #0]
 800dafa:	1850      	adds	r0, r2, r1
 800dafc:	42a0      	cmp	r0, r4
 800dafe:	d10b      	bne.n	800db18 <_free_r+0x6c>
 800db00:	6820      	ldr	r0, [r4, #0]
 800db02:	4401      	add	r1, r0
 800db04:	1850      	adds	r0, r2, r1
 800db06:	4283      	cmp	r3, r0
 800db08:	6011      	str	r1, [r2, #0]
 800db0a:	d1e0      	bne.n	800dace <_free_r+0x22>
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4408      	add	r0, r1
 800db12:	6010      	str	r0, [r2, #0]
 800db14:	6053      	str	r3, [r2, #4]
 800db16:	e7da      	b.n	800dace <_free_r+0x22>
 800db18:	d902      	bls.n	800db20 <_free_r+0x74>
 800db1a:	230c      	movs	r3, #12
 800db1c:	602b      	str	r3, [r5, #0]
 800db1e:	e7d6      	b.n	800dace <_free_r+0x22>
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	1821      	adds	r1, r4, r0
 800db24:	428b      	cmp	r3, r1
 800db26:	bf01      	itttt	eq
 800db28:	6819      	ldreq	r1, [r3, #0]
 800db2a:	685b      	ldreq	r3, [r3, #4]
 800db2c:	1809      	addeq	r1, r1, r0
 800db2e:	6021      	streq	r1, [r4, #0]
 800db30:	6063      	str	r3, [r4, #4]
 800db32:	6054      	str	r4, [r2, #4]
 800db34:	e7cb      	b.n	800dace <_free_r+0x22>
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	20001fdc 	.word	0x20001fdc

0800db3c <__ssputs_r>:
 800db3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db40:	461f      	mov	r7, r3
 800db42:	688e      	ldr	r6, [r1, #8]
 800db44:	4682      	mov	sl, r0
 800db46:	42be      	cmp	r6, r7
 800db48:	460c      	mov	r4, r1
 800db4a:	4690      	mov	r8, r2
 800db4c:	680b      	ldr	r3, [r1, #0]
 800db4e:	d82d      	bhi.n	800dbac <__ssputs_r+0x70>
 800db50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db58:	d026      	beq.n	800dba8 <__ssputs_r+0x6c>
 800db5a:	6965      	ldr	r5, [r4, #20]
 800db5c:	6909      	ldr	r1, [r1, #16]
 800db5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db62:	eba3 0901 	sub.w	r9, r3, r1
 800db66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db6a:	1c7b      	adds	r3, r7, #1
 800db6c:	444b      	add	r3, r9
 800db6e:	106d      	asrs	r5, r5, #1
 800db70:	429d      	cmp	r5, r3
 800db72:	bf38      	it	cc
 800db74:	461d      	movcc	r5, r3
 800db76:	0553      	lsls	r3, r2, #21
 800db78:	d527      	bpl.n	800dbca <__ssputs_r+0x8e>
 800db7a:	4629      	mov	r1, r5
 800db7c:	f7ff fe40 	bl	800d800 <_malloc_r>
 800db80:	4606      	mov	r6, r0
 800db82:	b360      	cbz	r0, 800dbde <__ssputs_r+0xa2>
 800db84:	464a      	mov	r2, r9
 800db86:	6921      	ldr	r1, [r4, #16]
 800db88:	f7ff ff82 	bl	800da90 <memcpy>
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db96:	81a3      	strh	r3, [r4, #12]
 800db98:	6126      	str	r6, [r4, #16]
 800db9a:	444e      	add	r6, r9
 800db9c:	6026      	str	r6, [r4, #0]
 800db9e:	463e      	mov	r6, r7
 800dba0:	6165      	str	r5, [r4, #20]
 800dba2:	eba5 0509 	sub.w	r5, r5, r9
 800dba6:	60a5      	str	r5, [r4, #8]
 800dba8:	42be      	cmp	r6, r7
 800dbaa:	d900      	bls.n	800dbae <__ssputs_r+0x72>
 800dbac:	463e      	mov	r6, r7
 800dbae:	4632      	mov	r2, r6
 800dbb0:	4641      	mov	r1, r8
 800dbb2:	6820      	ldr	r0, [r4, #0]
 800dbb4:	f000 fada 	bl	800e16c <memmove>
 800dbb8:	2000      	movs	r0, #0
 800dbba:	68a3      	ldr	r3, [r4, #8]
 800dbbc:	1b9b      	subs	r3, r3, r6
 800dbbe:	60a3      	str	r3, [r4, #8]
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	4433      	add	r3, r6
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbca:	462a      	mov	r2, r5
 800dbcc:	f000 faa0 	bl	800e110 <_realloc_r>
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d1e0      	bne.n	800db98 <__ssputs_r+0x5c>
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	6921      	ldr	r1, [r4, #16]
 800dbda:	f7ff ff67 	bl	800daac <_free_r>
 800dbde:	230c      	movs	r3, #12
 800dbe0:	f8ca 3000 	str.w	r3, [sl]
 800dbe4:	89a3      	ldrh	r3, [r4, #12]
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbee:	81a3      	strh	r3, [r4, #12]
 800dbf0:	e7e9      	b.n	800dbc6 <__ssputs_r+0x8a>
	...

0800dbf4 <_svfiprintf_r>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	4698      	mov	r8, r3
 800dbfa:	898b      	ldrh	r3, [r1, #12]
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	061b      	lsls	r3, r3, #24
 800dc00:	460d      	mov	r5, r1
 800dc02:	4614      	mov	r4, r2
 800dc04:	b09d      	sub	sp, #116	@ 0x74
 800dc06:	d510      	bpl.n	800dc2a <_svfiprintf_r+0x36>
 800dc08:	690b      	ldr	r3, [r1, #16]
 800dc0a:	b973      	cbnz	r3, 800dc2a <_svfiprintf_r+0x36>
 800dc0c:	2140      	movs	r1, #64	@ 0x40
 800dc0e:	f7ff fdf7 	bl	800d800 <_malloc_r>
 800dc12:	6028      	str	r0, [r5, #0]
 800dc14:	6128      	str	r0, [r5, #16]
 800dc16:	b930      	cbnz	r0, 800dc26 <_svfiprintf_r+0x32>
 800dc18:	230c      	movs	r3, #12
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc20:	b01d      	add	sp, #116	@ 0x74
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc26:	2340      	movs	r3, #64	@ 0x40
 800dc28:	616b      	str	r3, [r5, #20]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc2e:	2320      	movs	r3, #32
 800dc30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc34:	2330      	movs	r3, #48	@ 0x30
 800dc36:	f04f 0901 	mov.w	r9, #1
 800dc3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc3e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ddd8 <_svfiprintf_r+0x1e4>
 800dc42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc46:	4623      	mov	r3, r4
 800dc48:	469a      	mov	sl, r3
 800dc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc4e:	b10a      	cbz	r2, 800dc54 <_svfiprintf_r+0x60>
 800dc50:	2a25      	cmp	r2, #37	@ 0x25
 800dc52:	d1f9      	bne.n	800dc48 <_svfiprintf_r+0x54>
 800dc54:	ebba 0b04 	subs.w	fp, sl, r4
 800dc58:	d00b      	beq.n	800dc72 <_svfiprintf_r+0x7e>
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	4622      	mov	r2, r4
 800dc5e:	4629      	mov	r1, r5
 800dc60:	4638      	mov	r0, r7
 800dc62:	f7ff ff6b 	bl	800db3c <__ssputs_r>
 800dc66:	3001      	adds	r0, #1
 800dc68:	f000 80a7 	beq.w	800ddba <_svfiprintf_r+0x1c6>
 800dc6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc6e:	445a      	add	r2, fp
 800dc70:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc72:	f89a 3000 	ldrb.w	r3, [sl]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 809f 	beq.w	800ddba <_svfiprintf_r+0x1c6>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc86:	f10a 0a01 	add.w	sl, sl, #1
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	9307      	str	r3, [sp, #28]
 800dc8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc92:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc94:	4654      	mov	r4, sl
 800dc96:	2205      	movs	r2, #5
 800dc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9c:	484e      	ldr	r0, [pc, #312]	@ (800ddd8 <_svfiprintf_r+0x1e4>)
 800dc9e:	f000 fa7f 	bl	800e1a0 <memchr>
 800dca2:	9a04      	ldr	r2, [sp, #16]
 800dca4:	b9d8      	cbnz	r0, 800dcde <_svfiprintf_r+0xea>
 800dca6:	06d0      	lsls	r0, r2, #27
 800dca8:	bf44      	itt	mi
 800dcaa:	2320      	movmi	r3, #32
 800dcac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcb0:	0711      	lsls	r1, r2, #28
 800dcb2:	bf44      	itt	mi
 800dcb4:	232b      	movmi	r3, #43	@ 0x2b
 800dcb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcba:	f89a 3000 	ldrb.w	r3, [sl]
 800dcbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcc0:	d015      	beq.n	800dcee <_svfiprintf_r+0xfa>
 800dcc2:	4654      	mov	r4, sl
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f04f 0c0a 	mov.w	ip, #10
 800dcca:	9a07      	ldr	r2, [sp, #28]
 800dccc:	4621      	mov	r1, r4
 800dcce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd2:	3b30      	subs	r3, #48	@ 0x30
 800dcd4:	2b09      	cmp	r3, #9
 800dcd6:	d94b      	bls.n	800dd70 <_svfiprintf_r+0x17c>
 800dcd8:	b1b0      	cbz	r0, 800dd08 <_svfiprintf_r+0x114>
 800dcda:	9207      	str	r2, [sp, #28]
 800dcdc:	e014      	b.n	800dd08 <_svfiprintf_r+0x114>
 800dcde:	eba0 0308 	sub.w	r3, r0, r8
 800dce2:	fa09 f303 	lsl.w	r3, r9, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	46a2      	mov	sl, r4
 800dcea:	9304      	str	r3, [sp, #16]
 800dcec:	e7d2      	b.n	800dc94 <_svfiprintf_r+0xa0>
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	1d19      	adds	r1, r3, #4
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	9103      	str	r1, [sp, #12]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bfbb      	ittet	lt
 800dcfa:	425b      	neglt	r3, r3
 800dcfc:	f042 0202 	orrlt.w	r2, r2, #2
 800dd00:	9307      	strge	r3, [sp, #28]
 800dd02:	9307      	strlt	r3, [sp, #28]
 800dd04:	bfb8      	it	lt
 800dd06:	9204      	strlt	r2, [sp, #16]
 800dd08:	7823      	ldrb	r3, [r4, #0]
 800dd0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd0c:	d10a      	bne.n	800dd24 <_svfiprintf_r+0x130>
 800dd0e:	7863      	ldrb	r3, [r4, #1]
 800dd10:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd12:	d132      	bne.n	800dd7a <_svfiprintf_r+0x186>
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	3402      	adds	r4, #2
 800dd18:	1d1a      	adds	r2, r3, #4
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	9203      	str	r2, [sp, #12]
 800dd1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd22:	9305      	str	r3, [sp, #20]
 800dd24:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dddc <_svfiprintf_r+0x1e8>
 800dd28:	2203      	movs	r2, #3
 800dd2a:	4650      	mov	r0, sl
 800dd2c:	7821      	ldrb	r1, [r4, #0]
 800dd2e:	f000 fa37 	bl	800e1a0 <memchr>
 800dd32:	b138      	cbz	r0, 800dd44 <_svfiprintf_r+0x150>
 800dd34:	2240      	movs	r2, #64	@ 0x40
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	eba0 000a 	sub.w	r0, r0, sl
 800dd3c:	4082      	lsls	r2, r0
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	3401      	adds	r4, #1
 800dd42:	9304      	str	r3, [sp, #16]
 800dd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd48:	2206      	movs	r2, #6
 800dd4a:	4825      	ldr	r0, [pc, #148]	@ (800dde0 <_svfiprintf_r+0x1ec>)
 800dd4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd50:	f000 fa26 	bl	800e1a0 <memchr>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d036      	beq.n	800ddc6 <_svfiprintf_r+0x1d2>
 800dd58:	4b22      	ldr	r3, [pc, #136]	@ (800dde4 <_svfiprintf_r+0x1f0>)
 800dd5a:	bb1b      	cbnz	r3, 800dda4 <_svfiprintf_r+0x1b0>
 800dd5c:	9b03      	ldr	r3, [sp, #12]
 800dd5e:	3307      	adds	r3, #7
 800dd60:	f023 0307 	bic.w	r3, r3, #7
 800dd64:	3308      	adds	r3, #8
 800dd66:	9303      	str	r3, [sp, #12]
 800dd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd6a:	4433      	add	r3, r6
 800dd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd6e:	e76a      	b.n	800dc46 <_svfiprintf_r+0x52>
 800dd70:	460c      	mov	r4, r1
 800dd72:	2001      	movs	r0, #1
 800dd74:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd78:	e7a8      	b.n	800dccc <_svfiprintf_r+0xd8>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f04f 0c0a 	mov.w	ip, #10
 800dd80:	4619      	mov	r1, r3
 800dd82:	3401      	adds	r4, #1
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	4620      	mov	r0, r4
 800dd88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd8c:	3a30      	subs	r2, #48	@ 0x30
 800dd8e:	2a09      	cmp	r2, #9
 800dd90:	d903      	bls.n	800dd9a <_svfiprintf_r+0x1a6>
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d0c6      	beq.n	800dd24 <_svfiprintf_r+0x130>
 800dd96:	9105      	str	r1, [sp, #20]
 800dd98:	e7c4      	b.n	800dd24 <_svfiprintf_r+0x130>
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dda2:	e7f0      	b.n	800dd86 <_svfiprintf_r+0x192>
 800dda4:	ab03      	add	r3, sp, #12
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	462a      	mov	r2, r5
 800ddaa:	4638      	mov	r0, r7
 800ddac:	4b0e      	ldr	r3, [pc, #56]	@ (800dde8 <_svfiprintf_r+0x1f4>)
 800ddae:	a904      	add	r1, sp, #16
 800ddb0:	f3af 8000 	nop.w
 800ddb4:	1c42      	adds	r2, r0, #1
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	d1d6      	bne.n	800dd68 <_svfiprintf_r+0x174>
 800ddba:	89ab      	ldrh	r3, [r5, #12]
 800ddbc:	065b      	lsls	r3, r3, #25
 800ddbe:	f53f af2d 	bmi.w	800dc1c <_svfiprintf_r+0x28>
 800ddc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddc4:	e72c      	b.n	800dc20 <_svfiprintf_r+0x2c>
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	462a      	mov	r2, r5
 800ddcc:	4638      	mov	r0, r7
 800ddce:	4b06      	ldr	r3, [pc, #24]	@ (800dde8 <_svfiprintf_r+0x1f4>)
 800ddd0:	a904      	add	r1, sp, #16
 800ddd2:	f000 f87d 	bl	800ded0 <_printf_i>
 800ddd6:	e7ed      	b.n	800ddb4 <_svfiprintf_r+0x1c0>
 800ddd8:	0800f12f 	.word	0x0800f12f
 800dddc:	0800f135 	.word	0x0800f135
 800dde0:	0800f139 	.word	0x0800f139
 800dde4:	00000000 	.word	0x00000000
 800dde8:	0800db3d 	.word	0x0800db3d

0800ddec <_printf_common>:
 800ddec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf0:	4616      	mov	r6, r2
 800ddf2:	4698      	mov	r8, r3
 800ddf4:	688a      	ldr	r2, [r1, #8]
 800ddf6:	690b      	ldr	r3, [r1, #16]
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	bfb8      	it	lt
 800ddfe:	4613      	movlt	r3, r2
 800de00:	6033      	str	r3, [r6, #0]
 800de02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de06:	460c      	mov	r4, r1
 800de08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de0c:	b10a      	cbz	r2, 800de12 <_printf_common+0x26>
 800de0e:	3301      	adds	r3, #1
 800de10:	6033      	str	r3, [r6, #0]
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	0699      	lsls	r1, r3, #26
 800de16:	bf42      	ittt	mi
 800de18:	6833      	ldrmi	r3, [r6, #0]
 800de1a:	3302      	addmi	r3, #2
 800de1c:	6033      	strmi	r3, [r6, #0]
 800de1e:	6825      	ldr	r5, [r4, #0]
 800de20:	f015 0506 	ands.w	r5, r5, #6
 800de24:	d106      	bne.n	800de34 <_printf_common+0x48>
 800de26:	f104 0a19 	add.w	sl, r4, #25
 800de2a:	68e3      	ldr	r3, [r4, #12]
 800de2c:	6832      	ldr	r2, [r6, #0]
 800de2e:	1a9b      	subs	r3, r3, r2
 800de30:	42ab      	cmp	r3, r5
 800de32:	dc2b      	bgt.n	800de8c <_printf_common+0xa0>
 800de34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de38:	6822      	ldr	r2, [r4, #0]
 800de3a:	3b00      	subs	r3, #0
 800de3c:	bf18      	it	ne
 800de3e:	2301      	movne	r3, #1
 800de40:	0692      	lsls	r2, r2, #26
 800de42:	d430      	bmi.n	800dea6 <_printf_common+0xba>
 800de44:	4641      	mov	r1, r8
 800de46:	4638      	mov	r0, r7
 800de48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800de4c:	47c8      	blx	r9
 800de4e:	3001      	adds	r0, #1
 800de50:	d023      	beq.n	800de9a <_printf_common+0xae>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	6922      	ldr	r2, [r4, #16]
 800de56:	f003 0306 	and.w	r3, r3, #6
 800de5a:	2b04      	cmp	r3, #4
 800de5c:	bf14      	ite	ne
 800de5e:	2500      	movne	r5, #0
 800de60:	6833      	ldreq	r3, [r6, #0]
 800de62:	f04f 0600 	mov.w	r6, #0
 800de66:	bf08      	it	eq
 800de68:	68e5      	ldreq	r5, [r4, #12]
 800de6a:	f104 041a 	add.w	r4, r4, #26
 800de6e:	bf08      	it	eq
 800de70:	1aed      	subeq	r5, r5, r3
 800de72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800de76:	bf08      	it	eq
 800de78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de7c:	4293      	cmp	r3, r2
 800de7e:	bfc4      	itt	gt
 800de80:	1a9b      	subgt	r3, r3, r2
 800de82:	18ed      	addgt	r5, r5, r3
 800de84:	42b5      	cmp	r5, r6
 800de86:	d11a      	bne.n	800debe <_printf_common+0xd2>
 800de88:	2000      	movs	r0, #0
 800de8a:	e008      	b.n	800de9e <_printf_common+0xb2>
 800de8c:	2301      	movs	r3, #1
 800de8e:	4652      	mov	r2, sl
 800de90:	4641      	mov	r1, r8
 800de92:	4638      	mov	r0, r7
 800de94:	47c8      	blx	r9
 800de96:	3001      	adds	r0, #1
 800de98:	d103      	bne.n	800dea2 <_printf_common+0xb6>
 800de9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea2:	3501      	adds	r5, #1
 800dea4:	e7c1      	b.n	800de2a <_printf_common+0x3e>
 800dea6:	2030      	movs	r0, #48	@ 0x30
 800dea8:	18e1      	adds	r1, r4, r3
 800deaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800deb4:	4422      	add	r2, r4
 800deb6:	3302      	adds	r3, #2
 800deb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800debc:	e7c2      	b.n	800de44 <_printf_common+0x58>
 800debe:	2301      	movs	r3, #1
 800dec0:	4622      	mov	r2, r4
 800dec2:	4641      	mov	r1, r8
 800dec4:	4638      	mov	r0, r7
 800dec6:	47c8      	blx	r9
 800dec8:	3001      	adds	r0, #1
 800deca:	d0e6      	beq.n	800de9a <_printf_common+0xae>
 800decc:	3601      	adds	r6, #1
 800dece:	e7d9      	b.n	800de84 <_printf_common+0x98>

0800ded0 <_printf_i>:
 800ded0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	7e0f      	ldrb	r7, [r1, #24]
 800ded6:	4691      	mov	r9, r2
 800ded8:	2f78      	cmp	r7, #120	@ 0x78
 800deda:	4680      	mov	r8, r0
 800dedc:	460c      	mov	r4, r1
 800dede:	469a      	mov	sl, r3
 800dee0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dee2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dee6:	d807      	bhi.n	800def8 <_printf_i+0x28>
 800dee8:	2f62      	cmp	r7, #98	@ 0x62
 800deea:	d80a      	bhi.n	800df02 <_printf_i+0x32>
 800deec:	2f00      	cmp	r7, #0
 800deee:	f000 80d3 	beq.w	800e098 <_printf_i+0x1c8>
 800def2:	2f58      	cmp	r7, #88	@ 0x58
 800def4:	f000 80ba 	beq.w	800e06c <_printf_i+0x19c>
 800def8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800defc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df00:	e03a      	b.n	800df78 <_printf_i+0xa8>
 800df02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df06:	2b15      	cmp	r3, #21
 800df08:	d8f6      	bhi.n	800def8 <_printf_i+0x28>
 800df0a:	a101      	add	r1, pc, #4	@ (adr r1, 800df10 <_printf_i+0x40>)
 800df0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df10:	0800df69 	.word	0x0800df69
 800df14:	0800df7d 	.word	0x0800df7d
 800df18:	0800def9 	.word	0x0800def9
 800df1c:	0800def9 	.word	0x0800def9
 800df20:	0800def9 	.word	0x0800def9
 800df24:	0800def9 	.word	0x0800def9
 800df28:	0800df7d 	.word	0x0800df7d
 800df2c:	0800def9 	.word	0x0800def9
 800df30:	0800def9 	.word	0x0800def9
 800df34:	0800def9 	.word	0x0800def9
 800df38:	0800def9 	.word	0x0800def9
 800df3c:	0800e07f 	.word	0x0800e07f
 800df40:	0800dfa7 	.word	0x0800dfa7
 800df44:	0800e039 	.word	0x0800e039
 800df48:	0800def9 	.word	0x0800def9
 800df4c:	0800def9 	.word	0x0800def9
 800df50:	0800e0a1 	.word	0x0800e0a1
 800df54:	0800def9 	.word	0x0800def9
 800df58:	0800dfa7 	.word	0x0800dfa7
 800df5c:	0800def9 	.word	0x0800def9
 800df60:	0800def9 	.word	0x0800def9
 800df64:	0800e041 	.word	0x0800e041
 800df68:	6833      	ldr	r3, [r6, #0]
 800df6a:	1d1a      	adds	r2, r3, #4
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6032      	str	r2, [r6, #0]
 800df70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df78:	2301      	movs	r3, #1
 800df7a:	e09e      	b.n	800e0ba <_printf_i+0x1ea>
 800df7c:	6833      	ldr	r3, [r6, #0]
 800df7e:	6820      	ldr	r0, [r4, #0]
 800df80:	1d19      	adds	r1, r3, #4
 800df82:	6031      	str	r1, [r6, #0]
 800df84:	0606      	lsls	r6, r0, #24
 800df86:	d501      	bpl.n	800df8c <_printf_i+0xbc>
 800df88:	681d      	ldr	r5, [r3, #0]
 800df8a:	e003      	b.n	800df94 <_printf_i+0xc4>
 800df8c:	0645      	lsls	r5, r0, #25
 800df8e:	d5fb      	bpl.n	800df88 <_printf_i+0xb8>
 800df90:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df94:	2d00      	cmp	r5, #0
 800df96:	da03      	bge.n	800dfa0 <_printf_i+0xd0>
 800df98:	232d      	movs	r3, #45	@ 0x2d
 800df9a:	426d      	negs	r5, r5
 800df9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfa0:	230a      	movs	r3, #10
 800dfa2:	4859      	ldr	r0, [pc, #356]	@ (800e108 <_printf_i+0x238>)
 800dfa4:	e011      	b.n	800dfca <_printf_i+0xfa>
 800dfa6:	6821      	ldr	r1, [r4, #0]
 800dfa8:	6833      	ldr	r3, [r6, #0]
 800dfaa:	0608      	lsls	r0, r1, #24
 800dfac:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfb0:	d402      	bmi.n	800dfb8 <_printf_i+0xe8>
 800dfb2:	0649      	lsls	r1, r1, #25
 800dfb4:	bf48      	it	mi
 800dfb6:	b2ad      	uxthmi	r5, r5
 800dfb8:	2f6f      	cmp	r7, #111	@ 0x6f
 800dfba:	6033      	str	r3, [r6, #0]
 800dfbc:	bf14      	ite	ne
 800dfbe:	230a      	movne	r3, #10
 800dfc0:	2308      	moveq	r3, #8
 800dfc2:	4851      	ldr	r0, [pc, #324]	@ (800e108 <_printf_i+0x238>)
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dfca:	6866      	ldr	r6, [r4, #4]
 800dfcc:	2e00      	cmp	r6, #0
 800dfce:	bfa8      	it	ge
 800dfd0:	6821      	ldrge	r1, [r4, #0]
 800dfd2:	60a6      	str	r6, [r4, #8]
 800dfd4:	bfa4      	itt	ge
 800dfd6:	f021 0104 	bicge.w	r1, r1, #4
 800dfda:	6021      	strge	r1, [r4, #0]
 800dfdc:	b90d      	cbnz	r5, 800dfe2 <_printf_i+0x112>
 800dfde:	2e00      	cmp	r6, #0
 800dfe0:	d04b      	beq.n	800e07a <_printf_i+0x1aa>
 800dfe2:	4616      	mov	r6, r2
 800dfe4:	fbb5 f1f3 	udiv	r1, r5, r3
 800dfe8:	fb03 5711 	mls	r7, r3, r1, r5
 800dfec:	5dc7      	ldrb	r7, [r0, r7]
 800dfee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dff2:	462f      	mov	r7, r5
 800dff4:	42bb      	cmp	r3, r7
 800dff6:	460d      	mov	r5, r1
 800dff8:	d9f4      	bls.n	800dfe4 <_printf_i+0x114>
 800dffa:	2b08      	cmp	r3, #8
 800dffc:	d10b      	bne.n	800e016 <_printf_i+0x146>
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	07df      	lsls	r7, r3, #31
 800e002:	d508      	bpl.n	800e016 <_printf_i+0x146>
 800e004:	6923      	ldr	r3, [r4, #16]
 800e006:	6861      	ldr	r1, [r4, #4]
 800e008:	4299      	cmp	r1, r3
 800e00a:	bfde      	ittt	le
 800e00c:	2330      	movle	r3, #48	@ 0x30
 800e00e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e012:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e016:	1b92      	subs	r2, r2, r6
 800e018:	6122      	str	r2, [r4, #16]
 800e01a:	464b      	mov	r3, r9
 800e01c:	4621      	mov	r1, r4
 800e01e:	4640      	mov	r0, r8
 800e020:	f8cd a000 	str.w	sl, [sp]
 800e024:	aa03      	add	r2, sp, #12
 800e026:	f7ff fee1 	bl	800ddec <_printf_common>
 800e02a:	3001      	adds	r0, #1
 800e02c:	d14a      	bne.n	800e0c4 <_printf_i+0x1f4>
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e032:	b004      	add	sp, #16
 800e034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	f043 0320 	orr.w	r3, r3, #32
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	2778      	movs	r7, #120	@ 0x78
 800e042:	4832      	ldr	r0, [pc, #200]	@ (800e10c <_printf_i+0x23c>)
 800e044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e048:	6823      	ldr	r3, [r4, #0]
 800e04a:	6831      	ldr	r1, [r6, #0]
 800e04c:	061f      	lsls	r7, r3, #24
 800e04e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e052:	d402      	bmi.n	800e05a <_printf_i+0x18a>
 800e054:	065f      	lsls	r7, r3, #25
 800e056:	bf48      	it	mi
 800e058:	b2ad      	uxthmi	r5, r5
 800e05a:	6031      	str	r1, [r6, #0]
 800e05c:	07d9      	lsls	r1, r3, #31
 800e05e:	bf44      	itt	mi
 800e060:	f043 0320 	orrmi.w	r3, r3, #32
 800e064:	6023      	strmi	r3, [r4, #0]
 800e066:	b11d      	cbz	r5, 800e070 <_printf_i+0x1a0>
 800e068:	2310      	movs	r3, #16
 800e06a:	e7ab      	b.n	800dfc4 <_printf_i+0xf4>
 800e06c:	4826      	ldr	r0, [pc, #152]	@ (800e108 <_printf_i+0x238>)
 800e06e:	e7e9      	b.n	800e044 <_printf_i+0x174>
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	f023 0320 	bic.w	r3, r3, #32
 800e076:	6023      	str	r3, [r4, #0]
 800e078:	e7f6      	b.n	800e068 <_printf_i+0x198>
 800e07a:	4616      	mov	r6, r2
 800e07c:	e7bd      	b.n	800dffa <_printf_i+0x12a>
 800e07e:	6833      	ldr	r3, [r6, #0]
 800e080:	6825      	ldr	r5, [r4, #0]
 800e082:	1d18      	adds	r0, r3, #4
 800e084:	6961      	ldr	r1, [r4, #20]
 800e086:	6030      	str	r0, [r6, #0]
 800e088:	062e      	lsls	r6, r5, #24
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	d501      	bpl.n	800e092 <_printf_i+0x1c2>
 800e08e:	6019      	str	r1, [r3, #0]
 800e090:	e002      	b.n	800e098 <_printf_i+0x1c8>
 800e092:	0668      	lsls	r0, r5, #25
 800e094:	d5fb      	bpl.n	800e08e <_printf_i+0x1be>
 800e096:	8019      	strh	r1, [r3, #0]
 800e098:	2300      	movs	r3, #0
 800e09a:	4616      	mov	r6, r2
 800e09c:	6123      	str	r3, [r4, #16]
 800e09e:	e7bc      	b.n	800e01a <_printf_i+0x14a>
 800e0a0:	6833      	ldr	r3, [r6, #0]
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	1d1a      	adds	r2, r3, #4
 800e0a6:	6032      	str	r2, [r6, #0]
 800e0a8:	681e      	ldr	r6, [r3, #0]
 800e0aa:	6862      	ldr	r2, [r4, #4]
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f000 f877 	bl	800e1a0 <memchr>
 800e0b2:	b108      	cbz	r0, 800e0b8 <_printf_i+0x1e8>
 800e0b4:	1b80      	subs	r0, r0, r6
 800e0b6:	6060      	str	r0, [r4, #4]
 800e0b8:	6863      	ldr	r3, [r4, #4]
 800e0ba:	6123      	str	r3, [r4, #16]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0c2:	e7aa      	b.n	800e01a <_printf_i+0x14a>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	4649      	mov	r1, r9
 800e0c8:	4640      	mov	r0, r8
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	47d0      	blx	sl
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d0ad      	beq.n	800e02e <_printf_i+0x15e>
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	079b      	lsls	r3, r3, #30
 800e0d6:	d413      	bmi.n	800e100 <_printf_i+0x230>
 800e0d8:	68e0      	ldr	r0, [r4, #12]
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	4298      	cmp	r0, r3
 800e0de:	bfb8      	it	lt
 800e0e0:	4618      	movlt	r0, r3
 800e0e2:	e7a6      	b.n	800e032 <_printf_i+0x162>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	4632      	mov	r2, r6
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	47d0      	blx	sl
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	d09d      	beq.n	800e02e <_printf_i+0x15e>
 800e0f2:	3501      	adds	r5, #1
 800e0f4:	68e3      	ldr	r3, [r4, #12]
 800e0f6:	9903      	ldr	r1, [sp, #12]
 800e0f8:	1a5b      	subs	r3, r3, r1
 800e0fa:	42ab      	cmp	r3, r5
 800e0fc:	dcf2      	bgt.n	800e0e4 <_printf_i+0x214>
 800e0fe:	e7eb      	b.n	800e0d8 <_printf_i+0x208>
 800e100:	2500      	movs	r5, #0
 800e102:	f104 0619 	add.w	r6, r4, #25
 800e106:	e7f5      	b.n	800e0f4 <_printf_i+0x224>
 800e108:	0800f140 	.word	0x0800f140
 800e10c:	0800f151 	.word	0x0800f151

0800e110 <_realloc_r>:
 800e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e114:	4680      	mov	r8, r0
 800e116:	4615      	mov	r5, r2
 800e118:	460c      	mov	r4, r1
 800e11a:	b921      	cbnz	r1, 800e126 <_realloc_r+0x16>
 800e11c:	4611      	mov	r1, r2
 800e11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e122:	f7ff bb6d 	b.w	800d800 <_malloc_r>
 800e126:	b92a      	cbnz	r2, 800e134 <_realloc_r+0x24>
 800e128:	f7ff fcc0 	bl	800daac <_free_r>
 800e12c:	2400      	movs	r4, #0
 800e12e:	4620      	mov	r0, r4
 800e130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e134:	f000 f842 	bl	800e1bc <_malloc_usable_size_r>
 800e138:	4285      	cmp	r5, r0
 800e13a:	4606      	mov	r6, r0
 800e13c:	d802      	bhi.n	800e144 <_realloc_r+0x34>
 800e13e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e142:	d8f4      	bhi.n	800e12e <_realloc_r+0x1e>
 800e144:	4629      	mov	r1, r5
 800e146:	4640      	mov	r0, r8
 800e148:	f7ff fb5a 	bl	800d800 <_malloc_r>
 800e14c:	4607      	mov	r7, r0
 800e14e:	2800      	cmp	r0, #0
 800e150:	d0ec      	beq.n	800e12c <_realloc_r+0x1c>
 800e152:	42b5      	cmp	r5, r6
 800e154:	462a      	mov	r2, r5
 800e156:	4621      	mov	r1, r4
 800e158:	bf28      	it	cs
 800e15a:	4632      	movcs	r2, r6
 800e15c:	f7ff fc98 	bl	800da90 <memcpy>
 800e160:	4621      	mov	r1, r4
 800e162:	4640      	mov	r0, r8
 800e164:	f7ff fca2 	bl	800daac <_free_r>
 800e168:	463c      	mov	r4, r7
 800e16a:	e7e0      	b.n	800e12e <_realloc_r+0x1e>

0800e16c <memmove>:
 800e16c:	4288      	cmp	r0, r1
 800e16e:	b510      	push	{r4, lr}
 800e170:	eb01 0402 	add.w	r4, r1, r2
 800e174:	d902      	bls.n	800e17c <memmove+0x10>
 800e176:	4284      	cmp	r4, r0
 800e178:	4623      	mov	r3, r4
 800e17a:	d807      	bhi.n	800e18c <memmove+0x20>
 800e17c:	1e43      	subs	r3, r0, #1
 800e17e:	42a1      	cmp	r1, r4
 800e180:	d008      	beq.n	800e194 <memmove+0x28>
 800e182:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e18a:	e7f8      	b.n	800e17e <memmove+0x12>
 800e18c:	4601      	mov	r1, r0
 800e18e:	4402      	add	r2, r0
 800e190:	428a      	cmp	r2, r1
 800e192:	d100      	bne.n	800e196 <memmove+0x2a>
 800e194:	bd10      	pop	{r4, pc}
 800e196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e19a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e19e:	e7f7      	b.n	800e190 <memmove+0x24>

0800e1a0 <memchr>:
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	b510      	push	{r4, lr}
 800e1a4:	b2c9      	uxtb	r1, r1
 800e1a6:	4402      	add	r2, r0
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	d101      	bne.n	800e1b2 <memchr+0x12>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	e003      	b.n	800e1ba <memchr+0x1a>
 800e1b2:	7804      	ldrb	r4, [r0, #0]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	428c      	cmp	r4, r1
 800e1b8:	d1f6      	bne.n	800e1a8 <memchr+0x8>
 800e1ba:	bd10      	pop	{r4, pc}

0800e1bc <_malloc_usable_size_r>:
 800e1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1c0:	1f18      	subs	r0, r3, #4
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	bfbc      	itt	lt
 800e1c6:	580b      	ldrlt	r3, [r1, r0]
 800e1c8:	18c0      	addlt	r0, r0, r3
 800e1ca:	4770      	bx	lr

0800e1cc <_init>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	bf00      	nop
 800e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d2:	bc08      	pop	{r3}
 800e1d4:	469e      	mov	lr, r3
 800e1d6:	4770      	bx	lr

0800e1d8 <_fini>:
 800e1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1da:	bf00      	nop
 800e1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1de:	bc08      	pop	{r3}
 800e1e0:	469e      	mov	lr, r3
 800e1e2:	4770      	bx	lr
